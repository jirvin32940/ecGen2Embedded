
ecgen2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000ad0c  00400000  00400000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0040ad0c  0040ad0c  00012d0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000904  20400000  0040ad14  00018000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          000009fc  20400904  0040b618  00018904  2**2
                  ALLOC
  4 .stack        00002000  20401300  0040c014  00018904  2**0
                  ALLOC
  5 .heap         00000200  20403300  0040e014  00018904  2**0
                  ALLOC
  6 .ARM.attributes 00000033  00000000  00000000  00018904  2**0
                  CONTENTS, READONLY
  7 .comment      0000005b  00000000  00000000  00018937  2**0
                  CONTENTS, READONLY
  8 .debug_info   00011e9d  00000000  00000000  00018992  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000024a7  00000000  00000000  0002a82f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000a086  00000000  00000000  0002ccd6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000010e0  00000000  00000000  00036d5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000f98  00000000  00000000  00037e3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0001fd73  00000000  00000000  00038dd4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000ee4c  00000000  00000000  00058b47  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0008d554  00000000  00000000  00067993  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  000057e8  00000000  00000000  000f4ee8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <_sfixed>:
  400000:	20403300 	.word	0x20403300
  400004:	00402365 	.word	0x00402365
  400008:	004023e9 	.word	0x004023e9
  40000c:	004023e9 	.word	0x004023e9
  400010:	004023e9 	.word	0x004023e9
  400014:	004023e9 	.word	0x004023e9
  400018:	004023e9 	.word	0x004023e9
	...
  40002c:	004023e9 	.word	0x004023e9
  400030:	004023e9 	.word	0x004023e9
  400034:	00000000 	.word	0x00000000
  400038:	004023e9 	.word	0x004023e9
  40003c:	00403c81 	.word	0x00403c81
  400040:	004023e9 	.word	0x004023e9
  400044:	004023e9 	.word	0x004023e9
  400048:	004023e9 	.word	0x004023e9
  40004c:	004023e9 	.word	0x004023e9
  400050:	004023e9 	.word	0x004023e9
  400054:	004023e9 	.word	0x004023e9
  400058:	004023e9 	.word	0x004023e9
  40005c:	004023e9 	.word	0x004023e9
  400060:	004023e9 	.word	0x004023e9
  400064:	00000000 	.word	0x00000000
  400068:	0040139d 	.word	0x0040139d
  40006c:	004013b5 	.word	0x004013b5
  400070:	004013cd 	.word	0x004013cd
  400074:	00403d71 	.word	0x00403d71
  400078:	004023e9 	.word	0x004023e9
  40007c:	004023e9 	.word	0x004023e9
  400080:	004013e5 	.word	0x004013e5
  400084:	004013fd 	.word	0x004013fd
  400088:	004023e9 	.word	0x004023e9
  40008c:	004023e9 	.word	0x004023e9
  400090:	004023e9 	.word	0x004023e9
  400094:	004023e9 	.word	0x004023e9
  400098:	004023e9 	.word	0x004023e9
  40009c:	004023e9 	.word	0x004023e9
  4000a0:	004023e9 	.word	0x004023e9
  4000a4:	004023e9 	.word	0x004023e9
  4000a8:	004023e9 	.word	0x004023e9
  4000ac:	004023e9 	.word	0x004023e9
  4000b0:	004023e9 	.word	0x004023e9
  4000b4:	00401269 	.word	0x00401269
  4000b8:	004023e9 	.word	0x004023e9
  4000bc:	004040c5 	.word	0x004040c5
  4000c0:	004023e9 	.word	0x004023e9
  4000c4:	004023e9 	.word	0x004023e9
  4000c8:	004023e9 	.word	0x004023e9
  4000cc:	004023e9 	.word	0x004023e9
  4000d0:	00000000 	.word	0x00000000
  4000d4:	004023e9 	.word	0x004023e9
  4000d8:	00000000 	.word	0x00000000
  4000dc:	004023e9 	.word	0x004023e9
  4000e0:	0040127d 	.word	0x0040127d
  4000e4:	004023e9 	.word	0x004023e9
  4000e8:	004023e9 	.word	0x004023e9
  4000ec:	004023e9 	.word	0x004023e9
  4000f0:	004023e9 	.word	0x004023e9
  4000f4:	004023e9 	.word	0x004023e9
  4000f8:	004023e9 	.word	0x004023e9
  4000fc:	004023e9 	.word	0x004023e9
  400100:	004023e9 	.word	0x004023e9
  400104:	004023e9 	.word	0x004023e9
  400108:	004023e9 	.word	0x004023e9
  40010c:	004023e9 	.word	0x004023e9
  400110:	004023e9 	.word	0x004023e9
	...
  400120:	004023e9 	.word	0x004023e9
  400124:	004023e9 	.word	0x004023e9
  400128:	004023e9 	.word	0x004023e9
  40012c:	004023e9 	.word	0x004023e9
  400130:	004023e9 	.word	0x004023e9
  400134:	00000000 	.word	0x00000000
  400138:	004023e9 	.word	0x004023e9
  40013c:	004023e9 	.word	0x004023e9

00400140 <__do_global_dtors_aux>:
  400140:	b510      	push	{r4, lr}
  400142:	4c05      	ldr	r4, [pc, #20]	; (400158 <__do_global_dtors_aux+0x18>)
  400144:	7823      	ldrb	r3, [r4, #0]
  400146:	b933      	cbnz	r3, 400156 <__do_global_dtors_aux+0x16>
  400148:	4b04      	ldr	r3, [pc, #16]	; (40015c <__do_global_dtors_aux+0x1c>)
  40014a:	b113      	cbz	r3, 400152 <__do_global_dtors_aux+0x12>
  40014c:	4804      	ldr	r0, [pc, #16]	; (400160 <__do_global_dtors_aux+0x20>)
  40014e:	f3af 8000 	nop.w
  400152:	2301      	movs	r3, #1
  400154:	7023      	strb	r3, [r4, #0]
  400156:	bd10      	pop	{r4, pc}
  400158:	20400904 	.word	0x20400904
  40015c:	00000000 	.word	0x00000000
  400160:	0040ad14 	.word	0x0040ad14

00400164 <frame_dummy>:
  400164:	4b08      	ldr	r3, [pc, #32]	; (400188 <frame_dummy+0x24>)
  400166:	b510      	push	{r4, lr}
  400168:	b11b      	cbz	r3, 400172 <frame_dummy+0xe>
  40016a:	4808      	ldr	r0, [pc, #32]	; (40018c <frame_dummy+0x28>)
  40016c:	4908      	ldr	r1, [pc, #32]	; (400190 <frame_dummy+0x2c>)
  40016e:	f3af 8000 	nop.w
  400172:	4808      	ldr	r0, [pc, #32]	; (400194 <frame_dummy+0x30>)
  400174:	6803      	ldr	r3, [r0, #0]
  400176:	b903      	cbnz	r3, 40017a <frame_dummy+0x16>
  400178:	bd10      	pop	{r4, pc}
  40017a:	4b07      	ldr	r3, [pc, #28]	; (400198 <frame_dummy+0x34>)
  40017c:	2b00      	cmp	r3, #0
  40017e:	d0fb      	beq.n	400178 <frame_dummy+0x14>
  400180:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400184:	4718      	bx	r3
  400186:	bf00      	nop
  400188:	00000000 	.word	0x00000000
  40018c:	0040ad14 	.word	0x0040ad14
  400190:	20400908 	.word	0x20400908
  400194:	0040ad14 	.word	0x0040ad14
  400198:	00000000 	.word	0x00000000

0040019c <osc_enable>:
#define OSC_MAINCK_XTAL_HZ      BOARD_FREQ_MAINCK_XTAL    //!< External crystal oscillator.
#define OSC_MAINCK_BYPASS_HZ    BOARD_FREQ_MAINCK_BYPASS  //!< External bypass oscillator.
//@}

static inline void osc_enable(uint32_t ul_id)
{
  40019c:	b580      	push	{r7, lr}
  40019e:	b082      	sub	sp, #8
  4001a0:	af00      	add	r7, sp, #0
  4001a2:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  4001a4:	687b      	ldr	r3, [r7, #4]
  4001a6:	2b07      	cmp	r3, #7
  4001a8:	d830      	bhi.n	40020c <osc_enable+0x70>
  4001aa:	a201      	add	r2, pc, #4	; (adr r2, 4001b0 <osc_enable+0x14>)
  4001ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4001b0:	0040020d 	.word	0x0040020d
  4001b4:	004001d1 	.word	0x004001d1
  4001b8:	004001d9 	.word	0x004001d9
  4001bc:	004001e1 	.word	0x004001e1
  4001c0:	004001e9 	.word	0x004001e9
  4001c4:	004001f1 	.word	0x004001f1
  4001c8:	004001f9 	.word	0x004001f9
  4001cc:	00400203 	.word	0x00400203
	case OSC_SLCK_32K_RC:
		break;

	case OSC_SLCK_32K_XTAL:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
  4001d0:	2000      	movs	r0, #0
  4001d2:	4b10      	ldr	r3, [pc, #64]	; (400214 <osc_enable+0x78>)
  4001d4:	4798      	blx	r3
		break;
  4001d6:	e019      	b.n	40020c <osc_enable+0x70>

	case OSC_SLCK_32K_BYPASS:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
  4001d8:	2001      	movs	r0, #1
  4001da:	4b0e      	ldr	r3, [pc, #56]	; (400214 <osc_enable+0x78>)
  4001dc:	4798      	blx	r3
		break;
  4001de:	e015      	b.n	40020c <osc_enable+0x70>


	case OSC_MAINCK_4M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
  4001e0:	2000      	movs	r0, #0
  4001e2:	4b0d      	ldr	r3, [pc, #52]	; (400218 <osc_enable+0x7c>)
  4001e4:	4798      	blx	r3
		break;
  4001e6:	e011      	b.n	40020c <osc_enable+0x70>

	case OSC_MAINCK_8M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
  4001e8:	2010      	movs	r0, #16
  4001ea:	4b0b      	ldr	r3, [pc, #44]	; (400218 <osc_enable+0x7c>)
  4001ec:	4798      	blx	r3
		break;
  4001ee:	e00d      	b.n	40020c <osc_enable+0x70>

	case OSC_MAINCK_12M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
  4001f0:	2020      	movs	r0, #32
  4001f2:	4b09      	ldr	r3, [pc, #36]	; (400218 <osc_enable+0x7c>)
  4001f4:	4798      	blx	r3
		break;
  4001f6:	e009      	b.n	40020c <osc_enable+0x70>


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  4001f8:	2000      	movs	r0, #0
  4001fa:	213e      	movs	r1, #62	; 0x3e
  4001fc:	4b07      	ldr	r3, [pc, #28]	; (40021c <osc_enable+0x80>)
  4001fe:	4798      	blx	r3
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
  400200:	e004      	b.n	40020c <osc_enable+0x70>

	case OSC_MAINCK_BYPASS:
		pmc_switch_mainck_to_xtal(PMC_OSC_BYPASS,
  400202:	2001      	movs	r0, #1
  400204:	213e      	movs	r1, #62	; 0x3e
  400206:	4b05      	ldr	r3, [pc, #20]	; (40021c <osc_enable+0x80>)
  400208:	4798      	blx	r3
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
  40020a:	bf00      	nop
	}
}
  40020c:	3708      	adds	r7, #8
  40020e:	46bd      	mov	sp, r7
  400210:	bd80      	pop	{r7, pc}
  400212:	bf00      	nop
  400214:	00401511 	.word	0x00401511
  400218:	0040157d 	.word	0x0040157d
  40021c:	004015ed 	.word	0x004015ed

00400220 <osc_is_ready>:
		break;
	}
}

static inline bool osc_is_ready(uint32_t ul_id)
{
  400220:	b580      	push	{r7, lr}
  400222:	b082      	sub	sp, #8
  400224:	af00      	add	r7, sp, #0
  400226:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  400228:	687b      	ldr	r3, [r7, #4]
  40022a:	2b07      	cmp	r3, #7
  40022c:	d826      	bhi.n	40027c <osc_is_ready+0x5c>
  40022e:	a201      	add	r2, pc, #4	; (adr r2, 400234 <osc_is_ready+0x14>)
  400230:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  400234:	00400255 	.word	0x00400255
  400238:	00400259 	.word	0x00400259
  40023c:	00400259 	.word	0x00400259
  400240:	0040026b 	.word	0x0040026b
  400244:	0040026b 	.word	0x0040026b
  400248:	0040026b 	.word	0x0040026b
  40024c:	0040026b 	.word	0x0040026b
  400250:	0040026b 	.word	0x0040026b
	case OSC_SLCK_32K_RC:
		return 1;
  400254:	2301      	movs	r3, #1
  400256:	e012      	b.n	40027e <osc_is_ready+0x5e>

	case OSC_SLCK_32K_XTAL:
	case OSC_SLCK_32K_BYPASS:
		return pmc_osc_is_ready_32kxtal();
  400258:	4b0b      	ldr	r3, [pc, #44]	; (400288 <osc_is_ready+0x68>)
  40025a:	4798      	blx	r3
  40025c:	4603      	mov	r3, r0
  40025e:	2b00      	cmp	r3, #0
  400260:	bf14      	ite	ne
  400262:	2301      	movne	r3, #1
  400264:	2300      	moveq	r3, #0
  400266:	b2db      	uxtb	r3, r3
  400268:	e009      	b.n	40027e <osc_is_ready+0x5e>
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  40026a:	4b08      	ldr	r3, [pc, #32]	; (40028c <osc_is_ready+0x6c>)
  40026c:	4798      	blx	r3
  40026e:	4603      	mov	r3, r0
  400270:	2b00      	cmp	r3, #0
  400272:	bf14      	ite	ne
  400274:	2301      	movne	r3, #1
  400276:	2300      	moveq	r3, #0
  400278:	b2db      	uxtb	r3, r3
  40027a:	e000      	b.n	40027e <osc_is_ready+0x5e>
	}

	return 0;
  40027c:	2300      	movs	r3, #0
}
  40027e:	4618      	mov	r0, r3
  400280:	3708      	adds	r7, #8
  400282:	46bd      	mov	sp, r7
  400284:	bd80      	pop	{r7, pc}
  400286:	bf00      	nop
  400288:	00401549 	.word	0x00401549
  40028c:	00401665 	.word	0x00401665

00400290 <osc_get_rate>:

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  400290:	b480      	push	{r7}
  400292:	b083      	sub	sp, #12
  400294:	af00      	add	r7, sp, #0
  400296:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  400298:	687b      	ldr	r3, [r7, #4]
  40029a:	2b07      	cmp	r3, #7
  40029c:	d825      	bhi.n	4002ea <osc_get_rate+0x5a>
  40029e:	a201      	add	r2, pc, #4	; (adr r2, 4002a4 <osc_get_rate+0x14>)
  4002a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4002a4:	004002c5 	.word	0x004002c5
  4002a8:	004002cb 	.word	0x004002cb
  4002ac:	004002d1 	.word	0x004002d1
  4002b0:	004002d7 	.word	0x004002d7
  4002b4:	004002db 	.word	0x004002db
  4002b8:	004002df 	.word	0x004002df
  4002bc:	004002e3 	.word	0x004002e3
  4002c0:	004002e7 	.word	0x004002e7
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  4002c4:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  4002c8:	e010      	b.n	4002ec <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  4002ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4002ce:	e00d      	b.n	4002ec <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  4002d0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4002d4:	e00a      	b.n	4002ec <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  4002d6:	4b08      	ldr	r3, [pc, #32]	; (4002f8 <osc_get_rate+0x68>)
  4002d8:	e008      	b.n	4002ec <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  4002da:	4b08      	ldr	r3, [pc, #32]	; (4002fc <osc_get_rate+0x6c>)
  4002dc:	e006      	b.n	4002ec <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  4002de:	4b08      	ldr	r3, [pc, #32]	; (400300 <osc_get_rate+0x70>)
  4002e0:	e004      	b.n	4002ec <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  4002e2:	4b08      	ldr	r3, [pc, #32]	; (400304 <osc_get_rate+0x74>)
  4002e4:	e002      	b.n	4002ec <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  4002e6:	4b06      	ldr	r3, [pc, #24]	; (400300 <osc_get_rate+0x70>)
  4002e8:	e000      	b.n	4002ec <osc_get_rate+0x5c>
	}

	return 0;
  4002ea:	2300      	movs	r3, #0
}
  4002ec:	4618      	mov	r0, r3
  4002ee:	370c      	adds	r7, #12
  4002f0:	46bd      	mov	sp, r7
  4002f2:	f85d 7b04 	ldr.w	r7, [sp], #4
  4002f6:	4770      	bx	lr
  4002f8:	003d0900 	.word	0x003d0900
  4002fc:	007a1200 	.word	0x007a1200
  400300:	00b71b00 	.word	0x00b71b00
  400304:	00f42400 	.word	0x00f42400

00400308 <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
  400308:	b580      	push	{r7, lr}
  40030a:	b082      	sub	sp, #8
  40030c:	af00      	add	r7, sp, #0
  40030e:	4603      	mov	r3, r0
  400310:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
  400312:	bf00      	nop
  400314:	79fb      	ldrb	r3, [r7, #7]
  400316:	4618      	mov	r0, r3
  400318:	4b05      	ldr	r3, [pc, #20]	; (400330 <osc_wait_ready+0x28>)
  40031a:	4798      	blx	r3
  40031c:	4603      	mov	r3, r0
  40031e:	f083 0301 	eor.w	r3, r3, #1
  400322:	b2db      	uxtb	r3, r3
  400324:	2b00      	cmp	r3, #0
  400326:	d1f5      	bne.n	400314 <osc_wait_ready+0xc>
		/* Do nothing */
	}
}
  400328:	3708      	adds	r7, #8
  40032a:	46bd      	mov	sp, r7
  40032c:	bd80      	pop	{r7, pc}
  40032e:	bf00      	nop
  400330:	00400221 	.word	0x00400221

00400334 <pll_config_init>:
 * hardware mul+1 is hidden in this implementation. Use mul as mul effective
 * value.
 */
static inline void pll_config_init(struct pll_config *p_cfg,
		enum pll_source e_src, uint32_t ul_div, uint32_t ul_mul)
{
  400334:	b580      	push	{r7, lr}
  400336:	b086      	sub	sp, #24
  400338:	af00      	add	r7, sp, #0
  40033a:	60f8      	str	r0, [r7, #12]
  40033c:	607a      	str	r2, [r7, #4]
  40033e:	603b      	str	r3, [r7, #0]
  400340:	460b      	mov	r3, r1
  400342:	72fb      	strb	r3, [r7, #11]
	uint32_t vco_hz;

	Assert(e_src < PLL_NR_SOURCES);

	if (ul_div == 0 && ul_mul == 0) { /* Must only be true for UTMI PLL */
  400344:	687b      	ldr	r3, [r7, #4]
  400346:	2b00      	cmp	r3, #0
  400348:	d107      	bne.n	40035a <pll_config_init+0x26>
  40034a:	683b      	ldr	r3, [r7, #0]
  40034c:	2b00      	cmp	r3, #0
  40034e:	d104      	bne.n	40035a <pll_config_init+0x26>
		p_cfg->ctrl = CKGR_UCKR_UPLLCOUNT(PLL_COUNT);
  400350:	68fb      	ldr	r3, [r7, #12]
  400352:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
  400356:	601a      	str	r2, [r3, #0]
  400358:	e019      	b.n	40038e <pll_config_init+0x5a>
	} else { /* PLLA */
	/* Calculate internal VCO frequency */
	vco_hz = osc_get_rate(e_src) / ul_div;
  40035a:	7afb      	ldrb	r3, [r7, #11]
  40035c:	4618      	mov	r0, r3
  40035e:	4b0d      	ldr	r3, [pc, #52]	; (400394 <pll_config_init+0x60>)
  400360:	4798      	blx	r3
  400362:	4602      	mov	r2, r0
  400364:	687b      	ldr	r3, [r7, #4]
  400366:	fbb2 f3f3 	udiv	r3, r2, r3
  40036a:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_INPUT_MIN_HZ);
	Assert(vco_hz <= PLL_INPUT_MAX_HZ);

	vco_hz *= ul_mul;
  40036c:	697b      	ldr	r3, [r7, #20]
  40036e:	683a      	ldr	r2, [r7, #0]
  400370:	fb02 f303 	mul.w	r3, r2, r3
  400374:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_OUTPUT_MIN_HZ);
	Assert(vco_hz <= PLL_OUTPUT_MAX_HZ);

	/* PMC hardware will automatically make it mul+1 */
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) | CKGR_PLLAR_DIVA(ul_div)  \
  400376:	683b      	ldr	r3, [r7, #0]
  400378:	3b01      	subs	r3, #1
  40037a:	041a      	lsls	r2, r3, #16
  40037c:	4b06      	ldr	r3, [pc, #24]	; (400398 <pll_config_init+0x64>)
  40037e:	4013      	ands	r3, r2
  400380:	687a      	ldr	r2, [r7, #4]
  400382:	b2d2      	uxtb	r2, r2
  400384:	4313      	orrs	r3, r2
		| CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
  400386:	f443 527c 	orr.w	r2, r3, #16128	; 0x3f00
	vco_hz *= ul_mul;
	Assert(vco_hz >= PLL_OUTPUT_MIN_HZ);
	Assert(vco_hz <= PLL_OUTPUT_MAX_HZ);

	/* PMC hardware will automatically make it mul+1 */
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) | CKGR_PLLAR_DIVA(ul_div)  \
  40038a:	68fb      	ldr	r3, [r7, #12]
  40038c:	601a      	str	r2, [r3, #0]
		| CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
	}
}
  40038e:	3718      	adds	r7, #24
  400390:	46bd      	mov	sp, r7
  400392:	bd80      	pop	{r7, pc}
  400394:	00400291 	.word	0x00400291
  400398:	07ff0000 	.word	0x07ff0000

0040039c <pll_enable>:
		PMC->CKGR_UCKR = p_cfg->ctrl;
	}
}

static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
  40039c:	b580      	push	{r7, lr}
  40039e:	b082      	sub	sp, #8
  4003a0:	af00      	add	r7, sp, #0
  4003a2:	6078      	str	r0, [r7, #4]
  4003a4:	6039      	str	r1, [r7, #0]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  4003a6:	683b      	ldr	r3, [r7, #0]
  4003a8:	2b00      	cmp	r3, #0
  4003aa:	d108      	bne.n	4003be <pll_enable+0x22>
		pmc_disable_pllack(); // Always stop PLL first!
  4003ac:	4b08      	ldr	r3, [pc, #32]	; (4003d0 <pll_enable+0x34>)
  4003ae:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  4003b0:	4a08      	ldr	r2, [pc, #32]	; (4003d4 <pll_enable+0x38>)
  4003b2:	687b      	ldr	r3, [r7, #4]
  4003b4:	681b      	ldr	r3, [r3, #0]
  4003b6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  4003ba:	6293      	str	r3, [r2, #40]	; 0x28
  4003bc:	e005      	b.n	4003ca <pll_enable+0x2e>
	} else {
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
  4003be:	4a05      	ldr	r2, [pc, #20]	; (4003d4 <pll_enable+0x38>)
  4003c0:	687b      	ldr	r3, [r7, #4]
  4003c2:	681b      	ldr	r3, [r3, #0]
  4003c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  4003c8:	61d3      	str	r3, [r2, #28]
	}
}
  4003ca:	3708      	adds	r7, #8
  4003cc:	46bd      	mov	sp, r7
  4003ce:	bd80      	pop	{r7, pc}
  4003d0:	00401681 	.word	0x00401681
  4003d4:	400e0600 	.word	0x400e0600

004003d8 <pll_is_locked>:
		PMC->CKGR_UCKR &= ~CKGR_UCKR_UPLLEN;
	}
}

static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
  4003d8:	b580      	push	{r7, lr}
  4003da:	b082      	sub	sp, #8
  4003dc:	af00      	add	r7, sp, #0
  4003de:	6078      	str	r0, [r7, #4]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  4003e0:	687b      	ldr	r3, [r7, #4]
  4003e2:	2b00      	cmp	r3, #0
  4003e4:	d103      	bne.n	4003ee <pll_is_locked+0x16>
	return pmc_is_locked_pllack();
  4003e6:	4b05      	ldr	r3, [pc, #20]	; (4003fc <pll_is_locked+0x24>)
  4003e8:	4798      	blx	r3
  4003ea:	4603      	mov	r3, r0
  4003ec:	e002      	b.n	4003f4 <pll_is_locked+0x1c>
	} else {
		return pmc_is_locked_upll();
  4003ee:	4b04      	ldr	r3, [pc, #16]	; (400400 <pll_is_locked+0x28>)
  4003f0:	4798      	blx	r3
  4003f2:	4603      	mov	r3, r0
	}
}
  4003f4:	4618      	mov	r0, r3
  4003f6:	3708      	adds	r7, #8
  4003f8:	46bd      	mov	sp, r7
  4003fa:	bd80      	pop	{r7, pc}
  4003fc:	00401699 	.word	0x00401699
  400400:	004016b5 	.word	0x004016b5

00400404 <pll_enable_source>:

static inline void pll_enable_source(enum pll_source e_src)
{
  400404:	b580      	push	{r7, lr}
  400406:	b082      	sub	sp, #8
  400408:	af00      	add	r7, sp, #0
  40040a:	4603      	mov	r3, r0
  40040c:	71fb      	strb	r3, [r7, #7]
	switch (e_src) {
  40040e:	79fb      	ldrb	r3, [r7, #7]
  400410:	3b03      	subs	r3, #3
  400412:	2b04      	cmp	r3, #4
  400414:	d808      	bhi.n	400428 <pll_enable_source+0x24>
	case PLL_SRC_MAINCK_4M_RC:
	case PLL_SRC_MAINCK_8M_RC:
	case PLL_SRC_MAINCK_12M_RC:
	case PLL_SRC_MAINCK_XTAL:
	case PLL_SRC_MAINCK_BYPASS:
		osc_enable(e_src);
  400416:	79fb      	ldrb	r3, [r7, #7]
  400418:	4618      	mov	r0, r3
  40041a:	4b05      	ldr	r3, [pc, #20]	; (400430 <pll_enable_source+0x2c>)
  40041c:	4798      	blx	r3
		osc_wait_ready(e_src);
  40041e:	79fb      	ldrb	r3, [r7, #7]
  400420:	4618      	mov	r0, r3
  400422:	4b04      	ldr	r3, [pc, #16]	; (400434 <pll_enable_source+0x30>)
  400424:	4798      	blx	r3
		break;
  400426:	e000      	b.n	40042a <pll_enable_source+0x26>

	default:
		Assert(false);
		break;
  400428:	bf00      	nop
	}
}
  40042a:	3708      	adds	r7, #8
  40042c:	46bd      	mov	sp, r7
  40042e:	bd80      	pop	{r7, pc}
  400430:	0040019d 	.word	0x0040019d
  400434:	00400309 	.word	0x00400309

00400438 <pll_wait_for_lock>:
 *
 * \retval STATUS_OK The PLL is now locked.
 * \retval ERR_TIMEOUT Timed out waiting for PLL to become locked.
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
  400438:	b580      	push	{r7, lr}
  40043a:	b082      	sub	sp, #8
  40043c:	af00      	add	r7, sp, #0
  40043e:	6078      	str	r0, [r7, #4]
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  400440:	bf00      	nop
  400442:	6878      	ldr	r0, [r7, #4]
  400444:	4b04      	ldr	r3, [pc, #16]	; (400458 <pll_wait_for_lock+0x20>)
  400446:	4798      	blx	r3
  400448:	4603      	mov	r3, r0
  40044a:	2b00      	cmp	r3, #0
  40044c:	d0f9      	beq.n	400442 <pll_wait_for_lock+0xa>
		/* Do nothing */
	}

	return 0;
  40044e:	2300      	movs	r3, #0
}
  400450:	4618      	mov	r0, r3
  400452:	3708      	adds	r7, #8
  400454:	46bd      	mov	sp, r7
  400456:	bd80      	pop	{r7, pc}
  400458:	004003d9 	.word	0x004003d9

0040045c <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  40045c:	b580      	push	{r7, lr}
  40045e:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  400460:	2006      	movs	r0, #6
  400462:	4b05      	ldr	r3, [pc, #20]	; (400478 <sysclk_get_main_hz+0x1c>)
  400464:	4798      	blx	r3
  400466:	4602      	mov	r2, r0
  400468:	4613      	mov	r3, r2
  40046a:	009b      	lsls	r3, r3, #2
  40046c:	4413      	add	r3, r2
  40046e:	009a      	lsls	r2, r3, #2
  400470:	4413      	add	r3, r2
  400472:	089b      	lsrs	r3, r3, #2
#endif
	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  400474:	4618      	mov	r0, r3
  400476:	bd80      	pop	{r7, pc}
  400478:	00400291 	.word	0x00400291

0040047c <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
  40047c:	b580      	push	{r7, lr}
  40047e:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  400480:	4b02      	ldr	r3, [pc, #8]	; (40048c <sysclk_get_cpu_hz+0x10>)
  400482:	4798      	blx	r3
  400484:	4603      	mov	r3, r0
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  400486:	4618      	mov	r0, r3
  400488:	bd80      	pop	{r7, pc}
  40048a:	bf00      	nop
  40048c:	0040045d 	.word	0x0040045d

00400490 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  400490:	b590      	push	{r4, r7, lr}
  400492:	b083      	sub	sp, #12
  400494:	af00      	add	r7, sp, #0
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  400496:	4813      	ldr	r0, [pc, #76]	; (4004e4 <sysclk_init+0x54>)
  400498:	4b13      	ldr	r3, [pc, #76]	; (4004e8 <sysclk_init+0x58>)
  40049a:	4798      	blx	r3
		pmc_switch_mck_to_mainck(CONFIG_SYSCLK_PRES);
	}

#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
  40049c:	2006      	movs	r0, #6
  40049e:	4b13      	ldr	r3, [pc, #76]	; (4004ec <sysclk_init+0x5c>)
  4004a0:	4798      	blx	r3
		pll_config_defaults(&pllcfg, 0);
  4004a2:	1d3b      	adds	r3, r7, #4
  4004a4:	4618      	mov	r0, r3
  4004a6:	2106      	movs	r1, #6
  4004a8:	2204      	movs	r2, #4
  4004aa:	2319      	movs	r3, #25
  4004ac:	4c10      	ldr	r4, [pc, #64]	; (4004f0 <sysclk_init+0x60>)
  4004ae:	47a0      	blx	r4
		pll_enable(&pllcfg, 0);
  4004b0:	1d3b      	adds	r3, r7, #4
  4004b2:	4618      	mov	r0, r3
  4004b4:	2100      	movs	r1, #0
  4004b6:	4b0f      	ldr	r3, [pc, #60]	; (4004f4 <sysclk_init+0x64>)
  4004b8:	4798      	blx	r3
		pll_wait_for_lock(0);
  4004ba:	2000      	movs	r0, #0
  4004bc:	4b0e      	ldr	r3, [pc, #56]	; (4004f8 <sysclk_init+0x68>)
  4004be:	4798      	blx	r3
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  4004c0:	2001      	movs	r0, #1
  4004c2:	4b0e      	ldr	r3, [pc, #56]	; (4004fc <sysclk_init+0x6c>)
  4004c4:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  4004c6:	2000      	movs	r0, #0
  4004c8:	4b0d      	ldr	r3, [pc, #52]	; (400500 <sysclk_init+0x70>)
  4004ca:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  4004cc:	4b0d      	ldr	r3, [pc, #52]	; (400504 <sysclk_init+0x74>)
  4004ce:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  4004d0:	4b0d      	ldr	r3, [pc, #52]	; (400508 <sysclk_init+0x78>)
  4004d2:	4798      	blx	r3
  4004d4:	4603      	mov	r3, r0
  4004d6:	4618      	mov	r0, r3
  4004d8:	4b03      	ldr	r3, [pc, #12]	; (4004e8 <sysclk_init+0x58>)
  4004da:	4798      	blx	r3

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
  4004dc:	370c      	adds	r7, #12
  4004de:	46bd      	mov	sp, r7
  4004e0:	bd90      	pop	{r4, r7, pc}
  4004e2:	bf00      	nop
  4004e4:	11e1a300 	.word	0x11e1a300
  4004e8:	00402559 	.word	0x00402559
  4004ec:	00400405 	.word	0x00400405
  4004f0:	00400335 	.word	0x00400335
  4004f4:	0040039d 	.word	0x0040039d
  4004f8:	00400439 	.word	0x00400439
  4004fc:	00401415 	.word	0x00401415
  400500:	0040148d 	.word	0x0040148d
  400504:	004023f1 	.word	0x004023f1
  400508:	0040047d 	.word	0x0040047d

0040050c <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  40050c:	b580      	push	{r7, lr}
  40050e:	b086      	sub	sp, #24
  400510:	af00      	add	r7, sp, #0
  400512:	60f8      	str	r0, [r7, #12]
  400514:	60b9      	str	r1, [r7, #8]
  400516:	607a      	str	r2, [r7, #4]
	int nChars = 0;
  400518:	2300      	movs	r3, #0
  40051a:	617b      	str	r3, [r7, #20]

	if (file != 0) {
  40051c:	68fb      	ldr	r3, [r7, #12]
  40051e:	2b00      	cmp	r3, #0
  400520:	d002      	beq.n	400528 <_read+0x1c>
		return -1;
  400522:	f04f 33ff 	mov.w	r3, #4294967295
  400526:	e014      	b.n	400552 <_read+0x46>
	}

	for (; len > 0; --len) {
  400528:	e00f      	b.n	40054a <_read+0x3e>
		ptr_get(stdio_base, ptr);
  40052a:	4b0c      	ldr	r3, [pc, #48]	; (40055c <_read+0x50>)
  40052c:	681b      	ldr	r3, [r3, #0]
  40052e:	4a0c      	ldr	r2, [pc, #48]	; (400560 <_read+0x54>)
  400530:	6812      	ldr	r2, [r2, #0]
  400532:	4610      	mov	r0, r2
  400534:	68b9      	ldr	r1, [r7, #8]
  400536:	4798      	blx	r3
		ptr++;
  400538:	68bb      	ldr	r3, [r7, #8]
  40053a:	3301      	adds	r3, #1
  40053c:	60bb      	str	r3, [r7, #8]
		nChars++;
  40053e:	697b      	ldr	r3, [r7, #20]
  400540:	3301      	adds	r3, #1
  400542:	617b      	str	r3, [r7, #20]

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
  400544:	687b      	ldr	r3, [r7, #4]
  400546:	3b01      	subs	r3, #1
  400548:	607b      	str	r3, [r7, #4]
  40054a:	687b      	ldr	r3, [r7, #4]
  40054c:	2b00      	cmp	r3, #0
  40054e:	dcec      	bgt.n	40052a <_read+0x1e>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
  400550:	697b      	ldr	r3, [r7, #20]
}
  400552:	4618      	mov	r0, r3
  400554:	3718      	adds	r7, #24
  400556:	46bd      	mov	sp, r7
  400558:	bd80      	pop	{r7, pc}
  40055a:	bf00      	nop
  40055c:	20400a08 	.word	0x20400a08
  400560:	20400a10 	.word	0x20400a10

00400564 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
  400564:	b580      	push	{r7, lr}
  400566:	b086      	sub	sp, #24
  400568:	af00      	add	r7, sp, #0
  40056a:	60f8      	str	r0, [r7, #12]
  40056c:	60b9      	str	r1, [r7, #8]
  40056e:	607a      	str	r2, [r7, #4]
	int nChars = 0;
  400570:	2300      	movs	r3, #0
  400572:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
  400574:	68fb      	ldr	r3, [r7, #12]
  400576:	2b01      	cmp	r3, #1
  400578:	d008      	beq.n	40058c <_write+0x28>
  40057a:	68fb      	ldr	r3, [r7, #12]
  40057c:	2b02      	cmp	r3, #2
  40057e:	d005      	beq.n	40058c <_write+0x28>
  400580:	68fb      	ldr	r3, [r7, #12]
  400582:	2b03      	cmp	r3, #3
  400584:	d002      	beq.n	40058c <_write+0x28>
		return -1;
  400586:	f04f 33ff 	mov.w	r3, #4294967295
  40058a:	e01a      	b.n	4005c2 <_write+0x5e>
	}

	for (; len != 0; --len) {
  40058c:	e015      	b.n	4005ba <_write+0x56>
		if (ptr_put(stdio_base, *ptr++) < 0) {
  40058e:	4b0f      	ldr	r3, [pc, #60]	; (4005cc <_write+0x68>)
  400590:	681a      	ldr	r2, [r3, #0]
  400592:	4b0f      	ldr	r3, [pc, #60]	; (4005d0 <_write+0x6c>)
  400594:	6818      	ldr	r0, [r3, #0]
  400596:	68bb      	ldr	r3, [r7, #8]
  400598:	1c59      	adds	r1, r3, #1
  40059a:	60b9      	str	r1, [r7, #8]
  40059c:	781b      	ldrb	r3, [r3, #0]
  40059e:	4619      	mov	r1, r3
  4005a0:	4790      	blx	r2
  4005a2:	4603      	mov	r3, r0
  4005a4:	2b00      	cmp	r3, #0
  4005a6:	da02      	bge.n	4005ae <_write+0x4a>
			return -1;
  4005a8:	f04f 33ff 	mov.w	r3, #4294967295
  4005ac:	e009      	b.n	4005c2 <_write+0x5e>
		}
		++nChars;
  4005ae:	697b      	ldr	r3, [r7, #20]
  4005b0:	3301      	adds	r3, #1
  4005b2:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
  4005b4:	687b      	ldr	r3, [r7, #4]
  4005b6:	3b01      	subs	r3, #1
  4005b8:	607b      	str	r3, [r7, #4]
  4005ba:	687b      	ldr	r3, [r7, #4]
  4005bc:	2b00      	cmp	r3, #0
  4005be:	d1e6      	bne.n	40058e <_write+0x2a>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
	}
	return nChars;
  4005c0:	697b      	ldr	r3, [r7, #20]
}
  4005c2:	4618      	mov	r0, r3
  4005c4:	3718      	adds	r7, #24
  4005c6:	46bd      	mov	sp, r7
  4005c8:	bd80      	pop	{r7, pc}
  4005ca:	bf00      	nop
  4005cc:	20400a0c 	.word	0x20400a0c
  4005d0:	20400a10 	.word	0x20400a10

004005d4 <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
  4005d4:	b580      	push	{r7, lr}
  4005d6:	b082      	sub	sp, #8
  4005d8:	af00      	add	r7, sp, #0
  4005da:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  4005dc:	6878      	ldr	r0, [r7, #4]
  4005de:	4b02      	ldr	r3, [pc, #8]	; (4005e8 <sysclk_enable_peripheral_clock+0x14>)
  4005e0:	4798      	blx	r3
}
  4005e2:	3708      	adds	r7, #8
  4005e4:	46bd      	mov	sp, r7
  4005e6:	bd80      	pop	{r7, pc}
  4005e8:	004016d1 	.word	0x004016d1

004005ec <ioport_init>:
 *
 * This function must be called before using any other functions in the IOPORT
 * service.
 */
static inline void ioport_init(void)
{
  4005ec:	b580      	push	{r7, lr}
  4005ee:	af00      	add	r7, sp, #0
}

__always_inline static void arch_ioport_init(void)
{
#ifdef ID_PIOA
	sysclk_enable_peripheral_clock(ID_PIOA);
  4005f0:	200a      	movs	r0, #10
  4005f2:	4b07      	ldr	r3, [pc, #28]	; (400610 <ioport_init+0x24>)
  4005f4:	4798      	blx	r3
#endif
#ifdef ID_PIOB
	sysclk_enable_peripheral_clock(ID_PIOB);
  4005f6:	200b      	movs	r0, #11
  4005f8:	4b05      	ldr	r3, [pc, #20]	; (400610 <ioport_init+0x24>)
  4005fa:	4798      	blx	r3
#endif
#ifdef ID_PIOC
	sysclk_enable_peripheral_clock(ID_PIOC);
  4005fc:	200c      	movs	r0, #12
  4005fe:	4b04      	ldr	r3, [pc, #16]	; (400610 <ioport_init+0x24>)
  400600:	4798      	blx	r3
#endif
#ifdef ID_PIOD
	sysclk_enable_peripheral_clock(ID_PIOD);
  400602:	2010      	movs	r0, #16
  400604:	4b02      	ldr	r3, [pc, #8]	; (400610 <ioport_init+0x24>)
  400606:	4798      	blx	r3
#endif
#ifdef ID_PIOE
	sysclk_enable_peripheral_clock(ID_PIOE);
  400608:	2011      	movs	r0, #17
  40060a:	4b01      	ldr	r3, [pc, #4]	; (400610 <ioport_init+0x24>)
  40060c:	4798      	blx	r3
	arch_ioport_init();
}
  40060e:	bd80      	pop	{r7, pc}
  400610:	004005d5 	.word	0x004005d5

00400614 <ioport_disable_pin>:
 *        IOPORT_CREATE_PIN().
 *
 * \param pin IOPORT pin to disable
 */
static inline void ioport_disable_pin(ioport_pin_t pin)
{
  400614:	b480      	push	{r7}
  400616:	b089      	sub	sp, #36	; 0x24
  400618:	af00      	add	r7, sp, #0
  40061a:	6078      	str	r0, [r7, #4]
  40061c:	687b      	ldr	r3, [r7, #4]
  40061e:	61fb      	str	r3, [r7, #28]
  400620:	69fb      	ldr	r3, [r7, #28]
  400622:	61bb      	str	r3, [r7, #24]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  400624:	69bb      	ldr	r3, [r7, #24]
  400626:	095a      	lsrs	r2, r3, #5
  400628:	69fb      	ldr	r3, [r7, #28]
  40062a:	617b      	str	r3, [r7, #20]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  40062c:	697b      	ldr	r3, [r7, #20]
  40062e:	f003 031f 	and.w	r3, r3, #31
  400632:	2101      	movs	r1, #1
  400634:	fa01 f303 	lsl.w	r3, r1, r3
  400638:	613a      	str	r2, [r7, #16]
  40063a:	60fb      	str	r3, [r7, #12]
  40063c:	693b      	ldr	r3, [r7, #16]
  40063e:	60bb      	str	r3, [r7, #8]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  400640:	68ba      	ldr	r2, [r7, #8]
  400642:	4b05      	ldr	r3, [pc, #20]	; (400658 <ioport_disable_pin+0x44>)
  400644:	4413      	add	r3, r2
  400646:	025b      	lsls	r3, r3, #9
  400648:	461a      	mov	r2, r3
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  40064a:	68fb      	ldr	r3, [r7, #12]
  40064c:	6053      	str	r3, [r2, #4]
	arch_ioport_disable_pin(pin);
}
  40064e:	3724      	adds	r7, #36	; 0x24
  400650:	46bd      	mov	sp, r7
  400652:	f85d 7b04 	ldr.w	r7, [sp], #4
  400656:	4770      	bx	lr
  400658:	00200707 	.word	0x00200707

0040065c <ioport_disable_port>:
 * \param port IOPORT port to disable
 * \param mask Pin mask of pins to disable
 */
static inline void ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
  40065c:	b480      	push	{r7}
  40065e:	b087      	sub	sp, #28
  400660:	af00      	add	r7, sp, #0
  400662:	6078      	str	r0, [r7, #4]
  400664:	6039      	str	r1, [r7, #0]
  400666:	687b      	ldr	r3, [r7, #4]
  400668:	617b      	str	r3, [r7, #20]
  40066a:	683b      	ldr	r3, [r7, #0]
  40066c:	613b      	str	r3, [r7, #16]
  40066e:	697b      	ldr	r3, [r7, #20]
  400670:	60fb      	str	r3, [r7, #12]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  400672:	68fa      	ldr	r2, [r7, #12]
  400674:	4b05      	ldr	r3, [pc, #20]	; (40068c <ioport_disable_port+0x30>)
  400676:	4413      	add	r3, r2
  400678:	025b      	lsls	r3, r3, #9
  40067a:	461a      	mov	r2, r3
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  40067c:	693b      	ldr	r3, [r7, #16]
  40067e:	6053      	str	r3, [r2, #4]
	arch_ioport_disable_port(port, mask);
}
  400680:	371c      	adds	r7, #28
  400682:	46bd      	mov	sp, r7
  400684:	f85d 7b04 	ldr.w	r7, [sp], #4
  400688:	4770      	bx	lr
  40068a:	bf00      	nop
  40068c:	00200707 	.word	0x00200707

00400690 <ioport_set_port_mode>:
 * \param mode Mode masks to configure for the specified pins (\ref
 * ioport_modes)
 */
static inline void ioport_set_port_mode(ioport_port_t port,
		ioport_port_mask_t mask, ioport_mode_t mode)
{
  400690:	b480      	push	{r7}
  400692:	b08b      	sub	sp, #44	; 0x2c
  400694:	af00      	add	r7, sp, #0
  400696:	60f8      	str	r0, [r7, #12]
  400698:	60b9      	str	r1, [r7, #8]
  40069a:	607a      	str	r2, [r7, #4]
  40069c:	68fb      	ldr	r3, [r7, #12]
  40069e:	627b      	str	r3, [r7, #36]	; 0x24
  4006a0:	68bb      	ldr	r3, [r7, #8]
  4006a2:	623b      	str	r3, [r7, #32]
  4006a4:	687b      	ldr	r3, [r7, #4]
  4006a6:	61fb      	str	r3, [r7, #28]
  4006a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4006aa:	61bb      	str	r3, [r7, #24]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  4006ac:	69ba      	ldr	r2, [r7, #24]
  4006ae:	4b37      	ldr	r3, [pc, #220]	; (40078c <ioport_set_port_mode+0xfc>)
  4006b0:	4413      	add	r3, r2
  4006b2:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_port_mode(ioport_port_t port,
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);
  4006b4:	617b      	str	r3, [r7, #20]

	if (mode & IOPORT_MODE_PULLUP) {
  4006b6:	69fb      	ldr	r3, [r7, #28]
  4006b8:	f003 0308 	and.w	r3, r3, #8
  4006bc:	2b00      	cmp	r3, #0
  4006be:	d003      	beq.n	4006c8 <ioport_set_port_mode+0x38>
		base->PIO_PUER = mask;
  4006c0:	697b      	ldr	r3, [r7, #20]
  4006c2:	6a3a      	ldr	r2, [r7, #32]
  4006c4:	665a      	str	r2, [r3, #100]	; 0x64
  4006c6:	e002      	b.n	4006ce <ioport_set_port_mode+0x3e>
	} else {
		base->PIO_PUDR = mask;
  4006c8:	697b      	ldr	r3, [r7, #20]
  4006ca:	6a3a      	ldr	r2, [r7, #32]
  4006cc:	661a      	str	r2, [r3, #96]	; 0x60
	}

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
  4006ce:	69fb      	ldr	r3, [r7, #28]
  4006d0:	f003 0310 	and.w	r3, r3, #16
  4006d4:	2b00      	cmp	r3, #0
  4006d6:	d004      	beq.n	4006e2 <ioport_set_port_mode+0x52>
		base->PIO_PPDER = mask;
  4006d8:	697b      	ldr	r3, [r7, #20]
  4006da:	6a3a      	ldr	r2, [r7, #32]
  4006dc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  4006e0:	e003      	b.n	4006ea <ioport_set_port_mode+0x5a>
	} else {
		base->PIO_PPDDR = mask;
  4006e2:	697b      	ldr	r3, [r7, #20]
  4006e4:	6a3a      	ldr	r2, [r7, #32]
  4006e6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	}
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
  4006ea:	69fb      	ldr	r3, [r7, #28]
  4006ec:	f003 0320 	and.w	r3, r3, #32
  4006f0:	2b00      	cmp	r3, #0
  4006f2:	d003      	beq.n	4006fc <ioport_set_port_mode+0x6c>
		base->PIO_MDER = mask;
  4006f4:	697b      	ldr	r3, [r7, #20]
  4006f6:	6a3a      	ldr	r2, [r7, #32]
  4006f8:	651a      	str	r2, [r3, #80]	; 0x50
  4006fa:	e002      	b.n	400702 <ioport_set_port_mode+0x72>
	} else {
		base->PIO_MDDR = mask;
  4006fc:	697b      	ldr	r3, [r7, #20]
  4006fe:	6a3a      	ldr	r2, [r7, #32]
  400700:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
  400702:	69fb      	ldr	r3, [r7, #28]
  400704:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
  400708:	2b00      	cmp	r3, #0
  40070a:	d003      	beq.n	400714 <ioport_set_port_mode+0x84>
		base->PIO_IFER = mask;
  40070c:	697b      	ldr	r3, [r7, #20]
  40070e:	6a3a      	ldr	r2, [r7, #32]
  400710:	621a      	str	r2, [r3, #32]
  400712:	e002      	b.n	40071a <ioport_set_port_mode+0x8a>
	} else {
		base->PIO_IFDR = mask;
  400714:	697b      	ldr	r3, [r7, #20]
  400716:	6a3a      	ldr	r2, [r7, #32]
  400718:	625a      	str	r2, [r3, #36]	; 0x24
	}

	if (mode & IOPORT_MODE_DEBOUNCE) {
  40071a:	69fb      	ldr	r3, [r7, #28]
  40071c:	f003 0380 	and.w	r3, r3, #128	; 0x80
  400720:	2b00      	cmp	r3, #0
  400722:	d004      	beq.n	40072e <ioport_set_port_mode+0x9e>
#if SAM3U || SAM3XA
		base->PIO_DIFSR = mask;
#else
		base->PIO_IFSCER = mask;
  400724:	697b      	ldr	r3, [r7, #20]
  400726:	6a3a      	ldr	r2, [r7, #32]
  400728:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  40072c:	e003      	b.n	400736 <ioport_set_port_mode+0xa6>
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  40072e:	697b      	ldr	r3, [r7, #20]
  400730:	6a3a      	ldr	r2, [r7, #32]
  400732:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABSR |= mask;
	} else {
		base->PIO_ABSR &= ~mask;
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
  400736:	69fb      	ldr	r3, [r7, #28]
  400738:	f003 0301 	and.w	r3, r3, #1
  40073c:	2b00      	cmp	r3, #0
  40073e:	d006      	beq.n	40074e <ioport_set_port_mode+0xbe>
		base->PIO_ABCDSR[0] |= mask;
  400740:	697b      	ldr	r3, [r7, #20]
  400742:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400744:	6a3b      	ldr	r3, [r7, #32]
  400746:	431a      	orrs	r2, r3
  400748:	697b      	ldr	r3, [r7, #20]
  40074a:	671a      	str	r2, [r3, #112]	; 0x70
  40074c:	e006      	b.n	40075c <ioport_set_port_mode+0xcc>
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  40074e:	697b      	ldr	r3, [r7, #20]
  400750:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400752:	6a3b      	ldr	r3, [r7, #32]
  400754:	43db      	mvns	r3, r3
  400756:	401a      	ands	r2, r3
  400758:	697b      	ldr	r3, [r7, #20]
  40075a:	671a      	str	r2, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
  40075c:	69fb      	ldr	r3, [r7, #28]
  40075e:	f003 0302 	and.w	r3, r3, #2
  400762:	2b00      	cmp	r3, #0
  400764:	d006      	beq.n	400774 <ioport_set_port_mode+0xe4>
		base->PIO_ABCDSR[1] |= mask;
  400766:	697b      	ldr	r3, [r7, #20]
  400768:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  40076a:	6a3b      	ldr	r3, [r7, #32]
  40076c:	431a      	orrs	r2, r3
  40076e:	697b      	ldr	r3, [r7, #20]
  400770:	675a      	str	r2, [r3, #116]	; 0x74
  400772:	e006      	b.n	400782 <ioport_set_port_mode+0xf2>
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  400774:	697b      	ldr	r3, [r7, #20]
  400776:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400778:	6a3b      	ldr	r3, [r7, #32]
  40077a:	43db      	mvns	r3, r3
  40077c:	401a      	ands	r2, r3
  40077e:	697b      	ldr	r3, [r7, #20]
  400780:	675a      	str	r2, [r3, #116]	; 0x74
	arch_ioport_set_port_mode(port, mask, mode);
}
  400782:	372c      	adds	r7, #44	; 0x2c
  400784:	46bd      	mov	sp, r7
  400786:	f85d 7b04 	ldr.w	r7, [sp], #4
  40078a:	4770      	bx	lr
  40078c:	00200707 	.word	0x00200707

00400790 <ioport_set_pin_mode>:
 *
 * \param pin IOPORT pin to configure
 * \param mode Mode masks to configure for the specified pin (\ref ioport_modes)
 */
static inline void ioport_set_pin_mode(ioport_pin_t pin, ioport_mode_t mode)
{
  400790:	b480      	push	{r7}
  400792:	b08d      	sub	sp, #52	; 0x34
  400794:	af00      	add	r7, sp, #0
  400796:	6078      	str	r0, [r7, #4]
  400798:	6039      	str	r1, [r7, #0]
  40079a:	687b      	ldr	r3, [r7, #4]
  40079c:	62fb      	str	r3, [r7, #44]	; 0x2c
  40079e:	683b      	ldr	r3, [r7, #0]
  4007a0:	62bb      	str	r3, [r7, #40]	; 0x28
  4007a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4007a4:	627b      	str	r3, [r7, #36]	; 0x24
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  4007a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4007a8:	095a      	lsrs	r2, r3, #5
  4007aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4007ac:	623b      	str	r3, [r7, #32]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  4007ae:	6a3b      	ldr	r3, [r7, #32]
  4007b0:	f003 031f 	and.w	r3, r3, #31
  4007b4:	2101      	movs	r1, #1
  4007b6:	fa01 f303 	lsl.w	r3, r1, r3
  4007ba:	61fa      	str	r2, [r7, #28]
  4007bc:	61bb      	str	r3, [r7, #24]
  4007be:	6abb      	ldr	r3, [r7, #40]	; 0x28
  4007c0:	617b      	str	r3, [r7, #20]
  4007c2:	69fb      	ldr	r3, [r7, #28]
  4007c4:	613b      	str	r3, [r7, #16]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  4007c6:	693a      	ldr	r2, [r7, #16]
  4007c8:	4b37      	ldr	r3, [pc, #220]	; (4008a8 <ioport_set_pin_mode+0x118>)
  4007ca:	4413      	add	r3, r2
  4007cc:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_port_mode(ioport_port_t port,
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);
  4007ce:	60fb      	str	r3, [r7, #12]

	if (mode & IOPORT_MODE_PULLUP) {
  4007d0:	697b      	ldr	r3, [r7, #20]
  4007d2:	f003 0308 	and.w	r3, r3, #8
  4007d6:	2b00      	cmp	r3, #0
  4007d8:	d003      	beq.n	4007e2 <ioport_set_pin_mode+0x52>
		base->PIO_PUER = mask;
  4007da:	68fb      	ldr	r3, [r7, #12]
  4007dc:	69ba      	ldr	r2, [r7, #24]
  4007de:	665a      	str	r2, [r3, #100]	; 0x64
  4007e0:	e002      	b.n	4007e8 <ioport_set_pin_mode+0x58>
	} else {
		base->PIO_PUDR = mask;
  4007e2:	68fb      	ldr	r3, [r7, #12]
  4007e4:	69ba      	ldr	r2, [r7, #24]
  4007e6:	661a      	str	r2, [r3, #96]	; 0x60
	}

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
  4007e8:	697b      	ldr	r3, [r7, #20]
  4007ea:	f003 0310 	and.w	r3, r3, #16
  4007ee:	2b00      	cmp	r3, #0
  4007f0:	d004      	beq.n	4007fc <ioport_set_pin_mode+0x6c>
		base->PIO_PPDER = mask;
  4007f2:	68fb      	ldr	r3, [r7, #12]
  4007f4:	69ba      	ldr	r2, [r7, #24]
  4007f6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  4007fa:	e003      	b.n	400804 <ioport_set_pin_mode+0x74>
	} else {
		base->PIO_PPDDR = mask;
  4007fc:	68fb      	ldr	r3, [r7, #12]
  4007fe:	69ba      	ldr	r2, [r7, #24]
  400800:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	}
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
  400804:	697b      	ldr	r3, [r7, #20]
  400806:	f003 0320 	and.w	r3, r3, #32
  40080a:	2b00      	cmp	r3, #0
  40080c:	d003      	beq.n	400816 <ioport_set_pin_mode+0x86>
		base->PIO_MDER = mask;
  40080e:	68fb      	ldr	r3, [r7, #12]
  400810:	69ba      	ldr	r2, [r7, #24]
  400812:	651a      	str	r2, [r3, #80]	; 0x50
  400814:	e002      	b.n	40081c <ioport_set_pin_mode+0x8c>
	} else {
		base->PIO_MDDR = mask;
  400816:	68fb      	ldr	r3, [r7, #12]
  400818:	69ba      	ldr	r2, [r7, #24]
  40081a:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
  40081c:	697b      	ldr	r3, [r7, #20]
  40081e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
  400822:	2b00      	cmp	r3, #0
  400824:	d003      	beq.n	40082e <ioport_set_pin_mode+0x9e>
		base->PIO_IFER = mask;
  400826:	68fb      	ldr	r3, [r7, #12]
  400828:	69ba      	ldr	r2, [r7, #24]
  40082a:	621a      	str	r2, [r3, #32]
  40082c:	e002      	b.n	400834 <ioport_set_pin_mode+0xa4>
	} else {
		base->PIO_IFDR = mask;
  40082e:	68fb      	ldr	r3, [r7, #12]
  400830:	69ba      	ldr	r2, [r7, #24]
  400832:	625a      	str	r2, [r3, #36]	; 0x24
	}

	if (mode & IOPORT_MODE_DEBOUNCE) {
  400834:	697b      	ldr	r3, [r7, #20]
  400836:	f003 0380 	and.w	r3, r3, #128	; 0x80
  40083a:	2b00      	cmp	r3, #0
  40083c:	d004      	beq.n	400848 <ioport_set_pin_mode+0xb8>
#if SAM3U || SAM3XA
		base->PIO_DIFSR = mask;
#else
		base->PIO_IFSCER = mask;
  40083e:	68fb      	ldr	r3, [r7, #12]
  400840:	69ba      	ldr	r2, [r7, #24]
  400842:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  400846:	e003      	b.n	400850 <ioport_set_pin_mode+0xc0>
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  400848:	68fb      	ldr	r3, [r7, #12]
  40084a:	69ba      	ldr	r2, [r7, #24]
  40084c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABSR |= mask;
	} else {
		base->PIO_ABSR &= ~mask;
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
  400850:	697b      	ldr	r3, [r7, #20]
  400852:	f003 0301 	and.w	r3, r3, #1
  400856:	2b00      	cmp	r3, #0
  400858:	d006      	beq.n	400868 <ioport_set_pin_mode+0xd8>
		base->PIO_ABCDSR[0] |= mask;
  40085a:	68fb      	ldr	r3, [r7, #12]
  40085c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  40085e:	69bb      	ldr	r3, [r7, #24]
  400860:	431a      	orrs	r2, r3
  400862:	68fb      	ldr	r3, [r7, #12]
  400864:	671a      	str	r2, [r3, #112]	; 0x70
  400866:	e006      	b.n	400876 <ioport_set_pin_mode+0xe6>
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  400868:	68fb      	ldr	r3, [r7, #12]
  40086a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  40086c:	69bb      	ldr	r3, [r7, #24]
  40086e:	43db      	mvns	r3, r3
  400870:	401a      	ands	r2, r3
  400872:	68fb      	ldr	r3, [r7, #12]
  400874:	671a      	str	r2, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
  400876:	697b      	ldr	r3, [r7, #20]
  400878:	f003 0302 	and.w	r3, r3, #2
  40087c:	2b00      	cmp	r3, #0
  40087e:	d006      	beq.n	40088e <ioport_set_pin_mode+0xfe>
		base->PIO_ABCDSR[1] |= mask;
  400880:	68fb      	ldr	r3, [r7, #12]
  400882:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400884:	69bb      	ldr	r3, [r7, #24]
  400886:	431a      	orrs	r2, r3
  400888:	68fb      	ldr	r3, [r7, #12]
  40088a:	675a      	str	r2, [r3, #116]	; 0x74
  40088c:	e006      	b.n	40089c <ioport_set_pin_mode+0x10c>
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  40088e:	68fb      	ldr	r3, [r7, #12]
  400890:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400892:	69bb      	ldr	r3, [r7, #24]
  400894:	43db      	mvns	r3, r3
  400896:	401a      	ands	r2, r3
  400898:	68fb      	ldr	r3, [r7, #12]
  40089a:	675a      	str	r2, [r3, #116]	; 0x74
	arch_ioport_set_pin_mode(pin, mode);
}
  40089c:	3734      	adds	r7, #52	; 0x34
  40089e:	46bd      	mov	sp, r7
  4008a0:	f85d 7b04 	ldr.w	r7, [sp], #4
  4008a4:	4770      	bx	lr
  4008a6:	bf00      	nop
  4008a8:	00200707 	.word	0x00200707

004008ac <ioport_set_pin_dir>:
 * \param pin IOPORT pin to configure
 * \param dir Direction to set for the specified pin (\ref ioport_direction)
 */
static inline void ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
  4008ac:	b480      	push	{r7}
  4008ae:	b08d      	sub	sp, #52	; 0x34
  4008b0:	af00      	add	r7, sp, #0
  4008b2:	6078      	str	r0, [r7, #4]
  4008b4:	460b      	mov	r3, r1
  4008b6:	70fb      	strb	r3, [r7, #3]
  4008b8:	687b      	ldr	r3, [r7, #4]
  4008ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  4008bc:	78fb      	ldrb	r3, [r7, #3]
  4008be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  4008c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4008c4:	627b      	str	r3, [r7, #36]	; 0x24
  4008c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4008c8:	623b      	str	r3, [r7, #32]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  4008ca:	6a3b      	ldr	r3, [r7, #32]
  4008cc:	095b      	lsrs	r3, r3, #5
  4008ce:	61fb      	str	r3, [r7, #28]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  4008d0:	69fa      	ldr	r2, [r7, #28]
  4008d2:	4b17      	ldr	r3, [pc, #92]	; (400930 <ioport_set_pin_dir+0x84>)
  4008d4:	4413      	add	r3, r2
  4008d6:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);
  4008d8:	61bb      	str	r3, [r7, #24]

	if (dir == IOPORT_DIR_OUTPUT) {
  4008da:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  4008de:	2b01      	cmp	r3, #1
  4008e0:	d109      	bne.n	4008f6 <ioport_set_pin_dir+0x4a>
  4008e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4008e4:	617b      	str	r3, [r7, #20]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  4008e6:	697b      	ldr	r3, [r7, #20]
  4008e8:	f003 031f 	and.w	r3, r3, #31
  4008ec:	2201      	movs	r2, #1
  4008ee:	409a      	lsls	r2, r3
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4008f0:	69bb      	ldr	r3, [r7, #24]
  4008f2:	611a      	str	r2, [r3, #16]
  4008f4:	e00c      	b.n	400910 <ioport_set_pin_dir+0x64>
	} else if (dir == IOPORT_DIR_INPUT) {
  4008f6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  4008fa:	2b00      	cmp	r3, #0
  4008fc:	d108      	bne.n	400910 <ioport_set_pin_dir+0x64>
  4008fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  400900:	613b      	str	r3, [r7, #16]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  400902:	693b      	ldr	r3, [r7, #16]
  400904:	f003 031f 	and.w	r3, r3, #31
  400908:	2201      	movs	r2, #1
  40090a:	409a      	lsls	r2, r3
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40090c:	69bb      	ldr	r3, [r7, #24]
  40090e:	615a      	str	r2, [r3, #20]
  400910:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  400912:	60fb      	str	r3, [r7, #12]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  400914:	68fb      	ldr	r3, [r7, #12]
  400916:	f003 031f 	and.w	r3, r3, #31
  40091a:	2201      	movs	r2, #1
  40091c:	409a      	lsls	r2, r3
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40091e:	69bb      	ldr	r3, [r7, #24]
  400920:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	arch_ioport_set_pin_dir(pin, dir);
}
  400924:	3734      	adds	r7, #52	; 0x34
  400926:	46bd      	mov	sp, r7
  400928:	f85d 7b04 	ldr.w	r7, [sp], #4
  40092c:	4770      	bx	lr
  40092e:	bf00      	nop
  400930:	00200707 	.word	0x00200707

00400934 <ioport_set_pin_level>:
 *
 * \param pin IOPORT pin to configure
 * \param level Logical value of the pin
 */
static inline void ioport_set_pin_level(ioport_pin_t pin, bool level)
{
  400934:	b480      	push	{r7}
  400936:	b08b      	sub	sp, #44	; 0x2c
  400938:	af00      	add	r7, sp, #0
  40093a:	6078      	str	r0, [r7, #4]
  40093c:	460b      	mov	r3, r1
  40093e:	70fb      	strb	r3, [r7, #3]
  400940:	687b      	ldr	r3, [r7, #4]
  400942:	627b      	str	r3, [r7, #36]	; 0x24
  400944:	78fb      	ldrb	r3, [r7, #3]
  400946:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  40094a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40094c:	61fb      	str	r3, [r7, #28]
  40094e:	69fb      	ldr	r3, [r7, #28]
  400950:	61bb      	str	r3, [r7, #24]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  400952:	69bb      	ldr	r3, [r7, #24]
  400954:	095b      	lsrs	r3, r3, #5
  400956:	617b      	str	r3, [r7, #20]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  400958:	697a      	ldr	r2, [r7, #20]
  40095a:	4b10      	ldr	r3, [pc, #64]	; (40099c <ioport_set_pin_level+0x68>)
  40095c:	4413      	add	r3, r2
  40095e:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);
  400960:	613b      	str	r3, [r7, #16]

	if (level) {
  400962:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
  400966:	2b00      	cmp	r3, #0
  400968:	d009      	beq.n	40097e <ioport_set_pin_level+0x4a>
  40096a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40096c:	60fb      	str	r3, [r7, #12]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  40096e:	68fb      	ldr	r3, [r7, #12]
  400970:	f003 031f 	and.w	r3, r3, #31
  400974:	2201      	movs	r2, #1
  400976:	409a      	lsls	r2, r3
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400978:	693b      	ldr	r3, [r7, #16]
  40097a:	631a      	str	r2, [r3, #48]	; 0x30
  40097c:	e008      	b.n	400990 <ioport_set_pin_level+0x5c>
  40097e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  400980:	60bb      	str	r3, [r7, #8]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  400982:	68bb      	ldr	r3, [r7, #8]
  400984:	f003 031f 	and.w	r3, r3, #31
  400988:	2201      	movs	r2, #1
  40098a:	409a      	lsls	r2, r3
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  40098c:	693b      	ldr	r3, [r7, #16]
  40098e:	635a      	str	r2, [r3, #52]	; 0x34
	arch_ioport_set_pin_level(pin, level);
}
  400990:	372c      	adds	r7, #44	; 0x2c
  400992:	46bd      	mov	sp, r7
  400994:	f85d 7b04 	ldr.w	r7, [sp], #4
  400998:	4770      	bx	lr
  40099a:	bf00      	nop
  40099c:	00200707 	.word	0x00200707

004009a0 <ioport_set_pin_sense_mode>:
 * \param pin IOPORT pin to configure
 * \param pin_sense Edge to sense for the pin (\ref ioport_sense)
 */
static inline void ioport_set_pin_sense_mode(ioport_pin_t pin,
		enum ioport_sense pin_sense)
{
  4009a0:	b480      	push	{r7}
  4009a2:	b08d      	sub	sp, #52	; 0x34
  4009a4:	af00      	add	r7, sp, #0
  4009a6:	6078      	str	r0, [r7, #4]
  4009a8:	460b      	mov	r3, r1
  4009aa:	70fb      	strb	r3, [r7, #3]
  4009ac:	687b      	ldr	r3, [r7, #4]
  4009ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  4009b0:	78fb      	ldrb	r3, [r7, #3]
  4009b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  4009b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4009b8:	627b      	str	r3, [r7, #36]	; 0x24
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  4009ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4009bc:	095a      	lsrs	r2, r3, #5
  4009be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4009c0:	623b      	str	r3, [r7, #32]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  4009c2:	6a3b      	ldr	r3, [r7, #32]
  4009c4:	f003 031f 	and.w	r3, r3, #31
  4009c8:	2101      	movs	r1, #1
  4009ca:	fa01 f303 	lsl.w	r3, r1, r3
  4009ce:	61fa      	str	r2, [r7, #28]
  4009d0:	61bb      	str	r3, [r7, #24]
  4009d2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  4009d6:	75fb      	strb	r3, [r7, #23]
  4009d8:	69fb      	ldr	r3, [r7, #28]
  4009da:	613b      	str	r3, [r7, #16]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  4009dc:	693a      	ldr	r2, [r7, #16]
  4009de:	4b22      	ldr	r3, [pc, #136]	; (400a68 <ioport_set_pin_sense_mode+0xc8>)
  4009e0:	4413      	add	r3, r2
  4009e2:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_port_sense_mode(ioport_port_t port,
		ioport_port_mask_t mask, enum ioport_sense pin_sense)
{
	Pio *base = arch_ioport_port_to_base(port);
  4009e4:	60fb      	str	r3, [r7, #12]
	 *       1       0         0    IOPORT_SENSE_FALLING
	 *       1       0         1    IOPORT_SENSE_RISING
	 *       1       1         0    IOPORT_SENSE_LEVEL_LOW
	 *       1       1         1    IOPORT_SENSE_LEVEL_HIGH
	 */
	switch(pin_sense) {
  4009e6:	7dfb      	ldrb	r3, [r7, #23]
  4009e8:	3b01      	subs	r3, #1
  4009ea:	2b03      	cmp	r3, #3
  4009ec:	d82e      	bhi.n	400a4c <ioport_set_pin_sense_mode+0xac>
  4009ee:	a201      	add	r2, pc, #4	; (adr r2, 4009f4 <ioport_set_pin_sense_mode+0x54>)
  4009f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4009f4:	00400a29 	.word	0x00400a29
  4009f8:	00400a3b 	.word	0x00400a3b
  4009fc:	00400a05 	.word	0x00400a05
  400a00:	00400a17 	.word	0x00400a17
	case IOPORT_SENSE_LEVEL_LOW:
		base->PIO_LSR = mask;
  400a04:	68fb      	ldr	r3, [r7, #12]
  400a06:	69ba      	ldr	r2, [r7, #24]
  400a08:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
		base->PIO_FELLSR = mask;
  400a0c:	68fb      	ldr	r3, [r7, #12]
  400a0e:	69ba      	ldr	r2, [r7, #24]
  400a10:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
  400a14:	e01f      	b.n	400a56 <ioport_set_pin_sense_mode+0xb6>
		break;
	case IOPORT_SENSE_LEVEL_HIGH:
		base->PIO_LSR = mask;
  400a16:	68fb      	ldr	r3, [r7, #12]
  400a18:	69ba      	ldr	r2, [r7, #24]
  400a1a:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
		base->PIO_REHLSR = mask;
  400a1e:	68fb      	ldr	r3, [r7, #12]
  400a20:	69ba      	ldr	r2, [r7, #24]
  400a22:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  400a26:	e016      	b.n	400a56 <ioport_set_pin_sense_mode+0xb6>
		break;
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
  400a28:	68fb      	ldr	r3, [r7, #12]
  400a2a:	69ba      	ldr	r2, [r7, #24]
  400a2c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_FELLSR = mask;
  400a30:	68fb      	ldr	r3, [r7, #12]
  400a32:	69ba      	ldr	r2, [r7, #24]
  400a34:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
  400a38:	e00d      	b.n	400a56 <ioport_set_pin_sense_mode+0xb6>
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  400a3a:	68fb      	ldr	r3, [r7, #12]
  400a3c:	69ba      	ldr	r2, [r7, #24]
  400a3e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  400a42:	68fb      	ldr	r3, [r7, #12]
  400a44:	69ba      	ldr	r2, [r7, #24]
  400a46:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  400a4a:	e004      	b.n	400a56 <ioport_set_pin_sense_mode+0xb6>
		break;
	default:
		base->PIO_AIMDR = mask;
  400a4c:	68fb      	ldr	r3, [r7, #12]
  400a4e:	69ba      	ldr	r2, [r7, #24]
  400a50:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
  400a54:	e003      	b.n	400a5e <ioport_set_pin_sense_mode+0xbe>
		return;
	}
	base->PIO_AIMER = mask;
  400a56:	68fb      	ldr	r3, [r7, #12]
  400a58:	69ba      	ldr	r2, [r7, #24]
  400a5a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	arch_ioport_set_pin_sense_mode(pin, pin_sense);
}
  400a5e:	3734      	adds	r7, #52	; 0x34
  400a60:	46bd      	mov	sp, r7
  400a62:	f85d 7b04 	ldr.w	r7, [sp], #4
  400a66:	4770      	bx	lr
  400a68:	00200707 	.word	0x00200707

00400a6c <board_init>:
	__ISB();
}
#endif

void board_init(void)
{
  400a6c:	b580      	push	{r7, lr}
  400a6e:	af00      	add	r7, sp, #0
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  400a70:	4b3b      	ldr	r3, [pc, #236]	; (400b60 <board_init+0xf4>)
  400a72:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  400a76:	605a      	str	r2, [r3, #4]
#endif

	/* Initialize IOPORTs */
	ioport_init();
  400a78:	4b3a      	ldr	r3, [pc, #232]	; (400b64 <board_init+0xf8>)
  400a7a:	4798      	blx	r3

	/* Configure the pins connected to LED as output and set their
	 * default initial state to high (LED off).
	 */
	ioport_set_pin_dir(LED0_GPIO, IOPORT_DIR_OUTPUT);
  400a7c:	2050      	movs	r0, #80	; 0x50
  400a7e:	2101      	movs	r1, #1
  400a80:	4b39      	ldr	r3, [pc, #228]	; (400b68 <board_init+0xfc>)
  400a82:	4798      	blx	r3
	ioport_set_pin_level(LED0_GPIO, LED0_INACTIVE_LEVEL);
  400a84:	2050      	movs	r0, #80	; 0x50
  400a86:	2101      	movs	r1, #1
  400a88:	4b38      	ldr	r3, [pc, #224]	; (400b6c <board_init+0x100>)
  400a8a:	4798      	blx	r3
	
	ioport_set_pin_dir(ECLAVE_PSUPPLY_ONn, IOPORT_DIR_OUTPUT);
  400a8c:	2002      	movs	r0, #2
  400a8e:	2101      	movs	r1, #1
  400a90:	4b35      	ldr	r3, [pc, #212]	; (400b68 <board_init+0xfc>)
  400a92:	4798      	blx	r3
	ioport_set_pin_level(ECLAVE_PSUPPLY_ONn, IOPORT_PIN_LEVEL_HIGH);
  400a94:	2002      	movs	r0, #2
  400a96:	2101      	movs	r1, #1
  400a98:	4b34      	ldr	r3, [pc, #208]	; (400b6c <board_init+0x100>)
  400a9a:	4798      	blx	r3

	ioport_set_pin_dir(ECLAVE_LED_OEn, IOPORT_DIR_OUTPUT);
  400a9c:	2001      	movs	r0, #1
  400a9e:	2101      	movs	r1, #1
  400aa0:	4b31      	ldr	r3, [pc, #196]	; (400b68 <board_init+0xfc>)
  400aa2:	4798      	blx	r3
	ioport_set_pin_level(ECLAVE_LED_OEn, IOPORT_PIN_LEVEL_HIGH);
  400aa4:	2001      	movs	r0, #1
  400aa6:	2101      	movs	r1, #1
  400aa8:	4b30      	ldr	r3, [pc, #192]	; (400b6c <board_init+0x100>)
  400aaa:	4798      	blx	r3

	ioport_set_pin_dir(ECLAVE_MFP, IOPORT_DIR_OUTPUT);
  400aac:	2000      	movs	r0, #0
  400aae:	2101      	movs	r1, #1
  400ab0:	4b2d      	ldr	r3, [pc, #180]	; (400b68 <board_init+0xfc>)
  400ab2:	4798      	blx	r3
	ioport_set_pin_level(ECLAVE_MFP, IOPORT_PIN_LEVEL_LOW);
  400ab4:	2000      	movs	r0, #0
  400ab6:	2100      	movs	r1, #0
  400ab8:	4b2c      	ldr	r3, [pc, #176]	; (400b6c <board_init+0x100>)
  400aba:	4798      	blx	r3

	ioport_set_pin_dir(ECLAVE_SOLENOID, IOPORT_DIR_OUTPUT);
  400abc:	2015      	movs	r0, #21
  400abe:	2101      	movs	r1, #1
  400ac0:	4b29      	ldr	r3, [pc, #164]	; (400b68 <board_init+0xfc>)
  400ac2:	4798      	blx	r3
	ioport_set_pin_level(ECLAVE_SOLENOID, IOPORT_PIN_LEVEL_LOW);
  400ac4:	2015      	movs	r0, #21
  400ac6:	2100      	movs	r1, #0
  400ac8:	4b28      	ldr	r3, [pc, #160]	; (400b6c <board_init+0x100>)
  400aca:	4798      	blx	r3

	ioport_set_pin_dir(ECLAVE_DOORSW1, IOPORT_DIR_INPUT);
  400acc:	204d      	movs	r0, #77	; 0x4d
  400ace:	2100      	movs	r1, #0
  400ad0:	4b25      	ldr	r3, [pc, #148]	; (400b68 <board_init+0xfc>)
  400ad2:	4798      	blx	r3
	ioport_set_pin_dir(ECLAVE_DOORSW2, IOPORT_DIR_INPUT);
  400ad4:	204e      	movs	r0, #78	; 0x4e
  400ad6:	2100      	movs	r1, #0
  400ad8:	4b23      	ldr	r3, [pc, #140]	; (400b68 <board_init+0xfc>)
  400ada:	4798      	blx	r3

	/* Configure Push Button pins */
	ioport_set_pin_input_mode(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS,
  400adc:	200b      	movs	r0, #11
  400ade:	2100      	movs	r1, #0
  400ae0:	4b21      	ldr	r3, [pc, #132]	; (400b68 <board_init+0xfc>)
  400ae2:	4798      	blx	r3
  400ae4:	200b      	movs	r0, #11
  400ae6:	2188      	movs	r1, #136	; 0x88
  400ae8:	4b21      	ldr	r3, [pc, #132]	; (400b70 <board_init+0x104>)
  400aea:	4798      	blx	r3
  400aec:	200b      	movs	r0, #11
  400aee:	2102      	movs	r1, #2
  400af0:	4b20      	ldr	r3, [pc, #128]	; (400b74 <board_init+0x108>)
  400af2:	4798      	blx	r3
//jsi 7feb16 following defines are from the DMA-UART example project for the SAM4E
#define PINS_UART0_PORT		IOPORT_PIOA
#define PINS_UART0			(PIO_PA9A_URXD0 | PIO_PA10A_UTXD0)
#define PINS_UART0_FLAGS	IOPORT_MODE_MUX_A

	ioport_set_port_peripheral_mode(PINS_UART0_PORT, PINS_UART0, PINS_UART0_FLAGS); //jsi 6feb16 was USART1
  400af4:	2000      	movs	r0, #0
  400af6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
  400afa:	2200      	movs	r2, #0
  400afc:	4b1e      	ldr	r3, [pc, #120]	; (400b78 <board_init+0x10c>)
  400afe:	4798      	blx	r3
  400b00:	2000      	movs	r0, #0
  400b02:	f44f 61c0 	mov.w	r1, #1536	; 0x600
  400b06:	4b1d      	ldr	r3, [pc, #116]	; (400b7c <board_init+0x110>)
  400b08:	4798      	blx	r3

#endif

#define CONF_BOARD_TWIHS0 //jsi 7feb16
#ifdef CONF_BOARD_TWIHS0
	ioport_set_pin_peripheral_mode(TWIHS0_DATA_GPIO, TWIHS0_DATA_FLAGS);
  400b0a:	2003      	movs	r0, #3
  400b0c:	2100      	movs	r1, #0
  400b0e:	4b18      	ldr	r3, [pc, #96]	; (400b70 <board_init+0x104>)
  400b10:	4798      	blx	r3
  400b12:	2003      	movs	r0, #3
  400b14:	4b1a      	ldr	r3, [pc, #104]	; (400b80 <board_init+0x114>)
  400b16:	4798      	blx	r3
	ioport_set_pin_peripheral_mode(TWIHS0_CLK_GPIO, TWIHS0_CLK_FLAGS);
  400b18:	2004      	movs	r0, #4
  400b1a:	2100      	movs	r1, #0
  400b1c:	4b14      	ldr	r3, [pc, #80]	; (400b70 <board_init+0x104>)
  400b1e:	4798      	blx	r3
  400b20:	2004      	movs	r0, #4
  400b22:	4b17      	ldr	r3, [pc, #92]	; (400b80 <board_init+0x114>)
  400b24:	4798      	blx	r3
	ioport_set_pin_peripheral_mode(QSPI_QIO3_GPIO, QSPI_QIO3_FLAGS);
#endif

#ifdef CONF_BOARD_PWM_LED0
	/* Configure PWM LED0 pin */
	ioport_set_pin_peripheral_mode(PIN_PWM_LED0_GPIO, PIN_PWM_LED0_FLAGS);
  400b26:	200b      	movs	r0, #11
  400b28:	2101      	movs	r1, #1
  400b2a:	4b11      	ldr	r3, [pc, #68]	; (400b70 <board_init+0x104>)
  400b2c:	4798      	blx	r3
  400b2e:	200b      	movs	r0, #11
  400b30:	4b13      	ldr	r3, [pc, #76]	; (400b80 <board_init+0x114>)
  400b32:	4798      	blx	r3
#endif


#ifdef CONF_BOARD_USART_RXD
	/* Configure USART RXD pin */
	ioport_set_pin_peripheral_mode(USART0_RXD_GPIO, USART0_RXD_FLAGS);
  400b34:	2020      	movs	r0, #32
  400b36:	2102      	movs	r1, #2
  400b38:	4b0d      	ldr	r3, [pc, #52]	; (400b70 <board_init+0x104>)
  400b3a:	4798      	blx	r3
  400b3c:	2020      	movs	r0, #32
  400b3e:	4b10      	ldr	r3, [pc, #64]	; (400b80 <board_init+0x114>)
  400b40:	4798      	blx	r3
#endif

#ifdef CONF_BOARD_USART_TXD
	/* Configure USART TXD pin */
	ioport_set_pin_peripheral_mode(USART0_TXD_GPIO, USART0_TXD_FLAGS);
  400b42:	2021      	movs	r0, #33	; 0x21
  400b44:	2102      	movs	r1, #2
  400b46:	4b0a      	ldr	r3, [pc, #40]	; (400b70 <board_init+0x104>)
  400b48:	4798      	blx	r3
  400b4a:	2021      	movs	r0, #33	; 0x21
  400b4c:	4b0c      	ldr	r3, [pc, #48]	; (400b80 <board_init+0x114>)
  400b4e:	4798      	blx	r3
	ioport_set_pin_peripheral_mode(PIN_USART0_CTS_IDX,PIN_USART0_CTS_FLAGS);
#endif

#ifdef CONF_BOARD_USART_RTS
	/* Configure USART RTS pin */
	ioport_set_pin_peripheral_mode(PIN_USART0_RTS_IDX, PIN_USART0_RTS_FLAGS);
  400b50:	2023      	movs	r0, #35	; 0x23
  400b52:	2102      	movs	r1, #2
  400b54:	4b06      	ldr	r3, [pc, #24]	; (400b70 <board_init+0x104>)
  400b56:	4798      	blx	r3
  400b58:	2023      	movs	r0, #35	; 0x23
  400b5a:	4b09      	ldr	r3, [pc, #36]	; (400b80 <board_init+0x114>)
  400b5c:	4798      	blx	r3
#endif

#ifdef CONF_BOARD_CONFIG_MPU_AT_INIT
	_setup_memory_region();
#endif
}
  400b5e:	bd80      	pop	{r7, pc}
  400b60:	400e1850 	.word	0x400e1850
  400b64:	004005ed 	.word	0x004005ed
  400b68:	004008ad 	.word	0x004008ad
  400b6c:	00400935 	.word	0x00400935
  400b70:	00400791 	.word	0x00400791
  400b74:	004009a1 	.word	0x004009a1
  400b78:	00400691 	.word	0x00400691
  400b7c:	0040065d 	.word	0x0040065d
  400b80:	00400615 	.word	0x00400615

00400b84 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  400b84:	b480      	push	{r7}
  400b86:	b083      	sub	sp, #12
  400b88:	af00      	add	r7, sp, #0
  400b8a:	4603      	mov	r3, r0
  400b8c:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  400b8e:	4908      	ldr	r1, [pc, #32]	; (400bb0 <NVIC_EnableIRQ+0x2c>)
  400b90:	f997 3007 	ldrsb.w	r3, [r7, #7]
  400b94:	095b      	lsrs	r3, r3, #5
  400b96:	79fa      	ldrb	r2, [r7, #7]
  400b98:	f002 021f 	and.w	r2, r2, #31
  400b9c:	2001      	movs	r0, #1
  400b9e:	fa00 f202 	lsl.w	r2, r0, r2
  400ba2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  400ba6:	370c      	adds	r7, #12
  400ba8:	46bd      	mov	sp, r7
  400baa:	f85d 7b04 	ldr.w	r7, [sp], #4
  400bae:	4770      	bx	lr
  400bb0:	e000e100 	.word	0xe000e100

00400bb4 <NVIC_ClearPendingIRQ>:
    The function clears the pending bit of an external interrupt.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  400bb4:	b480      	push	{r7}
  400bb6:	b083      	sub	sp, #12
  400bb8:	af00      	add	r7, sp, #0
  400bba:	4603      	mov	r3, r0
  400bbc:	71fb      	strb	r3, [r7, #7]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  400bbe:	4909      	ldr	r1, [pc, #36]	; (400be4 <NVIC_ClearPendingIRQ+0x30>)
  400bc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
  400bc4:	095b      	lsrs	r3, r3, #5
  400bc6:	79fa      	ldrb	r2, [r7, #7]
  400bc8:	f002 021f 	and.w	r2, r2, #31
  400bcc:	2001      	movs	r0, #1
  400bce:	fa00 f202 	lsl.w	r2, r0, r2
  400bd2:	3360      	adds	r3, #96	; 0x60
  400bd4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  400bd8:	370c      	adds	r7, #12
  400bda:	46bd      	mov	sp, r7
  400bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
  400be0:	4770      	bx	lr
  400be2:	bf00      	nop
  400be4:	e000e100 	.word	0xe000e100

00400be8 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  400be8:	b480      	push	{r7}
  400bea:	b083      	sub	sp, #12
  400bec:	af00      	add	r7, sp, #0
  400bee:	4603      	mov	r3, r0
  400bf0:	6039      	str	r1, [r7, #0]
  400bf2:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
  400bf4:	f997 3007 	ldrsb.w	r3, [r7, #7]
  400bf8:	2b00      	cmp	r3, #0
  400bfa:	da0b      	bge.n	400c14 <NVIC_SetPriority+0x2c>
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  400bfc:	490d      	ldr	r1, [pc, #52]	; (400c34 <NVIC_SetPriority+0x4c>)
  400bfe:	79fb      	ldrb	r3, [r7, #7]
  400c00:	f003 030f 	and.w	r3, r3, #15
  400c04:	3b04      	subs	r3, #4
  400c06:	683a      	ldr	r2, [r7, #0]
  400c08:	b2d2      	uxtb	r2, r2
  400c0a:	0152      	lsls	r2, r2, #5
  400c0c:	b2d2      	uxtb	r2, r2
  400c0e:	440b      	add	r3, r1
  400c10:	761a      	strb	r2, [r3, #24]
  400c12:	e009      	b.n	400c28 <NVIC_SetPriority+0x40>
  else {
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  400c14:	4908      	ldr	r1, [pc, #32]	; (400c38 <NVIC_SetPriority+0x50>)
  400c16:	f997 3007 	ldrsb.w	r3, [r7, #7]
  400c1a:	683a      	ldr	r2, [r7, #0]
  400c1c:	b2d2      	uxtb	r2, r2
  400c1e:	0152      	lsls	r2, r2, #5
  400c20:	b2d2      	uxtb	r2, r2
  400c22:	440b      	add	r3, r1
  400c24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
  400c28:	370c      	adds	r7, #12
  400c2a:	46bd      	mov	sp, r7
  400c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
  400c30:	4770      	bx	lr
  400c32:	bf00      	nop
  400c34:	e000ed00 	.word	0xe000ed00
  400c38:	e000e100 	.word	0xe000e100

00400c3c <cpu_irq_save>:

static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
  400c3c:	b480      	push	{r7}
  400c3e:	b083      	sub	sp, #12
  400c40:	af00      	add	r7, sp, #0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  400c42:	f3ef 8310 	mrs	r3, PRIMASK
  400c46:	603b      	str	r3, [r7, #0]
  return(result);
  400c48:	683b      	ldr	r3, [r7, #0]
	irqflags_t flags = cpu_irq_is_enabled();
  400c4a:	2b00      	cmp	r3, #0
  400c4c:	bf0c      	ite	eq
  400c4e:	2301      	moveq	r3, #1
  400c50:	2300      	movne	r3, #0
  400c52:	b2db      	uxtb	r3, r3
  400c54:	607b      	str	r3, [r7, #4]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
  400c56:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  400c58:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  400c5c:	4b04      	ldr	r3, [pc, #16]	; (400c70 <cpu_irq_save+0x34>)
  400c5e:	2200      	movs	r2, #0
  400c60:	701a      	strb	r2, [r3, #0]
	return flags;
  400c62:	687b      	ldr	r3, [r7, #4]
}
  400c64:	4618      	mov	r0, r3
  400c66:	370c      	adds	r7, #12
  400c68:	46bd      	mov	sp, r7
  400c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
  400c6e:	4770      	bx	lr
  400c70:	20400000 	.word	0x20400000

00400c74 <cpu_irq_is_enabled_flags>:

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
  400c74:	b480      	push	{r7}
  400c76:	b083      	sub	sp, #12
  400c78:	af00      	add	r7, sp, #0
  400c7a:	6078      	str	r0, [r7, #4]
	return (flags);
  400c7c:	687b      	ldr	r3, [r7, #4]
  400c7e:	2b00      	cmp	r3, #0
  400c80:	bf14      	ite	ne
  400c82:	2301      	movne	r3, #1
  400c84:	2300      	moveq	r3, #0
  400c86:	b2db      	uxtb	r3, r3
}
  400c88:	4618      	mov	r0, r3
  400c8a:	370c      	adds	r7, #12
  400c8c:	46bd      	mov	sp, r7
  400c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
  400c92:	4770      	bx	lr

00400c94 <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
  400c94:	b580      	push	{r7, lr}
  400c96:	b082      	sub	sp, #8
  400c98:	af00      	add	r7, sp, #0
  400c9a:	6078      	str	r0, [r7, #4]
	if (cpu_irq_is_enabled_flags(flags))
  400c9c:	6878      	ldr	r0, [r7, #4]
  400c9e:	4b07      	ldr	r3, [pc, #28]	; (400cbc <cpu_irq_restore+0x28>)
  400ca0:	4798      	blx	r3
  400ca2:	4603      	mov	r3, r0
  400ca4:	2b00      	cmp	r3, #0
  400ca6:	d005      	beq.n	400cb4 <cpu_irq_restore+0x20>
		cpu_irq_enable();
  400ca8:	4b05      	ldr	r3, [pc, #20]	; (400cc0 <cpu_irq_restore+0x2c>)
  400caa:	2201      	movs	r2, #1
  400cac:	701a      	strb	r2, [r3, #0]
  400cae:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
  400cb2:	b662      	cpsie	i
}
  400cb4:	3708      	adds	r7, #8
  400cb6:	46bd      	mov	sp, r7
  400cb8:	bd80      	pop	{r7, pc}
  400cba:	bf00      	nop
  400cbc:	00400c75 	.word	0x00400c75
  400cc0:	20400000 	.word	0x20400000

00400cc4 <afec_ch_sanity_check>:
 * \param channel  AFEC channel number.
 *
 */
static inline void afec_ch_sanity_check(Afec *const afec,
		const enum afec_channel_num channel)
{
  400cc4:	b480      	push	{r7}
  400cc6:	b083      	sub	sp, #12
  400cc8:	af00      	add	r7, sp, #0
  400cca:	6078      	str	r0, [r7, #4]
  400ccc:	460b      	mov	r3, r1
  400cce:	807b      	strh	r3, [r7, #2]
	#endif
	} else if (afec == AFEC1) {
		Assert(channel < NB_CH_AFE1);
	}
	UNUSED(channel);
}
  400cd0:	370c      	adds	r7, #12
  400cd2:	46bd      	mov	sp, r7
  400cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
  400cd8:	4770      	bx	lr
  400cda:	bf00      	nop

00400cdc <afec_get_interrupt_status>:
 * \param afec  Base address of the AFEC.
 *
 * \return The interrupt status value.
 */
static inline uint32_t afec_get_interrupt_status(Afec *const afec)
{
  400cdc:	b480      	push	{r7}
  400cde:	b083      	sub	sp, #12
  400ce0:	af00      	add	r7, sp, #0
  400ce2:	6078      	str	r0, [r7, #4]
	return afec->AFEC_ISR;
  400ce4:	687b      	ldr	r3, [r7, #4]
  400ce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
  400ce8:	4618      	mov	r0, r3
  400cea:	370c      	adds	r7, #12
  400cec:	46bd      	mov	sp, r7
  400cee:	f85d 7b04 	ldr.w	r7, [sp], #4
  400cf2:	4770      	bx	lr

00400cf4 <sleepmgr_lock_mode>:
 * not put the device to sleep in the deeper sleep modes.
 *
 * \param mode Sleep mode to lock.
 */
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
  400cf4:	b580      	push	{r7, lr}
  400cf6:	b084      	sub	sp, #16
  400cf8:	af00      	add	r7, sp, #0
  400cfa:	4603      	mov	r3, r0
  400cfc:	71fb      	strb	r3, [r7, #7]
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
  400cfe:	79fb      	ldrb	r3, [r7, #7]
  400d00:	4a0a      	ldr	r2, [pc, #40]	; (400d2c <sleepmgr_lock_mode+0x38>)
  400d02:	5cd3      	ldrb	r3, [r2, r3]
  400d04:	2bff      	cmp	r3, #255	; 0xff
  400d06:	d100      	bne.n	400d0a <sleepmgr_lock_mode+0x16>
		while (true) {
			// Warning: maximum value of sleepmgr_locks buffer is no more than 255.
			// Check APP or change the data type to uint16_t.
		}
  400d08:	e7fe      	b.n	400d08 <sleepmgr_lock_mode+0x14>
	}

	// Enter a critical section
	flags = cpu_irq_save();
  400d0a:	4b09      	ldr	r3, [pc, #36]	; (400d30 <sleepmgr_lock_mode+0x3c>)
  400d0c:	4798      	blx	r3
  400d0e:	60f8      	str	r0, [r7, #12]

	++sleepmgr_locks[mode];
  400d10:	79fb      	ldrb	r3, [r7, #7]
  400d12:	4a06      	ldr	r2, [pc, #24]	; (400d2c <sleepmgr_lock_mode+0x38>)
  400d14:	5cd2      	ldrb	r2, [r2, r3]
  400d16:	3201      	adds	r2, #1
  400d18:	b2d1      	uxtb	r1, r2
  400d1a:	4a04      	ldr	r2, [pc, #16]	; (400d2c <sleepmgr_lock_mode+0x38>)
  400d1c:	54d1      	strb	r1, [r2, r3]

	// Leave the critical section
	cpu_irq_restore(flags);
  400d1e:	68f8      	ldr	r0, [r7, #12]
  400d20:	4b04      	ldr	r3, [pc, #16]	; (400d34 <sleepmgr_lock_mode+0x40>)
  400d22:	4798      	blx	r3
#else
	UNUSED(mode);
#endif /* CONFIG_SLEEPMGR_ENABLE */
}
  400d24:	3710      	adds	r7, #16
  400d26:	46bd      	mov	sp, r7
  400d28:	bd80      	pop	{r7, pc}
  400d2a:	bf00      	nop
  400d2c:	20400a00 	.word	0x20400a00
  400d30:	00400c3d 	.word	0x00400c3d
  400d34:	00400c95 	.word	0x00400c95

00400d38 <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  400d38:	b480      	push	{r7}
  400d3a:	b083      	sub	sp, #12
  400d3c:	af00      	add	r7, sp, #0
  400d3e:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  400d40:	687b      	ldr	r3, [r7, #4]
  400d42:	2b07      	cmp	r3, #7
  400d44:	d825      	bhi.n	400d92 <osc_get_rate+0x5a>
  400d46:	a201      	add	r2, pc, #4	; (adr r2, 400d4c <osc_get_rate+0x14>)
  400d48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  400d4c:	00400d6d 	.word	0x00400d6d
  400d50:	00400d73 	.word	0x00400d73
  400d54:	00400d79 	.word	0x00400d79
  400d58:	00400d7f 	.word	0x00400d7f
  400d5c:	00400d83 	.word	0x00400d83
  400d60:	00400d87 	.word	0x00400d87
  400d64:	00400d8b 	.word	0x00400d8b
  400d68:	00400d8f 	.word	0x00400d8f
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  400d6c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  400d70:	e010      	b.n	400d94 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  400d72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400d76:	e00d      	b.n	400d94 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  400d78:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400d7c:	e00a      	b.n	400d94 <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  400d7e:	4b08      	ldr	r3, [pc, #32]	; (400da0 <osc_get_rate+0x68>)
  400d80:	e008      	b.n	400d94 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  400d82:	4b08      	ldr	r3, [pc, #32]	; (400da4 <osc_get_rate+0x6c>)
  400d84:	e006      	b.n	400d94 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  400d86:	4b08      	ldr	r3, [pc, #32]	; (400da8 <osc_get_rate+0x70>)
  400d88:	e004      	b.n	400d94 <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  400d8a:	4b08      	ldr	r3, [pc, #32]	; (400dac <osc_get_rate+0x74>)
  400d8c:	e002      	b.n	400d94 <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  400d8e:	4b06      	ldr	r3, [pc, #24]	; (400da8 <osc_get_rate+0x70>)
  400d90:	e000      	b.n	400d94 <osc_get_rate+0x5c>
	}

	return 0;
  400d92:	2300      	movs	r3, #0
}
  400d94:	4618      	mov	r0, r3
  400d96:	370c      	adds	r7, #12
  400d98:	46bd      	mov	sp, r7
  400d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
  400d9e:	4770      	bx	lr
  400da0:	003d0900 	.word	0x003d0900
  400da4:	007a1200 	.word	0x007a1200
  400da8:	00b71b00 	.word	0x00b71b00
  400dac:	00f42400 	.word	0x00f42400

00400db0 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  400db0:	b580      	push	{r7, lr}
  400db2:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  400db4:	2006      	movs	r0, #6
  400db6:	4b05      	ldr	r3, [pc, #20]	; (400dcc <sysclk_get_main_hz+0x1c>)
  400db8:	4798      	blx	r3
  400dba:	4602      	mov	r2, r0
  400dbc:	4613      	mov	r3, r2
  400dbe:	009b      	lsls	r3, r3, #2
  400dc0:	4413      	add	r3, r2
  400dc2:	009a      	lsls	r2, r3, #2
  400dc4:	4413      	add	r3, r2
  400dc6:	089b      	lsrs	r3, r3, #2
#endif
	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  400dc8:	4618      	mov	r0, r3
  400dca:	bd80      	pop	{r7, pc}
  400dcc:	00400d39 	.word	0x00400d39

00400dd0 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
  400dd0:	b580      	push	{r7, lr}
  400dd2:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  400dd4:	4b02      	ldr	r3, [pc, #8]	; (400de0 <sysclk_get_cpu_hz+0x10>)
  400dd6:	4798      	blx	r3
  400dd8:	4603      	mov	r3, r0
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  400dda:	4618      	mov	r0, r3
  400ddc:	bd80      	pop	{r7, pc}
  400dde:	bf00      	nop
  400de0:	00400db1 	.word	0x00400db1

00400de4 <afec_find_inst_num>:
 * \param afec  Base address of the AFEC
 *
 * \return   AFEC instance number
 */
static uint32_t afec_find_inst_num(Afec *const afec)
{
  400de4:	b480      	push	{r7}
  400de6:	b083      	sub	sp, #12
  400de8:	af00      	add	r7, sp, #0
  400dea:	6078      	str	r0, [r7, #4]
#if defined(AFEC1)
	if (afec == AFEC1) {
  400dec:	687b      	ldr	r3, [r7, #4]
  400dee:	4a09      	ldr	r2, [pc, #36]	; (400e14 <afec_find_inst_num+0x30>)
  400df0:	4293      	cmp	r3, r2
  400df2:	d101      	bne.n	400df8 <afec_find_inst_num+0x14>
		return 1;
  400df4:	2301      	movs	r3, #1
  400df6:	e006      	b.n	400e06 <afec_find_inst_num+0x22>
	}
#endif
#if defined(AFEC0)
	if (afec == AFEC0) {
  400df8:	687b      	ldr	r3, [r7, #4]
  400dfa:	4a07      	ldr	r2, [pc, #28]	; (400e18 <afec_find_inst_num+0x34>)
  400dfc:	4293      	cmp	r3, r2
  400dfe:	d101      	bne.n	400e04 <afec_find_inst_num+0x20>
		return 0;
  400e00:	2300      	movs	r3, #0
  400e02:	e000      	b.n	400e06 <afec_find_inst_num+0x22>
	}
#endif
	return 0;
  400e04:	2300      	movs	r3, #0
}
  400e06:	4618      	mov	r0, r3
  400e08:	370c      	adds	r7, #12
  400e0a:	46bd      	mov	sp, r7
  400e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
  400e10:	4770      	bx	lr
  400e12:	bf00      	nop
  400e14:	40064000 	.word	0x40064000
  400e18:	4003c000 	.word	0x4003c000

00400e1c <afec_find_pid>:
 * \param afec  Base address of the AFEC
 *
 * \return   AFEC Peripheral ID
 */
static uint32_t afec_find_pid(Afec *const afec)
{
  400e1c:	b480      	push	{r7}
  400e1e:	b083      	sub	sp, #12
  400e20:	af00      	add	r7, sp, #0
  400e22:	6078      	str	r0, [r7, #4]
#if defined(ID_AFEC1)
	if (afec == AFEC1) {
  400e24:	687b      	ldr	r3, [r7, #4]
  400e26:	4a09      	ldr	r2, [pc, #36]	; (400e4c <afec_find_pid+0x30>)
  400e28:	4293      	cmp	r3, r2
  400e2a:	d101      	bne.n	400e30 <afec_find_pid+0x14>
		return ID_AFEC1;
  400e2c:	2328      	movs	r3, #40	; 0x28
  400e2e:	e006      	b.n	400e3e <afec_find_pid+0x22>
	}
#endif
#if defined(ID_AFEC0)
	if (afec == AFEC0) {
  400e30:	687b      	ldr	r3, [r7, #4]
  400e32:	4a07      	ldr	r2, [pc, #28]	; (400e50 <afec_find_pid+0x34>)
  400e34:	4293      	cmp	r3, r2
  400e36:	d101      	bne.n	400e3c <afec_find_pid+0x20>
		return ID_AFEC0;
  400e38:	231d      	movs	r3, #29
  400e3a:	e000      	b.n	400e3e <afec_find_pid+0x22>
	}
#endif
	return ID_AFEC0;
  400e3c:	231d      	movs	r3, #29
}
  400e3e:	4618      	mov	r0, r3
  400e40:	370c      	adds	r7, #12
  400e42:	46bd      	mov	sp, r7
  400e44:	f85d 7b04 	ldr.w	r7, [sp], #4
  400e48:	4770      	bx	lr
  400e4a:	bf00      	nop
  400e4c:	40064000 	.word	0x40064000
  400e50:	4003c000 	.word	0x4003c000

00400e54 <afec_set_config>:
 *
 * \param afec  Base address of the AFEC
 * \param config   Configuration for the AFEC
 */
static void afec_set_config(Afec *const afec, struct afec_config *config)
{
  400e54:	b480      	push	{r7}
  400e56:	b085      	sub	sp, #20
  400e58:	af00      	add	r7, sp, #0
  400e5a:	6078      	str	r0, [r7, #4]
  400e5c:	6039      	str	r1, [r7, #0]
	uint32_t reg = 0;
  400e5e:	2300      	movs	r3, #0
  400e60:	60fb      	str	r3, [r7, #12]

	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  400e62:	683b      	ldr	r3, [r7, #0]
  400e64:	7cdb      	ldrb	r3, [r3, #19]
  400e66:	2b00      	cmp	r3, #0
  400e68:	d002      	beq.n	400e70 <afec_set_config+0x1c>
  400e6a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
  400e6e:	e000      	b.n	400e72 <afec_set_config+0x1e>
  400e70:	2200      	movs	r2, #0
		#if (SAMV71 || SAMV70 || SAME70 || SAMS70)
			AFEC_MR_PRESCAL((config->mck / config->afec_clock )- 1) |
  400e72:	683b      	ldr	r3, [r7, #0]
  400e74:	6859      	ldr	r1, [r3, #4]
  400e76:	683b      	ldr	r3, [r7, #0]
  400e78:	689b      	ldr	r3, [r3, #8]
  400e7a:	fbb1 f3f3 	udiv	r3, r1, r3
  400e7e:	3b01      	subs	r3, #1
  400e80:	021b      	lsls	r3, r3, #8
  400e82:	b29b      	uxth	r3, r3
 */
static void afec_set_config(Afec *const afec, struct afec_config *config)
{
	uint32_t reg = 0;

	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  400e84:	431a      	orrs	r2, r3
		#else
			(config->anach ? AFEC_MR_ANACH_ALLOWED : 0) |
			AFEC_MR_PRESCAL(config->mck / (2 * config->afec_clock) - 1) |
			(config->settling_time) |		
		#endif
			AFEC_MR_TRACKTIM(config->tracktim) |
  400e86:	683b      	ldr	r3, [r7, #0]
  400e88:	7c1b      	ldrb	r3, [r3, #16]
  400e8a:	061b      	lsls	r3, r3, #24
	uint32_t reg = 0;

	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
		#if (SAMV71 || SAMV70 || SAME70 || SAMS70)
			AFEC_MR_PRESCAL((config->mck / config->afec_clock )- 1) |
			AFEC_MR_ONE |
  400e8c:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
  400e90:	431a      	orrs	r2, r3
			(config->anach ? AFEC_MR_ANACH_ALLOWED : 0) |
			AFEC_MR_PRESCAL(config->mck / (2 * config->afec_clock) - 1) |
			(config->settling_time) |		
		#endif
			AFEC_MR_TRACKTIM(config->tracktim) |
			AFEC_MR_TRANSFER(config->transfer) |
  400e92:	683b      	ldr	r3, [r7, #0]
  400e94:	7c5b      	ldrb	r3, [r3, #17]
  400e96:	071b      	lsls	r3, r3, #28
		#else
			(config->anach ? AFEC_MR_ANACH_ALLOWED : 0) |
			AFEC_MR_PRESCAL(config->mck / (2 * config->afec_clock) - 1) |
			(config->settling_time) |		
		#endif
			AFEC_MR_TRACKTIM(config->tracktim) |
  400e98:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
  400e9c:	431a      	orrs	r2, r3
			AFEC_MR_TRANSFER(config->transfer) |
			(config->startup_time);
  400e9e:	683b      	ldr	r3, [r7, #0]
  400ea0:	68db      	ldr	r3, [r3, #12]
			(config->anach ? AFEC_MR_ANACH_ALLOWED : 0) |
			AFEC_MR_PRESCAL(config->mck / (2 * config->afec_clock) - 1) |
			(config->settling_time) |		
		#endif
			AFEC_MR_TRACKTIM(config->tracktim) |
			AFEC_MR_TRANSFER(config->transfer) |
  400ea2:	4313      	orrs	r3, r2
 */
static void afec_set_config(Afec *const afec, struct afec_config *config)
{
	uint32_t reg = 0;

	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  400ea4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
  400ea8:	60fb      	str	r3, [r7, #12]
		#endif
			AFEC_MR_TRACKTIM(config->tracktim) |
			AFEC_MR_TRANSFER(config->transfer) |
			(config->startup_time);

	afec->AFEC_MR = reg;
  400eaa:	687b      	ldr	r3, [r7, #4]
  400eac:	68fa      	ldr	r2, [r7, #12]
  400eae:	605a      	str	r2, [r3, #4]

	afec->AFEC_EMR = (config->tag ? AFEC_EMR_TAG : 0) |
  400eb0:	683b      	ldr	r3, [r7, #0]
  400eb2:	7d1b      	ldrb	r3, [r3, #20]
  400eb4:	2b00      	cmp	r3, #0
  400eb6:	d002      	beq.n	400ebe <afec_set_config+0x6a>
  400eb8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
  400ebc:	e000      	b.n	400ec0 <afec_set_config+0x6c>
  400ebe:	2200      	movs	r2, #0
			(config->resolution) |
  400ec0:	683b      	ldr	r3, [r7, #0]
  400ec2:	681b      	ldr	r3, [r3, #0]
			AFEC_MR_TRANSFER(config->transfer) |
			(config->startup_time);

	afec->AFEC_MR = reg;

	afec->AFEC_EMR = (config->tag ? AFEC_EMR_TAG : 0) |
  400ec4:	431a      	orrs	r2, r3
			(config->resolution) |
			(config->stm ? AFEC_EMR_STM : 0);
  400ec6:	683b      	ldr	r3, [r7, #0]
  400ec8:	7d5b      	ldrb	r3, [r3, #21]
  400eca:	2b00      	cmp	r3, #0
  400ecc:	d002      	beq.n	400ed4 <afec_set_config+0x80>
  400ece:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
  400ed2:	e000      	b.n	400ed6 <afec_set_config+0x82>
  400ed4:	2300      	movs	r3, #0
			(config->startup_time);

	afec->AFEC_MR = reg;

	afec->AFEC_EMR = (config->tag ? AFEC_EMR_TAG : 0) |
			(config->resolution) |
  400ed6:	431a      	orrs	r2, r3
			AFEC_MR_TRANSFER(config->transfer) |
			(config->startup_time);

	afec->AFEC_MR = reg;

	afec->AFEC_EMR = (config->tag ? AFEC_EMR_TAG : 0) |
  400ed8:	687b      	ldr	r3, [r7, #4]
  400eda:	609a      	str	r2, [r3, #8]
			(config->resolution) |
			(config->stm ? AFEC_EMR_STM : 0);
  #if (SAMV71 || SAMV70 || SAME70 || SAMS70)
	afec->AFEC_ACR = AFEC_ACR_IBCTL(config->ibctl) | AFEC_ACR_PGA0EN | AFEC_ACR_PGA1EN;
  400edc:	683b      	ldr	r3, [r7, #0]
  400ede:	7d9b      	ldrb	r3, [r3, #22]
  400ee0:	021b      	lsls	r3, r3, #8
  400ee2:	f403 7340 	and.w	r3, r3, #768	; 0x300
  400ee6:	f043 020c 	orr.w	r2, r3, #12
  400eea:	687b      	ldr	r3, [r7, #4]
  400eec:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  #else
    afec->AFEC_ACR = AFEC_ACR_IBCTL(config->ibctl);
  #endif
}
  400ef0:	3714      	adds	r7, #20
  400ef2:	46bd      	mov	sp, r7
  400ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
  400ef8:	4770      	bx	lr
  400efa:	bf00      	nop

00400efc <afec_ch_set_config>:
 * \param channel The channel number
 * \param config   Configuration for the AFEC channel
 */
void afec_ch_set_config(Afec *const afec, const enum afec_channel_num channel,
		struct afec_ch_config *config)
{
  400efc:	b580      	push	{r7, lr}
  400efe:	b086      	sub	sp, #24
  400f00:	af00      	add	r7, sp, #0
  400f02:	60f8      	str	r0, [r7, #12]
  400f04:	460b      	mov	r3, r1
  400f06:	607a      	str	r2, [r7, #4]
  400f08:	817b      	strh	r3, [r7, #10]
	afec_ch_sanity_check(afec, channel);
  400f0a:	897b      	ldrh	r3, [r7, #10]
  400f0c:	68f8      	ldr	r0, [r7, #12]
  400f0e:	4619      	mov	r1, r3
  400f10:	4b1d      	ldr	r3, [pc, #116]	; (400f88 <afec_ch_set_config+0x8c>)
  400f12:	4798      	blx	r3
	uint32_t reg = 0;
  400f14:	2300      	movs	r3, #0
  400f16:	617b      	str	r3, [r7, #20]

	reg = afec->AFEC_DIFFR;
  400f18:	68fb      	ldr	r3, [r7, #12]
  400f1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
  400f1c:	617b      	str	r3, [r7, #20]
	reg &= ~(0x1u << channel);
  400f1e:	897b      	ldrh	r3, [r7, #10]
  400f20:	2201      	movs	r2, #1
  400f22:	fa02 f303 	lsl.w	r3, r2, r3
  400f26:	43db      	mvns	r3, r3
  400f28:	697a      	ldr	r2, [r7, #20]
  400f2a:	4013      	ands	r3, r2
  400f2c:	617b      	str	r3, [r7, #20]
	reg |= (config->diff) ? (0x1u << channel) : 0;
  400f2e:	687b      	ldr	r3, [r7, #4]
  400f30:	781b      	ldrb	r3, [r3, #0]
  400f32:	2b00      	cmp	r3, #0
  400f34:	d004      	beq.n	400f40 <afec_ch_set_config+0x44>
  400f36:	897b      	ldrh	r3, [r7, #10]
  400f38:	2201      	movs	r2, #1
  400f3a:	fa02 f303 	lsl.w	r3, r2, r3
  400f3e:	e000      	b.n	400f42 <afec_ch_set_config+0x46>
  400f40:	2300      	movs	r3, #0
  400f42:	697a      	ldr	r2, [r7, #20]
  400f44:	4313      	orrs	r3, r2
  400f46:	617b      	str	r3, [r7, #20]
	afec->AFEC_DIFFR = reg;
  400f48:	68fb      	ldr	r3, [r7, #12]
  400f4a:	697a      	ldr	r2, [r7, #20]
  400f4c:	661a      	str	r2, [r3, #96]	; 0x60

	reg = afec->AFEC_CGR;
  400f4e:	68fb      	ldr	r3, [r7, #12]
  400f50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
  400f52:	617b      	str	r3, [r7, #20]
	reg &= ~(0x03u << (2 * channel));
  400f54:	897b      	ldrh	r3, [r7, #10]
  400f56:	005b      	lsls	r3, r3, #1
  400f58:	2203      	movs	r2, #3
  400f5a:	fa02 f303 	lsl.w	r3, r2, r3
  400f5e:	43db      	mvns	r3, r3
  400f60:	697a      	ldr	r2, [r7, #20]
  400f62:	4013      	ands	r3, r2
  400f64:	617b      	str	r3, [r7, #20]
	reg |= (config->gain) << (2 * channel);
  400f66:	687b      	ldr	r3, [r7, #4]
  400f68:	785b      	ldrb	r3, [r3, #1]
  400f6a:	461a      	mov	r2, r3
  400f6c:	897b      	ldrh	r3, [r7, #10]
  400f6e:	005b      	lsls	r3, r3, #1
  400f70:	fa02 f303 	lsl.w	r3, r2, r3
  400f74:	461a      	mov	r2, r3
  400f76:	697b      	ldr	r3, [r7, #20]
  400f78:	4313      	orrs	r3, r2
  400f7a:	617b      	str	r3, [r7, #20]
	afec->AFEC_CGR = reg;
  400f7c:	68fb      	ldr	r3, [r7, #12]
  400f7e:	697a      	ldr	r2, [r7, #20]
  400f80:	655a      	str	r2, [r3, #84]	; 0x54
}
  400f82:	3718      	adds	r7, #24
  400f84:	46bd      	mov	sp, r7
  400f86:	bd80      	pop	{r7, pc}
  400f88:	00400cc5 	.word	0x00400cc5

00400f8c <afec_get_config_defaults>:
 * - AFE Bias Current Control value is 1
 *
 * \param cfg Pointer to configuration structure to be initiated.
 */
void afec_get_config_defaults(struct afec_config *const cfg)
{
  400f8c:	b580      	push	{r7, lr}
  400f8e:	b082      	sub	sp, #8
  400f90:	af00      	add	r7, sp, #0
  400f92:	6078      	str	r0, [r7, #4]
	/* Sanity check argument. */
	Assert(cfg);

	cfg->resolution = AFEC_12_BITS;
  400f94:	687b      	ldr	r3, [r7, #4]
  400f96:	2200      	movs	r2, #0
  400f98:	601a      	str	r2, [r3, #0]
	cfg->mck = sysclk_get_cpu_hz();
  400f9a:	4b12      	ldr	r3, [pc, #72]	; (400fe4 <afec_get_config_defaults+0x58>)
  400f9c:	4798      	blx	r3
  400f9e:	4602      	mov	r2, r0
  400fa0:	687b      	ldr	r3, [r7, #4]
  400fa2:	605a      	str	r2, [r3, #4]
		cfg->afec_clock = 6000000UL;
  400fa4:	687b      	ldr	r3, [r7, #4]
  400fa6:	4a10      	ldr	r2, [pc, #64]	; (400fe8 <afec_get_config_defaults+0x5c>)
  400fa8:	609a      	str	r2, [r3, #8]
		cfg->startup_time = AFEC_STARTUP_TIME_4;
  400faa:	687b      	ldr	r3, [r7, #4]
  400fac:	f44f 2280 	mov.w	r2, #262144	; 0x40000
  400fb0:	60da      	str	r2, [r3, #12]
	#if !(SAMV71 || SAMV70 || SAME70 || SAMS70)
		cfg->settling_time = AFEC_SETTLING_TIME_0;
	#endif	
		cfg->tracktim = 2;
  400fb2:	687b      	ldr	r3, [r7, #4]
  400fb4:	2202      	movs	r2, #2
  400fb6:	741a      	strb	r2, [r3, #16]
		cfg->transfer = 1;
  400fb8:	687b      	ldr	r3, [r7, #4]
  400fba:	2201      	movs	r2, #1
  400fbc:	745a      	strb	r2, [r3, #17]
		cfg->anach = true;
  400fbe:	687b      	ldr	r3, [r7, #4]
  400fc0:	2201      	movs	r2, #1
  400fc2:	749a      	strb	r2, [r3, #18]
		cfg->useq = false;
  400fc4:	687b      	ldr	r3, [r7, #4]
  400fc6:	2200      	movs	r2, #0
  400fc8:	74da      	strb	r2, [r3, #19]
		cfg->tag = true;
  400fca:	687b      	ldr	r3, [r7, #4]
  400fcc:	2201      	movs	r2, #1
  400fce:	751a      	strb	r2, [r3, #20]
		cfg->stm = true;
  400fd0:	687b      	ldr	r3, [r7, #4]
  400fd2:	2201      	movs	r2, #1
  400fd4:	755a      	strb	r2, [r3, #21]
		cfg->ibctl = 1;
  400fd6:	687b      	ldr	r3, [r7, #4]
  400fd8:	2201      	movs	r2, #1
  400fda:	759a      	strb	r2, [r3, #22]
}
  400fdc:	3708      	adds	r7, #8
  400fde:	46bd      	mov	sp, r7
  400fe0:	bd80      	pop	{r7, pc}
  400fe2:	bf00      	nop
  400fe4:	00400dd1 	.word	0x00400dd1
  400fe8:	005b8d80 	.word	0x005b8d80

00400fec <afec_ch_get_config_defaults>:
 * - Gain value is 1
 *
 * \param cfg Pointer to channel configuration structure to be initiated.
 */
void afec_ch_get_config_defaults(struct afec_ch_config *const cfg)
{
  400fec:	b480      	push	{r7}
  400fee:	b083      	sub	sp, #12
  400ff0:	af00      	add	r7, sp, #0
  400ff2:	6078      	str	r0, [r7, #4]
	/*Sanity check argument. */
	Assert(cfg);

	cfg->diff = false;
  400ff4:	687b      	ldr	r3, [r7, #4]
  400ff6:	2200      	movs	r2, #0
  400ff8:	701a      	strb	r2, [r3, #0]
   	cfg->gain = AFEC_GAINVALUE_1;
  400ffa:	687b      	ldr	r3, [r7, #4]
  400ffc:	2201      	movs	r2, #1
  400ffe:	705a      	strb	r2, [r3, #1]

}
  401000:	370c      	adds	r7, #12
  401002:	46bd      	mov	sp, r7
  401004:	f85d 7b04 	ldr.w	r7, [sp], #4
  401008:	4770      	bx	lr
  40100a:	bf00      	nop

0040100c <afec_init>:
 *
 * \retval STATUS_OK  Initialization is finished.
 * \retval STATUS_ERR_BUSY  Initialization failed.
 */
enum status_code afec_init(Afec *const afec, struct afec_config *config)
{
  40100c:	b580      	push	{r7, lr}
  40100e:	b084      	sub	sp, #16
  401010:	af00      	add	r7, sp, #0
  401012:	6078      	str	r0, [r7, #4]
  401014:	6039      	str	r1, [r7, #0]
	Assert(afec);
	Assert(config);

	if ((afec_get_interrupt_status(afec) & AFEC_ISR_DRDY) == AFEC_ISR_DRDY) {
  401016:	6878      	ldr	r0, [r7, #4]
  401018:	4b17      	ldr	r3, [pc, #92]	; (401078 <afec_init+0x6c>)
  40101a:	4798      	blx	r3
  40101c:	4603      	mov	r3, r0
  40101e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  401022:	2b00      	cmp	r3, #0
  401024:	d001      	beq.n	40102a <afec_init+0x1e>
		return STATUS_ERR_BUSY;
  401026:	2319      	movs	r3, #25
  401028:	e021      	b.n	40106e <afec_init+0x62>
	}

	/* Reset and configure the AFEC module */
	afec->AFEC_CR = AFEC_CR_SWRST;
  40102a:	687b      	ldr	r3, [r7, #4]
  40102c:	2201      	movs	r2, #1
  40102e:	601a      	str	r2, [r3, #0]
	afec_set_config(afec, config);
  401030:	6878      	ldr	r0, [r7, #4]
  401032:	6839      	ldr	r1, [r7, #0]
  401034:	4b11      	ldr	r3, [pc, #68]	; (40107c <afec_init+0x70>)
  401036:	4798      	blx	r3

	uint32_t i, j;
	for (i = 0; i < NUM_OF_AFEC; i++) {
  401038:	2300      	movs	r3, #0
  40103a:	60fb      	str	r3, [r7, #12]
  40103c:	e013      	b.n	401066 <afec_init+0x5a>
		for (j = 0; j < _AFEC_NUM_OF_INTERRUPT_SOURCE; j++) {
  40103e:	2300      	movs	r3, #0
  401040:	60bb      	str	r3, [r7, #8]
  401042:	e00a      	b.n	40105a <afec_init+0x4e>
			afec_callback_pointer[i][j] = 0;
  401044:	490e      	ldr	r1, [pc, #56]	; (401080 <afec_init+0x74>)
  401046:	68fb      	ldr	r3, [r7, #12]
  401048:	011a      	lsls	r2, r3, #4
  40104a:	68bb      	ldr	r3, [r7, #8]
  40104c:	4413      	add	r3, r2
  40104e:	2200      	movs	r2, #0
  401050:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	afec->AFEC_CR = AFEC_CR_SWRST;
	afec_set_config(afec, config);

	uint32_t i, j;
	for (i = 0; i < NUM_OF_AFEC; i++) {
		for (j = 0; j < _AFEC_NUM_OF_INTERRUPT_SOURCE; j++) {
  401054:	68bb      	ldr	r3, [r7, #8]
  401056:	3301      	adds	r3, #1
  401058:	60bb      	str	r3, [r7, #8]
  40105a:	68bb      	ldr	r3, [r7, #8]
  40105c:	2b0f      	cmp	r3, #15
  40105e:	d9f1      	bls.n	401044 <afec_init+0x38>
	/* Reset and configure the AFEC module */
	afec->AFEC_CR = AFEC_CR_SWRST;
	afec_set_config(afec, config);

	uint32_t i, j;
	for (i = 0; i < NUM_OF_AFEC; i++) {
  401060:	68fb      	ldr	r3, [r7, #12]
  401062:	3301      	adds	r3, #1
  401064:	60fb      	str	r3, [r7, #12]
  401066:	68fb      	ldr	r3, [r7, #12]
  401068:	2b01      	cmp	r3, #1
  40106a:	d9e8      	bls.n	40103e <afec_init+0x32>
		for (j = 0; j < _AFEC_NUM_OF_INTERRUPT_SOURCE; j++) {
			afec_callback_pointer[i][j] = 0;
		}
	}

	return STATUS_OK;
  40106c:	2300      	movs	r3, #0
  40106e:	b25b      	sxtb	r3, r3
}
  401070:	4618      	mov	r0, r3
  401072:	3710      	adds	r7, #16
  401074:	46bd      	mov	sp, r7
  401076:	bd80      	pop	{r7, pc}
  401078:	00400cdd 	.word	0x00400cdd
  40107c:	00400e55 	.word	0x00400e55
  401080:	20400a14 	.word	0x20400a14

00401084 <afec_set_callback>:
 * \param callback  Callback function pointer
 * \param irq_level Interrupt level
 */
void afec_set_callback(Afec *const afec, enum afec_interrupt_source source,
		afec_callback_t callback, uint8_t irq_level)
{
  401084:	b580      	push	{r7, lr}
  401086:	b086      	sub	sp, #24
  401088:	af00      	add	r7, sp, #0
  40108a:	60f8      	str	r0, [r7, #12]
  40108c:	60b9      	str	r1, [r7, #8]
  40108e:	607a      	str	r2, [r7, #4]
  401090:	70fb      	strb	r3, [r7, #3]
	Assert(afec);
	Assert(callback);

	uint32_t i = afec_find_inst_num(afec);
  401092:	68f8      	ldr	r0, [r7, #12]
  401094:	4b17      	ldr	r3, [pc, #92]	; (4010f4 <afec_set_callback+0x70>)
  401096:	4798      	blx	r3
  401098:	6178      	str	r0, [r7, #20]
	afec_callback_pointer[i][source] = callback;
  40109a:	4917      	ldr	r1, [pc, #92]	; (4010f8 <afec_set_callback+0x74>)
  40109c:	697b      	ldr	r3, [r7, #20]
  40109e:	011a      	lsls	r2, r3, #4
  4010a0:	68bb      	ldr	r3, [r7, #8]
  4010a2:	4413      	add	r3, r2
  4010a4:	687a      	ldr	r2, [r7, #4]
  4010a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	if (!i) {
  4010aa:	697b      	ldr	r3, [r7, #20]
  4010ac:	2b00      	cmp	r3, #0
  4010ae:	d10b      	bne.n	4010c8 <afec_set_callback+0x44>
		irq_register_handler(AFEC0_IRQn, irq_level);
  4010b0:	201d      	movs	r0, #29
  4010b2:	4b12      	ldr	r3, [pc, #72]	; (4010fc <afec_set_callback+0x78>)
  4010b4:	4798      	blx	r3
  4010b6:	78fb      	ldrb	r3, [r7, #3]
  4010b8:	201d      	movs	r0, #29
  4010ba:	4619      	mov	r1, r3
  4010bc:	4b10      	ldr	r3, [pc, #64]	; (401100 <afec_set_callback+0x7c>)
  4010be:	4798      	blx	r3
  4010c0:	201d      	movs	r0, #29
  4010c2:	4b10      	ldr	r3, [pc, #64]	; (401104 <afec_set_callback+0x80>)
  4010c4:	4798      	blx	r3
  4010c6:	e00d      	b.n	4010e4 <afec_set_callback+0x60>
	} else if (i == 1) {
  4010c8:	697b      	ldr	r3, [r7, #20]
  4010ca:	2b01      	cmp	r3, #1
  4010cc:	d10a      	bne.n	4010e4 <afec_set_callback+0x60>
		irq_register_handler(AFEC1_IRQn, irq_level);
  4010ce:	2028      	movs	r0, #40	; 0x28
  4010d0:	4b0a      	ldr	r3, [pc, #40]	; (4010fc <afec_set_callback+0x78>)
  4010d2:	4798      	blx	r3
  4010d4:	78fb      	ldrb	r3, [r7, #3]
  4010d6:	2028      	movs	r0, #40	; 0x28
  4010d8:	4619      	mov	r1, r3
  4010da:	4b09      	ldr	r3, [pc, #36]	; (401100 <afec_set_callback+0x7c>)
  4010dc:	4798      	blx	r3
  4010de:	2028      	movs	r0, #40	; 0x28
  4010e0:	4b08      	ldr	r3, [pc, #32]	; (401104 <afec_set_callback+0x80>)
  4010e2:	4798      	blx	r3
	}
	/* Enable the specified interrupt source */
	afec_enable_interrupt(afec, source);
  4010e4:	68f8      	ldr	r0, [r7, #12]
  4010e6:	68b9      	ldr	r1, [r7, #8]
  4010e8:	4b07      	ldr	r3, [pc, #28]	; (401108 <afec_set_callback+0x84>)
  4010ea:	4798      	blx	r3
}
  4010ec:	3718      	adds	r7, #24
  4010ee:	46bd      	mov	sp, r7
  4010f0:	bd80      	pop	{r7, pc}
  4010f2:	bf00      	nop
  4010f4:	00400de5 	.word	0x00400de5
  4010f8:	20400a14 	.word	0x20400a14
  4010fc:	00400bb5 	.word	0x00400bb5
  401100:	00400be9 	.word	0x00400be9
  401104:	00400b85 	.word	0x00400b85
  401108:	0040110d 	.word	0x0040110d

0040110c <afec_enable_interrupt>:
 * \param afec  Base address of the AFEC.
 * \param interrupt_source Interrupts to be enabled.
 */
void afec_enable_interrupt(Afec *const afec,
		enum afec_interrupt_source interrupt_source)
{
  40110c:	b480      	push	{r7}
  40110e:	b083      	sub	sp, #12
  401110:	af00      	add	r7, sp, #0
  401112:	6078      	str	r0, [r7, #4]
  401114:	6039      	str	r1, [r7, #0]
	if (interrupt_source == AFEC_INTERRUPT_ALL) {
  401116:	683b      	ldr	r3, [r7, #0]
  401118:	4a19      	ldr	r2, [pc, #100]	; (401180 <afec_enable_interrupt+0x74>)
  40111a:	4293      	cmp	r3, r2
  40111c:	d103      	bne.n	401126 <afec_enable_interrupt+0x1a>
		afec->AFEC_IER = AFEC_INTERRUPT_ALL;
  40111e:	687b      	ldr	r3, [r7, #4]
  401120:	4a17      	ldr	r2, [pc, #92]	; (401180 <afec_enable_interrupt+0x74>)
  401122:	625a      	str	r2, [r3, #36]	; 0x24
		return;
  401124:	e026      	b.n	401174 <afec_enable_interrupt+0x68>
	}

	if (interrupt_source < AFEC_INTERRUPT_DATA_READY) {
  401126:	683b      	ldr	r3, [r7, #0]
  401128:	2b0b      	cmp	r3, #11
  40112a:	d80f      	bhi.n	40114c <afec_enable_interrupt+0x40>
	  #if (SAMV71 || SAMV70 || SAME70 || SAMS70)
		if (interrupt_source == AFEC_INTERRUPT_EOC_11) {
  40112c:	683b      	ldr	r3, [r7, #0]
  40112e:	2b0b      	cmp	r3, #11
  401130:	d104      	bne.n	40113c <afec_enable_interrupt+0x30>
			afec->AFEC_IER = 1 << AFEC_TEMP_INT_SOURCE_NUM;
  401132:	687b      	ldr	r3, [r7, #4]
  401134:	f44f 6200 	mov.w	r2, #2048	; 0x800
  401138:	625a      	str	r2, [r3, #36]	; 0x24
  40113a:	e01b      	b.n	401174 <afec_enable_interrupt+0x68>
	  #else
		if (interrupt_source == AFEC_INTERRUPT_EOC_15) {
			afec->AFEC_IER = 1 << AFEC_TEMP_INT_SOURCE_NUM;	  
	  #endif 
		} else {
			afec->AFEC_IER = 1 << interrupt_source;
  40113c:	683b      	ldr	r3, [r7, #0]
  40113e:	2201      	movs	r2, #1
  401140:	fa02 f303 	lsl.w	r3, r2, r3
  401144:	461a      	mov	r2, r3
  401146:	687b      	ldr	r3, [r7, #4]
  401148:	625a      	str	r2, [r3, #36]	; 0x24
  40114a:	e013      	b.n	401174 <afec_enable_interrupt+0x68>
		}
	} else if (interrupt_source < AFEC_INTERRUPT_TEMP_CHANGE) {
  40114c:	683b      	ldr	r3, [r7, #0]
  40114e:	2b0e      	cmp	r3, #14
  401150:	d808      	bhi.n	401164 <afec_enable_interrupt+0x58>
		afec->AFEC_IER = 1 << (interrupt_source + AFEC_INTERRUPT_GAP1);
  401152:	683b      	ldr	r3, [r7, #0]
  401154:	330c      	adds	r3, #12
  401156:	461a      	mov	r2, r3
  401158:	2301      	movs	r3, #1
  40115a:	4093      	lsls	r3, r2
  40115c:	461a      	mov	r2, r3
  40115e:	687b      	ldr	r3, [r7, #4]
  401160:	625a      	str	r2, [r3, #36]	; 0x24
  401162:	e007      	b.n	401174 <afec_enable_interrupt+0x68>
	} else {
		afec->AFEC_IER = 1 << (interrupt_source + AFEC_INTERRUPT_GAP1
				+ AFEC_INTERRUPT_GAP2);
  401164:	683b      	ldr	r3, [r7, #0]
  401166:	330f      	adds	r3, #15
			afec->AFEC_IER = 1 << interrupt_source;
		}
	} else if (interrupt_source < AFEC_INTERRUPT_TEMP_CHANGE) {
		afec->AFEC_IER = 1 << (interrupt_source + AFEC_INTERRUPT_GAP1);
	} else {
		afec->AFEC_IER = 1 << (interrupt_source + AFEC_INTERRUPT_GAP1
  401168:	461a      	mov	r2, r3
  40116a:	2301      	movs	r3, #1
  40116c:	4093      	lsls	r3, r2
  40116e:	461a      	mov	r2, r3
  401170:	687b      	ldr	r3, [r7, #4]
  401172:	625a      	str	r2, [r3, #36]	; 0x24
				+ AFEC_INTERRUPT_GAP2);
	}
}
  401174:	370c      	adds	r7, #12
  401176:	46bd      	mov	sp, r7
  401178:	f85d 7b04 	ldr.w	r7, [sp], #4
  40117c:	4770      	bx	lr
  40117e:	bf00      	nop
  401180:	47000fff 	.word	0x47000fff

00401184 <afec_interrupt>:
 * \param inst_num AFEC instance number to handle interrupt for
 * \param source   Interrupt source number
 */
static void afec_interrupt(uint8_t inst_num,
		enum afec_interrupt_source source)
{
  401184:	b580      	push	{r7, lr}
  401186:	b082      	sub	sp, #8
  401188:	af00      	add	r7, sp, #0
  40118a:	4603      	mov	r3, r0
  40118c:	6039      	str	r1, [r7, #0]
  40118e:	71fb      	strb	r3, [r7, #7]
	if (afec_callback_pointer[inst_num][source]) {
  401190:	79fb      	ldrb	r3, [r7, #7]
  401192:	4909      	ldr	r1, [pc, #36]	; (4011b8 <afec_interrupt+0x34>)
  401194:	011a      	lsls	r2, r3, #4
  401196:	683b      	ldr	r3, [r7, #0]
  401198:	4413      	add	r3, r2
  40119a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
  40119e:	2b00      	cmp	r3, #0
  4011a0:	d007      	beq.n	4011b2 <afec_interrupt+0x2e>
		afec_callback_pointer[inst_num][source]();
  4011a2:	79fb      	ldrb	r3, [r7, #7]
  4011a4:	4904      	ldr	r1, [pc, #16]	; (4011b8 <afec_interrupt+0x34>)
  4011a6:	011a      	lsls	r2, r3, #4
  4011a8:	683b      	ldr	r3, [r7, #0]
  4011aa:	4413      	add	r3, r2
  4011ac:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
  4011b0:	4798      	blx	r3
	}
}
  4011b2:	3708      	adds	r7, #8
  4011b4:	46bd      	mov	sp, r7
  4011b6:	bd80      	pop	{r7, pc}
  4011b8:	20400a14 	.word	0x20400a14

004011bc <afec_process_callback>:
 * \brief Call the callback function if the corresponding interrupt is asserted
 *
 * \param afec  Base address of the AFEC.
 */
static void afec_process_callback(Afec *const afec)
{
  4011bc:	b580      	push	{r7, lr}
  4011be:	b086      	sub	sp, #24
  4011c0:	af00      	add	r7, sp, #0
  4011c2:	6078      	str	r0, [r7, #4]
	volatile uint32_t status;
	uint32_t cnt, inst_num;

	status = afec_get_interrupt_status(afec);
  4011c4:	6878      	ldr	r0, [r7, #4]
  4011c6:	4b25      	ldr	r3, [pc, #148]	; (40125c <afec_process_callback+0xa0>)
  4011c8:	4798      	blx	r3
  4011ca:	4603      	mov	r3, r0
  4011cc:	60fb      	str	r3, [r7, #12]
	inst_num = afec_find_inst_num(afec);
  4011ce:	6878      	ldr	r0, [r7, #4]
  4011d0:	4b23      	ldr	r3, [pc, #140]	; (401260 <afec_process_callback+0xa4>)
  4011d2:	4798      	blx	r3
  4011d4:	6138      	str	r0, [r7, #16]

	for (cnt = 0; cnt < _AFEC_NUM_OF_INTERRUPT_SOURCE; cnt++) {
  4011d6:	2300      	movs	r3, #0
  4011d8:	617b      	str	r3, [r7, #20]
  4011da:	e039      	b.n	401250 <afec_process_callback+0x94>
		if (cnt < AFEC_INTERRUPT_DATA_READY) {
  4011dc:	697b      	ldr	r3, [r7, #20]
  4011de:	2b0b      	cmp	r3, #11
  4011e0:	d80f      	bhi.n	401202 <afec_process_callback+0x46>
				if (status & (1 << cnt)) {
					afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
				}
			}
		#elif defined __SAM4E8E__  || defined __SAM4E16E__ || SAMV71 || SAMV70 || SAMS70 || SAME70
			if (status & (1 << cnt)) {
  4011e2:	697b      	ldr	r3, [r7, #20]
  4011e4:	2201      	movs	r2, #1
  4011e6:	fa02 f303 	lsl.w	r3, r2, r3
  4011ea:	461a      	mov	r2, r3
  4011ec:	68fb      	ldr	r3, [r7, #12]
  4011ee:	4013      	ands	r3, r2
  4011f0:	2b00      	cmp	r3, #0
  4011f2:	d02a      	beq.n	40124a <afec_process_callback+0x8e>
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
  4011f4:	693b      	ldr	r3, [r7, #16]
  4011f6:	b2db      	uxtb	r3, r3
  4011f8:	4618      	mov	r0, r3
  4011fa:	6979      	ldr	r1, [r7, #20]
  4011fc:	4b19      	ldr	r3, [pc, #100]	; (401264 <afec_process_callback+0xa8>)
  4011fe:	4798      	blx	r3
  401200:	e023      	b.n	40124a <afec_process_callback+0x8e>
			}
		#endif
		} else if (cnt < AFEC_INTERRUPT_TEMP_CHANGE) {
  401202:	697b      	ldr	r3, [r7, #20]
  401204:	2b0e      	cmp	r3, #14
  401206:	d810      	bhi.n	40122a <afec_process_callback+0x6e>
			if (status & (1 << (cnt + AFEC_INTERRUPT_GAP1))) {
  401208:	697b      	ldr	r3, [r7, #20]
  40120a:	330c      	adds	r3, #12
  40120c:	461a      	mov	r2, r3
  40120e:	2301      	movs	r3, #1
  401210:	4093      	lsls	r3, r2
  401212:	461a      	mov	r2, r3
  401214:	68fb      	ldr	r3, [r7, #12]
  401216:	4013      	ands	r3, r2
  401218:	2b00      	cmp	r3, #0
  40121a:	d016      	beq.n	40124a <afec_process_callback+0x8e>
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
  40121c:	693b      	ldr	r3, [r7, #16]
  40121e:	b2db      	uxtb	r3, r3
  401220:	4618      	mov	r0, r3
  401222:	6979      	ldr	r1, [r7, #20]
  401224:	4b0f      	ldr	r3, [pc, #60]	; (401264 <afec_process_callback+0xa8>)
  401226:	4798      	blx	r3
  401228:	e00f      	b.n	40124a <afec_process_callback+0x8e>
			}
		} else {
			if (status & (1 << (cnt + AFEC_INTERRUPT_GAP1 + AFEC_INTERRUPT_GAP2))) {
  40122a:	697b      	ldr	r3, [r7, #20]
  40122c:	330f      	adds	r3, #15
  40122e:	461a      	mov	r2, r3
  401230:	2301      	movs	r3, #1
  401232:	4093      	lsls	r3, r2
  401234:	461a      	mov	r2, r3
  401236:	68fb      	ldr	r3, [r7, #12]
  401238:	4013      	ands	r3, r2
  40123a:	2b00      	cmp	r3, #0
  40123c:	d005      	beq.n	40124a <afec_process_callback+0x8e>
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
  40123e:	693b      	ldr	r3, [r7, #16]
  401240:	b2db      	uxtb	r3, r3
  401242:	4618      	mov	r0, r3
  401244:	6979      	ldr	r1, [r7, #20]
  401246:	4b07      	ldr	r3, [pc, #28]	; (401264 <afec_process_callback+0xa8>)
  401248:	4798      	blx	r3
	uint32_t cnt, inst_num;

	status = afec_get_interrupt_status(afec);
	inst_num = afec_find_inst_num(afec);

	for (cnt = 0; cnt < _AFEC_NUM_OF_INTERRUPT_SOURCE; cnt++) {
  40124a:	697b      	ldr	r3, [r7, #20]
  40124c:	3301      	adds	r3, #1
  40124e:	617b      	str	r3, [r7, #20]
  401250:	697b      	ldr	r3, [r7, #20]
  401252:	2b0f      	cmp	r3, #15
  401254:	d9c2      	bls.n	4011dc <afec_process_callback+0x20>
			if (status & (1 << (cnt + AFEC_INTERRUPT_GAP1 + AFEC_INTERRUPT_GAP2))) {
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
			}
		}
	}
}
  401256:	3718      	adds	r7, #24
  401258:	46bd      	mov	sp, r7
  40125a:	bd80      	pop	{r7, pc}
  40125c:	00400cdd 	.word	0x00400cdd
  401260:	00400de5 	.word	0x00400de5
  401264:	00401185 	.word	0x00401185

00401268 <AFEC0_Handler>:

/**
 * \brief Interrupt handler for AFEC0.
 */
void AFEC0_Handler(void)
{
  401268:	b580      	push	{r7, lr}
  40126a:	af00      	add	r7, sp, #0
	afec_process_callback(AFEC0);
  40126c:	4801      	ldr	r0, [pc, #4]	; (401274 <AFEC0_Handler+0xc>)
  40126e:	4b02      	ldr	r3, [pc, #8]	; (401278 <AFEC0_Handler+0x10>)
  401270:	4798      	blx	r3
}
  401272:	bd80      	pop	{r7, pc}
  401274:	4003c000 	.word	0x4003c000
  401278:	004011bd 	.word	0x004011bd

0040127c <AFEC1_Handler>:

/**
 * \brief Interrupt handler for AFEC1.
 */
void AFEC1_Handler(void)
{
  40127c:	b580      	push	{r7, lr}
  40127e:	af00      	add	r7, sp, #0
	afec_process_callback(AFEC1);
  401280:	4801      	ldr	r0, [pc, #4]	; (401288 <AFEC1_Handler+0xc>)
  401282:	4b02      	ldr	r3, [pc, #8]	; (40128c <AFEC1_Handler+0x10>)
  401284:	4798      	blx	r3
}
  401286:	bd80      	pop	{r7, pc}
  401288:	40064000 	.word	0x40064000
  40128c:	004011bd 	.word	0x004011bd

00401290 <afec_enable>:
 * \brief Enable AFEC Module.
 *
 * \param afec  Base address of the AFEC
 */
void afec_enable(Afec *const afec)
{
  401290:	b580      	push	{r7, lr}
  401292:	b084      	sub	sp, #16
  401294:	af00      	add	r7, sp, #0
  401296:	6078      	str	r0, [r7, #4]
	Assert(afec);
	uint32_t pid;

	pid = afec_find_pid(afec);
  401298:	6878      	ldr	r0, [r7, #4]
  40129a:	4b06      	ldr	r3, [pc, #24]	; (4012b4 <afec_enable+0x24>)
  40129c:	4798      	blx	r3
  40129e:	60f8      	str	r0, [r7, #12]
	/* Enable peripheral clock. */
	pmc_enable_periph_clk(pid);
  4012a0:	68f8      	ldr	r0, [r7, #12]
  4012a2:	4b05      	ldr	r3, [pc, #20]	; (4012b8 <afec_enable+0x28>)
  4012a4:	4798      	blx	r3
	sleepmgr_lock_mode(SLEEPMGR_SLEEP_WFI);
  4012a6:	2002      	movs	r0, #2
  4012a8:	4b04      	ldr	r3, [pc, #16]	; (4012bc <afec_enable+0x2c>)
  4012aa:	4798      	blx	r3
}
  4012ac:	3710      	adds	r7, #16
  4012ae:	46bd      	mov	sp, r7
  4012b0:	bd80      	pop	{r7, pc}
  4012b2:	bf00      	nop
  4012b4:	00400e1d 	.word	0x00400e1d
  4012b8:	004016d1 	.word	0x004016d1
  4012bc:	00400cf5 	.word	0x00400cf5

004012c0 <pio_get_interrupt_status>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
  4012c0:	b480      	push	{r7}
  4012c2:	b083      	sub	sp, #12
  4012c4:	af00      	add	r7, sp, #0
  4012c6:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_ISR;
  4012c8:	687b      	ldr	r3, [r7, #4]
  4012ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
  4012cc:	4618      	mov	r0, r3
  4012ce:	370c      	adds	r7, #12
  4012d0:	46bd      	mov	sp, r7
  4012d2:	f85d 7b04 	ldr.w	r7, [sp], #4
  4012d6:	4770      	bx	lr

004012d8 <pio_get_interrupt_mask>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
  4012d8:	b480      	push	{r7}
  4012da:	b083      	sub	sp, #12
  4012dc:	af00      	add	r7, sp, #0
  4012de:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_IMR;
  4012e0:	687b      	ldr	r3, [r7, #4]
  4012e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
  4012e4:	4618      	mov	r0, r3
  4012e6:	370c      	adds	r7, #12
  4012e8:	46bd      	mov	sp, r7
  4012ea:	f85d 7b04 	ldr.w	r7, [sp], #4
  4012ee:	4770      	bx	lr

004012f0 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  4012f0:	b580      	push	{r7, lr}
  4012f2:	b084      	sub	sp, #16
  4012f4:	af00      	add	r7, sp, #0
  4012f6:	6078      	str	r0, [r7, #4]
  4012f8:	6039      	str	r1, [r7, #0]
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  4012fa:	6878      	ldr	r0, [r7, #4]
  4012fc:	4b24      	ldr	r3, [pc, #144]	; (401390 <pio_handler_process+0xa0>)
  4012fe:	4798      	blx	r3
  401300:	60f8      	str	r0, [r7, #12]
	status &= pio_get_interrupt_mask(p_pio);
  401302:	6878      	ldr	r0, [r7, #4]
  401304:	4b23      	ldr	r3, [pc, #140]	; (401394 <pio_handler_process+0xa4>)
  401306:	4798      	blx	r3
  401308:	4602      	mov	r2, r0
  40130a:	68fb      	ldr	r3, [r7, #12]
  40130c:	4013      	ands	r3, r2
  40130e:	60fb      	str	r3, [r7, #12]

	/* Check pending events */
	if (status != 0) {
  401310:	68fb      	ldr	r3, [r7, #12]
  401312:	2b00      	cmp	r3, #0
  401314:	d038      	beq.n	401388 <pio_handler_process+0x98>
		/* Find triggering source */
		i = 0;
  401316:	2300      	movs	r3, #0
  401318:	60bb      	str	r3, [r7, #8]
		while (status != 0) {
  40131a:	e032      	b.n	401382 <pio_handler_process+0x92>
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  40131c:	4a1e      	ldr	r2, [pc, #120]	; (401398 <pio_handler_process+0xa8>)
  40131e:	68bb      	ldr	r3, [r7, #8]
  401320:	011b      	lsls	r3, r3, #4
  401322:	4413      	add	r3, r2
  401324:	681a      	ldr	r2, [r3, #0]
  401326:	683b      	ldr	r3, [r7, #0]
  401328:	429a      	cmp	r2, r3
  40132a:	d123      	bne.n	401374 <pio_handler_process+0x84>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  40132c:	4a1a      	ldr	r2, [pc, #104]	; (401398 <pio_handler_process+0xa8>)
  40132e:	68bb      	ldr	r3, [r7, #8]
  401330:	011b      	lsls	r3, r3, #4
  401332:	4413      	add	r3, r2
  401334:	685a      	ldr	r2, [r3, #4]
  401336:	68fb      	ldr	r3, [r7, #12]
  401338:	4013      	ands	r3, r2
  40133a:	2b00      	cmp	r3, #0
  40133c:	d01a      	beq.n	401374 <pio_handler_process+0x84>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  40133e:	4a16      	ldr	r2, [pc, #88]	; (401398 <pio_handler_process+0xa8>)
  401340:	68bb      	ldr	r3, [r7, #8]
  401342:	011b      	lsls	r3, r3, #4
  401344:	4413      	add	r3, r2
  401346:	3308      	adds	r3, #8
  401348:	685b      	ldr	r3, [r3, #4]
  40134a:	4913      	ldr	r1, [pc, #76]	; (401398 <pio_handler_process+0xa8>)
  40134c:	68ba      	ldr	r2, [r7, #8]
  40134e:	0112      	lsls	r2, r2, #4
  401350:	440a      	add	r2, r1
  401352:	6810      	ldr	r0, [r2, #0]
  401354:	4910      	ldr	r1, [pc, #64]	; (401398 <pio_handler_process+0xa8>)
  401356:	68ba      	ldr	r2, [r7, #8]
  401358:	0112      	lsls	r2, r2, #4
  40135a:	440a      	add	r2, r1
  40135c:	6852      	ldr	r2, [r2, #4]
  40135e:	4611      	mov	r1, r2
  401360:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  401362:	4a0d      	ldr	r2, [pc, #52]	; (401398 <pio_handler_process+0xa8>)
  401364:	68bb      	ldr	r3, [r7, #8]
  401366:	011b      	lsls	r3, r3, #4
  401368:	4413      	add	r3, r2
  40136a:	685b      	ldr	r3, [r3, #4]
  40136c:	43db      	mvns	r3, r3
  40136e:	68fa      	ldr	r2, [r7, #12]
  401370:	4013      	ands	r3, r2
  401372:	60fb      	str	r3, [r7, #12]
				}
			}
			i++;
  401374:	68bb      	ldr	r3, [r7, #8]
  401376:	3301      	adds	r3, #1
  401378:	60bb      	str	r3, [r7, #8]
			if (i >= MAX_INTERRUPT_SOURCES) {
  40137a:	68bb      	ldr	r3, [r7, #8]
  40137c:	2b06      	cmp	r3, #6
  40137e:	d900      	bls.n	401382 <pio_handler_process+0x92>
				break;
  401380:	e002      	b.n	401388 <pio_handler_process+0x98>

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
  401382:	68fb      	ldr	r3, [r7, #12]
  401384:	2b00      	cmp	r3, #0
  401386:	d1c9      	bne.n	40131c <pio_handler_process+0x2c>
		if (pio_capture_handler) {
			pio_capture_handler(p_pio);
		}
	}
#endif
}
  401388:	3710      	adds	r7, #16
  40138a:	46bd      	mov	sp, r7
  40138c:	bd80      	pop	{r7, pc}
  40138e:	bf00      	nop
  401390:	004012c1 	.word	0x004012c1
  401394:	004012d9 	.word	0x004012d9
  401398:	20400920 	.word	0x20400920

0040139c <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  40139c:	b580      	push	{r7, lr}
  40139e:	af00      	add	r7, sp, #0
	pio_handler_process(PIOA, ID_PIOA);
  4013a0:	4802      	ldr	r0, [pc, #8]	; (4013ac <PIOA_Handler+0x10>)
  4013a2:	210a      	movs	r1, #10
  4013a4:	4b02      	ldr	r3, [pc, #8]	; (4013b0 <PIOA_Handler+0x14>)
  4013a6:	4798      	blx	r3
}
  4013a8:	bd80      	pop	{r7, pc}
  4013aa:	bf00      	nop
  4013ac:	400e0e00 	.word	0x400e0e00
  4013b0:	004012f1 	.word	0x004012f1

004013b4 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  4013b4:	b580      	push	{r7, lr}
  4013b6:	af00      	add	r7, sp, #0
    pio_handler_process(PIOB, ID_PIOB);
  4013b8:	4802      	ldr	r0, [pc, #8]	; (4013c4 <PIOB_Handler+0x10>)
  4013ba:	210b      	movs	r1, #11
  4013bc:	4b02      	ldr	r3, [pc, #8]	; (4013c8 <PIOB_Handler+0x14>)
  4013be:	4798      	blx	r3
}
  4013c0:	bd80      	pop	{r7, pc}
  4013c2:	bf00      	nop
  4013c4:	400e1000 	.word	0x400e1000
  4013c8:	004012f1 	.word	0x004012f1

004013cc <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  4013cc:	b580      	push	{r7, lr}
  4013ce:	af00      	add	r7, sp, #0
	pio_handler_process(PIOC, ID_PIOC);
  4013d0:	4802      	ldr	r0, [pc, #8]	; (4013dc <PIOC_Handler+0x10>)
  4013d2:	210c      	movs	r1, #12
  4013d4:	4b02      	ldr	r3, [pc, #8]	; (4013e0 <PIOC_Handler+0x14>)
  4013d6:	4798      	blx	r3
}
  4013d8:	bd80      	pop	{r7, pc}
  4013da:	bf00      	nop
  4013dc:	400e1200 	.word	0x400e1200
  4013e0:	004012f1 	.word	0x004012f1

004013e4 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  4013e4:	b580      	push	{r7, lr}
  4013e6:	af00      	add	r7, sp, #0
	pio_handler_process(PIOD, ID_PIOD);
  4013e8:	4802      	ldr	r0, [pc, #8]	; (4013f4 <PIOD_Handler+0x10>)
  4013ea:	2110      	movs	r1, #16
  4013ec:	4b02      	ldr	r3, [pc, #8]	; (4013f8 <PIOD_Handler+0x14>)
  4013ee:	4798      	blx	r3
}
  4013f0:	bd80      	pop	{r7, pc}
  4013f2:	bf00      	nop
  4013f4:	400e1400 	.word	0x400e1400
  4013f8:	004012f1 	.word	0x004012f1

004013fc <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  4013fc:	b580      	push	{r7, lr}
  4013fe:	af00      	add	r7, sp, #0
	pio_handler_process(PIOE, ID_PIOE);
  401400:	4802      	ldr	r0, [pc, #8]	; (40140c <PIOE_Handler+0x10>)
  401402:	2111      	movs	r1, #17
  401404:	4b02      	ldr	r3, [pc, #8]	; (401410 <PIOE_Handler+0x14>)
  401406:	4798      	blx	r3
}
  401408:	bd80      	pop	{r7, pc}
  40140a:	bf00      	nop
  40140c:	400e1600 	.word	0x400e1600
  401410:	004012f1 	.word	0x004012f1

00401414 <pmc_mck_set_division>:
 * \brief Set the division of the MCK.
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
  401414:	b480      	push	{r7}
  401416:	b083      	sub	sp, #12
  401418:	af00      	add	r7, sp, #0
  40141a:	6078      	str	r0, [r7, #4]
	switch (ul_div) {
  40141c:	687b      	ldr	r3, [r7, #4]
  40141e:	3b01      	subs	r3, #1
  401420:	2b03      	cmp	r3, #3
  401422:	d81a      	bhi.n	40145a <pmc_mck_set_division+0x46>
  401424:	a201      	add	r2, pc, #4	; (adr r2, 40142c <pmc_mck_set_division+0x18>)
  401426:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  40142a:	bf00      	nop
  40142c:	0040143d 	.word	0x0040143d
  401430:	00401443 	.word	0x00401443
  401434:	0040144b 	.word	0x0040144b
  401438:	00401453 	.word	0x00401453
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  40143c:	2300      	movs	r3, #0
  40143e:	607b      	str	r3, [r7, #4]
			break;
  401440:	e00e      	b.n	401460 <pmc_mck_set_division+0x4c>
		case 2:
			ul_div = PMC_MCKR_MDIV_PCK_DIV2;
  401442:	f44f 7380 	mov.w	r3, #256	; 0x100
  401446:	607b      	str	r3, [r7, #4]
			break;
  401448:	e00a      	b.n	401460 <pmc_mck_set_division+0x4c>
		case 3:
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  40144a:	f44f 7340 	mov.w	r3, #768	; 0x300
  40144e:	607b      	str	r3, [r7, #4]
			break;
  401450:	e006      	b.n	401460 <pmc_mck_set_division+0x4c>
		case 4:
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  401452:	f44f 7300 	mov.w	r3, #512	; 0x200
  401456:	607b      	str	r3, [r7, #4]
			break;
  401458:	e002      	b.n	401460 <pmc_mck_set_division+0x4c>
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  40145a:	2300      	movs	r3, #0
  40145c:	607b      	str	r3, [r7, #4]
			break;
  40145e:	bf00      	nop
	}
	PMC->PMC_MCKR =
  401460:	4909      	ldr	r1, [pc, #36]	; (401488 <pmc_mck_set_division+0x74>)
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  401462:	4b09      	ldr	r3, [pc, #36]	; (401488 <pmc_mck_set_division+0x74>)
  401464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401466:	f423 7240 	bic.w	r2, r3, #768	; 0x300
  40146a:	687b      	ldr	r3, [r7, #4]
  40146c:	4313      	orrs	r3, r2
			break;
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
  40146e:	630b      	str	r3, [r1, #48]	; 0x30
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  401470:	bf00      	nop
  401472:	4b05      	ldr	r3, [pc, #20]	; (401488 <pmc_mck_set_division+0x74>)
  401474:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401476:	f003 0308 	and.w	r3, r3, #8
  40147a:	2b00      	cmp	r3, #0
  40147c:	d0f9      	beq.n	401472 <pmc_mck_set_division+0x5e>
}
  40147e:	370c      	adds	r7, #12
  401480:	46bd      	mov	sp, r7
  401482:	f85d 7b04 	ldr.w	r7, [sp], #4
  401486:	4770      	bx	lr
  401488:	400e0600 	.word	0x400e0600

0040148c <pmc_switch_mck_to_pllack>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
  40148c:	b480      	push	{r7}
  40148e:	b085      	sub	sp, #20
  401490:	af00      	add	r7, sp, #0
  401492:	6078      	str	r0, [r7, #4]
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  401494:	491d      	ldr	r1, [pc, #116]	; (40150c <pmc_switch_mck_to_pllack+0x80>)
  401496:	4b1d      	ldr	r3, [pc, #116]	; (40150c <pmc_switch_mck_to_pllack+0x80>)
  401498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40149a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
  40149e:	687b      	ldr	r3, [r7, #4]
  4014a0:	4313      	orrs	r3, r2
  4014a2:	630b      	str	r3, [r1, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4014a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  4014a8:	60fb      	str	r3, [r7, #12]
  4014aa:	e007      	b.n	4014bc <pmc_switch_mck_to_pllack+0x30>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4014ac:	68fb      	ldr	r3, [r7, #12]
  4014ae:	2b00      	cmp	r3, #0
  4014b0:	d101      	bne.n	4014b6 <pmc_switch_mck_to_pllack+0x2a>
			return 1;
  4014b2:	2301      	movs	r3, #1
  4014b4:	e023      	b.n	4014fe <pmc_switch_mck_to_pllack+0x72>
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
  4014b6:	68fb      	ldr	r3, [r7, #12]
  4014b8:	3b01      	subs	r3, #1
  4014ba:	60fb      	str	r3, [r7, #12]
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4014bc:	4b13      	ldr	r3, [pc, #76]	; (40150c <pmc_switch_mck_to_pllack+0x80>)
  4014be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4014c0:	f003 0308 	and.w	r3, r3, #8
  4014c4:	2b00      	cmp	r3, #0
  4014c6:	d0f1      	beq.n	4014ac <pmc_switch_mck_to_pllack+0x20>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  4014c8:	4a10      	ldr	r2, [pc, #64]	; (40150c <pmc_switch_mck_to_pllack+0x80>)
  4014ca:	4b10      	ldr	r3, [pc, #64]	; (40150c <pmc_switch_mck_to_pllack+0x80>)
  4014cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4014ce:	f023 0303 	bic.w	r3, r3, #3
  4014d2:	f043 0302 	orr.w	r3, r3, #2
  4014d6:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4014d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  4014dc:	60fb      	str	r3, [r7, #12]
  4014de:	e007      	b.n	4014f0 <pmc_switch_mck_to_pllack+0x64>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4014e0:	68fb      	ldr	r3, [r7, #12]
  4014e2:	2b00      	cmp	r3, #0
  4014e4:	d101      	bne.n	4014ea <pmc_switch_mck_to_pllack+0x5e>
			return 1;
  4014e6:	2301      	movs	r3, #1
  4014e8:	e009      	b.n	4014fe <pmc_switch_mck_to_pllack+0x72>

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
  4014ea:	68fb      	ldr	r3, [r7, #12]
  4014ec:	3b01      	subs	r3, #1
  4014ee:	60fb      	str	r3, [r7, #12]
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4014f0:	4b06      	ldr	r3, [pc, #24]	; (40150c <pmc_switch_mck_to_pllack+0x80>)
  4014f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4014f4:	f003 0308 	and.w	r3, r3, #8
  4014f8:	2b00      	cmp	r3, #0
  4014fa:	d0f1      	beq.n	4014e0 <pmc_switch_mck_to_pllack+0x54>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
  4014fc:	2300      	movs	r3, #0
}
  4014fe:	4618      	mov	r0, r3
  401500:	3714      	adds	r7, #20
  401502:	46bd      	mov	sp, r7
  401504:	f85d 7b04 	ldr.w	r7, [sp], #4
  401508:	4770      	bx	lr
  40150a:	bf00      	nop
  40150c:	400e0600 	.word	0x400e0600

00401510 <pmc_switch_sclk_to_32kxtal>:
 *       VDDIO power supply.
 *
 * \param ul_bypass 0 for Xtal, 1 for bypass.
 */
void pmc_switch_sclk_to_32kxtal(uint32_t ul_bypass)
{
  401510:	b480      	push	{r7}
  401512:	b083      	sub	sp, #12
  401514:	af00      	add	r7, sp, #0
  401516:	6078      	str	r0, [r7, #4]
	/* Set Bypass mode if required */
	if (ul_bypass == 1) {
  401518:	687b      	ldr	r3, [r7, #4]
  40151a:	2b01      	cmp	r3, #1
  40151c:	d105      	bne.n	40152a <pmc_switch_sclk_to_32kxtal+0x1a>
		SUPC->SUPC_MR |= SUPC_MR_KEY_PASSWD |
  40151e:	4907      	ldr	r1, [pc, #28]	; (40153c <pmc_switch_sclk_to_32kxtal+0x2c>)
  401520:	4b06      	ldr	r3, [pc, #24]	; (40153c <pmc_switch_sclk_to_32kxtal+0x2c>)
  401522:	689a      	ldr	r2, [r3, #8]
  401524:	4b06      	ldr	r3, [pc, #24]	; (401540 <pmc_switch_sclk_to_32kxtal+0x30>)
  401526:	4313      	orrs	r3, r2
  401528:	608b      	str	r3, [r1, #8]
			SUPC_MR_OSCBYPASS;
	}

	SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_XTALSEL;
  40152a:	4b04      	ldr	r3, [pc, #16]	; (40153c <pmc_switch_sclk_to_32kxtal+0x2c>)
  40152c:	4a05      	ldr	r2, [pc, #20]	; (401544 <pmc_switch_sclk_to_32kxtal+0x34>)
  40152e:	601a      	str	r2, [r3, #0]
}
  401530:	370c      	adds	r7, #12
  401532:	46bd      	mov	sp, r7
  401534:	f85d 7b04 	ldr.w	r7, [sp], #4
  401538:	4770      	bx	lr
  40153a:	bf00      	nop
  40153c:	400e1810 	.word	0x400e1810
  401540:	a5100000 	.word	0xa5100000
  401544:	a5000008 	.word	0xa5000008

00401548 <pmc_osc_is_ready_32kxtal>:
 *
 * \retval 1 External 32k Xtal is ready.
 * \retval 0 External 32k Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_32kxtal(void)
{
  401548:	b480      	push	{r7}
  40154a:	af00      	add	r7, sp, #0
	return ((SUPC->SUPC_SR & SUPC_SR_OSCSEL)
  40154c:	4b09      	ldr	r3, [pc, #36]	; (401574 <pmc_osc_is_ready_32kxtal+0x2c>)
  40154e:	695b      	ldr	r3, [r3, #20]
  401550:	f003 0380 	and.w	r3, r3, #128	; 0x80
			&& (PMC->PMC_SR & PMC_SR_OSCSELS));
  401554:	2b00      	cmp	r3, #0
  401556:	d007      	beq.n	401568 <pmc_osc_is_ready_32kxtal+0x20>
  401558:	4b07      	ldr	r3, [pc, #28]	; (401578 <pmc_osc_is_ready_32kxtal+0x30>)
  40155a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40155c:	f003 0380 	and.w	r3, r3, #128	; 0x80
  401560:	2b00      	cmp	r3, #0
  401562:	d001      	beq.n	401568 <pmc_osc_is_ready_32kxtal+0x20>
  401564:	2301      	movs	r3, #1
  401566:	e000      	b.n	40156a <pmc_osc_is_ready_32kxtal+0x22>
  401568:	2300      	movs	r3, #0
}
  40156a:	4618      	mov	r0, r3
  40156c:	46bd      	mov	sp, r7
  40156e:	f85d 7b04 	ldr.w	r7, [sp], #4
  401572:	4770      	bx	lr
  401574:	400e1810 	.word	0x400e1810
  401578:	400e0600 	.word	0x400e0600

0040157c <pmc_switch_mainck_to_fastrc>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 * \retval 2 Invalid frequency.
 */
void pmc_switch_mainck_to_fastrc(uint32_t ul_moscrcf)
{
  40157c:	b480      	push	{r7}
  40157e:	b083      	sub	sp, #12
  401580:	af00      	add	r7, sp, #0
  401582:	6078      	str	r0, [r7, #4]
	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	PMC->CKGR_MOR |= (CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCRCEN);
  401584:	4915      	ldr	r1, [pc, #84]	; (4015dc <pmc_switch_mainck_to_fastrc+0x60>)
  401586:	4b15      	ldr	r3, [pc, #84]	; (4015dc <pmc_switch_mainck_to_fastrc+0x60>)
  401588:	6a1a      	ldr	r2, [r3, #32]
  40158a:	4b15      	ldr	r3, [pc, #84]	; (4015e0 <pmc_switch_mainck_to_fastrc+0x64>)
  40158c:	4313      	orrs	r3, r2
  40158e:	620b      	str	r3, [r1, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  401590:	bf00      	nop
  401592:	4b12      	ldr	r3, [pc, #72]	; (4015dc <pmc_switch_mainck_to_fastrc+0x60>)
  401594:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401596:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  40159a:	2b00      	cmp	r3, #0
  40159c:	d0f9      	beq.n	401592 <pmc_switch_mainck_to_fastrc+0x16>

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  40159e:	490f      	ldr	r1, [pc, #60]	; (4015dc <pmc_switch_mainck_to_fastrc+0x60>)
  4015a0:	4b0e      	ldr	r3, [pc, #56]	; (4015dc <pmc_switch_mainck_to_fastrc+0x60>)
  4015a2:	6a1a      	ldr	r2, [r3, #32]
  4015a4:	4b0f      	ldr	r3, [pc, #60]	; (4015e4 <pmc_switch_mainck_to_fastrc+0x68>)
  4015a6:	4013      	ands	r3, r2
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;
  4015a8:	687a      	ldr	r2, [r7, #4]
  4015aa:	4313      	orrs	r3, r2
  4015ac:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  4015b0:	620b      	str	r3, [r1, #32]
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  4015b2:	bf00      	nop
  4015b4:	4b09      	ldr	r3, [pc, #36]	; (4015dc <pmc_switch_mainck_to_fastrc+0x60>)
  4015b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4015b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  4015bc:	2b00      	cmp	r3, #0
  4015be:	d0f9      	beq.n	4015b4 <pmc_switch_mainck_to_fastrc+0x38>

	/* Switch to Fast RC */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
  4015c0:	4906      	ldr	r1, [pc, #24]	; (4015dc <pmc_switch_mainck_to_fastrc+0x60>)
  4015c2:	4b06      	ldr	r3, [pc, #24]	; (4015dc <pmc_switch_mainck_to_fastrc+0x60>)
  4015c4:	6a1a      	ldr	r2, [r3, #32]
  4015c6:	4b08      	ldr	r3, [pc, #32]	; (4015e8 <pmc_switch_mainck_to_fastrc+0x6c>)
  4015c8:	4013      	ands	r3, r2
  4015ca:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  4015ce:	620b      	str	r3, [r1, #32]
			CKGR_MOR_KEY_PASSWD;
}
  4015d0:	370c      	adds	r7, #12
  4015d2:	46bd      	mov	sp, r7
  4015d4:	f85d 7b04 	ldr.w	r7, [sp], #4
  4015d8:	4770      	bx	lr
  4015da:	bf00      	nop
  4015dc:	400e0600 	.word	0x400e0600
  4015e0:	00370008 	.word	0x00370008
  4015e4:	ffc8ff8f 	.word	0xffc8ff8f
  4015e8:	fec8ffff 	.word	0xfec8ffff

004015ec <pmc_switch_mainck_to_xtal>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
  4015ec:	b480      	push	{r7}
  4015ee:	b083      	sub	sp, #12
  4015f0:	af00      	add	r7, sp, #0
  4015f2:	6078      	str	r0, [r7, #4]
  4015f4:	6039      	str	r1, [r7, #0]
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  4015f6:	687b      	ldr	r3, [r7, #4]
  4015f8:	2b00      	cmp	r3, #0
  4015fa:	d008      	beq.n	40160e <pmc_switch_mainck_to_xtal+0x22>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4015fc:	4913      	ldr	r1, [pc, #76]	; (40164c <pmc_switch_mainck_to_xtal+0x60>)
  4015fe:	4b13      	ldr	r3, [pc, #76]	; (40164c <pmc_switch_mainck_to_xtal+0x60>)
  401600:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  401602:	4a13      	ldr	r2, [pc, #76]	; (401650 <pmc_switch_mainck_to_xtal+0x64>)
  401604:	401a      	ands	r2, r3
  401606:	4b13      	ldr	r3, [pc, #76]	; (401654 <pmc_switch_mainck_to_xtal+0x68>)
  401608:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  40160a:	620b      	str	r3, [r1, #32]
  40160c:	e018      	b.n	401640 <pmc_switch_mainck_to_xtal+0x54>
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  40160e:	490f      	ldr	r1, [pc, #60]	; (40164c <pmc_switch_mainck_to_xtal+0x60>)
  401610:	4b0e      	ldr	r3, [pc, #56]	; (40164c <pmc_switch_mainck_to_xtal+0x60>)
  401612:	6a1a      	ldr	r2, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  401614:	4b10      	ldr	r3, [pc, #64]	; (401658 <pmc_switch_mainck_to_xtal+0x6c>)
  401616:	4013      	ands	r3, r2
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  401618:	683a      	ldr	r2, [r7, #0]
  40161a:	0212      	lsls	r2, r2, #8
  40161c:	b292      	uxth	r2, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  40161e:	431a      	orrs	r2, r3
  401620:	4b0e      	ldr	r3, [pc, #56]	; (40165c <pmc_switch_mainck_to_xtal+0x70>)
  401622:	4313      	orrs	r3, r2
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  401624:	620b      	str	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  401626:	bf00      	nop
  401628:	4b08      	ldr	r3, [pc, #32]	; (40164c <pmc_switch_mainck_to_xtal+0x60>)
  40162a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40162c:	f003 0301 	and.w	r3, r3, #1
  401630:	2b00      	cmp	r3, #0
  401632:	d0f9      	beq.n	401628 <pmc_switch_mainck_to_xtal+0x3c>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  401634:	4905      	ldr	r1, [pc, #20]	; (40164c <pmc_switch_mainck_to_xtal+0x60>)
  401636:	4b05      	ldr	r3, [pc, #20]	; (40164c <pmc_switch_mainck_to_xtal+0x60>)
  401638:	6a1a      	ldr	r2, [r3, #32]
  40163a:	4b09      	ldr	r3, [pc, #36]	; (401660 <pmc_switch_mainck_to_xtal+0x74>)
  40163c:	4313      	orrs	r3, r2
  40163e:	620b      	str	r3, [r1, #32]
	}
}
  401640:	370c      	adds	r7, #12
  401642:	46bd      	mov	sp, r7
  401644:	f85d 7b04 	ldr.w	r7, [sp], #4
  401648:	4770      	bx	lr
  40164a:	bf00      	nop
  40164c:	400e0600 	.word	0x400e0600
  401650:	fec8fffc 	.word	0xfec8fffc
  401654:	01370002 	.word	0x01370002
  401658:	ffc8fffc 	.word	0xffc8fffc
  40165c:	00370001 	.word	0x00370001
  401660:	01370000 	.word	0x01370000

00401664 <pmc_osc_is_ready_mainck>:
 *
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
  401664:	b480      	push	{r7}
  401666:	af00      	add	r7, sp, #0
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  401668:	4b04      	ldr	r3, [pc, #16]	; (40167c <pmc_osc_is_ready_mainck+0x18>)
  40166a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40166c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
  401670:	4618      	mov	r0, r3
  401672:	46bd      	mov	sp, r7
  401674:	f85d 7b04 	ldr.w	r7, [sp], #4
  401678:	4770      	bx	lr
  40167a:	bf00      	nop
  40167c:	400e0600 	.word	0x400e0600

00401680 <pmc_disable_pllack>:

/**
 * \brief Disable PLLA clock.
 */
void pmc_disable_pllack(void)
{
  401680:	b480      	push	{r7}
  401682:	af00      	add	r7, sp, #0
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  401684:	4b03      	ldr	r3, [pc, #12]	; (401694 <pmc_disable_pllack+0x14>)
  401686:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  40168a:	629a      	str	r2, [r3, #40]	; 0x28
#endif
}
  40168c:	46bd      	mov	sp, r7
  40168e:	f85d 7b04 	ldr.w	r7, [sp], #4
  401692:	4770      	bx	lr
  401694:	400e0600 	.word	0x400e0600

00401698 <pmc_is_locked_pllack>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
  401698:	b480      	push	{r7}
  40169a:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  40169c:	4b04      	ldr	r3, [pc, #16]	; (4016b0 <pmc_is_locked_pllack+0x18>)
  40169e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4016a0:	f003 0302 	and.w	r3, r3, #2
}
  4016a4:	4618      	mov	r0, r3
  4016a6:	46bd      	mov	sp, r7
  4016a8:	f85d 7b04 	ldr.w	r7, [sp], #4
  4016ac:	4770      	bx	lr
  4016ae:	bf00      	nop
  4016b0:	400e0600 	.word	0x400e0600

004016b4 <pmc_is_locked_upll>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_upll(void)
{
  4016b4:	b480      	push	{r7}
  4016b6:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKU);
  4016b8:	4b04      	ldr	r3, [pc, #16]	; (4016cc <pmc_is_locked_upll+0x18>)
  4016ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4016bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
}
  4016c0:	4618      	mov	r0, r3
  4016c2:	46bd      	mov	sp, r7
  4016c4:	f85d 7b04 	ldr.w	r7, [sp], #4
  4016c8:	4770      	bx	lr
  4016ca:	bf00      	nop
  4016cc:	400e0600 	.word	0x400e0600

004016d0 <pmc_enable_periph_clk>:
 *
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
  4016d0:	b480      	push	{r7}
  4016d2:	b083      	sub	sp, #12
  4016d4:	af00      	add	r7, sp, #0
  4016d6:	6078      	str	r0, [r7, #4]
	if (ul_id > MAX_PERIPH_ID) {
  4016d8:	687b      	ldr	r3, [r7, #4]
  4016da:	2b3f      	cmp	r3, #63	; 0x3f
  4016dc:	d901      	bls.n	4016e2 <pmc_enable_periph_clk+0x12>
		return 1;
  4016de:	2301      	movs	r3, #1
  4016e0:	e02f      	b.n	401742 <pmc_enable_periph_clk+0x72>
	}

	if (ul_id < 32) {
  4016e2:	687b      	ldr	r3, [r7, #4]
  4016e4:	2b1f      	cmp	r3, #31
  4016e6:	d813      	bhi.n	401710 <pmc_enable_periph_clk+0x40>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  4016e8:	4b19      	ldr	r3, [pc, #100]	; (401750 <pmc_enable_periph_clk+0x80>)
  4016ea:	699a      	ldr	r2, [r3, #24]
  4016ec:	687b      	ldr	r3, [r7, #4]
  4016ee:	2101      	movs	r1, #1
  4016f0:	fa01 f303 	lsl.w	r3, r1, r3
  4016f4:	401a      	ands	r2, r3
  4016f6:	687b      	ldr	r3, [r7, #4]
  4016f8:	2101      	movs	r1, #1
  4016fa:	fa01 f303 	lsl.w	r3, r1, r3
  4016fe:	429a      	cmp	r2, r3
  401700:	d01e      	beq.n	401740 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER0 = 1 << ul_id;
  401702:	4a13      	ldr	r2, [pc, #76]	; (401750 <pmc_enable_periph_clk+0x80>)
  401704:	687b      	ldr	r3, [r7, #4]
  401706:	2101      	movs	r1, #1
  401708:	fa01 f303 	lsl.w	r3, r1, r3
  40170c:	6113      	str	r3, [r2, #16]
  40170e:	e017      	b.n	401740 <pmc_enable_periph_clk+0x70>
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
  401710:	687b      	ldr	r3, [r7, #4]
  401712:	3b20      	subs	r3, #32
  401714:	607b      	str	r3, [r7, #4]
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  401716:	4b0e      	ldr	r3, [pc, #56]	; (401750 <pmc_enable_periph_clk+0x80>)
  401718:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  40171c:	687b      	ldr	r3, [r7, #4]
  40171e:	2101      	movs	r1, #1
  401720:	fa01 f303 	lsl.w	r3, r1, r3
  401724:	401a      	ands	r2, r3
  401726:	687b      	ldr	r3, [r7, #4]
  401728:	2101      	movs	r1, #1
  40172a:	fa01 f303 	lsl.w	r3, r1, r3
  40172e:	429a      	cmp	r2, r3
  401730:	d006      	beq.n	401740 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER1 = 1 << ul_id;
  401732:	4a07      	ldr	r2, [pc, #28]	; (401750 <pmc_enable_periph_clk+0x80>)
  401734:	687b      	ldr	r3, [r7, #4]
  401736:	2101      	movs	r1, #1
  401738:	fa01 f303 	lsl.w	r3, r1, r3
  40173c:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
		}
#endif
	}

	return 0;
  401740:	2300      	movs	r3, #0
}
  401742:	4618      	mov	r0, r3
  401744:	370c      	adds	r7, #12
  401746:	46bd      	mov	sp, r7
  401748:	f85d 7b04 	ldr.w	r7, [sp], #4
  40174c:	4770      	bx	lr
  40174e:	bf00      	nop
  401750:	400e0600 	.word	0x400e0600

00401754 <pwm_clocks_generate>:
 *
 * \retval Return the value to be set in the PWM Clock Register (PWM Mode Register for
 * SAM3N/SAM4N/SAM4C/SAM4CP/SAM4CM) or PWM_INVALID_ARGUMENT if the configuration cannot be met.
 */
static uint32_t pwm_clocks_generate(uint32_t ul_frequency, uint32_t ul_mck)
{
  401754:	b4b0      	push	{r4, r5, r7}
  401756:	b091      	sub	sp, #68	; 0x44
  401758:	af00      	add	r7, sp, #0
  40175a:	6078      	str	r0, [r7, #4]
  40175c:	6039      	str	r1, [r7, #0]
	uint32_t ul_divisors[PWM_CLOCK_PRE_MAX] =
  40175e:	4b1b      	ldr	r3, [pc, #108]	; (4017cc <pwm_clocks_generate+0x78>)
  401760:	f107 040c 	add.w	r4, r7, #12
  401764:	461d      	mov	r5, r3
  401766:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  401768:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  40176a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  40176c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  40176e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
  401772:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			{1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024 };
	uint32_t ul_pre = 0;
  401776:	2300      	movs	r3, #0
  401778:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	do {
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
  40177a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  40177c:	009b      	lsls	r3, r3, #2
  40177e:	f107 0240 	add.w	r2, r7, #64	; 0x40
  401782:	4413      	add	r3, r2
  401784:	f853 3c34 	ldr.w	r3, [r3, #-52]
  401788:	683a      	ldr	r2, [r7, #0]
  40178a:	fbb2 f2f3 	udiv	r2, r2, r3
  40178e:	687b      	ldr	r3, [r7, #4]
  401790:	fbb2 f3f3 	udiv	r3, r2, r3
  401794:	63bb      	str	r3, [r7, #56]	; 0x38
		if (ul_div <= PWM_CLOCK_DIV_MAX) {
  401796:	6bbb      	ldr	r3, [r7, #56]	; 0x38
  401798:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
  40179c:	d800      	bhi.n	4017a0 <pwm_clocks_generate+0x4c>
			break;
  40179e:	e005      	b.n	4017ac <pwm_clocks_generate+0x58>
		}
		ul_pre++;
  4017a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  4017a2:	3301      	adds	r3, #1
  4017a4:	63fb      	str	r3, [r7, #60]	; 0x3c
	} while (ul_pre < PWM_CLOCK_PRE_MAX);
  4017a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  4017a8:	2b0a      	cmp	r3, #10
  4017aa:	d9e6      	bls.n	40177a <pwm_clocks_generate+0x26>

	/* Return result */
	if (ul_pre < PWM_CLOCK_PRE_MAX) {
  4017ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  4017ae:	2b0a      	cmp	r3, #10
  4017b0:	d804      	bhi.n	4017bc <pwm_clocks_generate+0x68>
		return ul_div | (ul_pre << 8);
  4017b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  4017b4:	021a      	lsls	r2, r3, #8
  4017b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
  4017b8:	4313      	orrs	r3, r2
  4017ba:	e001      	b.n	4017c0 <pwm_clocks_generate+0x6c>
	} else {
		return PWM_INVALID_ARGUMENT;
  4017bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
	}
}
  4017c0:	4618      	mov	r0, r3
  4017c2:	3744      	adds	r7, #68	; 0x44
  4017c4:	46bd      	mov	sp, r7
  4017c6:	bcb0      	pop	{r4, r5, r7}
  4017c8:	4770      	bx	lr
  4017ca:	bf00      	nop
  4017cc:	0040a868 	.word	0x0040a868

004017d0 <pwm_init>:
 * \param clock_config PWM clock configuration.
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_init(Pwm *p_pwm, pwm_clock_t *clock_config)
{
  4017d0:	b580      	push	{r7, lr}
  4017d2:	b084      	sub	sp, #16
  4017d4:	af00      	add	r7, sp, #0
  4017d6:	6078      	str	r0, [r7, #4]
  4017d8:	6039      	str	r1, [r7, #0]
	uint32_t clock = 0;
  4017da:	2300      	movs	r3, #0
  4017dc:	60fb      	str	r3, [r7, #12]
	uint32_t result;

	/* Clock A */
	if (clock_config->ul_clka != 0) {
  4017de:	683b      	ldr	r3, [r7, #0]
  4017e0:	681b      	ldr	r3, [r3, #0]
  4017e2:	2b00      	cmp	r3, #0
  4017e4:	d011      	beq.n	40180a <pwm_init+0x3a>
		result = pwm_clocks_generate(clock_config->ul_clka, clock_config->ul_mck);
  4017e6:	683b      	ldr	r3, [r7, #0]
  4017e8:	681a      	ldr	r2, [r3, #0]
  4017ea:	683b      	ldr	r3, [r7, #0]
  4017ec:	689b      	ldr	r3, [r3, #8]
  4017ee:	4610      	mov	r0, r2
  4017f0:	4619      	mov	r1, r3
  4017f2:	4b16      	ldr	r3, [pc, #88]	; (40184c <pwm_init+0x7c>)
  4017f4:	4798      	blx	r3
  4017f6:	60b8      	str	r0, [r7, #8]
		if (result == PWM_INVALID_ARGUMENT) {
  4017f8:	68bb      	ldr	r3, [r7, #8]
  4017fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
  4017fe:	4293      	cmp	r3, r2
  401800:	d101      	bne.n	401806 <pwm_init+0x36>
			return result;
  401802:	68bb      	ldr	r3, [r7, #8]
  401804:	e01e      	b.n	401844 <pwm_init+0x74>
		}

		clock = result;
  401806:	68bb      	ldr	r3, [r7, #8]
  401808:	60fb      	str	r3, [r7, #12]
	}

	/* Clock B */
	if (clock_config->ul_clkb != 0) {
  40180a:	683b      	ldr	r3, [r7, #0]
  40180c:	685b      	ldr	r3, [r3, #4]
  40180e:	2b00      	cmp	r3, #0
  401810:	d014      	beq.n	40183c <pwm_init+0x6c>
		result = pwm_clocks_generate(clock_config->ul_clkb, clock_config->ul_mck);
  401812:	683b      	ldr	r3, [r7, #0]
  401814:	685a      	ldr	r2, [r3, #4]
  401816:	683b      	ldr	r3, [r7, #0]
  401818:	689b      	ldr	r3, [r3, #8]
  40181a:	4610      	mov	r0, r2
  40181c:	4619      	mov	r1, r3
  40181e:	4b0b      	ldr	r3, [pc, #44]	; (40184c <pwm_init+0x7c>)
  401820:	4798      	blx	r3
  401822:	60b8      	str	r0, [r7, #8]

		if (result == PWM_INVALID_ARGUMENT) {
  401824:	68bb      	ldr	r3, [r7, #8]
  401826:	f64f 72ff 	movw	r2, #65535	; 0xffff
  40182a:	4293      	cmp	r3, r2
  40182c:	d101      	bne.n	401832 <pwm_init+0x62>
			return result;
  40182e:	68bb      	ldr	r3, [r7, #8]
  401830:	e008      	b.n	401844 <pwm_init+0x74>
		}

		clock |= (result << 16);
  401832:	68bb      	ldr	r3, [r7, #8]
  401834:	041b      	lsls	r3, r3, #16
  401836:	68fa      	ldr	r2, [r7, #12]
  401838:	4313      	orrs	r3, r2
  40183a:	60fb      	str	r3, [r7, #12]
	}
#if (SAM3N || SAM4N || SAM4C || SAM4CP || SAM4CM)
	p_pwm->PWM_MR = clock;
#else
	p_pwm->PWM_CLK = clock;
  40183c:	687b      	ldr	r3, [r7, #4]
  40183e:	68fa      	ldr	r2, [r7, #12]
  401840:	601a      	str	r2, [r3, #0]
#endif
	return 0;
  401842:	2300      	movs	r3, #0
}
  401844:	4618      	mov	r0, r3
  401846:	3710      	adds	r7, #16
  401848:	46bd      	mov	sp, r7
  40184a:	bd80      	pop	{r7, pc}
  40184c:	00401755 	.word	0x00401755

00401850 <pwm_channel_init>:
 * \param p_channel Configurations of the specified PWM channel.
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_channel_init(Pwm *p_pwm, pwm_channel_t *p_channel)
{
  401850:	b480      	push	{r7}
  401852:	b087      	sub	sp, #28
  401854:	af00      	add	r7, sp, #0
  401856:	6078      	str	r0, [r7, #4]
  401858:	6039      	str	r1, [r7, #0]
	uint32_t tmp_reg = 0;
  40185a:	2300      	movs	r3, #0
  40185c:	617b      	str	r3, [r7, #20]
	uint32_t ch_num = p_channel->channel;
  40185e:	683b      	ldr	r3, [r7, #0]
  401860:	681b      	ldr	r3, [r3, #0]
  401862:	613b      	str	r3, [r7, #16]

	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
  401864:	683b      	ldr	r3, [r7, #0]
  401866:	685b      	ldr	r3, [r3, #4]
  401868:	f003 030f 	and.w	r3, r3, #15
			(p_channel->polarity << 9) |
  40186c:	683a      	ldr	r2, [r7, #0]
  40186e:	7a92      	ldrb	r2, [r2, #10]
  401870:	0252      	lsls	r2, r2, #9
{
	uint32_t tmp_reg = 0;
	uint32_t ch_num = p_channel->channel;

	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
  401872:	4313      	orrs	r3, r2
			(p_channel->polarity << 9) |
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
			(p_channel->counter_event) |
  401874:	683a      	ldr	r2, [r7, #0]
  401876:	8a92      	ldrh	r2, [r2, #20]
	uint32_t tmp_reg = 0;
	uint32_t ch_num = p_channel->channel;

	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
			(p_channel->polarity << 9) |
  401878:	4313      	orrs	r3, r2
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
			(p_channel->counter_event) |
			(p_channel->b_deadtime_generator << 16) |
  40187a:	683a      	ldr	r2, [r7, #0]
  40187c:	7d92      	ldrb	r2, [r2, #22]
  40187e:	0412      	lsls	r2, r2, #16

	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
			(p_channel->polarity << 9) |
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
			(p_channel->counter_event) |
  401880:	4313      	orrs	r3, r2
			(p_channel->b_deadtime_generator << 16) |
			(p_channel->b_pwmh_output_inverted << 17) |
  401882:	683a      	ldr	r2, [r7, #0]
  401884:	7dd2      	ldrb	r2, [r2, #23]
  401886:	0452      	lsls	r2, r2, #17
	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
			(p_channel->polarity << 9) |
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
			(p_channel->counter_event) |
			(p_channel->b_deadtime_generator << 16) |
  401888:	4313      	orrs	r3, r2
			(p_channel->b_pwmh_output_inverted << 17) |
			(p_channel->b_pwml_output_inverted << 18) |
  40188a:	683a      	ldr	r2, [r7, #0]
  40188c:	7e12      	ldrb	r2, [r2, #24]
  40188e:	0492      	lsls	r2, r2, #18
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
			(p_channel->polarity << 9) |
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
			(p_channel->counter_event) |
			(p_channel->b_deadtime_generator << 16) |
			(p_channel->b_pwmh_output_inverted << 17) |
  401890:	4313      	orrs	r3, r2
			(p_channel->b_pwml_output_inverted << 18) |
#endif
			(p_channel->alignment);
  401892:	683a      	ldr	r2, [r7, #0]
  401894:	8912      	ldrh	r2, [r2, #8]
{
	uint32_t tmp_reg = 0;
	uint32_t ch_num = p_channel->channel;

	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
  401896:	4313      	orrs	r3, r2
  401898:	617b      	str	r3, [r7, #20]
			(p_channel->b_deadtime_generator << 16) |
			(p_channel->b_pwmh_output_inverted << 17) |
			(p_channel->b_pwml_output_inverted << 18) |
#endif
			(p_channel->alignment);
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR = tmp_reg;
  40189a:	687a      	ldr	r2, [r7, #4]
  40189c:	693b      	ldr	r3, [r7, #16]
  40189e:	3310      	adds	r3, #16
  4018a0:	015b      	lsls	r3, r3, #5
  4018a2:	4413      	add	r3, r2
  4018a4:	697a      	ldr	r2, [r7, #20]
  4018a6:	601a      	str	r2, [r3, #0]

	/* Channel Duty Cycle Register */
	p_pwm->PWM_CH_NUM[ch_num].PWM_CDTY = p_channel->ul_duty;
  4018a8:	683b      	ldr	r3, [r7, #0]
  4018aa:	68da      	ldr	r2, [r3, #12]
  4018ac:	6879      	ldr	r1, [r7, #4]
  4018ae:	693b      	ldr	r3, [r7, #16]
  4018b0:	3310      	adds	r3, #16
  4018b2:	015b      	lsls	r3, r3, #5
  4018b4:	440b      	add	r3, r1
  4018b6:	605a      	str	r2, [r3, #4]

	/* Channel Period Register */
	p_pwm->PWM_CH_NUM[ch_num].PWM_CPRD = p_channel->ul_period;
  4018b8:	683b      	ldr	r3, [r7, #0]
  4018ba:	691a      	ldr	r2, [r3, #16]
  4018bc:	6879      	ldr	r1, [r7, #4]
  4018be:	693b      	ldr	r3, [r7, #16]
  4018c0:	015b      	lsls	r3, r3, #5
  4018c2:	440b      	add	r3, r1
  4018c4:	f503 7302 	add.w	r3, r3, #520	; 0x208
  4018c8:	605a      	str	r2, [r3, #4]
	
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
	/* Channel Dead Time Register */
	if (p_channel->b_deadtime_generator) {
  4018ca:	683b      	ldr	r3, [r7, #0]
  4018cc:	7d9b      	ldrb	r3, [r3, #22]
  4018ce:	2b00      	cmp	r3, #0
  4018d0:	d00d      	beq.n	4018ee <pwm_channel_init+0x9e>
		p_pwm->PWM_CH_NUM[ch_num].PWM_DT =
				PWM_DT_DTL(p_channel->
  4018d2:	683b      	ldr	r3, [r7, #0]
  4018d4:	8b9b      	ldrh	r3, [r3, #28]
  4018d6:	041b      	lsls	r3, r3, #16
  4018d8:	461a      	mov	r2, r3
				us_deadtime_pwml) | PWM_DT_DTH(p_channel->
  4018da:	683b      	ldr	r3, [r7, #0]
  4018dc:	8b5b      	ldrh	r3, [r3, #26]
  4018de:	431a      	orrs	r2, r3
	p_pwm->PWM_CH_NUM[ch_num].PWM_CPRD = p_channel->ul_period;
	
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
	/* Channel Dead Time Register */
	if (p_channel->b_deadtime_generator) {
		p_pwm->PWM_CH_NUM[ch_num].PWM_DT =
  4018e0:	6879      	ldr	r1, [r7, #4]
  4018e2:	693b      	ldr	r3, [r7, #16]
  4018e4:	015b      	lsls	r3, r3, #5
  4018e6:	440b      	add	r3, r1
  4018e8:	f503 7306 	add.w	r3, r3, #536	; 0x218
  4018ec:	601a      	str	r2, [r3, #0]
				us_deadtime_pwml) | PWM_DT_DTH(p_channel->
				us_deadtime_pwmh);
	}

	/* Output Selection Register */
	tmp_reg  = p_pwm->PWM_OS & (~((PWM_OS_OSH0 | PWM_OS_OSL0) << ch_num));
  4018ee:	687b      	ldr	r3, [r7, #4]
  4018f0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
  4018f2:	693b      	ldr	r3, [r7, #16]
  4018f4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
  4018f8:	fa01 f303 	lsl.w	r3, r1, r3
  4018fc:	43db      	mvns	r3, r3
  4018fe:	4013      	ands	r3, r2
  401900:	617b      	str	r3, [r7, #20]
	tmp_reg |= ((p_channel->output_selection.b_override_pwmh) << ch_num) |
  401902:	683b      	ldr	r3, [r7, #0]
  401904:	7f9b      	ldrb	r3, [r3, #30]
  401906:	461a      	mov	r2, r3
  401908:	693b      	ldr	r3, [r7, #16]
  40190a:	409a      	lsls	r2, r3
			(((p_channel->output_selection.b_override_pwml) << ch_num)
  40190c:	683b      	ldr	r3, [r7, #0]
  40190e:	7fdb      	ldrb	r3, [r3, #31]
  401910:	4619      	mov	r1, r3
  401912:	693b      	ldr	r3, [r7, #16]
  401914:	fa01 f303 	lsl.w	r3, r1, r3
					<< 16);
  401918:	041b      	lsls	r3, r3, #16
				us_deadtime_pwmh);
	}

	/* Output Selection Register */
	tmp_reg  = p_pwm->PWM_OS & (~((PWM_OS_OSH0 | PWM_OS_OSL0) << ch_num));
	tmp_reg |= ((p_channel->output_selection.b_override_pwmh) << ch_num) |
  40191a:	4313      	orrs	r3, r2
  40191c:	461a      	mov	r2, r3
  40191e:	697b      	ldr	r3, [r7, #20]
  401920:	4313      	orrs	r3, r2
  401922:	617b      	str	r3, [r7, #20]
			(((p_channel->output_selection.b_override_pwml) << ch_num)
					<< 16);
	p_pwm->PWM_OS = tmp_reg;
  401924:	687b      	ldr	r3, [r7, #4]
  401926:	697a      	ldr	r2, [r7, #20]
  401928:	649a      	str	r2, [r3, #72]	; 0x48

	/* Output Override Value Register */
	tmp_reg  = p_pwm->PWM_OOV & (~((PWM_OOV_OOVH0 | PWM_OOV_OOVL0) << ch_num));
  40192a:	687b      	ldr	r3, [r7, #4]
  40192c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
  40192e:	693b      	ldr	r3, [r7, #16]
  401930:	f04f 1101 	mov.w	r1, #65537	; 0x10001
  401934:	fa01 f303 	lsl.w	r3, r1, r3
  401938:	43db      	mvns	r3, r3
  40193a:	4013      	ands	r3, r2
  40193c:	617b      	str	r3, [r7, #20]
	tmp_reg |= ((p_channel->output_selection.override_level_pwmh) << ch_num) |
  40193e:	683b      	ldr	r3, [r7, #0]
  401940:	f893 3020 	ldrb.w	r3, [r3, #32]
  401944:	461a      	mov	r2, r3
  401946:	693b      	ldr	r3, [r7, #16]
  401948:	409a      	lsls	r2, r3
			(((p_channel->output_selection.override_level_pwml) << ch_num)
  40194a:	683b      	ldr	r3, [r7, #0]
  40194c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
  401950:	4619      	mov	r1, r3
  401952:	693b      	ldr	r3, [r7, #16]
  401954:	fa01 f303 	lsl.w	r3, r1, r3
					<< 16);
  401958:	041b      	lsls	r3, r3, #16
					<< 16);
	p_pwm->PWM_OS = tmp_reg;

	/* Output Override Value Register */
	tmp_reg  = p_pwm->PWM_OOV & (~((PWM_OOV_OOVH0 | PWM_OOV_OOVL0) << ch_num));
	tmp_reg |= ((p_channel->output_selection.override_level_pwmh) << ch_num) |
  40195a:	4313      	orrs	r3, r2
  40195c:	461a      	mov	r2, r3
  40195e:	697b      	ldr	r3, [r7, #20]
  401960:	4313      	orrs	r3, r2
  401962:	617b      	str	r3, [r7, #20]
			(((p_channel->output_selection.override_level_pwml) << ch_num)
					<< 16);
	p_pwm->PWM_OOV = tmp_reg;
  401964:	687b      	ldr	r3, [r7, #4]
  401966:	697a      	ldr	r2, [r7, #20]
  401968:	645a      	str	r2, [r3, #68]	; 0x44

	/* Sync Channels Mode Register */
	uint32_t channel = (1 << ch_num);
  40196a:	693b      	ldr	r3, [r7, #16]
  40196c:	2201      	movs	r2, #1
  40196e:	fa02 f303 	lsl.w	r3, r2, r3
  401972:	60fb      	str	r3, [r7, #12]
	if (p_channel->b_sync_ch) {
  401974:	683b      	ldr	r3, [r7, #0]
  401976:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
  40197a:	2b00      	cmp	r3, #0
  40197c:	d006      	beq.n	40198c <pwm_channel_init+0x13c>
		p_pwm->PWM_SCM |= channel;
  40197e:	687b      	ldr	r3, [r7, #4]
  401980:	6a1a      	ldr	r2, [r3, #32]
  401982:	68fb      	ldr	r3, [r7, #12]
  401984:	431a      	orrs	r2, r3
  401986:	687b      	ldr	r3, [r7, #4]
  401988:	621a      	str	r2, [r3, #32]
  40198a:	e006      	b.n	40199a <pwm_channel_init+0x14a>
	} else {
		p_pwm->PWM_SCM &= ~((uint32_t) channel);
  40198c:	687b      	ldr	r3, [r7, #4]
  40198e:	6a1a      	ldr	r2, [r3, #32]
  401990:	68fb      	ldr	r3, [r7, #12]
  401992:	43db      	mvns	r3, r3
  401994:	401a      	ands	r2, r3
  401996:	687b      	ldr	r3, [r7, #4]
  401998:	621a      	str	r2, [r3, #32]
	}

	/* Fault Protection Value Register */
#if (SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
	if (p_channel->ul_fault_output_pwmh == PWM_HIGHZ) {
  40199a:	683b      	ldr	r3, [r7, #0]
  40199c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
  4019a0:	2b02      	cmp	r3, #2
  4019a2:	d10b      	bne.n	4019bc <pwm_channel_init+0x16c>
		p_pwm->PWM_FPV2 |= (0x01 << ch_num);
  4019a4:	687b      	ldr	r3, [r7, #4]
  4019a6:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
  4019aa:	693a      	ldr	r2, [r7, #16]
  4019ac:	2101      	movs	r1, #1
  4019ae:	fa01 f202 	lsl.w	r2, r1, r2
  4019b2:	431a      	orrs	r2, r3
  4019b4:	687b      	ldr	r3, [r7, #4]
  4019b6:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  4019ba:	e024      	b.n	401a06 <pwm_channel_init+0x1b6>
	} else {
		p_pwm->PWM_FPV2 &= ~(0x01 << ch_num);
  4019bc:	687b      	ldr	r3, [r7, #4]
  4019be:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
  4019c2:	693a      	ldr	r2, [r7, #16]
  4019c4:	2101      	movs	r1, #1
  4019c6:	fa01 f202 	lsl.w	r2, r1, r2
  4019ca:	43d2      	mvns	r2, r2
  4019cc:	401a      	ands	r2, r3
  4019ce:	687b      	ldr	r3, [r7, #4]
  4019d0:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		if (p_channel->ul_fault_output_pwmh == PWM_HIGH) {
  4019d4:	683b      	ldr	r3, [r7, #0]
  4019d6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
  4019da:	2b01      	cmp	r3, #1
  4019dc:	d109      	bne.n	4019f2 <pwm_channel_init+0x1a2>
			p_pwm->PWM_FPV1 |= (0x01 << ch_num);
  4019de:	687b      	ldr	r3, [r7, #4]
  4019e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4019e2:	693a      	ldr	r2, [r7, #16]
  4019e4:	2101      	movs	r1, #1
  4019e6:	fa01 f202 	lsl.w	r2, r1, r2
  4019ea:	431a      	orrs	r2, r3
  4019ec:	687b      	ldr	r3, [r7, #4]
  4019ee:	669a      	str	r2, [r3, #104]	; 0x68
  4019f0:	e009      	b.n	401a06 <pwm_channel_init+0x1b6>
		} else {
			p_pwm->PWM_FPV1 &= (~(0x01 << ch_num));
  4019f2:	687b      	ldr	r3, [r7, #4]
  4019f4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4019f6:	693a      	ldr	r2, [r7, #16]
  4019f8:	2101      	movs	r1, #1
  4019fa:	fa01 f202 	lsl.w	r2, r1, r2
  4019fe:	43d2      	mvns	r2, r2
  401a00:	401a      	ands	r2, r3
  401a02:	687b      	ldr	r3, [r7, #4]
  401a04:	669a      	str	r2, [r3, #104]	; 0x68
		}
	}
	if (p_channel->ul_fault_output_pwml == PWM_HIGHZ) {
  401a06:	683b      	ldr	r3, [r7, #0]
  401a08:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
  401a0c:	2b02      	cmp	r3, #2
  401a0e:	d10c      	bne.n	401a2a <pwm_channel_init+0x1da>
		p_pwm->PWM_FPV2 |= ((0x01 << ch_num) << 16);
  401a10:	687b      	ldr	r3, [r7, #4]
  401a12:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
  401a16:	693a      	ldr	r2, [r7, #16]
  401a18:	2101      	movs	r1, #1
  401a1a:	fa01 f202 	lsl.w	r2, r1, r2
  401a1e:	0412      	lsls	r2, r2, #16
  401a20:	431a      	orrs	r2, r3
  401a22:	687b      	ldr	r3, [r7, #4]
  401a24:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  401a28:	e027      	b.n	401a7a <pwm_channel_init+0x22a>
	} else {
		p_pwm->PWM_FPV2 &= ~((0x01 << ch_num) << 16);
  401a2a:	687b      	ldr	r3, [r7, #4]
  401a2c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
  401a30:	693a      	ldr	r2, [r7, #16]
  401a32:	2101      	movs	r1, #1
  401a34:	fa01 f202 	lsl.w	r2, r1, r2
  401a38:	0412      	lsls	r2, r2, #16
  401a3a:	43d2      	mvns	r2, r2
  401a3c:	401a      	ands	r2, r3
  401a3e:	687b      	ldr	r3, [r7, #4]
  401a40:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		if (p_channel->ul_fault_output_pwml == PWM_HIGH) {
  401a44:	683b      	ldr	r3, [r7, #0]
  401a46:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
  401a4a:	2b01      	cmp	r3, #1
  401a4c:	d10a      	bne.n	401a64 <pwm_channel_init+0x214>
			p_pwm->PWM_FPV1 |= ((0x01 << ch_num) << 16);
  401a4e:	687b      	ldr	r3, [r7, #4]
  401a50:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401a52:	693a      	ldr	r2, [r7, #16]
  401a54:	2101      	movs	r1, #1
  401a56:	fa01 f202 	lsl.w	r2, r1, r2
  401a5a:	0412      	lsls	r2, r2, #16
  401a5c:	431a      	orrs	r2, r3
  401a5e:	687b      	ldr	r3, [r7, #4]
  401a60:	669a      	str	r2, [r3, #104]	; 0x68
  401a62:	e00a      	b.n	401a7a <pwm_channel_init+0x22a>
		} else {
			p_pwm->PWM_FPV1 &= (~((0x01 << ch_num) << 16));
  401a64:	687b      	ldr	r3, [r7, #4]
  401a66:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401a68:	693a      	ldr	r2, [r7, #16]
  401a6a:	2101      	movs	r1, #1
  401a6c:	fa01 f202 	lsl.w	r2, r1, r2
  401a70:	0412      	lsls	r2, r2, #16
  401a72:	43d2      	mvns	r2, r2
  401a74:	401a      	ands	r2, r3
  401a76:	687b      	ldr	r3, [r7, #4]
  401a78:	669a      	str	r2, [r3, #104]	; 0x68
	} else {
		p_pwm->PWM_FPV &= (~((0x01 << ch_num) << 16));
	}
#endif
	/* Fault Protection Enable Register */
	uint32_t fault_enable_reg = 0;
  401a7a:	2300      	movs	r3, #0
  401a7c:	60bb      	str	r3, [r7, #8]
		p_pwm->PWM_FPE2 = fault_enable_reg;
	}
#endif

#if (SAM3U || SAM3S || SAM4S || SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
	ch_num *= 8;
  401a7e:	693b      	ldr	r3, [r7, #16]
  401a80:	00db      	lsls	r3, r3, #3
  401a82:	613b      	str	r3, [r7, #16]
	fault_enable_reg = p_pwm->PWM_FPE;
  401a84:	687b      	ldr	r3, [r7, #4]
  401a86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
  401a88:	60bb      	str	r3, [r7, #8]
	fault_enable_reg &= ~(0xFF << ch_num);
  401a8a:	693b      	ldr	r3, [r7, #16]
  401a8c:	22ff      	movs	r2, #255	; 0xff
  401a8e:	fa02 f303 	lsl.w	r3, r2, r3
  401a92:	43db      	mvns	r3, r3
  401a94:	461a      	mov	r2, r3
  401a96:	68bb      	ldr	r3, [r7, #8]
  401a98:	4013      	ands	r3, r2
  401a9a:	60bb      	str	r3, [r7, #8]
	fault_enable_reg |= ((p_channel->fault_id) << ch_num);
  401a9c:	683b      	ldr	r3, [r7, #0]
  401a9e:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
  401aa2:	461a      	mov	r2, r3
  401aa4:	693b      	ldr	r3, [r7, #16]
  401aa6:	fa02 f303 	lsl.w	r3, r2, r3
  401aaa:	461a      	mov	r2, r3
  401aac:	68bb      	ldr	r3, [r7, #8]
  401aae:	4313      	orrs	r3, r2
  401ab0:	60bb      	str	r3, [r7, #8]
	p_pwm->PWM_FPE = fault_enable_reg;
  401ab2:	687b      	ldr	r3, [r7, #4]
  401ab4:	68ba      	ldr	r2, [r7, #8]
  401ab6:	66da      	str	r2, [r3, #108]	; 0x6c
	}
	p_pwm->PWM_CH_NUM_0X400[ch_num].PWM_CAE =
			PWM_CAE_ADEDGV(p_channel->ul_additional_edge) |
			p_channel->additional_edge_mode;
#elif (SAMV70 || SAMV71 || SAME70 || SAMS70)
	if (!ch_num) {
  401ab8:	693b      	ldr	r3, [r7, #16]
  401aba:	2b00      	cmp	r3, #0
  401abc:	d115      	bne.n	401aea <pwm_channel_init+0x29a>
		if (p_channel->spread_spectrum_mode ==
  401abe:	683b      	ldr	r3, [r7, #0]
  401ac0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
  401ac4:	2b01      	cmp	r3, #1
  401ac6:	d109      	bne.n	401adc <pwm_channel_init+0x28c>
		PWM_SPREAD_SPECTRUM_MODE_RANDOM) {
			p_pwm->PWM_SSPR = PWM_SSPR_SPRD(p_channel->ul_spread) |
  401ac8:	683b      	ldr	r3, [r7, #0]
  401aca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  401acc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  401ad0:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
  401ad4:	687b      	ldr	r3, [r7, #4]
  401ad6:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  401ada:	e006      	b.n	401aea <pwm_channel_init+0x29a>
			PWM_SSPR_SPRDM;
			} else {
			p_pwm->PWM_SSPR = PWM_SSPR_SPRD(p_channel->ul_spread);
  401adc:	683b      	ldr	r3, [r7, #0]
  401ade:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  401ae0:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
  401ae4:	687b      	ldr	r3, [r7, #4]
  401ae6:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		}
	}
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR &= (~PWM_CMR_PPM);
  401aea:	687a      	ldr	r2, [r7, #4]
  401aec:	693b      	ldr	r3, [r7, #16]
  401aee:	3310      	adds	r3, #16
  401af0:	015b      	lsls	r3, r3, #5
  401af2:	4413      	add	r3, r2
  401af4:	681b      	ldr	r3, [r3, #0]
  401af6:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
  401afa:	6879      	ldr	r1, [r7, #4]
  401afc:	693b      	ldr	r3, [r7, #16]
  401afe:	3310      	adds	r3, #16
  401b00:	015b      	lsls	r3, r3, #5
  401b02:	440b      	add	r3, r1
  401b04:	601a      	str	r2, [r3, #0]
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR |= (p_channel->ul_ppm_mode & PWM_CMR_PPM);
  401b06:	687a      	ldr	r2, [r7, #4]
  401b08:	693b      	ldr	r3, [r7, #16]
  401b0a:	3310      	adds	r3, #16
  401b0c:	015b      	lsls	r3, r3, #5
  401b0e:	4413      	add	r3, r2
  401b10:	681a      	ldr	r2, [r3, #0]
  401b12:	683b      	ldr	r3, [r7, #0]
  401b14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  401b16:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
  401b1a:	431a      	orrs	r2, r3
  401b1c:	6879      	ldr	r1, [r7, #4]
  401b1e:	693b      	ldr	r3, [r7, #16]
  401b20:	3310      	adds	r3, #16
  401b22:	015b      	lsls	r3, r3, #5
  401b24:	440b      	add	r3, r1
  401b26:	601a      	str	r2, [r3, #0]
#endif

	return 0;
  401b28:	2300      	movs	r3, #0
}
  401b2a:	4618      	mov	r0, r3
  401b2c:	371c      	adds	r7, #28
  401b2e:	46bd      	mov	sp, r7
  401b30:	f85d 7b04 	ldr.w	r7, [sp], #4
  401b34:	4770      	bx	lr
  401b36:	bf00      	nop

00401b38 <pwm_channel_update_duty>:
 *
 * \retval 0 if changing succeeds, otherwise fails.
 */
uint32_t pwm_channel_update_duty(Pwm *p_pwm, pwm_channel_t *p_channel,
		uint32_t ul_duty)
{
  401b38:	b480      	push	{r7}
  401b3a:	b087      	sub	sp, #28
  401b3c:	af00      	add	r7, sp, #0
  401b3e:	60f8      	str	r0, [r7, #12]
  401b40:	60b9      	str	r1, [r7, #8]
  401b42:	607a      	str	r2, [r7, #4]
	uint32_t ch_num = p_channel->channel;
  401b44:	68bb      	ldr	r3, [r7, #8]
  401b46:	681b      	ldr	r3, [r3, #0]
  401b48:	617b      	str	r3, [r7, #20]

		/** Check parameter */
	if (p_channel->ul_period < ul_duty) {
  401b4a:	68bb      	ldr	r3, [r7, #8]
  401b4c:	691a      	ldr	r2, [r3, #16]
  401b4e:	687b      	ldr	r3, [r7, #4]
  401b50:	429a      	cmp	r2, r3
  401b52:	d202      	bcs.n	401b5a <pwm_channel_update_duty+0x22>
		return PWM_INVALID_ARGUMENT;
  401b54:	f64f 73ff 	movw	r3, #65535	; 0xffff
  401b58:	e00b      	b.n	401b72 <pwm_channel_update_duty+0x3a>
	} else {
		/* Save new duty cycle value */
		p_channel->ul_duty = ul_duty;
  401b5a:	68bb      	ldr	r3, [r7, #8]
  401b5c:	687a      	ldr	r2, [r7, #4]
  401b5e:	60da      	str	r2, [r3, #12]
		mode &= ~PWM_CMR_CPD;
		p_pwm->PWM_CH_NUM[ch_num].PWM_CMR = mode;

		p_pwm->PWM_CH_NUM[ch_num].PWM_CUPD = ul_duty;
#else
		p_pwm->PWM_CH_NUM[ch_num].PWM_CDTYUPD = ul_duty;
  401b60:	68fa      	ldr	r2, [r7, #12]
  401b62:	697b      	ldr	r3, [r7, #20]
  401b64:	015b      	lsls	r3, r3, #5
  401b66:	4413      	add	r3, r2
  401b68:	f503 7302 	add.w	r3, r3, #520	; 0x208
  401b6c:	687a      	ldr	r2, [r7, #4]
  401b6e:	601a      	str	r2, [r3, #0]
#endif
	}

	return 0;
  401b70:	2300      	movs	r3, #0
}
  401b72:	4618      	mov	r0, r3
  401b74:	371c      	adds	r7, #28
  401b76:	46bd      	mov	sp, r7
  401b78:	f85d 7b04 	ldr.w	r7, [sp], #4
  401b7c:	4770      	bx	lr
  401b7e:	bf00      	nop

00401b80 <pwm_channel_enable>:
 *
 * \param p_pwm Pointer to a PWM instance.
 * \param ul_channel PWM channel number to enable.
 */
void pwm_channel_enable(Pwm *p_pwm, uint32_t ul_channel)
{
  401b80:	b480      	push	{r7}
  401b82:	b083      	sub	sp, #12
  401b84:	af00      	add	r7, sp, #0
  401b86:	6078      	str	r0, [r7, #4]
  401b88:	6039      	str	r1, [r7, #0]
	p_pwm->PWM_ENA = (1 << ul_channel);
  401b8a:	683b      	ldr	r3, [r7, #0]
  401b8c:	2201      	movs	r2, #1
  401b8e:	fa02 f303 	lsl.w	r3, r2, r3
  401b92:	461a      	mov	r2, r3
  401b94:	687b      	ldr	r3, [r7, #4]
  401b96:	605a      	str	r2, [r3, #4]
}
  401b98:	370c      	adds	r7, #12
  401b9a:	46bd      	mov	sp, r7
  401b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
  401ba0:	4770      	bx	lr
  401ba2:	bf00      	nop

00401ba4 <pwm_channel_disable>:
 *
 * \param p_pwm Pointer to a PWM instance.
 * \param ul_channel PWM channel number to disable.
 */
void pwm_channel_disable(Pwm *p_pwm, uint32_t ul_channel)
{
  401ba4:	b480      	push	{r7}
  401ba6:	b083      	sub	sp, #12
  401ba8:	af00      	add	r7, sp, #0
  401baa:	6078      	str	r0, [r7, #4]
  401bac:	6039      	str	r1, [r7, #0]
	p_pwm->PWM_DIS = (1 << ul_channel);
  401bae:	683b      	ldr	r3, [r7, #0]
  401bb0:	2201      	movs	r2, #1
  401bb2:	fa02 f303 	lsl.w	r3, r2, r3
  401bb6:	461a      	mov	r2, r3
  401bb8:	687b      	ldr	r3, [r7, #4]
  401bba:	609a      	str	r2, [r3, #8]
}
  401bbc:	370c      	adds	r7, #12
  401bbe:	46bd      	mov	sp, r7
  401bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
  401bc4:	4770      	bx	lr
  401bc6:	bf00      	nop

00401bc8 <pwm_channel_get_interrupt_status>:
 * \param p_pwm Pointer to a PWM instance.
 *
 * \return Channel counter event and fault protection trigger interrupt status.
 */
uint32_t pwm_channel_get_interrupt_status(Pwm *p_pwm)
{
  401bc8:	b480      	push	{r7}
  401bca:	b083      	sub	sp, #12
  401bcc:	af00      	add	r7, sp, #0
  401bce:	6078      	str	r0, [r7, #4]
#if (SAM3N || SAM4N || SAM4C || SAM4CP || SAM4CM)
	return p_pwm->PWM_ISR;
#else
	return p_pwm->PWM_ISR1;
  401bd0:	687b      	ldr	r3, [r7, #4]
  401bd2:	69db      	ldr	r3, [r3, #28]
#endif
}
  401bd4:	4618      	mov	r0, r3
  401bd6:	370c      	adds	r7, #12
  401bd8:	46bd      	mov	sp, r7
  401bda:	f85d 7b04 	ldr.w	r7, [sp], #4
  401bde:	4770      	bx	lr

00401be0 <pwm_channel_enable_interrupt>:
 * \param ul_fault Channel number to enable fault protection interrupt(ignored
 * by SAM3N/SAM4N/SAM4C/SAM4CP/SAM4CM).
 */
void pwm_channel_enable_interrupt(Pwm *p_pwm, uint32_t ul_event,
		uint32_t ul_fault)
{
  401be0:	b480      	push	{r7}
  401be2:	b085      	sub	sp, #20
  401be4:	af00      	add	r7, sp, #0
  401be6:	60f8      	str	r0, [r7, #12]
  401be8:	60b9      	str	r1, [r7, #8]
  401bea:	607a      	str	r2, [r7, #4]
#if (SAM3N || SAM4N || SAM4C || SAM4CP || SAM4CM)
	p_pwm->PWM_IER = (1 << ul_event);
	/* avoid Cppcheck Warning */
	UNUSED(ul_fault);
#else
	p_pwm->PWM_IER1 = (1 << ul_event) | (1 << (ul_fault + 16));
  401bec:	68bb      	ldr	r3, [r7, #8]
  401bee:	2201      	movs	r2, #1
  401bf0:	409a      	lsls	r2, r3
  401bf2:	687b      	ldr	r3, [r7, #4]
  401bf4:	3310      	adds	r3, #16
  401bf6:	4619      	mov	r1, r3
  401bf8:	2301      	movs	r3, #1
  401bfa:	408b      	lsls	r3, r1
  401bfc:	4313      	orrs	r3, r2
  401bfe:	461a      	mov	r2, r3
  401c00:	68fb      	ldr	r3, [r7, #12]
  401c02:	611a      	str	r2, [r3, #16]
#endif
}
  401c04:	3714      	adds	r7, #20
  401c06:	46bd      	mov	sp, r7
  401c08:	f85d 7b04 	ldr.w	r7, [sp], #4
  401c0c:	4770      	bx	lr
  401c0e:	bf00      	nop

00401c10 <pwm_channel_disable_interrupt>:
 * \param ul_fault Bitmask of channel number to disable fault protection
 * interrupt(ignored by SAM3N/SAM4N/SAM4C/SAM4CP/SAM4CM).
 */
void pwm_channel_disable_interrupt(Pwm *p_pwm, uint32_t ul_event,
		uint32_t ul_fault)
{
  401c10:	b480      	push	{r7}
  401c12:	b085      	sub	sp, #20
  401c14:	af00      	add	r7, sp, #0
  401c16:	60f8      	str	r0, [r7, #12]
  401c18:	60b9      	str	r1, [r7, #8]
  401c1a:	607a      	str	r2, [r7, #4]
#if (SAM3N || SAM4N || SAM4C || SAM4CP || SAM4CM)
	p_pwm->PWM_IDR = (1 << ul_event);
	/* avoid Cppcheck Warning */
	UNUSED(ul_fault);
#else
	p_pwm->PWM_IDR1 = (1 << ul_event) | (1 << (ul_fault + 16));
  401c1c:	68bb      	ldr	r3, [r7, #8]
  401c1e:	2201      	movs	r2, #1
  401c20:	409a      	lsls	r2, r3
  401c22:	687b      	ldr	r3, [r7, #4]
  401c24:	3310      	adds	r3, #16
  401c26:	4619      	mov	r1, r3
  401c28:	2301      	movs	r3, #1
  401c2a:	408b      	lsls	r3, r1
  401c2c:	4313      	orrs	r3, r2
  401c2e:	461a      	mov	r2, r3
  401c30:	68fb      	ldr	r3, [r7, #12]
  401c32:	615a      	str	r2, [r3, #20]
#endif
}
  401c34:	3714      	adds	r7, #20
  401c36:	46bd      	mov	sp, r7
  401c38:	f85d 7b04 	ldr.w	r7, [sp], #4
  401c3c:	4770      	bx	lr
  401c3e:	bf00      	nop

00401c40 <twihs_enable_master_mode>:
 * \brief Enable TWIHS master mode.
 *
 * \param p_twihs Pointer to a TWIHS instance.
 */
void twihs_enable_master_mode(Twihs *p_twihs)
{
  401c40:	b480      	push	{r7}
  401c42:	b083      	sub	sp, #12
  401c44:	af00      	add	r7, sp, #0
  401c46:	6078      	str	r0, [r7, #4]
	/* Set Master Disable bit and Slave Disable bit */
	p_twihs->TWIHS_CR = TWIHS_CR_MSDIS;
  401c48:	687b      	ldr	r3, [r7, #4]
  401c4a:	2208      	movs	r2, #8
  401c4c:	601a      	str	r2, [r3, #0]
	p_twihs->TWIHS_CR = TWIHS_CR_SVDIS;
  401c4e:	687b      	ldr	r3, [r7, #4]
  401c50:	2220      	movs	r2, #32
  401c52:	601a      	str	r2, [r3, #0]

	/* Set Master Enable bit */
	p_twihs->TWIHS_CR = TWIHS_CR_MSEN;
  401c54:	687b      	ldr	r3, [r7, #4]
  401c56:	2204      	movs	r2, #4
  401c58:	601a      	str	r2, [r3, #0]
}
  401c5a:	370c      	adds	r7, #12
  401c5c:	46bd      	mov	sp, r7
  401c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
  401c62:	4770      	bx	lr

00401c64 <twihs_master_init>:
 * \param p_opt Options for initializing the TWIHS module (see \ref twihs_options_t).
 *
 * \return TWIHS_SUCCESS if initialization is complete, error code otherwise.
 */
uint32_t twihs_master_init(Twihs *p_twihs, const twihs_options_t *p_opt)
{
  401c64:	b580      	push	{r7, lr}
  401c66:	b084      	sub	sp, #16
  401c68:	af00      	add	r7, sp, #0
  401c6a:	6078      	str	r0, [r7, #4]
  401c6c:	6039      	str	r1, [r7, #0]
	uint32_t status = TWIHS_SUCCESS;
  401c6e:	2300      	movs	r3, #0
  401c70:	60fb      	str	r3, [r7, #12]

	/* Disable TWIHS interrupts */
	p_twihs->TWIHS_IDR = ~0UL;
  401c72:	687b      	ldr	r3, [r7, #4]
  401c74:	f04f 32ff 	mov.w	r2, #4294967295
  401c78:	629a      	str	r2, [r3, #40]	; 0x28

	/* Dummy read in status register */
	p_twihs->TWIHS_SR;
  401c7a:	687b      	ldr	r3, [r7, #4]
  401c7c:	6a1b      	ldr	r3, [r3, #32]

	/* Reset TWIHS peripheral */
	twihs_reset(p_twihs);
  401c7e:	6878      	ldr	r0, [r7, #4]
  401c80:	4b0b      	ldr	r3, [pc, #44]	; (401cb0 <twihs_master_init+0x4c>)
  401c82:	4798      	blx	r3

	twihs_enable_master_mode(p_twihs);
  401c84:	6878      	ldr	r0, [r7, #4]
  401c86:	4b0b      	ldr	r3, [pc, #44]	; (401cb4 <twihs_master_init+0x50>)
  401c88:	4798      	blx	r3

	/* Select the speed */
	if (twihs_set_speed(p_twihs, p_opt->speed, p_opt->master_clk) == FAIL) {
  401c8a:	683b      	ldr	r3, [r7, #0]
  401c8c:	685a      	ldr	r2, [r3, #4]
  401c8e:	683b      	ldr	r3, [r7, #0]
  401c90:	681b      	ldr	r3, [r3, #0]
  401c92:	6878      	ldr	r0, [r7, #4]
  401c94:	4611      	mov	r1, r2
  401c96:	461a      	mov	r2, r3
  401c98:	4b07      	ldr	r3, [pc, #28]	; (401cb8 <twihs_master_init+0x54>)
  401c9a:	4798      	blx	r3
  401c9c:	4603      	mov	r3, r0
  401c9e:	2b01      	cmp	r3, #1
  401ca0:	d101      	bne.n	401ca6 <twihs_master_init+0x42>
		/* The desired speed setting is rejected */
		status = TWIHS_INVALID_ARGUMENT;
  401ca2:	2301      	movs	r3, #1
  401ca4:	60fb      	str	r3, [r7, #12]
	}

	return status;
  401ca6:	68fb      	ldr	r3, [r7, #12]
}
  401ca8:	4618      	mov	r0, r3
  401caa:	3710      	adds	r7, #16
  401cac:	46bd      	mov	sp, r7
  401cae:	bd80      	pop	{r7, pc}
  401cb0:	00401f4d 	.word	0x00401f4d
  401cb4:	00401c41 	.word	0x00401c41
  401cb8:	00401cbd 	.word	0x00401cbd

00401cbc <twihs_set_speed>:
 *
 * \retval PASS New speed setting is accepted.
 * \retval FAIL New speed setting is rejected.
 */
uint32_t twihs_set_speed(Twihs *p_twihs, uint32_t ul_speed, uint32_t ul_mck)
{
  401cbc:	b480      	push	{r7}
  401cbe:	b087      	sub	sp, #28
  401cc0:	af00      	add	r7, sp, #0
  401cc2:	60f8      	str	r0, [r7, #12]
  401cc4:	60b9      	str	r1, [r7, #8]
  401cc6:	607a      	str	r2, [r7, #4]
	uint32_t ckdiv = 0;
  401cc8:	2300      	movs	r3, #0
  401cca:	617b      	str	r3, [r7, #20]
	uint32_t c_lh_div;

	/* High-Speed can be only used in slave mode, 400k is the max speed allowed for master */
	if (ul_speed > I2C_FAST_MODE_SPEED) {
  401ccc:	68bb      	ldr	r3, [r7, #8]
  401cce:	4a16      	ldr	r2, [pc, #88]	; (401d28 <twihs_set_speed+0x6c>)
  401cd0:	4293      	cmp	r3, r2
  401cd2:	d901      	bls.n	401cd8 <twihs_set_speed+0x1c>
		return FAIL;
  401cd4:	2301      	movs	r3, #1
  401cd6:	e021      	b.n	401d1c <twihs_set_speed+0x60>
	}

	c_lh_div = ul_mck / (ul_speed * TWIHS_CLK_DIVIDER) - TWIHS_CLK_CALC_ARGU;
  401cd8:	68bb      	ldr	r3, [r7, #8]
  401cda:	005b      	lsls	r3, r3, #1
  401cdc:	687a      	ldr	r2, [r7, #4]
  401cde:	fbb2 f3f3 	udiv	r3, r2, r3
  401ce2:	3b04      	subs	r3, #4
  401ce4:	613b      	str	r3, [r7, #16]

	/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
	while ((c_lh_div > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  401ce6:	e005      	b.n	401cf4 <twihs_set_speed+0x38>
		/* Increase clock divider */
		ckdiv++;
  401ce8:	697b      	ldr	r3, [r7, #20]
  401cea:	3301      	adds	r3, #1
  401cec:	617b      	str	r3, [r7, #20]
		/* Divide cldiv value */
		c_lh_div /= TWIHS_CLK_DIVIDER;
  401cee:	693b      	ldr	r3, [r7, #16]
  401cf0:	085b      	lsrs	r3, r3, #1
  401cf2:	613b      	str	r3, [r7, #16]
	}

	c_lh_div = ul_mck / (ul_speed * TWIHS_CLK_DIVIDER) - TWIHS_CLK_CALC_ARGU;

	/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
	while ((c_lh_div > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  401cf4:	693b      	ldr	r3, [r7, #16]
  401cf6:	2bff      	cmp	r3, #255	; 0xff
  401cf8:	d902      	bls.n	401d00 <twihs_set_speed+0x44>
  401cfa:	697b      	ldr	r3, [r7, #20]
  401cfc:	2b06      	cmp	r3, #6
  401cfe:	d9f3      	bls.n	401ce8 <twihs_set_speed+0x2c>
		c_lh_div /= TWIHS_CLK_DIVIDER;
	}

	/* set clock waveform generator register */
	p_twihs->TWIHS_CWGR =
			TWIHS_CWGR_CLDIV(c_lh_div) | TWIHS_CWGR_CHDIV(c_lh_div) |
  401d00:	693b      	ldr	r3, [r7, #16]
  401d02:	b2da      	uxtb	r2, r3
  401d04:	693b      	ldr	r3, [r7, #16]
  401d06:	021b      	lsls	r3, r3, #8
  401d08:	b29b      	uxth	r3, r3
  401d0a:	431a      	orrs	r2, r3
			TWIHS_CWGR_CKDIV(ckdiv);
  401d0c:	697b      	ldr	r3, [r7, #20]
  401d0e:	041b      	lsls	r3, r3, #16
  401d10:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
		c_lh_div /= TWIHS_CLK_DIVIDER;
	}

	/* set clock waveform generator register */
	p_twihs->TWIHS_CWGR =
			TWIHS_CWGR_CLDIV(c_lh_div) | TWIHS_CWGR_CHDIV(c_lh_div) |
  401d14:	431a      	orrs	r2, r3
		/* Divide cldiv value */
		c_lh_div /= TWIHS_CLK_DIVIDER;
	}

	/* set clock waveform generator register */
	p_twihs->TWIHS_CWGR =
  401d16:	68fb      	ldr	r3, [r7, #12]
  401d18:	611a      	str	r2, [r3, #16]
			TWIHS_CWGR_CLDIV(c_lh_div) | TWIHS_CWGR_CHDIV(c_lh_div) |
			TWIHS_CWGR_CKDIV(ckdiv);

	return PASS;
  401d1a:	2300      	movs	r3, #0
}
  401d1c:	4618      	mov	r0, r3
  401d1e:	371c      	adds	r7, #28
  401d20:	46bd      	mov	sp, r7
  401d22:	f85d 7b04 	ldr.w	r7, [sp], #4
  401d26:	4770      	bx	lr
  401d28:	00061a80 	.word	0x00061a80

00401d2c <twihs_mk_addr>:
 * which byte is the MSB to start with.
 *
 * Please see the device datasheet for details on this.
 */
static uint32_t twihs_mk_addr(const uint8_t *addr, int len)
{
  401d2c:	b480      	push	{r7}
  401d2e:	b085      	sub	sp, #20
  401d30:	af00      	add	r7, sp, #0
  401d32:	6078      	str	r0, [r7, #4]
  401d34:	6039      	str	r1, [r7, #0]
	uint32_t val;

	if (len == 0)
  401d36:	683b      	ldr	r3, [r7, #0]
  401d38:	2b00      	cmp	r3, #0
  401d3a:	d101      	bne.n	401d40 <twihs_mk_addr+0x14>
		return 0;
  401d3c:	2300      	movs	r3, #0
  401d3e:	e01d      	b.n	401d7c <twihs_mk_addr+0x50>

	val = addr[0];
  401d40:	687b      	ldr	r3, [r7, #4]
  401d42:	781b      	ldrb	r3, [r3, #0]
  401d44:	60fb      	str	r3, [r7, #12]
	if (len > 1) {
  401d46:	683b      	ldr	r3, [r7, #0]
  401d48:	2b01      	cmp	r3, #1
  401d4a:	dd09      	ble.n	401d60 <twihs_mk_addr+0x34>
		val <<= 8;
  401d4c:	68fb      	ldr	r3, [r7, #12]
  401d4e:	021b      	lsls	r3, r3, #8
  401d50:	60fb      	str	r3, [r7, #12]
		val |= addr[1];
  401d52:	687b      	ldr	r3, [r7, #4]
  401d54:	3301      	adds	r3, #1
  401d56:	781b      	ldrb	r3, [r3, #0]
  401d58:	461a      	mov	r2, r3
  401d5a:	68fb      	ldr	r3, [r7, #12]
  401d5c:	4313      	orrs	r3, r2
  401d5e:	60fb      	str	r3, [r7, #12]
	}
	if (len > 2) {
  401d60:	683b      	ldr	r3, [r7, #0]
  401d62:	2b02      	cmp	r3, #2
  401d64:	dd09      	ble.n	401d7a <twihs_mk_addr+0x4e>
		val <<= 8;
  401d66:	68fb      	ldr	r3, [r7, #12]
  401d68:	021b      	lsls	r3, r3, #8
  401d6a:	60fb      	str	r3, [r7, #12]
		val |= addr[2];
  401d6c:	687b      	ldr	r3, [r7, #4]
  401d6e:	3302      	adds	r3, #2
  401d70:	781b      	ldrb	r3, [r3, #0]
  401d72:	461a      	mov	r2, r3
  401d74:	68fb      	ldr	r3, [r7, #12]
  401d76:	4313      	orrs	r3, r2
  401d78:	60fb      	str	r3, [r7, #12]
	}
	return val;
  401d7a:	68fb      	ldr	r3, [r7, #12]
}
  401d7c:	4618      	mov	r0, r3
  401d7e:	3714      	adds	r7, #20
  401d80:	46bd      	mov	sp, r7
  401d82:	f85d 7b04 	ldr.w	r7, [sp], #4
  401d86:	4770      	bx	lr

00401d88 <twihs_master_read>:
 * \param p_packet Packet information and data (see \ref twihs_packet_t).
 *
 * \return TWIHS_SUCCESS if all bytes were read, error code otherwise.
 */
uint32_t twihs_master_read(Twihs *p_twihs, twihs_packet_t *p_packet)
{
  401d88:	b580      	push	{r7, lr}
  401d8a:	b086      	sub	sp, #24
  401d8c:	af00      	add	r7, sp, #0
  401d8e:	6078      	str	r0, [r7, #4]
  401d90:	6039      	str	r1, [r7, #0]
	uint32_t status, cnt = p_packet->length;
  401d92:	683b      	ldr	r3, [r7, #0]
  401d94:	68db      	ldr	r3, [r3, #12]
  401d96:	617b      	str	r3, [r7, #20]
	uint8_t *buffer = p_packet->buffer;
  401d98:	683b      	ldr	r3, [r7, #0]
  401d9a:	689b      	ldr	r3, [r3, #8]
  401d9c:	613b      	str	r3, [r7, #16]
	uint32_t timeout = TWIHS_TIMEOUT;
  401d9e:	f643 2398 	movw	r3, #15000	; 0x3a98
  401da2:	60fb      	str	r3, [r7, #12]

	/* Check argument */
	if (cnt == 0) {
  401da4:	697b      	ldr	r3, [r7, #20]
  401da6:	2b00      	cmp	r3, #0
  401da8:	d101      	bne.n	401dae <twihs_master_read+0x26>
		return TWIHS_INVALID_ARGUMENT;
  401daa:	2301      	movs	r3, #1
  401dac:	e059      	b.n	401e62 <twihs_master_read+0xda>
	}

	/* Set read mode, slave address and 3 internal address byte lengths */
	p_twihs->TWIHS_MMR = 0;
  401dae:	687b      	ldr	r3, [r7, #4]
  401db0:	2200      	movs	r2, #0
  401db2:	605a      	str	r2, [r3, #4]
	p_twihs->TWIHS_MMR = TWIHS_MMR_MREAD | TWIHS_MMR_DADR(p_packet->chip) |
  401db4:	683b      	ldr	r3, [r7, #0]
  401db6:	7c1b      	ldrb	r3, [r3, #16]
  401db8:	041b      	lsls	r3, r3, #16
  401dba:	f403 02fe 	and.w	r2, r3, #8323072	; 0x7f0000
			((p_packet->addr_length << TWIHS_MMR_IADRSZ_Pos) &
  401dbe:	683b      	ldr	r3, [r7, #0]
  401dc0:	685b      	ldr	r3, [r3, #4]
  401dc2:	021b      	lsls	r3, r3, #8
  401dc4:	f403 7340 	and.w	r3, r3, #768	; 0x300
		return TWIHS_INVALID_ARGUMENT;
	}

	/* Set read mode, slave address and 3 internal address byte lengths */
	p_twihs->TWIHS_MMR = 0;
	p_twihs->TWIHS_MMR = TWIHS_MMR_MREAD | TWIHS_MMR_DADR(p_packet->chip) |
  401dc8:	4313      	orrs	r3, r2
  401dca:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
  401dce:	687b      	ldr	r3, [r7, #4]
  401dd0:	605a      	str	r2, [r3, #4]
			((p_packet->addr_length << TWIHS_MMR_IADRSZ_Pos) &
			TWIHS_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twihs->TWIHS_IADR = 0;
  401dd2:	687b      	ldr	r3, [r7, #4]
  401dd4:	2200      	movs	r2, #0
  401dd6:	60da      	str	r2, [r3, #12]
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);
  401dd8:	683a      	ldr	r2, [r7, #0]
  401dda:	683b      	ldr	r3, [r7, #0]
  401ddc:	685b      	ldr	r3, [r3, #4]
  401dde:	4610      	mov	r0, r2
  401de0:	4619      	mov	r1, r3
  401de2:	4b22      	ldr	r3, [pc, #136]	; (401e6c <twihs_master_read+0xe4>)
  401de4:	4798      	blx	r3
  401de6:	4602      	mov	r2, r0
  401de8:	687b      	ldr	r3, [r7, #4]
  401dea:	60da      	str	r2, [r3, #12]

	/* Send a START Condition */
	p_twihs->TWIHS_CR = TWIHS_CR_START;
  401dec:	687b      	ldr	r3, [r7, #4]
  401dee:	2201      	movs	r2, #1
  401df0:	601a      	str	r2, [r3, #0]

	while (cnt > 0) {
  401df2:	e029      	b.n	401e48 <twihs_master_read+0xc0>
		status = p_twihs->TWIHS_SR;
  401df4:	687b      	ldr	r3, [r7, #4]
  401df6:	6a1b      	ldr	r3, [r3, #32]
  401df8:	60bb      	str	r3, [r7, #8]
		if (status & TWIHS_SR_NACK) {
  401dfa:	68bb      	ldr	r3, [r7, #8]
  401dfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
  401e00:	2b00      	cmp	r3, #0
  401e02:	d001      	beq.n	401e08 <twihs_master_read+0x80>
			return TWIHS_RECEIVE_NACK;
  401e04:	2305      	movs	r3, #5
  401e06:	e02c      	b.n	401e62 <twihs_master_read+0xda>
		}
		if (!timeout--) {
  401e08:	68fb      	ldr	r3, [r7, #12]
  401e0a:	1e5a      	subs	r2, r3, #1
  401e0c:	60fa      	str	r2, [r7, #12]
  401e0e:	2b00      	cmp	r3, #0
  401e10:	d101      	bne.n	401e16 <twihs_master_read+0x8e>
			return TWIHS_ERROR_TIMEOUT;
  401e12:	2309      	movs	r3, #9
  401e14:	e025      	b.n	401e62 <twihs_master_read+0xda>
		}
		/* Last byte ? */
		if (cnt == 1) {
  401e16:	697b      	ldr	r3, [r7, #20]
  401e18:	2b01      	cmp	r3, #1
  401e1a:	d102      	bne.n	401e22 <twihs_master_read+0x9a>
			p_twihs->TWIHS_CR = TWIHS_CR_STOP;
  401e1c:	687b      	ldr	r3, [r7, #4]
  401e1e:	2202      	movs	r2, #2
  401e20:	601a      	str	r2, [r3, #0]
		}

		if (!(status & TWIHS_SR_RXRDY)) {
  401e22:	68bb      	ldr	r3, [r7, #8]
  401e24:	f003 0302 	and.w	r3, r3, #2
  401e28:	2b00      	cmp	r3, #0
  401e2a:	d100      	bne.n	401e2e <twihs_master_read+0xa6>
			continue;
  401e2c:	e00c      	b.n	401e48 <twihs_master_read+0xc0>
		}
		*buffer++ = p_twihs->TWIHS_RHR;
  401e2e:	693b      	ldr	r3, [r7, #16]
  401e30:	1c5a      	adds	r2, r3, #1
  401e32:	613a      	str	r2, [r7, #16]
  401e34:	687a      	ldr	r2, [r7, #4]
  401e36:	6b12      	ldr	r2, [r2, #48]	; 0x30
  401e38:	b2d2      	uxtb	r2, r2
  401e3a:	701a      	strb	r2, [r3, #0]

		cnt--;
  401e3c:	697b      	ldr	r3, [r7, #20]
  401e3e:	3b01      	subs	r3, #1
  401e40:	617b      	str	r3, [r7, #20]
		timeout = TWIHS_TIMEOUT;
  401e42:	f643 2398 	movw	r3, #15000	; 0x3a98
  401e46:	60fb      	str	r3, [r7, #12]
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);

	/* Send a START Condition */
	p_twihs->TWIHS_CR = TWIHS_CR_START;

	while (cnt > 0) {
  401e48:	697b      	ldr	r3, [r7, #20]
  401e4a:	2b00      	cmp	r3, #0
  401e4c:	d1d2      	bne.n	401df4 <twihs_master_read+0x6c>

		cnt--;
		timeout = TWIHS_TIMEOUT;
	}

	while (!(p_twihs->TWIHS_SR & TWIHS_SR_TXCOMP)) {
  401e4e:	bf00      	nop
  401e50:	687b      	ldr	r3, [r7, #4]
  401e52:	6a1b      	ldr	r3, [r3, #32]
  401e54:	f003 0301 	and.w	r3, r3, #1
  401e58:	2b00      	cmp	r3, #0
  401e5a:	d0f9      	beq.n	401e50 <twihs_master_read+0xc8>
	}

	p_twihs->TWIHS_SR;
  401e5c:	687b      	ldr	r3, [r7, #4]
  401e5e:	6a1b      	ldr	r3, [r3, #32]

	return TWIHS_SUCCESS;
  401e60:	2300      	movs	r3, #0
}
  401e62:	4618      	mov	r0, r3
  401e64:	3718      	adds	r7, #24
  401e66:	46bd      	mov	sp, r7
  401e68:	bd80      	pop	{r7, pc}
  401e6a:	bf00      	nop
  401e6c:	00401d2d 	.word	0x00401d2d

00401e70 <twihs_master_write>:
 * \param p_packet Packet information and data (see \ref twihs_packet_t).
 *
 * \return TWIHS_SUCCESS if all bytes were written, error code otherwise.
 */
uint32_t twihs_master_write(Twihs *p_twihs, twihs_packet_t *p_packet)
{
  401e70:	b580      	push	{r7, lr}
  401e72:	b086      	sub	sp, #24
  401e74:	af00      	add	r7, sp, #0
  401e76:	6078      	str	r0, [r7, #4]
  401e78:	6039      	str	r1, [r7, #0]
	uint32_t status, cnt = p_packet->length;
  401e7a:	683b      	ldr	r3, [r7, #0]
  401e7c:	68db      	ldr	r3, [r3, #12]
  401e7e:	617b      	str	r3, [r7, #20]
	uint8_t *buffer = p_packet->buffer;
  401e80:	683b      	ldr	r3, [r7, #0]
  401e82:	689b      	ldr	r3, [r3, #8]
  401e84:	613b      	str	r3, [r7, #16]

	/* Check argument */
	if (cnt == 0) {
  401e86:	697b      	ldr	r3, [r7, #20]
  401e88:	2b00      	cmp	r3, #0
  401e8a:	d101      	bne.n	401e90 <twihs_master_write+0x20>
		return TWIHS_INVALID_ARGUMENT;
  401e8c:	2301      	movs	r3, #1
  401e8e:	e056      	b.n	401f3e <twihs_master_write+0xce>
	}

	/* Set write mode, slave address and 3 internal address byte lengths */
	p_twihs->TWIHS_MMR = 0;
  401e90:	687b      	ldr	r3, [r7, #4]
  401e92:	2200      	movs	r2, #0
  401e94:	605a      	str	r2, [r3, #4]
	p_twihs->TWIHS_MMR = TWIHS_MMR_DADR(p_packet->chip) |
  401e96:	683b      	ldr	r3, [r7, #0]
  401e98:	7c1b      	ldrb	r3, [r3, #16]
  401e9a:	041b      	lsls	r3, r3, #16
  401e9c:	f403 02fe 	and.w	r2, r3, #8323072	; 0x7f0000
			((p_packet->addr_length << TWIHS_MMR_IADRSZ_Pos) &
  401ea0:	683b      	ldr	r3, [r7, #0]
  401ea2:	685b      	ldr	r3, [r3, #4]
  401ea4:	021b      	lsls	r3, r3, #8
  401ea6:	f403 7340 	and.w	r3, r3, #768	; 0x300
		return TWIHS_INVALID_ARGUMENT;
	}

	/* Set write mode, slave address and 3 internal address byte lengths */
	p_twihs->TWIHS_MMR = 0;
	p_twihs->TWIHS_MMR = TWIHS_MMR_DADR(p_packet->chip) |
  401eaa:	431a      	orrs	r2, r3
  401eac:	687b      	ldr	r3, [r7, #4]
  401eae:	605a      	str	r2, [r3, #4]
			((p_packet->addr_length << TWIHS_MMR_IADRSZ_Pos) &
			TWIHS_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twihs->TWIHS_IADR = 0;
  401eb0:	687b      	ldr	r3, [r7, #4]
  401eb2:	2200      	movs	r2, #0
  401eb4:	60da      	str	r2, [r3, #12]
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);
  401eb6:	683a      	ldr	r2, [r7, #0]
  401eb8:	683b      	ldr	r3, [r7, #0]
  401eba:	685b      	ldr	r3, [r3, #4]
  401ebc:	4610      	mov	r0, r2
  401ebe:	4619      	mov	r1, r3
  401ec0:	4b21      	ldr	r3, [pc, #132]	; (401f48 <twihs_master_write+0xd8>)
  401ec2:	4798      	blx	r3
  401ec4:	4602      	mov	r2, r0
  401ec6:	687b      	ldr	r3, [r7, #4]
  401ec8:	60da      	str	r2, [r3, #12]

	/* Send all bytes */
	while (cnt > 0) {
  401eca:	e019      	b.n	401f00 <twihs_master_write+0x90>
		status = p_twihs->TWIHS_SR;
  401ecc:	687b      	ldr	r3, [r7, #4]
  401ece:	6a1b      	ldr	r3, [r3, #32]
  401ed0:	60fb      	str	r3, [r7, #12]
		if (status & TWIHS_SR_NACK) {
  401ed2:	68fb      	ldr	r3, [r7, #12]
  401ed4:	f403 7380 	and.w	r3, r3, #256	; 0x100
  401ed8:	2b00      	cmp	r3, #0
  401eda:	d001      	beq.n	401ee0 <twihs_master_write+0x70>
			return TWIHS_RECEIVE_NACK;
  401edc:	2305      	movs	r3, #5
  401ede:	e02e      	b.n	401f3e <twihs_master_write+0xce>
		}

		if (!(status & TWIHS_SR_TXRDY)) {
  401ee0:	68fb      	ldr	r3, [r7, #12]
  401ee2:	f003 0304 	and.w	r3, r3, #4
  401ee6:	2b00      	cmp	r3, #0
  401ee8:	d100      	bne.n	401eec <twihs_master_write+0x7c>
			continue;
  401eea:	e009      	b.n	401f00 <twihs_master_write+0x90>
		}
		p_twihs->TWIHS_THR = *buffer++;
  401eec:	693b      	ldr	r3, [r7, #16]
  401eee:	1c5a      	adds	r2, r3, #1
  401ef0:	613a      	str	r2, [r7, #16]
  401ef2:	781b      	ldrb	r3, [r3, #0]
  401ef4:	461a      	mov	r2, r3
  401ef6:	687b      	ldr	r3, [r7, #4]
  401ef8:	635a      	str	r2, [r3, #52]	; 0x34

		cnt--;
  401efa:	697b      	ldr	r3, [r7, #20]
  401efc:	3b01      	subs	r3, #1
  401efe:	617b      	str	r3, [r7, #20]
	/* Set internal address for remote chip */
	p_twihs->TWIHS_IADR = 0;
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);

	/* Send all bytes */
	while (cnt > 0) {
  401f00:	697b      	ldr	r3, [r7, #20]
  401f02:	2b00      	cmp	r3, #0
  401f04:	d1e2      	bne.n	401ecc <twihs_master_write+0x5c>

		cnt--;
	}

	while (1) {
		status = p_twihs->TWIHS_SR;
  401f06:	687b      	ldr	r3, [r7, #4]
  401f08:	6a1b      	ldr	r3, [r3, #32]
  401f0a:	60fb      	str	r3, [r7, #12]
		if (status & TWIHS_SR_NACK) {
  401f0c:	68fb      	ldr	r3, [r7, #12]
  401f0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
  401f12:	2b00      	cmp	r3, #0
  401f14:	d001      	beq.n	401f1a <twihs_master_write+0xaa>
			return TWIHS_RECEIVE_NACK;
  401f16:	2305      	movs	r3, #5
  401f18:	e011      	b.n	401f3e <twihs_master_write+0xce>
		}

		if (status & TWIHS_SR_TXRDY) {
  401f1a:	68fb      	ldr	r3, [r7, #12]
  401f1c:	f003 0304 	and.w	r3, r3, #4
  401f20:	2b00      	cmp	r3, #0
  401f22:	d004      	beq.n	401f2e <twihs_master_write+0xbe>
			break;
  401f24:	bf00      	nop
		}
	}

	p_twihs->TWIHS_CR = TWIHS_CR_STOP;
  401f26:	687b      	ldr	r3, [r7, #4]
  401f28:	2202      	movs	r2, #2
  401f2a:	601a      	str	r2, [r3, #0]

	while (!(p_twihs->TWIHS_SR & TWIHS_SR_TXCOMP)) {
  401f2c:	e000      	b.n	401f30 <twihs_master_write+0xc0>
		}

		if (status & TWIHS_SR_TXRDY) {
			break;
		}
	}
  401f2e:	e7ea      	b.n	401f06 <twihs_master_write+0x96>

	p_twihs->TWIHS_CR = TWIHS_CR_STOP;

	while (!(p_twihs->TWIHS_SR & TWIHS_SR_TXCOMP)) {
  401f30:	687b      	ldr	r3, [r7, #4]
  401f32:	6a1b      	ldr	r3, [r3, #32]
  401f34:	f003 0301 	and.w	r3, r3, #1
  401f38:	2b00      	cmp	r3, #0
  401f3a:	d0f9      	beq.n	401f30 <twihs_master_write+0xc0>
	}

	return TWIHS_SUCCESS;
  401f3c:	2300      	movs	r3, #0
}
  401f3e:	4618      	mov	r0, r3
  401f40:	3718      	adds	r7, #24
  401f42:	46bd      	mov	sp, r7
  401f44:	bd80      	pop	{r7, pc}
  401f46:	bf00      	nop
  401f48:	00401d2d 	.word	0x00401d2d

00401f4c <twihs_reset>:
 * \brief Reset TWIHS.
 *
 * \param p_twihs Pointer to a TWIHS instance.
 */
void twihs_reset(Twihs *p_twihs)
{
  401f4c:	b480      	push	{r7}
  401f4e:	b083      	sub	sp, #12
  401f50:	af00      	add	r7, sp, #0
  401f52:	6078      	str	r0, [r7, #4]
	/* Set SWRST bit to reset TWIHS peripheral */
	p_twihs->TWIHS_CR = TWIHS_CR_SWRST;
  401f54:	687b      	ldr	r3, [r7, #4]
  401f56:	2280      	movs	r2, #128	; 0x80
  401f58:	601a      	str	r2, [r3, #0]
	p_twihs->TWIHS_RHR;
  401f5a:	687b      	ldr	r3, [r7, #4]
  401f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
  401f5e:	370c      	adds	r7, #12
  401f60:	46bd      	mov	sp, r7
  401f62:	f85d 7b04 	ldr.w	r7, [sp], #4
  401f66:	4770      	bx	lr

00401f68 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
  401f68:	b480      	push	{r7}
  401f6a:	b085      	sub	sp, #20
  401f6c:	af00      	add	r7, sp, #0
  401f6e:	6078      	str	r0, [r7, #4]
  401f70:	6039      	str	r1, [r7, #0]
	uint32_t cd = 0;
  401f72:	2300      	movs	r3, #0
  401f74:	60fb      	str	r3, [r7, #12]

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
  401f76:	687b      	ldr	r3, [r7, #4]
  401f78:	22ac      	movs	r2, #172	; 0xac
  401f7a:	601a      	str	r2, [r3, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
  401f7c:	683b      	ldr	r3, [r7, #0]
  401f7e:	681a      	ldr	r2, [r3, #0]
  401f80:	683b      	ldr	r3, [r7, #0]
  401f82:	685b      	ldr	r3, [r3, #4]
  401f84:	fbb2 f3f3 	udiv	r3, r2, r3
  401f88:	091b      	lsrs	r3, r3, #4
  401f8a:	60fb      	str	r3, [r7, #12]
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
  401f8c:	68fb      	ldr	r3, [r7, #12]
  401f8e:	2b00      	cmp	r3, #0
  401f90:	d003      	beq.n	401f9a <uart_init+0x32>
  401f92:	68fb      	ldr	r3, [r7, #12]
  401f94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
  401f98:	d301      	bcc.n	401f9e <uart_init+0x36>
		return 1;
  401f9a:	2301      	movs	r3, #1
  401f9c:	e00a      	b.n	401fb4 <uart_init+0x4c>

	p_uart->UART_BRGR = cd;
  401f9e:	687b      	ldr	r3, [r7, #4]
  401fa0:	68fa      	ldr	r2, [r7, #12]
  401fa2:	621a      	str	r2, [r3, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
  401fa4:	683b      	ldr	r3, [r7, #0]
  401fa6:	689a      	ldr	r2, [r3, #8]
  401fa8:	687b      	ldr	r3, [r7, #4]
  401faa:	605a      	str	r2, [r3, #4]
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
  401fac:	687b      	ldr	r3, [r7, #4]
  401fae:	2250      	movs	r2, #80	; 0x50
  401fb0:	601a      	str	r2, [r3, #0]

	return 0;
  401fb2:	2300      	movs	r3, #0
}
  401fb4:	4618      	mov	r0, r3
  401fb6:	3714      	adds	r7, #20
  401fb8:	46bd      	mov	sp, r7
  401fba:	f85d 7b04 	ldr.w	r7, [sp], #4
  401fbe:	4770      	bx	lr

00401fc0 <uart_write>:
 *
 * \retval 0 Success.
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
  401fc0:	b480      	push	{r7}
  401fc2:	b083      	sub	sp, #12
  401fc4:	af00      	add	r7, sp, #0
  401fc6:	6078      	str	r0, [r7, #4]
  401fc8:	460b      	mov	r3, r1
  401fca:	70fb      	strb	r3, [r7, #3]
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  401fcc:	687b      	ldr	r3, [r7, #4]
  401fce:	695b      	ldr	r3, [r3, #20]
  401fd0:	f003 0302 	and.w	r3, r3, #2
  401fd4:	2b00      	cmp	r3, #0
  401fd6:	d101      	bne.n	401fdc <uart_write+0x1c>
		return 1;
  401fd8:	2301      	movs	r3, #1
  401fda:	e003      	b.n	401fe4 <uart_write+0x24>

	/* Send character */
	p_uart->UART_THR = uc_data;
  401fdc:	78fa      	ldrb	r2, [r7, #3]
  401fde:	687b      	ldr	r3, [r7, #4]
  401fe0:	61da      	str	r2, [r3, #28]
	return 0;
  401fe2:	2300      	movs	r3, #0
}
  401fe4:	4618      	mov	r0, r3
  401fe6:	370c      	adds	r7, #12
  401fe8:	46bd      	mov	sp, r7
  401fea:	f85d 7b04 	ldr.w	r7, [sp], #4
  401fee:	4770      	bx	lr

00401ff0 <uart_read>:
 *
 * \retval 0 Success.
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
  401ff0:	b480      	push	{r7}
  401ff2:	b083      	sub	sp, #12
  401ff4:	af00      	add	r7, sp, #0
  401ff6:	6078      	str	r0, [r7, #4]
  401ff8:	6039      	str	r1, [r7, #0]
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  401ffa:	687b      	ldr	r3, [r7, #4]
  401ffc:	695b      	ldr	r3, [r3, #20]
  401ffe:	f003 0301 	and.w	r3, r3, #1
  402002:	2b00      	cmp	r3, #0
  402004:	d101      	bne.n	40200a <uart_read+0x1a>
		return 1;
  402006:	2301      	movs	r3, #1
  402008:	e005      	b.n	402016 <uart_read+0x26>

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  40200a:	687b      	ldr	r3, [r7, #4]
  40200c:	699b      	ldr	r3, [r3, #24]
  40200e:	b2da      	uxtb	r2, r3
  402010:	683b      	ldr	r3, [r7, #0]
  402012:	701a      	strb	r2, [r3, #0]
	return 0;
  402014:	2300      	movs	r3, #0
}
  402016:	4618      	mov	r0, r3
  402018:	370c      	adds	r7, #12
  40201a:	46bd      	mov	sp, r7
  40201c:	f85d 7b04 	ldr.w	r7, [sp], #4
  402020:	4770      	bx	lr
  402022:	bf00      	nop

00402024 <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  402024:	b480      	push	{r7}
  402026:	b089      	sub	sp, #36	; 0x24
  402028:	af00      	add	r7, sp, #0
  40202a:	60f8      	str	r0, [r7, #12]
  40202c:	60b9      	str	r1, [r7, #8]
  40202e:	607a      	str	r2, [r7, #4]
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  402030:	68bb      	ldr	r3, [r7, #8]
  402032:	011a      	lsls	r2, r3, #4
  402034:	687b      	ldr	r3, [r7, #4]
  402036:	429a      	cmp	r2, r3
  402038:	d802      	bhi.n	402040 <usart_set_async_baudrate+0x1c>
		over = HIGH_FRQ_SAMPLE_DIV;
  40203a:	2310      	movs	r3, #16
  40203c:	61fb      	str	r3, [r7, #28]
  40203e:	e001      	b.n	402044 <usart_set_async_baudrate+0x20>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
  402040:	2308      	movs	r3, #8
  402042:	61fb      	str	r3, [r7, #28]
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  402044:	687b      	ldr	r3, [r7, #4]
  402046:	00da      	lsls	r2, r3, #3
  402048:	69fb      	ldr	r3, [r7, #28]
  40204a:	68b9      	ldr	r1, [r7, #8]
  40204c:	fb01 f303 	mul.w	r3, r1, r3
  402050:	085b      	lsrs	r3, r3, #1
  402052:	441a      	add	r2, r3
  402054:	69fb      	ldr	r3, [r7, #28]
  402056:	68b9      	ldr	r1, [r7, #8]
  402058:	fb01 f303 	mul.w	r3, r1, r3
  40205c:	fbb2 f3f3 	udiv	r3, r2, r3
  402060:	61bb      	str	r3, [r7, #24]
	cd = cd_fp >> 3;
  402062:	69bb      	ldr	r3, [r7, #24]
  402064:	08db      	lsrs	r3, r3, #3
  402066:	617b      	str	r3, [r7, #20]
	fp = cd_fp & 0x07;
  402068:	69bb      	ldr	r3, [r7, #24]
  40206a:	f003 0307 	and.w	r3, r3, #7
  40206e:	613b      	str	r3, [r7, #16]
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  402070:	697b      	ldr	r3, [r7, #20]
  402072:	2b00      	cmp	r3, #0
  402074:	d003      	beq.n	40207e <usart_set_async_baudrate+0x5a>
  402076:	697b      	ldr	r3, [r7, #20]
  402078:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
  40207c:	d301      	bcc.n	402082 <usart_set_async_baudrate+0x5e>
		return 1;
  40207e:	2301      	movs	r3, #1
  402080:	e00f      	b.n	4020a2 <usart_set_async_baudrate+0x7e>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
  402082:	69fb      	ldr	r3, [r7, #28]
  402084:	2b08      	cmp	r3, #8
  402086:	d105      	bne.n	402094 <usart_set_async_baudrate+0x70>
		p_usart->US_MR |= US_MR_OVER;
  402088:	68fb      	ldr	r3, [r7, #12]
  40208a:	685b      	ldr	r3, [r3, #4]
  40208c:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
  402090:	68fb      	ldr	r3, [r7, #12]
  402092:	605a      	str	r2, [r3, #4]
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  402094:	693b      	ldr	r3, [r7, #16]
  402096:	041a      	lsls	r2, r3, #16
  402098:	697b      	ldr	r3, [r7, #20]
  40209a:	431a      	orrs	r2, r3
  40209c:	68fb      	ldr	r3, [r7, #12]
  40209e:	621a      	str	r2, [r3, #32]

	return 0;
  4020a0:	2300      	movs	r3, #0
}
  4020a2:	4618      	mov	r0, r3
  4020a4:	3724      	adds	r7, #36	; 0x24
  4020a6:	46bd      	mov	sp, r7
  4020a8:	f85d 7b04 	ldr.w	r7, [sp], #4
  4020ac:	4770      	bx	lr
  4020ae:	bf00      	nop

004020b0 <usart_reset>:
 * \brief Reset the USART and disable TX and RX.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset(Usart *p_usart)
{
  4020b0:	b580      	push	{r7, lr}
  4020b2:	b082      	sub	sp, #8
  4020b4:	af00      	add	r7, sp, #0
  4020b6:	6078      	str	r0, [r7, #4]
	/* Disable the Write Protect. */
	usart_disable_writeprotect(p_usart);
  4020b8:	6878      	ldr	r0, [r7, #4]
  4020ba:	4b0d      	ldr	r3, [pc, #52]	; (4020f0 <usart_reset+0x40>)
  4020bc:	4798      	blx	r3

	/* Reset registers that could cause unpredictable behavior after reset. */
	p_usart->US_MR = 0;
  4020be:	687b      	ldr	r3, [r7, #4]
  4020c0:	2200      	movs	r2, #0
  4020c2:	605a      	str	r2, [r3, #4]
	p_usart->US_RTOR = 0;
  4020c4:	687b      	ldr	r3, [r7, #4]
  4020c6:	2200      	movs	r2, #0
  4020c8:	625a      	str	r2, [r3, #36]	; 0x24
	p_usart->US_TTGR = 0;
  4020ca:	687b      	ldr	r3, [r7, #4]
  4020cc:	2200      	movs	r2, #0
  4020ce:	629a      	str	r2, [r3, #40]	; 0x28

	/* Disable TX and RX. */
	usart_reset_tx(p_usart);
  4020d0:	6878      	ldr	r0, [r7, #4]
  4020d2:	4b08      	ldr	r3, [pc, #32]	; (4020f4 <usart_reset+0x44>)
  4020d4:	4798      	blx	r3
	usart_reset_rx(p_usart);
  4020d6:	6878      	ldr	r0, [r7, #4]
  4020d8:	4b07      	ldr	r3, [pc, #28]	; (4020f8 <usart_reset+0x48>)
  4020da:	4798      	blx	r3
	/* Reset status bits. */
	usart_reset_status(p_usart);
  4020dc:	6878      	ldr	r0, [r7, #4]
  4020de:	4b07      	ldr	r3, [pc, #28]	; (4020fc <usart_reset+0x4c>)
  4020e0:	4798      	blx	r3
	/* Turn off RTS and DTR if exist. */
	usart_drive_RTS_pin_high(p_usart);
  4020e2:	6878      	ldr	r0, [r7, #4]
  4020e4:	4b06      	ldr	r3, [pc, #24]	; (402100 <usart_reset+0x50>)
  4020e6:	4798      	blx	r3
#if (SAM3S || SAM4S || SAM3U || SAM4L || SAM4E)
	usart_drive_DTR_pin_high(p_usart);
#endif
}
  4020e8:	3708      	adds	r7, #8
  4020ea:	46bd      	mov	sp, r7
  4020ec:	bd80      	pop	{r7, pc}
  4020ee:	bf00      	nop
  4020f0:	00402345 	.word	0x00402345
  4020f4:	004021a1 	.word	0x004021a1
  4020f8:	004021ed 	.word	0x004021ed
  4020fc:	00402255 	.word	0x00402255
  402100:	00402271 	.word	0x00402271

00402104 <usart_init_rs232>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_rs232(Usart *p_usart,
		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
{
  402104:	b580      	push	{r7, lr}
  402106:	b084      	sub	sp, #16
  402108:	af00      	add	r7, sp, #0
  40210a:	60f8      	str	r0, [r7, #12]
  40210c:	60b9      	str	r1, [r7, #8]
  40210e:	607a      	str	r2, [r7, #4]
	static uint32_t ul_reg_val;

	/* Reset the USART and shut down TX and RX. */
	usart_reset(p_usart);
  402110:	68f8      	ldr	r0, [r7, #12]
  402112:	4b1a      	ldr	r3, [pc, #104]	; (40217c <usart_init_rs232+0x78>)
  402114:	4798      	blx	r3

	ul_reg_val = 0;
  402116:	4b1a      	ldr	r3, [pc, #104]	; (402180 <usart_init_rs232+0x7c>)
  402118:	2200      	movs	r2, #0
  40211a:	601a      	str	r2, [r3, #0]
	/* Check whether the input values are legal. */
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  40211c:	68bb      	ldr	r3, [r7, #8]
  40211e:	2b00      	cmp	r3, #0
  402120:	d009      	beq.n	402136 <usart_init_rs232+0x32>
  402122:	68bb      	ldr	r3, [r7, #8]
  402124:	681b      	ldr	r3, [r3, #0]
  402126:	68f8      	ldr	r0, [r7, #12]
  402128:	4619      	mov	r1, r3
  40212a:	687a      	ldr	r2, [r7, #4]
  40212c:	4b15      	ldr	r3, [pc, #84]	; (402184 <usart_init_rs232+0x80>)
  40212e:	4798      	blx	r3
  402130:	4603      	mov	r3, r0
  402132:	2b00      	cmp	r3, #0
  402134:	d001      	beq.n	40213a <usart_init_rs232+0x36>
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
  402136:	2301      	movs	r3, #1
  402138:	e01b      	b.n	402172 <usart_init_rs232+0x6e>
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  40213a:	68bb      	ldr	r3, [r7, #8]
  40213c:	685a      	ldr	r2, [r3, #4]
  40213e:	68bb      	ldr	r3, [r7, #8]
  402140:	689b      	ldr	r3, [r3, #8]
  402142:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  402144:	68bb      	ldr	r3, [r7, #8]
  402146:	691b      	ldr	r3, [r3, #16]
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  402148:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  40214a:	68bb      	ldr	r3, [r7, #8]
  40214c:	68db      	ldr	r3, [r3, #12]
  40214e:	431a      	orrs	r2, r3
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  402150:	4b0b      	ldr	r3, [pc, #44]	; (402180 <usart_init_rs232+0x7c>)
  402152:	681b      	ldr	r3, [r3, #0]
  402154:	4313      	orrs	r3, r2
  402156:	4a0a      	ldr	r2, [pc, #40]	; (402180 <usart_init_rs232+0x7c>)
  402158:	6013      	str	r3, [r2, #0]
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;

	/* Configure the USART mode as normal mode. */
	ul_reg_val |= US_MR_USART_MODE_NORMAL;
  40215a:	4b09      	ldr	r3, [pc, #36]	; (402180 <usart_init_rs232+0x7c>)
  40215c:	681b      	ldr	r3, [r3, #0]
  40215e:	4a08      	ldr	r2, [pc, #32]	; (402180 <usart_init_rs232+0x7c>)
  402160:	6013      	str	r3, [r2, #0]

	p_usart->US_MR |= ul_reg_val;
  402162:	68fb      	ldr	r3, [r7, #12]
  402164:	685a      	ldr	r2, [r3, #4]
  402166:	4b06      	ldr	r3, [pc, #24]	; (402180 <usart_init_rs232+0x7c>)
  402168:	681b      	ldr	r3, [r3, #0]
  40216a:	431a      	orrs	r2, r3
  40216c:	68fb      	ldr	r3, [r7, #12]
  40216e:	605a      	str	r2, [r3, #4]

	return 0;
  402170:	2300      	movs	r3, #0
}
  402172:	4618      	mov	r0, r3
  402174:	3710      	adds	r7, #16
  402176:	46bd      	mov	sp, r7
  402178:	bd80      	pop	{r7, pc}
  40217a:	bf00      	nop
  40217c:	004020b1 	.word	0x004020b1
  402180:	20400990 	.word	0x20400990
  402184:	00402025 	.word	0x00402025

00402188 <usart_enable_tx>:
 * \brief Enable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_tx(Usart *p_usart)
{
  402188:	b480      	push	{r7}
  40218a:	b083      	sub	sp, #12
  40218c:	af00      	add	r7, sp, #0
  40218e:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_TXEN;
  402190:	687b      	ldr	r3, [r7, #4]
  402192:	2240      	movs	r2, #64	; 0x40
  402194:	601a      	str	r2, [r3, #0]
}
  402196:	370c      	adds	r7, #12
  402198:	46bd      	mov	sp, r7
  40219a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40219e:	4770      	bx	lr

004021a0 <usart_reset_tx>:
 * \brief Immediately stop and disable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_tx(Usart *p_usart)
{
  4021a0:	b480      	push	{r7}
  4021a2:	b083      	sub	sp, #12
  4021a4:	af00      	add	r7, sp, #0
  4021a6:	6078      	str	r0, [r7, #4]
	/* Reset transmitter */
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  4021a8:	687b      	ldr	r3, [r7, #4]
  4021aa:	2288      	movs	r2, #136	; 0x88
  4021ac:	601a      	str	r2, [r3, #0]
}
  4021ae:	370c      	adds	r7, #12
  4021b0:	46bd      	mov	sp, r7
  4021b2:	f85d 7b04 	ldr.w	r7, [sp], #4
  4021b6:	4770      	bx	lr

004021b8 <usart_set_tx_timeguard>:
 *
 * \param p_usart Pointer to a USART instance.
 * \param timeguard The value of transmit timeguard.
 */
void usart_set_tx_timeguard(Usart *p_usart, uint32_t timeguard)
{
  4021b8:	b480      	push	{r7}
  4021ba:	b083      	sub	sp, #12
  4021bc:	af00      	add	r7, sp, #0
  4021be:	6078      	str	r0, [r7, #4]
  4021c0:	6039      	str	r1, [r7, #0]
	p_usart->US_TTGR = timeguard;
  4021c2:	687b      	ldr	r3, [r7, #4]
  4021c4:	683a      	ldr	r2, [r7, #0]
  4021c6:	629a      	str	r2, [r3, #40]	; 0x28
}
  4021c8:	370c      	adds	r7, #12
  4021ca:	46bd      	mov	sp, r7
  4021cc:	f85d 7b04 	ldr.w	r7, [sp], #4
  4021d0:	4770      	bx	lr
  4021d2:	bf00      	nop

004021d4 <usart_enable_rx>:
 * \brief Enable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_rx(Usart *p_usart)
{
  4021d4:	b480      	push	{r7}
  4021d6:	b083      	sub	sp, #12
  4021d8:	af00      	add	r7, sp, #0
  4021da:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RXEN;
  4021dc:	687b      	ldr	r3, [r7, #4]
  4021de:	2210      	movs	r2, #16
  4021e0:	601a      	str	r2, [r3, #0]
}
  4021e2:	370c      	adds	r7, #12
  4021e4:	46bd      	mov	sp, r7
  4021e6:	f85d 7b04 	ldr.w	r7, [sp], #4
  4021ea:	4770      	bx	lr

004021ec <usart_reset_rx>:
 * \brief Immediately stop and disable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_rx(Usart *p_usart)
{
  4021ec:	b480      	push	{r7}
  4021ee:	b083      	sub	sp, #12
  4021f0:	af00      	add	r7, sp, #0
  4021f2:	6078      	str	r0, [r7, #4]
	/* Reset Receiver */
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  4021f4:	687b      	ldr	r3, [r7, #4]
  4021f6:	2224      	movs	r2, #36	; 0x24
  4021f8:	601a      	str	r2, [r3, #0]
}
  4021fa:	370c      	adds	r7, #12
  4021fc:	46bd      	mov	sp, r7
  4021fe:	f85d 7b04 	ldr.w	r7, [sp], #4
  402202:	4770      	bx	lr

00402204 <usart_enable_interrupt>:
 *
 * \param p_usart Pointer to a USART peripheral.
 * \param ul_sources Interrupt sources bit map.
 */
void usart_enable_interrupt(Usart *p_usart, uint32_t ul_sources)
{
  402204:	b480      	push	{r7}
  402206:	b083      	sub	sp, #12
  402208:	af00      	add	r7, sp, #0
  40220a:	6078      	str	r0, [r7, #4]
  40220c:	6039      	str	r1, [r7, #0]
	p_usart->US_IER = ul_sources;
  40220e:	687b      	ldr	r3, [r7, #4]
  402210:	683a      	ldr	r2, [r7, #0]
  402212:	609a      	str	r2, [r3, #8]
}
  402214:	370c      	adds	r7, #12
  402216:	46bd      	mov	sp, r7
  402218:	f85d 7b04 	ldr.w	r7, [sp], #4
  40221c:	4770      	bx	lr
  40221e:	bf00      	nop

00402220 <usart_disable_interrupt>:
 *
 * \param p_usart Pointer to a USART peripheral.
 * \param ul_sources Interrupt sources bit map.
 */
void usart_disable_interrupt(Usart *p_usart, uint32_t ul_sources)
{
  402220:	b480      	push	{r7}
  402222:	b083      	sub	sp, #12
  402224:	af00      	add	r7, sp, #0
  402226:	6078      	str	r0, [r7, #4]
  402228:	6039      	str	r1, [r7, #0]
	p_usart->US_IDR = ul_sources;
  40222a:	687b      	ldr	r3, [r7, #4]
  40222c:	683a      	ldr	r2, [r7, #0]
  40222e:	60da      	str	r2, [r3, #12]
}
  402230:	370c      	adds	r7, #12
  402232:	46bd      	mov	sp, r7
  402234:	f85d 7b04 	ldr.w	r7, [sp], #4
  402238:	4770      	bx	lr
  40223a:	bf00      	nop

0040223c <usart_get_status>:
 * \param p_usart Pointer to a USART instance.
 *
 * \return The current USART status.
 */
uint32_t usart_get_status(Usart *p_usart)
{
  40223c:	b480      	push	{r7}
  40223e:	b083      	sub	sp, #12
  402240:	af00      	add	r7, sp, #0
  402242:	6078      	str	r0, [r7, #4]
	return p_usart->US_CSR;
  402244:	687b      	ldr	r3, [r7, #4]
  402246:	695b      	ldr	r3, [r3, #20]
}
  402248:	4618      	mov	r0, r3
  40224a:	370c      	adds	r7, #12
  40224c:	46bd      	mov	sp, r7
  40224e:	f85d 7b04 	ldr.w	r7, [sp], #4
  402252:	4770      	bx	lr

00402254 <usart_reset_status>:
 * \brief Reset status bits (PARE, OVER, MANERR, UNRE and PXBRK in US_CSR).
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_status(Usart *p_usart)
{
  402254:	b480      	push	{r7}
  402256:	b083      	sub	sp, #12
  402258:	af00      	add	r7, sp, #0
  40225a:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RSTSTA;
  40225c:	687b      	ldr	r3, [r7, #4]
  40225e:	f44f 7280 	mov.w	r2, #256	; 0x100
  402262:	601a      	str	r2, [r3, #0]
}
  402264:	370c      	adds	r7, #12
  402266:	46bd      	mov	sp, r7
  402268:	f85d 7b04 	ldr.w	r7, [sp], #4
  40226c:	4770      	bx	lr
  40226e:	bf00      	nop

00402270 <usart_drive_RTS_pin_high>:
 * \brief Drive the pin RTS to 1.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_RTS_pin_high(Usart *p_usart)
{
  402270:	b480      	push	{r7}
  402272:	b083      	sub	sp, #12
  402274:	af00      	add	r7, sp, #0
  402276:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RTSDIS;
  402278:	687b      	ldr	r3, [r7, #4]
  40227a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  40227e:	601a      	str	r2, [r3, #0]
}
  402280:	370c      	adds	r7, #12
  402282:	46bd      	mov	sp, r7
  402284:	f85d 7b04 	ldr.w	r7, [sp], #4
  402288:	4770      	bx	lr
  40228a:	bf00      	nop

0040228c <usart_is_tx_empty>:
 *
 * \retval 1 Transmitter is empty.
 * \retval 0 Transmitter is not empty.
 */
uint32_t usart_is_tx_empty(Usart *p_usart)
{
  40228c:	b480      	push	{r7}
  40228e:	b083      	sub	sp, #12
  402290:	af00      	add	r7, sp, #0
  402292:	6078      	str	r0, [r7, #4]
	return (p_usart->US_CSR & US_CSR_TXEMPTY) > 0;
  402294:	687b      	ldr	r3, [r7, #4]
  402296:	695b      	ldr	r3, [r3, #20]
  402298:	f403 7300 	and.w	r3, r3, #512	; 0x200
  40229c:	2b00      	cmp	r3, #0
  40229e:	bf14      	ite	ne
  4022a0:	2301      	movne	r3, #1
  4022a2:	2300      	moveq	r3, #0
  4022a4:	b2db      	uxtb	r3, r3
}
  4022a6:	4618      	mov	r0, r3
  4022a8:	370c      	adds	r7, #12
  4022aa:	46bd      	mov	sp, r7
  4022ac:	f85d 7b04 	ldr.w	r7, [sp], #4
  4022b0:	4770      	bx	lr
  4022b2:	bf00      	nop

004022b4 <usart_is_rx_ready>:
 *
 * \retval 1 Some data has been received.
 * \retval 0 No data has been received.
 */
uint32_t usart_is_rx_ready(Usart *p_usart)
{
  4022b4:	b480      	push	{r7}
  4022b6:	b083      	sub	sp, #12
  4022b8:	af00      	add	r7, sp, #0
  4022ba:	6078      	str	r0, [r7, #4]
	return (p_usart->US_CSR & US_CSR_RXRDY) > 0;
  4022bc:	687b      	ldr	r3, [r7, #4]
  4022be:	695b      	ldr	r3, [r3, #20]
  4022c0:	f003 0301 	and.w	r3, r3, #1
  4022c4:	2b00      	cmp	r3, #0
  4022c6:	bf14      	ite	ne
  4022c8:	2301      	movne	r3, #1
  4022ca:	2300      	moveq	r3, #0
  4022cc:	b2db      	uxtb	r3, r3
}
  4022ce:	4618      	mov	r0, r3
  4022d0:	370c      	adds	r7, #12
  4022d2:	46bd      	mov	sp, r7
  4022d4:	f85d 7b04 	ldr.w	r7, [sp], #4
  4022d8:	4770      	bx	lr
  4022da:	bf00      	nop

004022dc <usart_write>:
 *
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
  4022dc:	b480      	push	{r7}
  4022de:	b083      	sub	sp, #12
  4022e0:	af00      	add	r7, sp, #0
  4022e2:	6078      	str	r0, [r7, #4]
  4022e4:	6039      	str	r1, [r7, #0]
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  4022e6:	687b      	ldr	r3, [r7, #4]
  4022e8:	695b      	ldr	r3, [r3, #20]
  4022ea:	f003 0302 	and.w	r3, r3, #2
  4022ee:	2b00      	cmp	r3, #0
  4022f0:	d101      	bne.n	4022f6 <usart_write+0x1a>
		return 1;
  4022f2:	2301      	movs	r3, #1
  4022f4:	e005      	b.n	402302 <usart_write+0x26>
	}

	p_usart->US_THR = US_THR_TXCHR(c);
  4022f6:	683b      	ldr	r3, [r7, #0]
  4022f8:	f3c3 0208 	ubfx	r2, r3, #0, #9
  4022fc:	687b      	ldr	r3, [r7, #4]
  4022fe:	61da      	str	r2, [r3, #28]
	return 0;
  402300:	2300      	movs	r3, #0
}
  402302:	4618      	mov	r0, r3
  402304:	370c      	adds	r7, #12
  402306:	46bd      	mov	sp, r7
  402308:	f85d 7b04 	ldr.w	r7, [sp], #4
  40230c:	4770      	bx	lr
  40230e:	bf00      	nop

00402310 <usart_read>:
 *
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
  402310:	b480      	push	{r7}
  402312:	b083      	sub	sp, #12
  402314:	af00      	add	r7, sp, #0
  402316:	6078      	str	r0, [r7, #4]
  402318:	6039      	str	r1, [r7, #0]
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  40231a:	687b      	ldr	r3, [r7, #4]
  40231c:	695b      	ldr	r3, [r3, #20]
  40231e:	f003 0301 	and.w	r3, r3, #1
  402322:	2b00      	cmp	r3, #0
  402324:	d101      	bne.n	40232a <usart_read+0x1a>
		return 1;
  402326:	2301      	movs	r3, #1
  402328:	e006      	b.n	402338 <usart_read+0x28>
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  40232a:	687b      	ldr	r3, [r7, #4]
  40232c:	699b      	ldr	r3, [r3, #24]
  40232e:	f3c3 0208 	ubfx	r2, r3, #0, #9
  402332:	683b      	ldr	r3, [r7, #0]
  402334:	601a      	str	r2, [r3, #0]

	return 0;
  402336:	2300      	movs	r3, #0
}
  402338:	4618      	mov	r0, r3
  40233a:	370c      	adds	r7, #12
  40233c:	46bd      	mov	sp, r7
  40233e:	f85d 7b04 	ldr.w	r7, [sp], #4
  402342:	4770      	bx	lr

00402344 <usart_disable_writeprotect>:
 * \brief Disable write protect of USART registers.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
  402344:	b480      	push	{r7}
  402346:	b083      	sub	sp, #12
  402348:	af00      	add	r7, sp, #0
  40234a:	6078      	str	r0, [r7, #4]
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  40234c:	687b      	ldr	r3, [r7, #4]
  40234e:	4a04      	ldr	r2, [pc, #16]	; (402360 <usart_disable_writeprotect+0x1c>)
  402350:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
}
  402354:	370c      	adds	r7, #12
  402356:	46bd      	mov	sp, r7
  402358:	f85d 7b04 	ldr.w	r7, [sp], #4
  40235c:	4770      	bx	lr
  40235e:	bf00      	nop
  402360:	55534100 	.word	0x55534100

00402364 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  402364:	b580      	push	{r7, lr}
  402366:	b082      	sub	sp, #8
  402368:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
  40236a:	4b16      	ldr	r3, [pc, #88]	; (4023c4 <Reset_Handler+0x60>)
  40236c:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
  40236e:	4b16      	ldr	r3, [pc, #88]	; (4023c8 <Reset_Handler+0x64>)
  402370:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
  402372:	687a      	ldr	r2, [r7, #4]
  402374:	683b      	ldr	r3, [r7, #0]
  402376:	429a      	cmp	r2, r3
  402378:	d00c      	beq.n	402394 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
  40237a:	e007      	b.n	40238c <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
  40237c:	683b      	ldr	r3, [r7, #0]
  40237e:	1d1a      	adds	r2, r3, #4
  402380:	603a      	str	r2, [r7, #0]
  402382:	687a      	ldr	r2, [r7, #4]
  402384:	1d11      	adds	r1, r2, #4
  402386:	6079      	str	r1, [r7, #4]
  402388:	6812      	ldr	r2, [r2, #0]
  40238a:	601a      	str	r2, [r3, #0]
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
  40238c:	683b      	ldr	r3, [r7, #0]
  40238e:	4a0f      	ldr	r2, [pc, #60]	; (4023cc <Reset_Handler+0x68>)
  402390:	4293      	cmp	r3, r2
  402392:	d3f3      	bcc.n	40237c <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
  402394:	4b0e      	ldr	r3, [pc, #56]	; (4023d0 <Reset_Handler+0x6c>)
  402396:	603b      	str	r3, [r7, #0]
  402398:	e004      	b.n	4023a4 <Reset_Handler+0x40>
                *pDest++ = 0;
  40239a:	683b      	ldr	r3, [r7, #0]
  40239c:	1d1a      	adds	r2, r3, #4
  40239e:	603a      	str	r2, [r7, #0]
  4023a0:	2200      	movs	r2, #0
  4023a2:	601a      	str	r2, [r3, #0]
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
  4023a4:	683b      	ldr	r3, [r7, #0]
  4023a6:	4a0b      	ldr	r2, [pc, #44]	; (4023d4 <Reset_Handler+0x70>)
  4023a8:	4293      	cmp	r3, r2
  4023aa:	d3f6      	bcc.n	40239a <Reset_Handler+0x36>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
  4023ac:	4b0a      	ldr	r3, [pc, #40]	; (4023d8 <Reset_Handler+0x74>)
  4023ae:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  4023b0:	4a0a      	ldr	r2, [pc, #40]	; (4023dc <Reset_Handler+0x78>)
  4023b2:	687b      	ldr	r3, [r7, #4]
  4023b4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  4023b8:	6093      	str	r3, [r2, #8]

        /* Initialize the C library */
        __libc_init_array();
  4023ba:	4b09      	ldr	r3, [pc, #36]	; (4023e0 <Reset_Handler+0x7c>)
  4023bc:	4798      	blx	r3

        /* Branch to main function */
        main();
  4023be:	4b09      	ldr	r3, [pc, #36]	; (4023e4 <Reset_Handler+0x80>)
  4023c0:	4798      	blx	r3

        /* Infinite loop */
        while (1);
  4023c2:	e7fe      	b.n	4023c2 <Reset_Handler+0x5e>
  4023c4:	0040ad14 	.word	0x0040ad14
  4023c8:	20400000 	.word	0x20400000
  4023cc:	20400904 	.word	0x20400904
  4023d0:	20400904 	.word	0x20400904
  4023d4:	20401300 	.word	0x20401300
  4023d8:	00400000 	.word	0x00400000
  4023dc:	e000ed00 	.word	0xe000ed00
  4023e0:	0040505d 	.word	0x0040505d
  4023e4:	00404269 	.word	0x00404269

004023e8 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  4023e8:	b480      	push	{r7}
  4023ea:	af00      	add	r7, sp, #0
        while (1) {
        }
  4023ec:	e7fe      	b.n	4023ec <Dummy_Handler+0x4>
  4023ee:	bf00      	nop

004023f0 <SystemCoreClockUpdate>:

  SystemCoreClock = CHIP_FREQ_CPU_MAX;
}

void SystemCoreClockUpdate( void )
{
  4023f0:	b480      	push	{r7}
  4023f2:	af00      	add	r7, sp, #0
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  4023f4:	4b51      	ldr	r3, [pc, #324]	; (40253c <SystemCoreClockUpdate+0x14c>)
  4023f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4023f8:	f003 0303 	and.w	r3, r3, #3
  4023fc:	2b01      	cmp	r3, #1
  4023fe:	d014      	beq.n	40242a <SystemCoreClockUpdate+0x3a>
  402400:	2b01      	cmp	r3, #1
  402402:	d302      	bcc.n	40240a <SystemCoreClockUpdate+0x1a>
  402404:	2b02      	cmp	r3, #2
  402406:	d038      	beq.n	40247a <SystemCoreClockUpdate+0x8a>
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
      }
    break;

    default:
    break;
  402408:	e07b      	b.n	402502 <SystemCoreClockUpdate+0x112>
{
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  {
    case PMC_MCKR_CSS_SLOW_CLK: /* Slow clock */
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  40240a:	4b4d      	ldr	r3, [pc, #308]	; (402540 <SystemCoreClockUpdate+0x150>)
  40240c:	695b      	ldr	r3, [r3, #20]
  40240e:	f003 0380 	and.w	r3, r3, #128	; 0x80
  402412:	2b00      	cmp	r3, #0
  402414:	d004      	beq.n	402420 <SystemCoreClockUpdate+0x30>
      {
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  402416:	4b4b      	ldr	r3, [pc, #300]	; (402544 <SystemCoreClockUpdate+0x154>)
  402418:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  40241c:	601a      	str	r2, [r3, #0]
      }
      else
      {
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
      }
    break;
  40241e:	e070      	b.n	402502 <SystemCoreClockUpdate+0x112>
      {
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
      }
      else
      {
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  402420:	4b48      	ldr	r3, [pc, #288]	; (402544 <SystemCoreClockUpdate+0x154>)
  402422:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
  402426:	601a      	str	r2, [r3, #0]
      }
    break;
  402428:	e06b      	b.n	402502 <SystemCoreClockUpdate+0x112>

    case PMC_MCKR_CSS_MAIN_CLK: /* Main clock */
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  40242a:	4b44      	ldr	r3, [pc, #272]	; (40253c <SystemCoreClockUpdate+0x14c>)
  40242c:	6a1b      	ldr	r3, [r3, #32]
  40242e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  402432:	2b00      	cmp	r3, #0
  402434:	d003      	beq.n	40243e <SystemCoreClockUpdate+0x4e>
      {
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  402436:	4b43      	ldr	r3, [pc, #268]	; (402544 <SystemCoreClockUpdate+0x154>)
  402438:	4a43      	ldr	r2, [pc, #268]	; (402548 <SystemCoreClockUpdate+0x158>)
  40243a:	601a      	str	r2, [r3, #0]
  40243c:	e01c      	b.n	402478 <SystemCoreClockUpdate+0x88>
      }
      else
      {
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  40243e:	4b41      	ldr	r3, [pc, #260]	; (402544 <SystemCoreClockUpdate+0x154>)
  402440:	4a42      	ldr	r2, [pc, #264]	; (40254c <SystemCoreClockUpdate+0x15c>)
  402442:	601a      	str	r2, [r3, #0]

        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  402444:	4b3d      	ldr	r3, [pc, #244]	; (40253c <SystemCoreClockUpdate+0x14c>)
  402446:	6a1b      	ldr	r3, [r3, #32]
  402448:	f003 0370 	and.w	r3, r3, #112	; 0x70
  40244c:	2b10      	cmp	r3, #16
  40244e:	d004      	beq.n	40245a <SystemCoreClockUpdate+0x6a>
  402450:	2b20      	cmp	r3, #32
  402452:	d008      	beq.n	402466 <SystemCoreClockUpdate+0x76>
  402454:	2b00      	cmp	r3, #0
  402456:	d00e      	beq.n	402476 <SystemCoreClockUpdate+0x86>
          case CKGR_MOR_MOSCRCF_12_MHz:
            SystemCoreClock *= 3U;
          break;

          default:
          break;
  402458:	e00e      	b.n	402478 <SystemCoreClockUpdate+0x88>
        {
          case CKGR_MOR_MOSCRCF_4_MHz:
          break;

          case CKGR_MOR_MOSCRCF_8_MHz:
            SystemCoreClock *= 2U;
  40245a:	4b3a      	ldr	r3, [pc, #232]	; (402544 <SystemCoreClockUpdate+0x154>)
  40245c:	681b      	ldr	r3, [r3, #0]
  40245e:	005b      	lsls	r3, r3, #1
  402460:	4a38      	ldr	r2, [pc, #224]	; (402544 <SystemCoreClockUpdate+0x154>)
  402462:	6013      	str	r3, [r2, #0]
          break;
  402464:	e008      	b.n	402478 <SystemCoreClockUpdate+0x88>

          case CKGR_MOR_MOSCRCF_12_MHz:
            SystemCoreClock *= 3U;
  402466:	4b37      	ldr	r3, [pc, #220]	; (402544 <SystemCoreClockUpdate+0x154>)
  402468:	681a      	ldr	r2, [r3, #0]
  40246a:	4613      	mov	r3, r2
  40246c:	005b      	lsls	r3, r3, #1
  40246e:	4413      	add	r3, r2
  402470:	4a34      	ldr	r2, [pc, #208]	; (402544 <SystemCoreClockUpdate+0x154>)
  402472:	6013      	str	r3, [r2, #0]
          break;
  402474:	e000      	b.n	402478 <SystemCoreClockUpdate+0x88>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;

        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
        {
          case CKGR_MOR_MOSCRCF_4_MHz:
          break;
  402476:	bf00      	nop

          default:
          break;
        }
      }
    break;
  402478:	e043      	b.n	402502 <SystemCoreClockUpdate+0x112>

    case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  40247a:	4b30      	ldr	r3, [pc, #192]	; (40253c <SystemCoreClockUpdate+0x14c>)
  40247c:	6a1b      	ldr	r3, [r3, #32]
  40247e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  402482:	2b00      	cmp	r3, #0
  402484:	d003      	beq.n	40248e <SystemCoreClockUpdate+0x9e>
      {
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  402486:	4b2f      	ldr	r3, [pc, #188]	; (402544 <SystemCoreClockUpdate+0x154>)
  402488:	4a2f      	ldr	r2, [pc, #188]	; (402548 <SystemCoreClockUpdate+0x158>)
  40248a:	601a      	str	r2, [r3, #0]
  40248c:	e01c      	b.n	4024c8 <SystemCoreClockUpdate+0xd8>
      }
      else
      {
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  40248e:	4b2d      	ldr	r3, [pc, #180]	; (402544 <SystemCoreClockUpdate+0x154>)
  402490:	4a2e      	ldr	r2, [pc, #184]	; (40254c <SystemCoreClockUpdate+0x15c>)
  402492:	601a      	str	r2, [r3, #0]

        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  402494:	4b29      	ldr	r3, [pc, #164]	; (40253c <SystemCoreClockUpdate+0x14c>)
  402496:	6a1b      	ldr	r3, [r3, #32]
  402498:	f003 0370 	and.w	r3, r3, #112	; 0x70
  40249c:	2b10      	cmp	r3, #16
  40249e:	d004      	beq.n	4024aa <SystemCoreClockUpdate+0xba>
  4024a0:	2b20      	cmp	r3, #32
  4024a2:	d008      	beq.n	4024b6 <SystemCoreClockUpdate+0xc6>
  4024a4:	2b00      	cmp	r3, #0
  4024a6:	d00e      	beq.n	4024c6 <SystemCoreClockUpdate+0xd6>
          case CKGR_MOR_MOSCRCF_12_MHz:
            SystemCoreClock *= 3U;
          break;

          default:
          break;
  4024a8:	e00e      	b.n	4024c8 <SystemCoreClockUpdate+0xd8>
        {
          case CKGR_MOR_MOSCRCF_4_MHz:
          break;

          case CKGR_MOR_MOSCRCF_8_MHz:
            SystemCoreClock *= 2U;
  4024aa:	4b26      	ldr	r3, [pc, #152]	; (402544 <SystemCoreClockUpdate+0x154>)
  4024ac:	681b      	ldr	r3, [r3, #0]
  4024ae:	005b      	lsls	r3, r3, #1
  4024b0:	4a24      	ldr	r2, [pc, #144]	; (402544 <SystemCoreClockUpdate+0x154>)
  4024b2:	6013      	str	r3, [r2, #0]
          break;
  4024b4:	e008      	b.n	4024c8 <SystemCoreClockUpdate+0xd8>

          case CKGR_MOR_MOSCRCF_12_MHz:
            SystemCoreClock *= 3U;
  4024b6:	4b23      	ldr	r3, [pc, #140]	; (402544 <SystemCoreClockUpdate+0x154>)
  4024b8:	681a      	ldr	r2, [r3, #0]
  4024ba:	4613      	mov	r3, r2
  4024bc:	005b      	lsls	r3, r3, #1
  4024be:	4413      	add	r3, r2
  4024c0:	4a20      	ldr	r2, [pc, #128]	; (402544 <SystemCoreClockUpdate+0x154>)
  4024c2:	6013      	str	r3, [r2, #0]
          break;
  4024c4:	e000      	b.n	4024c8 <SystemCoreClockUpdate+0xd8>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;

        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
        {
          case CKGR_MOR_MOSCRCF_4_MHz:
          break;
  4024c6:	bf00      	nop
          default:
          break;
        }
      }

      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  4024c8:	4b1c      	ldr	r3, [pc, #112]	; (40253c <SystemCoreClockUpdate+0x14c>)
  4024ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4024cc:	f003 0303 	and.w	r3, r3, #3
  4024d0:	2b02      	cmp	r3, #2
  4024d2:	d115      	bne.n	402500 <SystemCoreClockUpdate+0x110>
      {
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  4024d4:	4b19      	ldr	r3, [pc, #100]	; (40253c <SystemCoreClockUpdate+0x14c>)
  4024d6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  4024d8:	4b1d      	ldr	r3, [pc, #116]	; (402550 <SystemCoreClockUpdate+0x160>)
  4024da:	4013      	ands	r3, r2
  4024dc:	0c1b      	lsrs	r3, r3, #16
  4024de:	3301      	adds	r3, #1
  4024e0:	4a18      	ldr	r2, [pc, #96]	; (402544 <SystemCoreClockUpdate+0x154>)
  4024e2:	6812      	ldr	r2, [r2, #0]
  4024e4:	fb02 f303 	mul.w	r3, r2, r3
  4024e8:	4a16      	ldr	r2, [pc, #88]	; (402544 <SystemCoreClockUpdate+0x154>)
  4024ea:	6013      	str	r3, [r2, #0]
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  4024ec:	4b13      	ldr	r3, [pc, #76]	; (40253c <SystemCoreClockUpdate+0x14c>)
  4024ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  4024f0:	b2db      	uxtb	r3, r3
  4024f2:	4a14      	ldr	r2, [pc, #80]	; (402544 <SystemCoreClockUpdate+0x154>)
  4024f4:	6812      	ldr	r2, [r2, #0]
  4024f6:	fbb2 f3f3 	udiv	r3, r2, r3
  4024fa:	4a12      	ldr	r2, [pc, #72]	; (402544 <SystemCoreClockUpdate+0x154>)
  4024fc:	6013      	str	r3, [r2, #0]
      }
    break;
  4024fe:	e7ff      	b.n	402500 <SystemCoreClockUpdate+0x110>
  402500:	bf00      	nop

    default:
    break;
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  402502:	4b0e      	ldr	r3, [pc, #56]	; (40253c <SystemCoreClockUpdate+0x14c>)
  402504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402506:	f003 0370 	and.w	r3, r3, #112	; 0x70
  40250a:	2b70      	cmp	r3, #112	; 0x70
  40250c:	d108      	bne.n	402520 <SystemCoreClockUpdate+0x130>
  {
    SystemCoreClock /= 3U;
  40250e:	4b0d      	ldr	r3, [pc, #52]	; (402544 <SystemCoreClockUpdate+0x154>)
  402510:	681b      	ldr	r3, [r3, #0]
  402512:	4a10      	ldr	r2, [pc, #64]	; (402554 <SystemCoreClockUpdate+0x164>)
  402514:	fba2 2303 	umull	r2, r3, r2, r3
  402518:	085b      	lsrs	r3, r3, #1
  40251a:	4a0a      	ldr	r2, [pc, #40]	; (402544 <SystemCoreClockUpdate+0x154>)
  40251c:	6013      	str	r3, [r2, #0]
  40251e:	e009      	b.n	402534 <SystemCoreClockUpdate+0x144>
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  402520:	4b06      	ldr	r3, [pc, #24]	; (40253c <SystemCoreClockUpdate+0x14c>)
  402522:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402524:	f003 0370 	and.w	r3, r3, #112	; 0x70
  402528:	091a      	lsrs	r2, r3, #4
  40252a:	4b06      	ldr	r3, [pc, #24]	; (402544 <SystemCoreClockUpdate+0x154>)
  40252c:	681b      	ldr	r3, [r3, #0]
  40252e:	40d3      	lsrs	r3, r2
  402530:	4a04      	ldr	r2, [pc, #16]	; (402544 <SystemCoreClockUpdate+0x154>)
  402532:	6013      	str	r3, [r2, #0]
  }
}
  402534:	46bd      	mov	sp, r7
  402536:	f85d 7b04 	ldr.w	r7, [sp], #4
  40253a:	4770      	bx	lr
  40253c:	400e0600 	.word	0x400e0600
  402540:	400e1810 	.word	0x400e1810
  402544:	20400004 	.word	0x20400004
  402548:	00b71b00 	.word	0x00b71b00
  40254c:	003d0900 	.word	0x003d0900
  402550:	07ff0000 	.word	0x07ff0000
  402554:	aaaaaaab 	.word	0xaaaaaaab

00402558 <system_init_flash>:
/**
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  402558:	b480      	push	{r7}
  40255a:	b083      	sub	sp, #12
  40255c:	af00      	add	r7, sp, #0
  40255e:	6078      	str	r0, [r7, #4]
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  402560:	687b      	ldr	r3, [r7, #4]
  402562:	4a18      	ldr	r2, [pc, #96]	; (4025c4 <system_init_flash+0x6c>)
  402564:	4293      	cmp	r3, r2
  402566:	d804      	bhi.n	402572 <system_init_flash+0x1a>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  402568:	4b17      	ldr	r3, [pc, #92]	; (4025c8 <system_init_flash+0x70>)
  40256a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  40256e:	601a      	str	r2, [r3, #0]
  402570:	e023      	b.n	4025ba <system_init_flash+0x62>
  }
  else
  {
    if (ul_clk < CHIP_FREQ_FWS_1)
  402572:	687b      	ldr	r3, [r7, #4]
  402574:	4a15      	ldr	r2, [pc, #84]	; (4025cc <system_init_flash+0x74>)
  402576:	4293      	cmp	r3, r2
  402578:	d803      	bhi.n	402582 <system_init_flash+0x2a>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  40257a:	4b13      	ldr	r3, [pc, #76]	; (4025c8 <system_init_flash+0x70>)
  40257c:	4a14      	ldr	r2, [pc, #80]	; (4025d0 <system_init_flash+0x78>)
  40257e:	601a      	str	r2, [r3, #0]
  402580:	e01b      	b.n	4025ba <system_init_flash+0x62>
    }
    else
    {
      if (ul_clk < CHIP_FREQ_FWS_2)
  402582:	687b      	ldr	r3, [r7, #4]
  402584:	4a13      	ldr	r2, [pc, #76]	; (4025d4 <system_init_flash+0x7c>)
  402586:	4293      	cmp	r3, r2
  402588:	d803      	bhi.n	402592 <system_init_flash+0x3a>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  40258a:	4b0f      	ldr	r3, [pc, #60]	; (4025c8 <system_init_flash+0x70>)
  40258c:	4a12      	ldr	r2, [pc, #72]	; (4025d8 <system_init_flash+0x80>)
  40258e:	601a      	str	r2, [r3, #0]
  402590:	e013      	b.n	4025ba <system_init_flash+0x62>
      }
      else
      {
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  402592:	687b      	ldr	r3, [r7, #4]
  402594:	4a11      	ldr	r2, [pc, #68]	; (4025dc <system_init_flash+0x84>)
  402596:	4293      	cmp	r3, r2
  402598:	d803      	bhi.n	4025a2 <system_init_flash+0x4a>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  40259a:	4b0b      	ldr	r3, [pc, #44]	; (4025c8 <system_init_flash+0x70>)
  40259c:	4a10      	ldr	r2, [pc, #64]	; (4025e0 <system_init_flash+0x88>)
  40259e:	601a      	str	r2, [r3, #0]
  4025a0:	e00b      	b.n	4025ba <system_init_flash+0x62>
        }
        else
        {
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  4025a2:	687b      	ldr	r3, [r7, #4]
  4025a4:	4a0f      	ldr	r2, [pc, #60]	; (4025e4 <system_init_flash+0x8c>)
  4025a6:	4293      	cmp	r3, r2
  4025a8:	d804      	bhi.n	4025b4 <system_init_flash+0x5c>
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  4025aa:	4b07      	ldr	r3, [pc, #28]	; (4025c8 <system_init_flash+0x70>)
  4025ac:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  4025b0:	601a      	str	r2, [r3, #0]
  4025b2:	e002      	b.n	4025ba <system_init_flash+0x62>
          }
          else
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  4025b4:	4b04      	ldr	r3, [pc, #16]	; (4025c8 <system_init_flash+0x70>)
  4025b6:	4a0c      	ldr	r2, [pc, #48]	; (4025e8 <system_init_flash+0x90>)
  4025b8:	601a      	str	r2, [r3, #0]
          }
        }
      }
    }
  }
}
  4025ba:	370c      	adds	r7, #12
  4025bc:	46bd      	mov	sp, r7
  4025be:	f85d 7b04 	ldr.w	r7, [sp], #4
  4025c2:	4770      	bx	lr
  4025c4:	01312cff 	.word	0x01312cff
  4025c8:	400e0c00 	.word	0x400e0c00
  4025cc:	026259ff 	.word	0x026259ff
  4025d0:	04000100 	.word	0x04000100
  4025d4:	039386ff 	.word	0x039386ff
  4025d8:	04000200 	.word	0x04000200
  4025dc:	04c4b3ff 	.word	0x04c4b3ff
  4025e0:	04000300 	.word	0x04000300
  4025e4:	05f5e0ff 	.word	0x05f5e0ff
  4025e8:	04000500 	.word	0x04000500

004025ec <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
  4025ec:	b480      	push	{r7}
  4025ee:	b085      	sub	sp, #20
  4025f0:	af00      	add	r7, sp, #0
  4025f2:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;
  4025f4:	4b10      	ldr	r3, [pc, #64]	; (402638 <_sbrk+0x4c>)
  4025f6:	60fb      	str	r3, [r7, #12]

	if (heap == NULL) {
  4025f8:	4b10      	ldr	r3, [pc, #64]	; (40263c <_sbrk+0x50>)
  4025fa:	681b      	ldr	r3, [r3, #0]
  4025fc:	2b00      	cmp	r3, #0
  4025fe:	d102      	bne.n	402606 <_sbrk+0x1a>
		heap = (unsigned char *)&_end;
  402600:	4b0e      	ldr	r3, [pc, #56]	; (40263c <_sbrk+0x50>)
  402602:	4a0f      	ldr	r2, [pc, #60]	; (402640 <_sbrk+0x54>)
  402604:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
  402606:	4b0d      	ldr	r3, [pc, #52]	; (40263c <_sbrk+0x50>)
  402608:	681b      	ldr	r3, [r3, #0]
  40260a:	60bb      	str	r3, [r7, #8]

	if (((int)prev_heap + incr) > ramend) {
  40260c:	68ba      	ldr	r2, [r7, #8]
  40260e:	687b      	ldr	r3, [r7, #4]
  402610:	441a      	add	r2, r3
  402612:	68fb      	ldr	r3, [r7, #12]
  402614:	429a      	cmp	r2, r3
  402616:	dd02      	ble.n	40261e <_sbrk+0x32>
		return (caddr_t) -1;	
  402618:	f04f 33ff 	mov.w	r3, #4294967295
  40261c:	e006      	b.n	40262c <_sbrk+0x40>
	}

	heap += incr;
  40261e:	4b07      	ldr	r3, [pc, #28]	; (40263c <_sbrk+0x50>)
  402620:	681a      	ldr	r2, [r3, #0]
  402622:	687b      	ldr	r3, [r7, #4]
  402624:	4413      	add	r3, r2
  402626:	4a05      	ldr	r2, [pc, #20]	; (40263c <_sbrk+0x50>)
  402628:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
  40262a:	68bb      	ldr	r3, [r7, #8]
}
  40262c:	4618      	mov	r0, r3
  40262e:	3714      	adds	r7, #20
  402630:	46bd      	mov	sp, r7
  402632:	f85d 7b04 	ldr.w	r7, [sp], #4
  402636:	4770      	bx	lr
  402638:	2045fffc 	.word	0x2045fffc
  40263c:	20400994 	.word	0x20400994
  402640:	20403500 	.word	0x20403500

00402644 <_close>:
{
	return -1;
}

extern int _close(int file)
{
  402644:	b480      	push	{r7}
  402646:	b083      	sub	sp, #12
  402648:	af00      	add	r7, sp, #0
  40264a:	6078      	str	r0, [r7, #4]
	return -1;
  40264c:	f04f 33ff 	mov.w	r3, #4294967295
}
  402650:	4618      	mov	r0, r3
  402652:	370c      	adds	r7, #12
  402654:	46bd      	mov	sp, r7
  402656:	f85d 7b04 	ldr.w	r7, [sp], #4
  40265a:	4770      	bx	lr

0040265c <_fstat>:

extern int _fstat(int file, struct stat *st)
{
  40265c:	b480      	push	{r7}
  40265e:	b083      	sub	sp, #12
  402660:	af00      	add	r7, sp, #0
  402662:	6078      	str	r0, [r7, #4]
  402664:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
  402666:	683b      	ldr	r3, [r7, #0]
  402668:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  40266c:	605a      	str	r2, [r3, #4]

	return 0;
  40266e:	2300      	movs	r3, #0
}
  402670:	4618      	mov	r0, r3
  402672:	370c      	adds	r7, #12
  402674:	46bd      	mov	sp, r7
  402676:	f85d 7b04 	ldr.w	r7, [sp], #4
  40267a:	4770      	bx	lr

0040267c <_isatty>:

extern int _isatty(int file)
{
  40267c:	b480      	push	{r7}
  40267e:	b083      	sub	sp, #12
  402680:	af00      	add	r7, sp, #0
  402682:	6078      	str	r0, [r7, #4]
	return 1;
  402684:	2301      	movs	r3, #1
}
  402686:	4618      	mov	r0, r3
  402688:	370c      	adds	r7, #12
  40268a:	46bd      	mov	sp, r7
  40268c:	f85d 7b04 	ldr.w	r7, [sp], #4
  402690:	4770      	bx	lr
  402692:	bf00      	nop

00402694 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
  402694:	b480      	push	{r7}
  402696:	b085      	sub	sp, #20
  402698:	af00      	add	r7, sp, #0
  40269a:	60f8      	str	r0, [r7, #12]
  40269c:	60b9      	str	r1, [r7, #8]
  40269e:	607a      	str	r2, [r7, #4]
	return 0;
  4026a0:	2300      	movs	r3, #0
}
  4026a2:	4618      	mov	r0, r3
  4026a4:	3714      	adds	r7, #20
  4026a6:	46bd      	mov	sp, r7
  4026a8:	f85d 7b04 	ldr.w	r7, [sp], #4
  4026ac:	4770      	bx	lr
  4026ae:	bf00      	nop

004026b0 <PCA9952_write_reg>:
 *
 * \param reg_index Register address. Use macros as defined in the header file.
 * \param data Data that should be written to the device register.
 */
void PCA9952_write_reg(unsigned char topBotn, uint8_t reg_index, uint8_t data)
{
  4026b0:	b580      	push	{r7, lr}
  4026b2:	b088      	sub	sp, #32
  4026b4:	af00      	add	r7, sp, #0
  4026b6:	4603      	mov	r3, r0
  4026b8:	71fb      	strb	r3, [r7, #7]
  4026ba:	460b      	mov	r3, r1
  4026bc:	71bb      	strb	r3, [r7, #6]
  4026be:	4613      	mov	r3, r2
  4026c0:	717b      	strb	r3, [r7, #5]
	uint8_t pack[2];
	twihs_packet_t twi_package;

	pack[0] = reg_index;
  4026c2:	79bb      	ldrb	r3, [r7, #6]
  4026c4:	773b      	strb	r3, [r7, #28]
	pack[1] = data;
  4026c6:	797b      	ldrb	r3, [r7, #5]
  4026c8:	777b      	strb	r3, [r7, #29]

//7apr15	twi_package.chip = PCA9952_TWI_ADDRESS;

	if (topBotn == LED_TOP)
  4026ca:	79fb      	ldrb	r3, [r7, #7]
  4026cc:	2b00      	cmp	r3, #0
  4026ce:	d102      	bne.n	4026d6 <PCA9952_write_reg+0x26>
	{
		twi_package.chip = PCA9952_U7_TOPDRIVE_TWI_ADDRESS;
  4026d0:	2360      	movs	r3, #96	; 0x60
  4026d2:	763b      	strb	r3, [r7, #24]
  4026d4:	e004      	b.n	4026e0 <PCA9952_write_reg+0x30>
	}
	else if (topBotn == LED_BOTTOM)
  4026d6:	79fb      	ldrb	r3, [r7, #7]
  4026d8:	2b01      	cmp	r3, #1
  4026da:	d101      	bne.n	4026e0 <PCA9952_write_reg+0x30>
	{
		twi_package.chip = PCA9952_U8_BOTDRIVE_TWI_ADDRESS;
  4026dc:	2361      	movs	r3, #97	; 0x61
  4026de:	763b      	strb	r3, [r7, #24]
	}

	twi_package.addr[0] = 0;		//is this right? 8feb16
  4026e0:	2300      	movs	r3, #0
  4026e2:	723b      	strb	r3, [r7, #8]
	twi_package.addr[1] = 0;		//is this right? 8feb16
  4026e4:	2300      	movs	r3, #0
  4026e6:	727b      	strb	r3, [r7, #9]
	twi_package.addr[2] = 0;		//is this right? 8feb16
  4026e8:	2300      	movs	r3, #0
  4026ea:	72bb      	strb	r3, [r7, #10]
	twi_package.addr_length = 0;
  4026ec:	2300      	movs	r3, #0
  4026ee:	60fb      	str	r3, [r7, #12]
	twi_package.buffer = &pack;
  4026f0:	f107 031c 	add.w	r3, r7, #28
  4026f4:	613b      	str	r3, [r7, #16]
	twi_package.length = sizeof(pack);
  4026f6:	2302      	movs	r3, #2
  4026f8:	617b      	str	r3, [r7, #20]

	while(twihs_master_write(PCA9952_TWI, &twi_package)!=TWIHS_SUCCESS);
  4026fa:	bf00      	nop
  4026fc:	f107 0308 	add.w	r3, r7, #8
  402700:	4805      	ldr	r0, [pc, #20]	; (402718 <PCA9952_write_reg+0x68>)
  402702:	4619      	mov	r1, r3
  402704:	4b05      	ldr	r3, [pc, #20]	; (40271c <PCA9952_write_reg+0x6c>)
  402706:	4798      	blx	r3
  402708:	4603      	mov	r3, r0
  40270a:	2b00      	cmp	r3, #0
  40270c:	d1f6      	bne.n	4026fc <PCA9952_write_reg+0x4c>

	return;
  40270e:	bf00      	nop
}
  402710:	3720      	adds	r7, #32
  402712:	46bd      	mov	sp, r7
  402714:	bd80      	pop	{r7, pc}
  402716:	bf00      	nop
  402718:	40018000 	.word	0x40018000
  40271c:	00401e71 	.word	0x00401e71

00402720 <PCA9952_read_reg>:
 *
 * \param reg_index Register address.
 * \returns Register content.
 */
uint8_t PCA9952_read_reg(unsigned char topBotn, uint8_t reg_index)
{
  402720:	b580      	push	{r7, lr}
  402722:	b088      	sub	sp, #32
  402724:	af00      	add	r7, sp, #0
  402726:	4603      	mov	r3, r0
  402728:	460a      	mov	r2, r1
  40272a:	71fb      	strb	r3, [r7, #7]
  40272c:	4613      	mov	r3, r2
  40272e:	71bb      	strb	r3, [r7, #6]
	uint8_t data;
	twihs_packet_t twi_package;

//7apr15	twi_package.chip = PCA9952_TWI_ADDRESS;

	if (topBotn == LED_TOP)
  402730:	79fb      	ldrb	r3, [r7, #7]
  402732:	2b00      	cmp	r3, #0
  402734:	d102      	bne.n	40273c <PCA9952_read_reg+0x1c>
	{
		twi_package.chip = PCA9952_U7_TOPDRIVE_TWI_ADDRESS;
  402736:	2360      	movs	r3, #96	; 0x60
  402738:	763b      	strb	r3, [r7, #24]
  40273a:	e004      	b.n	402746 <PCA9952_read_reg+0x26>
	}
	else if (topBotn == LED_BOTTOM)
  40273c:	79fb      	ldrb	r3, [r7, #7]
  40273e:	2b01      	cmp	r3, #1
  402740:	d101      	bne.n	402746 <PCA9952_read_reg+0x26>
	{
		twi_package.chip = PCA9952_U8_BOTDRIVE_TWI_ADDRESS;
  402742:	2361      	movs	r3, #97	; 0x61
  402744:	763b      	strb	r3, [r7, #24]
	}

	twi_package.addr[0] = 0;		//is this right? 8feb16
  402746:	2300      	movs	r3, #0
  402748:	723b      	strb	r3, [r7, #8]
	twi_package.addr[1] = 0;		//is this right? 8feb16
  40274a:	2300      	movs	r3, #0
  40274c:	727b      	strb	r3, [r7, #9]
	twi_package.addr[2] = 0;		//is this right? 8feb16
  40274e:	2300      	movs	r3, #0
  402750:	72bb      	strb	r3, [r7, #10]
	twi_package.addr_length = 0;
  402752:	2300      	movs	r3, #0
  402754:	60fb      	str	r3, [r7, #12]
	twi_package.buffer = &reg_index;
  402756:	1dbb      	adds	r3, r7, #6
  402758:	613b      	str	r3, [r7, #16]
	twi_package.length = 1;
  40275a:	2301      	movs	r3, #1
  40275c:	617b      	str	r3, [r7, #20]
	while(twihs_master_write(PCA9952_TWI, &twi_package)!=TWIHS_SUCCESS);
  40275e:	bf00      	nop
  402760:	f107 0308 	add.w	r3, r7, #8
  402764:	480f      	ldr	r0, [pc, #60]	; (4027a4 <PCA9952_read_reg+0x84>)
  402766:	4619      	mov	r1, r3
  402768:	4b0f      	ldr	r3, [pc, #60]	; (4027a8 <PCA9952_read_reg+0x88>)
  40276a:	4798      	blx	r3
  40276c:	4603      	mov	r3, r0
  40276e:	2b00      	cmp	r3, #0
  402770:	d1f6      	bne.n	402760 <PCA9952_read_reg+0x40>
	* specified in the datasheet.
	* Also there seems to be a bug in the TWI module or the driver
	* since some delay here (code or real delay) adds about 500us
	* between the write and the next read cycle.
	*/
	mdelay(20);
  402772:	2014      	movs	r0, #20
  402774:	4b0d      	ldr	r3, [pc, #52]	; (4027ac <PCA9952_read_reg+0x8c>)
  402776:	4798      	blx	r3

//7apr15 this was set above, no need to reassign	twi_package.chip = PCA9952_TWI_ADDRESS;
	twi_package.addr_length = 0;
  402778:	2300      	movs	r3, #0
  40277a:	60fb      	str	r3, [r7, #12]
	twi_package.buffer = &data;
  40277c:	f107 031f 	add.w	r3, r7, #31
  402780:	613b      	str	r3, [r7, #16]
	twi_package.length = 1;
  402782:	2301      	movs	r3, #1
  402784:	617b      	str	r3, [r7, #20]
	while(twihs_master_read(PCA9952_TWI, &twi_package)!=TWIHS_SUCCESS);
  402786:	bf00      	nop
  402788:	f107 0308 	add.w	r3, r7, #8
  40278c:	4805      	ldr	r0, [pc, #20]	; (4027a4 <PCA9952_read_reg+0x84>)
  40278e:	4619      	mov	r1, r3
  402790:	4b07      	ldr	r3, [pc, #28]	; (4027b0 <PCA9952_read_reg+0x90>)
  402792:	4798      	blx	r3
  402794:	4603      	mov	r3, r0
  402796:	2b00      	cmp	r3, #0
  402798:	d1f6      	bne.n	402788 <PCA9952_read_reg+0x68>

	return data;
  40279a:	7ffb      	ldrb	r3, [r7, #31]
}
  40279c:	4618      	mov	r0, r3
  40279e:	3720      	adds	r7, #32
  4027a0:	46bd      	mov	sp, r7
  4027a2:	bd80      	pop	{r7, pc}
  4027a4:	40018000 	.word	0x40018000
  4027a8:	00401e71 	.word	0x00401e71
  4027ac:	00403a99 	.word	0x00403a99
  4027b0:	00401d89 	.word	0x00401d89

004027b4 <PCA9952_init>:

extern uint8_t func_transmit(const uint8_t *p_buff, uint32_t ulsize); //lazy, defined in another c file 10feb16 jsi

void PCA9952_init(void) //7apr15
{
  4027b4:	b5b0      	push	{r4, r5, r7, lr}
  4027b6:	b094      	sub	sp, #80	; 0x50
  4027b8:	af02      	add	r7, sp, #8
	volatile uint8_t tmp1, tmp2, tmp3, tmp4;
	
	char printStr[64] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
  4027ba:	1d3b      	adds	r3, r7, #4
  4027bc:	2240      	movs	r2, #64	; 0x40
  4027be:	4618      	mov	r0, r3
  4027c0:	2100      	movs	r1, #0
  4027c2:	4b45      	ldr	r3, [pc, #276]	; (4028d8 <PCA9952_init+0x124>)
  4027c4:	4798      	blx	r3
	/* Store cpu frequency locally*/
//7apr15	cpu_hz = fcpu;

	//Note output is off at the chip level before coming into this routine, LED_OEn set high before calling this function from main()

	PCA9952_write_reg(LED_TOP, PCA9952_MODE1, 0);		//No autoincrement, normal mode not sleep, does not respond to sub or allcall addresses
  4027c6:	2000      	movs	r0, #0
  4027c8:	2100      	movs	r1, #0
  4027ca:	2200      	movs	r2, #0
  4027cc:	4b43      	ldr	r3, [pc, #268]	; (4028dc <PCA9952_init+0x128>)
  4027ce:	4798      	blx	r3
	PCA9952_write_reg(LED_TOP, PCA9952_MODE2, 0);		//Dimming not blinking, change on stop not ack (don't really care but have to pick something)
  4027d0:	2000      	movs	r0, #0
  4027d2:	2101      	movs	r1, #1
  4027d4:	2200      	movs	r2, #0
  4027d6:	4b41      	ldr	r3, [pc, #260]	; (4028dc <PCA9952_init+0x128>)
  4027d8:	4798      	blx	r3
	PCA9952_write_reg(LED_TOP, PCA9952_IREFALL, LED_DRIVER_CURRENT); //9apr15 drive at half current for now, power supply circuit needs modification
  4027da:	2000      	movs	r0, #0
  4027dc:	2143      	movs	r1, #67	; 0x43
  4027de:	22c8      	movs	r2, #200	; 0xc8
  4027e0:	4b3e      	ldr	r3, [pc, #248]	; (4028dc <PCA9952_init+0x128>)
  4027e2:	4798      	blx	r3
	PCA9952_write_reg(LED_TOP, PCA9952_LEDOUT0, 0);		//Setting all channels off for now
  4027e4:	2000      	movs	r0, #0
  4027e6:	2102      	movs	r1, #2
  4027e8:	2200      	movs	r2, #0
  4027ea:	4b3c      	ldr	r3, [pc, #240]	; (4028dc <PCA9952_init+0x128>)
  4027ec:	4798      	blx	r3
	PCA9952_write_reg(LED_TOP, PCA9952_LEDOUT1, 0);
  4027ee:	2000      	movs	r0, #0
  4027f0:	2103      	movs	r1, #3
  4027f2:	2200      	movs	r2, #0
  4027f4:	4b39      	ldr	r3, [pc, #228]	; (4028dc <PCA9952_init+0x128>)
  4027f6:	4798      	blx	r3
	PCA9952_write_reg(LED_TOP, PCA9952_LEDOUT2, 0);
  4027f8:	2000      	movs	r0, #0
  4027fa:	2104      	movs	r1, #4
  4027fc:	2200      	movs	r2, #0
  4027fe:	4b37      	ldr	r3, [pc, #220]	; (4028dc <PCA9952_init+0x128>)
  402800:	4798      	blx	r3
	PCA9952_write_reg(LED_TOP, PCA9952_LEDOUT3, 0);
  402802:	2000      	movs	r0, #0
  402804:	2105      	movs	r1, #5
  402806:	2200      	movs	r2, #0
  402808:	4b34      	ldr	r3, [pc, #208]	; (4028dc <PCA9952_init+0x128>)
  40280a:	4798      	blx	r3

	tmp1 = PCA9952_read_reg(LED_TOP, PCA9952_EFLAG0);	//TODO: just see what we get, will need to weave error checking into this system later
  40280c:	2000      	movs	r0, #0
  40280e:	2144      	movs	r1, #68	; 0x44
  402810:	4b33      	ldr	r3, [pc, #204]	; (4028e0 <PCA9952_init+0x12c>)
  402812:	4798      	blx	r3
  402814:	4603      	mov	r3, r0
  402816:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	tmp2 = PCA9952_read_reg(LED_TOP, PCA9952_EFLAG1);
  40281a:	2000      	movs	r0, #0
  40281c:	2145      	movs	r1, #69	; 0x45
  40281e:	4b30      	ldr	r3, [pc, #192]	; (4028e0 <PCA9952_init+0x12c>)
  402820:	4798      	blx	r3
  402822:	4603      	mov	r3, r0
  402824:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46

	PCA9952_write_reg(LED_BOTTOM, PCA9952_MODE1, 0);		//No autoincrement, normal mode not sleep, does not respond to sub or allcall addresses
  402828:	2001      	movs	r0, #1
  40282a:	2100      	movs	r1, #0
  40282c:	2200      	movs	r2, #0
  40282e:	4b2b      	ldr	r3, [pc, #172]	; (4028dc <PCA9952_init+0x128>)
  402830:	4798      	blx	r3
	PCA9952_write_reg(LED_BOTTOM, PCA9952_MODE2, 0);		//Dimming not blinking, change on stop not ack (don't really care but have to pick something)
  402832:	2001      	movs	r0, #1
  402834:	2101      	movs	r1, #1
  402836:	2200      	movs	r2, #0
  402838:	4b28      	ldr	r3, [pc, #160]	; (4028dc <PCA9952_init+0x128>)
  40283a:	4798      	blx	r3
	PCA9952_write_reg(LED_BOTTOM, PCA9952_IREFALL, LED_DRIVER_CURRENT); //9apr15 drive at half current for now, power supply circuit needs modification
  40283c:	2001      	movs	r0, #1
  40283e:	2143      	movs	r1, #67	; 0x43
  402840:	22c8      	movs	r2, #200	; 0xc8
  402842:	4b26      	ldr	r3, [pc, #152]	; (4028dc <PCA9952_init+0x128>)
  402844:	4798      	blx	r3
	PCA9952_write_reg(LED_BOTTOM, PCA9952_LEDOUT0, 0);		//Setting all channels off for now
  402846:	2001      	movs	r0, #1
  402848:	2102      	movs	r1, #2
  40284a:	2200      	movs	r2, #0
  40284c:	4b23      	ldr	r3, [pc, #140]	; (4028dc <PCA9952_init+0x128>)
  40284e:	4798      	blx	r3
	PCA9952_write_reg(LED_BOTTOM, PCA9952_LEDOUT1, 0);
  402850:	2001      	movs	r0, #1
  402852:	2103      	movs	r1, #3
  402854:	2200      	movs	r2, #0
  402856:	4b21      	ldr	r3, [pc, #132]	; (4028dc <PCA9952_init+0x128>)
  402858:	4798      	blx	r3
	PCA9952_write_reg(LED_BOTTOM, PCA9952_LEDOUT2, 0);
  40285a:	2001      	movs	r0, #1
  40285c:	2104      	movs	r1, #4
  40285e:	2200      	movs	r2, #0
  402860:	4b1e      	ldr	r3, [pc, #120]	; (4028dc <PCA9952_init+0x128>)
  402862:	4798      	blx	r3
	PCA9952_write_reg(LED_BOTTOM, PCA9952_LEDOUT3, 0);
  402864:	2001      	movs	r0, #1
  402866:	2105      	movs	r1, #5
  402868:	2200      	movs	r2, #0
  40286a:	4b1c      	ldr	r3, [pc, #112]	; (4028dc <PCA9952_init+0x128>)
  40286c:	4798      	blx	r3

	tmp3 = PCA9952_read_reg(LED_BOTTOM, PCA9952_EFLAG0);	//TODO: just see what we get, will need to weave error checking into this system later
  40286e:	2001      	movs	r0, #1
  402870:	2144      	movs	r1, #68	; 0x44
  402872:	4b1b      	ldr	r3, [pc, #108]	; (4028e0 <PCA9952_init+0x12c>)
  402874:	4798      	blx	r3
  402876:	4603      	mov	r3, r0
  402878:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
	tmp4 = PCA9952_read_reg(LED_BOTTOM, PCA9952_EFLAG1);
  40287c:	2001      	movs	r0, #1
  40287e:	2145      	movs	r1, #69	; 0x45
  402880:	4b17      	ldr	r3, [pc, #92]	; (4028e0 <PCA9952_init+0x12c>)
  402882:	4798      	blx	r3
  402884:	4603      	mov	r3, r0
  402886:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
	
	sprintf(printStr,"PCA9952: tmp1: %x tmp2: %x tmp3: %x tmp4: %x\r\n", tmp1, tmp2, tmp3, tmp4); //10feb16 just for debug jsi
  40288a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
  40288e:	b2db      	uxtb	r3, r3
  402890:	461d      	mov	r5, r3
  402892:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
  402896:	b2db      	uxtb	r3, r3
  402898:	461c      	mov	r4, r3
  40289a:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
  40289e:	b2db      	uxtb	r3, r3
  4028a0:	4619      	mov	r1, r3
  4028a2:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
  4028a6:	b2db      	uxtb	r3, r3
  4028a8:	461a      	mov	r2, r3
  4028aa:	1d3b      	adds	r3, r7, #4
  4028ac:	9100      	str	r1, [sp, #0]
  4028ae:	9201      	str	r2, [sp, #4]
  4028b0:	4618      	mov	r0, r3
  4028b2:	490c      	ldr	r1, [pc, #48]	; (4028e4 <PCA9952_init+0x130>)
  4028b4:	462a      	mov	r2, r5
  4028b6:	4623      	mov	r3, r4
  4028b8:	4c0b      	ldr	r4, [pc, #44]	; (4028e8 <PCA9952_init+0x134>)
  4028ba:	47a0      	blx	r4
	func_transmit(printStr, strlen(printStr));
  4028bc:	1d3b      	adds	r3, r7, #4
  4028be:	4618      	mov	r0, r3
  4028c0:	4b0a      	ldr	r3, [pc, #40]	; (4028ec <PCA9952_init+0x138>)
  4028c2:	4798      	blx	r3
  4028c4:	4602      	mov	r2, r0
  4028c6:	1d3b      	adds	r3, r7, #4
  4028c8:	4618      	mov	r0, r3
  4028ca:	4611      	mov	r1, r2
  4028cc:	4b08      	ldr	r3, [pc, #32]	; (4028f0 <PCA9952_init+0x13c>)
  4028ce:	4798      	blx	r3
	
	
}
  4028d0:	3748      	adds	r7, #72	; 0x48
  4028d2:	46bd      	mov	sp, r7
  4028d4:	bdb0      	pop	{r4, r5, r7, pc}
  4028d6:	bf00      	nop
  4028d8:	004050ad 	.word	0x004050ad
  4028dc:	004026b1 	.word	0x004026b1
  4028e0:	00402721 	.word	0x00402721
  4028e4:	0040a894 	.word	0x0040a894
  4028e8:	004052c9 	.word	0x004052c9
  4028ec:	00405315 	.word	0x00405315
  4028f0:	00403efd 	.word	0x00403efd

004028f4 <PCA9952_channel>:


void PCA9952_channel(unsigned char topBotn, unsigned char channel, unsigned char onOffn);
void PCA9952_channel(unsigned char topBotn, unsigned char channel, unsigned char onOffn)
{
  4028f4:	b580      	push	{r7, lr}
  4028f6:	b084      	sub	sp, #16
  4028f8:	af00      	add	r7, sp, #0
  4028fa:	4603      	mov	r3, r0
  4028fc:	71fb      	strb	r3, [r7, #7]
  4028fe:	460b      	mov	r3, r1
  402900:	71bb      	strb	r3, [r7, #6]
  402902:	4613      	mov	r3, r2
  402904:	717b      	strb	r3, [r7, #5]
	unsigned char regIdx, regPos, regShadow, maskVal, writeVal;
	
	regIdx = (channel / 4); //LEDOUT0 controls channels 0..3, LEDOUT1 controls channels 4..7 etc.
  402906:	79bb      	ldrb	r3, [r7, #6]
  402908:	089b      	lsrs	r3, r3, #2
  40290a:	737b      	strb	r3, [r7, #13]
	regPos = (channel % 4);
  40290c:	79bb      	ldrb	r3, [r7, #6]
  40290e:	f003 0303 	and.w	r3, r3, #3
  402912:	733b      	strb	r3, [r7, #12]
	
	switch(regIdx)
  402914:	7b7b      	ldrb	r3, [r7, #13]
  402916:	2b03      	cmp	r3, #3
  402918:	d82a      	bhi.n	402970 <PCA9952_channel+0x7c>
  40291a:	a201      	add	r2, pc, #4	; (adr r2, 402920 <PCA9952_channel+0x2c>)
  40291c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  402920:	00402931 	.word	0x00402931
  402924:	00402941 	.word	0x00402941
  402928:	00402951 	.word	0x00402951
  40292c:	00402961 	.word	0x00402961
	{
		case 0:
			regShadow = PCA9952_read_reg(topBotn,PCA9952_LEDOUT0);
  402930:	79fb      	ldrb	r3, [r7, #7]
  402932:	4618      	mov	r0, r3
  402934:	2102      	movs	r1, #2
  402936:	4b37      	ldr	r3, [pc, #220]	; (402a14 <PCA9952_channel+0x120>)
  402938:	4798      	blx	r3
  40293a:	4603      	mov	r3, r0
  40293c:	73fb      	strb	r3, [r7, #15]
			break;
  40293e:	e017      	b.n	402970 <PCA9952_channel+0x7c>
		case 1:
			regShadow = PCA9952_read_reg(topBotn,PCA9952_LEDOUT1);
  402940:	79fb      	ldrb	r3, [r7, #7]
  402942:	4618      	mov	r0, r3
  402944:	2103      	movs	r1, #3
  402946:	4b33      	ldr	r3, [pc, #204]	; (402a14 <PCA9952_channel+0x120>)
  402948:	4798      	blx	r3
  40294a:	4603      	mov	r3, r0
  40294c:	73fb      	strb	r3, [r7, #15]
			break;
  40294e:	e00f      	b.n	402970 <PCA9952_channel+0x7c>
		case 2:
			regShadow = PCA9952_read_reg(topBotn,PCA9952_LEDOUT2);
  402950:	79fb      	ldrb	r3, [r7, #7]
  402952:	4618      	mov	r0, r3
  402954:	2104      	movs	r1, #4
  402956:	4b2f      	ldr	r3, [pc, #188]	; (402a14 <PCA9952_channel+0x120>)
  402958:	4798      	blx	r3
  40295a:	4603      	mov	r3, r0
  40295c:	73fb      	strb	r3, [r7, #15]
			break;
  40295e:	e007      	b.n	402970 <PCA9952_channel+0x7c>
		case 3:
			regShadow = PCA9952_read_reg(topBotn,PCA9952_LEDOUT3);
  402960:	79fb      	ldrb	r3, [r7, #7]
  402962:	4618      	mov	r0, r3
  402964:	2105      	movs	r1, #5
  402966:	4b2b      	ldr	r3, [pc, #172]	; (402a14 <PCA9952_channel+0x120>)
  402968:	4798      	blx	r3
  40296a:	4603      	mov	r3, r0
  40296c:	73fb      	strb	r3, [r7, #15]
			break;		
  40296e:	bf00      	nop
	}

	maskVal = 0xFF << (regPos * 2);
  402970:	7b3b      	ldrb	r3, [r7, #12]
  402972:	005b      	lsls	r3, r3, #1
  402974:	22ff      	movs	r2, #255	; 0xff
  402976:	fa02 f303 	lsl.w	r3, r2, r3
  40297a:	72fb      	strb	r3, [r7, #11]
	maskVal = maskVal ^ 0xFF;
  40297c:	7afb      	ldrb	r3, [r7, #11]
  40297e:	43db      	mvns	r3, r3
  402980:	72fb      	strb	r3, [r7, #11]
	regShadow &= maskVal;
  402982:	7bfa      	ldrb	r2, [r7, #15]
  402984:	7afb      	ldrb	r3, [r7, #11]
  402986:	4013      	ands	r3, r2
  402988:	73fb      	strb	r3, [r7, #15]

	if (onOffn == LED_ON)
  40298a:	797b      	ldrb	r3, [r7, #5]
  40298c:	2b01      	cmp	r3, #1
  40298e:	d106      	bne.n	40299e <PCA9952_channel+0xaa>
	{
		writeVal = (0x01 << (regPos * 2));
  402990:	7b3b      	ldrb	r3, [r7, #12]
  402992:	005b      	lsls	r3, r3, #1
  402994:	2201      	movs	r2, #1
  402996:	fa02 f303 	lsl.w	r3, r2, r3
  40299a:	73bb      	strb	r3, [r7, #14]
  40299c:	e004      	b.n	4029a8 <PCA9952_channel+0xb4>
	}
	else if (onOffn == LED_OFF)
  40299e:	797b      	ldrb	r3, [r7, #5]
  4029a0:	2b00      	cmp	r3, #0
  4029a2:	d101      	bne.n	4029a8 <PCA9952_channel+0xb4>
	{
		writeVal = 0;
  4029a4:	2300      	movs	r3, #0
  4029a6:	73bb      	strb	r3, [r7, #14]
	}
	
	regShadow |= writeVal;
  4029a8:	7bfa      	ldrb	r2, [r7, #15]
  4029aa:	7bbb      	ldrb	r3, [r7, #14]
  4029ac:	4313      	orrs	r3, r2
  4029ae:	73fb      	strb	r3, [r7, #15]
	
	switch(regIdx)
  4029b0:	7b7b      	ldrb	r3, [r7, #13]
  4029b2:	2b03      	cmp	r3, #3
  4029b4:	d82a      	bhi.n	402a0c <PCA9952_channel+0x118>
  4029b6:	a201      	add	r2, pc, #4	; (adr r2, 4029bc <PCA9952_channel+0xc8>)
  4029b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4029bc:	004029cd 	.word	0x004029cd
  4029c0:	004029dd 	.word	0x004029dd
  4029c4:	004029ed 	.word	0x004029ed
  4029c8:	004029fd 	.word	0x004029fd
	{
		case 0:
			PCA9952_write_reg(topBotn,PCA9952_LEDOUT0, regShadow);
  4029cc:	79fa      	ldrb	r2, [r7, #7]
  4029ce:	7bfb      	ldrb	r3, [r7, #15]
  4029d0:	4610      	mov	r0, r2
  4029d2:	2102      	movs	r1, #2
  4029d4:	461a      	mov	r2, r3
  4029d6:	4b10      	ldr	r3, [pc, #64]	; (402a18 <PCA9952_channel+0x124>)
  4029d8:	4798      	blx	r3
			break;
  4029da:	e017      	b.n	402a0c <PCA9952_channel+0x118>
		case 1:
			PCA9952_write_reg(topBotn,PCA9952_LEDOUT1, regShadow);
  4029dc:	79fa      	ldrb	r2, [r7, #7]
  4029de:	7bfb      	ldrb	r3, [r7, #15]
  4029e0:	4610      	mov	r0, r2
  4029e2:	2103      	movs	r1, #3
  4029e4:	461a      	mov	r2, r3
  4029e6:	4b0c      	ldr	r3, [pc, #48]	; (402a18 <PCA9952_channel+0x124>)
  4029e8:	4798      	blx	r3
			break;
  4029ea:	e00f      	b.n	402a0c <PCA9952_channel+0x118>
		case 2:
			PCA9952_write_reg(topBotn,PCA9952_LEDOUT2, regShadow);
  4029ec:	79fa      	ldrb	r2, [r7, #7]
  4029ee:	7bfb      	ldrb	r3, [r7, #15]
  4029f0:	4610      	mov	r0, r2
  4029f2:	2104      	movs	r1, #4
  4029f4:	461a      	mov	r2, r3
  4029f6:	4b08      	ldr	r3, [pc, #32]	; (402a18 <PCA9952_channel+0x124>)
  4029f8:	4798      	blx	r3
			break;
  4029fa:	e007      	b.n	402a0c <PCA9952_channel+0x118>
		case 3:
			PCA9952_write_reg(topBotn,PCA9952_LEDOUT3, regShadow);
  4029fc:	79fa      	ldrb	r2, [r7, #7]
  4029fe:	7bfb      	ldrb	r3, [r7, #15]
  402a00:	4610      	mov	r0, r2
  402a02:	2105      	movs	r1, #5
  402a04:	461a      	mov	r2, r3
  402a06:	4b04      	ldr	r3, [pc, #16]	; (402a18 <PCA9952_channel+0x124>)
  402a08:	4798      	blx	r3
			break;
  402a0a:	bf00      	nop
	}

}
  402a0c:	3710      	adds	r7, #16
  402a0e:	46bd      	mov	sp, r7
  402a10:	bd80      	pop	{r7, pc}
  402a12:	bf00      	nop
  402a14:	00402721 	.word	0x00402721
  402a18:	004026b1 	.word	0x004026b1

00402a1c <led_shelf>:

void led_shelf(unsigned char shelf, unsigned char onOffn)
{
  402a1c:	b580      	push	{r7, lr}
  402a1e:	b082      	sub	sp, #8
  402a20:	af00      	add	r7, sp, #0
  402a22:	4603      	mov	r3, r0
  402a24:	460a      	mov	r2, r1
  402a26:	71fb      	strb	r3, [r7, #7]
  402a28:	4613      	mov	r3, r2
  402a2a:	71bb      	strb	r3, [r7, #6]
	switch(shelf)
  402a2c:	79fb      	ldrb	r3, [r7, #7]
  402a2e:	2b03      	cmp	r3, #3
  402a30:	f200 8088 	bhi.w	402b44 <led_shelf+0x128>
  402a34:	a201      	add	r2, pc, #4	; (adr r2, 402a3c <led_shelf+0x20>)
  402a36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  402a3a:	bf00      	nop
  402a3c:	00402a4d 	.word	0x00402a4d
  402a40:	00402a8b 	.word	0x00402a8b
  402a44:	00402ac9 	.word	0x00402ac9
  402a48:	00402b07 	.word	0x00402b07
	{
		case 0: //bottom of LED board 0 which is the upper board in the shelf, and top of LED board 1 which is the lower board in the shelf
			PCA9952_channel(LED_BOTTOM, 0, onOffn);
  402a4c:	79bb      	ldrb	r3, [r7, #6]
  402a4e:	2001      	movs	r0, #1
  402a50:	2100      	movs	r1, #0
  402a52:	461a      	mov	r2, r3
  402a54:	4b3d      	ldr	r3, [pc, #244]	; (402b4c <led_shelf+0x130>)
  402a56:	4798      	blx	r3
			PCA9952_channel(LED_BOTTOM, 1, onOffn);
  402a58:	79bb      	ldrb	r3, [r7, #6]
  402a5a:	2001      	movs	r0, #1
  402a5c:	2101      	movs	r1, #1
  402a5e:	461a      	mov	r2, r3
  402a60:	4b3a      	ldr	r3, [pc, #232]	; (402b4c <led_shelf+0x130>)
  402a62:	4798      	blx	r3
			PCA9952_channel(LED_BOTTOM, 2, onOffn);
  402a64:	79bb      	ldrb	r3, [r7, #6]
  402a66:	2001      	movs	r0, #1
  402a68:	2102      	movs	r1, #2
  402a6a:	461a      	mov	r2, r3
  402a6c:	4b37      	ldr	r3, [pc, #220]	; (402b4c <led_shelf+0x130>)
  402a6e:	4798      	blx	r3
			PCA9952_channel(LED_TOP, 0, onOffn);
  402a70:	79bb      	ldrb	r3, [r7, #6]
  402a72:	2000      	movs	r0, #0
  402a74:	2100      	movs	r1, #0
  402a76:	461a      	mov	r2, r3
  402a78:	4b34      	ldr	r3, [pc, #208]	; (402b4c <led_shelf+0x130>)
  402a7a:	4798      	blx	r3
			PCA9952_channel(LED_TOP, 1, onOffn);
  402a7c:	79bb      	ldrb	r3, [r7, #6]
  402a7e:	2000      	movs	r0, #0
  402a80:	2101      	movs	r1, #1
  402a82:	461a      	mov	r2, r3
  402a84:	4b31      	ldr	r3, [pc, #196]	; (402b4c <led_shelf+0x130>)
  402a86:	4798      	blx	r3
			break;
  402a88:	e05c      	b.n	402b44 <led_shelf+0x128>

		case 1: //bottom of LED board 1 which is the upper board in the shelf, and top of LED board 2 which is the lower board in the shelf
			PCA9952_channel(LED_BOTTOM, 3, onOffn);
  402a8a:	79bb      	ldrb	r3, [r7, #6]
  402a8c:	2001      	movs	r0, #1
  402a8e:	2103      	movs	r1, #3
  402a90:	461a      	mov	r2, r3
  402a92:	4b2e      	ldr	r3, [pc, #184]	; (402b4c <led_shelf+0x130>)
  402a94:	4798      	blx	r3
			PCA9952_channel(LED_BOTTOM, 4, onOffn);
  402a96:	79bb      	ldrb	r3, [r7, #6]
  402a98:	2001      	movs	r0, #1
  402a9a:	2104      	movs	r1, #4
  402a9c:	461a      	mov	r2, r3
  402a9e:	4b2b      	ldr	r3, [pc, #172]	; (402b4c <led_shelf+0x130>)
  402aa0:	4798      	blx	r3
			PCA9952_channel(LED_BOTTOM, 5, onOffn);
  402aa2:	79bb      	ldrb	r3, [r7, #6]
  402aa4:	2001      	movs	r0, #1
  402aa6:	2105      	movs	r1, #5
  402aa8:	461a      	mov	r2, r3
  402aaa:	4b28      	ldr	r3, [pc, #160]	; (402b4c <led_shelf+0x130>)
  402aac:	4798      	blx	r3
			PCA9952_channel(LED_TOP, 2, onOffn);
  402aae:	79bb      	ldrb	r3, [r7, #6]
  402ab0:	2000      	movs	r0, #0
  402ab2:	2102      	movs	r1, #2
  402ab4:	461a      	mov	r2, r3
  402ab6:	4b25      	ldr	r3, [pc, #148]	; (402b4c <led_shelf+0x130>)
  402ab8:	4798      	blx	r3
			PCA9952_channel(LED_TOP, 3, onOffn);
  402aba:	79bb      	ldrb	r3, [r7, #6]
  402abc:	2000      	movs	r0, #0
  402abe:	2103      	movs	r1, #3
  402ac0:	461a      	mov	r2, r3
  402ac2:	4b22      	ldr	r3, [pc, #136]	; (402b4c <led_shelf+0x130>)
  402ac4:	4798      	blx	r3
			break;
  402ac6:	e03d      	b.n	402b44 <led_shelf+0x128>

		case 2: //bottom of LED board 2 which is the upper board in the shelf, and top of LED board 3 which is the lower board in the shelf
			PCA9952_channel(LED_BOTTOM, 6, onOffn);
  402ac8:	79bb      	ldrb	r3, [r7, #6]
  402aca:	2001      	movs	r0, #1
  402acc:	2106      	movs	r1, #6
  402ace:	461a      	mov	r2, r3
  402ad0:	4b1e      	ldr	r3, [pc, #120]	; (402b4c <led_shelf+0x130>)
  402ad2:	4798      	blx	r3
			PCA9952_channel(LED_BOTTOM, 7, onOffn);
  402ad4:	79bb      	ldrb	r3, [r7, #6]
  402ad6:	2001      	movs	r0, #1
  402ad8:	2107      	movs	r1, #7
  402ada:	461a      	mov	r2, r3
  402adc:	4b1b      	ldr	r3, [pc, #108]	; (402b4c <led_shelf+0x130>)
  402ade:	4798      	blx	r3
			PCA9952_channel(LED_BOTTOM, 8, onOffn);
  402ae0:	79bb      	ldrb	r3, [r7, #6]
  402ae2:	2001      	movs	r0, #1
  402ae4:	2108      	movs	r1, #8
  402ae6:	461a      	mov	r2, r3
  402ae8:	4b18      	ldr	r3, [pc, #96]	; (402b4c <led_shelf+0x130>)
  402aea:	4798      	blx	r3
			PCA9952_channel(LED_TOP, 4, onOffn);
  402aec:	79bb      	ldrb	r3, [r7, #6]
  402aee:	2000      	movs	r0, #0
  402af0:	2104      	movs	r1, #4
  402af2:	461a      	mov	r2, r3
  402af4:	4b15      	ldr	r3, [pc, #84]	; (402b4c <led_shelf+0x130>)
  402af6:	4798      	blx	r3
			PCA9952_channel(LED_TOP, 5, onOffn);
  402af8:	79bb      	ldrb	r3, [r7, #6]
  402afa:	2000      	movs	r0, #0
  402afc:	2105      	movs	r1, #5
  402afe:	461a      	mov	r2, r3
  402b00:	4b12      	ldr	r3, [pc, #72]	; (402b4c <led_shelf+0x130>)
  402b02:	4798      	blx	r3
			break;
  402b04:	e01e      	b.n	402b44 <led_shelf+0x128>

		case 3: //bottom of LED board 3 which is the upper board in the shelf, and top of LED board 4 which is the lower board in the shelf
			PCA9952_channel(LED_BOTTOM, 9, onOffn);
  402b06:	79bb      	ldrb	r3, [r7, #6]
  402b08:	2001      	movs	r0, #1
  402b0a:	2109      	movs	r1, #9
  402b0c:	461a      	mov	r2, r3
  402b0e:	4b0f      	ldr	r3, [pc, #60]	; (402b4c <led_shelf+0x130>)
  402b10:	4798      	blx	r3
			PCA9952_channel(LED_BOTTOM, 10, onOffn);
  402b12:	79bb      	ldrb	r3, [r7, #6]
  402b14:	2001      	movs	r0, #1
  402b16:	210a      	movs	r1, #10
  402b18:	461a      	mov	r2, r3
  402b1a:	4b0c      	ldr	r3, [pc, #48]	; (402b4c <led_shelf+0x130>)
  402b1c:	4798      	blx	r3
			PCA9952_channel(LED_BOTTOM, 11, onOffn);
  402b1e:	79bb      	ldrb	r3, [r7, #6]
  402b20:	2001      	movs	r0, #1
  402b22:	210b      	movs	r1, #11
  402b24:	461a      	mov	r2, r3
  402b26:	4b09      	ldr	r3, [pc, #36]	; (402b4c <led_shelf+0x130>)
  402b28:	4798      	blx	r3
			PCA9952_channel(LED_TOP, 6, onOffn);
  402b2a:	79bb      	ldrb	r3, [r7, #6]
  402b2c:	2000      	movs	r0, #0
  402b2e:	2106      	movs	r1, #6
  402b30:	461a      	mov	r2, r3
  402b32:	4b06      	ldr	r3, [pc, #24]	; (402b4c <led_shelf+0x130>)
  402b34:	4798      	blx	r3
			PCA9952_channel(LED_TOP, 7, onOffn);
  402b36:	79bb      	ldrb	r3, [r7, #6]
  402b38:	2000      	movs	r0, #0
  402b3a:	2107      	movs	r1, #7
  402b3c:	461a      	mov	r2, r3
  402b3e:	4b03      	ldr	r3, [pc, #12]	; (402b4c <led_shelf+0x130>)
  402b40:	4798      	blx	r3
			break;
  402b42:	bf00      	nop
	}	
	
}
  402b44:	3708      	adds	r7, #8
  402b46:	46bd      	mov	sp, r7
  402b48:	bd80      	pop	{r7, pc}
  402b4a:	bf00      	nop
  402b4c:	004028f5 	.word	0x004028f5

00402b50 <ioport_set_pin_dir>:
 * \param pin IOPORT pin to configure
 * \param dir Direction to set for the specified pin (\ref ioport_direction)
 */
static inline void ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
  402b50:	b480      	push	{r7}
  402b52:	b08d      	sub	sp, #52	; 0x34
  402b54:	af00      	add	r7, sp, #0
  402b56:	6078      	str	r0, [r7, #4]
  402b58:	460b      	mov	r3, r1
  402b5a:	70fb      	strb	r3, [r7, #3]
  402b5c:	687b      	ldr	r3, [r7, #4]
  402b5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  402b60:	78fb      	ldrb	r3, [r7, #3]
  402b62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  402b66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  402b68:	627b      	str	r3, [r7, #36]	; 0x24
  402b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  402b6c:	623b      	str	r3, [r7, #32]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  402b6e:	6a3b      	ldr	r3, [r7, #32]
  402b70:	095b      	lsrs	r3, r3, #5
  402b72:	61fb      	str	r3, [r7, #28]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  402b74:	69fa      	ldr	r2, [r7, #28]
  402b76:	4b17      	ldr	r3, [pc, #92]	; (402bd4 <ioport_set_pin_dir+0x84>)
  402b78:	4413      	add	r3, r2
  402b7a:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);
  402b7c:	61bb      	str	r3, [r7, #24]

	if (dir == IOPORT_DIR_OUTPUT) {
  402b7e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  402b82:	2b01      	cmp	r3, #1
  402b84:	d109      	bne.n	402b9a <ioport_set_pin_dir+0x4a>
  402b86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  402b88:	617b      	str	r3, [r7, #20]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  402b8a:	697b      	ldr	r3, [r7, #20]
  402b8c:	f003 031f 	and.w	r3, r3, #31
  402b90:	2201      	movs	r2, #1
  402b92:	409a      	lsls	r2, r3
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  402b94:	69bb      	ldr	r3, [r7, #24]
  402b96:	611a      	str	r2, [r3, #16]
  402b98:	e00c      	b.n	402bb4 <ioport_set_pin_dir+0x64>
	} else if (dir == IOPORT_DIR_INPUT) {
  402b9a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  402b9e:	2b00      	cmp	r3, #0
  402ba0:	d108      	bne.n	402bb4 <ioport_set_pin_dir+0x64>
  402ba2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  402ba4:	613b      	str	r3, [r7, #16]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  402ba6:	693b      	ldr	r3, [r7, #16]
  402ba8:	f003 031f 	and.w	r3, r3, #31
  402bac:	2201      	movs	r2, #1
  402bae:	409a      	lsls	r2, r3
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  402bb0:	69bb      	ldr	r3, [r7, #24]
  402bb2:	615a      	str	r2, [r3, #20]
  402bb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  402bb6:	60fb      	str	r3, [r7, #12]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  402bb8:	68fb      	ldr	r3, [r7, #12]
  402bba:	f003 031f 	and.w	r3, r3, #31
  402bbe:	2201      	movs	r2, #1
  402bc0:	409a      	lsls	r2, r3
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  402bc2:	69bb      	ldr	r3, [r7, #24]
  402bc4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	arch_ioport_set_pin_dir(pin, dir);
}
  402bc8:	3734      	adds	r7, #52	; 0x34
  402bca:	46bd      	mov	sp, r7
  402bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
  402bd0:	4770      	bx	lr
  402bd2:	bf00      	nop
  402bd4:	00200707 	.word	0x00200707

00402bd8 <ioport_set_pin_level>:
 *
 * \param pin IOPORT pin to configure
 * \param level Logical value of the pin
 */
static inline void ioport_set_pin_level(ioport_pin_t pin, bool level)
{
  402bd8:	b480      	push	{r7}
  402bda:	b08b      	sub	sp, #44	; 0x2c
  402bdc:	af00      	add	r7, sp, #0
  402bde:	6078      	str	r0, [r7, #4]
  402be0:	460b      	mov	r3, r1
  402be2:	70fb      	strb	r3, [r7, #3]
  402be4:	687b      	ldr	r3, [r7, #4]
  402be6:	627b      	str	r3, [r7, #36]	; 0x24
  402be8:	78fb      	ldrb	r3, [r7, #3]
  402bea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  402bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  402bf0:	61fb      	str	r3, [r7, #28]
  402bf2:	69fb      	ldr	r3, [r7, #28]
  402bf4:	61bb      	str	r3, [r7, #24]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  402bf6:	69bb      	ldr	r3, [r7, #24]
  402bf8:	095b      	lsrs	r3, r3, #5
  402bfa:	617b      	str	r3, [r7, #20]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  402bfc:	697a      	ldr	r2, [r7, #20]
  402bfe:	4b10      	ldr	r3, [pc, #64]	; (402c40 <ioport_set_pin_level+0x68>)
  402c00:	4413      	add	r3, r2
  402c02:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);
  402c04:	613b      	str	r3, [r7, #16]

	if (level) {
  402c06:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
  402c0a:	2b00      	cmp	r3, #0
  402c0c:	d009      	beq.n	402c22 <ioport_set_pin_level+0x4a>
  402c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  402c10:	60fb      	str	r3, [r7, #12]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  402c12:	68fb      	ldr	r3, [r7, #12]
  402c14:	f003 031f 	and.w	r3, r3, #31
  402c18:	2201      	movs	r2, #1
  402c1a:	409a      	lsls	r2, r3
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  402c1c:	693b      	ldr	r3, [r7, #16]
  402c1e:	631a      	str	r2, [r3, #48]	; 0x30
  402c20:	e008      	b.n	402c34 <ioport_set_pin_level+0x5c>
  402c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  402c24:	60bb      	str	r3, [r7, #8]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  402c26:	68bb      	ldr	r3, [r7, #8]
  402c28:	f003 031f 	and.w	r3, r3, #31
  402c2c:	2201      	movs	r2, #1
  402c2e:	409a      	lsls	r2, r3
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  402c30:	693b      	ldr	r3, [r7, #16]
  402c32:	635a      	str	r2, [r3, #52]	; 0x34
	arch_ioport_set_pin_level(pin, level);
}
  402c34:	372c      	adds	r7, #44	; 0x2c
  402c36:	46bd      	mov	sp, r7
  402c38:	f85d 7b04 	ldr.w	r7, [sp], #4
  402c3c:	4770      	bx	lr
  402c3e:	bf00      	nop
  402c40:	00200707 	.word	0x00200707

00402c44 <ioport_get_pin_level>:
 *
 * \param pin IOPORT pin to read
 * \return Current logical value of the specified pin
 */
static inline bool ioport_get_pin_level(ioport_pin_t pin)
{
  402c44:	b480      	push	{r7}
  402c46:	b089      	sub	sp, #36	; 0x24
  402c48:	af00      	add	r7, sp, #0
  402c4a:	6078      	str	r0, [r7, #4]
  402c4c:	687b      	ldr	r3, [r7, #4]
  402c4e:	61fb      	str	r3, [r7, #28]
  402c50:	69fb      	ldr	r3, [r7, #28]
  402c52:	61bb      	str	r3, [r7, #24]
  402c54:	69bb      	ldr	r3, [r7, #24]
  402c56:	617b      	str	r3, [r7, #20]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  402c58:	697b      	ldr	r3, [r7, #20]
  402c5a:	095b      	lsrs	r3, r3, #5
  402c5c:	613b      	str	r3, [r7, #16]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  402c5e:	693a      	ldr	r2, [r7, #16]
  402c60:	4b0b      	ldr	r3, [pc, #44]	; (402c90 <ioport_get_pin_level+0x4c>)
  402c62:	4413      	add	r3, r2
  402c64:	025b      	lsls	r3, r3, #9
	base->PIO_CODR = mask & ~level;
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  402c66:	6bda      	ldr	r2, [r3, #60]	; 0x3c
  402c68:	69fb      	ldr	r3, [r7, #28]
  402c6a:	60fb      	str	r3, [r7, #12]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  402c6c:	68fb      	ldr	r3, [r7, #12]
  402c6e:	f003 031f 	and.w	r3, r3, #31
  402c72:	2101      	movs	r1, #1
  402c74:	fa01 f303 	lsl.w	r3, r1, r3
	base->PIO_CODR = mask & ~level;
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  402c78:	4013      	ands	r3, r2
  402c7a:	2b00      	cmp	r3, #0
  402c7c:	bf14      	ite	ne
  402c7e:	2301      	movne	r3, #1
  402c80:	2300      	moveq	r3, #0
  402c82:	b2db      	uxtb	r3, r3
	return arch_ioport_get_pin_level(pin);
}
  402c84:	4618      	mov	r0, r3
  402c86:	3724      	adds	r7, #36	; 0x24
  402c88:	46bd      	mov	sp, r7
  402c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
  402c8e:	4770      	bx	lr
  402c90:	00200707 	.word	0x00200707

00402c94 <udelay>:
/*
 * We have a 100MHz clock, so 100 NOPs should be about 1ns. 
 * Tried to do a 1ns tick but the chip can't seem to handle it.
 */
void udelay(uint32_t ul_dly_ticks)
{
  402c94:	b480      	push	{r7}
  402c96:	b085      	sub	sp, #20
  402c98:	af00      	add	r7, sp, #0
  402c9a:	6078      	str	r0, [r7, #4]
	for (uint32_t i=0; i<ul_dly_ticks; i++)
  402c9c:	2300      	movs	r3, #0
  402c9e:	60fb      	str	r3, [r7, #12]
  402ca0:	e066      	b.n	402d70 <udelay+0xdc>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  402ca2:	bf00      	nop
  402ca4:	bf00      	nop
  402ca6:	bf00      	nop
  402ca8:	bf00      	nop
  402caa:	bf00      	nop
  402cac:	bf00      	nop
  402cae:	bf00      	nop
  402cb0:	bf00      	nop
  402cb2:	bf00      	nop
  402cb4:	bf00      	nop
  402cb6:	bf00      	nop
  402cb8:	bf00      	nop
  402cba:	bf00      	nop
  402cbc:	bf00      	nop
  402cbe:	bf00      	nop
  402cc0:	bf00      	nop
  402cc2:	bf00      	nop
  402cc4:	bf00      	nop
  402cc6:	bf00      	nop
  402cc8:	bf00      	nop
  402cca:	bf00      	nop
  402ccc:	bf00      	nop
  402cce:	bf00      	nop
  402cd0:	bf00      	nop
  402cd2:	bf00      	nop
  402cd4:	bf00      	nop
  402cd6:	bf00      	nop
  402cd8:	bf00      	nop
  402cda:	bf00      	nop
  402cdc:	bf00      	nop
  402cde:	bf00      	nop
  402ce0:	bf00      	nop
  402ce2:	bf00      	nop
  402ce4:	bf00      	nop
  402ce6:	bf00      	nop
  402ce8:	bf00      	nop
  402cea:	bf00      	nop
  402cec:	bf00      	nop
  402cee:	bf00      	nop
  402cf0:	bf00      	nop
  402cf2:	bf00      	nop
  402cf4:	bf00      	nop
  402cf6:	bf00      	nop
  402cf8:	bf00      	nop
  402cfa:	bf00      	nop
  402cfc:	bf00      	nop
  402cfe:	bf00      	nop
  402d00:	bf00      	nop
  402d02:	bf00      	nop
  402d04:	bf00      	nop
  402d06:	bf00      	nop
  402d08:	bf00      	nop
  402d0a:	bf00      	nop
  402d0c:	bf00      	nop
  402d0e:	bf00      	nop
  402d10:	bf00      	nop
  402d12:	bf00      	nop
  402d14:	bf00      	nop
  402d16:	bf00      	nop
  402d18:	bf00      	nop
  402d1a:	bf00      	nop
  402d1c:	bf00      	nop
  402d1e:	bf00      	nop
  402d20:	bf00      	nop
  402d22:	bf00      	nop
  402d24:	bf00      	nop
  402d26:	bf00      	nop
  402d28:	bf00      	nop
  402d2a:	bf00      	nop
  402d2c:	bf00      	nop
  402d2e:	bf00      	nop
  402d30:	bf00      	nop
  402d32:	bf00      	nop
  402d34:	bf00      	nop
  402d36:	bf00      	nop
  402d38:	bf00      	nop
  402d3a:	bf00      	nop
  402d3c:	bf00      	nop
  402d3e:	bf00      	nop
  402d40:	bf00      	nop
  402d42:	bf00      	nop
  402d44:	bf00      	nop
  402d46:	bf00      	nop
  402d48:	bf00      	nop
  402d4a:	bf00      	nop
  402d4c:	bf00      	nop
  402d4e:	bf00      	nop
  402d50:	bf00      	nop
  402d52:	bf00      	nop
  402d54:	bf00      	nop
  402d56:	bf00      	nop
  402d58:	bf00      	nop
  402d5a:	bf00      	nop
  402d5c:	bf00      	nop
  402d5e:	bf00      	nop
  402d60:	bf00      	nop
  402d62:	bf00      	nop
  402d64:	bf00      	nop
  402d66:	bf00      	nop
  402d68:	bf00      	nop
  402d6a:	68fb      	ldr	r3, [r7, #12]
  402d6c:	3301      	adds	r3, #1
  402d6e:	60fb      	str	r3, [r7, #12]
  402d70:	68fa      	ldr	r2, [r7, #12]
  402d72:	687b      	ldr	r3, [r7, #4]
  402d74:	429a      	cmp	r2, r3
  402d76:	d394      	bcc.n	402ca2 <udelay+0xe>
		__NOP(); __NOP(); __NOP(); __NOP(); __NOP(); __NOP(); __NOP(); __NOP(); __NOP(); __NOP();
		__NOP(); __NOP(); __NOP(); __NOP(); __NOP(); __NOP(); __NOP(); __NOP(); __NOP(); __NOP();
		__NOP(); __NOP(); __NOP(); __NOP(); __NOP(); __NOP(); __NOP(); __NOP(); __NOP(); __NOP();
		__NOP(); __NOP(); __NOP(); __NOP(); __NOP(); __NOP(); __NOP(); __NOP(); __NOP(); __NOP();
	}
}
  402d78:	3714      	adds	r7, #20
  402d7a:	46bd      	mov	sp, r7
  402d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
  402d80:	4770      	bx	lr
  402d82:	bf00      	nop

00402d84 <io_pin>:

#define EC_ONE_MICROSECOND 8

unsigned char io_pin(unsigned char idx);
unsigned char io_pin(unsigned char idx)
{
  402d84:	b480      	push	{r7}
  402d86:	b083      	sub	sp, #12
  402d88:	af00      	add	r7, sp, #0
  402d8a:	4603      	mov	r3, r0
  402d8c:	71fb      	strb	r3, [r7, #7]
	switch (idx)
  402d8e:	79fb      	ldrb	r3, [r7, #7]
  402d90:	2b04      	cmp	r3, #4
  402d92:	d817      	bhi.n	402dc4 <io_pin+0x40>
  402d94:	a201      	add	r2, pc, #4	; (adr r2, 402d9c <io_pin+0x18>)
  402d96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  402d9a:	bf00      	nop
  402d9c:	00402db1 	.word	0x00402db1
  402da0:	00402db5 	.word	0x00402db5
  402da4:	00402db9 	.word	0x00402db9
  402da8:	00402dbd 	.word	0x00402dbd
  402dac:	00402dc1 	.word	0x00402dc1
	{
		case 0:
			return ECLAVE_SERIAL_ID0;
  402db0:	230f      	movs	r3, #15
  402db2:	e008      	b.n	402dc6 <io_pin+0x42>
			break;
		case 1:
			return ECLAVE_SERIAL_ID1;
  402db4:	2310      	movs	r3, #16
  402db6:	e006      	b.n	402dc6 <io_pin+0x42>
			break;
		case 2:
			return ECLAVE_SERIAL_ID2;
  402db8:	2311      	movs	r3, #17
  402dba:	e004      	b.n	402dc6 <io_pin+0x42>
			break;
		case 3:
			return ECLAVE_SERIAL_ID3;
  402dbc:	2312      	movs	r3, #18
  402dbe:	e002      	b.n	402dc6 <io_pin+0x42>
			break;
		case 4:
			return ECLAVE_SERIAL_ID4;
  402dc0:	2313      	movs	r3, #19
  402dc2:	e000      	b.n	402dc6 <io_pin+0x42>
			break;
		default: 
			return 0; //TODO: return a better error code here
  402dc4:	2300      	movs	r3, #0
			break;
	}
}
  402dc6:	4618      	mov	r0, r3
  402dc8:	370c      	adds	r7, #12
  402dca:	46bd      	mov	sp, r7
  402dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
  402dd0:	4770      	bx	lr
  402dd2:	bf00      	nop

00402dd4 <drive_DQ_low>:

void drive_DQ_low(unsigned char idx);
void drive_DQ_low(unsigned char idx)
{
  402dd4:	b580      	push	{r7, lr}
  402dd6:	b084      	sub	sp, #16
  402dd8:	af00      	add	r7, sp, #0
  402dda:	4603      	mov	r3, r0
  402ddc:	71fb      	strb	r3, [r7, #7]
	unsigned char ioPin;
	int32_t ioFlags;
	
	ioPin = io_pin(idx);
  402dde:	79fb      	ldrb	r3, [r7, #7]
  402de0:	4618      	mov	r0, r3
  402de2:	4b08      	ldr	r3, [pc, #32]	; (402e04 <drive_DQ_low+0x30>)
  402de4:	4798      	blx	r3
  402de6:	4603      	mov	r3, r0
  402de8:	73fb      	strb	r3, [r7, #15]
	
	ioport_set_pin_dir(ioPin, IOPORT_DIR_OUTPUT);
  402dea:	7bfb      	ldrb	r3, [r7, #15]
  402dec:	4618      	mov	r0, r3
  402dee:	2101      	movs	r1, #1
  402df0:	4b05      	ldr	r3, [pc, #20]	; (402e08 <drive_DQ_low+0x34>)
  402df2:	4798      	blx	r3
	ioport_set_pin_level(ioPin, IOPORT_PIN_LEVEL_LOW);
  402df4:	7bfb      	ldrb	r3, [r7, #15]
  402df6:	4618      	mov	r0, r3
  402df8:	2100      	movs	r1, #0
  402dfa:	4b04      	ldr	r3, [pc, #16]	; (402e0c <drive_DQ_low+0x38>)
  402dfc:	4798      	blx	r3

}
  402dfe:	3710      	adds	r7, #16
  402e00:	46bd      	mov	sp, r7
  402e02:	bd80      	pop	{r7, pc}
  402e04:	00402d85 	.word	0x00402d85
  402e08:	00402b51 	.word	0x00402b51
  402e0c:	00402bd9 	.word	0x00402bd9

00402e10 <release_the_bus>:

void release_the_bus(unsigned char idx);
void release_the_bus(unsigned char idx)
{
  402e10:	b580      	push	{r7, lr}
  402e12:	b084      	sub	sp, #16
  402e14:	af00      	add	r7, sp, #0
  402e16:	4603      	mov	r3, r0
  402e18:	71fb      	strb	r3, [r7, #7]
	unsigned char ioPin;
	int32_t ioFlags;
	
	ioPin = io_pin(idx);
  402e1a:	79fb      	ldrb	r3, [r7, #7]
  402e1c:	4618      	mov	r0, r3
  402e1e:	4b06      	ldr	r3, [pc, #24]	; (402e38 <release_the_bus+0x28>)
  402e20:	4798      	blx	r3
  402e22:	4603      	mov	r3, r0
  402e24:	73fb      	strb	r3, [r7, #15]
	
	ioport_set_pin_dir(ioPin, IOPORT_DIR_INPUT);
  402e26:	7bfb      	ldrb	r3, [r7, #15]
  402e28:	4618      	mov	r0, r3
  402e2a:	2100      	movs	r1, #0
  402e2c:	4b03      	ldr	r3, [pc, #12]	; (402e3c <release_the_bus+0x2c>)
  402e2e:	4798      	blx	r3
	

}
  402e30:	3710      	adds	r7, #16
  402e32:	46bd      	mov	sp, r7
  402e34:	bd80      	pop	{r7, pc}
  402e36:	bf00      	nop
  402e38:	00402d85 	.word	0x00402d85
  402e3c:	00402b51 	.word	0x00402b51

00402e40 <gpio_input>:

void gpio_input(unsigned char idx) //14may15 experiment
{
  402e40:	b580      	push	{r7, lr}
  402e42:	b084      	sub	sp, #16
  402e44:	af00      	add	r7, sp, #0
  402e46:	4603      	mov	r3, r0
  402e48:	71fb      	strb	r3, [r7, #7]
	uint32_t ioFlags;
	unsigned char ioPin;
		
	ioPin = io_pin(idx);
  402e4a:	79fb      	ldrb	r3, [r7, #7]
  402e4c:	4618      	mov	r0, r3
  402e4e:	4b06      	ldr	r3, [pc, #24]	; (402e68 <gpio_input+0x28>)
  402e50:	4798      	blx	r3
  402e52:	4603      	mov	r3, r0
  402e54:	73fb      	strb	r3, [r7, #15]
		
	ioport_set_pin_dir(ioPin, IOPORT_DIR_INPUT);
  402e56:	7bfb      	ldrb	r3, [r7, #15]
  402e58:	4618      	mov	r0, r3
  402e5a:	2100      	movs	r1, #0
  402e5c:	4b03      	ldr	r3, [pc, #12]	; (402e6c <gpio_input+0x2c>)
  402e5e:	4798      	blx	r3


}
  402e60:	3710      	adds	r7, #16
  402e62:	46bd      	mov	sp, r7
  402e64:	bd80      	pop	{r7, pc}
  402e66:	bf00      	nop
  402e68:	00402d85 	.word	0x00402d85
  402e6c:	00402b51 	.word	0x00402b51

00402e70 <sample_line>:

unsigned char sample_line(unsigned char idx);
unsigned char sample_line(unsigned char idx)
{
  402e70:	b580      	push	{r7, lr}
  402e72:	b084      	sub	sp, #16
  402e74:	af00      	add	r7, sp, #0
  402e76:	4603      	mov	r3, r0
  402e78:	71fb      	strb	r3, [r7, #7]
//14may15 experiment		uint32_t ioFlags;
		unsigned char retVal, ioPin;
		
		ioPin = io_pin(idx);
  402e7a:	79fb      	ldrb	r3, [r7, #7]
  402e7c:	4618      	mov	r0, r3
  402e7e:	4b07      	ldr	r3, [pc, #28]	; (402e9c <sample_line+0x2c>)
  402e80:	4798      	blx	r3
  402e82:	4603      	mov	r3, r0
  402e84:	73fb      	strb	r3, [r7, #15]
		
//14may15 experiment		ioFlags = (GPIO_DIR_INPUT);
//14may15 experiment		gpio_configure_pin(ioPin, ioFlags);

		retVal = ioport_get_pin_level(ioPin);
  402e86:	7bfb      	ldrb	r3, [r7, #15]
  402e88:	4618      	mov	r0, r3
  402e8a:	4b05      	ldr	r3, [pc, #20]	; (402ea0 <sample_line+0x30>)
  402e8c:	4798      	blx	r3
  402e8e:	4603      	mov	r3, r0
  402e90:	73bb      	strb	r3, [r7, #14]

//14may15 experiment		ioFlags = (GPIO_DIR_OUTPUT);
//14may15 experiment		gpio_configure_pin(ioPin, ioFlags);

		return retVal;
  402e92:	7bbb      	ldrb	r3, [r7, #14]
}
  402e94:	4618      	mov	r0, r3
  402e96:	3710      	adds	r7, #16
  402e98:	46bd      	mov	sp, r7
  402e9a:	bd80      	pop	{r7, pc}
  402e9c:	00402d85 	.word	0x00402d85
  402ea0:	00402c45 	.word	0x00402c45

00402ea4 <SetSpeed>:

//-----------------------------------------------------------------------------
// Set the 1-Wire timing to 'standard' (standard=1) or 'overdrive' (standard=0).
//
void SetSpeed(int standard)
{
  402ea4:	b480      	push	{r7}
  402ea6:	b083      	sub	sp, #12
  402ea8:	af00      	add	r7, sp, #0
  402eaa:	6078      	str	r0, [r7, #4]
		J = 410;
	}
	
#endif

	if (standard) //experiment 16may15 cut everything in half, some issue with using the PLL? and fudge the tight numbers at the low end
  402eac:	687b      	ldr	r3, [r7, #4]
  402eae:	2b00      	cmp	r3, #0
  402eb0:	d01e      	beq.n	402ef0 <SetSpeed+0x4c>
	{
		// Standard Speed
		A = 0; //6;
  402eb2:	4b21      	ldr	r3, [pc, #132]	; (402f38 <SetSpeed+0x94>)
  402eb4:	2200      	movs	r2, #0
  402eb6:	601a      	str	r2, [r3, #0]
		B = 32; //64;
  402eb8:	4b20      	ldr	r3, [pc, #128]	; (402f3c <SetSpeed+0x98>)
  402eba:	2220      	movs	r2, #32
  402ebc:	601a      	str	r2, [r3, #0]
		C = 30; //60;
  402ebe:	4b20      	ldr	r3, [pc, #128]	; (402f40 <SetSpeed+0x9c>)
  402ec0:	221e      	movs	r2, #30
  402ec2:	601a      	str	r2, [r3, #0]
		D = 2; //10;
  402ec4:	4b1f      	ldr	r3, [pc, #124]	; (402f44 <SetSpeed+0xa0>)
  402ec6:	2202      	movs	r2, #2
  402ec8:	601a      	str	r2, [r3, #0]
		E = 2; //9;
  402eca:	4b1f      	ldr	r3, [pc, #124]	; (402f48 <SetSpeed+0xa4>)
  402ecc:	2202      	movs	r2, #2
  402ece:	601a      	str	r2, [r3, #0]
		F = 27; //55;
  402ed0:	4b1e      	ldr	r3, [pc, #120]	; (402f4c <SetSpeed+0xa8>)
  402ed2:	221b      	movs	r2, #27
  402ed4:	601a      	str	r2, [r3, #0]
		G = 0; //0;
  402ed6:	4b1e      	ldr	r3, [pc, #120]	; (402f50 <SetSpeed+0xac>)
  402ed8:	2200      	movs	r2, #0
  402eda:	601a      	str	r2, [r3, #0]
		H = 240; //480;
  402edc:	4b1d      	ldr	r3, [pc, #116]	; (402f54 <SetSpeed+0xb0>)
  402ede:	22f0      	movs	r2, #240	; 0xf0
  402ee0:	601a      	str	r2, [r3, #0]
		I = 35; //70;
  402ee2:	4b1d      	ldr	r3, [pc, #116]	; (402f58 <SetSpeed+0xb4>)
  402ee4:	2223      	movs	r2, #35	; 0x23
  402ee6:	601a      	str	r2, [r3, #0]
		J = 205; //410;
  402ee8:	4b1c      	ldr	r3, [pc, #112]	; (402f5c <SetSpeed+0xb8>)
  402eea:	22cd      	movs	r2, #205	; 0xcd
  402eec:	601a      	str	r2, [r3, #0]
  402eee:	e01d      	b.n	402f2c <SetSpeed+0x88>


	else
	{
		// Overdrive Speed
		A = 1.5;
  402ef0:	4b11      	ldr	r3, [pc, #68]	; (402f38 <SetSpeed+0x94>)
  402ef2:	2201      	movs	r2, #1
  402ef4:	601a      	str	r2, [r3, #0]
		B = 7.5;
  402ef6:	4b11      	ldr	r3, [pc, #68]	; (402f3c <SetSpeed+0x98>)
  402ef8:	2207      	movs	r2, #7
  402efa:	601a      	str	r2, [r3, #0]
		C = 7.5;
  402efc:	4b10      	ldr	r3, [pc, #64]	; (402f40 <SetSpeed+0x9c>)
  402efe:	2207      	movs	r2, #7
  402f00:	601a      	str	r2, [r3, #0]
		D = 2.5;
  402f02:	4b10      	ldr	r3, [pc, #64]	; (402f44 <SetSpeed+0xa0>)
  402f04:	2202      	movs	r2, #2
  402f06:	601a      	str	r2, [r3, #0]
		E = 0.75;
  402f08:	4b0f      	ldr	r3, [pc, #60]	; (402f48 <SetSpeed+0xa4>)
  402f0a:	2200      	movs	r2, #0
  402f0c:	601a      	str	r2, [r3, #0]
		F = 7;
  402f0e:	4b0f      	ldr	r3, [pc, #60]	; (402f4c <SetSpeed+0xa8>)
  402f10:	2207      	movs	r2, #7
  402f12:	601a      	str	r2, [r3, #0]
		G = 2.5;
  402f14:	4b0e      	ldr	r3, [pc, #56]	; (402f50 <SetSpeed+0xac>)
  402f16:	2202      	movs	r2, #2
  402f18:	601a      	str	r2, [r3, #0]
		H = 70;
  402f1a:	4b0e      	ldr	r3, [pc, #56]	; (402f54 <SetSpeed+0xb0>)
  402f1c:	2246      	movs	r2, #70	; 0x46
  402f1e:	601a      	str	r2, [r3, #0]
		I = 8.5;
  402f20:	4b0d      	ldr	r3, [pc, #52]	; (402f58 <SetSpeed+0xb4>)
  402f22:	2208      	movs	r2, #8
  402f24:	601a      	str	r2, [r3, #0]
		J = 40;
  402f26:	4b0d      	ldr	r3, [pc, #52]	; (402f5c <SetSpeed+0xb8>)
  402f28:	2228      	movs	r2, #40	; 0x28
  402f2a:	601a      	str	r2, [r3, #0]
	}
}
  402f2c:	370c      	adds	r7, #12
  402f2e:	46bd      	mov	sp, r7
  402f30:	f85d 7b04 	ldr.w	r7, [sp], #4
  402f34:	4770      	bx	lr
  402f36:	bf00      	nop
  402f38:	20400a98 	.word	0x20400a98
  402f3c:	20400a9c 	.word	0x20400a9c
  402f40:	20400aa4 	.word	0x20400aa4
  402f44:	20400a94 	.word	0x20400a94
  402f48:	20400ab0 	.word	0x20400ab0
  402f4c:	20400ab8 	.word	0x20400ab8
  402f50:	20400aa8 	.word	0x20400aa8
  402f54:	20400aac 	.word	0x20400aac
  402f58:	20400ab4 	.word	0x20400ab4
  402f5c:	20400aa0 	.word	0x20400aa0

00402f60 <OWTouchReset>:
// Generate a 1-Wire reset, return 1 if no presence detect was found,
// return 0 otherwise.
// (NOTE: Does not handle alarm presence from DS2404/DS1994)
//
int OWTouchReset(unsigned char idx)
{
  402f60:	b580      	push	{r7, lr}
  402f62:	b084      	sub	sp, #16
  402f64:	af00      	add	r7, sp, #0
  402f66:	4603      	mov	r3, r0
  402f68:	71fb      	strb	r3, [r7, #7]
	int result;

	udelay(A);
  402f6a:	4b17      	ldr	r3, [pc, #92]	; (402fc8 <OWTouchReset+0x68>)
  402f6c:	681b      	ldr	r3, [r3, #0]
  402f6e:	4618      	mov	r0, r3
  402f70:	4b16      	ldr	r3, [pc, #88]	; (402fcc <OWTouchReset+0x6c>)
  402f72:	4798      	blx	r3
	drive_DQ_low(idx);
  402f74:	79fb      	ldrb	r3, [r7, #7]
  402f76:	4618      	mov	r0, r3
  402f78:	4b15      	ldr	r3, [pc, #84]	; (402fd0 <OWTouchReset+0x70>)
  402f7a:	4798      	blx	r3
	udelay(H);	//tRSTL (reset low) 480-640us
  402f7c:	4b15      	ldr	r3, [pc, #84]	; (402fd4 <OWTouchReset+0x74>)
  402f7e:	681b      	ldr	r3, [r3, #0]
  402f80:	4618      	mov	r0, r3
  402f82:	4b12      	ldr	r3, [pc, #72]	; (402fcc <OWTouchReset+0x6c>)
  402f84:	4798      	blx	r3
	release_the_bus(idx);
  402f86:	79fb      	ldrb	r3, [r7, #7]
  402f88:	4618      	mov	r0, r3
  402f8a:	4b13      	ldr	r3, [pc, #76]	; (402fd8 <OWTouchReset+0x78>)
  402f8c:	4798      	blx	r3
	
	gpio_input(idx); //14may15 experiment
  402f8e:	79fb      	ldrb	r3, [r7, #7]
  402f90:	4618      	mov	r0, r3
  402f92:	4b12      	ldr	r3, [pc, #72]	; (402fdc <OWTouchReset+0x7c>)
  402f94:	4798      	blx	r3

	
	udelay(I);	//tMSP (presence detect sample) 60-75us
  402f96:	4b12      	ldr	r3, [pc, #72]	; (402fe0 <OWTouchReset+0x80>)
  402f98:	681b      	ldr	r3, [r3, #0]
  402f9a:	4618      	mov	r0, r3
  402f9c:	4b0b      	ldr	r3, [pc, #44]	; (402fcc <OWTouchReset+0x6c>)
  402f9e:	4798      	blx	r3
	result = sample_line(idx);
  402fa0:	79fb      	ldrb	r3, [r7, #7]
  402fa2:	4618      	mov	r0, r3
  402fa4:	4b0f      	ldr	r3, [pc, #60]	; (402fe4 <OWTouchReset+0x84>)
  402fa6:	4798      	blx	r3
  402fa8:	4603      	mov	r3, r0
  402faa:	60fb      	str	r3, [r7, #12]
	
	gpio_input(idx); //14may15 experiment
  402fac:	79fb      	ldrb	r3, [r7, #7]
  402fae:	4618      	mov	r0, r3
  402fb0:	4b0a      	ldr	r3, [pc, #40]	; (402fdc <OWTouchReset+0x7c>)
  402fb2:	4798      	blx	r3

	udelay(J); // Complete the reset sequence recovery 5-??us (no max?)
  402fb4:	4b0c      	ldr	r3, [pc, #48]	; (402fe8 <OWTouchReset+0x88>)
  402fb6:	681b      	ldr	r3, [r3, #0]
  402fb8:	4618      	mov	r0, r3
  402fba:	4b04      	ldr	r3, [pc, #16]	; (402fcc <OWTouchReset+0x6c>)
  402fbc:	4798      	blx	r3
	return result; // Return sample presence pulse result
  402fbe:	68fb      	ldr	r3, [r7, #12]
}
  402fc0:	4618      	mov	r0, r3
  402fc2:	3710      	adds	r7, #16
  402fc4:	46bd      	mov	sp, r7
  402fc6:	bd80      	pop	{r7, pc}
  402fc8:	20400a98 	.word	0x20400a98
  402fcc:	00402c95 	.word	0x00402c95
  402fd0:	00402dd5 	.word	0x00402dd5
  402fd4:	20400aac 	.word	0x20400aac
  402fd8:	00402e11 	.word	0x00402e11
  402fdc:	00402e41 	.word	0x00402e41
  402fe0:	20400ab4 	.word	0x20400ab4
  402fe4:	00402e71 	.word	0x00402e71
  402fe8:	20400aa0 	.word	0x20400aa0

00402fec <drive_DQ_low_and_release_the_bus>:

void drive_DQ_low_and_release_the_bus(unsigned char idx);
void drive_DQ_low_and_release_the_bus(unsigned char idx)
{
  402fec:	b580      	push	{r7, lr}
  402fee:	b084      	sub	sp, #16
  402ff0:	af00      	add	r7, sp, #0
  402ff2:	4603      	mov	r3, r0
  402ff4:	71fb      	strb	r3, [r7, #7]
	unsigned char ioPin;
	int32_t ioFlagsOutput, ioFlagsInput;
	
	ioPin = io_pin(idx);
  402ff6:	79fb      	ldrb	r3, [r7, #7]
  402ff8:	4618      	mov	r0, r3
  402ffa:	4b0d      	ldr	r3, [pc, #52]	; (403030 <drive_DQ_low_and_release_the_bus+0x44>)
  402ffc:	4798      	blx	r3
  402ffe:	4603      	mov	r3, r0
  403000:	73fb      	strb	r3, [r7, #15]
	
	ioport_set_pin_dir(ioPin, IOPORT_DIR_OUTPUT);
  403002:	7bfb      	ldrb	r3, [r7, #15]
  403004:	4618      	mov	r0, r3
  403006:	2101      	movs	r1, #1
  403008:	4b0a      	ldr	r3, [pc, #40]	; (403034 <drive_DQ_low_and_release_the_bus+0x48>)
  40300a:	4798      	blx	r3
	ioport_set_pin_level(ioPin, IOPORT_PIN_LEVEL_LOW);
  40300c:	7bfb      	ldrb	r3, [r7, #15]
  40300e:	4618      	mov	r0, r3
  403010:	2100      	movs	r1, #0
  403012:	4b09      	ldr	r3, [pc, #36]	; (403038 <drive_DQ_low_and_release_the_bus+0x4c>)
  403014:	4798      	blx	r3

	udelay(A);	//tW1L 5-15us
  403016:	4b09      	ldr	r3, [pc, #36]	; (40303c <drive_DQ_low_and_release_the_bus+0x50>)
  403018:	681b      	ldr	r3, [r3, #0]
  40301a:	4618      	mov	r0, r3
  40301c:	4b08      	ldr	r3, [pc, #32]	; (403040 <drive_DQ_low_and_release_the_bus+0x54>)
  40301e:	4798      	blx	r3

	ioport_set_pin_dir(ioPin, IOPORT_DIR_INPUT);
  403020:	7bfb      	ldrb	r3, [r7, #15]
  403022:	4618      	mov	r0, r3
  403024:	2100      	movs	r1, #0
  403026:	4b03      	ldr	r3, [pc, #12]	; (403034 <drive_DQ_low_and_release_the_bus+0x48>)
  403028:	4798      	blx	r3
	
}
  40302a:	3710      	adds	r7, #16
  40302c:	46bd      	mov	sp, r7
  40302e:	bd80      	pop	{r7, pc}
  403030:	00402d85 	.word	0x00402d85
  403034:	00402b51 	.word	0x00402b51
  403038:	00402bd9 	.word	0x00402bd9
  40303c:	20400a98 	.word	0x20400a98
  403040:	00402c95 	.word	0x00402c95

00403044 <OWWriteBit>:
//-----------------------------------------------------------------------------
// Send a 1-Wire write bit. Provide 10us recovery time.
//
void OWWriteBit(unsigned char idx, int bit);
void OWWriteBit(unsigned char idx, int bit)
{
  403044:	b580      	push	{r7, lr}
  403046:	b082      	sub	sp, #8
  403048:	af00      	add	r7, sp, #0
  40304a:	4603      	mov	r3, r0
  40304c:	6039      	str	r1, [r7, #0]
  40304e:	71fb      	strb	r3, [r7, #7]
	if (bit)
  403050:	683b      	ldr	r3, [r7, #0]
  403052:	2b00      	cmp	r3, #0
  403054:	d009      	beq.n	40306a <OWWriteBit+0x26>
	{
		// Write '1' bit
		drive_DQ_low_and_release_the_bus(idx);
  403056:	79fb      	ldrb	r3, [r7, #7]
  403058:	4618      	mov	r0, r3
  40305a:	4b0e      	ldr	r3, [pc, #56]	; (403094 <OWWriteBit+0x50>)
  40305c:	4798      	blx	r3
#if 0
		drive_DQ_low(idx);
//14may15 take this out entirely, we can't seem to control this precisely enough		cpu_delay_us(A, EC_CPU_CLOCK_100MHZ	//tW1L 5-15us
		release_the_bus(idx);
#endif
		udelay(B);	// Complete the time slot and 10us recovery tSLOT 65-??us (no max)
  40305e:	4b0e      	ldr	r3, [pc, #56]	; (403098 <OWWriteBit+0x54>)
  403060:	681b      	ldr	r3, [r3, #0]
  403062:	4618      	mov	r0, r3
  403064:	4b0d      	ldr	r3, [pc, #52]	; (40309c <OWWriteBit+0x58>)
  403066:	4798      	blx	r3
  403068:	e011      	b.n	40308e <OWWriteBit+0x4a>
	}
	else
	{
		// Write '0' bit
		drive_DQ_low(idx);
  40306a:	79fb      	ldrb	r3, [r7, #7]
  40306c:	4618      	mov	r0, r3
  40306e:	4b0c      	ldr	r3, [pc, #48]	; (4030a0 <OWWriteBit+0x5c>)
  403070:	4798      	blx	r3
		udelay(C);	//tW0L 60-120us
  403072:	4b0c      	ldr	r3, [pc, #48]	; (4030a4 <OWWriteBit+0x60>)
  403074:	681b      	ldr	r3, [r3, #0]
  403076:	4618      	mov	r0, r3
  403078:	4b08      	ldr	r3, [pc, #32]	; (40309c <OWWriteBit+0x58>)
  40307a:	4798      	blx	r3
		release_the_bus(idx);
  40307c:	79fb      	ldrb	r3, [r7, #7]
  40307e:	4618      	mov	r0, r3
  403080:	4b09      	ldr	r3, [pc, #36]	; (4030a8 <OWWriteBit+0x64>)
  403082:	4798      	blx	r3
		udelay(D);	//tREC 5-??us
  403084:	4b09      	ldr	r3, [pc, #36]	; (4030ac <OWWriteBit+0x68>)
  403086:	681b      	ldr	r3, [r3, #0]
  403088:	4618      	mov	r0, r3
  40308a:	4b04      	ldr	r3, [pc, #16]	; (40309c <OWWriteBit+0x58>)
  40308c:	4798      	blx	r3
	}
}
  40308e:	3708      	adds	r7, #8
  403090:	46bd      	mov	sp, r7
  403092:	bd80      	pop	{r7, pc}
  403094:	00402fed 	.word	0x00402fed
  403098:	20400a9c 	.word	0x20400a9c
  40309c:	00402c95 	.word	0x00402c95
  4030a0:	00402dd5 	.word	0x00402dd5
  4030a4:	20400aa4 	.word	0x20400aa4
  4030a8:	00402e11 	.word	0x00402e11
  4030ac:	20400a94 	.word	0x20400a94

004030b0 <OWReadBit>:
//-----------------------------------------------------------------------------
// Read a bit from the 1-Wire bus and return it. Provide 10us recovery time.
//
int OWReadBit(unsigned char idx);
int OWReadBit(unsigned char idx)
{
  4030b0:	b580      	push	{r7, lr}
  4030b2:	b084      	sub	sp, #16
  4030b4:	af00      	add	r7, sp, #0
  4030b6:	4603      	mov	r3, r0
  4030b8:	71fb      	strb	r3, [r7, #7]
#if 0
	drive_DQ_low(idx);
//14may15 take this out entirely, we can't seem to control this precisely enough	cpu_delay_us(A, EC_CPU_CLOCK_100MHZ	//tRL 5-15us
	release_the_bus(idx);
#endif
	drive_DQ_low_and_release_the_bus(idx);
  4030ba:	79fb      	ldrb	r3, [r7, #7]
  4030bc:	4618      	mov	r0, r3
  4030be:	4b0b      	ldr	r3, [pc, #44]	; (4030ec <OWReadBit+0x3c>)
  4030c0:	4798      	blx	r3
	
	udelay(E);	//tMSR 5-15us
  4030c2:	4b0b      	ldr	r3, [pc, #44]	; (4030f0 <OWReadBit+0x40>)
  4030c4:	681b      	ldr	r3, [r3, #0]
  4030c6:	4618      	mov	r0, r3
  4030c8:	4b0a      	ldr	r3, [pc, #40]	; (4030f4 <OWReadBit+0x44>)
  4030ca:	4798      	blx	r3
	result = sample_line(idx);
  4030cc:	79fb      	ldrb	r3, [r7, #7]
  4030ce:	4618      	mov	r0, r3
  4030d0:	4b09      	ldr	r3, [pc, #36]	; (4030f8 <OWReadBit+0x48>)
  4030d2:	4798      	blx	r3
  4030d4:	4603      	mov	r3, r0
  4030d6:	60fb      	str	r3, [r7, #12]
	udelay(F); // Complete the time slot and 10us recovery tREC 5+us
  4030d8:	4b08      	ldr	r3, [pc, #32]	; (4030fc <OWReadBit+0x4c>)
  4030da:	681b      	ldr	r3, [r3, #0]
  4030dc:	4618      	mov	r0, r3
  4030de:	4b05      	ldr	r3, [pc, #20]	; (4030f4 <OWReadBit+0x44>)
  4030e0:	4798      	blx	r3

	return result;
  4030e2:	68fb      	ldr	r3, [r7, #12]
}
  4030e4:	4618      	mov	r0, r3
  4030e6:	3710      	adds	r7, #16
  4030e8:	46bd      	mov	sp, r7
  4030ea:	bd80      	pop	{r7, pc}
  4030ec:	00402fed 	.word	0x00402fed
  4030f0:	20400ab0 	.word	0x20400ab0
  4030f4:	00402c95 	.word	0x00402c95
  4030f8:	00402e71 	.word	0x00402e71
  4030fc:	20400ab8 	.word	0x20400ab8

00403100 <OWWriteByte>:

//-----------------------------------------------------------------------------
// Write 1-Wire data byte
//
void OWWriteByte(unsigned char idx, int data)
{
  403100:	b580      	push	{r7, lr}
  403102:	b084      	sub	sp, #16
  403104:	af00      	add	r7, sp, #0
  403106:	4603      	mov	r3, r0
  403108:	6039      	str	r1, [r7, #0]
  40310a:	71fb      	strb	r3, [r7, #7]
	int loop;

	// Loop to write each bit in the byte, LS-bit first
	for (loop = 0; loop < 8; loop++)
  40310c:	2300      	movs	r3, #0
  40310e:	60fb      	str	r3, [r7, #12]
  403110:	e00d      	b.n	40312e <OWWriteByte+0x2e>
	{
		OWWriteBit(idx, data & 0x01);
  403112:	683b      	ldr	r3, [r7, #0]
  403114:	f003 0301 	and.w	r3, r3, #1
  403118:	79fa      	ldrb	r2, [r7, #7]
  40311a:	4610      	mov	r0, r2
  40311c:	4619      	mov	r1, r3
  40311e:	4b07      	ldr	r3, [pc, #28]	; (40313c <OWWriteByte+0x3c>)
  403120:	4798      	blx	r3

		// shift the data byte for the next bit
		data >>= 1;
  403122:	683b      	ldr	r3, [r7, #0]
  403124:	105b      	asrs	r3, r3, #1
  403126:	603b      	str	r3, [r7, #0]
void OWWriteByte(unsigned char idx, int data)
{
	int loop;

	// Loop to write each bit in the byte, LS-bit first
	for (loop = 0; loop < 8; loop++)
  403128:	68fb      	ldr	r3, [r7, #12]
  40312a:	3301      	adds	r3, #1
  40312c:	60fb      	str	r3, [r7, #12]
  40312e:	68fb      	ldr	r3, [r7, #12]
  403130:	2b07      	cmp	r3, #7
  403132:	ddee      	ble.n	403112 <OWWriteByte+0x12>
		OWWriteBit(idx, data & 0x01);

		// shift the data byte for the next bit
		data >>= 1;
	}
}
  403134:	3710      	adds	r7, #16
  403136:	46bd      	mov	sp, r7
  403138:	bd80      	pop	{r7, pc}
  40313a:	bf00      	nop
  40313c:	00403045 	.word	0x00403045

00403140 <OWReadByte>:

//-----------------------------------------------------------------------------
// Read 1-Wire data byte and return it
//
int OWReadByte(unsigned char idx)
{
  403140:	b580      	push	{r7, lr}
  403142:	b084      	sub	sp, #16
  403144:	af00      	add	r7, sp, #0
  403146:	4603      	mov	r3, r0
  403148:	71fb      	strb	r3, [r7, #7]
	int loop, result=0;
  40314a:	2300      	movs	r3, #0
  40314c:	60bb      	str	r3, [r7, #8]

	for (loop = 0; loop < 8; loop++)
  40314e:	2300      	movs	r3, #0
  403150:	60fb      	str	r3, [r7, #12]
  403152:	e010      	b.n	403176 <OWReadByte+0x36>
	{
		// shift the result to get it ready for the next bit
		result >>= 1;
  403154:	68bb      	ldr	r3, [r7, #8]
  403156:	105b      	asrs	r3, r3, #1
  403158:	60bb      	str	r3, [r7, #8]

		// if result is one, then set MS bit
		if (OWReadBit(idx))
  40315a:	79fb      	ldrb	r3, [r7, #7]
  40315c:	4618      	mov	r0, r3
  40315e:	4b0a      	ldr	r3, [pc, #40]	; (403188 <OWReadByte+0x48>)
  403160:	4798      	blx	r3
  403162:	4603      	mov	r3, r0
  403164:	2b00      	cmp	r3, #0
  403166:	d003      	beq.n	403170 <OWReadByte+0x30>
		result |= 0x80;
  403168:	68bb      	ldr	r3, [r7, #8]
  40316a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  40316e:	60bb      	str	r3, [r7, #8]
//
int OWReadByte(unsigned char idx)
{
	int loop, result=0;

	for (loop = 0; loop < 8; loop++)
  403170:	68fb      	ldr	r3, [r7, #12]
  403172:	3301      	adds	r3, #1
  403174:	60fb      	str	r3, [r7, #12]
  403176:	68fb      	ldr	r3, [r7, #12]
  403178:	2b07      	cmp	r3, #7
  40317a:	ddeb      	ble.n	403154 <OWReadByte+0x14>

		// if result is one, then set MS bit
		if (OWReadBit(idx))
		result |= 0x80;
	}
	return result;
  40317c:	68bb      	ldr	r3, [r7, #8]
}
  40317e:	4618      	mov	r0, r3
  403180:	3710      	adds	r7, #16
  403182:	46bd      	mov	sp, r7
  403184:	bd80      	pop	{r7, pc}
  403186:	bf00      	nop
  403188:	004030b1 	.word	0x004030b1

0040318c <crc8_add>:
	return OWTouchReset(idx);
}

/* Polynomial ^8 + ^5 + ^4 + 1 */
unsigned char crc8_add(unsigned char acc, unsigned char byte)
{
  40318c:	b480      	push	{r7}
  40318e:	b085      	sub	sp, #20
  403190:	af00      	add	r7, sp, #0
  403192:	4603      	mov	r3, r0
  403194:	460a      	mov	r2, r1
  403196:	71fb      	strb	r3, [r7, #7]
  403198:	4613      	mov	r3, r2
  40319a:	71bb      	strb	r3, [r7, #6]
   int i;
   acc ^= byte;
  40319c:	79fa      	ldrb	r2, [r7, #7]
  40319e:	79bb      	ldrb	r3, [r7, #6]
  4031a0:	4053      	eors	r3, r2
  4031a2:	71fb      	strb	r3, [r7, #7]
   for(i = 0; i < 8; i++) 
  4031a4:	2300      	movs	r3, #0
  4031a6:	60fb      	str	r3, [r7, #12]
  4031a8:	e012      	b.n	4031d0 <crc8_add+0x44>
   {
		if(acc & 1) 
  4031aa:	79fb      	ldrb	r3, [r7, #7]
  4031ac:	f003 0301 	and.w	r3, r3, #1
  4031b0:	2b00      	cmp	r3, #0
  4031b2:	d007      	beq.n	4031c4 <crc8_add+0x38>
		{
			acc = (acc >> 1) ^ 0x8c;
  4031b4:	79fb      	ldrb	r3, [r7, #7]
  4031b6:	085b      	lsrs	r3, r3, #1
  4031b8:	b2da      	uxtb	r2, r3
  4031ba:	f06f 0373 	mvn.w	r3, #115	; 0x73
  4031be:	4053      	eors	r3, r2
  4031c0:	71fb      	strb	r3, [r7, #7]
  4031c2:	e002      	b.n	4031ca <crc8_add+0x3e>
		} 
		else 
		{
			acc >>= 1;
  4031c4:	79fb      	ldrb	r3, [r7, #7]
  4031c6:	085b      	lsrs	r3, r3, #1
  4031c8:	71fb      	strb	r3, [r7, #7]
/* Polynomial ^8 + ^5 + ^4 + 1 */
unsigned char crc8_add(unsigned char acc, unsigned char byte)
{
   int i;
   acc ^= byte;
   for(i = 0; i < 8; i++) 
  4031ca:	68fb      	ldr	r3, [r7, #12]
  4031cc:	3301      	adds	r3, #1
  4031ce:	60fb      	str	r3, [r7, #12]
  4031d0:	68fb      	ldr	r3, [r7, #12]
  4031d2:	2b07      	cmp	r3, #7
  4031d4:	dde9      	ble.n	4031aa <crc8_add+0x1e>
		else 
		{
			acc >>= 1;
	    }
   }
   return acc;
  4031d6:	79fb      	ldrb	r3, [r7, #7]
}
  4031d8:	4618      	mov	r0, r3
  4031da:	3714      	adds	r7, #20
  4031dc:	46bd      	mov	sp, r7
  4031de:	f85d 7b04 	ldr.w	r7, [sp], #4
  4031e2:	4770      	bx	lr

004031e4 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  4031e4:	b480      	push	{r7}
  4031e6:	b083      	sub	sp, #12
  4031e8:	af00      	add	r7, sp, #0
  4031ea:	4603      	mov	r3, r0
  4031ec:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  4031ee:	4908      	ldr	r1, [pc, #32]	; (403210 <NVIC_EnableIRQ+0x2c>)
  4031f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4031f4:	095b      	lsrs	r3, r3, #5
  4031f6:	79fa      	ldrb	r2, [r7, #7]
  4031f8:	f002 021f 	and.w	r2, r2, #31
  4031fc:	2001      	movs	r0, #1
  4031fe:	fa00 f202 	lsl.w	r2, r0, r2
  403202:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  403206:	370c      	adds	r7, #12
  403208:	46bd      	mov	sp, r7
  40320a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40320e:	4770      	bx	lr
  403210:	e000e100 	.word	0xe000e100

00403214 <NVIC_DisableIRQ>:
    The function disables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  403214:	b480      	push	{r7}
  403216:	b083      	sub	sp, #12
  403218:	af00      	add	r7, sp, #0
  40321a:	4603      	mov	r3, r0
  40321c:	71fb      	strb	r3, [r7, #7]
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  40321e:	4909      	ldr	r1, [pc, #36]	; (403244 <NVIC_DisableIRQ+0x30>)
  403220:	f997 3007 	ldrsb.w	r3, [r7, #7]
  403224:	095b      	lsrs	r3, r3, #5
  403226:	79fa      	ldrb	r2, [r7, #7]
  403228:	f002 021f 	and.w	r2, r2, #31
  40322c:	2001      	movs	r0, #1
  40322e:	fa00 f202 	lsl.w	r2, r0, r2
  403232:	3320      	adds	r3, #32
  403234:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  403238:	370c      	adds	r7, #12
  40323a:	46bd      	mov	sp, r7
  40323c:	f85d 7b04 	ldr.w	r7, [sp], #4
  403240:	4770      	bx	lr
  403242:	bf00      	nop
  403244:	e000e100 	.word	0xe000e100

00403248 <NVIC_ClearPendingIRQ>:
    The function clears the pending bit of an external interrupt.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  403248:	b480      	push	{r7}
  40324a:	b083      	sub	sp, #12
  40324c:	af00      	add	r7, sp, #0
  40324e:	4603      	mov	r3, r0
  403250:	71fb      	strb	r3, [r7, #7]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  403252:	4909      	ldr	r1, [pc, #36]	; (403278 <NVIC_ClearPendingIRQ+0x30>)
  403254:	f997 3007 	ldrsb.w	r3, [r7, #7]
  403258:	095b      	lsrs	r3, r3, #5
  40325a:	79fa      	ldrb	r2, [r7, #7]
  40325c:	f002 021f 	and.w	r2, r2, #31
  403260:	2001      	movs	r0, #1
  403262:	fa00 f202 	lsl.w	r2, r0, r2
  403266:	3360      	adds	r3, #96	; 0x60
  403268:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  40326c:	370c      	adds	r7, #12
  40326e:	46bd      	mov	sp, r7
  403270:	f85d 7b04 	ldr.w	r7, [sp], #4
  403274:	4770      	bx	lr
  403276:	bf00      	nop
  403278:	e000e100 	.word	0xe000e100

0040327c <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  40327c:	b480      	push	{r7}
  40327e:	b083      	sub	sp, #12
  403280:	af00      	add	r7, sp, #0
  403282:	4603      	mov	r3, r0
  403284:	6039      	str	r1, [r7, #0]
  403286:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
  403288:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40328c:	2b00      	cmp	r3, #0
  40328e:	da0b      	bge.n	4032a8 <NVIC_SetPriority+0x2c>
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  403290:	490d      	ldr	r1, [pc, #52]	; (4032c8 <NVIC_SetPriority+0x4c>)
  403292:	79fb      	ldrb	r3, [r7, #7]
  403294:	f003 030f 	and.w	r3, r3, #15
  403298:	3b04      	subs	r3, #4
  40329a:	683a      	ldr	r2, [r7, #0]
  40329c:	b2d2      	uxtb	r2, r2
  40329e:	0152      	lsls	r2, r2, #5
  4032a0:	b2d2      	uxtb	r2, r2
  4032a2:	440b      	add	r3, r1
  4032a4:	761a      	strb	r2, [r3, #24]
  4032a6:	e009      	b.n	4032bc <NVIC_SetPriority+0x40>
  else {
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  4032a8:	4908      	ldr	r1, [pc, #32]	; (4032cc <NVIC_SetPriority+0x50>)
  4032aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4032ae:	683a      	ldr	r2, [r7, #0]
  4032b0:	b2d2      	uxtb	r2, r2
  4032b2:	0152      	lsls	r2, r2, #5
  4032b4:	b2d2      	uxtb	r2, r2
  4032b6:	440b      	add	r3, r1
  4032b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
  4032bc:	370c      	adds	r7, #12
  4032be:	46bd      	mov	sp, r7
  4032c0:	f85d 7b04 	ldr.w	r7, [sp], #4
  4032c4:	4770      	bx	lr
  4032c6:	bf00      	nop
  4032c8:	e000ed00 	.word	0xe000ed00
  4032cc:	e000e100 	.word	0xe000e100

004032d0 <SysTick_Config>:
    function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  4032d0:	b580      	push	{r7, lr}
  4032d2:	b082      	sub	sp, #8
  4032d4:	af00      	add	r7, sp, #0
  4032d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
  4032d8:	687b      	ldr	r3, [r7, #4]
  4032da:	3b01      	subs	r3, #1
  4032dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
  4032e0:	d301      	bcc.n	4032e6 <SysTick_Config+0x16>
  4032e2:	2301      	movs	r3, #1
  4032e4:	e00f      	b.n	403306 <SysTick_Config+0x36>

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
  4032e6:	4a0a      	ldr	r2, [pc, #40]	; (403310 <SysTick_Config+0x40>)
  4032e8:	687b      	ldr	r3, [r7, #4]
  4032ea:	3b01      	subs	r3, #1
  4032ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  4032ee:	f04f 30ff 	mov.w	r0, #4294967295
  4032f2:	2107      	movs	r1, #7
  4032f4:	4b07      	ldr	r3, [pc, #28]	; (403314 <SysTick_Config+0x44>)
  4032f6:	4798      	blx	r3
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
  4032f8:	4b05      	ldr	r3, [pc, #20]	; (403310 <SysTick_Config+0x40>)
  4032fa:	2200      	movs	r2, #0
  4032fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
  4032fe:	4b04      	ldr	r3, [pc, #16]	; (403310 <SysTick_Config+0x40>)
  403300:	2207      	movs	r2, #7
  403302:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
  403304:	2300      	movs	r3, #0
}
  403306:	4618      	mov	r0, r3
  403308:	3708      	adds	r7, #8
  40330a:	46bd      	mov	sp, r7
  40330c:	bd80      	pop	{r7, pc}
  40330e:	bf00      	nop
  403310:	e000e010 	.word	0xe000e010
  403314:	0040327d 	.word	0x0040327d

00403318 <afec_ch_sanity_check>:
 * \param channel  AFEC channel number.
 *
 */
static inline void afec_ch_sanity_check(Afec *const afec,
		const enum afec_channel_num channel)
{
  403318:	b480      	push	{r7}
  40331a:	b083      	sub	sp, #12
  40331c:	af00      	add	r7, sp, #0
  40331e:	6078      	str	r0, [r7, #4]
  403320:	460b      	mov	r3, r1
  403322:	807b      	strh	r3, [r7, #2]
	#endif
	} else if (afec == AFEC1) {
		Assert(channel < NB_CH_AFE1);
	}
	UNUSED(channel);
}
  403324:	370c      	adds	r7, #12
  403326:	46bd      	mov	sp, r7
  403328:	f85d 7b04 	ldr.w	r7, [sp], #4
  40332c:	4770      	bx	lr
  40332e:	bf00      	nop

00403330 <afec_set_trigger>:
 * \param trigger Conversion trigger.
 *
 */
static inline void afec_set_trigger(Afec *const afec,
		const enum afec_trigger trigger)
{
  403330:	b480      	push	{r7}
  403332:	b085      	sub	sp, #20
  403334:	af00      	add	r7, sp, #0
  403336:	6078      	str	r0, [r7, #4]
  403338:	460b      	mov	r3, r1
  40333a:	70fb      	strb	r3, [r7, #3]
	uint32_t reg;

	reg = afec->AFEC_MR;
  40333c:	687b      	ldr	r3, [r7, #4]
  40333e:	685b      	ldr	r3, [r3, #4]
  403340:	60fb      	str	r3, [r7, #12]

	if (trigger == AFEC_TRIG_FREERUN) {
  403342:	78fb      	ldrb	r3, [r7, #3]
  403344:	2bff      	cmp	r3, #255	; 0xff
  403346:	d104      	bne.n	403352 <afec_set_trigger+0x22>
		reg |= AFEC_MR_FREERUN_ON;
  403348:	68fb      	ldr	r3, [r7, #12]
  40334a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  40334e:	60fb      	str	r3, [r7, #12]
  403350:	e007      	b.n	403362 <afec_set_trigger+0x32>
	} else {
		reg &= ~(AFEC_MR_TRGSEL_Msk | AFEC_MR_TRGEN | AFEC_MR_FREERUN_ON);
  403352:	68fb      	ldr	r3, [r7, #12]
  403354:	f023 038f 	bic.w	r3, r3, #143	; 0x8f
  403358:	60fb      	str	r3, [r7, #12]
		reg |= trigger;
  40335a:	78fb      	ldrb	r3, [r7, #3]
  40335c:	68fa      	ldr	r2, [r7, #12]
  40335e:	4313      	orrs	r3, r2
  403360:	60fb      	str	r3, [r7, #12]
	}

	afec->AFEC_MR = reg;
  403362:	687b      	ldr	r3, [r7, #4]
  403364:	68fa      	ldr	r2, [r7, #12]
  403366:	605a      	str	r2, [r3, #4]
}
  403368:	3714      	adds	r7, #20
  40336a:	46bd      	mov	sp, r7
  40336c:	f85d 7b04 	ldr.w	r7, [sp], #4
  403370:	4770      	bx	lr
  403372:	bf00      	nop

00403374 <afec_start_software_conversion>:
 * this function can NOT start analog to digital conversion.
 *
 * \param afec  Base address of the AFEC.
 */
static inline void afec_start_software_conversion(Afec *const afec)
{
  403374:	b480      	push	{r7}
  403376:	b083      	sub	sp, #12
  403378:	af00      	add	r7, sp, #0
  40337a:	6078      	str	r0, [r7, #4]
	afec->AFEC_CR = AFEC_CR_START;
  40337c:	687b      	ldr	r3, [r7, #4]
  40337e:	2202      	movs	r2, #2
  403380:	601a      	str	r2, [r3, #0]
}
  403382:	370c      	adds	r7, #12
  403384:	46bd      	mov	sp, r7
  403386:	f85d 7b04 	ldr.w	r7, [sp], #4
  40338a:	4770      	bx	lr

0040338c <afec_channel_enable>:
 * \param afec  Base address of the AFEC.
 * \param afec_ch AFEC channel number.
 */
static inline void afec_channel_enable(Afec *const afec,
		const enum afec_channel_num afec_ch)
{
  40338c:	b580      	push	{r7, lr}
  40338e:	b082      	sub	sp, #8
  403390:	af00      	add	r7, sp, #0
  403392:	6078      	str	r0, [r7, #4]
  403394:	460b      	mov	r3, r1
  403396:	807b      	strh	r3, [r7, #2]
	if (afec_ch != AFEC_CHANNEL_ALL) {
  403398:	887b      	ldrh	r3, [r7, #2]
  40339a:	f640 72ff 	movw	r2, #4095	; 0xfff
  40339e:	4293      	cmp	r3, r2
  4033a0:	d004      	beq.n	4033ac <afec_channel_enable+0x20>
		afec_ch_sanity_check(afec, afec_ch);
  4033a2:	887b      	ldrh	r3, [r7, #2]
  4033a4:	6878      	ldr	r0, [r7, #4]
  4033a6:	4619      	mov	r1, r3
  4033a8:	4b09      	ldr	r3, [pc, #36]	; (4033d0 <afec_channel_enable+0x44>)
  4033aa:	4798      	blx	r3
	}

	afec->AFEC_CHER = (afec_ch == AFEC_CHANNEL_ALL) ?
  4033ac:	887b      	ldrh	r3, [r7, #2]
  4033ae:	f640 72ff 	movw	r2, #4095	; 0xfff
  4033b2:	4293      	cmp	r3, r2
  4033b4:	d005      	beq.n	4033c2 <afec_channel_enable+0x36>
			AFEC_CHANNEL_ALL : 1 << afec_ch;
  4033b6:	887b      	ldrh	r3, [r7, #2]
  4033b8:	2201      	movs	r2, #1
  4033ba:	fa02 f303 	lsl.w	r3, r2, r3
{
	if (afec_ch != AFEC_CHANNEL_ALL) {
		afec_ch_sanity_check(afec, afec_ch);
	}

	afec->AFEC_CHER = (afec_ch == AFEC_CHANNEL_ALL) ?
  4033be:	461a      	mov	r2, r3
  4033c0:	e001      	b.n	4033c6 <afec_channel_enable+0x3a>
  4033c2:	f640 72ff 	movw	r2, #4095	; 0xfff
  4033c6:	687b      	ldr	r3, [r7, #4]
  4033c8:	615a      	str	r2, [r3, #20]
			AFEC_CHANNEL_ALL : 1 << afec_ch;
}
  4033ca:	3708      	adds	r7, #8
  4033cc:	46bd      	mov	sp, r7
  4033ce:	bd80      	pop	{r7, pc}
  4033d0:	00403319 	.word	0x00403319

004033d4 <afec_channel_disable>:
 * \param afec  Base address of the AFEC.
 * \param afec_ch AFEC channel number.
 */
static inline void afec_channel_disable(Afec *const afec,
		const enum afec_channel_num afec_ch)
{
  4033d4:	b580      	push	{r7, lr}
  4033d6:	b082      	sub	sp, #8
  4033d8:	af00      	add	r7, sp, #0
  4033da:	6078      	str	r0, [r7, #4]
  4033dc:	460b      	mov	r3, r1
  4033de:	807b      	strh	r3, [r7, #2]
	if (afec_ch != AFEC_CHANNEL_ALL) {
  4033e0:	887b      	ldrh	r3, [r7, #2]
  4033e2:	f640 72ff 	movw	r2, #4095	; 0xfff
  4033e6:	4293      	cmp	r3, r2
  4033e8:	d004      	beq.n	4033f4 <afec_channel_disable+0x20>
		afec_ch_sanity_check(afec, afec_ch);
  4033ea:	887b      	ldrh	r3, [r7, #2]
  4033ec:	6878      	ldr	r0, [r7, #4]
  4033ee:	4619      	mov	r1, r3
  4033f0:	4b09      	ldr	r3, [pc, #36]	; (403418 <afec_channel_disable+0x44>)
  4033f2:	4798      	blx	r3
	}

	afec->AFEC_CHDR = (afec_ch == AFEC_CHANNEL_ALL) ?
  4033f4:	887b      	ldrh	r3, [r7, #2]
  4033f6:	f640 72ff 	movw	r2, #4095	; 0xfff
  4033fa:	4293      	cmp	r3, r2
  4033fc:	d005      	beq.n	40340a <afec_channel_disable+0x36>
			AFEC_CHANNEL_ALL : 1 << afec_ch;
  4033fe:	887b      	ldrh	r3, [r7, #2]
  403400:	2201      	movs	r2, #1
  403402:	fa02 f303 	lsl.w	r3, r2, r3
{
	if (afec_ch != AFEC_CHANNEL_ALL) {
		afec_ch_sanity_check(afec, afec_ch);
	}

	afec->AFEC_CHDR = (afec_ch == AFEC_CHANNEL_ALL) ?
  403406:	461a      	mov	r2, r3
  403408:	e001      	b.n	40340e <afec_channel_disable+0x3a>
  40340a:	f640 72ff 	movw	r2, #4095	; 0xfff
  40340e:	687b      	ldr	r3, [r7, #4]
  403410:	619a      	str	r2, [r3, #24]
			AFEC_CHANNEL_ALL : 1 << afec_ch;
}
  403412:	3708      	adds	r7, #8
  403414:	46bd      	mov	sp, r7
  403416:	bd80      	pop	{r7, pc}
  403418:	00403319 	.word	0x00403319

0040341c <afec_get_latest_value>:
 * \param afec  Base address of the AFEC.
 *
 * \return AFEC latest converted value.
 */
static inline uint32_t afec_get_latest_value(Afec *const afec)
{
  40341c:	b480      	push	{r7}
  40341e:	b083      	sub	sp, #12
  403420:	af00      	add	r7, sp, #0
  403422:	6078      	str	r0, [r7, #4]
	return afec->AFEC_LCDR & AFEC_LCDR_LDATA_Msk;
  403424:	687b      	ldr	r3, [r7, #4]
  403426:	6a1b      	ldr	r3, [r3, #32]
  403428:	b29b      	uxth	r3, r3
}
  40342a:	4618      	mov	r0, r3
  40342c:	370c      	adds	r7, #12
  40342e:	46bd      	mov	sp, r7
  403430:	f85d 7b04 	ldr.w	r7, [sp], #4
  403434:	4770      	bx	lr
  403436:	bf00      	nop

00403438 <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  403438:	b480      	push	{r7}
  40343a:	b083      	sub	sp, #12
  40343c:	af00      	add	r7, sp, #0
  40343e:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  403440:	687b      	ldr	r3, [r7, #4]
  403442:	2b07      	cmp	r3, #7
  403444:	d825      	bhi.n	403492 <osc_get_rate+0x5a>
  403446:	a201      	add	r2, pc, #4	; (adr r2, 40344c <osc_get_rate+0x14>)
  403448:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  40344c:	0040346d 	.word	0x0040346d
  403450:	00403473 	.word	0x00403473
  403454:	00403479 	.word	0x00403479
  403458:	0040347f 	.word	0x0040347f
  40345c:	00403483 	.word	0x00403483
  403460:	00403487 	.word	0x00403487
  403464:	0040348b 	.word	0x0040348b
  403468:	0040348f 	.word	0x0040348f
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  40346c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  403470:	e010      	b.n	403494 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  403472:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  403476:	e00d      	b.n	403494 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  403478:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  40347c:	e00a      	b.n	403494 <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  40347e:	4b08      	ldr	r3, [pc, #32]	; (4034a0 <osc_get_rate+0x68>)
  403480:	e008      	b.n	403494 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  403482:	4b08      	ldr	r3, [pc, #32]	; (4034a4 <osc_get_rate+0x6c>)
  403484:	e006      	b.n	403494 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  403486:	4b08      	ldr	r3, [pc, #32]	; (4034a8 <osc_get_rate+0x70>)
  403488:	e004      	b.n	403494 <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  40348a:	4b08      	ldr	r3, [pc, #32]	; (4034ac <osc_get_rate+0x74>)
  40348c:	e002      	b.n	403494 <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  40348e:	4b06      	ldr	r3, [pc, #24]	; (4034a8 <osc_get_rate+0x70>)
  403490:	e000      	b.n	403494 <osc_get_rate+0x5c>
	}

	return 0;
  403492:	2300      	movs	r3, #0
}
  403494:	4618      	mov	r0, r3
  403496:	370c      	adds	r7, #12
  403498:	46bd      	mov	sp, r7
  40349a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40349e:	4770      	bx	lr
  4034a0:	003d0900 	.word	0x003d0900
  4034a4:	007a1200 	.word	0x007a1200
  4034a8:	00b71b00 	.word	0x00b71b00
  4034ac:	00f42400 	.word	0x00f42400

004034b0 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  4034b0:	b580      	push	{r7, lr}
  4034b2:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  4034b4:	2006      	movs	r0, #6
  4034b6:	4b05      	ldr	r3, [pc, #20]	; (4034cc <sysclk_get_main_hz+0x1c>)
  4034b8:	4798      	blx	r3
  4034ba:	4602      	mov	r2, r0
  4034bc:	4613      	mov	r3, r2
  4034be:	009b      	lsls	r3, r3, #2
  4034c0:	4413      	add	r3, r2
  4034c2:	009a      	lsls	r2, r3, #2
  4034c4:	4413      	add	r3, r2
  4034c6:	089b      	lsrs	r3, r3, #2
#endif
	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  4034c8:	4618      	mov	r0, r3
  4034ca:	bd80      	pop	{r7, pc}
  4034cc:	00403439 	.word	0x00403439

004034d0 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
  4034d0:	b580      	push	{r7, lr}
  4034d2:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  4034d4:	4b02      	ldr	r3, [pc, #8]	; (4034e0 <sysclk_get_cpu_hz+0x10>)
  4034d6:	4798      	blx	r3
  4034d8:	4603      	mov	r3, r0
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  4034da:	4618      	mov	r0, r3
  4034dc:	bd80      	pop	{r7, pc}
  4034de:	bf00      	nop
  4034e0:	004034b1 	.word	0x004034b1

004034e4 <sysclk_get_peripheral_hz>:
 * \brief Retrieves the current rate in Hz of the peripheral clocks.
 *
 * \return Frequency of the peripheral clocks, in Hz.
 */
static inline uint32_t sysclk_get_peripheral_hz(void)
{
  4034e4:	b580      	push	{r7, lr}
  4034e6:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  4034e8:	4b02      	ldr	r3, [pc, #8]	; (4034f4 <sysclk_get_peripheral_hz+0x10>)
  4034ea:	4798      	blx	r3
  4034ec:	4603      	mov	r3, r0
		(((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 : (1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos))) * CONFIG_SYSCLK_DIV);
}
  4034ee:	4618      	mov	r0, r3
  4034f0:	bd80      	pop	{r7, pc}
  4034f2:	bf00      	nop
  4034f4:	004034b1 	.word	0x004034b1

004034f8 <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
  4034f8:	b580      	push	{r7, lr}
  4034fa:	b082      	sub	sp, #8
  4034fc:	af00      	add	r7, sp, #0
  4034fe:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  403500:	6878      	ldr	r0, [r7, #4]
  403502:	4b02      	ldr	r3, [pc, #8]	; (40350c <sysclk_enable_peripheral_clock+0x14>)
  403504:	4798      	blx	r3
}
  403506:	3708      	adds	r7, #8
  403508:	46bd      	mov	sp, r7
  40350a:	bd80      	pop	{r7, pc}
  40350c:	004016d1 	.word	0x004016d1

00403510 <ioport_set_pin_dir>:
 * \param pin IOPORT pin to configure
 * \param dir Direction to set for the specified pin (\ref ioport_direction)
 */
static inline void ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
  403510:	b480      	push	{r7}
  403512:	b08d      	sub	sp, #52	; 0x34
  403514:	af00      	add	r7, sp, #0
  403516:	6078      	str	r0, [r7, #4]
  403518:	460b      	mov	r3, r1
  40351a:	70fb      	strb	r3, [r7, #3]
  40351c:	687b      	ldr	r3, [r7, #4]
  40351e:	62fb      	str	r3, [r7, #44]	; 0x2c
  403520:	78fb      	ldrb	r3, [r7, #3]
  403522:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  403526:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  403528:	627b      	str	r3, [r7, #36]	; 0x24
  40352a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40352c:	623b      	str	r3, [r7, #32]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  40352e:	6a3b      	ldr	r3, [r7, #32]
  403530:	095b      	lsrs	r3, r3, #5
  403532:	61fb      	str	r3, [r7, #28]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  403534:	69fa      	ldr	r2, [r7, #28]
  403536:	4b17      	ldr	r3, [pc, #92]	; (403594 <ioport_set_pin_dir+0x84>)
  403538:	4413      	add	r3, r2
  40353a:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);
  40353c:	61bb      	str	r3, [r7, #24]

	if (dir == IOPORT_DIR_OUTPUT) {
  40353e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  403542:	2b01      	cmp	r3, #1
  403544:	d109      	bne.n	40355a <ioport_set_pin_dir+0x4a>
  403546:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  403548:	617b      	str	r3, [r7, #20]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  40354a:	697b      	ldr	r3, [r7, #20]
  40354c:	f003 031f 	and.w	r3, r3, #31
  403550:	2201      	movs	r2, #1
  403552:	409a      	lsls	r2, r3
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  403554:	69bb      	ldr	r3, [r7, #24]
  403556:	611a      	str	r2, [r3, #16]
  403558:	e00c      	b.n	403574 <ioport_set_pin_dir+0x64>
	} else if (dir == IOPORT_DIR_INPUT) {
  40355a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  40355e:	2b00      	cmp	r3, #0
  403560:	d108      	bne.n	403574 <ioport_set_pin_dir+0x64>
  403562:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  403564:	613b      	str	r3, [r7, #16]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  403566:	693b      	ldr	r3, [r7, #16]
  403568:	f003 031f 	and.w	r3, r3, #31
  40356c:	2201      	movs	r2, #1
  40356e:	409a      	lsls	r2, r3
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  403570:	69bb      	ldr	r3, [r7, #24]
  403572:	615a      	str	r2, [r3, #20]
  403574:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  403576:	60fb      	str	r3, [r7, #12]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  403578:	68fb      	ldr	r3, [r7, #12]
  40357a:	f003 031f 	and.w	r3, r3, #31
  40357e:	2201      	movs	r2, #1
  403580:	409a      	lsls	r2, r3
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  403582:	69bb      	ldr	r3, [r7, #24]
  403584:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	arch_ioport_set_pin_dir(pin, dir);
}
  403588:	3734      	adds	r7, #52	; 0x34
  40358a:	46bd      	mov	sp, r7
  40358c:	f85d 7b04 	ldr.w	r7, [sp], #4
  403590:	4770      	bx	lr
  403592:	bf00      	nop
  403594:	00200707 	.word	0x00200707

00403598 <ioport_set_pin_level>:
 *
 * \param pin IOPORT pin to configure
 * \param level Logical value of the pin
 */
static inline void ioport_set_pin_level(ioport_pin_t pin, bool level)
{
  403598:	b480      	push	{r7}
  40359a:	b08b      	sub	sp, #44	; 0x2c
  40359c:	af00      	add	r7, sp, #0
  40359e:	6078      	str	r0, [r7, #4]
  4035a0:	460b      	mov	r3, r1
  4035a2:	70fb      	strb	r3, [r7, #3]
  4035a4:	687b      	ldr	r3, [r7, #4]
  4035a6:	627b      	str	r3, [r7, #36]	; 0x24
  4035a8:	78fb      	ldrb	r3, [r7, #3]
  4035aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  4035ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4035b0:	61fb      	str	r3, [r7, #28]
  4035b2:	69fb      	ldr	r3, [r7, #28]
  4035b4:	61bb      	str	r3, [r7, #24]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  4035b6:	69bb      	ldr	r3, [r7, #24]
  4035b8:	095b      	lsrs	r3, r3, #5
  4035ba:	617b      	str	r3, [r7, #20]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  4035bc:	697a      	ldr	r2, [r7, #20]
  4035be:	4b10      	ldr	r3, [pc, #64]	; (403600 <ioport_set_pin_level+0x68>)
  4035c0:	4413      	add	r3, r2
  4035c2:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);
  4035c4:	613b      	str	r3, [r7, #16]

	if (level) {
  4035c6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
  4035ca:	2b00      	cmp	r3, #0
  4035cc:	d009      	beq.n	4035e2 <ioport_set_pin_level+0x4a>
  4035ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4035d0:	60fb      	str	r3, [r7, #12]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  4035d2:	68fb      	ldr	r3, [r7, #12]
  4035d4:	f003 031f 	and.w	r3, r3, #31
  4035d8:	2201      	movs	r2, #1
  4035da:	409a      	lsls	r2, r3
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4035dc:	693b      	ldr	r3, [r7, #16]
  4035de:	631a      	str	r2, [r3, #48]	; 0x30
  4035e0:	e008      	b.n	4035f4 <ioport_set_pin_level+0x5c>
  4035e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4035e4:	60bb      	str	r3, [r7, #8]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  4035e6:	68bb      	ldr	r3, [r7, #8]
  4035e8:	f003 031f 	and.w	r3, r3, #31
  4035ec:	2201      	movs	r2, #1
  4035ee:	409a      	lsls	r2, r3
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  4035f0:	693b      	ldr	r3, [r7, #16]
  4035f2:	635a      	str	r2, [r3, #52]	; 0x34
	arch_ioport_set_pin_level(pin, level);
}
  4035f4:	372c      	adds	r7, #44	; 0x2c
  4035f6:	46bd      	mov	sp, r7
  4035f8:	f85d 7b04 	ldr.w	r7, [sp], #4
  4035fc:	4770      	bx	lr
  4035fe:	bf00      	nop
  403600:	00200707 	.word	0x00200707

00403604 <ioport_get_pin_level>:
 *
 * \param pin IOPORT pin to read
 * \return Current logical value of the specified pin
 */
static inline bool ioport_get_pin_level(ioport_pin_t pin)
{
  403604:	b480      	push	{r7}
  403606:	b089      	sub	sp, #36	; 0x24
  403608:	af00      	add	r7, sp, #0
  40360a:	6078      	str	r0, [r7, #4]
  40360c:	687b      	ldr	r3, [r7, #4]
  40360e:	61fb      	str	r3, [r7, #28]
  403610:	69fb      	ldr	r3, [r7, #28]
  403612:	61bb      	str	r3, [r7, #24]
  403614:	69bb      	ldr	r3, [r7, #24]
  403616:	617b      	str	r3, [r7, #20]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  403618:	697b      	ldr	r3, [r7, #20]
  40361a:	095b      	lsrs	r3, r3, #5
  40361c:	613b      	str	r3, [r7, #16]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  40361e:	693a      	ldr	r2, [r7, #16]
  403620:	4b0b      	ldr	r3, [pc, #44]	; (403650 <ioport_get_pin_level+0x4c>)
  403622:	4413      	add	r3, r2
  403624:	025b      	lsls	r3, r3, #9
	base->PIO_CODR = mask & ~level;
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  403626:	6bda      	ldr	r2, [r3, #60]	; 0x3c
  403628:	69fb      	ldr	r3, [r7, #28]
  40362a:	60fb      	str	r3, [r7, #12]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  40362c:	68fb      	ldr	r3, [r7, #12]
  40362e:	f003 031f 	and.w	r3, r3, #31
  403632:	2101      	movs	r1, #1
  403634:	fa01 f303 	lsl.w	r3, r1, r3
	base->PIO_CODR = mask & ~level;
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  403638:	4013      	ands	r3, r2
  40363a:	2b00      	cmp	r3, #0
  40363c:	bf14      	ite	ne
  40363e:	2301      	movne	r3, #1
  403640:	2300      	moveq	r3, #0
  403642:	b2db      	uxtb	r3, r3
	return arch_ioport_get_pin_level(pin);
}
  403644:	4618      	mov	r0, r3
  403646:	3724      	adds	r7, #36	; 0x24
  403648:	46bd      	mov	sp, r7
  40364a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40364e:	4770      	bx	lr
  403650:	00200707 	.word	0x00200707

00403654 <ioport_toggle_pin_level>:
 * an output.
 *
 * \param pin IOPORT pin to toggle
 */
static inline void ioport_toggle_pin_level(ioport_pin_t pin)
{
  403654:	b480      	push	{r7}
  403656:	b08b      	sub	sp, #44	; 0x2c
  403658:	af00      	add	r7, sp, #0
  40365a:	6078      	str	r0, [r7, #4]
  40365c:	687b      	ldr	r3, [r7, #4]
  40365e:	627b      	str	r3, [r7, #36]	; 0x24
  403660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  403662:	623b      	str	r3, [r7, #32]
  403664:	6a3b      	ldr	r3, [r7, #32]
  403666:	61fb      	str	r3, [r7, #28]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  403668:	69fb      	ldr	r3, [r7, #28]
  40366a:	095b      	lsrs	r3, r3, #5
  40366c:	61bb      	str	r3, [r7, #24]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  40366e:	69ba      	ldr	r2, [r7, #24]
  403670:	4b12      	ldr	r3, [pc, #72]	; (4036bc <ioport_toggle_pin_level+0x68>)
  403672:	4413      	add	r3, r2
  403674:	025b      	lsls	r3, r3, #9
	return arch_ioport_port_to_base(port)->PIO_PDSR & mask;
}

__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	Pio *port = arch_ioport_pin_to_base(pin);
  403676:	617b      	str	r3, [r7, #20]
  403678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40367a:	613b      	str	r3, [r7, #16]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  40367c:	693b      	ldr	r3, [r7, #16]
  40367e:	f003 031f 	and.w	r3, r3, #31
  403682:	2201      	movs	r2, #1
  403684:	fa02 f303 	lsl.w	r3, r2, r3
}

__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	Pio *port = arch_ioport_pin_to_base(pin);
	ioport_port_mask_t mask = arch_ioport_pin_to_mask(pin);
  403688:	60fb      	str	r3, [r7, #12]

	if (port->PIO_PDSR & arch_ioport_pin_to_mask(pin)) {
  40368a:	697b      	ldr	r3, [r7, #20]
  40368c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
  40368e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  403690:	60bb      	str	r3, [r7, #8]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  403692:	68bb      	ldr	r3, [r7, #8]
  403694:	f003 031f 	and.w	r3, r3, #31
  403698:	2101      	movs	r1, #1
  40369a:	fa01 f303 	lsl.w	r3, r1, r3
__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	Pio *port = arch_ioport_pin_to_base(pin);
	ioport_port_mask_t mask = arch_ioport_pin_to_mask(pin);

	if (port->PIO_PDSR & arch_ioport_pin_to_mask(pin)) {
  40369e:	4013      	ands	r3, r2
  4036a0:	2b00      	cmp	r3, #0
  4036a2:	d003      	beq.n	4036ac <ioport_toggle_pin_level+0x58>
		port->PIO_CODR = mask;
  4036a4:	697b      	ldr	r3, [r7, #20]
  4036a6:	68fa      	ldr	r2, [r7, #12]
  4036a8:	635a      	str	r2, [r3, #52]	; 0x34
  4036aa:	e002      	b.n	4036b2 <ioport_toggle_pin_level+0x5e>
	} else {
		port->PIO_SODR = mask;
  4036ac:	697b      	ldr	r3, [r7, #20]
  4036ae:	68fa      	ldr	r2, [r7, #12]
  4036b0:	631a      	str	r2, [r3, #48]	; 0x30
	arch_ioport_toggle_pin_level(pin);
}
  4036b2:	372c      	adds	r7, #44	; 0x2c
  4036b4:	46bd      	mov	sp, r7
  4036b6:	f85d 7b04 	ldr.w	r7, [sp], #4
  4036ba:	4770      	bx	lr
  4036bc:	00200707 	.word	0x00200707

004036c0 <usart_serial_init>:
 * \param opt      Options needed to set up RS232 communication (see
 * \ref usart_options_t).
 */
static inline void usart_serial_init(usart_if p_usart,
		usart_serial_options_t *opt)
{
  4036c0:	b580      	push	{r7, lr}
  4036c2:	b08c      	sub	sp, #48	; 0x30
  4036c4:	af00      	add	r7, sp, #0
  4036c6:	6078      	str	r0, [r7, #4]
  4036c8:	6039      	str	r1, [r7, #0]
#if ((!SAM4L) && (!SAMG55))
	sam_uart_opt_t uart_settings;
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
  4036ca:	4b48      	ldr	r3, [pc, #288]	; (4037ec <usart_serial_init+0x12c>)
  4036cc:	4798      	blx	r3
  4036ce:	4603      	mov	r3, r0
  4036d0:	627b      	str	r3, [r7, #36]	; 0x24
	uart_settings.ul_baudrate = opt->baudrate;
  4036d2:	683b      	ldr	r3, [r7, #0]
  4036d4:	681b      	ldr	r3, [r3, #0]
  4036d6:	62bb      	str	r3, [r7, #40]	; 0x28
	uart_settings.ul_mode = opt->paritytype;
  4036d8:	683b      	ldr	r3, [r7, #0]
  4036da:	689b      	ldr	r3, [r3, #8]
  4036dc:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif

	sam_usart_opt_t usart_settings;
	usart_settings.baudrate = opt->baudrate;
  4036de:	683b      	ldr	r3, [r7, #0]
  4036e0:	681b      	ldr	r3, [r3, #0]
  4036e2:	60fb      	str	r3, [r7, #12]
	usart_settings.char_length = opt->charlength;
  4036e4:	683b      	ldr	r3, [r7, #0]
  4036e6:	685b      	ldr	r3, [r3, #4]
  4036e8:	613b      	str	r3, [r7, #16]
	usart_settings.parity_type = opt->paritytype;
  4036ea:	683b      	ldr	r3, [r7, #0]
  4036ec:	689b      	ldr	r3, [r3, #8]
  4036ee:	617b      	str	r3, [r7, #20]
	usart_settings.stop_bits= opt->stopbits;
  4036f0:	683b      	ldr	r3, [r7, #0]
  4036f2:	68db      	ldr	r3, [r3, #12]
  4036f4:	61bb      	str	r3, [r7, #24]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
  4036f6:	2300      	movs	r3, #0
  4036f8:	61fb      	str	r3, [r7, #28]
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  4036fa:	687b      	ldr	r3, [r7, #4]
  4036fc:	4a3c      	ldr	r2, [pc, #240]	; (4037f0 <usart_serial_init+0x130>)
  4036fe:	4293      	cmp	r3, r2
  403700:	d108      	bne.n	403714 <usart_serial_init+0x54>
		sysclk_enable_peripheral_clock(ID_UART0);
  403702:	2007      	movs	r0, #7
  403704:	4b3b      	ldr	r3, [pc, #236]	; (4037f4 <usart_serial_init+0x134>)
  403706:	4798      	blx	r3
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
  403708:	f107 0324 	add.w	r3, r7, #36	; 0x24
  40370c:	6878      	ldr	r0, [r7, #4]
  40370e:	4619      	mov	r1, r3
  403710:	4b39      	ldr	r3, [pc, #228]	; (4037f8 <usart_serial_init+0x138>)
  403712:	4798      	blx	r3
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  403714:	687b      	ldr	r3, [r7, #4]
  403716:	4a39      	ldr	r2, [pc, #228]	; (4037fc <usart_serial_init+0x13c>)
  403718:	4293      	cmp	r3, r2
  40371a:	d108      	bne.n	40372e <usart_serial_init+0x6e>
		sysclk_enable_peripheral_clock(ID_UART1);
  40371c:	2008      	movs	r0, #8
  40371e:	4b35      	ldr	r3, [pc, #212]	; (4037f4 <usart_serial_init+0x134>)
  403720:	4798      	blx	r3
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
  403722:	f107 0324 	add.w	r3, r7, #36	; 0x24
  403726:	6878      	ldr	r0, [r7, #4]
  403728:	4619      	mov	r1, r3
  40372a:	4b33      	ldr	r3, [pc, #204]	; (4037f8 <usart_serial_init+0x138>)
  40372c:	4798      	blx	r3
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  40372e:	687b      	ldr	r3, [r7, #4]
  403730:	4a33      	ldr	r2, [pc, #204]	; (403800 <usart_serial_init+0x140>)
  403732:	4293      	cmp	r3, r2
  403734:	d108      	bne.n	403748 <usart_serial_init+0x88>
		sysclk_enable_peripheral_clock(ID_UART2);
  403736:	202c      	movs	r0, #44	; 0x2c
  403738:	4b2e      	ldr	r3, [pc, #184]	; (4037f4 <usart_serial_init+0x134>)
  40373a:	4798      	blx	r3
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
  40373c:	f107 0324 	add.w	r3, r7, #36	; 0x24
  403740:	6878      	ldr	r0, [r7, #4]
  403742:	4619      	mov	r1, r3
  403744:	4b2c      	ldr	r3, [pc, #176]	; (4037f8 <usart_serial_init+0x138>)
  403746:	4798      	blx	r3
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  403748:	687b      	ldr	r3, [r7, #4]
  40374a:	4a2e      	ldr	r2, [pc, #184]	; (403804 <usart_serial_init+0x144>)
  40374c:	4293      	cmp	r3, r2
  40374e:	d108      	bne.n	403762 <usart_serial_init+0xa2>
		sysclk_enable_peripheral_clock(ID_UART3);
  403750:	202d      	movs	r0, #45	; 0x2d
  403752:	4b28      	ldr	r3, [pc, #160]	; (4037f4 <usart_serial_init+0x134>)
  403754:	4798      	blx	r3
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
  403756:	f107 0324 	add.w	r3, r7, #36	; 0x24
  40375a:	6878      	ldr	r0, [r7, #4]
  40375c:	4619      	mov	r1, r3
  40375e:	4b26      	ldr	r3, [pc, #152]	; (4037f8 <usart_serial_init+0x138>)
  403760:	4798      	blx	r3
		usart_enable_tx(p_usart);
		usart_enable_rx(p_usart);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  403762:	687b      	ldr	r3, [r7, #4]
  403764:	4a28      	ldr	r2, [pc, #160]	; (403808 <usart_serial_init+0x148>)
  403766:	4293      	cmp	r3, r2
  403768:	d111      	bne.n	40378e <usart_serial_init+0xce>
#if (!SAM4L)
#if (SAMG55)
		flexcom_enable(FLEXCOM0);
		flexcom_set_opmode(FLEXCOM0, FLEXCOM_USART);
#else
		sysclk_enable_peripheral_clock(ID_USART0);
  40376a:	200d      	movs	r0, #13
  40376c:	4b21      	ldr	r3, [pc, #132]	; (4037f4 <usart_serial_init+0x134>)
  40376e:	4798      	blx	r3
#endif
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
  403770:	4b1e      	ldr	r3, [pc, #120]	; (4037ec <usart_serial_init+0x12c>)
  403772:	4798      	blx	r3
  403774:	4602      	mov	r2, r0
  403776:	f107 030c 	add.w	r3, r7, #12
  40377a:	6878      	ldr	r0, [r7, #4]
  40377c:	4619      	mov	r1, r3
  40377e:	4b23      	ldr	r3, [pc, #140]	; (40380c <usart_serial_init+0x14c>)
  403780:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
  403782:	6878      	ldr	r0, [r7, #4]
  403784:	4b22      	ldr	r3, [pc, #136]	; (403810 <usart_serial_init+0x150>)
  403786:	4798      	blx	r3
		usart_enable_rx(p_usart);
  403788:	6878      	ldr	r0, [r7, #4]
  40378a:	4b22      	ldr	r3, [pc, #136]	; (403814 <usart_serial_init+0x154>)
  40378c:	4798      	blx	r3
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  40378e:	687b      	ldr	r3, [r7, #4]
  403790:	4a21      	ldr	r2, [pc, #132]	; (403818 <usart_serial_init+0x158>)
  403792:	4293      	cmp	r3, r2
  403794:	d111      	bne.n	4037ba <usart_serial_init+0xfa>
#if (!SAM4L)
#if (SAMG55)
		flexcom_enable(FLEXCOM1);
		flexcom_set_opmode(FLEXCOM1, FLEXCOM_USART);
#else
		sysclk_enable_peripheral_clock(ID_USART1);
  403796:	200e      	movs	r0, #14
  403798:	4b16      	ldr	r3, [pc, #88]	; (4037f4 <usart_serial_init+0x134>)
  40379a:	4798      	blx	r3
#endif
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
  40379c:	4b13      	ldr	r3, [pc, #76]	; (4037ec <usart_serial_init+0x12c>)
  40379e:	4798      	blx	r3
  4037a0:	4602      	mov	r2, r0
  4037a2:	f107 030c 	add.w	r3, r7, #12
  4037a6:	6878      	ldr	r0, [r7, #4]
  4037a8:	4619      	mov	r1, r3
  4037aa:	4b18      	ldr	r3, [pc, #96]	; (40380c <usart_serial_init+0x14c>)
  4037ac:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
  4037ae:	6878      	ldr	r0, [r7, #4]
  4037b0:	4b17      	ldr	r3, [pc, #92]	; (403810 <usart_serial_init+0x150>)
  4037b2:	4798      	blx	r3
		usart_enable_rx(p_usart);
  4037b4:	6878      	ldr	r0, [r7, #4]
  4037b6:	4b17      	ldr	r3, [pc, #92]	; (403814 <usart_serial_init+0x154>)
  4037b8:	4798      	blx	r3
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  4037ba:	687b      	ldr	r3, [r7, #4]
  4037bc:	4a17      	ldr	r2, [pc, #92]	; (40381c <usart_serial_init+0x15c>)
  4037be:	4293      	cmp	r3, r2
  4037c0:	d111      	bne.n	4037e6 <usart_serial_init+0x126>
#if (!SAM4L)
#if (SAMG55)
		flexcom_enable(FLEXCOM2);
		flexcom_set_opmode(FLEXCOM2, FLEXCOM_USART);
#else
		sysclk_enable_peripheral_clock(ID_USART2);
  4037c2:	200f      	movs	r0, #15
  4037c4:	4b0b      	ldr	r3, [pc, #44]	; (4037f4 <usart_serial_init+0x134>)
  4037c6:	4798      	blx	r3
#endif
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
  4037c8:	4b08      	ldr	r3, [pc, #32]	; (4037ec <usart_serial_init+0x12c>)
  4037ca:	4798      	blx	r3
  4037cc:	4602      	mov	r2, r0
  4037ce:	f107 030c 	add.w	r3, r7, #12
  4037d2:	6878      	ldr	r0, [r7, #4]
  4037d4:	4619      	mov	r1, r3
  4037d6:	4b0d      	ldr	r3, [pc, #52]	; (40380c <usart_serial_init+0x14c>)
  4037d8:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
  4037da:	6878      	ldr	r0, [r7, #4]
  4037dc:	4b0c      	ldr	r3, [pc, #48]	; (403810 <usart_serial_init+0x150>)
  4037de:	4798      	blx	r3
		usart_enable_rx(p_usart);
  4037e0:	6878      	ldr	r0, [r7, #4]
  4037e2:	4b0c      	ldr	r3, [pc, #48]	; (403814 <usart_serial_init+0x154>)
  4037e4:	4798      	blx	r3
	}
# endif

#endif /* ifdef USART */

}
  4037e6:	3730      	adds	r7, #48	; 0x30
  4037e8:	46bd      	mov	sp, r7
  4037ea:	bd80      	pop	{r7, pc}
  4037ec:	004034e5 	.word	0x004034e5
  4037f0:	400e0800 	.word	0x400e0800
  4037f4:	004034f9 	.word	0x004034f9
  4037f8:	00401f69 	.word	0x00401f69
  4037fc:	400e0a00 	.word	0x400e0a00
  403800:	400e1a00 	.word	0x400e1a00
  403804:	400e1c00 	.word	0x400e1c00
  403808:	40024000 	.word	0x40024000
  40380c:	00402105 	.word	0x00402105
  403810:	00402189 	.word	0x00402189
  403814:	004021d5 	.word	0x004021d5
  403818:	40028000 	.word	0x40028000
  40381c:	4002c000 	.word	0x4002c000

00403820 <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
  403820:	b580      	push	{r7, lr}
  403822:	b082      	sub	sp, #8
  403824:	af00      	add	r7, sp, #0
  403826:	6078      	str	r0, [r7, #4]
  403828:	460b      	mov	r3, r1
  40382a:	70fb      	strb	r3, [r7, #3]
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  40382c:	687b      	ldr	r3, [r7, #4]
  40382e:	4a36      	ldr	r2, [pc, #216]	; (403908 <usart_serial_putchar+0xe8>)
  403830:	4293      	cmp	r3, r2
  403832:	d10a      	bne.n	40384a <usart_serial_putchar+0x2a>
		while (uart_write((Uart*)p_usart, c)!=0);
  403834:	bf00      	nop
  403836:	78fb      	ldrb	r3, [r7, #3]
  403838:	6878      	ldr	r0, [r7, #4]
  40383a:	4619      	mov	r1, r3
  40383c:	4b33      	ldr	r3, [pc, #204]	; (40390c <usart_serial_putchar+0xec>)
  40383e:	4798      	blx	r3
  403840:	4603      	mov	r3, r0
  403842:	2b00      	cmp	r3, #0
  403844:	d1f7      	bne.n	403836 <usart_serial_putchar+0x16>
		return 1;
  403846:	2301      	movs	r3, #1
  403848:	e05a      	b.n	403900 <usart_serial_putchar+0xe0>
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  40384a:	687b      	ldr	r3, [r7, #4]
  40384c:	4a30      	ldr	r2, [pc, #192]	; (403910 <usart_serial_putchar+0xf0>)
  40384e:	4293      	cmp	r3, r2
  403850:	d10a      	bne.n	403868 <usart_serial_putchar+0x48>
		while (uart_write((Uart*)p_usart, c)!=0);
  403852:	bf00      	nop
  403854:	78fb      	ldrb	r3, [r7, #3]
  403856:	6878      	ldr	r0, [r7, #4]
  403858:	4619      	mov	r1, r3
  40385a:	4b2c      	ldr	r3, [pc, #176]	; (40390c <usart_serial_putchar+0xec>)
  40385c:	4798      	blx	r3
  40385e:	4603      	mov	r3, r0
  403860:	2b00      	cmp	r3, #0
  403862:	d1f7      	bne.n	403854 <usart_serial_putchar+0x34>
		return 1;
  403864:	2301      	movs	r3, #1
  403866:	e04b      	b.n	403900 <usart_serial_putchar+0xe0>
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  403868:	687b      	ldr	r3, [r7, #4]
  40386a:	4a2a      	ldr	r2, [pc, #168]	; (403914 <usart_serial_putchar+0xf4>)
  40386c:	4293      	cmp	r3, r2
  40386e:	d10a      	bne.n	403886 <usart_serial_putchar+0x66>
		while (uart_write((Uart*)p_usart, c)!=0);
  403870:	bf00      	nop
  403872:	78fb      	ldrb	r3, [r7, #3]
  403874:	6878      	ldr	r0, [r7, #4]
  403876:	4619      	mov	r1, r3
  403878:	4b24      	ldr	r3, [pc, #144]	; (40390c <usart_serial_putchar+0xec>)
  40387a:	4798      	blx	r3
  40387c:	4603      	mov	r3, r0
  40387e:	2b00      	cmp	r3, #0
  403880:	d1f7      	bne.n	403872 <usart_serial_putchar+0x52>
		return 1;
  403882:	2301      	movs	r3, #1
  403884:	e03c      	b.n	403900 <usart_serial_putchar+0xe0>
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  403886:	687b      	ldr	r3, [r7, #4]
  403888:	4a23      	ldr	r2, [pc, #140]	; (403918 <usart_serial_putchar+0xf8>)
  40388a:	4293      	cmp	r3, r2
  40388c:	d10a      	bne.n	4038a4 <usart_serial_putchar+0x84>
		while (uart_write((Uart*)p_usart, c)!=0);
  40388e:	bf00      	nop
  403890:	78fb      	ldrb	r3, [r7, #3]
  403892:	6878      	ldr	r0, [r7, #4]
  403894:	4619      	mov	r1, r3
  403896:	4b1d      	ldr	r3, [pc, #116]	; (40390c <usart_serial_putchar+0xec>)
  403898:	4798      	blx	r3
  40389a:	4603      	mov	r3, r0
  40389c:	2b00      	cmp	r3, #0
  40389e:	d1f7      	bne.n	403890 <usart_serial_putchar+0x70>
		return 1;
  4038a0:	2301      	movs	r3, #1
  4038a2:	e02d      	b.n	403900 <usart_serial_putchar+0xe0>
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  4038a4:	687b      	ldr	r3, [r7, #4]
  4038a6:	4a1d      	ldr	r2, [pc, #116]	; (40391c <usart_serial_putchar+0xfc>)
  4038a8:	4293      	cmp	r3, r2
  4038aa:	d10a      	bne.n	4038c2 <usart_serial_putchar+0xa2>
		while (usart_write(p_usart, c)!=0);
  4038ac:	bf00      	nop
  4038ae:	78fb      	ldrb	r3, [r7, #3]
  4038b0:	6878      	ldr	r0, [r7, #4]
  4038b2:	4619      	mov	r1, r3
  4038b4:	4b1a      	ldr	r3, [pc, #104]	; (403920 <usart_serial_putchar+0x100>)
  4038b6:	4798      	blx	r3
  4038b8:	4603      	mov	r3, r0
  4038ba:	2b00      	cmp	r3, #0
  4038bc:	d1f7      	bne.n	4038ae <usart_serial_putchar+0x8e>
		return 1;
  4038be:	2301      	movs	r3, #1
  4038c0:	e01e      	b.n	403900 <usart_serial_putchar+0xe0>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  4038c2:	687b      	ldr	r3, [r7, #4]
  4038c4:	4a17      	ldr	r2, [pc, #92]	; (403924 <usart_serial_putchar+0x104>)
  4038c6:	4293      	cmp	r3, r2
  4038c8:	d10a      	bne.n	4038e0 <usart_serial_putchar+0xc0>
		while (usart_write(p_usart, c)!=0);
  4038ca:	bf00      	nop
  4038cc:	78fb      	ldrb	r3, [r7, #3]
  4038ce:	6878      	ldr	r0, [r7, #4]
  4038d0:	4619      	mov	r1, r3
  4038d2:	4b13      	ldr	r3, [pc, #76]	; (403920 <usart_serial_putchar+0x100>)
  4038d4:	4798      	blx	r3
  4038d6:	4603      	mov	r3, r0
  4038d8:	2b00      	cmp	r3, #0
  4038da:	d1f7      	bne.n	4038cc <usart_serial_putchar+0xac>
		return 1;
  4038dc:	2301      	movs	r3, #1
  4038de:	e00f      	b.n	403900 <usart_serial_putchar+0xe0>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  4038e0:	687b      	ldr	r3, [r7, #4]
  4038e2:	4a11      	ldr	r2, [pc, #68]	; (403928 <usart_serial_putchar+0x108>)
  4038e4:	4293      	cmp	r3, r2
  4038e6:	d10a      	bne.n	4038fe <usart_serial_putchar+0xde>
		while (usart_write(p_usart, c)!=0);
  4038e8:	bf00      	nop
  4038ea:	78fb      	ldrb	r3, [r7, #3]
  4038ec:	6878      	ldr	r0, [r7, #4]
  4038ee:	4619      	mov	r1, r3
  4038f0:	4b0b      	ldr	r3, [pc, #44]	; (403920 <usart_serial_putchar+0x100>)
  4038f2:	4798      	blx	r3
  4038f4:	4603      	mov	r3, r0
  4038f6:	2b00      	cmp	r3, #0
  4038f8:	d1f7      	bne.n	4038ea <usart_serial_putchar+0xca>
		return 1;
  4038fa:	2301      	movs	r3, #1
  4038fc:	e000      	b.n	403900 <usart_serial_putchar+0xe0>
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
  4038fe:	2300      	movs	r3, #0
}
  403900:	4618      	mov	r0, r3
  403902:	3708      	adds	r7, #8
  403904:	46bd      	mov	sp, r7
  403906:	bd80      	pop	{r7, pc}
  403908:	400e0800 	.word	0x400e0800
  40390c:	00401fc1 	.word	0x00401fc1
  403910:	400e0a00 	.word	0x400e0a00
  403914:	400e1a00 	.word	0x400e1a00
  403918:	400e1c00 	.word	0x400e1c00
  40391c:	40024000 	.word	0x40024000
  403920:	004022dd 	.word	0x004022dd
  403924:	40028000 	.word	0x40028000
  403928:	4002c000 	.word	0x4002c000

0040392c <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  40392c:	b580      	push	{r7, lr}
  40392e:	b084      	sub	sp, #16
  403930:	af00      	add	r7, sp, #0
  403932:	6078      	str	r0, [r7, #4]
  403934:	6039      	str	r1, [r7, #0]
	uint32_t val = 0;
  403936:	2300      	movs	r3, #0
  403938:	60fb      	str	r3, [r7, #12]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  40393a:	687b      	ldr	r3, [r7, #4]
  40393c:	4a33      	ldr	r2, [pc, #204]	; (403a0c <usart_serial_getchar+0xe0>)
  40393e:	4293      	cmp	r3, r2
  403940:	d107      	bne.n	403952 <usart_serial_getchar+0x26>
		while (uart_read((Uart*)p_usart, data));
  403942:	bf00      	nop
  403944:	6878      	ldr	r0, [r7, #4]
  403946:	6839      	ldr	r1, [r7, #0]
  403948:	4b31      	ldr	r3, [pc, #196]	; (403a10 <usart_serial_getchar+0xe4>)
  40394a:	4798      	blx	r3
  40394c:	4603      	mov	r3, r0
  40394e:	2b00      	cmp	r3, #0
  403950:	d1f8      	bne.n	403944 <usart_serial_getchar+0x18>
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  403952:	687b      	ldr	r3, [r7, #4]
  403954:	4a2f      	ldr	r2, [pc, #188]	; (403a14 <usart_serial_getchar+0xe8>)
  403956:	4293      	cmp	r3, r2
  403958:	d107      	bne.n	40396a <usart_serial_getchar+0x3e>
		while (uart_read((Uart*)p_usart, data));
  40395a:	bf00      	nop
  40395c:	6878      	ldr	r0, [r7, #4]
  40395e:	6839      	ldr	r1, [r7, #0]
  403960:	4b2b      	ldr	r3, [pc, #172]	; (403a10 <usart_serial_getchar+0xe4>)
  403962:	4798      	blx	r3
  403964:	4603      	mov	r3, r0
  403966:	2b00      	cmp	r3, #0
  403968:	d1f8      	bne.n	40395c <usart_serial_getchar+0x30>
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  40396a:	687b      	ldr	r3, [r7, #4]
  40396c:	4a2a      	ldr	r2, [pc, #168]	; (403a18 <usart_serial_getchar+0xec>)
  40396e:	4293      	cmp	r3, r2
  403970:	d107      	bne.n	403982 <usart_serial_getchar+0x56>
		while (uart_read((Uart*)p_usart, data));
  403972:	bf00      	nop
  403974:	6878      	ldr	r0, [r7, #4]
  403976:	6839      	ldr	r1, [r7, #0]
  403978:	4b25      	ldr	r3, [pc, #148]	; (403a10 <usart_serial_getchar+0xe4>)
  40397a:	4798      	blx	r3
  40397c:	4603      	mov	r3, r0
  40397e:	2b00      	cmp	r3, #0
  403980:	d1f8      	bne.n	403974 <usart_serial_getchar+0x48>
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  403982:	687b      	ldr	r3, [r7, #4]
  403984:	4a25      	ldr	r2, [pc, #148]	; (403a1c <usart_serial_getchar+0xf0>)
  403986:	4293      	cmp	r3, r2
  403988:	d107      	bne.n	40399a <usart_serial_getchar+0x6e>
		while (uart_read((Uart*)p_usart, data));
  40398a:	bf00      	nop
  40398c:	6878      	ldr	r0, [r7, #4]
  40398e:	6839      	ldr	r1, [r7, #0]
  403990:	4b1f      	ldr	r3, [pc, #124]	; (403a10 <usart_serial_getchar+0xe4>)
  403992:	4798      	blx	r3
  403994:	4603      	mov	r3, r0
  403996:	2b00      	cmp	r3, #0
  403998:	d1f8      	bne.n	40398c <usart_serial_getchar+0x60>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  40399a:	687b      	ldr	r3, [r7, #4]
  40399c:	4a20      	ldr	r2, [pc, #128]	; (403a20 <usart_serial_getchar+0xf4>)
  40399e:	4293      	cmp	r3, r2
  4039a0:	d10d      	bne.n	4039be <usart_serial_getchar+0x92>
		while (usart_read(p_usart, &val));
  4039a2:	bf00      	nop
  4039a4:	f107 030c 	add.w	r3, r7, #12
  4039a8:	6878      	ldr	r0, [r7, #4]
  4039aa:	4619      	mov	r1, r3
  4039ac:	4b1d      	ldr	r3, [pc, #116]	; (403a24 <usart_serial_getchar+0xf8>)
  4039ae:	4798      	blx	r3
  4039b0:	4603      	mov	r3, r0
  4039b2:	2b00      	cmp	r3, #0
  4039b4:	d1f6      	bne.n	4039a4 <usart_serial_getchar+0x78>
		*data = (uint8_t)(val & 0xFF);
  4039b6:	68fb      	ldr	r3, [r7, #12]
  4039b8:	b2da      	uxtb	r2, r3
  4039ba:	683b      	ldr	r3, [r7, #0]
  4039bc:	701a      	strb	r2, [r3, #0]
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  4039be:	687b      	ldr	r3, [r7, #4]
  4039c0:	4a19      	ldr	r2, [pc, #100]	; (403a28 <usart_serial_getchar+0xfc>)
  4039c2:	4293      	cmp	r3, r2
  4039c4:	d10d      	bne.n	4039e2 <usart_serial_getchar+0xb6>
		while (usart_read(p_usart, &val));
  4039c6:	bf00      	nop
  4039c8:	f107 030c 	add.w	r3, r7, #12
  4039cc:	6878      	ldr	r0, [r7, #4]
  4039ce:	4619      	mov	r1, r3
  4039d0:	4b14      	ldr	r3, [pc, #80]	; (403a24 <usart_serial_getchar+0xf8>)
  4039d2:	4798      	blx	r3
  4039d4:	4603      	mov	r3, r0
  4039d6:	2b00      	cmp	r3, #0
  4039d8:	d1f6      	bne.n	4039c8 <usart_serial_getchar+0x9c>
		*data = (uint8_t)(val & 0xFF);
  4039da:	68fb      	ldr	r3, [r7, #12]
  4039dc:	b2da      	uxtb	r2, r3
  4039de:	683b      	ldr	r3, [r7, #0]
  4039e0:	701a      	strb	r2, [r3, #0]
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  4039e2:	687b      	ldr	r3, [r7, #4]
  4039e4:	4a11      	ldr	r2, [pc, #68]	; (403a2c <usart_serial_getchar+0x100>)
  4039e6:	4293      	cmp	r3, r2
  4039e8:	d10d      	bne.n	403a06 <usart_serial_getchar+0xda>
		while (usart_read(p_usart, &val));
  4039ea:	bf00      	nop
  4039ec:	f107 030c 	add.w	r3, r7, #12
  4039f0:	6878      	ldr	r0, [r7, #4]
  4039f2:	4619      	mov	r1, r3
  4039f4:	4b0b      	ldr	r3, [pc, #44]	; (403a24 <usart_serial_getchar+0xf8>)
  4039f6:	4798      	blx	r3
  4039f8:	4603      	mov	r3, r0
  4039fa:	2b00      	cmp	r3, #0
  4039fc:	d1f6      	bne.n	4039ec <usart_serial_getchar+0xc0>
		*data = (uint8_t)(val & 0xFF);
  4039fe:	68fb      	ldr	r3, [r7, #12]
  403a00:	b2da      	uxtb	r2, r3
  403a02:	683b      	ldr	r3, [r7, #0]
  403a04:	701a      	strb	r2, [r3, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  403a06:	3710      	adds	r7, #16
  403a08:	46bd      	mov	sp, r7
  403a0a:	bd80      	pop	{r7, pc}
  403a0c:	400e0800 	.word	0x400e0800
  403a10:	00401ff1 	.word	0x00401ff1
  403a14:	400e0a00 	.word	0x400e0a00
  403a18:	400e1a00 	.word	0x400e1a00
  403a1c:	400e1c00 	.word	0x400e1c00
  403a20:	40024000 	.word	0x40024000
  403a24:	00402311 	.word	0x00402311
  403a28:	40028000 	.word	0x40028000
  403a2c:	4002c000 	.word	0x4002c000

00403a30 <stdio_serial_init>:
 * \param usart       Base address of the USART instance.
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
  403a30:	b580      	push	{r7, lr}
  403a32:	b082      	sub	sp, #8
  403a34:	af00      	add	r7, sp, #0
  403a36:	6078      	str	r0, [r7, #4]
  403a38:	6039      	str	r1, [r7, #0]
	stdio_base = (void *)usart;
  403a3a:	4a0f      	ldr	r2, [pc, #60]	; (403a78 <stdio_serial_init+0x48>)
  403a3c:	687b      	ldr	r3, [r7, #4]
  403a3e:	6013      	str	r3, [r2, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  403a40:	4b0e      	ldr	r3, [pc, #56]	; (403a7c <stdio_serial_init+0x4c>)
  403a42:	4a0f      	ldr	r2, [pc, #60]	; (403a80 <stdio_serial_init+0x50>)
  403a44:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  403a46:	4b0f      	ldr	r3, [pc, #60]	; (403a84 <stdio_serial_init+0x54>)
  403a48:	4a0f      	ldr	r2, [pc, #60]	; (403a88 <stdio_serial_init+0x58>)
  403a4a:	601a      	str	r2, [r3, #0]
# if (XMEGA || MEGA_RF)
	usart_serial_init((USART_t *)usart,opt);
# elif UC3
	usart_serial_init(usart,(usart_serial_options_t *)opt);
# elif SAM
	usart_serial_init((Usart *)usart,(usart_serial_options_t *)opt);
  403a4c:	6878      	ldr	r0, [r7, #4]
  403a4e:	6839      	ldr	r1, [r7, #0]
  403a50:	4b0e      	ldr	r3, [pc, #56]	; (403a8c <stdio_serial_init+0x5c>)
  403a52:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  403a54:	4b0e      	ldr	r3, [pc, #56]	; (403a90 <stdio_serial_init+0x60>)
  403a56:	681b      	ldr	r3, [r3, #0]
  403a58:	689b      	ldr	r3, [r3, #8]
  403a5a:	4618      	mov	r0, r3
  403a5c:	2100      	movs	r1, #0
  403a5e:	4b0d      	ldr	r3, [pc, #52]	; (403a94 <stdio_serial_init+0x64>)
  403a60:	4798      	blx	r3
	setbuf(stdin, NULL);
  403a62:	4b0b      	ldr	r3, [pc, #44]	; (403a90 <stdio_serial_init+0x60>)
  403a64:	681b      	ldr	r3, [r3, #0]
  403a66:	685b      	ldr	r3, [r3, #4]
  403a68:	4618      	mov	r0, r3
  403a6a:	2100      	movs	r1, #0
  403a6c:	4b09      	ldr	r3, [pc, #36]	; (403a94 <stdio_serial_init+0x64>)
  403a6e:	4798      	blx	r3
	// and AVR GCC library:
	// - printf() emits one character at a time.
	// - getchar() requests only 1 byte to exit.
#  endif
# endif
}
  403a70:	3708      	adds	r7, #8
  403a72:	46bd      	mov	sp, r7
  403a74:	bd80      	pop	{r7, pc}
  403a76:	bf00      	nop
  403a78:	20400a10 	.word	0x20400a10
  403a7c:	20400a0c 	.word	0x20400a0c
  403a80:	00403821 	.word	0x00403821
  403a84:	20400a08 	.word	0x20400a08
  403a88:	0040392d 	.word	0x0040392d
  403a8c:	004036c1 	.word	0x004036c1
  403a90:	204004b8 	.word	0x204004b8
  403a94:	004051bd 	.word	0x004051bd

00403a98 <mdelay>:
 * by the SAM microcontroller system tick).
 *
 * \param ul_dly_ticks  Delay to wait for, in milliseconds.
 */
void mdelay(uint32_t ul_dly_ticks)
{
  403a98:	b480      	push	{r7}
  403a9a:	b085      	sub	sp, #20
  403a9c:	af00      	add	r7, sp, #0
  403a9e:	6078      	str	r0, [r7, #4]
	uint32_t ul_cur_ticks;

	ul_cur_ticks = ul_ms_ticks;
  403aa0:	4b07      	ldr	r3, [pc, #28]	; (403ac0 <mdelay+0x28>)
  403aa2:	681b      	ldr	r3, [r3, #0]
  403aa4:	60fb      	str	r3, [r7, #12]
	while ((ul_ms_ticks - ul_cur_ticks) < ul_dly_ticks) {
  403aa6:	bf00      	nop
  403aa8:	4b05      	ldr	r3, [pc, #20]	; (403ac0 <mdelay+0x28>)
  403aaa:	681a      	ldr	r2, [r3, #0]
  403aac:	68fb      	ldr	r3, [r7, #12]
  403aae:	1ad2      	subs	r2, r2, r3
  403ab0:	687b      	ldr	r3, [r7, #4]
  403ab2:	429a      	cmp	r2, r3
  403ab4:	d3f8      	bcc.n	403aa8 <mdelay+0x10>
	}
}
  403ab6:	3714      	adds	r7, #20
  403ab8:	46bd      	mov	sp, r7
  403aba:	f85d 7b04 	ldr.w	r7, [sp], #4
  403abe:	4770      	bx	lr
  403ac0:	204009a0 	.word	0x204009a0

00403ac4 <toggle>:
	uint8_t keypad;
	
}status;

void toggle(uint8_t *var)
{
  403ac4:	b480      	push	{r7}
  403ac6:	b083      	sub	sp, #12
  403ac8:	af00      	add	r7, sp, #0
  403aca:	6078      	str	r0, [r7, #4]
	*var  = (((*var)+1) & 1);
  403acc:	687b      	ldr	r3, [r7, #4]
  403ace:	781b      	ldrb	r3, [r3, #0]
  403ad0:	3301      	adds	r3, #1
  403ad2:	b2db      	uxtb	r3, r3
  403ad4:	f003 0301 	and.w	r3, r3, #1
  403ad8:	b2da      	uxtb	r2, r3
  403ada:	687b      	ldr	r3, [r7, #4]
  403adc:	701a      	strb	r2, [r3, #0]
}
  403ade:	370c      	adds	r7, #12
  403ae0:	46bd      	mov	sp, r7
  403ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
  403ae6:	4770      	bx	lr

00403ae8 <scan_keypad>:
#define KEYPAD_SW4	0x0E
#define KEYPAD_SW5	0x16
#define KEYPAD_SW6	0x1A

void scan_keypad(void)
{
  403ae8:	b580      	push	{r7, lr}
  403aea:	b082      	sub	sp, #8
  403aec:	af00      	add	r7, sp, #0
	uint8_t tempKeypad;
	
	ioport_set_pin_dir(ECLAVE_COL3, IOPORT_DIR_OUTPUT);
  403aee:	2051      	movs	r0, #81	; 0x51
  403af0:	2101      	movs	r1, #1
  403af2:	4b5f      	ldr	r3, [pc, #380]	; (403c70 <scan_keypad+0x188>)
  403af4:	4798      	blx	r3
	ioport_set_pin_dir(ECLAVE_COL2, IOPORT_DIR_OUTPUT);
  403af6:	2052      	movs	r0, #82	; 0x52
  403af8:	2101      	movs	r1, #1
  403afa:	4b5d      	ldr	r3, [pc, #372]	; (403c70 <scan_keypad+0x188>)
  403afc:	4798      	blx	r3
	ioport_set_pin_dir(ECLAVE_COL1, IOPORT_DIR_OUTPUT);
  403afe:	2053      	movs	r0, #83	; 0x53
  403b00:	2101      	movs	r1, #1
  403b02:	4b5b      	ldr	r3, [pc, #364]	; (403c70 <scan_keypad+0x188>)
  403b04:	4798      	blx	r3

	ioport_set_pin_dir(ECLAVE_ROW3, IOPORT_DIR_INPUT);
  403b06:	2054      	movs	r0, #84	; 0x54
  403b08:	2100      	movs	r1, #0
  403b0a:	4b59      	ldr	r3, [pc, #356]	; (403c70 <scan_keypad+0x188>)
  403b0c:	4798      	blx	r3
	ioport_set_pin_dir(ECLAVE_ROW2, IOPORT_DIR_INPUT);
  403b0e:	2055      	movs	r0, #85	; 0x55
  403b10:	2100      	movs	r1, #0
  403b12:	4b57      	ldr	r3, [pc, #348]	; (403c70 <scan_keypad+0x188>)
  403b14:	4798      	blx	r3
	ioport_set_pin_dir(ECLAVE_ROW1, IOPORT_DIR_INPUT);
  403b16:	2056      	movs	r0, #86	; 0x56
  403b18:	2100      	movs	r1, #0
  403b1a:	4b55      	ldr	r3, [pc, #340]	; (403c70 <scan_keypad+0x188>)
  403b1c:	4798      	blx	r3
	
	ioport_set_pin_level(ECLAVE_COL3, IOPORT_PIN_LEVEL_LOW);
  403b1e:	2051      	movs	r0, #81	; 0x51
  403b20:	2100      	movs	r1, #0
  403b22:	4b54      	ldr	r3, [pc, #336]	; (403c74 <scan_keypad+0x18c>)
  403b24:	4798      	blx	r3
	ioport_set_pin_level(ECLAVE_COL2, IOPORT_PIN_LEVEL_LOW);
  403b26:	2052      	movs	r0, #82	; 0x52
  403b28:	2100      	movs	r1, #0
  403b2a:	4b52      	ldr	r3, [pc, #328]	; (403c74 <scan_keypad+0x18c>)
  403b2c:	4798      	blx	r3
	ioport_set_pin_level(ECLAVE_COL1, IOPORT_PIN_LEVEL_LOW);
  403b2e:	2053      	movs	r0, #83	; 0x53
  403b30:	2100      	movs	r1, #0
  403b32:	4b50      	ldr	r3, [pc, #320]	; (403c74 <scan_keypad+0x18c>)
  403b34:	4798      	blx	r3

	status.row3 = ioport_get_pin_level(ECLAVE_ROW3);
  403b36:	2054      	movs	r0, #84	; 0x54
  403b38:	4b4f      	ldr	r3, [pc, #316]	; (403c78 <scan_keypad+0x190>)
  403b3a:	4798      	blx	r3
  403b3c:	4603      	mov	r3, r0
  403b3e:	461a      	mov	r2, r3
  403b40:	4b4e      	ldr	r3, [pc, #312]	; (403c7c <scan_keypad+0x194>)
  403b42:	71da      	strb	r2, [r3, #7]
	status.row2 = ioport_get_pin_level(ECLAVE_ROW2);
  403b44:	2055      	movs	r0, #85	; 0x55
  403b46:	4b4c      	ldr	r3, [pc, #304]	; (403c78 <scan_keypad+0x190>)
  403b48:	4798      	blx	r3
  403b4a:	4603      	mov	r3, r0
  403b4c:	461a      	mov	r2, r3
  403b4e:	4b4b      	ldr	r3, [pc, #300]	; (403c7c <scan_keypad+0x194>)
  403b50:	721a      	strb	r2, [r3, #8]
	status.row1 = ioport_get_pin_level(ECLAVE_ROW1);
  403b52:	2056      	movs	r0, #86	; 0x56
  403b54:	4b48      	ldr	r3, [pc, #288]	; (403c78 <scan_keypad+0x190>)
  403b56:	4798      	blx	r3
  403b58:	4603      	mov	r3, r0
  403b5a:	461a      	mov	r2, r3
  403b5c:	4b47      	ldr	r3, [pc, #284]	; (403c7c <scan_keypad+0x194>)
  403b5e:	725a      	strb	r2, [r3, #9]


	ioport_set_pin_dir(ECLAVE_ROW3, IOPORT_DIR_OUTPUT);
  403b60:	2054      	movs	r0, #84	; 0x54
  403b62:	2101      	movs	r1, #1
  403b64:	4b42      	ldr	r3, [pc, #264]	; (403c70 <scan_keypad+0x188>)
  403b66:	4798      	blx	r3
	ioport_set_pin_dir(ECLAVE_ROW2, IOPORT_DIR_OUTPUT);
  403b68:	2055      	movs	r0, #85	; 0x55
  403b6a:	2101      	movs	r1, #1
  403b6c:	4b40      	ldr	r3, [pc, #256]	; (403c70 <scan_keypad+0x188>)
  403b6e:	4798      	blx	r3
	ioport_set_pin_dir(ECLAVE_ROW1, IOPORT_DIR_OUTPUT);
  403b70:	2056      	movs	r0, #86	; 0x56
  403b72:	2101      	movs	r1, #1
  403b74:	4b3e      	ldr	r3, [pc, #248]	; (403c70 <scan_keypad+0x188>)
  403b76:	4798      	blx	r3

	ioport_set_pin_dir(ECLAVE_COL3, IOPORT_DIR_INPUT);
  403b78:	2051      	movs	r0, #81	; 0x51
  403b7a:	2100      	movs	r1, #0
  403b7c:	4b3c      	ldr	r3, [pc, #240]	; (403c70 <scan_keypad+0x188>)
  403b7e:	4798      	blx	r3
	ioport_set_pin_dir(ECLAVE_COL2, IOPORT_DIR_INPUT);
  403b80:	2052      	movs	r0, #82	; 0x52
  403b82:	2100      	movs	r1, #0
  403b84:	4b3a      	ldr	r3, [pc, #232]	; (403c70 <scan_keypad+0x188>)
  403b86:	4798      	blx	r3
	ioport_set_pin_dir(ECLAVE_COL1, IOPORT_DIR_INPUT);
  403b88:	2053      	movs	r0, #83	; 0x53
  403b8a:	2100      	movs	r1, #0
  403b8c:	4b38      	ldr	r3, [pc, #224]	; (403c70 <scan_keypad+0x188>)
  403b8e:	4798      	blx	r3
	
	ioport_set_pin_level(ECLAVE_ROW3, IOPORT_PIN_LEVEL_LOW);
  403b90:	2054      	movs	r0, #84	; 0x54
  403b92:	2100      	movs	r1, #0
  403b94:	4b37      	ldr	r3, [pc, #220]	; (403c74 <scan_keypad+0x18c>)
  403b96:	4798      	blx	r3
	ioport_set_pin_level(ECLAVE_ROW2, IOPORT_PIN_LEVEL_LOW);
  403b98:	2055      	movs	r0, #85	; 0x55
  403b9a:	2100      	movs	r1, #0
  403b9c:	4b35      	ldr	r3, [pc, #212]	; (403c74 <scan_keypad+0x18c>)
  403b9e:	4798      	blx	r3
	ioport_set_pin_level(ECLAVE_ROW1, IOPORT_PIN_LEVEL_LOW);
  403ba0:	2056      	movs	r0, #86	; 0x56
  403ba2:	2100      	movs	r1, #0
  403ba4:	4b33      	ldr	r3, [pc, #204]	; (403c74 <scan_keypad+0x18c>)
  403ba6:	4798      	blx	r3

	status.col3 = ioport_get_pin_level(ECLAVE_COL3);
  403ba8:	2051      	movs	r0, #81	; 0x51
  403baa:	4b33      	ldr	r3, [pc, #204]	; (403c78 <scan_keypad+0x190>)
  403bac:	4798      	blx	r3
  403bae:	4603      	mov	r3, r0
  403bb0:	461a      	mov	r2, r3
  403bb2:	4b32      	ldr	r3, [pc, #200]	; (403c7c <scan_keypad+0x194>)
  403bb4:	711a      	strb	r2, [r3, #4]
	status.col2 = ioport_get_pin_level(ECLAVE_COL2);
  403bb6:	2052      	movs	r0, #82	; 0x52
  403bb8:	4b2f      	ldr	r3, [pc, #188]	; (403c78 <scan_keypad+0x190>)
  403bba:	4798      	blx	r3
  403bbc:	4603      	mov	r3, r0
  403bbe:	461a      	mov	r2, r3
  403bc0:	4b2e      	ldr	r3, [pc, #184]	; (403c7c <scan_keypad+0x194>)
  403bc2:	715a      	strb	r2, [r3, #5]
	status.col1 = ioport_get_pin_level(ECLAVE_COL1);
  403bc4:	2053      	movs	r0, #83	; 0x53
  403bc6:	4b2c      	ldr	r3, [pc, #176]	; (403c78 <scan_keypad+0x190>)
  403bc8:	4798      	blx	r3
  403bca:	4603      	mov	r3, r0
  403bcc:	461a      	mov	r2, r3
  403bce:	4b2b      	ldr	r3, [pc, #172]	; (403c7c <scan_keypad+0x194>)
  403bd0:	719a      	strb	r2, [r3, #6]
	
	tempKeypad = ((status.row3 << 4) |
  403bd2:	4b2a      	ldr	r3, [pc, #168]	; (403c7c <scan_keypad+0x194>)
  403bd4:	79db      	ldrb	r3, [r3, #7]
  403bd6:	011b      	lsls	r3, r3, #4
  403bd8:	b2da      	uxtb	r2, r3
					(status.row2 << 3) |
  403bda:	4b28      	ldr	r3, [pc, #160]	; (403c7c <scan_keypad+0x194>)
  403bdc:	7a1b      	ldrb	r3, [r3, #8]
  403bde:	00db      	lsls	r3, r3, #3

	status.col3 = ioport_get_pin_level(ECLAVE_COL3);
	status.col2 = ioport_get_pin_level(ECLAVE_COL2);
	status.col1 = ioport_get_pin_level(ECLAVE_COL1);
	
	tempKeypad = ((status.row3 << 4) |
  403be0:	b2db      	uxtb	r3, r3
  403be2:	4313      	orrs	r3, r2
  403be4:	b2da      	uxtb	r2, r3
					(status.row2 << 3) |
					(status.row1 << 2) |
  403be6:	4b25      	ldr	r3, [pc, #148]	; (403c7c <scan_keypad+0x194>)
  403be8:	7a5b      	ldrb	r3, [r3, #9]
  403bea:	009b      	lsls	r3, r3, #2

	status.col3 = ioport_get_pin_level(ECLAVE_COL3);
	status.col2 = ioport_get_pin_level(ECLAVE_COL2);
	status.col1 = ioport_get_pin_level(ECLAVE_COL1);
	
	tempKeypad = ((status.row3 << 4) |
  403bec:	b2db      	uxtb	r3, r3
  403bee:	4313      	orrs	r3, r2
  403bf0:	b2da      	uxtb	r2, r3
					(status.row2 << 3) |
					(status.row1 << 2) |
					(status.col2 << 1) |
  403bf2:	4b22      	ldr	r3, [pc, #136]	; (403c7c <scan_keypad+0x194>)
  403bf4:	795b      	ldrb	r3, [r3, #5]
  403bf6:	005b      	lsls	r3, r3, #1

	status.col3 = ioport_get_pin_level(ECLAVE_COL3);
	status.col2 = ioport_get_pin_level(ECLAVE_COL2);
	status.col1 = ioport_get_pin_level(ECLAVE_COL1);
	
	tempKeypad = ((status.row3 << 4) |
  403bf8:	b2db      	uxtb	r3, r3
  403bfa:	4313      	orrs	r3, r2
  403bfc:	b2da      	uxtb	r2, r3
					(status.row2 << 3) |
					(status.row1 << 2) |
					(status.col2 << 1) |
					(status.col1));
  403bfe:	4b1f      	ldr	r3, [pc, #124]	; (403c7c <scan_keypad+0x194>)
  403c00:	799b      	ldrb	r3, [r3, #6]

	status.col3 = ioport_get_pin_level(ECLAVE_COL3);
	status.col2 = ioport_get_pin_level(ECLAVE_COL2);
	status.col1 = ioport_get_pin_level(ECLAVE_COL1);
	
	tempKeypad = ((status.row3 << 4) |
  403c02:	b2db      	uxtb	r3, r3
  403c04:	4313      	orrs	r3, r2
  403c06:	b2db      	uxtb	r3, r3
  403c08:	71fb      	strb	r3, [r7, #7]
					(status.row2 << 3) |
					(status.row1 << 2) |
					(status.col2 << 1) |
					(status.col1));
					
	switch (tempKeypad)
  403c0a:	79fb      	ldrb	r3, [r7, #7]
  403c0c:	3b0e      	subs	r3, #14
  403c0e:	2b0f      	cmp	r3, #15
  403c10:	d826      	bhi.n	403c60 <scan_keypad+0x178>
  403c12:	a201      	add	r2, pc, #4	; (adr r2, 403c18 <scan_keypad+0x130>)
  403c14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  403c18:	00403c59 	.word	0x00403c59
  403c1c:	00403c61 	.word	0x00403c61
  403c20:	00403c61 	.word	0x00403c61
  403c24:	00403c61 	.word	0x00403c61
  403c28:	00403c61 	.word	0x00403c61
  403c2c:	00403c61 	.word	0x00403c61
  403c30:	00403c61 	.word	0x00403c61
  403c34:	00403c59 	.word	0x00403c59
  403c38:	00403c59 	.word	0x00403c59
  403c3c:	00403c61 	.word	0x00403c61
  403c40:	00403c61 	.word	0x00403c61
  403c44:	00403c59 	.word	0x00403c59
  403c48:	00403c59 	.word	0x00403c59
  403c4c:	00403c61 	.word	0x00403c61
  403c50:	00403c61 	.word	0x00403c61
  403c54:	00403c59 	.word	0x00403c59
		case KEYPAD_SW2:
		case KEYPAD_SW3:
		case KEYPAD_SW4:
		case KEYPAD_SW5:
		case KEYPAD_SW6:
			status.keypad = tempKeypad; //only report valid decodings
  403c58:	4a08      	ldr	r2, [pc, #32]	; (403c7c <scan_keypad+0x194>)
  403c5a:	79fb      	ldrb	r3, [r7, #7]
  403c5c:	7413      	strb	r3, [r2, #16]
			break;
  403c5e:	e003      	b.n	403c68 <scan_keypad+0x180>
		default:
			status.keypad = 0;
  403c60:	4b06      	ldr	r3, [pc, #24]	; (403c7c <scan_keypad+0x194>)
  403c62:	2200      	movs	r2, #0
  403c64:	741a      	strb	r2, [r3, #16]
			break; 
  403c66:	bf00      	nop
		
	}
}
  403c68:	3708      	adds	r7, #8
  403c6a:	46bd      	mov	sp, r7
  403c6c:	bd80      	pop	{r7, pc}
  403c6e:	bf00      	nop
  403c70:	00403511 	.word	0x00403511
  403c74:	00403599 	.word	0x00403599
  403c78:	00403605 	.word	0x00403605
  403c7c:	204012e4 	.word	0x204012e4

00403c80 <SysTick_Handler>:
 *
 *  Process System Tick Event.
 *  Increment the ul_ms_ticks counter.
 */
void SysTick_Handler(void)
{
  403c80:	b580      	push	{r7, lr}
  403c82:	af00      	add	r7, sp, #0
	g_ul_tick_count++;
  403c84:	4b33      	ldr	r3, [pc, #204]	; (403d54 <SysTick_Handler+0xd4>)
  403c86:	681b      	ldr	r3, [r3, #0]
  403c88:	3301      	adds	r3, #1
  403c8a:	4a32      	ldr	r2, [pc, #200]	; (403d54 <SysTick_Handler+0xd4>)
  403c8c:	6013      	str	r3, [r2, #0]
	ul_ms_ticks++; //jsi 6feb16
  403c8e:	4b32      	ldr	r3, [pc, #200]	; (403d58 <SysTick_Handler+0xd8>)
  403c90:	681b      	ldr	r3, [r3, #0]
  403c92:	3301      	adds	r3, #1
  403c94:	4a30      	ldr	r2, [pc, #192]	; (403d58 <SysTick_Handler+0xd8>)
  403c96:	6013      	str	r3, [r2, #0]
	
	if (controls.buzzer_enable)
  403c98:	4b30      	ldr	r3, [pc, #192]	; (403d5c <SysTick_Handler+0xdc>)
  403c9a:	78db      	ldrb	r3, [r3, #3]
  403c9c:	2b00      	cmp	r3, #0
  403c9e:	d028      	beq.n	403cf2 <SysTick_Handler+0x72>
	{
		controls.buzzer_count++;
  403ca0:	4b2e      	ldr	r3, [pc, #184]	; (403d5c <SysTick_Handler+0xdc>)
  403ca2:	88db      	ldrh	r3, [r3, #6]
  403ca4:	3301      	adds	r3, #1
  403ca6:	b29a      	uxth	r2, r3
  403ca8:	4b2c      	ldr	r3, [pc, #176]	; (403d5c <SysTick_Handler+0xdc>)
  403caa:	80da      	strh	r2, [r3, #6]
		
		if (controls.buzzer_cycle == CYCLE_ON)
  403cac:	4b2b      	ldr	r3, [pc, #172]	; (403d5c <SysTick_Handler+0xdc>)
  403cae:	791b      	ldrb	r3, [r3, #4]
  403cb0:	2b01      	cmp	r3, #1
  403cb2:	d10f      	bne.n	403cd4 <SysTick_Handler+0x54>
		{
			if (controls.buzzer_count > BUZZER_ON_COUNT)
  403cb4:	4b29      	ldr	r3, [pc, #164]	; (403d5c <SysTick_Handler+0xdc>)
  403cb6:	88db      	ldrh	r3, [r3, #6]
  403cb8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
  403cbc:	d919      	bls.n	403cf2 <SysTick_Handler+0x72>
			{
				controls.buzzer_count = 0;
  403cbe:	4b27      	ldr	r3, [pc, #156]	; (403d5c <SysTick_Handler+0xdc>)
  403cc0:	2200      	movs	r2, #0
  403cc2:	80da      	strh	r2, [r3, #6]
				controls.buzzer_cycle = CYCLE_OFF;
  403cc4:	4b25      	ldr	r3, [pc, #148]	; (403d5c <SysTick_Handler+0xdc>)
  403cc6:	2200      	movs	r2, #0
  403cc8:	711a      	strb	r2, [r3, #4]
				pwm_channel_disable(PWM0, PIN_PWM_LED0_CHANNEL);
  403cca:	4825      	ldr	r0, [pc, #148]	; (403d60 <SysTick_Handler+0xe0>)
  403ccc:	2100      	movs	r1, #0
  403cce:	4b25      	ldr	r3, [pc, #148]	; (403d64 <SysTick_Handler+0xe4>)
  403cd0:	4798      	blx	r3
  403cd2:	e00e      	b.n	403cf2 <SysTick_Handler+0x72>
			}
		}
		else
		{
			if (controls.buzzer_count > BUZZER_OFF_COUNT)
  403cd4:	4b21      	ldr	r3, [pc, #132]	; (403d5c <SysTick_Handler+0xdc>)
  403cd6:	88db      	ldrh	r3, [r3, #6]
  403cd8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
  403cdc:	d909      	bls.n	403cf2 <SysTick_Handler+0x72>
			{
				controls.buzzer_count = 0;
  403cde:	4b1f      	ldr	r3, [pc, #124]	; (403d5c <SysTick_Handler+0xdc>)
  403ce0:	2200      	movs	r2, #0
  403ce2:	80da      	strh	r2, [r3, #6]
				controls.buzzer_cycle = CYCLE_ON;
  403ce4:	4b1d      	ldr	r3, [pc, #116]	; (403d5c <SysTick_Handler+0xdc>)
  403ce6:	2201      	movs	r2, #1
  403ce8:	711a      	strb	r2, [r3, #4]
				pwm_channel_enable(PWM0, PIN_PWM_LED0_CHANNEL);
  403cea:	481d      	ldr	r0, [pc, #116]	; (403d60 <SysTick_Handler+0xe0>)
  403cec:	2100      	movs	r1, #0
  403cee:	4b1e      	ldr	r3, [pc, #120]	; (403d68 <SysTick_Handler+0xe8>)
  403cf0:	4798      	blx	r3
			}
		}
	}
	
	if (controls.solenoid_enable)
  403cf2:	4b1a      	ldr	r3, [pc, #104]	; (403d5c <SysTick_Handler+0xdc>)
  403cf4:	7a1b      	ldrb	r3, [r3, #8]
  403cf6:	2b00      	cmp	r3, #0
  403cf8:	d02b      	beq.n	403d52 <SysTick_Handler+0xd2>
	{
		controls.solenoid_count++;
  403cfa:	4b18      	ldr	r3, [pc, #96]	; (403d5c <SysTick_Handler+0xdc>)
  403cfc:	895b      	ldrh	r3, [r3, #10]
  403cfe:	3301      	adds	r3, #1
  403d00:	b29a      	uxth	r2, r3
  403d02:	4b16      	ldr	r3, [pc, #88]	; (403d5c <SysTick_Handler+0xdc>)
  403d04:	815a      	strh	r2, [r3, #10]
		
		if (controls.solenoid_cycle == CYCLE_ON)
  403d06:	4b15      	ldr	r3, [pc, #84]	; (403d5c <SysTick_Handler+0xdc>)
  403d08:	7a5b      	ldrb	r3, [r3, #9]
  403d0a:	2b01      	cmp	r3, #1
  403d0c:	d112      	bne.n	403d34 <SysTick_Handler+0xb4>
		{
			if (controls.solenoid_count > SOLENOID_ON_COUNT)
  403d0e:	4b13      	ldr	r3, [pc, #76]	; (403d5c <SysTick_Handler+0xdc>)
  403d10:	895b      	ldrh	r3, [r3, #10]
  403d12:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
  403d16:	d91c      	bls.n	403d52 <SysTick_Handler+0xd2>
			{
				controls.solenoid_count = 0;
  403d18:	4b10      	ldr	r3, [pc, #64]	; (403d5c <SysTick_Handler+0xdc>)
  403d1a:	2200      	movs	r2, #0
  403d1c:	815a      	strh	r2, [r3, #10]
				controls.solenoid_cycle = CYCLE_OFF;
  403d1e:	4b0f      	ldr	r3, [pc, #60]	; (403d5c <SysTick_Handler+0xdc>)
  403d20:	2200      	movs	r2, #0
  403d22:	725a      	strb	r2, [r3, #9]
				controls.solenoid_enable = 0; //solenoid is a one-shot
  403d24:	4b0d      	ldr	r3, [pc, #52]	; (403d5c <SysTick_Handler+0xdc>)
  403d26:	2200      	movs	r2, #0
  403d28:	721a      	strb	r2, [r3, #8]
				ioport_set_pin_level(ECLAVE_SOLENOID, IOPORT_PIN_LEVEL_LOW);
  403d2a:	2015      	movs	r0, #21
  403d2c:	2100      	movs	r1, #0
  403d2e:	4b0f      	ldr	r3, [pc, #60]	; (403d6c <SysTick_Handler+0xec>)
  403d30:	4798      	blx	r3
  403d32:	e00e      	b.n	403d52 <SysTick_Handler+0xd2>
			}
		}
		else
		{
			if (controls.solenoid_count > SOLENOID_OFF_COUNT)
  403d34:	4b09      	ldr	r3, [pc, #36]	; (403d5c <SysTick_Handler+0xdc>)
  403d36:	895b      	ldrh	r3, [r3, #10]
  403d38:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
  403d3c:	d909      	bls.n	403d52 <SysTick_Handler+0xd2>
			{
				controls.solenoid_count = 0;
  403d3e:	4b07      	ldr	r3, [pc, #28]	; (403d5c <SysTick_Handler+0xdc>)
  403d40:	2200      	movs	r2, #0
  403d42:	815a      	strh	r2, [r3, #10]
				controls.solenoid_cycle = CYCLE_ON;
  403d44:	4b05      	ldr	r3, [pc, #20]	; (403d5c <SysTick_Handler+0xdc>)
  403d46:	2201      	movs	r2, #1
  403d48:	725a      	strb	r2, [r3, #9]
				ioport_set_pin_level(ECLAVE_SOLENOID, IOPORT_PIN_LEVEL_HIGH);
  403d4a:	2015      	movs	r0, #21
  403d4c:	2101      	movs	r1, #1
  403d4e:	4b07      	ldr	r3, [pc, #28]	; (403d6c <SysTick_Handler+0xec>)
  403d50:	4798      	blx	r3
			}
			
		}
	}
}
  403d52:	bd80      	pop	{r7, pc}
  403d54:	20400afc 	.word	0x20400afc
  403d58:	204009a0 	.word	0x204009a0
  403d5c:	20400b00 	.word	0x20400b00
  403d60:	40020000 	.word	0x40020000
  403d64:	00401ba5 	.word	0x00401ba5
  403d68:	00401b81 	.word	0x00401b81
  403d6c:	00403599 	.word	0x00403599

00403d70 <USART0_Handler>:
/**
 *  \brief Handler for USART interrupt.
 *
 */
void USART_Handler(void)
{
  403d70:	b580      	push	{r7, lr}
  403d72:	b082      	sub	sp, #8
  403d74:	af00      	add	r7, sp, #0
	uint32_t ul_status;
	uint8_t uc_char;

	/* Read USART status. */
	ul_status = usart_get_status(BOARD_USART);
  403d76:	481b      	ldr	r0, [pc, #108]	; (403de4 <USART0_Handler+0x74>)
  403d78:	4b1b      	ldr	r3, [pc, #108]	; (403de8 <USART0_Handler+0x78>)
  403d7a:	4798      	blx	r3
  403d7c:	6078      	str	r0, [r7, #4]

	/*transmit interrupt rises*/
	if(ul_status & (US_IER_TXRDY | US_IER_TXEMPTY)) {
  403d7e:	687a      	ldr	r2, [r7, #4]
  403d80:	f240 2302 	movw	r3, #514	; 0x202
  403d84:	4013      	ands	r3, r2
  403d86:	2b00      	cmp	r3, #0
  403d88:	d004      	beq.n	403d94 <USART0_Handler+0x24>
		usart_disable_interrupt(BOARD_USART, (US_IER_TXRDY | US_IER_TXEMPTY));
  403d8a:	4816      	ldr	r0, [pc, #88]	; (403de4 <USART0_Handler+0x74>)
  403d8c:	f240 2102 	movw	r1, #514	; 0x202
  403d90:	4b16      	ldr	r3, [pc, #88]	; (403dec <USART0_Handler+0x7c>)
  403d92:	4798      	blx	r3
	}

	/*receive interrupt rise, store character to receiver buffer*/
	if((g_state == RECEIVING) && (usart_read(BOARD_USART, (uint32_t *)&uc_char) == 0)) {
  403d94:	4b16      	ldr	r3, [pc, #88]	; (403df0 <USART0_Handler+0x80>)
  403d96:	781b      	ldrb	r3, [r3, #0]
  403d98:	b2db      	uxtb	r3, r3
  403d9a:	2b02      	cmp	r3, #2
  403d9c:	d11f      	bne.n	403dde <USART0_Handler+0x6e>
  403d9e:	1cfb      	adds	r3, r7, #3
  403da0:	4810      	ldr	r0, [pc, #64]	; (403de4 <USART0_Handler+0x74>)
  403da2:	4619      	mov	r1, r3
  403da4:	4b13      	ldr	r3, [pc, #76]	; (403df4 <USART0_Handler+0x84>)
  403da6:	4798      	blx	r3
  403da8:	4603      	mov	r3, r0
  403daa:	2b00      	cmp	r3, #0
  403dac:	d117      	bne.n	403dde <USART0_Handler+0x6e>
		*p_revdata++ = uc_char;
  403dae:	4b12      	ldr	r3, [pc, #72]	; (403df8 <USART0_Handler+0x88>)
  403db0:	681b      	ldr	r3, [r3, #0]
  403db2:	1c5a      	adds	r2, r3, #1
  403db4:	4910      	ldr	r1, [pc, #64]	; (403df8 <USART0_Handler+0x88>)
  403db6:	600a      	str	r2, [r1, #0]
  403db8:	78fa      	ldrb	r2, [r7, #3]
  403dba:	701a      	strb	r2, [r3, #0]
		g_ulcount++;
  403dbc:	4b0f      	ldr	r3, [pc, #60]	; (403dfc <USART0_Handler+0x8c>)
  403dbe:	681b      	ldr	r3, [r3, #0]
  403dc0:	3301      	adds	r3, #1
  403dc2:	4a0e      	ldr	r2, [pc, #56]	; (403dfc <USART0_Handler+0x8c>)
  403dc4:	6013      	str	r3, [r2, #0]
		if(g_ulcount >= BUFFER_SIZE) {
  403dc6:	4b0d      	ldr	r3, [pc, #52]	; (403dfc <USART0_Handler+0x8c>)
  403dc8:	681b      	ldr	r3, [r3, #0]
  403dca:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
  403dce:	d306      	bcc.n	403dde <USART0_Handler+0x6e>
			g_state = RECEIVED;
  403dd0:	4b07      	ldr	r3, [pc, #28]	; (403df0 <USART0_Handler+0x80>)
  403dd2:	2203      	movs	r2, #3
  403dd4:	701a      	strb	r2, [r3, #0]
			usart_disable_interrupt(BOARD_USART, US_IER_RXRDY);
  403dd6:	4803      	ldr	r0, [pc, #12]	; (403de4 <USART0_Handler+0x74>)
  403dd8:	2101      	movs	r1, #1
  403dda:	4b04      	ldr	r3, [pc, #16]	; (403dec <USART0_Handler+0x7c>)
  403ddc:	4798      	blx	r3
		}
	}
}
  403dde:	3708      	adds	r7, #8
  403de0:	46bd      	mov	sp, r7
  403de2:	bd80      	pop	{r7, pc}
  403de4:	40024000 	.word	0x40024000
  403de8:	0040223d 	.word	0x0040223d
  403dec:	00402221 	.word	0x00402221
  403df0:	20400998 	.word	0x20400998
  403df4:	00402311 	.word	0x00402311
  403df8:	20400008 	.word	0x20400008
  403dfc:	2040099c 	.word	0x2040099c

00403e00 <configure_usart>:
 *
 *  Configure USART in RS485 mode, asynchronous, 8 bits, 1 stop bit,
 *  no parity, 256000 bauds and enable its transmitter and receiver.
 */
static void configure_usart(void)
{
  403e00:	b5b0      	push	{r4, r5, r7, lr}
  403e02:	b086      	sub	sp, #24
  403e04:	af00      	add	r7, sp, #0
	const sam_usart_opt_t usart_console_settings = {
  403e06:	4b14      	ldr	r3, [pc, #80]	; (403e58 <configure_usart+0x58>)
  403e08:	463c      	mov	r4, r7
  403e0a:	461d      	mov	r5, r3
  403e0c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  403e0e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  403e10:	e895 0003 	ldmia.w	r5, {r0, r1}
  403e14:	e884 0003 	stmia.w	r4, {r0, r1}
		/* This field is only used in IrDA mode. */
		0
	};

	/* Enable the peripheral clock in the PMC. */
	sysclk_enable_peripheral_clock(BOARD_ID_USART);
  403e18:	200d      	movs	r0, #13
  403e1a:	4b10      	ldr	r3, [pc, #64]	; (403e5c <configure_usart+0x5c>)
  403e1c:	4798      	blx	r3

	/* Configure USART in RS485 mode. */
//jsi 7feb16 we want rs232 not rs485 for our application	usart_init_rs485(BOARD_USART, &usart_console_settings,
//jsi 7feb16 we want rs232 not rs485 for our application			sysclk_get_cpu_hz());
			
	usart_init_rs232(BOARD_USART, &usart_console_settings, sysclk_get_cpu_hz());
  403e1e:	4b10      	ldr	r3, [pc, #64]	; (403e60 <configure_usart+0x60>)
  403e20:	4798      	blx	r3
  403e22:	4602      	mov	r2, r0
  403e24:	463b      	mov	r3, r7
  403e26:	480f      	ldr	r0, [pc, #60]	; (403e64 <configure_usart+0x64>)
  403e28:	4619      	mov	r1, r3
  403e2a:	4b0f      	ldr	r3, [pc, #60]	; (403e68 <configure_usart+0x68>)
  403e2c:	4798      	blx	r3

	/* enable transmitter timeguard, 4 bit period delay. */
	usart_set_tx_timeguard(BOARD_USART, 4);
  403e2e:	480d      	ldr	r0, [pc, #52]	; (403e64 <configure_usart+0x64>)
  403e30:	2104      	movs	r1, #4
  403e32:	4b0e      	ldr	r3, [pc, #56]	; (403e6c <configure_usart+0x6c>)
  403e34:	4798      	blx	r3

	/* Disable all the interrupts. */
	usart_disable_interrupt(BOARD_USART, ALL_INTERRUPT_MASK);
  403e36:	480b      	ldr	r0, [pc, #44]	; (403e64 <configure_usart+0x64>)
  403e38:	f04f 31ff 	mov.w	r1, #4294967295
  403e3c:	4b0c      	ldr	r3, [pc, #48]	; (403e70 <configure_usart+0x70>)
  403e3e:	4798      	blx	r3

	/* Enable TX & RX function. */
	usart_enable_tx(BOARD_USART);
  403e40:	4808      	ldr	r0, [pc, #32]	; (403e64 <configure_usart+0x64>)
  403e42:	4b0c      	ldr	r3, [pc, #48]	; (403e74 <configure_usart+0x74>)
  403e44:	4798      	blx	r3
	usart_enable_rx(BOARD_USART);
  403e46:	4807      	ldr	r0, [pc, #28]	; (403e64 <configure_usart+0x64>)
  403e48:	4b0b      	ldr	r3, [pc, #44]	; (403e78 <configure_usart+0x78>)
  403e4a:	4798      	blx	r3

	/* Configure and enable interrupt of USART. */
	NVIC_EnableIRQ(USART_IRQn);
  403e4c:	200d      	movs	r0, #13
  403e4e:	4b0b      	ldr	r3, [pc, #44]	; (403e7c <configure_usart+0x7c>)
  403e50:	4798      	blx	r3
}
  403e52:	3718      	adds	r7, #24
  403e54:	46bd      	mov	sp, r7
  403e56:	bdb0      	pop	{r4, r5, r7, pc}
  403e58:	0040a8c4 	.word	0x0040a8c4
  403e5c:	004034f9 	.word	0x004034f9
  403e60:	004034d1 	.word	0x004034d1
  403e64:	40024000 	.word	0x40024000
  403e68:	00402105 	.word	0x00402105
  403e6c:	004021b9 	.word	0x004021b9
  403e70:	00402221 	.word	0x00402221
  403e74:	00402189 	.word	0x00402189
  403e78:	004021d5 	.word	0x004021d5
  403e7c:	004031e5 	.word	0x004031e5

00403e80 <configure_systick>:

/**
 *  Configure system tick to generate an interrupt every 1us. Note that this was 1ms in the example code. jsi 11feb16
 */
static void configure_systick(void)
{
  403e80:	b580      	push	{r7, lr}
  403e82:	b082      	sub	sp, #8
  403e84:	af00      	add	r7, sp, #0
	uint32_t ul_flag;

	ul_flag = SysTick_Config(sysclk_get_cpu_hz()/SYS_TICK_FREQ);
  403e86:	4b0a      	ldr	r3, [pc, #40]	; (403eb0 <configure_systick+0x30>)
  403e88:	4798      	blx	r3
  403e8a:	4602      	mov	r2, r0
  403e8c:	4b09      	ldr	r3, [pc, #36]	; (403eb4 <configure_systick+0x34>)
  403e8e:	fba3 2302 	umull	r2, r3, r3, r2
  403e92:	099b      	lsrs	r3, r3, #6
  403e94:	4618      	mov	r0, r3
  403e96:	4b08      	ldr	r3, [pc, #32]	; (403eb8 <configure_systick+0x38>)
  403e98:	4798      	blx	r3
  403e9a:	6078      	str	r0, [r7, #4]
	if (ul_flag) {
  403e9c:	687b      	ldr	r3, [r7, #4]
  403e9e:	2b00      	cmp	r3, #0
  403ea0:	d003      	beq.n	403eaa <configure_systick+0x2a>
		puts("-F- Systick configuration error\r");
  403ea2:	4806      	ldr	r0, [pc, #24]	; (403ebc <configure_systick+0x3c>)
  403ea4:	4b06      	ldr	r3, [pc, #24]	; (403ec0 <configure_systick+0x40>)
  403ea6:	4798      	blx	r3
		while (1) {
		}
  403ea8:	e7fe      	b.n	403ea8 <configure_systick+0x28>
	}
}
  403eaa:	3708      	adds	r7, #8
  403eac:	46bd      	mov	sp, r7
  403eae:	bd80      	pop	{r7, pc}
  403eb0:	004034d1 	.word	0x004034d1
  403eb4:	10624dd3 	.word	0x10624dd3
  403eb8:	004032d1 	.word	0x004032d1
  403ebc:	0040a8dc 	.word	0x0040a8dc
  403ec0:	004051ad 	.word	0x004051ad

00403ec4 <configure_console>:

/**
 *  Configure UART for debug message output.
 */
static void configure_console(void)
{
  403ec4:	b590      	push	{r4, r7, lr}
  403ec6:	b085      	sub	sp, #20
  403ec8:	af00      	add	r7, sp, #0
	const usart_serial_options_t uart_serial_options = {
  403eca:	4b08      	ldr	r3, [pc, #32]	; (403eec <configure_console+0x28>)
  403ecc:	463c      	mov	r4, r7
  403ece:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  403ed0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		.stopbits = CONF_UART_STOP_BITS,
#endif
	};

	/* Configure console UART. */
	sysclk_enable_peripheral_clock(CONSOLE_UART_ID);
  403ed4:	2007      	movs	r0, #7
  403ed6:	4b06      	ldr	r3, [pc, #24]	; (403ef0 <configure_console+0x2c>)
  403ed8:	4798      	blx	r3
	stdio_serial_init(CONF_UART, &uart_serial_options);
  403eda:	463b      	mov	r3, r7
  403edc:	4805      	ldr	r0, [pc, #20]	; (403ef4 <configure_console+0x30>)
  403ede:	4619      	mov	r1, r3
  403ee0:	4b05      	ldr	r3, [pc, #20]	; (403ef8 <configure_console+0x34>)
  403ee2:	4798      	blx	r3
}
  403ee4:	3714      	adds	r7, #20
  403ee6:	46bd      	mov	sp, r7
  403ee8:	bd90      	pop	{r4, r7, pc}
  403eea:	bf00      	nop
  403eec:	0040a900 	.word	0x0040a900
  403ef0:	004034f9 	.word	0x004034f9
  403ef4:	400e0800 	.word	0x400e0800
  403ef8:	00403a31 	.word	0x00403a31

00403efc <func_transmit>:
* \param *p_buff  data to be transmitted
* \param ulsize size of all data.
*
*/
uint8_t func_transmit(const uint8_t *p_buff, uint32_t ulsize)
{
  403efc:	b580      	push	{r7, lr}
  403efe:	b082      	sub	sp, #8
  403f00:	af00      	add	r7, sp, #0
  403f02:	6078      	str	r0, [r7, #4]
  403f04:	6039      	str	r1, [r7, #0]
	Assert(p_buff);

	while(ulsize > 0) {
  403f06:	e013      	b.n	403f30 <func_transmit+0x34>
		if(0 == usart_write(BOARD_USART, *p_buff)){
  403f08:	687b      	ldr	r3, [r7, #4]
  403f0a:	781b      	ldrb	r3, [r3, #0]
  403f0c:	4810      	ldr	r0, [pc, #64]	; (403f50 <func_transmit+0x54>)
  403f0e:	4619      	mov	r1, r3
  403f10:	4b10      	ldr	r3, [pc, #64]	; (403f54 <func_transmit+0x58>)
  403f12:	4798      	blx	r3
  403f14:	4603      	mov	r3, r0
  403f16:	2b00      	cmp	r3, #0
  403f18:	d10a      	bne.n	403f30 <func_transmit+0x34>
			usart_enable_interrupt(BOARD_USART, US_IER_TXRDY | US_IER_TXEMPTY);
  403f1a:	480d      	ldr	r0, [pc, #52]	; (403f50 <func_transmit+0x54>)
  403f1c:	f240 2102 	movw	r1, #514	; 0x202
  403f20:	4b0d      	ldr	r3, [pc, #52]	; (403f58 <func_transmit+0x5c>)
  403f22:	4798      	blx	r3
			ulsize--;
  403f24:	683b      	ldr	r3, [r7, #0]
  403f26:	3b01      	subs	r3, #1
  403f28:	603b      	str	r3, [r7, #0]
			p_buff++;
  403f2a:	687b      	ldr	r3, [r7, #4]
  403f2c:	3301      	adds	r3, #1
  403f2e:	607b      	str	r3, [r7, #4]
*/
uint8_t func_transmit(const uint8_t *p_buff, uint32_t ulsize)
{
	Assert(p_buff);

	while(ulsize > 0) {
  403f30:	683b      	ldr	r3, [r7, #0]
  403f32:	2b00      	cmp	r3, #0
  403f34:	d1e8      	bne.n	403f08 <func_transmit+0xc>
			ulsize--;
			p_buff++;
		}
	}

	while(!usart_is_tx_empty(BOARD_USART)) {
  403f36:	bf00      	nop
  403f38:	4805      	ldr	r0, [pc, #20]	; (403f50 <func_transmit+0x54>)
  403f3a:	4b08      	ldr	r3, [pc, #32]	; (403f5c <func_transmit+0x60>)
  403f3c:	4798      	blx	r3
  403f3e:	4603      	mov	r3, r0
  403f40:	2b00      	cmp	r3, #0
  403f42:	d0f9      	beq.n	403f38 <func_transmit+0x3c>
		;  /*waiting for transmit over*/
	}

	return 0;
  403f44:	2300      	movs	r3, #0
}
  403f46:	4618      	mov	r0, r3
  403f48:	3708      	adds	r7, #8
  403f4a:	46bd      	mov	sp, r7
  403f4c:	bd80      	pop	{r7, pc}
  403f4e:	bf00      	nop
  403f50:	40024000 	.word	0x40024000
  403f54:	004022dd 	.word	0x004022dd
  403f58:	00402205 	.word	0x00402205
  403f5c:	0040228d 	.word	0x0040228d

00403f60 <twi_init>:
	}
}

static void twi_init(void);
static void twi_init(void)
{
  403f60:	b580      	push	{r7, lr}
  403f62:	b084      	sub	sp, #16
  403f64:	af00      	add	r7, sp, #0
	twihs_options_t opt;

	/* Enable the peripheral clock for TWI */
	pmc_enable_periph_clk(ID_TWIHS0);
  403f66:	2013      	movs	r0, #19
  403f68:	4b09      	ldr	r3, [pc, #36]	; (403f90 <twi_init+0x30>)
  403f6a:	4798      	blx	r3

	/* Configure the options of TWI driver */
	opt.master_clk = sysclk_get_cpu_hz();
  403f6c:	4b09      	ldr	r3, [pc, #36]	; (403f94 <twi_init+0x34>)
  403f6e:	4798      	blx	r3
  403f70:	4603      	mov	r3, r0
  403f72:	607b      	str	r3, [r7, #4]
	opt.speed      = TWIHS_CLK; //400KHz
  403f74:	4b08      	ldr	r3, [pc, #32]	; (403f98 <twi_init+0x38>)
  403f76:	60bb      	str	r3, [r7, #8]

	if (twihs_master_init(TWIHS0, &opt) != TWIHS_SUCCESS) {
  403f78:	1d3b      	adds	r3, r7, #4
  403f7a:	4808      	ldr	r0, [pc, #32]	; (403f9c <twi_init+0x3c>)
  403f7c:	4619      	mov	r1, r3
  403f7e:	4b08      	ldr	r3, [pc, #32]	; (403fa0 <twi_init+0x40>)
  403f80:	4798      	blx	r3
  403f82:	4603      	mov	r3, r0
  403f84:	2b00      	cmp	r3, #0
  403f86:	d000      	beq.n	403f8a <twi_init+0x2a>
		while (1) {
			/* Capture error */
		}
  403f88:	e7fe      	b.n	403f88 <twi_init+0x28>
	}
}
  403f8a:	3710      	adds	r7, #16
  403f8c:	46bd      	mov	sp, r7
  403f8e:	bd80      	pop	{r7, pc}
  403f90:	004016d1 	.word	0x004016d1
  403f94:	004034d1 	.word	0x004034d1
  403f98:	00061a80 	.word	0x00061a80
  403f9c:	40018000 	.word	0x40018000
  403fa0:	00401c65 	.word	0x00401c65

00403fa4 <afec0_data_ready>:

uint32_t g_afec0_sample_data;
uint32_t g_afec1_sample_data;

static void afec0_data_ready(void)
{
  403fa4:	b580      	push	{r7, lr}
  403fa6:	af00      	add	r7, sp, #0
	g_afec0_sample_data = afec_get_latest_value(AFEC0);
  403fa8:	4804      	ldr	r0, [pc, #16]	; (403fbc <afec0_data_ready+0x18>)
  403faa:	4b05      	ldr	r3, [pc, #20]	; (403fc0 <afec0_data_ready+0x1c>)
  403fac:	4798      	blx	r3
  403fae:	4602      	mov	r2, r0
  403fb0:	4b04      	ldr	r3, [pc, #16]	; (403fc4 <afec0_data_ready+0x20>)
  403fb2:	601a      	str	r2, [r3, #0]
	is_conversion_done = true;
  403fb4:	4b04      	ldr	r3, [pc, #16]	; (403fc8 <afec0_data_ready+0x24>)
  403fb6:	2201      	movs	r2, #1
  403fb8:	701a      	strb	r2, [r3, #0]
}
  403fba:	bd80      	pop	{r7, pc}
  403fbc:	4003c000 	.word	0x4003c000
  403fc0:	0040341d 	.word	0x0040341d
  403fc4:	204012f8 	.word	0x204012f8
  403fc8:	204009a4 	.word	0x204009a4

00403fcc <afec1_data_ready>:

static void afec1_data_ready(void)
{
  403fcc:	b580      	push	{r7, lr}
  403fce:	af00      	add	r7, sp, #0
	g_afec1_sample_data = afec_get_latest_value(AFEC1);
  403fd0:	4804      	ldr	r0, [pc, #16]	; (403fe4 <afec1_data_ready+0x18>)
  403fd2:	4b05      	ldr	r3, [pc, #20]	; (403fe8 <afec1_data_ready+0x1c>)
  403fd4:	4798      	blx	r3
  403fd6:	4602      	mov	r2, r0
  403fd8:	4b04      	ldr	r3, [pc, #16]	; (403fec <afec1_data_ready+0x20>)
  403fda:	601a      	str	r2, [r3, #0]
	is_conversion_done = true;
  403fdc:	4b04      	ldr	r3, [pc, #16]	; (403ff0 <afec1_data_ready+0x24>)
  403fde:	2201      	movs	r2, #1
  403fe0:	701a      	strb	r2, [r3, #0]
}
  403fe2:	bd80      	pop	{r7, pc}
  403fe4:	40064000 	.word	0x40064000
  403fe8:	0040341d 	.word	0x0040341d
  403fec:	20400abc 	.word	0x20400abc
  403ff0:	204009a4 	.word	0x204009a4

00403ff4 <init_adc>:



void init_adc(void)
{
  403ff4:	b590      	push	{r4, r7, lr}
  403ff6:	b089      	sub	sp, #36	; 0x24
  403ff8:	af00      	add	r7, sp, #0
	struct afec_config afec_cfg;
	struct afec_ch_config afec_ch_cfg;

	
	afec_enable(AFEC0);
  403ffa:	4827      	ldr	r0, [pc, #156]	; (404098 <init_adc+0xa4>)
  403ffc:	4b27      	ldr	r3, [pc, #156]	; (40409c <init_adc+0xa8>)
  403ffe:	4798      	blx	r3
	afec_enable(AFEC1);
  404000:	4827      	ldr	r0, [pc, #156]	; (4040a0 <init_adc+0xac>)
  404002:	4b26      	ldr	r3, [pc, #152]	; (40409c <init_adc+0xa8>)
  404004:	4798      	blx	r3

	afec_get_config_defaults(&afec_cfg);
  404006:	f107 0308 	add.w	r3, r7, #8
  40400a:	4618      	mov	r0, r3
  40400c:	4b25      	ldr	r3, [pc, #148]	; (4040a4 <init_adc+0xb0>)
  40400e:	4798      	blx	r3
	afec_cfg.resolution = AFEC_12_BITS;
  404010:	2300      	movs	r3, #0
  404012:	60bb      	str	r3, [r7, #8]
	afec_init(AFEC0, &afec_cfg);
  404014:	f107 0308 	add.w	r3, r7, #8
  404018:	481f      	ldr	r0, [pc, #124]	; (404098 <init_adc+0xa4>)
  40401a:	4619      	mov	r1, r3
  40401c:	4b22      	ldr	r3, [pc, #136]	; (4040a8 <init_adc+0xb4>)
  40401e:	4798      	blx	r3
	afec_init(AFEC1, &afec_cfg);
  404020:	f107 0308 	add.w	r3, r7, #8
  404024:	481e      	ldr	r0, [pc, #120]	; (4040a0 <init_adc+0xac>)
  404026:	4619      	mov	r1, r3
  404028:	4b1f      	ldr	r3, [pc, #124]	; (4040a8 <init_adc+0xb4>)
  40402a:	4798      	blx	r3
	
	afec_ch_get_config_defaults(&afec_ch_cfg);
  40402c:	1d3b      	adds	r3, r7, #4
  40402e:	4618      	mov	r0, r3
  404030:	4b1e      	ldr	r3, [pc, #120]	; (4040ac <init_adc+0xb8>)
  404032:	4798      	blx	r3
	afec_ch_cfg.gain = AFEC_GAINVALUE_3;
  404034:	2303      	movs	r3, #3
  404036:	717b      	strb	r3, [r7, #5]
	
	afec_ch_set_config(AFEC1, AFEC_CHANNEL_9, &afec_ch_cfg);
  404038:	1d3b      	adds	r3, r7, #4
  40403a:	4819      	ldr	r0, [pc, #100]	; (4040a0 <init_adc+0xac>)
  40403c:	2109      	movs	r1, #9
  40403e:	461a      	mov	r2, r3
  404040:	4b1b      	ldr	r3, [pc, #108]	; (4040b0 <init_adc+0xbc>)
  404042:	4798      	blx	r3
	afec_ch_set_config(AFEC0, AFEC_CHANNEL_4, &afec_ch_cfg);
  404044:	1d3b      	adds	r3, r7, #4
  404046:	4814      	ldr	r0, [pc, #80]	; (404098 <init_adc+0xa4>)
  404048:	2104      	movs	r1, #4
  40404a:	461a      	mov	r2, r3
  40404c:	4b18      	ldr	r3, [pc, #96]	; (4040b0 <init_adc+0xbc>)
  40404e:	4798      	blx	r3
	afec_ch_set_config(AFEC1, AFEC_CHANNEL_4, &afec_ch_cfg);
  404050:	1d3b      	adds	r3, r7, #4
  404052:	4813      	ldr	r0, [pc, #76]	; (4040a0 <init_adc+0xac>)
  404054:	2104      	movs	r1, #4
  404056:	461a      	mov	r2, r3
  404058:	4b15      	ldr	r3, [pc, #84]	; (4040b0 <init_adc+0xbc>)
  40405a:	4798      	blx	r3
	afec_ch_set_config(AFEC1, AFEC_CHANNEL_5, &afec_ch_cfg);
  40405c:	1d3b      	adds	r3, r7, #4
  40405e:	4810      	ldr	r0, [pc, #64]	; (4040a0 <init_adc+0xac>)
  404060:	2105      	movs	r1, #5
  404062:	461a      	mov	r2, r3
  404064:	4b12      	ldr	r3, [pc, #72]	; (4040b0 <init_adc+0xbc>)
  404066:	4798      	blx	r3

	afec_set_trigger(AFEC0, AFEC_TRIG_SW);
  404068:	480b      	ldr	r0, [pc, #44]	; (404098 <init_adc+0xa4>)
  40406a:	2100      	movs	r1, #0
  40406c:	4b11      	ldr	r3, [pc, #68]	; (4040b4 <init_adc+0xc0>)
  40406e:	4798      	blx	r3
	afec_set_trigger(AFEC1, AFEC_TRIG_SW);
  404070:	480b      	ldr	r0, [pc, #44]	; (4040a0 <init_adc+0xac>)
  404072:	2100      	movs	r1, #0
  404074:	4b0f      	ldr	r3, [pc, #60]	; (4040b4 <init_adc+0xc0>)
  404076:	4798      	blx	r3

	afec_set_callback(AFEC0, AFEC_INTERRUPT_DATA_READY, afec0_data_ready, 1);
  404078:	4807      	ldr	r0, [pc, #28]	; (404098 <init_adc+0xa4>)
  40407a:	210c      	movs	r1, #12
  40407c:	4a0e      	ldr	r2, [pc, #56]	; (4040b8 <init_adc+0xc4>)
  40407e:	2301      	movs	r3, #1
  404080:	4c0e      	ldr	r4, [pc, #56]	; (4040bc <init_adc+0xc8>)
  404082:	47a0      	blx	r4
	afec_set_callback(AFEC1, AFEC_INTERRUPT_DATA_READY, afec1_data_ready, 1);
  404084:	4806      	ldr	r0, [pc, #24]	; (4040a0 <init_adc+0xac>)
  404086:	210c      	movs	r1, #12
  404088:	4a0d      	ldr	r2, [pc, #52]	; (4040c0 <init_adc+0xcc>)
  40408a:	2301      	movs	r3, #1
  40408c:	4c0b      	ldr	r4, [pc, #44]	; (4040bc <init_adc+0xc8>)
  40408e:	47a0      	blx	r4
//	while((afec_get_interrupt_status(AFEC0) & AFEC_ISR_EOCAL) != AFEC_ISR_EOCAL);
	
//	afec_start_calibration(AFEC1);
//	while((afec_get_interrupt_status(AFEC1) & AFEC_ISR_EOCAL) != AFEC_ISR_EOCAL);
	
}
  404090:	3724      	adds	r7, #36	; 0x24
  404092:	46bd      	mov	sp, r7
  404094:	bd90      	pop	{r4, r7, pc}
  404096:	bf00      	nop
  404098:	4003c000 	.word	0x4003c000
  40409c:	00401291 	.word	0x00401291
  4040a0:	40064000 	.word	0x40064000
  4040a4:	00400f8d 	.word	0x00400f8d
  4040a8:	0040100d 	.word	0x0040100d
  4040ac:	00400fed 	.word	0x00400fed
  4040b0:	00400efd 	.word	0x00400efd
  4040b4:	00403331 	.word	0x00403331
  4040b8:	00403fa5 	.word	0x00403fa5
  4040bc:	00401085 	.word	0x00401085
  4040c0:	00403fcd 	.word	0x00403fcd

004040c4 <PWM0_Handler>:

/**
 * \brief Interrupt handler for the PWM controller.
 */
void PWM0_Handler(void)
{
  4040c4:	b580      	push	{r7, lr}
  4040c6:	b082      	sub	sp, #8
  4040c8:	af00      	add	r7, sp, #0
	static uint32_t ul_count = 0;  /* PWM counter value */
	static uint32_t ul_duty = INIT_DUTY_VALUE;  /* PWM duty cycle rate */
	static uint8_t fade_in = 1;  /* LED fade in flag */

	uint32_t events = pwm_channel_get_interrupt_status(PWM0);
  4040ca:	481e      	ldr	r0, [pc, #120]	; (404144 <PWM0_Handler+0x80>)
  4040cc:	4b1e      	ldr	r3, [pc, #120]	; (404148 <PWM0_Handler+0x84>)
  4040ce:	4798      	blx	r3
  4040d0:	6078      	str	r0, [r7, #4]

	/* Interrupt on PIN_PWM_LED0_CHANNEL */
	if ((events & (1 << PIN_PWM_LED0_CHANNEL)) ==
  4040d2:	687b      	ldr	r3, [r7, #4]
  4040d4:	f003 0301 	and.w	r3, r3, #1
  4040d8:	2b00      	cmp	r3, #0
  4040da:	d030      	beq.n	40413e <PWM0_Handler+0x7a>
	(1 << PIN_PWM_LED0_CHANNEL)) {
		ul_count++;
  4040dc:	4b1b      	ldr	r3, [pc, #108]	; (40414c <PWM0_Handler+0x88>)
  4040de:	681b      	ldr	r3, [r3, #0]
  4040e0:	3301      	adds	r3, #1
  4040e2:	4a1a      	ldr	r2, [pc, #104]	; (40414c <PWM0_Handler+0x88>)
  4040e4:	6013      	str	r3, [r2, #0]

		/* Fade in/out */
		if (ul_count == (PWM_FREQUENCY / (PERIOD_VALUE - INIT_DUTY_VALUE))) {
  4040e6:	4b19      	ldr	r3, [pc, #100]	; (40414c <PWM0_Handler+0x88>)
  4040e8:	681b      	ldr	r3, [r3, #0]
  4040ea:	2b28      	cmp	r3, #40	; 0x28
  4040ec:	d127      	bne.n	40413e <PWM0_Handler+0x7a>
			/* Fade in */
			if (fade_in) {
  4040ee:	4b18      	ldr	r3, [pc, #96]	; (404150 <PWM0_Handler+0x8c>)
  4040f0:	781b      	ldrb	r3, [r3, #0]
  4040f2:	2b00      	cmp	r3, #0
  4040f4:	d00c      	beq.n	404110 <PWM0_Handler+0x4c>
				ul_duty++;
  4040f6:	4b17      	ldr	r3, [pc, #92]	; (404154 <PWM0_Handler+0x90>)
  4040f8:	681b      	ldr	r3, [r3, #0]
  4040fa:	3301      	adds	r3, #1
  4040fc:	4a15      	ldr	r2, [pc, #84]	; (404154 <PWM0_Handler+0x90>)
  4040fe:	6013      	str	r3, [r2, #0]
				if (ul_duty == PERIOD_VALUE) {
  404100:	4b14      	ldr	r3, [pc, #80]	; (404154 <PWM0_Handler+0x90>)
  404102:	681b      	ldr	r3, [r3, #0]
  404104:	2b64      	cmp	r3, #100	; 0x64
  404106:	d10f      	bne.n	404128 <PWM0_Handler+0x64>
					fade_in = 0;
  404108:	4b11      	ldr	r3, [pc, #68]	; (404150 <PWM0_Handler+0x8c>)
  40410a:	2200      	movs	r2, #0
  40410c:	701a      	strb	r2, [r3, #0]
  40410e:	e00b      	b.n	404128 <PWM0_Handler+0x64>
					}
				} else {
				/* Fade out */
				ul_duty--;
  404110:	4b10      	ldr	r3, [pc, #64]	; (404154 <PWM0_Handler+0x90>)
  404112:	681b      	ldr	r3, [r3, #0]
  404114:	3b01      	subs	r3, #1
  404116:	4a0f      	ldr	r2, [pc, #60]	; (404154 <PWM0_Handler+0x90>)
  404118:	6013      	str	r3, [r2, #0]
				if (ul_duty == INIT_DUTY_VALUE) {
  40411a:	4b0e      	ldr	r3, [pc, #56]	; (404154 <PWM0_Handler+0x90>)
  40411c:	681b      	ldr	r3, [r3, #0]
  40411e:	2b32      	cmp	r3, #50	; 0x32
  404120:	d102      	bne.n	404128 <PWM0_Handler+0x64>
					fade_in = 1;
  404122:	4b0b      	ldr	r3, [pc, #44]	; (404150 <PWM0_Handler+0x8c>)
  404124:	2201      	movs	r2, #1
  404126:	701a      	strb	r2, [r3, #0]
				}
			}

			/* Set new duty cycle */
			ul_count = 0;
  404128:	4b08      	ldr	r3, [pc, #32]	; (40414c <PWM0_Handler+0x88>)
  40412a:	2200      	movs	r2, #0
  40412c:	601a      	str	r2, [r3, #0]
			g_pwm_channel_led.channel = PIN_PWM_LED0_CHANNEL;
  40412e:	4b0a      	ldr	r3, [pc, #40]	; (404158 <PWM0_Handler+0x94>)
  404130:	2200      	movs	r2, #0
  404132:	601a      	str	r2, [r3, #0]
//jsi 16feb16			pwm_channel_update_duty(PWM0, &g_pwm_channel_led, ul_duty);
					pwm_channel_update_duty(PWM0, &g_pwm_channel_led, (PERIOD_VALUE/2)); //jsi 16feb16 just fixed for now
  404134:	4803      	ldr	r0, [pc, #12]	; (404144 <PWM0_Handler+0x80>)
  404136:	4908      	ldr	r1, [pc, #32]	; (404158 <PWM0_Handler+0x94>)
  404138:	2232      	movs	r2, #50	; 0x32
  40413a:	4b08      	ldr	r3, [pc, #32]	; (40415c <PWM0_Handler+0x98>)
  40413c:	4798      	blx	r3
//jsi 15feb16			g_pwm_channel_led.channel = PIN_PWM_LED1_CHANNEL;
//jsi 15feb16			pwm_channel_update_duty(PWM0, &g_pwm_channel_led, ul_duty);
		}
	}
}
  40413e:	3708      	adds	r7, #8
  404140:	46bd      	mov	sp, r7
  404142:	bd80      	pop	{r7, pc}
  404144:	40020000 	.word	0x40020000
  404148:	00401bc9 	.word	0x00401bc9
  40414c:	204009c8 	.word	0x204009c8
  404150:	20400084 	.word	0x20400084
  404154:	20400088 	.word	0x20400088
  404158:	20400ac0 	.word	0x20400ac0
  40415c:	00401b39 	.word	0x00401b39

00404160 <init_pwm>:



void init_pwm(void)
{
  404160:	b580      	push	{r7, lr}
  404162:	b084      	sub	sp, #16
  404164:	af00      	add	r7, sp, #0
	/* Enable PWM peripheral clock */
	pmc_enable_periph_clk(ID_PWM0);
  404166:	201f      	movs	r0, #31
  404168:	4b30      	ldr	r3, [pc, #192]	; (40422c <init_pwm+0xcc>)
  40416a:	4798      	blx	r3

	/* Disable PWM channels for LEDs */
	pwm_channel_disable(PWM0, PIN_PWM_LED0_CHANNEL);
  40416c:	4830      	ldr	r0, [pc, #192]	; (404230 <init_pwm+0xd0>)
  40416e:	2100      	movs	r1, #0
  404170:	4b30      	ldr	r3, [pc, #192]	; (404234 <init_pwm+0xd4>)
  404172:	4798      	blx	r3
	pwm_channel_disable(PWM0, PIN_PWM_LED1_CHANNEL);
  404174:	482e      	ldr	r0, [pc, #184]	; (404230 <init_pwm+0xd0>)
  404176:	2101      	movs	r1, #1
  404178:	4b2e      	ldr	r3, [pc, #184]	; (404234 <init_pwm+0xd4>)
  40417a:	4798      	blx	r3

	/* Set PWM clock A as PWM_FREQUENCY*PERIOD_VALUE (clock B is not used) */
	pwm_clock_t clock_setting = {
  40417c:	4b2e      	ldr	r3, [pc, #184]	; (404238 <init_pwm+0xd8>)
  40417e:	607b      	str	r3, [r7, #4]
  404180:	2300      	movs	r3, #0
  404182:	60bb      	str	r3, [r7, #8]
		.ul_clka = PWM_FREQUENCY * PERIOD_VALUE,
		.ul_clkb = 0,
		.ul_mck = sysclk_get_cpu_hz()
  404184:	4b2d      	ldr	r3, [pc, #180]	; (40423c <init_pwm+0xdc>)
  404186:	4798      	blx	r3
  404188:	4603      	mov	r3, r0
	/* Disable PWM channels for LEDs */
	pwm_channel_disable(PWM0, PIN_PWM_LED0_CHANNEL);
	pwm_channel_disable(PWM0, PIN_PWM_LED1_CHANNEL);

	/* Set PWM clock A as PWM_FREQUENCY*PERIOD_VALUE (clock B is not used) */
	pwm_clock_t clock_setting = {
  40418a:	60fb      	str	r3, [r7, #12]
		.ul_clka = PWM_FREQUENCY * PERIOD_VALUE,
		.ul_clkb = 0,
		.ul_mck = sysclk_get_cpu_hz()
	};
	pwm_init(PWM0, &clock_setting);
  40418c:	1d3b      	adds	r3, r7, #4
  40418e:	4828      	ldr	r0, [pc, #160]	; (404230 <init_pwm+0xd0>)
  404190:	4619      	mov	r1, r3
  404192:	4b2b      	ldr	r3, [pc, #172]	; (404240 <init_pwm+0xe0>)
  404194:	4798      	blx	r3

	/* Initialize PWM channel for LED0 */
	/* Period is left-aligned */
	g_pwm_channel_led.alignment = PWM_ALIGN_LEFT;
  404196:	4b2b      	ldr	r3, [pc, #172]	; (404244 <init_pwm+0xe4>)
  404198:	2200      	movs	r2, #0
  40419a:	811a      	strh	r2, [r3, #8]
	/* Output waveform starts at a low level */
	g_pwm_channel_led.polarity = PWM_LOW;
  40419c:	4b29      	ldr	r3, [pc, #164]	; (404244 <init_pwm+0xe4>)
  40419e:	2200      	movs	r2, #0
  4041a0:	729a      	strb	r2, [r3, #10]
	/* Use PWM clock A as source clock */
	g_pwm_channel_led.ul_prescaler = PWM_CMR_CPRE_CLKA;
  4041a2:	4b28      	ldr	r3, [pc, #160]	; (404244 <init_pwm+0xe4>)
  4041a4:	220b      	movs	r2, #11
  4041a6:	605a      	str	r2, [r3, #4]
	/* Period value of output waveform */
	g_pwm_channel_led.ul_period = PERIOD_VALUE;
  4041a8:	4b26      	ldr	r3, [pc, #152]	; (404244 <init_pwm+0xe4>)
  4041aa:	2264      	movs	r2, #100	; 0x64
  4041ac:	611a      	str	r2, [r3, #16]
	/* Duty cycle value of output waveform */
	g_pwm_channel_led.ul_duty = INIT_DUTY_VALUE;
  4041ae:	4b25      	ldr	r3, [pc, #148]	; (404244 <init_pwm+0xe4>)
  4041b0:	2232      	movs	r2, #50	; 0x32
  4041b2:	60da      	str	r2, [r3, #12]
	g_pwm_channel_led.channel = PIN_PWM_LED0_CHANNEL;
  4041b4:	4b23      	ldr	r3, [pc, #140]	; (404244 <init_pwm+0xe4>)
  4041b6:	2200      	movs	r2, #0
  4041b8:	601a      	str	r2, [r3, #0]
	pwm_channel_init(PWM0, &g_pwm_channel_led);
  4041ba:	481d      	ldr	r0, [pc, #116]	; (404230 <init_pwm+0xd0>)
  4041bc:	4921      	ldr	r1, [pc, #132]	; (404244 <init_pwm+0xe4>)
  4041be:	4b22      	ldr	r3, [pc, #136]	; (404248 <init_pwm+0xe8>)
  4041c0:	4798      	blx	r3

	/* Enable channel counter event interrupt */
	pwm_channel_enable_interrupt(PWM0, PIN_PWM_LED0_CHANNEL, 0);
  4041c2:	481b      	ldr	r0, [pc, #108]	; (404230 <init_pwm+0xd0>)
  4041c4:	2100      	movs	r1, #0
  4041c6:	2200      	movs	r2, #0
  4041c8:	4b20      	ldr	r3, [pc, #128]	; (40424c <init_pwm+0xec>)
  4041ca:	4798      	blx	r3

	/* Initialize PWM channel for LED1 */
	/* Period is center-aligned */
	g_pwm_channel_led.alignment = PWM_ALIGN_CENTER;
  4041cc:	4b1d      	ldr	r3, [pc, #116]	; (404244 <init_pwm+0xe4>)
  4041ce:	f44f 7280 	mov.w	r2, #256	; 0x100
  4041d2:	811a      	strh	r2, [r3, #8]
	/* Output waveform starts at a high level */
	g_pwm_channel_led.polarity = PWM_HIGH;
  4041d4:	4b1b      	ldr	r3, [pc, #108]	; (404244 <init_pwm+0xe4>)
  4041d6:	2201      	movs	r2, #1
  4041d8:	729a      	strb	r2, [r3, #10]
	/* Use PWM clock A as source clock */
	g_pwm_channel_led.ul_prescaler = PWM_CMR_CPRE_CLKA;
  4041da:	4b1a      	ldr	r3, [pc, #104]	; (404244 <init_pwm+0xe4>)
  4041dc:	220b      	movs	r2, #11
  4041de:	605a      	str	r2, [r3, #4]
	/* Period value of output waveform */
	g_pwm_channel_led.ul_period = PERIOD_VALUE;
  4041e0:	4b18      	ldr	r3, [pc, #96]	; (404244 <init_pwm+0xe4>)
  4041e2:	2264      	movs	r2, #100	; 0x64
  4041e4:	611a      	str	r2, [r3, #16]
	/* Duty cycle value of output waveform */
	g_pwm_channel_led.ul_duty = INIT_DUTY_VALUE;
  4041e6:	4b17      	ldr	r3, [pc, #92]	; (404244 <init_pwm+0xe4>)
  4041e8:	2232      	movs	r2, #50	; 0x32
  4041ea:	60da      	str	r2, [r3, #12]
	g_pwm_channel_led.channel = PIN_PWM_LED1_CHANNEL;
  4041ec:	4b15      	ldr	r3, [pc, #84]	; (404244 <init_pwm+0xe4>)
  4041ee:	2201      	movs	r2, #1
  4041f0:	601a      	str	r2, [r3, #0]
	pwm_channel_init(PWM0, &g_pwm_channel_led);
  4041f2:	480f      	ldr	r0, [pc, #60]	; (404230 <init_pwm+0xd0>)
  4041f4:	4913      	ldr	r1, [pc, #76]	; (404244 <init_pwm+0xe4>)
  4041f6:	4b14      	ldr	r3, [pc, #80]	; (404248 <init_pwm+0xe8>)
  4041f8:	4798      	blx	r3

	/* Disable channel counter event interrupt */
	pwm_channel_disable_interrupt(PWM0, PIN_PWM_LED1_CHANNEL, 0);
  4041fa:	480d      	ldr	r0, [pc, #52]	; (404230 <init_pwm+0xd0>)
  4041fc:	2101      	movs	r1, #1
  4041fe:	2200      	movs	r2, #0
  404200:	4b13      	ldr	r3, [pc, #76]	; (404250 <init_pwm+0xf0>)
  404202:	4798      	blx	r3

	/* Configure interrupt and enable PWM interrupt */
	NVIC_DisableIRQ(PWM0_IRQn);
  404204:	201f      	movs	r0, #31
  404206:	4b13      	ldr	r3, [pc, #76]	; (404254 <init_pwm+0xf4>)
  404208:	4798      	blx	r3
	NVIC_ClearPendingIRQ(PWM0_IRQn);
  40420a:	201f      	movs	r0, #31
  40420c:	4b12      	ldr	r3, [pc, #72]	; (404258 <init_pwm+0xf8>)
  40420e:	4798      	blx	r3
	NVIC_SetPriority(PWM0_IRQn, 0);
  404210:	201f      	movs	r0, #31
  404212:	2100      	movs	r1, #0
  404214:	4b11      	ldr	r3, [pc, #68]	; (40425c <init_pwm+0xfc>)
  404216:	4798      	blx	r3
	NVIC_EnableIRQ(PWM0_IRQn);
  404218:	201f      	movs	r0, #31
  40421a:	4b11      	ldr	r3, [pc, #68]	; (404260 <init_pwm+0x100>)
  40421c:	4798      	blx	r3
	
	/* Enable PWM channels for LEDs */
	pwm_channel_enable(PWM0, PIN_PWM_LED0_CHANNEL);
  40421e:	4804      	ldr	r0, [pc, #16]	; (404230 <init_pwm+0xd0>)
  404220:	2100      	movs	r1, #0
  404222:	4b10      	ldr	r3, [pc, #64]	; (404264 <init_pwm+0x104>)
  404224:	4798      	blx	r3
//jsi 15feb16	pwm_channel_enable(PWM0, PIN_PWM_LED1_CHANNEL);

}
  404226:	3710      	adds	r7, #16
  404228:	46bd      	mov	sp, r7
  40422a:	bd80      	pop	{r7, pc}
  40422c:	004016d1 	.word	0x004016d1
  404230:	40020000 	.word	0x40020000
  404234:	00401ba5 	.word	0x00401ba5
  404238:	00030d40 	.word	0x00030d40
  40423c:	004034d1 	.word	0x004034d1
  404240:	004017d1 	.word	0x004017d1
  404244:	20400ac0 	.word	0x20400ac0
  404248:	00401851 	.word	0x00401851
  40424c:	00401be1 	.word	0x00401be1
  404250:	00401c11 	.word	0x00401c11
  404254:	00403215 	.word	0x00403215
  404258:	00403249 	.word	0x00403249
  40425c:	0040327d 	.word	0x0040327d
  404260:	004031e5 	.word	0x004031e5
  404264:	00401b81 	.word	0x00401b81

00404268 <main>:
 */

#  define EXAMPLE_LED_GPIO    LED0_GPIO

int main(void) //6feb16 this version of main has been hacked up for only exactly what we need
{
  404268:	b5f0      	push	{r4, r5, r6, r7, lr}
  40426a:	b0a3      	sub	sp, #140	; 0x8c
  40426c:	af06      	add	r7, sp, #24
	char		txBuf[11] = {0,0,0,0,0,0,0,0,0,0,0}, rxByte;
  40426e:	2300      	movs	r3, #0
  404270:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  404274:	2300      	movs	r3, #0
  404276:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
  40427a:	2300      	movs	r3, #0
  40427c:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
  404280:	2300      	movs	r3, #0
  404282:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  404286:	2300      	movs	r3, #0
  404288:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  40428c:	2300      	movs	r3, #0
  40428e:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
  404292:	2300      	movs	r3, #0
  404294:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  404298:	2300      	movs	r3, #0
  40429a:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  40429e:	2300      	movs	r3, #0
  4042a0:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  4042a4:	2300      	movs	r3, #0
  4042a6:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
  4042aa:	2300      	movs	r3, #0
  4042ac:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
	uint32_t	i;	
	uint32_t	time_elapsed = 0;
  4042b0:	2300      	movs	r3, #0
  4042b2:	65fb      	str	r3, [r7, #92]	; 0x5c
	uint32_t	ul_i;
	uint8_t		displayState = 0;
  4042b4:	2300      	movs	r3, #0
  4042b6:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
	uint8_t		charCount = 0;
  4042ba:	2300      	movs	r3, #0
  4042bc:	f887 306a 	strb.w	r3, [r7, #106]	; 0x6a
	
	char		printStr[64];
	
	unsigned char idFamily, acc, id[6], idcsum; //10feb16 temp serial ID code, make more formal later

	controls.psupply_onn = 1;
  4042c0:	4b8d      	ldr	r3, [pc, #564]	; (4044f8 <main+0x290>)
  4042c2:	2201      	movs	r2, #1
  4042c4:	701a      	strb	r2, [r3, #0]
	controls.ledoen = 1;
  4042c6:	4b8c      	ldr	r3, [pc, #560]	; (4044f8 <main+0x290>)
  4042c8:	2201      	movs	r2, #1
  4042ca:	705a      	strb	r2, [r3, #1]
	controls.MFP = 0;
  4042cc:	4b8a      	ldr	r3, [pc, #552]	; (4044f8 <main+0x290>)
  4042ce:	2200      	movs	r2, #0
  4042d0:	709a      	strb	r2, [r3, #2]
	controls.buzzer_enable	= 1;
  4042d2:	4b89      	ldr	r3, [pc, #548]	; (4044f8 <main+0x290>)
  4042d4:	2201      	movs	r2, #1
  4042d6:	70da      	strb	r2, [r3, #3]
	controls.buzzer_count = 0;
  4042d8:	4b87      	ldr	r3, [pc, #540]	; (4044f8 <main+0x290>)
  4042da:	2200      	movs	r2, #0
  4042dc:	80da      	strh	r2, [r3, #6]
	controls.buzzer_cycle = CYCLE_OFF;
  4042de:	4b86      	ldr	r3, [pc, #536]	; (4044f8 <main+0x290>)
  4042e0:	2200      	movs	r2, #0
  4042e2:	711a      	strb	r2, [r3, #4]
	controls.solenoid_enable = 0;
  4042e4:	4b84      	ldr	r3, [pc, #528]	; (4044f8 <main+0x290>)
  4042e6:	2200      	movs	r2, #0
  4042e8:	721a      	strb	r2, [r3, #8]
	controls.solenoid_count = 0;
  4042ea:	4b83      	ldr	r3, [pc, #524]	; (4044f8 <main+0x290>)
  4042ec:	2200      	movs	r2, #0
  4042ee:	815a      	strh	r2, [r3, #10]
	controls.solenoid_cycle = CYCLE_OFF;
  4042f0:	4b81      	ldr	r3, [pc, #516]	; (4044f8 <main+0x290>)
  4042f2:	2200      	movs	r2, #0
  4042f4:	725a      	strb	r2, [r3, #9]
	
	status.doorsw1 = 0;
  4042f6:	4b81      	ldr	r3, [pc, #516]	; (4044fc <main+0x294>)
  4042f8:	2200      	movs	r2, #0
  4042fa:	701a      	strb	r2, [r3, #0]
	status.doorsw2 = 0;
  4042fc:	4b7f      	ldr	r3, [pc, #508]	; (4044fc <main+0x294>)
  4042fe:	2200      	movs	r2, #0
  404300:	705a      	strb	r2, [r3, #1]
	status.last_doorsw1 = 0;
  404302:	4b7e      	ldr	r3, [pc, #504]	; (4044fc <main+0x294>)
  404304:	2200      	movs	r2, #0
  404306:	709a      	strb	r2, [r3, #2]
	status.last_doorsw2 = 0;
  404308:	4b7c      	ldr	r3, [pc, #496]	; (4044fc <main+0x294>)
  40430a:	2200      	movs	r2, #0
  40430c:	70da      	strb	r2, [r3, #3]

	status.col1 = 0;
  40430e:	4b7b      	ldr	r3, [pc, #492]	; (4044fc <main+0x294>)
  404310:	2200      	movs	r2, #0
  404312:	719a      	strb	r2, [r3, #6]
	status.col2 = 0;
  404314:	4b79      	ldr	r3, [pc, #484]	; (4044fc <main+0x294>)
  404316:	2200      	movs	r2, #0
  404318:	715a      	strb	r2, [r3, #5]
	status.col3 = 0;
  40431a:	4b78      	ldr	r3, [pc, #480]	; (4044fc <main+0x294>)
  40431c:	2200      	movs	r2, #0
  40431e:	711a      	strb	r2, [r3, #4]
	status.row1 = 0;
  404320:	4b76      	ldr	r3, [pc, #472]	; (4044fc <main+0x294>)
  404322:	2200      	movs	r2, #0
  404324:	725a      	strb	r2, [r3, #9]
	status.row2 = 0;
  404326:	4b75      	ldr	r3, [pc, #468]	; (4044fc <main+0x294>)
  404328:	2200      	movs	r2, #0
  40432a:	721a      	strb	r2, [r3, #8]
	status.row3 = 0;
  40432c:	4b73      	ldr	r3, [pc, #460]	; (4044fc <main+0x294>)
  40432e:	2200      	movs	r2, #0
  404330:	71da      	strb	r2, [r3, #7]
	
	status.last_col1 = 0;
  404332:	4b72      	ldr	r3, [pc, #456]	; (4044fc <main+0x294>)
  404334:	2200      	movs	r2, #0
  404336:	731a      	strb	r2, [r3, #12]
	status.last_col2 = 0;
  404338:	4b70      	ldr	r3, [pc, #448]	; (4044fc <main+0x294>)
  40433a:	2200      	movs	r2, #0
  40433c:	72da      	strb	r2, [r3, #11]
	status.last_col3 = 0;
  40433e:	4b6f      	ldr	r3, [pc, #444]	; (4044fc <main+0x294>)
  404340:	2200      	movs	r2, #0
  404342:	729a      	strb	r2, [r3, #10]
	status.last_row1 = 0;
  404344:	4b6d      	ldr	r3, [pc, #436]	; (4044fc <main+0x294>)
  404346:	2200      	movs	r2, #0
  404348:	73da      	strb	r2, [r3, #15]
	status.last_row2 = 0;
  40434a:	4b6c      	ldr	r3, [pc, #432]	; (4044fc <main+0x294>)
  40434c:	2200      	movs	r2, #0
  40434e:	739a      	strb	r2, [r3, #14]
	status.last_row3 = 0;
  404350:	4b6a      	ldr	r3, [pc, #424]	; (4044fc <main+0x294>)
  404352:	2200      	movs	r2, #0
  404354:	735a      	strb	r2, [r3, #13]
	
	


	/* Initialize the SAM system. */
	sysclk_init();
  404356:	4b6a      	ldr	r3, [pc, #424]	; (404500 <main+0x298>)
  404358:	4798      	blx	r3
	board_init();
  40435a:	4b6a      	ldr	r3, [pc, #424]	; (404504 <main+0x29c>)
  40435c:	4798      	blx	r3

	/* Configure UART for blue scrolling display */
	configure_console();
  40435e:	4b6a      	ldr	r3, [pc, #424]	; (404508 <main+0x2a0>)
  404360:	4798      	blx	r3

	/* Configure USART. */
	configure_usart();
  404362:	4b6a      	ldr	r3, [pc, #424]	; (40450c <main+0x2a4>)
  404364:	4798      	blx	r3

	/* 1ms tick. */
	configure_systick();
  404366:	4b6a      	ldr	r3, [pc, #424]	; (404510 <main+0x2a8>)
  404368:	4798      	blx	r3

	init_pwm();
  40436a:	4b6a      	ldr	r3, [pc, #424]	; (404514 <main+0x2ac>)
  40436c:	4798      	blx	r3
	
	/*
	 * Put into some kind of "init_io()" function at some point
	 */
	
	ioport_set_pin_dir(ECLAVE_SERIAL_ID0, IOPORT_DIR_OUTPUT);
  40436e:	200f      	movs	r0, #15
  404370:	2101      	movs	r1, #1
  404372:	4b69      	ldr	r3, [pc, #420]	; (404518 <main+0x2b0>)
  404374:	4798      	blx	r3
	ioport_set_pin_level(ECLAVE_SERIAL_ID0, IOPORT_PIN_LEVEL_HIGH);
  404376:	200f      	movs	r0, #15
  404378:	2101      	movs	r1, #1
  40437a:	4b68      	ldr	r3, [pc, #416]	; (40451c <main+0x2b4>)
  40437c:	4798      	blx	r3
	ioport_set_pin_dir(ECLAVE_SERIAL_ID1, IOPORT_DIR_OUTPUT);
  40437e:	2010      	movs	r0, #16
  404380:	2101      	movs	r1, #1
  404382:	4b65      	ldr	r3, [pc, #404]	; (404518 <main+0x2b0>)
  404384:	4798      	blx	r3
	ioport_set_pin_level(ECLAVE_SERIAL_ID1, IOPORT_PIN_LEVEL_HIGH);
  404386:	2010      	movs	r0, #16
  404388:	2101      	movs	r1, #1
  40438a:	4b64      	ldr	r3, [pc, #400]	; (40451c <main+0x2b4>)
  40438c:	4798      	blx	r3
	ioport_set_pin_dir(ECLAVE_SERIAL_ID2, IOPORT_DIR_OUTPUT);
  40438e:	2011      	movs	r0, #17
  404390:	2101      	movs	r1, #1
  404392:	4b61      	ldr	r3, [pc, #388]	; (404518 <main+0x2b0>)
  404394:	4798      	blx	r3
	ioport_set_pin_level(ECLAVE_SERIAL_ID2, IOPORT_PIN_LEVEL_HIGH);
  404396:	2011      	movs	r0, #17
  404398:	2101      	movs	r1, #1
  40439a:	4b60      	ldr	r3, [pc, #384]	; (40451c <main+0x2b4>)
  40439c:	4798      	blx	r3
	ioport_set_pin_dir(ECLAVE_SERIAL_ID3, IOPORT_DIR_OUTPUT);
  40439e:	2012      	movs	r0, #18
  4043a0:	2101      	movs	r1, #1
  4043a2:	4b5d      	ldr	r3, [pc, #372]	; (404518 <main+0x2b0>)
  4043a4:	4798      	blx	r3
	ioport_set_pin_level(ECLAVE_SERIAL_ID3, IOPORT_PIN_LEVEL_HIGH);
  4043a6:	2012      	movs	r0, #18
  4043a8:	2101      	movs	r1, #1
  4043aa:	4b5c      	ldr	r3, [pc, #368]	; (40451c <main+0x2b4>)
  4043ac:	4798      	blx	r3
	ioport_set_pin_dir(ECLAVE_SERIAL_ID4, IOPORT_DIR_OUTPUT);
  4043ae:	2013      	movs	r0, #19
  4043b0:	2101      	movs	r1, #1
  4043b2:	4b59      	ldr	r3, [pc, #356]	; (404518 <main+0x2b0>)
  4043b4:	4798      	blx	r3
	ioport_set_pin_level(ECLAVE_SERIAL_ID4, IOPORT_PIN_LEVEL_HIGH);
  4043b6:	2013      	movs	r0, #19
  4043b8:	2101      	movs	r1, #1
  4043ba:	4b58      	ldr	r3, [pc, #352]	; (40451c <main+0x2b4>)
  4043bc:	4798      	blx	r3

	SetSpeed(1); //1==standard speed, not overdrive 
  4043be:	2001      	movs	r0, #1
  4043c0:	4b57      	ldr	r3, [pc, #348]	; (404520 <main+0x2b8>)
  4043c2:	4798      	blx	r3
	
	for (int i=0; i<5; i++)
  4043c4:	2300      	movs	r3, #0
  4043c6:	667b      	str	r3, [r7, #100]	; 0x64
  4043c8:	e080      	b.n	4044cc <main+0x264>
	{
		if(!OWTouchReset(i)) //we think a board is present, try to read the serial ID
  4043ca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
  4043cc:	b2db      	uxtb	r3, r3
  4043ce:	4618      	mov	r0, r3
  4043d0:	4b54      	ldr	r3, [pc, #336]	; (404524 <main+0x2bc>)
  4043d2:	4798      	blx	r3
  4043d4:	4603      	mov	r3, r0
  4043d6:	2b00      	cmp	r3, #0
  4043d8:	d171      	bne.n	4044be <main+0x256>
		{
			OWWriteByte(i, 0x33); //Read ID command
  4043da:	6e7b      	ldr	r3, [r7, #100]	; 0x64
  4043dc:	b2db      	uxtb	r3, r3
  4043de:	4618      	mov	r0, r3
  4043e0:	2133      	movs	r1, #51	; 0x33
  4043e2:	4b51      	ldr	r3, [pc, #324]	; (404528 <main+0x2c0>)
  4043e4:	4798      	blx	r3
			
			idFamily = OWReadByte(i);
  4043e6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
  4043e8:	b2db      	uxtb	r3, r3
  4043ea:	4618      	mov	r0, r3
  4043ec:	4b4f      	ldr	r3, [pc, #316]	; (40452c <main+0x2c4>)
  4043ee:	4798      	blx	r3
  4043f0:	4603      	mov	r3, r0
  4043f2:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
			
			acc = crc8_add(0x00, idFamily);
  4043f6:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
  4043fa:	2000      	movs	r0, #0
  4043fc:	4619      	mov	r1, r3
  4043fe:	4b4c      	ldr	r3, [pc, #304]	; (404530 <main+0x2c8>)
  404400:	4798      	blx	r3
  404402:	4603      	mov	r3, r0
  404404:	f887 3069 	strb.w	r3, [r7, #105]	; 0x69
			
			for (int j=0; j<6; j++)
  404408:	2300      	movs	r3, #0
  40440a:	663b      	str	r3, [r7, #96]	; 0x60
  40440c:	e01b      	b.n	404446 <main+0x1de>
			{
				id[j] = OWReadByte(i);
  40440e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
  404410:	b2db      	uxtb	r3, r3
  404412:	4618      	mov	r0, r3
  404414:	4b45      	ldr	r3, [pc, #276]	; (40452c <main+0x2c4>)
  404416:	4798      	blx	r3
  404418:	4603      	mov	r3, r0
  40441a:	b2d9      	uxtb	r1, r3
  40441c:	463a      	mov	r2, r7
  40441e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
  404420:	4413      	add	r3, r2
  404422:	460a      	mov	r2, r1
  404424:	701a      	strb	r2, [r3, #0]
				acc = crc8_add(acc, id[j]);
  404426:	463a      	mov	r2, r7
  404428:	6e3b      	ldr	r3, [r7, #96]	; 0x60
  40442a:	4413      	add	r3, r2
  40442c:	781b      	ldrb	r3, [r3, #0]
  40442e:	f897 2069 	ldrb.w	r2, [r7, #105]	; 0x69
  404432:	4610      	mov	r0, r2
  404434:	4619      	mov	r1, r3
  404436:	4b3e      	ldr	r3, [pc, #248]	; (404530 <main+0x2c8>)
  404438:	4798      	blx	r3
  40443a:	4603      	mov	r3, r0
  40443c:	f887 3069 	strb.w	r3, [r7, #105]	; 0x69
			
			idFamily = OWReadByte(i);
			
			acc = crc8_add(0x00, idFamily);
			
			for (int j=0; j<6; j++)
  404440:	6e3b      	ldr	r3, [r7, #96]	; 0x60
  404442:	3301      	adds	r3, #1
  404444:	663b      	str	r3, [r7, #96]	; 0x60
  404446:	6e3b      	ldr	r3, [r7, #96]	; 0x60
  404448:	2b05      	cmp	r3, #5
  40444a:	dde0      	ble.n	40440e <main+0x1a6>
			{
				id[j] = OWReadByte(i);
				acc = crc8_add(acc, id[j]);
			}
			
			idcsum = OWReadByte(i);
  40444c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
  40444e:	b2db      	uxtb	r3, r3
  404450:	4618      	mov	r0, r3
  404452:	4b36      	ldr	r3, [pc, #216]	; (40452c <main+0x2c4>)
  404454:	4798      	blx	r3
  404456:	4603      	mov	r3, r0
  404458:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a
			
			if (acc != idcsum)
  40445c:	f897 2069 	ldrb.w	r2, [r7, #105]	; 0x69
  404460:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
  404464:	429a      	cmp	r2, r3
  404466:	d004      	beq.n	404472 <main+0x20a>
			{
				func_transmit("Invalid serial ID checksum.\r\n", strlen("Invalid serial ID checksum.\r\n"));
  404468:	4832      	ldr	r0, [pc, #200]	; (404534 <main+0x2cc>)
  40446a:	211d      	movs	r1, #29
  40446c:	4b32      	ldr	r3, [pc, #200]	; (404538 <main+0x2d0>)
  40446e:	4798      	blx	r3
  404470:	e029      	b.n	4044c6 <main+0x25e>
			}
			else
			{
				sprintf(printStr,"LED board %d serial ID: %x%x%x%x%x%x\r\n", i, id[0], id[1], id[2], id[3], id[4], id[5]);
  404472:	783b      	ldrb	r3, [r7, #0]
  404474:	461e      	mov	r6, r3
  404476:	787b      	ldrb	r3, [r7, #1]
  404478:	461d      	mov	r5, r3
  40447a:	78bb      	ldrb	r3, [r7, #2]
  40447c:	461c      	mov	r4, r3
  40447e:	78fb      	ldrb	r3, [r7, #3]
  404480:	4618      	mov	r0, r3
  404482:	793b      	ldrb	r3, [r7, #4]
  404484:	4619      	mov	r1, r3
  404486:	797b      	ldrb	r3, [r7, #5]
  404488:	461a      	mov	r2, r3
  40448a:	f107 0308 	add.w	r3, r7, #8
  40448e:	9500      	str	r5, [sp, #0]
  404490:	9401      	str	r4, [sp, #4]
  404492:	9002      	str	r0, [sp, #8]
  404494:	9103      	str	r1, [sp, #12]
  404496:	9204      	str	r2, [sp, #16]
  404498:	4618      	mov	r0, r3
  40449a:	4928      	ldr	r1, [pc, #160]	; (40453c <main+0x2d4>)
  40449c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
  40449e:	4633      	mov	r3, r6
  4044a0:	4c27      	ldr	r4, [pc, #156]	; (404540 <main+0x2d8>)
  4044a2:	47a0      	blx	r4
				func_transmit(printStr,strlen(printStr));
  4044a4:	f107 0308 	add.w	r3, r7, #8
  4044a8:	4618      	mov	r0, r3
  4044aa:	4b26      	ldr	r3, [pc, #152]	; (404544 <main+0x2dc>)
  4044ac:	4798      	blx	r3
  4044ae:	4602      	mov	r2, r0
  4044b0:	f107 0308 	add.w	r3, r7, #8
  4044b4:	4618      	mov	r0, r3
  4044b6:	4611      	mov	r1, r2
  4044b8:	4b1f      	ldr	r3, [pc, #124]	; (404538 <main+0x2d0>)
  4044ba:	4798      	blx	r3
  4044bc:	e003      	b.n	4044c6 <main+0x25e>
			}
		}
		else
		{
			func_transmit("no board this slot\r\n", strlen("no board this slot\r\n"));
  4044be:	4822      	ldr	r0, [pc, #136]	; (404548 <main+0x2e0>)
  4044c0:	2114      	movs	r1, #20
  4044c2:	4b1d      	ldr	r3, [pc, #116]	; (404538 <main+0x2d0>)
  4044c4:	4798      	blx	r3
	ioport_set_pin_dir(ECLAVE_SERIAL_ID4, IOPORT_DIR_OUTPUT);
	ioport_set_pin_level(ECLAVE_SERIAL_ID4, IOPORT_PIN_LEVEL_HIGH);

	SetSpeed(1); //1==standard speed, not overdrive 
	
	for (int i=0; i<5; i++)
  4044c6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
  4044c8:	3301      	adds	r3, #1
  4044ca:	667b      	str	r3, [r7, #100]	; 0x64
  4044cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
  4044ce:	2b04      	cmp	r3, #4
  4044d0:	f77f af7b 	ble.w	4043ca <main+0x162>

	/*
	 * End of minimalist serial ID chip stuff
	 */

	twi_init();
  4044d4:	4b1d      	ldr	r3, [pc, #116]	; (40454c <main+0x2e4>)
  4044d6:	4798      	blx	r3

//make this ecII jsi 7feb16	gpio_set_pin_high(ECLAVE_LED_OEn); //make sure outputs are disabled at the chip level

	PCA9952_init();
  4044d8:	4b1d      	ldr	r3, [pc, #116]	; (404550 <main+0x2e8>)
  4044da:	4798      	blx	r3

	init_adc();
  4044dc:	4b1d      	ldr	r3, [pc, #116]	; (404554 <main+0x2ec>)
  4044de:	4798      	blx	r3
	
	/*
	 * Enable transmitter here, and disable receiver first, to avoid receiving
	 * characters sent by itself. It's necessary for half duplex RS485.
	 */
	usart_enable_tx(BOARD_USART);
  4044e0:	481d      	ldr	r0, [pc, #116]	; (404558 <main+0x2f0>)
  4044e2:	4b1e      	ldr	r3, [pc, #120]	; (40455c <main+0x2f4>)
  4044e4:	4798      	blx	r3
	usart_enable_rx(BOARD_USART);
  4044e6:	481c      	ldr	r0, [pc, #112]	; (404558 <main+0x2f0>)
  4044e8:	4b1d      	ldr	r3, [pc, #116]	; (404560 <main+0x2f8>)
  4044ea:	4798      	blx	r3

	while (1) {

		/* Test the debug LED */
		ioport_toggle_pin_level(EXAMPLE_LED_GPIO);
  4044ec:	2050      	movs	r0, #80	; 0x50
  4044ee:	4b1d      	ldr	r3, [pc, #116]	; (404564 <main+0x2fc>)
  4044f0:	4798      	blx	r3


		/* Test the debug usart rx and tx */
		for (i=0; i<70; i++) //7 seconds
  4044f2:	2300      	movs	r3, #0
  4044f4:	66fb      	str	r3, [r7, #108]	; 0x6c
  4044f6:	e3c9      	b.n	404c8c <main+0xa24>
  4044f8:	20400b00 	.word	0x20400b00
  4044fc:	204012e4 	.word	0x204012e4
  404500:	00400491 	.word	0x00400491
  404504:	00400a6d 	.word	0x00400a6d
  404508:	00403ec5 	.word	0x00403ec5
  40450c:	00403e01 	.word	0x00403e01
  404510:	00403e81 	.word	0x00403e81
  404514:	00404161 	.word	0x00404161
  404518:	00403511 	.word	0x00403511
  40451c:	00403599 	.word	0x00403599
  404520:	00402ea5 	.word	0x00402ea5
  404524:	00402f61 	.word	0x00402f61
  404528:	00403101 	.word	0x00403101
  40452c:	00403141 	.word	0x00403141
  404530:	0040318d 	.word	0x0040318d
  404534:	0040a914 	.word	0x0040a914
  404538:	00403efd 	.word	0x00403efd
  40453c:	0040a934 	.word	0x0040a934
  404540:	004052c9 	.word	0x004052c9
  404544:	00405315 	.word	0x00405315
  404548:	0040a95c 	.word	0x0040a95c
  40454c:	00403f61 	.word	0x00403f61
  404550:	004027b5 	.word	0x004027b5
  404554:	00403ff5 	.word	0x00403ff5
  404558:	40024000 	.word	0x40024000
  40455c:	00402189 	.word	0x00402189
  404560:	004021d5 	.word	0x004021d5
  404564:	00403655 	.word	0x00403655
		{
			mdelay(100);
  404568:	2064      	movs	r0, #100	; 0x64
  40456a:	4b8a      	ldr	r3, [pc, #552]	; (404794 <main+0x52c>)
  40456c:	4798      	blx	r3
			
			
			/*
			 * IO inputs
			 */
			status.doorsw1 = ioport_get_pin_level(ECLAVE_DOORSW1);
  40456e:	204d      	movs	r0, #77	; 0x4d
  404570:	4b89      	ldr	r3, [pc, #548]	; (404798 <main+0x530>)
  404572:	4798      	blx	r3
  404574:	4603      	mov	r3, r0
  404576:	461a      	mov	r2, r3
  404578:	4b88      	ldr	r3, [pc, #544]	; (40479c <main+0x534>)
  40457a:	701a      	strb	r2, [r3, #0]
			status.doorsw2 = ioport_get_pin_level(ECLAVE_DOORSW2);
  40457c:	204e      	movs	r0, #78	; 0x4e
  40457e:	4b86      	ldr	r3, [pc, #536]	; (404798 <main+0x530>)
  404580:	4798      	blx	r3
  404582:	4603      	mov	r3, r0
  404584:	461a      	mov	r2, r3
  404586:	4b85      	ldr	r3, [pc, #532]	; (40479c <main+0x534>)
  404588:	705a      	strb	r2, [r3, #1]
			
			if ((status.doorsw1 != status.last_doorsw1) ||
  40458a:	4b84      	ldr	r3, [pc, #528]	; (40479c <main+0x534>)
  40458c:	781a      	ldrb	r2, [r3, #0]
  40458e:	4b83      	ldr	r3, [pc, #524]	; (40479c <main+0x534>)
  404590:	789b      	ldrb	r3, [r3, #2]
  404592:	429a      	cmp	r2, r3
  404594:	d105      	bne.n	4045a2 <main+0x33a>
				(status.doorsw2 != status.last_doorsw2))
  404596:	4b81      	ldr	r3, [pc, #516]	; (40479c <main+0x534>)
  404598:	785a      	ldrb	r2, [r3, #1]
  40459a:	4b80      	ldr	r3, [pc, #512]	; (40479c <main+0x534>)
  40459c:	78db      	ldrb	r3, [r3, #3]
			 * IO inputs
			 */
			status.doorsw1 = ioport_get_pin_level(ECLAVE_DOORSW1);
			status.doorsw2 = ioport_get_pin_level(ECLAVE_DOORSW2);
			
			if ((status.doorsw1 != status.last_doorsw1) ||
  40459e:	429a      	cmp	r2, r3
  4045a0:	d020      	beq.n	4045e4 <main+0x37c>
				(status.doorsw2 != status.last_doorsw2))
			{
				sprintf(printStr,"doorsw1: %d doorsw2: %d\r\n", status.doorsw1, status.doorsw2);
  4045a2:	4b7e      	ldr	r3, [pc, #504]	; (40479c <main+0x534>)
  4045a4:	781b      	ldrb	r3, [r3, #0]
  4045a6:	461a      	mov	r2, r3
  4045a8:	4b7c      	ldr	r3, [pc, #496]	; (40479c <main+0x534>)
  4045aa:	785b      	ldrb	r3, [r3, #1]
  4045ac:	461c      	mov	r4, r3
  4045ae:	f107 0308 	add.w	r3, r7, #8
  4045b2:	4618      	mov	r0, r3
  4045b4:	497a      	ldr	r1, [pc, #488]	; (4047a0 <main+0x538>)
  4045b6:	4623      	mov	r3, r4
  4045b8:	4c7a      	ldr	r4, [pc, #488]	; (4047a4 <main+0x53c>)
  4045ba:	47a0      	blx	r4
				func_transmit(printStr, strlen(printStr));
  4045bc:	f107 0308 	add.w	r3, r7, #8
  4045c0:	4618      	mov	r0, r3
  4045c2:	4b79      	ldr	r3, [pc, #484]	; (4047a8 <main+0x540>)
  4045c4:	4798      	blx	r3
  4045c6:	4602      	mov	r2, r0
  4045c8:	f107 0308 	add.w	r3, r7, #8
  4045cc:	4618      	mov	r0, r3
  4045ce:	4611      	mov	r1, r2
  4045d0:	4b76      	ldr	r3, [pc, #472]	; (4047ac <main+0x544>)
  4045d2:	4798      	blx	r3
				status.last_doorsw1 = status.doorsw1;
  4045d4:	4b71      	ldr	r3, [pc, #452]	; (40479c <main+0x534>)
  4045d6:	781a      	ldrb	r2, [r3, #0]
  4045d8:	4b70      	ldr	r3, [pc, #448]	; (40479c <main+0x534>)
  4045da:	709a      	strb	r2, [r3, #2]
				status.last_doorsw2 = status.doorsw2;	
  4045dc:	4b6f      	ldr	r3, [pc, #444]	; (40479c <main+0x534>)
  4045de:	785a      	ldrb	r2, [r3, #1]
  4045e0:	4b6e      	ldr	r3, [pc, #440]	; (40479c <main+0x534>)
  4045e2:	70da      	strb	r2, [r3, #3]
			}
			
			scan_keypad();
  4045e4:	4b72      	ldr	r3, [pc, #456]	; (4047b0 <main+0x548>)
  4045e6:	4798      	blx	r3

			if ((status.col3 != status.last_col3) ||
  4045e8:	4b6c      	ldr	r3, [pc, #432]	; (40479c <main+0x534>)
  4045ea:	791a      	ldrb	r2, [r3, #4]
  4045ec:	4b6b      	ldr	r3, [pc, #428]	; (40479c <main+0x534>)
  4045ee:	7a9b      	ldrb	r3, [r3, #10]
  4045f0:	429a      	cmp	r2, r3
  4045f2:	d11e      	bne.n	404632 <main+0x3ca>
			(status.col2 != status.last_col2) ||
  4045f4:	4b69      	ldr	r3, [pc, #420]	; (40479c <main+0x534>)
  4045f6:	795a      	ldrb	r2, [r3, #5]
  4045f8:	4b68      	ldr	r3, [pc, #416]	; (40479c <main+0x534>)
  4045fa:	7adb      	ldrb	r3, [r3, #11]
				status.last_doorsw2 = status.doorsw2;	
			}
			
			scan_keypad();

			if ((status.col3 != status.last_col3) ||
  4045fc:	429a      	cmp	r2, r3
  4045fe:	d118      	bne.n	404632 <main+0x3ca>
			(status.col2 != status.last_col2) ||
			(status.col1 != status.last_col1) ||
  404600:	4b66      	ldr	r3, [pc, #408]	; (40479c <main+0x534>)
  404602:	799a      	ldrb	r2, [r3, #6]
  404604:	4b65      	ldr	r3, [pc, #404]	; (40479c <main+0x534>)
  404606:	7b1b      	ldrb	r3, [r3, #12]
			}
			
			scan_keypad();

			if ((status.col3 != status.last_col3) ||
			(status.col2 != status.last_col2) ||
  404608:	429a      	cmp	r2, r3
  40460a:	d112      	bne.n	404632 <main+0x3ca>
			(status.col1 != status.last_col1) ||
			(status.row3 != status.last_row3) ||
  40460c:	4b63      	ldr	r3, [pc, #396]	; (40479c <main+0x534>)
  40460e:	79da      	ldrb	r2, [r3, #7]
  404610:	4b62      	ldr	r3, [pc, #392]	; (40479c <main+0x534>)
  404612:	7b5b      	ldrb	r3, [r3, #13]
			
			scan_keypad();

			if ((status.col3 != status.last_col3) ||
			(status.col2 != status.last_col2) ||
			(status.col1 != status.last_col1) ||
  404614:	429a      	cmp	r2, r3
  404616:	d10c      	bne.n	404632 <main+0x3ca>
			(status.row3 != status.last_row3) ||
			(status.row2 != status.last_row2) ||
  404618:	4b60      	ldr	r3, [pc, #384]	; (40479c <main+0x534>)
  40461a:	7a1a      	ldrb	r2, [r3, #8]
  40461c:	4b5f      	ldr	r3, [pc, #380]	; (40479c <main+0x534>)
  40461e:	7b9b      	ldrb	r3, [r3, #14]
			scan_keypad();

			if ((status.col3 != status.last_col3) ||
			(status.col2 != status.last_col2) ||
			(status.col1 != status.last_col1) ||
			(status.row3 != status.last_row3) ||
  404620:	429a      	cmp	r2, r3
  404622:	d106      	bne.n	404632 <main+0x3ca>
			(status.row2 != status.last_row2) ||
			(status.row1 != status.last_row1))
  404624:	4b5d      	ldr	r3, [pc, #372]	; (40479c <main+0x534>)
  404626:	7a5a      	ldrb	r2, [r3, #9]
  404628:	4b5c      	ldr	r3, [pc, #368]	; (40479c <main+0x534>)
  40462a:	7bdb      	ldrb	r3, [r3, #15]

			if ((status.col3 != status.last_col3) ||
			(status.col2 != status.last_col2) ||
			(status.col1 != status.last_col1) ||
			(status.row3 != status.last_row3) ||
			(status.row2 != status.last_row2) ||
  40462c:	429a      	cmp	r2, r3
  40462e:	f000 8115 	beq.w	40485c <main+0x5f4>
			(status.row1 != status.last_row1))
			{
				sprintf(printStr,"ROW321: %d%d%d COL321 %d%d%d ",
						status.row3, status.row2, status.row1, status.col3, status.col2, status.col1);
  404632:	4b5a      	ldr	r3, [pc, #360]	; (40479c <main+0x534>)
  404634:	79db      	ldrb	r3, [r3, #7]
			(status.col1 != status.last_col1) ||
			(status.row3 != status.last_row3) ||
			(status.row2 != status.last_row2) ||
			(status.row1 != status.last_row1))
			{
				sprintf(printStr,"ROW321: %d%d%d COL321 %d%d%d ",
  404636:	461e      	mov	r6, r3
						status.row3, status.row2, status.row1, status.col3, status.col2, status.col1);
  404638:	4b58      	ldr	r3, [pc, #352]	; (40479c <main+0x534>)
  40463a:	7a1b      	ldrb	r3, [r3, #8]
			(status.col1 != status.last_col1) ||
			(status.row3 != status.last_row3) ||
			(status.row2 != status.last_row2) ||
			(status.row1 != status.last_row1))
			{
				sprintf(printStr,"ROW321: %d%d%d COL321 %d%d%d ",
  40463c:	461d      	mov	r5, r3
						status.row3, status.row2, status.row1, status.col3, status.col2, status.col1);
  40463e:	4b57      	ldr	r3, [pc, #348]	; (40479c <main+0x534>)
  404640:	7a5b      	ldrb	r3, [r3, #9]
			(status.col1 != status.last_col1) ||
			(status.row3 != status.last_row3) ||
			(status.row2 != status.last_row2) ||
			(status.row1 != status.last_row1))
			{
				sprintf(printStr,"ROW321: %d%d%d COL321 %d%d%d ",
  404642:	461c      	mov	r4, r3
						status.row3, status.row2, status.row1, status.col3, status.col2, status.col1);
  404644:	4b55      	ldr	r3, [pc, #340]	; (40479c <main+0x534>)
  404646:	791b      	ldrb	r3, [r3, #4]
			(status.col1 != status.last_col1) ||
			(status.row3 != status.last_row3) ||
			(status.row2 != status.last_row2) ||
			(status.row1 != status.last_row1))
			{
				sprintf(printStr,"ROW321: %d%d%d COL321 %d%d%d ",
  404648:	4618      	mov	r0, r3
						status.row3, status.row2, status.row1, status.col3, status.col2, status.col1);
  40464a:	4b54      	ldr	r3, [pc, #336]	; (40479c <main+0x534>)
  40464c:	795b      	ldrb	r3, [r3, #5]
			(status.col1 != status.last_col1) ||
			(status.row3 != status.last_row3) ||
			(status.row2 != status.last_row2) ||
			(status.row1 != status.last_row1))
			{
				sprintf(printStr,"ROW321: %d%d%d COL321 %d%d%d ",
  40464e:	4619      	mov	r1, r3
						status.row3, status.row2, status.row1, status.col3, status.col2, status.col1);
  404650:	4b52      	ldr	r3, [pc, #328]	; (40479c <main+0x534>)
  404652:	799b      	ldrb	r3, [r3, #6]
			(status.col1 != status.last_col1) ||
			(status.row3 != status.last_row3) ||
			(status.row2 != status.last_row2) ||
			(status.row1 != status.last_row1))
			{
				sprintf(printStr,"ROW321: %d%d%d COL321 %d%d%d ",
  404654:	461a      	mov	r2, r3
  404656:	f107 0308 	add.w	r3, r7, #8
  40465a:	9400      	str	r4, [sp, #0]
  40465c:	9001      	str	r0, [sp, #4]
  40465e:	9102      	str	r1, [sp, #8]
  404660:	9203      	str	r2, [sp, #12]
  404662:	4618      	mov	r0, r3
  404664:	4953      	ldr	r1, [pc, #332]	; (4047b4 <main+0x54c>)
  404666:	4632      	mov	r2, r6
  404668:	462b      	mov	r3, r5
  40466a:	4c4e      	ldr	r4, [pc, #312]	; (4047a4 <main+0x53c>)
  40466c:	47a0      	blx	r4
						status.row3, status.row2, status.row1, status.col3, status.col2, status.col1);
						
				switch(status.keypad)
  40466e:	4b4b      	ldr	r3, [pc, #300]	; (40479c <main+0x534>)
  404670:	7c1b      	ldrb	r3, [r3, #16]
  404672:	3b0e      	subs	r3, #14
  404674:	2b0f      	cmp	r3, #15
  404676:	f200 80be 	bhi.w	4047f6 <main+0x58e>
  40467a:	a201      	add	r2, pc, #4	; (adr r2, 404680 <main+0x418>)
  40467c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  404680:	0040473f 	.word	0x0040473f
  404684:	004047f7 	.word	0x004047f7
  404688:	004047f7 	.word	0x004047f7
  40468c:	004047f7 	.word	0x004047f7
  404690:	004047f7 	.word	0x004047f7
  404694:	004047f7 	.word	0x004047f7
  404698:	004047f7 	.word	0x004047f7
  40469c:	004046eb 	.word	0x004046eb
  4046a0:	00404769 	.word	0x00404769
  4046a4:	004047f7 	.word	0x004047f7
  4046a8:	004047f7 	.word	0x004047f7
  4046ac:	00404715 	.word	0x00404715
  4046b0:	004047cd 	.word	0x004047cd
  4046b4:	004047f7 	.word	0x004047f7
  4046b8:	004047f7 	.word	0x004047f7
  4046bc:	004046c1 	.word	0x004046c1
				{
					case KEYPAD_SW1:
						strcat(printStr,"Keypad SW1");
  4046c0:	f107 0308 	add.w	r3, r7, #8
  4046c4:	4618      	mov	r0, r3
  4046c6:	4b38      	ldr	r3, [pc, #224]	; (4047a8 <main+0x540>)
  4046c8:	4798      	blx	r3
  4046ca:	4603      	mov	r3, r0
  4046cc:	461a      	mov	r2, r3
  4046ce:	f107 0308 	add.w	r3, r7, #8
  4046d2:	4413      	add	r3, r2
  4046d4:	4938      	ldr	r1, [pc, #224]	; (4047b8 <main+0x550>)
  4046d6:	461a      	mov	r2, r3
  4046d8:	460b      	mov	r3, r1
  4046da:	cb03      	ldmia	r3!, {r0, r1}
  4046dc:	6010      	str	r0, [r2, #0]
  4046de:	6051      	str	r1, [r2, #4]
  4046e0:	8819      	ldrh	r1, [r3, #0]
  4046e2:	789b      	ldrb	r3, [r3, #2]
  4046e4:	8111      	strh	r1, [r2, #8]
  4046e6:	7293      	strb	r3, [r2, #10]
						break;
  4046e8:	e085      	b.n	4047f6 <main+0x58e>
					case KEYPAD_SW2:
						strcat(printStr,"Keypad SW2");
  4046ea:	f107 0308 	add.w	r3, r7, #8
  4046ee:	4618      	mov	r0, r3
  4046f0:	4b2d      	ldr	r3, [pc, #180]	; (4047a8 <main+0x540>)
  4046f2:	4798      	blx	r3
  4046f4:	4603      	mov	r3, r0
  4046f6:	461a      	mov	r2, r3
  4046f8:	f107 0308 	add.w	r3, r7, #8
  4046fc:	4413      	add	r3, r2
  4046fe:	492f      	ldr	r1, [pc, #188]	; (4047bc <main+0x554>)
  404700:	461a      	mov	r2, r3
  404702:	460b      	mov	r3, r1
  404704:	cb03      	ldmia	r3!, {r0, r1}
  404706:	6010      	str	r0, [r2, #0]
  404708:	6051      	str	r1, [r2, #4]
  40470a:	8819      	ldrh	r1, [r3, #0]
  40470c:	789b      	ldrb	r3, [r3, #2]
  40470e:	8111      	strh	r1, [r2, #8]
  404710:	7293      	strb	r3, [r2, #10]
						break;
  404712:	e070      	b.n	4047f6 <main+0x58e>
					case KEYPAD_SW3:
						strcat(printStr,"Keypad SW3");
  404714:	f107 0308 	add.w	r3, r7, #8
  404718:	4618      	mov	r0, r3
  40471a:	4b23      	ldr	r3, [pc, #140]	; (4047a8 <main+0x540>)
  40471c:	4798      	blx	r3
  40471e:	4603      	mov	r3, r0
  404720:	461a      	mov	r2, r3
  404722:	f107 0308 	add.w	r3, r7, #8
  404726:	4413      	add	r3, r2
  404728:	4925      	ldr	r1, [pc, #148]	; (4047c0 <main+0x558>)
  40472a:	461a      	mov	r2, r3
  40472c:	460b      	mov	r3, r1
  40472e:	cb03      	ldmia	r3!, {r0, r1}
  404730:	6010      	str	r0, [r2, #0]
  404732:	6051      	str	r1, [r2, #4]
  404734:	8819      	ldrh	r1, [r3, #0]
  404736:	789b      	ldrb	r3, [r3, #2]
  404738:	8111      	strh	r1, [r2, #8]
  40473a:	7293      	strb	r3, [r2, #10]
						break;
  40473c:	e05b      	b.n	4047f6 <main+0x58e>
					case KEYPAD_SW4:
						strcat(printStr,"Keypad SW4");
  40473e:	f107 0308 	add.w	r3, r7, #8
  404742:	4618      	mov	r0, r3
  404744:	4b18      	ldr	r3, [pc, #96]	; (4047a8 <main+0x540>)
  404746:	4798      	blx	r3
  404748:	4603      	mov	r3, r0
  40474a:	461a      	mov	r2, r3
  40474c:	f107 0308 	add.w	r3, r7, #8
  404750:	4413      	add	r3, r2
  404752:	491c      	ldr	r1, [pc, #112]	; (4047c4 <main+0x55c>)
  404754:	461a      	mov	r2, r3
  404756:	460b      	mov	r3, r1
  404758:	cb03      	ldmia	r3!, {r0, r1}
  40475a:	6010      	str	r0, [r2, #0]
  40475c:	6051      	str	r1, [r2, #4]
  40475e:	8819      	ldrh	r1, [r3, #0]
  404760:	789b      	ldrb	r3, [r3, #2]
  404762:	8111      	strh	r1, [r2, #8]
  404764:	7293      	strb	r3, [r2, #10]
						break;
  404766:	e046      	b.n	4047f6 <main+0x58e>
					case KEYPAD_SW5:
						strcat(printStr,"Keypad SW5");
  404768:	f107 0308 	add.w	r3, r7, #8
  40476c:	4618      	mov	r0, r3
  40476e:	4b0e      	ldr	r3, [pc, #56]	; (4047a8 <main+0x540>)
  404770:	4798      	blx	r3
  404772:	4603      	mov	r3, r0
  404774:	461a      	mov	r2, r3
  404776:	f107 0308 	add.w	r3, r7, #8
  40477a:	4413      	add	r3, r2
  40477c:	4912      	ldr	r1, [pc, #72]	; (4047c8 <main+0x560>)
  40477e:	461a      	mov	r2, r3
  404780:	460b      	mov	r3, r1
  404782:	cb03      	ldmia	r3!, {r0, r1}
  404784:	6010      	str	r0, [r2, #0]
  404786:	6051      	str	r1, [r2, #4]
  404788:	8819      	ldrh	r1, [r3, #0]
  40478a:	789b      	ldrb	r3, [r3, #2]
  40478c:	8111      	strh	r1, [r2, #8]
  40478e:	7293      	strb	r3, [r2, #10]
						break;
  404790:	e031      	b.n	4047f6 <main+0x58e>
  404792:	bf00      	nop
  404794:	00403a99 	.word	0x00403a99
  404798:	00403605 	.word	0x00403605
  40479c:	204012e4 	.word	0x204012e4
  4047a0:	0040a974 	.word	0x0040a974
  4047a4:	004052c9 	.word	0x004052c9
  4047a8:	00405315 	.word	0x00405315
  4047ac:	00403efd 	.word	0x00403efd
  4047b0:	00403ae9 	.word	0x00403ae9
  4047b4:	0040a990 	.word	0x0040a990
  4047b8:	0040a9b0 	.word	0x0040a9b0
  4047bc:	0040a9bc 	.word	0x0040a9bc
  4047c0:	0040a9c8 	.word	0x0040a9c8
  4047c4:	0040a9d4 	.word	0x0040a9d4
  4047c8:	0040a9e0 	.word	0x0040a9e0
					case KEYPAD_SW6:
						strcat(printStr,"Keypad SW6");
  4047cc:	f107 0308 	add.w	r3, r7, #8
  4047d0:	4618      	mov	r0, r3
  4047d2:	4bb5      	ldr	r3, [pc, #724]	; (404aa8 <main+0x840>)
  4047d4:	4798      	blx	r3
  4047d6:	4603      	mov	r3, r0
  4047d8:	461a      	mov	r2, r3
  4047da:	f107 0308 	add.w	r3, r7, #8
  4047de:	4413      	add	r3, r2
  4047e0:	49b2      	ldr	r1, [pc, #712]	; (404aac <main+0x844>)
  4047e2:	461a      	mov	r2, r3
  4047e4:	460b      	mov	r3, r1
  4047e6:	cb03      	ldmia	r3!, {r0, r1}
  4047e8:	6010      	str	r0, [r2, #0]
  4047ea:	6051      	str	r1, [r2, #4]
  4047ec:	8819      	ldrh	r1, [r3, #0]
  4047ee:	789b      	ldrb	r3, [r3, #2]
  4047f0:	8111      	strh	r1, [r2, #8]
  4047f2:	7293      	strb	r3, [r2, #10]
						break;
  4047f4:	bf00      	nop
				}
				strcat(printStr,"\r\n");
  4047f6:	f107 0308 	add.w	r3, r7, #8
  4047fa:	4618      	mov	r0, r3
  4047fc:	4baa      	ldr	r3, [pc, #680]	; (404aa8 <main+0x840>)
  4047fe:	4798      	blx	r3
  404800:	4603      	mov	r3, r0
  404802:	461a      	mov	r2, r3
  404804:	f107 0308 	add.w	r3, r7, #8
  404808:	4413      	add	r3, r2
  40480a:	4aa9      	ldr	r2, [pc, #676]	; (404ab0 <main+0x848>)
  40480c:	8811      	ldrh	r1, [r2, #0]
  40480e:	7892      	ldrb	r2, [r2, #2]
  404810:	8019      	strh	r1, [r3, #0]
  404812:	709a      	strb	r2, [r3, #2]
						
				func_transmit(printStr, strlen(printStr));
  404814:	f107 0308 	add.w	r3, r7, #8
  404818:	4618      	mov	r0, r3
  40481a:	4ba3      	ldr	r3, [pc, #652]	; (404aa8 <main+0x840>)
  40481c:	4798      	blx	r3
  40481e:	4602      	mov	r2, r0
  404820:	f107 0308 	add.w	r3, r7, #8
  404824:	4618      	mov	r0, r3
  404826:	4611      	mov	r1, r2
  404828:	4ba2      	ldr	r3, [pc, #648]	; (404ab4 <main+0x84c>)
  40482a:	4798      	blx	r3
				
				status.last_col1 = status.col1;	
  40482c:	4ba2      	ldr	r3, [pc, #648]	; (404ab8 <main+0x850>)
  40482e:	799a      	ldrb	r2, [r3, #6]
  404830:	4ba1      	ldr	r3, [pc, #644]	; (404ab8 <main+0x850>)
  404832:	731a      	strb	r2, [r3, #12]
				status.last_col2 = status.col2;	
  404834:	4ba0      	ldr	r3, [pc, #640]	; (404ab8 <main+0x850>)
  404836:	795a      	ldrb	r2, [r3, #5]
  404838:	4b9f      	ldr	r3, [pc, #636]	; (404ab8 <main+0x850>)
  40483a:	72da      	strb	r2, [r3, #11]
				status.last_col3 = status.col3;
  40483c:	4b9e      	ldr	r3, [pc, #632]	; (404ab8 <main+0x850>)
  40483e:	791a      	ldrb	r2, [r3, #4]
  404840:	4b9d      	ldr	r3, [pc, #628]	; (404ab8 <main+0x850>)
  404842:	729a      	strb	r2, [r3, #10]
				status.last_row1 = status.row1;	
  404844:	4b9c      	ldr	r3, [pc, #624]	; (404ab8 <main+0x850>)
  404846:	7a5a      	ldrb	r2, [r3, #9]
  404848:	4b9b      	ldr	r3, [pc, #620]	; (404ab8 <main+0x850>)
  40484a:	73da      	strb	r2, [r3, #15]
				status.last_row2 = status.row2;	
  40484c:	4b9a      	ldr	r3, [pc, #616]	; (404ab8 <main+0x850>)
  40484e:	7a1a      	ldrb	r2, [r3, #8]
  404850:	4b99      	ldr	r3, [pc, #612]	; (404ab8 <main+0x850>)
  404852:	739a      	strb	r2, [r3, #14]
				status.last_row3 = status.row3;	
  404854:	4b98      	ldr	r3, [pc, #608]	; (404ab8 <main+0x850>)
  404856:	79da      	ldrb	r2, [r3, #7]
  404858:	4b97      	ldr	r3, [pc, #604]	; (404ab8 <main+0x850>)
  40485a:	735a      	strb	r2, [r3, #13]
				
			}
		
			if (usart_is_rx_ready(BOARD_USART)) {
  40485c:	4897      	ldr	r0, [pc, #604]	; (404abc <main+0x854>)
  40485e:	4b98      	ldr	r3, [pc, #608]	; (404ac0 <main+0x858>)
  404860:	4798      	blx	r3
  404862:	4603      	mov	r3, r0
  404864:	2b00      	cmp	r3, #0
  404866:	f000 820e 	beq.w	404c86 <main+0xa1e>
				usart_read(BOARD_USART, (uint32_t *)&rxByte);
  40486a:	f107 034b 	add.w	r3, r7, #75	; 0x4b
  40486e:	4893      	ldr	r0, [pc, #588]	; (404abc <main+0x854>)
  404870:	4619      	mov	r1, r3
  404872:	4b94      	ldr	r3, [pc, #592]	; (404ac4 <main+0x85c>)
  404874:	4798      	blx	r3
				func_transmit(&rxByte, 1);
  404876:	f107 034b 	add.w	r3, r7, #75	; 0x4b
  40487a:	4618      	mov	r0, r3
  40487c:	2101      	movs	r1, #1
  40487e:	4b8d      	ldr	r3, [pc, #564]	; (404ab4 <main+0x84c>)
  404880:	4798      	blx	r3
				
				switch(rxByte)
  404882:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
  404886:	3b42      	subs	r3, #66	; 0x42
  404888:	2b31      	cmp	r3, #49	; 0x31
  40488a:	f200 81fc 	bhi.w	404c86 <main+0xa1e>
  40488e:	a201      	add	r2, pc, #4	; (adr r2, 404894 <main+0x62c>)
  404890:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  404894:	00404a4f 	.word	0x00404a4f
  404898:	00404c87 	.word	0x00404c87
  40489c:	00404c87 	.word	0x00404c87
  4048a0:	00404c87 	.word	0x00404c87
  4048a4:	00404c87 	.word	0x00404c87
  4048a8:	00404c87 	.word	0x00404c87
  4048ac:	00404b5d 	.word	0x00404b5d
  4048b0:	00404c87 	.word	0x00404c87
  4048b4:	00404c87 	.word	0x00404c87
  4048b8:	00404c87 	.word	0x00404c87
  4048bc:	00404995 	.word	0x00404995
  4048c0:	00404a17 	.word	0x00404a17
  4048c4:	00404c87 	.word	0x00404c87
  4048c8:	00404c87 	.word	0x00404c87
  4048cc:	0040495d 	.word	0x0040495d
  4048d0:	00404c87 	.word	0x00404c87
  4048d4:	00404c87 	.word	0x00404c87
  4048d8:	00404b05 	.word	0x00404b05
  4048dc:	00404c87 	.word	0x00404c87
  4048e0:	00404c87 	.word	0x00404c87
  4048e4:	00404c87 	.word	0x00404c87
  4048e8:	00404c87 	.word	0x00404c87
  4048ec:	00404c87 	.word	0x00404c87
  4048f0:	00404c87 	.word	0x00404c87
  4048f4:	00404c87 	.word	0x00404c87
  4048f8:	00404c87 	.word	0x00404c87
  4048fc:	00404c87 	.word	0x00404c87
  404900:	00404c87 	.word	0x00404c87
  404904:	00404c87 	.word	0x00404c87
  404908:	00404c87 	.word	0x00404c87
  40490c:	00404c87 	.word	0x00404c87
  404910:	00404c87 	.word	0x00404c87
  404914:	00404a4f 	.word	0x00404a4f
  404918:	00404c87 	.word	0x00404c87
  40491c:	00404c87 	.word	0x00404c87
  404920:	00404c87 	.word	0x00404c87
  404924:	00404c87 	.word	0x00404c87
  404928:	00404c87 	.word	0x00404c87
  40492c:	00404b5d 	.word	0x00404b5d
  404930:	00404c87 	.word	0x00404c87
  404934:	00404c87 	.word	0x00404c87
  404938:	00404c87 	.word	0x00404c87
  40493c:	00404995 	.word	0x00404995
  404940:	00404a17 	.word	0x00404a17
  404944:	00404c87 	.word	0x00404c87
  404948:	00404c87 	.word	0x00404c87
  40494c:	0040495d 	.word	0x0040495d
  404950:	00404c87 	.word	0x00404c87
  404954:	00404c87 	.word	0x00404c87
  404958:	00404b05 	.word	0x00404b05
				{
					case 'P':
					case 'p':
						toggle(&controls.psupply_onn);
  40495c:	485a      	ldr	r0, [pc, #360]	; (404ac8 <main+0x860>)
  40495e:	4b5b      	ldr	r3, [pc, #364]	; (404acc <main+0x864>)
  404960:	4798      	blx	r3
						sprintf(printStr,"PSUPPLY_ONn: %d\r\n", controls.psupply_onn);
  404962:	4b59      	ldr	r3, [pc, #356]	; (404ac8 <main+0x860>)
  404964:	781b      	ldrb	r3, [r3, #0]
  404966:	461a      	mov	r2, r3
  404968:	f107 0308 	add.w	r3, r7, #8
  40496c:	4618      	mov	r0, r3
  40496e:	4958      	ldr	r1, [pc, #352]	; (404ad0 <main+0x868>)
  404970:	4b58      	ldr	r3, [pc, #352]	; (404ad4 <main+0x86c>)
  404972:	4798      	blx	r3
						func_transmit(printStr, strlen(printStr));
  404974:	f107 0308 	add.w	r3, r7, #8
  404978:	4618      	mov	r0, r3
  40497a:	4b4b      	ldr	r3, [pc, #300]	; (404aa8 <main+0x840>)
  40497c:	4798      	blx	r3
  40497e:	4602      	mov	r2, r0
  404980:	f107 0308 	add.w	r3, r7, #8
  404984:	4618      	mov	r0, r3
  404986:	4611      	mov	r1, r2
  404988:	4b4a      	ldr	r3, [pc, #296]	; (404ab4 <main+0x84c>)
  40498a:	4798      	blx	r3
						ioport_toggle_pin_level(ECLAVE_PSUPPLY_ONn);
  40498c:	2002      	movs	r0, #2
  40498e:	4b52      	ldr	r3, [pc, #328]	; (404ad8 <main+0x870>)
  404990:	4798      	blx	r3
						break;
  404992:	e178      	b.n	404c86 <main+0xa1e>
					case 'L':
					case 'l':
						toggle(&controls.ledoen);
  404994:	4851      	ldr	r0, [pc, #324]	; (404adc <main+0x874>)
  404996:	4b4d      	ldr	r3, [pc, #308]	; (404acc <main+0x864>)
  404998:	4798      	blx	r3
						sprintf(printStr,"LEDOEn: %d\r\n", controls.ledoen);
  40499a:	4b4b      	ldr	r3, [pc, #300]	; (404ac8 <main+0x860>)
  40499c:	785b      	ldrb	r3, [r3, #1]
  40499e:	461a      	mov	r2, r3
  4049a0:	f107 0308 	add.w	r3, r7, #8
  4049a4:	4618      	mov	r0, r3
  4049a6:	494e      	ldr	r1, [pc, #312]	; (404ae0 <main+0x878>)
  4049a8:	4b4a      	ldr	r3, [pc, #296]	; (404ad4 <main+0x86c>)
  4049aa:	4798      	blx	r3
						func_transmit(printStr, strlen(printStr));
  4049ac:	f107 0308 	add.w	r3, r7, #8
  4049b0:	4618      	mov	r0, r3
  4049b2:	4b3d      	ldr	r3, [pc, #244]	; (404aa8 <main+0x840>)
  4049b4:	4798      	blx	r3
  4049b6:	4602      	mov	r2, r0
  4049b8:	f107 0308 	add.w	r3, r7, #8
  4049bc:	4618      	mov	r0, r3
  4049be:	4611      	mov	r1, r2
  4049c0:	4b3c      	ldr	r3, [pc, #240]	; (404ab4 <main+0x84c>)
  4049c2:	4798      	blx	r3
						ioport_toggle_pin_level(ECLAVE_LED_OEn);
  4049c4:	2001      	movs	r0, #1
  4049c6:	4b44      	ldr	r3, [pc, #272]	; (404ad8 <main+0x870>)
  4049c8:	4798      	blx	r3
						
						if (controls.ledoen == 0)
  4049ca:	4b3f      	ldr	r3, [pc, #252]	; (404ac8 <main+0x860>)
  4049cc:	785b      	ldrb	r3, [r3, #1]
  4049ce:	2b00      	cmp	r3, #0
  4049d0:	d110      	bne.n	4049f4 <main+0x78c>
						{
							led_shelf(0, LED_ON);
  4049d2:	2000      	movs	r0, #0
  4049d4:	2101      	movs	r1, #1
  4049d6:	4b43      	ldr	r3, [pc, #268]	; (404ae4 <main+0x87c>)
  4049d8:	4798      	blx	r3
							led_shelf(1, LED_ON);
  4049da:	2001      	movs	r0, #1
  4049dc:	2101      	movs	r1, #1
  4049de:	4b41      	ldr	r3, [pc, #260]	; (404ae4 <main+0x87c>)
  4049e0:	4798      	blx	r3
							led_shelf(2, LED_ON);
  4049e2:	2002      	movs	r0, #2
  4049e4:	2101      	movs	r1, #1
  4049e6:	4b3f      	ldr	r3, [pc, #252]	; (404ae4 <main+0x87c>)
  4049e8:	4798      	blx	r3
							led_shelf(3, LED_ON);
  4049ea:	2003      	movs	r0, #3
  4049ec:	2101      	movs	r1, #1
  4049ee:	4b3d      	ldr	r3, [pc, #244]	; (404ae4 <main+0x87c>)
  4049f0:	4798      	blx	r3
							led_shelf(1, LED_OFF);
							led_shelf(2, LED_OFF);
							led_shelf(3, LED_OFF);
						}
						
						break;
  4049f2:	e148      	b.n	404c86 <main+0xa1e>
							led_shelf(2, LED_ON);
							led_shelf(3, LED_ON);
						}
						else
						{
							led_shelf(0, LED_OFF);
  4049f4:	2000      	movs	r0, #0
  4049f6:	2100      	movs	r1, #0
  4049f8:	4b3a      	ldr	r3, [pc, #232]	; (404ae4 <main+0x87c>)
  4049fa:	4798      	blx	r3
							led_shelf(1, LED_OFF);
  4049fc:	2001      	movs	r0, #1
  4049fe:	2100      	movs	r1, #0
  404a00:	4b38      	ldr	r3, [pc, #224]	; (404ae4 <main+0x87c>)
  404a02:	4798      	blx	r3
							led_shelf(2, LED_OFF);
  404a04:	2002      	movs	r0, #2
  404a06:	2100      	movs	r1, #0
  404a08:	4b36      	ldr	r3, [pc, #216]	; (404ae4 <main+0x87c>)
  404a0a:	4798      	blx	r3
							led_shelf(3, LED_OFF);
  404a0c:	2003      	movs	r0, #3
  404a0e:	2100      	movs	r1, #0
  404a10:	4b34      	ldr	r3, [pc, #208]	; (404ae4 <main+0x87c>)
  404a12:	4798      	blx	r3
						}
						
						break;
  404a14:	e137      	b.n	404c86 <main+0xa1e>
					case 'M':
					case 'm':
						toggle(&controls.MFP);
  404a16:	4834      	ldr	r0, [pc, #208]	; (404ae8 <main+0x880>)
  404a18:	4b2c      	ldr	r3, [pc, #176]	; (404acc <main+0x864>)
  404a1a:	4798      	blx	r3
						sprintf(printStr,"MFP: %d\r\n", controls.MFP);
  404a1c:	4b2a      	ldr	r3, [pc, #168]	; (404ac8 <main+0x860>)
  404a1e:	789b      	ldrb	r3, [r3, #2]
  404a20:	461a      	mov	r2, r3
  404a22:	f107 0308 	add.w	r3, r7, #8
  404a26:	4618      	mov	r0, r3
  404a28:	4930      	ldr	r1, [pc, #192]	; (404aec <main+0x884>)
  404a2a:	4b2a      	ldr	r3, [pc, #168]	; (404ad4 <main+0x86c>)
  404a2c:	4798      	blx	r3
						func_transmit(printStr, strlen(printStr));
  404a2e:	f107 0308 	add.w	r3, r7, #8
  404a32:	4618      	mov	r0, r3
  404a34:	4b1c      	ldr	r3, [pc, #112]	; (404aa8 <main+0x840>)
  404a36:	4798      	blx	r3
  404a38:	4602      	mov	r2, r0
  404a3a:	f107 0308 	add.w	r3, r7, #8
  404a3e:	4618      	mov	r0, r3
  404a40:	4611      	mov	r1, r2
  404a42:	4b1c      	ldr	r3, [pc, #112]	; (404ab4 <main+0x84c>)
  404a44:	4798      	blx	r3
						ioport_toggle_pin_level(ECLAVE_MFP);
  404a46:	2000      	movs	r0, #0
  404a48:	4b23      	ldr	r3, [pc, #140]	; (404ad8 <main+0x870>)
  404a4a:	4798      	blx	r3
						break;
  404a4c:	e11b      	b.n	404c86 <main+0xa1e>
					case 'B':
					case 'b':
						toggle(&controls.buzzer_enable);
  404a4e:	4828      	ldr	r0, [pc, #160]	; (404af0 <main+0x888>)
  404a50:	4b1e      	ldr	r3, [pc, #120]	; (404acc <main+0x864>)
  404a52:	4798      	blx	r3
						sprintf(printStr,"Buzzer: %d\r\n", controls.buzzer_enable);
  404a54:	4b1c      	ldr	r3, [pc, #112]	; (404ac8 <main+0x860>)
  404a56:	78db      	ldrb	r3, [r3, #3]
  404a58:	461a      	mov	r2, r3
  404a5a:	f107 0308 	add.w	r3, r7, #8
  404a5e:	4618      	mov	r0, r3
  404a60:	4924      	ldr	r1, [pc, #144]	; (404af4 <main+0x88c>)
  404a62:	4b1c      	ldr	r3, [pc, #112]	; (404ad4 <main+0x86c>)
  404a64:	4798      	blx	r3
						func_transmit(printStr, strlen(printStr));
  404a66:	f107 0308 	add.w	r3, r7, #8
  404a6a:	4618      	mov	r0, r3
  404a6c:	4b0e      	ldr	r3, [pc, #56]	; (404aa8 <main+0x840>)
  404a6e:	4798      	blx	r3
  404a70:	4602      	mov	r2, r0
  404a72:	f107 0308 	add.w	r3, r7, #8
  404a76:	4618      	mov	r0, r3
  404a78:	4611      	mov	r1, r2
  404a7a:	4b0e      	ldr	r3, [pc, #56]	; (404ab4 <main+0x84c>)
  404a7c:	4798      	blx	r3
						
						if (controls.buzzer_enable)
  404a7e:	4b12      	ldr	r3, [pc, #72]	; (404ac8 <main+0x860>)
  404a80:	78db      	ldrb	r3, [r3, #3]
  404a82:	2b00      	cmp	r3, #0
  404a84:	d00a      	beq.n	404a9c <main+0x834>
						{
							controls.buzzer_count = 0;
  404a86:	4b10      	ldr	r3, [pc, #64]	; (404ac8 <main+0x860>)
  404a88:	2200      	movs	r2, #0
  404a8a:	80da      	strh	r2, [r3, #6]
							controls.buzzer_cycle = CYCLE_ON;
  404a8c:	4b0e      	ldr	r3, [pc, #56]	; (404ac8 <main+0x860>)
  404a8e:	2201      	movs	r2, #1
  404a90:	711a      	strb	r2, [r3, #4]
							pwm_channel_enable(PWM0, PIN_PWM_LED0_CHANNEL);
  404a92:	4819      	ldr	r0, [pc, #100]	; (404af8 <main+0x890>)
  404a94:	2100      	movs	r1, #0
  404a96:	4b19      	ldr	r3, [pc, #100]	; (404afc <main+0x894>)
  404a98:	4798      	blx	r3
						}
						else
						{
							pwm_channel_disable(PWM0, PIN_PWM_LED0_CHANNEL);
						}
						break;
  404a9a:	e0f4      	b.n	404c86 <main+0xa1e>
							controls.buzzer_cycle = CYCLE_ON;
							pwm_channel_enable(PWM0, PIN_PWM_LED0_CHANNEL);
						}
						else
						{
							pwm_channel_disable(PWM0, PIN_PWM_LED0_CHANNEL);
  404a9c:	4816      	ldr	r0, [pc, #88]	; (404af8 <main+0x890>)
  404a9e:	2100      	movs	r1, #0
  404aa0:	4b17      	ldr	r3, [pc, #92]	; (404b00 <main+0x898>)
  404aa2:	4798      	blx	r3
						}
						break;
  404aa4:	e0ef      	b.n	404c86 <main+0xa1e>
  404aa6:	bf00      	nop
  404aa8:	00405315 	.word	0x00405315
  404aac:	0040a9ec 	.word	0x0040a9ec
  404ab0:	0040a9f8 	.word	0x0040a9f8
  404ab4:	00403efd 	.word	0x00403efd
  404ab8:	204012e4 	.word	0x204012e4
  404abc:	40024000 	.word	0x40024000
  404ac0:	004022b5 	.word	0x004022b5
  404ac4:	00402311 	.word	0x00402311
  404ac8:	20400b00 	.word	0x20400b00
  404acc:	00403ac5 	.word	0x00403ac5
  404ad0:	0040a9fc 	.word	0x0040a9fc
  404ad4:	004052c9 	.word	0x004052c9
  404ad8:	00403655 	.word	0x00403655
  404adc:	20400b01 	.word	0x20400b01
  404ae0:	0040aa10 	.word	0x0040aa10
  404ae4:	00402a1d 	.word	0x00402a1d
  404ae8:	20400b02 	.word	0x20400b02
  404aec:	0040aa20 	.word	0x0040aa20
  404af0:	20400b03 	.word	0x20400b03
  404af4:	0040aa2c 	.word	0x0040aa2c
  404af8:	40020000 	.word	0x40020000
  404afc:	00401b81 	.word	0x00401b81
  404b00:	00401ba5 	.word	0x00401ba5
					case 'S':
					case 's':
						toggle(&controls.solenoid_enable);
  404b04:	48b0      	ldr	r0, [pc, #704]	; (404dc8 <main+0xb60>)
  404b06:	4bb1      	ldr	r3, [pc, #708]	; (404dcc <main+0xb64>)
  404b08:	4798      	blx	r3
						sprintf(printStr,"Solenoid: %d\r\n", controls.solenoid_enable);
  404b0a:	4bb1      	ldr	r3, [pc, #708]	; (404dd0 <main+0xb68>)
  404b0c:	7a1b      	ldrb	r3, [r3, #8]
  404b0e:	461a      	mov	r2, r3
  404b10:	f107 0308 	add.w	r3, r7, #8
  404b14:	4618      	mov	r0, r3
  404b16:	49af      	ldr	r1, [pc, #700]	; (404dd4 <main+0xb6c>)
  404b18:	4baf      	ldr	r3, [pc, #700]	; (404dd8 <main+0xb70>)
  404b1a:	4798      	blx	r3
						func_transmit(printStr, strlen(printStr));
  404b1c:	f107 0308 	add.w	r3, r7, #8
  404b20:	4618      	mov	r0, r3
  404b22:	4bae      	ldr	r3, [pc, #696]	; (404ddc <main+0xb74>)
  404b24:	4798      	blx	r3
  404b26:	4602      	mov	r2, r0
  404b28:	f107 0308 	add.w	r3, r7, #8
  404b2c:	4618      	mov	r0, r3
  404b2e:	4611      	mov	r1, r2
  404b30:	4bab      	ldr	r3, [pc, #684]	; (404de0 <main+0xb78>)
  404b32:	4798      	blx	r3
						
						if (controls.solenoid_enable)
  404b34:	4ba6      	ldr	r3, [pc, #664]	; (404dd0 <main+0xb68>)
  404b36:	7a1b      	ldrb	r3, [r3, #8]
  404b38:	2b00      	cmp	r3, #0
  404b3a:	d00a      	beq.n	404b52 <main+0x8ea>
						{
							controls.solenoid_count = 0;
  404b3c:	4ba4      	ldr	r3, [pc, #656]	; (404dd0 <main+0xb68>)
  404b3e:	2200      	movs	r2, #0
  404b40:	815a      	strh	r2, [r3, #10]
							controls.solenoid_cycle = CYCLE_ON;
  404b42:	4ba3      	ldr	r3, [pc, #652]	; (404dd0 <main+0xb68>)
  404b44:	2201      	movs	r2, #1
  404b46:	725a      	strb	r2, [r3, #9]
							ioport_set_pin_level(ECLAVE_SOLENOID, IOPORT_PIN_LEVEL_HIGH);
  404b48:	2015      	movs	r0, #21
  404b4a:	2101      	movs	r1, #1
  404b4c:	4ba5      	ldr	r3, [pc, #660]	; (404de4 <main+0xb7c>)
  404b4e:	4798      	blx	r3
						}
						else
						{
							ioport_set_pin_level(ECLAVE_SOLENOID, IOPORT_PIN_LEVEL_LOW);
						}
						break;
  404b50:	e099      	b.n	404c86 <main+0xa1e>
							controls.solenoid_cycle = CYCLE_ON;
							ioport_set_pin_level(ECLAVE_SOLENOID, IOPORT_PIN_LEVEL_HIGH);
						}
						else
						{
							ioport_set_pin_level(ECLAVE_SOLENOID, IOPORT_PIN_LEVEL_LOW);
  404b52:	2015      	movs	r0, #21
  404b54:	2100      	movs	r1, #0
  404b56:	4ba3      	ldr	r3, [pc, #652]	; (404de4 <main+0xb7c>)
  404b58:	4798      	blx	r3
						}
						break;
  404b5a:	e094      	b.n	404c86 <main+0xa1e>
					case 'H':
					case 'h':
						sprintf(printStr,"HELP MENU\r\n");
  404b5c:	f107 0308 	add.w	r3, r7, #8
  404b60:	4aa1      	ldr	r2, [pc, #644]	; (404de8 <main+0xb80>)
  404b62:	ca07      	ldmia	r2, {r0, r1, r2}
  404b64:	e883 0007 	stmia.w	r3, {r0, r1, r2}
						func_transmit(printStr, strlen(printStr));
  404b68:	f107 0308 	add.w	r3, r7, #8
  404b6c:	4618      	mov	r0, r3
  404b6e:	4b9b      	ldr	r3, [pc, #620]	; (404ddc <main+0xb74>)
  404b70:	4798      	blx	r3
  404b72:	4602      	mov	r2, r0
  404b74:	f107 0308 	add.w	r3, r7, #8
  404b78:	4618      	mov	r0, r3
  404b7a:	4611      	mov	r1, r2
  404b7c:	4b98      	ldr	r3, [pc, #608]	; (404de0 <main+0xb78>)
  404b7e:	4798      	blx	r3
						sprintf(printStr,"P - Toggle PSUPPLY_ONn\r\n");
  404b80:	f107 0308 	add.w	r3, r7, #8
  404b84:	4a99      	ldr	r2, [pc, #612]	; (404dec <main+0xb84>)
  404b86:	461c      	mov	r4, r3
  404b88:	4615      	mov	r5, r2
  404b8a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  404b8c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  404b8e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
  404b92:	c403      	stmia	r4!, {r0, r1}
  404b94:	7022      	strb	r2, [r4, #0]
						func_transmit(printStr, strlen(printStr));
  404b96:	f107 0308 	add.w	r3, r7, #8
  404b9a:	4618      	mov	r0, r3
  404b9c:	4b8f      	ldr	r3, [pc, #572]	; (404ddc <main+0xb74>)
  404b9e:	4798      	blx	r3
  404ba0:	4602      	mov	r2, r0
  404ba2:	f107 0308 	add.w	r3, r7, #8
  404ba6:	4618      	mov	r0, r3
  404ba8:	4611      	mov	r1, r2
  404baa:	4b8d      	ldr	r3, [pc, #564]	; (404de0 <main+0xb78>)
  404bac:	4798      	blx	r3
						sprintf(printStr,"L - Toggle LEDOEn\r\n");
  404bae:	f107 0308 	add.w	r3, r7, #8
  404bb2:	4a8f      	ldr	r2, [pc, #572]	; (404df0 <main+0xb88>)
  404bb4:	461c      	mov	r4, r3
  404bb6:	4615      	mov	r5, r2
  404bb8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  404bba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  404bbc:	682b      	ldr	r3, [r5, #0]
  404bbe:	6023      	str	r3, [r4, #0]
						func_transmit(printStr, strlen(printStr));
  404bc0:	f107 0308 	add.w	r3, r7, #8
  404bc4:	4618      	mov	r0, r3
  404bc6:	4b85      	ldr	r3, [pc, #532]	; (404ddc <main+0xb74>)
  404bc8:	4798      	blx	r3
  404bca:	4602      	mov	r2, r0
  404bcc:	f107 0308 	add.w	r3, r7, #8
  404bd0:	4618      	mov	r0, r3
  404bd2:	4611      	mov	r1, r2
  404bd4:	4b82      	ldr	r3, [pc, #520]	; (404de0 <main+0xb78>)
  404bd6:	4798      	blx	r3
						sprintf(printStr,"M - Toggle MFP\r\n");
  404bd8:	f107 0308 	add.w	r3, r7, #8
  404bdc:	4a85      	ldr	r2, [pc, #532]	; (404df4 <main+0xb8c>)
  404bde:	461c      	mov	r4, r3
  404be0:	4615      	mov	r5, r2
  404be2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  404be4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  404be6:	682b      	ldr	r3, [r5, #0]
  404be8:	7023      	strb	r3, [r4, #0]
						func_transmit(printStr, strlen(printStr));
  404bea:	f107 0308 	add.w	r3, r7, #8
  404bee:	4618      	mov	r0, r3
  404bf0:	4b7a      	ldr	r3, [pc, #488]	; (404ddc <main+0xb74>)
  404bf2:	4798      	blx	r3
  404bf4:	4602      	mov	r2, r0
  404bf6:	f107 0308 	add.w	r3, r7, #8
  404bfa:	4618      	mov	r0, r3
  404bfc:	4611      	mov	r1, r2
  404bfe:	4b78      	ldr	r3, [pc, #480]	; (404de0 <main+0xb78>)
  404c00:	4798      	blx	r3
						sprintf(printStr,"B - Toggle buzzer\r\n");
  404c02:	f107 0308 	add.w	r3, r7, #8
  404c06:	4a7c      	ldr	r2, [pc, #496]	; (404df8 <main+0xb90>)
  404c08:	461c      	mov	r4, r3
  404c0a:	4615      	mov	r5, r2
  404c0c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  404c0e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  404c10:	682b      	ldr	r3, [r5, #0]
  404c12:	6023      	str	r3, [r4, #0]
						func_transmit(printStr, strlen(printStr));
  404c14:	f107 0308 	add.w	r3, r7, #8
  404c18:	4618      	mov	r0, r3
  404c1a:	4b70      	ldr	r3, [pc, #448]	; (404ddc <main+0xb74>)
  404c1c:	4798      	blx	r3
  404c1e:	4602      	mov	r2, r0
  404c20:	f107 0308 	add.w	r3, r7, #8
  404c24:	4618      	mov	r0, r3
  404c26:	4611      	mov	r1, r2
  404c28:	4b6d      	ldr	r3, [pc, #436]	; (404de0 <main+0xb78>)
  404c2a:	4798      	blx	r3
						sprintf(printStr,"S - Toggle solenoid\r\n");
  404c2c:	f107 0308 	add.w	r3, r7, #8
  404c30:	4a72      	ldr	r2, [pc, #456]	; (404dfc <main+0xb94>)
  404c32:	461c      	mov	r4, r3
  404c34:	4615      	mov	r5, r2
  404c36:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  404c38:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  404c3a:	e895 0003 	ldmia.w	r5, {r0, r1}
  404c3e:	6020      	str	r0, [r4, #0]
  404c40:	3404      	adds	r4, #4
  404c42:	8021      	strh	r1, [r4, #0]
						func_transmit(printStr, strlen(printStr));
  404c44:	f107 0308 	add.w	r3, r7, #8
  404c48:	4618      	mov	r0, r3
  404c4a:	4b64      	ldr	r3, [pc, #400]	; (404ddc <main+0xb74>)
  404c4c:	4798      	blx	r3
  404c4e:	4602      	mov	r2, r0
  404c50:	f107 0308 	add.w	r3, r7, #8
  404c54:	4618      	mov	r0, r3
  404c56:	4611      	mov	r1, r2
  404c58:	4b61      	ldr	r3, [pc, #388]	; (404de0 <main+0xb78>)
  404c5a:	4798      	blx	r3
						sprintf(printStr,"H - This menu\r\n");
  404c5c:	f107 0308 	add.w	r3, r7, #8
  404c60:	4a67      	ldr	r2, [pc, #412]	; (404e00 <main+0xb98>)
  404c62:	461c      	mov	r4, r3
  404c64:	4613      	mov	r3, r2
  404c66:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  404c68:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
						func_transmit(printStr, strlen(printStr));
  404c6c:	f107 0308 	add.w	r3, r7, #8
  404c70:	4618      	mov	r0, r3
  404c72:	4b5a      	ldr	r3, [pc, #360]	; (404ddc <main+0xb74>)
  404c74:	4798      	blx	r3
  404c76:	4602      	mov	r2, r0
  404c78:	f107 0308 	add.w	r3, r7, #8
  404c7c:	4618      	mov	r0, r3
  404c7e:	4611      	mov	r1, r2
  404c80:	4b57      	ldr	r3, [pc, #348]	; (404de0 <main+0xb78>)
  404c82:	4798      	blx	r3
						break;
  404c84:	bf00      	nop
		/* Test the debug LED */
		ioport_toggle_pin_level(EXAMPLE_LED_GPIO);


		/* Test the debug usart rx and tx */
		for (i=0; i<70; i++) //7 seconds
  404c86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
  404c88:	3301      	adds	r3, #1
  404c8a:	66fb      	str	r3, [r7, #108]	; 0x6c
  404c8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
  404c8e:	2b45      	cmp	r3, #69	; 0x45
  404c90:	f67f ac6a 	bls.w	404568 <main+0x300>
				}
			}
		}

		/* Test the scrolling blue LED display */
		for (charCount = 0; charCount < 7; charCount++)
  404c94:	2300      	movs	r3, #0
  404c96:	f887 306a 	strb.w	r3, [r7, #106]	; 0x6a
  404c9a:	e05c      	b.n	404d56 <main+0xaee>
		{
			unsigned char temp;
			temp = (*(cmdPtrArray[displayState]+charCount));
  404c9c:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
  404ca0:	4a58      	ldr	r2, [pc, #352]	; (404e04 <main+0xb9c>)
  404ca2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
  404ca6:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
  404caa:	4413      	add	r3, r2
  404cac:	781b      	ldrb	r3, [r3, #0]
  404cae:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
			putchar(temp);
  404cb2:	4b55      	ldr	r3, [pc, #340]	; (404e08 <main+0xba0>)
  404cb4:	681b      	ldr	r3, [r3, #0]
  404cb6:	689b      	ldr	r3, [r3, #8]
  404cb8:	689a      	ldr	r2, [r3, #8]
  404cba:	3a01      	subs	r2, #1
  404cbc:	609a      	str	r2, [r3, #8]
  404cbe:	689b      	ldr	r3, [r3, #8]
  404cc0:	2b00      	cmp	r3, #0
  404cc2:	da36      	bge.n	404d32 <main+0xaca>
  404cc4:	4b50      	ldr	r3, [pc, #320]	; (404e08 <main+0xba0>)
  404cc6:	681b      	ldr	r3, [r3, #0]
  404cc8:	689b      	ldr	r3, [r3, #8]
  404cca:	689a      	ldr	r2, [r3, #8]
  404ccc:	4b4e      	ldr	r3, [pc, #312]	; (404e08 <main+0xba0>)
  404cce:	681b      	ldr	r3, [r3, #0]
  404cd0:	689b      	ldr	r3, [r3, #8]
  404cd2:	699b      	ldr	r3, [r3, #24]
  404cd4:	429a      	cmp	r2, r3
  404cd6:	db1f      	blt.n	404d18 <main+0xab0>
  404cd8:	4b4b      	ldr	r3, [pc, #300]	; (404e08 <main+0xba0>)
  404cda:	681b      	ldr	r3, [r3, #0]
  404cdc:	689b      	ldr	r3, [r3, #8]
  404cde:	681b      	ldr	r3, [r3, #0]
  404ce0:	f897 2059 	ldrb.w	r2, [r7, #89]	; 0x59
  404ce4:	701a      	strb	r2, [r3, #0]
  404ce6:	4b48      	ldr	r3, [pc, #288]	; (404e08 <main+0xba0>)
  404ce8:	681b      	ldr	r3, [r3, #0]
  404cea:	689b      	ldr	r3, [r3, #8]
  404cec:	681b      	ldr	r3, [r3, #0]
  404cee:	781b      	ldrb	r3, [r3, #0]
  404cf0:	2b0a      	cmp	r3, #10
  404cf2:	d006      	beq.n	404d02 <main+0xa9a>
  404cf4:	4b44      	ldr	r3, [pc, #272]	; (404e08 <main+0xba0>)
  404cf6:	681b      	ldr	r3, [r3, #0]
  404cf8:	689b      	ldr	r3, [r3, #8]
  404cfa:	681a      	ldr	r2, [r3, #0]
  404cfc:	3201      	adds	r2, #1
  404cfe:	601a      	str	r2, [r3, #0]
  404d00:	e024      	b.n	404d4c <main+0xae4>
  404d02:	4b41      	ldr	r3, [pc, #260]	; (404e08 <main+0xba0>)
  404d04:	681a      	ldr	r2, [r3, #0]
  404d06:	4b40      	ldr	r3, [pc, #256]	; (404e08 <main+0xba0>)
  404d08:	681b      	ldr	r3, [r3, #0]
  404d0a:	689b      	ldr	r3, [r3, #8]
  404d0c:	4610      	mov	r0, r2
  404d0e:	210a      	movs	r1, #10
  404d10:	461a      	mov	r2, r3
  404d12:	4b3e      	ldr	r3, [pc, #248]	; (404e0c <main+0xba4>)
  404d14:	4798      	blx	r3
  404d16:	e019      	b.n	404d4c <main+0xae4>
  404d18:	4b3b      	ldr	r3, [pc, #236]	; (404e08 <main+0xba0>)
  404d1a:	6819      	ldr	r1, [r3, #0]
  404d1c:	f897 2059 	ldrb.w	r2, [r7, #89]	; 0x59
  404d20:	4b39      	ldr	r3, [pc, #228]	; (404e08 <main+0xba0>)
  404d22:	681b      	ldr	r3, [r3, #0]
  404d24:	689b      	ldr	r3, [r3, #8]
  404d26:	4608      	mov	r0, r1
  404d28:	4611      	mov	r1, r2
  404d2a:	461a      	mov	r2, r3
  404d2c:	4b37      	ldr	r3, [pc, #220]	; (404e0c <main+0xba4>)
  404d2e:	4798      	blx	r3
  404d30:	e00c      	b.n	404d4c <main+0xae4>
  404d32:	4b35      	ldr	r3, [pc, #212]	; (404e08 <main+0xba0>)
  404d34:	681b      	ldr	r3, [r3, #0]
  404d36:	689b      	ldr	r3, [r3, #8]
  404d38:	681b      	ldr	r3, [r3, #0]
  404d3a:	f897 2059 	ldrb.w	r2, [r7, #89]	; 0x59
  404d3e:	701a      	strb	r2, [r3, #0]
  404d40:	4b31      	ldr	r3, [pc, #196]	; (404e08 <main+0xba0>)
  404d42:	681b      	ldr	r3, [r3, #0]
  404d44:	689b      	ldr	r3, [r3, #8]
  404d46:	681a      	ldr	r2, [r3, #0]
  404d48:	3201      	adds	r2, #1
  404d4a:	601a      	str	r2, [r3, #0]
				}
			}
		}

		/* Test the scrolling blue LED display */
		for (charCount = 0; charCount < 7; charCount++)
  404d4c:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
  404d50:	3301      	adds	r3, #1
  404d52:	f887 306a 	strb.w	r3, [r7, #106]	; 0x6a
  404d56:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
  404d5a:	2b06      	cmp	r3, #6
  404d5c:	d99e      	bls.n	404c9c <main+0xa34>
			putchar(temp);
		}
		
		/* Test the debug port */

		switch (displayState)
  404d5e:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
  404d62:	2b08      	cmp	r3, #8
  404d64:	f200 8086 	bhi.w	404e74 <main+0xc0c>
  404d68:	a201      	add	r2, pc, #4	; (adr r2, 404d70 <main+0xb08>)
  404d6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  404d6e:	bf00      	nop
  404d70:	00404d95 	.word	0x00404d95
  404d74:	00404da5 	.word	0x00404da5
  404d78:	00404db5 	.word	0x00404db5
  404d7c:	00404e1d 	.word	0x00404e1d
  404d80:	00404e2d 	.word	0x00404e2d
  404d84:	00404e3d 	.word	0x00404e3d
  404d88:	00404e4b 	.word	0x00404e4b
  404d8c:	00404e59 	.word	0x00404e59
  404d90:	00404e67 	.word	0x00404e67
		{
			case IDX_READY:
				sprintf(txBuf, "Ready\r\n");
  404d94:	f107 034c 	add.w	r3, r7, #76	; 0x4c
  404d98:	4a1d      	ldr	r2, [pc, #116]	; (404e10 <main+0xba8>)
  404d9a:	e892 0003 	ldmia.w	r2, {r0, r1}
  404d9e:	e883 0003 	stmia.w	r3, {r0, r1}
				break;
  404da2:	e067      	b.n	404e74 <main+0xc0c>
			case IDX_CLEAN:
				sprintf(txBuf, "Clean\r\n");
  404da4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
  404da8:	4a1a      	ldr	r2, [pc, #104]	; (404e14 <main+0xbac>)
  404daa:	e892 0003 	ldmia.w	r2, {r0, r1}
  404dae:	e883 0003 	stmia.w	r3, {r0, r1}
				break;
  404db2:	e05f      	b.n	404e74 <main+0xc0c>
			case IDX_CLEANING:
				sprintf(txBuf, "Cleaning\r\n");
  404db4:	4a18      	ldr	r2, [pc, #96]	; (404e18 <main+0xbb0>)
  404db6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
  404dba:	ca07      	ldmia	r2, {r0, r1, r2}
  404dbc:	c303      	stmia	r3!, {r0, r1}
  404dbe:	801a      	strh	r2, [r3, #0]
  404dc0:	3302      	adds	r3, #2
  404dc2:	0c12      	lsrs	r2, r2, #16
  404dc4:	701a      	strb	r2, [r3, #0]
				break;
  404dc6:	e055      	b.n	404e74 <main+0xc0c>
  404dc8:	20400b08 	.word	0x20400b08
  404dcc:	00403ac5 	.word	0x00403ac5
  404dd0:	20400b00 	.word	0x20400b00
  404dd4:	0040aa3c 	.word	0x0040aa3c
  404dd8:	004052c9 	.word	0x004052c9
  404ddc:	00405315 	.word	0x00405315
  404de0:	00403efd 	.word	0x00403efd
  404de4:	00403599 	.word	0x00403599
  404de8:	0040aa4c 	.word	0x0040aa4c
  404dec:	0040aa58 	.word	0x0040aa58
  404df0:	0040aa74 	.word	0x0040aa74
  404df4:	0040aa88 	.word	0x0040aa88
  404df8:	0040aa9c 	.word	0x0040aa9c
  404dfc:	0040aab0 	.word	0x0040aab0
  404e00:	0040aac8 	.word	0x0040aac8
  404e04:	2040005c 	.word	0x2040005c
  404e08:	204004b8 	.word	0x204004b8
  404e0c:	00406881 	.word	0x00406881
  404e10:	0040aad8 	.word	0x0040aad8
  404e14:	0040aae0 	.word	0x0040aae0
  404e18:	0040ab4c 	.word	0x0040ab4c
			case IDX_DIRTY:
				sprintf(txBuf, "Dirty\r\n");
  404e1c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
  404e20:	4a7a      	ldr	r2, [pc, #488]	; (40500c <main+0xda4>)
  404e22:	e892 0003 	ldmia.w	r2, {r0, r1}
  404e26:	e883 0003 	stmia.w	r3, {r0, r1}
				break;
  404e2a:	e023      	b.n	404e74 <main+0xc0c>
			case IDX_ERROR:
				sprintf(txBuf, "Error\r\n");
  404e2c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
  404e30:	4a77      	ldr	r2, [pc, #476]	; (405010 <main+0xda8>)
  404e32:	e892 0003 	ldmia.w	r2, {r0, r1}
  404e36:	e883 0003 	stmia.w	r3, {r0, r1}
				break;
  404e3a:	e01b      	b.n	404e74 <main+0xc0c>
			case IDX_SHELF1:
				sprintf(txBuf, "Shelf1\r\n");
  404e3c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
  404e40:	4a74      	ldr	r2, [pc, #464]	; (405014 <main+0xdac>)
  404e42:	ca07      	ldmia	r2, {r0, r1, r2}
  404e44:	c303      	stmia	r3!, {r0, r1}
  404e46:	701a      	strb	r2, [r3, #0]
				break;
  404e48:	e014      	b.n	404e74 <main+0xc0c>
			case IDX_SHELF2:
				sprintf(txBuf, "Shelf2\r\n");
  404e4a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
  404e4e:	4a72      	ldr	r2, [pc, #456]	; (405018 <main+0xdb0>)
  404e50:	ca07      	ldmia	r2, {r0, r1, r2}
  404e52:	c303      	stmia	r3!, {r0, r1}
  404e54:	701a      	strb	r2, [r3, #0]
				break;
  404e56:	e00d      	b.n	404e74 <main+0xc0c>
			case IDX_SHELF3:
				sprintf(txBuf, "Shelf3\r\n");
  404e58:	f107 034c 	add.w	r3, r7, #76	; 0x4c
  404e5c:	4a6f      	ldr	r2, [pc, #444]	; (40501c <main+0xdb4>)
  404e5e:	ca07      	ldmia	r2, {r0, r1, r2}
  404e60:	c303      	stmia	r3!, {r0, r1}
  404e62:	701a      	strb	r2, [r3, #0]
				break;
  404e64:	e006      	b.n	404e74 <main+0xc0c>
			case IDX_SHELF4:
				sprintf(txBuf, "Shelf4\r\n");
  404e66:	f107 034c 	add.w	r3, r7, #76	; 0x4c
  404e6a:	4a6d      	ldr	r2, [pc, #436]	; (405020 <main+0xdb8>)
  404e6c:	ca07      	ldmia	r2, {r0, r1, r2}
  404e6e:	c303      	stmia	r3!, {r0, r1}
  404e70:	701a      	strb	r2, [r3, #0]
				break;
  404e72:	bf00      	nop
		}
		
		func_transmit(txBuf, strlen(txBuf));
  404e74:	f107 034c 	add.w	r3, r7, #76	; 0x4c
  404e78:	4618      	mov	r0, r3
  404e7a:	4b6a      	ldr	r3, [pc, #424]	; (405024 <main+0xdbc>)
  404e7c:	4798      	blx	r3
  404e7e:	4602      	mov	r2, r0
  404e80:	f107 034c 	add.w	r3, r7, #76	; 0x4c
  404e84:	4618      	mov	r0, r3
  404e86:	4611      	mov	r1, r2
  404e88:	4b67      	ldr	r3, [pc, #412]	; (405028 <main+0xdc0>)
  404e8a:	4798      	blx	r3


		if ((++displayState) > 8)
  404e8c:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
  404e90:	3301      	adds	r3, #1
  404e92:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
  404e96:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
  404e9a:	2b08      	cmp	r3, #8
  404e9c:	d902      	bls.n	404ea4 <main+0xc3c>
		{
			displayState = 0;
  404e9e:	2300      	movs	r3, #0
  404ea0:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
		
		/*
		 * Read Bluesense lines
		 */
		
		afec_channel_enable(AFEC1, AFEC_CHANNEL_9);
  404ea4:	4861      	ldr	r0, [pc, #388]	; (40502c <main+0xdc4>)
  404ea6:	2109      	movs	r1, #9
  404ea8:	4b61      	ldr	r3, [pc, #388]	; (405030 <main+0xdc8>)
  404eaa:	4798      	blx	r3
		afec_start_software_conversion(AFEC1);
  404eac:	485f      	ldr	r0, [pc, #380]	; (40502c <main+0xdc4>)
  404eae:	4b61      	ldr	r3, [pc, #388]	; (405034 <main+0xdcc>)
  404eb0:	4798      	blx	r3
		is_conversion_done = false;
  404eb2:	4b61      	ldr	r3, [pc, #388]	; (405038 <main+0xdd0>)
  404eb4:	2200      	movs	r2, #0
  404eb6:	701a      	strb	r2, [r3, #0]
		while (is_conversion_done == false);
  404eb8:	bf00      	nop
  404eba:	4b5f      	ldr	r3, [pc, #380]	; (405038 <main+0xdd0>)
  404ebc:	781b      	ldrb	r3, [r3, #0]
  404ebe:	b2db      	uxtb	r3, r3
  404ec0:	f083 0301 	eor.w	r3, r3, #1
  404ec4:	b2db      	uxtb	r3, r3
  404ec6:	2b00      	cmp	r3, #0
  404ec8:	d1f7      	bne.n	404eba <main+0xc52>
		g_ul_value[0] = g_afec1_sample_data;
  404eca:	4b5c      	ldr	r3, [pc, #368]	; (40503c <main+0xdd4>)
  404ecc:	681b      	ldr	r3, [r3, #0]
  404ece:	4a5c      	ldr	r2, [pc, #368]	; (405040 <main+0xdd8>)
  404ed0:	6013      	str	r3, [r2, #0]
		afec_channel_disable(AFEC1, AFEC_CHANNEL_9);
  404ed2:	4856      	ldr	r0, [pc, #344]	; (40502c <main+0xdc4>)
  404ed4:	2109      	movs	r1, #9
  404ed6:	4b5b      	ldr	r3, [pc, #364]	; (405044 <main+0xddc>)
  404ed8:	4798      	blx	r3

		afec_channel_enable(AFEC0, AFEC_CHANNEL_4);
  404eda:	485b      	ldr	r0, [pc, #364]	; (405048 <main+0xde0>)
  404edc:	2104      	movs	r1, #4
  404ede:	4b54      	ldr	r3, [pc, #336]	; (405030 <main+0xdc8>)
  404ee0:	4798      	blx	r3
		afec_start_software_conversion(AFEC0);
  404ee2:	4859      	ldr	r0, [pc, #356]	; (405048 <main+0xde0>)
  404ee4:	4b53      	ldr	r3, [pc, #332]	; (405034 <main+0xdcc>)
  404ee6:	4798      	blx	r3
		is_conversion_done = false;
  404ee8:	4b53      	ldr	r3, [pc, #332]	; (405038 <main+0xdd0>)
  404eea:	2200      	movs	r2, #0
  404eec:	701a      	strb	r2, [r3, #0]
		while (is_conversion_done == false);
  404eee:	bf00      	nop
  404ef0:	4b51      	ldr	r3, [pc, #324]	; (405038 <main+0xdd0>)
  404ef2:	781b      	ldrb	r3, [r3, #0]
  404ef4:	b2db      	uxtb	r3, r3
  404ef6:	f083 0301 	eor.w	r3, r3, #1
  404efa:	b2db      	uxtb	r3, r3
  404efc:	2b00      	cmp	r3, #0
  404efe:	d1f7      	bne.n	404ef0 <main+0xc88>
		g_ul_value[1] = g_afec0_sample_data;
  404f00:	4b52      	ldr	r3, [pc, #328]	; (40504c <main+0xde4>)
  404f02:	681b      	ldr	r3, [r3, #0]
  404f04:	4a4e      	ldr	r2, [pc, #312]	; (405040 <main+0xdd8>)
  404f06:	6053      	str	r3, [r2, #4]
		afec_channel_disable(AFEC0, AFEC_CHANNEL_4);
  404f08:	484f      	ldr	r0, [pc, #316]	; (405048 <main+0xde0>)
  404f0a:	2104      	movs	r1, #4
  404f0c:	4b4d      	ldr	r3, [pc, #308]	; (405044 <main+0xddc>)
  404f0e:	4798      	blx	r3

		afec_channel_enable(AFEC1, AFEC_CHANNEL_4);
  404f10:	4846      	ldr	r0, [pc, #280]	; (40502c <main+0xdc4>)
  404f12:	2104      	movs	r1, #4
  404f14:	4b46      	ldr	r3, [pc, #280]	; (405030 <main+0xdc8>)
  404f16:	4798      	blx	r3
		afec_start_software_conversion(AFEC1);
  404f18:	4844      	ldr	r0, [pc, #272]	; (40502c <main+0xdc4>)
  404f1a:	4b46      	ldr	r3, [pc, #280]	; (405034 <main+0xdcc>)
  404f1c:	4798      	blx	r3
		is_conversion_done = false;
  404f1e:	4b46      	ldr	r3, [pc, #280]	; (405038 <main+0xdd0>)
  404f20:	2200      	movs	r2, #0
  404f22:	701a      	strb	r2, [r3, #0]
		while (is_conversion_done == false);
  404f24:	bf00      	nop
  404f26:	4b44      	ldr	r3, [pc, #272]	; (405038 <main+0xdd0>)
  404f28:	781b      	ldrb	r3, [r3, #0]
  404f2a:	b2db      	uxtb	r3, r3
  404f2c:	f083 0301 	eor.w	r3, r3, #1
  404f30:	b2db      	uxtb	r3, r3
  404f32:	2b00      	cmp	r3, #0
  404f34:	d1f7      	bne.n	404f26 <main+0xcbe>
		g_ul_value[2] = g_afec1_sample_data;
  404f36:	4b41      	ldr	r3, [pc, #260]	; (40503c <main+0xdd4>)
  404f38:	681b      	ldr	r3, [r3, #0]
  404f3a:	4a41      	ldr	r2, [pc, #260]	; (405040 <main+0xdd8>)
  404f3c:	6093      	str	r3, [r2, #8]
		afec_channel_disable(AFEC1, AFEC_CHANNEL_4);
  404f3e:	483b      	ldr	r0, [pc, #236]	; (40502c <main+0xdc4>)
  404f40:	2104      	movs	r1, #4
  404f42:	4b40      	ldr	r3, [pc, #256]	; (405044 <main+0xddc>)
  404f44:	4798      	blx	r3

		afec_channel_enable(AFEC1, AFEC_CHANNEL_5);
  404f46:	4839      	ldr	r0, [pc, #228]	; (40502c <main+0xdc4>)
  404f48:	2105      	movs	r1, #5
  404f4a:	4b39      	ldr	r3, [pc, #228]	; (405030 <main+0xdc8>)
  404f4c:	4798      	blx	r3
		afec_start_software_conversion(AFEC1);
  404f4e:	4837      	ldr	r0, [pc, #220]	; (40502c <main+0xdc4>)
  404f50:	4b38      	ldr	r3, [pc, #224]	; (405034 <main+0xdcc>)
  404f52:	4798      	blx	r3
		is_conversion_done = false;
  404f54:	4b38      	ldr	r3, [pc, #224]	; (405038 <main+0xdd0>)
  404f56:	2200      	movs	r2, #0
  404f58:	701a      	strb	r2, [r3, #0]
		while (is_conversion_done == false);
  404f5a:	bf00      	nop
  404f5c:	4b36      	ldr	r3, [pc, #216]	; (405038 <main+0xdd0>)
  404f5e:	781b      	ldrb	r3, [r3, #0]
  404f60:	b2db      	uxtb	r3, r3
  404f62:	f083 0301 	eor.w	r3, r3, #1
  404f66:	b2db      	uxtb	r3, r3
  404f68:	2b00      	cmp	r3, #0
  404f6a:	d1f7      	bne.n	404f5c <main+0xcf4>
		g_ul_value[3] = g_afec1_sample_data;
  404f6c:	4b33      	ldr	r3, [pc, #204]	; (40503c <main+0xdd4>)
  404f6e:	681b      	ldr	r3, [r3, #0]
  404f70:	4a33      	ldr	r2, [pc, #204]	; (405040 <main+0xdd8>)
  404f72:	60d3      	str	r3, [r2, #12]
		afec_channel_disable(AFEC1, AFEC_CHANNEL_5);
  404f74:	482d      	ldr	r0, [pc, #180]	; (40502c <main+0xdc4>)
  404f76:	2105      	movs	r1, #5
  404f78:	4b32      	ldr	r3, [pc, #200]	; (405044 <main+0xddc>)
  404f7a:	4798      	blx	r3

		if ((g_ul_value[0] != g_ul_last_value[0]) ||
  404f7c:	4b30      	ldr	r3, [pc, #192]	; (405040 <main+0xdd8>)
  404f7e:	681a      	ldr	r2, [r3, #0]
  404f80:	4b33      	ldr	r3, [pc, #204]	; (405050 <main+0xde8>)
  404f82:	681b      	ldr	r3, [r3, #0]
  404f84:	429a      	cmp	r2, r3
  404f86:	d111      	bne.n	404fac <main+0xd44>
			(g_ul_value[1] != g_ul_last_value[1]) ||
  404f88:	4b2d      	ldr	r3, [pc, #180]	; (405040 <main+0xdd8>)
  404f8a:	685a      	ldr	r2, [r3, #4]
  404f8c:	4b30      	ldr	r3, [pc, #192]	; (405050 <main+0xde8>)
  404f8e:	685b      	ldr	r3, [r3, #4]
		is_conversion_done = false;
		while (is_conversion_done == false);
		g_ul_value[3] = g_afec1_sample_data;
		afec_channel_disable(AFEC1, AFEC_CHANNEL_5);

		if ((g_ul_value[0] != g_ul_last_value[0]) ||
  404f90:	429a      	cmp	r2, r3
  404f92:	d10b      	bne.n	404fac <main+0xd44>
			(g_ul_value[1] != g_ul_last_value[1]) ||
			(g_ul_value[2] != g_ul_last_value[2]) ||
  404f94:	4b2a      	ldr	r3, [pc, #168]	; (405040 <main+0xdd8>)
  404f96:	689a      	ldr	r2, [r3, #8]
  404f98:	4b2d      	ldr	r3, [pc, #180]	; (405050 <main+0xde8>)
  404f9a:	689b      	ldr	r3, [r3, #8]
		while (is_conversion_done == false);
		g_ul_value[3] = g_afec1_sample_data;
		afec_channel_disable(AFEC1, AFEC_CHANNEL_5);

		if ((g_ul_value[0] != g_ul_last_value[0]) ||
			(g_ul_value[1] != g_ul_last_value[1]) ||
  404f9c:	429a      	cmp	r2, r3
  404f9e:	d105      	bne.n	404fac <main+0xd44>
			(g_ul_value[2] != g_ul_last_value[2]) ||
			(g_ul_value[3] != g_ul_last_value[3]))
  404fa0:	4b27      	ldr	r3, [pc, #156]	; (405040 <main+0xdd8>)
  404fa2:	68da      	ldr	r2, [r3, #12]
  404fa4:	4b2a      	ldr	r3, [pc, #168]	; (405050 <main+0xde8>)
  404fa6:	68db      	ldr	r3, [r3, #12]
		g_ul_value[3] = g_afec1_sample_data;
		afec_channel_disable(AFEC1, AFEC_CHANNEL_5);

		if ((g_ul_value[0] != g_ul_last_value[0]) ||
			(g_ul_value[1] != g_ul_last_value[1]) ||
			(g_ul_value[2] != g_ul_last_value[2]) ||
  404fa8:	429a      	cmp	r2, r3
  404faa:	d02d      	beq.n	405008 <main+0xda0>
			(g_ul_value[3] != g_ul_last_value[3]))
		{
			sprintf(printStr,"ch0: %x ch1: %x ch2: %x ch3: %x\r\n", g_ul_value[0], g_ul_value[1], g_ul_value[2], g_ul_value[3]);
  404fac:	4b24      	ldr	r3, [pc, #144]	; (405040 <main+0xdd8>)
  404fae:	681d      	ldr	r5, [r3, #0]
  404fb0:	4b23      	ldr	r3, [pc, #140]	; (405040 <main+0xdd8>)
  404fb2:	685c      	ldr	r4, [r3, #4]
  404fb4:	4b22      	ldr	r3, [pc, #136]	; (405040 <main+0xdd8>)
  404fb6:	689a      	ldr	r2, [r3, #8]
  404fb8:	4b21      	ldr	r3, [pc, #132]	; (405040 <main+0xdd8>)
  404fba:	68db      	ldr	r3, [r3, #12]
  404fbc:	f107 0108 	add.w	r1, r7, #8
  404fc0:	9200      	str	r2, [sp, #0]
  404fc2:	9301      	str	r3, [sp, #4]
  404fc4:	4608      	mov	r0, r1
  404fc6:	4923      	ldr	r1, [pc, #140]	; (405054 <main+0xdec>)
  404fc8:	462a      	mov	r2, r5
  404fca:	4623      	mov	r3, r4
  404fcc:	4c22      	ldr	r4, [pc, #136]	; (405058 <main+0xdf0>)
  404fce:	47a0      	blx	r4
			func_transmit(printStr, strlen(printStr));
  404fd0:	f107 0308 	add.w	r3, r7, #8
  404fd4:	4618      	mov	r0, r3
  404fd6:	4b13      	ldr	r3, [pc, #76]	; (405024 <main+0xdbc>)
  404fd8:	4798      	blx	r3
  404fda:	4602      	mov	r2, r0
  404fdc:	f107 0308 	add.w	r3, r7, #8
  404fe0:	4618      	mov	r0, r3
  404fe2:	4611      	mov	r1, r2
  404fe4:	4b10      	ldr	r3, [pc, #64]	; (405028 <main+0xdc0>)
  404fe6:	4798      	blx	r3
			g_ul_last_value[0] = g_ul_value[0];
  404fe8:	4b15      	ldr	r3, [pc, #84]	; (405040 <main+0xdd8>)
  404fea:	681b      	ldr	r3, [r3, #0]
  404fec:	4a18      	ldr	r2, [pc, #96]	; (405050 <main+0xde8>)
  404fee:	6013      	str	r3, [r2, #0]
			g_ul_last_value[1] = g_ul_value[1];
  404ff0:	4b13      	ldr	r3, [pc, #76]	; (405040 <main+0xdd8>)
  404ff2:	685b      	ldr	r3, [r3, #4]
  404ff4:	4a16      	ldr	r2, [pc, #88]	; (405050 <main+0xde8>)
  404ff6:	6053      	str	r3, [r2, #4]
			g_ul_last_value[2] = g_ul_value[2];
  404ff8:	4b11      	ldr	r3, [pc, #68]	; (405040 <main+0xdd8>)
  404ffa:	689b      	ldr	r3, [r3, #8]
  404ffc:	4a14      	ldr	r2, [pc, #80]	; (405050 <main+0xde8>)
  404ffe:	6093      	str	r3, [r2, #8]
			g_ul_last_value[3] = g_ul_value[3];
  405000:	4b0f      	ldr	r3, [pc, #60]	; (405040 <main+0xdd8>)
  405002:	68db      	ldr	r3, [r3, #12]
  405004:	4a12      	ldr	r2, [pc, #72]	; (405050 <main+0xde8>)
  405006:	60d3      	str	r3, [r2, #12]
		}
		
		
	}//while
  405008:	f7ff ba70 	b.w	4044ec <main+0x284>
  40500c:	0040aae8 	.word	0x0040aae8
  405010:	0040aaf0 	.word	0x0040aaf0
  405014:	0040aaf8 	.word	0x0040aaf8
  405018:	0040ab04 	.word	0x0040ab04
  40501c:	0040ab10 	.word	0x0040ab10
  405020:	0040ab1c 	.word	0x0040ab1c
  405024:	00405315 	.word	0x00405315
  405028:	00403efd 	.word	0x00403efd
  40502c:	40064000 	.word	0x40064000
  405030:	0040338d 	.word	0x0040338d
  405034:	00403375 	.word	0x00403375
  405038:	204009a4 	.word	0x204009a4
  40503c:	20400abc 	.word	0x20400abc
  405040:	204009a8 	.word	0x204009a8
  405044:	004033d5 	.word	0x004033d5
  405048:	4003c000 	.word	0x4003c000
  40504c:	204012f8 	.word	0x204012f8
  405050:	204009b8 	.word	0x204009b8
  405054:	0040ab28 	.word	0x0040ab28
  405058:	004052c9 	.word	0x004052c9

0040505c <__libc_init_array>:
  40505c:	b570      	push	{r4, r5, r6, lr}
  40505e:	4e0f      	ldr	r6, [pc, #60]	; (40509c <__libc_init_array+0x40>)
  405060:	4d0f      	ldr	r5, [pc, #60]	; (4050a0 <__libc_init_array+0x44>)
  405062:	1b76      	subs	r6, r6, r5
  405064:	10b6      	asrs	r6, r6, #2
  405066:	bf18      	it	ne
  405068:	2400      	movne	r4, #0
  40506a:	d005      	beq.n	405078 <__libc_init_array+0x1c>
  40506c:	3401      	adds	r4, #1
  40506e:	f855 3b04 	ldr.w	r3, [r5], #4
  405072:	4798      	blx	r3
  405074:	42a6      	cmp	r6, r4
  405076:	d1f9      	bne.n	40506c <__libc_init_array+0x10>
  405078:	4e0a      	ldr	r6, [pc, #40]	; (4050a4 <__libc_init_array+0x48>)
  40507a:	f005 fe35 	bl	40ace8 <_init>
  40507e:	4d0a      	ldr	r5, [pc, #40]	; (4050a8 <__libc_init_array+0x4c>)
  405080:	1b76      	subs	r6, r6, r5
  405082:	10b6      	asrs	r6, r6, #2
  405084:	bf18      	it	ne
  405086:	2400      	movne	r4, #0
  405088:	d006      	beq.n	405098 <__libc_init_array+0x3c>
  40508a:	3401      	adds	r4, #1
  40508c:	f855 3b04 	ldr.w	r3, [r5], #4
  405090:	4798      	blx	r3
  405092:	42a6      	cmp	r6, r4
  405094:	d1f9      	bne.n	40508a <__libc_init_array+0x2e>
  405096:	bd70      	pop	{r4, r5, r6, pc}
  405098:	bd70      	pop	{r4, r5, r6, pc}
  40509a:	bf00      	nop
  40509c:	0040acf4 	.word	0x0040acf4
  4050a0:	0040acf4 	.word	0x0040acf4
  4050a4:	0040acfc 	.word	0x0040acfc
  4050a8:	0040acf4 	.word	0x0040acf4

004050ac <memset>:
  4050ac:	0783      	lsls	r3, r0, #30
  4050ae:	b470      	push	{r4, r5, r6}
  4050b0:	d049      	beq.n	405146 <memset+0x9a>
  4050b2:	1e54      	subs	r4, r2, #1
  4050b4:	2a00      	cmp	r2, #0
  4050b6:	d044      	beq.n	405142 <memset+0x96>
  4050b8:	b2cd      	uxtb	r5, r1
  4050ba:	4603      	mov	r3, r0
  4050bc:	e002      	b.n	4050c4 <memset+0x18>
  4050be:	2c00      	cmp	r4, #0
  4050c0:	d03f      	beq.n	405142 <memset+0x96>
  4050c2:	4614      	mov	r4, r2
  4050c4:	f803 5b01 	strb.w	r5, [r3], #1
  4050c8:	f013 0f03 	tst.w	r3, #3
  4050cc:	f104 32ff 	add.w	r2, r4, #4294967295
  4050d0:	d1f5      	bne.n	4050be <memset+0x12>
  4050d2:	2c03      	cmp	r4, #3
  4050d4:	d92e      	bls.n	405134 <memset+0x88>
  4050d6:	b2cd      	uxtb	r5, r1
  4050d8:	2c0f      	cmp	r4, #15
  4050da:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  4050de:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  4050e2:	d919      	bls.n	405118 <memset+0x6c>
  4050e4:	f103 0210 	add.w	r2, r3, #16
  4050e8:	4626      	mov	r6, r4
  4050ea:	3e10      	subs	r6, #16
  4050ec:	f842 5c10 	str.w	r5, [r2, #-16]
  4050f0:	f842 5c0c 	str.w	r5, [r2, #-12]
  4050f4:	3210      	adds	r2, #16
  4050f6:	2e0f      	cmp	r6, #15
  4050f8:	f842 5c18 	str.w	r5, [r2, #-24]
  4050fc:	f842 5c14 	str.w	r5, [r2, #-20]
  405100:	d8f3      	bhi.n	4050ea <memset+0x3e>
  405102:	f1a4 0210 	sub.w	r2, r4, #16
  405106:	f004 040f 	and.w	r4, r4, #15
  40510a:	f022 020f 	bic.w	r2, r2, #15
  40510e:	2c03      	cmp	r4, #3
  405110:	f102 0210 	add.w	r2, r2, #16
  405114:	4413      	add	r3, r2
  405116:	d90d      	bls.n	405134 <memset+0x88>
  405118:	461e      	mov	r6, r3
  40511a:	4622      	mov	r2, r4
  40511c:	3a04      	subs	r2, #4
  40511e:	f846 5b04 	str.w	r5, [r6], #4
  405122:	2a03      	cmp	r2, #3
  405124:	d8fa      	bhi.n	40511c <memset+0x70>
  405126:	1f22      	subs	r2, r4, #4
  405128:	f004 0403 	and.w	r4, r4, #3
  40512c:	f022 0203 	bic.w	r2, r2, #3
  405130:	3204      	adds	r2, #4
  405132:	4413      	add	r3, r2
  405134:	b12c      	cbz	r4, 405142 <memset+0x96>
  405136:	b2c9      	uxtb	r1, r1
  405138:	441c      	add	r4, r3
  40513a:	f803 1b01 	strb.w	r1, [r3], #1
  40513e:	42a3      	cmp	r3, r4
  405140:	d1fb      	bne.n	40513a <memset+0x8e>
  405142:	bc70      	pop	{r4, r5, r6}
  405144:	4770      	bx	lr
  405146:	4614      	mov	r4, r2
  405148:	4603      	mov	r3, r0
  40514a:	e7c2      	b.n	4050d2 <memset+0x26>

0040514c <_puts_r>:
  40514c:	b5f0      	push	{r4, r5, r6, r7, lr}
  40514e:	4604      	mov	r4, r0
  405150:	b089      	sub	sp, #36	; 0x24
  405152:	4608      	mov	r0, r1
  405154:	460d      	mov	r5, r1
  405156:	f000 f8dd 	bl	405314 <strlen>
  40515a:	68a3      	ldr	r3, [r4, #8]
  40515c:	2701      	movs	r7, #1
  40515e:	2102      	movs	r1, #2
  405160:	899a      	ldrh	r2, [r3, #12]
  405162:	ae04      	add	r6, sp, #16
  405164:	eb00 0c07 	add.w	ip, r0, r7
  405168:	f8df e03c 	ldr.w	lr, [pc, #60]	; 4051a8 <_puts_r+0x5c>
  40516c:	9102      	str	r1, [sp, #8]
  40516e:	0491      	lsls	r1, r2, #18
  405170:	9504      	str	r5, [sp, #16]
  405172:	9005      	str	r0, [sp, #20]
  405174:	f8cd c00c 	str.w	ip, [sp, #12]
  405178:	f8cd e018 	str.w	lr, [sp, #24]
  40517c:	9707      	str	r7, [sp, #28]
  40517e:	9601      	str	r6, [sp, #4]
  405180:	d406      	bmi.n	405190 <_puts_r+0x44>
  405182:	6e59      	ldr	r1, [r3, #100]	; 0x64
  405184:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  405188:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  40518c:	819a      	strh	r2, [r3, #12]
  40518e:	6659      	str	r1, [r3, #100]	; 0x64
  405190:	4620      	mov	r0, r4
  405192:	4619      	mov	r1, r3
  405194:	aa01      	add	r2, sp, #4
  405196:	f002 fed3 	bl	407f40 <__sfvwrite_r>
  40519a:	2800      	cmp	r0, #0
  40519c:	bf14      	ite	ne
  40519e:	f04f 30ff 	movne.w	r0, #4294967295
  4051a2:	200a      	moveq	r0, #10
  4051a4:	b009      	add	sp, #36	; 0x24
  4051a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4051a8:	0040ab60 	.word	0x0040ab60

004051ac <puts>:
  4051ac:	4b02      	ldr	r3, [pc, #8]	; (4051b8 <puts+0xc>)
  4051ae:	4601      	mov	r1, r0
  4051b0:	6818      	ldr	r0, [r3, #0]
  4051b2:	f7ff bfcb 	b.w	40514c <_puts_r>
  4051b6:	bf00      	nop
  4051b8:	204004b8 	.word	0x204004b8

004051bc <setbuf>:
  4051bc:	2900      	cmp	r1, #0
  4051be:	f44f 6380 	mov.w	r3, #1024	; 0x400
  4051c2:	bf0c      	ite	eq
  4051c4:	2202      	moveq	r2, #2
  4051c6:	2200      	movne	r2, #0
  4051c8:	f000 b800 	b.w	4051cc <setvbuf>

004051cc <setvbuf>:
  4051cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4051d0:	4e3b      	ldr	r6, [pc, #236]	; (4052c0 <setvbuf+0xf4>)
  4051d2:	4604      	mov	r4, r0
  4051d4:	460d      	mov	r5, r1
  4051d6:	4690      	mov	r8, r2
  4051d8:	6837      	ldr	r7, [r6, #0]
  4051da:	461e      	mov	r6, r3
  4051dc:	b117      	cbz	r7, 4051e4 <setvbuf+0x18>
  4051de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
  4051e0:	2b00      	cmp	r3, #0
  4051e2:	d03f      	beq.n	405264 <setvbuf+0x98>
  4051e4:	f1b8 0f02 	cmp.w	r8, #2
  4051e8:	d832      	bhi.n	405250 <setvbuf+0x84>
  4051ea:	ea5f 79d6 	movs.w	r9, r6, lsr #31
  4051ee:	d12f      	bne.n	405250 <setvbuf+0x84>
  4051f0:	4621      	mov	r1, r4
  4051f2:	4638      	mov	r0, r7
  4051f4:	f002 fcc4 	bl	407b80 <_fflush_r>
  4051f8:	89a1      	ldrh	r1, [r4, #12]
  4051fa:	f8c4 9004 	str.w	r9, [r4, #4]
  4051fe:	060b      	lsls	r3, r1, #24
  405200:	f8c4 9018 	str.w	r9, [r4, #24]
  405204:	d428      	bmi.n	405258 <setvbuf+0x8c>
  405206:	f021 0183 	bic.w	r1, r1, #131	; 0x83
  40520a:	f1b8 0f02 	cmp.w	r8, #2
  40520e:	b289      	uxth	r1, r1
  405210:	81a1      	strh	r1, [r4, #12]
  405212:	d02b      	beq.n	40526c <setvbuf+0xa0>
  405214:	2d00      	cmp	r5, #0
  405216:	d037      	beq.n	405288 <setvbuf+0xbc>
  405218:	f1b8 0f01 	cmp.w	r8, #1
  40521c:	d012      	beq.n	405244 <setvbuf+0x78>
  40521e:	b289      	uxth	r1, r1
  405220:	4b28      	ldr	r3, [pc, #160]	; (4052c4 <setvbuf+0xf8>)
  405222:	f001 0008 	and.w	r0, r1, #8
  405226:	63fb      	str	r3, [r7, #60]	; 0x3c
  405228:	6025      	str	r5, [r4, #0]
  40522a:	b280      	uxth	r0, r0
  40522c:	6125      	str	r5, [r4, #16]
  40522e:	6166      	str	r6, [r4, #20]
  405230:	b180      	cbz	r0, 405254 <setvbuf+0x88>
  405232:	f011 0f03 	tst.w	r1, #3
  405236:	f04f 0000 	mov.w	r0, #0
  40523a:	bf18      	it	ne
  40523c:	4606      	movne	r6, r0
  40523e:	60a6      	str	r6, [r4, #8]
  405240:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  405244:	f041 0101 	orr.w	r1, r1, #1
  405248:	4273      	negs	r3, r6
  40524a:	81a1      	strh	r1, [r4, #12]
  40524c:	61a3      	str	r3, [r4, #24]
  40524e:	e7e6      	b.n	40521e <setvbuf+0x52>
  405250:	f04f 30ff 	mov.w	r0, #4294967295
  405254:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  405258:	6921      	ldr	r1, [r4, #16]
  40525a:	4638      	mov	r0, r7
  40525c:	f002 fd98 	bl	407d90 <_free_r>
  405260:	89a1      	ldrh	r1, [r4, #12]
  405262:	e7d0      	b.n	405206 <setvbuf+0x3a>
  405264:	4638      	mov	r0, r7
  405266:	f002 fd25 	bl	407cb4 <__sinit>
  40526a:	e7bb      	b.n	4051e4 <setvbuf+0x18>
  40526c:	2000      	movs	r0, #0
  40526e:	f104 0343 	add.w	r3, r4, #67	; 0x43
  405272:	f041 0102 	orr.w	r1, r1, #2
  405276:	2500      	movs	r5, #0
  405278:	2201      	movs	r2, #1
  40527a:	81a1      	strh	r1, [r4, #12]
  40527c:	60a5      	str	r5, [r4, #8]
  40527e:	6023      	str	r3, [r4, #0]
  405280:	6123      	str	r3, [r4, #16]
  405282:	6162      	str	r2, [r4, #20]
  405284:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  405288:	2e00      	cmp	r6, #0
  40528a:	bf08      	it	eq
  40528c:	f44f 6680 	moveq.w	r6, #1024	; 0x400
  405290:	4630      	mov	r0, r6
  405292:	f003 f885 	bl	4083a0 <malloc>
  405296:	4605      	mov	r5, r0
  405298:	b128      	cbz	r0, 4052a6 <setvbuf+0xda>
  40529a:	89a1      	ldrh	r1, [r4, #12]
  40529c:	f041 0180 	orr.w	r1, r1, #128	; 0x80
  4052a0:	b289      	uxth	r1, r1
  4052a2:	81a1      	strh	r1, [r4, #12]
  4052a4:	e7b8      	b.n	405218 <setvbuf+0x4c>
  4052a6:	f44f 6080 	mov.w	r0, #1024	; 0x400
  4052aa:	f003 f879 	bl	4083a0 <malloc>
  4052ae:	4605      	mov	r5, r0
  4052b0:	b918      	cbnz	r0, 4052ba <setvbuf+0xee>
  4052b2:	89a1      	ldrh	r1, [r4, #12]
  4052b4:	f04f 30ff 	mov.w	r0, #4294967295
  4052b8:	e7d9      	b.n	40526e <setvbuf+0xa2>
  4052ba:	f44f 6680 	mov.w	r6, #1024	; 0x400
  4052be:	e7ec      	b.n	40529a <setvbuf+0xce>
  4052c0:	204004b8 	.word	0x204004b8
  4052c4:	00407bad 	.word	0x00407bad

004052c8 <sprintf>:
  4052c8:	b40e      	push	{r1, r2, r3}
  4052ca:	b5f0      	push	{r4, r5, r6, r7, lr}
  4052cc:	b09c      	sub	sp, #112	; 0x70
  4052ce:	4b10      	ldr	r3, [pc, #64]	; (405310 <sprintf+0x48>)
  4052d0:	4606      	mov	r6, r0
  4052d2:	f44f 7e02 	mov.w	lr, #520	; 0x208
  4052d6:	ac21      	add	r4, sp, #132	; 0x84
  4052d8:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
  4052dc:	f64f 77ff 	movw	r7, #65535	; 0xffff
  4052e0:	6818      	ldr	r0, [r3, #0]
  4052e2:	f854 2b04 	ldr.w	r2, [r4], #4
  4052e6:	a902      	add	r1, sp, #8
  4052e8:	9602      	str	r6, [sp, #8]
  4052ea:	4623      	mov	r3, r4
  4052ec:	9606      	str	r6, [sp, #24]
  4052ee:	9401      	str	r4, [sp, #4]
  4052f0:	f8ad e014 	strh.w	lr, [sp, #20]
  4052f4:	9504      	str	r5, [sp, #16]
  4052f6:	9507      	str	r5, [sp, #28]
  4052f8:	f8ad 7016 	strh.w	r7, [sp, #22]
  4052fc:	f000 f838 	bl	405370 <_svfprintf_r>
  405300:	9b02      	ldr	r3, [sp, #8]
  405302:	2200      	movs	r2, #0
  405304:	701a      	strb	r2, [r3, #0]
  405306:	b01c      	add	sp, #112	; 0x70
  405308:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  40530c:	b003      	add	sp, #12
  40530e:	4770      	bx	lr
  405310:	204004b8 	.word	0x204004b8

00405314 <strlen>:
  405314:	f020 0103 	bic.w	r1, r0, #3
  405318:	f010 0003 	ands.w	r0, r0, #3
  40531c:	f1c0 0000 	rsb	r0, r0, #0
  405320:	f851 3b04 	ldr.w	r3, [r1], #4
  405324:	f100 0c04 	add.w	ip, r0, #4
  405328:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
  40532c:	f06f 0200 	mvn.w	r2, #0
  405330:	bf1c      	itt	ne
  405332:	fa22 f20c 	lsrne.w	r2, r2, ip
  405336:	4313      	orrne	r3, r2
  405338:	f04f 0c01 	mov.w	ip, #1
  40533c:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
  405340:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
  405344:	eba3 020c 	sub.w	r2, r3, ip
  405348:	ea22 0203 	bic.w	r2, r2, r3
  40534c:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
  405350:	bf04      	itt	eq
  405352:	f851 3b04 	ldreq.w	r3, [r1], #4
  405356:	3004      	addeq	r0, #4
  405358:	d0f4      	beq.n	405344 <strlen+0x30>
  40535a:	f1c2 0100 	rsb	r1, r2, #0
  40535e:	ea02 0201 	and.w	r2, r2, r1
  405362:	fab2 f282 	clz	r2, r2
  405366:	f1c2 021f 	rsb	r2, r2, #31
  40536a:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  40536e:	4770      	bx	lr

00405370 <_svfprintf_r>:
  405370:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405374:	b0c1      	sub	sp, #260	; 0x104
  405376:	4689      	mov	r9, r1
  405378:	9208      	str	r2, [sp, #32]
  40537a:	930c      	str	r3, [sp, #48]	; 0x30
  40537c:	9009      	str	r0, [sp, #36]	; 0x24
  40537e:	f002 ff99 	bl	4082b4 <_localeconv_r>
  405382:	6803      	ldr	r3, [r0, #0]
  405384:	4618      	mov	r0, r3
  405386:	9316      	str	r3, [sp, #88]	; 0x58
  405388:	f7ff ffc4 	bl	405314 <strlen>
  40538c:	f8b9 300c 	ldrh.w	r3, [r9, #12]
  405390:	9017      	str	r0, [sp, #92]	; 0x5c
  405392:	061d      	lsls	r5, r3, #24
  405394:	d504      	bpl.n	4053a0 <_svfprintf_r+0x30>
  405396:	f8d9 3010 	ldr.w	r3, [r9, #16]
  40539a:	2b00      	cmp	r3, #0
  40539c:	f001 8080 	beq.w	4064a0 <_svfprintf_r+0x1130>
  4053a0:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  4053a4:	2300      	movs	r3, #0
  4053a6:	46c3      	mov	fp, r8
  4053a8:	9313      	str	r3, [sp, #76]	; 0x4c
  4053aa:	9314      	str	r3, [sp, #80]	; 0x50
  4053ac:	9312      	str	r3, [sp, #72]	; 0x48
  4053ae:	9315      	str	r3, [sp, #84]	; 0x54
  4053b0:	9319      	str	r3, [sp, #100]	; 0x64
  4053b2:	930a      	str	r3, [sp, #40]	; 0x28
  4053b4:	9325      	str	r3, [sp, #148]	; 0x94
  4053b6:	9324      	str	r3, [sp, #144]	; 0x90
  4053b8:	f8cd 808c 	str.w	r8, [sp, #140]	; 0x8c
  4053bc:	9a08      	ldr	r2, [sp, #32]
  4053be:	7813      	ldrb	r3, [r2, #0]
  4053c0:	2b25      	cmp	r3, #37	; 0x25
  4053c2:	f000 80a6 	beq.w	405512 <_svfprintf_r+0x1a2>
  4053c6:	b90b      	cbnz	r3, 4053cc <_svfprintf_r+0x5c>
  4053c8:	e0a3      	b.n	405512 <_svfprintf_r+0x1a2>
  4053ca:	b11b      	cbz	r3, 4053d4 <_svfprintf_r+0x64>
  4053cc:	f812 3f01 	ldrb.w	r3, [r2, #1]!
  4053d0:	2b25      	cmp	r3, #37	; 0x25
  4053d2:	d1fa      	bne.n	4053ca <_svfprintf_r+0x5a>
  4053d4:	9908      	ldr	r1, [sp, #32]
  4053d6:	4614      	mov	r4, r2
  4053d8:	1a55      	subs	r5, r2, r1
  4053da:	d010      	beq.n	4053fe <_svfprintf_r+0x8e>
  4053dc:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4053de:	9a25      	ldr	r2, [sp, #148]	; 0x94
  4053e0:	3301      	adds	r3, #1
  4053e2:	f8cb 1000 	str.w	r1, [fp]
  4053e6:	442a      	add	r2, r5
  4053e8:	f8cb 5004 	str.w	r5, [fp, #4]
  4053ec:	2b07      	cmp	r3, #7
  4053ee:	9324      	str	r3, [sp, #144]	; 0x90
  4053f0:	9225      	str	r2, [sp, #148]	; 0x94
  4053f2:	dc73      	bgt.n	4054dc <_svfprintf_r+0x16c>
  4053f4:	f10b 0b08 	add.w	fp, fp, #8
  4053f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4053fa:	442b      	add	r3, r5
  4053fc:	930a      	str	r3, [sp, #40]	; 0x28
  4053fe:	7823      	ldrb	r3, [r4, #0]
  405400:	2b00      	cmp	r3, #0
  405402:	d073      	beq.n	4054ec <_svfprintf_r+0x17c>
  405404:	2300      	movs	r3, #0
  405406:	f04f 3cff 	mov.w	ip, #4294967295
  40540a:	1c61      	adds	r1, r4, #1
  40540c:	7866      	ldrb	r6, [r4, #1]
  40540e:	461a      	mov	r2, r3
  405410:	4664      	mov	r4, ip
  405412:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  405416:	930b      	str	r3, [sp, #44]	; 0x2c
  405418:	9306      	str	r3, [sp, #24]
  40541a:	1c4b      	adds	r3, r1, #1
  40541c:	f1a6 0120 	sub.w	r1, r6, #32
  405420:	2958      	cmp	r1, #88	; 0x58
  405422:	f200 83b2 	bhi.w	405b8a <_svfprintf_r+0x81a>
  405426:	e8df f011 	tbh	[pc, r1, lsl #1]
  40542a:	0319      	.short	0x0319
  40542c:	03b003b0 	.word	0x03b003b0
  405430:	03b00320 	.word	0x03b00320
  405434:	03b003b0 	.word	0x03b003b0
  405438:	03b003b0 	.word	0x03b003b0
  40543c:	024003b0 	.word	0x024003b0
  405440:	03b001fb 	.word	0x03b001fb
  405444:	01ff01e2 	.word	0x01ff01e2
  405448:	032703b0 	.word	0x032703b0
  40544c:	032e032e 	.word	0x032e032e
  405450:	032e032e 	.word	0x032e032e
  405454:	032e032e 	.word	0x032e032e
  405458:	032e032e 	.word	0x032e032e
  40545c:	03b0032e 	.word	0x03b0032e
  405460:	03b003b0 	.word	0x03b003b0
  405464:	03b003b0 	.word	0x03b003b0
  405468:	03b003b0 	.word	0x03b003b0
  40546c:	03b003b0 	.word	0x03b003b0
  405470:	033d03b0 	.word	0x033d03b0
  405474:	03b00365 	.word	0x03b00365
  405478:	03b00365 	.word	0x03b00365
  40547c:	03b003b0 	.word	0x03b003b0
  405480:	02fe03b0 	.word	0x02fe03b0
  405484:	03b003b0 	.word	0x03b003b0
  405488:	03b00293 	.word	0x03b00293
  40548c:	03b003b0 	.word	0x03b003b0
  405490:	03b003b0 	.word	0x03b003b0
  405494:	03b002b0 	.word	0x03b002b0
  405498:	02c603b0 	.word	0x02c603b0
  40549c:	03b003b0 	.word	0x03b003b0
  4054a0:	03b003b0 	.word	0x03b003b0
  4054a4:	03b003b0 	.word	0x03b003b0
  4054a8:	03b003b0 	.word	0x03b003b0
  4054ac:	03b003b0 	.word	0x03b003b0
  4054b0:	021802eb 	.word	0x021802eb
  4054b4:	03650365 	.word	0x03650365
  4054b8:	024e0365 	.word	0x024e0365
  4054bc:	03b00218 	.word	0x03b00218
  4054c0:	023603b0 	.word	0x023603b0
  4054c4:	026003b0 	.word	0x026003b0
  4054c8:	039901e9 	.word	0x039901e9
  4054cc:	03b00259 	.word	0x03b00259
  4054d0:	03b00272 	.word	0x03b00272
  4054d4:	03b00076 	.word	0x03b00076
  4054d8:	030503b0 	.word	0x030503b0
  4054dc:	9809      	ldr	r0, [sp, #36]	; 0x24
  4054de:	4649      	mov	r1, r9
  4054e0:	aa23      	add	r2, sp, #140	; 0x8c
  4054e2:	f004 f8d5 	bl	409690 <__ssprint_r>
  4054e6:	b940      	cbnz	r0, 4054fa <_svfprintf_r+0x18a>
  4054e8:	46c3      	mov	fp, r8
  4054ea:	e785      	b.n	4053f8 <_svfprintf_r+0x88>
  4054ec:	9b25      	ldr	r3, [sp, #148]	; 0x94
  4054ee:	b123      	cbz	r3, 4054fa <_svfprintf_r+0x18a>
  4054f0:	9809      	ldr	r0, [sp, #36]	; 0x24
  4054f2:	4649      	mov	r1, r9
  4054f4:	aa23      	add	r2, sp, #140	; 0x8c
  4054f6:	f004 f8cb 	bl	409690 <__ssprint_r>
  4054fa:	f8b9 300c 	ldrh.w	r3, [r9, #12]
  4054fe:	f013 0f40 	tst.w	r3, #64	; 0x40
  405502:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405504:	bf18      	it	ne
  405506:	f04f 33ff 	movne.w	r3, #4294967295
  40550a:	4618      	mov	r0, r3
  40550c:	b041      	add	sp, #260	; 0x104
  40550e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405512:	9c08      	ldr	r4, [sp, #32]
  405514:	e773      	b.n	4053fe <_svfprintf_r+0x8e>
  405516:	9308      	str	r3, [sp, #32]
  405518:	46a4      	mov	ip, r4
  40551a:	9b06      	ldr	r3, [sp, #24]
  40551c:	0698      	lsls	r0, r3, #26
  40551e:	f140 823e 	bpl.w	40599e <_svfprintf_r+0x62e>
  405522:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  405524:	2301      	movs	r3, #1
  405526:	3707      	adds	r7, #7
  405528:	f027 0207 	bic.w	r2, r7, #7
  40552c:	f102 0108 	add.w	r1, r2, #8
  405530:	e9d2 4500 	ldrd	r4, r5, [r2]
  405534:	910c      	str	r1, [sp, #48]	; 0x30
  405536:	2200      	movs	r2, #0
  405538:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
  40553c:	4617      	mov	r7, r2
  40553e:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
  405542:	f1bc 0f00 	cmp.w	ip, #0
  405546:	db03      	blt.n	405550 <_svfprintf_r+0x1e0>
  405548:	9a06      	ldr	r2, [sp, #24]
  40554a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
  40554e:	9206      	str	r2, [sp, #24]
  405550:	f1bc 0f00 	cmp.w	ip, #0
  405554:	f040 83ac 	bne.w	405cb0 <_svfprintf_r+0x940>
  405558:	ea54 0205 	orrs.w	r2, r4, r5
  40555c:	bf14      	ite	ne
  40555e:	2201      	movne	r2, #1
  405560:	2200      	moveq	r2, #0
  405562:	2a00      	cmp	r2, #0
  405564:	f040 83a4 	bne.w	405cb0 <_svfprintf_r+0x940>
  405568:	2b00      	cmp	r3, #0
  40556a:	f040 8460 	bne.w	405e2e <_svfprintf_r+0xabe>
  40556e:	9a06      	ldr	r2, [sp, #24]
  405570:	07d2      	lsls	r2, r2, #31
  405572:	f140 84fd 	bpl.w	405f70 <_svfprintf_r+0xc00>
  405576:	f50d 7a80 	add.w	sl, sp, #256	; 0x100
  40557a:	2330      	movs	r3, #48	; 0x30
  40557c:	f80a 3d41 	strb.w	r3, [sl, #-65]!
  405580:	ebca 0408 	rsb	r4, sl, r8
  405584:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
  405588:	45a4      	cmp	ip, r4
  40558a:	4663      	mov	r3, ip
  40558c:	bfb8      	it	lt
  40558e:	4623      	movlt	r3, r4
  405590:	9307      	str	r3, [sp, #28]
  405592:	2300      	movs	r3, #0
  405594:	9311      	str	r3, [sp, #68]	; 0x44
  405596:	b117      	cbz	r7, 40559e <_svfprintf_r+0x22e>
  405598:	9b07      	ldr	r3, [sp, #28]
  40559a:	3301      	adds	r3, #1
  40559c:	9307      	str	r3, [sp, #28]
  40559e:	9b06      	ldr	r3, [sp, #24]
  4055a0:	f013 0302 	ands.w	r3, r3, #2
  4055a4:	930d      	str	r3, [sp, #52]	; 0x34
  4055a6:	d002      	beq.n	4055ae <_svfprintf_r+0x23e>
  4055a8:	9b07      	ldr	r3, [sp, #28]
  4055aa:	3302      	adds	r3, #2
  4055ac:	9307      	str	r3, [sp, #28]
  4055ae:	9b06      	ldr	r3, [sp, #24]
  4055b0:	f013 0384 	ands.w	r3, r3, #132	; 0x84
  4055b4:	930e      	str	r3, [sp, #56]	; 0x38
  4055b6:	f040 8307 	bne.w	405bc8 <_svfprintf_r+0x858>
  4055ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  4055bc:	9a07      	ldr	r2, [sp, #28]
  4055be:	ebc2 0a03 	rsb	sl, r2, r3
  4055c2:	f1ba 0f00 	cmp.w	sl, #0
  4055c6:	f340 82ff 	ble.w	405bc8 <_svfprintf_r+0x858>
  4055ca:	f1ba 0f10 	cmp.w	sl, #16
  4055ce:	9925      	ldr	r1, [sp, #148]	; 0x94
  4055d0:	f340 87dd 	ble.w	40658e <_svfprintf_r+0x121e>
  4055d4:	4fbf      	ldr	r7, [pc, #764]	; (4058d4 <_svfprintf_r+0x564>)
  4055d6:	2510      	movs	r5, #16
  4055d8:	9618      	str	r6, [sp, #96]	; 0x60
  4055da:	9a24      	ldr	r2, [sp, #144]	; 0x90
  4055dc:	463e      	mov	r6, r7
  4055de:	4627      	mov	r7, r4
  4055e0:	9c09      	ldr	r4, [sp, #36]	; 0x24
  4055e2:	e004      	b.n	4055ee <_svfprintf_r+0x27e>
  4055e4:	f1aa 0a10 	sub.w	sl, sl, #16
  4055e8:	f1ba 0f10 	cmp.w	sl, #16
  4055ec:	dd1b      	ble.n	405626 <_svfprintf_r+0x2b6>
  4055ee:	3201      	adds	r2, #1
  4055f0:	3110      	adds	r1, #16
  4055f2:	f8cb 6000 	str.w	r6, [fp]
  4055f6:	f10b 0b08 	add.w	fp, fp, #8
  4055fa:	2a07      	cmp	r2, #7
  4055fc:	f84b 5c04 	str.w	r5, [fp, #-4]
  405600:	9125      	str	r1, [sp, #148]	; 0x94
  405602:	9224      	str	r2, [sp, #144]	; 0x90
  405604:	ddee      	ble.n	4055e4 <_svfprintf_r+0x274>
  405606:	4620      	mov	r0, r4
  405608:	4649      	mov	r1, r9
  40560a:	aa23      	add	r2, sp, #140	; 0x8c
  40560c:	46c3      	mov	fp, r8
  40560e:	f004 f83f 	bl	409690 <__ssprint_r>
  405612:	2800      	cmp	r0, #0
  405614:	f47f af71 	bne.w	4054fa <_svfprintf_r+0x18a>
  405618:	f1aa 0a10 	sub.w	sl, sl, #16
  40561c:	9925      	ldr	r1, [sp, #148]	; 0x94
  40561e:	9a24      	ldr	r2, [sp, #144]	; 0x90
  405620:	f1ba 0f10 	cmp.w	sl, #16
  405624:	dce3      	bgt.n	4055ee <_svfprintf_r+0x27e>
  405626:	463c      	mov	r4, r7
  405628:	4637      	mov	r7, r6
  40562a:	9e18      	ldr	r6, [sp, #96]	; 0x60
  40562c:	3201      	adds	r2, #1
  40562e:	eb0a 0c01 	add.w	ip, sl, r1
  405632:	f8cb 7000 	str.w	r7, [fp]
  405636:	2a07      	cmp	r2, #7
  405638:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
  40563c:	9224      	str	r2, [sp, #144]	; 0x90
  40563e:	f8cb a004 	str.w	sl, [fp, #4]
  405642:	f300 82b6 	bgt.w	405bb2 <_svfprintf_r+0x842>
  405646:	f10b 0b08 	add.w	fp, fp, #8
  40564a:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  40564e:	b197      	cbz	r7, 405676 <_svfprintf_r+0x306>
  405650:	9b24      	ldr	r3, [sp, #144]	; 0x90
  405652:	2201      	movs	r2, #1
  405654:	f10c 0c01 	add.w	ip, ip, #1
  405658:	f10d 016f 	add.w	r1, sp, #111	; 0x6f
  40565c:	4413      	add	r3, r2
  40565e:	f8cb 2004 	str.w	r2, [fp, #4]
  405662:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
  405666:	2b07      	cmp	r3, #7
  405668:	f8cb 1000 	str.w	r1, [fp]
  40566c:	9324      	str	r3, [sp, #144]	; 0x90
  40566e:	f300 83fb 	bgt.w	405e68 <_svfprintf_r+0xaf8>
  405672:	f10b 0b08 	add.w	fp, fp, #8
  405676:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  405678:	b18b      	cbz	r3, 40569e <_svfprintf_r+0x32e>
  40567a:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40567c:	f10c 0c02 	add.w	ip, ip, #2
  405680:	a91c      	add	r1, sp, #112	; 0x70
  405682:	2202      	movs	r2, #2
  405684:	3301      	adds	r3, #1
  405686:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
  40568a:	f8cb 1000 	str.w	r1, [fp]
  40568e:	2b07      	cmp	r3, #7
  405690:	9324      	str	r3, [sp, #144]	; 0x90
  405692:	f8cb 2004 	str.w	r2, [fp, #4]
  405696:	f300 83db 	bgt.w	405e50 <_svfprintf_r+0xae0>
  40569a:	f10b 0b08 	add.w	fp, fp, #8
  40569e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4056a0:	2b80      	cmp	r3, #128	; 0x80
  4056a2:	f000 8321 	beq.w	405ce8 <_svfprintf_r+0x978>
  4056a6:	9b10      	ldr	r3, [sp, #64]	; 0x40
  4056a8:	1b1f      	subs	r7, r3, r4
  4056aa:	2f00      	cmp	r7, #0
  4056ac:	dd37      	ble.n	40571e <_svfprintf_r+0x3ae>
  4056ae:	2f10      	cmp	r7, #16
  4056b0:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4056b2:	f340 85ec 	ble.w	40628e <_svfprintf_r+0xf1e>
  4056b6:	940d      	str	r4, [sp, #52]	; 0x34
  4056b8:	f04f 0a10 	mov.w	sl, #16
  4056bc:	4d86      	ldr	r5, [pc, #536]	; (4058d8 <_svfprintf_r+0x568>)
  4056be:	4662      	mov	r2, ip
  4056c0:	9c09      	ldr	r4, [sp, #36]	; 0x24
  4056c2:	e002      	b.n	4056ca <_svfprintf_r+0x35a>
  4056c4:	3f10      	subs	r7, #16
  4056c6:	2f10      	cmp	r7, #16
  4056c8:	dd19      	ble.n	4056fe <_svfprintf_r+0x38e>
  4056ca:	3301      	adds	r3, #1
  4056cc:	3210      	adds	r2, #16
  4056ce:	f8cb 5000 	str.w	r5, [fp]
  4056d2:	f10b 0b08 	add.w	fp, fp, #8
  4056d6:	2b07      	cmp	r3, #7
  4056d8:	f84b ac04 	str.w	sl, [fp, #-4]
  4056dc:	9225      	str	r2, [sp, #148]	; 0x94
  4056de:	9324      	str	r3, [sp, #144]	; 0x90
  4056e0:	ddf0      	ble.n	4056c4 <_svfprintf_r+0x354>
  4056e2:	4620      	mov	r0, r4
  4056e4:	4649      	mov	r1, r9
  4056e6:	aa23      	add	r2, sp, #140	; 0x8c
  4056e8:	46c3      	mov	fp, r8
  4056ea:	f003 ffd1 	bl	409690 <__ssprint_r>
  4056ee:	2800      	cmp	r0, #0
  4056f0:	f47f af03 	bne.w	4054fa <_svfprintf_r+0x18a>
  4056f4:	3f10      	subs	r7, #16
  4056f6:	9a25      	ldr	r2, [sp, #148]	; 0x94
  4056f8:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4056fa:	2f10      	cmp	r7, #16
  4056fc:	dce5      	bgt.n	4056ca <_svfprintf_r+0x35a>
  4056fe:	9c0d      	ldr	r4, [sp, #52]	; 0x34
  405700:	4694      	mov	ip, r2
  405702:	3301      	adds	r3, #1
  405704:	44bc      	add	ip, r7
  405706:	f8cb 5000 	str.w	r5, [fp]
  40570a:	2b07      	cmp	r3, #7
  40570c:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
  405710:	9324      	str	r3, [sp, #144]	; 0x90
  405712:	f8cb 7004 	str.w	r7, [fp, #4]
  405716:	f300 838f 	bgt.w	405e38 <_svfprintf_r+0xac8>
  40571a:	f10b 0b08 	add.w	fp, fp, #8
  40571e:	9b06      	ldr	r3, [sp, #24]
  405720:	05df      	lsls	r7, r3, #23
  405722:	f100 8254 	bmi.w	405bce <_svfprintf_r+0x85e>
  405726:	9b24      	ldr	r3, [sp, #144]	; 0x90
  405728:	44a4      	add	ip, r4
  40572a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40572c:	3301      	adds	r3, #1
  40572e:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
  405732:	f8cb 2000 	str.w	r2, [fp]
  405736:	2b07      	cmp	r3, #7
  405738:	f8cb 4004 	str.w	r4, [fp, #4]
  40573c:	9324      	str	r3, [sp, #144]	; 0x90
  40573e:	f300 8360 	bgt.w	405e02 <_svfprintf_r+0xa92>
  405742:	f10b 0b08 	add.w	fp, fp, #8
  405746:	9b06      	ldr	r3, [sp, #24]
  405748:	075a      	lsls	r2, r3, #29
  40574a:	d540      	bpl.n	4057ce <_svfprintf_r+0x45e>
  40574c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40574e:	9a07      	ldr	r2, [sp, #28]
  405750:	1a9c      	subs	r4, r3, r2
  405752:	2c00      	cmp	r4, #0
  405754:	dd3b      	ble.n	4057ce <_svfprintf_r+0x45e>
  405756:	2c10      	cmp	r4, #16
  405758:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40575a:	f340 876b 	ble.w	406634 <_svfprintf_r+0x12c4>
  40575e:	2510      	movs	r5, #16
  405760:	4f5c      	ldr	r7, [pc, #368]	; (4058d4 <_svfprintf_r+0x564>)
  405762:	4662      	mov	r2, ip
  405764:	9e09      	ldr	r6, [sp, #36]	; 0x24
  405766:	e002      	b.n	40576e <_svfprintf_r+0x3fe>
  405768:	3c10      	subs	r4, #16
  40576a:	2c10      	cmp	r4, #16
  40576c:	dd19      	ble.n	4057a2 <_svfprintf_r+0x432>
  40576e:	3301      	adds	r3, #1
  405770:	3210      	adds	r2, #16
  405772:	f8cb 7000 	str.w	r7, [fp]
  405776:	f10b 0b08 	add.w	fp, fp, #8
  40577a:	2b07      	cmp	r3, #7
  40577c:	f84b 5c04 	str.w	r5, [fp, #-4]
  405780:	9225      	str	r2, [sp, #148]	; 0x94
  405782:	9324      	str	r3, [sp, #144]	; 0x90
  405784:	ddf0      	ble.n	405768 <_svfprintf_r+0x3f8>
  405786:	4630      	mov	r0, r6
  405788:	4649      	mov	r1, r9
  40578a:	aa23      	add	r2, sp, #140	; 0x8c
  40578c:	46c3      	mov	fp, r8
  40578e:	f003 ff7f 	bl	409690 <__ssprint_r>
  405792:	2800      	cmp	r0, #0
  405794:	f47f aeb1 	bne.w	4054fa <_svfprintf_r+0x18a>
  405798:	3c10      	subs	r4, #16
  40579a:	9a25      	ldr	r2, [sp, #148]	; 0x94
  40579c:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40579e:	2c10      	cmp	r4, #16
  4057a0:	dce5      	bgt.n	40576e <_svfprintf_r+0x3fe>
  4057a2:	4694      	mov	ip, r2
  4057a4:	3301      	adds	r3, #1
  4057a6:	44a4      	add	ip, r4
  4057a8:	f8cb 7000 	str.w	r7, [fp]
  4057ac:	2b07      	cmp	r3, #7
  4057ae:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
  4057b2:	9324      	str	r3, [sp, #144]	; 0x90
  4057b4:	f8cb 4004 	str.w	r4, [fp, #4]
  4057b8:	dd09      	ble.n	4057ce <_svfprintf_r+0x45e>
  4057ba:	9809      	ldr	r0, [sp, #36]	; 0x24
  4057bc:	4649      	mov	r1, r9
  4057be:	aa23      	add	r2, sp, #140	; 0x8c
  4057c0:	f003 ff66 	bl	409690 <__ssprint_r>
  4057c4:	2800      	cmp	r0, #0
  4057c6:	f47f ae98 	bne.w	4054fa <_svfprintf_r+0x18a>
  4057ca:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
  4057ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4057d0:	9a07      	ldr	r2, [sp, #28]
  4057d2:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4057d4:	428a      	cmp	r2, r1
  4057d6:	bfac      	ite	ge
  4057d8:	189b      	addge	r3, r3, r2
  4057da:	185b      	addlt	r3, r3, r1
  4057dc:	930a      	str	r3, [sp, #40]	; 0x28
  4057de:	f1bc 0f00 	cmp.w	ip, #0
  4057e2:	f040 831a 	bne.w	405e1a <_svfprintf_r+0xaaa>
  4057e6:	2300      	movs	r3, #0
  4057e8:	46c3      	mov	fp, r8
  4057ea:	9324      	str	r3, [sp, #144]	; 0x90
  4057ec:	e5e6      	b.n	4053bc <_svfprintf_r+0x4c>
  4057ee:	4619      	mov	r1, r3
  4057f0:	9806      	ldr	r0, [sp, #24]
  4057f2:	781e      	ldrb	r6, [r3, #0]
  4057f4:	f040 0004 	orr.w	r0, r0, #4
  4057f8:	9006      	str	r0, [sp, #24]
  4057fa:	e60e      	b.n	40541a <_svfprintf_r+0xaa>
  4057fc:	9308      	str	r3, [sp, #32]
  4057fe:	46a4      	mov	ip, r4
  405800:	9b06      	ldr	r3, [sp, #24]
  405802:	f013 0320 	ands.w	r3, r3, #32
  405806:	f000 80ae 	beq.w	405966 <_svfprintf_r+0x5f6>
  40580a:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  40580c:	2300      	movs	r3, #0
  40580e:	3707      	adds	r7, #7
  405810:	f027 0207 	bic.w	r2, r7, #7
  405814:	f102 0108 	add.w	r1, r2, #8
  405818:	e9d2 4500 	ldrd	r4, r5, [r2]
  40581c:	910c      	str	r1, [sp, #48]	; 0x30
  40581e:	e68a      	b.n	405536 <_svfprintf_r+0x1c6>
  405820:	781e      	ldrb	r6, [r3, #0]
  405822:	4619      	mov	r1, r3
  405824:	222b      	movs	r2, #43	; 0x2b
  405826:	e5f8      	b.n	40541a <_svfprintf_r+0xaa>
  405828:	781e      	ldrb	r6, [r3, #0]
  40582a:	1c59      	adds	r1, r3, #1
  40582c:	2e2a      	cmp	r6, #42	; 0x2a
  40582e:	f001 8006 	beq.w	40683e <_svfprintf_r+0x14ce>
  405832:	f1a6 0030 	sub.w	r0, r6, #48	; 0x30
  405836:	460b      	mov	r3, r1
  405838:	2400      	movs	r4, #0
  40583a:	2809      	cmp	r0, #9
  40583c:	f63f adee 	bhi.w	40541c <_svfprintf_r+0xac>
  405840:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  405844:	f813 6b01 	ldrb.w	r6, [r3], #1
  405848:	eb00 0444 	add.w	r4, r0, r4, lsl #1
  40584c:	f1a6 0030 	sub.w	r0, r6, #48	; 0x30
  405850:	2809      	cmp	r0, #9
  405852:	d9f5      	bls.n	405840 <_svfprintf_r+0x4d0>
  405854:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
  405858:	e5e0      	b.n	40541c <_svfprintf_r+0xac>
  40585a:	9308      	str	r3, [sp, #32]
  40585c:	46a4      	mov	ip, r4
  40585e:	9b06      	ldr	r3, [sp, #24]
  405860:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
  405864:	069c      	lsls	r4, r3, #26
  405866:	f140 8129 	bpl.w	405abc <_svfprintf_r+0x74c>
  40586a:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  40586c:	3707      	adds	r7, #7
  40586e:	f027 0707 	bic.w	r7, r7, #7
  405872:	e9d7 2300 	ldrd	r2, r3, [r7]
  405876:	f107 0108 	add.w	r1, r7, #8
  40587a:	4614      	mov	r4, r2
  40587c:	461d      	mov	r5, r3
  40587e:	910c      	str	r1, [sp, #48]	; 0x30
  405880:	2a00      	cmp	r2, #0
  405882:	f173 0300 	sbcs.w	r3, r3, #0
  405886:	f2c0 812a 	blt.w	405ade <_svfprintf_r+0x76e>
  40588a:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  40588e:	2301      	movs	r3, #1
  405890:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
  405894:	e655      	b.n	405542 <_svfprintf_r+0x1d2>
  405896:	781e      	ldrb	r6, [r3, #0]
  405898:	9906      	ldr	r1, [sp, #24]
  40589a:	2e6c      	cmp	r6, #108	; 0x6c
  40589c:	f000 8557 	beq.w	40634e <_svfprintf_r+0xfde>
  4058a0:	f041 0110 	orr.w	r1, r1, #16
  4058a4:	9106      	str	r1, [sp, #24]
  4058a6:	4619      	mov	r1, r3
  4058a8:	e5b7      	b.n	40541a <_svfprintf_r+0xaa>
  4058aa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  4058ac:	6829      	ldr	r1, [r5, #0]
  4058ae:	4608      	mov	r0, r1
  4058b0:	910b      	str	r1, [sp, #44]	; 0x2c
  4058b2:	4629      	mov	r1, r5
  4058b4:	2800      	cmp	r0, #0
  4058b6:	f101 0104 	add.w	r1, r1, #4
  4058ba:	f2c0 854f 	blt.w	40635c <_svfprintf_r+0xfec>
  4058be:	910c      	str	r1, [sp, #48]	; 0x30
  4058c0:	4619      	mov	r1, r3
  4058c2:	781e      	ldrb	r6, [r3, #0]
  4058c4:	e5a9      	b.n	40541a <_svfprintf_r+0xaa>
  4058c6:	9906      	ldr	r1, [sp, #24]
  4058c8:	f041 0140 	orr.w	r1, r1, #64	; 0x40
  4058cc:	9106      	str	r1, [sp, #24]
  4058ce:	4619      	mov	r1, r3
  4058d0:	781e      	ldrb	r6, [r3, #0]
  4058d2:	e5a2      	b.n	40541a <_svfprintf_r+0xaa>
  4058d4:	0040ab74 	.word	0x0040ab74
  4058d8:	0040ab64 	.word	0x0040ab64
  4058dc:	9906      	ldr	r1, [sp, #24]
  4058de:	f041 0120 	orr.w	r1, r1, #32
  4058e2:	9106      	str	r1, [sp, #24]
  4058e4:	4619      	mov	r1, r3
  4058e6:	781e      	ldrb	r6, [r3, #0]
  4058e8:	e597      	b.n	40541a <_svfprintf_r+0xaa>
  4058ea:	9308      	str	r3, [sp, #32]
  4058ec:	9b06      	ldr	r3, [sp, #24]
  4058ee:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
  4058f2:	069e      	lsls	r6, r3, #26
  4058f4:	f140 84a4 	bpl.w	406240 <_svfprintf_r+0xed0>
  4058f8:	990a      	ldr	r1, [sp, #40]	; 0x28
  4058fa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  4058fc:	17cd      	asrs	r5, r1, #31
  4058fe:	4608      	mov	r0, r1
  405900:	6813      	ldr	r3, [r2, #0]
  405902:	3204      	adds	r2, #4
  405904:	4629      	mov	r1, r5
  405906:	920c      	str	r2, [sp, #48]	; 0x30
  405908:	e9c3 0100 	strd	r0, r1, [r3]
  40590c:	e556      	b.n	4053bc <_svfprintf_r+0x4c>
  40590e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  405910:	2500      	movs	r5, #0
  405912:	9308      	str	r3, [sp, #32]
  405914:	6813      	ldr	r3, [r2, #0]
  405916:	1d17      	adds	r7, r2, #4
  405918:	f88d 506f 	strb.w	r5, [sp, #111]	; 0x6f
  40591c:	930f      	str	r3, [sp, #60]	; 0x3c
  40591e:	2b00      	cmp	r3, #0
  405920:	f000 867a 	beq.w	406618 <_svfprintf_r+0x12a8>
  405924:	2c00      	cmp	r4, #0
  405926:	980f      	ldr	r0, [sp, #60]	; 0x3c
  405928:	f2c0 8624 	blt.w	406574 <_svfprintf_r+0x1204>
  40592c:	4629      	mov	r1, r5
  40592e:	4622      	mov	r2, r4
  405930:	f002 ffea 	bl	408908 <memchr>
  405934:	2800      	cmp	r0, #0
  405936:	f000 86df 	beq.w	4066f8 <_svfprintf_r+0x1388>
  40593a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40593c:	970c      	str	r7, [sp, #48]	; 0x30
  40593e:	1ac4      	subs	r4, r0, r3
  405940:	9510      	str	r5, [sp, #64]	; 0x40
  405942:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  405946:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
  40594a:	9511      	str	r5, [sp, #68]	; 0x44
  40594c:	9307      	str	r3, [sp, #28]
  40594e:	e622      	b.n	405596 <_svfprintf_r+0x226>
  405950:	9308      	str	r3, [sp, #32]
  405952:	46a4      	mov	ip, r4
  405954:	9b06      	ldr	r3, [sp, #24]
  405956:	f043 0310 	orr.w	r3, r3, #16
  40595a:	9306      	str	r3, [sp, #24]
  40595c:	9b06      	ldr	r3, [sp, #24]
  40595e:	f013 0320 	ands.w	r3, r3, #32
  405962:	f47f af52 	bne.w	40580a <_svfprintf_r+0x49a>
  405966:	9a06      	ldr	r2, [sp, #24]
  405968:	f012 0210 	ands.w	r2, r2, #16
  40596c:	f040 8352 	bne.w	406014 <_svfprintf_r+0xca4>
  405970:	9b06      	ldr	r3, [sp, #24]
  405972:	f013 0340 	ands.w	r3, r3, #64	; 0x40
  405976:	f000 834d 	beq.w	406014 <_svfprintf_r+0xca4>
  40597a:	990c      	ldr	r1, [sp, #48]	; 0x30
  40597c:	4613      	mov	r3, r2
  40597e:	2500      	movs	r5, #0
  405980:	460a      	mov	r2, r1
  405982:	880c      	ldrh	r4, [r1, #0]
  405984:	3204      	adds	r2, #4
  405986:	920c      	str	r2, [sp, #48]	; 0x30
  405988:	e5d5      	b.n	405536 <_svfprintf_r+0x1c6>
  40598a:	9308      	str	r3, [sp, #32]
  40598c:	46a4      	mov	ip, r4
  40598e:	9b06      	ldr	r3, [sp, #24]
  405990:	f043 0310 	orr.w	r3, r3, #16
  405994:	9306      	str	r3, [sp, #24]
  405996:	9b06      	ldr	r3, [sp, #24]
  405998:	0698      	lsls	r0, r3, #26
  40599a:	f53f adc2 	bmi.w	405522 <_svfprintf_r+0x1b2>
  40599e:	9b06      	ldr	r3, [sp, #24]
  4059a0:	06d9      	lsls	r1, r3, #27
  4059a2:	f140 8432 	bpl.w	40620a <_svfprintf_r+0xe9a>
  4059a6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  4059a8:	4613      	mov	r3, r2
  4059aa:	3204      	adds	r2, #4
  4059ac:	681c      	ldr	r4, [r3, #0]
  4059ae:	2500      	movs	r5, #0
  4059b0:	2301      	movs	r3, #1
  4059b2:	920c      	str	r2, [sp, #48]	; 0x30
  4059b4:	e5bf      	b.n	405536 <_svfprintf_r+0x1c6>
  4059b6:	9308      	str	r3, [sp, #32]
  4059b8:	46a4      	mov	ip, r4
  4059ba:	4bb7      	ldr	r3, [pc, #732]	; (405c98 <_svfprintf_r+0x928>)
  4059bc:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
  4059c0:	9315      	str	r3, [sp, #84]	; 0x54
  4059c2:	9b06      	ldr	r3, [sp, #24]
  4059c4:	069a      	lsls	r2, r3, #26
  4059c6:	d53e      	bpl.n	405a46 <_svfprintf_r+0x6d6>
  4059c8:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  4059ca:	3707      	adds	r7, #7
  4059cc:	f027 0307 	bic.w	r3, r7, #7
  4059d0:	f103 0208 	add.w	r2, r3, #8
  4059d4:	e9d3 4500 	ldrd	r4, r5, [r3]
  4059d8:	920c      	str	r2, [sp, #48]	; 0x30
  4059da:	9b06      	ldr	r3, [sp, #24]
  4059dc:	07df      	lsls	r7, r3, #31
  4059de:	f140 8268 	bpl.w	405eb2 <_svfprintf_r+0xb42>
  4059e2:	ea54 0305 	orrs.w	r3, r4, r5
  4059e6:	f000 8264 	beq.w	405eb2 <_svfprintf_r+0xb42>
  4059ea:	9b06      	ldr	r3, [sp, #24]
  4059ec:	2230      	movs	r2, #48	; 0x30
  4059ee:	f88d 6071 	strb.w	r6, [sp, #113]	; 0x71
  4059f2:	f043 0302 	orr.w	r3, r3, #2
  4059f6:	f88d 2070 	strb.w	r2, [sp, #112]	; 0x70
  4059fa:	9306      	str	r3, [sp, #24]
  4059fc:	2302      	movs	r3, #2
  4059fe:	e59a      	b.n	405536 <_svfprintf_r+0x1c6>
  405a00:	990c      	ldr	r1, [sp, #48]	; 0x30
  405a02:	2001      	movs	r0, #1
  405a04:	9308      	str	r3, [sp, #32]
  405a06:	2300      	movs	r3, #0
  405a08:	680a      	ldr	r2, [r1, #0]
  405a0a:	3104      	adds	r1, #4
  405a0c:	461f      	mov	r7, r3
  405a0e:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  405a12:	9310      	str	r3, [sp, #64]	; 0x40
  405a14:	4604      	mov	r4, r0
  405a16:	9311      	str	r3, [sp, #68]	; 0x44
  405a18:	ab26      	add	r3, sp, #152	; 0x98
  405a1a:	9007      	str	r0, [sp, #28]
  405a1c:	910c      	str	r1, [sp, #48]	; 0x30
  405a1e:	f88d 2098 	strb.w	r2, [sp, #152]	; 0x98
  405a22:	930f      	str	r3, [sp, #60]	; 0x3c
  405a24:	e5bb      	b.n	40559e <_svfprintf_r+0x22e>
  405a26:	9906      	ldr	r1, [sp, #24]
  405a28:	f041 0108 	orr.w	r1, r1, #8
  405a2c:	9106      	str	r1, [sp, #24]
  405a2e:	4619      	mov	r1, r3
  405a30:	781e      	ldrb	r6, [r3, #0]
  405a32:	e4f2      	b.n	40541a <_svfprintf_r+0xaa>
  405a34:	9308      	str	r3, [sp, #32]
  405a36:	46a4      	mov	ip, r4
  405a38:	4b98      	ldr	r3, [pc, #608]	; (405c9c <_svfprintf_r+0x92c>)
  405a3a:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
  405a3e:	9315      	str	r3, [sp, #84]	; 0x54
  405a40:	9b06      	ldr	r3, [sp, #24]
  405a42:	069a      	lsls	r2, r3, #26
  405a44:	d4c0      	bmi.n	4059c8 <_svfprintf_r+0x658>
  405a46:	9b06      	ldr	r3, [sp, #24]
  405a48:	06db      	lsls	r3, r3, #27
  405a4a:	f140 83ec 	bpl.w	406226 <_svfprintf_r+0xeb6>
  405a4e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  405a50:	2500      	movs	r5, #0
  405a52:	4613      	mov	r3, r2
  405a54:	6814      	ldr	r4, [r2, #0]
  405a56:	3304      	adds	r3, #4
  405a58:	930c      	str	r3, [sp, #48]	; 0x30
  405a5a:	e7be      	b.n	4059da <_svfprintf_r+0x66a>
  405a5c:	781e      	ldrb	r6, [r3, #0]
  405a5e:	4619      	mov	r1, r3
  405a60:	2a00      	cmp	r2, #0
  405a62:	f47f acda 	bne.w	40541a <_svfprintf_r+0xaa>
  405a66:	2220      	movs	r2, #32
  405a68:	e4d7      	b.n	40541a <_svfprintf_r+0xaa>
  405a6a:	9906      	ldr	r1, [sp, #24]
  405a6c:	f041 0101 	orr.w	r1, r1, #1
  405a70:	9106      	str	r1, [sp, #24]
  405a72:	4619      	mov	r1, r3
  405a74:	781e      	ldrb	r6, [r3, #0]
  405a76:	e4d0      	b.n	40541a <_svfprintf_r+0xaa>
  405a78:	9906      	ldr	r1, [sp, #24]
  405a7a:	f041 0180 	orr.w	r1, r1, #128	; 0x80
  405a7e:	9106      	str	r1, [sp, #24]
  405a80:	4619      	mov	r1, r3
  405a82:	781e      	ldrb	r6, [r3, #0]
  405a84:	e4c9      	b.n	40541a <_svfprintf_r+0xaa>
  405a86:	f1a6 0030 	sub.w	r0, r6, #48	; 0x30
  405a8a:	2100      	movs	r1, #0
  405a8c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
  405a90:	f813 6b01 	ldrb.w	r6, [r3], #1
  405a94:	eb00 0141 	add.w	r1, r0, r1, lsl #1
  405a98:	f1a6 0030 	sub.w	r0, r6, #48	; 0x30
  405a9c:	2809      	cmp	r0, #9
  405a9e:	d9f5      	bls.n	405a8c <_svfprintf_r+0x71c>
  405aa0:	910b      	str	r1, [sp, #44]	; 0x2c
  405aa2:	e4bb      	b.n	40541c <_svfprintf_r+0xac>
  405aa4:	9308      	str	r3, [sp, #32]
  405aa6:	46a4      	mov	ip, r4
  405aa8:	9b06      	ldr	r3, [sp, #24]
  405aaa:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
  405aae:	f043 0310 	orr.w	r3, r3, #16
  405ab2:	9306      	str	r3, [sp, #24]
  405ab4:	9b06      	ldr	r3, [sp, #24]
  405ab6:	069c      	lsls	r4, r3, #26
  405ab8:	f53f aed7 	bmi.w	40586a <_svfprintf_r+0x4fa>
  405abc:	9b06      	ldr	r3, [sp, #24]
  405abe:	06d8      	lsls	r0, r3, #27
  405ac0:	f140 83d5 	bpl.w	40626e <_svfprintf_r+0xefe>
  405ac4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  405ac6:	4613      	mov	r3, r2
  405ac8:	681c      	ldr	r4, [r3, #0]
  405aca:	3304      	adds	r3, #4
  405acc:	17e5      	asrs	r5, r4, #31
  405ace:	4622      	mov	r2, r4
  405ad0:	930c      	str	r3, [sp, #48]	; 0x30
  405ad2:	2a00      	cmp	r2, #0
  405ad4:	462b      	mov	r3, r5
  405ad6:	f173 0300 	sbcs.w	r3, r3, #0
  405ada:	f6bf aed6 	bge.w	40588a <_svfprintf_r+0x51a>
  405ade:	272d      	movs	r7, #45	; 0x2d
  405ae0:	4264      	negs	r4, r4
  405ae2:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
  405ae6:	f04f 0301 	mov.w	r3, #1
  405aea:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
  405aee:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
  405af2:	e526      	b.n	405542 <_svfprintf_r+0x1d2>
  405af4:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  405af6:	9308      	str	r3, [sp, #32]
  405af8:	3707      	adds	r7, #7
  405afa:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
  405afe:	f027 0307 	bic.w	r3, r7, #7
  405b02:	f103 0208 	add.w	r2, r3, #8
  405b06:	920c      	str	r2, [sp, #48]	; 0x30
  405b08:	681a      	ldr	r2, [r3, #0]
  405b0a:	9213      	str	r2, [sp, #76]	; 0x4c
  405b0c:	685b      	ldr	r3, [r3, #4]
  405b0e:	9813      	ldr	r0, [sp, #76]	; 0x4c
  405b10:	9314      	str	r3, [sp, #80]	; 0x50
  405b12:	9914      	ldr	r1, [sp, #80]	; 0x50
  405b14:	9407      	str	r4, [sp, #28]
  405b16:	f003 fd43 	bl	4095a0 <__fpclassifyd>
  405b1a:	2801      	cmp	r0, #1
  405b1c:	f8dd c01c 	ldr.w	ip, [sp, #28]
  405b20:	f040 8355 	bne.w	4061ce <_svfprintf_r+0xe5e>
  405b24:	9813      	ldr	r0, [sp, #76]	; 0x4c
  405b26:	2200      	movs	r2, #0
  405b28:	2300      	movs	r3, #0
  405b2a:	9914      	ldr	r1, [sp, #80]	; 0x50
  405b2c:	f004 fb9c 	bl	40a268 <__aeabi_dcmplt>
  405b30:	2800      	cmp	r0, #0
  405b32:	f040 8582 	bne.w	40663a <_svfprintf_r+0x12ca>
  405b36:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  405b3a:	2303      	movs	r3, #3
  405b3c:	9806      	ldr	r0, [sp, #24]
  405b3e:	4a58      	ldr	r2, [pc, #352]	; (405ca0 <_svfprintf_r+0x930>)
  405b40:	2100      	movs	r1, #0
  405b42:	461c      	mov	r4, r3
  405b44:	9307      	str	r3, [sp, #28]
  405b46:	4b57      	ldr	r3, [pc, #348]	; (405ca4 <_svfprintf_r+0x934>)
  405b48:	f020 0080 	bic.w	r0, r0, #128	; 0x80
  405b4c:	9110      	str	r1, [sp, #64]	; 0x40
  405b4e:	2e47      	cmp	r6, #71	; 0x47
  405b50:	bfd8      	it	le
  405b52:	461a      	movle	r2, r3
  405b54:	9006      	str	r0, [sp, #24]
  405b56:	9111      	str	r1, [sp, #68]	; 0x44
  405b58:	920f      	str	r2, [sp, #60]	; 0x3c
  405b5a:	e51c      	b.n	405596 <_svfprintf_r+0x226>
  405b5c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  405b5e:	2230      	movs	r2, #48	; 0x30
  405b60:	9806      	ldr	r0, [sp, #24]
  405b62:	46a4      	mov	ip, r4
  405b64:	4629      	mov	r1, r5
  405b66:	9308      	str	r3, [sp, #32]
  405b68:	2378      	movs	r3, #120	; 0x78
  405b6a:	f040 0002 	orr.w	r0, r0, #2
  405b6e:	3104      	adds	r1, #4
  405b70:	682c      	ldr	r4, [r5, #0]
  405b72:	461e      	mov	r6, r3
  405b74:	f88d 3071 	strb.w	r3, [sp, #113]	; 0x71
  405b78:	4b48      	ldr	r3, [pc, #288]	; (405c9c <_svfprintf_r+0x92c>)
  405b7a:	2500      	movs	r5, #0
  405b7c:	9006      	str	r0, [sp, #24]
  405b7e:	9315      	str	r3, [sp, #84]	; 0x54
  405b80:	2302      	movs	r3, #2
  405b82:	910c      	str	r1, [sp, #48]	; 0x30
  405b84:	f88d 2070 	strb.w	r2, [sp, #112]	; 0x70
  405b88:	e4d5      	b.n	405536 <_svfprintf_r+0x1c6>
  405b8a:	9308      	str	r3, [sp, #32]
  405b8c:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
  405b90:	2e00      	cmp	r6, #0
  405b92:	f43f acab 	beq.w	4054ec <_svfprintf_r+0x17c>
  405b96:	2300      	movs	r3, #0
  405b98:	2201      	movs	r2, #1
  405b9a:	a926      	add	r1, sp, #152	; 0x98
  405b9c:	f88d 6098 	strb.w	r6, [sp, #152]	; 0x98
  405ba0:	9207      	str	r2, [sp, #28]
  405ba2:	461f      	mov	r7, r3
  405ba4:	910f      	str	r1, [sp, #60]	; 0x3c
  405ba6:	4614      	mov	r4, r2
  405ba8:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  405bac:	9310      	str	r3, [sp, #64]	; 0x40
  405bae:	9311      	str	r3, [sp, #68]	; 0x44
  405bb0:	e4f5      	b.n	40559e <_svfprintf_r+0x22e>
  405bb2:	9809      	ldr	r0, [sp, #36]	; 0x24
  405bb4:	4649      	mov	r1, r9
  405bb6:	aa23      	add	r2, sp, #140	; 0x8c
  405bb8:	f003 fd6a 	bl	409690 <__ssprint_r>
  405bbc:	2800      	cmp	r0, #0
  405bbe:	f47f ac9c 	bne.w	4054fa <_svfprintf_r+0x18a>
  405bc2:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  405bc6:	46c3      	mov	fp, r8
  405bc8:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
  405bcc:	e53f      	b.n	40564e <_svfprintf_r+0x2de>
  405bce:	2e65      	cmp	r6, #101	; 0x65
  405bd0:	f340 80c9 	ble.w	405d66 <_svfprintf_r+0x9f6>
  405bd4:	9813      	ldr	r0, [sp, #76]	; 0x4c
  405bd6:	2200      	movs	r2, #0
  405bd8:	2300      	movs	r3, #0
  405bda:	9914      	ldr	r1, [sp, #80]	; 0x50
  405bdc:	f8cd c034 	str.w	ip, [sp, #52]	; 0x34
  405be0:	f004 fb38 	bl	40a254 <__aeabi_dcmpeq>
  405be4:	f8dd c034 	ldr.w	ip, [sp, #52]	; 0x34
  405be8:	2800      	cmp	r0, #0
  405bea:	f000 8165 	beq.w	405eb8 <_svfprintf_r+0xb48>
  405bee:	9b24      	ldr	r3, [sp, #144]	; 0x90
  405bf0:	2201      	movs	r2, #1
  405bf2:	f10c 0c01 	add.w	ip, ip, #1
  405bf6:	492c      	ldr	r1, [pc, #176]	; (405ca8 <_svfprintf_r+0x938>)
  405bf8:	4413      	add	r3, r2
  405bfa:	f8cb 2004 	str.w	r2, [fp, #4]
  405bfe:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
  405c02:	2b07      	cmp	r3, #7
  405c04:	f8cb 1000 	str.w	r1, [fp]
  405c08:	9324      	str	r3, [sp, #144]	; 0x90
  405c0a:	f300 8343 	bgt.w	406294 <_svfprintf_r+0xf24>
  405c0e:	f10b 0b08 	add.w	fp, fp, #8
  405c12:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  405c14:	9a12      	ldr	r2, [sp, #72]	; 0x48
  405c16:	4293      	cmp	r3, r2
  405c18:	db03      	blt.n	405c22 <_svfprintf_r+0x8b2>
  405c1a:	9b06      	ldr	r3, [sp, #24]
  405c1c:	07de      	lsls	r6, r3, #31
  405c1e:	f57f ad92 	bpl.w	405746 <_svfprintf_r+0x3d6>
  405c22:	9b24      	ldr	r3, [sp, #144]	; 0x90
  405c24:	9917      	ldr	r1, [sp, #92]	; 0x5c
  405c26:	3301      	adds	r3, #1
  405c28:	9a16      	ldr	r2, [sp, #88]	; 0x58
  405c2a:	448c      	add	ip, r1
  405c2c:	f8cb 1004 	str.w	r1, [fp, #4]
  405c30:	2b07      	cmp	r3, #7
  405c32:	f8cb 2000 	str.w	r2, [fp]
  405c36:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
  405c3a:	9324      	str	r3, [sp, #144]	; 0x90
  405c3c:	f300 841d 	bgt.w	40647a <_svfprintf_r+0x110a>
  405c40:	f10b 0b08 	add.w	fp, fp, #8
  405c44:	9b12      	ldr	r3, [sp, #72]	; 0x48
  405c46:	1e5c      	subs	r4, r3, #1
  405c48:	2c00      	cmp	r4, #0
  405c4a:	f77f ad7c 	ble.w	405746 <_svfprintf_r+0x3d6>
  405c4e:	2c10      	cmp	r4, #16
  405c50:	9b24      	ldr	r3, [sp, #144]	; 0x90
  405c52:	f340 85bc 	ble.w	4067ce <_svfprintf_r+0x145e>
  405c56:	2610      	movs	r6, #16
  405c58:	4d14      	ldr	r5, [pc, #80]	; (405cac <_svfprintf_r+0x93c>)
  405c5a:	4662      	mov	r2, ip
  405c5c:	9f09      	ldr	r7, [sp, #36]	; 0x24
  405c5e:	e003      	b.n	405c68 <_svfprintf_r+0x8f8>
  405c60:	3c10      	subs	r4, #16
  405c62:	2c10      	cmp	r4, #16
  405c64:	f340 81c8 	ble.w	405ff8 <_svfprintf_r+0xc88>
  405c68:	3301      	adds	r3, #1
  405c6a:	3210      	adds	r2, #16
  405c6c:	f8cb 5000 	str.w	r5, [fp]
  405c70:	f10b 0b08 	add.w	fp, fp, #8
  405c74:	2b07      	cmp	r3, #7
  405c76:	f84b 6c04 	str.w	r6, [fp, #-4]
  405c7a:	9225      	str	r2, [sp, #148]	; 0x94
  405c7c:	9324      	str	r3, [sp, #144]	; 0x90
  405c7e:	ddef      	ble.n	405c60 <_svfprintf_r+0x8f0>
  405c80:	4638      	mov	r0, r7
  405c82:	4649      	mov	r1, r9
  405c84:	aa23      	add	r2, sp, #140	; 0x8c
  405c86:	46c3      	mov	fp, r8
  405c88:	f003 fd02 	bl	409690 <__ssprint_r>
  405c8c:	2800      	cmp	r0, #0
  405c8e:	f47f ac34 	bne.w	4054fa <_svfprintf_r+0x18a>
  405c92:	9a25      	ldr	r2, [sp, #148]	; 0x94
  405c94:	9b24      	ldr	r3, [sp, #144]	; 0x90
  405c96:	e7e3      	b.n	405c60 <_svfprintf_r+0x8f0>
  405c98:	0040ab94 	.word	0x0040ab94
  405c9c:	0040aba8 	.word	0x0040aba8
  405ca0:	0040ab88 	.word	0x0040ab88
  405ca4:	0040ab84 	.word	0x0040ab84
  405ca8:	0040abc4 	.word	0x0040abc4
  405cac:	0040ab64 	.word	0x0040ab64
  405cb0:	2b01      	cmp	r3, #1
  405cb2:	f000 814d 	beq.w	405f50 <_svfprintf_r+0xbe0>
  405cb6:	2b02      	cmp	r3, #2
  405cb8:	f040 80e3 	bne.w	405e82 <_svfprintf_r+0xb12>
  405cbc:	46c2      	mov	sl, r8
  405cbe:	9815      	ldr	r0, [sp, #84]	; 0x54
  405cc0:	0923      	lsrs	r3, r4, #4
  405cc2:	f004 010f 	and.w	r1, r4, #15
  405cc6:	092a      	lsrs	r2, r5, #4
  405cc8:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
  405ccc:	4615      	mov	r5, r2
  405cce:	461c      	mov	r4, r3
  405cd0:	5c43      	ldrb	r3, [r0, r1]
  405cd2:	f80a 3d01 	strb.w	r3, [sl, #-1]!
  405cd6:	ea54 0305 	orrs.w	r3, r4, r5
  405cda:	d1f1      	bne.n	405cc0 <_svfprintf_r+0x950>
  405cdc:	4653      	mov	r3, sl
  405cde:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
  405ce2:	ebc3 0408 	rsb	r4, r3, r8
  405ce6:	e44f      	b.n	405588 <_svfprintf_r+0x218>
  405ce8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  405cea:	9a07      	ldr	r2, [sp, #28]
  405cec:	1a9f      	subs	r7, r3, r2
  405cee:	2f00      	cmp	r7, #0
  405cf0:	f77f acd9 	ble.w	4056a6 <_svfprintf_r+0x336>
  405cf4:	2f10      	cmp	r7, #16
  405cf6:	9b24      	ldr	r3, [sp, #144]	; 0x90
  405cf8:	f340 84f9 	ble.w	4066ee <_svfprintf_r+0x137e>
  405cfc:	940d      	str	r4, [sp, #52]	; 0x34
  405cfe:	f04f 0a10 	mov.w	sl, #16
  405d02:	4dc8      	ldr	r5, [pc, #800]	; (406024 <_svfprintf_r+0xcb4>)
  405d04:	4662      	mov	r2, ip
  405d06:	9c09      	ldr	r4, [sp, #36]	; 0x24
  405d08:	e002      	b.n	405d10 <_svfprintf_r+0x9a0>
  405d0a:	3f10      	subs	r7, #16
  405d0c:	2f10      	cmp	r7, #16
  405d0e:	dd19      	ble.n	405d44 <_svfprintf_r+0x9d4>
  405d10:	3301      	adds	r3, #1
  405d12:	3210      	adds	r2, #16
  405d14:	f8cb 5000 	str.w	r5, [fp]
  405d18:	f10b 0b08 	add.w	fp, fp, #8
  405d1c:	2b07      	cmp	r3, #7
  405d1e:	f84b ac04 	str.w	sl, [fp, #-4]
  405d22:	9225      	str	r2, [sp, #148]	; 0x94
  405d24:	9324      	str	r3, [sp, #144]	; 0x90
  405d26:	ddf0      	ble.n	405d0a <_svfprintf_r+0x99a>
  405d28:	4620      	mov	r0, r4
  405d2a:	4649      	mov	r1, r9
  405d2c:	aa23      	add	r2, sp, #140	; 0x8c
  405d2e:	46c3      	mov	fp, r8
  405d30:	f003 fcae 	bl	409690 <__ssprint_r>
  405d34:	2800      	cmp	r0, #0
  405d36:	f47f abe0 	bne.w	4054fa <_svfprintf_r+0x18a>
  405d3a:	3f10      	subs	r7, #16
  405d3c:	9a25      	ldr	r2, [sp, #148]	; 0x94
  405d3e:	9b24      	ldr	r3, [sp, #144]	; 0x90
  405d40:	2f10      	cmp	r7, #16
  405d42:	dce5      	bgt.n	405d10 <_svfprintf_r+0x9a0>
  405d44:	9c0d      	ldr	r4, [sp, #52]	; 0x34
  405d46:	4694      	mov	ip, r2
  405d48:	3301      	adds	r3, #1
  405d4a:	44bc      	add	ip, r7
  405d4c:	f8cb 5000 	str.w	r5, [fp]
  405d50:	2b07      	cmp	r3, #7
  405d52:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
  405d56:	9324      	str	r3, [sp, #144]	; 0x90
  405d58:	f8cb 7004 	str.w	r7, [fp, #4]
  405d5c:	f300 81fc 	bgt.w	406158 <_svfprintf_r+0xde8>
  405d60:	f10b 0b08 	add.w	fp, fp, #8
  405d64:	e49f      	b.n	4056a6 <_svfprintf_r+0x336>
  405d66:	9b12      	ldr	r3, [sp, #72]	; 0x48
  405d68:	f10c 0601 	add.w	r6, ip, #1
  405d6c:	9c24      	ldr	r4, [sp, #144]	; 0x90
  405d6e:	2b01      	cmp	r3, #1
  405d70:	f340 81c9 	ble.w	406106 <_svfprintf_r+0xd96>
  405d74:	2301      	movs	r3, #1
  405d76:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  405d78:	9625      	str	r6, [sp, #148]	; 0x94
  405d7a:	441c      	add	r4, r3
  405d7c:	f8cb 2000 	str.w	r2, [fp]
  405d80:	f8cb 3004 	str.w	r3, [fp, #4]
  405d84:	2c07      	cmp	r4, #7
  405d86:	9424      	str	r4, [sp, #144]	; 0x90
  405d88:	f300 81da 	bgt.w	406140 <_svfprintf_r+0xdd0>
  405d8c:	f10b 0b08 	add.w	fp, fp, #8
  405d90:	9a17      	ldr	r2, [sp, #92]	; 0x5c
  405d92:	3401      	adds	r4, #1
  405d94:	9b16      	ldr	r3, [sp, #88]	; 0x58
  405d96:	4416      	add	r6, r2
  405d98:	2c07      	cmp	r4, #7
  405d9a:	f8cb 3000 	str.w	r3, [fp]
  405d9e:	9625      	str	r6, [sp, #148]	; 0x94
  405da0:	9424      	str	r4, [sp, #144]	; 0x90
  405da2:	f8cb 2004 	str.w	r2, [fp, #4]
  405da6:	f300 81bf 	bgt.w	406128 <_svfprintf_r+0xdb8>
  405daa:	f10b 0b08 	add.w	fp, fp, #8
  405dae:	2300      	movs	r3, #0
  405db0:	9813      	ldr	r0, [sp, #76]	; 0x4c
  405db2:	2200      	movs	r2, #0
  405db4:	9914      	ldr	r1, [sp, #80]	; 0x50
  405db6:	f004 fa4d 	bl	40a254 <__aeabi_dcmpeq>
  405dba:	9b12      	ldr	r3, [sp, #72]	; 0x48
  405dbc:	2800      	cmp	r0, #0
  405dbe:	f040 80dc 	bne.w	405f7a <_svfprintf_r+0xc0a>
  405dc2:	3b01      	subs	r3, #1
  405dc4:	3401      	adds	r4, #1
  405dc6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  405dc8:	441e      	add	r6, r3
  405dca:	2c07      	cmp	r4, #7
  405dcc:	f102 0201 	add.w	r2, r2, #1
  405dd0:	9424      	str	r4, [sp, #144]	; 0x90
  405dd2:	9625      	str	r6, [sp, #148]	; 0x94
  405dd4:	f8cb 2000 	str.w	r2, [fp]
  405dd8:	f8cb 3004 	str.w	r3, [fp, #4]
  405ddc:	f300 8100 	bgt.w	405fe0 <_svfprintf_r+0xc70>
  405de0:	f10b 0b08 	add.w	fp, fp, #8
  405de4:	9a19      	ldr	r2, [sp, #100]	; 0x64
  405de6:	3401      	adds	r4, #1
  405de8:	ab1f      	add	r3, sp, #124	; 0x7c
  405dea:	eb06 0c02 	add.w	ip, r6, r2
  405dee:	2c07      	cmp	r4, #7
  405df0:	f8cb 2004 	str.w	r2, [fp, #4]
  405df4:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
  405df8:	9424      	str	r4, [sp, #144]	; 0x90
  405dfa:	f8cb 3000 	str.w	r3, [fp]
  405dfe:	f77f aca0 	ble.w	405742 <_svfprintf_r+0x3d2>
  405e02:	9809      	ldr	r0, [sp, #36]	; 0x24
  405e04:	4649      	mov	r1, r9
  405e06:	aa23      	add	r2, sp, #140	; 0x8c
  405e08:	f003 fc42 	bl	409690 <__ssprint_r>
  405e0c:	2800      	cmp	r0, #0
  405e0e:	f47f ab74 	bne.w	4054fa <_svfprintf_r+0x18a>
  405e12:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
  405e16:	46c3      	mov	fp, r8
  405e18:	e495      	b.n	405746 <_svfprintf_r+0x3d6>
  405e1a:	9809      	ldr	r0, [sp, #36]	; 0x24
  405e1c:	4649      	mov	r1, r9
  405e1e:	aa23      	add	r2, sp, #140	; 0x8c
  405e20:	f003 fc36 	bl	409690 <__ssprint_r>
  405e24:	2800      	cmp	r0, #0
  405e26:	f43f acde 	beq.w	4057e6 <_svfprintf_r+0x476>
  405e2a:	f7ff bb66 	b.w	4054fa <_svfprintf_r+0x18a>
  405e2e:	4614      	mov	r4, r2
  405e30:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
  405e34:	f7ff bba8 	b.w	405588 <_svfprintf_r+0x218>
  405e38:	9809      	ldr	r0, [sp, #36]	; 0x24
  405e3a:	4649      	mov	r1, r9
  405e3c:	aa23      	add	r2, sp, #140	; 0x8c
  405e3e:	f003 fc27 	bl	409690 <__ssprint_r>
  405e42:	2800      	cmp	r0, #0
  405e44:	f47f ab59 	bne.w	4054fa <_svfprintf_r+0x18a>
  405e48:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
  405e4c:	46c3      	mov	fp, r8
  405e4e:	e466      	b.n	40571e <_svfprintf_r+0x3ae>
  405e50:	9809      	ldr	r0, [sp, #36]	; 0x24
  405e52:	4649      	mov	r1, r9
  405e54:	aa23      	add	r2, sp, #140	; 0x8c
  405e56:	f003 fc1b 	bl	409690 <__ssprint_r>
  405e5a:	2800      	cmp	r0, #0
  405e5c:	f47f ab4d 	bne.w	4054fa <_svfprintf_r+0x18a>
  405e60:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
  405e64:	46c3      	mov	fp, r8
  405e66:	e41a      	b.n	40569e <_svfprintf_r+0x32e>
  405e68:	9809      	ldr	r0, [sp, #36]	; 0x24
  405e6a:	4649      	mov	r1, r9
  405e6c:	aa23      	add	r2, sp, #140	; 0x8c
  405e6e:	f003 fc0f 	bl	409690 <__ssprint_r>
  405e72:	2800      	cmp	r0, #0
  405e74:	f47f ab41 	bne.w	4054fa <_svfprintf_r+0x18a>
  405e78:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
  405e7c:	46c3      	mov	fp, r8
  405e7e:	f7ff bbfa 	b.w	405676 <_svfprintf_r+0x306>
  405e82:	4641      	mov	r1, r8
  405e84:	08e2      	lsrs	r2, r4, #3
  405e86:	f004 0307 	and.w	r3, r4, #7
  405e8a:	08e8      	lsrs	r0, r5, #3
  405e8c:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
  405e90:	3330      	adds	r3, #48	; 0x30
  405e92:	4605      	mov	r5, r0
  405e94:	4614      	mov	r4, r2
  405e96:	f801 3d01 	strb.w	r3, [r1, #-1]!
  405e9a:	ea54 0205 	orrs.w	r2, r4, r5
  405e9e:	d1f1      	bne.n	405e84 <_svfprintf_r+0xb14>
  405ea0:	9a06      	ldr	r2, [sp, #24]
  405ea2:	910f      	str	r1, [sp, #60]	; 0x3c
  405ea4:	07d0      	lsls	r0, r2, #31
  405ea6:	f100 8164 	bmi.w	406172 <_svfprintf_r+0xe02>
  405eaa:	ebc1 0408 	rsb	r4, r1, r8
  405eae:	f7ff bb6b 	b.w	405588 <_svfprintf_r+0x218>
  405eb2:	2302      	movs	r3, #2
  405eb4:	f7ff bb3f 	b.w	405536 <_svfprintf_r+0x1c6>
  405eb8:	9c1d      	ldr	r4, [sp, #116]	; 0x74
  405eba:	2c00      	cmp	r4, #0
  405ebc:	f340 81f6 	ble.w	4062ac <_svfprintf_r+0xf3c>
  405ec0:	9a12      	ldr	r2, [sp, #72]	; 0x48
  405ec2:	9911      	ldr	r1, [sp, #68]	; 0x44
  405ec4:	4613      	mov	r3, r2
  405ec6:	428a      	cmp	r2, r1
  405ec8:	bfa8      	it	ge
  405eca:	460b      	movge	r3, r1
  405ecc:	990f      	ldr	r1, [sp, #60]	; 0x3c
  405ece:	461c      	mov	r4, r3
  405ed0:	188f      	adds	r7, r1, r2
  405ed2:	2c00      	cmp	r4, #0
  405ed4:	dd0e      	ble.n	405ef4 <_svfprintf_r+0xb84>
  405ed6:	9b24      	ldr	r3, [sp, #144]	; 0x90
  405ed8:	44a4      	add	ip, r4
  405eda:	f8cb 1000 	str.w	r1, [fp]
  405ede:	3301      	adds	r3, #1
  405ee0:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
  405ee4:	f8cb 4004 	str.w	r4, [fp, #4]
  405ee8:	2b07      	cmp	r3, #7
  405eea:	9324      	str	r3, [sp, #144]	; 0x90
  405eec:	f300 8353 	bgt.w	406596 <_svfprintf_r+0x1226>
  405ef0:	f10b 0b08 	add.w	fp, fp, #8
  405ef4:	9b11      	ldr	r3, [sp, #68]	; 0x44
  405ef6:	2c00      	cmp	r4, #0
  405ef8:	bfa8      	it	ge
  405efa:	1b1b      	subge	r3, r3, r4
  405efc:	2b00      	cmp	r3, #0
  405efe:	461c      	mov	r4, r3
  405f00:	f340 80a1 	ble.w	406046 <_svfprintf_r+0xcd6>
  405f04:	2c10      	cmp	r4, #16
  405f06:	9b24      	ldr	r3, [sp, #144]	; 0x90
  405f08:	f340 846c 	ble.w	4067e4 <_svfprintf_r+0x1474>
  405f0c:	2610      	movs	r6, #16
  405f0e:	4d45      	ldr	r5, [pc, #276]	; (406024 <_svfprintf_r+0xcb4>)
  405f10:	4662      	mov	r2, ip
  405f12:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
  405f16:	e003      	b.n	405f20 <_svfprintf_r+0xbb0>
  405f18:	3c10      	subs	r4, #16
  405f1a:	2c10      	cmp	r4, #16
  405f1c:	f340 8084 	ble.w	406028 <_svfprintf_r+0xcb8>
  405f20:	3301      	adds	r3, #1
  405f22:	3210      	adds	r2, #16
  405f24:	f8cb 5000 	str.w	r5, [fp]
  405f28:	f10b 0b08 	add.w	fp, fp, #8
  405f2c:	2b07      	cmp	r3, #7
  405f2e:	f84b 6c04 	str.w	r6, [fp, #-4]
  405f32:	9225      	str	r2, [sp, #148]	; 0x94
  405f34:	9324      	str	r3, [sp, #144]	; 0x90
  405f36:	ddef      	ble.n	405f18 <_svfprintf_r+0xba8>
  405f38:	4650      	mov	r0, sl
  405f3a:	4649      	mov	r1, r9
  405f3c:	aa23      	add	r2, sp, #140	; 0x8c
  405f3e:	46c3      	mov	fp, r8
  405f40:	f003 fba6 	bl	409690 <__ssprint_r>
  405f44:	2800      	cmp	r0, #0
  405f46:	f47f aad8 	bne.w	4054fa <_svfprintf_r+0x18a>
  405f4a:	9a25      	ldr	r2, [sp, #148]	; 0x94
  405f4c:	9b24      	ldr	r3, [sp, #144]	; 0x90
  405f4e:	e7e3      	b.n	405f18 <_svfprintf_r+0xba8>
  405f50:	2d00      	cmp	r5, #0
  405f52:	bf08      	it	eq
  405f54:	2c0a      	cmpeq	r4, #10
  405f56:	f080 811a 	bcs.w	40618e <_svfprintf_r+0xe1e>
  405f5a:	f50d 7a80 	add.w	sl, sp, #256	; 0x100
  405f5e:	3430      	adds	r4, #48	; 0x30
  405f60:	f80a 4d41 	strb.w	r4, [sl, #-65]!
  405f64:	ebca 0408 	rsb	r4, sl, r8
  405f68:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
  405f6c:	f7ff bb0c 	b.w	405588 <_svfprintf_r+0x218>
  405f70:	461c      	mov	r4, r3
  405f72:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
  405f76:	f7ff bb07 	b.w	405588 <_svfprintf_r+0x218>
  405f7a:	1e5f      	subs	r7, r3, #1
  405f7c:	2f00      	cmp	r7, #0
  405f7e:	f77f af31 	ble.w	405de4 <_svfprintf_r+0xa74>
  405f82:	2f10      	cmp	r7, #16
  405f84:	4d27      	ldr	r5, [pc, #156]	; (406024 <_svfprintf_r+0xcb4>)
  405f86:	bfc8      	it	gt
  405f88:	f04f 0a10 	movgt.w	sl, #16
  405f8c:	dc03      	bgt.n	405f96 <_svfprintf_r+0xc26>
  405f8e:	e01c      	b.n	405fca <_svfprintf_r+0xc5a>
  405f90:	3f10      	subs	r7, #16
  405f92:	2f10      	cmp	r7, #16
  405f94:	dd19      	ble.n	405fca <_svfprintf_r+0xc5a>
  405f96:	3401      	adds	r4, #1
  405f98:	3610      	adds	r6, #16
  405f9a:	f8cb 5000 	str.w	r5, [fp]
  405f9e:	f10b 0b08 	add.w	fp, fp, #8
  405fa2:	2c07      	cmp	r4, #7
  405fa4:	f84b ac04 	str.w	sl, [fp, #-4]
  405fa8:	9625      	str	r6, [sp, #148]	; 0x94
  405faa:	9424      	str	r4, [sp, #144]	; 0x90
  405fac:	ddf0      	ble.n	405f90 <_svfprintf_r+0xc20>
  405fae:	9809      	ldr	r0, [sp, #36]	; 0x24
  405fb0:	4649      	mov	r1, r9
  405fb2:	aa23      	add	r2, sp, #140	; 0x8c
  405fb4:	46c3      	mov	fp, r8
  405fb6:	f003 fb6b 	bl	409690 <__ssprint_r>
  405fba:	2800      	cmp	r0, #0
  405fbc:	f47f aa9d 	bne.w	4054fa <_svfprintf_r+0x18a>
  405fc0:	3f10      	subs	r7, #16
  405fc2:	9e25      	ldr	r6, [sp, #148]	; 0x94
  405fc4:	9c24      	ldr	r4, [sp, #144]	; 0x90
  405fc6:	2f10      	cmp	r7, #16
  405fc8:	dce5      	bgt.n	405f96 <_svfprintf_r+0xc26>
  405fca:	3401      	adds	r4, #1
  405fcc:	443e      	add	r6, r7
  405fce:	f8cb 5000 	str.w	r5, [fp]
  405fd2:	2c07      	cmp	r4, #7
  405fd4:	9625      	str	r6, [sp, #148]	; 0x94
  405fd6:	9424      	str	r4, [sp, #144]	; 0x90
  405fd8:	f8cb 7004 	str.w	r7, [fp, #4]
  405fdc:	f77f af00 	ble.w	405de0 <_svfprintf_r+0xa70>
  405fe0:	9809      	ldr	r0, [sp, #36]	; 0x24
  405fe2:	4649      	mov	r1, r9
  405fe4:	aa23      	add	r2, sp, #140	; 0x8c
  405fe6:	f003 fb53 	bl	409690 <__ssprint_r>
  405fea:	2800      	cmp	r0, #0
  405fec:	f47f aa85 	bne.w	4054fa <_svfprintf_r+0x18a>
  405ff0:	9e25      	ldr	r6, [sp, #148]	; 0x94
  405ff2:	46c3      	mov	fp, r8
  405ff4:	9c24      	ldr	r4, [sp, #144]	; 0x90
  405ff6:	e6f5      	b.n	405de4 <_svfprintf_r+0xa74>
  405ff8:	4694      	mov	ip, r2
  405ffa:	3301      	adds	r3, #1
  405ffc:	44a4      	add	ip, r4
  405ffe:	f8cb 5000 	str.w	r5, [fp]
  406002:	2b07      	cmp	r3, #7
  406004:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
  406008:	9324      	str	r3, [sp, #144]	; 0x90
  40600a:	f8cb 4004 	str.w	r4, [fp, #4]
  40600e:	f77f ab98 	ble.w	405742 <_svfprintf_r+0x3d2>
  406012:	e6f6      	b.n	405e02 <_svfprintf_r+0xa92>
  406014:	990c      	ldr	r1, [sp, #48]	; 0x30
  406016:	2500      	movs	r5, #0
  406018:	460a      	mov	r2, r1
  40601a:	680c      	ldr	r4, [r1, #0]
  40601c:	3204      	adds	r2, #4
  40601e:	920c      	str	r2, [sp, #48]	; 0x30
  406020:	f7ff ba89 	b.w	405536 <_svfprintf_r+0x1c6>
  406024:	0040ab64 	.word	0x0040ab64
  406028:	4694      	mov	ip, r2
  40602a:	3301      	adds	r3, #1
  40602c:	44a4      	add	ip, r4
  40602e:	f8cb 5000 	str.w	r5, [fp]
  406032:	2b07      	cmp	r3, #7
  406034:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
  406038:	9324      	str	r3, [sp, #144]	; 0x90
  40603a:	f8cb 4004 	str.w	r4, [fp, #4]
  40603e:	f300 82df 	bgt.w	406600 <_svfprintf_r+0x1290>
  406042:	f10b 0b08 	add.w	fp, fp, #8
  406046:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  406048:	9911      	ldr	r1, [sp, #68]	; 0x44
  40604a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  40604c:	440a      	add	r2, r1
  40604e:	4616      	mov	r6, r2
  406050:	9a12      	ldr	r2, [sp, #72]	; 0x48
  406052:	4293      	cmp	r3, r2
  406054:	db45      	blt.n	4060e2 <_svfprintf_r+0xd72>
  406056:	9a06      	ldr	r2, [sp, #24]
  406058:	07d0      	lsls	r0, r2, #31
  40605a:	d442      	bmi.n	4060e2 <_svfprintf_r+0xd72>
  40605c:	9a12      	ldr	r2, [sp, #72]	; 0x48
  40605e:	1bbc      	subs	r4, r7, r6
  406060:	1ad3      	subs	r3, r2, r3
  406062:	429c      	cmp	r4, r3
  406064:	bfa8      	it	ge
  406066:	461c      	movge	r4, r3
  406068:	2c00      	cmp	r4, #0
  40606a:	4625      	mov	r5, r4
  40606c:	dd0e      	ble.n	40608c <_svfprintf_r+0xd1c>
  40606e:	9a24      	ldr	r2, [sp, #144]	; 0x90
  406070:	44a4      	add	ip, r4
  406072:	f8cb 6000 	str.w	r6, [fp]
  406076:	3201      	adds	r2, #1
  406078:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
  40607c:	f8cb 4004 	str.w	r4, [fp, #4]
  406080:	2a07      	cmp	r2, #7
  406082:	9224      	str	r2, [sp, #144]	; 0x90
  406084:	f300 82a0 	bgt.w	4065c8 <_svfprintf_r+0x1258>
  406088:	f10b 0b08 	add.w	fp, fp, #8
  40608c:	2d00      	cmp	r5, #0
  40608e:	bfac      	ite	ge
  406090:	1b5c      	subge	r4, r3, r5
  406092:	461c      	movlt	r4, r3
  406094:	2c00      	cmp	r4, #0
  406096:	f77f ab56 	ble.w	405746 <_svfprintf_r+0x3d6>
  40609a:	2c10      	cmp	r4, #16
  40609c:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40609e:	f340 8396 	ble.w	4067ce <_svfprintf_r+0x145e>
  4060a2:	2610      	movs	r6, #16
  4060a4:	4db1      	ldr	r5, [pc, #708]	; (40636c <_svfprintf_r+0xffc>)
  4060a6:	4662      	mov	r2, ip
  4060a8:	9f09      	ldr	r7, [sp, #36]	; 0x24
  4060aa:	e002      	b.n	4060b2 <_svfprintf_r+0xd42>
  4060ac:	3c10      	subs	r4, #16
  4060ae:	2c10      	cmp	r4, #16
  4060b0:	dda2      	ble.n	405ff8 <_svfprintf_r+0xc88>
  4060b2:	3301      	adds	r3, #1
  4060b4:	3210      	adds	r2, #16
  4060b6:	f8cb 5000 	str.w	r5, [fp]
  4060ba:	f10b 0b08 	add.w	fp, fp, #8
  4060be:	2b07      	cmp	r3, #7
  4060c0:	f84b 6c04 	str.w	r6, [fp, #-4]
  4060c4:	9225      	str	r2, [sp, #148]	; 0x94
  4060c6:	9324      	str	r3, [sp, #144]	; 0x90
  4060c8:	ddf0      	ble.n	4060ac <_svfprintf_r+0xd3c>
  4060ca:	4638      	mov	r0, r7
  4060cc:	4649      	mov	r1, r9
  4060ce:	aa23      	add	r2, sp, #140	; 0x8c
  4060d0:	46c3      	mov	fp, r8
  4060d2:	f003 fadd 	bl	409690 <__ssprint_r>
  4060d6:	2800      	cmp	r0, #0
  4060d8:	f47f aa0f 	bne.w	4054fa <_svfprintf_r+0x18a>
  4060dc:	9a25      	ldr	r2, [sp, #148]	; 0x94
  4060de:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4060e0:	e7e4      	b.n	4060ac <_svfprintf_r+0xd3c>
  4060e2:	9a24      	ldr	r2, [sp, #144]	; 0x90
  4060e4:	9817      	ldr	r0, [sp, #92]	; 0x5c
  4060e6:	3201      	adds	r2, #1
  4060e8:	9916      	ldr	r1, [sp, #88]	; 0x58
  4060ea:	4484      	add	ip, r0
  4060ec:	f8cb 0004 	str.w	r0, [fp, #4]
  4060f0:	2a07      	cmp	r2, #7
  4060f2:	f8cb 1000 	str.w	r1, [fp]
  4060f6:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
  4060fa:	9224      	str	r2, [sp, #144]	; 0x90
  4060fc:	f300 8273 	bgt.w	4065e6 <_svfprintf_r+0x1276>
  406100:	f10b 0b08 	add.w	fp, fp, #8
  406104:	e7aa      	b.n	40605c <_svfprintf_r+0xcec>
  406106:	9b06      	ldr	r3, [sp, #24]
  406108:	07d9      	lsls	r1, r3, #31
  40610a:	f53f ae33 	bmi.w	405d74 <_svfprintf_r+0xa04>
  40610e:	2301      	movs	r3, #1
  406110:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  406112:	9625      	str	r6, [sp, #148]	; 0x94
  406114:	441c      	add	r4, r3
  406116:	f8cb 2000 	str.w	r2, [fp]
  40611a:	f8cb 3004 	str.w	r3, [fp, #4]
  40611e:	2c07      	cmp	r4, #7
  406120:	9424      	str	r4, [sp, #144]	; 0x90
  406122:	f77f ae5d 	ble.w	405de0 <_svfprintf_r+0xa70>
  406126:	e75b      	b.n	405fe0 <_svfprintf_r+0xc70>
  406128:	9809      	ldr	r0, [sp, #36]	; 0x24
  40612a:	4649      	mov	r1, r9
  40612c:	aa23      	add	r2, sp, #140	; 0x8c
  40612e:	f003 faaf 	bl	409690 <__ssprint_r>
  406132:	2800      	cmp	r0, #0
  406134:	f47f a9e1 	bne.w	4054fa <_svfprintf_r+0x18a>
  406138:	9e25      	ldr	r6, [sp, #148]	; 0x94
  40613a:	46c3      	mov	fp, r8
  40613c:	9c24      	ldr	r4, [sp, #144]	; 0x90
  40613e:	e636      	b.n	405dae <_svfprintf_r+0xa3e>
  406140:	9809      	ldr	r0, [sp, #36]	; 0x24
  406142:	4649      	mov	r1, r9
  406144:	aa23      	add	r2, sp, #140	; 0x8c
  406146:	f003 faa3 	bl	409690 <__ssprint_r>
  40614a:	2800      	cmp	r0, #0
  40614c:	f47f a9d5 	bne.w	4054fa <_svfprintf_r+0x18a>
  406150:	9e25      	ldr	r6, [sp, #148]	; 0x94
  406152:	46c3      	mov	fp, r8
  406154:	9c24      	ldr	r4, [sp, #144]	; 0x90
  406156:	e61b      	b.n	405d90 <_svfprintf_r+0xa20>
  406158:	9809      	ldr	r0, [sp, #36]	; 0x24
  40615a:	4649      	mov	r1, r9
  40615c:	aa23      	add	r2, sp, #140	; 0x8c
  40615e:	f003 fa97 	bl	409690 <__ssprint_r>
  406162:	2800      	cmp	r0, #0
  406164:	f47f a9c9 	bne.w	4054fa <_svfprintf_r+0x18a>
  406168:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
  40616c:	46c3      	mov	fp, r8
  40616e:	f7ff ba9a 	b.w	4056a6 <_svfprintf_r+0x336>
  406172:	2b30      	cmp	r3, #48	; 0x30
  406174:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  406176:	f43f adb4 	beq.w	405ce2 <_svfprintf_r+0x972>
  40617a:	3b01      	subs	r3, #1
  40617c:	461a      	mov	r2, r3
  40617e:	930f      	str	r3, [sp, #60]	; 0x3c
  406180:	2330      	movs	r3, #48	; 0x30
  406182:	ebc2 0408 	rsb	r4, r2, r8
  406186:	f801 3c01 	strb.w	r3, [r1, #-1]
  40618a:	f7ff b9fd 	b.w	405588 <_svfprintf_r+0x218>
  40618e:	46c2      	mov	sl, r8
  406190:	f8cd c01c 	str.w	ip, [sp, #28]
  406194:	4620      	mov	r0, r4
  406196:	4629      	mov	r1, r5
  406198:	220a      	movs	r2, #10
  40619a:	2300      	movs	r3, #0
  40619c:	f004 f8b4 	bl	40a308 <__aeabi_uldivmod>
  4061a0:	f102 0e30 	add.w	lr, r2, #48	; 0x30
  4061a4:	4620      	mov	r0, r4
  4061a6:	4629      	mov	r1, r5
  4061a8:	2300      	movs	r3, #0
  4061aa:	220a      	movs	r2, #10
  4061ac:	f80a ed01 	strb.w	lr, [sl, #-1]!
  4061b0:	f004 f8aa 	bl	40a308 <__aeabi_uldivmod>
  4061b4:	4604      	mov	r4, r0
  4061b6:	460d      	mov	r5, r1
  4061b8:	ea54 0305 	orrs.w	r3, r4, r5
  4061bc:	d1ea      	bne.n	406194 <_svfprintf_r+0xe24>
  4061be:	f8dd c01c 	ldr.w	ip, [sp, #28]
  4061c2:	ebca 0408 	rsb	r4, sl, r8
  4061c6:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
  4061ca:	f7ff b9dd 	b.w	405588 <_svfprintf_r+0x218>
  4061ce:	9813      	ldr	r0, [sp, #76]	; 0x4c
  4061d0:	9914      	ldr	r1, [sp, #80]	; 0x50
  4061d2:	f8cd c01c 	str.w	ip, [sp, #28]
  4061d6:	f003 f9e3 	bl	4095a0 <__fpclassifyd>
  4061da:	f8dd c01c 	ldr.w	ip, [sp, #28]
  4061de:	2800      	cmp	r0, #0
  4061e0:	f040 80cc 	bne.w	40637c <_svfprintf_r+0x100c>
  4061e4:	9c06      	ldr	r4, [sp, #24]
  4061e6:	2103      	movs	r1, #3
  4061e8:	4a61      	ldr	r2, [pc, #388]	; (406370 <_svfprintf_r+0x1000>)
  4061ea:	4b62      	ldr	r3, [pc, #392]	; (406374 <_svfprintf_r+0x1004>)
  4061ec:	f024 0480 	bic.w	r4, r4, #128	; 0x80
  4061f0:	9010      	str	r0, [sp, #64]	; 0x40
  4061f2:	2e47      	cmp	r6, #71	; 0x47
  4061f4:	bfd8      	it	le
  4061f6:	461a      	movle	r2, r3
  4061f8:	9406      	str	r4, [sp, #24]
  4061fa:	9107      	str	r1, [sp, #28]
  4061fc:	460c      	mov	r4, r1
  4061fe:	9011      	str	r0, [sp, #68]	; 0x44
  406200:	920f      	str	r2, [sp, #60]	; 0x3c
  406202:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  406206:	f7ff b9c6 	b.w	405596 <_svfprintf_r+0x226>
  40620a:	9b06      	ldr	r3, [sp, #24]
  40620c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  40620e:	f013 0f40 	tst.w	r3, #64	; 0x40
  406212:	4613      	mov	r3, r2
  406214:	f43f abc9 	beq.w	4059aa <_svfprintf_r+0x63a>
  406218:	8814      	ldrh	r4, [r2, #0]
  40621a:	3204      	adds	r2, #4
  40621c:	2500      	movs	r5, #0
  40621e:	2301      	movs	r3, #1
  406220:	920c      	str	r2, [sp, #48]	; 0x30
  406222:	f7ff b988 	b.w	405536 <_svfprintf_r+0x1c6>
  406226:	9b06      	ldr	r3, [sp, #24]
  406228:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  40622a:	f013 0f40 	tst.w	r3, #64	; 0x40
  40622e:	4613      	mov	r3, r2
  406230:	f000 8130 	beq.w	406494 <_svfprintf_r+0x1124>
  406234:	3304      	adds	r3, #4
  406236:	8814      	ldrh	r4, [r2, #0]
  406238:	2500      	movs	r5, #0
  40623a:	930c      	str	r3, [sp, #48]	; 0x30
  40623c:	f7ff bbcd 	b.w	4059da <_svfprintf_r+0x66a>
  406240:	9b06      	ldr	r3, [sp, #24]
  406242:	06dd      	lsls	r5, r3, #27
  406244:	d40b      	bmi.n	40625e <_svfprintf_r+0xeee>
  406246:	9b06      	ldr	r3, [sp, #24]
  406248:	065c      	lsls	r4, r3, #25
  40624a:	d508      	bpl.n	40625e <_svfprintf_r+0xeee>
  40624c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  40624e:	6813      	ldr	r3, [r2, #0]
  406250:	3204      	adds	r2, #4
  406252:	920c      	str	r2, [sp, #48]	; 0x30
  406254:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
  406258:	801a      	strh	r2, [r3, #0]
  40625a:	f7ff b8af 	b.w	4053bc <_svfprintf_r+0x4c>
  40625e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  406260:	6813      	ldr	r3, [r2, #0]
  406262:	3204      	adds	r2, #4
  406264:	920c      	str	r2, [sp, #48]	; 0x30
  406266:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  406268:	601a      	str	r2, [r3, #0]
  40626a:	f7ff b8a7 	b.w	4053bc <_svfprintf_r+0x4c>
  40626e:	9b06      	ldr	r3, [sp, #24]
  406270:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  406272:	f013 0f40 	tst.w	r3, #64	; 0x40
  406276:	4613      	mov	r3, r2
  406278:	f43f ac26 	beq.w	405ac8 <_svfprintf_r+0x758>
  40627c:	f9b2 4000 	ldrsh.w	r4, [r2]
  406280:	3304      	adds	r3, #4
  406282:	17e5      	asrs	r5, r4, #31
  406284:	930c      	str	r3, [sp, #48]	; 0x30
  406286:	4622      	mov	r2, r4
  406288:	462b      	mov	r3, r5
  40628a:	f7ff baf9 	b.w	405880 <_svfprintf_r+0x510>
  40628e:	4d37      	ldr	r5, [pc, #220]	; (40636c <_svfprintf_r+0xffc>)
  406290:	f7ff ba37 	b.w	405702 <_svfprintf_r+0x392>
  406294:	9809      	ldr	r0, [sp, #36]	; 0x24
  406296:	4649      	mov	r1, r9
  406298:	aa23      	add	r2, sp, #140	; 0x8c
  40629a:	f003 f9f9 	bl	409690 <__ssprint_r>
  40629e:	2800      	cmp	r0, #0
  4062a0:	f47f a92b 	bne.w	4054fa <_svfprintf_r+0x18a>
  4062a4:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
  4062a8:	46c3      	mov	fp, r8
  4062aa:	e4b2      	b.n	405c12 <_svfprintf_r+0x8a2>
  4062ac:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4062ae:	2201      	movs	r2, #1
  4062b0:	f10c 0c01 	add.w	ip, ip, #1
  4062b4:	4930      	ldr	r1, [pc, #192]	; (406378 <_svfprintf_r+0x1008>)
  4062b6:	4413      	add	r3, r2
  4062b8:	f8cb 2004 	str.w	r2, [fp, #4]
  4062bc:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
  4062c0:	2b07      	cmp	r3, #7
  4062c2:	f8cb 1000 	str.w	r1, [fp]
  4062c6:	9324      	str	r3, [sp, #144]	; 0x90
  4062c8:	f300 80fa 	bgt.w	4064c0 <_svfprintf_r+0x1150>
  4062cc:	f10b 0b08 	add.w	fp, fp, #8
  4062d0:	b92c      	cbnz	r4, 4062de <_svfprintf_r+0xf6e>
  4062d2:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4062d4:	b91b      	cbnz	r3, 4062de <_svfprintf_r+0xf6e>
  4062d6:	9b06      	ldr	r3, [sp, #24]
  4062d8:	07dd      	lsls	r5, r3, #31
  4062da:	f57f aa34 	bpl.w	405746 <_svfprintf_r+0x3d6>
  4062de:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4062e0:	9917      	ldr	r1, [sp, #92]	; 0x5c
  4062e2:	3301      	adds	r3, #1
  4062e4:	9816      	ldr	r0, [sp, #88]	; 0x58
  4062e6:	eb0c 0201 	add.w	r2, ip, r1
  4062ea:	f8cb 1004 	str.w	r1, [fp, #4]
  4062ee:	2b07      	cmp	r3, #7
  4062f0:	f8cb 0000 	str.w	r0, [fp]
  4062f4:	9225      	str	r2, [sp, #148]	; 0x94
  4062f6:	9324      	str	r3, [sp, #144]	; 0x90
  4062f8:	f300 824c 	bgt.w	406794 <_svfprintf_r+0x1424>
  4062fc:	f10b 0b08 	add.w	fp, fp, #8
  406300:	4264      	negs	r4, r4
  406302:	2c00      	cmp	r4, #0
  406304:	f340 8126 	ble.w	406554 <_svfprintf_r+0x11e4>
  406308:	2c10      	cmp	r4, #16
  40630a:	4d18      	ldr	r5, [pc, #96]	; (40636c <_svfprintf_r+0xffc>)
  40630c:	f340 814f 	ble.w	4065ae <_svfprintf_r+0x123e>
  406310:	2610      	movs	r6, #16
  406312:	9f09      	ldr	r7, [sp, #36]	; 0x24
  406314:	e003      	b.n	40631e <_svfprintf_r+0xfae>
  406316:	3c10      	subs	r4, #16
  406318:	2c10      	cmp	r4, #16
  40631a:	f340 8148 	ble.w	4065ae <_svfprintf_r+0x123e>
  40631e:	3301      	adds	r3, #1
  406320:	3210      	adds	r2, #16
  406322:	f8cb 5000 	str.w	r5, [fp]
  406326:	f10b 0b08 	add.w	fp, fp, #8
  40632a:	2b07      	cmp	r3, #7
  40632c:	f84b 6c04 	str.w	r6, [fp, #-4]
  406330:	9225      	str	r2, [sp, #148]	; 0x94
  406332:	9324      	str	r3, [sp, #144]	; 0x90
  406334:	ddef      	ble.n	406316 <_svfprintf_r+0xfa6>
  406336:	4638      	mov	r0, r7
  406338:	4649      	mov	r1, r9
  40633a:	aa23      	add	r2, sp, #140	; 0x8c
  40633c:	46c3      	mov	fp, r8
  40633e:	f003 f9a7 	bl	409690 <__ssprint_r>
  406342:	2800      	cmp	r0, #0
  406344:	f47f a8d9 	bne.w	4054fa <_svfprintf_r+0x18a>
  406348:	9a25      	ldr	r2, [sp, #148]	; 0x94
  40634a:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40634c:	e7e3      	b.n	406316 <_svfprintf_r+0xfa6>
  40634e:	f041 0120 	orr.w	r1, r1, #32
  406352:	785e      	ldrb	r6, [r3, #1]
  406354:	9106      	str	r1, [sp, #24]
  406356:	1c59      	adds	r1, r3, #1
  406358:	f7ff b85f 	b.w	40541a <_svfprintf_r+0xaa>
  40635c:	980b      	ldr	r0, [sp, #44]	; 0x2c
  40635e:	910c      	str	r1, [sp, #48]	; 0x30
  406360:	4619      	mov	r1, r3
  406362:	4240      	negs	r0, r0
  406364:	900b      	str	r0, [sp, #44]	; 0x2c
  406366:	f7ff ba43 	b.w	4057f0 <_svfprintf_r+0x480>
  40636a:	bf00      	nop
  40636c:	0040ab64 	.word	0x0040ab64
  406370:	0040ab90 	.word	0x0040ab90
  406374:	0040ab8c 	.word	0x0040ab8c
  406378:	0040abc4 	.word	0x0040abc4
  40637c:	f1bc 3fff 	cmp.w	ip, #4294967295
  406380:	f026 0a20 	bic.w	sl, r6, #32
  406384:	f000 80a9 	beq.w	4064da <_svfprintf_r+0x116a>
  406388:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
  40638c:	f040 80a7 	bne.w	4064de <_svfprintf_r+0x116e>
  406390:	f1bc 0f00 	cmp.w	ip, #0
  406394:	f040 80a3 	bne.w	4064de <_svfprintf_r+0x116e>
  406398:	9b06      	ldr	r3, [sp, #24]
  40639a:	f04f 0a47 	mov.w	sl, #71	; 0x47
  40639e:	f04f 0c01 	mov.w	ip, #1
  4063a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  4063a6:	930e      	str	r3, [sp, #56]	; 0x38
  4063a8:	9b14      	ldr	r3, [sp, #80]	; 0x50
  4063aa:	2b00      	cmp	r3, #0
  4063ac:	f2c0 81ff 	blt.w	4067ae <_svfprintf_r+0x143e>
  4063b0:	461d      	mov	r5, r3
  4063b2:	9f13      	ldr	r7, [sp, #76]	; 0x4c
  4063b4:	2300      	movs	r3, #0
  4063b6:	930d      	str	r3, [sp, #52]	; 0x34
  4063b8:	2002      	movs	r0, #2
  4063ba:	a91d      	add	r1, sp, #116	; 0x74
  4063bc:	f8cd c004 	str.w	ip, [sp, #4]
  4063c0:	463a      	mov	r2, r7
  4063c2:	9000      	str	r0, [sp, #0]
  4063c4:	a81e      	add	r0, sp, #120	; 0x78
  4063c6:	9102      	str	r1, [sp, #8]
  4063c8:	a921      	add	r1, sp, #132	; 0x84
  4063ca:	9003      	str	r0, [sp, #12]
  4063cc:	462b      	mov	r3, r5
  4063ce:	9809      	ldr	r0, [sp, #36]	; 0x24
  4063d0:	9104      	str	r1, [sp, #16]
  4063d2:	f8cd c01c 	str.w	ip, [sp, #28]
  4063d6:	f000 fbbb 	bl	406b50 <_dtoa_r>
  4063da:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
  4063de:	900f      	str	r0, [sp, #60]	; 0x3c
  4063e0:	f8dd c01c 	ldr.w	ip, [sp, #28]
  4063e4:	f040 8242 	bne.w	40686c <_svfprintf_r+0x14fc>
  4063e8:	9b06      	ldr	r3, [sp, #24]
  4063ea:	07db      	lsls	r3, r3, #31
  4063ec:	f140 81f3 	bpl.w	4067d6 <_svfprintf_r+0x1466>
  4063f0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4063f2:	eb03 040c 	add.w	r4, r3, ip
  4063f6:	4638      	mov	r0, r7
  4063f8:	2200      	movs	r2, #0
  4063fa:	2300      	movs	r3, #0
  4063fc:	4629      	mov	r1, r5
  4063fe:	f8cd c01c 	str.w	ip, [sp, #28]
  406402:	f003 ff27 	bl	40a254 <__aeabi_dcmpeq>
  406406:	f8dd c01c 	ldr.w	ip, [sp, #28]
  40640a:	2800      	cmp	r0, #0
  40640c:	f040 8172 	bne.w	4066f4 <_svfprintf_r+0x1384>
  406410:	9b21      	ldr	r3, [sp, #132]	; 0x84
  406412:	429c      	cmp	r4, r3
  406414:	d906      	bls.n	406424 <_svfprintf_r+0x10b4>
  406416:	2130      	movs	r1, #48	; 0x30
  406418:	1c5a      	adds	r2, r3, #1
  40641a:	9221      	str	r2, [sp, #132]	; 0x84
  40641c:	7019      	strb	r1, [r3, #0]
  40641e:	9b21      	ldr	r3, [sp, #132]	; 0x84
  406420:	429c      	cmp	r4, r3
  406422:	d8f9      	bhi.n	406418 <_svfprintf_r+0x10a8>
  406424:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  406426:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
  40642a:	eba3 0302 	sub.w	r3, r3, r2
  40642e:	9312      	str	r3, [sp, #72]	; 0x48
  406430:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  406432:	f040 8113 	bne.w	40665c <_svfprintf_r+0x12ec>
  406436:	459c      	cmp	ip, r3
  406438:	f2c0 8168 	blt.w	40670c <_svfprintf_r+0x139c>
  40643c:	1cd9      	adds	r1, r3, #3
  40643e:	f2c0 8165 	blt.w	40670c <_svfprintf_r+0x139c>
  406442:	2667      	movs	r6, #103	; 0x67
  406444:	9311      	str	r3, [sp, #68]	; 0x44
  406446:	9b12      	ldr	r3, [sp, #72]	; 0x48
  406448:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40644a:	4293      	cmp	r3, r2
  40644c:	f300 81b6 	bgt.w	4067bc <_svfprintf_r+0x144c>
  406450:	9b06      	ldr	r3, [sp, #24]
  406452:	07df      	lsls	r7, r3, #31
  406454:	f100 81c1 	bmi.w	4067da <_svfprintf_r+0x146a>
  406458:	4614      	mov	r4, r2
  40645a:	ea22 7ce2 	bic.w	ip, r2, r2, asr #31
  40645e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  406460:	2b00      	cmp	r3, #0
  406462:	f040 80f0 	bne.w	406646 <_svfprintf_r+0x12d6>
  406466:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  406468:	f8cd c01c 	str.w	ip, [sp, #28]
  40646c:	9306      	str	r3, [sp, #24]
  40646e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  406470:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  406474:	9310      	str	r3, [sp, #64]	; 0x40
  406476:	f7ff b88e 	b.w	405596 <_svfprintf_r+0x226>
  40647a:	9809      	ldr	r0, [sp, #36]	; 0x24
  40647c:	4649      	mov	r1, r9
  40647e:	aa23      	add	r2, sp, #140	; 0x8c
  406480:	f003 f906 	bl	409690 <__ssprint_r>
  406484:	2800      	cmp	r0, #0
  406486:	f47f a838 	bne.w	4054fa <_svfprintf_r+0x18a>
  40648a:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
  40648e:	46c3      	mov	fp, r8
  406490:	f7ff bbd8 	b.w	405c44 <_svfprintf_r+0x8d4>
  406494:	3304      	adds	r3, #4
  406496:	6814      	ldr	r4, [r2, #0]
  406498:	2500      	movs	r5, #0
  40649a:	930c      	str	r3, [sp, #48]	; 0x30
  40649c:	f7ff ba9d 	b.w	4059da <_svfprintf_r+0x66a>
  4064a0:	9809      	ldr	r0, [sp, #36]	; 0x24
  4064a2:	2140      	movs	r1, #64	; 0x40
  4064a4:	f001 ff84 	bl	4083b0 <_malloc_r>
  4064a8:	f8c9 0000 	str.w	r0, [r9]
  4064ac:	f8c9 0010 	str.w	r0, [r9, #16]
  4064b0:	2800      	cmp	r0, #0
  4064b2:	f000 81d4 	beq.w	40685e <_svfprintf_r+0x14ee>
  4064b6:	2340      	movs	r3, #64	; 0x40
  4064b8:	f8c9 3014 	str.w	r3, [r9, #20]
  4064bc:	f7fe bf70 	b.w	4053a0 <_svfprintf_r+0x30>
  4064c0:	9809      	ldr	r0, [sp, #36]	; 0x24
  4064c2:	4649      	mov	r1, r9
  4064c4:	aa23      	add	r2, sp, #140	; 0x8c
  4064c6:	f003 f8e3 	bl	409690 <__ssprint_r>
  4064ca:	2800      	cmp	r0, #0
  4064cc:	f47f a815 	bne.w	4054fa <_svfprintf_r+0x18a>
  4064d0:	9c1d      	ldr	r4, [sp, #116]	; 0x74
  4064d2:	46c3      	mov	fp, r8
  4064d4:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
  4064d8:	e6fa      	b.n	4062d0 <_svfprintf_r+0xf60>
  4064da:	f04f 0c06 	mov.w	ip, #6
  4064de:	9b06      	ldr	r3, [sp, #24]
  4064e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  4064e4:	930e      	str	r3, [sp, #56]	; 0x38
  4064e6:	9b14      	ldr	r3, [sp, #80]	; 0x50
  4064e8:	2b00      	cmp	r3, #0
  4064ea:	f2c0 8160 	blt.w	4067ae <_svfprintf_r+0x143e>
  4064ee:	461d      	mov	r5, r3
  4064f0:	9f13      	ldr	r7, [sp, #76]	; 0x4c
  4064f2:	2300      	movs	r3, #0
  4064f4:	930d      	str	r3, [sp, #52]	; 0x34
  4064f6:	f1ba 0f46 	cmp.w	sl, #70	; 0x46
  4064fa:	f000 80c4 	beq.w	406686 <_svfprintf_r+0x1316>
  4064fe:	f1ba 0f45 	cmp.w	sl, #69	; 0x45
  406502:	f47f af59 	bne.w	4063b8 <_svfprintf_r+0x1048>
  406506:	f10c 0401 	add.w	r4, ip, #1
  40650a:	f8cd c01c 	str.w	ip, [sp, #28]
  40650e:	f10d 0e74 	add.w	lr, sp, #116	; 0x74
  406512:	f10d 0c84 	add.w	ip, sp, #132	; 0x84
  406516:	a81e      	add	r0, sp, #120	; 0x78
  406518:	2102      	movs	r1, #2
  40651a:	f8cd c010 	str.w	ip, [sp, #16]
  40651e:	463a      	mov	r2, r7
  406520:	9003      	str	r0, [sp, #12]
  406522:	462b      	mov	r3, r5
  406524:	9401      	str	r4, [sp, #4]
  406526:	9100      	str	r1, [sp, #0]
  406528:	f8cd e008 	str.w	lr, [sp, #8]
  40652c:	9809      	ldr	r0, [sp, #36]	; 0x24
  40652e:	f000 fb0f 	bl	406b50 <_dtoa_r>
  406532:	f8dd c01c 	ldr.w	ip, [sp, #28]
  406536:	900f      	str	r0, [sp, #60]	; 0x3c
  406538:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40653a:	441c      	add	r4, r3
  40653c:	e75b      	b.n	4063f6 <_svfprintf_r+0x1086>
  40653e:	9809      	ldr	r0, [sp, #36]	; 0x24
  406540:	4649      	mov	r1, r9
  406542:	aa23      	add	r2, sp, #140	; 0x8c
  406544:	f003 f8a4 	bl	409690 <__ssprint_r>
  406548:	2800      	cmp	r0, #0
  40654a:	f47e afd6 	bne.w	4054fa <_svfprintf_r+0x18a>
  40654e:	9a25      	ldr	r2, [sp, #148]	; 0x94
  406550:	46c3      	mov	fp, r8
  406552:	9b24      	ldr	r3, [sp, #144]	; 0x90
  406554:	9812      	ldr	r0, [sp, #72]	; 0x48
  406556:	3301      	adds	r3, #1
  406558:	eb02 0c00 	add.w	ip, r2, r0
  40655c:	2b07      	cmp	r3, #7
  40655e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  406560:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
  406564:	f8cb 2000 	str.w	r2, [fp]
  406568:	9324      	str	r3, [sp, #144]	; 0x90
  40656a:	f8cb 0004 	str.w	r0, [fp, #4]
  40656e:	f77f a8e8 	ble.w	405742 <_svfprintf_r+0x3d2>
  406572:	e446      	b.n	405e02 <_svfprintf_r+0xa92>
  406574:	9510      	str	r5, [sp, #64]	; 0x40
  406576:	f7fe fecd 	bl	405314 <strlen>
  40657a:	ea20 73e0 	bic.w	r3, r0, r0, asr #31
  40657e:	970c      	str	r7, [sp, #48]	; 0x30
  406580:	4604      	mov	r4, r0
  406582:	9511      	str	r5, [sp, #68]	; 0x44
  406584:	9307      	str	r3, [sp, #28]
  406586:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  40658a:	f7ff b804 	b.w	405596 <_svfprintf_r+0x226>
  40658e:	9a24      	ldr	r2, [sp, #144]	; 0x90
  406590:	4fb7      	ldr	r7, [pc, #732]	; (406870 <_svfprintf_r+0x1500>)
  406592:	f7ff b84b 	b.w	40562c <_svfprintf_r+0x2bc>
  406596:	9809      	ldr	r0, [sp, #36]	; 0x24
  406598:	4649      	mov	r1, r9
  40659a:	aa23      	add	r2, sp, #140	; 0x8c
  40659c:	f003 f878 	bl	409690 <__ssprint_r>
  4065a0:	2800      	cmp	r0, #0
  4065a2:	f47e afaa 	bne.w	4054fa <_svfprintf_r+0x18a>
  4065a6:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
  4065aa:	46c3      	mov	fp, r8
  4065ac:	e4a2      	b.n	405ef4 <_svfprintf_r+0xb84>
  4065ae:	3301      	adds	r3, #1
  4065b0:	4422      	add	r2, r4
  4065b2:	f8cb 5000 	str.w	r5, [fp]
  4065b6:	2b07      	cmp	r3, #7
  4065b8:	9225      	str	r2, [sp, #148]	; 0x94
  4065ba:	9324      	str	r3, [sp, #144]	; 0x90
  4065bc:	f8cb 4004 	str.w	r4, [fp, #4]
  4065c0:	dcbd      	bgt.n	40653e <_svfprintf_r+0x11ce>
  4065c2:	f10b 0b08 	add.w	fp, fp, #8
  4065c6:	e7c5      	b.n	406554 <_svfprintf_r+0x11e4>
  4065c8:	9809      	ldr	r0, [sp, #36]	; 0x24
  4065ca:	4649      	mov	r1, r9
  4065cc:	aa23      	add	r2, sp, #140	; 0x8c
  4065ce:	f003 f85f 	bl	409690 <__ssprint_r>
  4065d2:	2800      	cmp	r0, #0
  4065d4:	f47e af91 	bne.w	4054fa <_svfprintf_r+0x18a>
  4065d8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  4065da:	46c3      	mov	fp, r8
  4065dc:	9a12      	ldr	r2, [sp, #72]	; 0x48
  4065de:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
  4065e2:	1ad3      	subs	r3, r2, r3
  4065e4:	e552      	b.n	40608c <_svfprintf_r+0xd1c>
  4065e6:	9809      	ldr	r0, [sp, #36]	; 0x24
  4065e8:	4649      	mov	r1, r9
  4065ea:	aa23      	add	r2, sp, #140	; 0x8c
  4065ec:	f003 f850 	bl	409690 <__ssprint_r>
  4065f0:	2800      	cmp	r0, #0
  4065f2:	f47e af82 	bne.w	4054fa <_svfprintf_r+0x18a>
  4065f6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  4065f8:	46c3      	mov	fp, r8
  4065fa:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
  4065fe:	e52d      	b.n	40605c <_svfprintf_r+0xcec>
  406600:	9809      	ldr	r0, [sp, #36]	; 0x24
  406602:	4649      	mov	r1, r9
  406604:	aa23      	add	r2, sp, #140	; 0x8c
  406606:	f003 f843 	bl	409690 <__ssprint_r>
  40660a:	2800      	cmp	r0, #0
  40660c:	f47e af75 	bne.w	4054fa <_svfprintf_r+0x18a>
  406610:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
  406614:	46c3      	mov	fp, r8
  406616:	e516      	b.n	406046 <_svfprintf_r+0xcd6>
  406618:	2c06      	cmp	r4, #6
  40661a:	970c      	str	r7, [sp, #48]	; 0x30
  40661c:	9310      	str	r3, [sp, #64]	; 0x40
  40661e:	461f      	mov	r7, r3
  406620:	bf28      	it	cs
  406622:	2406      	movcs	r4, #6
  406624:	9711      	str	r7, [sp, #68]	; 0x44
  406626:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
  40662a:	9307      	str	r3, [sp, #28]
  40662c:	4b91      	ldr	r3, [pc, #580]	; (406874 <_svfprintf_r+0x1504>)
  40662e:	930f      	str	r3, [sp, #60]	; 0x3c
  406630:	f7fe bfb1 	b.w	405596 <_svfprintf_r+0x226>
  406634:	4f8e      	ldr	r7, [pc, #568]	; (406870 <_svfprintf_r+0x1500>)
  406636:	f7ff b8b5 	b.w	4057a4 <_svfprintf_r+0x434>
  40663a:	232d      	movs	r3, #45	; 0x2d
  40663c:	461f      	mov	r7, r3
  40663e:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  406642:	f7ff ba7a 	b.w	405b3a <_svfprintf_r+0x7ca>
  406646:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  406648:	272d      	movs	r7, #45	; 0x2d
  40664a:	f8cd c01c 	str.w	ip, [sp, #28]
  40664e:	9306      	str	r3, [sp, #24]
  406650:	2300      	movs	r3, #0
  406652:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
  406656:	9310      	str	r3, [sp, #64]	; 0x40
  406658:	f7fe bf9e 	b.w	405598 <_svfprintf_r+0x228>
  40665c:	2e65      	cmp	r6, #101	; 0x65
  40665e:	dd56      	ble.n	40670e <_svfprintf_r+0x139e>
  406660:	2e66      	cmp	r6, #102	; 0x66
  406662:	9311      	str	r3, [sp, #68]	; 0x44
  406664:	f47f aeef 	bne.w	406446 <_svfprintf_r+0x10d6>
  406668:	2b00      	cmp	r3, #0
  40666a:	f340 80d6 	ble.w	40681a <_svfprintf_r+0x14aa>
  40666e:	f1bc 0f00 	cmp.w	ip, #0
  406672:	f040 80c1 	bne.w	4067f8 <_svfprintf_r+0x1488>
  406676:	9b06      	ldr	r3, [sp, #24]
  406678:	07da      	lsls	r2, r3, #31
  40667a:	f100 80bd 	bmi.w	4067f8 <_svfprintf_r+0x1488>
  40667e:	9c11      	ldr	r4, [sp, #68]	; 0x44
  406680:	ea24 7ce4 	bic.w	ip, r4, r4, asr #31
  406684:	e6eb      	b.n	40645e <_svfprintf_r+0x10ee>
  406686:	2003      	movs	r0, #3
  406688:	a91d      	add	r1, sp, #116	; 0x74
  40668a:	463a      	mov	r2, r7
  40668c:	f8cd c004 	str.w	ip, [sp, #4]
  406690:	9000      	str	r0, [sp, #0]
  406692:	a81e      	add	r0, sp, #120	; 0x78
  406694:	9102      	str	r1, [sp, #8]
  406696:	a921      	add	r1, sp, #132	; 0x84
  406698:	462b      	mov	r3, r5
  40669a:	9003      	str	r0, [sp, #12]
  40669c:	9104      	str	r1, [sp, #16]
  40669e:	9809      	ldr	r0, [sp, #36]	; 0x24
  4066a0:	f8cd c01c 	str.w	ip, [sp, #28]
  4066a4:	f000 fa54 	bl	406b50 <_dtoa_r>
  4066a8:	f8dd c01c 	ldr.w	ip, [sp, #28]
  4066ac:	4602      	mov	r2, r0
  4066ae:	7803      	ldrb	r3, [r0, #0]
  4066b0:	4462      	add	r2, ip
  4066b2:	900f      	str	r0, [sp, #60]	; 0x3c
  4066b4:	2b30      	cmp	r3, #48	; 0x30
  4066b6:	9207      	str	r2, [sp, #28]
  4066b8:	f040 808b 	bne.w	4067d2 <_svfprintf_r+0x1462>
  4066bc:	4638      	mov	r0, r7
  4066be:	2200      	movs	r2, #0
  4066c0:	2300      	movs	r3, #0
  4066c2:	4629      	mov	r1, r5
  4066c4:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
  4066c8:	f04f 0401 	mov.w	r4, #1
  4066cc:	f003 fdc2 	bl	40a254 <__aeabi_dcmpeq>
  4066d0:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
  4066d4:	b108      	cbz	r0, 4066da <_svfprintf_r+0x136a>
  4066d6:	f04f 0400 	mov.w	r4, #0
  4066da:	f014 0fff 	tst.w	r4, #255	; 0xff
  4066de:	d078      	beq.n	4067d2 <_svfprintf_r+0x1462>
  4066e0:	f1cc 0401 	rsb	r4, ip, #1
  4066e4:	941d      	str	r4, [sp, #116]	; 0x74
  4066e6:	9b07      	ldr	r3, [sp, #28]
  4066e8:	4423      	add	r3, r4
  4066ea:	461c      	mov	r4, r3
  4066ec:	e683      	b.n	4063f6 <_svfprintf_r+0x1086>
  4066ee:	4d62      	ldr	r5, [pc, #392]	; (406878 <_svfprintf_r+0x1508>)
  4066f0:	f7ff bb2a 	b.w	405d48 <_svfprintf_r+0x9d8>
  4066f4:	4623      	mov	r3, r4
  4066f6:	e695      	b.n	406424 <_svfprintf_r+0x10b4>
  4066f8:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
  4066fc:	970c      	str	r7, [sp, #48]	; 0x30
  4066fe:	9010      	str	r0, [sp, #64]	; 0x40
  406700:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  406704:	9307      	str	r3, [sp, #28]
  406706:	9011      	str	r0, [sp, #68]	; 0x44
  406708:	f7fe bf45 	b.w	405596 <_svfprintf_r+0x226>
  40670c:	3e02      	subs	r6, #2
  40670e:	3b01      	subs	r3, #1
  406710:	f88d 607c 	strb.w	r6, [sp, #124]	; 0x7c
  406714:	2b00      	cmp	r3, #0
  406716:	931d      	str	r3, [sp, #116]	; 0x74
  406718:	db75      	blt.n	406806 <_svfprintf_r+0x1496>
  40671a:	222b      	movs	r2, #43	; 0x2b
  40671c:	f88d 207d 	strb.w	r2, [sp, #125]	; 0x7d
  406720:	2b09      	cmp	r3, #9
  406722:	dd61      	ble.n	4067e8 <_svfprintf_r+0x1478>
  406724:	f10d 008b 	add.w	r0, sp, #139	; 0x8b
  406728:	4601      	mov	r1, r0
  40672a:	4a54      	ldr	r2, [pc, #336]	; (40687c <_svfprintf_r+0x150c>)
  40672c:	fb82 2403 	smull	r2, r4, r2, r3
  406730:	17da      	asrs	r2, r3, #31
  406732:	ebc2 04a4 	rsb	r4, r2, r4, asr #2
  406736:	eb04 0284 	add.w	r2, r4, r4, lsl #2
  40673a:	2c09      	cmp	r4, #9
  40673c:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
  406740:	4623      	mov	r3, r4
  406742:	f102 0230 	add.w	r2, r2, #48	; 0x30
  406746:	f801 2d01 	strb.w	r2, [r1, #-1]!
  40674a:	dcee      	bgt.n	40672a <_svfprintf_r+0x13ba>
  40674c:	3330      	adds	r3, #48	; 0x30
  40674e:	460a      	mov	r2, r1
  406750:	b2db      	uxtb	r3, r3
  406752:	f802 3d01 	strb.w	r3, [r2, #-1]!
  406756:	4290      	cmp	r0, r2
  406758:	d97e      	bls.n	406858 <_svfprintf_r+0x14e8>
  40675a:	460a      	mov	r2, r1
  40675c:	f10d 047e 	add.w	r4, sp, #126	; 0x7e
  406760:	e001      	b.n	406766 <_svfprintf_r+0x13f6>
  406762:	f812 3b01 	ldrb.w	r3, [r2], #1
  406766:	4282      	cmp	r2, r0
  406768:	f804 3b01 	strb.w	r3, [r4], #1
  40676c:	d1f9      	bne.n	406762 <_svfprintf_r+0x13f2>
  40676e:	ab23      	add	r3, sp, #140	; 0x8c
  406770:	f10d 027e 	add.w	r2, sp, #126	; 0x7e
  406774:	1a5b      	subs	r3, r3, r1
  406776:	4413      	add	r3, r2
  406778:	aa1f      	add	r2, sp, #124	; 0x7c
  40677a:	1a9b      	subs	r3, r3, r2
  40677c:	9a12      	ldr	r2, [sp, #72]	; 0x48
  40677e:	2a01      	cmp	r2, #1
  406780:	9319      	str	r3, [sp, #100]	; 0x64
  406782:	eb02 0403 	add.w	r4, r2, r3
  406786:	dd43      	ble.n	406810 <_svfprintf_r+0x14a0>
  406788:	3401      	adds	r4, #1
  40678a:	2300      	movs	r3, #0
  40678c:	9311      	str	r3, [sp, #68]	; 0x44
  40678e:	ea24 7ce4 	bic.w	ip, r4, r4, asr #31
  406792:	e664      	b.n	40645e <_svfprintf_r+0x10ee>
  406794:	9809      	ldr	r0, [sp, #36]	; 0x24
  406796:	4649      	mov	r1, r9
  406798:	aa23      	add	r2, sp, #140	; 0x8c
  40679a:	f002 ff79 	bl	409690 <__ssprint_r>
  40679e:	2800      	cmp	r0, #0
  4067a0:	f47e aeab 	bne.w	4054fa <_svfprintf_r+0x18a>
  4067a4:	9c1d      	ldr	r4, [sp, #116]	; 0x74
  4067a6:	46c3      	mov	fp, r8
  4067a8:	9a25      	ldr	r2, [sp, #148]	; 0x94
  4067aa:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4067ac:	e5a8      	b.n	406300 <_svfprintf_r+0xf90>
  4067ae:	9b14      	ldr	r3, [sp, #80]	; 0x50
  4067b0:	9f13      	ldr	r7, [sp, #76]	; 0x4c
  4067b2:	f103 4500 	add.w	r5, r3, #2147483648	; 0x80000000
  4067b6:	232d      	movs	r3, #45	; 0x2d
  4067b8:	930d      	str	r3, [sp, #52]	; 0x34
  4067ba:	e69c      	b.n	4064f6 <_svfprintf_r+0x1186>
  4067bc:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4067be:	2b00      	cmp	r3, #0
  4067c0:	dd35      	ble.n	40682e <_svfprintf_r+0x14be>
  4067c2:	2401      	movs	r4, #1
  4067c4:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4067c6:	441c      	add	r4, r3
  4067c8:	ea24 7ce4 	bic.w	ip, r4, r4, asr #31
  4067cc:	e647      	b.n	40645e <_svfprintf_r+0x10ee>
  4067ce:	4d2a      	ldr	r5, [pc, #168]	; (406878 <_svfprintf_r+0x1508>)
  4067d0:	e413      	b.n	405ffa <_svfprintf_r+0xc8a>
  4067d2:	9c1d      	ldr	r4, [sp, #116]	; 0x74
  4067d4:	e787      	b.n	4066e6 <_svfprintf_r+0x1376>
  4067d6:	9b21      	ldr	r3, [sp, #132]	; 0x84
  4067d8:	e624      	b.n	406424 <_svfprintf_r+0x10b4>
  4067da:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4067dc:	1c5c      	adds	r4, r3, #1
  4067de:	ea24 7ce4 	bic.w	ip, r4, r4, asr #31
  4067e2:	e63c      	b.n	40645e <_svfprintf_r+0x10ee>
  4067e4:	4d24      	ldr	r5, [pc, #144]	; (406878 <_svfprintf_r+0x1508>)
  4067e6:	e420      	b.n	40602a <_svfprintf_r+0xcba>
  4067e8:	3330      	adds	r3, #48	; 0x30
  4067ea:	2230      	movs	r2, #48	; 0x30
  4067ec:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
  4067f0:	ab20      	add	r3, sp, #128	; 0x80
  4067f2:	f88d 207e 	strb.w	r2, [sp, #126]	; 0x7e
  4067f6:	e7bf      	b.n	406778 <_svfprintf_r+0x1408>
  4067f8:	f10c 0401 	add.w	r4, ip, #1
  4067fc:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4067fe:	441c      	add	r4, r3
  406800:	ea24 7ce4 	bic.w	ip, r4, r4, asr #31
  406804:	e62b      	b.n	40645e <_svfprintf_r+0x10ee>
  406806:	222d      	movs	r2, #45	; 0x2d
  406808:	425b      	negs	r3, r3
  40680a:	f88d 207d 	strb.w	r2, [sp, #125]	; 0x7d
  40680e:	e787      	b.n	406720 <_svfprintf_r+0x13b0>
  406810:	9b06      	ldr	r3, [sp, #24]
  406812:	f013 0301 	ands.w	r3, r3, #1
  406816:	d0b9      	beq.n	40678c <_svfprintf_r+0x141c>
  406818:	e7b6      	b.n	406788 <_svfprintf_r+0x1418>
  40681a:	f1bc 0f00 	cmp.w	ip, #0
  40681e:	d109      	bne.n	406834 <_svfprintf_r+0x14c4>
  406820:	9b06      	ldr	r3, [sp, #24]
  406822:	07db      	lsls	r3, r3, #31
  406824:	d406      	bmi.n	406834 <_svfprintf_r+0x14c4>
  406826:	f04f 0c01 	mov.w	ip, #1
  40682a:	4664      	mov	r4, ip
  40682c:	e617      	b.n	40645e <_svfprintf_r+0x10ee>
  40682e:	f1c3 0402 	rsb	r4, r3, #2
  406832:	e7c7      	b.n	4067c4 <_svfprintf_r+0x1454>
  406834:	f10c 0402 	add.w	r4, ip, #2
  406838:	ea24 7ce4 	bic.w	ip, r4, r4, asr #31
  40683c:	e60f      	b.n	40645e <_svfprintf_r+0x10ee>
  40683e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  406840:	785e      	ldrb	r6, [r3, #1]
  406842:	4628      	mov	r0, r5
  406844:	682c      	ldr	r4, [r5, #0]
  406846:	3004      	adds	r0, #4
  406848:	2c00      	cmp	r4, #0
  40684a:	900c      	str	r0, [sp, #48]	; 0x30
  40684c:	f6be ade5 	bge.w	40541a <_svfprintf_r+0xaa>
  406850:	f04f 34ff 	mov.w	r4, #4294967295
  406854:	f7fe bde1 	b.w	40541a <_svfprintf_r+0xaa>
  406858:	f10d 037e 	add.w	r3, sp, #126	; 0x7e
  40685c:	e78c      	b.n	406778 <_svfprintf_r+0x1408>
  40685e:	230c      	movs	r3, #12
  406860:	9a09      	ldr	r2, [sp, #36]	; 0x24
  406862:	f04f 30ff 	mov.w	r0, #4294967295
  406866:	6013      	str	r3, [r2, #0]
  406868:	f7fe be50 	b.w	40550c <_svfprintf_r+0x19c>
  40686c:	4664      	mov	r4, ip
  40686e:	e663      	b.n	406538 <_svfprintf_r+0x11c8>
  406870:	0040ab74 	.word	0x0040ab74
  406874:	0040abbc 	.word	0x0040abbc
  406878:	0040ab64 	.word	0x0040ab64
  40687c:	66666667 	.word	0x66666667

00406880 <__swbuf_r>:
  406880:	b570      	push	{r4, r5, r6, lr}
  406882:	460d      	mov	r5, r1
  406884:	4614      	mov	r4, r2
  406886:	4606      	mov	r6, r0
  406888:	b110      	cbz	r0, 406890 <__swbuf_r+0x10>
  40688a:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40688c:	2b00      	cmp	r3, #0
  40688e:	d048      	beq.n	406922 <__swbuf_r+0xa2>
  406890:	89a2      	ldrh	r2, [r4, #12]
  406892:	69a3      	ldr	r3, [r4, #24]
  406894:	b291      	uxth	r1, r2
  406896:	60a3      	str	r3, [r4, #8]
  406898:	0708      	lsls	r0, r1, #28
  40689a:	d538      	bpl.n	40690e <__swbuf_r+0x8e>
  40689c:	6923      	ldr	r3, [r4, #16]
  40689e:	2b00      	cmp	r3, #0
  4068a0:	d035      	beq.n	40690e <__swbuf_r+0x8e>
  4068a2:	0489      	lsls	r1, r1, #18
  4068a4:	b2ed      	uxtb	r5, r5
  4068a6:	d515      	bpl.n	4068d4 <__swbuf_r+0x54>
  4068a8:	6822      	ldr	r2, [r4, #0]
  4068aa:	6961      	ldr	r1, [r4, #20]
  4068ac:	1ad3      	subs	r3, r2, r3
  4068ae:	428b      	cmp	r3, r1
  4068b0:	da1c      	bge.n	4068ec <__swbuf_r+0x6c>
  4068b2:	3301      	adds	r3, #1
  4068b4:	68a1      	ldr	r1, [r4, #8]
  4068b6:	1c50      	adds	r0, r2, #1
  4068b8:	3901      	subs	r1, #1
  4068ba:	6020      	str	r0, [r4, #0]
  4068bc:	60a1      	str	r1, [r4, #8]
  4068be:	7015      	strb	r5, [r2, #0]
  4068c0:	6962      	ldr	r2, [r4, #20]
  4068c2:	429a      	cmp	r2, r3
  4068c4:	d01a      	beq.n	4068fc <__swbuf_r+0x7c>
  4068c6:	2d0a      	cmp	r5, #10
  4068c8:	d102      	bne.n	4068d0 <__swbuf_r+0x50>
  4068ca:	7b23      	ldrb	r3, [r4, #12]
  4068cc:	07db      	lsls	r3, r3, #31
  4068ce:	d415      	bmi.n	4068fc <__swbuf_r+0x7c>
  4068d0:	4628      	mov	r0, r5
  4068d2:	bd70      	pop	{r4, r5, r6, pc}
  4068d4:	6e61      	ldr	r1, [r4, #100]	; 0x64
  4068d6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  4068da:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  4068de:	81a2      	strh	r2, [r4, #12]
  4068e0:	6822      	ldr	r2, [r4, #0]
  4068e2:	6661      	str	r1, [r4, #100]	; 0x64
  4068e4:	1ad3      	subs	r3, r2, r3
  4068e6:	6961      	ldr	r1, [r4, #20]
  4068e8:	428b      	cmp	r3, r1
  4068ea:	dbe2      	blt.n	4068b2 <__swbuf_r+0x32>
  4068ec:	4630      	mov	r0, r6
  4068ee:	4621      	mov	r1, r4
  4068f0:	f001 f946 	bl	407b80 <_fflush_r>
  4068f4:	b940      	cbnz	r0, 406908 <__swbuf_r+0x88>
  4068f6:	6822      	ldr	r2, [r4, #0]
  4068f8:	2301      	movs	r3, #1
  4068fa:	e7db      	b.n	4068b4 <__swbuf_r+0x34>
  4068fc:	4630      	mov	r0, r6
  4068fe:	4621      	mov	r1, r4
  406900:	f001 f93e 	bl	407b80 <_fflush_r>
  406904:	2800      	cmp	r0, #0
  406906:	d0e3      	beq.n	4068d0 <__swbuf_r+0x50>
  406908:	f04f 30ff 	mov.w	r0, #4294967295
  40690c:	bd70      	pop	{r4, r5, r6, pc}
  40690e:	4630      	mov	r0, r6
  406910:	4621      	mov	r1, r4
  406912:	f000 f809 	bl	406928 <__swsetup_r>
  406916:	2800      	cmp	r0, #0
  406918:	d1f6      	bne.n	406908 <__swbuf_r+0x88>
  40691a:	89a2      	ldrh	r2, [r4, #12]
  40691c:	6923      	ldr	r3, [r4, #16]
  40691e:	b291      	uxth	r1, r2
  406920:	e7bf      	b.n	4068a2 <__swbuf_r+0x22>
  406922:	f001 f9c7 	bl	407cb4 <__sinit>
  406926:	e7b3      	b.n	406890 <__swbuf_r+0x10>

00406928 <__swsetup_r>:
  406928:	b538      	push	{r3, r4, r5, lr}
  40692a:	4b2f      	ldr	r3, [pc, #188]	; (4069e8 <__swsetup_r+0xc0>)
  40692c:	4605      	mov	r5, r0
  40692e:	460c      	mov	r4, r1
  406930:	6818      	ldr	r0, [r3, #0]
  406932:	b110      	cbz	r0, 40693a <__swsetup_r+0x12>
  406934:	6b83      	ldr	r3, [r0, #56]	; 0x38
  406936:	2b00      	cmp	r3, #0
  406938:	d036      	beq.n	4069a8 <__swsetup_r+0x80>
  40693a:	89a2      	ldrh	r2, [r4, #12]
  40693c:	b293      	uxth	r3, r2
  40693e:	0718      	lsls	r0, r3, #28
  406940:	d50b      	bpl.n	40695a <__swsetup_r+0x32>
  406942:	6920      	ldr	r0, [r4, #16]
  406944:	b1a0      	cbz	r0, 406970 <__swsetup_r+0x48>
  406946:	f013 0201 	ands.w	r2, r3, #1
  40694a:	d11d      	bne.n	406988 <__swsetup_r+0x60>
  40694c:	0799      	lsls	r1, r3, #30
  40694e:	d400      	bmi.n	406952 <__swsetup_r+0x2a>
  406950:	6962      	ldr	r2, [r4, #20]
  406952:	60a2      	str	r2, [r4, #8]
  406954:	b1f8      	cbz	r0, 406996 <__swsetup_r+0x6e>
  406956:	2000      	movs	r0, #0
  406958:	bd38      	pop	{r3, r4, r5, pc}
  40695a:	06d9      	lsls	r1, r3, #27
  40695c:	d53b      	bpl.n	4069d6 <__swsetup_r+0xae>
  40695e:	0758      	lsls	r0, r3, #29
  406960:	d425      	bmi.n	4069ae <__swsetup_r+0x86>
  406962:	6920      	ldr	r0, [r4, #16]
  406964:	f042 0208 	orr.w	r2, r2, #8
  406968:	b293      	uxth	r3, r2
  40696a:	81a2      	strh	r2, [r4, #12]
  40696c:	2800      	cmp	r0, #0
  40696e:	d1ea      	bne.n	406946 <__swsetup_r+0x1e>
  406970:	f403 7220 	and.w	r2, r3, #640	; 0x280
  406974:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  406978:	d0e5      	beq.n	406946 <__swsetup_r+0x1e>
  40697a:	4628      	mov	r0, r5
  40697c:	4621      	mov	r1, r4
  40697e:	f001 fc9d 	bl	4082bc <__smakebuf_r>
  406982:	89a3      	ldrh	r3, [r4, #12]
  406984:	6920      	ldr	r0, [r4, #16]
  406986:	e7de      	b.n	406946 <__swsetup_r+0x1e>
  406988:	6963      	ldr	r3, [r4, #20]
  40698a:	2200      	movs	r2, #0
  40698c:	425b      	negs	r3, r3
  40698e:	60a2      	str	r2, [r4, #8]
  406990:	61a3      	str	r3, [r4, #24]
  406992:	2800      	cmp	r0, #0
  406994:	d1df      	bne.n	406956 <__swsetup_r+0x2e>
  406996:	89a3      	ldrh	r3, [r4, #12]
  406998:	061a      	lsls	r2, r3, #24
  40699a:	d5dd      	bpl.n	406958 <__swsetup_r+0x30>
  40699c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4069a0:	f04f 30ff 	mov.w	r0, #4294967295
  4069a4:	81a3      	strh	r3, [r4, #12]
  4069a6:	bd38      	pop	{r3, r4, r5, pc}
  4069a8:	f001 f984 	bl	407cb4 <__sinit>
  4069ac:	e7c5      	b.n	40693a <__swsetup_r+0x12>
  4069ae:	6b21      	ldr	r1, [r4, #48]	; 0x30
  4069b0:	b149      	cbz	r1, 4069c6 <__swsetup_r+0x9e>
  4069b2:	f104 0340 	add.w	r3, r4, #64	; 0x40
  4069b6:	4299      	cmp	r1, r3
  4069b8:	d003      	beq.n	4069c2 <__swsetup_r+0x9a>
  4069ba:	4628      	mov	r0, r5
  4069bc:	f001 f9e8 	bl	407d90 <_free_r>
  4069c0:	89a2      	ldrh	r2, [r4, #12]
  4069c2:	2300      	movs	r3, #0
  4069c4:	6323      	str	r3, [r4, #48]	; 0x30
  4069c6:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  4069ca:	2300      	movs	r3, #0
  4069cc:	6920      	ldr	r0, [r4, #16]
  4069ce:	b292      	uxth	r2, r2
  4069d0:	e884 0009 	stmia.w	r4, {r0, r3}
  4069d4:	e7c6      	b.n	406964 <__swsetup_r+0x3c>
  4069d6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  4069da:	2309      	movs	r3, #9
  4069dc:	f04f 30ff 	mov.w	r0, #4294967295
  4069e0:	602b      	str	r3, [r5, #0]
  4069e2:	81a2      	strh	r2, [r4, #12]
  4069e4:	bd38      	pop	{r3, r4, r5, pc}
  4069e6:	bf00      	nop
  4069e8:	204004b8 	.word	0x204004b8

004069ec <register_fini>:
  4069ec:	4b02      	ldr	r3, [pc, #8]	; (4069f8 <register_fini+0xc>)
  4069ee:	b113      	cbz	r3, 4069f6 <register_fini+0xa>
  4069f0:	4802      	ldr	r0, [pc, #8]	; (4069fc <register_fini+0x10>)
  4069f2:	f000 b805 	b.w	406a00 <atexit>
  4069f6:	4770      	bx	lr
  4069f8:	00000000 	.word	0x00000000
  4069fc:	00407cc9 	.word	0x00407cc9

00406a00 <atexit>:
  406a00:	4601      	mov	r1, r0
  406a02:	2000      	movs	r0, #0
  406a04:	4602      	mov	r2, r0
  406a06:	4603      	mov	r3, r0
  406a08:	f002 bede 	b.w	4097c8 <__register_exitproc>

00406a0c <quorem>:
  406a0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  406a10:	6903      	ldr	r3, [r0, #16]
  406a12:	b083      	sub	sp, #12
  406a14:	690f      	ldr	r7, [r1, #16]
  406a16:	429f      	cmp	r7, r3
  406a18:	f300 8093 	bgt.w	406b42 <quorem+0x136>
  406a1c:	3f01      	subs	r7, #1
  406a1e:	f101 0614 	add.w	r6, r1, #20
  406a22:	f100 0a14 	add.w	sl, r0, #20
  406a26:	00bb      	lsls	r3, r7, #2
  406a28:	f856 2027 	ldr.w	r2, [r6, r7, lsl #2]
  406a2c:	461d      	mov	r5, r3
  406a2e:	9300      	str	r3, [sp, #0]
  406a30:	3201      	adds	r2, #1
  406a32:	f85a 3027 	ldr.w	r3, [sl, r7, lsl #2]
  406a36:	eb0a 0405 	add.w	r4, sl, r5
  406a3a:	eb06 0905 	add.w	r9, r6, r5
  406a3e:	fbb3 f8f2 	udiv	r8, r3, r2
  406a42:	9401      	str	r4, [sp, #4]
  406a44:	f1b8 0f00 	cmp.w	r8, #0
  406a48:	d040      	beq.n	406acc <quorem+0xc0>
  406a4a:	2500      	movs	r5, #0
  406a4c:	46b4      	mov	ip, r6
  406a4e:	46d6      	mov	lr, sl
  406a50:	462b      	mov	r3, r5
  406a52:	f85c bb04 	ldr.w	fp, [ip], #4
  406a56:	f8de 2000 	ldr.w	r2, [lr]
  406a5a:	fa1f f48b 	uxth.w	r4, fp
  406a5e:	45e1      	cmp	r9, ip
  406a60:	ea4f 4b1b 	mov.w	fp, fp, lsr #16
  406a64:	fb04 5508 	mla	r5, r4, r8, r5
  406a68:	fb0b fb08 	mul.w	fp, fp, r8
  406a6c:	b2ac      	uxth	r4, r5
  406a6e:	eb0b 4515 	add.w	r5, fp, r5, lsr #16
  406a72:	eba3 0304 	sub.w	r3, r3, r4
  406a76:	fa1f fb85 	uxth.w	fp, r5
  406a7a:	fa13 f482 	uxtah	r4, r3, r2
  406a7e:	ea4f 4515 	mov.w	r5, r5, lsr #16
  406a82:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
  406a86:	fa1f fb84 	uxth.w	fp, r4
  406a8a:	eb02 4324 	add.w	r3, r2, r4, asr #16
  406a8e:	ea4b 4203 	orr.w	r2, fp, r3, lsl #16
  406a92:	ea4f 4323 	mov.w	r3, r3, asr #16
  406a96:	f84e 2b04 	str.w	r2, [lr], #4
  406a9a:	d2da      	bcs.n	406a52 <quorem+0x46>
  406a9c:	9b00      	ldr	r3, [sp, #0]
  406a9e:	f85a 3003 	ldr.w	r3, [sl, r3]
  406aa2:	b99b      	cbnz	r3, 406acc <quorem+0xc0>
  406aa4:	9c01      	ldr	r4, [sp, #4]
  406aa6:	1f23      	subs	r3, r4, #4
  406aa8:	459a      	cmp	sl, r3
  406aaa:	d20e      	bcs.n	406aca <quorem+0xbe>
  406aac:	f854 3c04 	ldr.w	r3, [r4, #-4]
  406ab0:	b95b      	cbnz	r3, 406aca <quorem+0xbe>
  406ab2:	f1a4 0308 	sub.w	r3, r4, #8
  406ab6:	e001      	b.n	406abc <quorem+0xb0>
  406ab8:	6812      	ldr	r2, [r2, #0]
  406aba:	b932      	cbnz	r2, 406aca <quorem+0xbe>
  406abc:	459a      	cmp	sl, r3
  406abe:	461a      	mov	r2, r3
  406ac0:	f107 37ff 	add.w	r7, r7, #4294967295
  406ac4:	f1a3 0304 	sub.w	r3, r3, #4
  406ac8:	d3f6      	bcc.n	406ab8 <quorem+0xac>
  406aca:	6107      	str	r7, [r0, #16]
  406acc:	4604      	mov	r4, r0
  406ace:	f002 fa81 	bl	408fd4 <__mcmp>
  406ad2:	2800      	cmp	r0, #0
  406ad4:	db31      	blt.n	406b3a <quorem+0x12e>
  406ad6:	f108 0801 	add.w	r8, r8, #1
  406ada:	4655      	mov	r5, sl
  406adc:	2000      	movs	r0, #0
  406ade:	f856 1b04 	ldr.w	r1, [r6], #4
  406ae2:	682a      	ldr	r2, [r5, #0]
  406ae4:	b28b      	uxth	r3, r1
  406ae6:	45b1      	cmp	r9, r6
  406ae8:	ea4f 4111 	mov.w	r1, r1, lsr #16
  406aec:	eba0 0303 	sub.w	r3, r0, r3
  406af0:	ebc1 4112 	rsb	r1, r1, r2, lsr #16
  406af4:	fa13 f382 	uxtah	r3, r3, r2
  406af8:	eb01 4223 	add.w	r2, r1, r3, asr #16
  406afc:	b29b      	uxth	r3, r3
  406afe:	ea4f 4022 	mov.w	r0, r2, asr #16
  406b02:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  406b06:	f845 3b04 	str.w	r3, [r5], #4
  406b0a:	d2e8      	bcs.n	406ade <quorem+0xd2>
  406b0c:	f85a 2027 	ldr.w	r2, [sl, r7, lsl #2]
  406b10:	eb0a 0387 	add.w	r3, sl, r7, lsl #2
  406b14:	b98a      	cbnz	r2, 406b3a <quorem+0x12e>
  406b16:	1f1a      	subs	r2, r3, #4
  406b18:	4592      	cmp	sl, r2
  406b1a:	d20d      	bcs.n	406b38 <quorem+0x12c>
  406b1c:	f853 2c04 	ldr.w	r2, [r3, #-4]
  406b20:	b952      	cbnz	r2, 406b38 <quorem+0x12c>
  406b22:	3b08      	subs	r3, #8
  406b24:	e001      	b.n	406b2a <quorem+0x11e>
  406b26:	6812      	ldr	r2, [r2, #0]
  406b28:	b932      	cbnz	r2, 406b38 <quorem+0x12c>
  406b2a:	459a      	cmp	sl, r3
  406b2c:	461a      	mov	r2, r3
  406b2e:	f107 37ff 	add.w	r7, r7, #4294967295
  406b32:	f1a3 0304 	sub.w	r3, r3, #4
  406b36:	d3f6      	bcc.n	406b26 <quorem+0x11a>
  406b38:	6127      	str	r7, [r4, #16]
  406b3a:	4640      	mov	r0, r8
  406b3c:	b003      	add	sp, #12
  406b3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406b42:	2000      	movs	r0, #0
  406b44:	b003      	add	sp, #12
  406b46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406b4a:	bf00      	nop
  406b4c:	0000      	movs	r0, r0
	...

00406b50 <_dtoa_r>:
  406b50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  406b54:	469b      	mov	fp, r3
  406b56:	b099      	sub	sp, #100	; 0x64
  406b58:	6c03      	ldr	r3, [r0, #64]	; 0x40
  406b5a:	4604      	mov	r4, r0
  406b5c:	4692      	mov	sl, r2
  406b5e:	9d25      	ldr	r5, [sp, #148]	; 0x94
  406b60:	b14b      	cbz	r3, 406b76 <_dtoa_r+0x26>
  406b62:	6c46      	ldr	r6, [r0, #68]	; 0x44
  406b64:	2201      	movs	r2, #1
  406b66:	4619      	mov	r1, r3
  406b68:	40b2      	lsls	r2, r6
  406b6a:	605e      	str	r6, [r3, #4]
  406b6c:	609a      	str	r2, [r3, #8]
  406b6e:	f002 f83b 	bl	408be8 <_Bfree>
  406b72:	2300      	movs	r3, #0
  406b74:	6423      	str	r3, [r4, #64]	; 0x40
  406b76:	f1bb 0f00 	cmp.w	fp, #0
  406b7a:	46d9      	mov	r9, fp
  406b7c:	db33      	blt.n	406be6 <_dtoa_r+0x96>
  406b7e:	2300      	movs	r3, #0
  406b80:	602b      	str	r3, [r5, #0]
  406b82:	4b99      	ldr	r3, [pc, #612]	; (406de8 <_dtoa_r+0x298>)
  406b84:	461a      	mov	r2, r3
  406b86:	ea09 0303 	and.w	r3, r9, r3
  406b8a:	4293      	cmp	r3, r2
  406b8c:	d014      	beq.n	406bb8 <_dtoa_r+0x68>
  406b8e:	2200      	movs	r2, #0
  406b90:	2300      	movs	r3, #0
  406b92:	4650      	mov	r0, sl
  406b94:	4659      	mov	r1, fp
  406b96:	f003 fb5d 	bl	40a254 <__aeabi_dcmpeq>
  406b9a:	4680      	mov	r8, r0
  406b9c:	b348      	cbz	r0, 406bf2 <_dtoa_r+0xa2>
  406b9e:	2301      	movs	r3, #1
  406ba0:	9a24      	ldr	r2, [sp, #144]	; 0x90
  406ba2:	6013      	str	r3, [r2, #0]
  406ba4:	9b26      	ldr	r3, [sp, #152]	; 0x98
  406ba6:	2b00      	cmp	r3, #0
  406ba8:	f000 80cb 	beq.w	406d42 <_dtoa_r+0x1f2>
  406bac:	488f      	ldr	r0, [pc, #572]	; (406dec <_dtoa_r+0x29c>)
  406bae:	6018      	str	r0, [r3, #0]
  406bb0:	3801      	subs	r0, #1
  406bb2:	b019      	add	sp, #100	; 0x64
  406bb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406bb8:	f242 730f 	movw	r3, #9999	; 0x270f
  406bbc:	9a24      	ldr	r2, [sp, #144]	; 0x90
  406bbe:	6013      	str	r3, [r2, #0]
  406bc0:	f1ba 0f00 	cmp.w	sl, #0
  406bc4:	f000 80a6 	beq.w	406d14 <_dtoa_r+0x1c4>
  406bc8:	4889      	ldr	r0, [pc, #548]	; (406df0 <_dtoa_r+0x2a0>)
  406bca:	9b26      	ldr	r3, [sp, #152]	; 0x98
  406bcc:	2b00      	cmp	r3, #0
  406bce:	d0f0      	beq.n	406bb2 <_dtoa_r+0x62>
  406bd0:	78c3      	ldrb	r3, [r0, #3]
  406bd2:	2b00      	cmp	r3, #0
  406bd4:	f000 80b7 	beq.w	406d46 <_dtoa_r+0x1f6>
  406bd8:	f100 0308 	add.w	r3, r0, #8
  406bdc:	9a26      	ldr	r2, [sp, #152]	; 0x98
  406bde:	6013      	str	r3, [r2, #0]
  406be0:	b019      	add	sp, #100	; 0x64
  406be2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406be6:	2301      	movs	r3, #1
  406be8:	f02b 4900 	bic.w	r9, fp, #2147483648	; 0x80000000
  406bec:	602b      	str	r3, [r5, #0]
  406bee:	46cb      	mov	fp, r9
  406bf0:	e7c7      	b.n	406b82 <_dtoa_r+0x32>
  406bf2:	ad17      	add	r5, sp, #92	; 0x5c
  406bf4:	a916      	add	r1, sp, #88	; 0x58
  406bf6:	4620      	mov	r0, r4
  406bf8:	4652      	mov	r2, sl
  406bfa:	9500      	str	r5, [sp, #0]
  406bfc:	465b      	mov	r3, fp
  406bfe:	9101      	str	r1, [sp, #4]
  406c00:	f002 fa7e 	bl	409100 <__d2b>
  406c04:	9006      	str	r0, [sp, #24]
  406c06:	ea5f 5519 	movs.w	r5, r9, lsr #20
  406c0a:	f040 808c 	bne.w	406d26 <_dtoa_r+0x1d6>
  406c0e:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
  406c12:	f46f 6382 	mvn.w	r3, #1040	; 0x410
  406c16:	9d17      	ldr	r5, [sp, #92]	; 0x5c
  406c18:	4445      	add	r5, r8
  406c1a:	429d      	cmp	r5, r3
  406c1c:	f2c0 81cc 	blt.w	406fb8 <_dtoa_r+0x468>
  406c20:	331f      	adds	r3, #31
  406c22:	f205 4212 	addw	r2, r5, #1042	; 0x412
  406c26:	1b5b      	subs	r3, r3, r5
  406c28:	fa2a f002 	lsr.w	r0, sl, r2
  406c2c:	fa09 f903 	lsl.w	r9, r9, r3
  406c30:	ea49 0000 	orr.w	r0, r9, r0
  406c34:	f003 f830 	bl	409c98 <__aeabi_ui2d>
  406c38:	3d01      	subs	r5, #1
  406c3a:	2301      	movs	r3, #1
  406c3c:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
  406c40:	9311      	str	r3, [sp, #68]	; 0x44
  406c42:	2200      	movs	r2, #0
  406c44:	4b6b      	ldr	r3, [pc, #428]	; (406df4 <_dtoa_r+0x2a4>)
  406c46:	f002 fee9 	bl	409a1c <__aeabi_dsub>
  406c4a:	a361      	add	r3, pc, #388	; (adr r3, 406dd0 <_dtoa_r+0x280>)
  406c4c:	e9d3 2300 	ldrd	r2, r3, [r3]
  406c50:	f003 f898 	bl	409d84 <__aeabi_dmul>
  406c54:	a360      	add	r3, pc, #384	; (adr r3, 406dd8 <_dtoa_r+0x288>)
  406c56:	e9d3 2300 	ldrd	r2, r3, [r3]
  406c5a:	f002 fee1 	bl	409a20 <__adddf3>
  406c5e:	4606      	mov	r6, r0
  406c60:	460f      	mov	r7, r1
  406c62:	4628      	mov	r0, r5
  406c64:	f003 f828 	bl	409cb8 <__aeabi_i2d>
  406c68:	a35d      	add	r3, pc, #372	; (adr r3, 406de0 <_dtoa_r+0x290>)
  406c6a:	e9d3 2300 	ldrd	r2, r3, [r3]
  406c6e:	f003 f889 	bl	409d84 <__aeabi_dmul>
  406c72:	4602      	mov	r2, r0
  406c74:	460b      	mov	r3, r1
  406c76:	4630      	mov	r0, r6
  406c78:	4639      	mov	r1, r7
  406c7a:	f002 fed1 	bl	409a20 <__adddf3>
  406c7e:	4606      	mov	r6, r0
  406c80:	460f      	mov	r7, r1
  406c82:	f003 fb19 	bl	40a2b8 <__aeabi_d2iz>
  406c86:	2200      	movs	r2, #0
  406c88:	9002      	str	r0, [sp, #8]
  406c8a:	4639      	mov	r1, r7
  406c8c:	4630      	mov	r0, r6
  406c8e:	2300      	movs	r3, #0
  406c90:	f003 faea 	bl	40a268 <__aeabi_dcmplt>
  406c94:	2800      	cmp	r0, #0
  406c96:	f040 8171 	bne.w	406f7c <_dtoa_r+0x42c>
  406c9a:	9b02      	ldr	r3, [sp, #8]
  406c9c:	2b16      	cmp	r3, #22
  406c9e:	f200 8091 	bhi.w	406dc4 <_dtoa_r+0x274>
  406ca2:	9802      	ldr	r0, [sp, #8]
  406ca4:	4652      	mov	r2, sl
  406ca6:	4954      	ldr	r1, [pc, #336]	; (406df8 <_dtoa_r+0x2a8>)
  406ca8:	465b      	mov	r3, fp
  406caa:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
  406cae:	e9d1 0100 	ldrd	r0, r1, [r1]
  406cb2:	f003 faf7 	bl	40a2a4 <__aeabi_dcmpgt>
  406cb6:	2800      	cmp	r0, #0
  406cb8:	f000 817c 	beq.w	406fb4 <_dtoa_r+0x464>
  406cbc:	9b02      	ldr	r3, [sp, #8]
  406cbe:	3b01      	subs	r3, #1
  406cc0:	9302      	str	r3, [sp, #8]
  406cc2:	2300      	movs	r3, #0
  406cc4:	930d      	str	r3, [sp, #52]	; 0x34
  406cc6:	ebc5 0508 	rsb	r5, r5, r8
  406cca:	1e6b      	subs	r3, r5, #1
  406ccc:	9303      	str	r3, [sp, #12]
  406cce:	f100 816c 	bmi.w	406faa <_dtoa_r+0x45a>
  406cd2:	2300      	movs	r3, #0
  406cd4:	9307      	str	r3, [sp, #28]
  406cd6:	9b02      	ldr	r3, [sp, #8]
  406cd8:	2b00      	cmp	r3, #0
  406cda:	f2c0 815d 	blt.w	406f98 <_dtoa_r+0x448>
  406cde:	9a03      	ldr	r2, [sp, #12]
  406ce0:	930c      	str	r3, [sp, #48]	; 0x30
  406ce2:	4611      	mov	r1, r2
  406ce4:	4419      	add	r1, r3
  406ce6:	2300      	movs	r3, #0
  406ce8:	9103      	str	r1, [sp, #12]
  406cea:	930a      	str	r3, [sp, #40]	; 0x28
  406cec:	9b22      	ldr	r3, [sp, #136]	; 0x88
  406cee:	2b09      	cmp	r3, #9
  406cf0:	d82b      	bhi.n	406d4a <_dtoa_r+0x1fa>
  406cf2:	2b05      	cmp	r3, #5
  406cf4:	f340 867e 	ble.w	4079f4 <_dtoa_r+0xea4>
  406cf8:	3b04      	subs	r3, #4
  406cfa:	2500      	movs	r5, #0
  406cfc:	9322      	str	r3, [sp, #136]	; 0x88
  406cfe:	9b22      	ldr	r3, [sp, #136]	; 0x88
  406d00:	3b02      	subs	r3, #2
  406d02:	2b03      	cmp	r3, #3
  406d04:	f200 8679 	bhi.w	4079fa <_dtoa_r+0xeaa>
  406d08:	e8df f013 	tbh	[pc, r3, lsl #1]
  406d0c:	0289029b 	.word	0x0289029b
  406d10:	068d0180 	.word	0x068d0180
  406d14:	f3c9 0013 	ubfx	r0, r9, #0, #20
  406d18:	4b35      	ldr	r3, [pc, #212]	; (406df0 <_dtoa_r+0x2a0>)
  406d1a:	4a38      	ldr	r2, [pc, #224]	; (406dfc <_dtoa_r+0x2ac>)
  406d1c:	2800      	cmp	r0, #0
  406d1e:	bf14      	ite	ne
  406d20:	4618      	movne	r0, r3
  406d22:	4610      	moveq	r0, r2
  406d24:	e751      	b.n	406bca <_dtoa_r+0x7a>
  406d26:	f3cb 0313 	ubfx	r3, fp, #0, #20
  406d2a:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
  406d2e:	4650      	mov	r0, sl
  406d30:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
  406d34:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
  406d38:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
  406d3c:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
  406d40:	e77f      	b.n	406c42 <_dtoa_r+0xf2>
  406d42:	482f      	ldr	r0, [pc, #188]	; (406e00 <_dtoa_r+0x2b0>)
  406d44:	e735      	b.n	406bb2 <_dtoa_r+0x62>
  406d46:	1cc3      	adds	r3, r0, #3
  406d48:	e748      	b.n	406bdc <_dtoa_r+0x8c>
  406d4a:	f04f 33ff 	mov.w	r3, #4294967295
  406d4e:	2100      	movs	r1, #0
  406d50:	4620      	mov	r0, r4
  406d52:	461d      	mov	r5, r3
  406d54:	9310      	str	r3, [sp, #64]	; 0x40
  406d56:	2301      	movs	r3, #1
  406d58:	6461      	str	r1, [r4, #68]	; 0x44
  406d5a:	9123      	str	r1, [sp, #140]	; 0x8c
  406d5c:	930b      	str	r3, [sp, #44]	; 0x2c
  406d5e:	f001 ff1b 	bl	408b98 <_Balloc>
  406d62:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  406d64:	9005      	str	r0, [sp, #20]
  406d66:	9322      	str	r3, [sp, #136]	; 0x88
  406d68:	9504      	str	r5, [sp, #16]
  406d6a:	6420      	str	r0, [r4, #64]	; 0x40
  406d6c:	9a02      	ldr	r2, [sp, #8]
  406d6e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  406d70:	2a0e      	cmp	r2, #14
  406d72:	dc49      	bgt.n	406e08 <_dtoa_r+0x2b8>
  406d74:	2b00      	cmp	r3, #0
  406d76:	db47      	blt.n	406e08 <_dtoa_r+0x2b8>
  406d78:	4b1f      	ldr	r3, [pc, #124]	; (406df8 <_dtoa_r+0x2a8>)
  406d7a:	9a02      	ldr	r2, [sp, #8]
  406d7c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  406d80:	e9d3 8900 	ldrd	r8, r9, [r3]
  406d84:	9b04      	ldr	r3, [sp, #16]
  406d86:	2b00      	cmp	r3, #0
  406d88:	f300 825e 	bgt.w	407248 <_dtoa_r+0x6f8>
  406d8c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  406d8e:	2b00      	cmp	r3, #0
  406d90:	f280 825a 	bge.w	407248 <_dtoa_r+0x6f8>
  406d94:	9b04      	ldr	r3, [sp, #16]
  406d96:	2b00      	cmp	r3, #0
  406d98:	f040 85bf 	bne.w	40791a <_dtoa_r+0xdca>
  406d9c:	2200      	movs	r2, #0
  406d9e:	4b19      	ldr	r3, [pc, #100]	; (406e04 <_dtoa_r+0x2b4>)
  406da0:	4640      	mov	r0, r8
  406da2:	4649      	mov	r1, r9
  406da4:	f002 ffee 	bl	409d84 <__aeabi_dmul>
  406da8:	4652      	mov	r2, sl
  406daa:	465b      	mov	r3, fp
  406dac:	f003 fa70 	bl	40a290 <__aeabi_dcmpge>
  406db0:	9f04      	ldr	r7, [sp, #16]
  406db2:	9708      	str	r7, [sp, #32]
  406db4:	2800      	cmp	r0, #0
  406db6:	f000 80bd 	beq.w	406f34 <_dtoa_r+0x3e4>
  406dba:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  406dbc:	9d05      	ldr	r5, [sp, #20]
  406dbe:	43db      	mvns	r3, r3
  406dc0:	9302      	str	r3, [sp, #8]
  406dc2:	e0be      	b.n	406f42 <_dtoa_r+0x3f2>
  406dc4:	2301      	movs	r3, #1
  406dc6:	930d      	str	r3, [sp, #52]	; 0x34
  406dc8:	e77d      	b.n	406cc6 <_dtoa_r+0x176>
  406dca:	bf00      	nop
  406dcc:	f3af 8000 	nop.w
  406dd0:	636f4361 	.word	0x636f4361
  406dd4:	3fd287a7 	.word	0x3fd287a7
  406dd8:	8b60c8b3 	.word	0x8b60c8b3
  406ddc:	3fc68a28 	.word	0x3fc68a28
  406de0:	509f79fb 	.word	0x509f79fb
  406de4:	3fd34413 	.word	0x3fd34413
  406de8:	7ff00000 	.word	0x7ff00000
  406dec:	0040abc5 	.word	0x0040abc5
  406df0:	0040abd4 	.word	0x0040abd4
  406df4:	3ff80000 	.word	0x3ff80000
  406df8:	0040abe8 	.word	0x0040abe8
  406dfc:	0040abc8 	.word	0x0040abc8
  406e00:	0040abc4 	.word	0x0040abc4
  406e04:	40140000 	.word	0x40140000
  406e08:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  406e0a:	2a00      	cmp	r2, #0
  406e0c:	f040 80e1 	bne.w	406fd2 <_dtoa_r+0x482>
  406e10:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  406e12:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  406e14:	9d07      	ldr	r5, [sp, #28]
  406e16:	9308      	str	r3, [sp, #32]
  406e18:	9903      	ldr	r1, [sp, #12]
  406e1a:	2900      	cmp	r1, #0
  406e1c:	460b      	mov	r3, r1
  406e1e:	dd0a      	ble.n	406e36 <_dtoa_r+0x2e6>
  406e20:	2d00      	cmp	r5, #0
  406e22:	dd08      	ble.n	406e36 <_dtoa_r+0x2e6>
  406e24:	42a9      	cmp	r1, r5
  406e26:	9a07      	ldr	r2, [sp, #28]
  406e28:	bfa8      	it	ge
  406e2a:	462b      	movge	r3, r5
  406e2c:	1ad2      	subs	r2, r2, r3
  406e2e:	1aed      	subs	r5, r5, r3
  406e30:	1acb      	subs	r3, r1, r3
  406e32:	9207      	str	r2, [sp, #28]
  406e34:	9303      	str	r3, [sp, #12]
  406e36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  406e38:	2b00      	cmp	r3, #0
  406e3a:	dd1b      	ble.n	406e74 <_dtoa_r+0x324>
  406e3c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  406e3e:	2b00      	cmp	r3, #0
  406e40:	f000 84ce 	beq.w	4077e0 <_dtoa_r+0xc90>
  406e44:	2e00      	cmp	r6, #0
  406e46:	dd11      	ble.n	406e6c <_dtoa_r+0x31c>
  406e48:	9908      	ldr	r1, [sp, #32]
  406e4a:	4632      	mov	r2, r6
  406e4c:	4620      	mov	r0, r4
  406e4e:	f002 f817 	bl	408e80 <__pow5mult>
  406e52:	9f06      	ldr	r7, [sp, #24]
  406e54:	4601      	mov	r1, r0
  406e56:	9008      	str	r0, [sp, #32]
  406e58:	463a      	mov	r2, r7
  406e5a:	4620      	mov	r0, r4
  406e5c:	f001 ff6e 	bl	408d3c <__multiply>
  406e60:	4603      	mov	r3, r0
  406e62:	4639      	mov	r1, r7
  406e64:	4620      	mov	r0, r4
  406e66:	9306      	str	r3, [sp, #24]
  406e68:	f001 febe 	bl	408be8 <_Bfree>
  406e6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  406e6e:	1b9a      	subs	r2, r3, r6
  406e70:	f040 84ff 	bne.w	407872 <_dtoa_r+0xd22>
  406e74:	4620      	mov	r0, r4
  406e76:	2101      	movs	r1, #1
  406e78:	f001 ff56 	bl	408d28 <__i2b>
  406e7c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  406e7e:	4607      	mov	r7, r0
  406e80:	2b00      	cmp	r3, #0
  406e82:	f340 8282 	ble.w	40738a <_dtoa_r+0x83a>
  406e86:	4601      	mov	r1, r0
  406e88:	461a      	mov	r2, r3
  406e8a:	4620      	mov	r0, r4
  406e8c:	f001 fff8 	bl	408e80 <__pow5mult>
  406e90:	9b22      	ldr	r3, [sp, #136]	; 0x88
  406e92:	4607      	mov	r7, r0
  406e94:	2b01      	cmp	r3, #1
  406e96:	f340 84f3 	ble.w	407880 <_dtoa_r+0xd30>
  406e9a:	f04f 0800 	mov.w	r8, #0
  406e9e:	693b      	ldr	r3, [r7, #16]
  406ea0:	eb07 0383 	add.w	r3, r7, r3, lsl #2
  406ea4:	6918      	ldr	r0, [r3, #16]
  406ea6:	f001 feeb 	bl	408c80 <__hi0bits>
  406eaa:	f1c0 0020 	rsb	r0, r0, #32
  406eae:	9b03      	ldr	r3, [sp, #12]
  406eb0:	4418      	add	r0, r3
  406eb2:	f010 001f 	ands.w	r0, r0, #31
  406eb6:	f000 82a0 	beq.w	4073fa <_dtoa_r+0x8aa>
  406eba:	f1c0 0320 	rsb	r3, r0, #32
  406ebe:	2b04      	cmp	r3, #4
  406ec0:	f340 8592 	ble.w	4079e8 <_dtoa_r+0xe98>
  406ec4:	f1c0 001c 	rsb	r0, r0, #28
  406ec8:	9b07      	ldr	r3, [sp, #28]
  406eca:	4405      	add	r5, r0
  406ecc:	4403      	add	r3, r0
  406ece:	9307      	str	r3, [sp, #28]
  406ed0:	9b03      	ldr	r3, [sp, #12]
  406ed2:	4403      	add	r3, r0
  406ed4:	9303      	str	r3, [sp, #12]
  406ed6:	9b07      	ldr	r3, [sp, #28]
  406ed8:	2b00      	cmp	r3, #0
  406eda:	dd05      	ble.n	406ee8 <_dtoa_r+0x398>
  406edc:	9906      	ldr	r1, [sp, #24]
  406ede:	461a      	mov	r2, r3
  406ee0:	4620      	mov	r0, r4
  406ee2:	f002 f81d 	bl	408f20 <__lshift>
  406ee6:	9006      	str	r0, [sp, #24]
  406ee8:	9b03      	ldr	r3, [sp, #12]
  406eea:	2b00      	cmp	r3, #0
  406eec:	dd05      	ble.n	406efa <_dtoa_r+0x3aa>
  406eee:	4639      	mov	r1, r7
  406ef0:	461a      	mov	r2, r3
  406ef2:	4620      	mov	r0, r4
  406ef4:	f002 f814 	bl	408f20 <__lshift>
  406ef8:	4607      	mov	r7, r0
  406efa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  406efc:	2b00      	cmp	r3, #0
  406efe:	f040 838b 	bne.w	407618 <_dtoa_r+0xac8>
  406f02:	9b22      	ldr	r3, [sp, #136]	; 0x88
  406f04:	2b02      	cmp	r3, #2
  406f06:	f340 827a 	ble.w	4073fe <_dtoa_r+0x8ae>
  406f0a:	9b04      	ldr	r3, [sp, #16]
  406f0c:	2b00      	cmp	r3, #0
  406f0e:	f300 8276 	bgt.w	4073fe <_dtoa_r+0x8ae>
  406f12:	9b04      	ldr	r3, [sp, #16]
  406f14:	2b00      	cmp	r3, #0
  406f16:	f47f af50 	bne.w	406dba <_dtoa_r+0x26a>
  406f1a:	4639      	mov	r1, r7
  406f1c:	2205      	movs	r2, #5
  406f1e:	4620      	mov	r0, r4
  406f20:	f001 fe6c 	bl	408bfc <__multadd>
  406f24:	4607      	mov	r7, r0
  406f26:	9806      	ldr	r0, [sp, #24]
  406f28:	4639      	mov	r1, r7
  406f2a:	f002 f853 	bl	408fd4 <__mcmp>
  406f2e:	2800      	cmp	r0, #0
  406f30:	f77f af43 	ble.w	406dba <_dtoa_r+0x26a>
  406f34:	9a02      	ldr	r2, [sp, #8]
  406f36:	2331      	movs	r3, #49	; 0x31
  406f38:	3201      	adds	r2, #1
  406f3a:	9202      	str	r2, [sp, #8]
  406f3c:	9a05      	ldr	r2, [sp, #20]
  406f3e:	1c55      	adds	r5, r2, #1
  406f40:	7013      	strb	r3, [r2, #0]
  406f42:	4639      	mov	r1, r7
  406f44:	4620      	mov	r0, r4
  406f46:	f001 fe4f 	bl	408be8 <_Bfree>
  406f4a:	9b08      	ldr	r3, [sp, #32]
  406f4c:	b11b      	cbz	r3, 406f56 <_dtoa_r+0x406>
  406f4e:	9908      	ldr	r1, [sp, #32]
  406f50:	4620      	mov	r0, r4
  406f52:	f001 fe49 	bl	408be8 <_Bfree>
  406f56:	4620      	mov	r0, r4
  406f58:	9906      	ldr	r1, [sp, #24]
  406f5a:	f001 fe45 	bl	408be8 <_Bfree>
  406f5e:	2200      	movs	r2, #0
  406f60:	9b02      	ldr	r3, [sp, #8]
  406f62:	702a      	strb	r2, [r5, #0]
  406f64:	3301      	adds	r3, #1
  406f66:	9a24      	ldr	r2, [sp, #144]	; 0x90
  406f68:	6013      	str	r3, [r2, #0]
  406f6a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  406f6c:	2b00      	cmp	r3, #0
  406f6e:	f000 82a3 	beq.w	4074b8 <_dtoa_r+0x968>
  406f72:	9805      	ldr	r0, [sp, #20]
  406f74:	601d      	str	r5, [r3, #0]
  406f76:	b019      	add	sp, #100	; 0x64
  406f78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406f7c:	9802      	ldr	r0, [sp, #8]
  406f7e:	f002 fe9b 	bl	409cb8 <__aeabi_i2d>
  406f82:	4632      	mov	r2, r6
  406f84:	463b      	mov	r3, r7
  406f86:	f003 f965 	bl	40a254 <__aeabi_dcmpeq>
  406f8a:	2800      	cmp	r0, #0
  406f8c:	f47f ae85 	bne.w	406c9a <_dtoa_r+0x14a>
  406f90:	9b02      	ldr	r3, [sp, #8]
  406f92:	3b01      	subs	r3, #1
  406f94:	9302      	str	r3, [sp, #8]
  406f96:	e680      	b.n	406c9a <_dtoa_r+0x14a>
  406f98:	9a07      	ldr	r2, [sp, #28]
  406f9a:	9b02      	ldr	r3, [sp, #8]
  406f9c:	1ad2      	subs	r2, r2, r3
  406f9e:	425b      	negs	r3, r3
  406fa0:	930a      	str	r3, [sp, #40]	; 0x28
  406fa2:	2300      	movs	r3, #0
  406fa4:	9207      	str	r2, [sp, #28]
  406fa6:	930c      	str	r3, [sp, #48]	; 0x30
  406fa8:	e6a0      	b.n	406cec <_dtoa_r+0x19c>
  406faa:	425b      	negs	r3, r3
  406fac:	9307      	str	r3, [sp, #28]
  406fae:	2300      	movs	r3, #0
  406fb0:	9303      	str	r3, [sp, #12]
  406fb2:	e690      	b.n	406cd6 <_dtoa_r+0x186>
  406fb4:	900d      	str	r0, [sp, #52]	; 0x34
  406fb6:	e686      	b.n	406cc6 <_dtoa_r+0x176>
  406fb8:	4bbd      	ldr	r3, [pc, #756]	; (4072b0 <_dtoa_r+0x760>)
  406fba:	1b5b      	subs	r3, r3, r5
  406fbc:	fa0a f003 	lsl.w	r0, sl, r3
  406fc0:	e638      	b.n	406c34 <_dtoa_r+0xe4>
  406fc2:	2100      	movs	r1, #0
  406fc4:	f04f 32ff 	mov.w	r2, #4294967295
  406fc8:	9123      	str	r1, [sp, #140]	; 0x8c
  406fca:	2101      	movs	r1, #1
  406fcc:	9204      	str	r2, [sp, #16]
  406fce:	910b      	str	r1, [sp, #44]	; 0x2c
  406fd0:	9210      	str	r2, [sp, #64]	; 0x40
  406fd2:	9a22      	ldr	r2, [sp, #136]	; 0x88
  406fd4:	2a01      	cmp	r2, #1
  406fd6:	f340 8460 	ble.w	40789a <_dtoa_r+0xd4a>
  406fda:	9b04      	ldr	r3, [sp, #16]
  406fdc:	1e5e      	subs	r6, r3, #1
  406fde:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  406fe0:	42b3      	cmp	r3, r6
  406fe2:	f2c0 8405 	blt.w	4077f0 <_dtoa_r+0xca0>
  406fe6:	1b9e      	subs	r6, r3, r6
  406fe8:	9b04      	ldr	r3, [sp, #16]
  406fea:	2b00      	cmp	r3, #0
  406fec:	f2c0 8461 	blt.w	4078b2 <_dtoa_r+0xd62>
  406ff0:	9d07      	ldr	r5, [sp, #28]
  406ff2:	9b04      	ldr	r3, [sp, #16]
  406ff4:	9a07      	ldr	r2, [sp, #28]
  406ff6:	4620      	mov	r0, r4
  406ff8:	2101      	movs	r1, #1
  406ffa:	441a      	add	r2, r3
  406ffc:	9207      	str	r2, [sp, #28]
  406ffe:	9a03      	ldr	r2, [sp, #12]
  407000:	441a      	add	r2, r3
  407002:	9203      	str	r2, [sp, #12]
  407004:	f001 fe90 	bl	408d28 <__i2b>
  407008:	9008      	str	r0, [sp, #32]
  40700a:	e705      	b.n	406e18 <_dtoa_r+0x2c8>
  40700c:	2301      	movs	r3, #1
  40700e:	930b      	str	r3, [sp, #44]	; 0x2c
  407010:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  407012:	2b00      	cmp	r3, #0
  407014:	f340 83df 	ble.w	4077d6 <_dtoa_r+0xc86>
  407018:	2b0e      	cmp	r3, #14
  40701a:	bf8c      	ite	hi
  40701c:	2500      	movhi	r5, #0
  40701e:	f005 0501 	andls.w	r5, r5, #1
  407022:	461e      	mov	r6, r3
  407024:	9310      	str	r3, [sp, #64]	; 0x40
  407026:	9304      	str	r3, [sp, #16]
  407028:	2100      	movs	r1, #0
  40702a:	2e17      	cmp	r6, #23
  40702c:	6461      	str	r1, [r4, #68]	; 0x44
  40702e:	d909      	bls.n	407044 <_dtoa_r+0x4f4>
  407030:	2201      	movs	r2, #1
  407032:	2304      	movs	r3, #4
  407034:	005b      	lsls	r3, r3, #1
  407036:	4611      	mov	r1, r2
  407038:	3201      	adds	r2, #1
  40703a:	f103 0014 	add.w	r0, r3, #20
  40703e:	42b0      	cmp	r0, r6
  407040:	d9f8      	bls.n	407034 <_dtoa_r+0x4e4>
  407042:	6461      	str	r1, [r4, #68]	; 0x44
  407044:	4620      	mov	r0, r4
  407046:	f001 fda7 	bl	408b98 <_Balloc>
  40704a:	9005      	str	r0, [sp, #20]
  40704c:	6420      	str	r0, [r4, #64]	; 0x40
  40704e:	2d00      	cmp	r5, #0
  407050:	f43f ae8c 	beq.w	406d6c <_dtoa_r+0x21c>
  407054:	9802      	ldr	r0, [sp, #8]
  407056:	2800      	cmp	r0, #0
  407058:	e9cd ab0e 	strd	sl, fp, [sp, #56]	; 0x38
  40705c:	f340 8233 	ble.w	4074c6 <_dtoa_r+0x976>
  407060:	4a94      	ldr	r2, [pc, #592]	; (4072b4 <_dtoa_r+0x764>)
  407062:	f000 030f 	and.w	r3, r0, #15
  407066:	1105      	asrs	r5, r0, #4
  407068:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
  40706c:	06ea      	lsls	r2, r5, #27
  40706e:	e9d3 6700 	ldrd	r6, r7, [r3]
  407072:	f140 821c 	bpl.w	4074ae <_dtoa_r+0x95e>
  407076:	4b90      	ldr	r3, [pc, #576]	; (4072b8 <_dtoa_r+0x768>)
  407078:	4650      	mov	r0, sl
  40707a:	4659      	mov	r1, fp
  40707c:	f005 050f 	and.w	r5, r5, #15
  407080:	f04f 0803 	mov.w	r8, #3
  407084:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
  407088:	f002 ffa6 	bl	409fd8 <__aeabi_ddiv>
  40708c:	4682      	mov	sl, r0
  40708e:	468b      	mov	fp, r1
  407090:	b18d      	cbz	r5, 4070b6 <_dtoa_r+0x566>
  407092:	f8df 9224 	ldr.w	r9, [pc, #548]	; 4072b8 <_dtoa_r+0x768>
  407096:	07eb      	lsls	r3, r5, #31
  407098:	4630      	mov	r0, r6
  40709a:	4639      	mov	r1, r7
  40709c:	d507      	bpl.n	4070ae <_dtoa_r+0x55e>
  40709e:	f108 0801 	add.w	r8, r8, #1
  4070a2:	e9d9 2300 	ldrd	r2, r3, [r9]
  4070a6:	f002 fe6d 	bl	409d84 <__aeabi_dmul>
  4070aa:	4606      	mov	r6, r0
  4070ac:	460f      	mov	r7, r1
  4070ae:	106d      	asrs	r5, r5, #1
  4070b0:	f109 0908 	add.w	r9, r9, #8
  4070b4:	d1ef      	bne.n	407096 <_dtoa_r+0x546>
  4070b6:	4650      	mov	r0, sl
  4070b8:	4659      	mov	r1, fp
  4070ba:	4632      	mov	r2, r6
  4070bc:	463b      	mov	r3, r7
  4070be:	f002 ff8b 	bl	409fd8 <__aeabi_ddiv>
  4070c2:	e9cd 0108 	strd	r0, r1, [sp, #32]
  4070c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4070c8:	b143      	cbz	r3, 4070dc <_dtoa_r+0x58c>
  4070ca:	2200      	movs	r2, #0
  4070cc:	4b7b      	ldr	r3, [pc, #492]	; (4072bc <_dtoa_r+0x76c>)
  4070ce:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  4070d2:	f003 f8c9 	bl	40a268 <__aeabi_dcmplt>
  4070d6:	2800      	cmp	r0, #0
  4070d8:	f040 8393 	bne.w	407802 <_dtoa_r+0xcb2>
  4070dc:	4640      	mov	r0, r8
  4070de:	f002 fdeb 	bl	409cb8 <__aeabi_i2d>
  4070e2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
  4070e6:	f002 fe4d 	bl	409d84 <__aeabi_dmul>
  4070ea:	4b75      	ldr	r3, [pc, #468]	; (4072c0 <_dtoa_r+0x770>)
  4070ec:	2200      	movs	r2, #0
  4070ee:	f002 fc97 	bl	409a20 <__adddf3>
  4070f2:	9b04      	ldr	r3, [sp, #16]
  4070f4:	4606      	mov	r6, r0
  4070f6:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
  4070fa:	2b00      	cmp	r3, #0
  4070fc:	f000 8161 	beq.w	4073c2 <_dtoa_r+0x872>
  407100:	9b02      	ldr	r3, [sp, #8]
  407102:	f8dd c010 	ldr.w	ip, [sp, #16]
  407106:	9314      	str	r3, [sp, #80]	; 0x50
  407108:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40710a:	2b00      	cmp	r3, #0
  40710c:	f000 820b 	beq.w	407526 <_dtoa_r+0x9d6>
  407110:	4b68      	ldr	r3, [pc, #416]	; (4072b4 <_dtoa_r+0x764>)
  407112:	2000      	movs	r0, #0
  407114:	9a05      	ldr	r2, [sp, #20]
  407116:	eb03 03cc 	add.w	r3, r3, ip, lsl #3
  40711a:	496a      	ldr	r1, [pc, #424]	; (4072c4 <_dtoa_r+0x774>)
  40711c:	1c55      	adds	r5, r2, #1
  40711e:	f8cd c048 	str.w	ip, [sp, #72]	; 0x48
  407122:	e953 2302 	ldrd	r2, r3, [r3, #-8]
  407126:	f002 ff57 	bl	409fd8 <__aeabi_ddiv>
  40712a:	4632      	mov	r2, r6
  40712c:	463b      	mov	r3, r7
  40712e:	f002 fc75 	bl	409a1c <__aeabi_dsub>
  407132:	4682      	mov	sl, r0
  407134:	468b      	mov	fp, r1
  407136:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
  40713a:	4649      	mov	r1, r9
  40713c:	4640      	mov	r0, r8
  40713e:	f003 f8bb 	bl	40a2b8 <__aeabi_d2iz>
  407142:	4606      	mov	r6, r0
  407144:	f002 fdb8 	bl	409cb8 <__aeabi_i2d>
  407148:	4602      	mov	r2, r0
  40714a:	3630      	adds	r6, #48	; 0x30
  40714c:	460b      	mov	r3, r1
  40714e:	4640      	mov	r0, r8
  407150:	4649      	mov	r1, r9
  407152:	f002 fc63 	bl	409a1c <__aeabi_dsub>
  407156:	9f05      	ldr	r7, [sp, #20]
  407158:	4680      	mov	r8, r0
  40715a:	4689      	mov	r9, r1
  40715c:	b2f6      	uxtb	r6, r6
  40715e:	4650      	mov	r0, sl
  407160:	4659      	mov	r1, fp
  407162:	4642      	mov	r2, r8
  407164:	464b      	mov	r3, r9
  407166:	703e      	strb	r6, [r7, #0]
  407168:	f003 f89c 	bl	40a2a4 <__aeabi_dcmpgt>
  40716c:	2800      	cmp	r0, #0
  40716e:	f040 8243 	bne.w	4075f8 <_dtoa_r+0xaa8>
  407172:	4642      	mov	r2, r8
  407174:	464b      	mov	r3, r9
  407176:	2000      	movs	r0, #0
  407178:	4950      	ldr	r1, [pc, #320]	; (4072bc <_dtoa_r+0x76c>)
  40717a:	f002 fc4f 	bl	409a1c <__aeabi_dsub>
  40717e:	4602      	mov	r2, r0
  407180:	460b      	mov	r3, r1
  407182:	4650      	mov	r0, sl
  407184:	4659      	mov	r1, fp
  407186:	f003 f88d 	bl	40a2a4 <__aeabi_dcmpgt>
  40718a:	2800      	cmp	r0, #0
  40718c:	f040 80eb 	bne.w	407366 <_dtoa_r+0x816>
  407190:	f8dd c048 	ldr.w	ip, [sp, #72]	; 0x48
  407194:	f1bc 0f01 	cmp.w	ip, #1
  407198:	f340 8192 	ble.w	4074c0 <_dtoa_r+0x970>
  40719c:	9f05      	ldr	r7, [sp, #20]
  40719e:	9412      	str	r4, [sp, #72]	; 0x48
  4071a0:	4467      	add	r7, ip
  4071a2:	9708      	str	r7, [sp, #32]
  4071a4:	e00e      	b.n	4071c4 <_dtoa_r+0x674>
  4071a6:	2000      	movs	r0, #0
  4071a8:	4944      	ldr	r1, [pc, #272]	; (4072bc <_dtoa_r+0x76c>)
  4071aa:	f002 fc37 	bl	409a1c <__aeabi_dsub>
  4071ae:	4652      	mov	r2, sl
  4071b0:	465b      	mov	r3, fp
  4071b2:	f003 f859 	bl	40a268 <__aeabi_dcmplt>
  4071b6:	2800      	cmp	r0, #0
  4071b8:	f040 83a1 	bne.w	4078fe <_dtoa_r+0xdae>
  4071bc:	9b08      	ldr	r3, [sp, #32]
  4071be:	429d      	cmp	r5, r3
  4071c0:	f000 817d 	beq.w	4074be <_dtoa_r+0x96e>
  4071c4:	4650      	mov	r0, sl
  4071c6:	4659      	mov	r1, fp
  4071c8:	2200      	movs	r2, #0
  4071ca:	4b3f      	ldr	r3, [pc, #252]	; (4072c8 <_dtoa_r+0x778>)
  4071cc:	f002 fdda 	bl	409d84 <__aeabi_dmul>
  4071d0:	2200      	movs	r2, #0
  4071d2:	4b3d      	ldr	r3, [pc, #244]	; (4072c8 <_dtoa_r+0x778>)
  4071d4:	4682      	mov	sl, r0
  4071d6:	468b      	mov	fp, r1
  4071d8:	4640      	mov	r0, r8
  4071da:	4649      	mov	r1, r9
  4071dc:	f002 fdd2 	bl	409d84 <__aeabi_dmul>
  4071e0:	4606      	mov	r6, r0
  4071e2:	460f      	mov	r7, r1
  4071e4:	f003 f868 	bl	40a2b8 <__aeabi_d2iz>
  4071e8:	4604      	mov	r4, r0
  4071ea:	f002 fd65 	bl	409cb8 <__aeabi_i2d>
  4071ee:	4602      	mov	r2, r0
  4071f0:	460b      	mov	r3, r1
  4071f2:	3430      	adds	r4, #48	; 0x30
  4071f4:	4630      	mov	r0, r6
  4071f6:	4639      	mov	r1, r7
  4071f8:	b2e6      	uxtb	r6, r4
  4071fa:	f002 fc0f 	bl	409a1c <__aeabi_dsub>
  4071fe:	4680      	mov	r8, r0
  407200:	4689      	mov	r9, r1
  407202:	4652      	mov	r2, sl
  407204:	465b      	mov	r3, fp
  407206:	f805 6b01 	strb.w	r6, [r5], #1
  40720a:	f003 f82d 	bl	40a268 <__aeabi_dcmplt>
  40720e:	4642      	mov	r2, r8
  407210:	464b      	mov	r3, r9
  407212:	2800      	cmp	r0, #0
  407214:	d0c7      	beq.n	4071a6 <_dtoa_r+0x656>
  407216:	9b14      	ldr	r3, [sp, #80]	; 0x50
  407218:	9c12      	ldr	r4, [sp, #72]	; 0x48
  40721a:	9302      	str	r3, [sp, #8]
  40721c:	e69b      	b.n	406f56 <_dtoa_r+0x406>
  40721e:	2300      	movs	r3, #0
  407220:	930b      	str	r3, [sp, #44]	; 0x2c
  407222:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  407224:	9a02      	ldr	r2, [sp, #8]
  407226:	4413      	add	r3, r2
  407228:	9310      	str	r3, [sp, #64]	; 0x40
  40722a:	3301      	adds	r3, #1
  40722c:	2b00      	cmp	r3, #0
  40722e:	9304      	str	r3, [sp, #16]
  407230:	f340 82c9 	ble.w	4077c6 <_dtoa_r+0xc76>
  407234:	9e04      	ldr	r6, [sp, #16]
  407236:	2e0e      	cmp	r6, #14
  407238:	bf8c      	ite	hi
  40723a:	2500      	movhi	r5, #0
  40723c:	f005 0501 	andls.w	r5, r5, #1
  407240:	e6f2      	b.n	407028 <_dtoa_r+0x4d8>
  407242:	2300      	movs	r3, #0
  407244:	930b      	str	r3, [sp, #44]	; 0x2c
  407246:	e6e3      	b.n	407010 <_dtoa_r+0x4c0>
  407248:	9905      	ldr	r1, [sp, #20]
  40724a:	4642      	mov	r2, r8
  40724c:	464b      	mov	r3, r9
  40724e:	4650      	mov	r0, sl
  407250:	1c4d      	adds	r5, r1, #1
  407252:	4659      	mov	r1, fp
  407254:	f002 fec0 	bl	409fd8 <__aeabi_ddiv>
  407258:	4656      	mov	r6, sl
  40725a:	f003 f82d 	bl	40a2b8 <__aeabi_d2iz>
  40725e:	4682      	mov	sl, r0
  407260:	f002 fd2a 	bl	409cb8 <__aeabi_i2d>
  407264:	4642      	mov	r2, r8
  407266:	464b      	mov	r3, r9
  407268:	f002 fd8c 	bl	409d84 <__aeabi_dmul>
  40726c:	4602      	mov	r2, r0
  40726e:	460b      	mov	r3, r1
  407270:	4630      	mov	r0, r6
  407272:	4659      	mov	r1, fp
  407274:	f002 fbd2 	bl	409a1c <__aeabi_dsub>
  407278:	f10a 0330 	add.w	r3, sl, #48	; 0x30
  40727c:	9a05      	ldr	r2, [sp, #20]
  40727e:	4606      	mov	r6, r0
  407280:	460f      	mov	r7, r1
  407282:	7013      	strb	r3, [r2, #0]
  407284:	9b04      	ldr	r3, [sp, #16]
  407286:	2b01      	cmp	r3, #1
  407288:	d04d      	beq.n	407326 <_dtoa_r+0x7d6>
  40728a:	2200      	movs	r2, #0
  40728c:	4b0e      	ldr	r3, [pc, #56]	; (4072c8 <_dtoa_r+0x778>)
  40728e:	f002 fd79 	bl	409d84 <__aeabi_dmul>
  407292:	2200      	movs	r2, #0
  407294:	2300      	movs	r3, #0
  407296:	4606      	mov	r6, r0
  407298:	460f      	mov	r7, r1
  40729a:	f002 ffdb 	bl	40a254 <__aeabi_dcmpeq>
  40729e:	2800      	cmp	r0, #0
  4072a0:	f47f ae59 	bne.w	406f56 <_dtoa_r+0x406>
  4072a4:	9403      	str	r4, [sp, #12]
  4072a6:	f8dd b014 	ldr.w	fp, [sp, #20]
  4072aa:	9c04      	ldr	r4, [sp, #16]
  4072ac:	e019      	b.n	4072e2 <_dtoa_r+0x792>
  4072ae:	bf00      	nop
  4072b0:	fffffbee 	.word	0xfffffbee
  4072b4:	0040abe8 	.word	0x0040abe8
  4072b8:	0040acc0 	.word	0x0040acc0
  4072bc:	3ff00000 	.word	0x3ff00000
  4072c0:	401c0000 	.word	0x401c0000
  4072c4:	3fe00000 	.word	0x3fe00000
  4072c8:	40240000 	.word	0x40240000
  4072cc:	f002 fd5a 	bl	409d84 <__aeabi_dmul>
  4072d0:	2200      	movs	r2, #0
  4072d2:	2300      	movs	r3, #0
  4072d4:	4606      	mov	r6, r0
  4072d6:	460f      	mov	r7, r1
  4072d8:	f002 ffbc 	bl	40a254 <__aeabi_dcmpeq>
  4072dc:	2800      	cmp	r0, #0
  4072de:	f040 82e5 	bne.w	4078ac <_dtoa_r+0xd5c>
  4072e2:	4642      	mov	r2, r8
  4072e4:	464b      	mov	r3, r9
  4072e6:	4630      	mov	r0, r6
  4072e8:	4639      	mov	r1, r7
  4072ea:	f002 fe75 	bl	409fd8 <__aeabi_ddiv>
  4072ee:	f002 ffe3 	bl	40a2b8 <__aeabi_d2iz>
  4072f2:	4682      	mov	sl, r0
  4072f4:	f002 fce0 	bl	409cb8 <__aeabi_i2d>
  4072f8:	4642      	mov	r2, r8
  4072fa:	464b      	mov	r3, r9
  4072fc:	f002 fd42 	bl	409d84 <__aeabi_dmul>
  407300:	4602      	mov	r2, r0
  407302:	460b      	mov	r3, r1
  407304:	4630      	mov	r0, r6
  407306:	4639      	mov	r1, r7
  407308:	f002 fb88 	bl	409a1c <__aeabi_dsub>
  40730c:	f10a 0e30 	add.w	lr, sl, #48	; 0x30
  407310:	4606      	mov	r6, r0
  407312:	460f      	mov	r7, r1
  407314:	f805 eb01 	strb.w	lr, [r5], #1
  407318:	ebcb 0e05 	rsb	lr, fp, r5
  40731c:	2200      	movs	r2, #0
  40731e:	4bb8      	ldr	r3, [pc, #736]	; (407600 <_dtoa_r+0xab0>)
  407320:	4574      	cmp	r4, lr
  407322:	d1d3      	bne.n	4072cc <_dtoa_r+0x77c>
  407324:	9c03      	ldr	r4, [sp, #12]
  407326:	4632      	mov	r2, r6
  407328:	463b      	mov	r3, r7
  40732a:	4630      	mov	r0, r6
  40732c:	4639      	mov	r1, r7
  40732e:	f002 fb77 	bl	409a20 <__adddf3>
  407332:	4606      	mov	r6, r0
  407334:	460f      	mov	r7, r1
  407336:	4640      	mov	r0, r8
  407338:	4649      	mov	r1, r9
  40733a:	4632      	mov	r2, r6
  40733c:	463b      	mov	r3, r7
  40733e:	f002 ff93 	bl	40a268 <__aeabi_dcmplt>
  407342:	b960      	cbnz	r0, 40735e <_dtoa_r+0x80e>
  407344:	4640      	mov	r0, r8
  407346:	4649      	mov	r1, r9
  407348:	4632      	mov	r2, r6
  40734a:	463b      	mov	r3, r7
  40734c:	f002 ff82 	bl	40a254 <__aeabi_dcmpeq>
  407350:	2800      	cmp	r0, #0
  407352:	f43f ae00 	beq.w	406f56 <_dtoa_r+0x406>
  407356:	f01a 0f01 	tst.w	sl, #1
  40735a:	f43f adfc 	beq.w	406f56 <_dtoa_r+0x406>
  40735e:	9b02      	ldr	r3, [sp, #8]
  407360:	9314      	str	r3, [sp, #80]	; 0x50
  407362:	f815 6c01 	ldrb.w	r6, [r5, #-1]
  407366:	1e6a      	subs	r2, r5, #1
  407368:	9b05      	ldr	r3, [sp, #20]
  40736a:	e004      	b.n	407376 <_dtoa_r+0x826>
  40736c:	429a      	cmp	r2, r3
  40736e:	f000 8277 	beq.w	407860 <_dtoa_r+0xd10>
  407372:	f812 6d01 	ldrb.w	r6, [r2, #-1]!
  407376:	2e39      	cmp	r6, #57	; 0x39
  407378:	f102 0501 	add.w	r5, r2, #1
  40737c:	d0f6      	beq.n	40736c <_dtoa_r+0x81c>
  40737e:	1c73      	adds	r3, r6, #1
  407380:	9914      	ldr	r1, [sp, #80]	; 0x50
  407382:	b2db      	uxtb	r3, r3
  407384:	9102      	str	r1, [sp, #8]
  407386:	7013      	strb	r3, [r2, #0]
  407388:	e5e5      	b.n	406f56 <_dtoa_r+0x406>
  40738a:	9b22      	ldr	r3, [sp, #136]	; 0x88
  40738c:	2b01      	cmp	r3, #1
  40738e:	f340 8161 	ble.w	407654 <_dtoa_r+0xb04>
  407392:	f04f 0800 	mov.w	r8, #0
  407396:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  407398:	2b00      	cmp	r3, #0
  40739a:	f47f ad80 	bne.w	406e9e <_dtoa_r+0x34e>
  40739e:	2001      	movs	r0, #1
  4073a0:	e585      	b.n	406eae <_dtoa_r+0x35e>
  4073a2:	4640      	mov	r0, r8
  4073a4:	f002 fc88 	bl	409cb8 <__aeabi_i2d>
  4073a8:	4602      	mov	r2, r0
  4073aa:	460b      	mov	r3, r1
  4073ac:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  4073b0:	f002 fce8 	bl	409d84 <__aeabi_dmul>
  4073b4:	2200      	movs	r2, #0
  4073b6:	4b93      	ldr	r3, [pc, #588]	; (407604 <_dtoa_r+0xab4>)
  4073b8:	f002 fb32 	bl	409a20 <__adddf3>
  4073bc:	4606      	mov	r6, r0
  4073be:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
  4073c2:	2200      	movs	r2, #0
  4073c4:	4b90      	ldr	r3, [pc, #576]	; (407608 <_dtoa_r+0xab8>)
  4073c6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  4073ca:	f002 fb27 	bl	409a1c <__aeabi_dsub>
  4073ce:	4632      	mov	r2, r6
  4073d0:	463b      	mov	r3, r7
  4073d2:	4680      	mov	r8, r0
  4073d4:	4689      	mov	r9, r1
  4073d6:	f002 ff65 	bl	40a2a4 <__aeabi_dcmpgt>
  4073da:	4605      	mov	r5, r0
  4073dc:	2800      	cmp	r0, #0
  4073de:	f040 809f 	bne.w	407520 <_dtoa_r+0x9d0>
  4073e2:	4632      	mov	r2, r6
  4073e4:	4640      	mov	r0, r8
  4073e6:	4649      	mov	r1, r9
  4073e8:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
  4073ec:	f002 ff3c 	bl	40a268 <__aeabi_dcmplt>
  4073f0:	2800      	cmp	r0, #0
  4073f2:	d065      	beq.n	4074c0 <_dtoa_r+0x970>
  4073f4:	462f      	mov	r7, r5
  4073f6:	9508      	str	r5, [sp, #32]
  4073f8:	e4df      	b.n	406dba <_dtoa_r+0x26a>
  4073fa:	201c      	movs	r0, #28
  4073fc:	e564      	b.n	406ec8 <_dtoa_r+0x378>
  4073fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  407400:	2b00      	cmp	r3, #0
  407402:	f040 814f 	bne.w	4076a4 <_dtoa_r+0xb54>
  407406:	f8dd a014 	ldr.w	sl, [sp, #20]
  40740a:	9e06      	ldr	r6, [sp, #24]
  40740c:	4655      	mov	r5, sl
  40740e:	f8dd 8010 	ldr.w	r8, [sp, #16]
  407412:	e002      	b.n	40741a <_dtoa_r+0x8ca>
  407414:	f001 fbf2 	bl	408bfc <__multadd>
  407418:	4606      	mov	r6, r0
  40741a:	4639      	mov	r1, r7
  40741c:	4630      	mov	r0, r6
  40741e:	f7ff faf5 	bl	406a0c <quorem>
  407422:	f100 0930 	add.w	r9, r0, #48	; 0x30
  407426:	4631      	mov	r1, r6
  407428:	4620      	mov	r0, r4
  40742a:	f805 9b01 	strb.w	r9, [r5], #1
  40742e:	ebca 0e05 	rsb	lr, sl, r5
  407432:	220a      	movs	r2, #10
  407434:	2300      	movs	r3, #0
  407436:	45c6      	cmp	lr, r8
  407438:	dbec      	blt.n	407414 <_dtoa_r+0x8c4>
  40743a:	9b05      	ldr	r3, [sp, #20]
  40743c:	f04f 0a00 	mov.w	sl, #0
  407440:	9a04      	ldr	r2, [sp, #16]
  407442:	9606      	str	r6, [sp, #24]
  407444:	2a01      	cmp	r2, #1
  407446:	bfac      	ite	ge
  407448:	189b      	addge	r3, r3, r2
  40744a:	3301      	addlt	r3, #1
  40744c:	461d      	mov	r5, r3
  40744e:	9906      	ldr	r1, [sp, #24]
  407450:	2201      	movs	r2, #1
  407452:	4620      	mov	r0, r4
  407454:	f001 fd64 	bl	408f20 <__lshift>
  407458:	4639      	mov	r1, r7
  40745a:	9006      	str	r0, [sp, #24]
  40745c:	f001 fdba 	bl	408fd4 <__mcmp>
  407460:	2800      	cmp	r0, #0
  407462:	f340 824e 	ble.w	407902 <_dtoa_r+0xdb2>
  407466:	f815 2c01 	ldrb.w	r2, [r5, #-1]
  40746a:	1e6b      	subs	r3, r5, #1
  40746c:	9905      	ldr	r1, [sp, #20]
  40746e:	e004      	b.n	40747a <_dtoa_r+0x92a>
  407470:	428b      	cmp	r3, r1
  407472:	f000 820b 	beq.w	40788c <_dtoa_r+0xd3c>
  407476:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
  40747a:	2a39      	cmp	r2, #57	; 0x39
  40747c:	f103 0501 	add.w	r5, r3, #1
  407480:	d0f6      	beq.n	407470 <_dtoa_r+0x920>
  407482:	3201      	adds	r2, #1
  407484:	701a      	strb	r2, [r3, #0]
  407486:	4639      	mov	r1, r7
  407488:	4620      	mov	r0, r4
  40748a:	f001 fbad 	bl	408be8 <_Bfree>
  40748e:	9b08      	ldr	r3, [sp, #32]
  407490:	2b00      	cmp	r3, #0
  407492:	f43f ad60 	beq.w	406f56 <_dtoa_r+0x406>
  407496:	459a      	cmp	sl, r3
  407498:	f43f ad59 	beq.w	406f4e <_dtoa_r+0x3fe>
  40749c:	f1ba 0f00 	cmp.w	sl, #0
  4074a0:	f43f ad55 	beq.w	406f4e <_dtoa_r+0x3fe>
  4074a4:	4651      	mov	r1, sl
  4074a6:	4620      	mov	r0, r4
  4074a8:	f001 fb9e 	bl	408be8 <_Bfree>
  4074ac:	e54f      	b.n	406f4e <_dtoa_r+0x3fe>
  4074ae:	e9dd ab0e 	ldrd	sl, fp, [sp, #56]	; 0x38
  4074b2:	f04f 0802 	mov.w	r8, #2
  4074b6:	e5eb      	b.n	407090 <_dtoa_r+0x540>
  4074b8:	9805      	ldr	r0, [sp, #20]
  4074ba:	f7ff bb7a 	b.w	406bb2 <_dtoa_r+0x62>
  4074be:	9c12      	ldr	r4, [sp, #72]	; 0x48
  4074c0:	e9dd ab0e 	ldrd	sl, fp, [sp, #56]	; 0x38
  4074c4:	e452      	b.n	406d6c <_dtoa_r+0x21c>
  4074c6:	9b02      	ldr	r3, [sp, #8]
  4074c8:	425d      	negs	r5, r3
  4074ca:	2d00      	cmp	r5, #0
  4074cc:	f000 81c1 	beq.w	407852 <_dtoa_r+0xd02>
  4074d0:	f005 020f 	and.w	r2, r5, #15
  4074d4:	4b4d      	ldr	r3, [pc, #308]	; (40760c <_dtoa_r+0xabc>)
  4074d6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  4074da:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
  4074de:	e9d3 2300 	ldrd	r2, r3, [r3]
  4074e2:	f002 fc4f 	bl	409d84 <__aeabi_dmul>
  4074e6:	112d      	asrs	r5, r5, #4
  4074e8:	e9cd 0108 	strd	r0, r1, [sp, #32]
  4074ec:	f000 8275 	beq.w	4079da <_dtoa_r+0xe8a>
  4074f0:	4e47      	ldr	r6, [pc, #284]	; (407610 <_dtoa_r+0xac0>)
  4074f2:	f04f 0802 	mov.w	r8, #2
  4074f6:	4602      	mov	r2, r0
  4074f8:	460b      	mov	r3, r1
  4074fa:	07ef      	lsls	r7, r5, #31
  4074fc:	4610      	mov	r0, r2
  4074fe:	4619      	mov	r1, r3
  407500:	d507      	bpl.n	407512 <_dtoa_r+0x9c2>
  407502:	f108 0801 	add.w	r8, r8, #1
  407506:	e9d6 2300 	ldrd	r2, r3, [r6]
  40750a:	f002 fc3b 	bl	409d84 <__aeabi_dmul>
  40750e:	4602      	mov	r2, r0
  407510:	460b      	mov	r3, r1
  407512:	106d      	asrs	r5, r5, #1
  407514:	f106 0608 	add.w	r6, r6, #8
  407518:	d1ef      	bne.n	4074fa <_dtoa_r+0x9aa>
  40751a:	e9cd 2308 	strd	r2, r3, [sp, #32]
  40751e:	e5d2      	b.n	4070c6 <_dtoa_r+0x576>
  407520:	2700      	movs	r7, #0
  407522:	9708      	str	r7, [sp, #32]
  407524:	e506      	b.n	406f34 <_dtoa_r+0x3e4>
  407526:	f10c 3bff 	add.w	fp, ip, #4294967295
  40752a:	4938      	ldr	r1, [pc, #224]	; (40760c <_dtoa_r+0xabc>)
  40752c:	4632      	mov	r2, r6
  40752e:	463b      	mov	r3, r7
  407530:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
  407534:	f8cd c054 	str.w	ip, [sp, #84]	; 0x54
  407538:	9f05      	ldr	r7, [sp, #20]
  40753a:	e9d1 0100 	ldrd	r0, r1, [r1]
  40753e:	f002 fc21 	bl	409d84 <__aeabi_dmul>
  407542:	1c7d      	adds	r5, r7, #1
  407544:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
  407548:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
  40754c:	4649      	mov	r1, r9
  40754e:	4640      	mov	r0, r8
  407550:	f002 feb2 	bl	40a2b8 <__aeabi_d2iz>
  407554:	4606      	mov	r6, r0
  407556:	f002 fbaf 	bl	409cb8 <__aeabi_i2d>
  40755a:	4602      	mov	r2, r0
  40755c:	460b      	mov	r3, r1
  40755e:	4640      	mov	r0, r8
  407560:	4649      	mov	r1, r9
  407562:	3630      	adds	r6, #48	; 0x30
  407564:	f002 fa5a 	bl	409a1c <__aeabi_dsub>
  407568:	f8dd c054 	ldr.w	ip, [sp, #84]	; 0x54
  40756c:	4680      	mov	r8, r0
  40756e:	4689      	mov	r9, r1
  407570:	f1bc 0f01 	cmp.w	ip, #1
  407574:	703e      	strb	r6, [r7, #0]
  407576:	d020      	beq.n	4075ba <_dtoa_r+0xa6a>
  407578:	9b05      	ldr	r3, [sp, #20]
  40757a:	4640      	mov	r0, r8
  40757c:	46aa      	mov	sl, r5
  40757e:	46a8      	mov	r8, r5
  407580:	eb03 070c 	add.w	r7, r3, ip
  407584:	46b9      	mov	r9, r7
  407586:	2200      	movs	r2, #0
  407588:	4b1d      	ldr	r3, [pc, #116]	; (407600 <_dtoa_r+0xab0>)
  40758a:	f002 fbfb 	bl	409d84 <__aeabi_dmul>
  40758e:	460f      	mov	r7, r1
  407590:	4606      	mov	r6, r0
  407592:	f002 fe91 	bl	40a2b8 <__aeabi_d2iz>
  407596:	4605      	mov	r5, r0
  407598:	f002 fb8e 	bl	409cb8 <__aeabi_i2d>
  40759c:	4602      	mov	r2, r0
  40759e:	460b      	mov	r3, r1
  4075a0:	3530      	adds	r5, #48	; 0x30
  4075a2:	4630      	mov	r0, r6
  4075a4:	4639      	mov	r1, r7
  4075a6:	f002 fa39 	bl	409a1c <__aeabi_dsub>
  4075aa:	f80a 5b01 	strb.w	r5, [sl], #1
  4075ae:	45ca      	cmp	sl, r9
  4075b0:	d1e9      	bne.n	407586 <_dtoa_r+0xa36>
  4075b2:	4645      	mov	r5, r8
  4075b4:	4689      	mov	r9, r1
  4075b6:	4680      	mov	r8, r0
  4075b8:	445d      	add	r5, fp
  4075ba:	2200      	movs	r2, #0
  4075bc:	4b15      	ldr	r3, [pc, #84]	; (407614 <_dtoa_r+0xac4>)
  4075be:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
  4075c2:	f002 fa2d 	bl	409a20 <__adddf3>
  4075c6:	4642      	mov	r2, r8
  4075c8:	464b      	mov	r3, r9
  4075ca:	f002 fe4d 	bl	40a268 <__aeabi_dcmplt>
  4075ce:	2800      	cmp	r0, #0
  4075d0:	f47f aec7 	bne.w	407362 <_dtoa_r+0x812>
  4075d4:	2000      	movs	r0, #0
  4075d6:	490f      	ldr	r1, [pc, #60]	; (407614 <_dtoa_r+0xac4>)
  4075d8:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
  4075dc:	f002 fa1e 	bl	409a1c <__aeabi_dsub>
  4075e0:	4642      	mov	r2, r8
  4075e2:	464b      	mov	r3, r9
  4075e4:	f002 fe5e 	bl	40a2a4 <__aeabi_dcmpgt>
  4075e8:	b908      	cbnz	r0, 4075ee <_dtoa_r+0xa9e>
  4075ea:	e769      	b.n	4074c0 <_dtoa_r+0x970>
  4075ec:	4615      	mov	r5, r2
  4075ee:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  4075f2:	1e6a      	subs	r2, r5, #1
  4075f4:	2b30      	cmp	r3, #48	; 0x30
  4075f6:	d0f9      	beq.n	4075ec <_dtoa_r+0xa9c>
  4075f8:	9b14      	ldr	r3, [sp, #80]	; 0x50
  4075fa:	9302      	str	r3, [sp, #8]
  4075fc:	e4ab      	b.n	406f56 <_dtoa_r+0x406>
  4075fe:	bf00      	nop
  407600:	40240000 	.word	0x40240000
  407604:	401c0000 	.word	0x401c0000
  407608:	40140000 	.word	0x40140000
  40760c:	0040abe8 	.word	0x0040abe8
  407610:	0040acc0 	.word	0x0040acc0
  407614:	3fe00000 	.word	0x3fe00000
  407618:	9806      	ldr	r0, [sp, #24]
  40761a:	4639      	mov	r1, r7
  40761c:	f001 fcda 	bl	408fd4 <__mcmp>
  407620:	2800      	cmp	r0, #0
  407622:	f6bf ac6e 	bge.w	406f02 <_dtoa_r+0x3b2>
  407626:	9e02      	ldr	r6, [sp, #8]
  407628:	2300      	movs	r3, #0
  40762a:	9906      	ldr	r1, [sp, #24]
  40762c:	4620      	mov	r0, r4
  40762e:	3e01      	subs	r6, #1
  407630:	220a      	movs	r2, #10
  407632:	9602      	str	r6, [sp, #8]
  407634:	f001 fae2 	bl	408bfc <__multadd>
  407638:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40763a:	9006      	str	r0, [sp, #24]
  40763c:	bb1b      	cbnz	r3, 407686 <_dtoa_r+0xb36>
  40763e:	9b22      	ldr	r3, [sp, #136]	; 0x88
  407640:	2b02      	cmp	r3, #2
  407642:	f340 81ce 	ble.w	4079e2 <_dtoa_r+0xe92>
  407646:	9b10      	ldr	r3, [sp, #64]	; 0x40
  407648:	2b00      	cmp	r3, #0
  40764a:	f300 81ca 	bgt.w	4079e2 <_dtoa_r+0xe92>
  40764e:	9b10      	ldr	r3, [sp, #64]	; 0x40
  407650:	9304      	str	r3, [sp, #16]
  407652:	e45e      	b.n	406f12 <_dtoa_r+0x3c2>
  407654:	f1ba 0f00 	cmp.w	sl, #0
  407658:	f47f ae9b 	bne.w	407392 <_dtoa_r+0x842>
  40765c:	f3cb 0313 	ubfx	r3, fp, #0, #20
  407660:	2b00      	cmp	r3, #0
  407662:	f47f ae96 	bne.w	407392 <_dtoa_r+0x842>
  407666:	f02b 4600 	bic.w	r6, fp, #2147483648	; 0x80000000
  40766a:	0d36      	lsrs	r6, r6, #20
  40766c:	0536      	lsls	r6, r6, #20
  40766e:	2e00      	cmp	r6, #0
  407670:	f000 818a 	beq.w	407988 <_dtoa_r+0xe38>
  407674:	9b07      	ldr	r3, [sp, #28]
  407676:	f04f 0801 	mov.w	r8, #1
  40767a:	3301      	adds	r3, #1
  40767c:	9307      	str	r3, [sp, #28]
  40767e:	9b03      	ldr	r3, [sp, #12]
  407680:	3301      	adds	r3, #1
  407682:	9303      	str	r3, [sp, #12]
  407684:	e687      	b.n	407396 <_dtoa_r+0x846>
  407686:	2300      	movs	r3, #0
  407688:	9908      	ldr	r1, [sp, #32]
  40768a:	4620      	mov	r0, r4
  40768c:	220a      	movs	r2, #10
  40768e:	f001 fab5 	bl	408bfc <__multadd>
  407692:	9b22      	ldr	r3, [sp, #136]	; 0x88
  407694:	9008      	str	r0, [sp, #32]
  407696:	2b02      	cmp	r3, #2
  407698:	dd02      	ble.n	4076a0 <_dtoa_r+0xb50>
  40769a:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40769c:	2b00      	cmp	r3, #0
  40769e:	ddd6      	ble.n	40764e <_dtoa_r+0xafe>
  4076a0:	9b10      	ldr	r3, [sp, #64]	; 0x40
  4076a2:	9304      	str	r3, [sp, #16]
  4076a4:	2d00      	cmp	r5, #0
  4076a6:	dd05      	ble.n	4076b4 <_dtoa_r+0xb64>
  4076a8:	9908      	ldr	r1, [sp, #32]
  4076aa:	462a      	mov	r2, r5
  4076ac:	4620      	mov	r0, r4
  4076ae:	f001 fc37 	bl	408f20 <__lshift>
  4076b2:	9008      	str	r0, [sp, #32]
  4076b4:	f1b8 0f00 	cmp.w	r8, #0
  4076b8:	f040 8133 	bne.w	407922 <_dtoa_r+0xdd2>
  4076bc:	9e08      	ldr	r6, [sp, #32]
  4076be:	f00a 0101 	and.w	r1, sl, #1
  4076c2:	9b04      	ldr	r3, [sp, #16]
  4076c4:	9a22      	ldr	r2, [sp, #136]	; 0x88
  4076c6:	3b01      	subs	r3, #1
  4076c8:	910b      	str	r1, [sp, #44]	; 0x2c
  4076ca:	9905      	ldr	r1, [sp, #20]
  4076cc:	fab2 f282 	clz	r2, r2
  4076d0:	970a      	str	r7, [sp, #40]	; 0x28
  4076d2:	18cb      	adds	r3, r1, r3
  4076d4:	4688      	mov	r8, r1
  4076d6:	f8dd b020 	ldr.w	fp, [sp, #32]
  4076da:	930c      	str	r3, [sp, #48]	; 0x30
  4076dc:	0953      	lsrs	r3, r2, #5
  4076de:	9f06      	ldr	r7, [sp, #24]
  4076e0:	9303      	str	r3, [sp, #12]
  4076e2:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  4076e4:	4638      	mov	r0, r7
  4076e6:	4629      	mov	r1, r5
  4076e8:	f7ff f990 	bl	406a0c <quorem>
  4076ec:	4659      	mov	r1, fp
  4076ee:	4681      	mov	r9, r0
  4076f0:	4638      	mov	r0, r7
  4076f2:	f001 fc6f 	bl	408fd4 <__mcmp>
  4076f6:	4629      	mov	r1, r5
  4076f8:	4632      	mov	r2, r6
  4076fa:	4682      	mov	sl, r0
  4076fc:	4620      	mov	r0, r4
  4076fe:	f001 fc8d 	bl	40901c <__mdiff>
  407702:	68c2      	ldr	r2, [r0, #12]
  407704:	4605      	mov	r5, r0
  407706:	f109 0c30 	add.w	ip, r9, #48	; 0x30
  40770a:	9207      	str	r2, [sp, #28]
  40770c:	2a00      	cmp	r2, #0
  40770e:	d150      	bne.n	4077b2 <_dtoa_r+0xc62>
  407710:	4629      	mov	r1, r5
  407712:	4638      	mov	r0, r7
  407714:	f8cd c018 	str.w	ip, [sp, #24]
  407718:	f001 fc5c 	bl	408fd4 <__mcmp>
  40771c:	4629      	mov	r1, r5
  40771e:	9004      	str	r0, [sp, #16]
  407720:	4620      	mov	r0, r4
  407722:	f001 fa61 	bl	408be8 <_Bfree>
  407726:	9a03      	ldr	r2, [sp, #12]
  407728:	9b04      	ldr	r3, [sp, #16]
  40772a:	f8dd c018 	ldr.w	ip, [sp, #24]
  40772e:	b132      	cbz	r2, 40773e <_dtoa_r+0xbee>
  407730:	b92b      	cbnz	r3, 40773e <_dtoa_r+0xbee>
  407732:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  407734:	9a07      	ldr	r2, [sp, #28]
  407736:	2b00      	cmp	r3, #0
  407738:	f000 8128 	beq.w	40798c <_dtoa_r+0xe3c>
  40773c:	4613      	mov	r3, r2
  40773e:	f1ba 0f00 	cmp.w	sl, #0
  407742:	f2c0 80bc 	blt.w	4078be <_dtoa_r+0xd6e>
  407746:	9a03      	ldr	r2, [sp, #12]
  407748:	b132      	cbz	r2, 407758 <_dtoa_r+0xc08>
  40774a:	f1ba 0f00 	cmp.w	sl, #0
  40774e:	d103      	bne.n	407758 <_dtoa_r+0xc08>
  407750:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  407752:	2a00      	cmp	r2, #0
  407754:	f000 80b3 	beq.w	4078be <_dtoa_r+0xd6e>
  407758:	2b00      	cmp	r3, #0
  40775a:	f300 80fe 	bgt.w	40795a <_dtoa_r+0xe0a>
  40775e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  407760:	f108 0901 	add.w	r9, r8, #1
  407764:	f888 c000 	strb.w	ip, [r8]
  407768:	4598      	cmp	r8, r3
  40776a:	464d      	mov	r5, r9
  40776c:	f000 8106 	beq.w	40797c <_dtoa_r+0xe2c>
  407770:	4639      	mov	r1, r7
  407772:	220a      	movs	r2, #10
  407774:	2300      	movs	r3, #0
  407776:	4620      	mov	r0, r4
  407778:	f001 fa40 	bl	408bfc <__multadd>
  40777c:	45b3      	cmp	fp, r6
  40777e:	4607      	mov	r7, r0
  407780:	4659      	mov	r1, fp
  407782:	4620      	mov	r0, r4
  407784:	f04f 020a 	mov.w	r2, #10
  407788:	f04f 0300 	mov.w	r3, #0
  40778c:	d00b      	beq.n	4077a6 <_dtoa_r+0xc56>
  40778e:	f001 fa35 	bl	408bfc <__multadd>
  407792:	4631      	mov	r1, r6
  407794:	4683      	mov	fp, r0
  407796:	220a      	movs	r2, #10
  407798:	4620      	mov	r0, r4
  40779a:	2300      	movs	r3, #0
  40779c:	f001 fa2e 	bl	408bfc <__multadd>
  4077a0:	46c8      	mov	r8, r9
  4077a2:	4606      	mov	r6, r0
  4077a4:	e79d      	b.n	4076e2 <_dtoa_r+0xb92>
  4077a6:	f001 fa29 	bl	408bfc <__multadd>
  4077aa:	46c8      	mov	r8, r9
  4077ac:	4683      	mov	fp, r0
  4077ae:	4606      	mov	r6, r0
  4077b0:	e797      	b.n	4076e2 <_dtoa_r+0xb92>
  4077b2:	4601      	mov	r1, r0
  4077b4:	4620      	mov	r0, r4
  4077b6:	f8cd c010 	str.w	ip, [sp, #16]
  4077ba:	f001 fa15 	bl	408be8 <_Bfree>
  4077be:	2301      	movs	r3, #1
  4077c0:	f8dd c010 	ldr.w	ip, [sp, #16]
  4077c4:	e7bb      	b.n	40773e <_dtoa_r+0xbee>
  4077c6:	2b0e      	cmp	r3, #14
  4077c8:	bf8c      	ite	hi
  4077ca:	2300      	movhi	r3, #0
  4077cc:	2301      	movls	r3, #1
  4077ce:	2100      	movs	r1, #0
  4077d0:	401d      	ands	r5, r3
  4077d2:	6461      	str	r1, [r4, #68]	; 0x44
  4077d4:	e436      	b.n	407044 <_dtoa_r+0x4f4>
  4077d6:	2301      	movs	r3, #1
  4077d8:	9323      	str	r3, [sp, #140]	; 0x8c
  4077da:	9310      	str	r3, [sp, #64]	; 0x40
  4077dc:	9304      	str	r3, [sp, #16]
  4077de:	e7f6      	b.n	4077ce <_dtoa_r+0xc7e>
  4077e0:	9906      	ldr	r1, [sp, #24]
  4077e2:	4620      	mov	r0, r4
  4077e4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  4077e6:	f001 fb4b 	bl	408e80 <__pow5mult>
  4077ea:	9006      	str	r0, [sp, #24]
  4077ec:	f7ff bb42 	b.w	406e74 <_dtoa_r+0x324>
  4077f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4077f2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  4077f4:	1af3      	subs	r3, r6, r3
  4077f6:	960a      	str	r6, [sp, #40]	; 0x28
  4077f8:	2600      	movs	r6, #0
  4077fa:	441a      	add	r2, r3
  4077fc:	920c      	str	r2, [sp, #48]	; 0x30
  4077fe:	f7ff bbf3 	b.w	406fe8 <_dtoa_r+0x498>
  407802:	9b04      	ldr	r3, [sp, #16]
  407804:	2b00      	cmp	r3, #0
  407806:	f43f adcc 	beq.w	4073a2 <_dtoa_r+0x852>
  40780a:	9d10      	ldr	r5, [sp, #64]	; 0x40
  40780c:	2d00      	cmp	r5, #0
  40780e:	f77f ae57 	ble.w	4074c0 <_dtoa_r+0x970>
  407812:	2200      	movs	r2, #0
  407814:	4b86      	ldr	r3, [pc, #536]	; (407a30 <_dtoa_r+0xee0>)
  407816:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  40781a:	f002 fab3 	bl	409d84 <__aeabi_dmul>
  40781e:	9b02      	ldr	r3, [sp, #8]
  407820:	4606      	mov	r6, r0
  407822:	460f      	mov	r7, r1
  407824:	3b01      	subs	r3, #1
  407826:	f108 0001 	add.w	r0, r8, #1
  40782a:	e9cd 6708 	strd	r6, r7, [sp, #32]
  40782e:	9314      	str	r3, [sp, #80]	; 0x50
  407830:	f002 fa42 	bl	409cb8 <__aeabi_i2d>
  407834:	4602      	mov	r2, r0
  407836:	460b      	mov	r3, r1
  407838:	4630      	mov	r0, r6
  40783a:	4639      	mov	r1, r7
  40783c:	f002 faa2 	bl	409d84 <__aeabi_dmul>
  407840:	2200      	movs	r2, #0
  407842:	4b7c      	ldr	r3, [pc, #496]	; (407a34 <_dtoa_r+0xee4>)
  407844:	f002 f8ec 	bl	409a20 <__adddf3>
  407848:	46ac      	mov	ip, r5
  40784a:	4606      	mov	r6, r0
  40784c:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
  407850:	e45a      	b.n	407108 <_dtoa_r+0x5b8>
  407852:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
  407856:	f04f 0802 	mov.w	r8, #2
  40785a:	e9cd 2308 	strd	r2, r3, [sp, #32]
  40785e:	e432      	b.n	4070c6 <_dtoa_r+0x576>
  407860:	9b14      	ldr	r3, [sp, #80]	; 0x50
  407862:	2130      	movs	r1, #48	; 0x30
  407864:	3301      	adds	r3, #1
  407866:	7011      	strb	r1, [r2, #0]
  407868:	9302      	str	r3, [sp, #8]
  40786a:	2331      	movs	r3, #49	; 0x31
  40786c:	7013      	strb	r3, [r2, #0]
  40786e:	f7ff bb72 	b.w	406f56 <_dtoa_r+0x406>
  407872:	9906      	ldr	r1, [sp, #24]
  407874:	4620      	mov	r0, r4
  407876:	f001 fb03 	bl	408e80 <__pow5mult>
  40787a:	9006      	str	r0, [sp, #24]
  40787c:	f7ff bafa 	b.w	406e74 <_dtoa_r+0x324>
  407880:	f1ba 0f00 	cmp.w	sl, #0
  407884:	f43f aeea 	beq.w	40765c <_dtoa_r+0xb0c>
  407888:	f7ff bb07 	b.w	406e9a <_dtoa_r+0x34a>
  40788c:	9a02      	ldr	r2, [sp, #8]
  40788e:	2331      	movs	r3, #49	; 0x31
  407890:	3201      	adds	r2, #1
  407892:	9202      	str	r2, [sp, #8]
  407894:	9a05      	ldr	r2, [sp, #20]
  407896:	7013      	strb	r3, [r2, #0]
  407898:	e5f5      	b.n	407486 <_dtoa_r+0x936>
  40789a:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40789c:	2a00      	cmp	r2, #0
  40789e:	d055      	beq.n	40794c <_dtoa_r+0xdfc>
  4078a0:	f203 4333 	addw	r3, r3, #1075	; 0x433
  4078a4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  4078a6:	9d07      	ldr	r5, [sp, #28]
  4078a8:	f7ff bba4 	b.w	406ff4 <_dtoa_r+0x4a4>
  4078ac:	9c03      	ldr	r4, [sp, #12]
  4078ae:	f7ff bb52 	b.w	406f56 <_dtoa_r+0x406>
  4078b2:	9b07      	ldr	r3, [sp, #28]
  4078b4:	9a04      	ldr	r2, [sp, #16]
  4078b6:	1a9d      	subs	r5, r3, r2
  4078b8:	2300      	movs	r3, #0
  4078ba:	f7ff bb9b 	b.w	406ff4 <_dtoa_r+0x4a4>
  4078be:	2b00      	cmp	r3, #0
  4078c0:	9706      	str	r7, [sp, #24]
  4078c2:	46e1      	mov	r9, ip
  4078c4:	f8cd b020 	str.w	fp, [sp, #32]
  4078c8:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  4078ca:	4665      	mov	r5, ip
  4078cc:	dd0f      	ble.n	4078ee <_dtoa_r+0xd9e>
  4078ce:	9906      	ldr	r1, [sp, #24]
  4078d0:	2201      	movs	r2, #1
  4078d2:	4620      	mov	r0, r4
  4078d4:	f001 fb24 	bl	408f20 <__lshift>
  4078d8:	4639      	mov	r1, r7
  4078da:	9006      	str	r0, [sp, #24]
  4078dc:	f001 fb7a 	bl	408fd4 <__mcmp>
  4078e0:	2800      	cmp	r0, #0
  4078e2:	dd75      	ble.n	4079d0 <_dtoa_r+0xe80>
  4078e4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
  4078e8:	d066      	beq.n	4079b8 <_dtoa_r+0xe68>
  4078ea:	f109 0501 	add.w	r5, r9, #1
  4078ee:	f8dd a020 	ldr.w	sl, [sp, #32]
  4078f2:	f888 5000 	strb.w	r5, [r8]
  4078f6:	f108 0501 	add.w	r5, r8, #1
  4078fa:	9608      	str	r6, [sp, #32]
  4078fc:	e5c3      	b.n	407486 <_dtoa_r+0x936>
  4078fe:	9c12      	ldr	r4, [sp, #72]	; 0x48
  407900:	e531      	b.n	407366 <_dtoa_r+0x816>
  407902:	d104      	bne.n	40790e <_dtoa_r+0xdbe>
  407904:	f019 0f01 	tst.w	r9, #1
  407908:	d001      	beq.n	40790e <_dtoa_r+0xdbe>
  40790a:	e5ac      	b.n	407466 <_dtoa_r+0x916>
  40790c:	4615      	mov	r5, r2
  40790e:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  407912:	1e6a      	subs	r2, r5, #1
  407914:	2b30      	cmp	r3, #48	; 0x30
  407916:	d0f9      	beq.n	40790c <_dtoa_r+0xdbc>
  407918:	e5b5      	b.n	407486 <_dtoa_r+0x936>
  40791a:	2700      	movs	r7, #0
  40791c:	9708      	str	r7, [sp, #32]
  40791e:	f7ff ba4c 	b.w	406dba <_dtoa_r+0x26a>
  407922:	9e08      	ldr	r6, [sp, #32]
  407924:	4620      	mov	r0, r4
  407926:	6871      	ldr	r1, [r6, #4]
  407928:	f001 f936 	bl	408b98 <_Balloc>
  40792c:	6933      	ldr	r3, [r6, #16]
  40792e:	4605      	mov	r5, r0
  407930:	f106 010c 	add.w	r1, r6, #12
  407934:	1c9a      	adds	r2, r3, #2
  407936:	300c      	adds	r0, #12
  407938:	0092      	lsls	r2, r2, #2
  40793a:	f001 f82d 	bl	408998 <memcpy>
  40793e:	4620      	mov	r0, r4
  407940:	4629      	mov	r1, r5
  407942:	2201      	movs	r2, #1
  407944:	f001 faec 	bl	408f20 <__lshift>
  407948:	4606      	mov	r6, r0
  40794a:	e6b8      	b.n	4076be <_dtoa_r+0xb6e>
  40794c:	9b16      	ldr	r3, [sp, #88]	; 0x58
  40794e:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  407950:	9d07      	ldr	r5, [sp, #28]
  407952:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
  407956:	f7ff bb4d 	b.w	406ff4 <_dtoa_r+0x4a4>
  40795a:	f1bc 0f39 	cmp.w	ip, #57	; 0x39
  40795e:	9706      	str	r7, [sp, #24]
  407960:	f8cd b020 	str.w	fp, [sp, #32]
  407964:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  407966:	d030      	beq.n	4079ca <_dtoa_r+0xe7a>
  407968:	f10c 0901 	add.w	r9, ip, #1
  40796c:	f8dd a020 	ldr.w	sl, [sp, #32]
  407970:	f108 0501 	add.w	r5, r8, #1
  407974:	9608      	str	r6, [sp, #32]
  407976:	f888 9000 	strb.w	r9, [r8]
  40797a:	e584      	b.n	407486 <_dtoa_r+0x936>
  40797c:	9706      	str	r7, [sp, #24]
  40797e:	46e1      	mov	r9, ip
  407980:	46da      	mov	sl, fp
  407982:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  407984:	9608      	str	r6, [sp, #32]
  407986:	e562      	b.n	40744e <_dtoa_r+0x8fe>
  407988:	46b0      	mov	r8, r6
  40798a:	e504      	b.n	407396 <_dtoa_r+0x846>
  40798c:	f1bc 0f39 	cmp.w	ip, #57	; 0x39
  407990:	9706      	str	r7, [sp, #24]
  407992:	f8cd b020 	str.w	fp, [sp, #32]
  407996:	4655      	mov	r5, sl
  407998:	46cb      	mov	fp, r9
  40799a:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  40799c:	46e1      	mov	r9, ip
  40799e:	d00b      	beq.n	4079b8 <_dtoa_r+0xe68>
  4079a0:	2d00      	cmp	r5, #0
  4079a2:	dd01      	ble.n	4079a8 <_dtoa_r+0xe58>
  4079a4:	f10b 0931 	add.w	r9, fp, #49	; 0x31
  4079a8:	f8dd a020 	ldr.w	sl, [sp, #32]
  4079ac:	f108 0501 	add.w	r5, r8, #1
  4079b0:	f888 9000 	strb.w	r9, [r8]
  4079b4:	9608      	str	r6, [sp, #32]
  4079b6:	e566      	b.n	407486 <_dtoa_r+0x936>
  4079b8:	f8dd a020 	ldr.w	sl, [sp, #32]
  4079bc:	9608      	str	r6, [sp, #32]
  4079be:	2239      	movs	r2, #57	; 0x39
  4079c0:	f108 0501 	add.w	r5, r8, #1
  4079c4:	f888 2000 	strb.w	r2, [r8]
  4079c8:	e54f      	b.n	40746a <_dtoa_r+0x91a>
  4079ca:	46da      	mov	sl, fp
  4079cc:	9608      	str	r6, [sp, #32]
  4079ce:	e7f6      	b.n	4079be <_dtoa_r+0xe6e>
  4079d0:	d18d      	bne.n	4078ee <_dtoa_r+0xd9e>
  4079d2:	f019 0f01 	tst.w	r9, #1
  4079d6:	d08a      	beq.n	4078ee <_dtoa_r+0xd9e>
  4079d8:	e784      	b.n	4078e4 <_dtoa_r+0xd94>
  4079da:	f04f 0802 	mov.w	r8, #2
  4079de:	f7ff bb72 	b.w	4070c6 <_dtoa_r+0x576>
  4079e2:	9b10      	ldr	r3, [sp, #64]	; 0x40
  4079e4:	9304      	str	r3, [sp, #16]
  4079e6:	e50e      	b.n	407406 <_dtoa_r+0x8b6>
  4079e8:	f43f aa75 	beq.w	406ed6 <_dtoa_r+0x386>
  4079ec:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
  4079f0:	f7ff ba6a 	b.w	406ec8 <_dtoa_r+0x378>
  4079f4:	2501      	movs	r5, #1
  4079f6:	f7ff b982 	b.w	406cfe <_dtoa_r+0x1ae>
  4079fa:	2500      	movs	r5, #0
  4079fc:	4620      	mov	r0, r4
  4079fe:	6465      	str	r5, [r4, #68]	; 0x44
  407a00:	4629      	mov	r1, r5
  407a02:	f001 f8c9 	bl	408b98 <_Balloc>
  407a06:	9a02      	ldr	r2, [sp, #8]
  407a08:	9005      	str	r0, [sp, #20]
  407a0a:	2a0e      	cmp	r2, #14
  407a0c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  407a0e:	6420      	str	r0, [r4, #64]	; 0x40
  407a10:	f73f aad7 	bgt.w	406fc2 <_dtoa_r+0x472>
  407a14:	42ab      	cmp	r3, r5
  407a16:	f6ff aad4 	blt.w	406fc2 <_dtoa_r+0x472>
  407a1a:	f04f 33ff 	mov.w	r3, #4294967295
  407a1e:	9523      	str	r5, [sp, #140]	; 0x8c
  407a20:	9304      	str	r3, [sp, #16]
  407a22:	f7ff b9a9 	b.w	406d78 <_dtoa_r+0x228>
  407a26:	2301      	movs	r3, #1
  407a28:	930b      	str	r3, [sp, #44]	; 0x2c
  407a2a:	f7ff bbfa 	b.w	407222 <_dtoa_r+0x6d2>
  407a2e:	bf00      	nop
  407a30:	40240000 	.word	0x40240000
  407a34:	401c0000 	.word	0x401c0000

00407a38 <__sflush_r>:
  407a38:	898b      	ldrh	r3, [r1, #12]
  407a3a:	b29a      	uxth	r2, r3
  407a3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  407a40:	460d      	mov	r5, r1
  407a42:	0711      	lsls	r1, r2, #28
  407a44:	4680      	mov	r8, r0
  407a46:	d43c      	bmi.n	407ac2 <__sflush_r+0x8a>
  407a48:	686a      	ldr	r2, [r5, #4]
  407a4a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  407a4e:	2a00      	cmp	r2, #0
  407a50:	81ab      	strh	r3, [r5, #12]
  407a52:	dd76      	ble.n	407b42 <__sflush_r+0x10a>
  407a54:	6aae      	ldr	r6, [r5, #40]	; 0x28
  407a56:	2e00      	cmp	r6, #0
  407a58:	d04b      	beq.n	407af2 <__sflush_r+0xba>
  407a5a:	b29b      	uxth	r3, r3
  407a5c:	2100      	movs	r1, #0
  407a5e:	f8d8 4000 	ldr.w	r4, [r8]
  407a62:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
  407a66:	f8c8 1000 	str.w	r1, [r8]
  407a6a:	b292      	uxth	r2, r2
  407a6c:	2a00      	cmp	r2, #0
  407a6e:	d06c      	beq.n	407b4a <__sflush_r+0x112>
  407a70:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  407a72:	075f      	lsls	r7, r3, #29
  407a74:	d505      	bpl.n	407a82 <__sflush_r+0x4a>
  407a76:	6869      	ldr	r1, [r5, #4]
  407a78:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  407a7a:	1a52      	subs	r2, r2, r1
  407a7c:	b10b      	cbz	r3, 407a82 <__sflush_r+0x4a>
  407a7e:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  407a80:	1ad2      	subs	r2, r2, r3
  407a82:	4640      	mov	r0, r8
  407a84:	69e9      	ldr	r1, [r5, #28]
  407a86:	2300      	movs	r3, #0
  407a88:	47b0      	blx	r6
  407a8a:	1c46      	adds	r6, r0, #1
  407a8c:	d03e      	beq.n	407b0c <__sflush_r+0xd4>
  407a8e:	89ab      	ldrh	r3, [r5, #12]
  407a90:	2100      	movs	r1, #0
  407a92:	692a      	ldr	r2, [r5, #16]
  407a94:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  407a98:	6069      	str	r1, [r5, #4]
  407a9a:	602a      	str	r2, [r5, #0]
  407a9c:	b29b      	uxth	r3, r3
  407a9e:	04da      	lsls	r2, r3, #19
  407aa0:	81ab      	strh	r3, [r5, #12]
  407aa2:	d44c      	bmi.n	407b3e <__sflush_r+0x106>
  407aa4:	6b29      	ldr	r1, [r5, #48]	; 0x30
  407aa6:	f8c8 4000 	str.w	r4, [r8]
  407aaa:	b311      	cbz	r1, 407af2 <__sflush_r+0xba>
  407aac:	f105 0340 	add.w	r3, r5, #64	; 0x40
  407ab0:	4299      	cmp	r1, r3
  407ab2:	d002      	beq.n	407aba <__sflush_r+0x82>
  407ab4:	4640      	mov	r0, r8
  407ab6:	f000 f96b 	bl	407d90 <_free_r>
  407aba:	2000      	movs	r0, #0
  407abc:	6328      	str	r0, [r5, #48]	; 0x30
  407abe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  407ac2:	692e      	ldr	r6, [r5, #16]
  407ac4:	b1ae      	cbz	r6, 407af2 <__sflush_r+0xba>
  407ac6:	682c      	ldr	r4, [r5, #0]
  407ac8:	0791      	lsls	r1, r2, #30
  407aca:	602e      	str	r6, [r5, #0]
  407acc:	eba4 0406 	sub.w	r4, r4, r6
  407ad0:	d11a      	bne.n	407b08 <__sflush_r+0xd0>
  407ad2:	696b      	ldr	r3, [r5, #20]
  407ad4:	60ab      	str	r3, [r5, #8]
  407ad6:	e00a      	b.n	407aee <__sflush_r+0xb6>
  407ad8:	4632      	mov	r2, r6
  407ada:	4623      	mov	r3, r4
  407adc:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  407ade:	4640      	mov	r0, r8
  407ae0:	69e9      	ldr	r1, [r5, #28]
  407ae2:	47b8      	blx	r7
  407ae4:	2800      	cmp	r0, #0
  407ae6:	eba4 0400 	sub.w	r4, r4, r0
  407aea:	4406      	add	r6, r0
  407aec:	dd04      	ble.n	407af8 <__sflush_r+0xc0>
  407aee:	2c00      	cmp	r4, #0
  407af0:	dcf2      	bgt.n	407ad8 <__sflush_r+0xa0>
  407af2:	2000      	movs	r0, #0
  407af4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  407af8:	89ab      	ldrh	r3, [r5, #12]
  407afa:	f04f 30ff 	mov.w	r0, #4294967295
  407afe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  407b02:	81ab      	strh	r3, [r5, #12]
  407b04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  407b08:	2300      	movs	r3, #0
  407b0a:	e7e3      	b.n	407ad4 <__sflush_r+0x9c>
  407b0c:	f8d8 3000 	ldr.w	r3, [r8]
  407b10:	fab3 f283 	clz	r2, r3
  407b14:	2b00      	cmp	r3, #0
  407b16:	bf18      	it	ne
  407b18:	2b1d      	cmpne	r3, #29
  407b1a:	ea4f 1252 	mov.w	r2, r2, lsr #5
  407b1e:	d001      	beq.n	407b24 <__sflush_r+0xec>
  407b20:	2b16      	cmp	r3, #22
  407b22:	d127      	bne.n	407b74 <__sflush_r+0x13c>
  407b24:	89ab      	ldrh	r3, [r5, #12]
  407b26:	2600      	movs	r6, #0
  407b28:	6929      	ldr	r1, [r5, #16]
  407b2a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  407b2e:	b29b      	uxth	r3, r3
  407b30:	81ab      	strh	r3, [r5, #12]
  407b32:	04db      	lsls	r3, r3, #19
  407b34:	e885 0042 	stmia.w	r5, {r1, r6}
  407b38:	d5b4      	bpl.n	407aa4 <__sflush_r+0x6c>
  407b3a:	2a00      	cmp	r2, #0
  407b3c:	d0b2      	beq.n	407aa4 <__sflush_r+0x6c>
  407b3e:	6528      	str	r0, [r5, #80]	; 0x50
  407b40:	e7b0      	b.n	407aa4 <__sflush_r+0x6c>
  407b42:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  407b44:	2a00      	cmp	r2, #0
  407b46:	dc85      	bgt.n	407a54 <__sflush_r+0x1c>
  407b48:	e7d3      	b.n	407af2 <__sflush_r+0xba>
  407b4a:	2301      	movs	r3, #1
  407b4c:	4640      	mov	r0, r8
  407b4e:	69e9      	ldr	r1, [r5, #28]
  407b50:	47b0      	blx	r6
  407b52:	1c43      	adds	r3, r0, #1
  407b54:	4602      	mov	r2, r0
  407b56:	d002      	beq.n	407b5e <__sflush_r+0x126>
  407b58:	89ab      	ldrh	r3, [r5, #12]
  407b5a:	6aae      	ldr	r6, [r5, #40]	; 0x28
  407b5c:	e789      	b.n	407a72 <__sflush_r+0x3a>
  407b5e:	f8d8 3000 	ldr.w	r3, [r8]
  407b62:	2b00      	cmp	r3, #0
  407b64:	d0f8      	beq.n	407b58 <__sflush_r+0x120>
  407b66:	2b16      	cmp	r3, #22
  407b68:	d001      	beq.n	407b6e <__sflush_r+0x136>
  407b6a:	2b1d      	cmp	r3, #29
  407b6c:	d1c4      	bne.n	407af8 <__sflush_r+0xc0>
  407b6e:	f8c8 4000 	str.w	r4, [r8]
  407b72:	e7be      	b.n	407af2 <__sflush_r+0xba>
  407b74:	89ab      	ldrh	r3, [r5, #12]
  407b76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  407b7a:	81ab      	strh	r3, [r5, #12]
  407b7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00407b80 <_fflush_r>:
  407b80:	b510      	push	{r4, lr}
  407b82:	4604      	mov	r4, r0
  407b84:	b082      	sub	sp, #8
  407b86:	b108      	cbz	r0, 407b8c <_fflush_r+0xc>
  407b88:	6b83      	ldr	r3, [r0, #56]	; 0x38
  407b8a:	b153      	cbz	r3, 407ba2 <_fflush_r+0x22>
  407b8c:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
  407b90:	b908      	cbnz	r0, 407b96 <_fflush_r+0x16>
  407b92:	b002      	add	sp, #8
  407b94:	bd10      	pop	{r4, pc}
  407b96:	4620      	mov	r0, r4
  407b98:	b002      	add	sp, #8
  407b9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  407b9e:	f7ff bf4b 	b.w	407a38 <__sflush_r>
  407ba2:	9101      	str	r1, [sp, #4]
  407ba4:	f000 f886 	bl	407cb4 <__sinit>
  407ba8:	9901      	ldr	r1, [sp, #4]
  407baa:	e7ef      	b.n	407b8c <_fflush_r+0xc>

00407bac <_cleanup_r>:
  407bac:	4901      	ldr	r1, [pc, #4]	; (407bb4 <_cleanup_r+0x8>)
  407bae:	f000 bb59 	b.w	408264 <_fwalk_reent>
  407bb2:	bf00      	nop
  407bb4:	004098f5 	.word	0x004098f5

00407bb8 <__sinit.part.1>:
  407bb8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  407bbc:	4682      	mov	sl, r0
  407bbe:	2400      	movs	r4, #0
  407bc0:	4837      	ldr	r0, [pc, #220]	; (407ca0 <__sinit.part.1+0xe8>)
  407bc2:	2103      	movs	r1, #3
  407bc4:	f8da 5004 	ldr.w	r5, [sl, #4]
  407bc8:	f50a 723b 	add.w	r2, sl, #748	; 0x2ec
  407bcc:	2604      	movs	r6, #4
  407bce:	f8ca 003c 	str.w	r0, [sl, #60]	; 0x3c
  407bd2:	f8ca 12e4 	str.w	r1, [sl, #740]	; 0x2e4
  407bd6:	f105 005c 	add.w	r0, r5, #92	; 0x5c
  407bda:	f8ca 22e8 	str.w	r2, [sl, #744]	; 0x2e8
  407bde:	4621      	mov	r1, r4
  407be0:	f8ca 42e0 	str.w	r4, [sl, #736]	; 0x2e0
  407be4:	2208      	movs	r2, #8
  407be6:	81ae      	strh	r6, [r5, #12]
  407be8:	602c      	str	r4, [r5, #0]
  407bea:	606c      	str	r4, [r5, #4]
  407bec:	60ac      	str	r4, [r5, #8]
  407bee:	666c      	str	r4, [r5, #100]	; 0x64
  407bf0:	81ec      	strh	r4, [r5, #14]
  407bf2:	612c      	str	r4, [r5, #16]
  407bf4:	616c      	str	r4, [r5, #20]
  407bf6:	61ac      	str	r4, [r5, #24]
  407bf8:	f7fd fa58 	bl	4050ac <memset>
  407bfc:	f8df b0a8 	ldr.w	fp, [pc, #168]	; 407ca8 <__sinit.part.1+0xf0>
  407c00:	f8da 6008 	ldr.w	r6, [sl, #8]
  407c04:	f04f 0301 	mov.w	r3, #1
  407c08:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 407cac <__sinit.part.1+0xf4>
  407c0c:	f04f 0e09 	mov.w	lr, #9
  407c10:	f8df 809c 	ldr.w	r8, [pc, #156]	; 407cb0 <__sinit.part.1+0xf8>
  407c14:	4621      	mov	r1, r4
  407c16:	4f23      	ldr	r7, [pc, #140]	; (407ca4 <__sinit.part.1+0xec>)
  407c18:	2208      	movs	r2, #8
  407c1a:	61ed      	str	r5, [r5, #28]
  407c1c:	f106 005c 	add.w	r0, r6, #92	; 0x5c
  407c20:	f8c5 b020 	str.w	fp, [r5, #32]
  407c24:	f8c5 9024 	str.w	r9, [r5, #36]	; 0x24
  407c28:	f8c5 8028 	str.w	r8, [r5, #40]	; 0x28
  407c2c:	62ef      	str	r7, [r5, #44]	; 0x2c
  407c2e:	81f3      	strh	r3, [r6, #14]
  407c30:	f8a6 e00c 	strh.w	lr, [r6, #12]
  407c34:	6034      	str	r4, [r6, #0]
  407c36:	6074      	str	r4, [r6, #4]
  407c38:	60b4      	str	r4, [r6, #8]
  407c3a:	6674      	str	r4, [r6, #100]	; 0x64
  407c3c:	6134      	str	r4, [r6, #16]
  407c3e:	6174      	str	r4, [r6, #20]
  407c40:	61b4      	str	r4, [r6, #24]
  407c42:	f7fd fa33 	bl	4050ac <memset>
  407c46:	f8da 500c 	ldr.w	r5, [sl, #12]
  407c4a:	f04f 0c12 	mov.w	ip, #18
  407c4e:	f04f 0e02 	mov.w	lr, #2
  407c52:	61f6      	str	r6, [r6, #28]
  407c54:	4621      	mov	r1, r4
  407c56:	f8c6 b020 	str.w	fp, [r6, #32]
  407c5a:	f105 005c 	add.w	r0, r5, #92	; 0x5c
  407c5e:	f8c6 9024 	str.w	r9, [r6, #36]	; 0x24
  407c62:	2208      	movs	r2, #8
  407c64:	f8c6 8028 	str.w	r8, [r6, #40]	; 0x28
  407c68:	62f7      	str	r7, [r6, #44]	; 0x2c
  407c6a:	602c      	str	r4, [r5, #0]
  407c6c:	606c      	str	r4, [r5, #4]
  407c6e:	60ac      	str	r4, [r5, #8]
  407c70:	666c      	str	r4, [r5, #100]	; 0x64
  407c72:	612c      	str	r4, [r5, #16]
  407c74:	616c      	str	r4, [r5, #20]
  407c76:	61ac      	str	r4, [r5, #24]
  407c78:	f8a5 c00c 	strh.w	ip, [r5, #12]
  407c7c:	f8a5 e00e 	strh.w	lr, [r5, #14]
  407c80:	f7fd fa14 	bl	4050ac <memset>
  407c84:	2301      	movs	r3, #1
  407c86:	61ed      	str	r5, [r5, #28]
  407c88:	f8c5 b020 	str.w	fp, [r5, #32]
  407c8c:	f8c5 9024 	str.w	r9, [r5, #36]	; 0x24
  407c90:	f8c5 8028 	str.w	r8, [r5, #40]	; 0x28
  407c94:	62ef      	str	r7, [r5, #44]	; 0x2c
  407c96:	f8ca 3038 	str.w	r3, [sl, #56]	; 0x38
  407c9a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407c9e:	bf00      	nop
  407ca0:	00407bad 	.word	0x00407bad
  407ca4:	00409689 	.word	0x00409689
  407ca8:	00409609 	.word	0x00409609
  407cac:	0040962d 	.word	0x0040962d
  407cb0:	00409665 	.word	0x00409665

00407cb4 <__sinit>:
  407cb4:	6b83      	ldr	r3, [r0, #56]	; 0x38
  407cb6:	b103      	cbz	r3, 407cba <__sinit+0x6>
  407cb8:	4770      	bx	lr
  407cba:	f7ff bf7d 	b.w	407bb8 <__sinit.part.1>
  407cbe:	bf00      	nop

00407cc0 <__sfp_lock_acquire>:
  407cc0:	4770      	bx	lr
  407cc2:	bf00      	nop

00407cc4 <__sfp_lock_release>:
  407cc4:	4770      	bx	lr
  407cc6:	bf00      	nop

00407cc8 <__libc_fini_array>:
  407cc8:	b538      	push	{r3, r4, r5, lr}
  407cca:	4b08      	ldr	r3, [pc, #32]	; (407cec <__libc_fini_array+0x24>)
  407ccc:	4d08      	ldr	r5, [pc, #32]	; (407cf0 <__libc_fini_array+0x28>)
  407cce:	1aed      	subs	r5, r5, r3
  407cd0:	10ac      	asrs	r4, r5, #2
  407cd2:	bf18      	it	ne
  407cd4:	18ed      	addne	r5, r5, r3
  407cd6:	d005      	beq.n	407ce4 <__libc_fini_array+0x1c>
  407cd8:	3c01      	subs	r4, #1
  407cda:	f855 3d04 	ldr.w	r3, [r5, #-4]!
  407cde:	4798      	blx	r3
  407ce0:	2c00      	cmp	r4, #0
  407ce2:	d1f9      	bne.n	407cd8 <__libc_fini_array+0x10>
  407ce4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  407ce8:	f003 b808 	b.w	40acfc <_fini>
  407cec:	0040ad08 	.word	0x0040ad08
  407cf0:	0040ad0c 	.word	0x0040ad0c

00407cf4 <_malloc_trim_r>:
  407cf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  407cf6:	4f22      	ldr	r7, [pc, #136]	; (407d80 <_malloc_trim_r+0x8c>)
  407cf8:	460c      	mov	r4, r1
  407cfa:	4606      	mov	r6, r0
  407cfc:	f000 ff48 	bl	408b90 <__malloc_lock>
  407d00:	68ba      	ldr	r2, [r7, #8]
  407d02:	4b20      	ldr	r3, [pc, #128]	; (407d84 <_malloc_trim_r+0x90>)
  407d04:	6855      	ldr	r5, [r2, #4]
  407d06:	f025 0503 	bic.w	r5, r5, #3
  407d0a:	1b2c      	subs	r4, r5, r4
  407d0c:	f604 74ef 	addw	r4, r4, #4079	; 0xfef
  407d10:	4023      	ands	r3, r4
  407d12:	f5a3 5480 	sub.w	r4, r3, #4096	; 0x1000
  407d16:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  407d1a:	db07      	blt.n	407d2c <_malloc_trim_r+0x38>
  407d1c:	4630      	mov	r0, r6
  407d1e:	2100      	movs	r1, #0
  407d20:	f001 fc60 	bl	4095e4 <_sbrk_r>
  407d24:	68bb      	ldr	r3, [r7, #8]
  407d26:	442b      	add	r3, r5
  407d28:	4298      	cmp	r0, r3
  407d2a:	d004      	beq.n	407d36 <_malloc_trim_r+0x42>
  407d2c:	4630      	mov	r0, r6
  407d2e:	f000 ff31 	bl	408b94 <__malloc_unlock>
  407d32:	2000      	movs	r0, #0
  407d34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  407d36:	4630      	mov	r0, r6
  407d38:	4261      	negs	r1, r4
  407d3a:	f001 fc53 	bl	4095e4 <_sbrk_r>
  407d3e:	3001      	adds	r0, #1
  407d40:	d00d      	beq.n	407d5e <_malloc_trim_r+0x6a>
  407d42:	4a11      	ldr	r2, [pc, #68]	; (407d88 <_malloc_trim_r+0x94>)
  407d44:	1b2d      	subs	r5, r5, r4
  407d46:	68b9      	ldr	r1, [r7, #8]
  407d48:	4630      	mov	r0, r6
  407d4a:	6813      	ldr	r3, [r2, #0]
  407d4c:	f045 0501 	orr.w	r5, r5, #1
  407d50:	1b1b      	subs	r3, r3, r4
  407d52:	604d      	str	r5, [r1, #4]
  407d54:	6013      	str	r3, [r2, #0]
  407d56:	f000 ff1d 	bl	408b94 <__malloc_unlock>
  407d5a:	2001      	movs	r0, #1
  407d5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  407d5e:	4630      	mov	r0, r6
  407d60:	2100      	movs	r1, #0
  407d62:	f001 fc3f 	bl	4095e4 <_sbrk_r>
  407d66:	68ba      	ldr	r2, [r7, #8]
  407d68:	1a83      	subs	r3, r0, r2
  407d6a:	2b0f      	cmp	r3, #15
  407d6c:	ddde      	ble.n	407d2c <_malloc_trim_r+0x38>
  407d6e:	4c07      	ldr	r4, [pc, #28]	; (407d8c <_malloc_trim_r+0x98>)
  407d70:	f043 0301 	orr.w	r3, r3, #1
  407d74:	4904      	ldr	r1, [pc, #16]	; (407d88 <_malloc_trim_r+0x94>)
  407d76:	6824      	ldr	r4, [r4, #0]
  407d78:	6053      	str	r3, [r2, #4]
  407d7a:	1b00      	subs	r0, r0, r4
  407d7c:	6008      	str	r0, [r1, #0]
  407d7e:	e7d5      	b.n	407d2c <_malloc_trim_r+0x38>
  407d80:	204004f4 	.word	0x204004f4
  407d84:	fffff000 	.word	0xfffff000
  407d88:	204009d8 	.word	0x204009d8
  407d8c:	20400900 	.word	0x20400900

00407d90 <_free_r>:
  407d90:	2900      	cmp	r1, #0
  407d92:	d04d      	beq.n	407e30 <_free_r+0xa0>
  407d94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  407d98:	460c      	mov	r4, r1
  407d9a:	4680      	mov	r8, r0
  407d9c:	f000 fef8 	bl	408b90 <__malloc_lock>
  407da0:	4963      	ldr	r1, [pc, #396]	; (407f30 <_free_r+0x1a0>)
  407da2:	f854 7c04 	ldr.w	r7, [r4, #-4]
  407da6:	f1a4 0508 	sub.w	r5, r4, #8
  407daa:	688e      	ldr	r6, [r1, #8]
  407dac:	f027 0301 	bic.w	r3, r7, #1
  407db0:	18ea      	adds	r2, r5, r3
  407db2:	6850      	ldr	r0, [r2, #4]
  407db4:	4296      	cmp	r6, r2
  407db6:	f020 0003 	bic.w	r0, r0, #3
  407dba:	d059      	beq.n	407e70 <_free_r+0xe0>
  407dbc:	07fe      	lsls	r6, r7, #31
  407dbe:	6050      	str	r0, [r2, #4]
  407dc0:	d40b      	bmi.n	407dda <_free_r+0x4a>
  407dc2:	f854 4c08 	ldr.w	r4, [r4, #-8]
  407dc6:	f101 0708 	add.w	r7, r1, #8
  407dca:	1b2d      	subs	r5, r5, r4
  407dcc:	4423      	add	r3, r4
  407dce:	68ac      	ldr	r4, [r5, #8]
  407dd0:	42bc      	cmp	r4, r7
  407dd2:	d066      	beq.n	407ea2 <_free_r+0x112>
  407dd4:	68ef      	ldr	r7, [r5, #12]
  407dd6:	60e7      	str	r7, [r4, #12]
  407dd8:	60bc      	str	r4, [r7, #8]
  407dda:	1814      	adds	r4, r2, r0
  407ddc:	6864      	ldr	r4, [r4, #4]
  407dde:	07e4      	lsls	r4, r4, #31
  407de0:	d40c      	bmi.n	407dfc <_free_r+0x6c>
  407de2:	4c54      	ldr	r4, [pc, #336]	; (407f34 <_free_r+0x1a4>)
  407de4:	4403      	add	r3, r0
  407de6:	6890      	ldr	r0, [r2, #8]
  407de8:	42a0      	cmp	r0, r4
  407dea:	d07c      	beq.n	407ee6 <_free_r+0x156>
  407dec:	68d4      	ldr	r4, [r2, #12]
  407dee:	f043 0201 	orr.w	r2, r3, #1
  407df2:	60c4      	str	r4, [r0, #12]
  407df4:	60a0      	str	r0, [r4, #8]
  407df6:	606a      	str	r2, [r5, #4]
  407df8:	50eb      	str	r3, [r5, r3]
  407dfa:	e003      	b.n	407e04 <_free_r+0x74>
  407dfc:	f043 0201 	orr.w	r2, r3, #1
  407e00:	606a      	str	r2, [r5, #4]
  407e02:	50eb      	str	r3, [r5, r3]
  407e04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  407e08:	d213      	bcs.n	407e32 <_free_r+0xa2>
  407e0a:	08db      	lsrs	r3, r3, #3
  407e0c:	2001      	movs	r0, #1
  407e0e:	684a      	ldr	r2, [r1, #4]
  407e10:	109c      	asrs	r4, r3, #2
  407e12:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
  407e16:	40a0      	lsls	r0, r4
  407e18:	689c      	ldr	r4, [r3, #8]
  407e1a:	4302      	orrs	r2, r0
  407e1c:	60eb      	str	r3, [r5, #12]
  407e1e:	60ac      	str	r4, [r5, #8]
  407e20:	604a      	str	r2, [r1, #4]
  407e22:	609d      	str	r5, [r3, #8]
  407e24:	60e5      	str	r5, [r4, #12]
  407e26:	4640      	mov	r0, r8
  407e28:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  407e2c:	f000 beb2 	b.w	408b94 <__malloc_unlock>
  407e30:	4770      	bx	lr
  407e32:	0a5a      	lsrs	r2, r3, #9
  407e34:	2a04      	cmp	r2, #4
  407e36:	d847      	bhi.n	407ec8 <_free_r+0x138>
  407e38:	099a      	lsrs	r2, r3, #6
  407e3a:	f102 0438 	add.w	r4, r2, #56	; 0x38
  407e3e:	0060      	lsls	r0, r4, #1
  407e40:	eb01 0080 	add.w	r0, r1, r0, lsl #2
  407e44:	493a      	ldr	r1, [pc, #232]	; (407f30 <_free_r+0x1a0>)
  407e46:	6882      	ldr	r2, [r0, #8]
  407e48:	4282      	cmp	r2, r0
  407e4a:	d043      	beq.n	407ed4 <_free_r+0x144>
  407e4c:	6851      	ldr	r1, [r2, #4]
  407e4e:	f021 0103 	bic.w	r1, r1, #3
  407e52:	4299      	cmp	r1, r3
  407e54:	d902      	bls.n	407e5c <_free_r+0xcc>
  407e56:	6892      	ldr	r2, [r2, #8]
  407e58:	4290      	cmp	r0, r2
  407e5a:	d1f7      	bne.n	407e4c <_free_r+0xbc>
  407e5c:	68d3      	ldr	r3, [r2, #12]
  407e5e:	60eb      	str	r3, [r5, #12]
  407e60:	4640      	mov	r0, r8
  407e62:	60aa      	str	r2, [r5, #8]
  407e64:	609d      	str	r5, [r3, #8]
  407e66:	60d5      	str	r5, [r2, #12]
  407e68:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  407e6c:	f000 be92 	b.w	408b94 <__malloc_unlock>
  407e70:	07ff      	lsls	r7, r7, #31
  407e72:	4403      	add	r3, r0
  407e74:	d407      	bmi.n	407e86 <_free_r+0xf6>
  407e76:	f854 2c08 	ldr.w	r2, [r4, #-8]
  407e7a:	1aad      	subs	r5, r5, r2
  407e7c:	4413      	add	r3, r2
  407e7e:	68a8      	ldr	r0, [r5, #8]
  407e80:	68ea      	ldr	r2, [r5, #12]
  407e82:	60c2      	str	r2, [r0, #12]
  407e84:	6090      	str	r0, [r2, #8]
  407e86:	4a2c      	ldr	r2, [pc, #176]	; (407f38 <_free_r+0x1a8>)
  407e88:	f043 0001 	orr.w	r0, r3, #1
  407e8c:	6812      	ldr	r2, [r2, #0]
  407e8e:	6068      	str	r0, [r5, #4]
  407e90:	4293      	cmp	r3, r2
  407e92:	608d      	str	r5, [r1, #8]
  407e94:	d3c7      	bcc.n	407e26 <_free_r+0x96>
  407e96:	4b29      	ldr	r3, [pc, #164]	; (407f3c <_free_r+0x1ac>)
  407e98:	4640      	mov	r0, r8
  407e9a:	6819      	ldr	r1, [r3, #0]
  407e9c:	f7ff ff2a 	bl	407cf4 <_malloc_trim_r>
  407ea0:	e7c1      	b.n	407e26 <_free_r+0x96>
  407ea2:	1811      	adds	r1, r2, r0
  407ea4:	6849      	ldr	r1, [r1, #4]
  407ea6:	07c9      	lsls	r1, r1, #31
  407ea8:	d409      	bmi.n	407ebe <_free_r+0x12e>
  407eaa:	4403      	add	r3, r0
  407eac:	68d1      	ldr	r1, [r2, #12]
  407eae:	6892      	ldr	r2, [r2, #8]
  407eb0:	f043 0001 	orr.w	r0, r3, #1
  407eb4:	60d1      	str	r1, [r2, #12]
  407eb6:	608a      	str	r2, [r1, #8]
  407eb8:	6068      	str	r0, [r5, #4]
  407eba:	50eb      	str	r3, [r5, r3]
  407ebc:	e7b3      	b.n	407e26 <_free_r+0x96>
  407ebe:	f043 0201 	orr.w	r2, r3, #1
  407ec2:	606a      	str	r2, [r5, #4]
  407ec4:	50eb      	str	r3, [r5, r3]
  407ec6:	e7ae      	b.n	407e26 <_free_r+0x96>
  407ec8:	2a14      	cmp	r2, #20
  407eca:	d815      	bhi.n	407ef8 <_free_r+0x168>
  407ecc:	f102 045b 	add.w	r4, r2, #91	; 0x5b
  407ed0:	0060      	lsls	r0, r4, #1
  407ed2:	e7b5      	b.n	407e40 <_free_r+0xb0>
  407ed4:	10a4      	asrs	r4, r4, #2
  407ed6:	2701      	movs	r7, #1
  407ed8:	6848      	ldr	r0, [r1, #4]
  407eda:	4613      	mov	r3, r2
  407edc:	fa07 f404 	lsl.w	r4, r7, r4
  407ee0:	4320      	orrs	r0, r4
  407ee2:	6048      	str	r0, [r1, #4]
  407ee4:	e7bb      	b.n	407e5e <_free_r+0xce>
  407ee6:	f043 0201 	orr.w	r2, r3, #1
  407eea:	614d      	str	r5, [r1, #20]
  407eec:	610d      	str	r5, [r1, #16]
  407eee:	60e8      	str	r0, [r5, #12]
  407ef0:	60a8      	str	r0, [r5, #8]
  407ef2:	606a      	str	r2, [r5, #4]
  407ef4:	50eb      	str	r3, [r5, r3]
  407ef6:	e796      	b.n	407e26 <_free_r+0x96>
  407ef8:	2a54      	cmp	r2, #84	; 0x54
  407efa:	d804      	bhi.n	407f06 <_free_r+0x176>
  407efc:	0b1a      	lsrs	r2, r3, #12
  407efe:	f102 046e 	add.w	r4, r2, #110	; 0x6e
  407f02:	0060      	lsls	r0, r4, #1
  407f04:	e79c      	b.n	407e40 <_free_r+0xb0>
  407f06:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  407f0a:	d804      	bhi.n	407f16 <_free_r+0x186>
  407f0c:	0bda      	lsrs	r2, r3, #15
  407f0e:	f102 0477 	add.w	r4, r2, #119	; 0x77
  407f12:	0060      	lsls	r0, r4, #1
  407f14:	e794      	b.n	407e40 <_free_r+0xb0>
  407f16:	f240 5054 	movw	r0, #1364	; 0x554
  407f1a:	4282      	cmp	r2, r0
  407f1c:	d804      	bhi.n	407f28 <_free_r+0x198>
  407f1e:	0c9a      	lsrs	r2, r3, #18
  407f20:	f102 047c 	add.w	r4, r2, #124	; 0x7c
  407f24:	0060      	lsls	r0, r4, #1
  407f26:	e78b      	b.n	407e40 <_free_r+0xb0>
  407f28:	20fc      	movs	r0, #252	; 0xfc
  407f2a:	247e      	movs	r4, #126	; 0x7e
  407f2c:	e788      	b.n	407e40 <_free_r+0xb0>
  407f2e:	bf00      	nop
  407f30:	204004f4 	.word	0x204004f4
  407f34:	204004fc 	.word	0x204004fc
  407f38:	204008fc 	.word	0x204008fc
  407f3c:	204009d4 	.word	0x204009d4

00407f40 <__sfvwrite_r>:
  407f40:	6893      	ldr	r3, [r2, #8]
  407f42:	2b00      	cmp	r3, #0
  407f44:	d07a      	beq.n	40803c <__sfvwrite_r+0xfc>
  407f46:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  407f4a:	f8b1 e00c 	ldrh.w	lr, [r1, #12]
  407f4e:	b083      	sub	sp, #12
  407f50:	460c      	mov	r4, r1
  407f52:	4681      	mov	r9, r0
  407f54:	f01e 0f08 	tst.w	lr, #8
  407f58:	4616      	mov	r6, r2
  407f5a:	d026      	beq.n	407faa <__sfvwrite_r+0x6a>
  407f5c:	690b      	ldr	r3, [r1, #16]
  407f5e:	b323      	cbz	r3, 407faa <__sfvwrite_r+0x6a>
  407f60:	f00e 0802 	and.w	r8, lr, #2
  407f64:	6835      	ldr	r5, [r6, #0]
  407f66:	fa1f f088 	uxth.w	r0, r8
  407f6a:	b370      	cbz	r0, 407fca <__sfvwrite_r+0x8a>
  407f6c:	f04f 0a00 	mov.w	sl, #0
  407f70:	f8df b2ec 	ldr.w	fp, [pc, #748]	; 408260 <__sfvwrite_r+0x320>
  407f74:	46d0      	mov	r8, sl
  407f76:	45d8      	cmp	r8, fp
  407f78:	4643      	mov	r3, r8
  407f7a:	4652      	mov	r2, sl
  407f7c:	4648      	mov	r0, r9
  407f7e:	bf28      	it	cs
  407f80:	465b      	movcs	r3, fp
  407f82:	f1b8 0f00 	cmp.w	r8, #0
  407f86:	d053      	beq.n	408030 <__sfvwrite_r+0xf0>
  407f88:	69e1      	ldr	r1, [r4, #28]
  407f8a:	6a67      	ldr	r7, [r4, #36]	; 0x24
  407f8c:	47b8      	blx	r7
  407f8e:	2800      	cmp	r0, #0
  407f90:	dd73      	ble.n	40807a <__sfvwrite_r+0x13a>
  407f92:	68b3      	ldr	r3, [r6, #8]
  407f94:	4482      	add	sl, r0
  407f96:	ebc0 0808 	rsb	r8, r0, r8
  407f9a:	1a18      	subs	r0, r3, r0
  407f9c:	60b0      	str	r0, [r6, #8]
  407f9e:	2800      	cmp	r0, #0
  407fa0:	d1e9      	bne.n	407f76 <__sfvwrite_r+0x36>
  407fa2:	2000      	movs	r0, #0
  407fa4:	b003      	add	sp, #12
  407fa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407faa:	4648      	mov	r0, r9
  407fac:	4621      	mov	r1, r4
  407fae:	f7fe fcbb 	bl	406928 <__swsetup_r>
  407fb2:	2800      	cmp	r0, #0
  407fb4:	f040 814c 	bne.w	408250 <__sfvwrite_r+0x310>
  407fb8:	f8b4 e00c 	ldrh.w	lr, [r4, #12]
  407fbc:	6835      	ldr	r5, [r6, #0]
  407fbe:	f00e 0802 	and.w	r8, lr, #2
  407fc2:	fa1f f088 	uxth.w	r0, r8
  407fc6:	2800      	cmp	r0, #0
  407fc8:	d1d0      	bne.n	407f6c <__sfvwrite_r+0x2c>
  407fca:	f01e 0b01 	ands.w	fp, lr, #1
  407fce:	d15d      	bne.n	40808c <__sfvwrite_r+0x14c>
  407fd0:	46d8      	mov	r8, fp
  407fd2:	f1b8 0f00 	cmp.w	r8, #0
  407fd6:	d025      	beq.n	408024 <__sfvwrite_r+0xe4>
  407fd8:	f41e 7f00 	tst.w	lr, #512	; 0x200
  407fdc:	68a7      	ldr	r7, [r4, #8]
  407fde:	d02f      	beq.n	408040 <__sfvwrite_r+0x100>
  407fe0:	45b8      	cmp	r8, r7
  407fe2:	46ba      	mov	sl, r7
  407fe4:	f0c0 80a8 	bcc.w	408138 <__sfvwrite_r+0x1f8>
  407fe8:	f41e 6f90 	tst.w	lr, #1152	; 0x480
  407fec:	f040 80b5 	bne.w	40815a <__sfvwrite_r+0x21a>
  407ff0:	6820      	ldr	r0, [r4, #0]
  407ff2:	4659      	mov	r1, fp
  407ff4:	4652      	mov	r2, sl
  407ff6:	f000 fd69 	bl	408acc <memmove>
  407ffa:	68a2      	ldr	r2, [r4, #8]
  407ffc:	6821      	ldr	r1, [r4, #0]
  407ffe:	4640      	mov	r0, r8
  408000:	1bd7      	subs	r7, r2, r7
  408002:	eb01 030a 	add.w	r3, r1, sl
  408006:	60a7      	str	r7, [r4, #8]
  408008:	6023      	str	r3, [r4, #0]
  40800a:	68b3      	ldr	r3, [r6, #8]
  40800c:	4483      	add	fp, r0
  40800e:	ebc0 0808 	rsb	r8, r0, r8
  408012:	1a18      	subs	r0, r3, r0
  408014:	60b0      	str	r0, [r6, #8]
  408016:	2800      	cmp	r0, #0
  408018:	d0c3      	beq.n	407fa2 <__sfvwrite_r+0x62>
  40801a:	f8b4 e00c 	ldrh.w	lr, [r4, #12]
  40801e:	f1b8 0f00 	cmp.w	r8, #0
  408022:	d1d9      	bne.n	407fd8 <__sfvwrite_r+0x98>
  408024:	f8d5 b000 	ldr.w	fp, [r5]
  408028:	3508      	adds	r5, #8
  40802a:	f855 8c04 	ldr.w	r8, [r5, #-4]
  40802e:	e7d0      	b.n	407fd2 <__sfvwrite_r+0x92>
  408030:	f8d5 a000 	ldr.w	sl, [r5]
  408034:	3508      	adds	r5, #8
  408036:	f855 8c04 	ldr.w	r8, [r5, #-4]
  40803a:	e79c      	b.n	407f76 <__sfvwrite_r+0x36>
  40803c:	2000      	movs	r0, #0
  40803e:	4770      	bx	lr
  408040:	6820      	ldr	r0, [r4, #0]
  408042:	6923      	ldr	r3, [r4, #16]
  408044:	4298      	cmp	r0, r3
  408046:	d803      	bhi.n	408050 <__sfvwrite_r+0x110>
  408048:	6963      	ldr	r3, [r4, #20]
  40804a:	4598      	cmp	r8, r3
  40804c:	f080 80bf 	bcs.w	4081ce <__sfvwrite_r+0x28e>
  408050:	4547      	cmp	r7, r8
  408052:	4659      	mov	r1, fp
  408054:	bf28      	it	cs
  408056:	4647      	movcs	r7, r8
  408058:	463a      	mov	r2, r7
  40805a:	f000 fd37 	bl	408acc <memmove>
  40805e:	68a3      	ldr	r3, [r4, #8]
  408060:	6822      	ldr	r2, [r4, #0]
  408062:	1bdb      	subs	r3, r3, r7
  408064:	443a      	add	r2, r7
  408066:	60a3      	str	r3, [r4, #8]
  408068:	6022      	str	r2, [r4, #0]
  40806a:	2b00      	cmp	r3, #0
  40806c:	d149      	bne.n	408102 <__sfvwrite_r+0x1c2>
  40806e:	4648      	mov	r0, r9
  408070:	4621      	mov	r1, r4
  408072:	f7ff fd85 	bl	407b80 <_fflush_r>
  408076:	2800      	cmp	r0, #0
  408078:	d043      	beq.n	408102 <__sfvwrite_r+0x1c2>
  40807a:	89a3      	ldrh	r3, [r4, #12]
  40807c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  408080:	f04f 30ff 	mov.w	r0, #4294967295
  408084:	81a3      	strh	r3, [r4, #12]
  408086:	b003      	add	sp, #12
  408088:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40808c:	4680      	mov	r8, r0
  40808e:	4683      	mov	fp, r0
  408090:	4682      	mov	sl, r0
  408092:	9000      	str	r0, [sp, #0]
  408094:	f1ba 0f00 	cmp.w	sl, #0
  408098:	d02b      	beq.n	4080f2 <__sfvwrite_r+0x1b2>
  40809a:	9b00      	ldr	r3, [sp, #0]
  40809c:	2b00      	cmp	r3, #0
  40809e:	d04f      	beq.n	408140 <__sfvwrite_r+0x200>
  4080a0:	45d0      	cmp	r8, sl
  4080a2:	6962      	ldr	r2, [r4, #20]
  4080a4:	68a1      	ldr	r1, [r4, #8]
  4080a6:	4643      	mov	r3, r8
  4080a8:	bf28      	it	cs
  4080aa:	4653      	movcs	r3, sl
  4080ac:	6820      	ldr	r0, [r4, #0]
  4080ae:	eb02 0c01 	add.w	ip, r2, r1
  4080b2:	461f      	mov	r7, r3
  4080b4:	4563      	cmp	r3, ip
  4080b6:	dd03      	ble.n	4080c0 <__sfvwrite_r+0x180>
  4080b8:	6921      	ldr	r1, [r4, #16]
  4080ba:	4288      	cmp	r0, r1
  4080bc:	f200 8099 	bhi.w	4081f2 <__sfvwrite_r+0x2b2>
  4080c0:	4293      	cmp	r3, r2
  4080c2:	db20      	blt.n	408106 <__sfvwrite_r+0x1c6>
  4080c4:	4613      	mov	r3, r2
  4080c6:	6a67      	ldr	r7, [r4, #36]	; 0x24
  4080c8:	4648      	mov	r0, r9
  4080ca:	69e1      	ldr	r1, [r4, #28]
  4080cc:	465a      	mov	r2, fp
  4080ce:	47b8      	blx	r7
  4080d0:	1e07      	subs	r7, r0, #0
  4080d2:	ddd2      	ble.n	40807a <__sfvwrite_r+0x13a>
  4080d4:	ebb8 0807 	subs.w	r8, r8, r7
  4080d8:	d025      	beq.n	408126 <__sfvwrite_r+0x1e6>
  4080da:	68b3      	ldr	r3, [r6, #8]
  4080dc:	44bb      	add	fp, r7
  4080de:	ebc7 0a0a 	rsb	sl, r7, sl
  4080e2:	1bdf      	subs	r7, r3, r7
  4080e4:	60b7      	str	r7, [r6, #8]
  4080e6:	2f00      	cmp	r7, #0
  4080e8:	f43f af5b 	beq.w	407fa2 <__sfvwrite_r+0x62>
  4080ec:	f1ba 0f00 	cmp.w	sl, #0
  4080f0:	d1d3      	bne.n	40809a <__sfvwrite_r+0x15a>
  4080f2:	2300      	movs	r3, #0
  4080f4:	f8d5 b000 	ldr.w	fp, [r5]
  4080f8:	f8d5 a004 	ldr.w	sl, [r5, #4]
  4080fc:	3508      	adds	r5, #8
  4080fe:	9300      	str	r3, [sp, #0]
  408100:	e7c8      	b.n	408094 <__sfvwrite_r+0x154>
  408102:	4638      	mov	r0, r7
  408104:	e781      	b.n	40800a <__sfvwrite_r+0xca>
  408106:	461a      	mov	r2, r3
  408108:	4659      	mov	r1, fp
  40810a:	9301      	str	r3, [sp, #4]
  40810c:	f000 fcde 	bl	408acc <memmove>
  408110:	68a2      	ldr	r2, [r4, #8]
  408112:	ebb8 0807 	subs.w	r8, r8, r7
  408116:	6821      	ldr	r1, [r4, #0]
  408118:	9b01      	ldr	r3, [sp, #4]
  40811a:	eba2 0203 	sub.w	r2, r2, r3
  40811e:	440b      	add	r3, r1
  408120:	60a2      	str	r2, [r4, #8]
  408122:	6023      	str	r3, [r4, #0]
  408124:	d1d9      	bne.n	4080da <__sfvwrite_r+0x19a>
  408126:	4648      	mov	r0, r9
  408128:	4621      	mov	r1, r4
  40812a:	f7ff fd29 	bl	407b80 <_fflush_r>
  40812e:	2800      	cmp	r0, #0
  408130:	d1a3      	bne.n	40807a <__sfvwrite_r+0x13a>
  408132:	f8cd 8000 	str.w	r8, [sp]
  408136:	e7d0      	b.n	4080da <__sfvwrite_r+0x19a>
  408138:	4647      	mov	r7, r8
  40813a:	6820      	ldr	r0, [r4, #0]
  40813c:	46c2      	mov	sl, r8
  40813e:	e758      	b.n	407ff2 <__sfvwrite_r+0xb2>
  408140:	4658      	mov	r0, fp
  408142:	210a      	movs	r1, #10
  408144:	4652      	mov	r2, sl
  408146:	f000 fbdf 	bl	408908 <memchr>
  40814a:	2800      	cmp	r0, #0
  40814c:	d07b      	beq.n	408246 <__sfvwrite_r+0x306>
  40814e:	3001      	adds	r0, #1
  408150:	2301      	movs	r3, #1
  408152:	ebcb 0800 	rsb	r8, fp, r0
  408156:	9300      	str	r3, [sp, #0]
  408158:	e7a2      	b.n	4080a0 <__sfvwrite_r+0x160>
  40815a:	6963      	ldr	r3, [r4, #20]
  40815c:	6921      	ldr	r1, [r4, #16]
  40815e:	6827      	ldr	r7, [r4, #0]
  408160:	eb03 0c43 	add.w	ip, r3, r3, lsl #1
  408164:	1a7f      	subs	r7, r7, r1
  408166:	eb0c 7cdc 	add.w	ip, ip, ip, lsr #31
  40816a:	1c7b      	adds	r3, r7, #1
  40816c:	ea4f 0c6c 	mov.w	ip, ip, asr #1
  408170:	4443      	add	r3, r8
  408172:	4662      	mov	r2, ip
  408174:	459c      	cmp	ip, r3
  408176:	d201      	bcs.n	40817c <__sfvwrite_r+0x23c>
  408178:	469c      	mov	ip, r3
  40817a:	461a      	mov	r2, r3
  40817c:	f41e 6f80 	tst.w	lr, #1024	; 0x400
  408180:	f8cd c000 	str.w	ip, [sp]
  408184:	d04b      	beq.n	40821e <__sfvwrite_r+0x2de>
  408186:	4611      	mov	r1, r2
  408188:	4648      	mov	r0, r9
  40818a:	f000 f911 	bl	4083b0 <_malloc_r>
  40818e:	f8dd c000 	ldr.w	ip, [sp]
  408192:	4682      	mov	sl, r0
  408194:	2800      	cmp	r0, #0
  408196:	d05e      	beq.n	408256 <__sfvwrite_r+0x316>
  408198:	463a      	mov	r2, r7
  40819a:	6921      	ldr	r1, [r4, #16]
  40819c:	f8cd c000 	str.w	ip, [sp]
  4081a0:	f000 fbfa 	bl	408998 <memcpy>
  4081a4:	89a2      	ldrh	r2, [r4, #12]
  4081a6:	f8dd c000 	ldr.w	ip, [sp]
  4081aa:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
  4081ae:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  4081b2:	81a2      	strh	r2, [r4, #12]
  4081b4:	eb0a 0007 	add.w	r0, sl, r7
  4081b8:	ebc7 020c 	rsb	r2, r7, ip
  4081bc:	f8c4 a010 	str.w	sl, [r4, #16]
  4081c0:	4647      	mov	r7, r8
  4081c2:	6020      	str	r0, [r4, #0]
  4081c4:	46c2      	mov	sl, r8
  4081c6:	60a2      	str	r2, [r4, #8]
  4081c8:	f8c4 c014 	str.w	ip, [r4, #20]
  4081cc:	e711      	b.n	407ff2 <__sfvwrite_r+0xb2>
  4081ce:	f06f 4e00 	mvn.w	lr, #2147483648	; 0x80000000
  4081d2:	6a67      	ldr	r7, [r4, #36]	; 0x24
  4081d4:	4648      	mov	r0, r9
  4081d6:	69e1      	ldr	r1, [r4, #28]
  4081d8:	45c6      	cmp	lr, r8
  4081da:	465a      	mov	r2, fp
  4081dc:	bf28      	it	cs
  4081de:	46c6      	movcs	lr, r8
  4081e0:	fb9e fef3 	sdiv	lr, lr, r3
  4081e4:	fb0e f303 	mul.w	r3, lr, r3
  4081e8:	47b8      	blx	r7
  4081ea:	2800      	cmp	r0, #0
  4081ec:	f73f af0d 	bgt.w	40800a <__sfvwrite_r+0xca>
  4081f0:	e743      	b.n	40807a <__sfvwrite_r+0x13a>
  4081f2:	4662      	mov	r2, ip
  4081f4:	4659      	mov	r1, fp
  4081f6:	f8cd c004 	str.w	ip, [sp, #4]
  4081fa:	f000 fc67 	bl	408acc <memmove>
  4081fe:	6823      	ldr	r3, [r4, #0]
  408200:	4648      	mov	r0, r9
  408202:	f8dd c004 	ldr.w	ip, [sp, #4]
  408206:	4621      	mov	r1, r4
  408208:	4463      	add	r3, ip
  40820a:	6023      	str	r3, [r4, #0]
  40820c:	f7ff fcb8 	bl	407b80 <_fflush_r>
  408210:	f8dd c004 	ldr.w	ip, [sp, #4]
  408214:	2800      	cmp	r0, #0
  408216:	f47f af30 	bne.w	40807a <__sfvwrite_r+0x13a>
  40821a:	4667      	mov	r7, ip
  40821c:	e75a      	b.n	4080d4 <__sfvwrite_r+0x194>
  40821e:	4648      	mov	r0, r9
  408220:	f000 ffc6 	bl	4091b0 <_realloc_r>
  408224:	f8dd c000 	ldr.w	ip, [sp]
  408228:	4682      	mov	sl, r0
  40822a:	2800      	cmp	r0, #0
  40822c:	d1c2      	bne.n	4081b4 <__sfvwrite_r+0x274>
  40822e:	4648      	mov	r0, r9
  408230:	6921      	ldr	r1, [r4, #16]
  408232:	f7ff fdad 	bl	407d90 <_free_r>
  408236:	89a3      	ldrh	r3, [r4, #12]
  408238:	220c      	movs	r2, #12
  40823a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  40823e:	f8c9 2000 	str.w	r2, [r9]
  408242:	b29b      	uxth	r3, r3
  408244:	e71a      	b.n	40807c <__sfvwrite_r+0x13c>
  408246:	2301      	movs	r3, #1
  408248:	f10a 0801 	add.w	r8, sl, #1
  40824c:	9300      	str	r3, [sp, #0]
  40824e:	e727      	b.n	4080a0 <__sfvwrite_r+0x160>
  408250:	f04f 30ff 	mov.w	r0, #4294967295
  408254:	e6a6      	b.n	407fa4 <__sfvwrite_r+0x64>
  408256:	220c      	movs	r2, #12
  408258:	89a3      	ldrh	r3, [r4, #12]
  40825a:	f8c9 2000 	str.w	r2, [r9]
  40825e:	e70d      	b.n	40807c <__sfvwrite_r+0x13c>
  408260:	7ffffc00 	.word	0x7ffffc00

00408264 <_fwalk_reent>:
  408264:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  408268:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  40826c:	d01e      	beq.n	4082ac <_fwalk_reent+0x48>
  40826e:	4688      	mov	r8, r1
  408270:	4606      	mov	r6, r0
  408272:	f04f 0900 	mov.w	r9, #0
  408276:	687d      	ldr	r5, [r7, #4]
  408278:	68bc      	ldr	r4, [r7, #8]
  40827a:	3d01      	subs	r5, #1
  40827c:	d410      	bmi.n	4082a0 <_fwalk_reent+0x3c>
  40827e:	89a3      	ldrh	r3, [r4, #12]
  408280:	3d01      	subs	r5, #1
  408282:	2b01      	cmp	r3, #1
  408284:	d908      	bls.n	408298 <_fwalk_reent+0x34>
  408286:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  40828a:	4621      	mov	r1, r4
  40828c:	4630      	mov	r0, r6
  40828e:	3301      	adds	r3, #1
  408290:	d002      	beq.n	408298 <_fwalk_reent+0x34>
  408292:	47c0      	blx	r8
  408294:	ea49 0900 	orr.w	r9, r9, r0
  408298:	1c6b      	adds	r3, r5, #1
  40829a:	f104 0468 	add.w	r4, r4, #104	; 0x68
  40829e:	d1ee      	bne.n	40827e <_fwalk_reent+0x1a>
  4082a0:	683f      	ldr	r7, [r7, #0]
  4082a2:	2f00      	cmp	r7, #0
  4082a4:	d1e7      	bne.n	408276 <_fwalk_reent+0x12>
  4082a6:	4648      	mov	r0, r9
  4082a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4082ac:	46b9      	mov	r9, r7
  4082ae:	4648      	mov	r0, r9
  4082b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

004082b4 <_localeconv_r>:
  4082b4:	4800      	ldr	r0, [pc, #0]	; (4082b8 <_localeconv_r+0x4>)
  4082b6:	4770      	bx	lr
  4082b8:	204004bc 	.word	0x204004bc

004082bc <__smakebuf_r>:
  4082bc:	898b      	ldrh	r3, [r1, #12]
  4082be:	b29a      	uxth	r2, r3
  4082c0:	f012 0f02 	tst.w	r2, #2
  4082c4:	d13d      	bne.n	408342 <__smakebuf_r+0x86>
  4082c6:	b5f0      	push	{r4, r5, r6, r7, lr}
  4082c8:	460c      	mov	r4, r1
  4082ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4082ce:	b091      	sub	sp, #68	; 0x44
  4082d0:	4605      	mov	r5, r0
  4082d2:	2900      	cmp	r1, #0
  4082d4:	db19      	blt.n	40830a <__smakebuf_r+0x4e>
  4082d6:	aa01      	add	r2, sp, #4
  4082d8:	f001 fb4e 	bl	409978 <_fstat_r>
  4082dc:	2800      	cmp	r0, #0
  4082de:	db12      	blt.n	408306 <__smakebuf_r+0x4a>
  4082e0:	9b02      	ldr	r3, [sp, #8]
  4082e2:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
  4082e6:	f5a3 5700 	sub.w	r7, r3, #8192	; 0x2000
  4082ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
  4082ee:	fab7 f787 	clz	r7, r7
  4082f2:	ea4f 1757 	mov.w	r7, r7, lsr #5
  4082f6:	d02b      	beq.n	408350 <__smakebuf_r+0x94>
  4082f8:	89a3      	ldrh	r3, [r4, #12]
  4082fa:	f44f 6680 	mov.w	r6, #1024	; 0x400
  4082fe:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  408302:	81a3      	strh	r3, [r4, #12]
  408304:	e00c      	b.n	408320 <__smakebuf_r+0x64>
  408306:	89a3      	ldrh	r3, [r4, #12]
  408308:	b29a      	uxth	r2, r3
  40830a:	f012 0f80 	tst.w	r2, #128	; 0x80
  40830e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  408312:	f04f 0700 	mov.w	r7, #0
  408316:	bf0c      	ite	eq
  408318:	f44f 6680 	moveq.w	r6, #1024	; 0x400
  40831c:	2640      	movne	r6, #64	; 0x40
  40831e:	81a3      	strh	r3, [r4, #12]
  408320:	4628      	mov	r0, r5
  408322:	4631      	mov	r1, r6
  408324:	f000 f844 	bl	4083b0 <_malloc_r>
  408328:	89a3      	ldrh	r3, [r4, #12]
  40832a:	b340      	cbz	r0, 40837e <__smakebuf_r+0xc2>
  40832c:	4a1a      	ldr	r2, [pc, #104]	; (408398 <__smakebuf_r+0xdc>)
  40832e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  408332:	63ea      	str	r2, [r5, #60]	; 0x3c
  408334:	81a3      	strh	r3, [r4, #12]
  408336:	6020      	str	r0, [r4, #0]
  408338:	6120      	str	r0, [r4, #16]
  40833a:	6166      	str	r6, [r4, #20]
  40833c:	b99f      	cbnz	r7, 408366 <__smakebuf_r+0xaa>
  40833e:	b011      	add	sp, #68	; 0x44
  408340:	bdf0      	pop	{r4, r5, r6, r7, pc}
  408342:	f101 0343 	add.w	r3, r1, #67	; 0x43
  408346:	2201      	movs	r2, #1
  408348:	600b      	str	r3, [r1, #0]
  40834a:	610b      	str	r3, [r1, #16]
  40834c:	614a      	str	r2, [r1, #20]
  40834e:	4770      	bx	lr
  408350:	4b12      	ldr	r3, [pc, #72]	; (40839c <__smakebuf_r+0xe0>)
  408352:	6aa2      	ldr	r2, [r4, #40]	; 0x28
  408354:	429a      	cmp	r2, r3
  408356:	d1cf      	bne.n	4082f8 <__smakebuf_r+0x3c>
  408358:	89a3      	ldrh	r3, [r4, #12]
  40835a:	f44f 6680 	mov.w	r6, #1024	; 0x400
  40835e:	4333      	orrs	r3, r6
  408360:	64e6      	str	r6, [r4, #76]	; 0x4c
  408362:	81a3      	strh	r3, [r4, #12]
  408364:	e7dc      	b.n	408320 <__smakebuf_r+0x64>
  408366:	4628      	mov	r0, r5
  408368:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  40836c:	f001 fb18 	bl	4099a0 <_isatty_r>
  408370:	2800      	cmp	r0, #0
  408372:	d0e4      	beq.n	40833e <__smakebuf_r+0x82>
  408374:	89a3      	ldrh	r3, [r4, #12]
  408376:	f043 0301 	orr.w	r3, r3, #1
  40837a:	81a3      	strh	r3, [r4, #12]
  40837c:	e7df      	b.n	40833e <__smakebuf_r+0x82>
  40837e:	059a      	lsls	r2, r3, #22
  408380:	d4dd      	bmi.n	40833e <__smakebuf_r+0x82>
  408382:	f104 0243 	add.w	r2, r4, #67	; 0x43
  408386:	f043 0302 	orr.w	r3, r3, #2
  40838a:	2101      	movs	r1, #1
  40838c:	81a3      	strh	r3, [r4, #12]
  40838e:	6022      	str	r2, [r4, #0]
  408390:	6122      	str	r2, [r4, #16]
  408392:	6161      	str	r1, [r4, #20]
  408394:	e7d3      	b.n	40833e <__smakebuf_r+0x82>
  408396:	bf00      	nop
  408398:	00407bad 	.word	0x00407bad
  40839c:	00409665 	.word	0x00409665

004083a0 <malloc>:
  4083a0:	4b02      	ldr	r3, [pc, #8]	; (4083ac <malloc+0xc>)
  4083a2:	4601      	mov	r1, r0
  4083a4:	6818      	ldr	r0, [r3, #0]
  4083a6:	f000 b803 	b.w	4083b0 <_malloc_r>
  4083aa:	bf00      	nop
  4083ac:	204004b8 	.word	0x204004b8

004083b0 <_malloc_r>:
  4083b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4083b4:	f101 040b 	add.w	r4, r1, #11
  4083b8:	b083      	sub	sp, #12
  4083ba:	4605      	mov	r5, r0
  4083bc:	2c16      	cmp	r4, #22
  4083be:	d927      	bls.n	408410 <_malloc_r+0x60>
  4083c0:	f034 0407 	bics.w	r4, r4, #7
  4083c4:	d42a      	bmi.n	40841c <_malloc_r+0x6c>
  4083c6:	42a1      	cmp	r1, r4
  4083c8:	d828      	bhi.n	40841c <_malloc_r+0x6c>
  4083ca:	f000 fbe1 	bl	408b90 <__malloc_lock>
  4083ce:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
  4083d2:	d22b      	bcs.n	40842c <_malloc_r+0x7c>
  4083d4:	ea4f 0cd4 	mov.w	ip, r4, lsr #3
  4083d8:	4ec0      	ldr	r6, [pc, #768]	; (4086dc <_malloc_r+0x32c>)
  4083da:	eb06 02cc 	add.w	r2, r6, ip, lsl #3
  4083de:	68d3      	ldr	r3, [r2, #12]
  4083e0:	4293      	cmp	r3, r2
  4083e2:	f000 8171 	beq.w	4086c8 <_malloc_r+0x318>
  4083e6:	685a      	ldr	r2, [r3, #4]
  4083e8:	f103 0808 	add.w	r8, r3, #8
  4083ec:	68d9      	ldr	r1, [r3, #12]
  4083ee:	4628      	mov	r0, r5
  4083f0:	f022 0203 	bic.w	r2, r2, #3
  4083f4:	689c      	ldr	r4, [r3, #8]
  4083f6:	4413      	add	r3, r2
  4083f8:	60e1      	str	r1, [r4, #12]
  4083fa:	608c      	str	r4, [r1, #8]
  4083fc:	685a      	ldr	r2, [r3, #4]
  4083fe:	f042 0201 	orr.w	r2, r2, #1
  408402:	605a      	str	r2, [r3, #4]
  408404:	f000 fbc6 	bl	408b94 <__malloc_unlock>
  408408:	4640      	mov	r0, r8
  40840a:	b003      	add	sp, #12
  40840c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408410:	2910      	cmp	r1, #16
  408412:	d803      	bhi.n	40841c <_malloc_r+0x6c>
  408414:	f000 fbbc 	bl	408b90 <__malloc_lock>
  408418:	2410      	movs	r4, #16
  40841a:	e7db      	b.n	4083d4 <_malloc_r+0x24>
  40841c:	f04f 0800 	mov.w	r8, #0
  408420:	230c      	movs	r3, #12
  408422:	4640      	mov	r0, r8
  408424:	602b      	str	r3, [r5, #0]
  408426:	b003      	add	sp, #12
  408428:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40842c:	ea5f 2c54 	movs.w	ip, r4, lsr #9
  408430:	f000 8089 	beq.w	408546 <_malloc_r+0x196>
  408434:	f1bc 0f04 	cmp.w	ip, #4
  408438:	f200 80c4 	bhi.w	4085c4 <_malloc_r+0x214>
  40843c:	ea4f 1c94 	mov.w	ip, r4, lsr #6
  408440:	f10c 0c38 	add.w	ip, ip, #56	; 0x38
  408444:	ea4f 004c 	mov.w	r0, ip, lsl #1
  408448:	4ea4      	ldr	r6, [pc, #656]	; (4086dc <_malloc_r+0x32c>)
  40844a:	eb06 0080 	add.w	r0, r6, r0, lsl #2
  40844e:	68c3      	ldr	r3, [r0, #12]
  408450:	4298      	cmp	r0, r3
  408452:	d105      	bne.n	408460 <_malloc_r+0xb0>
  408454:	e00c      	b.n	408470 <_malloc_r+0xc0>
  408456:	2900      	cmp	r1, #0
  408458:	da79      	bge.n	40854e <_malloc_r+0x19e>
  40845a:	68db      	ldr	r3, [r3, #12]
  40845c:	4298      	cmp	r0, r3
  40845e:	d007      	beq.n	408470 <_malloc_r+0xc0>
  408460:	685a      	ldr	r2, [r3, #4]
  408462:	f022 0203 	bic.w	r2, r2, #3
  408466:	1b11      	subs	r1, r2, r4
  408468:	290f      	cmp	r1, #15
  40846a:	ddf4      	ble.n	408456 <_malloc_r+0xa6>
  40846c:	f10c 3cff 	add.w	ip, ip, #4294967295
  408470:	f10c 0c01 	add.w	ip, ip, #1
  408474:	4f99      	ldr	r7, [pc, #612]	; (4086dc <_malloc_r+0x32c>)
  408476:	6933      	ldr	r3, [r6, #16]
  408478:	f107 0e08 	add.w	lr, r7, #8
  40847c:	4573      	cmp	r3, lr
  40847e:	f000 8119 	beq.w	4086b4 <_malloc_r+0x304>
  408482:	685a      	ldr	r2, [r3, #4]
  408484:	f022 0203 	bic.w	r2, r2, #3
  408488:	1b11      	subs	r1, r2, r4
  40848a:	290f      	cmp	r1, #15
  40848c:	f300 80ca 	bgt.w	408624 <_malloc_r+0x274>
  408490:	2900      	cmp	r1, #0
  408492:	f8c7 e014 	str.w	lr, [r7, #20]
  408496:	f8c7 e010 	str.w	lr, [r7, #16]
  40849a:	da6a      	bge.n	408572 <_malloc_r+0x1c2>
  40849c:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  4084a0:	f080 809f 	bcs.w	4085e2 <_malloc_r+0x232>
  4084a4:	08d2      	lsrs	r2, r2, #3
  4084a6:	2001      	movs	r0, #1
  4084a8:	6879      	ldr	r1, [r7, #4]
  4084aa:	ea4f 08a2 	mov.w	r8, r2, asr #2
  4084ae:	eb07 02c2 	add.w	r2, r7, r2, lsl #3
  4084b2:	fa00 f008 	lsl.w	r0, r0, r8
  4084b6:	f8d2 8008 	ldr.w	r8, [r2, #8]
  4084ba:	4308      	orrs	r0, r1
  4084bc:	60da      	str	r2, [r3, #12]
  4084be:	f8c3 8008 	str.w	r8, [r3, #8]
  4084c2:	6078      	str	r0, [r7, #4]
  4084c4:	6093      	str	r3, [r2, #8]
  4084c6:	f8c8 300c 	str.w	r3, [r8, #12]
  4084ca:	ea4f 03ac 	mov.w	r3, ip, asr #2
  4084ce:	2101      	movs	r1, #1
  4084d0:	4099      	lsls	r1, r3
  4084d2:	4281      	cmp	r1, r0
  4084d4:	d85b      	bhi.n	40858e <_malloc_r+0x1de>
  4084d6:	4208      	tst	r0, r1
  4084d8:	d106      	bne.n	4084e8 <_malloc_r+0x138>
  4084da:	f02c 0c03 	bic.w	ip, ip, #3
  4084de:	0049      	lsls	r1, r1, #1
  4084e0:	f10c 0c04 	add.w	ip, ip, #4
  4084e4:	4208      	tst	r0, r1
  4084e6:	d0fa      	beq.n	4084de <_malloc_r+0x12e>
  4084e8:	eb06 08cc 	add.w	r8, r6, ip, lsl #3
  4084ec:	46e1      	mov	r9, ip
  4084ee:	4640      	mov	r0, r8
  4084f0:	68c7      	ldr	r7, [r0, #12]
  4084f2:	42b8      	cmp	r0, r7
  4084f4:	d107      	bne.n	408506 <_malloc_r+0x156>
  4084f6:	e0df      	b.n	4086b8 <_malloc_r+0x308>
  4084f8:	2a00      	cmp	r2, #0
  4084fa:	f280 80f7 	bge.w	4086ec <_malloc_r+0x33c>
  4084fe:	68ff      	ldr	r7, [r7, #12]
  408500:	42b8      	cmp	r0, r7
  408502:	f000 80d9 	beq.w	4086b8 <_malloc_r+0x308>
  408506:	687b      	ldr	r3, [r7, #4]
  408508:	f023 0303 	bic.w	r3, r3, #3
  40850c:	1b1a      	subs	r2, r3, r4
  40850e:	2a0f      	cmp	r2, #15
  408510:	ddf2      	ble.n	4084f8 <_malloc_r+0x148>
  408512:	46b8      	mov	r8, r7
  408514:	68fb      	ldr	r3, [r7, #12]
  408516:	f044 0901 	orr.w	r9, r4, #1
  40851a:	f042 0c01 	orr.w	ip, r2, #1
  40851e:	f858 1f08 	ldr.w	r1, [r8, #8]!
  408522:	443c      	add	r4, r7
  408524:	f8c7 9004 	str.w	r9, [r7, #4]
  408528:	4628      	mov	r0, r5
  40852a:	60cb      	str	r3, [r1, #12]
  40852c:	6099      	str	r1, [r3, #8]
  40852e:	6174      	str	r4, [r6, #20]
  408530:	6134      	str	r4, [r6, #16]
  408532:	f8c4 e00c 	str.w	lr, [r4, #12]
  408536:	f8c4 e008 	str.w	lr, [r4, #8]
  40853a:	f8c4 c004 	str.w	ip, [r4, #4]
  40853e:	50a2      	str	r2, [r4, r2]
  408540:	f000 fb28 	bl	408b94 <__malloc_unlock>
  408544:	e760      	b.n	408408 <_malloc_r+0x58>
  408546:	207e      	movs	r0, #126	; 0x7e
  408548:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
  40854c:	e77c      	b.n	408448 <_malloc_r+0x98>
  40854e:	441a      	add	r2, r3
  408550:	68dc      	ldr	r4, [r3, #12]
  408552:	689e      	ldr	r6, [r3, #8]
  408554:	f103 0808 	add.w	r8, r3, #8
  408558:	6851      	ldr	r1, [r2, #4]
  40855a:	4628      	mov	r0, r5
  40855c:	60f4      	str	r4, [r6, #12]
  40855e:	f041 0301 	orr.w	r3, r1, #1
  408562:	60a6      	str	r6, [r4, #8]
  408564:	6053      	str	r3, [r2, #4]
  408566:	f000 fb15 	bl	408b94 <__malloc_unlock>
  40856a:	4640      	mov	r0, r8
  40856c:	b003      	add	sp, #12
  40856e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408572:	441a      	add	r2, r3
  408574:	f103 0808 	add.w	r8, r3, #8
  408578:	4628      	mov	r0, r5
  40857a:	6853      	ldr	r3, [r2, #4]
  40857c:	f043 0301 	orr.w	r3, r3, #1
  408580:	6053      	str	r3, [r2, #4]
  408582:	f000 fb07 	bl	408b94 <__malloc_unlock>
  408586:	4640      	mov	r0, r8
  408588:	b003      	add	sp, #12
  40858a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40858e:	68b7      	ldr	r7, [r6, #8]
  408590:	687a      	ldr	r2, [r7, #4]
  408592:	f022 0803 	bic.w	r8, r2, #3
  408596:	ebc4 0208 	rsb	r2, r4, r8
  40859a:	2a0f      	cmp	r2, #15
  40859c:	dd56      	ble.n	40864c <_malloc_r+0x29c>
  40859e:	45a0      	cmp	r8, r4
  4085a0:	d354      	bcc.n	40864c <_malloc_r+0x29c>
  4085a2:	f044 0301 	orr.w	r3, r4, #1
  4085a6:	f042 0201 	orr.w	r2, r2, #1
  4085aa:	443c      	add	r4, r7
  4085ac:	f107 0808 	add.w	r8, r7, #8
  4085b0:	607b      	str	r3, [r7, #4]
  4085b2:	4628      	mov	r0, r5
  4085b4:	60b4      	str	r4, [r6, #8]
  4085b6:	6062      	str	r2, [r4, #4]
  4085b8:	f000 faec 	bl	408b94 <__malloc_unlock>
  4085bc:	4640      	mov	r0, r8
  4085be:	b003      	add	sp, #12
  4085c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4085c4:	f1bc 0f14 	cmp.w	ip, #20
  4085c8:	f240 809f 	bls.w	40870a <_malloc_r+0x35a>
  4085cc:	f1bc 0f54 	cmp.w	ip, #84	; 0x54
  4085d0:	f200 8127 	bhi.w	408822 <_malloc_r+0x472>
  4085d4:	ea4f 3c14 	mov.w	ip, r4, lsr #12
  4085d8:	f10c 0c6e 	add.w	ip, ip, #110	; 0x6e
  4085dc:	ea4f 004c 	mov.w	r0, ip, lsl #1
  4085e0:	e732      	b.n	408448 <_malloc_r+0x98>
  4085e2:	0a51      	lsrs	r1, r2, #9
  4085e4:	2904      	cmp	r1, #4
  4085e6:	f240 8095 	bls.w	408714 <_malloc_r+0x364>
  4085ea:	2914      	cmp	r1, #20
  4085ec:	f200 8142 	bhi.w	408874 <_malloc_r+0x4c4>
  4085f0:	f101 075b 	add.w	r7, r1, #91	; 0x5b
  4085f4:	0078      	lsls	r0, r7, #1
  4085f6:	eb06 0080 	add.w	r0, r6, r0, lsl #2
  4085fa:	f8df 90e0 	ldr.w	r9, [pc, #224]	; 4086dc <_malloc_r+0x32c>
  4085fe:	6881      	ldr	r1, [r0, #8]
  408600:	4281      	cmp	r1, r0
  408602:	f000 811b 	beq.w	40883c <_malloc_r+0x48c>
  408606:	684f      	ldr	r7, [r1, #4]
  408608:	f027 0703 	bic.w	r7, r7, #3
  40860c:	42ba      	cmp	r2, r7
  40860e:	d202      	bcs.n	408616 <_malloc_r+0x266>
  408610:	6889      	ldr	r1, [r1, #8]
  408612:	4288      	cmp	r0, r1
  408614:	d1f7      	bne.n	408606 <_malloc_r+0x256>
  408616:	68ca      	ldr	r2, [r1, #12]
  408618:	6870      	ldr	r0, [r6, #4]
  40861a:	60da      	str	r2, [r3, #12]
  40861c:	6099      	str	r1, [r3, #8]
  40861e:	6093      	str	r3, [r2, #8]
  408620:	60cb      	str	r3, [r1, #12]
  408622:	e752      	b.n	4084ca <_malloc_r+0x11a>
  408624:	f044 0601 	orr.w	r6, r4, #1
  408628:	f041 0201 	orr.w	r2, r1, #1
  40862c:	441c      	add	r4, r3
  40862e:	4628      	mov	r0, r5
  408630:	605e      	str	r6, [r3, #4]
  408632:	f103 0808 	add.w	r8, r3, #8
  408636:	617c      	str	r4, [r7, #20]
  408638:	613c      	str	r4, [r7, #16]
  40863a:	f8c4 e00c 	str.w	lr, [r4, #12]
  40863e:	f8c4 e008 	str.w	lr, [r4, #8]
  408642:	6062      	str	r2, [r4, #4]
  408644:	5061      	str	r1, [r4, r1]
  408646:	f000 faa5 	bl	408b94 <__malloc_unlock>
  40864a:	e6dd      	b.n	408408 <_malloc_r+0x58>
  40864c:	4a24      	ldr	r2, [pc, #144]	; (4086e0 <_malloc_r+0x330>)
  40864e:	4b25      	ldr	r3, [pc, #148]	; (4086e4 <_malloc_r+0x334>)
  408650:	6811      	ldr	r1, [r2, #0]
  408652:	681b      	ldr	r3, [r3, #0]
  408654:	3101      	adds	r1, #1
  408656:	4423      	add	r3, r4
  408658:	f000 8109 	beq.w	40886e <_malloc_r+0x4be>
  40865c:	f241 010f 	movw	r1, #4111	; 0x100f
  408660:	f8df 9084 	ldr.w	r9, [pc, #132]	; 4086e8 <_malloc_r+0x338>
  408664:	4419      	add	r1, r3
  408666:	ea01 0909 	and.w	r9, r1, r9
  40866a:	4628      	mov	r0, r5
  40866c:	4649      	mov	r1, r9
  40866e:	9201      	str	r2, [sp, #4]
  408670:	f000 ffb8 	bl	4095e4 <_sbrk_r>
  408674:	f1b0 3fff 	cmp.w	r0, #4294967295
  408678:	4682      	mov	sl, r0
  40867a:	9a01      	ldr	r2, [sp, #4]
  40867c:	f000 8101 	beq.w	408882 <_malloc_r+0x4d2>
  408680:	1bbb      	subs	r3, r7, r6
  408682:	eb07 0108 	add.w	r1, r7, r8
  408686:	4815      	ldr	r0, [pc, #84]	; (4086dc <_malloc_r+0x32c>)
  408688:	bf18      	it	ne
  40868a:	2301      	movne	r3, #1
  40868c:	4551      	cmp	r1, sl
  40868e:	d967      	bls.n	408760 <_malloc_r+0x3b0>
  408690:	2b00      	cmp	r3, #0
  408692:	d065      	beq.n	408760 <_malloc_r+0x3b0>
  408694:	6887      	ldr	r7, [r0, #8]
  408696:	687b      	ldr	r3, [r7, #4]
  408698:	f023 0303 	bic.w	r3, r3, #3
  40869c:	1b1a      	subs	r2, r3, r4
  40869e:	2a0f      	cmp	r2, #15
  4086a0:	dd02      	ble.n	4086a8 <_malloc_r+0x2f8>
  4086a2:	429c      	cmp	r4, r3
  4086a4:	f67f af7d 	bls.w	4085a2 <_malloc_r+0x1f2>
  4086a8:	4628      	mov	r0, r5
  4086aa:	f04f 0800 	mov.w	r8, #0
  4086ae:	f000 fa71 	bl	408b94 <__malloc_unlock>
  4086b2:	e6a9      	b.n	408408 <_malloc_r+0x58>
  4086b4:	6878      	ldr	r0, [r7, #4]
  4086b6:	e708      	b.n	4084ca <_malloc_r+0x11a>
  4086b8:	f109 0901 	add.w	r9, r9, #1
  4086bc:	3008      	adds	r0, #8
  4086be:	f019 0f03 	tst.w	r9, #3
  4086c2:	f47f af15 	bne.w	4084f0 <_malloc_r+0x140>
  4086c6:	e02f      	b.n	408728 <_malloc_r+0x378>
  4086c8:	f103 0208 	add.w	r2, r3, #8
  4086cc:	695b      	ldr	r3, [r3, #20]
  4086ce:	429a      	cmp	r2, r3
  4086d0:	bf08      	it	eq
  4086d2:	f10c 0c02 	addeq.w	ip, ip, #2
  4086d6:	f43f aecd 	beq.w	408474 <_malloc_r+0xc4>
  4086da:	e684      	b.n	4083e6 <_malloc_r+0x36>
  4086dc:	204004f4 	.word	0x204004f4
  4086e0:	20400900 	.word	0x20400900
  4086e4:	204009d4 	.word	0x204009d4
  4086e8:	fffff000 	.word	0xfffff000
  4086ec:	18fa      	adds	r2, r7, r3
  4086ee:	46b8      	mov	r8, r7
  4086f0:	68f9      	ldr	r1, [r7, #12]
  4086f2:	4628      	mov	r0, r5
  4086f4:	6853      	ldr	r3, [r2, #4]
  4086f6:	f858 4f08 	ldr.w	r4, [r8, #8]!
  4086fa:	f043 0301 	orr.w	r3, r3, #1
  4086fe:	6053      	str	r3, [r2, #4]
  408700:	60e1      	str	r1, [r4, #12]
  408702:	608c      	str	r4, [r1, #8]
  408704:	f000 fa46 	bl	408b94 <__malloc_unlock>
  408708:	e67e      	b.n	408408 <_malloc_r+0x58>
  40870a:	f10c 0c5b 	add.w	ip, ip, #91	; 0x5b
  40870e:	ea4f 004c 	mov.w	r0, ip, lsl #1
  408712:	e699      	b.n	408448 <_malloc_r+0x98>
  408714:	0991      	lsrs	r1, r2, #6
  408716:	f101 0738 	add.w	r7, r1, #56	; 0x38
  40871a:	0078      	lsls	r0, r7, #1
  40871c:	e76b      	b.n	4085f6 <_malloc_r+0x246>
  40871e:	f8d8 8000 	ldr.w	r8, [r8]
  408722:	4598      	cmp	r8, r3
  408724:	f040 80e6 	bne.w	4088f4 <_malloc_r+0x544>
  408728:	f01c 0f03 	tst.w	ip, #3
  40872c:	f1a8 0308 	sub.w	r3, r8, #8
  408730:	f10c 3cff 	add.w	ip, ip, #4294967295
  408734:	d1f3      	bne.n	40871e <_malloc_r+0x36e>
  408736:	6873      	ldr	r3, [r6, #4]
  408738:	ea23 0301 	bic.w	r3, r3, r1
  40873c:	6073      	str	r3, [r6, #4]
  40873e:	0049      	lsls	r1, r1, #1
  408740:	4299      	cmp	r1, r3
  408742:	f63f af24 	bhi.w	40858e <_malloc_r+0x1de>
  408746:	2900      	cmp	r1, #0
  408748:	f43f af21 	beq.w	40858e <_malloc_r+0x1de>
  40874c:	420b      	tst	r3, r1
  40874e:	46cc      	mov	ip, r9
  408750:	f47f aeca 	bne.w	4084e8 <_malloc_r+0x138>
  408754:	0049      	lsls	r1, r1, #1
  408756:	f10c 0c04 	add.w	ip, ip, #4
  40875a:	420b      	tst	r3, r1
  40875c:	d0fa      	beq.n	408754 <_malloc_r+0x3a4>
  40875e:	e6c3      	b.n	4084e8 <_malloc_r+0x138>
  408760:	f8df b19c 	ldr.w	fp, [pc, #412]	; 408900 <_malloc_r+0x550>
  408764:	4551      	cmp	r1, sl
  408766:	f8db 0000 	ldr.w	r0, [fp]
  40876a:	4448      	add	r0, r9
  40876c:	f8cb 0000 	str.w	r0, [fp]
  408770:	f000 808c 	beq.w	40888c <_malloc_r+0x4dc>
  408774:	6812      	ldr	r2, [r2, #0]
  408776:	f8df e18c 	ldr.w	lr, [pc, #396]	; 408904 <_malloc_r+0x554>
  40877a:	3201      	adds	r2, #1
  40877c:	f000 80a3 	beq.w	4088c6 <_malloc_r+0x516>
  408780:	ebc1 010a 	rsb	r1, r1, sl
  408784:	4408      	add	r0, r1
  408786:	f8cb 0000 	str.w	r0, [fp]
  40878a:	f01a 0107 	ands.w	r1, sl, #7
  40878e:	d052      	beq.n	408836 <_malloc_r+0x486>
  408790:	f1c1 0008 	rsb	r0, r1, #8
  408794:	f241 0208 	movw	r2, #4104	; 0x1008
  408798:	4482      	add	sl, r0
  40879a:	1a52      	subs	r2, r2, r1
  40879c:	eb0a 0109 	add.w	r1, sl, r9
  4087a0:	4628      	mov	r0, r5
  4087a2:	9301      	str	r3, [sp, #4]
  4087a4:	f3c1 010b 	ubfx	r1, r1, #0, #12
  4087a8:	ebc1 0902 	rsb	r9, r1, r2
  4087ac:	4649      	mov	r1, r9
  4087ae:	f000 ff19 	bl	4095e4 <_sbrk_r>
  4087b2:	1c43      	adds	r3, r0, #1
  4087b4:	9b01      	ldr	r3, [sp, #4]
  4087b6:	d07a      	beq.n	4088ae <_malloc_r+0x4fe>
  4087b8:	ebca 0200 	rsb	r2, sl, r0
  4087bc:	444a      	add	r2, r9
  4087be:	f042 0201 	orr.w	r2, r2, #1
  4087c2:	f8db 0000 	ldr.w	r0, [fp]
  4087c6:	f8c6 a008 	str.w	sl, [r6, #8]
  4087ca:	4448      	add	r0, r9
  4087cc:	f8ca 2004 	str.w	r2, [sl, #4]
  4087d0:	f8df 912c 	ldr.w	r9, [pc, #300]	; 408900 <_malloc_r+0x550>
  4087d4:	f8cb 0000 	str.w	r0, [fp]
  4087d8:	b1a3      	cbz	r3, 408804 <_malloc_r+0x454>
  4087da:	f1b8 0f0f 	cmp.w	r8, #15
  4087de:	d937      	bls.n	408850 <_malloc_r+0x4a0>
  4087e0:	687b      	ldr	r3, [r7, #4]
  4087e2:	f1a8 020c 	sub.w	r2, r8, #12
  4087e6:	f04f 0e05 	mov.w	lr, #5
  4087ea:	f022 0207 	bic.w	r2, r2, #7
  4087ee:	f003 0301 	and.w	r3, r3, #1
  4087f2:	18b9      	adds	r1, r7, r2
  4087f4:	4313      	orrs	r3, r2
  4087f6:	2a0f      	cmp	r2, #15
  4087f8:	607b      	str	r3, [r7, #4]
  4087fa:	f8c1 e004 	str.w	lr, [r1, #4]
  4087fe:	f8c1 e008 	str.w	lr, [r1, #8]
  408802:	d858      	bhi.n	4088b6 <_malloc_r+0x506>
  408804:	4b3c      	ldr	r3, [pc, #240]	; (4088f8 <_malloc_r+0x548>)
  408806:	681a      	ldr	r2, [r3, #0]
  408808:	4290      	cmp	r0, r2
  40880a:	d900      	bls.n	40880e <_malloc_r+0x45e>
  40880c:	6018      	str	r0, [r3, #0]
  40880e:	4b3b      	ldr	r3, [pc, #236]	; (4088fc <_malloc_r+0x54c>)
  408810:	68b7      	ldr	r7, [r6, #8]
  408812:	681a      	ldr	r2, [r3, #0]
  408814:	4290      	cmp	r0, r2
  408816:	d900      	bls.n	40881a <_malloc_r+0x46a>
  408818:	6018      	str	r0, [r3, #0]
  40881a:	687b      	ldr	r3, [r7, #4]
  40881c:	f023 0303 	bic.w	r3, r3, #3
  408820:	e73c      	b.n	40869c <_malloc_r+0x2ec>
  408822:	f5bc 7faa 	cmp.w	ip, #340	; 0x154
  408826:	d817      	bhi.n	408858 <_malloc_r+0x4a8>
  408828:	ea4f 3cd4 	mov.w	ip, r4, lsr #15
  40882c:	f10c 0c77 	add.w	ip, ip, #119	; 0x77
  408830:	ea4f 004c 	mov.w	r0, ip, lsl #1
  408834:	e608      	b.n	408448 <_malloc_r+0x98>
  408836:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  40883a:	e7af      	b.n	40879c <_malloc_r+0x3ec>
  40883c:	10bf      	asrs	r7, r7, #2
  40883e:	2001      	movs	r0, #1
  408840:	460a      	mov	r2, r1
  408842:	40b8      	lsls	r0, r7
  408844:	f8d9 7004 	ldr.w	r7, [r9, #4]
  408848:	4338      	orrs	r0, r7
  40884a:	f8c9 0004 	str.w	r0, [r9, #4]
  40884e:	e6e4      	b.n	40861a <_malloc_r+0x26a>
  408850:	2301      	movs	r3, #1
  408852:	f8ca 3004 	str.w	r3, [sl, #4]
  408856:	e727      	b.n	4086a8 <_malloc_r+0x2f8>
  408858:	f240 5354 	movw	r3, #1364	; 0x554
  40885c:	459c      	cmp	ip, r3
  40885e:	d822      	bhi.n	4088a6 <_malloc_r+0x4f6>
  408860:	ea4f 4c94 	mov.w	ip, r4, lsr #18
  408864:	f10c 0c7c 	add.w	ip, ip, #124	; 0x7c
  408868:	ea4f 004c 	mov.w	r0, ip, lsl #1
  40886c:	e5ec      	b.n	408448 <_malloc_r+0x98>
  40886e:	f103 0910 	add.w	r9, r3, #16
  408872:	e6fa      	b.n	40866a <_malloc_r+0x2ba>
  408874:	2954      	cmp	r1, #84	; 0x54
  408876:	d829      	bhi.n	4088cc <_malloc_r+0x51c>
  408878:	0b11      	lsrs	r1, r2, #12
  40887a:	f101 076e 	add.w	r7, r1, #110	; 0x6e
  40887e:	0078      	lsls	r0, r7, #1
  408880:	e6b9      	b.n	4085f6 <_malloc_r+0x246>
  408882:	68b7      	ldr	r7, [r6, #8]
  408884:	687b      	ldr	r3, [r7, #4]
  408886:	f023 0303 	bic.w	r3, r3, #3
  40888a:	e707      	b.n	40869c <_malloc_r+0x2ec>
  40888c:	f3c1 0e0b 	ubfx	lr, r1, #0, #12
  408890:	f1be 0f00 	cmp.w	lr, #0
  408894:	f47f af6e 	bne.w	408774 <_malloc_r+0x3c4>
  408898:	eb09 0308 	add.w	r3, r9, r8
  40889c:	68b2      	ldr	r2, [r6, #8]
  40889e:	f043 0301 	orr.w	r3, r3, #1
  4088a2:	6053      	str	r3, [r2, #4]
  4088a4:	e7ae      	b.n	408804 <_malloc_r+0x454>
  4088a6:	20fc      	movs	r0, #252	; 0xfc
  4088a8:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
  4088ac:	e5cc      	b.n	408448 <_malloc_r+0x98>
  4088ae:	2201      	movs	r2, #1
  4088b0:	f04f 0900 	mov.w	r9, #0
  4088b4:	e785      	b.n	4087c2 <_malloc_r+0x412>
  4088b6:	4628      	mov	r0, r5
  4088b8:	f107 0108 	add.w	r1, r7, #8
  4088bc:	f7ff fa68 	bl	407d90 <_free_r>
  4088c0:	f8d9 0000 	ldr.w	r0, [r9]
  4088c4:	e79e      	b.n	408804 <_malloc_r+0x454>
  4088c6:	f8ce a000 	str.w	sl, [lr]
  4088ca:	e75e      	b.n	40878a <_malloc_r+0x3da>
  4088cc:	f5b1 7faa 	cmp.w	r1, #340	; 0x154
  4088d0:	d804      	bhi.n	4088dc <_malloc_r+0x52c>
  4088d2:	0bd1      	lsrs	r1, r2, #15
  4088d4:	f101 0777 	add.w	r7, r1, #119	; 0x77
  4088d8:	0078      	lsls	r0, r7, #1
  4088da:	e68c      	b.n	4085f6 <_malloc_r+0x246>
  4088dc:	f240 5054 	movw	r0, #1364	; 0x554
  4088e0:	4281      	cmp	r1, r0
  4088e2:	d804      	bhi.n	4088ee <_malloc_r+0x53e>
  4088e4:	0c91      	lsrs	r1, r2, #18
  4088e6:	f101 077c 	add.w	r7, r1, #124	; 0x7c
  4088ea:	0078      	lsls	r0, r7, #1
  4088ec:	e683      	b.n	4085f6 <_malloc_r+0x246>
  4088ee:	20fc      	movs	r0, #252	; 0xfc
  4088f0:	277e      	movs	r7, #126	; 0x7e
  4088f2:	e680      	b.n	4085f6 <_malloc_r+0x246>
  4088f4:	6873      	ldr	r3, [r6, #4]
  4088f6:	e722      	b.n	40873e <_malloc_r+0x38e>
  4088f8:	204009d0 	.word	0x204009d0
  4088fc:	204009cc 	.word	0x204009cc
  408900:	204009d8 	.word	0x204009d8
  408904:	20400900 	.word	0x20400900

00408908 <memchr>:
  408908:	0783      	lsls	r3, r0, #30
  40890a:	b2c9      	uxtb	r1, r1
  40890c:	b470      	push	{r4, r5, r6}
  40890e:	d03f      	beq.n	408990 <memchr+0x88>
  408910:	1e54      	subs	r4, r2, #1
  408912:	2a00      	cmp	r2, #0
  408914:	d03e      	beq.n	408994 <memchr+0x8c>
  408916:	7803      	ldrb	r3, [r0, #0]
  408918:	428b      	cmp	r3, r1
  40891a:	bf18      	it	ne
  40891c:	1c43      	addne	r3, r0, #1
  40891e:	d105      	bne.n	40892c <memchr+0x24>
  408920:	e01c      	b.n	40895c <memchr+0x54>
  408922:	b1ec      	cbz	r4, 408960 <memchr+0x58>
  408924:	7802      	ldrb	r2, [r0, #0]
  408926:	3c01      	subs	r4, #1
  408928:	428a      	cmp	r2, r1
  40892a:	d017      	beq.n	40895c <memchr+0x54>
  40892c:	f013 0f03 	tst.w	r3, #3
  408930:	4618      	mov	r0, r3
  408932:	f103 0301 	add.w	r3, r3, #1
  408936:	d1f4      	bne.n	408922 <memchr+0x1a>
  408938:	2c03      	cmp	r4, #3
  40893a:	d814      	bhi.n	408966 <memchr+0x5e>
  40893c:	b184      	cbz	r4, 408960 <memchr+0x58>
  40893e:	7803      	ldrb	r3, [r0, #0]
  408940:	428b      	cmp	r3, r1
  408942:	d00b      	beq.n	40895c <memchr+0x54>
  408944:	1905      	adds	r5, r0, r4
  408946:	1c43      	adds	r3, r0, #1
  408948:	e002      	b.n	408950 <memchr+0x48>
  40894a:	7802      	ldrb	r2, [r0, #0]
  40894c:	428a      	cmp	r2, r1
  40894e:	d005      	beq.n	40895c <memchr+0x54>
  408950:	42ab      	cmp	r3, r5
  408952:	4618      	mov	r0, r3
  408954:	f103 0301 	add.w	r3, r3, #1
  408958:	d1f7      	bne.n	40894a <memchr+0x42>
  40895a:	2000      	movs	r0, #0
  40895c:	bc70      	pop	{r4, r5, r6}
  40895e:	4770      	bx	lr
  408960:	4620      	mov	r0, r4
  408962:	bc70      	pop	{r4, r5, r6}
  408964:	4770      	bx	lr
  408966:	ea41 2601 	orr.w	r6, r1, r1, lsl #8
  40896a:	4602      	mov	r2, r0
  40896c:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
  408970:	4610      	mov	r0, r2
  408972:	3204      	adds	r2, #4
  408974:	6803      	ldr	r3, [r0, #0]
  408976:	4073      	eors	r3, r6
  408978:	f1a3 3501 	sub.w	r5, r3, #16843009	; 0x1010101
  40897c:	ea25 0303 	bic.w	r3, r5, r3
  408980:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
  408984:	d1da      	bne.n	40893c <memchr+0x34>
  408986:	3c04      	subs	r4, #4
  408988:	4610      	mov	r0, r2
  40898a:	2c03      	cmp	r4, #3
  40898c:	d8f0      	bhi.n	408970 <memchr+0x68>
  40898e:	e7d5      	b.n	40893c <memchr+0x34>
  408990:	4614      	mov	r4, r2
  408992:	e7d1      	b.n	408938 <memchr+0x30>
  408994:	4610      	mov	r0, r2
  408996:	e7e1      	b.n	40895c <memchr+0x54>

00408998 <memcpy>:
  408998:	4684      	mov	ip, r0
  40899a:	ea41 0300 	orr.w	r3, r1, r0
  40899e:	f013 0303 	ands.w	r3, r3, #3
  4089a2:	d16d      	bne.n	408a80 <memcpy+0xe8>
  4089a4:	3a40      	subs	r2, #64	; 0x40
  4089a6:	d341      	bcc.n	408a2c <memcpy+0x94>
  4089a8:	f851 3b04 	ldr.w	r3, [r1], #4
  4089ac:	f840 3b04 	str.w	r3, [r0], #4
  4089b0:	f851 3b04 	ldr.w	r3, [r1], #4
  4089b4:	f840 3b04 	str.w	r3, [r0], #4
  4089b8:	f851 3b04 	ldr.w	r3, [r1], #4
  4089bc:	f840 3b04 	str.w	r3, [r0], #4
  4089c0:	f851 3b04 	ldr.w	r3, [r1], #4
  4089c4:	f840 3b04 	str.w	r3, [r0], #4
  4089c8:	f851 3b04 	ldr.w	r3, [r1], #4
  4089cc:	f840 3b04 	str.w	r3, [r0], #4
  4089d0:	f851 3b04 	ldr.w	r3, [r1], #4
  4089d4:	f840 3b04 	str.w	r3, [r0], #4
  4089d8:	f851 3b04 	ldr.w	r3, [r1], #4
  4089dc:	f840 3b04 	str.w	r3, [r0], #4
  4089e0:	f851 3b04 	ldr.w	r3, [r1], #4
  4089e4:	f840 3b04 	str.w	r3, [r0], #4
  4089e8:	f851 3b04 	ldr.w	r3, [r1], #4
  4089ec:	f840 3b04 	str.w	r3, [r0], #4
  4089f0:	f851 3b04 	ldr.w	r3, [r1], #4
  4089f4:	f840 3b04 	str.w	r3, [r0], #4
  4089f8:	f851 3b04 	ldr.w	r3, [r1], #4
  4089fc:	f840 3b04 	str.w	r3, [r0], #4
  408a00:	f851 3b04 	ldr.w	r3, [r1], #4
  408a04:	f840 3b04 	str.w	r3, [r0], #4
  408a08:	f851 3b04 	ldr.w	r3, [r1], #4
  408a0c:	f840 3b04 	str.w	r3, [r0], #4
  408a10:	f851 3b04 	ldr.w	r3, [r1], #4
  408a14:	f840 3b04 	str.w	r3, [r0], #4
  408a18:	f851 3b04 	ldr.w	r3, [r1], #4
  408a1c:	f840 3b04 	str.w	r3, [r0], #4
  408a20:	f851 3b04 	ldr.w	r3, [r1], #4
  408a24:	f840 3b04 	str.w	r3, [r0], #4
  408a28:	3a40      	subs	r2, #64	; 0x40
  408a2a:	d2bd      	bcs.n	4089a8 <memcpy+0x10>
  408a2c:	3230      	adds	r2, #48	; 0x30
  408a2e:	d311      	bcc.n	408a54 <memcpy+0xbc>
  408a30:	f851 3b04 	ldr.w	r3, [r1], #4
  408a34:	f840 3b04 	str.w	r3, [r0], #4
  408a38:	f851 3b04 	ldr.w	r3, [r1], #4
  408a3c:	f840 3b04 	str.w	r3, [r0], #4
  408a40:	f851 3b04 	ldr.w	r3, [r1], #4
  408a44:	f840 3b04 	str.w	r3, [r0], #4
  408a48:	f851 3b04 	ldr.w	r3, [r1], #4
  408a4c:	f840 3b04 	str.w	r3, [r0], #4
  408a50:	3a10      	subs	r2, #16
  408a52:	d2ed      	bcs.n	408a30 <memcpy+0x98>
  408a54:	320c      	adds	r2, #12
  408a56:	d305      	bcc.n	408a64 <memcpy+0xcc>
  408a58:	f851 3b04 	ldr.w	r3, [r1], #4
  408a5c:	f840 3b04 	str.w	r3, [r0], #4
  408a60:	3a04      	subs	r2, #4
  408a62:	d2f9      	bcs.n	408a58 <memcpy+0xc0>
  408a64:	3204      	adds	r2, #4
  408a66:	d008      	beq.n	408a7a <memcpy+0xe2>
  408a68:	07d2      	lsls	r2, r2, #31
  408a6a:	bf1c      	itt	ne
  408a6c:	f811 3b01 	ldrbne.w	r3, [r1], #1
  408a70:	f800 3b01 	strbne.w	r3, [r0], #1
  408a74:	d301      	bcc.n	408a7a <memcpy+0xe2>
  408a76:	880b      	ldrh	r3, [r1, #0]
  408a78:	8003      	strh	r3, [r0, #0]
  408a7a:	4660      	mov	r0, ip
  408a7c:	4770      	bx	lr
  408a7e:	bf00      	nop
  408a80:	2a08      	cmp	r2, #8
  408a82:	d313      	bcc.n	408aac <memcpy+0x114>
  408a84:	078b      	lsls	r3, r1, #30
  408a86:	d08d      	beq.n	4089a4 <memcpy+0xc>
  408a88:	f010 0303 	ands.w	r3, r0, #3
  408a8c:	d08a      	beq.n	4089a4 <memcpy+0xc>
  408a8e:	f1c3 0304 	rsb	r3, r3, #4
  408a92:	1ad2      	subs	r2, r2, r3
  408a94:	07db      	lsls	r3, r3, #31
  408a96:	bf1c      	itt	ne
  408a98:	f811 3b01 	ldrbne.w	r3, [r1], #1
  408a9c:	f800 3b01 	strbne.w	r3, [r0], #1
  408aa0:	d380      	bcc.n	4089a4 <memcpy+0xc>
  408aa2:	f831 3b02 	ldrh.w	r3, [r1], #2
  408aa6:	f820 3b02 	strh.w	r3, [r0], #2
  408aaa:	e77b      	b.n	4089a4 <memcpy+0xc>
  408aac:	3a04      	subs	r2, #4
  408aae:	d3d9      	bcc.n	408a64 <memcpy+0xcc>
  408ab0:	3a01      	subs	r2, #1
  408ab2:	f811 3b01 	ldrb.w	r3, [r1], #1
  408ab6:	f800 3b01 	strb.w	r3, [r0], #1
  408aba:	d2f9      	bcs.n	408ab0 <memcpy+0x118>
  408abc:	780b      	ldrb	r3, [r1, #0]
  408abe:	7003      	strb	r3, [r0, #0]
  408ac0:	784b      	ldrb	r3, [r1, #1]
  408ac2:	7043      	strb	r3, [r0, #1]
  408ac4:	788b      	ldrb	r3, [r1, #2]
  408ac6:	7083      	strb	r3, [r0, #2]
  408ac8:	4660      	mov	r0, ip
  408aca:	4770      	bx	lr

00408acc <memmove>:
  408acc:	4288      	cmp	r0, r1
  408ace:	b5f0      	push	{r4, r5, r6, r7, lr}
  408ad0:	d90d      	bls.n	408aee <memmove+0x22>
  408ad2:	188b      	adds	r3, r1, r2
  408ad4:	4298      	cmp	r0, r3
  408ad6:	d20a      	bcs.n	408aee <memmove+0x22>
  408ad8:	1881      	adds	r1, r0, r2
  408ada:	2a00      	cmp	r2, #0
  408adc:	d053      	beq.n	408b86 <memmove+0xba>
  408ade:	1a9a      	subs	r2, r3, r2
  408ae0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  408ae4:	4293      	cmp	r3, r2
  408ae6:	f801 4d01 	strb.w	r4, [r1, #-1]!
  408aea:	d1f9      	bne.n	408ae0 <memmove+0x14>
  408aec:	bdf0      	pop	{r4, r5, r6, r7, pc}
  408aee:	2a0f      	cmp	r2, #15
  408af0:	d947      	bls.n	408b82 <memmove+0xb6>
  408af2:	ea40 0301 	orr.w	r3, r0, r1
  408af6:	079b      	lsls	r3, r3, #30
  408af8:	d146      	bne.n	408b88 <memmove+0xbc>
  408afa:	f100 0410 	add.w	r4, r0, #16
  408afe:	f101 0310 	add.w	r3, r1, #16
  408b02:	4615      	mov	r5, r2
  408b04:	f853 6c10 	ldr.w	r6, [r3, #-16]
  408b08:	3d10      	subs	r5, #16
  408b0a:	3310      	adds	r3, #16
  408b0c:	3410      	adds	r4, #16
  408b0e:	f844 6c20 	str.w	r6, [r4, #-32]
  408b12:	2d0f      	cmp	r5, #15
  408b14:	f853 6c1c 	ldr.w	r6, [r3, #-28]
  408b18:	f844 6c1c 	str.w	r6, [r4, #-28]
  408b1c:	f853 6c18 	ldr.w	r6, [r3, #-24]
  408b20:	f844 6c18 	str.w	r6, [r4, #-24]
  408b24:	f853 6c14 	ldr.w	r6, [r3, #-20]
  408b28:	f844 6c14 	str.w	r6, [r4, #-20]
  408b2c:	d8ea      	bhi.n	408b04 <memmove+0x38>
  408b2e:	f1a2 0310 	sub.w	r3, r2, #16
  408b32:	f002 0e0f 	and.w	lr, r2, #15
  408b36:	f023 030f 	bic.w	r3, r3, #15
  408b3a:	f1be 0f03 	cmp.w	lr, #3
  408b3e:	f103 0310 	add.w	r3, r3, #16
  408b42:	4419      	add	r1, r3
  408b44:	4403      	add	r3, r0
  408b46:	d921      	bls.n	408b8c <memmove+0xc0>
  408b48:	1f1e      	subs	r6, r3, #4
  408b4a:	460d      	mov	r5, r1
  408b4c:	4674      	mov	r4, lr
  408b4e:	3c04      	subs	r4, #4
  408b50:	f855 7b04 	ldr.w	r7, [r5], #4
  408b54:	2c03      	cmp	r4, #3
  408b56:	f846 7f04 	str.w	r7, [r6, #4]!
  408b5a:	d8f8      	bhi.n	408b4e <memmove+0x82>
  408b5c:	f1ae 0404 	sub.w	r4, lr, #4
  408b60:	f002 0203 	and.w	r2, r2, #3
  408b64:	f024 0403 	bic.w	r4, r4, #3
  408b68:	3404      	adds	r4, #4
  408b6a:	4423      	add	r3, r4
  408b6c:	4421      	add	r1, r4
  408b6e:	b152      	cbz	r2, 408b86 <memmove+0xba>
  408b70:	3b01      	subs	r3, #1
  408b72:	440a      	add	r2, r1
  408b74:	f811 4b01 	ldrb.w	r4, [r1], #1
  408b78:	4291      	cmp	r1, r2
  408b7a:	f803 4f01 	strb.w	r4, [r3, #1]!
  408b7e:	d1f9      	bne.n	408b74 <memmove+0xa8>
  408b80:	bdf0      	pop	{r4, r5, r6, r7, pc}
  408b82:	4603      	mov	r3, r0
  408b84:	e7f3      	b.n	408b6e <memmove+0xa2>
  408b86:	bdf0      	pop	{r4, r5, r6, r7, pc}
  408b88:	4603      	mov	r3, r0
  408b8a:	e7f1      	b.n	408b70 <memmove+0xa4>
  408b8c:	4672      	mov	r2, lr
  408b8e:	e7ee      	b.n	408b6e <memmove+0xa2>

00408b90 <__malloc_lock>:
  408b90:	4770      	bx	lr
  408b92:	bf00      	nop

00408b94 <__malloc_unlock>:
  408b94:	4770      	bx	lr
  408b96:	bf00      	nop

00408b98 <_Balloc>:
  408b98:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
  408b9a:	b538      	push	{r3, r4, r5, lr}
  408b9c:	4605      	mov	r5, r0
  408b9e:	460c      	mov	r4, r1
  408ba0:	b152      	cbz	r2, 408bb8 <_Balloc+0x20>
  408ba2:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
  408ba6:	b18b      	cbz	r3, 408bcc <_Balloc+0x34>
  408ba8:	6819      	ldr	r1, [r3, #0]
  408baa:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
  408bae:	2200      	movs	r2, #0
  408bb0:	4618      	mov	r0, r3
  408bb2:	611a      	str	r2, [r3, #16]
  408bb4:	60da      	str	r2, [r3, #12]
  408bb6:	bd38      	pop	{r3, r4, r5, pc}
  408bb8:	2221      	movs	r2, #33	; 0x21
  408bba:	2104      	movs	r1, #4
  408bbc:	f000 fe58 	bl	409870 <_calloc_r>
  408bc0:	64e8      	str	r0, [r5, #76]	; 0x4c
  408bc2:	4602      	mov	r2, r0
  408bc4:	2800      	cmp	r0, #0
  408bc6:	d1ec      	bne.n	408ba2 <_Balloc+0xa>
  408bc8:	2000      	movs	r0, #0
  408bca:	bd38      	pop	{r3, r4, r5, pc}
  408bcc:	2101      	movs	r1, #1
  408bce:	4628      	mov	r0, r5
  408bd0:	fa01 f504 	lsl.w	r5, r1, r4
  408bd4:	1d6a      	adds	r2, r5, #5
  408bd6:	0092      	lsls	r2, r2, #2
  408bd8:	f000 fe4a 	bl	409870 <_calloc_r>
  408bdc:	4603      	mov	r3, r0
  408bde:	2800      	cmp	r0, #0
  408be0:	d0f2      	beq.n	408bc8 <_Balloc+0x30>
  408be2:	6044      	str	r4, [r0, #4]
  408be4:	6085      	str	r5, [r0, #8]
  408be6:	e7e2      	b.n	408bae <_Balloc+0x16>

00408be8 <_Bfree>:
  408be8:	b131      	cbz	r1, 408bf8 <_Bfree+0x10>
  408bea:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  408bec:	684a      	ldr	r2, [r1, #4]
  408bee:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
  408bf2:	6008      	str	r0, [r1, #0]
  408bf4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  408bf8:	4770      	bx	lr
  408bfa:	bf00      	nop

00408bfc <__multadd>:
  408bfc:	b5f0      	push	{r4, r5, r6, r7, lr}
  408bfe:	460c      	mov	r4, r1
  408c00:	b083      	sub	sp, #12
  408c02:	4605      	mov	r5, r0
  408c04:	690e      	ldr	r6, [r1, #16]
  408c06:	f101 0e14 	add.w	lr, r1, #20
  408c0a:	2700      	movs	r7, #0
  408c0c:	f8de 1000 	ldr.w	r1, [lr]
  408c10:	3701      	adds	r7, #1
  408c12:	b288      	uxth	r0, r1
  408c14:	42be      	cmp	r6, r7
  408c16:	ea4f 4111 	mov.w	r1, r1, lsr #16
  408c1a:	fb02 3300 	mla	r3, r2, r0, r3
  408c1e:	fb02 f101 	mul.w	r1, r2, r1
  408c22:	b298      	uxth	r0, r3
  408c24:	eb01 4313 	add.w	r3, r1, r3, lsr #16
  408c28:	eb00 4103 	add.w	r1, r0, r3, lsl #16
  408c2c:	ea4f 4313 	mov.w	r3, r3, lsr #16
  408c30:	f84e 1b04 	str.w	r1, [lr], #4
  408c34:	dcea      	bgt.n	408c0c <__multadd+0x10>
  408c36:	b13b      	cbz	r3, 408c48 <__multadd+0x4c>
  408c38:	68a2      	ldr	r2, [r4, #8]
  408c3a:	4296      	cmp	r6, r2
  408c3c:	da07      	bge.n	408c4e <__multadd+0x52>
  408c3e:	eb04 0286 	add.w	r2, r4, r6, lsl #2
  408c42:	3601      	adds	r6, #1
  408c44:	6153      	str	r3, [r2, #20]
  408c46:	6126      	str	r6, [r4, #16]
  408c48:	4620      	mov	r0, r4
  408c4a:	b003      	add	sp, #12
  408c4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  408c4e:	6861      	ldr	r1, [r4, #4]
  408c50:	4628      	mov	r0, r5
  408c52:	9301      	str	r3, [sp, #4]
  408c54:	3101      	adds	r1, #1
  408c56:	f7ff ff9f 	bl	408b98 <_Balloc>
  408c5a:	6922      	ldr	r2, [r4, #16]
  408c5c:	f104 010c 	add.w	r1, r4, #12
  408c60:	4607      	mov	r7, r0
  408c62:	3202      	adds	r2, #2
  408c64:	300c      	adds	r0, #12
  408c66:	0092      	lsls	r2, r2, #2
  408c68:	f7ff fe96 	bl	408998 <memcpy>
  408c6c:	6cea      	ldr	r2, [r5, #76]	; 0x4c
  408c6e:	6861      	ldr	r1, [r4, #4]
  408c70:	9b01      	ldr	r3, [sp, #4]
  408c72:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
  408c76:	6020      	str	r0, [r4, #0]
  408c78:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
  408c7c:	463c      	mov	r4, r7
  408c7e:	e7de      	b.n	408c3e <__multadd+0x42>

00408c80 <__hi0bits>:
  408c80:	4b0f      	ldr	r3, [pc, #60]	; (408cc0 <__hi0bits+0x40>)
  408c82:	4003      	ands	r3, r0
  408c84:	b9b3      	cbnz	r3, 408cb4 <__hi0bits+0x34>
  408c86:	0400      	lsls	r0, r0, #16
  408c88:	2310      	movs	r3, #16
  408c8a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
  408c8e:	d101      	bne.n	408c94 <__hi0bits+0x14>
  408c90:	3308      	adds	r3, #8
  408c92:	0200      	lsls	r0, r0, #8
  408c94:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
  408c98:	d101      	bne.n	408c9e <__hi0bits+0x1e>
  408c9a:	3304      	adds	r3, #4
  408c9c:	0100      	lsls	r0, r0, #4
  408c9e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
  408ca2:	d101      	bne.n	408ca8 <__hi0bits+0x28>
  408ca4:	3302      	adds	r3, #2
  408ca6:	0080      	lsls	r0, r0, #2
  408ca8:	2800      	cmp	r0, #0
  408caa:	db07      	blt.n	408cbc <__hi0bits+0x3c>
  408cac:	0042      	lsls	r2, r0, #1
  408cae:	d403      	bmi.n	408cb8 <__hi0bits+0x38>
  408cb0:	2020      	movs	r0, #32
  408cb2:	4770      	bx	lr
  408cb4:	2300      	movs	r3, #0
  408cb6:	e7e8      	b.n	408c8a <__hi0bits+0xa>
  408cb8:	1c58      	adds	r0, r3, #1
  408cba:	4770      	bx	lr
  408cbc:	4618      	mov	r0, r3
  408cbe:	4770      	bx	lr
  408cc0:	ffff0000 	.word	0xffff0000

00408cc4 <__lo0bits>:
  408cc4:	6803      	ldr	r3, [r0, #0]
  408cc6:	f013 0207 	ands.w	r2, r3, #7
  408cca:	d008      	beq.n	408cde <__lo0bits+0x1a>
  408ccc:	07d9      	lsls	r1, r3, #31
  408cce:	d422      	bmi.n	408d16 <__lo0bits+0x52>
  408cd0:	079a      	lsls	r2, r3, #30
  408cd2:	d423      	bmi.n	408d1c <__lo0bits+0x58>
  408cd4:	089b      	lsrs	r3, r3, #2
  408cd6:	2202      	movs	r2, #2
  408cd8:	6003      	str	r3, [r0, #0]
  408cda:	4610      	mov	r0, r2
  408cdc:	4770      	bx	lr
  408cde:	b299      	uxth	r1, r3
  408ce0:	b909      	cbnz	r1, 408ce6 <__lo0bits+0x22>
  408ce2:	0c1b      	lsrs	r3, r3, #16
  408ce4:	2210      	movs	r2, #16
  408ce6:	f013 0fff 	tst.w	r3, #255	; 0xff
  408cea:	d101      	bne.n	408cf0 <__lo0bits+0x2c>
  408cec:	3208      	adds	r2, #8
  408cee:	0a1b      	lsrs	r3, r3, #8
  408cf0:	0719      	lsls	r1, r3, #28
  408cf2:	d101      	bne.n	408cf8 <__lo0bits+0x34>
  408cf4:	3204      	adds	r2, #4
  408cf6:	091b      	lsrs	r3, r3, #4
  408cf8:	0799      	lsls	r1, r3, #30
  408cfa:	d101      	bne.n	408d00 <__lo0bits+0x3c>
  408cfc:	3202      	adds	r2, #2
  408cfe:	089b      	lsrs	r3, r3, #2
  408d00:	07d9      	lsls	r1, r3, #31
  408d02:	d405      	bmi.n	408d10 <__lo0bits+0x4c>
  408d04:	085b      	lsrs	r3, r3, #1
  408d06:	d102      	bne.n	408d0e <__lo0bits+0x4a>
  408d08:	2220      	movs	r2, #32
  408d0a:	4610      	mov	r0, r2
  408d0c:	4770      	bx	lr
  408d0e:	3201      	adds	r2, #1
  408d10:	6003      	str	r3, [r0, #0]
  408d12:	4610      	mov	r0, r2
  408d14:	4770      	bx	lr
  408d16:	2200      	movs	r2, #0
  408d18:	4610      	mov	r0, r2
  408d1a:	4770      	bx	lr
  408d1c:	085b      	lsrs	r3, r3, #1
  408d1e:	2201      	movs	r2, #1
  408d20:	6003      	str	r3, [r0, #0]
  408d22:	4610      	mov	r0, r2
  408d24:	4770      	bx	lr
  408d26:	bf00      	nop

00408d28 <__i2b>:
  408d28:	b510      	push	{r4, lr}
  408d2a:	460c      	mov	r4, r1
  408d2c:	2101      	movs	r1, #1
  408d2e:	f7ff ff33 	bl	408b98 <_Balloc>
  408d32:	2201      	movs	r2, #1
  408d34:	6144      	str	r4, [r0, #20]
  408d36:	6102      	str	r2, [r0, #16]
  408d38:	bd10      	pop	{r4, pc}
  408d3a:	bf00      	nop

00408d3c <__multiply>:
  408d3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  408d40:	690e      	ldr	r6, [r1, #16]
  408d42:	b085      	sub	sp, #20
  408d44:	6915      	ldr	r5, [r2, #16]
  408d46:	460c      	mov	r4, r1
  408d48:	4691      	mov	r9, r2
  408d4a:	42ae      	cmp	r6, r5
  408d4c:	f2c0 8094 	blt.w	408e78 <__multiply+0x13c>
  408d50:	462b      	mov	r3, r5
  408d52:	4635      	mov	r5, r6
  408d54:	461e      	mov	r6, r3
  408d56:	eb05 0806 	add.w	r8, r5, r6
  408d5a:	68a3      	ldr	r3, [r4, #8]
  408d5c:	6861      	ldr	r1, [r4, #4]
  408d5e:	4598      	cmp	r8, r3
  408d60:	dd00      	ble.n	408d64 <__multiply+0x28>
  408d62:	3101      	adds	r1, #1
  408d64:	f7ff ff18 	bl	408b98 <_Balloc>
  408d68:	f100 0a14 	add.w	sl, r0, #20
  408d6c:	9001      	str	r0, [sp, #4]
  408d6e:	eb0a 0b88 	add.w	fp, sl, r8, lsl #2
  408d72:	45da      	cmp	sl, fp
  408d74:	d205      	bcs.n	408d82 <__multiply+0x46>
  408d76:	4653      	mov	r3, sl
  408d78:	2100      	movs	r1, #0
  408d7a:	f843 1b04 	str.w	r1, [r3], #4
  408d7e:	459b      	cmp	fp, r3
  408d80:	d8fb      	bhi.n	408d7a <__multiply+0x3e>
  408d82:	f109 0914 	add.w	r9, r9, #20
  408d86:	f104 0314 	add.w	r3, r4, #20
  408d8a:	eb09 0286 	add.w	r2, r9, r6, lsl #2
  408d8e:	eb03 0c85 	add.w	ip, r3, r5, lsl #2
  408d92:	4591      	cmp	r9, r2
  408d94:	d25b      	bcs.n	408e4e <__multiply+0x112>
  408d96:	f8cd b008 	str.w	fp, [sp, #8]
  408d9a:	4693      	mov	fp, r2
  408d9c:	f8cd 800c 	str.w	r8, [sp, #12]
  408da0:	4698      	mov	r8, r3
  408da2:	f859 6b04 	ldr.w	r6, [r9], #4
  408da6:	fa1f fe86 	uxth.w	lr, r6
  408daa:	f1be 0f00 	cmp.w	lr, #0
  408dae:	d021      	beq.n	408df4 <__multiply+0xb8>
  408db0:	4647      	mov	r7, r8
  408db2:	4656      	mov	r6, sl
  408db4:	2100      	movs	r1, #0
  408db6:	e000      	b.n	408dba <__multiply+0x7e>
  408db8:	4626      	mov	r6, r4
  408dba:	f857 2b04 	ldr.w	r2, [r7], #4
  408dbe:	4634      	mov	r4, r6
  408dc0:	6835      	ldr	r5, [r6, #0]
  408dc2:	b290      	uxth	r0, r2
  408dc4:	45bc      	cmp	ip, r7
  408dc6:	b2ab      	uxth	r3, r5
  408dc8:	ea4f 4212 	mov.w	r2, r2, lsr #16
  408dcc:	fb0e 3000 	mla	r0, lr, r0, r3
  408dd0:	ea4f 4315 	mov.w	r3, r5, lsr #16
  408dd4:	4401      	add	r1, r0
  408dd6:	fb0e 3302 	mla	r3, lr, r2, r3
  408dda:	b28a      	uxth	r2, r1
  408ddc:	eb03 4111 	add.w	r1, r3, r1, lsr #16
  408de0:	ea42 4301 	orr.w	r3, r2, r1, lsl #16
  408de4:	ea4f 4111 	mov.w	r1, r1, lsr #16
  408de8:	f844 3b04 	str.w	r3, [r4], #4
  408dec:	d8e4      	bhi.n	408db8 <__multiply+0x7c>
  408dee:	6071      	str	r1, [r6, #4]
  408df0:	f859 6c04 	ldr.w	r6, [r9, #-4]
  408df4:	0c36      	lsrs	r6, r6, #16
  408df6:	d022      	beq.n	408e3e <__multiply+0x102>
  408df8:	f8da 3000 	ldr.w	r3, [sl]
  408dfc:	2700      	movs	r7, #0
  408dfe:	4655      	mov	r5, sl
  408e00:	4640      	mov	r0, r8
  408e02:	461a      	mov	r2, r3
  408e04:	46be      	mov	lr, r7
  408e06:	e000      	b.n	408e0a <__multiply+0xce>
  408e08:	4625      	mov	r5, r4
  408e0a:	8807      	ldrh	r7, [r0, #0]
  408e0c:	0c12      	lsrs	r2, r2, #16
  408e0e:	b299      	uxth	r1, r3
  408e10:	462c      	mov	r4, r5
  408e12:	fb06 2207 	mla	r2, r6, r7, r2
  408e16:	eb02 070e 	add.w	r7, r2, lr
  408e1a:	ea41 4307 	orr.w	r3, r1, r7, lsl #16
  408e1e:	f844 3b04 	str.w	r3, [r4], #4
  408e22:	f850 1b04 	ldr.w	r1, [r0], #4
  408e26:	686a      	ldr	r2, [r5, #4]
  408e28:	0c09      	lsrs	r1, r1, #16
  408e2a:	4584      	cmp	ip, r0
  408e2c:	b293      	uxth	r3, r2
  408e2e:	fb06 3101 	mla	r1, r6, r1, r3
  408e32:	eb01 4317 	add.w	r3, r1, r7, lsr #16
  408e36:	ea4f 4e13 	mov.w	lr, r3, lsr #16
  408e3a:	d8e5      	bhi.n	408e08 <__multiply+0xcc>
  408e3c:	606b      	str	r3, [r5, #4]
  408e3e:	45cb      	cmp	fp, r9
  408e40:	f10a 0a04 	add.w	sl, sl, #4
  408e44:	d8ad      	bhi.n	408da2 <__multiply+0x66>
  408e46:	f8dd b008 	ldr.w	fp, [sp, #8]
  408e4a:	f8dd 800c 	ldr.w	r8, [sp, #12]
  408e4e:	f1b8 0f00 	cmp.w	r8, #0
  408e52:	dd0b      	ble.n	408e6c <__multiply+0x130>
  408e54:	f85b 3c04 	ldr.w	r3, [fp, #-4]
  408e58:	f1ab 0b04 	sub.w	fp, fp, #4
  408e5c:	b11b      	cbz	r3, 408e66 <__multiply+0x12a>
  408e5e:	e005      	b.n	408e6c <__multiply+0x130>
  408e60:	f85b 3d04 	ldr.w	r3, [fp, #-4]!
  408e64:	b913      	cbnz	r3, 408e6c <__multiply+0x130>
  408e66:	f1b8 0801 	subs.w	r8, r8, #1
  408e6a:	d1f9      	bne.n	408e60 <__multiply+0x124>
  408e6c:	9801      	ldr	r0, [sp, #4]
  408e6e:	f8c0 8010 	str.w	r8, [r0, #16]
  408e72:	b005      	add	sp, #20
  408e74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408e78:	4614      	mov	r4, r2
  408e7a:	4689      	mov	r9, r1
  408e7c:	e76b      	b.n	408d56 <__multiply+0x1a>
  408e7e:	bf00      	nop

00408e80 <__pow5mult>:
  408e80:	f012 0303 	ands.w	r3, r2, #3
  408e84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  408e88:	4614      	mov	r4, r2
  408e8a:	4607      	mov	r7, r0
  408e8c:	460e      	mov	r6, r1
  408e8e:	d12d      	bne.n	408eec <__pow5mult+0x6c>
  408e90:	10a4      	asrs	r4, r4, #2
  408e92:	d01c      	beq.n	408ece <__pow5mult+0x4e>
  408e94:	6cbd      	ldr	r5, [r7, #72]	; 0x48
  408e96:	b395      	cbz	r5, 408efe <__pow5mult+0x7e>
  408e98:	07e3      	lsls	r3, r4, #31
  408e9a:	f04f 0800 	mov.w	r8, #0
  408e9e:	d406      	bmi.n	408eae <__pow5mult+0x2e>
  408ea0:	1064      	asrs	r4, r4, #1
  408ea2:	d014      	beq.n	408ece <__pow5mult+0x4e>
  408ea4:	6828      	ldr	r0, [r5, #0]
  408ea6:	b1a8      	cbz	r0, 408ed4 <__pow5mult+0x54>
  408ea8:	4605      	mov	r5, r0
  408eaa:	07e3      	lsls	r3, r4, #31
  408eac:	d5f8      	bpl.n	408ea0 <__pow5mult+0x20>
  408eae:	4638      	mov	r0, r7
  408eb0:	4631      	mov	r1, r6
  408eb2:	462a      	mov	r2, r5
  408eb4:	f7ff ff42 	bl	408d3c <__multiply>
  408eb8:	b1b6      	cbz	r6, 408ee8 <__pow5mult+0x68>
  408eba:	6872      	ldr	r2, [r6, #4]
  408ebc:	1064      	asrs	r4, r4, #1
  408ebe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  408ec0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  408ec4:	6031      	str	r1, [r6, #0]
  408ec6:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
  408eca:	4606      	mov	r6, r0
  408ecc:	d1ea      	bne.n	408ea4 <__pow5mult+0x24>
  408ece:	4630      	mov	r0, r6
  408ed0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  408ed4:	4629      	mov	r1, r5
  408ed6:	462a      	mov	r2, r5
  408ed8:	4638      	mov	r0, r7
  408eda:	f7ff ff2f 	bl	408d3c <__multiply>
  408ede:	6028      	str	r0, [r5, #0]
  408ee0:	f8c0 8000 	str.w	r8, [r0]
  408ee4:	4605      	mov	r5, r0
  408ee6:	e7e0      	b.n	408eaa <__pow5mult+0x2a>
  408ee8:	4606      	mov	r6, r0
  408eea:	e7d9      	b.n	408ea0 <__pow5mult+0x20>
  408eec:	1e5a      	subs	r2, r3, #1
  408eee:	4d0b      	ldr	r5, [pc, #44]	; (408f1c <__pow5mult+0x9c>)
  408ef0:	2300      	movs	r3, #0
  408ef2:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
  408ef6:	f7ff fe81 	bl	408bfc <__multadd>
  408efa:	4606      	mov	r6, r0
  408efc:	e7c8      	b.n	408e90 <__pow5mult+0x10>
  408efe:	2101      	movs	r1, #1
  408f00:	4638      	mov	r0, r7
  408f02:	f7ff fe49 	bl	408b98 <_Balloc>
  408f06:	f240 2171 	movw	r1, #625	; 0x271
  408f0a:	2201      	movs	r2, #1
  408f0c:	2300      	movs	r3, #0
  408f0e:	6141      	str	r1, [r0, #20]
  408f10:	4605      	mov	r5, r0
  408f12:	6102      	str	r2, [r0, #16]
  408f14:	64b8      	str	r0, [r7, #72]	; 0x48
  408f16:	6003      	str	r3, [r0, #0]
  408f18:	e7be      	b.n	408e98 <__pow5mult+0x18>
  408f1a:	bf00      	nop
  408f1c:	0040acb0 	.word	0x0040acb0

00408f20 <__lshift>:
  408f20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  408f24:	690e      	ldr	r6, [r1, #16]
  408f26:	ea4f 1962 	mov.w	r9, r2, asr #5
  408f2a:	688b      	ldr	r3, [r1, #8]
  408f2c:	460d      	mov	r5, r1
  408f2e:	444e      	add	r6, r9
  408f30:	4690      	mov	r8, r2
  408f32:	4607      	mov	r7, r0
  408f34:	6849      	ldr	r1, [r1, #4]
  408f36:	1c74      	adds	r4, r6, #1
  408f38:	429c      	cmp	r4, r3
  408f3a:	dd03      	ble.n	408f44 <__lshift+0x24>
  408f3c:	005b      	lsls	r3, r3, #1
  408f3e:	3101      	adds	r1, #1
  408f40:	429c      	cmp	r4, r3
  408f42:	dcfb      	bgt.n	408f3c <__lshift+0x1c>
  408f44:	4638      	mov	r0, r7
  408f46:	f7ff fe27 	bl	408b98 <_Balloc>
  408f4a:	f1b9 0f00 	cmp.w	r9, #0
  408f4e:	4684      	mov	ip, r0
  408f50:	f100 0114 	add.w	r1, r0, #20
  408f54:	dd09      	ble.n	408f6a <__lshift+0x4a>
  408f56:	2300      	movs	r3, #0
  408f58:	460a      	mov	r2, r1
  408f5a:	4618      	mov	r0, r3
  408f5c:	3301      	adds	r3, #1
  408f5e:	f842 0b04 	str.w	r0, [r2], #4
  408f62:	454b      	cmp	r3, r9
  408f64:	d1fa      	bne.n	408f5c <__lshift+0x3c>
  408f66:	eb01 0183 	add.w	r1, r1, r3, lsl #2
  408f6a:	692a      	ldr	r2, [r5, #16]
  408f6c:	f105 0314 	add.w	r3, r5, #20
  408f70:	eb03 0e82 	add.w	lr, r3, r2, lsl #2
  408f74:	f018 021f 	ands.w	r2, r8, #31
  408f78:	d023      	beq.n	408fc2 <__lshift+0xa2>
  408f7a:	f1c2 0920 	rsb	r9, r2, #32
  408f7e:	f04f 0a00 	mov.w	sl, #0
  408f82:	6818      	ldr	r0, [r3, #0]
  408f84:	4688      	mov	r8, r1
  408f86:	4090      	lsls	r0, r2
  408f88:	ea4a 0000 	orr.w	r0, sl, r0
  408f8c:	f841 0b04 	str.w	r0, [r1], #4
  408f90:	f853 0b04 	ldr.w	r0, [r3], #4
  408f94:	459e      	cmp	lr, r3
  408f96:	fa20 fa09 	lsr.w	sl, r0, r9
  408f9a:	d8f2      	bhi.n	408f82 <__lshift+0x62>
  408f9c:	f8c8 a004 	str.w	sl, [r8, #4]
  408fa0:	f1ba 0f00 	cmp.w	sl, #0
  408fa4:	d000      	beq.n	408fa8 <__lshift+0x88>
  408fa6:	1cb4      	adds	r4, r6, #2
  408fa8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  408faa:	3c01      	subs	r4, #1
  408fac:	686a      	ldr	r2, [r5, #4]
  408fae:	4660      	mov	r0, ip
  408fb0:	f8cc 4010 	str.w	r4, [ip, #16]
  408fb4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  408fb8:	6029      	str	r1, [r5, #0]
  408fba:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
  408fbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  408fc2:	3904      	subs	r1, #4
  408fc4:	f853 2b04 	ldr.w	r2, [r3], #4
  408fc8:	459e      	cmp	lr, r3
  408fca:	f841 2f04 	str.w	r2, [r1, #4]!
  408fce:	d8f9      	bhi.n	408fc4 <__lshift+0xa4>
  408fd0:	e7ea      	b.n	408fa8 <__lshift+0x88>
  408fd2:	bf00      	nop

00408fd4 <__mcmp>:
  408fd4:	6902      	ldr	r2, [r0, #16]
  408fd6:	690b      	ldr	r3, [r1, #16]
  408fd8:	1ad2      	subs	r2, r2, r3
  408fda:	d113      	bne.n	409004 <__mcmp+0x30>
  408fdc:	009a      	lsls	r2, r3, #2
  408fde:	3014      	adds	r0, #20
  408fe0:	3114      	adds	r1, #20
  408fe2:	1883      	adds	r3, r0, r2
  408fe4:	4411      	add	r1, r2
  408fe6:	b410      	push	{r4}
  408fe8:	e001      	b.n	408fee <__mcmp+0x1a>
  408fea:	4298      	cmp	r0, r3
  408fec:	d20c      	bcs.n	409008 <__mcmp+0x34>
  408fee:	f853 4d04 	ldr.w	r4, [r3, #-4]!
  408ff2:	f851 2d04 	ldr.w	r2, [r1, #-4]!
  408ff6:	4294      	cmp	r4, r2
  408ff8:	d0f7      	beq.n	408fea <__mcmp+0x16>
  408ffa:	d309      	bcc.n	409010 <__mcmp+0x3c>
  408ffc:	2001      	movs	r0, #1
  408ffe:	f85d 4b04 	ldr.w	r4, [sp], #4
  409002:	4770      	bx	lr
  409004:	4610      	mov	r0, r2
  409006:	4770      	bx	lr
  409008:	2000      	movs	r0, #0
  40900a:	f85d 4b04 	ldr.w	r4, [sp], #4
  40900e:	4770      	bx	lr
  409010:	f04f 30ff 	mov.w	r0, #4294967295
  409014:	f85d 4b04 	ldr.w	r4, [sp], #4
  409018:	4770      	bx	lr
  40901a:	bf00      	nop

0040901c <__mdiff>:
  40901c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  409020:	460c      	mov	r4, r1
  409022:	4605      	mov	r5, r0
  409024:	4611      	mov	r1, r2
  409026:	4617      	mov	r7, r2
  409028:	4620      	mov	r0, r4
  40902a:	f7ff ffd3 	bl	408fd4 <__mcmp>
  40902e:	1e06      	subs	r6, r0, #0
  409030:	d05c      	beq.n	4090ec <__mdiff+0xd0>
  409032:	db55      	blt.n	4090e0 <__mdiff+0xc4>
  409034:	f04f 0800 	mov.w	r8, #0
  409038:	6861      	ldr	r1, [r4, #4]
  40903a:	4628      	mov	r0, r5
  40903c:	f7ff fdac 	bl	408b98 <_Balloc>
  409040:	f107 0514 	add.w	r5, r7, #20
  409044:	693b      	ldr	r3, [r7, #16]
  409046:	f104 0114 	add.w	r1, r4, #20
  40904a:	6926      	ldr	r6, [r4, #16]
  40904c:	4684      	mov	ip, r0
  40904e:	eb05 0e83 	add.w	lr, r5, r3, lsl #2
  409052:	f100 0414 	add.w	r4, r0, #20
  409056:	eb01 0786 	add.w	r7, r1, r6, lsl #2
  40905a:	2300      	movs	r3, #0
  40905c:	f8c0 800c 	str.w	r8, [r0, #12]
  409060:	f851 9b04 	ldr.w	r9, [r1], #4
  409064:	f855 2b04 	ldr.w	r2, [r5], #4
  409068:	fa13 f889 	uxtah	r8, r3, r9
  40906c:	4608      	mov	r0, r1
  40906e:	b293      	uxth	r3, r2
  409070:	45ae      	cmp	lr, r5
  409072:	ea4f 4212 	mov.w	r2, r2, lsr #16
  409076:	ebc3 0308 	rsb	r3, r3, r8
  40907a:	ebc2 4219 	rsb	r2, r2, r9, lsr #16
  40907e:	fa1f f883 	uxth.w	r8, r3
  409082:	eb02 4323 	add.w	r3, r2, r3, asr #16
  409086:	ea48 4203 	orr.w	r2, r8, r3, lsl #16
  40908a:	ea4f 4323 	mov.w	r3, r3, asr #16
  40908e:	f844 2b04 	str.w	r2, [r4], #4
  409092:	d8e5      	bhi.n	409060 <__mdiff+0x44>
  409094:	428f      	cmp	r7, r1
  409096:	4625      	mov	r5, r4
  409098:	d916      	bls.n	4090c8 <__mdiff+0xac>
  40909a:	f850 2b04 	ldr.w	r2, [r0], #4
  40909e:	fa13 f382 	uxtah	r3, r3, r2
  4090a2:	0c12      	lsrs	r2, r2, #16
  4090a4:	4287      	cmp	r7, r0
  4090a6:	fa1f fe83 	uxth.w	lr, r3
  4090aa:	eb02 4323 	add.w	r3, r2, r3, asr #16
  4090ae:	ea4e 4203 	orr.w	r2, lr, r3, lsl #16
  4090b2:	ea4f 4323 	mov.w	r3, r3, asr #16
  4090b6:	f844 2b04 	str.w	r2, [r4], #4
  4090ba:	d8ee      	bhi.n	40909a <__mdiff+0x7e>
  4090bc:	43c9      	mvns	r1, r1
  4090be:	4439      	add	r1, r7
  4090c0:	f021 0403 	bic.w	r4, r1, #3
  4090c4:	3404      	adds	r4, #4
  4090c6:	442c      	add	r4, r5
  4090c8:	3c04      	subs	r4, #4
  4090ca:	b922      	cbnz	r2, 4090d6 <__mdiff+0xba>
  4090cc:	f854 3d04 	ldr.w	r3, [r4, #-4]!
  4090d0:	3e01      	subs	r6, #1
  4090d2:	2b00      	cmp	r3, #0
  4090d4:	d0fa      	beq.n	4090cc <__mdiff+0xb0>
  4090d6:	4660      	mov	r0, ip
  4090d8:	f8cc 6010 	str.w	r6, [ip, #16]
  4090dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4090e0:	4623      	mov	r3, r4
  4090e2:	f04f 0801 	mov.w	r8, #1
  4090e6:	463c      	mov	r4, r7
  4090e8:	461f      	mov	r7, r3
  4090ea:	e7a5      	b.n	409038 <__mdiff+0x1c>
  4090ec:	4628      	mov	r0, r5
  4090ee:	4631      	mov	r1, r6
  4090f0:	f7ff fd52 	bl	408b98 <_Balloc>
  4090f4:	2201      	movs	r2, #1
  4090f6:	4603      	mov	r3, r0
  4090f8:	6146      	str	r6, [r0, #20]
  4090fa:	611a      	str	r2, [r3, #16]
  4090fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00409100 <__d2b>:
  409100:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  409104:	461c      	mov	r4, r3
  409106:	b082      	sub	sp, #8
  409108:	2101      	movs	r1, #1
  40910a:	4616      	mov	r6, r2
  40910c:	f3c4 550a 	ubfx	r5, r4, #20, #11
  409110:	f7ff fd42 	bl	408b98 <_Balloc>
  409114:	f3c4 0413 	ubfx	r4, r4, #0, #20
  409118:	4607      	mov	r7, r0
  40911a:	b10d      	cbz	r5, 409120 <__d2b+0x20>
  40911c:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
  409120:	9401      	str	r4, [sp, #4]
  409122:	b30e      	cbz	r6, 409168 <__d2b+0x68>
  409124:	a802      	add	r0, sp, #8
  409126:	f840 6d08 	str.w	r6, [r0, #-8]!
  40912a:	f7ff fdcb 	bl	408cc4 <__lo0bits>
  40912e:	2800      	cmp	r0, #0
  409130:	d132      	bne.n	409198 <__d2b+0x98>
  409132:	e89d 000c 	ldmia.w	sp, {r2, r3}
  409136:	617a      	str	r2, [r7, #20]
  409138:	2b00      	cmp	r3, #0
  40913a:	61bb      	str	r3, [r7, #24]
  40913c:	bf14      	ite	ne
  40913e:	2402      	movne	r4, #2
  409140:	2401      	moveq	r4, #1
  409142:	613c      	str	r4, [r7, #16]
  409144:	b9dd      	cbnz	r5, 40917e <__d2b+0x7e>
  409146:	eb07 0384 	add.w	r3, r7, r4, lsl #2
  40914a:	9a08      	ldr	r2, [sp, #32]
  40914c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
  409150:	6010      	str	r0, [r2, #0]
  409152:	6918      	ldr	r0, [r3, #16]
  409154:	f7ff fd94 	bl	408c80 <__hi0bits>
  409158:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40915a:	ebc0 1044 	rsb	r0, r0, r4, lsl #5
  40915e:	6018      	str	r0, [r3, #0]
  409160:	4638      	mov	r0, r7
  409162:	b002      	add	sp, #8
  409164:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  409168:	a801      	add	r0, sp, #4
  40916a:	f7ff fdab 	bl	408cc4 <__lo0bits>
  40916e:	2301      	movs	r3, #1
  409170:	9a01      	ldr	r2, [sp, #4]
  409172:	3020      	adds	r0, #32
  409174:	461c      	mov	r4, r3
  409176:	613b      	str	r3, [r7, #16]
  409178:	617a      	str	r2, [r7, #20]
  40917a:	2d00      	cmp	r5, #0
  40917c:	d0e3      	beq.n	409146 <__d2b+0x46>
  40917e:	f2a5 4833 	subw	r8, r5, #1075	; 0x433
  409182:	f1c0 0335 	rsb	r3, r0, #53	; 0x35
  409186:	9a08      	ldr	r2, [sp, #32]
  409188:	4440      	add	r0, r8
  40918a:	6010      	str	r0, [r2, #0]
  40918c:	4638      	mov	r0, r7
  40918e:	9a09      	ldr	r2, [sp, #36]	; 0x24
  409190:	6013      	str	r3, [r2, #0]
  409192:	b002      	add	sp, #8
  409194:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  409198:	9b01      	ldr	r3, [sp, #4]
  40919a:	f1c0 0120 	rsb	r1, r0, #32
  40919e:	9a00      	ldr	r2, [sp, #0]
  4091a0:	fa03 f101 	lsl.w	r1, r3, r1
  4091a4:	40c3      	lsrs	r3, r0
  4091a6:	430a      	orrs	r2, r1
  4091a8:	9301      	str	r3, [sp, #4]
  4091aa:	617a      	str	r2, [r7, #20]
  4091ac:	e7c4      	b.n	409138 <__d2b+0x38>
  4091ae:	bf00      	nop

004091b0 <_realloc_r>:
  4091b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4091b4:	4617      	mov	r7, r2
  4091b6:	b083      	sub	sp, #12
  4091b8:	460e      	mov	r6, r1
  4091ba:	2900      	cmp	r1, #0
  4091bc:	f000 80e2 	beq.w	409384 <_realloc_r+0x1d4>
  4091c0:	f107 040b 	add.w	r4, r7, #11
  4091c4:	4681      	mov	r9, r0
  4091c6:	f7ff fce3 	bl	408b90 <__malloc_lock>
  4091ca:	f856 3c04 	ldr.w	r3, [r6, #-4]
  4091ce:	2c16      	cmp	r4, #22
  4091d0:	f1a6 0808 	sub.w	r8, r6, #8
  4091d4:	f023 0503 	bic.w	r5, r3, #3
  4091d8:	d850      	bhi.n	40927c <_realloc_r+0xcc>
  4091da:	2210      	movs	r2, #16
  4091dc:	2100      	movs	r1, #0
  4091de:	4614      	mov	r4, r2
  4091e0:	42bc      	cmp	r4, r7
  4091e2:	f0c0 80dc 	bcc.w	40939e <_realloc_r+0x1ee>
  4091e6:	2900      	cmp	r1, #0
  4091e8:	f040 80d9 	bne.w	40939e <_realloc_r+0x1ee>
  4091ec:	4295      	cmp	r5, r2
  4091ee:	da4a      	bge.n	409286 <_realloc_r+0xd6>
  4091f0:	f8df b3a8 	ldr.w	fp, [pc, #936]	; 40959c <_realloc_r+0x3ec>
  4091f4:	eb08 0105 	add.w	r1, r8, r5
  4091f8:	f8db 0008 	ldr.w	r0, [fp, #8]
  4091fc:	4288      	cmp	r0, r1
  4091fe:	f000 80d3 	beq.w	4093a8 <_realloc_r+0x1f8>
  409202:	6848      	ldr	r0, [r1, #4]
  409204:	f020 0e01 	bic.w	lr, r0, #1
  409208:	448e      	add	lr, r1
  40920a:	f8de e004 	ldr.w	lr, [lr, #4]
  40920e:	f01e 0f01 	tst.w	lr, #1
  409212:	d14e      	bne.n	4092b2 <_realloc_r+0x102>
  409214:	f020 0003 	bic.w	r0, r0, #3
  409218:	4428      	add	r0, r5
  40921a:	4290      	cmp	r0, r2
  40921c:	f280 80b8 	bge.w	409390 <_realloc_r+0x1e0>
  409220:	07db      	lsls	r3, r3, #31
  409222:	f100 808b 	bmi.w	40933c <_realloc_r+0x18c>
  409226:	f856 3c08 	ldr.w	r3, [r6, #-8]
  40922a:	ebc3 0a08 	rsb	sl, r3, r8
  40922e:	f8da 3004 	ldr.w	r3, [sl, #4]
  409232:	f023 0303 	bic.w	r3, r3, #3
  409236:	eb00 0e03 	add.w	lr, r0, r3
  40923a:	4596      	cmp	lr, r2
  40923c:	db43      	blt.n	4092c6 <_realloc_r+0x116>
  40923e:	68cb      	ldr	r3, [r1, #12]
  409240:	4657      	mov	r7, sl
  409242:	6889      	ldr	r1, [r1, #8]
  409244:	1f2a      	subs	r2, r5, #4
  409246:	60cb      	str	r3, [r1, #12]
  409248:	2a24      	cmp	r2, #36	; 0x24
  40924a:	6099      	str	r1, [r3, #8]
  40924c:	f857 1f08 	ldr.w	r1, [r7, #8]!
  409250:	f8da 300c 	ldr.w	r3, [sl, #12]
  409254:	60cb      	str	r3, [r1, #12]
  409256:	6099      	str	r1, [r3, #8]
  409258:	f200 813c 	bhi.w	4094d4 <_realloc_r+0x324>
  40925c:	2a13      	cmp	r2, #19
  40925e:	f240 80fa 	bls.w	409456 <_realloc_r+0x2a6>
  409262:	6833      	ldr	r3, [r6, #0]
  409264:	2a1b      	cmp	r2, #27
  409266:	f8ca 3008 	str.w	r3, [sl, #8]
  40926a:	6873      	ldr	r3, [r6, #4]
  40926c:	f8ca 300c 	str.w	r3, [sl, #12]
  409270:	f200 813b 	bhi.w	4094ea <_realloc_r+0x33a>
  409274:	3608      	adds	r6, #8
  409276:	f10a 0310 	add.w	r3, sl, #16
  40927a:	e0ed      	b.n	409458 <_realloc_r+0x2a8>
  40927c:	f024 0407 	bic.w	r4, r4, #7
  409280:	4622      	mov	r2, r4
  409282:	0fe1      	lsrs	r1, r4, #31
  409284:	e7ac      	b.n	4091e0 <_realloc_r+0x30>
  409286:	4637      	mov	r7, r6
  409288:	1b2a      	subs	r2, r5, r4
  40928a:	f003 0301 	and.w	r3, r3, #1
  40928e:	2a0f      	cmp	r2, #15
  409290:	d841      	bhi.n	409316 <_realloc_r+0x166>
  409292:	eb08 0205 	add.w	r2, r8, r5
  409296:	431d      	orrs	r5, r3
  409298:	f8c8 5004 	str.w	r5, [r8, #4]
  40929c:	6853      	ldr	r3, [r2, #4]
  40929e:	f043 0301 	orr.w	r3, r3, #1
  4092a2:	6053      	str	r3, [r2, #4]
  4092a4:	4648      	mov	r0, r9
  4092a6:	f7ff fc75 	bl	408b94 <__malloc_unlock>
  4092aa:	4638      	mov	r0, r7
  4092ac:	b003      	add	sp, #12
  4092ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4092b2:	07d9      	lsls	r1, r3, #31
  4092b4:	d442      	bmi.n	40933c <_realloc_r+0x18c>
  4092b6:	f856 3c08 	ldr.w	r3, [r6, #-8]
  4092ba:	ebc3 0a08 	rsb	sl, r3, r8
  4092be:	f8da 3004 	ldr.w	r3, [sl, #4]
  4092c2:	f023 0303 	bic.w	r3, r3, #3
  4092c6:	442b      	add	r3, r5
  4092c8:	4293      	cmp	r3, r2
  4092ca:	db37      	blt.n	40933c <_realloc_r+0x18c>
  4092cc:	4657      	mov	r7, sl
  4092ce:	1f2a      	subs	r2, r5, #4
  4092d0:	f8da 100c 	ldr.w	r1, [sl, #12]
  4092d4:	f857 0f08 	ldr.w	r0, [r7, #8]!
  4092d8:	2a24      	cmp	r2, #36	; 0x24
  4092da:	60c1      	str	r1, [r0, #12]
  4092dc:	6088      	str	r0, [r1, #8]
  4092de:	f200 80c6 	bhi.w	40946e <_realloc_r+0x2be>
  4092e2:	2a13      	cmp	r2, #19
  4092e4:	f240 80ff 	bls.w	4094e6 <_realloc_r+0x336>
  4092e8:	6831      	ldr	r1, [r6, #0]
  4092ea:	2a1b      	cmp	r2, #27
  4092ec:	f8ca 1008 	str.w	r1, [sl, #8]
  4092f0:	6871      	ldr	r1, [r6, #4]
  4092f2:	f8ca 100c 	str.w	r1, [sl, #12]
  4092f6:	f200 810d 	bhi.w	409514 <_realloc_r+0x364>
  4092fa:	3608      	adds	r6, #8
  4092fc:	f10a 0210 	add.w	r2, sl, #16
  409300:	6831      	ldr	r1, [r6, #0]
  409302:	461d      	mov	r5, r3
  409304:	46d0      	mov	r8, sl
  409306:	6011      	str	r1, [r2, #0]
  409308:	6873      	ldr	r3, [r6, #4]
  40930a:	6053      	str	r3, [r2, #4]
  40930c:	68b3      	ldr	r3, [r6, #8]
  40930e:	6093      	str	r3, [r2, #8]
  409310:	f8da 3004 	ldr.w	r3, [sl, #4]
  409314:	e7b8      	b.n	409288 <_realloc_r+0xd8>
  409316:	eb08 0504 	add.w	r5, r8, r4
  40931a:	f042 0601 	orr.w	r6, r2, #1
  40931e:	431c      	orrs	r4, r3
  409320:	4648      	mov	r0, r9
  409322:	442a      	add	r2, r5
  409324:	f105 0108 	add.w	r1, r5, #8
  409328:	f8c8 4004 	str.w	r4, [r8, #4]
  40932c:	606e      	str	r6, [r5, #4]
  40932e:	6853      	ldr	r3, [r2, #4]
  409330:	f043 0301 	orr.w	r3, r3, #1
  409334:	6053      	str	r3, [r2, #4]
  409336:	f7fe fd2b 	bl	407d90 <_free_r>
  40933a:	e7b3      	b.n	4092a4 <_realloc_r+0xf4>
  40933c:	4639      	mov	r1, r7
  40933e:	4648      	mov	r0, r9
  409340:	f7ff f836 	bl	4083b0 <_malloc_r>
  409344:	4607      	mov	r7, r0
  409346:	2800      	cmp	r0, #0
  409348:	d0ac      	beq.n	4092a4 <_realloc_r+0xf4>
  40934a:	f856 3c04 	ldr.w	r3, [r6, #-4]
  40934e:	f1a0 0108 	sub.w	r1, r0, #8
  409352:	f023 0201 	bic.w	r2, r3, #1
  409356:	4442      	add	r2, r8
  409358:	4291      	cmp	r1, r2
  40935a:	f000 80b4 	beq.w	4094c6 <_realloc_r+0x316>
  40935e:	1f2a      	subs	r2, r5, #4
  409360:	2a24      	cmp	r2, #36	; 0x24
  409362:	f200 80a1 	bhi.w	4094a8 <_realloc_r+0x2f8>
  409366:	2a13      	cmp	r2, #19
  409368:	d86a      	bhi.n	409440 <_realloc_r+0x290>
  40936a:	4603      	mov	r3, r0
  40936c:	4632      	mov	r2, r6
  40936e:	6811      	ldr	r1, [r2, #0]
  409370:	6019      	str	r1, [r3, #0]
  409372:	6851      	ldr	r1, [r2, #4]
  409374:	6059      	str	r1, [r3, #4]
  409376:	6892      	ldr	r2, [r2, #8]
  409378:	609a      	str	r2, [r3, #8]
  40937a:	4631      	mov	r1, r6
  40937c:	4648      	mov	r0, r9
  40937e:	f7fe fd07 	bl	407d90 <_free_r>
  409382:	e78f      	b.n	4092a4 <_realloc_r+0xf4>
  409384:	4611      	mov	r1, r2
  409386:	b003      	add	sp, #12
  409388:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40938c:	f7ff b810 	b.w	4083b0 <_malloc_r>
  409390:	68ca      	ldr	r2, [r1, #12]
  409392:	4637      	mov	r7, r6
  409394:	6889      	ldr	r1, [r1, #8]
  409396:	4605      	mov	r5, r0
  409398:	60ca      	str	r2, [r1, #12]
  40939a:	6091      	str	r1, [r2, #8]
  40939c:	e774      	b.n	409288 <_realloc_r+0xd8>
  40939e:	230c      	movs	r3, #12
  4093a0:	2000      	movs	r0, #0
  4093a2:	f8c9 3000 	str.w	r3, [r9]
  4093a6:	e781      	b.n	4092ac <_realloc_r+0xfc>
  4093a8:	6841      	ldr	r1, [r0, #4]
  4093aa:	f104 0010 	add.w	r0, r4, #16
  4093ae:	f021 0103 	bic.w	r1, r1, #3
  4093b2:	4429      	add	r1, r5
  4093b4:	4281      	cmp	r1, r0
  4093b6:	da63      	bge.n	409480 <_realloc_r+0x2d0>
  4093b8:	07db      	lsls	r3, r3, #31
  4093ba:	d4bf      	bmi.n	40933c <_realloc_r+0x18c>
  4093bc:	f856 3c08 	ldr.w	r3, [r6, #-8]
  4093c0:	ebc3 0a08 	rsb	sl, r3, r8
  4093c4:	f8da 3004 	ldr.w	r3, [sl, #4]
  4093c8:	f023 0303 	bic.w	r3, r3, #3
  4093cc:	eb01 0c03 	add.w	ip, r1, r3
  4093d0:	4560      	cmp	r0, ip
  4093d2:	f73f af78 	bgt.w	4092c6 <_realloc_r+0x116>
  4093d6:	4657      	mov	r7, sl
  4093d8:	1f2a      	subs	r2, r5, #4
  4093da:	f8da 300c 	ldr.w	r3, [sl, #12]
  4093de:	f857 1f08 	ldr.w	r1, [r7, #8]!
  4093e2:	2a24      	cmp	r2, #36	; 0x24
  4093e4:	60cb      	str	r3, [r1, #12]
  4093e6:	6099      	str	r1, [r3, #8]
  4093e8:	f200 80b8 	bhi.w	40955c <_realloc_r+0x3ac>
  4093ec:	2a13      	cmp	r2, #19
  4093ee:	f240 80a8 	bls.w	409542 <_realloc_r+0x392>
  4093f2:	6833      	ldr	r3, [r6, #0]
  4093f4:	2a1b      	cmp	r2, #27
  4093f6:	f8ca 3008 	str.w	r3, [sl, #8]
  4093fa:	6873      	ldr	r3, [r6, #4]
  4093fc:	f8ca 300c 	str.w	r3, [sl, #12]
  409400:	f200 80b5 	bhi.w	40956e <_realloc_r+0x3be>
  409404:	3608      	adds	r6, #8
  409406:	f10a 0310 	add.w	r3, sl, #16
  40940a:	6832      	ldr	r2, [r6, #0]
  40940c:	601a      	str	r2, [r3, #0]
  40940e:	6872      	ldr	r2, [r6, #4]
  409410:	605a      	str	r2, [r3, #4]
  409412:	68b2      	ldr	r2, [r6, #8]
  409414:	609a      	str	r2, [r3, #8]
  409416:	ebc4 030c 	rsb	r3, r4, ip
  40941a:	eb0a 0204 	add.w	r2, sl, r4
  40941e:	4648      	mov	r0, r9
  409420:	f043 0301 	orr.w	r3, r3, #1
  409424:	f8cb 2008 	str.w	r2, [fp, #8]
  409428:	6053      	str	r3, [r2, #4]
  40942a:	f8da 3004 	ldr.w	r3, [sl, #4]
  40942e:	f003 0301 	and.w	r3, r3, #1
  409432:	431c      	orrs	r4, r3
  409434:	f8ca 4004 	str.w	r4, [sl, #4]
  409438:	f7ff fbac 	bl	408b94 <__malloc_unlock>
  40943c:	4638      	mov	r0, r7
  40943e:	e735      	b.n	4092ac <_realloc_r+0xfc>
  409440:	6833      	ldr	r3, [r6, #0]
  409442:	2a1b      	cmp	r2, #27
  409444:	6003      	str	r3, [r0, #0]
  409446:	6873      	ldr	r3, [r6, #4]
  409448:	6043      	str	r3, [r0, #4]
  40944a:	d831      	bhi.n	4094b0 <_realloc_r+0x300>
  40944c:	f100 0308 	add.w	r3, r0, #8
  409450:	f106 0208 	add.w	r2, r6, #8
  409454:	e78b      	b.n	40936e <_realloc_r+0x1be>
  409456:	463b      	mov	r3, r7
  409458:	6832      	ldr	r2, [r6, #0]
  40945a:	4675      	mov	r5, lr
  40945c:	46d0      	mov	r8, sl
  40945e:	601a      	str	r2, [r3, #0]
  409460:	6872      	ldr	r2, [r6, #4]
  409462:	605a      	str	r2, [r3, #4]
  409464:	68b2      	ldr	r2, [r6, #8]
  409466:	609a      	str	r2, [r3, #8]
  409468:	f8da 3004 	ldr.w	r3, [sl, #4]
  40946c:	e70c      	b.n	409288 <_realloc_r+0xd8>
  40946e:	4631      	mov	r1, r6
  409470:	4638      	mov	r0, r7
  409472:	461d      	mov	r5, r3
  409474:	46d0      	mov	r8, sl
  409476:	f7ff fb29 	bl	408acc <memmove>
  40947a:	f8da 3004 	ldr.w	r3, [sl, #4]
  40947e:	e703      	b.n	409288 <_realloc_r+0xd8>
  409480:	1b0b      	subs	r3, r1, r4
  409482:	eb08 0204 	add.w	r2, r8, r4
  409486:	4648      	mov	r0, r9
  409488:	f043 0301 	orr.w	r3, r3, #1
  40948c:	f8cb 2008 	str.w	r2, [fp, #8]
  409490:	6053      	str	r3, [r2, #4]
  409492:	f856 3c04 	ldr.w	r3, [r6, #-4]
  409496:	f003 0301 	and.w	r3, r3, #1
  40949a:	431c      	orrs	r4, r3
  40949c:	f846 4c04 	str.w	r4, [r6, #-4]
  4094a0:	f7ff fb78 	bl	408b94 <__malloc_unlock>
  4094a4:	4630      	mov	r0, r6
  4094a6:	e701      	b.n	4092ac <_realloc_r+0xfc>
  4094a8:	4631      	mov	r1, r6
  4094aa:	f7ff fb0f 	bl	408acc <memmove>
  4094ae:	e764      	b.n	40937a <_realloc_r+0x1ca>
  4094b0:	68b3      	ldr	r3, [r6, #8]
  4094b2:	2a24      	cmp	r2, #36	; 0x24
  4094b4:	6083      	str	r3, [r0, #8]
  4094b6:	68f3      	ldr	r3, [r6, #12]
  4094b8:	60c3      	str	r3, [r0, #12]
  4094ba:	d022      	beq.n	409502 <_realloc_r+0x352>
  4094bc:	f100 0310 	add.w	r3, r0, #16
  4094c0:	f106 0210 	add.w	r2, r6, #16
  4094c4:	e753      	b.n	40936e <_realloc_r+0x1be>
  4094c6:	f850 2c04 	ldr.w	r2, [r0, #-4]
  4094ca:	4637      	mov	r7, r6
  4094cc:	f022 0203 	bic.w	r2, r2, #3
  4094d0:	4415      	add	r5, r2
  4094d2:	e6d9      	b.n	409288 <_realloc_r+0xd8>
  4094d4:	4631      	mov	r1, r6
  4094d6:	4638      	mov	r0, r7
  4094d8:	4675      	mov	r5, lr
  4094da:	46d0      	mov	r8, sl
  4094dc:	f7ff faf6 	bl	408acc <memmove>
  4094e0:	f8da 3004 	ldr.w	r3, [sl, #4]
  4094e4:	e6d0      	b.n	409288 <_realloc_r+0xd8>
  4094e6:	463a      	mov	r2, r7
  4094e8:	e70a      	b.n	409300 <_realloc_r+0x150>
  4094ea:	68b3      	ldr	r3, [r6, #8]
  4094ec:	2a24      	cmp	r2, #36	; 0x24
  4094ee:	f8ca 3010 	str.w	r3, [sl, #16]
  4094f2:	68f3      	ldr	r3, [r6, #12]
  4094f4:	f8ca 3014 	str.w	r3, [sl, #20]
  4094f8:	d018      	beq.n	40952c <_realloc_r+0x37c>
  4094fa:	3610      	adds	r6, #16
  4094fc:	f10a 0318 	add.w	r3, sl, #24
  409500:	e7aa      	b.n	409458 <_realloc_r+0x2a8>
  409502:	6931      	ldr	r1, [r6, #16]
  409504:	f100 0318 	add.w	r3, r0, #24
  409508:	f106 0218 	add.w	r2, r6, #24
  40950c:	6101      	str	r1, [r0, #16]
  40950e:	6971      	ldr	r1, [r6, #20]
  409510:	6141      	str	r1, [r0, #20]
  409512:	e72c      	b.n	40936e <_realloc_r+0x1be>
  409514:	68b1      	ldr	r1, [r6, #8]
  409516:	2a24      	cmp	r2, #36	; 0x24
  409518:	f8ca 1010 	str.w	r1, [sl, #16]
  40951c:	68f1      	ldr	r1, [r6, #12]
  40951e:	f8ca 1014 	str.w	r1, [sl, #20]
  409522:	d010      	beq.n	409546 <_realloc_r+0x396>
  409524:	3610      	adds	r6, #16
  409526:	f10a 0218 	add.w	r2, sl, #24
  40952a:	e6e9      	b.n	409300 <_realloc_r+0x150>
  40952c:	6932      	ldr	r2, [r6, #16]
  40952e:	f10a 0320 	add.w	r3, sl, #32
  409532:	3618      	adds	r6, #24
  409534:	f8ca 2018 	str.w	r2, [sl, #24]
  409538:	f856 2c04 	ldr.w	r2, [r6, #-4]
  40953c:	f8ca 201c 	str.w	r2, [sl, #28]
  409540:	e78a      	b.n	409458 <_realloc_r+0x2a8>
  409542:	463b      	mov	r3, r7
  409544:	e761      	b.n	40940a <_realloc_r+0x25a>
  409546:	6931      	ldr	r1, [r6, #16]
  409548:	f10a 0220 	add.w	r2, sl, #32
  40954c:	3618      	adds	r6, #24
  40954e:	f8ca 1018 	str.w	r1, [sl, #24]
  409552:	f856 1c04 	ldr.w	r1, [r6, #-4]
  409556:	f8ca 101c 	str.w	r1, [sl, #28]
  40955a:	e6d1      	b.n	409300 <_realloc_r+0x150>
  40955c:	4631      	mov	r1, r6
  40955e:	4638      	mov	r0, r7
  409560:	f8cd c004 	str.w	ip, [sp, #4]
  409564:	f7ff fab2 	bl	408acc <memmove>
  409568:	f8dd c004 	ldr.w	ip, [sp, #4]
  40956c:	e753      	b.n	409416 <_realloc_r+0x266>
  40956e:	68b3      	ldr	r3, [r6, #8]
  409570:	2a24      	cmp	r2, #36	; 0x24
  409572:	f8ca 3010 	str.w	r3, [sl, #16]
  409576:	68f3      	ldr	r3, [r6, #12]
  409578:	f8ca 3014 	str.w	r3, [sl, #20]
  40957c:	d003      	beq.n	409586 <_realloc_r+0x3d6>
  40957e:	3610      	adds	r6, #16
  409580:	f10a 0318 	add.w	r3, sl, #24
  409584:	e741      	b.n	40940a <_realloc_r+0x25a>
  409586:	6932      	ldr	r2, [r6, #16]
  409588:	f10a 0320 	add.w	r3, sl, #32
  40958c:	3618      	adds	r6, #24
  40958e:	f8ca 2018 	str.w	r2, [sl, #24]
  409592:	f856 2c04 	ldr.w	r2, [r6, #-4]
  409596:	f8ca 201c 	str.w	r2, [sl, #28]
  40959a:	e736      	b.n	40940a <_realloc_r+0x25a>
  40959c:	204004f4 	.word	0x204004f4

004095a0 <__fpclassifyd>:
  4095a0:	fab0 f080 	clz	r0, r0
  4095a4:	f031 4100 	bics.w	r1, r1, #2147483648	; 0x80000000
  4095a8:	ea4f 1050 	mov.w	r0, r0, lsr #5
  4095ac:	d102      	bne.n	4095b4 <__fpclassifyd+0x14>
  4095ae:	b108      	cbz	r0, 4095b4 <__fpclassifyd+0x14>
  4095b0:	2002      	movs	r0, #2
  4095b2:	4770      	bx	lr
  4095b4:	f5a1 1280 	sub.w	r2, r1, #1048576	; 0x100000
  4095b8:	4b08      	ldr	r3, [pc, #32]	; (4095dc <__fpclassifyd+0x3c>)
  4095ba:	429a      	cmp	r2, r3
  4095bc:	d801      	bhi.n	4095c2 <__fpclassifyd+0x22>
  4095be:	2004      	movs	r0, #4
  4095c0:	4770      	bx	lr
  4095c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  4095c6:	d201      	bcs.n	4095cc <__fpclassifyd+0x2c>
  4095c8:	2003      	movs	r0, #3
  4095ca:	4770      	bx	lr
  4095cc:	4b04      	ldr	r3, [pc, #16]	; (4095e0 <__fpclassifyd+0x40>)
  4095ce:	4299      	cmp	r1, r3
  4095d0:	bf14      	ite	ne
  4095d2:	2000      	movne	r0, #0
  4095d4:	f000 0001 	andeq.w	r0, r0, #1
  4095d8:	4770      	bx	lr
  4095da:	bf00      	nop
  4095dc:	7fdfffff 	.word	0x7fdfffff
  4095e0:	7ff00000 	.word	0x7ff00000

004095e4 <_sbrk_r>:
  4095e4:	b538      	push	{r3, r4, r5, lr}
  4095e6:	2300      	movs	r3, #0
  4095e8:	4c06      	ldr	r4, [pc, #24]	; (409604 <_sbrk_r+0x20>)
  4095ea:	4605      	mov	r5, r0
  4095ec:	4608      	mov	r0, r1
  4095ee:	6023      	str	r3, [r4, #0]
  4095f0:	f7f8 fffc 	bl	4025ec <_sbrk>
  4095f4:	1c43      	adds	r3, r0, #1
  4095f6:	d000      	beq.n	4095fa <_sbrk_r+0x16>
  4095f8:	bd38      	pop	{r3, r4, r5, pc}
  4095fa:	6823      	ldr	r3, [r4, #0]
  4095fc:	2b00      	cmp	r3, #0
  4095fe:	d0fb      	beq.n	4095f8 <_sbrk_r+0x14>
  409600:	602b      	str	r3, [r5, #0]
  409602:	bd38      	pop	{r3, r4, r5, pc}
  409604:	204012fc 	.word	0x204012fc

00409608 <__sread>:
  409608:	b510      	push	{r4, lr}
  40960a:	460c      	mov	r4, r1
  40960c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  409610:	f000 f9ec 	bl	4099ec <_read_r>
  409614:	2800      	cmp	r0, #0
  409616:	db03      	blt.n	409620 <__sread+0x18>
  409618:	6d23      	ldr	r3, [r4, #80]	; 0x50
  40961a:	4403      	add	r3, r0
  40961c:	6523      	str	r3, [r4, #80]	; 0x50
  40961e:	bd10      	pop	{r4, pc}
  409620:	89a3      	ldrh	r3, [r4, #12]
  409622:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  409626:	81a3      	strh	r3, [r4, #12]
  409628:	bd10      	pop	{r4, pc}
  40962a:	bf00      	nop

0040962c <__swrite>:
  40962c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  409630:	461d      	mov	r5, r3
  409632:	898b      	ldrh	r3, [r1, #12]
  409634:	4616      	mov	r6, r2
  409636:	460c      	mov	r4, r1
  409638:	05da      	lsls	r2, r3, #23
  40963a:	4607      	mov	r7, r0
  40963c:	d506      	bpl.n	40964c <__swrite+0x20>
  40963e:	2302      	movs	r3, #2
  409640:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  409644:	2200      	movs	r2, #0
  409646:	f000 f9bd 	bl	4099c4 <_lseek_r>
  40964a:	89a3      	ldrh	r3, [r4, #12]
  40964c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  409650:	4638      	mov	r0, r7
  409652:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  409656:	4632      	mov	r2, r6
  409658:	81a3      	strh	r3, [r4, #12]
  40965a:	462b      	mov	r3, r5
  40965c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  409660:	f000 b89e 	b.w	4097a0 <_write_r>

00409664 <__sseek>:
  409664:	b510      	push	{r4, lr}
  409666:	460c      	mov	r4, r1
  409668:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40966c:	f000 f9aa 	bl	4099c4 <_lseek_r>
  409670:	1c42      	adds	r2, r0, #1
  409672:	89a3      	ldrh	r3, [r4, #12]
  409674:	d004      	beq.n	409680 <__sseek+0x1c>
  409676:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
  40967a:	6520      	str	r0, [r4, #80]	; 0x50
  40967c:	81a3      	strh	r3, [r4, #12]
  40967e:	bd10      	pop	{r4, pc}
  409680:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  409684:	81a3      	strh	r3, [r4, #12]
  409686:	bd10      	pop	{r4, pc}

00409688 <__sclose>:
  409688:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40968c:	f000 b920 	b.w	4098d0 <_close_r>

00409690 <__ssprint_r>:
  409690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  409694:	6893      	ldr	r3, [r2, #8]
  409696:	b083      	sub	sp, #12
  409698:	4691      	mov	r9, r2
  40969a:	f8d2 8000 	ldr.w	r8, [r2]
  40969e:	9001      	str	r0, [sp, #4]
  4096a0:	2b00      	cmp	r3, #0
  4096a2:	d073      	beq.n	40978c <__ssprint_r+0xfc>
  4096a4:	f04f 0b00 	mov.w	fp, #0
  4096a8:	460d      	mov	r5, r1
  4096aa:	6808      	ldr	r0, [r1, #0]
  4096ac:	688b      	ldr	r3, [r1, #8]
  4096ae:	465c      	mov	r4, fp
  4096b0:	2c00      	cmp	r4, #0
  4096b2:	d046      	beq.n	409742 <__ssprint_r+0xb2>
  4096b4:	429c      	cmp	r4, r3
  4096b6:	461e      	mov	r6, r3
  4096b8:	469a      	mov	sl, r3
  4096ba:	d349      	bcc.n	409750 <__ssprint_r+0xc0>
  4096bc:	f8b5 e00c 	ldrh.w	lr, [r5, #12]
  4096c0:	f41e 6f90 	tst.w	lr, #1152	; 0x480
  4096c4:	d02d      	beq.n	409722 <__ssprint_r+0x92>
  4096c6:	696b      	ldr	r3, [r5, #20]
  4096c8:	1c62      	adds	r2, r4, #1
  4096ca:	6929      	ldr	r1, [r5, #16]
  4096cc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  4096d0:	1a46      	subs	r6, r0, r1
  4096d2:	4610      	mov	r0, r2
  4096d4:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
  4096d8:	4430      	add	r0, r6
  4096da:	105f      	asrs	r7, r3, #1
  4096dc:	4287      	cmp	r7, r0
  4096de:	463a      	mov	r2, r7
  4096e0:	d201      	bcs.n	4096e6 <__ssprint_r+0x56>
  4096e2:	4607      	mov	r7, r0
  4096e4:	4602      	mov	r2, r0
  4096e6:	f41e 6f80 	tst.w	lr, #1024	; 0x400
  4096ea:	d034      	beq.n	409756 <__ssprint_r+0xc6>
  4096ec:	4611      	mov	r1, r2
  4096ee:	9801      	ldr	r0, [sp, #4]
  4096f0:	f7fe fe5e 	bl	4083b0 <_malloc_r>
  4096f4:	4682      	mov	sl, r0
  4096f6:	2800      	cmp	r0, #0
  4096f8:	d04e      	beq.n	409798 <__ssprint_r+0x108>
  4096fa:	4632      	mov	r2, r6
  4096fc:	6929      	ldr	r1, [r5, #16]
  4096fe:	f7ff f94b 	bl	408998 <memcpy>
  409702:	89aa      	ldrh	r2, [r5, #12]
  409704:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
  409708:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  40970c:	81aa      	strh	r2, [r5, #12]
  40970e:	eb0a 0006 	add.w	r0, sl, r6
  409712:	1bba      	subs	r2, r7, r6
  409714:	f8c5 a010 	str.w	sl, [r5, #16]
  409718:	4626      	mov	r6, r4
  40971a:	46a2      	mov	sl, r4
  40971c:	6028      	str	r0, [r5, #0]
  40971e:	60aa      	str	r2, [r5, #8]
  409720:	616f      	str	r7, [r5, #20]
  409722:	4652      	mov	r2, sl
  409724:	4659      	mov	r1, fp
  409726:	f7ff f9d1 	bl	408acc <memmove>
  40972a:	f8d9 2008 	ldr.w	r2, [r9, #8]
  40972e:	68ab      	ldr	r3, [r5, #8]
  409730:	6828      	ldr	r0, [r5, #0]
  409732:	1b14      	subs	r4, r2, r4
  409734:	1b9b      	subs	r3, r3, r6
  409736:	4450      	add	r0, sl
  409738:	60ab      	str	r3, [r5, #8]
  40973a:	6028      	str	r0, [r5, #0]
  40973c:	f8c9 4008 	str.w	r4, [r9, #8]
  409740:	b324      	cbz	r4, 40978c <__ssprint_r+0xfc>
  409742:	f8d8 b000 	ldr.w	fp, [r8]
  409746:	f108 0808 	add.w	r8, r8, #8
  40974a:	f858 4c04 	ldr.w	r4, [r8, #-4]
  40974e:	e7af      	b.n	4096b0 <__ssprint_r+0x20>
  409750:	4626      	mov	r6, r4
  409752:	46a2      	mov	sl, r4
  409754:	e7e5      	b.n	409722 <__ssprint_r+0x92>
  409756:	9801      	ldr	r0, [sp, #4]
  409758:	f7ff fd2a 	bl	4091b0 <_realloc_r>
  40975c:	4682      	mov	sl, r0
  40975e:	2800      	cmp	r0, #0
  409760:	d1d5      	bne.n	40970e <__ssprint_r+0x7e>
  409762:	9c01      	ldr	r4, [sp, #4]
  409764:	6929      	ldr	r1, [r5, #16]
  409766:	4620      	mov	r0, r4
  409768:	f7fe fb12 	bl	407d90 <_free_r>
  40976c:	230c      	movs	r3, #12
  40976e:	6023      	str	r3, [r4, #0]
  409770:	89ab      	ldrh	r3, [r5, #12]
  409772:	2200      	movs	r2, #0
  409774:	f04f 30ff 	mov.w	r0, #4294967295
  409778:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40977c:	81ab      	strh	r3, [r5, #12]
  40977e:	f8c9 2008 	str.w	r2, [r9, #8]
  409782:	f8c9 2004 	str.w	r2, [r9, #4]
  409786:	b003      	add	sp, #12
  409788:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40978c:	2000      	movs	r0, #0
  40978e:	f8c9 0004 	str.w	r0, [r9, #4]
  409792:	b003      	add	sp, #12
  409794:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  409798:	230c      	movs	r3, #12
  40979a:	9a01      	ldr	r2, [sp, #4]
  40979c:	6013      	str	r3, [r2, #0]
  40979e:	e7e7      	b.n	409770 <__ssprint_r+0xe0>

004097a0 <_write_r>:
  4097a0:	b570      	push	{r4, r5, r6, lr}
  4097a2:	4c08      	ldr	r4, [pc, #32]	; (4097c4 <_write_r+0x24>)
  4097a4:	2500      	movs	r5, #0
  4097a6:	4606      	mov	r6, r0
  4097a8:	4608      	mov	r0, r1
  4097aa:	4611      	mov	r1, r2
  4097ac:	461a      	mov	r2, r3
  4097ae:	6025      	str	r5, [r4, #0]
  4097b0:	f7f6 fed8 	bl	400564 <_write>
  4097b4:	1c43      	adds	r3, r0, #1
  4097b6:	d000      	beq.n	4097ba <_write_r+0x1a>
  4097b8:	bd70      	pop	{r4, r5, r6, pc}
  4097ba:	6823      	ldr	r3, [r4, #0]
  4097bc:	2b00      	cmp	r3, #0
  4097be:	d0fb      	beq.n	4097b8 <_write_r+0x18>
  4097c0:	6033      	str	r3, [r6, #0]
  4097c2:	bd70      	pop	{r4, r5, r6, pc}
  4097c4:	204012fc 	.word	0x204012fc

004097c8 <__register_exitproc>:
  4097c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4097cc:	4c26      	ldr	r4, [pc, #152]	; (409868 <__register_exitproc+0xa0>)
  4097ce:	4606      	mov	r6, r0
  4097d0:	4688      	mov	r8, r1
  4097d2:	4691      	mov	r9, r2
  4097d4:	6825      	ldr	r5, [r4, #0]
  4097d6:	469a      	mov	sl, r3
  4097d8:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
  4097dc:	2c00      	cmp	r4, #0
  4097de:	d03a      	beq.n	409856 <__register_exitproc+0x8e>
  4097e0:	6860      	ldr	r0, [r4, #4]
  4097e2:	281f      	cmp	r0, #31
  4097e4:	dc19      	bgt.n	40981a <__register_exitproc+0x52>
  4097e6:	1c41      	adds	r1, r0, #1
  4097e8:	b186      	cbz	r6, 40980c <__register_exitproc+0x44>
  4097ea:	eb04 0580 	add.w	r5, r4, r0, lsl #2
  4097ee:	2201      	movs	r2, #1
  4097f0:	2e02      	cmp	r6, #2
  4097f2:	f8c5 9088 	str.w	r9, [r5, #136]	; 0x88
  4097f6:	fa02 f200 	lsl.w	r2, r2, r0
  4097fa:	f8d4 3188 	ldr.w	r3, [r4, #392]	; 0x188
  4097fe:	ea43 0302 	orr.w	r3, r3, r2
  409802:	f8c4 3188 	str.w	r3, [r4, #392]	; 0x188
  409806:	f8c5 a108 	str.w	sl, [r5, #264]	; 0x108
  40980a:	d01e      	beq.n	40984a <__register_exitproc+0x82>
  40980c:	1c83      	adds	r3, r0, #2
  40980e:	6061      	str	r1, [r4, #4]
  409810:	2000      	movs	r0, #0
  409812:	f844 8023 	str.w	r8, [r4, r3, lsl #2]
  409816:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40981a:	4b14      	ldr	r3, [pc, #80]	; (40986c <__register_exitproc+0xa4>)
  40981c:	b303      	cbz	r3, 409860 <__register_exitproc+0x98>
  40981e:	f44f 70c8 	mov.w	r0, #400	; 0x190
  409822:	f7fe fdbd 	bl	4083a0 <malloc>
  409826:	4604      	mov	r4, r0
  409828:	b1d0      	cbz	r0, 409860 <__register_exitproc+0x98>
  40982a:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
  40982e:	2700      	movs	r7, #0
  409830:	2101      	movs	r1, #1
  409832:	6003      	str	r3, [r0, #0]
  409834:	4638      	mov	r0, r7
  409836:	6067      	str	r7, [r4, #4]
  409838:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  40983c:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
  409840:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
  409844:	2e00      	cmp	r6, #0
  409846:	d0e1      	beq.n	40980c <__register_exitproc+0x44>
  409848:	e7cf      	b.n	4097ea <__register_exitproc+0x22>
  40984a:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
  40984e:	431a      	orrs	r2, r3
  409850:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
  409854:	e7da      	b.n	40980c <__register_exitproc+0x44>
  409856:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
  40985a:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  40985e:	e7bf      	b.n	4097e0 <__register_exitproc+0x18>
  409860:	f04f 30ff 	mov.w	r0, #4294967295
  409864:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  409868:	0040ab5c 	.word	0x0040ab5c
  40986c:	004083a1 	.word	0x004083a1

00409870 <_calloc_r>:
  409870:	b510      	push	{r4, lr}
  409872:	fb02 f101 	mul.w	r1, r2, r1
  409876:	f7fe fd9b 	bl	4083b0 <_malloc_r>
  40987a:	4604      	mov	r4, r0
  40987c:	b168      	cbz	r0, 40989a <_calloc_r+0x2a>
  40987e:	f850 2c04 	ldr.w	r2, [r0, #-4]
  409882:	f022 0203 	bic.w	r2, r2, #3
  409886:	3a04      	subs	r2, #4
  409888:	2a24      	cmp	r2, #36	; 0x24
  40988a:	d814      	bhi.n	4098b6 <_calloc_r+0x46>
  40988c:	2a13      	cmp	r2, #19
  40988e:	d806      	bhi.n	40989e <_calloc_r+0x2e>
  409890:	4603      	mov	r3, r0
  409892:	2200      	movs	r2, #0
  409894:	601a      	str	r2, [r3, #0]
  409896:	605a      	str	r2, [r3, #4]
  409898:	609a      	str	r2, [r3, #8]
  40989a:	4620      	mov	r0, r4
  40989c:	bd10      	pop	{r4, pc}
  40989e:	2100      	movs	r1, #0
  4098a0:	2a1b      	cmp	r2, #27
  4098a2:	6001      	str	r1, [r0, #0]
  4098a4:	6041      	str	r1, [r0, #4]
  4098a6:	d90b      	bls.n	4098c0 <_calloc_r+0x50>
  4098a8:	2a24      	cmp	r2, #36	; 0x24
  4098aa:	6081      	str	r1, [r0, #8]
  4098ac:	60c1      	str	r1, [r0, #12]
  4098ae:	d00a      	beq.n	4098c6 <_calloc_r+0x56>
  4098b0:	f100 0310 	add.w	r3, r0, #16
  4098b4:	e7ed      	b.n	409892 <_calloc_r+0x22>
  4098b6:	2100      	movs	r1, #0
  4098b8:	f7fb fbf8 	bl	4050ac <memset>
  4098bc:	4620      	mov	r0, r4
  4098be:	bd10      	pop	{r4, pc}
  4098c0:	f100 0308 	add.w	r3, r0, #8
  4098c4:	e7e5      	b.n	409892 <_calloc_r+0x22>
  4098c6:	6101      	str	r1, [r0, #16]
  4098c8:	f100 0318 	add.w	r3, r0, #24
  4098cc:	6141      	str	r1, [r0, #20]
  4098ce:	e7e0      	b.n	409892 <_calloc_r+0x22>

004098d0 <_close_r>:
  4098d0:	b538      	push	{r3, r4, r5, lr}
  4098d2:	2300      	movs	r3, #0
  4098d4:	4c06      	ldr	r4, [pc, #24]	; (4098f0 <_close_r+0x20>)
  4098d6:	4605      	mov	r5, r0
  4098d8:	4608      	mov	r0, r1
  4098da:	6023      	str	r3, [r4, #0]
  4098dc:	f7f8 feb2 	bl	402644 <_close>
  4098e0:	1c43      	adds	r3, r0, #1
  4098e2:	d000      	beq.n	4098e6 <_close_r+0x16>
  4098e4:	bd38      	pop	{r3, r4, r5, pc}
  4098e6:	6823      	ldr	r3, [r4, #0]
  4098e8:	2b00      	cmp	r3, #0
  4098ea:	d0fb      	beq.n	4098e4 <_close_r+0x14>
  4098ec:	602b      	str	r3, [r5, #0]
  4098ee:	bd38      	pop	{r3, r4, r5, pc}
  4098f0:	204012fc 	.word	0x204012fc

004098f4 <_fclose_r>:
  4098f4:	2900      	cmp	r1, #0
  4098f6:	d03d      	beq.n	409974 <_fclose_r+0x80>
  4098f8:	b570      	push	{r4, r5, r6, lr}
  4098fa:	4605      	mov	r5, r0
  4098fc:	460c      	mov	r4, r1
  4098fe:	b108      	cbz	r0, 409904 <_fclose_r+0x10>
  409900:	6b83      	ldr	r3, [r0, #56]	; 0x38
  409902:	b37b      	cbz	r3, 409964 <_fclose_r+0x70>
  409904:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  409908:	b90b      	cbnz	r3, 40990e <_fclose_r+0x1a>
  40990a:	2000      	movs	r0, #0
  40990c:	bd70      	pop	{r4, r5, r6, pc}
  40990e:	4628      	mov	r0, r5
  409910:	4621      	mov	r1, r4
  409912:	f7fe f891 	bl	407a38 <__sflush_r>
  409916:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  409918:	4606      	mov	r6, r0
  40991a:	b133      	cbz	r3, 40992a <_fclose_r+0x36>
  40991c:	4628      	mov	r0, r5
  40991e:	69e1      	ldr	r1, [r4, #28]
  409920:	4798      	blx	r3
  409922:	2800      	cmp	r0, #0
  409924:	bfb8      	it	lt
  409926:	f04f 36ff 	movlt.w	r6, #4294967295
  40992a:	89a3      	ldrh	r3, [r4, #12]
  40992c:	061b      	lsls	r3, r3, #24
  40992e:	d41c      	bmi.n	40996a <_fclose_r+0x76>
  409930:	6b21      	ldr	r1, [r4, #48]	; 0x30
  409932:	b141      	cbz	r1, 409946 <_fclose_r+0x52>
  409934:	f104 0340 	add.w	r3, r4, #64	; 0x40
  409938:	4299      	cmp	r1, r3
  40993a:	d002      	beq.n	409942 <_fclose_r+0x4e>
  40993c:	4628      	mov	r0, r5
  40993e:	f7fe fa27 	bl	407d90 <_free_r>
  409942:	2300      	movs	r3, #0
  409944:	6323      	str	r3, [r4, #48]	; 0x30
  409946:	6c61      	ldr	r1, [r4, #68]	; 0x44
  409948:	b121      	cbz	r1, 409954 <_fclose_r+0x60>
  40994a:	4628      	mov	r0, r5
  40994c:	f7fe fa20 	bl	407d90 <_free_r>
  409950:	2300      	movs	r3, #0
  409952:	6463      	str	r3, [r4, #68]	; 0x44
  409954:	f7fe f9b4 	bl	407cc0 <__sfp_lock_acquire>
  409958:	2300      	movs	r3, #0
  40995a:	81a3      	strh	r3, [r4, #12]
  40995c:	f7fe f9b2 	bl	407cc4 <__sfp_lock_release>
  409960:	4630      	mov	r0, r6
  409962:	bd70      	pop	{r4, r5, r6, pc}
  409964:	f7fe f9a6 	bl	407cb4 <__sinit>
  409968:	e7cc      	b.n	409904 <_fclose_r+0x10>
  40996a:	4628      	mov	r0, r5
  40996c:	6921      	ldr	r1, [r4, #16]
  40996e:	f7fe fa0f 	bl	407d90 <_free_r>
  409972:	e7dd      	b.n	409930 <_fclose_r+0x3c>
  409974:	2000      	movs	r0, #0
  409976:	4770      	bx	lr

00409978 <_fstat_r>:
  409978:	b538      	push	{r3, r4, r5, lr}
  40997a:	2300      	movs	r3, #0
  40997c:	4c07      	ldr	r4, [pc, #28]	; (40999c <_fstat_r+0x24>)
  40997e:	4605      	mov	r5, r0
  409980:	4608      	mov	r0, r1
  409982:	4611      	mov	r1, r2
  409984:	6023      	str	r3, [r4, #0]
  409986:	f7f8 fe69 	bl	40265c <_fstat>
  40998a:	1c43      	adds	r3, r0, #1
  40998c:	d000      	beq.n	409990 <_fstat_r+0x18>
  40998e:	bd38      	pop	{r3, r4, r5, pc}
  409990:	6823      	ldr	r3, [r4, #0]
  409992:	2b00      	cmp	r3, #0
  409994:	d0fb      	beq.n	40998e <_fstat_r+0x16>
  409996:	602b      	str	r3, [r5, #0]
  409998:	bd38      	pop	{r3, r4, r5, pc}
  40999a:	bf00      	nop
  40999c:	204012fc 	.word	0x204012fc

004099a0 <_isatty_r>:
  4099a0:	b538      	push	{r3, r4, r5, lr}
  4099a2:	2300      	movs	r3, #0
  4099a4:	4c06      	ldr	r4, [pc, #24]	; (4099c0 <_isatty_r+0x20>)
  4099a6:	4605      	mov	r5, r0
  4099a8:	4608      	mov	r0, r1
  4099aa:	6023      	str	r3, [r4, #0]
  4099ac:	f7f8 fe66 	bl	40267c <_isatty>
  4099b0:	1c43      	adds	r3, r0, #1
  4099b2:	d000      	beq.n	4099b6 <_isatty_r+0x16>
  4099b4:	bd38      	pop	{r3, r4, r5, pc}
  4099b6:	6823      	ldr	r3, [r4, #0]
  4099b8:	2b00      	cmp	r3, #0
  4099ba:	d0fb      	beq.n	4099b4 <_isatty_r+0x14>
  4099bc:	602b      	str	r3, [r5, #0]
  4099be:	bd38      	pop	{r3, r4, r5, pc}
  4099c0:	204012fc 	.word	0x204012fc

004099c4 <_lseek_r>:
  4099c4:	b570      	push	{r4, r5, r6, lr}
  4099c6:	4c08      	ldr	r4, [pc, #32]	; (4099e8 <_lseek_r+0x24>)
  4099c8:	2500      	movs	r5, #0
  4099ca:	4606      	mov	r6, r0
  4099cc:	4608      	mov	r0, r1
  4099ce:	4611      	mov	r1, r2
  4099d0:	461a      	mov	r2, r3
  4099d2:	6025      	str	r5, [r4, #0]
  4099d4:	f7f8 fe5e 	bl	402694 <_lseek>
  4099d8:	1c43      	adds	r3, r0, #1
  4099da:	d000      	beq.n	4099de <_lseek_r+0x1a>
  4099dc:	bd70      	pop	{r4, r5, r6, pc}
  4099de:	6823      	ldr	r3, [r4, #0]
  4099e0:	2b00      	cmp	r3, #0
  4099e2:	d0fb      	beq.n	4099dc <_lseek_r+0x18>
  4099e4:	6033      	str	r3, [r6, #0]
  4099e6:	bd70      	pop	{r4, r5, r6, pc}
  4099e8:	204012fc 	.word	0x204012fc

004099ec <_read_r>:
  4099ec:	b570      	push	{r4, r5, r6, lr}
  4099ee:	4c08      	ldr	r4, [pc, #32]	; (409a10 <_read_r+0x24>)
  4099f0:	2500      	movs	r5, #0
  4099f2:	4606      	mov	r6, r0
  4099f4:	4608      	mov	r0, r1
  4099f6:	4611      	mov	r1, r2
  4099f8:	461a      	mov	r2, r3
  4099fa:	6025      	str	r5, [r4, #0]
  4099fc:	f7f6 fd86 	bl	40050c <_read>
  409a00:	1c43      	adds	r3, r0, #1
  409a02:	d000      	beq.n	409a06 <_read_r+0x1a>
  409a04:	bd70      	pop	{r4, r5, r6, pc}
  409a06:	6823      	ldr	r3, [r4, #0]
  409a08:	2b00      	cmp	r3, #0
  409a0a:	d0fb      	beq.n	409a04 <_read_r+0x18>
  409a0c:	6033      	str	r3, [r6, #0]
  409a0e:	bd70      	pop	{r4, r5, r6, pc}
  409a10:	204012fc 	.word	0x204012fc

00409a14 <__aeabi_drsub>:
  409a14:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  409a18:	e002      	b.n	409a20 <__adddf3>
  409a1a:	bf00      	nop

00409a1c <__aeabi_dsub>:
  409a1c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00409a20 <__adddf3>:
  409a20:	b530      	push	{r4, r5, lr}
  409a22:	ea4f 0441 	mov.w	r4, r1, lsl #1
  409a26:	ea4f 0543 	mov.w	r5, r3, lsl #1
  409a2a:	ea94 0f05 	teq	r4, r5
  409a2e:	bf08      	it	eq
  409a30:	ea90 0f02 	teqeq	r0, r2
  409a34:	bf1f      	itttt	ne
  409a36:	ea54 0c00 	orrsne.w	ip, r4, r0
  409a3a:	ea55 0c02 	orrsne.w	ip, r5, r2
  409a3e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  409a42:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  409a46:	f000 80e2 	beq.w	409c0e <__adddf3+0x1ee>
  409a4a:	ea4f 5454 	mov.w	r4, r4, lsr #21
  409a4e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  409a52:	bfb8      	it	lt
  409a54:	426d      	neglt	r5, r5
  409a56:	dd0c      	ble.n	409a72 <__adddf3+0x52>
  409a58:	442c      	add	r4, r5
  409a5a:	ea80 0202 	eor.w	r2, r0, r2
  409a5e:	ea81 0303 	eor.w	r3, r1, r3
  409a62:	ea82 0000 	eor.w	r0, r2, r0
  409a66:	ea83 0101 	eor.w	r1, r3, r1
  409a6a:	ea80 0202 	eor.w	r2, r0, r2
  409a6e:	ea81 0303 	eor.w	r3, r1, r3
  409a72:	2d36      	cmp	r5, #54	; 0x36
  409a74:	bf88      	it	hi
  409a76:	bd30      	pophi	{r4, r5, pc}
  409a78:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  409a7c:	ea4f 3101 	mov.w	r1, r1, lsl #12
  409a80:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  409a84:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  409a88:	d002      	beq.n	409a90 <__adddf3+0x70>
  409a8a:	4240      	negs	r0, r0
  409a8c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  409a90:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  409a94:	ea4f 3303 	mov.w	r3, r3, lsl #12
  409a98:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  409a9c:	d002      	beq.n	409aa4 <__adddf3+0x84>
  409a9e:	4252      	negs	r2, r2
  409aa0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  409aa4:	ea94 0f05 	teq	r4, r5
  409aa8:	f000 80a7 	beq.w	409bfa <__adddf3+0x1da>
  409aac:	f1a4 0401 	sub.w	r4, r4, #1
  409ab0:	f1d5 0e20 	rsbs	lr, r5, #32
  409ab4:	db0d      	blt.n	409ad2 <__adddf3+0xb2>
  409ab6:	fa02 fc0e 	lsl.w	ip, r2, lr
  409aba:	fa22 f205 	lsr.w	r2, r2, r5
  409abe:	1880      	adds	r0, r0, r2
  409ac0:	f141 0100 	adc.w	r1, r1, #0
  409ac4:	fa03 f20e 	lsl.w	r2, r3, lr
  409ac8:	1880      	adds	r0, r0, r2
  409aca:	fa43 f305 	asr.w	r3, r3, r5
  409ace:	4159      	adcs	r1, r3
  409ad0:	e00e      	b.n	409af0 <__adddf3+0xd0>
  409ad2:	f1a5 0520 	sub.w	r5, r5, #32
  409ad6:	f10e 0e20 	add.w	lr, lr, #32
  409ada:	2a01      	cmp	r2, #1
  409adc:	fa03 fc0e 	lsl.w	ip, r3, lr
  409ae0:	bf28      	it	cs
  409ae2:	f04c 0c02 	orrcs.w	ip, ip, #2
  409ae6:	fa43 f305 	asr.w	r3, r3, r5
  409aea:	18c0      	adds	r0, r0, r3
  409aec:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  409af0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  409af4:	d507      	bpl.n	409b06 <__adddf3+0xe6>
  409af6:	f04f 0e00 	mov.w	lr, #0
  409afa:	f1dc 0c00 	rsbs	ip, ip, #0
  409afe:	eb7e 0000 	sbcs.w	r0, lr, r0
  409b02:	eb6e 0101 	sbc.w	r1, lr, r1
  409b06:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  409b0a:	d31b      	bcc.n	409b44 <__adddf3+0x124>
  409b0c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  409b10:	d30c      	bcc.n	409b2c <__adddf3+0x10c>
  409b12:	0849      	lsrs	r1, r1, #1
  409b14:	ea5f 0030 	movs.w	r0, r0, rrx
  409b18:	ea4f 0c3c 	mov.w	ip, ip, rrx
  409b1c:	f104 0401 	add.w	r4, r4, #1
  409b20:	ea4f 5244 	mov.w	r2, r4, lsl #21
  409b24:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  409b28:	f080 809a 	bcs.w	409c60 <__adddf3+0x240>
  409b2c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  409b30:	bf08      	it	eq
  409b32:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  409b36:	f150 0000 	adcs.w	r0, r0, #0
  409b3a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  409b3e:	ea41 0105 	orr.w	r1, r1, r5
  409b42:	bd30      	pop	{r4, r5, pc}
  409b44:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  409b48:	4140      	adcs	r0, r0
  409b4a:	eb41 0101 	adc.w	r1, r1, r1
  409b4e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  409b52:	f1a4 0401 	sub.w	r4, r4, #1
  409b56:	d1e9      	bne.n	409b2c <__adddf3+0x10c>
  409b58:	f091 0f00 	teq	r1, #0
  409b5c:	bf04      	itt	eq
  409b5e:	4601      	moveq	r1, r0
  409b60:	2000      	moveq	r0, #0
  409b62:	fab1 f381 	clz	r3, r1
  409b66:	bf08      	it	eq
  409b68:	3320      	addeq	r3, #32
  409b6a:	f1a3 030b 	sub.w	r3, r3, #11
  409b6e:	f1b3 0220 	subs.w	r2, r3, #32
  409b72:	da0c      	bge.n	409b8e <__adddf3+0x16e>
  409b74:	320c      	adds	r2, #12
  409b76:	dd08      	ble.n	409b8a <__adddf3+0x16a>
  409b78:	f102 0c14 	add.w	ip, r2, #20
  409b7c:	f1c2 020c 	rsb	r2, r2, #12
  409b80:	fa01 f00c 	lsl.w	r0, r1, ip
  409b84:	fa21 f102 	lsr.w	r1, r1, r2
  409b88:	e00c      	b.n	409ba4 <__adddf3+0x184>
  409b8a:	f102 0214 	add.w	r2, r2, #20
  409b8e:	bfd8      	it	le
  409b90:	f1c2 0c20 	rsble	ip, r2, #32
  409b94:	fa01 f102 	lsl.w	r1, r1, r2
  409b98:	fa20 fc0c 	lsr.w	ip, r0, ip
  409b9c:	bfdc      	itt	le
  409b9e:	ea41 010c 	orrle.w	r1, r1, ip
  409ba2:	4090      	lslle	r0, r2
  409ba4:	1ae4      	subs	r4, r4, r3
  409ba6:	bfa2      	ittt	ge
  409ba8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  409bac:	4329      	orrge	r1, r5
  409bae:	bd30      	popge	{r4, r5, pc}
  409bb0:	ea6f 0404 	mvn.w	r4, r4
  409bb4:	3c1f      	subs	r4, #31
  409bb6:	da1c      	bge.n	409bf2 <__adddf3+0x1d2>
  409bb8:	340c      	adds	r4, #12
  409bba:	dc0e      	bgt.n	409bda <__adddf3+0x1ba>
  409bbc:	f104 0414 	add.w	r4, r4, #20
  409bc0:	f1c4 0220 	rsb	r2, r4, #32
  409bc4:	fa20 f004 	lsr.w	r0, r0, r4
  409bc8:	fa01 f302 	lsl.w	r3, r1, r2
  409bcc:	ea40 0003 	orr.w	r0, r0, r3
  409bd0:	fa21 f304 	lsr.w	r3, r1, r4
  409bd4:	ea45 0103 	orr.w	r1, r5, r3
  409bd8:	bd30      	pop	{r4, r5, pc}
  409bda:	f1c4 040c 	rsb	r4, r4, #12
  409bde:	f1c4 0220 	rsb	r2, r4, #32
  409be2:	fa20 f002 	lsr.w	r0, r0, r2
  409be6:	fa01 f304 	lsl.w	r3, r1, r4
  409bea:	ea40 0003 	orr.w	r0, r0, r3
  409bee:	4629      	mov	r1, r5
  409bf0:	bd30      	pop	{r4, r5, pc}
  409bf2:	fa21 f004 	lsr.w	r0, r1, r4
  409bf6:	4629      	mov	r1, r5
  409bf8:	bd30      	pop	{r4, r5, pc}
  409bfa:	f094 0f00 	teq	r4, #0
  409bfe:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  409c02:	bf06      	itte	eq
  409c04:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  409c08:	3401      	addeq	r4, #1
  409c0a:	3d01      	subne	r5, #1
  409c0c:	e74e      	b.n	409aac <__adddf3+0x8c>
  409c0e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  409c12:	bf18      	it	ne
  409c14:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  409c18:	d029      	beq.n	409c6e <__adddf3+0x24e>
  409c1a:	ea94 0f05 	teq	r4, r5
  409c1e:	bf08      	it	eq
  409c20:	ea90 0f02 	teqeq	r0, r2
  409c24:	d005      	beq.n	409c32 <__adddf3+0x212>
  409c26:	ea54 0c00 	orrs.w	ip, r4, r0
  409c2a:	bf04      	itt	eq
  409c2c:	4619      	moveq	r1, r3
  409c2e:	4610      	moveq	r0, r2
  409c30:	bd30      	pop	{r4, r5, pc}
  409c32:	ea91 0f03 	teq	r1, r3
  409c36:	bf1e      	ittt	ne
  409c38:	2100      	movne	r1, #0
  409c3a:	2000      	movne	r0, #0
  409c3c:	bd30      	popne	{r4, r5, pc}
  409c3e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  409c42:	d105      	bne.n	409c50 <__adddf3+0x230>
  409c44:	0040      	lsls	r0, r0, #1
  409c46:	4149      	adcs	r1, r1
  409c48:	bf28      	it	cs
  409c4a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  409c4e:	bd30      	pop	{r4, r5, pc}
  409c50:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  409c54:	bf3c      	itt	cc
  409c56:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  409c5a:	bd30      	popcc	{r4, r5, pc}
  409c5c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  409c60:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  409c64:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  409c68:	f04f 0000 	mov.w	r0, #0
  409c6c:	bd30      	pop	{r4, r5, pc}
  409c6e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  409c72:	bf1a      	itte	ne
  409c74:	4619      	movne	r1, r3
  409c76:	4610      	movne	r0, r2
  409c78:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  409c7c:	bf1c      	itt	ne
  409c7e:	460b      	movne	r3, r1
  409c80:	4602      	movne	r2, r0
  409c82:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  409c86:	bf06      	itte	eq
  409c88:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  409c8c:	ea91 0f03 	teqeq	r1, r3
  409c90:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  409c94:	bd30      	pop	{r4, r5, pc}
  409c96:	bf00      	nop

00409c98 <__aeabi_ui2d>:
  409c98:	f090 0f00 	teq	r0, #0
  409c9c:	bf04      	itt	eq
  409c9e:	2100      	moveq	r1, #0
  409ca0:	4770      	bxeq	lr
  409ca2:	b530      	push	{r4, r5, lr}
  409ca4:	f44f 6480 	mov.w	r4, #1024	; 0x400
  409ca8:	f104 0432 	add.w	r4, r4, #50	; 0x32
  409cac:	f04f 0500 	mov.w	r5, #0
  409cb0:	f04f 0100 	mov.w	r1, #0
  409cb4:	e750      	b.n	409b58 <__adddf3+0x138>
  409cb6:	bf00      	nop

00409cb8 <__aeabi_i2d>:
  409cb8:	f090 0f00 	teq	r0, #0
  409cbc:	bf04      	itt	eq
  409cbe:	2100      	moveq	r1, #0
  409cc0:	4770      	bxeq	lr
  409cc2:	b530      	push	{r4, r5, lr}
  409cc4:	f44f 6480 	mov.w	r4, #1024	; 0x400
  409cc8:	f104 0432 	add.w	r4, r4, #50	; 0x32
  409ccc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  409cd0:	bf48      	it	mi
  409cd2:	4240      	negmi	r0, r0
  409cd4:	f04f 0100 	mov.w	r1, #0
  409cd8:	e73e      	b.n	409b58 <__adddf3+0x138>
  409cda:	bf00      	nop

00409cdc <__aeabi_f2d>:
  409cdc:	0042      	lsls	r2, r0, #1
  409cde:	ea4f 01e2 	mov.w	r1, r2, asr #3
  409ce2:	ea4f 0131 	mov.w	r1, r1, rrx
  409ce6:	ea4f 7002 	mov.w	r0, r2, lsl #28
  409cea:	bf1f      	itttt	ne
  409cec:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  409cf0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  409cf4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  409cf8:	4770      	bxne	lr
  409cfa:	f092 0f00 	teq	r2, #0
  409cfe:	bf14      	ite	ne
  409d00:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  409d04:	4770      	bxeq	lr
  409d06:	b530      	push	{r4, r5, lr}
  409d08:	f44f 7460 	mov.w	r4, #896	; 0x380
  409d0c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  409d10:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  409d14:	e720      	b.n	409b58 <__adddf3+0x138>
  409d16:	bf00      	nop

00409d18 <__aeabi_ul2d>:
  409d18:	ea50 0201 	orrs.w	r2, r0, r1
  409d1c:	bf08      	it	eq
  409d1e:	4770      	bxeq	lr
  409d20:	b530      	push	{r4, r5, lr}
  409d22:	f04f 0500 	mov.w	r5, #0
  409d26:	e00a      	b.n	409d3e <__aeabi_l2d+0x16>

00409d28 <__aeabi_l2d>:
  409d28:	ea50 0201 	orrs.w	r2, r0, r1
  409d2c:	bf08      	it	eq
  409d2e:	4770      	bxeq	lr
  409d30:	b530      	push	{r4, r5, lr}
  409d32:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  409d36:	d502      	bpl.n	409d3e <__aeabi_l2d+0x16>
  409d38:	4240      	negs	r0, r0
  409d3a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  409d3e:	f44f 6480 	mov.w	r4, #1024	; 0x400
  409d42:	f104 0432 	add.w	r4, r4, #50	; 0x32
  409d46:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  409d4a:	f43f aedc 	beq.w	409b06 <__adddf3+0xe6>
  409d4e:	f04f 0203 	mov.w	r2, #3
  409d52:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  409d56:	bf18      	it	ne
  409d58:	3203      	addne	r2, #3
  409d5a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  409d5e:	bf18      	it	ne
  409d60:	3203      	addne	r2, #3
  409d62:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  409d66:	f1c2 0320 	rsb	r3, r2, #32
  409d6a:	fa00 fc03 	lsl.w	ip, r0, r3
  409d6e:	fa20 f002 	lsr.w	r0, r0, r2
  409d72:	fa01 fe03 	lsl.w	lr, r1, r3
  409d76:	ea40 000e 	orr.w	r0, r0, lr
  409d7a:	fa21 f102 	lsr.w	r1, r1, r2
  409d7e:	4414      	add	r4, r2
  409d80:	e6c1      	b.n	409b06 <__adddf3+0xe6>
  409d82:	bf00      	nop

00409d84 <__aeabi_dmul>:
  409d84:	b570      	push	{r4, r5, r6, lr}
  409d86:	f04f 0cff 	mov.w	ip, #255	; 0xff
  409d8a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  409d8e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  409d92:	bf1d      	ittte	ne
  409d94:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  409d98:	ea94 0f0c 	teqne	r4, ip
  409d9c:	ea95 0f0c 	teqne	r5, ip
  409da0:	f000 f8de 	bleq	409f60 <__aeabi_dmul+0x1dc>
  409da4:	442c      	add	r4, r5
  409da6:	ea81 0603 	eor.w	r6, r1, r3
  409daa:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  409dae:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  409db2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  409db6:	bf18      	it	ne
  409db8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  409dbc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  409dc0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  409dc4:	d038      	beq.n	409e38 <__aeabi_dmul+0xb4>
  409dc6:	fba0 ce02 	umull	ip, lr, r0, r2
  409dca:	f04f 0500 	mov.w	r5, #0
  409dce:	fbe1 e502 	umlal	lr, r5, r1, r2
  409dd2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  409dd6:	fbe0 e503 	umlal	lr, r5, r0, r3
  409dda:	f04f 0600 	mov.w	r6, #0
  409dde:	fbe1 5603 	umlal	r5, r6, r1, r3
  409de2:	f09c 0f00 	teq	ip, #0
  409de6:	bf18      	it	ne
  409de8:	f04e 0e01 	orrne.w	lr, lr, #1
  409dec:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  409df0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  409df4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  409df8:	d204      	bcs.n	409e04 <__aeabi_dmul+0x80>
  409dfa:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  409dfe:	416d      	adcs	r5, r5
  409e00:	eb46 0606 	adc.w	r6, r6, r6
  409e04:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  409e08:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  409e0c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  409e10:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  409e14:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  409e18:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  409e1c:	bf88      	it	hi
  409e1e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  409e22:	d81e      	bhi.n	409e62 <__aeabi_dmul+0xde>
  409e24:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  409e28:	bf08      	it	eq
  409e2a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  409e2e:	f150 0000 	adcs.w	r0, r0, #0
  409e32:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  409e36:	bd70      	pop	{r4, r5, r6, pc}
  409e38:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  409e3c:	ea46 0101 	orr.w	r1, r6, r1
  409e40:	ea40 0002 	orr.w	r0, r0, r2
  409e44:	ea81 0103 	eor.w	r1, r1, r3
  409e48:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  409e4c:	bfc2      	ittt	gt
  409e4e:	ebd4 050c 	rsbsgt	r5, r4, ip
  409e52:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  409e56:	bd70      	popgt	{r4, r5, r6, pc}
  409e58:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  409e5c:	f04f 0e00 	mov.w	lr, #0
  409e60:	3c01      	subs	r4, #1
  409e62:	f300 80ab 	bgt.w	409fbc <__aeabi_dmul+0x238>
  409e66:	f114 0f36 	cmn.w	r4, #54	; 0x36
  409e6a:	bfde      	ittt	le
  409e6c:	2000      	movle	r0, #0
  409e6e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  409e72:	bd70      	pople	{r4, r5, r6, pc}
  409e74:	f1c4 0400 	rsb	r4, r4, #0
  409e78:	3c20      	subs	r4, #32
  409e7a:	da35      	bge.n	409ee8 <__aeabi_dmul+0x164>
  409e7c:	340c      	adds	r4, #12
  409e7e:	dc1b      	bgt.n	409eb8 <__aeabi_dmul+0x134>
  409e80:	f104 0414 	add.w	r4, r4, #20
  409e84:	f1c4 0520 	rsb	r5, r4, #32
  409e88:	fa00 f305 	lsl.w	r3, r0, r5
  409e8c:	fa20 f004 	lsr.w	r0, r0, r4
  409e90:	fa01 f205 	lsl.w	r2, r1, r5
  409e94:	ea40 0002 	orr.w	r0, r0, r2
  409e98:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  409e9c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  409ea0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  409ea4:	fa21 f604 	lsr.w	r6, r1, r4
  409ea8:	eb42 0106 	adc.w	r1, r2, r6
  409eac:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  409eb0:	bf08      	it	eq
  409eb2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  409eb6:	bd70      	pop	{r4, r5, r6, pc}
  409eb8:	f1c4 040c 	rsb	r4, r4, #12
  409ebc:	f1c4 0520 	rsb	r5, r4, #32
  409ec0:	fa00 f304 	lsl.w	r3, r0, r4
  409ec4:	fa20 f005 	lsr.w	r0, r0, r5
  409ec8:	fa01 f204 	lsl.w	r2, r1, r4
  409ecc:	ea40 0002 	orr.w	r0, r0, r2
  409ed0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  409ed4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  409ed8:	f141 0100 	adc.w	r1, r1, #0
  409edc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  409ee0:	bf08      	it	eq
  409ee2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  409ee6:	bd70      	pop	{r4, r5, r6, pc}
  409ee8:	f1c4 0520 	rsb	r5, r4, #32
  409eec:	fa00 f205 	lsl.w	r2, r0, r5
  409ef0:	ea4e 0e02 	orr.w	lr, lr, r2
  409ef4:	fa20 f304 	lsr.w	r3, r0, r4
  409ef8:	fa01 f205 	lsl.w	r2, r1, r5
  409efc:	ea43 0302 	orr.w	r3, r3, r2
  409f00:	fa21 f004 	lsr.w	r0, r1, r4
  409f04:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  409f08:	fa21 f204 	lsr.w	r2, r1, r4
  409f0c:	ea20 0002 	bic.w	r0, r0, r2
  409f10:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  409f14:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  409f18:	bf08      	it	eq
  409f1a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  409f1e:	bd70      	pop	{r4, r5, r6, pc}
  409f20:	f094 0f00 	teq	r4, #0
  409f24:	d10f      	bne.n	409f46 <__aeabi_dmul+0x1c2>
  409f26:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  409f2a:	0040      	lsls	r0, r0, #1
  409f2c:	eb41 0101 	adc.w	r1, r1, r1
  409f30:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  409f34:	bf08      	it	eq
  409f36:	3c01      	subeq	r4, #1
  409f38:	d0f7      	beq.n	409f2a <__aeabi_dmul+0x1a6>
  409f3a:	ea41 0106 	orr.w	r1, r1, r6
  409f3e:	f095 0f00 	teq	r5, #0
  409f42:	bf18      	it	ne
  409f44:	4770      	bxne	lr
  409f46:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  409f4a:	0052      	lsls	r2, r2, #1
  409f4c:	eb43 0303 	adc.w	r3, r3, r3
  409f50:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  409f54:	bf08      	it	eq
  409f56:	3d01      	subeq	r5, #1
  409f58:	d0f7      	beq.n	409f4a <__aeabi_dmul+0x1c6>
  409f5a:	ea43 0306 	orr.w	r3, r3, r6
  409f5e:	4770      	bx	lr
  409f60:	ea94 0f0c 	teq	r4, ip
  409f64:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  409f68:	bf18      	it	ne
  409f6a:	ea95 0f0c 	teqne	r5, ip
  409f6e:	d00c      	beq.n	409f8a <__aeabi_dmul+0x206>
  409f70:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  409f74:	bf18      	it	ne
  409f76:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  409f7a:	d1d1      	bne.n	409f20 <__aeabi_dmul+0x19c>
  409f7c:	ea81 0103 	eor.w	r1, r1, r3
  409f80:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  409f84:	f04f 0000 	mov.w	r0, #0
  409f88:	bd70      	pop	{r4, r5, r6, pc}
  409f8a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  409f8e:	bf06      	itte	eq
  409f90:	4610      	moveq	r0, r2
  409f92:	4619      	moveq	r1, r3
  409f94:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  409f98:	d019      	beq.n	409fce <__aeabi_dmul+0x24a>
  409f9a:	ea94 0f0c 	teq	r4, ip
  409f9e:	d102      	bne.n	409fa6 <__aeabi_dmul+0x222>
  409fa0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  409fa4:	d113      	bne.n	409fce <__aeabi_dmul+0x24a>
  409fa6:	ea95 0f0c 	teq	r5, ip
  409faa:	d105      	bne.n	409fb8 <__aeabi_dmul+0x234>
  409fac:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  409fb0:	bf1c      	itt	ne
  409fb2:	4610      	movne	r0, r2
  409fb4:	4619      	movne	r1, r3
  409fb6:	d10a      	bne.n	409fce <__aeabi_dmul+0x24a>
  409fb8:	ea81 0103 	eor.w	r1, r1, r3
  409fbc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  409fc0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  409fc4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  409fc8:	f04f 0000 	mov.w	r0, #0
  409fcc:	bd70      	pop	{r4, r5, r6, pc}
  409fce:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  409fd2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  409fd6:	bd70      	pop	{r4, r5, r6, pc}

00409fd8 <__aeabi_ddiv>:
  409fd8:	b570      	push	{r4, r5, r6, lr}
  409fda:	f04f 0cff 	mov.w	ip, #255	; 0xff
  409fde:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  409fe2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  409fe6:	bf1d      	ittte	ne
  409fe8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  409fec:	ea94 0f0c 	teqne	r4, ip
  409ff0:	ea95 0f0c 	teqne	r5, ip
  409ff4:	f000 f8a7 	bleq	40a146 <__aeabi_ddiv+0x16e>
  409ff8:	eba4 0405 	sub.w	r4, r4, r5
  409ffc:	ea81 0e03 	eor.w	lr, r1, r3
  40a000:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  40a004:	ea4f 3101 	mov.w	r1, r1, lsl #12
  40a008:	f000 8088 	beq.w	40a11c <__aeabi_ddiv+0x144>
  40a00c:	ea4f 3303 	mov.w	r3, r3, lsl #12
  40a010:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  40a014:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  40a018:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  40a01c:	ea4f 2202 	mov.w	r2, r2, lsl #8
  40a020:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  40a024:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  40a028:	ea4f 2600 	mov.w	r6, r0, lsl #8
  40a02c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  40a030:	429d      	cmp	r5, r3
  40a032:	bf08      	it	eq
  40a034:	4296      	cmpeq	r6, r2
  40a036:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  40a03a:	f504 7440 	add.w	r4, r4, #768	; 0x300
  40a03e:	d202      	bcs.n	40a046 <__aeabi_ddiv+0x6e>
  40a040:	085b      	lsrs	r3, r3, #1
  40a042:	ea4f 0232 	mov.w	r2, r2, rrx
  40a046:	1ab6      	subs	r6, r6, r2
  40a048:	eb65 0503 	sbc.w	r5, r5, r3
  40a04c:	085b      	lsrs	r3, r3, #1
  40a04e:	ea4f 0232 	mov.w	r2, r2, rrx
  40a052:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  40a056:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  40a05a:	ebb6 0e02 	subs.w	lr, r6, r2
  40a05e:	eb75 0e03 	sbcs.w	lr, r5, r3
  40a062:	bf22      	ittt	cs
  40a064:	1ab6      	subcs	r6, r6, r2
  40a066:	4675      	movcs	r5, lr
  40a068:	ea40 000c 	orrcs.w	r0, r0, ip
  40a06c:	085b      	lsrs	r3, r3, #1
  40a06e:	ea4f 0232 	mov.w	r2, r2, rrx
  40a072:	ebb6 0e02 	subs.w	lr, r6, r2
  40a076:	eb75 0e03 	sbcs.w	lr, r5, r3
  40a07a:	bf22      	ittt	cs
  40a07c:	1ab6      	subcs	r6, r6, r2
  40a07e:	4675      	movcs	r5, lr
  40a080:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  40a084:	085b      	lsrs	r3, r3, #1
  40a086:	ea4f 0232 	mov.w	r2, r2, rrx
  40a08a:	ebb6 0e02 	subs.w	lr, r6, r2
  40a08e:	eb75 0e03 	sbcs.w	lr, r5, r3
  40a092:	bf22      	ittt	cs
  40a094:	1ab6      	subcs	r6, r6, r2
  40a096:	4675      	movcs	r5, lr
  40a098:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  40a09c:	085b      	lsrs	r3, r3, #1
  40a09e:	ea4f 0232 	mov.w	r2, r2, rrx
  40a0a2:	ebb6 0e02 	subs.w	lr, r6, r2
  40a0a6:	eb75 0e03 	sbcs.w	lr, r5, r3
  40a0aa:	bf22      	ittt	cs
  40a0ac:	1ab6      	subcs	r6, r6, r2
  40a0ae:	4675      	movcs	r5, lr
  40a0b0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  40a0b4:	ea55 0e06 	orrs.w	lr, r5, r6
  40a0b8:	d018      	beq.n	40a0ec <__aeabi_ddiv+0x114>
  40a0ba:	ea4f 1505 	mov.w	r5, r5, lsl #4
  40a0be:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  40a0c2:	ea4f 1606 	mov.w	r6, r6, lsl #4
  40a0c6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  40a0ca:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  40a0ce:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  40a0d2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  40a0d6:	d1c0      	bne.n	40a05a <__aeabi_ddiv+0x82>
  40a0d8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40a0dc:	d10b      	bne.n	40a0f6 <__aeabi_ddiv+0x11e>
  40a0de:	ea41 0100 	orr.w	r1, r1, r0
  40a0e2:	f04f 0000 	mov.w	r0, #0
  40a0e6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  40a0ea:	e7b6      	b.n	40a05a <__aeabi_ddiv+0x82>
  40a0ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40a0f0:	bf04      	itt	eq
  40a0f2:	4301      	orreq	r1, r0
  40a0f4:	2000      	moveq	r0, #0
  40a0f6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  40a0fa:	bf88      	it	hi
  40a0fc:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  40a100:	f63f aeaf 	bhi.w	409e62 <__aeabi_dmul+0xde>
  40a104:	ebb5 0c03 	subs.w	ip, r5, r3
  40a108:	bf04      	itt	eq
  40a10a:	ebb6 0c02 	subseq.w	ip, r6, r2
  40a10e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  40a112:	f150 0000 	adcs.w	r0, r0, #0
  40a116:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40a11a:	bd70      	pop	{r4, r5, r6, pc}
  40a11c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  40a120:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  40a124:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  40a128:	bfc2      	ittt	gt
  40a12a:	ebd4 050c 	rsbsgt	r5, r4, ip
  40a12e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  40a132:	bd70      	popgt	{r4, r5, r6, pc}
  40a134:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  40a138:	f04f 0e00 	mov.w	lr, #0
  40a13c:	3c01      	subs	r4, #1
  40a13e:	e690      	b.n	409e62 <__aeabi_dmul+0xde>
  40a140:	ea45 0e06 	orr.w	lr, r5, r6
  40a144:	e68d      	b.n	409e62 <__aeabi_dmul+0xde>
  40a146:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  40a14a:	ea94 0f0c 	teq	r4, ip
  40a14e:	bf08      	it	eq
  40a150:	ea95 0f0c 	teqeq	r5, ip
  40a154:	f43f af3b 	beq.w	409fce <__aeabi_dmul+0x24a>
  40a158:	ea94 0f0c 	teq	r4, ip
  40a15c:	d10a      	bne.n	40a174 <__aeabi_ddiv+0x19c>
  40a15e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  40a162:	f47f af34 	bne.w	409fce <__aeabi_dmul+0x24a>
  40a166:	ea95 0f0c 	teq	r5, ip
  40a16a:	f47f af25 	bne.w	409fb8 <__aeabi_dmul+0x234>
  40a16e:	4610      	mov	r0, r2
  40a170:	4619      	mov	r1, r3
  40a172:	e72c      	b.n	409fce <__aeabi_dmul+0x24a>
  40a174:	ea95 0f0c 	teq	r5, ip
  40a178:	d106      	bne.n	40a188 <__aeabi_ddiv+0x1b0>
  40a17a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  40a17e:	f43f aefd 	beq.w	409f7c <__aeabi_dmul+0x1f8>
  40a182:	4610      	mov	r0, r2
  40a184:	4619      	mov	r1, r3
  40a186:	e722      	b.n	409fce <__aeabi_dmul+0x24a>
  40a188:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  40a18c:	bf18      	it	ne
  40a18e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  40a192:	f47f aec5 	bne.w	409f20 <__aeabi_dmul+0x19c>
  40a196:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  40a19a:	f47f af0d 	bne.w	409fb8 <__aeabi_dmul+0x234>
  40a19e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  40a1a2:	f47f aeeb 	bne.w	409f7c <__aeabi_dmul+0x1f8>
  40a1a6:	e712      	b.n	409fce <__aeabi_dmul+0x24a>

0040a1a8 <__gedf2>:
  40a1a8:	f04f 3cff 	mov.w	ip, #4294967295
  40a1ac:	e006      	b.n	40a1bc <__cmpdf2+0x4>
  40a1ae:	bf00      	nop

0040a1b0 <__ledf2>:
  40a1b0:	f04f 0c01 	mov.w	ip, #1
  40a1b4:	e002      	b.n	40a1bc <__cmpdf2+0x4>
  40a1b6:	bf00      	nop

0040a1b8 <__cmpdf2>:
  40a1b8:	f04f 0c01 	mov.w	ip, #1
  40a1bc:	f84d cd04 	str.w	ip, [sp, #-4]!
  40a1c0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  40a1c4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40a1c8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  40a1cc:	bf18      	it	ne
  40a1ce:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  40a1d2:	d01b      	beq.n	40a20c <__cmpdf2+0x54>
  40a1d4:	b001      	add	sp, #4
  40a1d6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  40a1da:	bf0c      	ite	eq
  40a1dc:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  40a1e0:	ea91 0f03 	teqne	r1, r3
  40a1e4:	bf02      	ittt	eq
  40a1e6:	ea90 0f02 	teqeq	r0, r2
  40a1ea:	2000      	moveq	r0, #0
  40a1ec:	4770      	bxeq	lr
  40a1ee:	f110 0f00 	cmn.w	r0, #0
  40a1f2:	ea91 0f03 	teq	r1, r3
  40a1f6:	bf58      	it	pl
  40a1f8:	4299      	cmppl	r1, r3
  40a1fa:	bf08      	it	eq
  40a1fc:	4290      	cmpeq	r0, r2
  40a1fe:	bf2c      	ite	cs
  40a200:	17d8      	asrcs	r0, r3, #31
  40a202:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  40a206:	f040 0001 	orr.w	r0, r0, #1
  40a20a:	4770      	bx	lr
  40a20c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  40a210:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40a214:	d102      	bne.n	40a21c <__cmpdf2+0x64>
  40a216:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  40a21a:	d107      	bne.n	40a22c <__cmpdf2+0x74>
  40a21c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  40a220:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40a224:	d1d6      	bne.n	40a1d4 <__cmpdf2+0x1c>
  40a226:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  40a22a:	d0d3      	beq.n	40a1d4 <__cmpdf2+0x1c>
  40a22c:	f85d 0b04 	ldr.w	r0, [sp], #4
  40a230:	4770      	bx	lr
  40a232:	bf00      	nop

0040a234 <__aeabi_cdrcmple>:
  40a234:	4684      	mov	ip, r0
  40a236:	4610      	mov	r0, r2
  40a238:	4662      	mov	r2, ip
  40a23a:	468c      	mov	ip, r1
  40a23c:	4619      	mov	r1, r3
  40a23e:	4663      	mov	r3, ip
  40a240:	e000      	b.n	40a244 <__aeabi_cdcmpeq>
  40a242:	bf00      	nop

0040a244 <__aeabi_cdcmpeq>:
  40a244:	b501      	push	{r0, lr}
  40a246:	f7ff ffb7 	bl	40a1b8 <__cmpdf2>
  40a24a:	2800      	cmp	r0, #0
  40a24c:	bf48      	it	mi
  40a24e:	f110 0f00 	cmnmi.w	r0, #0
  40a252:	bd01      	pop	{r0, pc}

0040a254 <__aeabi_dcmpeq>:
  40a254:	f84d ed08 	str.w	lr, [sp, #-8]!
  40a258:	f7ff fff4 	bl	40a244 <__aeabi_cdcmpeq>
  40a25c:	bf0c      	ite	eq
  40a25e:	2001      	moveq	r0, #1
  40a260:	2000      	movne	r0, #0
  40a262:	f85d fb08 	ldr.w	pc, [sp], #8
  40a266:	bf00      	nop

0040a268 <__aeabi_dcmplt>:
  40a268:	f84d ed08 	str.w	lr, [sp, #-8]!
  40a26c:	f7ff ffea 	bl	40a244 <__aeabi_cdcmpeq>
  40a270:	bf34      	ite	cc
  40a272:	2001      	movcc	r0, #1
  40a274:	2000      	movcs	r0, #0
  40a276:	f85d fb08 	ldr.w	pc, [sp], #8
  40a27a:	bf00      	nop

0040a27c <__aeabi_dcmple>:
  40a27c:	f84d ed08 	str.w	lr, [sp, #-8]!
  40a280:	f7ff ffe0 	bl	40a244 <__aeabi_cdcmpeq>
  40a284:	bf94      	ite	ls
  40a286:	2001      	movls	r0, #1
  40a288:	2000      	movhi	r0, #0
  40a28a:	f85d fb08 	ldr.w	pc, [sp], #8
  40a28e:	bf00      	nop

0040a290 <__aeabi_dcmpge>:
  40a290:	f84d ed08 	str.w	lr, [sp, #-8]!
  40a294:	f7ff ffce 	bl	40a234 <__aeabi_cdrcmple>
  40a298:	bf94      	ite	ls
  40a29a:	2001      	movls	r0, #1
  40a29c:	2000      	movhi	r0, #0
  40a29e:	f85d fb08 	ldr.w	pc, [sp], #8
  40a2a2:	bf00      	nop

0040a2a4 <__aeabi_dcmpgt>:
  40a2a4:	f84d ed08 	str.w	lr, [sp, #-8]!
  40a2a8:	f7ff ffc4 	bl	40a234 <__aeabi_cdrcmple>
  40a2ac:	bf34      	ite	cc
  40a2ae:	2001      	movcc	r0, #1
  40a2b0:	2000      	movcs	r0, #0
  40a2b2:	f85d fb08 	ldr.w	pc, [sp], #8
  40a2b6:	bf00      	nop

0040a2b8 <__aeabi_d2iz>:
  40a2b8:	ea4f 0241 	mov.w	r2, r1, lsl #1
  40a2bc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  40a2c0:	d215      	bcs.n	40a2ee <__aeabi_d2iz+0x36>
  40a2c2:	d511      	bpl.n	40a2e8 <__aeabi_d2iz+0x30>
  40a2c4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  40a2c8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  40a2cc:	d912      	bls.n	40a2f4 <__aeabi_d2iz+0x3c>
  40a2ce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  40a2d2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  40a2d6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  40a2da:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  40a2de:	fa23 f002 	lsr.w	r0, r3, r2
  40a2e2:	bf18      	it	ne
  40a2e4:	4240      	negne	r0, r0
  40a2e6:	4770      	bx	lr
  40a2e8:	f04f 0000 	mov.w	r0, #0
  40a2ec:	4770      	bx	lr
  40a2ee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  40a2f2:	d105      	bne.n	40a300 <__aeabi_d2iz+0x48>
  40a2f4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  40a2f8:	bf08      	it	eq
  40a2fa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  40a2fe:	4770      	bx	lr
  40a300:	f04f 0000 	mov.w	r0, #0
  40a304:	4770      	bx	lr
  40a306:	bf00      	nop

0040a308 <__aeabi_uldivmod>:
  40a308:	b953      	cbnz	r3, 40a320 <__aeabi_uldivmod+0x18>
  40a30a:	b94a      	cbnz	r2, 40a320 <__aeabi_uldivmod+0x18>
  40a30c:	2900      	cmp	r1, #0
  40a30e:	bf08      	it	eq
  40a310:	2800      	cmpeq	r0, #0
  40a312:	bf1c      	itt	ne
  40a314:	f04f 31ff 	movne.w	r1, #4294967295
  40a318:	f04f 30ff 	movne.w	r0, #4294967295
  40a31c:	f000 b83c 	b.w	40a398 <__aeabi_idiv0>
  40a320:	b082      	sub	sp, #8
  40a322:	46ec      	mov	ip, sp
  40a324:	e92d 5000 	stmdb	sp!, {ip, lr}
  40a328:	f000 f81e 	bl	40a368 <__gnu_uldivmod_helper>
  40a32c:	f8dd e004 	ldr.w	lr, [sp, #4]
  40a330:	b002      	add	sp, #8
  40a332:	bc0c      	pop	{r2, r3}
  40a334:	4770      	bx	lr
  40a336:	bf00      	nop

0040a338 <__gnu_ldivmod_helper>:
  40a338:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40a33c:	4690      	mov	r8, r2
  40a33e:	4606      	mov	r6, r0
  40a340:	460f      	mov	r7, r1
  40a342:	461d      	mov	r5, r3
  40a344:	9c06      	ldr	r4, [sp, #24]
  40a346:	f000 f829 	bl	40a39c <__divdi3>
  40a34a:	fb08 fc01 	mul.w	ip, r8, r1
  40a34e:	4686      	mov	lr, r0
  40a350:	fba8 2300 	umull	r2, r3, r8, r0
  40a354:	fb00 c505 	mla	r5, r0, r5, ip
  40a358:	1ab2      	subs	r2, r6, r2
  40a35a:	442b      	add	r3, r5
  40a35c:	eb67 0303 	sbc.w	r3, r7, r3
  40a360:	e9c4 2300 	strd	r2, r3, [r4]
  40a364:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0040a368 <__gnu_uldivmod_helper>:
  40a368:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40a36c:	461d      	mov	r5, r3
  40a36e:	4617      	mov	r7, r2
  40a370:	4680      	mov	r8, r0
  40a372:	4689      	mov	r9, r1
  40a374:	9e08      	ldr	r6, [sp, #32]
  40a376:	f000 f953 	bl	40a620 <__udivdi3>
  40a37a:	fb00 f305 	mul.w	r3, r0, r5
  40a37e:	fba0 4507 	umull	r4, r5, r0, r7
  40a382:	fb07 3701 	mla	r7, r7, r1, r3
  40a386:	ebb8 0404 	subs.w	r4, r8, r4
  40a38a:	443d      	add	r5, r7
  40a38c:	eb69 0505 	sbc.w	r5, r9, r5
  40a390:	e9c6 4500 	strd	r4, r5, [r6]
  40a394:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0040a398 <__aeabi_idiv0>:
  40a398:	4770      	bx	lr
  40a39a:	bf00      	nop

0040a39c <__divdi3>:
  40a39c:	2900      	cmp	r1, #0
  40a39e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40a3a2:	f2c0 80a2 	blt.w	40a4ea <__divdi3+0x14e>
  40a3a6:	2600      	movs	r6, #0
  40a3a8:	2b00      	cmp	r3, #0
  40a3aa:	f2c0 8098 	blt.w	40a4de <__divdi3+0x142>
  40a3ae:	468c      	mov	ip, r1
  40a3b0:	4690      	mov	r8, r2
  40a3b2:	469e      	mov	lr, r3
  40a3b4:	4615      	mov	r5, r2
  40a3b6:	4604      	mov	r4, r0
  40a3b8:	460f      	mov	r7, r1
  40a3ba:	bbcb      	cbnz	r3, 40a430 <__divdi3+0x94>
  40a3bc:	428a      	cmp	r2, r1
  40a3be:	d956      	bls.n	40a46e <__divdi3+0xd2>
  40a3c0:	fab2 f382 	clz	r3, r2
  40a3c4:	b13b      	cbz	r3, 40a3d6 <__divdi3+0x3a>
  40a3c6:	f1c3 0220 	rsb	r2, r3, #32
  40a3ca:	409f      	lsls	r7, r3
  40a3cc:	409d      	lsls	r5, r3
  40a3ce:	409c      	lsls	r4, r3
  40a3d0:	fa20 f202 	lsr.w	r2, r0, r2
  40a3d4:	4317      	orrs	r7, r2
  40a3d6:	0c28      	lsrs	r0, r5, #16
  40a3d8:	0c22      	lsrs	r2, r4, #16
  40a3da:	fa1f fe85 	uxth.w	lr, r5
  40a3de:	fbb7 f1f0 	udiv	r1, r7, r0
  40a3e2:	fb00 7711 	mls	r7, r0, r1, r7
  40a3e6:	fb0e f301 	mul.w	r3, lr, r1
  40a3ea:	ea42 4707 	orr.w	r7, r2, r7, lsl #16
  40a3ee:	42bb      	cmp	r3, r7
  40a3f0:	d907      	bls.n	40a402 <__divdi3+0x66>
  40a3f2:	197f      	adds	r7, r7, r5
  40a3f4:	f080 8101 	bcs.w	40a5fa <__divdi3+0x25e>
  40a3f8:	42bb      	cmp	r3, r7
  40a3fa:	f240 80fe 	bls.w	40a5fa <__divdi3+0x25e>
  40a3fe:	3902      	subs	r1, #2
  40a400:	442f      	add	r7, r5
  40a402:	1aff      	subs	r7, r7, r3
  40a404:	b2a4      	uxth	r4, r4
  40a406:	fbb7 f3f0 	udiv	r3, r7, r0
  40a40a:	fb00 7713 	mls	r7, r0, r3, r7
  40a40e:	fb0e fe03 	mul.w	lr, lr, r3
  40a412:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
  40a416:	45be      	cmp	lr, r7
  40a418:	d906      	bls.n	40a428 <__divdi3+0x8c>
  40a41a:	197f      	adds	r7, r7, r5
  40a41c:	f080 80eb 	bcs.w	40a5f6 <__divdi3+0x25a>
  40a420:	45be      	cmp	lr, r7
  40a422:	f240 80e8 	bls.w	40a5f6 <__divdi3+0x25a>
  40a426:	3b02      	subs	r3, #2
  40a428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
  40a42c:	2200      	movs	r2, #0
  40a42e:	e003      	b.n	40a438 <__divdi3+0x9c>
  40a430:	428b      	cmp	r3, r1
  40a432:	d90f      	bls.n	40a454 <__divdi3+0xb8>
  40a434:	2200      	movs	r2, #0
  40a436:	4613      	mov	r3, r2
  40a438:	1c34      	adds	r4, r6, #0
  40a43a:	f04f 0500 	mov.w	r5, #0
  40a43e:	bf18      	it	ne
  40a440:	2401      	movne	r4, #1
  40a442:	4260      	negs	r0, r4
  40a444:	eb65 0145 	sbc.w	r1, r5, r5, lsl #1
  40a448:	4058      	eors	r0, r3
  40a44a:	4051      	eors	r1, r2
  40a44c:	1900      	adds	r0, r0, r4
  40a44e:	4169      	adcs	r1, r5
  40a450:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40a454:	fab3 f283 	clz	r2, r3
  40a458:	2a00      	cmp	r2, #0
  40a45a:	f040 8083 	bne.w	40a564 <__divdi3+0x1c8>
  40a45e:	4580      	cmp	r8, r0
  40a460:	f240 80cd 	bls.w	40a5fe <__divdi3+0x262>
  40a464:	428b      	cmp	r3, r1
  40a466:	f0c0 80ca 	bcc.w	40a5fe <__divdi3+0x262>
  40a46a:	4613      	mov	r3, r2
  40a46c:	e7e4      	b.n	40a438 <__divdi3+0x9c>
  40a46e:	b912      	cbnz	r2, 40a476 <__divdi3+0xda>
  40a470:	2301      	movs	r3, #1
  40a472:	fbb3 f5f2 	udiv	r5, r3, r2
  40a476:	fab5 f285 	clz	r2, r5
  40a47a:	2a00      	cmp	r2, #0
  40a47c:	d13b      	bne.n	40a4f6 <__divdi3+0x15a>
  40a47e:	1b78      	subs	r0, r7, r5
  40a480:	ea4f 4e15 	mov.w	lr, r5, lsr #16
  40a484:	fa1f fc85 	uxth.w	ip, r5
  40a488:	2201      	movs	r2, #1
  40a48a:	0c21      	lsrs	r1, r4, #16
  40a48c:	fbb0 f8fe 	udiv	r8, r0, lr
  40a490:	fb0e 0018 	mls	r0, lr, r8, r0
  40a494:	fb0c f308 	mul.w	r3, ip, r8
  40a498:	ea41 4700 	orr.w	r7, r1, r0, lsl #16
  40a49c:	42bb      	cmp	r3, r7
  40a49e:	d908      	bls.n	40a4b2 <__divdi3+0x116>
  40a4a0:	197f      	adds	r7, r7, r5
  40a4a2:	f080 80b0 	bcs.w	40a606 <__divdi3+0x26a>
  40a4a6:	42bb      	cmp	r3, r7
  40a4a8:	f240 80ad 	bls.w	40a606 <__divdi3+0x26a>
  40a4ac:	f1a8 0802 	sub.w	r8, r8, #2
  40a4b0:	442f      	add	r7, r5
  40a4b2:	1aff      	subs	r7, r7, r3
  40a4b4:	b2a4      	uxth	r4, r4
  40a4b6:	fbb7 f3fe 	udiv	r3, r7, lr
  40a4ba:	fb0e 7713 	mls	r7, lr, r3, r7
  40a4be:	fb0c fc03 	mul.w	ip, ip, r3
  40a4c2:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
  40a4c6:	45bc      	cmp	ip, r7
  40a4c8:	d906      	bls.n	40a4d8 <__divdi3+0x13c>
  40a4ca:	197f      	adds	r7, r7, r5
  40a4cc:	f080 8099 	bcs.w	40a602 <__divdi3+0x266>
  40a4d0:	45bc      	cmp	ip, r7
  40a4d2:	f240 8096 	bls.w	40a602 <__divdi3+0x266>
  40a4d6:	3b02      	subs	r3, #2
  40a4d8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
  40a4dc:	e7ac      	b.n	40a438 <__divdi3+0x9c>
  40a4de:	4252      	negs	r2, r2
  40a4e0:	ea6f 0606 	mvn.w	r6, r6
  40a4e4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  40a4e8:	e761      	b.n	40a3ae <__divdi3+0x12>
  40a4ea:	4240      	negs	r0, r0
  40a4ec:	f04f 36ff 	mov.w	r6, #4294967295
  40a4f0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  40a4f4:	e758      	b.n	40a3a8 <__divdi3+0xc>
  40a4f6:	4095      	lsls	r5, r2
  40a4f8:	f1c2 0120 	rsb	r1, r2, #32
  40a4fc:	fa07 f302 	lsl.w	r3, r7, r2
  40a500:	ea4f 4e15 	mov.w	lr, r5, lsr #16
  40a504:	40cf      	lsrs	r7, r1
  40a506:	fa24 f101 	lsr.w	r1, r4, r1
  40a50a:	4094      	lsls	r4, r2
  40a50c:	fa1f fc85 	uxth.w	ip, r5
  40a510:	4319      	orrs	r1, r3
  40a512:	fbb7 f2fe 	udiv	r2, r7, lr
  40a516:	ea4f 4811 	mov.w	r8, r1, lsr #16
  40a51a:	fb0e 7712 	mls	r7, lr, r2, r7
  40a51e:	fb0c f302 	mul.w	r3, ip, r2
  40a522:	ea48 4707 	orr.w	r7, r8, r7, lsl #16
  40a526:	42bb      	cmp	r3, r7
  40a528:	d905      	bls.n	40a536 <__divdi3+0x19a>
  40a52a:	197f      	adds	r7, r7, r5
  40a52c:	d271      	bcs.n	40a612 <__divdi3+0x276>
  40a52e:	42bb      	cmp	r3, r7
  40a530:	d96f      	bls.n	40a612 <__divdi3+0x276>
  40a532:	3a02      	subs	r2, #2
  40a534:	442f      	add	r7, r5
  40a536:	1aff      	subs	r7, r7, r3
  40a538:	b289      	uxth	r1, r1
  40a53a:	fbb7 f8fe 	udiv	r8, r7, lr
  40a53e:	fb0e 7718 	mls	r7, lr, r8, r7
  40a542:	fb0c f008 	mul.w	r0, ip, r8
  40a546:	ea41 4307 	orr.w	r3, r1, r7, lsl #16
  40a54a:	4298      	cmp	r0, r3
  40a54c:	d906      	bls.n	40a55c <__divdi3+0x1c0>
  40a54e:	195b      	adds	r3, r3, r5
  40a550:	d261      	bcs.n	40a616 <__divdi3+0x27a>
  40a552:	4298      	cmp	r0, r3
  40a554:	d95f      	bls.n	40a616 <__divdi3+0x27a>
  40a556:	f1a8 0802 	sub.w	r8, r8, #2
  40a55a:	442b      	add	r3, r5
  40a55c:	1a18      	subs	r0, r3, r0
  40a55e:	ea48 4202 	orr.w	r2, r8, r2, lsl #16
  40a562:	e792      	b.n	40a48a <__divdi3+0xee>
  40a564:	f1c2 0720 	rsb	r7, r2, #32
  40a568:	fa03 fe02 	lsl.w	lr, r3, r2
  40a56c:	fa08 f502 	lsl.w	r5, r8, r2
  40a570:	4091      	lsls	r1, r2
  40a572:	fa28 f307 	lsr.w	r3, r8, r7
  40a576:	fa2c fc07 	lsr.w	ip, ip, r7
  40a57a:	40f8      	lsrs	r0, r7
  40a57c:	ea43 0e0e 	orr.w	lr, r3, lr
  40a580:	4308      	orrs	r0, r1
  40a582:	ea4f 481e 	mov.w	r8, lr, lsr #16
  40a586:	0c07      	lsrs	r7, r0, #16
  40a588:	fa1f fa8e 	uxth.w	sl, lr
  40a58c:	fbbc f9f8 	udiv	r9, ip, r8
  40a590:	fb08 cc19 	mls	ip, r8, r9, ip
  40a594:	fb0a f109 	mul.w	r1, sl, r9
  40a598:	ea47 4c0c 	orr.w	ip, r7, ip, lsl #16
  40a59c:	4561      	cmp	r1, ip
  40a59e:	d907      	bls.n	40a5b0 <__divdi3+0x214>
  40a5a0:	eb1c 0c0e 	adds.w	ip, ip, lr
  40a5a4:	d232      	bcs.n	40a60c <__divdi3+0x270>
  40a5a6:	4561      	cmp	r1, ip
  40a5a8:	d930      	bls.n	40a60c <__divdi3+0x270>
  40a5aa:	f1a9 0902 	sub.w	r9, r9, #2
  40a5ae:	44f4      	add	ip, lr
  40a5b0:	ebc1 0c0c 	rsb	ip, r1, ip
  40a5b4:	b280      	uxth	r0, r0
  40a5b6:	fbbc f3f8 	udiv	r3, ip, r8
  40a5ba:	fb08 cc13 	mls	ip, r8, r3, ip
  40a5be:	fb0a fa03 	mul.w	sl, sl, r3
  40a5c2:	ea40 410c 	orr.w	r1, r0, ip, lsl #16
  40a5c6:	458a      	cmp	sl, r1
  40a5c8:	d906      	bls.n	40a5d8 <__divdi3+0x23c>
  40a5ca:	eb11 010e 	adds.w	r1, r1, lr
  40a5ce:	d225      	bcs.n	40a61c <__divdi3+0x280>
  40a5d0:	458a      	cmp	sl, r1
  40a5d2:	d923      	bls.n	40a61c <__divdi3+0x280>
  40a5d4:	3b02      	subs	r3, #2
  40a5d6:	4471      	add	r1, lr
  40a5d8:	ea43 4309 	orr.w	r3, r3, r9, lsl #16
  40a5dc:	ebca 0101 	rsb	r1, sl, r1
  40a5e0:	fba3 8905 	umull	r8, r9, r3, r5
  40a5e4:	4549      	cmp	r1, r9
  40a5e6:	d303      	bcc.n	40a5f0 <__divdi3+0x254>
  40a5e8:	d103      	bne.n	40a5f2 <__divdi3+0x256>
  40a5ea:	4094      	lsls	r4, r2
  40a5ec:	4544      	cmp	r4, r8
  40a5ee:	d200      	bcs.n	40a5f2 <__divdi3+0x256>
  40a5f0:	3b01      	subs	r3, #1
  40a5f2:	2200      	movs	r2, #0
  40a5f4:	e720      	b.n	40a438 <__divdi3+0x9c>
  40a5f6:	3b01      	subs	r3, #1
  40a5f8:	e716      	b.n	40a428 <__divdi3+0x8c>
  40a5fa:	3901      	subs	r1, #1
  40a5fc:	e701      	b.n	40a402 <__divdi3+0x66>
  40a5fe:	2301      	movs	r3, #1
  40a600:	e71a      	b.n	40a438 <__divdi3+0x9c>
  40a602:	3b01      	subs	r3, #1
  40a604:	e768      	b.n	40a4d8 <__divdi3+0x13c>
  40a606:	f108 38ff 	add.w	r8, r8, #4294967295
  40a60a:	e752      	b.n	40a4b2 <__divdi3+0x116>
  40a60c:	f109 39ff 	add.w	r9, r9, #4294967295
  40a610:	e7ce      	b.n	40a5b0 <__divdi3+0x214>
  40a612:	3a01      	subs	r2, #1
  40a614:	e78f      	b.n	40a536 <__divdi3+0x19a>
  40a616:	f108 38ff 	add.w	r8, r8, #4294967295
  40a61a:	e79f      	b.n	40a55c <__divdi3+0x1c0>
  40a61c:	3b01      	subs	r3, #1
  40a61e:	e7db      	b.n	40a5d8 <__divdi3+0x23c>

0040a620 <__udivdi3>:
  40a620:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  40a624:	2b00      	cmp	r3, #0
  40a626:	d140      	bne.n	40a6aa <__udivdi3+0x8a>
  40a628:	428a      	cmp	r2, r1
  40a62a:	4604      	mov	r4, r0
  40a62c:	4615      	mov	r5, r2
  40a62e:	d94a      	bls.n	40a6c6 <__udivdi3+0xa6>
  40a630:	fab2 f382 	clz	r3, r2
  40a634:	460f      	mov	r7, r1
  40a636:	b14b      	cbz	r3, 40a64c <__udivdi3+0x2c>
  40a638:	f1c3 0620 	rsb	r6, r3, #32
  40a63c:	4099      	lsls	r1, r3
  40a63e:	fa00 f403 	lsl.w	r4, r0, r3
  40a642:	fa02 f503 	lsl.w	r5, r2, r3
  40a646:	40f0      	lsrs	r0, r6
  40a648:	ea40 0701 	orr.w	r7, r0, r1
  40a64c:	0c29      	lsrs	r1, r5, #16
  40a64e:	0c26      	lsrs	r6, r4, #16
  40a650:	fa1f fe85 	uxth.w	lr, r5
  40a654:	fbb7 f0f1 	udiv	r0, r7, r1
  40a658:	fb01 7710 	mls	r7, r1, r0, r7
  40a65c:	fb0e f200 	mul.w	r2, lr, r0
  40a660:	ea46 4307 	orr.w	r3, r6, r7, lsl #16
  40a664:	429a      	cmp	r2, r3
  40a666:	d907      	bls.n	40a678 <__udivdi3+0x58>
  40a668:	195b      	adds	r3, r3, r5
  40a66a:	f080 80ea 	bcs.w	40a842 <__udivdi3+0x222>
  40a66e:	429a      	cmp	r2, r3
  40a670:	f240 80e7 	bls.w	40a842 <__udivdi3+0x222>
  40a674:	3802      	subs	r0, #2
  40a676:	442b      	add	r3, r5
  40a678:	1a9a      	subs	r2, r3, r2
  40a67a:	b2a4      	uxth	r4, r4
  40a67c:	fbb2 f3f1 	udiv	r3, r2, r1
  40a680:	fb01 2213 	mls	r2, r1, r3, r2
  40a684:	fb0e fe03 	mul.w	lr, lr, r3
  40a688:	ea44 4202 	orr.w	r2, r4, r2, lsl #16
  40a68c:	4596      	cmp	lr, r2
  40a68e:	d906      	bls.n	40a69e <__udivdi3+0x7e>
  40a690:	1952      	adds	r2, r2, r5
  40a692:	f080 80da 	bcs.w	40a84a <__udivdi3+0x22a>
  40a696:	4596      	cmp	lr, r2
  40a698:	f240 80d7 	bls.w	40a84a <__udivdi3+0x22a>
  40a69c:	3b02      	subs	r3, #2
  40a69e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
  40a6a2:	2600      	movs	r6, #0
  40a6a4:	4631      	mov	r1, r6
  40a6a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40a6aa:	428b      	cmp	r3, r1
  40a6ac:	d844      	bhi.n	40a738 <__udivdi3+0x118>
  40a6ae:	fab3 f683 	clz	r6, r3
  40a6b2:	2e00      	cmp	r6, #0
  40a6b4:	d145      	bne.n	40a742 <__udivdi3+0x122>
  40a6b6:	4282      	cmp	r2, r0
  40a6b8:	f240 80bf 	bls.w	40a83a <__udivdi3+0x21a>
  40a6bc:	428b      	cmp	r3, r1
  40a6be:	f0c0 80bc 	bcc.w	40a83a <__udivdi3+0x21a>
  40a6c2:	4630      	mov	r0, r6
  40a6c4:	e7ee      	b.n	40a6a4 <__udivdi3+0x84>
  40a6c6:	b912      	cbnz	r2, 40a6ce <__udivdi3+0xae>
  40a6c8:	2501      	movs	r5, #1
  40a6ca:	fbb5 f5f2 	udiv	r5, r5, r2
  40a6ce:	fab5 f285 	clz	r2, r5
  40a6d2:	2a00      	cmp	r2, #0
  40a6d4:	d17b      	bne.n	40a7ce <__udivdi3+0x1ae>
  40a6d6:	1b4a      	subs	r2, r1, r5
  40a6d8:	0c2f      	lsrs	r7, r5, #16
  40a6da:	fa1f fe85 	uxth.w	lr, r5
  40a6de:	2601      	movs	r6, #1
  40a6e0:	0c23      	lsrs	r3, r4, #16
  40a6e2:	fbb2 f0f7 	udiv	r0, r2, r7
  40a6e6:	fb07 2210 	mls	r2, r7, r0, r2
  40a6ea:	fb0e fc00 	mul.w	ip, lr, r0
  40a6ee:	ea43 4102 	orr.w	r1, r3, r2, lsl #16
  40a6f2:	458c      	cmp	ip, r1
  40a6f4:	d907      	bls.n	40a706 <__udivdi3+0xe6>
  40a6f6:	1949      	adds	r1, r1, r5
  40a6f8:	f080 80a1 	bcs.w	40a83e <__udivdi3+0x21e>
  40a6fc:	458c      	cmp	ip, r1
  40a6fe:	f240 809e 	bls.w	40a83e <__udivdi3+0x21e>
  40a702:	3802      	subs	r0, #2
  40a704:	4429      	add	r1, r5
  40a706:	ebcc 0101 	rsb	r1, ip, r1
  40a70a:	b2a4      	uxth	r4, r4
  40a70c:	fbb1 f3f7 	udiv	r3, r1, r7
  40a710:	fb07 1113 	mls	r1, r7, r3, r1
  40a714:	fb0e fe03 	mul.w	lr, lr, r3
  40a718:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
  40a71c:	45a6      	cmp	lr, r4
  40a71e:	d906      	bls.n	40a72e <__udivdi3+0x10e>
  40a720:	1964      	adds	r4, r4, r5
  40a722:	f080 8090 	bcs.w	40a846 <__udivdi3+0x226>
  40a726:	45a6      	cmp	lr, r4
  40a728:	f240 808d 	bls.w	40a846 <__udivdi3+0x226>
  40a72c:	3b02      	subs	r3, #2
  40a72e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
  40a732:	4631      	mov	r1, r6
  40a734:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40a738:	2600      	movs	r6, #0
  40a73a:	4630      	mov	r0, r6
  40a73c:	4631      	mov	r1, r6
  40a73e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40a742:	f1c6 0520 	rsb	r5, r6, #32
  40a746:	40b3      	lsls	r3, r6
  40a748:	fa02 f706 	lsl.w	r7, r2, r6
  40a74c:	fa01 f406 	lsl.w	r4, r1, r6
  40a750:	40ea      	lsrs	r2, r5
  40a752:	40e9      	lsrs	r1, r5
  40a754:	fa20 f505 	lsr.w	r5, r0, r5
  40a758:	431a      	orrs	r2, r3
  40a75a:	4325      	orrs	r5, r4
  40a75c:	ea4f 4c12 	mov.w	ip, r2, lsr #16
  40a760:	ea4f 4e15 	mov.w	lr, r5, lsr #16
  40a764:	b293      	uxth	r3, r2
  40a766:	fbb1 f8fc 	udiv	r8, r1, ip
  40a76a:	fb0c 1118 	mls	r1, ip, r8, r1
  40a76e:	fb03 f408 	mul.w	r4, r3, r8
  40a772:	ea4e 4101 	orr.w	r1, lr, r1, lsl #16
  40a776:	428c      	cmp	r4, r1
  40a778:	d906      	bls.n	40a788 <__udivdi3+0x168>
  40a77a:	1889      	adds	r1, r1, r2
  40a77c:	d269      	bcs.n	40a852 <__udivdi3+0x232>
  40a77e:	428c      	cmp	r4, r1
  40a780:	d967      	bls.n	40a852 <__udivdi3+0x232>
  40a782:	f1a8 0802 	sub.w	r8, r8, #2
  40a786:	4411      	add	r1, r2
  40a788:	1b09      	subs	r1, r1, r4
  40a78a:	b2ad      	uxth	r5, r5
  40a78c:	fbb1 f4fc 	udiv	r4, r1, ip
  40a790:	fb0c 1114 	mls	r1, ip, r4, r1
  40a794:	fb03 fe04 	mul.w	lr, r3, r4
  40a798:	ea45 4301 	orr.w	r3, r5, r1, lsl #16
  40a79c:	459e      	cmp	lr, r3
  40a79e:	d905      	bls.n	40a7ac <__udivdi3+0x18c>
  40a7a0:	189b      	adds	r3, r3, r2
  40a7a2:	d254      	bcs.n	40a84e <__udivdi3+0x22e>
  40a7a4:	459e      	cmp	lr, r3
  40a7a6:	d952      	bls.n	40a84e <__udivdi3+0x22e>
  40a7a8:	3c02      	subs	r4, #2
  40a7aa:	4413      	add	r3, r2
  40a7ac:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
  40a7b0:	ebce 0303 	rsb	r3, lr, r3
  40a7b4:	fba4 8907 	umull	r8, r9, r4, r7
  40a7b8:	454b      	cmp	r3, r9
  40a7ba:	d303      	bcc.n	40a7c4 <__udivdi3+0x1a4>
  40a7bc:	d151      	bne.n	40a862 <__udivdi3+0x242>
  40a7be:	40b0      	lsls	r0, r6
  40a7c0:	4540      	cmp	r0, r8
  40a7c2:	d24e      	bcs.n	40a862 <__udivdi3+0x242>
  40a7c4:	2600      	movs	r6, #0
  40a7c6:	1e60      	subs	r0, r4, #1
  40a7c8:	4631      	mov	r1, r6
  40a7ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40a7ce:	f1c2 0620 	rsb	r6, r2, #32
  40a7d2:	4095      	lsls	r5, r2
  40a7d4:	fa01 f302 	lsl.w	r3, r1, r2
  40a7d8:	fa00 f402 	lsl.w	r4, r0, r2
  40a7dc:	0c2f      	lsrs	r7, r5, #16
  40a7de:	40f1      	lsrs	r1, r6
  40a7e0:	40f0      	lsrs	r0, r6
  40a7e2:	fa1f fe85 	uxth.w	lr, r5
  40a7e6:	fbb1 f6f7 	udiv	r6, r1, r7
  40a7ea:	4318      	orrs	r0, r3
  40a7ec:	fb07 1116 	mls	r1, r7, r6, r1
  40a7f0:	fb0e f206 	mul.w	r2, lr, r6
  40a7f4:	ea4f 4c10 	mov.w	ip, r0, lsr #16
  40a7f8:	ea4c 4301 	orr.w	r3, ip, r1, lsl #16
  40a7fc:	429a      	cmp	r2, r3
  40a7fe:	d905      	bls.n	40a80c <__udivdi3+0x1ec>
  40a800:	195b      	adds	r3, r3, r5
  40a802:	d229      	bcs.n	40a858 <__udivdi3+0x238>
  40a804:	429a      	cmp	r2, r3
  40a806:	d927      	bls.n	40a858 <__udivdi3+0x238>
  40a808:	3e02      	subs	r6, #2
  40a80a:	442b      	add	r3, r5
  40a80c:	1a9b      	subs	r3, r3, r2
  40a80e:	b280      	uxth	r0, r0
  40a810:	fbb3 fcf7 	udiv	ip, r3, r7
  40a814:	fb07 331c 	mls	r3, r7, ip, r3
  40a818:	fb0e f10c 	mul.w	r1, lr, ip
  40a81c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
  40a820:	4299      	cmp	r1, r3
  40a822:	d906      	bls.n	40a832 <__udivdi3+0x212>
  40a824:	195b      	adds	r3, r3, r5
  40a826:	d219      	bcs.n	40a85c <__udivdi3+0x23c>
  40a828:	4299      	cmp	r1, r3
  40a82a:	d917      	bls.n	40a85c <__udivdi3+0x23c>
  40a82c:	f1ac 0c02 	sub.w	ip, ip, #2
  40a830:	442b      	add	r3, r5
  40a832:	1a5a      	subs	r2, r3, r1
  40a834:	ea4c 4606 	orr.w	r6, ip, r6, lsl #16
  40a838:	e752      	b.n	40a6e0 <__udivdi3+0xc0>
  40a83a:	2001      	movs	r0, #1
  40a83c:	e732      	b.n	40a6a4 <__udivdi3+0x84>
  40a83e:	3801      	subs	r0, #1
  40a840:	e761      	b.n	40a706 <__udivdi3+0xe6>
  40a842:	3801      	subs	r0, #1
  40a844:	e718      	b.n	40a678 <__udivdi3+0x58>
  40a846:	3b01      	subs	r3, #1
  40a848:	e771      	b.n	40a72e <__udivdi3+0x10e>
  40a84a:	3b01      	subs	r3, #1
  40a84c:	e727      	b.n	40a69e <__udivdi3+0x7e>
  40a84e:	3c01      	subs	r4, #1
  40a850:	e7ac      	b.n	40a7ac <__udivdi3+0x18c>
  40a852:	f108 38ff 	add.w	r8, r8, #4294967295
  40a856:	e797      	b.n	40a788 <__udivdi3+0x168>
  40a858:	3e01      	subs	r6, #1
  40a85a:	e7d7      	b.n	40a80c <__udivdi3+0x1ec>
  40a85c:	f10c 3cff 	add.w	ip, ip, #4294967295
  40a860:	e7e7      	b.n	40a832 <__udivdi3+0x212>
  40a862:	4620      	mov	r0, r4
  40a864:	2600      	movs	r6, #0
  40a866:	e71d      	b.n	40a6a4 <__udivdi3+0x84>
  40a868:	00000001 	.word	0x00000001
  40a86c:	00000002 	.word	0x00000002
  40a870:	00000004 	.word	0x00000004
  40a874:	00000008 	.word	0x00000008
  40a878:	00000010 	.word	0x00000010
  40a87c:	00000020 	.word	0x00000020
  40a880:	00000040 	.word	0x00000040
  40a884:	00000080 	.word	0x00000080
  40a888:	00000100 	.word	0x00000100
  40a88c:	00000200 	.word	0x00000200
  40a890:	00000400 	.word	0x00000400
  40a894:	39414350 	.word	0x39414350
  40a898:	3a323539 	.word	0x3a323539
  40a89c:	706d7420 	.word	0x706d7420
  40a8a0:	25203a31 	.word	0x25203a31
  40a8a4:	6d742078 	.word	0x6d742078
  40a8a8:	203a3270 	.word	0x203a3270
  40a8ac:	74207825 	.word	0x74207825
  40a8b0:	3a33706d 	.word	0x3a33706d
  40a8b4:	20782520 	.word	0x20782520
  40a8b8:	34706d74 	.word	0x34706d74
  40a8bc:	7825203a 	.word	0x7825203a
  40a8c0:	00000a0d 	.word	0x00000a0d
  40a8c4:	0001c200 	.word	0x0001c200
  40a8c8:	000000c0 	.word	0x000000c0
  40a8cc:	00000800 	.word	0x00000800
	...
  40a8dc:	202d462d 	.word	0x202d462d
  40a8e0:	74737953 	.word	0x74737953
  40a8e4:	206b6369 	.word	0x206b6369
  40a8e8:	666e6f63 	.word	0x666e6f63
  40a8ec:	72756769 	.word	0x72756769
  40a8f0:	6f697461 	.word	0x6f697461
  40a8f4:	7265206e 	.word	0x7265206e
  40a8f8:	0d726f72 	.word	0x0d726f72
  40a8fc:	00000000 	.word	0x00000000
  40a900:	00000960 	.word	0x00000960
  40a904:	000000c0 	.word	0x000000c0
  40a908:	00000800 	.word	0x00000800
  40a90c:	00000000 	.word	0x00000000
  40a910:	00006325 	.word	0x00006325
  40a914:	61766e49 	.word	0x61766e49
  40a918:	2064696c 	.word	0x2064696c
  40a91c:	69726573 	.word	0x69726573
  40a920:	49206c61 	.word	0x49206c61
  40a924:	68632044 	.word	0x68632044
  40a928:	736b6365 	.word	0x736b6365
  40a92c:	0d2e6d75 	.word	0x0d2e6d75
  40a930:	0000000a 	.word	0x0000000a
  40a934:	2044454c 	.word	0x2044454c
  40a938:	72616f62 	.word	0x72616f62
  40a93c:	64252064 	.word	0x64252064
  40a940:	72657320 	.word	0x72657320
  40a944:	206c6169 	.word	0x206c6169
  40a948:	203a4449 	.word	0x203a4449
  40a94c:	78257825 	.word	0x78257825
  40a950:	78257825 	.word	0x78257825
  40a954:	78257825 	.word	0x78257825
  40a958:	00000a0d 	.word	0x00000a0d
  40a95c:	62206f6e 	.word	0x62206f6e
  40a960:	6472616f 	.word	0x6472616f
  40a964:	69687420 	.word	0x69687420
  40a968:	6c732073 	.word	0x6c732073
  40a96c:	0a0d746f 	.word	0x0a0d746f
  40a970:	00000000 	.word	0x00000000
  40a974:	726f6f64 	.word	0x726f6f64
  40a978:	3a317773 	.word	0x3a317773
  40a97c:	20642520 	.word	0x20642520
  40a980:	726f6f64 	.word	0x726f6f64
  40a984:	3a327773 	.word	0x3a327773
  40a988:	0d642520 	.word	0x0d642520
  40a98c:	0000000a 	.word	0x0000000a
  40a990:	33574f52 	.word	0x33574f52
  40a994:	203a3132 	.word	0x203a3132
  40a998:	64256425 	.word	0x64256425
  40a99c:	43206425 	.word	0x43206425
  40a9a0:	32334c4f 	.word	0x32334c4f
  40a9a4:	64252031 	.word	0x64252031
  40a9a8:	64256425 	.word	0x64256425
  40a9ac:	00000020 	.word	0x00000020
  40a9b0:	7079654b 	.word	0x7079654b
  40a9b4:	53206461 	.word	0x53206461
  40a9b8:	00003157 	.word	0x00003157
  40a9bc:	7079654b 	.word	0x7079654b
  40a9c0:	53206461 	.word	0x53206461
  40a9c4:	00003257 	.word	0x00003257
  40a9c8:	7079654b 	.word	0x7079654b
  40a9cc:	53206461 	.word	0x53206461
  40a9d0:	00003357 	.word	0x00003357
  40a9d4:	7079654b 	.word	0x7079654b
  40a9d8:	53206461 	.word	0x53206461
  40a9dc:	00003457 	.word	0x00003457
  40a9e0:	7079654b 	.word	0x7079654b
  40a9e4:	53206461 	.word	0x53206461
  40a9e8:	00003557 	.word	0x00003557
  40a9ec:	7079654b 	.word	0x7079654b
  40a9f0:	53206461 	.word	0x53206461
  40a9f4:	00003657 	.word	0x00003657
  40a9f8:	00000a0d 	.word	0x00000a0d
  40a9fc:	50555350 	.word	0x50555350
  40aa00:	5f594c50 	.word	0x5f594c50
  40aa04:	3a6e4e4f 	.word	0x3a6e4e4f
  40aa08:	0d642520 	.word	0x0d642520
  40aa0c:	0000000a 	.word	0x0000000a
  40aa10:	4f44454c 	.word	0x4f44454c
  40aa14:	203a6e45 	.word	0x203a6e45
  40aa18:	0a0d6425 	.word	0x0a0d6425
  40aa1c:	00000000 	.word	0x00000000
  40aa20:	3a50464d 	.word	0x3a50464d
  40aa24:	0d642520 	.word	0x0d642520
  40aa28:	0000000a 	.word	0x0000000a
  40aa2c:	7a7a7542 	.word	0x7a7a7542
  40aa30:	203a7265 	.word	0x203a7265
  40aa34:	0a0d6425 	.word	0x0a0d6425
  40aa38:	00000000 	.word	0x00000000
  40aa3c:	656c6f53 	.word	0x656c6f53
  40aa40:	64696f6e 	.word	0x64696f6e
  40aa44:	6425203a 	.word	0x6425203a
  40aa48:	00000a0d 	.word	0x00000a0d
  40aa4c:	504c4548 	.word	0x504c4548
  40aa50:	4e454d20 	.word	0x4e454d20
  40aa54:	000a0d55 	.word	0x000a0d55
  40aa58:	202d2050 	.word	0x202d2050
  40aa5c:	67676f54 	.word	0x67676f54
  40aa60:	5020656c 	.word	0x5020656c
  40aa64:	50505553 	.word	0x50505553
  40aa68:	4f5f594c 	.word	0x4f5f594c
  40aa6c:	0a0d6e4e 	.word	0x0a0d6e4e
  40aa70:	00000000 	.word	0x00000000
  40aa74:	202d204c 	.word	0x202d204c
  40aa78:	67676f54 	.word	0x67676f54
  40aa7c:	4c20656c 	.word	0x4c20656c
  40aa80:	454f4445 	.word	0x454f4445
  40aa84:	000a0d6e 	.word	0x000a0d6e
  40aa88:	202d204d 	.word	0x202d204d
  40aa8c:	67676f54 	.word	0x67676f54
  40aa90:	4d20656c 	.word	0x4d20656c
  40aa94:	0a0d5046 	.word	0x0a0d5046
  40aa98:	00000000 	.word	0x00000000
  40aa9c:	202d2042 	.word	0x202d2042
  40aaa0:	67676f54 	.word	0x67676f54
  40aaa4:	6220656c 	.word	0x6220656c
  40aaa8:	657a7a75 	.word	0x657a7a75
  40aaac:	000a0d72 	.word	0x000a0d72
  40aab0:	202d2053 	.word	0x202d2053
  40aab4:	67676f54 	.word	0x67676f54
  40aab8:	7320656c 	.word	0x7320656c
  40aabc:	6e656c6f 	.word	0x6e656c6f
  40aac0:	0d64696f 	.word	0x0d64696f
  40aac4:	0000000a 	.word	0x0000000a
  40aac8:	202d2048 	.word	0x202d2048
  40aacc:	73696854 	.word	0x73696854
  40aad0:	6e656d20 	.word	0x6e656d20
  40aad4:	000a0d75 	.word	0x000a0d75
  40aad8:	64616552 	.word	0x64616552
  40aadc:	000a0d79 	.word	0x000a0d79
  40aae0:	61656c43 	.word	0x61656c43
  40aae4:	000a0d6e 	.word	0x000a0d6e
  40aae8:	74726944 	.word	0x74726944
  40aaec:	000a0d79 	.word	0x000a0d79
  40aaf0:	6f727245 	.word	0x6f727245
  40aaf4:	000a0d72 	.word	0x000a0d72
  40aaf8:	6c656853 	.word	0x6c656853
  40aafc:	0a0d3166 	.word	0x0a0d3166
  40ab00:	00000000 	.word	0x00000000
  40ab04:	6c656853 	.word	0x6c656853
  40ab08:	0a0d3266 	.word	0x0a0d3266
  40ab0c:	00000000 	.word	0x00000000
  40ab10:	6c656853 	.word	0x6c656853
  40ab14:	0a0d3366 	.word	0x0a0d3366
  40ab18:	00000000 	.word	0x00000000
  40ab1c:	6c656853 	.word	0x6c656853
  40ab20:	0a0d3466 	.word	0x0a0d3466
  40ab24:	00000000 	.word	0x00000000
  40ab28:	3a306863 	.word	0x3a306863
  40ab2c:	20782520 	.word	0x20782520
  40ab30:	3a316863 	.word	0x3a316863
  40ab34:	20782520 	.word	0x20782520
  40ab38:	3a326863 	.word	0x3a326863
  40ab3c:	20782520 	.word	0x20782520
  40ab40:	3a336863 	.word	0x3a336863
  40ab44:	0d782520 	.word	0x0d782520
  40ab48:	0000000a 	.word	0x0000000a
  40ab4c:	61656c43 	.word	0x61656c43
  40ab50:	676e696e 	.word	0x676e696e
  40ab54:	00000a0d 	.word	0x00000a0d
  40ab58:	00000043 	.word	0x00000043

0040ab5c <_global_impure_ptr>:
  40ab5c:	20400090 0000000a                       ..@ ....

0040ab64 <zeroes.6911>:
  40ab64:	30303030 30303030 30303030 30303030     0000000000000000

0040ab74 <blanks.6910>:
  40ab74:	20202020 20202020 20202020 20202020                     
  40ab84:	00464e49 00666e69 004e414e 006e616e     INF.inf.NAN.nan.
  40ab94:	33323130 37363534 42413938 46454443     0123456789ABCDEF
  40aba4:	00000000 33323130 37363534 62613938     ....0123456789ab
  40abb4:	66656463 00000000 6c756e28 0000296c     cdef....(null)..
  40abc4:	00000030 69666e49 7974696e 00000000     0...Infinity....
  40abd4:	004e614e 49534f50 00000058 0000002e     NaN.POSIX.......
  40abe4:	00000000                                ....

0040abe8 <__mprec_tens>:
  40abe8:	00000000 3ff00000 00000000 40240000     .......?......$@
  40abf8:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
  40ac08:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
  40ac18:	00000000 412e8480 00000000 416312d0     .......A......cA
  40ac28:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
  40ac38:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
  40ac48:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
  40ac58:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
  40ac68:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
  40ac78:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
  40ac88:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
  40ac98:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
  40aca8:	79d99db4 44ea7843                       ...yCx.D

0040acb0 <p05.5302>:
  40acb0:	00000005 00000019 0000007d 00000000     ........}.......

0040acc0 <__mprec_bigtens>:
  40acc0:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
  40acd0:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
  40ace0:	7f73bf3c 75154fdd                       <.s..O.u

0040ace8 <_init>:
  40ace8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40acea:	bf00      	nop
  40acec:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40acee:	bc08      	pop	{r3}
  40acf0:	469e      	mov	lr, r3
  40acf2:	4770      	bx	lr

0040acf4 <__init_array_start>:
  40acf4:	004069ed 	.word	0x004069ed

0040acf8 <__frame_dummy_init_array_entry>:
  40acf8:	00400165                                e.@.

0040acfc <_fini>:
  40acfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40acfe:	bf00      	nop
  40ad00:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40ad02:	bc08      	pop	{r3}
  40ad04:	469e      	mov	lr, r3
  40ad06:	4770      	bx	lr

0040ad08 <__fini_array_start>:
  40ad08:	00400141 	.word	0x00400141
