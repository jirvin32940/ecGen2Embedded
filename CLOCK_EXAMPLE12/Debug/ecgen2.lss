
ecgen2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00009614  00400000  00400000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00409614  00409614  00011614  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000008fc  20400000  0040961c  00018000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000998  204008fc  00409f18  000188fc  2**2
                  ALLOC
  4 .stack        00002004  20401294  0040a8b0  000188fc  2**0
                  ALLOC
  5 .heap         00000200  20403298  0040c8b4  000188fc  2**0
                  ALLOC
  6 .ARM.attributes 00000033  00000000  00000000  000188fc  2**0
                  CONTENTS, READONLY
  7 .comment      0000005b  00000000  00000000  0001892f  2**0
                  CONTENTS, READONLY
  8 .debug_info   0000fb57  00000000  00000000  0001898a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000022d9  00000000  00000000  000284e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00009188  00000000  00000000  0002a7ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000f88  00000000  00000000  00033942  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000e50  00000000  00000000  000348ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0001f6df  00000000  00000000  0003571a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000dfcb  00000000  00000000  00054df9  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0008c4ad  00000000  00000000  00062dc4  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00005174  00000000  00000000  000ef274  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <_sfixed>:
  400000:	20403298 	.word	0x20403298
  400004:	00401d11 	.word	0x00401d11
  400008:	00401d95 	.word	0x00401d95
  40000c:	00401d95 	.word	0x00401d95
  400010:	00401d95 	.word	0x00401d95
  400014:	00401d95 	.word	0x00401d95
  400018:	00401d95 	.word	0x00401d95
	...
  40002c:	00401d95 	.word	0x00401d95
  400030:	00401d95 	.word	0x00401d95
  400034:	00000000 	.word	0x00000000
  400038:	00401d95 	.word	0x00401d95
  40003c:	00403175 	.word	0x00403175
  400040:	00401d95 	.word	0x00401d95
  400044:	00401d95 	.word	0x00401d95
  400048:	00401d95 	.word	0x00401d95
  40004c:	00401d95 	.word	0x00401d95
  400050:	00401d95 	.word	0x00401d95
  400054:	00401d95 	.word	0x00401d95
  400058:	00401d95 	.word	0x00401d95
  40005c:	00401d95 	.word	0x00401d95
  400060:	00401d95 	.word	0x00401d95
  400064:	00000000 	.word	0x00000000
  400068:	00401235 	.word	0x00401235
  40006c:	0040124d 	.word	0x0040124d
  400070:	00401265 	.word	0x00401265
  400074:	0040319d 	.word	0x0040319d
  400078:	00401d95 	.word	0x00401d95
  40007c:	00401d95 	.word	0x00401d95
  400080:	0040127d 	.word	0x0040127d
  400084:	00401295 	.word	0x00401295
  400088:	00401d95 	.word	0x00401d95
  40008c:	00401d95 	.word	0x00401d95
  400090:	00401d95 	.word	0x00401d95
  400094:	00401d95 	.word	0x00401d95
  400098:	00401d95 	.word	0x00401d95
  40009c:	00401d95 	.word	0x00401d95
  4000a0:	00401d95 	.word	0x00401d95
  4000a4:	00401d95 	.word	0x00401d95
  4000a8:	00401d95 	.word	0x00401d95
  4000ac:	00401d95 	.word	0x00401d95
  4000b0:	00401d95 	.word	0x00401d95
  4000b4:	00401101 	.word	0x00401101
  4000b8:	00401d95 	.word	0x00401d95
  4000bc:	00401d95 	.word	0x00401d95
  4000c0:	00401d95 	.word	0x00401d95
  4000c4:	00401d95 	.word	0x00401d95
  4000c8:	00401d95 	.word	0x00401d95
  4000cc:	00401d95 	.word	0x00401d95
  4000d0:	00000000 	.word	0x00000000
  4000d4:	00401d95 	.word	0x00401d95
  4000d8:	00000000 	.word	0x00000000
  4000dc:	00401d95 	.word	0x00401d95
  4000e0:	00401115 	.word	0x00401115
  4000e4:	00401d95 	.word	0x00401d95
  4000e8:	00401d95 	.word	0x00401d95
  4000ec:	00401d95 	.word	0x00401d95
  4000f0:	00401d95 	.word	0x00401d95
  4000f4:	00401d95 	.word	0x00401d95
  4000f8:	00401d95 	.word	0x00401d95
  4000fc:	00401d95 	.word	0x00401d95
  400100:	00401d95 	.word	0x00401d95
  400104:	00401d95 	.word	0x00401d95
  400108:	00401d95 	.word	0x00401d95
  40010c:	00401d95 	.word	0x00401d95
  400110:	00401d95 	.word	0x00401d95
	...
  400120:	00401d95 	.word	0x00401d95
  400124:	00401d95 	.word	0x00401d95
  400128:	00401d95 	.word	0x00401d95
  40012c:	00401d95 	.word	0x00401d95
  400130:	00401d95 	.word	0x00401d95
  400134:	00000000 	.word	0x00000000
  400138:	00401d95 	.word	0x00401d95
  40013c:	00401d95 	.word	0x00401d95

00400140 <__do_global_dtors_aux>:
  400140:	b510      	push	{r4, lr}
  400142:	4c05      	ldr	r4, [pc, #20]	; (400158 <__do_global_dtors_aux+0x18>)
  400144:	7823      	ldrb	r3, [r4, #0]
  400146:	b933      	cbnz	r3, 400156 <__do_global_dtors_aux+0x16>
  400148:	4b04      	ldr	r3, [pc, #16]	; (40015c <__do_global_dtors_aux+0x1c>)
  40014a:	b113      	cbz	r3, 400152 <__do_global_dtors_aux+0x12>
  40014c:	4804      	ldr	r0, [pc, #16]	; (400160 <__do_global_dtors_aux+0x20>)
  40014e:	f3af 8000 	nop.w
  400152:	2301      	movs	r3, #1
  400154:	7023      	strb	r3, [r4, #0]
  400156:	bd10      	pop	{r4, pc}
  400158:	204008fc 	.word	0x204008fc
  40015c:	00000000 	.word	0x00000000
  400160:	0040961c 	.word	0x0040961c

00400164 <frame_dummy>:
  400164:	4b08      	ldr	r3, [pc, #32]	; (400188 <frame_dummy+0x24>)
  400166:	b510      	push	{r4, lr}
  400168:	b11b      	cbz	r3, 400172 <frame_dummy+0xe>
  40016a:	4808      	ldr	r0, [pc, #32]	; (40018c <frame_dummy+0x28>)
  40016c:	4908      	ldr	r1, [pc, #32]	; (400190 <frame_dummy+0x2c>)
  40016e:	f3af 8000 	nop.w
  400172:	4808      	ldr	r0, [pc, #32]	; (400194 <frame_dummy+0x30>)
  400174:	6803      	ldr	r3, [r0, #0]
  400176:	b903      	cbnz	r3, 40017a <frame_dummy+0x16>
  400178:	bd10      	pop	{r4, pc}
  40017a:	4b07      	ldr	r3, [pc, #28]	; (400198 <frame_dummy+0x34>)
  40017c:	2b00      	cmp	r3, #0
  40017e:	d0fb      	beq.n	400178 <frame_dummy+0x14>
  400180:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400184:	4718      	bx	r3
  400186:	bf00      	nop
  400188:	00000000 	.word	0x00000000
  40018c:	0040961c 	.word	0x0040961c
  400190:	20400900 	.word	0x20400900
  400194:	0040961c 	.word	0x0040961c
  400198:	00000000 	.word	0x00000000

0040019c <osc_enable>:
#define OSC_MAINCK_XTAL_HZ      BOARD_FREQ_MAINCK_XTAL    //!< External crystal oscillator.
#define OSC_MAINCK_BYPASS_HZ    BOARD_FREQ_MAINCK_BYPASS  //!< External bypass oscillator.
//@}

static inline void osc_enable(uint32_t ul_id)
{
  40019c:	b580      	push	{r7, lr}
  40019e:	b082      	sub	sp, #8
  4001a0:	af00      	add	r7, sp, #0
  4001a2:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  4001a4:	687b      	ldr	r3, [r7, #4]
  4001a6:	2b07      	cmp	r3, #7
  4001a8:	d830      	bhi.n	40020c <osc_enable+0x70>
  4001aa:	a201      	add	r2, pc, #4	; (adr r2, 4001b0 <osc_enable+0x14>)
  4001ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4001b0:	0040020d 	.word	0x0040020d
  4001b4:	004001d1 	.word	0x004001d1
  4001b8:	004001d9 	.word	0x004001d9
  4001bc:	004001e1 	.word	0x004001e1
  4001c0:	004001e9 	.word	0x004001e9
  4001c4:	004001f1 	.word	0x004001f1
  4001c8:	004001f9 	.word	0x004001f9
  4001cc:	00400203 	.word	0x00400203
	case OSC_SLCK_32K_RC:
		break;

	case OSC_SLCK_32K_XTAL:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
  4001d0:	2000      	movs	r0, #0
  4001d2:	4b10      	ldr	r3, [pc, #64]	; (400214 <osc_enable+0x78>)
  4001d4:	4798      	blx	r3
		break;
  4001d6:	e019      	b.n	40020c <osc_enable+0x70>

	case OSC_SLCK_32K_BYPASS:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
  4001d8:	2001      	movs	r0, #1
  4001da:	4b0e      	ldr	r3, [pc, #56]	; (400214 <osc_enable+0x78>)
  4001dc:	4798      	blx	r3
		break;
  4001de:	e015      	b.n	40020c <osc_enable+0x70>


	case OSC_MAINCK_4M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
  4001e0:	2000      	movs	r0, #0
  4001e2:	4b0d      	ldr	r3, [pc, #52]	; (400218 <osc_enable+0x7c>)
  4001e4:	4798      	blx	r3
		break;
  4001e6:	e011      	b.n	40020c <osc_enable+0x70>

	case OSC_MAINCK_8M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
  4001e8:	2010      	movs	r0, #16
  4001ea:	4b0b      	ldr	r3, [pc, #44]	; (400218 <osc_enable+0x7c>)
  4001ec:	4798      	blx	r3
		break;
  4001ee:	e00d      	b.n	40020c <osc_enable+0x70>

	case OSC_MAINCK_12M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
  4001f0:	2020      	movs	r0, #32
  4001f2:	4b09      	ldr	r3, [pc, #36]	; (400218 <osc_enable+0x7c>)
  4001f4:	4798      	blx	r3
		break;
  4001f6:	e009      	b.n	40020c <osc_enable+0x70>


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  4001f8:	2000      	movs	r0, #0
  4001fa:	213e      	movs	r1, #62	; 0x3e
  4001fc:	4b07      	ldr	r3, [pc, #28]	; (40021c <osc_enable+0x80>)
  4001fe:	4798      	blx	r3
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
  400200:	e004      	b.n	40020c <osc_enable+0x70>

	case OSC_MAINCK_BYPASS:
		pmc_switch_mainck_to_xtal(PMC_OSC_BYPASS,
  400202:	2001      	movs	r0, #1
  400204:	213e      	movs	r1, #62	; 0x3e
  400206:	4b05      	ldr	r3, [pc, #20]	; (40021c <osc_enable+0x80>)
  400208:	4798      	blx	r3
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
  40020a:	bf00      	nop
	}
}
  40020c:	3708      	adds	r7, #8
  40020e:	46bd      	mov	sp, r7
  400210:	bd80      	pop	{r7, pc}
  400212:	bf00      	nop
  400214:	004013a9 	.word	0x004013a9
  400218:	00401415 	.word	0x00401415
  40021c:	00401485 	.word	0x00401485

00400220 <osc_is_ready>:
		break;
	}
}

static inline bool osc_is_ready(uint32_t ul_id)
{
  400220:	b580      	push	{r7, lr}
  400222:	b082      	sub	sp, #8
  400224:	af00      	add	r7, sp, #0
  400226:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  400228:	687b      	ldr	r3, [r7, #4]
  40022a:	2b07      	cmp	r3, #7
  40022c:	d826      	bhi.n	40027c <osc_is_ready+0x5c>
  40022e:	a201      	add	r2, pc, #4	; (adr r2, 400234 <osc_is_ready+0x14>)
  400230:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  400234:	00400255 	.word	0x00400255
  400238:	00400259 	.word	0x00400259
  40023c:	00400259 	.word	0x00400259
  400240:	0040026b 	.word	0x0040026b
  400244:	0040026b 	.word	0x0040026b
  400248:	0040026b 	.word	0x0040026b
  40024c:	0040026b 	.word	0x0040026b
  400250:	0040026b 	.word	0x0040026b
	case OSC_SLCK_32K_RC:
		return 1;
  400254:	2301      	movs	r3, #1
  400256:	e012      	b.n	40027e <osc_is_ready+0x5e>

	case OSC_SLCK_32K_XTAL:
	case OSC_SLCK_32K_BYPASS:
		return pmc_osc_is_ready_32kxtal();
  400258:	4b0b      	ldr	r3, [pc, #44]	; (400288 <osc_is_ready+0x68>)
  40025a:	4798      	blx	r3
  40025c:	4603      	mov	r3, r0
  40025e:	2b00      	cmp	r3, #0
  400260:	bf14      	ite	ne
  400262:	2301      	movne	r3, #1
  400264:	2300      	moveq	r3, #0
  400266:	b2db      	uxtb	r3, r3
  400268:	e009      	b.n	40027e <osc_is_ready+0x5e>
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  40026a:	4b08      	ldr	r3, [pc, #32]	; (40028c <osc_is_ready+0x6c>)
  40026c:	4798      	blx	r3
  40026e:	4603      	mov	r3, r0
  400270:	2b00      	cmp	r3, #0
  400272:	bf14      	ite	ne
  400274:	2301      	movne	r3, #1
  400276:	2300      	moveq	r3, #0
  400278:	b2db      	uxtb	r3, r3
  40027a:	e000      	b.n	40027e <osc_is_ready+0x5e>
	}

	return 0;
  40027c:	2300      	movs	r3, #0
}
  40027e:	4618      	mov	r0, r3
  400280:	3708      	adds	r7, #8
  400282:	46bd      	mov	sp, r7
  400284:	bd80      	pop	{r7, pc}
  400286:	bf00      	nop
  400288:	004013e1 	.word	0x004013e1
  40028c:	004014fd 	.word	0x004014fd

00400290 <osc_get_rate>:

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  400290:	b480      	push	{r7}
  400292:	b083      	sub	sp, #12
  400294:	af00      	add	r7, sp, #0
  400296:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  400298:	687b      	ldr	r3, [r7, #4]
  40029a:	2b07      	cmp	r3, #7
  40029c:	d825      	bhi.n	4002ea <osc_get_rate+0x5a>
  40029e:	a201      	add	r2, pc, #4	; (adr r2, 4002a4 <osc_get_rate+0x14>)
  4002a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4002a4:	004002c5 	.word	0x004002c5
  4002a8:	004002cb 	.word	0x004002cb
  4002ac:	004002d1 	.word	0x004002d1
  4002b0:	004002d7 	.word	0x004002d7
  4002b4:	004002db 	.word	0x004002db
  4002b8:	004002df 	.word	0x004002df
  4002bc:	004002e3 	.word	0x004002e3
  4002c0:	004002e7 	.word	0x004002e7
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  4002c4:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  4002c8:	e010      	b.n	4002ec <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  4002ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4002ce:	e00d      	b.n	4002ec <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  4002d0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4002d4:	e00a      	b.n	4002ec <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  4002d6:	4b08      	ldr	r3, [pc, #32]	; (4002f8 <osc_get_rate+0x68>)
  4002d8:	e008      	b.n	4002ec <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  4002da:	4b08      	ldr	r3, [pc, #32]	; (4002fc <osc_get_rate+0x6c>)
  4002dc:	e006      	b.n	4002ec <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  4002de:	4b08      	ldr	r3, [pc, #32]	; (400300 <osc_get_rate+0x70>)
  4002e0:	e004      	b.n	4002ec <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  4002e2:	4b08      	ldr	r3, [pc, #32]	; (400304 <osc_get_rate+0x74>)
  4002e4:	e002      	b.n	4002ec <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  4002e6:	4b06      	ldr	r3, [pc, #24]	; (400300 <osc_get_rate+0x70>)
  4002e8:	e000      	b.n	4002ec <osc_get_rate+0x5c>
	}

	return 0;
  4002ea:	2300      	movs	r3, #0
}
  4002ec:	4618      	mov	r0, r3
  4002ee:	370c      	adds	r7, #12
  4002f0:	46bd      	mov	sp, r7
  4002f2:	f85d 7b04 	ldr.w	r7, [sp], #4
  4002f6:	4770      	bx	lr
  4002f8:	003d0900 	.word	0x003d0900
  4002fc:	007a1200 	.word	0x007a1200
  400300:	00b71b00 	.word	0x00b71b00
  400304:	00f42400 	.word	0x00f42400

00400308 <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
  400308:	b580      	push	{r7, lr}
  40030a:	b082      	sub	sp, #8
  40030c:	af00      	add	r7, sp, #0
  40030e:	4603      	mov	r3, r0
  400310:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
  400312:	bf00      	nop
  400314:	79fb      	ldrb	r3, [r7, #7]
  400316:	4618      	mov	r0, r3
  400318:	4b05      	ldr	r3, [pc, #20]	; (400330 <osc_wait_ready+0x28>)
  40031a:	4798      	blx	r3
  40031c:	4603      	mov	r3, r0
  40031e:	f083 0301 	eor.w	r3, r3, #1
  400322:	b2db      	uxtb	r3, r3
  400324:	2b00      	cmp	r3, #0
  400326:	d1f5      	bne.n	400314 <osc_wait_ready+0xc>
		/* Do nothing */
	}
}
  400328:	3708      	adds	r7, #8
  40032a:	46bd      	mov	sp, r7
  40032c:	bd80      	pop	{r7, pc}
  40032e:	bf00      	nop
  400330:	00400221 	.word	0x00400221

00400334 <pll_config_init>:
 * hardware mul+1 is hidden in this implementation. Use mul as mul effective
 * value.
 */
static inline void pll_config_init(struct pll_config *p_cfg,
		enum pll_source e_src, uint32_t ul_div, uint32_t ul_mul)
{
  400334:	b580      	push	{r7, lr}
  400336:	b086      	sub	sp, #24
  400338:	af00      	add	r7, sp, #0
  40033a:	60f8      	str	r0, [r7, #12]
  40033c:	607a      	str	r2, [r7, #4]
  40033e:	603b      	str	r3, [r7, #0]
  400340:	460b      	mov	r3, r1
  400342:	72fb      	strb	r3, [r7, #11]
	uint32_t vco_hz;

	Assert(e_src < PLL_NR_SOURCES);

	if (ul_div == 0 && ul_mul == 0) { /* Must only be true for UTMI PLL */
  400344:	687b      	ldr	r3, [r7, #4]
  400346:	2b00      	cmp	r3, #0
  400348:	d107      	bne.n	40035a <pll_config_init+0x26>
  40034a:	683b      	ldr	r3, [r7, #0]
  40034c:	2b00      	cmp	r3, #0
  40034e:	d104      	bne.n	40035a <pll_config_init+0x26>
		p_cfg->ctrl = CKGR_UCKR_UPLLCOUNT(PLL_COUNT);
  400350:	68fb      	ldr	r3, [r7, #12]
  400352:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
  400356:	601a      	str	r2, [r3, #0]
  400358:	e019      	b.n	40038e <pll_config_init+0x5a>
	} else { /* PLLA */
	/* Calculate internal VCO frequency */
	vco_hz = osc_get_rate(e_src) / ul_div;
  40035a:	7afb      	ldrb	r3, [r7, #11]
  40035c:	4618      	mov	r0, r3
  40035e:	4b0d      	ldr	r3, [pc, #52]	; (400394 <pll_config_init+0x60>)
  400360:	4798      	blx	r3
  400362:	4602      	mov	r2, r0
  400364:	687b      	ldr	r3, [r7, #4]
  400366:	fbb2 f3f3 	udiv	r3, r2, r3
  40036a:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_INPUT_MIN_HZ);
	Assert(vco_hz <= PLL_INPUT_MAX_HZ);

	vco_hz *= ul_mul;
  40036c:	697b      	ldr	r3, [r7, #20]
  40036e:	683a      	ldr	r2, [r7, #0]
  400370:	fb02 f303 	mul.w	r3, r2, r3
  400374:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_OUTPUT_MIN_HZ);
	Assert(vco_hz <= PLL_OUTPUT_MAX_HZ);

	/* PMC hardware will automatically make it mul+1 */
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) | CKGR_PLLAR_DIVA(ul_div)  \
  400376:	683b      	ldr	r3, [r7, #0]
  400378:	3b01      	subs	r3, #1
  40037a:	041a      	lsls	r2, r3, #16
  40037c:	4b06      	ldr	r3, [pc, #24]	; (400398 <pll_config_init+0x64>)
  40037e:	4013      	ands	r3, r2
  400380:	687a      	ldr	r2, [r7, #4]
  400382:	b2d2      	uxtb	r2, r2
  400384:	4313      	orrs	r3, r2
		| CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
  400386:	f443 527c 	orr.w	r2, r3, #16128	; 0x3f00
	vco_hz *= ul_mul;
	Assert(vco_hz >= PLL_OUTPUT_MIN_HZ);
	Assert(vco_hz <= PLL_OUTPUT_MAX_HZ);

	/* PMC hardware will automatically make it mul+1 */
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) | CKGR_PLLAR_DIVA(ul_div)  \
  40038a:	68fb      	ldr	r3, [r7, #12]
  40038c:	601a      	str	r2, [r3, #0]
		| CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
	}
}
  40038e:	3718      	adds	r7, #24
  400390:	46bd      	mov	sp, r7
  400392:	bd80      	pop	{r7, pc}
  400394:	00400291 	.word	0x00400291
  400398:	07ff0000 	.word	0x07ff0000

0040039c <pll_enable>:
		PMC->CKGR_UCKR = p_cfg->ctrl;
	}
}

static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
  40039c:	b580      	push	{r7, lr}
  40039e:	b082      	sub	sp, #8
  4003a0:	af00      	add	r7, sp, #0
  4003a2:	6078      	str	r0, [r7, #4]
  4003a4:	6039      	str	r1, [r7, #0]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  4003a6:	683b      	ldr	r3, [r7, #0]
  4003a8:	2b00      	cmp	r3, #0
  4003aa:	d108      	bne.n	4003be <pll_enable+0x22>
		pmc_disable_pllack(); // Always stop PLL first!
  4003ac:	4b08      	ldr	r3, [pc, #32]	; (4003d0 <pll_enable+0x34>)
  4003ae:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  4003b0:	4a08      	ldr	r2, [pc, #32]	; (4003d4 <pll_enable+0x38>)
  4003b2:	687b      	ldr	r3, [r7, #4]
  4003b4:	681b      	ldr	r3, [r3, #0]
  4003b6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  4003ba:	6293      	str	r3, [r2, #40]	; 0x28
  4003bc:	e005      	b.n	4003ca <pll_enable+0x2e>
	} else {
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
  4003be:	4a05      	ldr	r2, [pc, #20]	; (4003d4 <pll_enable+0x38>)
  4003c0:	687b      	ldr	r3, [r7, #4]
  4003c2:	681b      	ldr	r3, [r3, #0]
  4003c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  4003c8:	61d3      	str	r3, [r2, #28]
	}
}
  4003ca:	3708      	adds	r7, #8
  4003cc:	46bd      	mov	sp, r7
  4003ce:	bd80      	pop	{r7, pc}
  4003d0:	00401519 	.word	0x00401519
  4003d4:	400e0600 	.word	0x400e0600

004003d8 <pll_is_locked>:
		PMC->CKGR_UCKR &= ~CKGR_UCKR_UPLLEN;
	}
}

static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
  4003d8:	b580      	push	{r7, lr}
  4003da:	b082      	sub	sp, #8
  4003dc:	af00      	add	r7, sp, #0
  4003de:	6078      	str	r0, [r7, #4]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  4003e0:	687b      	ldr	r3, [r7, #4]
  4003e2:	2b00      	cmp	r3, #0
  4003e4:	d103      	bne.n	4003ee <pll_is_locked+0x16>
	return pmc_is_locked_pllack();
  4003e6:	4b05      	ldr	r3, [pc, #20]	; (4003fc <pll_is_locked+0x24>)
  4003e8:	4798      	blx	r3
  4003ea:	4603      	mov	r3, r0
  4003ec:	e002      	b.n	4003f4 <pll_is_locked+0x1c>
	} else {
		return pmc_is_locked_upll();
  4003ee:	4b04      	ldr	r3, [pc, #16]	; (400400 <pll_is_locked+0x28>)
  4003f0:	4798      	blx	r3
  4003f2:	4603      	mov	r3, r0
	}
}
  4003f4:	4618      	mov	r0, r3
  4003f6:	3708      	adds	r7, #8
  4003f8:	46bd      	mov	sp, r7
  4003fa:	bd80      	pop	{r7, pc}
  4003fc:	00401531 	.word	0x00401531
  400400:	0040154d 	.word	0x0040154d

00400404 <pll_enable_source>:

static inline void pll_enable_source(enum pll_source e_src)
{
  400404:	b580      	push	{r7, lr}
  400406:	b082      	sub	sp, #8
  400408:	af00      	add	r7, sp, #0
  40040a:	4603      	mov	r3, r0
  40040c:	71fb      	strb	r3, [r7, #7]
	switch (e_src) {
  40040e:	79fb      	ldrb	r3, [r7, #7]
  400410:	3b03      	subs	r3, #3
  400412:	2b04      	cmp	r3, #4
  400414:	d808      	bhi.n	400428 <pll_enable_source+0x24>
	case PLL_SRC_MAINCK_4M_RC:
	case PLL_SRC_MAINCK_8M_RC:
	case PLL_SRC_MAINCK_12M_RC:
	case PLL_SRC_MAINCK_XTAL:
	case PLL_SRC_MAINCK_BYPASS:
		osc_enable(e_src);
  400416:	79fb      	ldrb	r3, [r7, #7]
  400418:	4618      	mov	r0, r3
  40041a:	4b05      	ldr	r3, [pc, #20]	; (400430 <pll_enable_source+0x2c>)
  40041c:	4798      	blx	r3
		osc_wait_ready(e_src);
  40041e:	79fb      	ldrb	r3, [r7, #7]
  400420:	4618      	mov	r0, r3
  400422:	4b04      	ldr	r3, [pc, #16]	; (400434 <pll_enable_source+0x30>)
  400424:	4798      	blx	r3
		break;
  400426:	e000      	b.n	40042a <pll_enable_source+0x26>

	default:
		Assert(false);
		break;
  400428:	bf00      	nop
	}
}
  40042a:	3708      	adds	r7, #8
  40042c:	46bd      	mov	sp, r7
  40042e:	bd80      	pop	{r7, pc}
  400430:	0040019d 	.word	0x0040019d
  400434:	00400309 	.word	0x00400309

00400438 <pll_wait_for_lock>:
 *
 * \retval STATUS_OK The PLL is now locked.
 * \retval ERR_TIMEOUT Timed out waiting for PLL to become locked.
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
  400438:	b580      	push	{r7, lr}
  40043a:	b082      	sub	sp, #8
  40043c:	af00      	add	r7, sp, #0
  40043e:	6078      	str	r0, [r7, #4]
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  400440:	bf00      	nop
  400442:	6878      	ldr	r0, [r7, #4]
  400444:	4b04      	ldr	r3, [pc, #16]	; (400458 <pll_wait_for_lock+0x20>)
  400446:	4798      	blx	r3
  400448:	4603      	mov	r3, r0
  40044a:	2b00      	cmp	r3, #0
  40044c:	d0f9      	beq.n	400442 <pll_wait_for_lock+0xa>
		/* Do nothing */
	}

	return 0;
  40044e:	2300      	movs	r3, #0
}
  400450:	4618      	mov	r0, r3
  400452:	3708      	adds	r7, #8
  400454:	46bd      	mov	sp, r7
  400456:	bd80      	pop	{r7, pc}
  400458:	004003d9 	.word	0x004003d9

0040045c <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  40045c:	b580      	push	{r7, lr}
  40045e:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  400460:	2006      	movs	r0, #6
  400462:	4b05      	ldr	r3, [pc, #20]	; (400478 <sysclk_get_main_hz+0x1c>)
  400464:	4798      	blx	r3
  400466:	4602      	mov	r2, r0
  400468:	4613      	mov	r3, r2
  40046a:	009b      	lsls	r3, r3, #2
  40046c:	4413      	add	r3, r2
  40046e:	009a      	lsls	r2, r3, #2
  400470:	4413      	add	r3, r2
  400472:	089b      	lsrs	r3, r3, #2
#endif
	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  400474:	4618      	mov	r0, r3
  400476:	bd80      	pop	{r7, pc}
  400478:	00400291 	.word	0x00400291

0040047c <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
  40047c:	b580      	push	{r7, lr}
  40047e:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  400480:	4b02      	ldr	r3, [pc, #8]	; (40048c <sysclk_get_cpu_hz+0x10>)
  400482:	4798      	blx	r3
  400484:	4603      	mov	r3, r0
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  400486:	4618      	mov	r0, r3
  400488:	bd80      	pop	{r7, pc}
  40048a:	bf00      	nop
  40048c:	0040045d 	.word	0x0040045d

00400490 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  400490:	b590      	push	{r4, r7, lr}
  400492:	b083      	sub	sp, #12
  400494:	af00      	add	r7, sp, #0
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  400496:	4813      	ldr	r0, [pc, #76]	; (4004e4 <sysclk_init+0x54>)
  400498:	4b13      	ldr	r3, [pc, #76]	; (4004e8 <sysclk_init+0x58>)
  40049a:	4798      	blx	r3
		pmc_switch_mck_to_mainck(CONFIG_SYSCLK_PRES);
	}

#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
  40049c:	2006      	movs	r0, #6
  40049e:	4b13      	ldr	r3, [pc, #76]	; (4004ec <sysclk_init+0x5c>)
  4004a0:	4798      	blx	r3
		pll_config_defaults(&pllcfg, 0);
  4004a2:	1d3b      	adds	r3, r7, #4
  4004a4:	4618      	mov	r0, r3
  4004a6:	2106      	movs	r1, #6
  4004a8:	2204      	movs	r2, #4
  4004aa:	2319      	movs	r3, #25
  4004ac:	4c10      	ldr	r4, [pc, #64]	; (4004f0 <sysclk_init+0x60>)
  4004ae:	47a0      	blx	r4
		pll_enable(&pllcfg, 0);
  4004b0:	1d3b      	adds	r3, r7, #4
  4004b2:	4618      	mov	r0, r3
  4004b4:	2100      	movs	r1, #0
  4004b6:	4b0f      	ldr	r3, [pc, #60]	; (4004f4 <sysclk_init+0x64>)
  4004b8:	4798      	blx	r3
		pll_wait_for_lock(0);
  4004ba:	2000      	movs	r0, #0
  4004bc:	4b0e      	ldr	r3, [pc, #56]	; (4004f8 <sysclk_init+0x68>)
  4004be:	4798      	blx	r3
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  4004c0:	2001      	movs	r0, #1
  4004c2:	4b0e      	ldr	r3, [pc, #56]	; (4004fc <sysclk_init+0x6c>)
  4004c4:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  4004c6:	2000      	movs	r0, #0
  4004c8:	4b0d      	ldr	r3, [pc, #52]	; (400500 <sysclk_init+0x70>)
  4004ca:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  4004cc:	4b0d      	ldr	r3, [pc, #52]	; (400504 <sysclk_init+0x74>)
  4004ce:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  4004d0:	4b0d      	ldr	r3, [pc, #52]	; (400508 <sysclk_init+0x78>)
  4004d2:	4798      	blx	r3
  4004d4:	4603      	mov	r3, r0
  4004d6:	4618      	mov	r0, r3
  4004d8:	4b03      	ldr	r3, [pc, #12]	; (4004e8 <sysclk_init+0x58>)
  4004da:	4798      	blx	r3

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
  4004dc:	370c      	adds	r7, #12
  4004de:	46bd      	mov	sp, r7
  4004e0:	bd90      	pop	{r4, r7, pc}
  4004e2:	bf00      	nop
  4004e4:	11e1a300 	.word	0x11e1a300
  4004e8:	00401f05 	.word	0x00401f05
  4004ec:	00400405 	.word	0x00400405
  4004f0:	00400335 	.word	0x00400335
  4004f4:	0040039d 	.word	0x0040039d
  4004f8:	00400439 	.word	0x00400439
  4004fc:	004012ad 	.word	0x004012ad
  400500:	00401325 	.word	0x00401325
  400504:	00401d9d 	.word	0x00401d9d
  400508:	0040047d 	.word	0x0040047d

0040050c <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  40050c:	b580      	push	{r7, lr}
  40050e:	b086      	sub	sp, #24
  400510:	af00      	add	r7, sp, #0
  400512:	60f8      	str	r0, [r7, #12]
  400514:	60b9      	str	r1, [r7, #8]
  400516:	607a      	str	r2, [r7, #4]
	int nChars = 0;
  400518:	2300      	movs	r3, #0
  40051a:	617b      	str	r3, [r7, #20]

	if (file != 0) {
  40051c:	68fb      	ldr	r3, [r7, #12]
  40051e:	2b00      	cmp	r3, #0
  400520:	d002      	beq.n	400528 <_read+0x1c>
		return -1;
  400522:	f04f 33ff 	mov.w	r3, #4294967295
  400526:	e014      	b.n	400552 <_read+0x46>
	}

	for (; len > 0; --len) {
  400528:	e00f      	b.n	40054a <_read+0x3e>
		ptr_get(stdio_base, ptr);
  40052a:	4b0c      	ldr	r3, [pc, #48]	; (40055c <_read+0x50>)
  40052c:	681b      	ldr	r3, [r3, #0]
  40052e:	4a0c      	ldr	r2, [pc, #48]	; (400560 <_read+0x54>)
  400530:	6812      	ldr	r2, [r2, #0]
  400532:	4610      	mov	r0, r2
  400534:	68b9      	ldr	r1, [r7, #8]
  400536:	4798      	blx	r3
		ptr++;
  400538:	68bb      	ldr	r3, [r7, #8]
  40053a:	3301      	adds	r3, #1
  40053c:	60bb      	str	r3, [r7, #8]
		nChars++;
  40053e:	697b      	ldr	r3, [r7, #20]
  400540:	3301      	adds	r3, #1
  400542:	617b      	str	r3, [r7, #20]

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
  400544:	687b      	ldr	r3, [r7, #4]
  400546:	3b01      	subs	r3, #1
  400548:	607b      	str	r3, [r7, #4]
  40054a:	687b      	ldr	r3, [r7, #4]
  40054c:	2b00      	cmp	r3, #0
  40054e:	dcec      	bgt.n	40052a <_read+0x1e>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
  400550:	697b      	ldr	r3, [r7, #20]
}
  400552:	4618      	mov	r0, r3
  400554:	3718      	adds	r7, #24
  400556:	46bd      	mov	sp, r7
  400558:	bd80      	pop	{r7, pc}
  40055a:	bf00      	nop
  40055c:	204009f8 	.word	0x204009f8
  400560:	20400a00 	.word	0x20400a00

00400564 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
  400564:	b580      	push	{r7, lr}
  400566:	b086      	sub	sp, #24
  400568:	af00      	add	r7, sp, #0
  40056a:	60f8      	str	r0, [r7, #12]
  40056c:	60b9      	str	r1, [r7, #8]
  40056e:	607a      	str	r2, [r7, #4]
	int nChars = 0;
  400570:	2300      	movs	r3, #0
  400572:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
  400574:	68fb      	ldr	r3, [r7, #12]
  400576:	2b01      	cmp	r3, #1
  400578:	d008      	beq.n	40058c <_write+0x28>
  40057a:	68fb      	ldr	r3, [r7, #12]
  40057c:	2b02      	cmp	r3, #2
  40057e:	d005      	beq.n	40058c <_write+0x28>
  400580:	68fb      	ldr	r3, [r7, #12]
  400582:	2b03      	cmp	r3, #3
  400584:	d002      	beq.n	40058c <_write+0x28>
		return -1;
  400586:	f04f 33ff 	mov.w	r3, #4294967295
  40058a:	e01a      	b.n	4005c2 <_write+0x5e>
	}

	for (; len != 0; --len) {
  40058c:	e015      	b.n	4005ba <_write+0x56>
		if (ptr_put(stdio_base, *ptr++) < 0) {
  40058e:	4b0f      	ldr	r3, [pc, #60]	; (4005cc <_write+0x68>)
  400590:	681a      	ldr	r2, [r3, #0]
  400592:	4b0f      	ldr	r3, [pc, #60]	; (4005d0 <_write+0x6c>)
  400594:	6818      	ldr	r0, [r3, #0]
  400596:	68bb      	ldr	r3, [r7, #8]
  400598:	1c59      	adds	r1, r3, #1
  40059a:	60b9      	str	r1, [r7, #8]
  40059c:	781b      	ldrb	r3, [r3, #0]
  40059e:	4619      	mov	r1, r3
  4005a0:	4790      	blx	r2
  4005a2:	4603      	mov	r3, r0
  4005a4:	2b00      	cmp	r3, #0
  4005a6:	da02      	bge.n	4005ae <_write+0x4a>
			return -1;
  4005a8:	f04f 33ff 	mov.w	r3, #4294967295
  4005ac:	e009      	b.n	4005c2 <_write+0x5e>
		}
		++nChars;
  4005ae:	697b      	ldr	r3, [r7, #20]
  4005b0:	3301      	adds	r3, #1
  4005b2:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
  4005b4:	687b      	ldr	r3, [r7, #4]
  4005b6:	3b01      	subs	r3, #1
  4005b8:	607b      	str	r3, [r7, #4]
  4005ba:	687b      	ldr	r3, [r7, #4]
  4005bc:	2b00      	cmp	r3, #0
  4005be:	d1e6      	bne.n	40058e <_write+0x2a>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
	}
	return nChars;
  4005c0:	697b      	ldr	r3, [r7, #20]
}
  4005c2:	4618      	mov	r0, r3
  4005c4:	3718      	adds	r7, #24
  4005c6:	46bd      	mov	sp, r7
  4005c8:	bd80      	pop	{r7, pc}
  4005ca:	bf00      	nop
  4005cc:	204009fc 	.word	0x204009fc
  4005d0:	20400a00 	.word	0x20400a00

004005d4 <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
  4005d4:	b580      	push	{r7, lr}
  4005d6:	b082      	sub	sp, #8
  4005d8:	af00      	add	r7, sp, #0
  4005da:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  4005dc:	6878      	ldr	r0, [r7, #4]
  4005de:	4b02      	ldr	r3, [pc, #8]	; (4005e8 <sysclk_enable_peripheral_clock+0x14>)
  4005e0:	4798      	blx	r3
}
  4005e2:	3708      	adds	r7, #8
  4005e4:	46bd      	mov	sp, r7
  4005e6:	bd80      	pop	{r7, pc}
  4005e8:	00401569 	.word	0x00401569

004005ec <ioport_init>:
 *
 * This function must be called before using any other functions in the IOPORT
 * service.
 */
static inline void ioport_init(void)
{
  4005ec:	b580      	push	{r7, lr}
  4005ee:	af00      	add	r7, sp, #0
}

__always_inline static void arch_ioport_init(void)
{
#ifdef ID_PIOA
	sysclk_enable_peripheral_clock(ID_PIOA);
  4005f0:	200a      	movs	r0, #10
  4005f2:	4b07      	ldr	r3, [pc, #28]	; (400610 <ioport_init+0x24>)
  4005f4:	4798      	blx	r3
#endif
#ifdef ID_PIOB
	sysclk_enable_peripheral_clock(ID_PIOB);
  4005f6:	200b      	movs	r0, #11
  4005f8:	4b05      	ldr	r3, [pc, #20]	; (400610 <ioport_init+0x24>)
  4005fa:	4798      	blx	r3
#endif
#ifdef ID_PIOC
	sysclk_enable_peripheral_clock(ID_PIOC);
  4005fc:	200c      	movs	r0, #12
  4005fe:	4b04      	ldr	r3, [pc, #16]	; (400610 <ioport_init+0x24>)
  400600:	4798      	blx	r3
#endif
#ifdef ID_PIOD
	sysclk_enable_peripheral_clock(ID_PIOD);
  400602:	2010      	movs	r0, #16
  400604:	4b02      	ldr	r3, [pc, #8]	; (400610 <ioport_init+0x24>)
  400606:	4798      	blx	r3
#endif
#ifdef ID_PIOE
	sysclk_enable_peripheral_clock(ID_PIOE);
  400608:	2011      	movs	r0, #17
  40060a:	4b01      	ldr	r3, [pc, #4]	; (400610 <ioport_init+0x24>)
  40060c:	4798      	blx	r3
	arch_ioport_init();
}
  40060e:	bd80      	pop	{r7, pc}
  400610:	004005d5 	.word	0x004005d5

00400614 <ioport_disable_pin>:
 *        IOPORT_CREATE_PIN().
 *
 * \param pin IOPORT pin to disable
 */
static inline void ioport_disable_pin(ioport_pin_t pin)
{
  400614:	b480      	push	{r7}
  400616:	b089      	sub	sp, #36	; 0x24
  400618:	af00      	add	r7, sp, #0
  40061a:	6078      	str	r0, [r7, #4]
  40061c:	687b      	ldr	r3, [r7, #4]
  40061e:	61fb      	str	r3, [r7, #28]
  400620:	69fb      	ldr	r3, [r7, #28]
  400622:	61bb      	str	r3, [r7, #24]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  400624:	69bb      	ldr	r3, [r7, #24]
  400626:	095a      	lsrs	r2, r3, #5
  400628:	69fb      	ldr	r3, [r7, #28]
  40062a:	617b      	str	r3, [r7, #20]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  40062c:	697b      	ldr	r3, [r7, #20]
  40062e:	f003 031f 	and.w	r3, r3, #31
  400632:	2101      	movs	r1, #1
  400634:	fa01 f303 	lsl.w	r3, r1, r3
  400638:	613a      	str	r2, [r7, #16]
  40063a:	60fb      	str	r3, [r7, #12]
  40063c:	693b      	ldr	r3, [r7, #16]
  40063e:	60bb      	str	r3, [r7, #8]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  400640:	68ba      	ldr	r2, [r7, #8]
  400642:	4b05      	ldr	r3, [pc, #20]	; (400658 <ioport_disable_pin+0x44>)
  400644:	4413      	add	r3, r2
  400646:	025b      	lsls	r3, r3, #9
  400648:	461a      	mov	r2, r3
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  40064a:	68fb      	ldr	r3, [r7, #12]
  40064c:	6053      	str	r3, [r2, #4]
	arch_ioport_disable_pin(pin);
}
  40064e:	3724      	adds	r7, #36	; 0x24
  400650:	46bd      	mov	sp, r7
  400652:	f85d 7b04 	ldr.w	r7, [sp], #4
  400656:	4770      	bx	lr
  400658:	00200707 	.word	0x00200707

0040065c <ioport_disable_port>:
 * \param port IOPORT port to disable
 * \param mask Pin mask of pins to disable
 */
static inline void ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
  40065c:	b480      	push	{r7}
  40065e:	b087      	sub	sp, #28
  400660:	af00      	add	r7, sp, #0
  400662:	6078      	str	r0, [r7, #4]
  400664:	6039      	str	r1, [r7, #0]
  400666:	687b      	ldr	r3, [r7, #4]
  400668:	617b      	str	r3, [r7, #20]
  40066a:	683b      	ldr	r3, [r7, #0]
  40066c:	613b      	str	r3, [r7, #16]
  40066e:	697b      	ldr	r3, [r7, #20]
  400670:	60fb      	str	r3, [r7, #12]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  400672:	68fa      	ldr	r2, [r7, #12]
  400674:	4b05      	ldr	r3, [pc, #20]	; (40068c <ioport_disable_port+0x30>)
  400676:	4413      	add	r3, r2
  400678:	025b      	lsls	r3, r3, #9
  40067a:	461a      	mov	r2, r3
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  40067c:	693b      	ldr	r3, [r7, #16]
  40067e:	6053      	str	r3, [r2, #4]
	arch_ioport_disable_port(port, mask);
}
  400680:	371c      	adds	r7, #28
  400682:	46bd      	mov	sp, r7
  400684:	f85d 7b04 	ldr.w	r7, [sp], #4
  400688:	4770      	bx	lr
  40068a:	bf00      	nop
  40068c:	00200707 	.word	0x00200707

00400690 <ioport_set_port_mode>:
 * \param mode Mode masks to configure for the specified pins (\ref
 * ioport_modes)
 */
static inline void ioport_set_port_mode(ioport_port_t port,
		ioport_port_mask_t mask, ioport_mode_t mode)
{
  400690:	b480      	push	{r7}
  400692:	b08b      	sub	sp, #44	; 0x2c
  400694:	af00      	add	r7, sp, #0
  400696:	60f8      	str	r0, [r7, #12]
  400698:	60b9      	str	r1, [r7, #8]
  40069a:	607a      	str	r2, [r7, #4]
  40069c:	68fb      	ldr	r3, [r7, #12]
  40069e:	627b      	str	r3, [r7, #36]	; 0x24
  4006a0:	68bb      	ldr	r3, [r7, #8]
  4006a2:	623b      	str	r3, [r7, #32]
  4006a4:	687b      	ldr	r3, [r7, #4]
  4006a6:	61fb      	str	r3, [r7, #28]
  4006a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4006aa:	61bb      	str	r3, [r7, #24]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  4006ac:	69ba      	ldr	r2, [r7, #24]
  4006ae:	4b37      	ldr	r3, [pc, #220]	; (40078c <ioport_set_port_mode+0xfc>)
  4006b0:	4413      	add	r3, r2
  4006b2:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_port_mode(ioport_port_t port,
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);
  4006b4:	617b      	str	r3, [r7, #20]

	if (mode & IOPORT_MODE_PULLUP) {
  4006b6:	69fb      	ldr	r3, [r7, #28]
  4006b8:	f003 0308 	and.w	r3, r3, #8
  4006bc:	2b00      	cmp	r3, #0
  4006be:	d003      	beq.n	4006c8 <ioport_set_port_mode+0x38>
		base->PIO_PUER = mask;
  4006c0:	697b      	ldr	r3, [r7, #20]
  4006c2:	6a3a      	ldr	r2, [r7, #32]
  4006c4:	665a      	str	r2, [r3, #100]	; 0x64
  4006c6:	e002      	b.n	4006ce <ioport_set_port_mode+0x3e>
	} else {
		base->PIO_PUDR = mask;
  4006c8:	697b      	ldr	r3, [r7, #20]
  4006ca:	6a3a      	ldr	r2, [r7, #32]
  4006cc:	661a      	str	r2, [r3, #96]	; 0x60
	}

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
  4006ce:	69fb      	ldr	r3, [r7, #28]
  4006d0:	f003 0310 	and.w	r3, r3, #16
  4006d4:	2b00      	cmp	r3, #0
  4006d6:	d004      	beq.n	4006e2 <ioport_set_port_mode+0x52>
		base->PIO_PPDER = mask;
  4006d8:	697b      	ldr	r3, [r7, #20]
  4006da:	6a3a      	ldr	r2, [r7, #32]
  4006dc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  4006e0:	e003      	b.n	4006ea <ioport_set_port_mode+0x5a>
	} else {
		base->PIO_PPDDR = mask;
  4006e2:	697b      	ldr	r3, [r7, #20]
  4006e4:	6a3a      	ldr	r2, [r7, #32]
  4006e6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	}
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
  4006ea:	69fb      	ldr	r3, [r7, #28]
  4006ec:	f003 0320 	and.w	r3, r3, #32
  4006f0:	2b00      	cmp	r3, #0
  4006f2:	d003      	beq.n	4006fc <ioport_set_port_mode+0x6c>
		base->PIO_MDER = mask;
  4006f4:	697b      	ldr	r3, [r7, #20]
  4006f6:	6a3a      	ldr	r2, [r7, #32]
  4006f8:	651a      	str	r2, [r3, #80]	; 0x50
  4006fa:	e002      	b.n	400702 <ioport_set_port_mode+0x72>
	} else {
		base->PIO_MDDR = mask;
  4006fc:	697b      	ldr	r3, [r7, #20]
  4006fe:	6a3a      	ldr	r2, [r7, #32]
  400700:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
  400702:	69fb      	ldr	r3, [r7, #28]
  400704:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
  400708:	2b00      	cmp	r3, #0
  40070a:	d003      	beq.n	400714 <ioport_set_port_mode+0x84>
		base->PIO_IFER = mask;
  40070c:	697b      	ldr	r3, [r7, #20]
  40070e:	6a3a      	ldr	r2, [r7, #32]
  400710:	621a      	str	r2, [r3, #32]
  400712:	e002      	b.n	40071a <ioport_set_port_mode+0x8a>
	} else {
		base->PIO_IFDR = mask;
  400714:	697b      	ldr	r3, [r7, #20]
  400716:	6a3a      	ldr	r2, [r7, #32]
  400718:	625a      	str	r2, [r3, #36]	; 0x24
	}

	if (mode & IOPORT_MODE_DEBOUNCE) {
  40071a:	69fb      	ldr	r3, [r7, #28]
  40071c:	f003 0380 	and.w	r3, r3, #128	; 0x80
  400720:	2b00      	cmp	r3, #0
  400722:	d004      	beq.n	40072e <ioport_set_port_mode+0x9e>
#if SAM3U || SAM3XA
		base->PIO_DIFSR = mask;
#else
		base->PIO_IFSCER = mask;
  400724:	697b      	ldr	r3, [r7, #20]
  400726:	6a3a      	ldr	r2, [r7, #32]
  400728:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  40072c:	e003      	b.n	400736 <ioport_set_port_mode+0xa6>
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  40072e:	697b      	ldr	r3, [r7, #20]
  400730:	6a3a      	ldr	r2, [r7, #32]
  400732:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABSR |= mask;
	} else {
		base->PIO_ABSR &= ~mask;
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
  400736:	69fb      	ldr	r3, [r7, #28]
  400738:	f003 0301 	and.w	r3, r3, #1
  40073c:	2b00      	cmp	r3, #0
  40073e:	d006      	beq.n	40074e <ioport_set_port_mode+0xbe>
		base->PIO_ABCDSR[0] |= mask;
  400740:	697b      	ldr	r3, [r7, #20]
  400742:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400744:	6a3b      	ldr	r3, [r7, #32]
  400746:	431a      	orrs	r2, r3
  400748:	697b      	ldr	r3, [r7, #20]
  40074a:	671a      	str	r2, [r3, #112]	; 0x70
  40074c:	e006      	b.n	40075c <ioport_set_port_mode+0xcc>
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  40074e:	697b      	ldr	r3, [r7, #20]
  400750:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400752:	6a3b      	ldr	r3, [r7, #32]
  400754:	43db      	mvns	r3, r3
  400756:	401a      	ands	r2, r3
  400758:	697b      	ldr	r3, [r7, #20]
  40075a:	671a      	str	r2, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
  40075c:	69fb      	ldr	r3, [r7, #28]
  40075e:	f003 0302 	and.w	r3, r3, #2
  400762:	2b00      	cmp	r3, #0
  400764:	d006      	beq.n	400774 <ioport_set_port_mode+0xe4>
		base->PIO_ABCDSR[1] |= mask;
  400766:	697b      	ldr	r3, [r7, #20]
  400768:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  40076a:	6a3b      	ldr	r3, [r7, #32]
  40076c:	431a      	orrs	r2, r3
  40076e:	697b      	ldr	r3, [r7, #20]
  400770:	675a      	str	r2, [r3, #116]	; 0x74
  400772:	e006      	b.n	400782 <ioport_set_port_mode+0xf2>
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  400774:	697b      	ldr	r3, [r7, #20]
  400776:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400778:	6a3b      	ldr	r3, [r7, #32]
  40077a:	43db      	mvns	r3, r3
  40077c:	401a      	ands	r2, r3
  40077e:	697b      	ldr	r3, [r7, #20]
  400780:	675a      	str	r2, [r3, #116]	; 0x74
	arch_ioport_set_port_mode(port, mask, mode);
}
  400782:	372c      	adds	r7, #44	; 0x2c
  400784:	46bd      	mov	sp, r7
  400786:	f85d 7b04 	ldr.w	r7, [sp], #4
  40078a:	4770      	bx	lr
  40078c:	00200707 	.word	0x00200707

00400790 <ioport_set_pin_mode>:
 *
 * \param pin IOPORT pin to configure
 * \param mode Mode masks to configure for the specified pin (\ref ioport_modes)
 */
static inline void ioport_set_pin_mode(ioport_pin_t pin, ioport_mode_t mode)
{
  400790:	b480      	push	{r7}
  400792:	b08d      	sub	sp, #52	; 0x34
  400794:	af00      	add	r7, sp, #0
  400796:	6078      	str	r0, [r7, #4]
  400798:	6039      	str	r1, [r7, #0]
  40079a:	687b      	ldr	r3, [r7, #4]
  40079c:	62fb      	str	r3, [r7, #44]	; 0x2c
  40079e:	683b      	ldr	r3, [r7, #0]
  4007a0:	62bb      	str	r3, [r7, #40]	; 0x28
  4007a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4007a4:	627b      	str	r3, [r7, #36]	; 0x24
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  4007a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4007a8:	095a      	lsrs	r2, r3, #5
  4007aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4007ac:	623b      	str	r3, [r7, #32]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  4007ae:	6a3b      	ldr	r3, [r7, #32]
  4007b0:	f003 031f 	and.w	r3, r3, #31
  4007b4:	2101      	movs	r1, #1
  4007b6:	fa01 f303 	lsl.w	r3, r1, r3
  4007ba:	61fa      	str	r2, [r7, #28]
  4007bc:	61bb      	str	r3, [r7, #24]
  4007be:	6abb      	ldr	r3, [r7, #40]	; 0x28
  4007c0:	617b      	str	r3, [r7, #20]
  4007c2:	69fb      	ldr	r3, [r7, #28]
  4007c4:	613b      	str	r3, [r7, #16]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  4007c6:	693a      	ldr	r2, [r7, #16]
  4007c8:	4b37      	ldr	r3, [pc, #220]	; (4008a8 <ioport_set_pin_mode+0x118>)
  4007ca:	4413      	add	r3, r2
  4007cc:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_port_mode(ioport_port_t port,
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);
  4007ce:	60fb      	str	r3, [r7, #12]

	if (mode & IOPORT_MODE_PULLUP) {
  4007d0:	697b      	ldr	r3, [r7, #20]
  4007d2:	f003 0308 	and.w	r3, r3, #8
  4007d6:	2b00      	cmp	r3, #0
  4007d8:	d003      	beq.n	4007e2 <ioport_set_pin_mode+0x52>
		base->PIO_PUER = mask;
  4007da:	68fb      	ldr	r3, [r7, #12]
  4007dc:	69ba      	ldr	r2, [r7, #24]
  4007de:	665a      	str	r2, [r3, #100]	; 0x64
  4007e0:	e002      	b.n	4007e8 <ioport_set_pin_mode+0x58>
	} else {
		base->PIO_PUDR = mask;
  4007e2:	68fb      	ldr	r3, [r7, #12]
  4007e4:	69ba      	ldr	r2, [r7, #24]
  4007e6:	661a      	str	r2, [r3, #96]	; 0x60
	}

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
  4007e8:	697b      	ldr	r3, [r7, #20]
  4007ea:	f003 0310 	and.w	r3, r3, #16
  4007ee:	2b00      	cmp	r3, #0
  4007f0:	d004      	beq.n	4007fc <ioport_set_pin_mode+0x6c>
		base->PIO_PPDER = mask;
  4007f2:	68fb      	ldr	r3, [r7, #12]
  4007f4:	69ba      	ldr	r2, [r7, #24]
  4007f6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  4007fa:	e003      	b.n	400804 <ioport_set_pin_mode+0x74>
	} else {
		base->PIO_PPDDR = mask;
  4007fc:	68fb      	ldr	r3, [r7, #12]
  4007fe:	69ba      	ldr	r2, [r7, #24]
  400800:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	}
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
  400804:	697b      	ldr	r3, [r7, #20]
  400806:	f003 0320 	and.w	r3, r3, #32
  40080a:	2b00      	cmp	r3, #0
  40080c:	d003      	beq.n	400816 <ioport_set_pin_mode+0x86>
		base->PIO_MDER = mask;
  40080e:	68fb      	ldr	r3, [r7, #12]
  400810:	69ba      	ldr	r2, [r7, #24]
  400812:	651a      	str	r2, [r3, #80]	; 0x50
  400814:	e002      	b.n	40081c <ioport_set_pin_mode+0x8c>
	} else {
		base->PIO_MDDR = mask;
  400816:	68fb      	ldr	r3, [r7, #12]
  400818:	69ba      	ldr	r2, [r7, #24]
  40081a:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
  40081c:	697b      	ldr	r3, [r7, #20]
  40081e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
  400822:	2b00      	cmp	r3, #0
  400824:	d003      	beq.n	40082e <ioport_set_pin_mode+0x9e>
		base->PIO_IFER = mask;
  400826:	68fb      	ldr	r3, [r7, #12]
  400828:	69ba      	ldr	r2, [r7, #24]
  40082a:	621a      	str	r2, [r3, #32]
  40082c:	e002      	b.n	400834 <ioport_set_pin_mode+0xa4>
	} else {
		base->PIO_IFDR = mask;
  40082e:	68fb      	ldr	r3, [r7, #12]
  400830:	69ba      	ldr	r2, [r7, #24]
  400832:	625a      	str	r2, [r3, #36]	; 0x24
	}

	if (mode & IOPORT_MODE_DEBOUNCE) {
  400834:	697b      	ldr	r3, [r7, #20]
  400836:	f003 0380 	and.w	r3, r3, #128	; 0x80
  40083a:	2b00      	cmp	r3, #0
  40083c:	d004      	beq.n	400848 <ioport_set_pin_mode+0xb8>
#if SAM3U || SAM3XA
		base->PIO_DIFSR = mask;
#else
		base->PIO_IFSCER = mask;
  40083e:	68fb      	ldr	r3, [r7, #12]
  400840:	69ba      	ldr	r2, [r7, #24]
  400842:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  400846:	e003      	b.n	400850 <ioport_set_pin_mode+0xc0>
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  400848:	68fb      	ldr	r3, [r7, #12]
  40084a:	69ba      	ldr	r2, [r7, #24]
  40084c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABSR |= mask;
	} else {
		base->PIO_ABSR &= ~mask;
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
  400850:	697b      	ldr	r3, [r7, #20]
  400852:	f003 0301 	and.w	r3, r3, #1
  400856:	2b00      	cmp	r3, #0
  400858:	d006      	beq.n	400868 <ioport_set_pin_mode+0xd8>
		base->PIO_ABCDSR[0] |= mask;
  40085a:	68fb      	ldr	r3, [r7, #12]
  40085c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  40085e:	69bb      	ldr	r3, [r7, #24]
  400860:	431a      	orrs	r2, r3
  400862:	68fb      	ldr	r3, [r7, #12]
  400864:	671a      	str	r2, [r3, #112]	; 0x70
  400866:	e006      	b.n	400876 <ioport_set_pin_mode+0xe6>
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  400868:	68fb      	ldr	r3, [r7, #12]
  40086a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  40086c:	69bb      	ldr	r3, [r7, #24]
  40086e:	43db      	mvns	r3, r3
  400870:	401a      	ands	r2, r3
  400872:	68fb      	ldr	r3, [r7, #12]
  400874:	671a      	str	r2, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
  400876:	697b      	ldr	r3, [r7, #20]
  400878:	f003 0302 	and.w	r3, r3, #2
  40087c:	2b00      	cmp	r3, #0
  40087e:	d006      	beq.n	40088e <ioport_set_pin_mode+0xfe>
		base->PIO_ABCDSR[1] |= mask;
  400880:	68fb      	ldr	r3, [r7, #12]
  400882:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400884:	69bb      	ldr	r3, [r7, #24]
  400886:	431a      	orrs	r2, r3
  400888:	68fb      	ldr	r3, [r7, #12]
  40088a:	675a      	str	r2, [r3, #116]	; 0x74
  40088c:	e006      	b.n	40089c <ioport_set_pin_mode+0x10c>
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  40088e:	68fb      	ldr	r3, [r7, #12]
  400890:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400892:	69bb      	ldr	r3, [r7, #24]
  400894:	43db      	mvns	r3, r3
  400896:	401a      	ands	r2, r3
  400898:	68fb      	ldr	r3, [r7, #12]
  40089a:	675a      	str	r2, [r3, #116]	; 0x74
	arch_ioport_set_pin_mode(pin, mode);
}
  40089c:	3734      	adds	r7, #52	; 0x34
  40089e:	46bd      	mov	sp, r7
  4008a0:	f85d 7b04 	ldr.w	r7, [sp], #4
  4008a4:	4770      	bx	lr
  4008a6:	bf00      	nop
  4008a8:	00200707 	.word	0x00200707

004008ac <ioport_set_pin_dir>:
 * \param pin IOPORT pin to configure
 * \param dir Direction to set for the specified pin (\ref ioport_direction)
 */
static inline void ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
  4008ac:	b480      	push	{r7}
  4008ae:	b08d      	sub	sp, #52	; 0x34
  4008b0:	af00      	add	r7, sp, #0
  4008b2:	6078      	str	r0, [r7, #4]
  4008b4:	460b      	mov	r3, r1
  4008b6:	70fb      	strb	r3, [r7, #3]
  4008b8:	687b      	ldr	r3, [r7, #4]
  4008ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  4008bc:	78fb      	ldrb	r3, [r7, #3]
  4008be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  4008c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4008c4:	627b      	str	r3, [r7, #36]	; 0x24
  4008c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4008c8:	623b      	str	r3, [r7, #32]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  4008ca:	6a3b      	ldr	r3, [r7, #32]
  4008cc:	095b      	lsrs	r3, r3, #5
  4008ce:	61fb      	str	r3, [r7, #28]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  4008d0:	69fa      	ldr	r2, [r7, #28]
  4008d2:	4b17      	ldr	r3, [pc, #92]	; (400930 <ioport_set_pin_dir+0x84>)
  4008d4:	4413      	add	r3, r2
  4008d6:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);
  4008d8:	61bb      	str	r3, [r7, #24]

	if (dir == IOPORT_DIR_OUTPUT) {
  4008da:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  4008de:	2b01      	cmp	r3, #1
  4008e0:	d109      	bne.n	4008f6 <ioport_set_pin_dir+0x4a>
  4008e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4008e4:	617b      	str	r3, [r7, #20]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  4008e6:	697b      	ldr	r3, [r7, #20]
  4008e8:	f003 031f 	and.w	r3, r3, #31
  4008ec:	2201      	movs	r2, #1
  4008ee:	409a      	lsls	r2, r3
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4008f0:	69bb      	ldr	r3, [r7, #24]
  4008f2:	611a      	str	r2, [r3, #16]
  4008f4:	e00c      	b.n	400910 <ioport_set_pin_dir+0x64>
	} else if (dir == IOPORT_DIR_INPUT) {
  4008f6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  4008fa:	2b00      	cmp	r3, #0
  4008fc:	d108      	bne.n	400910 <ioport_set_pin_dir+0x64>
  4008fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  400900:	613b      	str	r3, [r7, #16]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  400902:	693b      	ldr	r3, [r7, #16]
  400904:	f003 031f 	and.w	r3, r3, #31
  400908:	2201      	movs	r2, #1
  40090a:	409a      	lsls	r2, r3
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40090c:	69bb      	ldr	r3, [r7, #24]
  40090e:	615a      	str	r2, [r3, #20]
  400910:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  400912:	60fb      	str	r3, [r7, #12]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  400914:	68fb      	ldr	r3, [r7, #12]
  400916:	f003 031f 	and.w	r3, r3, #31
  40091a:	2201      	movs	r2, #1
  40091c:	409a      	lsls	r2, r3
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40091e:	69bb      	ldr	r3, [r7, #24]
  400920:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	arch_ioport_set_pin_dir(pin, dir);
}
  400924:	3734      	adds	r7, #52	; 0x34
  400926:	46bd      	mov	sp, r7
  400928:	f85d 7b04 	ldr.w	r7, [sp], #4
  40092c:	4770      	bx	lr
  40092e:	bf00      	nop
  400930:	00200707 	.word	0x00200707

00400934 <ioport_set_pin_level>:
 *
 * \param pin IOPORT pin to configure
 * \param level Logical value of the pin
 */
static inline void ioport_set_pin_level(ioport_pin_t pin, bool level)
{
  400934:	b480      	push	{r7}
  400936:	b08b      	sub	sp, #44	; 0x2c
  400938:	af00      	add	r7, sp, #0
  40093a:	6078      	str	r0, [r7, #4]
  40093c:	460b      	mov	r3, r1
  40093e:	70fb      	strb	r3, [r7, #3]
  400940:	687b      	ldr	r3, [r7, #4]
  400942:	627b      	str	r3, [r7, #36]	; 0x24
  400944:	78fb      	ldrb	r3, [r7, #3]
  400946:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  40094a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40094c:	61fb      	str	r3, [r7, #28]
  40094e:	69fb      	ldr	r3, [r7, #28]
  400950:	61bb      	str	r3, [r7, #24]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  400952:	69bb      	ldr	r3, [r7, #24]
  400954:	095b      	lsrs	r3, r3, #5
  400956:	617b      	str	r3, [r7, #20]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  400958:	697a      	ldr	r2, [r7, #20]
  40095a:	4b10      	ldr	r3, [pc, #64]	; (40099c <ioport_set_pin_level+0x68>)
  40095c:	4413      	add	r3, r2
  40095e:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);
  400960:	613b      	str	r3, [r7, #16]

	if (level) {
  400962:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
  400966:	2b00      	cmp	r3, #0
  400968:	d009      	beq.n	40097e <ioport_set_pin_level+0x4a>
  40096a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40096c:	60fb      	str	r3, [r7, #12]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  40096e:	68fb      	ldr	r3, [r7, #12]
  400970:	f003 031f 	and.w	r3, r3, #31
  400974:	2201      	movs	r2, #1
  400976:	409a      	lsls	r2, r3
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400978:	693b      	ldr	r3, [r7, #16]
  40097a:	631a      	str	r2, [r3, #48]	; 0x30
  40097c:	e008      	b.n	400990 <ioport_set_pin_level+0x5c>
  40097e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  400980:	60bb      	str	r3, [r7, #8]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  400982:	68bb      	ldr	r3, [r7, #8]
  400984:	f003 031f 	and.w	r3, r3, #31
  400988:	2201      	movs	r2, #1
  40098a:	409a      	lsls	r2, r3
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  40098c:	693b      	ldr	r3, [r7, #16]
  40098e:	635a      	str	r2, [r3, #52]	; 0x34
	arch_ioport_set_pin_level(pin, level);
}
  400990:	372c      	adds	r7, #44	; 0x2c
  400992:	46bd      	mov	sp, r7
  400994:	f85d 7b04 	ldr.w	r7, [sp], #4
  400998:	4770      	bx	lr
  40099a:	bf00      	nop
  40099c:	00200707 	.word	0x00200707

004009a0 <ioport_set_pin_sense_mode>:
 * \param pin IOPORT pin to configure
 * \param pin_sense Edge to sense for the pin (\ref ioport_sense)
 */
static inline void ioport_set_pin_sense_mode(ioport_pin_t pin,
		enum ioport_sense pin_sense)
{
  4009a0:	b480      	push	{r7}
  4009a2:	b08d      	sub	sp, #52	; 0x34
  4009a4:	af00      	add	r7, sp, #0
  4009a6:	6078      	str	r0, [r7, #4]
  4009a8:	460b      	mov	r3, r1
  4009aa:	70fb      	strb	r3, [r7, #3]
  4009ac:	687b      	ldr	r3, [r7, #4]
  4009ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  4009b0:	78fb      	ldrb	r3, [r7, #3]
  4009b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  4009b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4009b8:	627b      	str	r3, [r7, #36]	; 0x24
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  4009ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4009bc:	095a      	lsrs	r2, r3, #5
  4009be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4009c0:	623b      	str	r3, [r7, #32]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  4009c2:	6a3b      	ldr	r3, [r7, #32]
  4009c4:	f003 031f 	and.w	r3, r3, #31
  4009c8:	2101      	movs	r1, #1
  4009ca:	fa01 f303 	lsl.w	r3, r1, r3
  4009ce:	61fa      	str	r2, [r7, #28]
  4009d0:	61bb      	str	r3, [r7, #24]
  4009d2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  4009d6:	75fb      	strb	r3, [r7, #23]
  4009d8:	69fb      	ldr	r3, [r7, #28]
  4009da:	613b      	str	r3, [r7, #16]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  4009dc:	693a      	ldr	r2, [r7, #16]
  4009de:	4b22      	ldr	r3, [pc, #136]	; (400a68 <ioport_set_pin_sense_mode+0xc8>)
  4009e0:	4413      	add	r3, r2
  4009e2:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_port_sense_mode(ioport_port_t port,
		ioport_port_mask_t mask, enum ioport_sense pin_sense)
{
	Pio *base = arch_ioport_port_to_base(port);
  4009e4:	60fb      	str	r3, [r7, #12]
	 *       1       0         0    IOPORT_SENSE_FALLING
	 *       1       0         1    IOPORT_SENSE_RISING
	 *       1       1         0    IOPORT_SENSE_LEVEL_LOW
	 *       1       1         1    IOPORT_SENSE_LEVEL_HIGH
	 */
	switch(pin_sense) {
  4009e6:	7dfb      	ldrb	r3, [r7, #23]
  4009e8:	3b01      	subs	r3, #1
  4009ea:	2b03      	cmp	r3, #3
  4009ec:	d82e      	bhi.n	400a4c <ioport_set_pin_sense_mode+0xac>
  4009ee:	a201      	add	r2, pc, #4	; (adr r2, 4009f4 <ioport_set_pin_sense_mode+0x54>)
  4009f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4009f4:	00400a29 	.word	0x00400a29
  4009f8:	00400a3b 	.word	0x00400a3b
  4009fc:	00400a05 	.word	0x00400a05
  400a00:	00400a17 	.word	0x00400a17
	case IOPORT_SENSE_LEVEL_LOW:
		base->PIO_LSR = mask;
  400a04:	68fb      	ldr	r3, [r7, #12]
  400a06:	69ba      	ldr	r2, [r7, #24]
  400a08:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
		base->PIO_FELLSR = mask;
  400a0c:	68fb      	ldr	r3, [r7, #12]
  400a0e:	69ba      	ldr	r2, [r7, #24]
  400a10:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
  400a14:	e01f      	b.n	400a56 <ioport_set_pin_sense_mode+0xb6>
		break;
	case IOPORT_SENSE_LEVEL_HIGH:
		base->PIO_LSR = mask;
  400a16:	68fb      	ldr	r3, [r7, #12]
  400a18:	69ba      	ldr	r2, [r7, #24]
  400a1a:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
		base->PIO_REHLSR = mask;
  400a1e:	68fb      	ldr	r3, [r7, #12]
  400a20:	69ba      	ldr	r2, [r7, #24]
  400a22:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  400a26:	e016      	b.n	400a56 <ioport_set_pin_sense_mode+0xb6>
		break;
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
  400a28:	68fb      	ldr	r3, [r7, #12]
  400a2a:	69ba      	ldr	r2, [r7, #24]
  400a2c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_FELLSR = mask;
  400a30:	68fb      	ldr	r3, [r7, #12]
  400a32:	69ba      	ldr	r2, [r7, #24]
  400a34:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
  400a38:	e00d      	b.n	400a56 <ioport_set_pin_sense_mode+0xb6>
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  400a3a:	68fb      	ldr	r3, [r7, #12]
  400a3c:	69ba      	ldr	r2, [r7, #24]
  400a3e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  400a42:	68fb      	ldr	r3, [r7, #12]
  400a44:	69ba      	ldr	r2, [r7, #24]
  400a46:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  400a4a:	e004      	b.n	400a56 <ioport_set_pin_sense_mode+0xb6>
		break;
	default:
		base->PIO_AIMDR = mask;
  400a4c:	68fb      	ldr	r3, [r7, #12]
  400a4e:	69ba      	ldr	r2, [r7, #24]
  400a50:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
  400a54:	e003      	b.n	400a5e <ioport_set_pin_sense_mode+0xbe>
		return;
	}
	base->PIO_AIMER = mask;
  400a56:	68fb      	ldr	r3, [r7, #12]
  400a58:	69ba      	ldr	r2, [r7, #24]
  400a5a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	arch_ioport_set_pin_sense_mode(pin, pin_sense);
}
  400a5e:	3734      	adds	r7, #52	; 0x34
  400a60:	46bd      	mov	sp, r7
  400a62:	f85d 7b04 	ldr.w	r7, [sp], #4
  400a66:	4770      	bx	lr
  400a68:	00200707 	.word	0x00200707

00400a6c <board_init>:
	__ISB();
}
#endif

void board_init(void)
{
  400a6c:	b580      	push	{r7, lr}
  400a6e:	af00      	add	r7, sp, #0
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  400a70:	4b24      	ldr	r3, [pc, #144]	; (400b04 <board_init+0x98>)
  400a72:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  400a76:	605a      	str	r2, [r3, #4]
#endif

	/* Initialize IOPORTs */
	ioport_init();
  400a78:	4b23      	ldr	r3, [pc, #140]	; (400b08 <board_init+0x9c>)
  400a7a:	4798      	blx	r3

	/* Configure the pins connected to LED as output and set their
	 * default initial state to high (LED off).
	 */
	ioport_set_pin_dir(LED0_GPIO, IOPORT_DIR_OUTPUT);
  400a7c:	2050      	movs	r0, #80	; 0x50
  400a7e:	2101      	movs	r1, #1
  400a80:	4b22      	ldr	r3, [pc, #136]	; (400b0c <board_init+0xa0>)
  400a82:	4798      	blx	r3
	ioport_set_pin_level(LED0_GPIO, LED0_INACTIVE_LEVEL);
  400a84:	2050      	movs	r0, #80	; 0x50
  400a86:	2101      	movs	r1, #1
  400a88:	4b21      	ldr	r3, [pc, #132]	; (400b10 <board_init+0xa4>)
  400a8a:	4798      	blx	r3

	/* Configure Push Button pins */
	ioport_set_pin_input_mode(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS,
  400a8c:	200b      	movs	r0, #11
  400a8e:	2100      	movs	r1, #0
  400a90:	4b1e      	ldr	r3, [pc, #120]	; (400b0c <board_init+0xa0>)
  400a92:	4798      	blx	r3
  400a94:	200b      	movs	r0, #11
  400a96:	2188      	movs	r1, #136	; 0x88
  400a98:	4b1e      	ldr	r3, [pc, #120]	; (400b14 <board_init+0xa8>)
  400a9a:	4798      	blx	r3
  400a9c:	200b      	movs	r0, #11
  400a9e:	2102      	movs	r1, #2
  400aa0:	4b1d      	ldr	r3, [pc, #116]	; (400b18 <board_init+0xac>)
  400aa2:	4798      	blx	r3
//jsi 7feb16 following defines are from the DMA-UART example project for the SAM4E
#define PINS_UART0_PORT		IOPORT_PIOA
#define PINS_UART0			(PIO_PA9A_URXD0 | PIO_PA10A_UTXD0)
#define PINS_UART0_FLAGS	IOPORT_MODE_MUX_A

	ioport_set_port_peripheral_mode(PINS_UART0_PORT, PINS_UART0, PINS_UART0_FLAGS); //jsi 6feb16 was USART1
  400aa4:	2000      	movs	r0, #0
  400aa6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
  400aaa:	2200      	movs	r2, #0
  400aac:	4b1b      	ldr	r3, [pc, #108]	; (400b1c <board_init+0xb0>)
  400aae:	4798      	blx	r3
  400ab0:	2000      	movs	r0, #0
  400ab2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
  400ab6:	4b1a      	ldr	r3, [pc, #104]	; (400b20 <board_init+0xb4>)
  400ab8:	4798      	blx	r3

#endif

#define CONF_BOARD_TWIHS0 //jsi 7feb16
#ifdef CONF_BOARD_TWIHS0
	ioport_set_pin_peripheral_mode(TWIHS0_DATA_GPIO, TWIHS0_DATA_FLAGS);
  400aba:	2003      	movs	r0, #3
  400abc:	2100      	movs	r1, #0
  400abe:	4b15      	ldr	r3, [pc, #84]	; (400b14 <board_init+0xa8>)
  400ac0:	4798      	blx	r3
  400ac2:	2003      	movs	r0, #3
  400ac4:	4b17      	ldr	r3, [pc, #92]	; (400b24 <board_init+0xb8>)
  400ac6:	4798      	blx	r3
	ioport_set_pin_peripheral_mode(TWIHS0_CLK_GPIO, TWIHS0_CLK_FLAGS);
  400ac8:	2004      	movs	r0, #4
  400aca:	2100      	movs	r1, #0
  400acc:	4b11      	ldr	r3, [pc, #68]	; (400b14 <board_init+0xa8>)
  400ace:	4798      	blx	r3
  400ad0:	2004      	movs	r0, #4
  400ad2:	4b14      	ldr	r3, [pc, #80]	; (400b24 <board_init+0xb8>)
  400ad4:	4798      	blx	r3
#endif


#ifdef CONF_BOARD_USART_RXD
	/* Configure USART RXD pin */
	ioport_set_pin_peripheral_mode(USART0_RXD_GPIO, USART0_RXD_FLAGS);
  400ad6:	2020      	movs	r0, #32
  400ad8:	2102      	movs	r1, #2
  400ada:	4b0e      	ldr	r3, [pc, #56]	; (400b14 <board_init+0xa8>)
  400adc:	4798      	blx	r3
  400ade:	2020      	movs	r0, #32
  400ae0:	4b10      	ldr	r3, [pc, #64]	; (400b24 <board_init+0xb8>)
  400ae2:	4798      	blx	r3
#endif

#ifdef CONF_BOARD_USART_TXD
	/* Configure USART TXD pin */
	ioport_set_pin_peripheral_mode(USART0_TXD_GPIO, USART0_TXD_FLAGS);
  400ae4:	2021      	movs	r0, #33	; 0x21
  400ae6:	2102      	movs	r1, #2
  400ae8:	4b0a      	ldr	r3, [pc, #40]	; (400b14 <board_init+0xa8>)
  400aea:	4798      	blx	r3
  400aec:	2021      	movs	r0, #33	; 0x21
  400aee:	4b0d      	ldr	r3, [pc, #52]	; (400b24 <board_init+0xb8>)
  400af0:	4798      	blx	r3
	ioport_set_pin_peripheral_mode(PIN_USART0_CTS_IDX,PIN_USART0_CTS_FLAGS);
#endif

#ifdef CONF_BOARD_USART_RTS
	/* Configure USART RTS pin */
	ioport_set_pin_peripheral_mode(PIN_USART0_RTS_IDX, PIN_USART0_RTS_FLAGS);
  400af2:	2023      	movs	r0, #35	; 0x23
  400af4:	2102      	movs	r1, #2
  400af6:	4b07      	ldr	r3, [pc, #28]	; (400b14 <board_init+0xa8>)
  400af8:	4798      	blx	r3
  400afa:	2023      	movs	r0, #35	; 0x23
  400afc:	4b09      	ldr	r3, [pc, #36]	; (400b24 <board_init+0xb8>)
  400afe:	4798      	blx	r3
#endif

#ifdef CONF_BOARD_CONFIG_MPU_AT_INIT
	_setup_memory_region();
#endif
}
  400b00:	bd80      	pop	{r7, pc}
  400b02:	bf00      	nop
  400b04:	400e1850 	.word	0x400e1850
  400b08:	004005ed 	.word	0x004005ed
  400b0c:	004008ad 	.word	0x004008ad
  400b10:	00400935 	.word	0x00400935
  400b14:	00400791 	.word	0x00400791
  400b18:	004009a1 	.word	0x004009a1
  400b1c:	00400691 	.word	0x00400691
  400b20:	0040065d 	.word	0x0040065d
  400b24:	00400615 	.word	0x00400615

00400b28 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  400b28:	b480      	push	{r7}
  400b2a:	b083      	sub	sp, #12
  400b2c:	af00      	add	r7, sp, #0
  400b2e:	4603      	mov	r3, r0
  400b30:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  400b32:	4908      	ldr	r1, [pc, #32]	; (400b54 <NVIC_EnableIRQ+0x2c>)
  400b34:	f997 3007 	ldrsb.w	r3, [r7, #7]
  400b38:	095b      	lsrs	r3, r3, #5
  400b3a:	79fa      	ldrb	r2, [r7, #7]
  400b3c:	f002 021f 	and.w	r2, r2, #31
  400b40:	2001      	movs	r0, #1
  400b42:	fa00 f202 	lsl.w	r2, r0, r2
  400b46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  400b4a:	370c      	adds	r7, #12
  400b4c:	46bd      	mov	sp, r7
  400b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
  400b52:	4770      	bx	lr
  400b54:	e000e100 	.word	0xe000e100

00400b58 <NVIC_ClearPendingIRQ>:
    The function clears the pending bit of an external interrupt.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  400b58:	b480      	push	{r7}
  400b5a:	b083      	sub	sp, #12
  400b5c:	af00      	add	r7, sp, #0
  400b5e:	4603      	mov	r3, r0
  400b60:	71fb      	strb	r3, [r7, #7]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  400b62:	4909      	ldr	r1, [pc, #36]	; (400b88 <NVIC_ClearPendingIRQ+0x30>)
  400b64:	f997 3007 	ldrsb.w	r3, [r7, #7]
  400b68:	095b      	lsrs	r3, r3, #5
  400b6a:	79fa      	ldrb	r2, [r7, #7]
  400b6c:	f002 021f 	and.w	r2, r2, #31
  400b70:	2001      	movs	r0, #1
  400b72:	fa00 f202 	lsl.w	r2, r0, r2
  400b76:	3360      	adds	r3, #96	; 0x60
  400b78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  400b7c:	370c      	adds	r7, #12
  400b7e:	46bd      	mov	sp, r7
  400b80:	f85d 7b04 	ldr.w	r7, [sp], #4
  400b84:	4770      	bx	lr
  400b86:	bf00      	nop
  400b88:	e000e100 	.word	0xe000e100

00400b8c <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  400b8c:	b480      	push	{r7}
  400b8e:	b083      	sub	sp, #12
  400b90:	af00      	add	r7, sp, #0
  400b92:	4603      	mov	r3, r0
  400b94:	6039      	str	r1, [r7, #0]
  400b96:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
  400b98:	f997 3007 	ldrsb.w	r3, [r7, #7]
  400b9c:	2b00      	cmp	r3, #0
  400b9e:	da0b      	bge.n	400bb8 <NVIC_SetPriority+0x2c>
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  400ba0:	490d      	ldr	r1, [pc, #52]	; (400bd8 <NVIC_SetPriority+0x4c>)
  400ba2:	79fb      	ldrb	r3, [r7, #7]
  400ba4:	f003 030f 	and.w	r3, r3, #15
  400ba8:	3b04      	subs	r3, #4
  400baa:	683a      	ldr	r2, [r7, #0]
  400bac:	b2d2      	uxtb	r2, r2
  400bae:	0152      	lsls	r2, r2, #5
  400bb0:	b2d2      	uxtb	r2, r2
  400bb2:	440b      	add	r3, r1
  400bb4:	761a      	strb	r2, [r3, #24]
  400bb6:	e009      	b.n	400bcc <NVIC_SetPriority+0x40>
  else {
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  400bb8:	4908      	ldr	r1, [pc, #32]	; (400bdc <NVIC_SetPriority+0x50>)
  400bba:	f997 3007 	ldrsb.w	r3, [r7, #7]
  400bbe:	683a      	ldr	r2, [r7, #0]
  400bc0:	b2d2      	uxtb	r2, r2
  400bc2:	0152      	lsls	r2, r2, #5
  400bc4:	b2d2      	uxtb	r2, r2
  400bc6:	440b      	add	r3, r1
  400bc8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
  400bcc:	370c      	adds	r7, #12
  400bce:	46bd      	mov	sp, r7
  400bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
  400bd4:	4770      	bx	lr
  400bd6:	bf00      	nop
  400bd8:	e000ed00 	.word	0xe000ed00
  400bdc:	e000e100 	.word	0xe000e100

00400be0 <cpu_irq_save>:

static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
  400be0:	b480      	push	{r7}
  400be2:	b083      	sub	sp, #12
  400be4:	af00      	add	r7, sp, #0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  400be6:	f3ef 8310 	mrs	r3, PRIMASK
  400bea:	603b      	str	r3, [r7, #0]
  return(result);
  400bec:	683b      	ldr	r3, [r7, #0]
	irqflags_t flags = cpu_irq_is_enabled();
  400bee:	2b00      	cmp	r3, #0
  400bf0:	bf0c      	ite	eq
  400bf2:	2301      	moveq	r3, #1
  400bf4:	2300      	movne	r3, #0
  400bf6:	b2db      	uxtb	r3, r3
  400bf8:	607b      	str	r3, [r7, #4]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
  400bfa:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  400bfc:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  400c00:	4b04      	ldr	r3, [pc, #16]	; (400c14 <cpu_irq_save+0x34>)
  400c02:	2200      	movs	r2, #0
  400c04:	701a      	strb	r2, [r3, #0]
	return flags;
  400c06:	687b      	ldr	r3, [r7, #4]
}
  400c08:	4618      	mov	r0, r3
  400c0a:	370c      	adds	r7, #12
  400c0c:	46bd      	mov	sp, r7
  400c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
  400c12:	4770      	bx	lr
  400c14:	20400000 	.word	0x20400000

00400c18 <cpu_irq_is_enabled_flags>:

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
  400c18:	b480      	push	{r7}
  400c1a:	b083      	sub	sp, #12
  400c1c:	af00      	add	r7, sp, #0
  400c1e:	6078      	str	r0, [r7, #4]
	return (flags);
  400c20:	687b      	ldr	r3, [r7, #4]
  400c22:	2b00      	cmp	r3, #0
  400c24:	bf14      	ite	ne
  400c26:	2301      	movne	r3, #1
  400c28:	2300      	moveq	r3, #0
  400c2a:	b2db      	uxtb	r3, r3
}
  400c2c:	4618      	mov	r0, r3
  400c2e:	370c      	adds	r7, #12
  400c30:	46bd      	mov	sp, r7
  400c32:	f85d 7b04 	ldr.w	r7, [sp], #4
  400c36:	4770      	bx	lr

00400c38 <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
  400c38:	b580      	push	{r7, lr}
  400c3a:	b082      	sub	sp, #8
  400c3c:	af00      	add	r7, sp, #0
  400c3e:	6078      	str	r0, [r7, #4]
	if (cpu_irq_is_enabled_flags(flags))
  400c40:	6878      	ldr	r0, [r7, #4]
  400c42:	4b07      	ldr	r3, [pc, #28]	; (400c60 <cpu_irq_restore+0x28>)
  400c44:	4798      	blx	r3
  400c46:	4603      	mov	r3, r0
  400c48:	2b00      	cmp	r3, #0
  400c4a:	d005      	beq.n	400c58 <cpu_irq_restore+0x20>
		cpu_irq_enable();
  400c4c:	4b05      	ldr	r3, [pc, #20]	; (400c64 <cpu_irq_restore+0x2c>)
  400c4e:	2201      	movs	r2, #1
  400c50:	701a      	strb	r2, [r3, #0]
  400c52:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
  400c56:	b662      	cpsie	i
}
  400c58:	3708      	adds	r7, #8
  400c5a:	46bd      	mov	sp, r7
  400c5c:	bd80      	pop	{r7, pc}
  400c5e:	bf00      	nop
  400c60:	00400c19 	.word	0x00400c19
  400c64:	20400000 	.word	0x20400000

00400c68 <afec_ch_sanity_check>:
 * \param channel  AFEC channel number.
 *
 */
static inline void afec_ch_sanity_check(Afec *const afec,
		const enum afec_channel_num channel)
{
  400c68:	b480      	push	{r7}
  400c6a:	b083      	sub	sp, #12
  400c6c:	af00      	add	r7, sp, #0
  400c6e:	6078      	str	r0, [r7, #4]
  400c70:	460b      	mov	r3, r1
  400c72:	807b      	strh	r3, [r7, #2]
	#endif
	} else if (afec == AFEC1) {
		Assert(channel < NB_CH_AFE1);
	}
	UNUSED(channel);
}
  400c74:	370c      	adds	r7, #12
  400c76:	46bd      	mov	sp, r7
  400c78:	f85d 7b04 	ldr.w	r7, [sp], #4
  400c7c:	4770      	bx	lr
  400c7e:	bf00      	nop

00400c80 <afec_get_interrupt_status>:
 * \param afec  Base address of the AFEC.
 *
 * \return The interrupt status value.
 */
static inline uint32_t afec_get_interrupt_status(Afec *const afec)
{
  400c80:	b480      	push	{r7}
  400c82:	b083      	sub	sp, #12
  400c84:	af00      	add	r7, sp, #0
  400c86:	6078      	str	r0, [r7, #4]
	return afec->AFEC_ISR;
  400c88:	687b      	ldr	r3, [r7, #4]
  400c8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
  400c8c:	4618      	mov	r0, r3
  400c8e:	370c      	adds	r7, #12
  400c90:	46bd      	mov	sp, r7
  400c92:	f85d 7b04 	ldr.w	r7, [sp], #4
  400c96:	4770      	bx	lr

00400c98 <sleepmgr_lock_mode>:
 * not put the device to sleep in the deeper sleep modes.
 *
 * \param mode Sleep mode to lock.
 */
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
  400c98:	b580      	push	{r7, lr}
  400c9a:	b084      	sub	sp, #16
  400c9c:	af00      	add	r7, sp, #0
  400c9e:	4603      	mov	r3, r0
  400ca0:	71fb      	strb	r3, [r7, #7]
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
  400ca2:	79fb      	ldrb	r3, [r7, #7]
  400ca4:	4a0a      	ldr	r2, [pc, #40]	; (400cd0 <sleepmgr_lock_mode+0x38>)
  400ca6:	5cd3      	ldrb	r3, [r2, r3]
  400ca8:	2bff      	cmp	r3, #255	; 0xff
  400caa:	d100      	bne.n	400cae <sleepmgr_lock_mode+0x16>
		while (true) {
			// Warning: maximum value of sleepmgr_locks buffer is no more than 255.
			// Check APP or change the data type to uint16_t.
		}
  400cac:	e7fe      	b.n	400cac <sleepmgr_lock_mode+0x14>
	}

	// Enter a critical section
	flags = cpu_irq_save();
  400cae:	4b09      	ldr	r3, [pc, #36]	; (400cd4 <sleepmgr_lock_mode+0x3c>)
  400cb0:	4798      	blx	r3
  400cb2:	60f8      	str	r0, [r7, #12]

	++sleepmgr_locks[mode];
  400cb4:	79fb      	ldrb	r3, [r7, #7]
  400cb6:	4a06      	ldr	r2, [pc, #24]	; (400cd0 <sleepmgr_lock_mode+0x38>)
  400cb8:	5cd2      	ldrb	r2, [r2, r3]
  400cba:	3201      	adds	r2, #1
  400cbc:	b2d1      	uxtb	r1, r2
  400cbe:	4a04      	ldr	r2, [pc, #16]	; (400cd0 <sleepmgr_lock_mode+0x38>)
  400cc0:	54d1      	strb	r1, [r2, r3]

	// Leave the critical section
	cpu_irq_restore(flags);
  400cc2:	68f8      	ldr	r0, [r7, #12]
  400cc4:	4b04      	ldr	r3, [pc, #16]	; (400cd8 <sleepmgr_lock_mode+0x40>)
  400cc6:	4798      	blx	r3
#else
	UNUSED(mode);
#endif /* CONFIG_SLEEPMGR_ENABLE */
}
  400cc8:	3710      	adds	r7, #16
  400cca:	46bd      	mov	sp, r7
  400ccc:	bd80      	pop	{r7, pc}
  400cce:	bf00      	nop
  400cd0:	204009f0 	.word	0x204009f0
  400cd4:	00400be1 	.word	0x00400be1
  400cd8:	00400c39 	.word	0x00400c39

00400cdc <afec_find_inst_num>:
 * \param afec  Base address of the AFEC
 *
 * \return   AFEC instance number
 */
static uint32_t afec_find_inst_num(Afec *const afec)
{
  400cdc:	b480      	push	{r7}
  400cde:	b083      	sub	sp, #12
  400ce0:	af00      	add	r7, sp, #0
  400ce2:	6078      	str	r0, [r7, #4]
#if defined(AFEC1)
	if (afec == AFEC1) {
  400ce4:	687b      	ldr	r3, [r7, #4]
  400ce6:	4a09      	ldr	r2, [pc, #36]	; (400d0c <afec_find_inst_num+0x30>)
  400ce8:	4293      	cmp	r3, r2
  400cea:	d101      	bne.n	400cf0 <afec_find_inst_num+0x14>
		return 1;
  400cec:	2301      	movs	r3, #1
  400cee:	e006      	b.n	400cfe <afec_find_inst_num+0x22>
	}
#endif
#if defined(AFEC0)
	if (afec == AFEC0) {
  400cf0:	687b      	ldr	r3, [r7, #4]
  400cf2:	4a07      	ldr	r2, [pc, #28]	; (400d10 <afec_find_inst_num+0x34>)
  400cf4:	4293      	cmp	r3, r2
  400cf6:	d101      	bne.n	400cfc <afec_find_inst_num+0x20>
		return 0;
  400cf8:	2300      	movs	r3, #0
  400cfa:	e000      	b.n	400cfe <afec_find_inst_num+0x22>
	}
#endif
	return 0;
  400cfc:	2300      	movs	r3, #0
}
  400cfe:	4618      	mov	r0, r3
  400d00:	370c      	adds	r7, #12
  400d02:	46bd      	mov	sp, r7
  400d04:	f85d 7b04 	ldr.w	r7, [sp], #4
  400d08:	4770      	bx	lr
  400d0a:	bf00      	nop
  400d0c:	40064000 	.word	0x40064000
  400d10:	4003c000 	.word	0x4003c000

00400d14 <afec_find_pid>:
 * \param afec  Base address of the AFEC
 *
 * \return   AFEC Peripheral ID
 */
static uint32_t afec_find_pid(Afec *const afec)
{
  400d14:	b480      	push	{r7}
  400d16:	b083      	sub	sp, #12
  400d18:	af00      	add	r7, sp, #0
  400d1a:	6078      	str	r0, [r7, #4]
#if defined(ID_AFEC1)
	if (afec == AFEC1) {
  400d1c:	687b      	ldr	r3, [r7, #4]
  400d1e:	4a09      	ldr	r2, [pc, #36]	; (400d44 <afec_find_pid+0x30>)
  400d20:	4293      	cmp	r3, r2
  400d22:	d101      	bne.n	400d28 <afec_find_pid+0x14>
		return ID_AFEC1;
  400d24:	2328      	movs	r3, #40	; 0x28
  400d26:	e006      	b.n	400d36 <afec_find_pid+0x22>
	}
#endif
#if defined(ID_AFEC0)
	if (afec == AFEC0) {
  400d28:	687b      	ldr	r3, [r7, #4]
  400d2a:	4a07      	ldr	r2, [pc, #28]	; (400d48 <afec_find_pid+0x34>)
  400d2c:	4293      	cmp	r3, r2
  400d2e:	d101      	bne.n	400d34 <afec_find_pid+0x20>
		return ID_AFEC0;
  400d30:	231d      	movs	r3, #29
  400d32:	e000      	b.n	400d36 <afec_find_pid+0x22>
	}
#endif
	return ID_AFEC0;
  400d34:	231d      	movs	r3, #29
}
  400d36:	4618      	mov	r0, r3
  400d38:	370c      	adds	r7, #12
  400d3a:	46bd      	mov	sp, r7
  400d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
  400d40:	4770      	bx	lr
  400d42:	bf00      	nop
  400d44:	40064000 	.word	0x40064000
  400d48:	4003c000 	.word	0x4003c000

00400d4c <afec_set_config>:
 *
 * \param afec  Base address of the AFEC
 * \param config   Configuration for the AFEC
 */
static void afec_set_config(Afec *const afec, struct afec_config *config)
{
  400d4c:	b480      	push	{r7}
  400d4e:	b085      	sub	sp, #20
  400d50:	af00      	add	r7, sp, #0
  400d52:	6078      	str	r0, [r7, #4]
  400d54:	6039      	str	r1, [r7, #0]
	uint32_t reg = 0;
  400d56:	2300      	movs	r3, #0
  400d58:	60fb      	str	r3, [r7, #12]

	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  400d5a:	683b      	ldr	r3, [r7, #0]
  400d5c:	7cdb      	ldrb	r3, [r3, #19]
  400d5e:	2b00      	cmp	r3, #0
  400d60:	d002      	beq.n	400d68 <afec_set_config+0x1c>
  400d62:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
  400d66:	e000      	b.n	400d6a <afec_set_config+0x1e>
  400d68:	2200      	movs	r2, #0
		#if (SAMV71 || SAMV70 || SAME70 || SAMS70)
			AFEC_MR_PRESCAL((config->mck / config->afec_clock )- 1) |
  400d6a:	683b      	ldr	r3, [r7, #0]
  400d6c:	6859      	ldr	r1, [r3, #4]
  400d6e:	683b      	ldr	r3, [r7, #0]
  400d70:	689b      	ldr	r3, [r3, #8]
  400d72:	fbb1 f3f3 	udiv	r3, r1, r3
  400d76:	3b01      	subs	r3, #1
  400d78:	021b      	lsls	r3, r3, #8
  400d7a:	b29b      	uxth	r3, r3
 */
static void afec_set_config(Afec *const afec, struct afec_config *config)
{
	uint32_t reg = 0;

	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  400d7c:	431a      	orrs	r2, r3
		#else
			(config->anach ? AFEC_MR_ANACH_ALLOWED : 0) |
			AFEC_MR_PRESCAL(config->mck / (2 * config->afec_clock) - 1) |
			(config->settling_time) |		
		#endif
			AFEC_MR_TRACKTIM(config->tracktim) |
  400d7e:	683b      	ldr	r3, [r7, #0]
  400d80:	7c1b      	ldrb	r3, [r3, #16]
  400d82:	061b      	lsls	r3, r3, #24
	uint32_t reg = 0;

	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
		#if (SAMV71 || SAMV70 || SAME70 || SAMS70)
			AFEC_MR_PRESCAL((config->mck / config->afec_clock )- 1) |
			AFEC_MR_ONE |
  400d84:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
  400d88:	431a      	orrs	r2, r3
			(config->anach ? AFEC_MR_ANACH_ALLOWED : 0) |
			AFEC_MR_PRESCAL(config->mck / (2 * config->afec_clock) - 1) |
			(config->settling_time) |		
		#endif
			AFEC_MR_TRACKTIM(config->tracktim) |
			AFEC_MR_TRANSFER(config->transfer) |
  400d8a:	683b      	ldr	r3, [r7, #0]
  400d8c:	7c5b      	ldrb	r3, [r3, #17]
  400d8e:	071b      	lsls	r3, r3, #28
		#else
			(config->anach ? AFEC_MR_ANACH_ALLOWED : 0) |
			AFEC_MR_PRESCAL(config->mck / (2 * config->afec_clock) - 1) |
			(config->settling_time) |		
		#endif
			AFEC_MR_TRACKTIM(config->tracktim) |
  400d90:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
  400d94:	431a      	orrs	r2, r3
			AFEC_MR_TRANSFER(config->transfer) |
			(config->startup_time);
  400d96:	683b      	ldr	r3, [r7, #0]
  400d98:	68db      	ldr	r3, [r3, #12]
			(config->anach ? AFEC_MR_ANACH_ALLOWED : 0) |
			AFEC_MR_PRESCAL(config->mck / (2 * config->afec_clock) - 1) |
			(config->settling_time) |		
		#endif
			AFEC_MR_TRACKTIM(config->tracktim) |
			AFEC_MR_TRANSFER(config->transfer) |
  400d9a:	4313      	orrs	r3, r2
 */
static void afec_set_config(Afec *const afec, struct afec_config *config)
{
	uint32_t reg = 0;

	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  400d9c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
  400da0:	60fb      	str	r3, [r7, #12]
		#endif
			AFEC_MR_TRACKTIM(config->tracktim) |
			AFEC_MR_TRANSFER(config->transfer) |
			(config->startup_time);

	afec->AFEC_MR = reg;
  400da2:	687b      	ldr	r3, [r7, #4]
  400da4:	68fa      	ldr	r2, [r7, #12]
  400da6:	605a      	str	r2, [r3, #4]

	afec->AFEC_EMR = (config->tag ? AFEC_EMR_TAG : 0) |
  400da8:	683b      	ldr	r3, [r7, #0]
  400daa:	7d1b      	ldrb	r3, [r3, #20]
  400dac:	2b00      	cmp	r3, #0
  400dae:	d002      	beq.n	400db6 <afec_set_config+0x6a>
  400db0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
  400db4:	e000      	b.n	400db8 <afec_set_config+0x6c>
  400db6:	2200      	movs	r2, #0
			(config->resolution) |
  400db8:	683b      	ldr	r3, [r7, #0]
  400dba:	681b      	ldr	r3, [r3, #0]
			AFEC_MR_TRANSFER(config->transfer) |
			(config->startup_time);

	afec->AFEC_MR = reg;

	afec->AFEC_EMR = (config->tag ? AFEC_EMR_TAG : 0) |
  400dbc:	431a      	orrs	r2, r3
			(config->resolution) |
			(config->stm ? AFEC_EMR_STM : 0);
  400dbe:	683b      	ldr	r3, [r7, #0]
  400dc0:	7d5b      	ldrb	r3, [r3, #21]
  400dc2:	2b00      	cmp	r3, #0
  400dc4:	d002      	beq.n	400dcc <afec_set_config+0x80>
  400dc6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
  400dca:	e000      	b.n	400dce <afec_set_config+0x82>
  400dcc:	2300      	movs	r3, #0
			(config->startup_time);

	afec->AFEC_MR = reg;

	afec->AFEC_EMR = (config->tag ? AFEC_EMR_TAG : 0) |
			(config->resolution) |
  400dce:	431a      	orrs	r2, r3
			AFEC_MR_TRANSFER(config->transfer) |
			(config->startup_time);

	afec->AFEC_MR = reg;

	afec->AFEC_EMR = (config->tag ? AFEC_EMR_TAG : 0) |
  400dd0:	687b      	ldr	r3, [r7, #4]
  400dd2:	609a      	str	r2, [r3, #8]
			(config->resolution) |
			(config->stm ? AFEC_EMR_STM : 0);
  #if (SAMV71 || SAMV70 || SAME70 || SAMS70)
	afec->AFEC_ACR = AFEC_ACR_IBCTL(config->ibctl) | AFEC_ACR_PGA0EN | AFEC_ACR_PGA1EN;
  400dd4:	683b      	ldr	r3, [r7, #0]
  400dd6:	7d9b      	ldrb	r3, [r3, #22]
  400dd8:	021b      	lsls	r3, r3, #8
  400dda:	f403 7340 	and.w	r3, r3, #768	; 0x300
  400dde:	f043 020c 	orr.w	r2, r3, #12
  400de2:	687b      	ldr	r3, [r7, #4]
  400de4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  #else
    afec->AFEC_ACR = AFEC_ACR_IBCTL(config->ibctl);
  #endif
}
  400de8:	3714      	adds	r7, #20
  400dea:	46bd      	mov	sp, r7
  400dec:	f85d 7b04 	ldr.w	r7, [sp], #4
  400df0:	4770      	bx	lr
  400df2:	bf00      	nop

00400df4 <afec_ch_set_config>:
 * \param channel The channel number
 * \param config   Configuration for the AFEC channel
 */
void afec_ch_set_config(Afec *const afec, const enum afec_channel_num channel,
		struct afec_ch_config *config)
{
  400df4:	b580      	push	{r7, lr}
  400df6:	b086      	sub	sp, #24
  400df8:	af00      	add	r7, sp, #0
  400dfa:	60f8      	str	r0, [r7, #12]
  400dfc:	460b      	mov	r3, r1
  400dfe:	607a      	str	r2, [r7, #4]
  400e00:	817b      	strh	r3, [r7, #10]
	afec_ch_sanity_check(afec, channel);
  400e02:	897b      	ldrh	r3, [r7, #10]
  400e04:	68f8      	ldr	r0, [r7, #12]
  400e06:	4619      	mov	r1, r3
  400e08:	4b1d      	ldr	r3, [pc, #116]	; (400e80 <afec_ch_set_config+0x8c>)
  400e0a:	4798      	blx	r3
	uint32_t reg = 0;
  400e0c:	2300      	movs	r3, #0
  400e0e:	617b      	str	r3, [r7, #20]

	reg = afec->AFEC_DIFFR;
  400e10:	68fb      	ldr	r3, [r7, #12]
  400e12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
  400e14:	617b      	str	r3, [r7, #20]
	reg &= ~(0x1u << channel);
  400e16:	897b      	ldrh	r3, [r7, #10]
  400e18:	2201      	movs	r2, #1
  400e1a:	fa02 f303 	lsl.w	r3, r2, r3
  400e1e:	43db      	mvns	r3, r3
  400e20:	697a      	ldr	r2, [r7, #20]
  400e22:	4013      	ands	r3, r2
  400e24:	617b      	str	r3, [r7, #20]
	reg |= (config->diff) ? (0x1u << channel) : 0;
  400e26:	687b      	ldr	r3, [r7, #4]
  400e28:	781b      	ldrb	r3, [r3, #0]
  400e2a:	2b00      	cmp	r3, #0
  400e2c:	d004      	beq.n	400e38 <afec_ch_set_config+0x44>
  400e2e:	897b      	ldrh	r3, [r7, #10]
  400e30:	2201      	movs	r2, #1
  400e32:	fa02 f303 	lsl.w	r3, r2, r3
  400e36:	e000      	b.n	400e3a <afec_ch_set_config+0x46>
  400e38:	2300      	movs	r3, #0
  400e3a:	697a      	ldr	r2, [r7, #20]
  400e3c:	4313      	orrs	r3, r2
  400e3e:	617b      	str	r3, [r7, #20]
	afec->AFEC_DIFFR = reg;
  400e40:	68fb      	ldr	r3, [r7, #12]
  400e42:	697a      	ldr	r2, [r7, #20]
  400e44:	661a      	str	r2, [r3, #96]	; 0x60

	reg = afec->AFEC_CGR;
  400e46:	68fb      	ldr	r3, [r7, #12]
  400e48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
  400e4a:	617b      	str	r3, [r7, #20]
	reg &= ~(0x03u << (2 * channel));
  400e4c:	897b      	ldrh	r3, [r7, #10]
  400e4e:	005b      	lsls	r3, r3, #1
  400e50:	2203      	movs	r2, #3
  400e52:	fa02 f303 	lsl.w	r3, r2, r3
  400e56:	43db      	mvns	r3, r3
  400e58:	697a      	ldr	r2, [r7, #20]
  400e5a:	4013      	ands	r3, r2
  400e5c:	617b      	str	r3, [r7, #20]
	reg |= (config->gain) << (2 * channel);
  400e5e:	687b      	ldr	r3, [r7, #4]
  400e60:	785b      	ldrb	r3, [r3, #1]
  400e62:	461a      	mov	r2, r3
  400e64:	897b      	ldrh	r3, [r7, #10]
  400e66:	005b      	lsls	r3, r3, #1
  400e68:	fa02 f303 	lsl.w	r3, r2, r3
  400e6c:	461a      	mov	r2, r3
  400e6e:	697b      	ldr	r3, [r7, #20]
  400e70:	4313      	orrs	r3, r2
  400e72:	617b      	str	r3, [r7, #20]
	afec->AFEC_CGR = reg;
  400e74:	68fb      	ldr	r3, [r7, #12]
  400e76:	697a      	ldr	r2, [r7, #20]
  400e78:	655a      	str	r2, [r3, #84]	; 0x54
}
  400e7a:	3718      	adds	r7, #24
  400e7c:	46bd      	mov	sp, r7
  400e7e:	bd80      	pop	{r7, pc}
  400e80:	00400c69 	.word	0x00400c69

00400e84 <afec_ch_get_config_defaults>:
 * - Gain value is 1
 *
 * \param cfg Pointer to channel configuration structure to be initiated.
 */
void afec_ch_get_config_defaults(struct afec_ch_config *const cfg)
{
  400e84:	b480      	push	{r7}
  400e86:	b083      	sub	sp, #12
  400e88:	af00      	add	r7, sp, #0
  400e8a:	6078      	str	r0, [r7, #4]
	/*Sanity check argument. */
	Assert(cfg);

	cfg->diff = false;
  400e8c:	687b      	ldr	r3, [r7, #4]
  400e8e:	2200      	movs	r2, #0
  400e90:	701a      	strb	r2, [r3, #0]
   	cfg->gain = AFEC_GAINVALUE_1;
  400e92:	687b      	ldr	r3, [r7, #4]
  400e94:	2201      	movs	r2, #1
  400e96:	705a      	strb	r2, [r3, #1]

}
  400e98:	370c      	adds	r7, #12
  400e9a:	46bd      	mov	sp, r7
  400e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
  400ea0:	4770      	bx	lr
  400ea2:	bf00      	nop

00400ea4 <afec_init>:
 *
 * \retval STATUS_OK  Initialization is finished.
 * \retval STATUS_ERR_BUSY  Initialization failed.
 */
enum status_code afec_init(Afec *const afec, struct afec_config *config)
{
  400ea4:	b580      	push	{r7, lr}
  400ea6:	b084      	sub	sp, #16
  400ea8:	af00      	add	r7, sp, #0
  400eaa:	6078      	str	r0, [r7, #4]
  400eac:	6039      	str	r1, [r7, #0]
	Assert(afec);
	Assert(config);

	if ((afec_get_interrupt_status(afec) & AFEC_ISR_DRDY) == AFEC_ISR_DRDY) {
  400eae:	6878      	ldr	r0, [r7, #4]
  400eb0:	4b17      	ldr	r3, [pc, #92]	; (400f10 <afec_init+0x6c>)
  400eb2:	4798      	blx	r3
  400eb4:	4603      	mov	r3, r0
  400eb6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  400eba:	2b00      	cmp	r3, #0
  400ebc:	d001      	beq.n	400ec2 <afec_init+0x1e>
		return STATUS_ERR_BUSY;
  400ebe:	2319      	movs	r3, #25
  400ec0:	e021      	b.n	400f06 <afec_init+0x62>
	}

	/* Reset and configure the AFEC module */
	afec->AFEC_CR = AFEC_CR_SWRST;
  400ec2:	687b      	ldr	r3, [r7, #4]
  400ec4:	2201      	movs	r2, #1
  400ec6:	601a      	str	r2, [r3, #0]
	afec_set_config(afec, config);
  400ec8:	6878      	ldr	r0, [r7, #4]
  400eca:	6839      	ldr	r1, [r7, #0]
  400ecc:	4b11      	ldr	r3, [pc, #68]	; (400f14 <afec_init+0x70>)
  400ece:	4798      	blx	r3

	uint32_t i, j;
	for (i = 0; i < NUM_OF_AFEC; i++) {
  400ed0:	2300      	movs	r3, #0
  400ed2:	60fb      	str	r3, [r7, #12]
  400ed4:	e013      	b.n	400efe <afec_init+0x5a>
		for (j = 0; j < _AFEC_NUM_OF_INTERRUPT_SOURCE; j++) {
  400ed6:	2300      	movs	r3, #0
  400ed8:	60bb      	str	r3, [r7, #8]
  400eda:	e00a      	b.n	400ef2 <afec_init+0x4e>
			afec_callback_pointer[i][j] = 0;
  400edc:	490e      	ldr	r1, [pc, #56]	; (400f18 <afec_init+0x74>)
  400ede:	68fb      	ldr	r3, [r7, #12]
  400ee0:	011a      	lsls	r2, r3, #4
  400ee2:	68bb      	ldr	r3, [r7, #8]
  400ee4:	4413      	add	r3, r2
  400ee6:	2200      	movs	r2, #0
  400ee8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	afec->AFEC_CR = AFEC_CR_SWRST;
	afec_set_config(afec, config);

	uint32_t i, j;
	for (i = 0; i < NUM_OF_AFEC; i++) {
		for (j = 0; j < _AFEC_NUM_OF_INTERRUPT_SOURCE; j++) {
  400eec:	68bb      	ldr	r3, [r7, #8]
  400eee:	3301      	adds	r3, #1
  400ef0:	60bb      	str	r3, [r7, #8]
  400ef2:	68bb      	ldr	r3, [r7, #8]
  400ef4:	2b0f      	cmp	r3, #15
  400ef6:	d9f1      	bls.n	400edc <afec_init+0x38>
	/* Reset and configure the AFEC module */
	afec->AFEC_CR = AFEC_CR_SWRST;
	afec_set_config(afec, config);

	uint32_t i, j;
	for (i = 0; i < NUM_OF_AFEC; i++) {
  400ef8:	68fb      	ldr	r3, [r7, #12]
  400efa:	3301      	adds	r3, #1
  400efc:	60fb      	str	r3, [r7, #12]
  400efe:	68fb      	ldr	r3, [r7, #12]
  400f00:	2b01      	cmp	r3, #1
  400f02:	d9e8      	bls.n	400ed6 <afec_init+0x32>
		for (j = 0; j < _AFEC_NUM_OF_INTERRUPT_SOURCE; j++) {
			afec_callback_pointer[i][j] = 0;
		}
	}

	return STATUS_OK;
  400f04:	2300      	movs	r3, #0
  400f06:	b25b      	sxtb	r3, r3
}
  400f08:	4618      	mov	r0, r3
  400f0a:	3710      	adds	r7, #16
  400f0c:	46bd      	mov	sp, r7
  400f0e:	bd80      	pop	{r7, pc}
  400f10:	00400c81 	.word	0x00400c81
  400f14:	00400d4d 	.word	0x00400d4d
  400f18:	20400a04 	.word	0x20400a04

00400f1c <afec_set_callback>:
 * \param callback  Callback function pointer
 * \param irq_level Interrupt level
 */
void afec_set_callback(Afec *const afec, enum afec_interrupt_source source,
		afec_callback_t callback, uint8_t irq_level)
{
  400f1c:	b580      	push	{r7, lr}
  400f1e:	b086      	sub	sp, #24
  400f20:	af00      	add	r7, sp, #0
  400f22:	60f8      	str	r0, [r7, #12]
  400f24:	60b9      	str	r1, [r7, #8]
  400f26:	607a      	str	r2, [r7, #4]
  400f28:	70fb      	strb	r3, [r7, #3]
	Assert(afec);
	Assert(callback);

	uint32_t i = afec_find_inst_num(afec);
  400f2a:	68f8      	ldr	r0, [r7, #12]
  400f2c:	4b17      	ldr	r3, [pc, #92]	; (400f8c <afec_set_callback+0x70>)
  400f2e:	4798      	blx	r3
  400f30:	6178      	str	r0, [r7, #20]
	afec_callback_pointer[i][source] = callback;
  400f32:	4917      	ldr	r1, [pc, #92]	; (400f90 <afec_set_callback+0x74>)
  400f34:	697b      	ldr	r3, [r7, #20]
  400f36:	011a      	lsls	r2, r3, #4
  400f38:	68bb      	ldr	r3, [r7, #8]
  400f3a:	4413      	add	r3, r2
  400f3c:	687a      	ldr	r2, [r7, #4]
  400f3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	if (!i) {
  400f42:	697b      	ldr	r3, [r7, #20]
  400f44:	2b00      	cmp	r3, #0
  400f46:	d10b      	bne.n	400f60 <afec_set_callback+0x44>
		irq_register_handler(AFEC0_IRQn, irq_level);
  400f48:	201d      	movs	r0, #29
  400f4a:	4b12      	ldr	r3, [pc, #72]	; (400f94 <afec_set_callback+0x78>)
  400f4c:	4798      	blx	r3
  400f4e:	78fb      	ldrb	r3, [r7, #3]
  400f50:	201d      	movs	r0, #29
  400f52:	4619      	mov	r1, r3
  400f54:	4b10      	ldr	r3, [pc, #64]	; (400f98 <afec_set_callback+0x7c>)
  400f56:	4798      	blx	r3
  400f58:	201d      	movs	r0, #29
  400f5a:	4b10      	ldr	r3, [pc, #64]	; (400f9c <afec_set_callback+0x80>)
  400f5c:	4798      	blx	r3
  400f5e:	e00d      	b.n	400f7c <afec_set_callback+0x60>
	} else if (i == 1) {
  400f60:	697b      	ldr	r3, [r7, #20]
  400f62:	2b01      	cmp	r3, #1
  400f64:	d10a      	bne.n	400f7c <afec_set_callback+0x60>
		irq_register_handler(AFEC1_IRQn, irq_level);
  400f66:	2028      	movs	r0, #40	; 0x28
  400f68:	4b0a      	ldr	r3, [pc, #40]	; (400f94 <afec_set_callback+0x78>)
  400f6a:	4798      	blx	r3
  400f6c:	78fb      	ldrb	r3, [r7, #3]
  400f6e:	2028      	movs	r0, #40	; 0x28
  400f70:	4619      	mov	r1, r3
  400f72:	4b09      	ldr	r3, [pc, #36]	; (400f98 <afec_set_callback+0x7c>)
  400f74:	4798      	blx	r3
  400f76:	2028      	movs	r0, #40	; 0x28
  400f78:	4b08      	ldr	r3, [pc, #32]	; (400f9c <afec_set_callback+0x80>)
  400f7a:	4798      	blx	r3
	}
	/* Enable the specified interrupt source */
	afec_enable_interrupt(afec, source);
  400f7c:	68f8      	ldr	r0, [r7, #12]
  400f7e:	68b9      	ldr	r1, [r7, #8]
  400f80:	4b07      	ldr	r3, [pc, #28]	; (400fa0 <afec_set_callback+0x84>)
  400f82:	4798      	blx	r3
}
  400f84:	3718      	adds	r7, #24
  400f86:	46bd      	mov	sp, r7
  400f88:	bd80      	pop	{r7, pc}
  400f8a:	bf00      	nop
  400f8c:	00400cdd 	.word	0x00400cdd
  400f90:	20400a04 	.word	0x20400a04
  400f94:	00400b59 	.word	0x00400b59
  400f98:	00400b8d 	.word	0x00400b8d
  400f9c:	00400b29 	.word	0x00400b29
  400fa0:	00400fa5 	.word	0x00400fa5

00400fa4 <afec_enable_interrupt>:
 * \param afec  Base address of the AFEC.
 * \param interrupt_source Interrupts to be enabled.
 */
void afec_enable_interrupt(Afec *const afec,
		enum afec_interrupt_source interrupt_source)
{
  400fa4:	b480      	push	{r7}
  400fa6:	b083      	sub	sp, #12
  400fa8:	af00      	add	r7, sp, #0
  400faa:	6078      	str	r0, [r7, #4]
  400fac:	6039      	str	r1, [r7, #0]
	if (interrupt_source == AFEC_INTERRUPT_ALL) {
  400fae:	683b      	ldr	r3, [r7, #0]
  400fb0:	4a19      	ldr	r2, [pc, #100]	; (401018 <afec_enable_interrupt+0x74>)
  400fb2:	4293      	cmp	r3, r2
  400fb4:	d103      	bne.n	400fbe <afec_enable_interrupt+0x1a>
		afec->AFEC_IER = AFEC_INTERRUPT_ALL;
  400fb6:	687b      	ldr	r3, [r7, #4]
  400fb8:	4a17      	ldr	r2, [pc, #92]	; (401018 <afec_enable_interrupt+0x74>)
  400fba:	625a      	str	r2, [r3, #36]	; 0x24
		return;
  400fbc:	e026      	b.n	40100c <afec_enable_interrupt+0x68>
	}

	if (interrupt_source < AFEC_INTERRUPT_DATA_READY) {
  400fbe:	683b      	ldr	r3, [r7, #0]
  400fc0:	2b0b      	cmp	r3, #11
  400fc2:	d80f      	bhi.n	400fe4 <afec_enable_interrupt+0x40>
	  #if (SAMV71 || SAMV70 || SAME70 || SAMS70)
		if (interrupt_source == AFEC_INTERRUPT_EOC_11) {
  400fc4:	683b      	ldr	r3, [r7, #0]
  400fc6:	2b0b      	cmp	r3, #11
  400fc8:	d104      	bne.n	400fd4 <afec_enable_interrupt+0x30>
			afec->AFEC_IER = 1 << AFEC_TEMP_INT_SOURCE_NUM;
  400fca:	687b      	ldr	r3, [r7, #4]
  400fcc:	f44f 6200 	mov.w	r2, #2048	; 0x800
  400fd0:	625a      	str	r2, [r3, #36]	; 0x24
  400fd2:	e01b      	b.n	40100c <afec_enable_interrupt+0x68>
	  #else
		if (interrupt_source == AFEC_INTERRUPT_EOC_15) {
			afec->AFEC_IER = 1 << AFEC_TEMP_INT_SOURCE_NUM;	  
	  #endif 
		} else {
			afec->AFEC_IER = 1 << interrupt_source;
  400fd4:	683b      	ldr	r3, [r7, #0]
  400fd6:	2201      	movs	r2, #1
  400fd8:	fa02 f303 	lsl.w	r3, r2, r3
  400fdc:	461a      	mov	r2, r3
  400fde:	687b      	ldr	r3, [r7, #4]
  400fe0:	625a      	str	r2, [r3, #36]	; 0x24
  400fe2:	e013      	b.n	40100c <afec_enable_interrupt+0x68>
		}
	} else if (interrupt_source < AFEC_INTERRUPT_TEMP_CHANGE) {
  400fe4:	683b      	ldr	r3, [r7, #0]
  400fe6:	2b0e      	cmp	r3, #14
  400fe8:	d808      	bhi.n	400ffc <afec_enable_interrupt+0x58>
		afec->AFEC_IER = 1 << (interrupt_source + AFEC_INTERRUPT_GAP1);
  400fea:	683b      	ldr	r3, [r7, #0]
  400fec:	330c      	adds	r3, #12
  400fee:	461a      	mov	r2, r3
  400ff0:	2301      	movs	r3, #1
  400ff2:	4093      	lsls	r3, r2
  400ff4:	461a      	mov	r2, r3
  400ff6:	687b      	ldr	r3, [r7, #4]
  400ff8:	625a      	str	r2, [r3, #36]	; 0x24
  400ffa:	e007      	b.n	40100c <afec_enable_interrupt+0x68>
	} else {
		afec->AFEC_IER = 1 << (interrupt_source + AFEC_INTERRUPT_GAP1
				+ AFEC_INTERRUPT_GAP2);
  400ffc:	683b      	ldr	r3, [r7, #0]
  400ffe:	330f      	adds	r3, #15
			afec->AFEC_IER = 1 << interrupt_source;
		}
	} else if (interrupt_source < AFEC_INTERRUPT_TEMP_CHANGE) {
		afec->AFEC_IER = 1 << (interrupt_source + AFEC_INTERRUPT_GAP1);
	} else {
		afec->AFEC_IER = 1 << (interrupt_source + AFEC_INTERRUPT_GAP1
  401000:	461a      	mov	r2, r3
  401002:	2301      	movs	r3, #1
  401004:	4093      	lsls	r3, r2
  401006:	461a      	mov	r2, r3
  401008:	687b      	ldr	r3, [r7, #4]
  40100a:	625a      	str	r2, [r3, #36]	; 0x24
				+ AFEC_INTERRUPT_GAP2);
	}
}
  40100c:	370c      	adds	r7, #12
  40100e:	46bd      	mov	sp, r7
  401010:	f85d 7b04 	ldr.w	r7, [sp], #4
  401014:	4770      	bx	lr
  401016:	bf00      	nop
  401018:	47000fff 	.word	0x47000fff

0040101c <afec_interrupt>:
 * \param inst_num AFEC instance number to handle interrupt for
 * \param source   Interrupt source number
 */
static void afec_interrupt(uint8_t inst_num,
		enum afec_interrupt_source source)
{
  40101c:	b580      	push	{r7, lr}
  40101e:	b082      	sub	sp, #8
  401020:	af00      	add	r7, sp, #0
  401022:	4603      	mov	r3, r0
  401024:	6039      	str	r1, [r7, #0]
  401026:	71fb      	strb	r3, [r7, #7]
	if (afec_callback_pointer[inst_num][source]) {
  401028:	79fb      	ldrb	r3, [r7, #7]
  40102a:	4909      	ldr	r1, [pc, #36]	; (401050 <afec_interrupt+0x34>)
  40102c:	011a      	lsls	r2, r3, #4
  40102e:	683b      	ldr	r3, [r7, #0]
  401030:	4413      	add	r3, r2
  401032:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
  401036:	2b00      	cmp	r3, #0
  401038:	d007      	beq.n	40104a <afec_interrupt+0x2e>
		afec_callback_pointer[inst_num][source]();
  40103a:	79fb      	ldrb	r3, [r7, #7]
  40103c:	4904      	ldr	r1, [pc, #16]	; (401050 <afec_interrupt+0x34>)
  40103e:	011a      	lsls	r2, r3, #4
  401040:	683b      	ldr	r3, [r7, #0]
  401042:	4413      	add	r3, r2
  401044:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
  401048:	4798      	blx	r3
	}
}
  40104a:	3708      	adds	r7, #8
  40104c:	46bd      	mov	sp, r7
  40104e:	bd80      	pop	{r7, pc}
  401050:	20400a04 	.word	0x20400a04

00401054 <afec_process_callback>:
 * \brief Call the callback function if the corresponding interrupt is asserted
 *
 * \param afec  Base address of the AFEC.
 */
static void afec_process_callback(Afec *const afec)
{
  401054:	b580      	push	{r7, lr}
  401056:	b086      	sub	sp, #24
  401058:	af00      	add	r7, sp, #0
  40105a:	6078      	str	r0, [r7, #4]
	volatile uint32_t status;
	uint32_t cnt, inst_num;

	status = afec_get_interrupt_status(afec);
  40105c:	6878      	ldr	r0, [r7, #4]
  40105e:	4b25      	ldr	r3, [pc, #148]	; (4010f4 <afec_process_callback+0xa0>)
  401060:	4798      	blx	r3
  401062:	4603      	mov	r3, r0
  401064:	60fb      	str	r3, [r7, #12]
	inst_num = afec_find_inst_num(afec);
  401066:	6878      	ldr	r0, [r7, #4]
  401068:	4b23      	ldr	r3, [pc, #140]	; (4010f8 <afec_process_callback+0xa4>)
  40106a:	4798      	blx	r3
  40106c:	6138      	str	r0, [r7, #16]

	for (cnt = 0; cnt < _AFEC_NUM_OF_INTERRUPT_SOURCE; cnt++) {
  40106e:	2300      	movs	r3, #0
  401070:	617b      	str	r3, [r7, #20]
  401072:	e039      	b.n	4010e8 <afec_process_callback+0x94>
		if (cnt < AFEC_INTERRUPT_DATA_READY) {
  401074:	697b      	ldr	r3, [r7, #20]
  401076:	2b0b      	cmp	r3, #11
  401078:	d80f      	bhi.n	40109a <afec_process_callback+0x46>
				if (status & (1 << cnt)) {
					afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
				}
			}
		#elif defined __SAM4E8E__  || defined __SAM4E16E__ || SAMV71 || SAMV70 || SAMS70 || SAME70
			if (status & (1 << cnt)) {
  40107a:	697b      	ldr	r3, [r7, #20]
  40107c:	2201      	movs	r2, #1
  40107e:	fa02 f303 	lsl.w	r3, r2, r3
  401082:	461a      	mov	r2, r3
  401084:	68fb      	ldr	r3, [r7, #12]
  401086:	4013      	ands	r3, r2
  401088:	2b00      	cmp	r3, #0
  40108a:	d02a      	beq.n	4010e2 <afec_process_callback+0x8e>
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
  40108c:	693b      	ldr	r3, [r7, #16]
  40108e:	b2db      	uxtb	r3, r3
  401090:	4618      	mov	r0, r3
  401092:	6979      	ldr	r1, [r7, #20]
  401094:	4b19      	ldr	r3, [pc, #100]	; (4010fc <afec_process_callback+0xa8>)
  401096:	4798      	blx	r3
  401098:	e023      	b.n	4010e2 <afec_process_callback+0x8e>
			}
		#endif
		} else if (cnt < AFEC_INTERRUPT_TEMP_CHANGE) {
  40109a:	697b      	ldr	r3, [r7, #20]
  40109c:	2b0e      	cmp	r3, #14
  40109e:	d810      	bhi.n	4010c2 <afec_process_callback+0x6e>
			if (status & (1 << (cnt + AFEC_INTERRUPT_GAP1))) {
  4010a0:	697b      	ldr	r3, [r7, #20]
  4010a2:	330c      	adds	r3, #12
  4010a4:	461a      	mov	r2, r3
  4010a6:	2301      	movs	r3, #1
  4010a8:	4093      	lsls	r3, r2
  4010aa:	461a      	mov	r2, r3
  4010ac:	68fb      	ldr	r3, [r7, #12]
  4010ae:	4013      	ands	r3, r2
  4010b0:	2b00      	cmp	r3, #0
  4010b2:	d016      	beq.n	4010e2 <afec_process_callback+0x8e>
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
  4010b4:	693b      	ldr	r3, [r7, #16]
  4010b6:	b2db      	uxtb	r3, r3
  4010b8:	4618      	mov	r0, r3
  4010ba:	6979      	ldr	r1, [r7, #20]
  4010bc:	4b0f      	ldr	r3, [pc, #60]	; (4010fc <afec_process_callback+0xa8>)
  4010be:	4798      	blx	r3
  4010c0:	e00f      	b.n	4010e2 <afec_process_callback+0x8e>
			}
		} else {
			if (status & (1 << (cnt + AFEC_INTERRUPT_GAP1 + AFEC_INTERRUPT_GAP2))) {
  4010c2:	697b      	ldr	r3, [r7, #20]
  4010c4:	330f      	adds	r3, #15
  4010c6:	461a      	mov	r2, r3
  4010c8:	2301      	movs	r3, #1
  4010ca:	4093      	lsls	r3, r2
  4010cc:	461a      	mov	r2, r3
  4010ce:	68fb      	ldr	r3, [r7, #12]
  4010d0:	4013      	ands	r3, r2
  4010d2:	2b00      	cmp	r3, #0
  4010d4:	d005      	beq.n	4010e2 <afec_process_callback+0x8e>
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
  4010d6:	693b      	ldr	r3, [r7, #16]
  4010d8:	b2db      	uxtb	r3, r3
  4010da:	4618      	mov	r0, r3
  4010dc:	6979      	ldr	r1, [r7, #20]
  4010de:	4b07      	ldr	r3, [pc, #28]	; (4010fc <afec_process_callback+0xa8>)
  4010e0:	4798      	blx	r3
	uint32_t cnt, inst_num;

	status = afec_get_interrupt_status(afec);
	inst_num = afec_find_inst_num(afec);

	for (cnt = 0; cnt < _AFEC_NUM_OF_INTERRUPT_SOURCE; cnt++) {
  4010e2:	697b      	ldr	r3, [r7, #20]
  4010e4:	3301      	adds	r3, #1
  4010e6:	617b      	str	r3, [r7, #20]
  4010e8:	697b      	ldr	r3, [r7, #20]
  4010ea:	2b0f      	cmp	r3, #15
  4010ec:	d9c2      	bls.n	401074 <afec_process_callback+0x20>
			if (status & (1 << (cnt + AFEC_INTERRUPT_GAP1 + AFEC_INTERRUPT_GAP2))) {
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
			}
		}
	}
}
  4010ee:	3718      	adds	r7, #24
  4010f0:	46bd      	mov	sp, r7
  4010f2:	bd80      	pop	{r7, pc}
  4010f4:	00400c81 	.word	0x00400c81
  4010f8:	00400cdd 	.word	0x00400cdd
  4010fc:	0040101d 	.word	0x0040101d

00401100 <AFEC0_Handler>:

/**
 * \brief Interrupt handler for AFEC0.
 */
void AFEC0_Handler(void)
{
  401100:	b580      	push	{r7, lr}
  401102:	af00      	add	r7, sp, #0
	afec_process_callback(AFEC0);
  401104:	4801      	ldr	r0, [pc, #4]	; (40110c <AFEC0_Handler+0xc>)
  401106:	4b02      	ldr	r3, [pc, #8]	; (401110 <AFEC0_Handler+0x10>)
  401108:	4798      	blx	r3
}
  40110a:	bd80      	pop	{r7, pc}
  40110c:	4003c000 	.word	0x4003c000
  401110:	00401055 	.word	0x00401055

00401114 <AFEC1_Handler>:

/**
 * \brief Interrupt handler for AFEC1.
 */
void AFEC1_Handler(void)
{
  401114:	b580      	push	{r7, lr}
  401116:	af00      	add	r7, sp, #0
	afec_process_callback(AFEC1);
  401118:	4801      	ldr	r0, [pc, #4]	; (401120 <AFEC1_Handler+0xc>)
  40111a:	4b02      	ldr	r3, [pc, #8]	; (401124 <AFEC1_Handler+0x10>)
  40111c:	4798      	blx	r3
}
  40111e:	bd80      	pop	{r7, pc}
  401120:	40064000 	.word	0x40064000
  401124:	00401055 	.word	0x00401055

00401128 <afec_enable>:
 * \brief Enable AFEC Module.
 *
 * \param afec  Base address of the AFEC
 */
void afec_enable(Afec *const afec)
{
  401128:	b580      	push	{r7, lr}
  40112a:	b084      	sub	sp, #16
  40112c:	af00      	add	r7, sp, #0
  40112e:	6078      	str	r0, [r7, #4]
	Assert(afec);
	uint32_t pid;

	pid = afec_find_pid(afec);
  401130:	6878      	ldr	r0, [r7, #4]
  401132:	4b06      	ldr	r3, [pc, #24]	; (40114c <afec_enable+0x24>)
  401134:	4798      	blx	r3
  401136:	60f8      	str	r0, [r7, #12]
	/* Enable peripheral clock. */
	pmc_enable_periph_clk(pid);
  401138:	68f8      	ldr	r0, [r7, #12]
  40113a:	4b05      	ldr	r3, [pc, #20]	; (401150 <afec_enable+0x28>)
  40113c:	4798      	blx	r3
	sleepmgr_lock_mode(SLEEPMGR_SLEEP_WFI);
  40113e:	2002      	movs	r0, #2
  401140:	4b04      	ldr	r3, [pc, #16]	; (401154 <afec_enable+0x2c>)
  401142:	4798      	blx	r3
}
  401144:	3710      	adds	r7, #16
  401146:	46bd      	mov	sp, r7
  401148:	bd80      	pop	{r7, pc}
  40114a:	bf00      	nop
  40114c:	00400d15 	.word	0x00400d15
  401150:	00401569 	.word	0x00401569
  401154:	00400c99 	.word	0x00400c99

00401158 <pio_get_interrupt_status>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
  401158:	b480      	push	{r7}
  40115a:	b083      	sub	sp, #12
  40115c:	af00      	add	r7, sp, #0
  40115e:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_ISR;
  401160:	687b      	ldr	r3, [r7, #4]
  401162:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
  401164:	4618      	mov	r0, r3
  401166:	370c      	adds	r7, #12
  401168:	46bd      	mov	sp, r7
  40116a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40116e:	4770      	bx	lr

00401170 <pio_get_interrupt_mask>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
  401170:	b480      	push	{r7}
  401172:	b083      	sub	sp, #12
  401174:	af00      	add	r7, sp, #0
  401176:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_IMR;
  401178:	687b      	ldr	r3, [r7, #4]
  40117a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
  40117c:	4618      	mov	r0, r3
  40117e:	370c      	adds	r7, #12
  401180:	46bd      	mov	sp, r7
  401182:	f85d 7b04 	ldr.w	r7, [sp], #4
  401186:	4770      	bx	lr

00401188 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  401188:	b580      	push	{r7, lr}
  40118a:	b084      	sub	sp, #16
  40118c:	af00      	add	r7, sp, #0
  40118e:	6078      	str	r0, [r7, #4]
  401190:	6039      	str	r1, [r7, #0]
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  401192:	6878      	ldr	r0, [r7, #4]
  401194:	4b24      	ldr	r3, [pc, #144]	; (401228 <pio_handler_process+0xa0>)
  401196:	4798      	blx	r3
  401198:	60f8      	str	r0, [r7, #12]
	status &= pio_get_interrupt_mask(p_pio);
  40119a:	6878      	ldr	r0, [r7, #4]
  40119c:	4b23      	ldr	r3, [pc, #140]	; (40122c <pio_handler_process+0xa4>)
  40119e:	4798      	blx	r3
  4011a0:	4602      	mov	r2, r0
  4011a2:	68fb      	ldr	r3, [r7, #12]
  4011a4:	4013      	ands	r3, r2
  4011a6:	60fb      	str	r3, [r7, #12]

	/* Check pending events */
	if (status != 0) {
  4011a8:	68fb      	ldr	r3, [r7, #12]
  4011aa:	2b00      	cmp	r3, #0
  4011ac:	d038      	beq.n	401220 <pio_handler_process+0x98>
		/* Find triggering source */
		i = 0;
  4011ae:	2300      	movs	r3, #0
  4011b0:	60bb      	str	r3, [r7, #8]
		while (status != 0) {
  4011b2:	e032      	b.n	40121a <pio_handler_process+0x92>
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  4011b4:	4a1e      	ldr	r2, [pc, #120]	; (401230 <pio_handler_process+0xa8>)
  4011b6:	68bb      	ldr	r3, [r7, #8]
  4011b8:	011b      	lsls	r3, r3, #4
  4011ba:	4413      	add	r3, r2
  4011bc:	681a      	ldr	r2, [r3, #0]
  4011be:	683b      	ldr	r3, [r7, #0]
  4011c0:	429a      	cmp	r2, r3
  4011c2:	d123      	bne.n	40120c <pio_handler_process+0x84>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  4011c4:	4a1a      	ldr	r2, [pc, #104]	; (401230 <pio_handler_process+0xa8>)
  4011c6:	68bb      	ldr	r3, [r7, #8]
  4011c8:	011b      	lsls	r3, r3, #4
  4011ca:	4413      	add	r3, r2
  4011cc:	685a      	ldr	r2, [r3, #4]
  4011ce:	68fb      	ldr	r3, [r7, #12]
  4011d0:	4013      	ands	r3, r2
  4011d2:	2b00      	cmp	r3, #0
  4011d4:	d01a      	beq.n	40120c <pio_handler_process+0x84>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  4011d6:	4a16      	ldr	r2, [pc, #88]	; (401230 <pio_handler_process+0xa8>)
  4011d8:	68bb      	ldr	r3, [r7, #8]
  4011da:	011b      	lsls	r3, r3, #4
  4011dc:	4413      	add	r3, r2
  4011de:	3308      	adds	r3, #8
  4011e0:	685b      	ldr	r3, [r3, #4]
  4011e2:	4913      	ldr	r1, [pc, #76]	; (401230 <pio_handler_process+0xa8>)
  4011e4:	68ba      	ldr	r2, [r7, #8]
  4011e6:	0112      	lsls	r2, r2, #4
  4011e8:	440a      	add	r2, r1
  4011ea:	6810      	ldr	r0, [r2, #0]
  4011ec:	4910      	ldr	r1, [pc, #64]	; (401230 <pio_handler_process+0xa8>)
  4011ee:	68ba      	ldr	r2, [r7, #8]
  4011f0:	0112      	lsls	r2, r2, #4
  4011f2:	440a      	add	r2, r1
  4011f4:	6852      	ldr	r2, [r2, #4]
  4011f6:	4611      	mov	r1, r2
  4011f8:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  4011fa:	4a0d      	ldr	r2, [pc, #52]	; (401230 <pio_handler_process+0xa8>)
  4011fc:	68bb      	ldr	r3, [r7, #8]
  4011fe:	011b      	lsls	r3, r3, #4
  401200:	4413      	add	r3, r2
  401202:	685b      	ldr	r3, [r3, #4]
  401204:	43db      	mvns	r3, r3
  401206:	68fa      	ldr	r2, [r7, #12]
  401208:	4013      	ands	r3, r2
  40120a:	60fb      	str	r3, [r7, #12]
				}
			}
			i++;
  40120c:	68bb      	ldr	r3, [r7, #8]
  40120e:	3301      	adds	r3, #1
  401210:	60bb      	str	r3, [r7, #8]
			if (i >= MAX_INTERRUPT_SOURCES) {
  401212:	68bb      	ldr	r3, [r7, #8]
  401214:	2b06      	cmp	r3, #6
  401216:	d900      	bls.n	40121a <pio_handler_process+0x92>
				break;
  401218:	e002      	b.n	401220 <pio_handler_process+0x98>

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
  40121a:	68fb      	ldr	r3, [r7, #12]
  40121c:	2b00      	cmp	r3, #0
  40121e:	d1c9      	bne.n	4011b4 <pio_handler_process+0x2c>
		if (pio_capture_handler) {
			pio_capture_handler(p_pio);
		}
	}
#endif
}
  401220:	3710      	adds	r7, #16
  401222:	46bd      	mov	sp, r7
  401224:	bd80      	pop	{r7, pc}
  401226:	bf00      	nop
  401228:	00401159 	.word	0x00401159
  40122c:	00401171 	.word	0x00401171
  401230:	20400918 	.word	0x20400918

00401234 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  401234:	b580      	push	{r7, lr}
  401236:	af00      	add	r7, sp, #0
	pio_handler_process(PIOA, ID_PIOA);
  401238:	4802      	ldr	r0, [pc, #8]	; (401244 <PIOA_Handler+0x10>)
  40123a:	210a      	movs	r1, #10
  40123c:	4b02      	ldr	r3, [pc, #8]	; (401248 <PIOA_Handler+0x14>)
  40123e:	4798      	blx	r3
}
  401240:	bd80      	pop	{r7, pc}
  401242:	bf00      	nop
  401244:	400e0e00 	.word	0x400e0e00
  401248:	00401189 	.word	0x00401189

0040124c <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  40124c:	b580      	push	{r7, lr}
  40124e:	af00      	add	r7, sp, #0
    pio_handler_process(PIOB, ID_PIOB);
  401250:	4802      	ldr	r0, [pc, #8]	; (40125c <PIOB_Handler+0x10>)
  401252:	210b      	movs	r1, #11
  401254:	4b02      	ldr	r3, [pc, #8]	; (401260 <PIOB_Handler+0x14>)
  401256:	4798      	blx	r3
}
  401258:	bd80      	pop	{r7, pc}
  40125a:	bf00      	nop
  40125c:	400e1000 	.word	0x400e1000
  401260:	00401189 	.word	0x00401189

00401264 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  401264:	b580      	push	{r7, lr}
  401266:	af00      	add	r7, sp, #0
	pio_handler_process(PIOC, ID_PIOC);
  401268:	4802      	ldr	r0, [pc, #8]	; (401274 <PIOC_Handler+0x10>)
  40126a:	210c      	movs	r1, #12
  40126c:	4b02      	ldr	r3, [pc, #8]	; (401278 <PIOC_Handler+0x14>)
  40126e:	4798      	blx	r3
}
  401270:	bd80      	pop	{r7, pc}
  401272:	bf00      	nop
  401274:	400e1200 	.word	0x400e1200
  401278:	00401189 	.word	0x00401189

0040127c <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  40127c:	b580      	push	{r7, lr}
  40127e:	af00      	add	r7, sp, #0
	pio_handler_process(PIOD, ID_PIOD);
  401280:	4802      	ldr	r0, [pc, #8]	; (40128c <PIOD_Handler+0x10>)
  401282:	2110      	movs	r1, #16
  401284:	4b02      	ldr	r3, [pc, #8]	; (401290 <PIOD_Handler+0x14>)
  401286:	4798      	blx	r3
}
  401288:	bd80      	pop	{r7, pc}
  40128a:	bf00      	nop
  40128c:	400e1400 	.word	0x400e1400
  401290:	00401189 	.word	0x00401189

00401294 <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  401294:	b580      	push	{r7, lr}
  401296:	af00      	add	r7, sp, #0
	pio_handler_process(PIOE, ID_PIOE);
  401298:	4802      	ldr	r0, [pc, #8]	; (4012a4 <PIOE_Handler+0x10>)
  40129a:	2111      	movs	r1, #17
  40129c:	4b02      	ldr	r3, [pc, #8]	; (4012a8 <PIOE_Handler+0x14>)
  40129e:	4798      	blx	r3
}
  4012a0:	bd80      	pop	{r7, pc}
  4012a2:	bf00      	nop
  4012a4:	400e1600 	.word	0x400e1600
  4012a8:	00401189 	.word	0x00401189

004012ac <pmc_mck_set_division>:
 * \brief Set the division of the MCK.
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
  4012ac:	b480      	push	{r7}
  4012ae:	b083      	sub	sp, #12
  4012b0:	af00      	add	r7, sp, #0
  4012b2:	6078      	str	r0, [r7, #4]
	switch (ul_div) {
  4012b4:	687b      	ldr	r3, [r7, #4]
  4012b6:	3b01      	subs	r3, #1
  4012b8:	2b03      	cmp	r3, #3
  4012ba:	d81a      	bhi.n	4012f2 <pmc_mck_set_division+0x46>
  4012bc:	a201      	add	r2, pc, #4	; (adr r2, 4012c4 <pmc_mck_set_division+0x18>)
  4012be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4012c2:	bf00      	nop
  4012c4:	004012d5 	.word	0x004012d5
  4012c8:	004012db 	.word	0x004012db
  4012cc:	004012e3 	.word	0x004012e3
  4012d0:	004012eb 	.word	0x004012eb
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  4012d4:	2300      	movs	r3, #0
  4012d6:	607b      	str	r3, [r7, #4]
			break;
  4012d8:	e00e      	b.n	4012f8 <pmc_mck_set_division+0x4c>
		case 2:
			ul_div = PMC_MCKR_MDIV_PCK_DIV2;
  4012da:	f44f 7380 	mov.w	r3, #256	; 0x100
  4012de:	607b      	str	r3, [r7, #4]
			break;
  4012e0:	e00a      	b.n	4012f8 <pmc_mck_set_division+0x4c>
		case 3:
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  4012e2:	f44f 7340 	mov.w	r3, #768	; 0x300
  4012e6:	607b      	str	r3, [r7, #4]
			break;
  4012e8:	e006      	b.n	4012f8 <pmc_mck_set_division+0x4c>
		case 4:
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  4012ea:	f44f 7300 	mov.w	r3, #512	; 0x200
  4012ee:	607b      	str	r3, [r7, #4]
			break;
  4012f0:	e002      	b.n	4012f8 <pmc_mck_set_division+0x4c>
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  4012f2:	2300      	movs	r3, #0
  4012f4:	607b      	str	r3, [r7, #4]
			break;
  4012f6:	bf00      	nop
	}
	PMC->PMC_MCKR =
  4012f8:	4909      	ldr	r1, [pc, #36]	; (401320 <pmc_mck_set_division+0x74>)
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  4012fa:	4b09      	ldr	r3, [pc, #36]	; (401320 <pmc_mck_set_division+0x74>)
  4012fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4012fe:	f423 7240 	bic.w	r2, r3, #768	; 0x300
  401302:	687b      	ldr	r3, [r7, #4]
  401304:	4313      	orrs	r3, r2
			break;
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
  401306:	630b      	str	r3, [r1, #48]	; 0x30
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  401308:	bf00      	nop
  40130a:	4b05      	ldr	r3, [pc, #20]	; (401320 <pmc_mck_set_division+0x74>)
  40130c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40130e:	f003 0308 	and.w	r3, r3, #8
  401312:	2b00      	cmp	r3, #0
  401314:	d0f9      	beq.n	40130a <pmc_mck_set_division+0x5e>
}
  401316:	370c      	adds	r7, #12
  401318:	46bd      	mov	sp, r7
  40131a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40131e:	4770      	bx	lr
  401320:	400e0600 	.word	0x400e0600

00401324 <pmc_switch_mck_to_pllack>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
  401324:	b480      	push	{r7}
  401326:	b085      	sub	sp, #20
  401328:	af00      	add	r7, sp, #0
  40132a:	6078      	str	r0, [r7, #4]
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  40132c:	491d      	ldr	r1, [pc, #116]	; (4013a4 <pmc_switch_mck_to_pllack+0x80>)
  40132e:	4b1d      	ldr	r3, [pc, #116]	; (4013a4 <pmc_switch_mck_to_pllack+0x80>)
  401330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401332:	f023 0270 	bic.w	r2, r3, #112	; 0x70
  401336:	687b      	ldr	r3, [r7, #4]
  401338:	4313      	orrs	r3, r2
  40133a:	630b      	str	r3, [r1, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  40133c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  401340:	60fb      	str	r3, [r7, #12]
  401342:	e007      	b.n	401354 <pmc_switch_mck_to_pllack+0x30>
			--ul_timeout) {
		if (ul_timeout == 0) {
  401344:	68fb      	ldr	r3, [r7, #12]
  401346:	2b00      	cmp	r3, #0
  401348:	d101      	bne.n	40134e <pmc_switch_mck_to_pllack+0x2a>
			return 1;
  40134a:	2301      	movs	r3, #1
  40134c:	e023      	b.n	401396 <pmc_switch_mck_to_pllack+0x72>
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
  40134e:	68fb      	ldr	r3, [r7, #12]
  401350:	3b01      	subs	r3, #1
  401352:	60fb      	str	r3, [r7, #12]
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401354:	4b13      	ldr	r3, [pc, #76]	; (4013a4 <pmc_switch_mck_to_pllack+0x80>)
  401356:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401358:	f003 0308 	and.w	r3, r3, #8
  40135c:	2b00      	cmp	r3, #0
  40135e:	d0f1      	beq.n	401344 <pmc_switch_mck_to_pllack+0x20>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  401360:	4a10      	ldr	r2, [pc, #64]	; (4013a4 <pmc_switch_mck_to_pllack+0x80>)
  401362:	4b10      	ldr	r3, [pc, #64]	; (4013a4 <pmc_switch_mck_to_pllack+0x80>)
  401364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401366:	f023 0303 	bic.w	r3, r3, #3
  40136a:	f043 0302 	orr.w	r3, r3, #2
  40136e:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401370:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  401374:	60fb      	str	r3, [r7, #12]
  401376:	e007      	b.n	401388 <pmc_switch_mck_to_pllack+0x64>
			--ul_timeout) {
		if (ul_timeout == 0) {
  401378:	68fb      	ldr	r3, [r7, #12]
  40137a:	2b00      	cmp	r3, #0
  40137c:	d101      	bne.n	401382 <pmc_switch_mck_to_pllack+0x5e>
			return 1;
  40137e:	2301      	movs	r3, #1
  401380:	e009      	b.n	401396 <pmc_switch_mck_to_pllack+0x72>

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
  401382:	68fb      	ldr	r3, [r7, #12]
  401384:	3b01      	subs	r3, #1
  401386:	60fb      	str	r3, [r7, #12]
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401388:	4b06      	ldr	r3, [pc, #24]	; (4013a4 <pmc_switch_mck_to_pllack+0x80>)
  40138a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40138c:	f003 0308 	and.w	r3, r3, #8
  401390:	2b00      	cmp	r3, #0
  401392:	d0f1      	beq.n	401378 <pmc_switch_mck_to_pllack+0x54>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
  401394:	2300      	movs	r3, #0
}
  401396:	4618      	mov	r0, r3
  401398:	3714      	adds	r7, #20
  40139a:	46bd      	mov	sp, r7
  40139c:	f85d 7b04 	ldr.w	r7, [sp], #4
  4013a0:	4770      	bx	lr
  4013a2:	bf00      	nop
  4013a4:	400e0600 	.word	0x400e0600

004013a8 <pmc_switch_sclk_to_32kxtal>:
 *       VDDIO power supply.
 *
 * \param ul_bypass 0 for Xtal, 1 for bypass.
 */
void pmc_switch_sclk_to_32kxtal(uint32_t ul_bypass)
{
  4013a8:	b480      	push	{r7}
  4013aa:	b083      	sub	sp, #12
  4013ac:	af00      	add	r7, sp, #0
  4013ae:	6078      	str	r0, [r7, #4]
	/* Set Bypass mode if required */
	if (ul_bypass == 1) {
  4013b0:	687b      	ldr	r3, [r7, #4]
  4013b2:	2b01      	cmp	r3, #1
  4013b4:	d105      	bne.n	4013c2 <pmc_switch_sclk_to_32kxtal+0x1a>
		SUPC->SUPC_MR |= SUPC_MR_KEY_PASSWD |
  4013b6:	4907      	ldr	r1, [pc, #28]	; (4013d4 <pmc_switch_sclk_to_32kxtal+0x2c>)
  4013b8:	4b06      	ldr	r3, [pc, #24]	; (4013d4 <pmc_switch_sclk_to_32kxtal+0x2c>)
  4013ba:	689a      	ldr	r2, [r3, #8]
  4013bc:	4b06      	ldr	r3, [pc, #24]	; (4013d8 <pmc_switch_sclk_to_32kxtal+0x30>)
  4013be:	4313      	orrs	r3, r2
  4013c0:	608b      	str	r3, [r1, #8]
			SUPC_MR_OSCBYPASS;
	}

	SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_XTALSEL;
  4013c2:	4b04      	ldr	r3, [pc, #16]	; (4013d4 <pmc_switch_sclk_to_32kxtal+0x2c>)
  4013c4:	4a05      	ldr	r2, [pc, #20]	; (4013dc <pmc_switch_sclk_to_32kxtal+0x34>)
  4013c6:	601a      	str	r2, [r3, #0]
}
  4013c8:	370c      	adds	r7, #12
  4013ca:	46bd      	mov	sp, r7
  4013cc:	f85d 7b04 	ldr.w	r7, [sp], #4
  4013d0:	4770      	bx	lr
  4013d2:	bf00      	nop
  4013d4:	400e1810 	.word	0x400e1810
  4013d8:	a5100000 	.word	0xa5100000
  4013dc:	a5000008 	.word	0xa5000008

004013e0 <pmc_osc_is_ready_32kxtal>:
 *
 * \retval 1 External 32k Xtal is ready.
 * \retval 0 External 32k Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_32kxtal(void)
{
  4013e0:	b480      	push	{r7}
  4013e2:	af00      	add	r7, sp, #0
	return ((SUPC->SUPC_SR & SUPC_SR_OSCSEL)
  4013e4:	4b09      	ldr	r3, [pc, #36]	; (40140c <pmc_osc_is_ready_32kxtal+0x2c>)
  4013e6:	695b      	ldr	r3, [r3, #20]
  4013e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
			&& (PMC->PMC_SR & PMC_SR_OSCSELS));
  4013ec:	2b00      	cmp	r3, #0
  4013ee:	d007      	beq.n	401400 <pmc_osc_is_ready_32kxtal+0x20>
  4013f0:	4b07      	ldr	r3, [pc, #28]	; (401410 <pmc_osc_is_ready_32kxtal+0x30>)
  4013f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4013f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
  4013f8:	2b00      	cmp	r3, #0
  4013fa:	d001      	beq.n	401400 <pmc_osc_is_ready_32kxtal+0x20>
  4013fc:	2301      	movs	r3, #1
  4013fe:	e000      	b.n	401402 <pmc_osc_is_ready_32kxtal+0x22>
  401400:	2300      	movs	r3, #0
}
  401402:	4618      	mov	r0, r3
  401404:	46bd      	mov	sp, r7
  401406:	f85d 7b04 	ldr.w	r7, [sp], #4
  40140a:	4770      	bx	lr
  40140c:	400e1810 	.word	0x400e1810
  401410:	400e0600 	.word	0x400e0600

00401414 <pmc_switch_mainck_to_fastrc>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 * \retval 2 Invalid frequency.
 */
void pmc_switch_mainck_to_fastrc(uint32_t ul_moscrcf)
{
  401414:	b480      	push	{r7}
  401416:	b083      	sub	sp, #12
  401418:	af00      	add	r7, sp, #0
  40141a:	6078      	str	r0, [r7, #4]
	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	PMC->CKGR_MOR |= (CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCRCEN);
  40141c:	4915      	ldr	r1, [pc, #84]	; (401474 <pmc_switch_mainck_to_fastrc+0x60>)
  40141e:	4b15      	ldr	r3, [pc, #84]	; (401474 <pmc_switch_mainck_to_fastrc+0x60>)
  401420:	6a1a      	ldr	r2, [r3, #32]
  401422:	4b15      	ldr	r3, [pc, #84]	; (401478 <pmc_switch_mainck_to_fastrc+0x64>)
  401424:	4313      	orrs	r3, r2
  401426:	620b      	str	r3, [r1, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  401428:	bf00      	nop
  40142a:	4b12      	ldr	r3, [pc, #72]	; (401474 <pmc_switch_mainck_to_fastrc+0x60>)
  40142c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40142e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  401432:	2b00      	cmp	r3, #0
  401434:	d0f9      	beq.n	40142a <pmc_switch_mainck_to_fastrc+0x16>

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  401436:	490f      	ldr	r1, [pc, #60]	; (401474 <pmc_switch_mainck_to_fastrc+0x60>)
  401438:	4b0e      	ldr	r3, [pc, #56]	; (401474 <pmc_switch_mainck_to_fastrc+0x60>)
  40143a:	6a1a      	ldr	r2, [r3, #32]
  40143c:	4b0f      	ldr	r3, [pc, #60]	; (40147c <pmc_switch_mainck_to_fastrc+0x68>)
  40143e:	4013      	ands	r3, r2
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;
  401440:	687a      	ldr	r2, [r7, #4]
  401442:	4313      	orrs	r3, r2
  401444:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  401448:	620b      	str	r3, [r1, #32]
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  40144a:	bf00      	nop
  40144c:	4b09      	ldr	r3, [pc, #36]	; (401474 <pmc_switch_mainck_to_fastrc+0x60>)
  40144e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401450:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  401454:	2b00      	cmp	r3, #0
  401456:	d0f9      	beq.n	40144c <pmc_switch_mainck_to_fastrc+0x38>

	/* Switch to Fast RC */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
  401458:	4906      	ldr	r1, [pc, #24]	; (401474 <pmc_switch_mainck_to_fastrc+0x60>)
  40145a:	4b06      	ldr	r3, [pc, #24]	; (401474 <pmc_switch_mainck_to_fastrc+0x60>)
  40145c:	6a1a      	ldr	r2, [r3, #32]
  40145e:	4b08      	ldr	r3, [pc, #32]	; (401480 <pmc_switch_mainck_to_fastrc+0x6c>)
  401460:	4013      	ands	r3, r2
  401462:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  401466:	620b      	str	r3, [r1, #32]
			CKGR_MOR_KEY_PASSWD;
}
  401468:	370c      	adds	r7, #12
  40146a:	46bd      	mov	sp, r7
  40146c:	f85d 7b04 	ldr.w	r7, [sp], #4
  401470:	4770      	bx	lr
  401472:	bf00      	nop
  401474:	400e0600 	.word	0x400e0600
  401478:	00370008 	.word	0x00370008
  40147c:	ffc8ff8f 	.word	0xffc8ff8f
  401480:	fec8ffff 	.word	0xfec8ffff

00401484 <pmc_switch_mainck_to_xtal>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
  401484:	b480      	push	{r7}
  401486:	b083      	sub	sp, #12
  401488:	af00      	add	r7, sp, #0
  40148a:	6078      	str	r0, [r7, #4]
  40148c:	6039      	str	r1, [r7, #0]
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  40148e:	687b      	ldr	r3, [r7, #4]
  401490:	2b00      	cmp	r3, #0
  401492:	d008      	beq.n	4014a6 <pmc_switch_mainck_to_xtal+0x22>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  401494:	4913      	ldr	r1, [pc, #76]	; (4014e4 <pmc_switch_mainck_to_xtal+0x60>)
  401496:	4b13      	ldr	r3, [pc, #76]	; (4014e4 <pmc_switch_mainck_to_xtal+0x60>)
  401498:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  40149a:	4a13      	ldr	r2, [pc, #76]	; (4014e8 <pmc_switch_mainck_to_xtal+0x64>)
  40149c:	401a      	ands	r2, r3
  40149e:	4b13      	ldr	r3, [pc, #76]	; (4014ec <pmc_switch_mainck_to_xtal+0x68>)
  4014a0:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4014a2:	620b      	str	r3, [r1, #32]
  4014a4:	e018      	b.n	4014d8 <pmc_switch_mainck_to_xtal+0x54>
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4014a6:	490f      	ldr	r1, [pc, #60]	; (4014e4 <pmc_switch_mainck_to_xtal+0x60>)
  4014a8:	4b0e      	ldr	r3, [pc, #56]	; (4014e4 <pmc_switch_mainck_to_xtal+0x60>)
  4014aa:	6a1a      	ldr	r2, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  4014ac:	4b10      	ldr	r3, [pc, #64]	; (4014f0 <pmc_switch_mainck_to_xtal+0x6c>)
  4014ae:	4013      	ands	r3, r2
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  4014b0:	683a      	ldr	r2, [r7, #0]
  4014b2:	0212      	lsls	r2, r2, #8
  4014b4:	b292      	uxth	r2, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  4014b6:	431a      	orrs	r2, r3
  4014b8:	4b0e      	ldr	r3, [pc, #56]	; (4014f4 <pmc_switch_mainck_to_xtal+0x70>)
  4014ba:	4313      	orrs	r3, r2
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4014bc:	620b      	str	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  4014be:	bf00      	nop
  4014c0:	4b08      	ldr	r3, [pc, #32]	; (4014e4 <pmc_switch_mainck_to_xtal+0x60>)
  4014c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4014c4:	f003 0301 	and.w	r3, r3, #1
  4014c8:	2b00      	cmp	r3, #0
  4014ca:	d0f9      	beq.n	4014c0 <pmc_switch_mainck_to_xtal+0x3c>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  4014cc:	4905      	ldr	r1, [pc, #20]	; (4014e4 <pmc_switch_mainck_to_xtal+0x60>)
  4014ce:	4b05      	ldr	r3, [pc, #20]	; (4014e4 <pmc_switch_mainck_to_xtal+0x60>)
  4014d0:	6a1a      	ldr	r2, [r3, #32]
  4014d2:	4b09      	ldr	r3, [pc, #36]	; (4014f8 <pmc_switch_mainck_to_xtal+0x74>)
  4014d4:	4313      	orrs	r3, r2
  4014d6:	620b      	str	r3, [r1, #32]
	}
}
  4014d8:	370c      	adds	r7, #12
  4014da:	46bd      	mov	sp, r7
  4014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
  4014e0:	4770      	bx	lr
  4014e2:	bf00      	nop
  4014e4:	400e0600 	.word	0x400e0600
  4014e8:	fec8fffc 	.word	0xfec8fffc
  4014ec:	01370002 	.word	0x01370002
  4014f0:	ffc8fffc 	.word	0xffc8fffc
  4014f4:	00370001 	.word	0x00370001
  4014f8:	01370000 	.word	0x01370000

004014fc <pmc_osc_is_ready_mainck>:
 *
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
  4014fc:	b480      	push	{r7}
  4014fe:	af00      	add	r7, sp, #0
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  401500:	4b04      	ldr	r3, [pc, #16]	; (401514 <pmc_osc_is_ready_mainck+0x18>)
  401502:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401504:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
  401508:	4618      	mov	r0, r3
  40150a:	46bd      	mov	sp, r7
  40150c:	f85d 7b04 	ldr.w	r7, [sp], #4
  401510:	4770      	bx	lr
  401512:	bf00      	nop
  401514:	400e0600 	.word	0x400e0600

00401518 <pmc_disable_pllack>:

/**
 * \brief Disable PLLA clock.
 */
void pmc_disable_pllack(void)
{
  401518:	b480      	push	{r7}
  40151a:	af00      	add	r7, sp, #0
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  40151c:	4b03      	ldr	r3, [pc, #12]	; (40152c <pmc_disable_pllack+0x14>)
  40151e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  401522:	629a      	str	r2, [r3, #40]	; 0x28
#endif
}
  401524:	46bd      	mov	sp, r7
  401526:	f85d 7b04 	ldr.w	r7, [sp], #4
  40152a:	4770      	bx	lr
  40152c:	400e0600 	.word	0x400e0600

00401530 <pmc_is_locked_pllack>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
  401530:	b480      	push	{r7}
  401532:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  401534:	4b04      	ldr	r3, [pc, #16]	; (401548 <pmc_is_locked_pllack+0x18>)
  401536:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401538:	f003 0302 	and.w	r3, r3, #2
}
  40153c:	4618      	mov	r0, r3
  40153e:	46bd      	mov	sp, r7
  401540:	f85d 7b04 	ldr.w	r7, [sp], #4
  401544:	4770      	bx	lr
  401546:	bf00      	nop
  401548:	400e0600 	.word	0x400e0600

0040154c <pmc_is_locked_upll>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_upll(void)
{
  40154c:	b480      	push	{r7}
  40154e:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKU);
  401550:	4b04      	ldr	r3, [pc, #16]	; (401564 <pmc_is_locked_upll+0x18>)
  401552:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401554:	f003 0340 	and.w	r3, r3, #64	; 0x40
}
  401558:	4618      	mov	r0, r3
  40155a:	46bd      	mov	sp, r7
  40155c:	f85d 7b04 	ldr.w	r7, [sp], #4
  401560:	4770      	bx	lr
  401562:	bf00      	nop
  401564:	400e0600 	.word	0x400e0600

00401568 <pmc_enable_periph_clk>:
 *
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
  401568:	b480      	push	{r7}
  40156a:	b083      	sub	sp, #12
  40156c:	af00      	add	r7, sp, #0
  40156e:	6078      	str	r0, [r7, #4]
	if (ul_id > MAX_PERIPH_ID) {
  401570:	687b      	ldr	r3, [r7, #4]
  401572:	2b3f      	cmp	r3, #63	; 0x3f
  401574:	d901      	bls.n	40157a <pmc_enable_periph_clk+0x12>
		return 1;
  401576:	2301      	movs	r3, #1
  401578:	e02f      	b.n	4015da <pmc_enable_periph_clk+0x72>
	}

	if (ul_id < 32) {
  40157a:	687b      	ldr	r3, [r7, #4]
  40157c:	2b1f      	cmp	r3, #31
  40157e:	d813      	bhi.n	4015a8 <pmc_enable_periph_clk+0x40>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  401580:	4b19      	ldr	r3, [pc, #100]	; (4015e8 <pmc_enable_periph_clk+0x80>)
  401582:	699a      	ldr	r2, [r3, #24]
  401584:	687b      	ldr	r3, [r7, #4]
  401586:	2101      	movs	r1, #1
  401588:	fa01 f303 	lsl.w	r3, r1, r3
  40158c:	401a      	ands	r2, r3
  40158e:	687b      	ldr	r3, [r7, #4]
  401590:	2101      	movs	r1, #1
  401592:	fa01 f303 	lsl.w	r3, r1, r3
  401596:	429a      	cmp	r2, r3
  401598:	d01e      	beq.n	4015d8 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER0 = 1 << ul_id;
  40159a:	4a13      	ldr	r2, [pc, #76]	; (4015e8 <pmc_enable_periph_clk+0x80>)
  40159c:	687b      	ldr	r3, [r7, #4]
  40159e:	2101      	movs	r1, #1
  4015a0:	fa01 f303 	lsl.w	r3, r1, r3
  4015a4:	6113      	str	r3, [r2, #16]
  4015a6:	e017      	b.n	4015d8 <pmc_enable_periph_clk+0x70>
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
  4015a8:	687b      	ldr	r3, [r7, #4]
  4015aa:	3b20      	subs	r3, #32
  4015ac:	607b      	str	r3, [r7, #4]
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  4015ae:	4b0e      	ldr	r3, [pc, #56]	; (4015e8 <pmc_enable_periph_clk+0x80>)
  4015b0:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  4015b4:	687b      	ldr	r3, [r7, #4]
  4015b6:	2101      	movs	r1, #1
  4015b8:	fa01 f303 	lsl.w	r3, r1, r3
  4015bc:	401a      	ands	r2, r3
  4015be:	687b      	ldr	r3, [r7, #4]
  4015c0:	2101      	movs	r1, #1
  4015c2:	fa01 f303 	lsl.w	r3, r1, r3
  4015c6:	429a      	cmp	r2, r3
  4015c8:	d006      	beq.n	4015d8 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER1 = 1 << ul_id;
  4015ca:	4a07      	ldr	r2, [pc, #28]	; (4015e8 <pmc_enable_periph_clk+0x80>)
  4015cc:	687b      	ldr	r3, [r7, #4]
  4015ce:	2101      	movs	r1, #1
  4015d0:	fa01 f303 	lsl.w	r3, r1, r3
  4015d4:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
		}
#endif
	}

	return 0;
  4015d8:	2300      	movs	r3, #0
}
  4015da:	4618      	mov	r0, r3
  4015dc:	370c      	adds	r7, #12
  4015de:	46bd      	mov	sp, r7
  4015e0:	f85d 7b04 	ldr.w	r7, [sp], #4
  4015e4:	4770      	bx	lr
  4015e6:	bf00      	nop
  4015e8:	400e0600 	.word	0x400e0600

004015ec <twihs_enable_master_mode>:
 * \brief Enable TWIHS master mode.
 *
 * \param p_twihs Pointer to a TWIHS instance.
 */
void twihs_enable_master_mode(Twihs *p_twihs)
{
  4015ec:	b480      	push	{r7}
  4015ee:	b083      	sub	sp, #12
  4015f0:	af00      	add	r7, sp, #0
  4015f2:	6078      	str	r0, [r7, #4]
	/* Set Master Disable bit and Slave Disable bit */
	p_twihs->TWIHS_CR = TWIHS_CR_MSDIS;
  4015f4:	687b      	ldr	r3, [r7, #4]
  4015f6:	2208      	movs	r2, #8
  4015f8:	601a      	str	r2, [r3, #0]
	p_twihs->TWIHS_CR = TWIHS_CR_SVDIS;
  4015fa:	687b      	ldr	r3, [r7, #4]
  4015fc:	2220      	movs	r2, #32
  4015fe:	601a      	str	r2, [r3, #0]

	/* Set Master Enable bit */
	p_twihs->TWIHS_CR = TWIHS_CR_MSEN;
  401600:	687b      	ldr	r3, [r7, #4]
  401602:	2204      	movs	r2, #4
  401604:	601a      	str	r2, [r3, #0]
}
  401606:	370c      	adds	r7, #12
  401608:	46bd      	mov	sp, r7
  40160a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40160e:	4770      	bx	lr

00401610 <twihs_master_init>:
 * \param p_opt Options for initializing the TWIHS module (see \ref twihs_options_t).
 *
 * \return TWIHS_SUCCESS if initialization is complete, error code otherwise.
 */
uint32_t twihs_master_init(Twihs *p_twihs, const twihs_options_t *p_opt)
{
  401610:	b580      	push	{r7, lr}
  401612:	b084      	sub	sp, #16
  401614:	af00      	add	r7, sp, #0
  401616:	6078      	str	r0, [r7, #4]
  401618:	6039      	str	r1, [r7, #0]
	uint32_t status = TWIHS_SUCCESS;
  40161a:	2300      	movs	r3, #0
  40161c:	60fb      	str	r3, [r7, #12]

	/* Disable TWIHS interrupts */
	p_twihs->TWIHS_IDR = ~0UL;
  40161e:	687b      	ldr	r3, [r7, #4]
  401620:	f04f 32ff 	mov.w	r2, #4294967295
  401624:	629a      	str	r2, [r3, #40]	; 0x28

	/* Dummy read in status register */
	p_twihs->TWIHS_SR;
  401626:	687b      	ldr	r3, [r7, #4]
  401628:	6a1b      	ldr	r3, [r3, #32]

	/* Reset TWIHS peripheral */
	twihs_reset(p_twihs);
  40162a:	6878      	ldr	r0, [r7, #4]
  40162c:	4b0b      	ldr	r3, [pc, #44]	; (40165c <twihs_master_init+0x4c>)
  40162e:	4798      	blx	r3

	twihs_enable_master_mode(p_twihs);
  401630:	6878      	ldr	r0, [r7, #4]
  401632:	4b0b      	ldr	r3, [pc, #44]	; (401660 <twihs_master_init+0x50>)
  401634:	4798      	blx	r3

	/* Select the speed */
	if (twihs_set_speed(p_twihs, p_opt->speed, p_opt->master_clk) == FAIL) {
  401636:	683b      	ldr	r3, [r7, #0]
  401638:	685a      	ldr	r2, [r3, #4]
  40163a:	683b      	ldr	r3, [r7, #0]
  40163c:	681b      	ldr	r3, [r3, #0]
  40163e:	6878      	ldr	r0, [r7, #4]
  401640:	4611      	mov	r1, r2
  401642:	461a      	mov	r2, r3
  401644:	4b07      	ldr	r3, [pc, #28]	; (401664 <twihs_master_init+0x54>)
  401646:	4798      	blx	r3
  401648:	4603      	mov	r3, r0
  40164a:	2b01      	cmp	r3, #1
  40164c:	d101      	bne.n	401652 <twihs_master_init+0x42>
		/* The desired speed setting is rejected */
		status = TWIHS_INVALID_ARGUMENT;
  40164e:	2301      	movs	r3, #1
  401650:	60fb      	str	r3, [r7, #12]
	}

	return status;
  401652:	68fb      	ldr	r3, [r7, #12]
}
  401654:	4618      	mov	r0, r3
  401656:	3710      	adds	r7, #16
  401658:	46bd      	mov	sp, r7
  40165a:	bd80      	pop	{r7, pc}
  40165c:	004018f9 	.word	0x004018f9
  401660:	004015ed 	.word	0x004015ed
  401664:	00401669 	.word	0x00401669

00401668 <twihs_set_speed>:
 *
 * \retval PASS New speed setting is accepted.
 * \retval FAIL New speed setting is rejected.
 */
uint32_t twihs_set_speed(Twihs *p_twihs, uint32_t ul_speed, uint32_t ul_mck)
{
  401668:	b480      	push	{r7}
  40166a:	b087      	sub	sp, #28
  40166c:	af00      	add	r7, sp, #0
  40166e:	60f8      	str	r0, [r7, #12]
  401670:	60b9      	str	r1, [r7, #8]
  401672:	607a      	str	r2, [r7, #4]
	uint32_t ckdiv = 0;
  401674:	2300      	movs	r3, #0
  401676:	617b      	str	r3, [r7, #20]
	uint32_t c_lh_div;

	/* High-Speed can be only used in slave mode, 400k is the max speed allowed for master */
	if (ul_speed > I2C_FAST_MODE_SPEED) {
  401678:	68bb      	ldr	r3, [r7, #8]
  40167a:	4a16      	ldr	r2, [pc, #88]	; (4016d4 <twihs_set_speed+0x6c>)
  40167c:	4293      	cmp	r3, r2
  40167e:	d901      	bls.n	401684 <twihs_set_speed+0x1c>
		return FAIL;
  401680:	2301      	movs	r3, #1
  401682:	e021      	b.n	4016c8 <twihs_set_speed+0x60>
	}

	c_lh_div = ul_mck / (ul_speed * TWIHS_CLK_DIVIDER) - TWIHS_CLK_CALC_ARGU;
  401684:	68bb      	ldr	r3, [r7, #8]
  401686:	005b      	lsls	r3, r3, #1
  401688:	687a      	ldr	r2, [r7, #4]
  40168a:	fbb2 f3f3 	udiv	r3, r2, r3
  40168e:	3b04      	subs	r3, #4
  401690:	613b      	str	r3, [r7, #16]

	/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
	while ((c_lh_div > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  401692:	e005      	b.n	4016a0 <twihs_set_speed+0x38>
		/* Increase clock divider */
		ckdiv++;
  401694:	697b      	ldr	r3, [r7, #20]
  401696:	3301      	adds	r3, #1
  401698:	617b      	str	r3, [r7, #20]
		/* Divide cldiv value */
		c_lh_div /= TWIHS_CLK_DIVIDER;
  40169a:	693b      	ldr	r3, [r7, #16]
  40169c:	085b      	lsrs	r3, r3, #1
  40169e:	613b      	str	r3, [r7, #16]
	}

	c_lh_div = ul_mck / (ul_speed * TWIHS_CLK_DIVIDER) - TWIHS_CLK_CALC_ARGU;

	/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
	while ((c_lh_div > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  4016a0:	693b      	ldr	r3, [r7, #16]
  4016a2:	2bff      	cmp	r3, #255	; 0xff
  4016a4:	d902      	bls.n	4016ac <twihs_set_speed+0x44>
  4016a6:	697b      	ldr	r3, [r7, #20]
  4016a8:	2b06      	cmp	r3, #6
  4016aa:	d9f3      	bls.n	401694 <twihs_set_speed+0x2c>
		c_lh_div /= TWIHS_CLK_DIVIDER;
	}

	/* set clock waveform generator register */
	p_twihs->TWIHS_CWGR =
			TWIHS_CWGR_CLDIV(c_lh_div) | TWIHS_CWGR_CHDIV(c_lh_div) |
  4016ac:	693b      	ldr	r3, [r7, #16]
  4016ae:	b2da      	uxtb	r2, r3
  4016b0:	693b      	ldr	r3, [r7, #16]
  4016b2:	021b      	lsls	r3, r3, #8
  4016b4:	b29b      	uxth	r3, r3
  4016b6:	431a      	orrs	r2, r3
			TWIHS_CWGR_CKDIV(ckdiv);
  4016b8:	697b      	ldr	r3, [r7, #20]
  4016ba:	041b      	lsls	r3, r3, #16
  4016bc:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
		c_lh_div /= TWIHS_CLK_DIVIDER;
	}

	/* set clock waveform generator register */
	p_twihs->TWIHS_CWGR =
			TWIHS_CWGR_CLDIV(c_lh_div) | TWIHS_CWGR_CHDIV(c_lh_div) |
  4016c0:	431a      	orrs	r2, r3
		/* Divide cldiv value */
		c_lh_div /= TWIHS_CLK_DIVIDER;
	}

	/* set clock waveform generator register */
	p_twihs->TWIHS_CWGR =
  4016c2:	68fb      	ldr	r3, [r7, #12]
  4016c4:	611a      	str	r2, [r3, #16]
			TWIHS_CWGR_CLDIV(c_lh_div) | TWIHS_CWGR_CHDIV(c_lh_div) |
			TWIHS_CWGR_CKDIV(ckdiv);

	return PASS;
  4016c6:	2300      	movs	r3, #0
}
  4016c8:	4618      	mov	r0, r3
  4016ca:	371c      	adds	r7, #28
  4016cc:	46bd      	mov	sp, r7
  4016ce:	f85d 7b04 	ldr.w	r7, [sp], #4
  4016d2:	4770      	bx	lr
  4016d4:	00061a80 	.word	0x00061a80

004016d8 <twihs_mk_addr>:
 * which byte is the MSB to start with.
 *
 * Please see the device datasheet for details on this.
 */
static uint32_t twihs_mk_addr(const uint8_t *addr, int len)
{
  4016d8:	b480      	push	{r7}
  4016da:	b085      	sub	sp, #20
  4016dc:	af00      	add	r7, sp, #0
  4016de:	6078      	str	r0, [r7, #4]
  4016e0:	6039      	str	r1, [r7, #0]
	uint32_t val;

	if (len == 0)
  4016e2:	683b      	ldr	r3, [r7, #0]
  4016e4:	2b00      	cmp	r3, #0
  4016e6:	d101      	bne.n	4016ec <twihs_mk_addr+0x14>
		return 0;
  4016e8:	2300      	movs	r3, #0
  4016ea:	e01d      	b.n	401728 <twihs_mk_addr+0x50>

	val = addr[0];
  4016ec:	687b      	ldr	r3, [r7, #4]
  4016ee:	781b      	ldrb	r3, [r3, #0]
  4016f0:	60fb      	str	r3, [r7, #12]
	if (len > 1) {
  4016f2:	683b      	ldr	r3, [r7, #0]
  4016f4:	2b01      	cmp	r3, #1
  4016f6:	dd09      	ble.n	40170c <twihs_mk_addr+0x34>
		val <<= 8;
  4016f8:	68fb      	ldr	r3, [r7, #12]
  4016fa:	021b      	lsls	r3, r3, #8
  4016fc:	60fb      	str	r3, [r7, #12]
		val |= addr[1];
  4016fe:	687b      	ldr	r3, [r7, #4]
  401700:	3301      	adds	r3, #1
  401702:	781b      	ldrb	r3, [r3, #0]
  401704:	461a      	mov	r2, r3
  401706:	68fb      	ldr	r3, [r7, #12]
  401708:	4313      	orrs	r3, r2
  40170a:	60fb      	str	r3, [r7, #12]
	}
	if (len > 2) {
  40170c:	683b      	ldr	r3, [r7, #0]
  40170e:	2b02      	cmp	r3, #2
  401710:	dd09      	ble.n	401726 <twihs_mk_addr+0x4e>
		val <<= 8;
  401712:	68fb      	ldr	r3, [r7, #12]
  401714:	021b      	lsls	r3, r3, #8
  401716:	60fb      	str	r3, [r7, #12]
		val |= addr[2];
  401718:	687b      	ldr	r3, [r7, #4]
  40171a:	3302      	adds	r3, #2
  40171c:	781b      	ldrb	r3, [r3, #0]
  40171e:	461a      	mov	r2, r3
  401720:	68fb      	ldr	r3, [r7, #12]
  401722:	4313      	orrs	r3, r2
  401724:	60fb      	str	r3, [r7, #12]
	}
	return val;
  401726:	68fb      	ldr	r3, [r7, #12]
}
  401728:	4618      	mov	r0, r3
  40172a:	3714      	adds	r7, #20
  40172c:	46bd      	mov	sp, r7
  40172e:	f85d 7b04 	ldr.w	r7, [sp], #4
  401732:	4770      	bx	lr

00401734 <twihs_master_read>:
 * \param p_packet Packet information and data (see \ref twihs_packet_t).
 *
 * \return TWIHS_SUCCESS if all bytes were read, error code otherwise.
 */
uint32_t twihs_master_read(Twihs *p_twihs, twihs_packet_t *p_packet)
{
  401734:	b580      	push	{r7, lr}
  401736:	b086      	sub	sp, #24
  401738:	af00      	add	r7, sp, #0
  40173a:	6078      	str	r0, [r7, #4]
  40173c:	6039      	str	r1, [r7, #0]
	uint32_t status, cnt = p_packet->length;
  40173e:	683b      	ldr	r3, [r7, #0]
  401740:	68db      	ldr	r3, [r3, #12]
  401742:	617b      	str	r3, [r7, #20]
	uint8_t *buffer = p_packet->buffer;
  401744:	683b      	ldr	r3, [r7, #0]
  401746:	689b      	ldr	r3, [r3, #8]
  401748:	613b      	str	r3, [r7, #16]
	uint32_t timeout = TWIHS_TIMEOUT;
  40174a:	f643 2398 	movw	r3, #15000	; 0x3a98
  40174e:	60fb      	str	r3, [r7, #12]

	/* Check argument */
	if (cnt == 0) {
  401750:	697b      	ldr	r3, [r7, #20]
  401752:	2b00      	cmp	r3, #0
  401754:	d101      	bne.n	40175a <twihs_master_read+0x26>
		return TWIHS_INVALID_ARGUMENT;
  401756:	2301      	movs	r3, #1
  401758:	e059      	b.n	40180e <twihs_master_read+0xda>
	}

	/* Set read mode, slave address and 3 internal address byte lengths */
	p_twihs->TWIHS_MMR = 0;
  40175a:	687b      	ldr	r3, [r7, #4]
  40175c:	2200      	movs	r2, #0
  40175e:	605a      	str	r2, [r3, #4]
	p_twihs->TWIHS_MMR = TWIHS_MMR_MREAD | TWIHS_MMR_DADR(p_packet->chip) |
  401760:	683b      	ldr	r3, [r7, #0]
  401762:	7c1b      	ldrb	r3, [r3, #16]
  401764:	041b      	lsls	r3, r3, #16
  401766:	f403 02fe 	and.w	r2, r3, #8323072	; 0x7f0000
			((p_packet->addr_length << TWIHS_MMR_IADRSZ_Pos) &
  40176a:	683b      	ldr	r3, [r7, #0]
  40176c:	685b      	ldr	r3, [r3, #4]
  40176e:	021b      	lsls	r3, r3, #8
  401770:	f403 7340 	and.w	r3, r3, #768	; 0x300
		return TWIHS_INVALID_ARGUMENT;
	}

	/* Set read mode, slave address and 3 internal address byte lengths */
	p_twihs->TWIHS_MMR = 0;
	p_twihs->TWIHS_MMR = TWIHS_MMR_MREAD | TWIHS_MMR_DADR(p_packet->chip) |
  401774:	4313      	orrs	r3, r2
  401776:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
  40177a:	687b      	ldr	r3, [r7, #4]
  40177c:	605a      	str	r2, [r3, #4]
			((p_packet->addr_length << TWIHS_MMR_IADRSZ_Pos) &
			TWIHS_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twihs->TWIHS_IADR = 0;
  40177e:	687b      	ldr	r3, [r7, #4]
  401780:	2200      	movs	r2, #0
  401782:	60da      	str	r2, [r3, #12]
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);
  401784:	683a      	ldr	r2, [r7, #0]
  401786:	683b      	ldr	r3, [r7, #0]
  401788:	685b      	ldr	r3, [r3, #4]
  40178a:	4610      	mov	r0, r2
  40178c:	4619      	mov	r1, r3
  40178e:	4b22      	ldr	r3, [pc, #136]	; (401818 <twihs_master_read+0xe4>)
  401790:	4798      	blx	r3
  401792:	4602      	mov	r2, r0
  401794:	687b      	ldr	r3, [r7, #4]
  401796:	60da      	str	r2, [r3, #12]

	/* Send a START Condition */
	p_twihs->TWIHS_CR = TWIHS_CR_START;
  401798:	687b      	ldr	r3, [r7, #4]
  40179a:	2201      	movs	r2, #1
  40179c:	601a      	str	r2, [r3, #0]

	while (cnt > 0) {
  40179e:	e029      	b.n	4017f4 <twihs_master_read+0xc0>
		status = p_twihs->TWIHS_SR;
  4017a0:	687b      	ldr	r3, [r7, #4]
  4017a2:	6a1b      	ldr	r3, [r3, #32]
  4017a4:	60bb      	str	r3, [r7, #8]
		if (status & TWIHS_SR_NACK) {
  4017a6:	68bb      	ldr	r3, [r7, #8]
  4017a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
  4017ac:	2b00      	cmp	r3, #0
  4017ae:	d001      	beq.n	4017b4 <twihs_master_read+0x80>
			return TWIHS_RECEIVE_NACK;
  4017b0:	2305      	movs	r3, #5
  4017b2:	e02c      	b.n	40180e <twihs_master_read+0xda>
		}
		if (!timeout--) {
  4017b4:	68fb      	ldr	r3, [r7, #12]
  4017b6:	1e5a      	subs	r2, r3, #1
  4017b8:	60fa      	str	r2, [r7, #12]
  4017ba:	2b00      	cmp	r3, #0
  4017bc:	d101      	bne.n	4017c2 <twihs_master_read+0x8e>
			return TWIHS_ERROR_TIMEOUT;
  4017be:	2309      	movs	r3, #9
  4017c0:	e025      	b.n	40180e <twihs_master_read+0xda>
		}
		/* Last byte ? */
		if (cnt == 1) {
  4017c2:	697b      	ldr	r3, [r7, #20]
  4017c4:	2b01      	cmp	r3, #1
  4017c6:	d102      	bne.n	4017ce <twihs_master_read+0x9a>
			p_twihs->TWIHS_CR = TWIHS_CR_STOP;
  4017c8:	687b      	ldr	r3, [r7, #4]
  4017ca:	2202      	movs	r2, #2
  4017cc:	601a      	str	r2, [r3, #0]
		}

		if (!(status & TWIHS_SR_RXRDY)) {
  4017ce:	68bb      	ldr	r3, [r7, #8]
  4017d0:	f003 0302 	and.w	r3, r3, #2
  4017d4:	2b00      	cmp	r3, #0
  4017d6:	d100      	bne.n	4017da <twihs_master_read+0xa6>
			continue;
  4017d8:	e00c      	b.n	4017f4 <twihs_master_read+0xc0>
		}
		*buffer++ = p_twihs->TWIHS_RHR;
  4017da:	693b      	ldr	r3, [r7, #16]
  4017dc:	1c5a      	adds	r2, r3, #1
  4017de:	613a      	str	r2, [r7, #16]
  4017e0:	687a      	ldr	r2, [r7, #4]
  4017e2:	6b12      	ldr	r2, [r2, #48]	; 0x30
  4017e4:	b2d2      	uxtb	r2, r2
  4017e6:	701a      	strb	r2, [r3, #0]

		cnt--;
  4017e8:	697b      	ldr	r3, [r7, #20]
  4017ea:	3b01      	subs	r3, #1
  4017ec:	617b      	str	r3, [r7, #20]
		timeout = TWIHS_TIMEOUT;
  4017ee:	f643 2398 	movw	r3, #15000	; 0x3a98
  4017f2:	60fb      	str	r3, [r7, #12]
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);

	/* Send a START Condition */
	p_twihs->TWIHS_CR = TWIHS_CR_START;

	while (cnt > 0) {
  4017f4:	697b      	ldr	r3, [r7, #20]
  4017f6:	2b00      	cmp	r3, #0
  4017f8:	d1d2      	bne.n	4017a0 <twihs_master_read+0x6c>

		cnt--;
		timeout = TWIHS_TIMEOUT;
	}

	while (!(p_twihs->TWIHS_SR & TWIHS_SR_TXCOMP)) {
  4017fa:	bf00      	nop
  4017fc:	687b      	ldr	r3, [r7, #4]
  4017fe:	6a1b      	ldr	r3, [r3, #32]
  401800:	f003 0301 	and.w	r3, r3, #1
  401804:	2b00      	cmp	r3, #0
  401806:	d0f9      	beq.n	4017fc <twihs_master_read+0xc8>
	}

	p_twihs->TWIHS_SR;
  401808:	687b      	ldr	r3, [r7, #4]
  40180a:	6a1b      	ldr	r3, [r3, #32]

	return TWIHS_SUCCESS;
  40180c:	2300      	movs	r3, #0
}
  40180e:	4618      	mov	r0, r3
  401810:	3718      	adds	r7, #24
  401812:	46bd      	mov	sp, r7
  401814:	bd80      	pop	{r7, pc}
  401816:	bf00      	nop
  401818:	004016d9 	.word	0x004016d9

0040181c <twihs_master_write>:
 * \param p_packet Packet information and data (see \ref twihs_packet_t).
 *
 * \return TWIHS_SUCCESS if all bytes were written, error code otherwise.
 */
uint32_t twihs_master_write(Twihs *p_twihs, twihs_packet_t *p_packet)
{
  40181c:	b580      	push	{r7, lr}
  40181e:	b086      	sub	sp, #24
  401820:	af00      	add	r7, sp, #0
  401822:	6078      	str	r0, [r7, #4]
  401824:	6039      	str	r1, [r7, #0]
	uint32_t status, cnt = p_packet->length;
  401826:	683b      	ldr	r3, [r7, #0]
  401828:	68db      	ldr	r3, [r3, #12]
  40182a:	617b      	str	r3, [r7, #20]
	uint8_t *buffer = p_packet->buffer;
  40182c:	683b      	ldr	r3, [r7, #0]
  40182e:	689b      	ldr	r3, [r3, #8]
  401830:	613b      	str	r3, [r7, #16]

	/* Check argument */
	if (cnt == 0) {
  401832:	697b      	ldr	r3, [r7, #20]
  401834:	2b00      	cmp	r3, #0
  401836:	d101      	bne.n	40183c <twihs_master_write+0x20>
		return TWIHS_INVALID_ARGUMENT;
  401838:	2301      	movs	r3, #1
  40183a:	e056      	b.n	4018ea <twihs_master_write+0xce>
	}

	/* Set write mode, slave address and 3 internal address byte lengths */
	p_twihs->TWIHS_MMR = 0;
  40183c:	687b      	ldr	r3, [r7, #4]
  40183e:	2200      	movs	r2, #0
  401840:	605a      	str	r2, [r3, #4]
	p_twihs->TWIHS_MMR = TWIHS_MMR_DADR(p_packet->chip) |
  401842:	683b      	ldr	r3, [r7, #0]
  401844:	7c1b      	ldrb	r3, [r3, #16]
  401846:	041b      	lsls	r3, r3, #16
  401848:	f403 02fe 	and.w	r2, r3, #8323072	; 0x7f0000
			((p_packet->addr_length << TWIHS_MMR_IADRSZ_Pos) &
  40184c:	683b      	ldr	r3, [r7, #0]
  40184e:	685b      	ldr	r3, [r3, #4]
  401850:	021b      	lsls	r3, r3, #8
  401852:	f403 7340 	and.w	r3, r3, #768	; 0x300
		return TWIHS_INVALID_ARGUMENT;
	}

	/* Set write mode, slave address and 3 internal address byte lengths */
	p_twihs->TWIHS_MMR = 0;
	p_twihs->TWIHS_MMR = TWIHS_MMR_DADR(p_packet->chip) |
  401856:	431a      	orrs	r2, r3
  401858:	687b      	ldr	r3, [r7, #4]
  40185a:	605a      	str	r2, [r3, #4]
			((p_packet->addr_length << TWIHS_MMR_IADRSZ_Pos) &
			TWIHS_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twihs->TWIHS_IADR = 0;
  40185c:	687b      	ldr	r3, [r7, #4]
  40185e:	2200      	movs	r2, #0
  401860:	60da      	str	r2, [r3, #12]
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);
  401862:	683a      	ldr	r2, [r7, #0]
  401864:	683b      	ldr	r3, [r7, #0]
  401866:	685b      	ldr	r3, [r3, #4]
  401868:	4610      	mov	r0, r2
  40186a:	4619      	mov	r1, r3
  40186c:	4b21      	ldr	r3, [pc, #132]	; (4018f4 <twihs_master_write+0xd8>)
  40186e:	4798      	blx	r3
  401870:	4602      	mov	r2, r0
  401872:	687b      	ldr	r3, [r7, #4]
  401874:	60da      	str	r2, [r3, #12]

	/* Send all bytes */
	while (cnt > 0) {
  401876:	e019      	b.n	4018ac <twihs_master_write+0x90>
		status = p_twihs->TWIHS_SR;
  401878:	687b      	ldr	r3, [r7, #4]
  40187a:	6a1b      	ldr	r3, [r3, #32]
  40187c:	60fb      	str	r3, [r7, #12]
		if (status & TWIHS_SR_NACK) {
  40187e:	68fb      	ldr	r3, [r7, #12]
  401880:	f403 7380 	and.w	r3, r3, #256	; 0x100
  401884:	2b00      	cmp	r3, #0
  401886:	d001      	beq.n	40188c <twihs_master_write+0x70>
			return TWIHS_RECEIVE_NACK;
  401888:	2305      	movs	r3, #5
  40188a:	e02e      	b.n	4018ea <twihs_master_write+0xce>
		}

		if (!(status & TWIHS_SR_TXRDY)) {
  40188c:	68fb      	ldr	r3, [r7, #12]
  40188e:	f003 0304 	and.w	r3, r3, #4
  401892:	2b00      	cmp	r3, #0
  401894:	d100      	bne.n	401898 <twihs_master_write+0x7c>
			continue;
  401896:	e009      	b.n	4018ac <twihs_master_write+0x90>
		}
		p_twihs->TWIHS_THR = *buffer++;
  401898:	693b      	ldr	r3, [r7, #16]
  40189a:	1c5a      	adds	r2, r3, #1
  40189c:	613a      	str	r2, [r7, #16]
  40189e:	781b      	ldrb	r3, [r3, #0]
  4018a0:	461a      	mov	r2, r3
  4018a2:	687b      	ldr	r3, [r7, #4]
  4018a4:	635a      	str	r2, [r3, #52]	; 0x34

		cnt--;
  4018a6:	697b      	ldr	r3, [r7, #20]
  4018a8:	3b01      	subs	r3, #1
  4018aa:	617b      	str	r3, [r7, #20]
	/* Set internal address for remote chip */
	p_twihs->TWIHS_IADR = 0;
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);

	/* Send all bytes */
	while (cnt > 0) {
  4018ac:	697b      	ldr	r3, [r7, #20]
  4018ae:	2b00      	cmp	r3, #0
  4018b0:	d1e2      	bne.n	401878 <twihs_master_write+0x5c>

		cnt--;
	}

	while (1) {
		status = p_twihs->TWIHS_SR;
  4018b2:	687b      	ldr	r3, [r7, #4]
  4018b4:	6a1b      	ldr	r3, [r3, #32]
  4018b6:	60fb      	str	r3, [r7, #12]
		if (status & TWIHS_SR_NACK) {
  4018b8:	68fb      	ldr	r3, [r7, #12]
  4018ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
  4018be:	2b00      	cmp	r3, #0
  4018c0:	d001      	beq.n	4018c6 <twihs_master_write+0xaa>
			return TWIHS_RECEIVE_NACK;
  4018c2:	2305      	movs	r3, #5
  4018c4:	e011      	b.n	4018ea <twihs_master_write+0xce>
		}

		if (status & TWIHS_SR_TXRDY) {
  4018c6:	68fb      	ldr	r3, [r7, #12]
  4018c8:	f003 0304 	and.w	r3, r3, #4
  4018cc:	2b00      	cmp	r3, #0
  4018ce:	d004      	beq.n	4018da <twihs_master_write+0xbe>
			break;
  4018d0:	bf00      	nop
		}
	}

	p_twihs->TWIHS_CR = TWIHS_CR_STOP;
  4018d2:	687b      	ldr	r3, [r7, #4]
  4018d4:	2202      	movs	r2, #2
  4018d6:	601a      	str	r2, [r3, #0]

	while (!(p_twihs->TWIHS_SR & TWIHS_SR_TXCOMP)) {
  4018d8:	e000      	b.n	4018dc <twihs_master_write+0xc0>
		}

		if (status & TWIHS_SR_TXRDY) {
			break;
		}
	}
  4018da:	e7ea      	b.n	4018b2 <twihs_master_write+0x96>

	p_twihs->TWIHS_CR = TWIHS_CR_STOP;

	while (!(p_twihs->TWIHS_SR & TWIHS_SR_TXCOMP)) {
  4018dc:	687b      	ldr	r3, [r7, #4]
  4018de:	6a1b      	ldr	r3, [r3, #32]
  4018e0:	f003 0301 	and.w	r3, r3, #1
  4018e4:	2b00      	cmp	r3, #0
  4018e6:	d0f9      	beq.n	4018dc <twihs_master_write+0xc0>
	}

	return TWIHS_SUCCESS;
  4018e8:	2300      	movs	r3, #0
}
  4018ea:	4618      	mov	r0, r3
  4018ec:	3718      	adds	r7, #24
  4018ee:	46bd      	mov	sp, r7
  4018f0:	bd80      	pop	{r7, pc}
  4018f2:	bf00      	nop
  4018f4:	004016d9 	.word	0x004016d9

004018f8 <twihs_reset>:
 * \brief Reset TWIHS.
 *
 * \param p_twihs Pointer to a TWIHS instance.
 */
void twihs_reset(Twihs *p_twihs)
{
  4018f8:	b480      	push	{r7}
  4018fa:	b083      	sub	sp, #12
  4018fc:	af00      	add	r7, sp, #0
  4018fe:	6078      	str	r0, [r7, #4]
	/* Set SWRST bit to reset TWIHS peripheral */
	p_twihs->TWIHS_CR = TWIHS_CR_SWRST;
  401900:	687b      	ldr	r3, [r7, #4]
  401902:	2280      	movs	r2, #128	; 0x80
  401904:	601a      	str	r2, [r3, #0]
	p_twihs->TWIHS_RHR;
  401906:	687b      	ldr	r3, [r7, #4]
  401908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
  40190a:	370c      	adds	r7, #12
  40190c:	46bd      	mov	sp, r7
  40190e:	f85d 7b04 	ldr.w	r7, [sp], #4
  401912:	4770      	bx	lr

00401914 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
  401914:	b480      	push	{r7}
  401916:	b085      	sub	sp, #20
  401918:	af00      	add	r7, sp, #0
  40191a:	6078      	str	r0, [r7, #4]
  40191c:	6039      	str	r1, [r7, #0]
	uint32_t cd = 0;
  40191e:	2300      	movs	r3, #0
  401920:	60fb      	str	r3, [r7, #12]

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
  401922:	687b      	ldr	r3, [r7, #4]
  401924:	22ac      	movs	r2, #172	; 0xac
  401926:	601a      	str	r2, [r3, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
  401928:	683b      	ldr	r3, [r7, #0]
  40192a:	681a      	ldr	r2, [r3, #0]
  40192c:	683b      	ldr	r3, [r7, #0]
  40192e:	685b      	ldr	r3, [r3, #4]
  401930:	fbb2 f3f3 	udiv	r3, r2, r3
  401934:	091b      	lsrs	r3, r3, #4
  401936:	60fb      	str	r3, [r7, #12]
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
  401938:	68fb      	ldr	r3, [r7, #12]
  40193a:	2b00      	cmp	r3, #0
  40193c:	d003      	beq.n	401946 <uart_init+0x32>
  40193e:	68fb      	ldr	r3, [r7, #12]
  401940:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
  401944:	d301      	bcc.n	40194a <uart_init+0x36>
		return 1;
  401946:	2301      	movs	r3, #1
  401948:	e00a      	b.n	401960 <uart_init+0x4c>

	p_uart->UART_BRGR = cd;
  40194a:	687b      	ldr	r3, [r7, #4]
  40194c:	68fa      	ldr	r2, [r7, #12]
  40194e:	621a      	str	r2, [r3, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
  401950:	683b      	ldr	r3, [r7, #0]
  401952:	689a      	ldr	r2, [r3, #8]
  401954:	687b      	ldr	r3, [r7, #4]
  401956:	605a      	str	r2, [r3, #4]
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
  401958:	687b      	ldr	r3, [r7, #4]
  40195a:	2250      	movs	r2, #80	; 0x50
  40195c:	601a      	str	r2, [r3, #0]

	return 0;
  40195e:	2300      	movs	r3, #0
}
  401960:	4618      	mov	r0, r3
  401962:	3714      	adds	r7, #20
  401964:	46bd      	mov	sp, r7
  401966:	f85d 7b04 	ldr.w	r7, [sp], #4
  40196a:	4770      	bx	lr

0040196c <uart_write>:
 *
 * \retval 0 Success.
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
  40196c:	b480      	push	{r7}
  40196e:	b083      	sub	sp, #12
  401970:	af00      	add	r7, sp, #0
  401972:	6078      	str	r0, [r7, #4]
  401974:	460b      	mov	r3, r1
  401976:	70fb      	strb	r3, [r7, #3]
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  401978:	687b      	ldr	r3, [r7, #4]
  40197a:	695b      	ldr	r3, [r3, #20]
  40197c:	f003 0302 	and.w	r3, r3, #2
  401980:	2b00      	cmp	r3, #0
  401982:	d101      	bne.n	401988 <uart_write+0x1c>
		return 1;
  401984:	2301      	movs	r3, #1
  401986:	e003      	b.n	401990 <uart_write+0x24>

	/* Send character */
	p_uart->UART_THR = uc_data;
  401988:	78fa      	ldrb	r2, [r7, #3]
  40198a:	687b      	ldr	r3, [r7, #4]
  40198c:	61da      	str	r2, [r3, #28]
	return 0;
  40198e:	2300      	movs	r3, #0
}
  401990:	4618      	mov	r0, r3
  401992:	370c      	adds	r7, #12
  401994:	46bd      	mov	sp, r7
  401996:	f85d 7b04 	ldr.w	r7, [sp], #4
  40199a:	4770      	bx	lr

0040199c <uart_read>:
 *
 * \retval 0 Success.
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
  40199c:	b480      	push	{r7}
  40199e:	b083      	sub	sp, #12
  4019a0:	af00      	add	r7, sp, #0
  4019a2:	6078      	str	r0, [r7, #4]
  4019a4:	6039      	str	r1, [r7, #0]
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  4019a6:	687b      	ldr	r3, [r7, #4]
  4019a8:	695b      	ldr	r3, [r3, #20]
  4019aa:	f003 0301 	and.w	r3, r3, #1
  4019ae:	2b00      	cmp	r3, #0
  4019b0:	d101      	bne.n	4019b6 <uart_read+0x1a>
		return 1;
  4019b2:	2301      	movs	r3, #1
  4019b4:	e005      	b.n	4019c2 <uart_read+0x26>

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  4019b6:	687b      	ldr	r3, [r7, #4]
  4019b8:	699b      	ldr	r3, [r3, #24]
  4019ba:	b2da      	uxtb	r2, r3
  4019bc:	683b      	ldr	r3, [r7, #0]
  4019be:	701a      	strb	r2, [r3, #0]
	return 0;
  4019c0:	2300      	movs	r3, #0
}
  4019c2:	4618      	mov	r0, r3
  4019c4:	370c      	adds	r7, #12
  4019c6:	46bd      	mov	sp, r7
  4019c8:	f85d 7b04 	ldr.w	r7, [sp], #4
  4019cc:	4770      	bx	lr
  4019ce:	bf00      	nop

004019d0 <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  4019d0:	b480      	push	{r7}
  4019d2:	b089      	sub	sp, #36	; 0x24
  4019d4:	af00      	add	r7, sp, #0
  4019d6:	60f8      	str	r0, [r7, #12]
  4019d8:	60b9      	str	r1, [r7, #8]
  4019da:	607a      	str	r2, [r7, #4]
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  4019dc:	68bb      	ldr	r3, [r7, #8]
  4019de:	011a      	lsls	r2, r3, #4
  4019e0:	687b      	ldr	r3, [r7, #4]
  4019e2:	429a      	cmp	r2, r3
  4019e4:	d802      	bhi.n	4019ec <usart_set_async_baudrate+0x1c>
		over = HIGH_FRQ_SAMPLE_DIV;
  4019e6:	2310      	movs	r3, #16
  4019e8:	61fb      	str	r3, [r7, #28]
  4019ea:	e001      	b.n	4019f0 <usart_set_async_baudrate+0x20>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
  4019ec:	2308      	movs	r3, #8
  4019ee:	61fb      	str	r3, [r7, #28]
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  4019f0:	687b      	ldr	r3, [r7, #4]
  4019f2:	00da      	lsls	r2, r3, #3
  4019f4:	69fb      	ldr	r3, [r7, #28]
  4019f6:	68b9      	ldr	r1, [r7, #8]
  4019f8:	fb01 f303 	mul.w	r3, r1, r3
  4019fc:	085b      	lsrs	r3, r3, #1
  4019fe:	441a      	add	r2, r3
  401a00:	69fb      	ldr	r3, [r7, #28]
  401a02:	68b9      	ldr	r1, [r7, #8]
  401a04:	fb01 f303 	mul.w	r3, r1, r3
  401a08:	fbb2 f3f3 	udiv	r3, r2, r3
  401a0c:	61bb      	str	r3, [r7, #24]
	cd = cd_fp >> 3;
  401a0e:	69bb      	ldr	r3, [r7, #24]
  401a10:	08db      	lsrs	r3, r3, #3
  401a12:	617b      	str	r3, [r7, #20]
	fp = cd_fp & 0x07;
  401a14:	69bb      	ldr	r3, [r7, #24]
  401a16:	f003 0307 	and.w	r3, r3, #7
  401a1a:	613b      	str	r3, [r7, #16]
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  401a1c:	697b      	ldr	r3, [r7, #20]
  401a1e:	2b00      	cmp	r3, #0
  401a20:	d003      	beq.n	401a2a <usart_set_async_baudrate+0x5a>
  401a22:	697b      	ldr	r3, [r7, #20]
  401a24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
  401a28:	d301      	bcc.n	401a2e <usart_set_async_baudrate+0x5e>
		return 1;
  401a2a:	2301      	movs	r3, #1
  401a2c:	e00f      	b.n	401a4e <usart_set_async_baudrate+0x7e>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
  401a2e:	69fb      	ldr	r3, [r7, #28]
  401a30:	2b08      	cmp	r3, #8
  401a32:	d105      	bne.n	401a40 <usart_set_async_baudrate+0x70>
		p_usart->US_MR |= US_MR_OVER;
  401a34:	68fb      	ldr	r3, [r7, #12]
  401a36:	685b      	ldr	r3, [r3, #4]
  401a38:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
  401a3c:	68fb      	ldr	r3, [r7, #12]
  401a3e:	605a      	str	r2, [r3, #4]
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  401a40:	693b      	ldr	r3, [r7, #16]
  401a42:	041a      	lsls	r2, r3, #16
  401a44:	697b      	ldr	r3, [r7, #20]
  401a46:	431a      	orrs	r2, r3
  401a48:	68fb      	ldr	r3, [r7, #12]
  401a4a:	621a      	str	r2, [r3, #32]

	return 0;
  401a4c:	2300      	movs	r3, #0
}
  401a4e:	4618      	mov	r0, r3
  401a50:	3724      	adds	r7, #36	; 0x24
  401a52:	46bd      	mov	sp, r7
  401a54:	f85d 7b04 	ldr.w	r7, [sp], #4
  401a58:	4770      	bx	lr
  401a5a:	bf00      	nop

00401a5c <usart_reset>:
 * \brief Reset the USART and disable TX and RX.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset(Usart *p_usart)
{
  401a5c:	b580      	push	{r7, lr}
  401a5e:	b082      	sub	sp, #8
  401a60:	af00      	add	r7, sp, #0
  401a62:	6078      	str	r0, [r7, #4]
	/* Disable the Write Protect. */
	usart_disable_writeprotect(p_usart);
  401a64:	6878      	ldr	r0, [r7, #4]
  401a66:	4b0d      	ldr	r3, [pc, #52]	; (401a9c <usart_reset+0x40>)
  401a68:	4798      	blx	r3

	/* Reset registers that could cause unpredictable behavior after reset. */
	p_usart->US_MR = 0;
  401a6a:	687b      	ldr	r3, [r7, #4]
  401a6c:	2200      	movs	r2, #0
  401a6e:	605a      	str	r2, [r3, #4]
	p_usart->US_RTOR = 0;
  401a70:	687b      	ldr	r3, [r7, #4]
  401a72:	2200      	movs	r2, #0
  401a74:	625a      	str	r2, [r3, #36]	; 0x24
	p_usart->US_TTGR = 0;
  401a76:	687b      	ldr	r3, [r7, #4]
  401a78:	2200      	movs	r2, #0
  401a7a:	629a      	str	r2, [r3, #40]	; 0x28

	/* Disable TX and RX. */
	usart_reset_tx(p_usart);
  401a7c:	6878      	ldr	r0, [r7, #4]
  401a7e:	4b08      	ldr	r3, [pc, #32]	; (401aa0 <usart_reset+0x44>)
  401a80:	4798      	blx	r3
	usart_reset_rx(p_usart);
  401a82:	6878      	ldr	r0, [r7, #4]
  401a84:	4b07      	ldr	r3, [pc, #28]	; (401aa4 <usart_reset+0x48>)
  401a86:	4798      	blx	r3
	/* Reset status bits. */
	usart_reset_status(p_usart);
  401a88:	6878      	ldr	r0, [r7, #4]
  401a8a:	4b07      	ldr	r3, [pc, #28]	; (401aa8 <usart_reset+0x4c>)
  401a8c:	4798      	blx	r3
	/* Turn off RTS and DTR if exist. */
	usart_drive_RTS_pin_high(p_usart);
  401a8e:	6878      	ldr	r0, [r7, #4]
  401a90:	4b06      	ldr	r3, [pc, #24]	; (401aac <usart_reset+0x50>)
  401a92:	4798      	blx	r3
#if (SAM3S || SAM4S || SAM3U || SAM4L || SAM4E)
	usart_drive_DTR_pin_high(p_usart);
#endif
}
  401a94:	3708      	adds	r7, #8
  401a96:	46bd      	mov	sp, r7
  401a98:	bd80      	pop	{r7, pc}
  401a9a:	bf00      	nop
  401a9c:	00401cf1 	.word	0x00401cf1
  401aa0:	00401b4d 	.word	0x00401b4d
  401aa4:	00401b99 	.word	0x00401b99
  401aa8:	00401c01 	.word	0x00401c01
  401aac:	00401c1d 	.word	0x00401c1d

00401ab0 <usart_init_rs232>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_rs232(Usart *p_usart,
		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
{
  401ab0:	b580      	push	{r7, lr}
  401ab2:	b084      	sub	sp, #16
  401ab4:	af00      	add	r7, sp, #0
  401ab6:	60f8      	str	r0, [r7, #12]
  401ab8:	60b9      	str	r1, [r7, #8]
  401aba:	607a      	str	r2, [r7, #4]
	static uint32_t ul_reg_val;

	/* Reset the USART and shut down TX and RX. */
	usart_reset(p_usart);
  401abc:	68f8      	ldr	r0, [r7, #12]
  401abe:	4b1a      	ldr	r3, [pc, #104]	; (401b28 <usart_init_rs232+0x78>)
  401ac0:	4798      	blx	r3

	ul_reg_val = 0;
  401ac2:	4b1a      	ldr	r3, [pc, #104]	; (401b2c <usart_init_rs232+0x7c>)
  401ac4:	2200      	movs	r2, #0
  401ac6:	601a      	str	r2, [r3, #0]
	/* Check whether the input values are legal. */
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  401ac8:	68bb      	ldr	r3, [r7, #8]
  401aca:	2b00      	cmp	r3, #0
  401acc:	d009      	beq.n	401ae2 <usart_init_rs232+0x32>
  401ace:	68bb      	ldr	r3, [r7, #8]
  401ad0:	681b      	ldr	r3, [r3, #0]
  401ad2:	68f8      	ldr	r0, [r7, #12]
  401ad4:	4619      	mov	r1, r3
  401ad6:	687a      	ldr	r2, [r7, #4]
  401ad8:	4b15      	ldr	r3, [pc, #84]	; (401b30 <usart_init_rs232+0x80>)
  401ada:	4798      	blx	r3
  401adc:	4603      	mov	r3, r0
  401ade:	2b00      	cmp	r3, #0
  401ae0:	d001      	beq.n	401ae6 <usart_init_rs232+0x36>
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
  401ae2:	2301      	movs	r3, #1
  401ae4:	e01b      	b.n	401b1e <usart_init_rs232+0x6e>
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  401ae6:	68bb      	ldr	r3, [r7, #8]
  401ae8:	685a      	ldr	r2, [r3, #4]
  401aea:	68bb      	ldr	r3, [r7, #8]
  401aec:	689b      	ldr	r3, [r3, #8]
  401aee:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  401af0:	68bb      	ldr	r3, [r7, #8]
  401af2:	691b      	ldr	r3, [r3, #16]
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  401af4:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  401af6:	68bb      	ldr	r3, [r7, #8]
  401af8:	68db      	ldr	r3, [r3, #12]
  401afa:	431a      	orrs	r2, r3
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  401afc:	4b0b      	ldr	r3, [pc, #44]	; (401b2c <usart_init_rs232+0x7c>)
  401afe:	681b      	ldr	r3, [r3, #0]
  401b00:	4313      	orrs	r3, r2
  401b02:	4a0a      	ldr	r2, [pc, #40]	; (401b2c <usart_init_rs232+0x7c>)
  401b04:	6013      	str	r3, [r2, #0]
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;

	/* Configure the USART mode as normal mode. */
	ul_reg_val |= US_MR_USART_MODE_NORMAL;
  401b06:	4b09      	ldr	r3, [pc, #36]	; (401b2c <usart_init_rs232+0x7c>)
  401b08:	681b      	ldr	r3, [r3, #0]
  401b0a:	4a08      	ldr	r2, [pc, #32]	; (401b2c <usart_init_rs232+0x7c>)
  401b0c:	6013      	str	r3, [r2, #0]

	p_usart->US_MR |= ul_reg_val;
  401b0e:	68fb      	ldr	r3, [r7, #12]
  401b10:	685a      	ldr	r2, [r3, #4]
  401b12:	4b06      	ldr	r3, [pc, #24]	; (401b2c <usart_init_rs232+0x7c>)
  401b14:	681b      	ldr	r3, [r3, #0]
  401b16:	431a      	orrs	r2, r3
  401b18:	68fb      	ldr	r3, [r7, #12]
  401b1a:	605a      	str	r2, [r3, #4]

	return 0;
  401b1c:	2300      	movs	r3, #0
}
  401b1e:	4618      	mov	r0, r3
  401b20:	3710      	adds	r7, #16
  401b22:	46bd      	mov	sp, r7
  401b24:	bd80      	pop	{r7, pc}
  401b26:	bf00      	nop
  401b28:	00401a5d 	.word	0x00401a5d
  401b2c:	20400988 	.word	0x20400988
  401b30:	004019d1 	.word	0x004019d1

00401b34 <usart_enable_tx>:
 * \brief Enable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_tx(Usart *p_usart)
{
  401b34:	b480      	push	{r7}
  401b36:	b083      	sub	sp, #12
  401b38:	af00      	add	r7, sp, #0
  401b3a:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_TXEN;
  401b3c:	687b      	ldr	r3, [r7, #4]
  401b3e:	2240      	movs	r2, #64	; 0x40
  401b40:	601a      	str	r2, [r3, #0]
}
  401b42:	370c      	adds	r7, #12
  401b44:	46bd      	mov	sp, r7
  401b46:	f85d 7b04 	ldr.w	r7, [sp], #4
  401b4a:	4770      	bx	lr

00401b4c <usart_reset_tx>:
 * \brief Immediately stop and disable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_tx(Usart *p_usart)
{
  401b4c:	b480      	push	{r7}
  401b4e:	b083      	sub	sp, #12
  401b50:	af00      	add	r7, sp, #0
  401b52:	6078      	str	r0, [r7, #4]
	/* Reset transmitter */
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  401b54:	687b      	ldr	r3, [r7, #4]
  401b56:	2288      	movs	r2, #136	; 0x88
  401b58:	601a      	str	r2, [r3, #0]
}
  401b5a:	370c      	adds	r7, #12
  401b5c:	46bd      	mov	sp, r7
  401b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
  401b62:	4770      	bx	lr

00401b64 <usart_set_tx_timeguard>:
 *
 * \param p_usart Pointer to a USART instance.
 * \param timeguard The value of transmit timeguard.
 */
void usart_set_tx_timeguard(Usart *p_usart, uint32_t timeguard)
{
  401b64:	b480      	push	{r7}
  401b66:	b083      	sub	sp, #12
  401b68:	af00      	add	r7, sp, #0
  401b6a:	6078      	str	r0, [r7, #4]
  401b6c:	6039      	str	r1, [r7, #0]
	p_usart->US_TTGR = timeguard;
  401b6e:	687b      	ldr	r3, [r7, #4]
  401b70:	683a      	ldr	r2, [r7, #0]
  401b72:	629a      	str	r2, [r3, #40]	; 0x28
}
  401b74:	370c      	adds	r7, #12
  401b76:	46bd      	mov	sp, r7
  401b78:	f85d 7b04 	ldr.w	r7, [sp], #4
  401b7c:	4770      	bx	lr
  401b7e:	bf00      	nop

00401b80 <usart_enable_rx>:
 * \brief Enable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_rx(Usart *p_usart)
{
  401b80:	b480      	push	{r7}
  401b82:	b083      	sub	sp, #12
  401b84:	af00      	add	r7, sp, #0
  401b86:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RXEN;
  401b88:	687b      	ldr	r3, [r7, #4]
  401b8a:	2210      	movs	r2, #16
  401b8c:	601a      	str	r2, [r3, #0]
}
  401b8e:	370c      	adds	r7, #12
  401b90:	46bd      	mov	sp, r7
  401b92:	f85d 7b04 	ldr.w	r7, [sp], #4
  401b96:	4770      	bx	lr

00401b98 <usart_reset_rx>:
 * \brief Immediately stop and disable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_rx(Usart *p_usart)
{
  401b98:	b480      	push	{r7}
  401b9a:	b083      	sub	sp, #12
  401b9c:	af00      	add	r7, sp, #0
  401b9e:	6078      	str	r0, [r7, #4]
	/* Reset Receiver */
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  401ba0:	687b      	ldr	r3, [r7, #4]
  401ba2:	2224      	movs	r2, #36	; 0x24
  401ba4:	601a      	str	r2, [r3, #0]
}
  401ba6:	370c      	adds	r7, #12
  401ba8:	46bd      	mov	sp, r7
  401baa:	f85d 7b04 	ldr.w	r7, [sp], #4
  401bae:	4770      	bx	lr

00401bb0 <usart_enable_interrupt>:
 *
 * \param p_usart Pointer to a USART peripheral.
 * \param ul_sources Interrupt sources bit map.
 */
void usart_enable_interrupt(Usart *p_usart, uint32_t ul_sources)
{
  401bb0:	b480      	push	{r7}
  401bb2:	b083      	sub	sp, #12
  401bb4:	af00      	add	r7, sp, #0
  401bb6:	6078      	str	r0, [r7, #4]
  401bb8:	6039      	str	r1, [r7, #0]
	p_usart->US_IER = ul_sources;
  401bba:	687b      	ldr	r3, [r7, #4]
  401bbc:	683a      	ldr	r2, [r7, #0]
  401bbe:	609a      	str	r2, [r3, #8]
}
  401bc0:	370c      	adds	r7, #12
  401bc2:	46bd      	mov	sp, r7
  401bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
  401bc8:	4770      	bx	lr
  401bca:	bf00      	nop

00401bcc <usart_disable_interrupt>:
 *
 * \param p_usart Pointer to a USART peripheral.
 * \param ul_sources Interrupt sources bit map.
 */
void usart_disable_interrupt(Usart *p_usart, uint32_t ul_sources)
{
  401bcc:	b480      	push	{r7}
  401bce:	b083      	sub	sp, #12
  401bd0:	af00      	add	r7, sp, #0
  401bd2:	6078      	str	r0, [r7, #4]
  401bd4:	6039      	str	r1, [r7, #0]
	p_usart->US_IDR = ul_sources;
  401bd6:	687b      	ldr	r3, [r7, #4]
  401bd8:	683a      	ldr	r2, [r7, #0]
  401bda:	60da      	str	r2, [r3, #12]
}
  401bdc:	370c      	adds	r7, #12
  401bde:	46bd      	mov	sp, r7
  401be0:	f85d 7b04 	ldr.w	r7, [sp], #4
  401be4:	4770      	bx	lr
  401be6:	bf00      	nop

00401be8 <usart_get_status>:
 * \param p_usart Pointer to a USART instance.
 *
 * \return The current USART status.
 */
uint32_t usart_get_status(Usart *p_usart)
{
  401be8:	b480      	push	{r7}
  401bea:	b083      	sub	sp, #12
  401bec:	af00      	add	r7, sp, #0
  401bee:	6078      	str	r0, [r7, #4]
	return p_usart->US_CSR;
  401bf0:	687b      	ldr	r3, [r7, #4]
  401bf2:	695b      	ldr	r3, [r3, #20]
}
  401bf4:	4618      	mov	r0, r3
  401bf6:	370c      	adds	r7, #12
  401bf8:	46bd      	mov	sp, r7
  401bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
  401bfe:	4770      	bx	lr

00401c00 <usart_reset_status>:
 * \brief Reset status bits (PARE, OVER, MANERR, UNRE and PXBRK in US_CSR).
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_status(Usart *p_usart)
{
  401c00:	b480      	push	{r7}
  401c02:	b083      	sub	sp, #12
  401c04:	af00      	add	r7, sp, #0
  401c06:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RSTSTA;
  401c08:	687b      	ldr	r3, [r7, #4]
  401c0a:	f44f 7280 	mov.w	r2, #256	; 0x100
  401c0e:	601a      	str	r2, [r3, #0]
}
  401c10:	370c      	adds	r7, #12
  401c12:	46bd      	mov	sp, r7
  401c14:	f85d 7b04 	ldr.w	r7, [sp], #4
  401c18:	4770      	bx	lr
  401c1a:	bf00      	nop

00401c1c <usart_drive_RTS_pin_high>:
 * \brief Drive the pin RTS to 1.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_RTS_pin_high(Usart *p_usart)
{
  401c1c:	b480      	push	{r7}
  401c1e:	b083      	sub	sp, #12
  401c20:	af00      	add	r7, sp, #0
  401c22:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RTSDIS;
  401c24:	687b      	ldr	r3, [r7, #4]
  401c26:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  401c2a:	601a      	str	r2, [r3, #0]
}
  401c2c:	370c      	adds	r7, #12
  401c2e:	46bd      	mov	sp, r7
  401c30:	f85d 7b04 	ldr.w	r7, [sp], #4
  401c34:	4770      	bx	lr
  401c36:	bf00      	nop

00401c38 <usart_is_tx_empty>:
 *
 * \retval 1 Transmitter is empty.
 * \retval 0 Transmitter is not empty.
 */
uint32_t usart_is_tx_empty(Usart *p_usart)
{
  401c38:	b480      	push	{r7}
  401c3a:	b083      	sub	sp, #12
  401c3c:	af00      	add	r7, sp, #0
  401c3e:	6078      	str	r0, [r7, #4]
	return (p_usart->US_CSR & US_CSR_TXEMPTY) > 0;
  401c40:	687b      	ldr	r3, [r7, #4]
  401c42:	695b      	ldr	r3, [r3, #20]
  401c44:	f403 7300 	and.w	r3, r3, #512	; 0x200
  401c48:	2b00      	cmp	r3, #0
  401c4a:	bf14      	ite	ne
  401c4c:	2301      	movne	r3, #1
  401c4e:	2300      	moveq	r3, #0
  401c50:	b2db      	uxtb	r3, r3
}
  401c52:	4618      	mov	r0, r3
  401c54:	370c      	adds	r7, #12
  401c56:	46bd      	mov	sp, r7
  401c58:	f85d 7b04 	ldr.w	r7, [sp], #4
  401c5c:	4770      	bx	lr
  401c5e:	bf00      	nop

00401c60 <usart_is_rx_ready>:
 *
 * \retval 1 Some data has been received.
 * \retval 0 No data has been received.
 */
uint32_t usart_is_rx_ready(Usart *p_usart)
{
  401c60:	b480      	push	{r7}
  401c62:	b083      	sub	sp, #12
  401c64:	af00      	add	r7, sp, #0
  401c66:	6078      	str	r0, [r7, #4]
	return (p_usart->US_CSR & US_CSR_RXRDY) > 0;
  401c68:	687b      	ldr	r3, [r7, #4]
  401c6a:	695b      	ldr	r3, [r3, #20]
  401c6c:	f003 0301 	and.w	r3, r3, #1
  401c70:	2b00      	cmp	r3, #0
  401c72:	bf14      	ite	ne
  401c74:	2301      	movne	r3, #1
  401c76:	2300      	moveq	r3, #0
  401c78:	b2db      	uxtb	r3, r3
}
  401c7a:	4618      	mov	r0, r3
  401c7c:	370c      	adds	r7, #12
  401c7e:	46bd      	mov	sp, r7
  401c80:	f85d 7b04 	ldr.w	r7, [sp], #4
  401c84:	4770      	bx	lr
  401c86:	bf00      	nop

00401c88 <usart_write>:
 *
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
  401c88:	b480      	push	{r7}
  401c8a:	b083      	sub	sp, #12
  401c8c:	af00      	add	r7, sp, #0
  401c8e:	6078      	str	r0, [r7, #4]
  401c90:	6039      	str	r1, [r7, #0]
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  401c92:	687b      	ldr	r3, [r7, #4]
  401c94:	695b      	ldr	r3, [r3, #20]
  401c96:	f003 0302 	and.w	r3, r3, #2
  401c9a:	2b00      	cmp	r3, #0
  401c9c:	d101      	bne.n	401ca2 <usart_write+0x1a>
		return 1;
  401c9e:	2301      	movs	r3, #1
  401ca0:	e005      	b.n	401cae <usart_write+0x26>
	}

	p_usart->US_THR = US_THR_TXCHR(c);
  401ca2:	683b      	ldr	r3, [r7, #0]
  401ca4:	f3c3 0208 	ubfx	r2, r3, #0, #9
  401ca8:	687b      	ldr	r3, [r7, #4]
  401caa:	61da      	str	r2, [r3, #28]
	return 0;
  401cac:	2300      	movs	r3, #0
}
  401cae:	4618      	mov	r0, r3
  401cb0:	370c      	adds	r7, #12
  401cb2:	46bd      	mov	sp, r7
  401cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
  401cb8:	4770      	bx	lr
  401cba:	bf00      	nop

00401cbc <usart_read>:
 *
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
  401cbc:	b480      	push	{r7}
  401cbe:	b083      	sub	sp, #12
  401cc0:	af00      	add	r7, sp, #0
  401cc2:	6078      	str	r0, [r7, #4]
  401cc4:	6039      	str	r1, [r7, #0]
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  401cc6:	687b      	ldr	r3, [r7, #4]
  401cc8:	695b      	ldr	r3, [r3, #20]
  401cca:	f003 0301 	and.w	r3, r3, #1
  401cce:	2b00      	cmp	r3, #0
  401cd0:	d101      	bne.n	401cd6 <usart_read+0x1a>
		return 1;
  401cd2:	2301      	movs	r3, #1
  401cd4:	e006      	b.n	401ce4 <usart_read+0x28>
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  401cd6:	687b      	ldr	r3, [r7, #4]
  401cd8:	699b      	ldr	r3, [r3, #24]
  401cda:	f3c3 0208 	ubfx	r2, r3, #0, #9
  401cde:	683b      	ldr	r3, [r7, #0]
  401ce0:	601a      	str	r2, [r3, #0]

	return 0;
  401ce2:	2300      	movs	r3, #0
}
  401ce4:	4618      	mov	r0, r3
  401ce6:	370c      	adds	r7, #12
  401ce8:	46bd      	mov	sp, r7
  401cea:	f85d 7b04 	ldr.w	r7, [sp], #4
  401cee:	4770      	bx	lr

00401cf0 <usart_disable_writeprotect>:
 * \brief Disable write protect of USART registers.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
  401cf0:	b480      	push	{r7}
  401cf2:	b083      	sub	sp, #12
  401cf4:	af00      	add	r7, sp, #0
  401cf6:	6078      	str	r0, [r7, #4]
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  401cf8:	687b      	ldr	r3, [r7, #4]
  401cfa:	4a04      	ldr	r2, [pc, #16]	; (401d0c <usart_disable_writeprotect+0x1c>)
  401cfc:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
}
  401d00:	370c      	adds	r7, #12
  401d02:	46bd      	mov	sp, r7
  401d04:	f85d 7b04 	ldr.w	r7, [sp], #4
  401d08:	4770      	bx	lr
  401d0a:	bf00      	nop
  401d0c:	55534100 	.word	0x55534100

00401d10 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  401d10:	b580      	push	{r7, lr}
  401d12:	b082      	sub	sp, #8
  401d14:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
  401d16:	4b16      	ldr	r3, [pc, #88]	; (401d70 <Reset_Handler+0x60>)
  401d18:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
  401d1a:	4b16      	ldr	r3, [pc, #88]	; (401d74 <Reset_Handler+0x64>)
  401d1c:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
  401d1e:	687a      	ldr	r2, [r7, #4]
  401d20:	683b      	ldr	r3, [r7, #0]
  401d22:	429a      	cmp	r2, r3
  401d24:	d00c      	beq.n	401d40 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
  401d26:	e007      	b.n	401d38 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
  401d28:	683b      	ldr	r3, [r7, #0]
  401d2a:	1d1a      	adds	r2, r3, #4
  401d2c:	603a      	str	r2, [r7, #0]
  401d2e:	687a      	ldr	r2, [r7, #4]
  401d30:	1d11      	adds	r1, r2, #4
  401d32:	6079      	str	r1, [r7, #4]
  401d34:	6812      	ldr	r2, [r2, #0]
  401d36:	601a      	str	r2, [r3, #0]
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
  401d38:	683b      	ldr	r3, [r7, #0]
  401d3a:	4a0f      	ldr	r2, [pc, #60]	; (401d78 <Reset_Handler+0x68>)
  401d3c:	4293      	cmp	r3, r2
  401d3e:	d3f3      	bcc.n	401d28 <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
  401d40:	4b0e      	ldr	r3, [pc, #56]	; (401d7c <Reset_Handler+0x6c>)
  401d42:	603b      	str	r3, [r7, #0]
  401d44:	e004      	b.n	401d50 <Reset_Handler+0x40>
                *pDest++ = 0;
  401d46:	683b      	ldr	r3, [r7, #0]
  401d48:	1d1a      	adds	r2, r3, #4
  401d4a:	603a      	str	r2, [r7, #0]
  401d4c:	2200      	movs	r2, #0
  401d4e:	601a      	str	r2, [r3, #0]
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
  401d50:	683b      	ldr	r3, [r7, #0]
  401d52:	4a0b      	ldr	r2, [pc, #44]	; (401d80 <Reset_Handler+0x70>)
  401d54:	4293      	cmp	r3, r2
  401d56:	d3f6      	bcc.n	401d46 <Reset_Handler+0x36>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
  401d58:	4b0a      	ldr	r3, [pc, #40]	; (401d84 <Reset_Handler+0x74>)
  401d5a:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  401d5c:	4a0a      	ldr	r2, [pc, #40]	; (401d88 <Reset_Handler+0x78>)
  401d5e:	687b      	ldr	r3, [r7, #4]
  401d60:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  401d64:	6093      	str	r3, [r2, #8]

        /* Initialize the C library */
        __libc_init_array();
  401d66:	4b09      	ldr	r3, [pc, #36]	; (401d8c <Reset_Handler+0x7c>)
  401d68:	4798      	blx	r3

        /* Branch to main function */
        main();
  401d6a:	4b09      	ldr	r3, [pc, #36]	; (401d90 <Reset_Handler+0x80>)
  401d6c:	4798      	blx	r3

        /* Infinite loop */
        while (1);
  401d6e:	e7fe      	b.n	401d6e <Reset_Handler+0x5e>
  401d70:	0040961c 	.word	0x0040961c
  401d74:	20400000 	.word	0x20400000
  401d78:	204008fc 	.word	0x204008fc
  401d7c:	204008fc 	.word	0x204008fc
  401d80:	20401294 	.word	0x20401294
  401d84:	00400000 	.word	0x00400000
  401d88:	e000ed00 	.word	0xe000ed00
  401d8c:	00403ae9 	.word	0x00403ae9
  401d90:	004034d5 	.word	0x004034d5

00401d94 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  401d94:	b480      	push	{r7}
  401d96:	af00      	add	r7, sp, #0
        while (1) {
        }
  401d98:	e7fe      	b.n	401d98 <Dummy_Handler+0x4>
  401d9a:	bf00      	nop

00401d9c <SystemCoreClockUpdate>:

  SystemCoreClock = CHIP_FREQ_CPU_MAX;
}

void SystemCoreClockUpdate( void )
{
  401d9c:	b480      	push	{r7}
  401d9e:	af00      	add	r7, sp, #0
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  401da0:	4b51      	ldr	r3, [pc, #324]	; (401ee8 <SystemCoreClockUpdate+0x14c>)
  401da2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401da4:	f003 0303 	and.w	r3, r3, #3
  401da8:	2b01      	cmp	r3, #1
  401daa:	d014      	beq.n	401dd6 <SystemCoreClockUpdate+0x3a>
  401dac:	2b01      	cmp	r3, #1
  401dae:	d302      	bcc.n	401db6 <SystemCoreClockUpdate+0x1a>
  401db0:	2b02      	cmp	r3, #2
  401db2:	d038      	beq.n	401e26 <SystemCoreClockUpdate+0x8a>
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
      }
    break;

    default:
    break;
  401db4:	e07b      	b.n	401eae <SystemCoreClockUpdate+0x112>
{
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  {
    case PMC_MCKR_CSS_SLOW_CLK: /* Slow clock */
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  401db6:	4b4d      	ldr	r3, [pc, #308]	; (401eec <SystemCoreClockUpdate+0x150>)
  401db8:	695b      	ldr	r3, [r3, #20]
  401dba:	f003 0380 	and.w	r3, r3, #128	; 0x80
  401dbe:	2b00      	cmp	r3, #0
  401dc0:	d004      	beq.n	401dcc <SystemCoreClockUpdate+0x30>
      {
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  401dc2:	4b4b      	ldr	r3, [pc, #300]	; (401ef0 <SystemCoreClockUpdate+0x154>)
  401dc4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  401dc8:	601a      	str	r2, [r3, #0]
      }
      else
      {
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
      }
    break;
  401dca:	e070      	b.n	401eae <SystemCoreClockUpdate+0x112>
      {
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
      }
      else
      {
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  401dcc:	4b48      	ldr	r3, [pc, #288]	; (401ef0 <SystemCoreClockUpdate+0x154>)
  401dce:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
  401dd2:	601a      	str	r2, [r3, #0]
      }
    break;
  401dd4:	e06b      	b.n	401eae <SystemCoreClockUpdate+0x112>

    case PMC_MCKR_CSS_MAIN_CLK: /* Main clock */
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  401dd6:	4b44      	ldr	r3, [pc, #272]	; (401ee8 <SystemCoreClockUpdate+0x14c>)
  401dd8:	6a1b      	ldr	r3, [r3, #32]
  401dda:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  401dde:	2b00      	cmp	r3, #0
  401de0:	d003      	beq.n	401dea <SystemCoreClockUpdate+0x4e>
      {
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  401de2:	4b43      	ldr	r3, [pc, #268]	; (401ef0 <SystemCoreClockUpdate+0x154>)
  401de4:	4a43      	ldr	r2, [pc, #268]	; (401ef4 <SystemCoreClockUpdate+0x158>)
  401de6:	601a      	str	r2, [r3, #0]
  401de8:	e01c      	b.n	401e24 <SystemCoreClockUpdate+0x88>
      }
      else
      {
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  401dea:	4b41      	ldr	r3, [pc, #260]	; (401ef0 <SystemCoreClockUpdate+0x154>)
  401dec:	4a42      	ldr	r2, [pc, #264]	; (401ef8 <SystemCoreClockUpdate+0x15c>)
  401dee:	601a      	str	r2, [r3, #0]

        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  401df0:	4b3d      	ldr	r3, [pc, #244]	; (401ee8 <SystemCoreClockUpdate+0x14c>)
  401df2:	6a1b      	ldr	r3, [r3, #32]
  401df4:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401df8:	2b10      	cmp	r3, #16
  401dfa:	d004      	beq.n	401e06 <SystemCoreClockUpdate+0x6a>
  401dfc:	2b20      	cmp	r3, #32
  401dfe:	d008      	beq.n	401e12 <SystemCoreClockUpdate+0x76>
  401e00:	2b00      	cmp	r3, #0
  401e02:	d00e      	beq.n	401e22 <SystemCoreClockUpdate+0x86>
          case CKGR_MOR_MOSCRCF_12_MHz:
            SystemCoreClock *= 3U;
          break;

          default:
          break;
  401e04:	e00e      	b.n	401e24 <SystemCoreClockUpdate+0x88>
        {
          case CKGR_MOR_MOSCRCF_4_MHz:
          break;

          case CKGR_MOR_MOSCRCF_8_MHz:
            SystemCoreClock *= 2U;
  401e06:	4b3a      	ldr	r3, [pc, #232]	; (401ef0 <SystemCoreClockUpdate+0x154>)
  401e08:	681b      	ldr	r3, [r3, #0]
  401e0a:	005b      	lsls	r3, r3, #1
  401e0c:	4a38      	ldr	r2, [pc, #224]	; (401ef0 <SystemCoreClockUpdate+0x154>)
  401e0e:	6013      	str	r3, [r2, #0]
          break;
  401e10:	e008      	b.n	401e24 <SystemCoreClockUpdate+0x88>

          case CKGR_MOR_MOSCRCF_12_MHz:
            SystemCoreClock *= 3U;
  401e12:	4b37      	ldr	r3, [pc, #220]	; (401ef0 <SystemCoreClockUpdate+0x154>)
  401e14:	681a      	ldr	r2, [r3, #0]
  401e16:	4613      	mov	r3, r2
  401e18:	005b      	lsls	r3, r3, #1
  401e1a:	4413      	add	r3, r2
  401e1c:	4a34      	ldr	r2, [pc, #208]	; (401ef0 <SystemCoreClockUpdate+0x154>)
  401e1e:	6013      	str	r3, [r2, #0]
          break;
  401e20:	e000      	b.n	401e24 <SystemCoreClockUpdate+0x88>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;

        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
        {
          case CKGR_MOR_MOSCRCF_4_MHz:
          break;
  401e22:	bf00      	nop

          default:
          break;
        }
      }
    break;
  401e24:	e043      	b.n	401eae <SystemCoreClockUpdate+0x112>

    case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  401e26:	4b30      	ldr	r3, [pc, #192]	; (401ee8 <SystemCoreClockUpdate+0x14c>)
  401e28:	6a1b      	ldr	r3, [r3, #32]
  401e2a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  401e2e:	2b00      	cmp	r3, #0
  401e30:	d003      	beq.n	401e3a <SystemCoreClockUpdate+0x9e>
      {
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  401e32:	4b2f      	ldr	r3, [pc, #188]	; (401ef0 <SystemCoreClockUpdate+0x154>)
  401e34:	4a2f      	ldr	r2, [pc, #188]	; (401ef4 <SystemCoreClockUpdate+0x158>)
  401e36:	601a      	str	r2, [r3, #0]
  401e38:	e01c      	b.n	401e74 <SystemCoreClockUpdate+0xd8>
      }
      else
      {
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  401e3a:	4b2d      	ldr	r3, [pc, #180]	; (401ef0 <SystemCoreClockUpdate+0x154>)
  401e3c:	4a2e      	ldr	r2, [pc, #184]	; (401ef8 <SystemCoreClockUpdate+0x15c>)
  401e3e:	601a      	str	r2, [r3, #0]

        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  401e40:	4b29      	ldr	r3, [pc, #164]	; (401ee8 <SystemCoreClockUpdate+0x14c>)
  401e42:	6a1b      	ldr	r3, [r3, #32]
  401e44:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401e48:	2b10      	cmp	r3, #16
  401e4a:	d004      	beq.n	401e56 <SystemCoreClockUpdate+0xba>
  401e4c:	2b20      	cmp	r3, #32
  401e4e:	d008      	beq.n	401e62 <SystemCoreClockUpdate+0xc6>
  401e50:	2b00      	cmp	r3, #0
  401e52:	d00e      	beq.n	401e72 <SystemCoreClockUpdate+0xd6>
          case CKGR_MOR_MOSCRCF_12_MHz:
            SystemCoreClock *= 3U;
          break;

          default:
          break;
  401e54:	e00e      	b.n	401e74 <SystemCoreClockUpdate+0xd8>
        {
          case CKGR_MOR_MOSCRCF_4_MHz:
          break;

          case CKGR_MOR_MOSCRCF_8_MHz:
            SystemCoreClock *= 2U;
  401e56:	4b26      	ldr	r3, [pc, #152]	; (401ef0 <SystemCoreClockUpdate+0x154>)
  401e58:	681b      	ldr	r3, [r3, #0]
  401e5a:	005b      	lsls	r3, r3, #1
  401e5c:	4a24      	ldr	r2, [pc, #144]	; (401ef0 <SystemCoreClockUpdate+0x154>)
  401e5e:	6013      	str	r3, [r2, #0]
          break;
  401e60:	e008      	b.n	401e74 <SystemCoreClockUpdate+0xd8>

          case CKGR_MOR_MOSCRCF_12_MHz:
            SystemCoreClock *= 3U;
  401e62:	4b23      	ldr	r3, [pc, #140]	; (401ef0 <SystemCoreClockUpdate+0x154>)
  401e64:	681a      	ldr	r2, [r3, #0]
  401e66:	4613      	mov	r3, r2
  401e68:	005b      	lsls	r3, r3, #1
  401e6a:	4413      	add	r3, r2
  401e6c:	4a20      	ldr	r2, [pc, #128]	; (401ef0 <SystemCoreClockUpdate+0x154>)
  401e6e:	6013      	str	r3, [r2, #0]
          break;
  401e70:	e000      	b.n	401e74 <SystemCoreClockUpdate+0xd8>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;

        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
        {
          case CKGR_MOR_MOSCRCF_4_MHz:
          break;
  401e72:	bf00      	nop
          default:
          break;
        }
      }

      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  401e74:	4b1c      	ldr	r3, [pc, #112]	; (401ee8 <SystemCoreClockUpdate+0x14c>)
  401e76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401e78:	f003 0303 	and.w	r3, r3, #3
  401e7c:	2b02      	cmp	r3, #2
  401e7e:	d115      	bne.n	401eac <SystemCoreClockUpdate+0x110>
      {
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  401e80:	4b19      	ldr	r3, [pc, #100]	; (401ee8 <SystemCoreClockUpdate+0x14c>)
  401e82:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  401e84:	4b1d      	ldr	r3, [pc, #116]	; (401efc <SystemCoreClockUpdate+0x160>)
  401e86:	4013      	ands	r3, r2
  401e88:	0c1b      	lsrs	r3, r3, #16
  401e8a:	3301      	adds	r3, #1
  401e8c:	4a18      	ldr	r2, [pc, #96]	; (401ef0 <SystemCoreClockUpdate+0x154>)
  401e8e:	6812      	ldr	r2, [r2, #0]
  401e90:	fb02 f303 	mul.w	r3, r2, r3
  401e94:	4a16      	ldr	r2, [pc, #88]	; (401ef0 <SystemCoreClockUpdate+0x154>)
  401e96:	6013      	str	r3, [r2, #0]
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  401e98:	4b13      	ldr	r3, [pc, #76]	; (401ee8 <SystemCoreClockUpdate+0x14c>)
  401e9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  401e9c:	b2db      	uxtb	r3, r3
  401e9e:	4a14      	ldr	r2, [pc, #80]	; (401ef0 <SystemCoreClockUpdate+0x154>)
  401ea0:	6812      	ldr	r2, [r2, #0]
  401ea2:	fbb2 f3f3 	udiv	r3, r2, r3
  401ea6:	4a12      	ldr	r2, [pc, #72]	; (401ef0 <SystemCoreClockUpdate+0x154>)
  401ea8:	6013      	str	r3, [r2, #0]
      }
    break;
  401eaa:	e7ff      	b.n	401eac <SystemCoreClockUpdate+0x110>
  401eac:	bf00      	nop

    default:
    break;
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  401eae:	4b0e      	ldr	r3, [pc, #56]	; (401ee8 <SystemCoreClockUpdate+0x14c>)
  401eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401eb2:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401eb6:	2b70      	cmp	r3, #112	; 0x70
  401eb8:	d108      	bne.n	401ecc <SystemCoreClockUpdate+0x130>
  {
    SystemCoreClock /= 3U;
  401eba:	4b0d      	ldr	r3, [pc, #52]	; (401ef0 <SystemCoreClockUpdate+0x154>)
  401ebc:	681b      	ldr	r3, [r3, #0]
  401ebe:	4a10      	ldr	r2, [pc, #64]	; (401f00 <SystemCoreClockUpdate+0x164>)
  401ec0:	fba2 2303 	umull	r2, r3, r2, r3
  401ec4:	085b      	lsrs	r3, r3, #1
  401ec6:	4a0a      	ldr	r2, [pc, #40]	; (401ef0 <SystemCoreClockUpdate+0x154>)
  401ec8:	6013      	str	r3, [r2, #0]
  401eca:	e009      	b.n	401ee0 <SystemCoreClockUpdate+0x144>
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  401ecc:	4b06      	ldr	r3, [pc, #24]	; (401ee8 <SystemCoreClockUpdate+0x14c>)
  401ece:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401ed0:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401ed4:	091a      	lsrs	r2, r3, #4
  401ed6:	4b06      	ldr	r3, [pc, #24]	; (401ef0 <SystemCoreClockUpdate+0x154>)
  401ed8:	681b      	ldr	r3, [r3, #0]
  401eda:	40d3      	lsrs	r3, r2
  401edc:	4a04      	ldr	r2, [pc, #16]	; (401ef0 <SystemCoreClockUpdate+0x154>)
  401ede:	6013      	str	r3, [r2, #0]
  }
}
  401ee0:	46bd      	mov	sp, r7
  401ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
  401ee6:	4770      	bx	lr
  401ee8:	400e0600 	.word	0x400e0600
  401eec:	400e1810 	.word	0x400e1810
  401ef0:	20400004 	.word	0x20400004
  401ef4:	00b71b00 	.word	0x00b71b00
  401ef8:	003d0900 	.word	0x003d0900
  401efc:	07ff0000 	.word	0x07ff0000
  401f00:	aaaaaaab 	.word	0xaaaaaaab

00401f04 <system_init_flash>:
/**
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  401f04:	b480      	push	{r7}
  401f06:	b083      	sub	sp, #12
  401f08:	af00      	add	r7, sp, #0
  401f0a:	6078      	str	r0, [r7, #4]
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  401f0c:	687b      	ldr	r3, [r7, #4]
  401f0e:	4a18      	ldr	r2, [pc, #96]	; (401f70 <system_init_flash+0x6c>)
  401f10:	4293      	cmp	r3, r2
  401f12:	d804      	bhi.n	401f1e <system_init_flash+0x1a>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  401f14:	4b17      	ldr	r3, [pc, #92]	; (401f74 <system_init_flash+0x70>)
  401f16:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  401f1a:	601a      	str	r2, [r3, #0]
  401f1c:	e023      	b.n	401f66 <system_init_flash+0x62>
  }
  else
  {
    if (ul_clk < CHIP_FREQ_FWS_1)
  401f1e:	687b      	ldr	r3, [r7, #4]
  401f20:	4a15      	ldr	r2, [pc, #84]	; (401f78 <system_init_flash+0x74>)
  401f22:	4293      	cmp	r3, r2
  401f24:	d803      	bhi.n	401f2e <system_init_flash+0x2a>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  401f26:	4b13      	ldr	r3, [pc, #76]	; (401f74 <system_init_flash+0x70>)
  401f28:	4a14      	ldr	r2, [pc, #80]	; (401f7c <system_init_flash+0x78>)
  401f2a:	601a      	str	r2, [r3, #0]
  401f2c:	e01b      	b.n	401f66 <system_init_flash+0x62>
    }
    else
    {
      if (ul_clk < CHIP_FREQ_FWS_2)
  401f2e:	687b      	ldr	r3, [r7, #4]
  401f30:	4a13      	ldr	r2, [pc, #76]	; (401f80 <system_init_flash+0x7c>)
  401f32:	4293      	cmp	r3, r2
  401f34:	d803      	bhi.n	401f3e <system_init_flash+0x3a>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  401f36:	4b0f      	ldr	r3, [pc, #60]	; (401f74 <system_init_flash+0x70>)
  401f38:	4a12      	ldr	r2, [pc, #72]	; (401f84 <system_init_flash+0x80>)
  401f3a:	601a      	str	r2, [r3, #0]
  401f3c:	e013      	b.n	401f66 <system_init_flash+0x62>
      }
      else
      {
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  401f3e:	687b      	ldr	r3, [r7, #4]
  401f40:	4a11      	ldr	r2, [pc, #68]	; (401f88 <system_init_flash+0x84>)
  401f42:	4293      	cmp	r3, r2
  401f44:	d803      	bhi.n	401f4e <system_init_flash+0x4a>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  401f46:	4b0b      	ldr	r3, [pc, #44]	; (401f74 <system_init_flash+0x70>)
  401f48:	4a10      	ldr	r2, [pc, #64]	; (401f8c <system_init_flash+0x88>)
  401f4a:	601a      	str	r2, [r3, #0]
  401f4c:	e00b      	b.n	401f66 <system_init_flash+0x62>
        }
        else
        {
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  401f4e:	687b      	ldr	r3, [r7, #4]
  401f50:	4a0f      	ldr	r2, [pc, #60]	; (401f90 <system_init_flash+0x8c>)
  401f52:	4293      	cmp	r3, r2
  401f54:	d804      	bhi.n	401f60 <system_init_flash+0x5c>
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  401f56:	4b07      	ldr	r3, [pc, #28]	; (401f74 <system_init_flash+0x70>)
  401f58:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  401f5c:	601a      	str	r2, [r3, #0]
  401f5e:	e002      	b.n	401f66 <system_init_flash+0x62>
          }
          else
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  401f60:	4b04      	ldr	r3, [pc, #16]	; (401f74 <system_init_flash+0x70>)
  401f62:	4a0c      	ldr	r2, [pc, #48]	; (401f94 <system_init_flash+0x90>)
  401f64:	601a      	str	r2, [r3, #0]
          }
        }
      }
    }
  }
}
  401f66:	370c      	adds	r7, #12
  401f68:	46bd      	mov	sp, r7
  401f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
  401f6e:	4770      	bx	lr
  401f70:	01312cff 	.word	0x01312cff
  401f74:	400e0c00 	.word	0x400e0c00
  401f78:	026259ff 	.word	0x026259ff
  401f7c:	04000100 	.word	0x04000100
  401f80:	039386ff 	.word	0x039386ff
  401f84:	04000200 	.word	0x04000200
  401f88:	04c4b3ff 	.word	0x04c4b3ff
  401f8c:	04000300 	.word	0x04000300
  401f90:	05f5e0ff 	.word	0x05f5e0ff
  401f94:	04000500 	.word	0x04000500

00401f98 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
  401f98:	b480      	push	{r7}
  401f9a:	b085      	sub	sp, #20
  401f9c:	af00      	add	r7, sp, #0
  401f9e:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;
  401fa0:	4b10      	ldr	r3, [pc, #64]	; (401fe4 <_sbrk+0x4c>)
  401fa2:	60fb      	str	r3, [r7, #12]

	if (heap == NULL) {
  401fa4:	4b10      	ldr	r3, [pc, #64]	; (401fe8 <_sbrk+0x50>)
  401fa6:	681b      	ldr	r3, [r3, #0]
  401fa8:	2b00      	cmp	r3, #0
  401faa:	d102      	bne.n	401fb2 <_sbrk+0x1a>
		heap = (unsigned char *)&_end;
  401fac:	4b0e      	ldr	r3, [pc, #56]	; (401fe8 <_sbrk+0x50>)
  401fae:	4a0f      	ldr	r2, [pc, #60]	; (401fec <_sbrk+0x54>)
  401fb0:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
  401fb2:	4b0d      	ldr	r3, [pc, #52]	; (401fe8 <_sbrk+0x50>)
  401fb4:	681b      	ldr	r3, [r3, #0]
  401fb6:	60bb      	str	r3, [r7, #8]

	if (((int)prev_heap + incr) > ramend) {
  401fb8:	68ba      	ldr	r2, [r7, #8]
  401fba:	687b      	ldr	r3, [r7, #4]
  401fbc:	441a      	add	r2, r3
  401fbe:	68fb      	ldr	r3, [r7, #12]
  401fc0:	429a      	cmp	r2, r3
  401fc2:	dd02      	ble.n	401fca <_sbrk+0x32>
		return (caddr_t) -1;	
  401fc4:	f04f 33ff 	mov.w	r3, #4294967295
  401fc8:	e006      	b.n	401fd8 <_sbrk+0x40>
	}

	heap += incr;
  401fca:	4b07      	ldr	r3, [pc, #28]	; (401fe8 <_sbrk+0x50>)
  401fcc:	681a      	ldr	r2, [r3, #0]
  401fce:	687b      	ldr	r3, [r7, #4]
  401fd0:	4413      	add	r3, r2
  401fd2:	4a05      	ldr	r2, [pc, #20]	; (401fe8 <_sbrk+0x50>)
  401fd4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
  401fd6:	68bb      	ldr	r3, [r7, #8]
}
  401fd8:	4618      	mov	r0, r3
  401fda:	3714      	adds	r7, #20
  401fdc:	46bd      	mov	sp, r7
  401fde:	f85d 7b04 	ldr.w	r7, [sp], #4
  401fe2:	4770      	bx	lr
  401fe4:	2045fffc 	.word	0x2045fffc
  401fe8:	2040098c 	.word	0x2040098c
  401fec:	20403498 	.word	0x20403498

00401ff0 <_close>:
{
	return -1;
}

extern int _close(int file)
{
  401ff0:	b480      	push	{r7}
  401ff2:	b083      	sub	sp, #12
  401ff4:	af00      	add	r7, sp, #0
  401ff6:	6078      	str	r0, [r7, #4]
	return -1;
  401ff8:	f04f 33ff 	mov.w	r3, #4294967295
}
  401ffc:	4618      	mov	r0, r3
  401ffe:	370c      	adds	r7, #12
  402000:	46bd      	mov	sp, r7
  402002:	f85d 7b04 	ldr.w	r7, [sp], #4
  402006:	4770      	bx	lr

00402008 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
  402008:	b480      	push	{r7}
  40200a:	b083      	sub	sp, #12
  40200c:	af00      	add	r7, sp, #0
  40200e:	6078      	str	r0, [r7, #4]
  402010:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
  402012:	683b      	ldr	r3, [r7, #0]
  402014:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  402018:	605a      	str	r2, [r3, #4]

	return 0;
  40201a:	2300      	movs	r3, #0
}
  40201c:	4618      	mov	r0, r3
  40201e:	370c      	adds	r7, #12
  402020:	46bd      	mov	sp, r7
  402022:	f85d 7b04 	ldr.w	r7, [sp], #4
  402026:	4770      	bx	lr

00402028 <_isatty>:

extern int _isatty(int file)
{
  402028:	b480      	push	{r7}
  40202a:	b083      	sub	sp, #12
  40202c:	af00      	add	r7, sp, #0
  40202e:	6078      	str	r0, [r7, #4]
	return 1;
  402030:	2301      	movs	r3, #1
}
  402032:	4618      	mov	r0, r3
  402034:	370c      	adds	r7, #12
  402036:	46bd      	mov	sp, r7
  402038:	f85d 7b04 	ldr.w	r7, [sp], #4
  40203c:	4770      	bx	lr
  40203e:	bf00      	nop

00402040 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
  402040:	b480      	push	{r7}
  402042:	b085      	sub	sp, #20
  402044:	af00      	add	r7, sp, #0
  402046:	60f8      	str	r0, [r7, #12]
  402048:	60b9      	str	r1, [r7, #8]
  40204a:	607a      	str	r2, [r7, #4]
	return 0;
  40204c:	2300      	movs	r3, #0
}
  40204e:	4618      	mov	r0, r3
  402050:	3714      	adds	r7, #20
  402052:	46bd      	mov	sp, r7
  402054:	f85d 7b04 	ldr.w	r7, [sp], #4
  402058:	4770      	bx	lr
  40205a:	bf00      	nop

0040205c <PCA9952_write_reg>:
 *
 * \param reg_index Register address. Use macros as defined in the header file.
 * \param data Data that should be written to the device register.
 */
void PCA9952_write_reg(unsigned char topBotn, uint8_t reg_index, uint8_t data)
{
  40205c:	b580      	push	{r7, lr}
  40205e:	b088      	sub	sp, #32
  402060:	af00      	add	r7, sp, #0
  402062:	4603      	mov	r3, r0
  402064:	71fb      	strb	r3, [r7, #7]
  402066:	460b      	mov	r3, r1
  402068:	71bb      	strb	r3, [r7, #6]
  40206a:	4613      	mov	r3, r2
  40206c:	717b      	strb	r3, [r7, #5]
	uint8_t pack[2];
	twihs_packet_t twi_package;

	pack[0] = reg_index;
  40206e:	79bb      	ldrb	r3, [r7, #6]
  402070:	773b      	strb	r3, [r7, #28]
	pack[1] = data;
  402072:	797b      	ldrb	r3, [r7, #5]
  402074:	777b      	strb	r3, [r7, #29]

//7apr15	twi_package.chip = PCA9952_TWI_ADDRESS;

	if (topBotn == LED_TOP)
  402076:	79fb      	ldrb	r3, [r7, #7]
  402078:	2b00      	cmp	r3, #0
  40207a:	d102      	bne.n	402082 <PCA9952_write_reg+0x26>
	{
		twi_package.chip = PCA9952_U7_TOPDRIVE_TWI_ADDRESS;
  40207c:	2360      	movs	r3, #96	; 0x60
  40207e:	763b      	strb	r3, [r7, #24]
  402080:	e004      	b.n	40208c <PCA9952_write_reg+0x30>
	}
	else if (topBotn == LED_BOTTOM)
  402082:	79fb      	ldrb	r3, [r7, #7]
  402084:	2b01      	cmp	r3, #1
  402086:	d101      	bne.n	40208c <PCA9952_write_reg+0x30>
	{
		twi_package.chip = PCA9952_U8_BOTDRIVE_TWI_ADDRESS;
  402088:	2361      	movs	r3, #97	; 0x61
  40208a:	763b      	strb	r3, [r7, #24]
	}

	twi_package.addr[0] = 0;		//is this right? 8feb16
  40208c:	2300      	movs	r3, #0
  40208e:	723b      	strb	r3, [r7, #8]
	twi_package.addr[1] = 0;		//is this right? 8feb16
  402090:	2300      	movs	r3, #0
  402092:	727b      	strb	r3, [r7, #9]
	twi_package.addr[2] = 0;		//is this right? 8feb16
  402094:	2300      	movs	r3, #0
  402096:	72bb      	strb	r3, [r7, #10]
	twi_package.addr_length = 0;
  402098:	2300      	movs	r3, #0
  40209a:	60fb      	str	r3, [r7, #12]
	twi_package.buffer = &pack;
  40209c:	f107 031c 	add.w	r3, r7, #28
  4020a0:	613b      	str	r3, [r7, #16]
	twi_package.length = sizeof(pack);
  4020a2:	2302      	movs	r3, #2
  4020a4:	617b      	str	r3, [r7, #20]

	while(twihs_master_write(PCA9952_TWI, &twi_package)!=TWIHS_SUCCESS);
  4020a6:	bf00      	nop
  4020a8:	f107 0308 	add.w	r3, r7, #8
  4020ac:	4805      	ldr	r0, [pc, #20]	; (4020c4 <PCA9952_write_reg+0x68>)
  4020ae:	4619      	mov	r1, r3
  4020b0:	4b05      	ldr	r3, [pc, #20]	; (4020c8 <PCA9952_write_reg+0x6c>)
  4020b2:	4798      	blx	r3
  4020b4:	4603      	mov	r3, r0
  4020b6:	2b00      	cmp	r3, #0
  4020b8:	d1f6      	bne.n	4020a8 <PCA9952_write_reg+0x4c>

	return;
  4020ba:	bf00      	nop
}
  4020bc:	3720      	adds	r7, #32
  4020be:	46bd      	mov	sp, r7
  4020c0:	bd80      	pop	{r7, pc}
  4020c2:	bf00      	nop
  4020c4:	40018000 	.word	0x40018000
  4020c8:	0040181d 	.word	0x0040181d

004020cc <PCA9952_read_reg>:
 *
 * \param reg_index Register address.
 * \returns Register content.
 */
uint8_t PCA9952_read_reg(unsigned char topBotn, uint8_t reg_index)
{
  4020cc:	b580      	push	{r7, lr}
  4020ce:	b088      	sub	sp, #32
  4020d0:	af00      	add	r7, sp, #0
  4020d2:	4603      	mov	r3, r0
  4020d4:	460a      	mov	r2, r1
  4020d6:	71fb      	strb	r3, [r7, #7]
  4020d8:	4613      	mov	r3, r2
  4020da:	71bb      	strb	r3, [r7, #6]
	uint8_t data;
	twihs_packet_t twi_package;

//7apr15	twi_package.chip = PCA9952_TWI_ADDRESS;

	if (topBotn == LED_TOP)
  4020dc:	79fb      	ldrb	r3, [r7, #7]
  4020de:	2b00      	cmp	r3, #0
  4020e0:	d102      	bne.n	4020e8 <PCA9952_read_reg+0x1c>
	{
		twi_package.chip = PCA9952_U7_TOPDRIVE_TWI_ADDRESS;
  4020e2:	2360      	movs	r3, #96	; 0x60
  4020e4:	763b      	strb	r3, [r7, #24]
  4020e6:	e004      	b.n	4020f2 <PCA9952_read_reg+0x26>
	}
	else if (topBotn == LED_BOTTOM)
  4020e8:	79fb      	ldrb	r3, [r7, #7]
  4020ea:	2b01      	cmp	r3, #1
  4020ec:	d101      	bne.n	4020f2 <PCA9952_read_reg+0x26>
	{
		twi_package.chip = PCA9952_U8_BOTDRIVE_TWI_ADDRESS;
  4020ee:	2361      	movs	r3, #97	; 0x61
  4020f0:	763b      	strb	r3, [r7, #24]
	}

	twi_package.addr[0] = 0;		//is this right? 8feb16
  4020f2:	2300      	movs	r3, #0
  4020f4:	723b      	strb	r3, [r7, #8]
	twi_package.addr[1] = 0;		//is this right? 8feb16
  4020f6:	2300      	movs	r3, #0
  4020f8:	727b      	strb	r3, [r7, #9]
	twi_package.addr[2] = 0;		//is this right? 8feb16
  4020fa:	2300      	movs	r3, #0
  4020fc:	72bb      	strb	r3, [r7, #10]
	twi_package.addr_length = 0;
  4020fe:	2300      	movs	r3, #0
  402100:	60fb      	str	r3, [r7, #12]
	twi_package.buffer = &reg_index;
  402102:	1dbb      	adds	r3, r7, #6
  402104:	613b      	str	r3, [r7, #16]
	twi_package.length = 1;
  402106:	2301      	movs	r3, #1
  402108:	617b      	str	r3, [r7, #20]
	while(twihs_master_write(PCA9952_TWI, &twi_package)!=TWIHS_SUCCESS);
  40210a:	bf00      	nop
  40210c:	f107 0308 	add.w	r3, r7, #8
  402110:	480f      	ldr	r0, [pc, #60]	; (402150 <PCA9952_read_reg+0x84>)
  402112:	4619      	mov	r1, r3
  402114:	4b0f      	ldr	r3, [pc, #60]	; (402154 <PCA9952_read_reg+0x88>)
  402116:	4798      	blx	r3
  402118:	4603      	mov	r3, r0
  40211a:	2b00      	cmp	r3, #0
  40211c:	d1f6      	bne.n	40210c <PCA9952_read_reg+0x40>
	* specified in the datasheet.
	* Also there seems to be a bug in the TWI module or the driver
	* since some delay here (code or real delay) adds about 500us
	* between the write and the next read cycle.
	*/
	mdelay(20);
  40211e:	2014      	movs	r0, #20
  402120:	4b0d      	ldr	r3, [pc, #52]	; (402158 <PCA9952_read_reg+0x8c>)
  402122:	4798      	blx	r3

//7apr15 this was set above, no need to reassign	twi_package.chip = PCA9952_TWI_ADDRESS;
	twi_package.addr_length = 0;
  402124:	2300      	movs	r3, #0
  402126:	60fb      	str	r3, [r7, #12]
	twi_package.buffer = &data;
  402128:	f107 031f 	add.w	r3, r7, #31
  40212c:	613b      	str	r3, [r7, #16]
	twi_package.length = 1;
  40212e:	2301      	movs	r3, #1
  402130:	617b      	str	r3, [r7, #20]
	while(twihs_master_read(PCA9952_TWI, &twi_package)!=TWIHS_SUCCESS);
  402132:	bf00      	nop
  402134:	f107 0308 	add.w	r3, r7, #8
  402138:	4805      	ldr	r0, [pc, #20]	; (402150 <PCA9952_read_reg+0x84>)
  40213a:	4619      	mov	r1, r3
  40213c:	4b07      	ldr	r3, [pc, #28]	; (40215c <PCA9952_read_reg+0x90>)
  40213e:	4798      	blx	r3
  402140:	4603      	mov	r3, r0
  402142:	2b00      	cmp	r3, #0
  402144:	d1f6      	bne.n	402134 <PCA9952_read_reg+0x68>

	return data;
  402146:	7ffb      	ldrb	r3, [r7, #31]
}
  402148:	4618      	mov	r0, r3
  40214a:	3720      	adds	r7, #32
  40214c:	46bd      	mov	sp, r7
  40214e:	bd80      	pop	{r7, pc}
  402150:	40018000 	.word	0x40018000
  402154:	0040181d 	.word	0x0040181d
  402158:	00403149 	.word	0x00403149
  40215c:	00401735 	.word	0x00401735

00402160 <PCA9952_init>:

extern uint8_t func_transmit(const uint8_t *p_buff, uint32_t ulsize); //lazy, defined in another c file 10feb16 jsi

void PCA9952_init(void) //7apr15
{
  402160:	b5b0      	push	{r4, r5, r7, lr}
  402162:	b094      	sub	sp, #80	; 0x50
  402164:	af02      	add	r7, sp, #8
	volatile uint8_t tmp1, tmp2, tmp3, tmp4;
	
	char printStr[64] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
  402166:	1d3b      	adds	r3, r7, #4
  402168:	2240      	movs	r2, #64	; 0x40
  40216a:	4618      	mov	r0, r3
  40216c:	2100      	movs	r1, #0
  40216e:	4b45      	ldr	r3, [pc, #276]	; (402284 <PCA9952_init+0x124>)
  402170:	4798      	blx	r3
	/* Store cpu frequency locally*/
//7apr15	cpu_hz = fcpu;

	//Note output is off at the chip level before coming into this routine, LED_OEn set high before calling this function from main()

	PCA9952_write_reg(LED_TOP, PCA9952_MODE1, 0);		//No autoincrement, normal mode not sleep, does not respond to sub or allcall addresses
  402172:	2000      	movs	r0, #0
  402174:	2100      	movs	r1, #0
  402176:	2200      	movs	r2, #0
  402178:	4b43      	ldr	r3, [pc, #268]	; (402288 <PCA9952_init+0x128>)
  40217a:	4798      	blx	r3
	PCA9952_write_reg(LED_TOP, PCA9952_MODE2, 0);		//Dimming not blinking, change on stop not ack (don't really care but have to pick something)
  40217c:	2000      	movs	r0, #0
  40217e:	2101      	movs	r1, #1
  402180:	2200      	movs	r2, #0
  402182:	4b41      	ldr	r3, [pc, #260]	; (402288 <PCA9952_init+0x128>)
  402184:	4798      	blx	r3
	PCA9952_write_reg(LED_TOP, PCA9952_IREFALL, LED_DRIVER_CURRENT); //9apr15 drive at half current for now, power supply circuit needs modification
  402186:	2000      	movs	r0, #0
  402188:	2143      	movs	r1, #67	; 0x43
  40218a:	22c8      	movs	r2, #200	; 0xc8
  40218c:	4b3e      	ldr	r3, [pc, #248]	; (402288 <PCA9952_init+0x128>)
  40218e:	4798      	blx	r3
	PCA9952_write_reg(LED_TOP, PCA9952_LEDOUT0, 0);		//Setting all channels off for now
  402190:	2000      	movs	r0, #0
  402192:	2102      	movs	r1, #2
  402194:	2200      	movs	r2, #0
  402196:	4b3c      	ldr	r3, [pc, #240]	; (402288 <PCA9952_init+0x128>)
  402198:	4798      	blx	r3
	PCA9952_write_reg(LED_TOP, PCA9952_LEDOUT1, 0);
  40219a:	2000      	movs	r0, #0
  40219c:	2103      	movs	r1, #3
  40219e:	2200      	movs	r2, #0
  4021a0:	4b39      	ldr	r3, [pc, #228]	; (402288 <PCA9952_init+0x128>)
  4021a2:	4798      	blx	r3
	PCA9952_write_reg(LED_TOP, PCA9952_LEDOUT2, 0);
  4021a4:	2000      	movs	r0, #0
  4021a6:	2104      	movs	r1, #4
  4021a8:	2200      	movs	r2, #0
  4021aa:	4b37      	ldr	r3, [pc, #220]	; (402288 <PCA9952_init+0x128>)
  4021ac:	4798      	blx	r3
	PCA9952_write_reg(LED_TOP, PCA9952_LEDOUT3, 0);
  4021ae:	2000      	movs	r0, #0
  4021b0:	2105      	movs	r1, #5
  4021b2:	2200      	movs	r2, #0
  4021b4:	4b34      	ldr	r3, [pc, #208]	; (402288 <PCA9952_init+0x128>)
  4021b6:	4798      	blx	r3

	tmp1 = PCA9952_read_reg(LED_TOP, PCA9952_EFLAG0);	//TODO: just see what we get, will need to weave error checking into this system later
  4021b8:	2000      	movs	r0, #0
  4021ba:	2144      	movs	r1, #68	; 0x44
  4021bc:	4b33      	ldr	r3, [pc, #204]	; (40228c <PCA9952_init+0x12c>)
  4021be:	4798      	blx	r3
  4021c0:	4603      	mov	r3, r0
  4021c2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	tmp2 = PCA9952_read_reg(LED_TOP, PCA9952_EFLAG1);
  4021c6:	2000      	movs	r0, #0
  4021c8:	2145      	movs	r1, #69	; 0x45
  4021ca:	4b30      	ldr	r3, [pc, #192]	; (40228c <PCA9952_init+0x12c>)
  4021cc:	4798      	blx	r3
  4021ce:	4603      	mov	r3, r0
  4021d0:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46

	PCA9952_write_reg(LED_BOTTOM, PCA9952_MODE1, 0);		//No autoincrement, normal mode not sleep, does not respond to sub or allcall addresses
  4021d4:	2001      	movs	r0, #1
  4021d6:	2100      	movs	r1, #0
  4021d8:	2200      	movs	r2, #0
  4021da:	4b2b      	ldr	r3, [pc, #172]	; (402288 <PCA9952_init+0x128>)
  4021dc:	4798      	blx	r3
	PCA9952_write_reg(LED_BOTTOM, PCA9952_MODE2, 0);		//Dimming not blinking, change on stop not ack (don't really care but have to pick something)
  4021de:	2001      	movs	r0, #1
  4021e0:	2101      	movs	r1, #1
  4021e2:	2200      	movs	r2, #0
  4021e4:	4b28      	ldr	r3, [pc, #160]	; (402288 <PCA9952_init+0x128>)
  4021e6:	4798      	blx	r3
	PCA9952_write_reg(LED_BOTTOM, PCA9952_IREFALL, LED_DRIVER_CURRENT); //9apr15 drive at half current for now, power supply circuit needs modification
  4021e8:	2001      	movs	r0, #1
  4021ea:	2143      	movs	r1, #67	; 0x43
  4021ec:	22c8      	movs	r2, #200	; 0xc8
  4021ee:	4b26      	ldr	r3, [pc, #152]	; (402288 <PCA9952_init+0x128>)
  4021f0:	4798      	blx	r3
	PCA9952_write_reg(LED_BOTTOM, PCA9952_LEDOUT0, 0);		//Setting all channels off for now
  4021f2:	2001      	movs	r0, #1
  4021f4:	2102      	movs	r1, #2
  4021f6:	2200      	movs	r2, #0
  4021f8:	4b23      	ldr	r3, [pc, #140]	; (402288 <PCA9952_init+0x128>)
  4021fa:	4798      	blx	r3
	PCA9952_write_reg(LED_BOTTOM, PCA9952_LEDOUT1, 0);
  4021fc:	2001      	movs	r0, #1
  4021fe:	2103      	movs	r1, #3
  402200:	2200      	movs	r2, #0
  402202:	4b21      	ldr	r3, [pc, #132]	; (402288 <PCA9952_init+0x128>)
  402204:	4798      	blx	r3
	PCA9952_write_reg(LED_BOTTOM, PCA9952_LEDOUT2, 0);
  402206:	2001      	movs	r0, #1
  402208:	2104      	movs	r1, #4
  40220a:	2200      	movs	r2, #0
  40220c:	4b1e      	ldr	r3, [pc, #120]	; (402288 <PCA9952_init+0x128>)
  40220e:	4798      	blx	r3
	PCA9952_write_reg(LED_BOTTOM, PCA9952_LEDOUT3, 0);
  402210:	2001      	movs	r0, #1
  402212:	2105      	movs	r1, #5
  402214:	2200      	movs	r2, #0
  402216:	4b1c      	ldr	r3, [pc, #112]	; (402288 <PCA9952_init+0x128>)
  402218:	4798      	blx	r3

	tmp3 = PCA9952_read_reg(LED_BOTTOM, PCA9952_EFLAG0);	//TODO: just see what we get, will need to weave error checking into this system later
  40221a:	2001      	movs	r0, #1
  40221c:	2144      	movs	r1, #68	; 0x44
  40221e:	4b1b      	ldr	r3, [pc, #108]	; (40228c <PCA9952_init+0x12c>)
  402220:	4798      	blx	r3
  402222:	4603      	mov	r3, r0
  402224:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
	tmp4 = PCA9952_read_reg(LED_BOTTOM, PCA9952_EFLAG1);
  402228:	2001      	movs	r0, #1
  40222a:	2145      	movs	r1, #69	; 0x45
  40222c:	4b17      	ldr	r3, [pc, #92]	; (40228c <PCA9952_init+0x12c>)
  40222e:	4798      	blx	r3
  402230:	4603      	mov	r3, r0
  402232:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
	
	sprintf(printStr,"PCA9952: tmp1: %x tmp2: %x tmp3: %x tmp4: %x\r\n", tmp1, tmp2, tmp3, tmp4); //10feb16 just for debug jsi
  402236:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
  40223a:	b2db      	uxtb	r3, r3
  40223c:	461d      	mov	r5, r3
  40223e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
  402242:	b2db      	uxtb	r3, r3
  402244:	461c      	mov	r4, r3
  402246:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
  40224a:	b2db      	uxtb	r3, r3
  40224c:	4619      	mov	r1, r3
  40224e:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
  402252:	b2db      	uxtb	r3, r3
  402254:	461a      	mov	r2, r3
  402256:	1d3b      	adds	r3, r7, #4
  402258:	9100      	str	r1, [sp, #0]
  40225a:	9201      	str	r2, [sp, #4]
  40225c:	4618      	mov	r0, r3
  40225e:	490c      	ldr	r1, [pc, #48]	; (402290 <PCA9952_init+0x130>)
  402260:	462a      	mov	r2, r5
  402262:	4623      	mov	r3, r4
  402264:	4c0b      	ldr	r4, [pc, #44]	; (402294 <PCA9952_init+0x134>)
  402266:	47a0      	blx	r4
	func_transmit(printStr, strlen(printStr));
  402268:	1d3b      	adds	r3, r7, #4
  40226a:	4618      	mov	r0, r3
  40226c:	4b0a      	ldr	r3, [pc, #40]	; (402298 <PCA9952_init+0x138>)
  40226e:	4798      	blx	r3
  402270:	4602      	mov	r2, r0
  402272:	1d3b      	adds	r3, r7, #4
  402274:	4618      	mov	r0, r3
  402276:	4611      	mov	r1, r2
  402278:	4b08      	ldr	r3, [pc, #32]	; (40229c <PCA9952_init+0x13c>)
  40227a:	4798      	blx	r3
	
	
}
  40227c:	3748      	adds	r7, #72	; 0x48
  40227e:	46bd      	mov	sp, r7
  402280:	bdb0      	pop	{r4, r5, r7, pc}
  402282:	bf00      	nop
  402284:	00403b39 	.word	0x00403b39
  402288:	0040205d 	.word	0x0040205d
  40228c:	004020cd 	.word	0x004020cd
  402290:	004092f0 	.word	0x004092f0
  402294:	00403d55 	.word	0x00403d55
  402298:	00403da1 	.word	0x00403da1
  40229c:	00403329 	.word	0x00403329

004022a0 <ioport_set_pin_dir>:
 * \param pin IOPORT pin to configure
 * \param dir Direction to set for the specified pin (\ref ioport_direction)
 */
static inline void ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
  4022a0:	b480      	push	{r7}
  4022a2:	b08d      	sub	sp, #52	; 0x34
  4022a4:	af00      	add	r7, sp, #0
  4022a6:	6078      	str	r0, [r7, #4]
  4022a8:	460b      	mov	r3, r1
  4022aa:	70fb      	strb	r3, [r7, #3]
  4022ac:	687b      	ldr	r3, [r7, #4]
  4022ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  4022b0:	78fb      	ldrb	r3, [r7, #3]
  4022b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  4022b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4022b8:	627b      	str	r3, [r7, #36]	; 0x24
  4022ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4022bc:	623b      	str	r3, [r7, #32]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  4022be:	6a3b      	ldr	r3, [r7, #32]
  4022c0:	095b      	lsrs	r3, r3, #5
  4022c2:	61fb      	str	r3, [r7, #28]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  4022c4:	69fa      	ldr	r2, [r7, #28]
  4022c6:	4b17      	ldr	r3, [pc, #92]	; (402324 <ioport_set_pin_dir+0x84>)
  4022c8:	4413      	add	r3, r2
  4022ca:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);
  4022cc:	61bb      	str	r3, [r7, #24]

	if (dir == IOPORT_DIR_OUTPUT) {
  4022ce:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  4022d2:	2b01      	cmp	r3, #1
  4022d4:	d109      	bne.n	4022ea <ioport_set_pin_dir+0x4a>
  4022d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4022d8:	617b      	str	r3, [r7, #20]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  4022da:	697b      	ldr	r3, [r7, #20]
  4022dc:	f003 031f 	and.w	r3, r3, #31
  4022e0:	2201      	movs	r2, #1
  4022e2:	409a      	lsls	r2, r3
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4022e4:	69bb      	ldr	r3, [r7, #24]
  4022e6:	611a      	str	r2, [r3, #16]
  4022e8:	e00c      	b.n	402304 <ioport_set_pin_dir+0x64>
	} else if (dir == IOPORT_DIR_INPUT) {
  4022ea:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  4022ee:	2b00      	cmp	r3, #0
  4022f0:	d108      	bne.n	402304 <ioport_set_pin_dir+0x64>
  4022f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4022f4:	613b      	str	r3, [r7, #16]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  4022f6:	693b      	ldr	r3, [r7, #16]
  4022f8:	f003 031f 	and.w	r3, r3, #31
  4022fc:	2201      	movs	r2, #1
  4022fe:	409a      	lsls	r2, r3
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  402300:	69bb      	ldr	r3, [r7, #24]
  402302:	615a      	str	r2, [r3, #20]
  402304:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  402306:	60fb      	str	r3, [r7, #12]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  402308:	68fb      	ldr	r3, [r7, #12]
  40230a:	f003 031f 	and.w	r3, r3, #31
  40230e:	2201      	movs	r2, #1
  402310:	409a      	lsls	r2, r3
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  402312:	69bb      	ldr	r3, [r7, #24]
  402314:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	arch_ioport_set_pin_dir(pin, dir);
}
  402318:	3734      	adds	r7, #52	; 0x34
  40231a:	46bd      	mov	sp, r7
  40231c:	f85d 7b04 	ldr.w	r7, [sp], #4
  402320:	4770      	bx	lr
  402322:	bf00      	nop
  402324:	00200707 	.word	0x00200707

00402328 <ioport_set_pin_level>:
 *
 * \param pin IOPORT pin to configure
 * \param level Logical value of the pin
 */
static inline void ioport_set_pin_level(ioport_pin_t pin, bool level)
{
  402328:	b480      	push	{r7}
  40232a:	b08b      	sub	sp, #44	; 0x2c
  40232c:	af00      	add	r7, sp, #0
  40232e:	6078      	str	r0, [r7, #4]
  402330:	460b      	mov	r3, r1
  402332:	70fb      	strb	r3, [r7, #3]
  402334:	687b      	ldr	r3, [r7, #4]
  402336:	627b      	str	r3, [r7, #36]	; 0x24
  402338:	78fb      	ldrb	r3, [r7, #3]
  40233a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  40233e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  402340:	61fb      	str	r3, [r7, #28]
  402342:	69fb      	ldr	r3, [r7, #28]
  402344:	61bb      	str	r3, [r7, #24]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  402346:	69bb      	ldr	r3, [r7, #24]
  402348:	095b      	lsrs	r3, r3, #5
  40234a:	617b      	str	r3, [r7, #20]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  40234c:	697a      	ldr	r2, [r7, #20]
  40234e:	4b10      	ldr	r3, [pc, #64]	; (402390 <ioport_set_pin_level+0x68>)
  402350:	4413      	add	r3, r2
  402352:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);
  402354:	613b      	str	r3, [r7, #16]

	if (level) {
  402356:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
  40235a:	2b00      	cmp	r3, #0
  40235c:	d009      	beq.n	402372 <ioport_set_pin_level+0x4a>
  40235e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  402360:	60fb      	str	r3, [r7, #12]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  402362:	68fb      	ldr	r3, [r7, #12]
  402364:	f003 031f 	and.w	r3, r3, #31
  402368:	2201      	movs	r2, #1
  40236a:	409a      	lsls	r2, r3
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40236c:	693b      	ldr	r3, [r7, #16]
  40236e:	631a      	str	r2, [r3, #48]	; 0x30
  402370:	e008      	b.n	402384 <ioport_set_pin_level+0x5c>
  402372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  402374:	60bb      	str	r3, [r7, #8]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  402376:	68bb      	ldr	r3, [r7, #8]
  402378:	f003 031f 	and.w	r3, r3, #31
  40237c:	2201      	movs	r2, #1
  40237e:	409a      	lsls	r2, r3
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  402380:	693b      	ldr	r3, [r7, #16]
  402382:	635a      	str	r2, [r3, #52]	; 0x34
	arch_ioport_set_pin_level(pin, level);
}
  402384:	372c      	adds	r7, #44	; 0x2c
  402386:	46bd      	mov	sp, r7
  402388:	f85d 7b04 	ldr.w	r7, [sp], #4
  40238c:	4770      	bx	lr
  40238e:	bf00      	nop
  402390:	00200707 	.word	0x00200707

00402394 <ioport_get_pin_level>:
 *
 * \param pin IOPORT pin to read
 * \return Current logical value of the specified pin
 */
static inline bool ioport_get_pin_level(ioport_pin_t pin)
{
  402394:	b480      	push	{r7}
  402396:	b089      	sub	sp, #36	; 0x24
  402398:	af00      	add	r7, sp, #0
  40239a:	6078      	str	r0, [r7, #4]
  40239c:	687b      	ldr	r3, [r7, #4]
  40239e:	61fb      	str	r3, [r7, #28]
  4023a0:	69fb      	ldr	r3, [r7, #28]
  4023a2:	61bb      	str	r3, [r7, #24]
  4023a4:	69bb      	ldr	r3, [r7, #24]
  4023a6:	617b      	str	r3, [r7, #20]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  4023a8:	697b      	ldr	r3, [r7, #20]
  4023aa:	095b      	lsrs	r3, r3, #5
  4023ac:	613b      	str	r3, [r7, #16]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  4023ae:	693a      	ldr	r2, [r7, #16]
  4023b0:	4b0b      	ldr	r3, [pc, #44]	; (4023e0 <ioport_get_pin_level+0x4c>)
  4023b2:	4413      	add	r3, r2
  4023b4:	025b      	lsls	r3, r3, #9
	base->PIO_CODR = mask & ~level;
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  4023b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
  4023b8:	69fb      	ldr	r3, [r7, #28]
  4023ba:	60fb      	str	r3, [r7, #12]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  4023bc:	68fb      	ldr	r3, [r7, #12]
  4023be:	f003 031f 	and.w	r3, r3, #31
  4023c2:	2101      	movs	r1, #1
  4023c4:	fa01 f303 	lsl.w	r3, r1, r3
	base->PIO_CODR = mask & ~level;
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  4023c8:	4013      	ands	r3, r2
  4023ca:	2b00      	cmp	r3, #0
  4023cc:	bf14      	ite	ne
  4023ce:	2301      	movne	r3, #1
  4023d0:	2300      	moveq	r3, #0
  4023d2:	b2db      	uxtb	r3, r3
	return arch_ioport_get_pin_level(pin);
}
  4023d4:	4618      	mov	r0, r3
  4023d6:	3724      	adds	r7, #36	; 0x24
  4023d8:	46bd      	mov	sp, r7
  4023da:	f85d 7b04 	ldr.w	r7, [sp], #4
  4023de:	4770      	bx	lr
  4023e0:	00200707 	.word	0x00200707

004023e4 <udelay>:
/*
 * We have a 100MHz clock, so 100 NOPs should be about 1ns. 
 * Tried to do a 1ns tick but the chip can't seem to handle it.
 */
void udelay(uint32_t ul_dly_ticks)
{
  4023e4:	b480      	push	{r7}
  4023e6:	b085      	sub	sp, #20
  4023e8:	af00      	add	r7, sp, #0
  4023ea:	6078      	str	r0, [r7, #4]
	for (uint32_t i=0; i<ul_dly_ticks; i++)
  4023ec:	2300      	movs	r3, #0
  4023ee:	60fb      	str	r3, [r7, #12]
  4023f0:	e066      	b.n	4024c0 <udelay+0xdc>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  4023f2:	bf00      	nop
  4023f4:	bf00      	nop
  4023f6:	bf00      	nop
  4023f8:	bf00      	nop
  4023fa:	bf00      	nop
  4023fc:	bf00      	nop
  4023fe:	bf00      	nop
  402400:	bf00      	nop
  402402:	bf00      	nop
  402404:	bf00      	nop
  402406:	bf00      	nop
  402408:	bf00      	nop
  40240a:	bf00      	nop
  40240c:	bf00      	nop
  40240e:	bf00      	nop
  402410:	bf00      	nop
  402412:	bf00      	nop
  402414:	bf00      	nop
  402416:	bf00      	nop
  402418:	bf00      	nop
  40241a:	bf00      	nop
  40241c:	bf00      	nop
  40241e:	bf00      	nop
  402420:	bf00      	nop
  402422:	bf00      	nop
  402424:	bf00      	nop
  402426:	bf00      	nop
  402428:	bf00      	nop
  40242a:	bf00      	nop
  40242c:	bf00      	nop
  40242e:	bf00      	nop
  402430:	bf00      	nop
  402432:	bf00      	nop
  402434:	bf00      	nop
  402436:	bf00      	nop
  402438:	bf00      	nop
  40243a:	bf00      	nop
  40243c:	bf00      	nop
  40243e:	bf00      	nop
  402440:	bf00      	nop
  402442:	bf00      	nop
  402444:	bf00      	nop
  402446:	bf00      	nop
  402448:	bf00      	nop
  40244a:	bf00      	nop
  40244c:	bf00      	nop
  40244e:	bf00      	nop
  402450:	bf00      	nop
  402452:	bf00      	nop
  402454:	bf00      	nop
  402456:	bf00      	nop
  402458:	bf00      	nop
  40245a:	bf00      	nop
  40245c:	bf00      	nop
  40245e:	bf00      	nop
  402460:	bf00      	nop
  402462:	bf00      	nop
  402464:	bf00      	nop
  402466:	bf00      	nop
  402468:	bf00      	nop
  40246a:	bf00      	nop
  40246c:	bf00      	nop
  40246e:	bf00      	nop
  402470:	bf00      	nop
  402472:	bf00      	nop
  402474:	bf00      	nop
  402476:	bf00      	nop
  402478:	bf00      	nop
  40247a:	bf00      	nop
  40247c:	bf00      	nop
  40247e:	bf00      	nop
  402480:	bf00      	nop
  402482:	bf00      	nop
  402484:	bf00      	nop
  402486:	bf00      	nop
  402488:	bf00      	nop
  40248a:	bf00      	nop
  40248c:	bf00      	nop
  40248e:	bf00      	nop
  402490:	bf00      	nop
  402492:	bf00      	nop
  402494:	bf00      	nop
  402496:	bf00      	nop
  402498:	bf00      	nop
  40249a:	bf00      	nop
  40249c:	bf00      	nop
  40249e:	bf00      	nop
  4024a0:	bf00      	nop
  4024a2:	bf00      	nop
  4024a4:	bf00      	nop
  4024a6:	bf00      	nop
  4024a8:	bf00      	nop
  4024aa:	bf00      	nop
  4024ac:	bf00      	nop
  4024ae:	bf00      	nop
  4024b0:	bf00      	nop
  4024b2:	bf00      	nop
  4024b4:	bf00      	nop
  4024b6:	bf00      	nop
  4024b8:	bf00      	nop
  4024ba:	68fb      	ldr	r3, [r7, #12]
  4024bc:	3301      	adds	r3, #1
  4024be:	60fb      	str	r3, [r7, #12]
  4024c0:	68fa      	ldr	r2, [r7, #12]
  4024c2:	687b      	ldr	r3, [r7, #4]
  4024c4:	429a      	cmp	r2, r3
  4024c6:	d394      	bcc.n	4023f2 <udelay+0xe>
		__NOP(); __NOP(); __NOP(); __NOP(); __NOP(); __NOP(); __NOP(); __NOP(); __NOP(); __NOP();
		__NOP(); __NOP(); __NOP(); __NOP(); __NOP(); __NOP(); __NOP(); __NOP(); __NOP(); __NOP();
		__NOP(); __NOP(); __NOP(); __NOP(); __NOP(); __NOP(); __NOP(); __NOP(); __NOP(); __NOP();
		__NOP(); __NOP(); __NOP(); __NOP(); __NOP(); __NOP(); __NOP(); __NOP(); __NOP(); __NOP();
	}
}
  4024c8:	3714      	adds	r7, #20
  4024ca:	46bd      	mov	sp, r7
  4024cc:	f85d 7b04 	ldr.w	r7, [sp], #4
  4024d0:	4770      	bx	lr
  4024d2:	bf00      	nop

004024d4 <io_pin>:

#define EC_ONE_MICROSECOND 8

unsigned char io_pin(unsigned char idx);
unsigned char io_pin(unsigned char idx)
{
  4024d4:	b480      	push	{r7}
  4024d6:	b083      	sub	sp, #12
  4024d8:	af00      	add	r7, sp, #0
  4024da:	4603      	mov	r3, r0
  4024dc:	71fb      	strb	r3, [r7, #7]
	switch (idx)
  4024de:	79fb      	ldrb	r3, [r7, #7]
  4024e0:	2b04      	cmp	r3, #4
  4024e2:	d817      	bhi.n	402514 <io_pin+0x40>
  4024e4:	a201      	add	r2, pc, #4	; (adr r2, 4024ec <io_pin+0x18>)
  4024e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4024ea:	bf00      	nop
  4024ec:	00402501 	.word	0x00402501
  4024f0:	00402505 	.word	0x00402505
  4024f4:	00402509 	.word	0x00402509
  4024f8:	0040250d 	.word	0x0040250d
  4024fc:	00402511 	.word	0x00402511
	{
		case 0:
			return ECLAVE_SERIAL_ID0;
  402500:	230f      	movs	r3, #15
  402502:	e008      	b.n	402516 <io_pin+0x42>
			break;
		case 1:
			return ECLAVE_SERIAL_ID1;
  402504:	2310      	movs	r3, #16
  402506:	e006      	b.n	402516 <io_pin+0x42>
			break;
		case 2:
			return ECLAVE_SERIAL_ID2;
  402508:	2311      	movs	r3, #17
  40250a:	e004      	b.n	402516 <io_pin+0x42>
			break;
		case 3:
			return ECLAVE_SERIAL_ID3;
  40250c:	2312      	movs	r3, #18
  40250e:	e002      	b.n	402516 <io_pin+0x42>
			break;
		case 4:
			return ECLAVE_SERIAL_ID4;
  402510:	2313      	movs	r3, #19
  402512:	e000      	b.n	402516 <io_pin+0x42>
			break;
		default: 
			return 0; //TODO: return a better error code here
  402514:	2300      	movs	r3, #0
			break;
	}
}
  402516:	4618      	mov	r0, r3
  402518:	370c      	adds	r7, #12
  40251a:	46bd      	mov	sp, r7
  40251c:	f85d 7b04 	ldr.w	r7, [sp], #4
  402520:	4770      	bx	lr
  402522:	bf00      	nop

00402524 <drive_DQ_low>:

void drive_DQ_low(unsigned char idx);
void drive_DQ_low(unsigned char idx)
{
  402524:	b580      	push	{r7, lr}
  402526:	b084      	sub	sp, #16
  402528:	af00      	add	r7, sp, #0
  40252a:	4603      	mov	r3, r0
  40252c:	71fb      	strb	r3, [r7, #7]
	unsigned char ioPin;
	int32_t ioFlags;
	
	ioPin = io_pin(idx);
  40252e:	79fb      	ldrb	r3, [r7, #7]
  402530:	4618      	mov	r0, r3
  402532:	4b08      	ldr	r3, [pc, #32]	; (402554 <drive_DQ_low+0x30>)
  402534:	4798      	blx	r3
  402536:	4603      	mov	r3, r0
  402538:	73fb      	strb	r3, [r7, #15]
	
	ioport_set_pin_dir(ioPin, IOPORT_DIR_OUTPUT);
  40253a:	7bfb      	ldrb	r3, [r7, #15]
  40253c:	4618      	mov	r0, r3
  40253e:	2101      	movs	r1, #1
  402540:	4b05      	ldr	r3, [pc, #20]	; (402558 <drive_DQ_low+0x34>)
  402542:	4798      	blx	r3
	ioport_set_pin_level(ioPin, IOPORT_PIN_LEVEL_LOW);
  402544:	7bfb      	ldrb	r3, [r7, #15]
  402546:	4618      	mov	r0, r3
  402548:	2100      	movs	r1, #0
  40254a:	4b04      	ldr	r3, [pc, #16]	; (40255c <drive_DQ_low+0x38>)
  40254c:	4798      	blx	r3

}
  40254e:	3710      	adds	r7, #16
  402550:	46bd      	mov	sp, r7
  402552:	bd80      	pop	{r7, pc}
  402554:	004024d5 	.word	0x004024d5
  402558:	004022a1 	.word	0x004022a1
  40255c:	00402329 	.word	0x00402329

00402560 <release_the_bus>:

void release_the_bus(unsigned char idx);
void release_the_bus(unsigned char idx)
{
  402560:	b580      	push	{r7, lr}
  402562:	b084      	sub	sp, #16
  402564:	af00      	add	r7, sp, #0
  402566:	4603      	mov	r3, r0
  402568:	71fb      	strb	r3, [r7, #7]
	unsigned char ioPin;
	int32_t ioFlags;
	
	ioPin = io_pin(idx);
  40256a:	79fb      	ldrb	r3, [r7, #7]
  40256c:	4618      	mov	r0, r3
  40256e:	4b06      	ldr	r3, [pc, #24]	; (402588 <release_the_bus+0x28>)
  402570:	4798      	blx	r3
  402572:	4603      	mov	r3, r0
  402574:	73fb      	strb	r3, [r7, #15]
	
	ioport_set_pin_dir(ioPin, IOPORT_DIR_INPUT);
  402576:	7bfb      	ldrb	r3, [r7, #15]
  402578:	4618      	mov	r0, r3
  40257a:	2100      	movs	r1, #0
  40257c:	4b03      	ldr	r3, [pc, #12]	; (40258c <release_the_bus+0x2c>)
  40257e:	4798      	blx	r3
	

}
  402580:	3710      	adds	r7, #16
  402582:	46bd      	mov	sp, r7
  402584:	bd80      	pop	{r7, pc}
  402586:	bf00      	nop
  402588:	004024d5 	.word	0x004024d5
  40258c:	004022a1 	.word	0x004022a1

00402590 <gpio_input>:

void gpio_input(unsigned char idx) //14may15 experiment
{
  402590:	b580      	push	{r7, lr}
  402592:	b084      	sub	sp, #16
  402594:	af00      	add	r7, sp, #0
  402596:	4603      	mov	r3, r0
  402598:	71fb      	strb	r3, [r7, #7]
	uint32_t ioFlags;
	unsigned char ioPin;
		
	ioPin = io_pin(idx);
  40259a:	79fb      	ldrb	r3, [r7, #7]
  40259c:	4618      	mov	r0, r3
  40259e:	4b06      	ldr	r3, [pc, #24]	; (4025b8 <gpio_input+0x28>)
  4025a0:	4798      	blx	r3
  4025a2:	4603      	mov	r3, r0
  4025a4:	73fb      	strb	r3, [r7, #15]
		
	ioport_set_pin_dir(ioPin, IOPORT_DIR_INPUT);
  4025a6:	7bfb      	ldrb	r3, [r7, #15]
  4025a8:	4618      	mov	r0, r3
  4025aa:	2100      	movs	r1, #0
  4025ac:	4b03      	ldr	r3, [pc, #12]	; (4025bc <gpio_input+0x2c>)
  4025ae:	4798      	blx	r3


}
  4025b0:	3710      	adds	r7, #16
  4025b2:	46bd      	mov	sp, r7
  4025b4:	bd80      	pop	{r7, pc}
  4025b6:	bf00      	nop
  4025b8:	004024d5 	.word	0x004024d5
  4025bc:	004022a1 	.word	0x004022a1

004025c0 <sample_line>:

unsigned char sample_line(unsigned char idx);
unsigned char sample_line(unsigned char idx)
{
  4025c0:	b580      	push	{r7, lr}
  4025c2:	b084      	sub	sp, #16
  4025c4:	af00      	add	r7, sp, #0
  4025c6:	4603      	mov	r3, r0
  4025c8:	71fb      	strb	r3, [r7, #7]
//14may15 experiment		uint32_t ioFlags;
		unsigned char retVal, ioPin;
		
		ioPin = io_pin(idx);
  4025ca:	79fb      	ldrb	r3, [r7, #7]
  4025cc:	4618      	mov	r0, r3
  4025ce:	4b07      	ldr	r3, [pc, #28]	; (4025ec <sample_line+0x2c>)
  4025d0:	4798      	blx	r3
  4025d2:	4603      	mov	r3, r0
  4025d4:	73fb      	strb	r3, [r7, #15]
		
//14may15 experiment		ioFlags = (GPIO_DIR_INPUT);
//14may15 experiment		gpio_configure_pin(ioPin, ioFlags);

		retVal = ioport_get_pin_level(ioPin);
  4025d6:	7bfb      	ldrb	r3, [r7, #15]
  4025d8:	4618      	mov	r0, r3
  4025da:	4b05      	ldr	r3, [pc, #20]	; (4025f0 <sample_line+0x30>)
  4025dc:	4798      	blx	r3
  4025de:	4603      	mov	r3, r0
  4025e0:	73bb      	strb	r3, [r7, #14]

//14may15 experiment		ioFlags = (GPIO_DIR_OUTPUT);
//14may15 experiment		gpio_configure_pin(ioPin, ioFlags);

		return retVal;
  4025e2:	7bbb      	ldrb	r3, [r7, #14]
}
  4025e4:	4618      	mov	r0, r3
  4025e6:	3710      	adds	r7, #16
  4025e8:	46bd      	mov	sp, r7
  4025ea:	bd80      	pop	{r7, pc}
  4025ec:	004024d5 	.word	0x004024d5
  4025f0:	00402395 	.word	0x00402395

004025f4 <SetSpeed>:

//-----------------------------------------------------------------------------
// Set the 1-Wire timing to 'standard' (standard=1) or 'overdrive' (standard=0).
//
void SetSpeed(int standard)
{
  4025f4:	b480      	push	{r7}
  4025f6:	b083      	sub	sp, #12
  4025f8:	af00      	add	r7, sp, #0
  4025fa:	6078      	str	r0, [r7, #4]
		J = 410;
	}
	
#endif

	if (standard) //experiment 16may15 cut everything in half, some issue with using the PLL? and fudge the tight numbers at the low end
  4025fc:	687b      	ldr	r3, [r7, #4]
  4025fe:	2b00      	cmp	r3, #0
  402600:	d01e      	beq.n	402640 <SetSpeed+0x4c>
	{
		// Standard Speed
		A = 0; //6;
  402602:	4b21      	ldr	r3, [pc, #132]	; (402688 <SetSpeed+0x94>)
  402604:	2200      	movs	r2, #0
  402606:	601a      	str	r2, [r3, #0]
		B = 32; //64;
  402608:	4b20      	ldr	r3, [pc, #128]	; (40268c <SetSpeed+0x98>)
  40260a:	2220      	movs	r2, #32
  40260c:	601a      	str	r2, [r3, #0]
		C = 30; //60;
  40260e:	4b20      	ldr	r3, [pc, #128]	; (402690 <SetSpeed+0x9c>)
  402610:	221e      	movs	r2, #30
  402612:	601a      	str	r2, [r3, #0]
		D = 2; //10;
  402614:	4b1f      	ldr	r3, [pc, #124]	; (402694 <SetSpeed+0xa0>)
  402616:	2202      	movs	r2, #2
  402618:	601a      	str	r2, [r3, #0]
		E = 2; //9;
  40261a:	4b1f      	ldr	r3, [pc, #124]	; (402698 <SetSpeed+0xa4>)
  40261c:	2202      	movs	r2, #2
  40261e:	601a      	str	r2, [r3, #0]
		F = 27; //55;
  402620:	4b1e      	ldr	r3, [pc, #120]	; (40269c <SetSpeed+0xa8>)
  402622:	221b      	movs	r2, #27
  402624:	601a      	str	r2, [r3, #0]
		G = 0; //0;
  402626:	4b1e      	ldr	r3, [pc, #120]	; (4026a0 <SetSpeed+0xac>)
  402628:	2200      	movs	r2, #0
  40262a:	601a      	str	r2, [r3, #0]
		H = 240; //480;
  40262c:	4b1d      	ldr	r3, [pc, #116]	; (4026a4 <SetSpeed+0xb0>)
  40262e:	22f0      	movs	r2, #240	; 0xf0
  402630:	601a      	str	r2, [r3, #0]
		I = 35; //70;
  402632:	4b1d      	ldr	r3, [pc, #116]	; (4026a8 <SetSpeed+0xb4>)
  402634:	2223      	movs	r2, #35	; 0x23
  402636:	601a      	str	r2, [r3, #0]
		J = 205; //410;
  402638:	4b1c      	ldr	r3, [pc, #112]	; (4026ac <SetSpeed+0xb8>)
  40263a:	22cd      	movs	r2, #205	; 0xcd
  40263c:	601a      	str	r2, [r3, #0]
  40263e:	e01d      	b.n	40267c <SetSpeed+0x88>


	else
	{
		// Overdrive Speed
		A = 1.5;
  402640:	4b11      	ldr	r3, [pc, #68]	; (402688 <SetSpeed+0x94>)
  402642:	2201      	movs	r2, #1
  402644:	601a      	str	r2, [r3, #0]
		B = 7.5;
  402646:	4b11      	ldr	r3, [pc, #68]	; (40268c <SetSpeed+0x98>)
  402648:	2207      	movs	r2, #7
  40264a:	601a      	str	r2, [r3, #0]
		C = 7.5;
  40264c:	4b10      	ldr	r3, [pc, #64]	; (402690 <SetSpeed+0x9c>)
  40264e:	2207      	movs	r2, #7
  402650:	601a      	str	r2, [r3, #0]
		D = 2.5;
  402652:	4b10      	ldr	r3, [pc, #64]	; (402694 <SetSpeed+0xa0>)
  402654:	2202      	movs	r2, #2
  402656:	601a      	str	r2, [r3, #0]
		E = 0.75;
  402658:	4b0f      	ldr	r3, [pc, #60]	; (402698 <SetSpeed+0xa4>)
  40265a:	2200      	movs	r2, #0
  40265c:	601a      	str	r2, [r3, #0]
		F = 7;
  40265e:	4b0f      	ldr	r3, [pc, #60]	; (40269c <SetSpeed+0xa8>)
  402660:	2207      	movs	r2, #7
  402662:	601a      	str	r2, [r3, #0]
		G = 2.5;
  402664:	4b0e      	ldr	r3, [pc, #56]	; (4026a0 <SetSpeed+0xac>)
  402666:	2202      	movs	r2, #2
  402668:	601a      	str	r2, [r3, #0]
		H = 70;
  40266a:	4b0e      	ldr	r3, [pc, #56]	; (4026a4 <SetSpeed+0xb0>)
  40266c:	2246      	movs	r2, #70	; 0x46
  40266e:	601a      	str	r2, [r3, #0]
		I = 8.5;
  402670:	4b0d      	ldr	r3, [pc, #52]	; (4026a8 <SetSpeed+0xb4>)
  402672:	2208      	movs	r2, #8
  402674:	601a      	str	r2, [r3, #0]
		J = 40;
  402676:	4b0d      	ldr	r3, [pc, #52]	; (4026ac <SetSpeed+0xb8>)
  402678:	2228      	movs	r2, #40	; 0x28
  40267a:	601a      	str	r2, [r3, #0]
	}
}
  40267c:	370c      	adds	r7, #12
  40267e:	46bd      	mov	sp, r7
  402680:	f85d 7b04 	ldr.w	r7, [sp], #4
  402684:	4770      	bx	lr
  402686:	bf00      	nop
  402688:	20400a88 	.word	0x20400a88
  40268c:	20400a8c 	.word	0x20400a8c
  402690:	20400a94 	.word	0x20400a94
  402694:	20400a84 	.word	0x20400a84
  402698:	20400aa0 	.word	0x20400aa0
  40269c:	20400aa8 	.word	0x20400aa8
  4026a0:	20400a98 	.word	0x20400a98
  4026a4:	20400a9c 	.word	0x20400a9c
  4026a8:	20400aa4 	.word	0x20400aa4
  4026ac:	20400a90 	.word	0x20400a90

004026b0 <OWTouchReset>:
// Generate a 1-Wire reset, return 1 if no presence detect was found,
// return 0 otherwise.
// (NOTE: Does not handle alarm presence from DS2404/DS1994)
//
int OWTouchReset(unsigned char idx)
{
  4026b0:	b580      	push	{r7, lr}
  4026b2:	b084      	sub	sp, #16
  4026b4:	af00      	add	r7, sp, #0
  4026b6:	4603      	mov	r3, r0
  4026b8:	71fb      	strb	r3, [r7, #7]
	int result;

	udelay(A);
  4026ba:	4b17      	ldr	r3, [pc, #92]	; (402718 <OWTouchReset+0x68>)
  4026bc:	681b      	ldr	r3, [r3, #0]
  4026be:	4618      	mov	r0, r3
  4026c0:	4b16      	ldr	r3, [pc, #88]	; (40271c <OWTouchReset+0x6c>)
  4026c2:	4798      	blx	r3
	drive_DQ_low(idx);
  4026c4:	79fb      	ldrb	r3, [r7, #7]
  4026c6:	4618      	mov	r0, r3
  4026c8:	4b15      	ldr	r3, [pc, #84]	; (402720 <OWTouchReset+0x70>)
  4026ca:	4798      	blx	r3
	udelay(H);	//tRSTL (reset low) 480-640us
  4026cc:	4b15      	ldr	r3, [pc, #84]	; (402724 <OWTouchReset+0x74>)
  4026ce:	681b      	ldr	r3, [r3, #0]
  4026d0:	4618      	mov	r0, r3
  4026d2:	4b12      	ldr	r3, [pc, #72]	; (40271c <OWTouchReset+0x6c>)
  4026d4:	4798      	blx	r3
	release_the_bus(idx);
  4026d6:	79fb      	ldrb	r3, [r7, #7]
  4026d8:	4618      	mov	r0, r3
  4026da:	4b13      	ldr	r3, [pc, #76]	; (402728 <OWTouchReset+0x78>)
  4026dc:	4798      	blx	r3
	
	gpio_input(idx); //14may15 experiment
  4026de:	79fb      	ldrb	r3, [r7, #7]
  4026e0:	4618      	mov	r0, r3
  4026e2:	4b12      	ldr	r3, [pc, #72]	; (40272c <OWTouchReset+0x7c>)
  4026e4:	4798      	blx	r3

	
	udelay(I);	//tMSP (presence detect sample) 60-75us
  4026e6:	4b12      	ldr	r3, [pc, #72]	; (402730 <OWTouchReset+0x80>)
  4026e8:	681b      	ldr	r3, [r3, #0]
  4026ea:	4618      	mov	r0, r3
  4026ec:	4b0b      	ldr	r3, [pc, #44]	; (40271c <OWTouchReset+0x6c>)
  4026ee:	4798      	blx	r3
	result = sample_line(idx);
  4026f0:	79fb      	ldrb	r3, [r7, #7]
  4026f2:	4618      	mov	r0, r3
  4026f4:	4b0f      	ldr	r3, [pc, #60]	; (402734 <OWTouchReset+0x84>)
  4026f6:	4798      	blx	r3
  4026f8:	4603      	mov	r3, r0
  4026fa:	60fb      	str	r3, [r7, #12]
	
	gpio_input(idx); //14may15 experiment
  4026fc:	79fb      	ldrb	r3, [r7, #7]
  4026fe:	4618      	mov	r0, r3
  402700:	4b0a      	ldr	r3, [pc, #40]	; (40272c <OWTouchReset+0x7c>)
  402702:	4798      	blx	r3

	udelay(J); // Complete the reset sequence recovery 5-??us (no max?)
  402704:	4b0c      	ldr	r3, [pc, #48]	; (402738 <OWTouchReset+0x88>)
  402706:	681b      	ldr	r3, [r3, #0]
  402708:	4618      	mov	r0, r3
  40270a:	4b04      	ldr	r3, [pc, #16]	; (40271c <OWTouchReset+0x6c>)
  40270c:	4798      	blx	r3
	return result; // Return sample presence pulse result
  40270e:	68fb      	ldr	r3, [r7, #12]
}
  402710:	4618      	mov	r0, r3
  402712:	3710      	adds	r7, #16
  402714:	46bd      	mov	sp, r7
  402716:	bd80      	pop	{r7, pc}
  402718:	20400a88 	.word	0x20400a88
  40271c:	004023e5 	.word	0x004023e5
  402720:	00402525 	.word	0x00402525
  402724:	20400a9c 	.word	0x20400a9c
  402728:	00402561 	.word	0x00402561
  40272c:	00402591 	.word	0x00402591
  402730:	20400aa4 	.word	0x20400aa4
  402734:	004025c1 	.word	0x004025c1
  402738:	20400a90 	.word	0x20400a90

0040273c <drive_DQ_low_and_release_the_bus>:

void drive_DQ_low_and_release_the_bus(unsigned char idx);
void drive_DQ_low_and_release_the_bus(unsigned char idx)
{
  40273c:	b580      	push	{r7, lr}
  40273e:	b084      	sub	sp, #16
  402740:	af00      	add	r7, sp, #0
  402742:	4603      	mov	r3, r0
  402744:	71fb      	strb	r3, [r7, #7]
	unsigned char ioPin;
	int32_t ioFlagsOutput, ioFlagsInput;
	
	ioPin = io_pin(idx);
  402746:	79fb      	ldrb	r3, [r7, #7]
  402748:	4618      	mov	r0, r3
  40274a:	4b0d      	ldr	r3, [pc, #52]	; (402780 <drive_DQ_low_and_release_the_bus+0x44>)
  40274c:	4798      	blx	r3
  40274e:	4603      	mov	r3, r0
  402750:	73fb      	strb	r3, [r7, #15]
	
	ioport_set_pin_dir(ioPin, IOPORT_DIR_OUTPUT);
  402752:	7bfb      	ldrb	r3, [r7, #15]
  402754:	4618      	mov	r0, r3
  402756:	2101      	movs	r1, #1
  402758:	4b0a      	ldr	r3, [pc, #40]	; (402784 <drive_DQ_low_and_release_the_bus+0x48>)
  40275a:	4798      	blx	r3
	ioport_set_pin_level(ioPin, IOPORT_PIN_LEVEL_LOW);
  40275c:	7bfb      	ldrb	r3, [r7, #15]
  40275e:	4618      	mov	r0, r3
  402760:	2100      	movs	r1, #0
  402762:	4b09      	ldr	r3, [pc, #36]	; (402788 <drive_DQ_low_and_release_the_bus+0x4c>)
  402764:	4798      	blx	r3

	udelay(A);	//tW1L 5-15us
  402766:	4b09      	ldr	r3, [pc, #36]	; (40278c <drive_DQ_low_and_release_the_bus+0x50>)
  402768:	681b      	ldr	r3, [r3, #0]
  40276a:	4618      	mov	r0, r3
  40276c:	4b08      	ldr	r3, [pc, #32]	; (402790 <drive_DQ_low_and_release_the_bus+0x54>)
  40276e:	4798      	blx	r3

	ioport_set_pin_dir(ioPin, IOPORT_DIR_INPUT);
  402770:	7bfb      	ldrb	r3, [r7, #15]
  402772:	4618      	mov	r0, r3
  402774:	2100      	movs	r1, #0
  402776:	4b03      	ldr	r3, [pc, #12]	; (402784 <drive_DQ_low_and_release_the_bus+0x48>)
  402778:	4798      	blx	r3
	
}
  40277a:	3710      	adds	r7, #16
  40277c:	46bd      	mov	sp, r7
  40277e:	bd80      	pop	{r7, pc}
  402780:	004024d5 	.word	0x004024d5
  402784:	004022a1 	.word	0x004022a1
  402788:	00402329 	.word	0x00402329
  40278c:	20400a88 	.word	0x20400a88
  402790:	004023e5 	.word	0x004023e5

00402794 <OWWriteBit>:
//-----------------------------------------------------------------------------
// Send a 1-Wire write bit. Provide 10us recovery time.
//
void OWWriteBit(unsigned char idx, int bit);
void OWWriteBit(unsigned char idx, int bit)
{
  402794:	b580      	push	{r7, lr}
  402796:	b082      	sub	sp, #8
  402798:	af00      	add	r7, sp, #0
  40279a:	4603      	mov	r3, r0
  40279c:	6039      	str	r1, [r7, #0]
  40279e:	71fb      	strb	r3, [r7, #7]
	if (bit)
  4027a0:	683b      	ldr	r3, [r7, #0]
  4027a2:	2b00      	cmp	r3, #0
  4027a4:	d009      	beq.n	4027ba <OWWriteBit+0x26>
	{
		// Write '1' bit
		drive_DQ_low_and_release_the_bus(idx);
  4027a6:	79fb      	ldrb	r3, [r7, #7]
  4027a8:	4618      	mov	r0, r3
  4027aa:	4b0e      	ldr	r3, [pc, #56]	; (4027e4 <OWWriteBit+0x50>)
  4027ac:	4798      	blx	r3
#if 0
		drive_DQ_low(idx);
//14may15 take this out entirely, we can't seem to control this precisely enough		cpu_delay_us(A, EC_CPU_CLOCK_100MHZ	//tW1L 5-15us
		release_the_bus(idx);
#endif
		udelay(B);	// Complete the time slot and 10us recovery tSLOT 65-??us (no max)
  4027ae:	4b0e      	ldr	r3, [pc, #56]	; (4027e8 <OWWriteBit+0x54>)
  4027b0:	681b      	ldr	r3, [r3, #0]
  4027b2:	4618      	mov	r0, r3
  4027b4:	4b0d      	ldr	r3, [pc, #52]	; (4027ec <OWWriteBit+0x58>)
  4027b6:	4798      	blx	r3
  4027b8:	e011      	b.n	4027de <OWWriteBit+0x4a>
	}
	else
	{
		// Write '0' bit
		drive_DQ_low(idx);
  4027ba:	79fb      	ldrb	r3, [r7, #7]
  4027bc:	4618      	mov	r0, r3
  4027be:	4b0c      	ldr	r3, [pc, #48]	; (4027f0 <OWWriteBit+0x5c>)
  4027c0:	4798      	blx	r3
		udelay(C);	//tW0L 60-120us
  4027c2:	4b0c      	ldr	r3, [pc, #48]	; (4027f4 <OWWriteBit+0x60>)
  4027c4:	681b      	ldr	r3, [r3, #0]
  4027c6:	4618      	mov	r0, r3
  4027c8:	4b08      	ldr	r3, [pc, #32]	; (4027ec <OWWriteBit+0x58>)
  4027ca:	4798      	blx	r3
		release_the_bus(idx);
  4027cc:	79fb      	ldrb	r3, [r7, #7]
  4027ce:	4618      	mov	r0, r3
  4027d0:	4b09      	ldr	r3, [pc, #36]	; (4027f8 <OWWriteBit+0x64>)
  4027d2:	4798      	blx	r3
		udelay(D);	//tREC 5-??us
  4027d4:	4b09      	ldr	r3, [pc, #36]	; (4027fc <OWWriteBit+0x68>)
  4027d6:	681b      	ldr	r3, [r3, #0]
  4027d8:	4618      	mov	r0, r3
  4027da:	4b04      	ldr	r3, [pc, #16]	; (4027ec <OWWriteBit+0x58>)
  4027dc:	4798      	blx	r3
	}
}
  4027de:	3708      	adds	r7, #8
  4027e0:	46bd      	mov	sp, r7
  4027e2:	bd80      	pop	{r7, pc}
  4027e4:	0040273d 	.word	0x0040273d
  4027e8:	20400a8c 	.word	0x20400a8c
  4027ec:	004023e5 	.word	0x004023e5
  4027f0:	00402525 	.word	0x00402525
  4027f4:	20400a94 	.word	0x20400a94
  4027f8:	00402561 	.word	0x00402561
  4027fc:	20400a84 	.word	0x20400a84

00402800 <OWReadBit>:
//-----------------------------------------------------------------------------
// Read a bit from the 1-Wire bus and return it. Provide 10us recovery time.
//
int OWReadBit(unsigned char idx);
int OWReadBit(unsigned char idx)
{
  402800:	b580      	push	{r7, lr}
  402802:	b084      	sub	sp, #16
  402804:	af00      	add	r7, sp, #0
  402806:	4603      	mov	r3, r0
  402808:	71fb      	strb	r3, [r7, #7]
#if 0
	drive_DQ_low(idx);
//14may15 take this out entirely, we can't seem to control this precisely enough	cpu_delay_us(A, EC_CPU_CLOCK_100MHZ	//tRL 5-15us
	release_the_bus(idx);
#endif
	drive_DQ_low_and_release_the_bus(idx);
  40280a:	79fb      	ldrb	r3, [r7, #7]
  40280c:	4618      	mov	r0, r3
  40280e:	4b0b      	ldr	r3, [pc, #44]	; (40283c <OWReadBit+0x3c>)
  402810:	4798      	blx	r3
	
	udelay(E);	//tMSR 5-15us
  402812:	4b0b      	ldr	r3, [pc, #44]	; (402840 <OWReadBit+0x40>)
  402814:	681b      	ldr	r3, [r3, #0]
  402816:	4618      	mov	r0, r3
  402818:	4b0a      	ldr	r3, [pc, #40]	; (402844 <OWReadBit+0x44>)
  40281a:	4798      	blx	r3
	result = sample_line(idx);
  40281c:	79fb      	ldrb	r3, [r7, #7]
  40281e:	4618      	mov	r0, r3
  402820:	4b09      	ldr	r3, [pc, #36]	; (402848 <OWReadBit+0x48>)
  402822:	4798      	blx	r3
  402824:	4603      	mov	r3, r0
  402826:	60fb      	str	r3, [r7, #12]
	udelay(F); // Complete the time slot and 10us recovery tREC 5+us
  402828:	4b08      	ldr	r3, [pc, #32]	; (40284c <OWReadBit+0x4c>)
  40282a:	681b      	ldr	r3, [r3, #0]
  40282c:	4618      	mov	r0, r3
  40282e:	4b05      	ldr	r3, [pc, #20]	; (402844 <OWReadBit+0x44>)
  402830:	4798      	blx	r3

	return result;
  402832:	68fb      	ldr	r3, [r7, #12]
}
  402834:	4618      	mov	r0, r3
  402836:	3710      	adds	r7, #16
  402838:	46bd      	mov	sp, r7
  40283a:	bd80      	pop	{r7, pc}
  40283c:	0040273d 	.word	0x0040273d
  402840:	20400aa0 	.word	0x20400aa0
  402844:	004023e5 	.word	0x004023e5
  402848:	004025c1 	.word	0x004025c1
  40284c:	20400aa8 	.word	0x20400aa8

00402850 <OWWriteByte>:

//-----------------------------------------------------------------------------
// Write 1-Wire data byte
//
void OWWriteByte(unsigned char idx, int data)
{
  402850:	b580      	push	{r7, lr}
  402852:	b084      	sub	sp, #16
  402854:	af00      	add	r7, sp, #0
  402856:	4603      	mov	r3, r0
  402858:	6039      	str	r1, [r7, #0]
  40285a:	71fb      	strb	r3, [r7, #7]
	int loop;

	// Loop to write each bit in the byte, LS-bit first
	for (loop = 0; loop < 8; loop++)
  40285c:	2300      	movs	r3, #0
  40285e:	60fb      	str	r3, [r7, #12]
  402860:	e00d      	b.n	40287e <OWWriteByte+0x2e>
	{
		OWWriteBit(idx, data & 0x01);
  402862:	683b      	ldr	r3, [r7, #0]
  402864:	f003 0301 	and.w	r3, r3, #1
  402868:	79fa      	ldrb	r2, [r7, #7]
  40286a:	4610      	mov	r0, r2
  40286c:	4619      	mov	r1, r3
  40286e:	4b07      	ldr	r3, [pc, #28]	; (40288c <OWWriteByte+0x3c>)
  402870:	4798      	blx	r3

		// shift the data byte for the next bit
		data >>= 1;
  402872:	683b      	ldr	r3, [r7, #0]
  402874:	105b      	asrs	r3, r3, #1
  402876:	603b      	str	r3, [r7, #0]
void OWWriteByte(unsigned char idx, int data)
{
	int loop;

	// Loop to write each bit in the byte, LS-bit first
	for (loop = 0; loop < 8; loop++)
  402878:	68fb      	ldr	r3, [r7, #12]
  40287a:	3301      	adds	r3, #1
  40287c:	60fb      	str	r3, [r7, #12]
  40287e:	68fb      	ldr	r3, [r7, #12]
  402880:	2b07      	cmp	r3, #7
  402882:	ddee      	ble.n	402862 <OWWriteByte+0x12>
		OWWriteBit(idx, data & 0x01);

		// shift the data byte for the next bit
		data >>= 1;
	}
}
  402884:	3710      	adds	r7, #16
  402886:	46bd      	mov	sp, r7
  402888:	bd80      	pop	{r7, pc}
  40288a:	bf00      	nop
  40288c:	00402795 	.word	0x00402795

00402890 <OWReadByte>:

//-----------------------------------------------------------------------------
// Read 1-Wire data byte and return it
//
int OWReadByte(unsigned char idx)
{
  402890:	b580      	push	{r7, lr}
  402892:	b084      	sub	sp, #16
  402894:	af00      	add	r7, sp, #0
  402896:	4603      	mov	r3, r0
  402898:	71fb      	strb	r3, [r7, #7]
	int loop, result=0;
  40289a:	2300      	movs	r3, #0
  40289c:	60bb      	str	r3, [r7, #8]

	for (loop = 0; loop < 8; loop++)
  40289e:	2300      	movs	r3, #0
  4028a0:	60fb      	str	r3, [r7, #12]
  4028a2:	e010      	b.n	4028c6 <OWReadByte+0x36>
	{
		// shift the result to get it ready for the next bit
		result >>= 1;
  4028a4:	68bb      	ldr	r3, [r7, #8]
  4028a6:	105b      	asrs	r3, r3, #1
  4028a8:	60bb      	str	r3, [r7, #8]

		// if result is one, then set MS bit
		if (OWReadBit(idx))
  4028aa:	79fb      	ldrb	r3, [r7, #7]
  4028ac:	4618      	mov	r0, r3
  4028ae:	4b0a      	ldr	r3, [pc, #40]	; (4028d8 <OWReadByte+0x48>)
  4028b0:	4798      	blx	r3
  4028b2:	4603      	mov	r3, r0
  4028b4:	2b00      	cmp	r3, #0
  4028b6:	d003      	beq.n	4028c0 <OWReadByte+0x30>
		result |= 0x80;
  4028b8:	68bb      	ldr	r3, [r7, #8]
  4028ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4028be:	60bb      	str	r3, [r7, #8]
//
int OWReadByte(unsigned char idx)
{
	int loop, result=0;

	for (loop = 0; loop < 8; loop++)
  4028c0:	68fb      	ldr	r3, [r7, #12]
  4028c2:	3301      	adds	r3, #1
  4028c4:	60fb      	str	r3, [r7, #12]
  4028c6:	68fb      	ldr	r3, [r7, #12]
  4028c8:	2b07      	cmp	r3, #7
  4028ca:	ddeb      	ble.n	4028a4 <OWReadByte+0x14>

		// if result is one, then set MS bit
		if (OWReadBit(idx))
		result |= 0x80;
	}
	return result;
  4028cc:	68bb      	ldr	r3, [r7, #8]
}
  4028ce:	4618      	mov	r0, r3
  4028d0:	3710      	adds	r7, #16
  4028d2:	46bd      	mov	sp, r7
  4028d4:	bd80      	pop	{r7, pc}
  4028d6:	bf00      	nop
  4028d8:	00402801 	.word	0x00402801

004028dc <crc8_add>:
	return OWTouchReset(idx);
}

/* Polynomial ^8 + ^5 + ^4 + 1 */
unsigned char crc8_add(unsigned char acc, unsigned char byte)
{
  4028dc:	b480      	push	{r7}
  4028de:	b085      	sub	sp, #20
  4028e0:	af00      	add	r7, sp, #0
  4028e2:	4603      	mov	r3, r0
  4028e4:	460a      	mov	r2, r1
  4028e6:	71fb      	strb	r3, [r7, #7]
  4028e8:	4613      	mov	r3, r2
  4028ea:	71bb      	strb	r3, [r7, #6]
   int i;
   acc ^= byte;
  4028ec:	79fa      	ldrb	r2, [r7, #7]
  4028ee:	79bb      	ldrb	r3, [r7, #6]
  4028f0:	4053      	eors	r3, r2
  4028f2:	71fb      	strb	r3, [r7, #7]
   for(i = 0; i < 8; i++) 
  4028f4:	2300      	movs	r3, #0
  4028f6:	60fb      	str	r3, [r7, #12]
  4028f8:	e012      	b.n	402920 <crc8_add+0x44>
   {
		if(acc & 1) 
  4028fa:	79fb      	ldrb	r3, [r7, #7]
  4028fc:	f003 0301 	and.w	r3, r3, #1
  402900:	2b00      	cmp	r3, #0
  402902:	d007      	beq.n	402914 <crc8_add+0x38>
		{
			acc = (acc >> 1) ^ 0x8c;
  402904:	79fb      	ldrb	r3, [r7, #7]
  402906:	085b      	lsrs	r3, r3, #1
  402908:	b2da      	uxtb	r2, r3
  40290a:	f06f 0373 	mvn.w	r3, #115	; 0x73
  40290e:	4053      	eors	r3, r2
  402910:	71fb      	strb	r3, [r7, #7]
  402912:	e002      	b.n	40291a <crc8_add+0x3e>
		} 
		else 
		{
			acc >>= 1;
  402914:	79fb      	ldrb	r3, [r7, #7]
  402916:	085b      	lsrs	r3, r3, #1
  402918:	71fb      	strb	r3, [r7, #7]
/* Polynomial ^8 + ^5 + ^4 + 1 */
unsigned char crc8_add(unsigned char acc, unsigned char byte)
{
   int i;
   acc ^= byte;
   for(i = 0; i < 8; i++) 
  40291a:	68fb      	ldr	r3, [r7, #12]
  40291c:	3301      	adds	r3, #1
  40291e:	60fb      	str	r3, [r7, #12]
  402920:	68fb      	ldr	r3, [r7, #12]
  402922:	2b07      	cmp	r3, #7
  402924:	dde9      	ble.n	4028fa <crc8_add+0x1e>
		else 
		{
			acc >>= 1;
	    }
   }
   return acc;
  402926:	79fb      	ldrb	r3, [r7, #7]
}
  402928:	4618      	mov	r0, r3
  40292a:	3714      	adds	r7, #20
  40292c:	46bd      	mov	sp, r7
  40292e:	f85d 7b04 	ldr.w	r7, [sp], #4
  402932:	4770      	bx	lr

00402934 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  402934:	b480      	push	{r7}
  402936:	b083      	sub	sp, #12
  402938:	af00      	add	r7, sp, #0
  40293a:	4603      	mov	r3, r0
  40293c:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  40293e:	4908      	ldr	r1, [pc, #32]	; (402960 <NVIC_EnableIRQ+0x2c>)
  402940:	f997 3007 	ldrsb.w	r3, [r7, #7]
  402944:	095b      	lsrs	r3, r3, #5
  402946:	79fa      	ldrb	r2, [r7, #7]
  402948:	f002 021f 	and.w	r2, r2, #31
  40294c:	2001      	movs	r0, #1
  40294e:	fa00 f202 	lsl.w	r2, r0, r2
  402952:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  402956:	370c      	adds	r7, #12
  402958:	46bd      	mov	sp, r7
  40295a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40295e:	4770      	bx	lr
  402960:	e000e100 	.word	0xe000e100

00402964 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  402964:	b480      	push	{r7}
  402966:	b083      	sub	sp, #12
  402968:	af00      	add	r7, sp, #0
  40296a:	4603      	mov	r3, r0
  40296c:	6039      	str	r1, [r7, #0]
  40296e:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
  402970:	f997 3007 	ldrsb.w	r3, [r7, #7]
  402974:	2b00      	cmp	r3, #0
  402976:	da0b      	bge.n	402990 <NVIC_SetPriority+0x2c>
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  402978:	490d      	ldr	r1, [pc, #52]	; (4029b0 <NVIC_SetPriority+0x4c>)
  40297a:	79fb      	ldrb	r3, [r7, #7]
  40297c:	f003 030f 	and.w	r3, r3, #15
  402980:	3b04      	subs	r3, #4
  402982:	683a      	ldr	r2, [r7, #0]
  402984:	b2d2      	uxtb	r2, r2
  402986:	0152      	lsls	r2, r2, #5
  402988:	b2d2      	uxtb	r2, r2
  40298a:	440b      	add	r3, r1
  40298c:	761a      	strb	r2, [r3, #24]
  40298e:	e009      	b.n	4029a4 <NVIC_SetPriority+0x40>
  else {
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  402990:	4908      	ldr	r1, [pc, #32]	; (4029b4 <NVIC_SetPriority+0x50>)
  402992:	f997 3007 	ldrsb.w	r3, [r7, #7]
  402996:	683a      	ldr	r2, [r7, #0]
  402998:	b2d2      	uxtb	r2, r2
  40299a:	0152      	lsls	r2, r2, #5
  40299c:	b2d2      	uxtb	r2, r2
  40299e:	440b      	add	r3, r1
  4029a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
  4029a4:	370c      	adds	r7, #12
  4029a6:	46bd      	mov	sp, r7
  4029a8:	f85d 7b04 	ldr.w	r7, [sp], #4
  4029ac:	4770      	bx	lr
  4029ae:	bf00      	nop
  4029b0:	e000ed00 	.word	0xe000ed00
  4029b4:	e000e100 	.word	0xe000e100

004029b8 <SysTick_Config>:
    function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  4029b8:	b580      	push	{r7, lr}
  4029ba:	b082      	sub	sp, #8
  4029bc:	af00      	add	r7, sp, #0
  4029be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
  4029c0:	687b      	ldr	r3, [r7, #4]
  4029c2:	3b01      	subs	r3, #1
  4029c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
  4029c8:	d301      	bcc.n	4029ce <SysTick_Config+0x16>
  4029ca:	2301      	movs	r3, #1
  4029cc:	e00f      	b.n	4029ee <SysTick_Config+0x36>

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
  4029ce:	4a0a      	ldr	r2, [pc, #40]	; (4029f8 <SysTick_Config+0x40>)
  4029d0:	687b      	ldr	r3, [r7, #4]
  4029d2:	3b01      	subs	r3, #1
  4029d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  4029d6:	f04f 30ff 	mov.w	r0, #4294967295
  4029da:	2107      	movs	r1, #7
  4029dc:	4b07      	ldr	r3, [pc, #28]	; (4029fc <SysTick_Config+0x44>)
  4029de:	4798      	blx	r3
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
  4029e0:	4b05      	ldr	r3, [pc, #20]	; (4029f8 <SysTick_Config+0x40>)
  4029e2:	2200      	movs	r2, #0
  4029e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
  4029e6:	4b04      	ldr	r3, [pc, #16]	; (4029f8 <SysTick_Config+0x40>)
  4029e8:	2207      	movs	r2, #7
  4029ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
  4029ec:	2300      	movs	r3, #0
}
  4029ee:	4618      	mov	r0, r3
  4029f0:	3708      	adds	r7, #8
  4029f2:	46bd      	mov	sp, r7
  4029f4:	bd80      	pop	{r7, pc}
  4029f6:	bf00      	nop
  4029f8:	e000e010 	.word	0xe000e010
  4029fc:	00402965 	.word	0x00402965

00402a00 <afec_ch_sanity_check>:
 * \param channel  AFEC channel number.
 *
 */
static inline void afec_ch_sanity_check(Afec *const afec,
		const enum afec_channel_num channel)
{
  402a00:	b480      	push	{r7}
  402a02:	b083      	sub	sp, #12
  402a04:	af00      	add	r7, sp, #0
  402a06:	6078      	str	r0, [r7, #4]
  402a08:	460b      	mov	r3, r1
  402a0a:	807b      	strh	r3, [r7, #2]
	#endif
	} else if (afec == AFEC1) {
		Assert(channel < NB_CH_AFE1);
	}
	UNUSED(channel);
}
  402a0c:	370c      	adds	r7, #12
  402a0e:	46bd      	mov	sp, r7
  402a10:	f85d 7b04 	ldr.w	r7, [sp], #4
  402a14:	4770      	bx	lr
  402a16:	bf00      	nop

00402a18 <afec_set_trigger>:
 * \param trigger Conversion trigger.
 *
 */
static inline void afec_set_trigger(Afec *const afec,
		const enum afec_trigger trigger)
{
  402a18:	b480      	push	{r7}
  402a1a:	b085      	sub	sp, #20
  402a1c:	af00      	add	r7, sp, #0
  402a1e:	6078      	str	r0, [r7, #4]
  402a20:	460b      	mov	r3, r1
  402a22:	70fb      	strb	r3, [r7, #3]
	uint32_t reg;

	reg = afec->AFEC_MR;
  402a24:	687b      	ldr	r3, [r7, #4]
  402a26:	685b      	ldr	r3, [r3, #4]
  402a28:	60fb      	str	r3, [r7, #12]

	if (trigger == AFEC_TRIG_FREERUN) {
  402a2a:	78fb      	ldrb	r3, [r7, #3]
  402a2c:	2bff      	cmp	r3, #255	; 0xff
  402a2e:	d104      	bne.n	402a3a <afec_set_trigger+0x22>
		reg |= AFEC_MR_FREERUN_ON;
  402a30:	68fb      	ldr	r3, [r7, #12]
  402a32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  402a36:	60fb      	str	r3, [r7, #12]
  402a38:	e007      	b.n	402a4a <afec_set_trigger+0x32>
	} else {
		reg &= ~(AFEC_MR_TRGSEL_Msk | AFEC_MR_TRGEN | AFEC_MR_FREERUN_ON);
  402a3a:	68fb      	ldr	r3, [r7, #12]
  402a3c:	f023 038f 	bic.w	r3, r3, #143	; 0x8f
  402a40:	60fb      	str	r3, [r7, #12]
		reg |= trigger;
  402a42:	78fb      	ldrb	r3, [r7, #3]
  402a44:	68fa      	ldr	r2, [r7, #12]
  402a46:	4313      	orrs	r3, r2
  402a48:	60fb      	str	r3, [r7, #12]
	}

	afec->AFEC_MR = reg;
  402a4a:	687b      	ldr	r3, [r7, #4]
  402a4c:	68fa      	ldr	r2, [r7, #12]
  402a4e:	605a      	str	r2, [r3, #4]
}
  402a50:	3714      	adds	r7, #20
  402a52:	46bd      	mov	sp, r7
  402a54:	f85d 7b04 	ldr.w	r7, [sp], #4
  402a58:	4770      	bx	lr
  402a5a:	bf00      	nop

00402a5c <afec_start_software_conversion>:
 * this function can NOT start analog to digital conversion.
 *
 * \param afec  Base address of the AFEC.
 */
static inline void afec_start_software_conversion(Afec *const afec)
{
  402a5c:	b480      	push	{r7}
  402a5e:	b083      	sub	sp, #12
  402a60:	af00      	add	r7, sp, #0
  402a62:	6078      	str	r0, [r7, #4]
	afec->AFEC_CR = AFEC_CR_START;
  402a64:	687b      	ldr	r3, [r7, #4]
  402a66:	2202      	movs	r2, #2
  402a68:	601a      	str	r2, [r3, #0]
}
  402a6a:	370c      	adds	r7, #12
  402a6c:	46bd      	mov	sp, r7
  402a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
  402a72:	4770      	bx	lr

00402a74 <afec_channel_enable>:
 * \param afec  Base address of the AFEC.
 * \param afec_ch AFEC channel number.
 */
static inline void afec_channel_enable(Afec *const afec,
		const enum afec_channel_num afec_ch)
{
  402a74:	b580      	push	{r7, lr}
  402a76:	b082      	sub	sp, #8
  402a78:	af00      	add	r7, sp, #0
  402a7a:	6078      	str	r0, [r7, #4]
  402a7c:	460b      	mov	r3, r1
  402a7e:	807b      	strh	r3, [r7, #2]
	if (afec_ch != AFEC_CHANNEL_ALL) {
  402a80:	887b      	ldrh	r3, [r7, #2]
  402a82:	f640 72ff 	movw	r2, #4095	; 0xfff
  402a86:	4293      	cmp	r3, r2
  402a88:	d004      	beq.n	402a94 <afec_channel_enable+0x20>
		afec_ch_sanity_check(afec, afec_ch);
  402a8a:	887b      	ldrh	r3, [r7, #2]
  402a8c:	6878      	ldr	r0, [r7, #4]
  402a8e:	4619      	mov	r1, r3
  402a90:	4b09      	ldr	r3, [pc, #36]	; (402ab8 <afec_channel_enable+0x44>)
  402a92:	4798      	blx	r3
	}

	afec->AFEC_CHER = (afec_ch == AFEC_CHANNEL_ALL) ?
  402a94:	887b      	ldrh	r3, [r7, #2]
  402a96:	f640 72ff 	movw	r2, #4095	; 0xfff
  402a9a:	4293      	cmp	r3, r2
  402a9c:	d005      	beq.n	402aaa <afec_channel_enable+0x36>
			AFEC_CHANNEL_ALL : 1 << afec_ch;
  402a9e:	887b      	ldrh	r3, [r7, #2]
  402aa0:	2201      	movs	r2, #1
  402aa2:	fa02 f303 	lsl.w	r3, r2, r3
{
	if (afec_ch != AFEC_CHANNEL_ALL) {
		afec_ch_sanity_check(afec, afec_ch);
	}

	afec->AFEC_CHER = (afec_ch == AFEC_CHANNEL_ALL) ?
  402aa6:	461a      	mov	r2, r3
  402aa8:	e001      	b.n	402aae <afec_channel_enable+0x3a>
  402aaa:	f640 72ff 	movw	r2, #4095	; 0xfff
  402aae:	687b      	ldr	r3, [r7, #4]
  402ab0:	615a      	str	r2, [r3, #20]
			AFEC_CHANNEL_ALL : 1 << afec_ch;
}
  402ab2:	3708      	adds	r7, #8
  402ab4:	46bd      	mov	sp, r7
  402ab6:	bd80      	pop	{r7, pc}
  402ab8:	00402a01 	.word	0x00402a01

00402abc <afec_channel_disable>:
 * \param afec  Base address of the AFEC.
 * \param afec_ch AFEC channel number.
 */
static inline void afec_channel_disable(Afec *const afec,
		const enum afec_channel_num afec_ch)
{
  402abc:	b580      	push	{r7, lr}
  402abe:	b082      	sub	sp, #8
  402ac0:	af00      	add	r7, sp, #0
  402ac2:	6078      	str	r0, [r7, #4]
  402ac4:	460b      	mov	r3, r1
  402ac6:	807b      	strh	r3, [r7, #2]
	if (afec_ch != AFEC_CHANNEL_ALL) {
  402ac8:	887b      	ldrh	r3, [r7, #2]
  402aca:	f640 72ff 	movw	r2, #4095	; 0xfff
  402ace:	4293      	cmp	r3, r2
  402ad0:	d004      	beq.n	402adc <afec_channel_disable+0x20>
		afec_ch_sanity_check(afec, afec_ch);
  402ad2:	887b      	ldrh	r3, [r7, #2]
  402ad4:	6878      	ldr	r0, [r7, #4]
  402ad6:	4619      	mov	r1, r3
  402ad8:	4b09      	ldr	r3, [pc, #36]	; (402b00 <afec_channel_disable+0x44>)
  402ada:	4798      	blx	r3
	}

	afec->AFEC_CHDR = (afec_ch == AFEC_CHANNEL_ALL) ?
  402adc:	887b      	ldrh	r3, [r7, #2]
  402ade:	f640 72ff 	movw	r2, #4095	; 0xfff
  402ae2:	4293      	cmp	r3, r2
  402ae4:	d005      	beq.n	402af2 <afec_channel_disable+0x36>
			AFEC_CHANNEL_ALL : 1 << afec_ch;
  402ae6:	887b      	ldrh	r3, [r7, #2]
  402ae8:	2201      	movs	r2, #1
  402aea:	fa02 f303 	lsl.w	r3, r2, r3
{
	if (afec_ch != AFEC_CHANNEL_ALL) {
		afec_ch_sanity_check(afec, afec_ch);
	}

	afec->AFEC_CHDR = (afec_ch == AFEC_CHANNEL_ALL) ?
  402aee:	461a      	mov	r2, r3
  402af0:	e001      	b.n	402af6 <afec_channel_disable+0x3a>
  402af2:	f640 72ff 	movw	r2, #4095	; 0xfff
  402af6:	687b      	ldr	r3, [r7, #4]
  402af8:	619a      	str	r2, [r3, #24]
			AFEC_CHANNEL_ALL : 1 << afec_ch;
}
  402afa:	3708      	adds	r7, #8
  402afc:	46bd      	mov	sp, r7
  402afe:	bd80      	pop	{r7, pc}
  402b00:	00402a01 	.word	0x00402a01

00402b04 <afec_get_latest_value>:
 * \param afec  Base address of the AFEC.
 *
 * \return AFEC latest converted value.
 */
static inline uint32_t afec_get_latest_value(Afec *const afec)
{
  402b04:	b480      	push	{r7}
  402b06:	b083      	sub	sp, #12
  402b08:	af00      	add	r7, sp, #0
  402b0a:	6078      	str	r0, [r7, #4]
	return afec->AFEC_LCDR & AFEC_LCDR_LDATA_Msk;
  402b0c:	687b      	ldr	r3, [r7, #4]
  402b0e:	6a1b      	ldr	r3, [r3, #32]
  402b10:	b29b      	uxth	r3, r3
}
  402b12:	4618      	mov	r0, r3
  402b14:	370c      	adds	r7, #12
  402b16:	46bd      	mov	sp, r7
  402b18:	f85d 7b04 	ldr.w	r7, [sp], #4
  402b1c:	4770      	bx	lr
  402b1e:	bf00      	nop

00402b20 <afec_get_interrupt_status>:
 * \param afec  Base address of the AFEC.
 *
 * \return The interrupt status value.
 */
static inline uint32_t afec_get_interrupt_status(Afec *const afec)
{
  402b20:	b480      	push	{r7}
  402b22:	b083      	sub	sp, #12
  402b24:	af00      	add	r7, sp, #0
  402b26:	6078      	str	r0, [r7, #4]
	return afec->AFEC_ISR;
  402b28:	687b      	ldr	r3, [r7, #4]
  402b2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
  402b2c:	4618      	mov	r0, r3
  402b2e:	370c      	adds	r7, #12
  402b30:	46bd      	mov	sp, r7
  402b32:	f85d 7b04 	ldr.w	r7, [sp], #4
  402b36:	4770      	bx	lr

00402b38 <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  402b38:	b480      	push	{r7}
  402b3a:	b083      	sub	sp, #12
  402b3c:	af00      	add	r7, sp, #0
  402b3e:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  402b40:	687b      	ldr	r3, [r7, #4]
  402b42:	2b07      	cmp	r3, #7
  402b44:	d825      	bhi.n	402b92 <osc_get_rate+0x5a>
  402b46:	a201      	add	r2, pc, #4	; (adr r2, 402b4c <osc_get_rate+0x14>)
  402b48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  402b4c:	00402b6d 	.word	0x00402b6d
  402b50:	00402b73 	.word	0x00402b73
  402b54:	00402b79 	.word	0x00402b79
  402b58:	00402b7f 	.word	0x00402b7f
  402b5c:	00402b83 	.word	0x00402b83
  402b60:	00402b87 	.word	0x00402b87
  402b64:	00402b8b 	.word	0x00402b8b
  402b68:	00402b8f 	.word	0x00402b8f
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  402b6c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  402b70:	e010      	b.n	402b94 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  402b72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  402b76:	e00d      	b.n	402b94 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  402b78:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  402b7c:	e00a      	b.n	402b94 <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  402b7e:	4b08      	ldr	r3, [pc, #32]	; (402ba0 <osc_get_rate+0x68>)
  402b80:	e008      	b.n	402b94 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  402b82:	4b08      	ldr	r3, [pc, #32]	; (402ba4 <osc_get_rate+0x6c>)
  402b84:	e006      	b.n	402b94 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  402b86:	4b08      	ldr	r3, [pc, #32]	; (402ba8 <osc_get_rate+0x70>)
  402b88:	e004      	b.n	402b94 <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  402b8a:	4b08      	ldr	r3, [pc, #32]	; (402bac <osc_get_rate+0x74>)
  402b8c:	e002      	b.n	402b94 <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  402b8e:	4b06      	ldr	r3, [pc, #24]	; (402ba8 <osc_get_rate+0x70>)
  402b90:	e000      	b.n	402b94 <osc_get_rate+0x5c>
	}

	return 0;
  402b92:	2300      	movs	r3, #0
}
  402b94:	4618      	mov	r0, r3
  402b96:	370c      	adds	r7, #12
  402b98:	46bd      	mov	sp, r7
  402b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
  402b9e:	4770      	bx	lr
  402ba0:	003d0900 	.word	0x003d0900
  402ba4:	007a1200 	.word	0x007a1200
  402ba8:	00b71b00 	.word	0x00b71b00
  402bac:	00f42400 	.word	0x00f42400

00402bb0 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  402bb0:	b580      	push	{r7, lr}
  402bb2:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  402bb4:	2006      	movs	r0, #6
  402bb6:	4b05      	ldr	r3, [pc, #20]	; (402bcc <sysclk_get_main_hz+0x1c>)
  402bb8:	4798      	blx	r3
  402bba:	4602      	mov	r2, r0
  402bbc:	4613      	mov	r3, r2
  402bbe:	009b      	lsls	r3, r3, #2
  402bc0:	4413      	add	r3, r2
  402bc2:	009a      	lsls	r2, r3, #2
  402bc4:	4413      	add	r3, r2
  402bc6:	089b      	lsrs	r3, r3, #2
#endif
	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  402bc8:	4618      	mov	r0, r3
  402bca:	bd80      	pop	{r7, pc}
  402bcc:	00402b39 	.word	0x00402b39

00402bd0 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
  402bd0:	b580      	push	{r7, lr}
  402bd2:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  402bd4:	4b02      	ldr	r3, [pc, #8]	; (402be0 <sysclk_get_cpu_hz+0x10>)
  402bd6:	4798      	blx	r3
  402bd8:	4603      	mov	r3, r0
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  402bda:	4618      	mov	r0, r3
  402bdc:	bd80      	pop	{r7, pc}
  402bde:	bf00      	nop
  402be0:	00402bb1 	.word	0x00402bb1

00402be4 <sysclk_get_peripheral_hz>:
 * \brief Retrieves the current rate in Hz of the peripheral clocks.
 *
 * \return Frequency of the peripheral clocks, in Hz.
 */
static inline uint32_t sysclk_get_peripheral_hz(void)
{
  402be4:	b580      	push	{r7, lr}
  402be6:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  402be8:	4b02      	ldr	r3, [pc, #8]	; (402bf4 <sysclk_get_peripheral_hz+0x10>)
  402bea:	4798      	blx	r3
  402bec:	4603      	mov	r3, r0
		(((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 : (1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos))) * CONFIG_SYSCLK_DIV);
}
  402bee:	4618      	mov	r0, r3
  402bf0:	bd80      	pop	{r7, pc}
  402bf2:	bf00      	nop
  402bf4:	00402bb1 	.word	0x00402bb1

00402bf8 <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
  402bf8:	b580      	push	{r7, lr}
  402bfa:	b082      	sub	sp, #8
  402bfc:	af00      	add	r7, sp, #0
  402bfe:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  402c00:	6878      	ldr	r0, [r7, #4]
  402c02:	4b02      	ldr	r3, [pc, #8]	; (402c0c <sysclk_enable_peripheral_clock+0x14>)
  402c04:	4798      	blx	r3
}
  402c06:	3708      	adds	r7, #8
  402c08:	46bd      	mov	sp, r7
  402c0a:	bd80      	pop	{r7, pc}
  402c0c:	00401569 	.word	0x00401569

00402c10 <ioport_set_pin_dir>:
 * \param pin IOPORT pin to configure
 * \param dir Direction to set for the specified pin (\ref ioport_direction)
 */
static inline void ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
  402c10:	b480      	push	{r7}
  402c12:	b08d      	sub	sp, #52	; 0x34
  402c14:	af00      	add	r7, sp, #0
  402c16:	6078      	str	r0, [r7, #4]
  402c18:	460b      	mov	r3, r1
  402c1a:	70fb      	strb	r3, [r7, #3]
  402c1c:	687b      	ldr	r3, [r7, #4]
  402c1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  402c20:	78fb      	ldrb	r3, [r7, #3]
  402c22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  402c26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  402c28:	627b      	str	r3, [r7, #36]	; 0x24
  402c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  402c2c:	623b      	str	r3, [r7, #32]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  402c2e:	6a3b      	ldr	r3, [r7, #32]
  402c30:	095b      	lsrs	r3, r3, #5
  402c32:	61fb      	str	r3, [r7, #28]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  402c34:	69fa      	ldr	r2, [r7, #28]
  402c36:	4b17      	ldr	r3, [pc, #92]	; (402c94 <ioport_set_pin_dir+0x84>)
  402c38:	4413      	add	r3, r2
  402c3a:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);
  402c3c:	61bb      	str	r3, [r7, #24]

	if (dir == IOPORT_DIR_OUTPUT) {
  402c3e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  402c42:	2b01      	cmp	r3, #1
  402c44:	d109      	bne.n	402c5a <ioport_set_pin_dir+0x4a>
  402c46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  402c48:	617b      	str	r3, [r7, #20]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  402c4a:	697b      	ldr	r3, [r7, #20]
  402c4c:	f003 031f 	and.w	r3, r3, #31
  402c50:	2201      	movs	r2, #1
  402c52:	409a      	lsls	r2, r3
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  402c54:	69bb      	ldr	r3, [r7, #24]
  402c56:	611a      	str	r2, [r3, #16]
  402c58:	e00c      	b.n	402c74 <ioport_set_pin_dir+0x64>
	} else if (dir == IOPORT_DIR_INPUT) {
  402c5a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  402c5e:	2b00      	cmp	r3, #0
  402c60:	d108      	bne.n	402c74 <ioport_set_pin_dir+0x64>
  402c62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  402c64:	613b      	str	r3, [r7, #16]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  402c66:	693b      	ldr	r3, [r7, #16]
  402c68:	f003 031f 	and.w	r3, r3, #31
  402c6c:	2201      	movs	r2, #1
  402c6e:	409a      	lsls	r2, r3
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  402c70:	69bb      	ldr	r3, [r7, #24]
  402c72:	615a      	str	r2, [r3, #20]
  402c74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  402c76:	60fb      	str	r3, [r7, #12]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  402c78:	68fb      	ldr	r3, [r7, #12]
  402c7a:	f003 031f 	and.w	r3, r3, #31
  402c7e:	2201      	movs	r2, #1
  402c80:	409a      	lsls	r2, r3
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  402c82:	69bb      	ldr	r3, [r7, #24]
  402c84:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	arch_ioport_set_pin_dir(pin, dir);
}
  402c88:	3734      	adds	r7, #52	; 0x34
  402c8a:	46bd      	mov	sp, r7
  402c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
  402c90:	4770      	bx	lr
  402c92:	bf00      	nop
  402c94:	00200707 	.word	0x00200707

00402c98 <ioport_set_pin_level>:
 *
 * \param pin IOPORT pin to configure
 * \param level Logical value of the pin
 */
static inline void ioport_set_pin_level(ioport_pin_t pin, bool level)
{
  402c98:	b480      	push	{r7}
  402c9a:	b08b      	sub	sp, #44	; 0x2c
  402c9c:	af00      	add	r7, sp, #0
  402c9e:	6078      	str	r0, [r7, #4]
  402ca0:	460b      	mov	r3, r1
  402ca2:	70fb      	strb	r3, [r7, #3]
  402ca4:	687b      	ldr	r3, [r7, #4]
  402ca6:	627b      	str	r3, [r7, #36]	; 0x24
  402ca8:	78fb      	ldrb	r3, [r7, #3]
  402caa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  402cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  402cb0:	61fb      	str	r3, [r7, #28]
  402cb2:	69fb      	ldr	r3, [r7, #28]
  402cb4:	61bb      	str	r3, [r7, #24]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  402cb6:	69bb      	ldr	r3, [r7, #24]
  402cb8:	095b      	lsrs	r3, r3, #5
  402cba:	617b      	str	r3, [r7, #20]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  402cbc:	697a      	ldr	r2, [r7, #20]
  402cbe:	4b10      	ldr	r3, [pc, #64]	; (402d00 <ioport_set_pin_level+0x68>)
  402cc0:	4413      	add	r3, r2
  402cc2:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);
  402cc4:	613b      	str	r3, [r7, #16]

	if (level) {
  402cc6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
  402cca:	2b00      	cmp	r3, #0
  402ccc:	d009      	beq.n	402ce2 <ioport_set_pin_level+0x4a>
  402cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  402cd0:	60fb      	str	r3, [r7, #12]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  402cd2:	68fb      	ldr	r3, [r7, #12]
  402cd4:	f003 031f 	and.w	r3, r3, #31
  402cd8:	2201      	movs	r2, #1
  402cda:	409a      	lsls	r2, r3
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  402cdc:	693b      	ldr	r3, [r7, #16]
  402cde:	631a      	str	r2, [r3, #48]	; 0x30
  402ce0:	e008      	b.n	402cf4 <ioport_set_pin_level+0x5c>
  402ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  402ce4:	60bb      	str	r3, [r7, #8]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  402ce6:	68bb      	ldr	r3, [r7, #8]
  402ce8:	f003 031f 	and.w	r3, r3, #31
  402cec:	2201      	movs	r2, #1
  402cee:	409a      	lsls	r2, r3
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  402cf0:	693b      	ldr	r3, [r7, #16]
  402cf2:	635a      	str	r2, [r3, #52]	; 0x34
	arch_ioport_set_pin_level(pin, level);
}
  402cf4:	372c      	adds	r7, #44	; 0x2c
  402cf6:	46bd      	mov	sp, r7
  402cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
  402cfc:	4770      	bx	lr
  402cfe:	bf00      	nop
  402d00:	00200707 	.word	0x00200707

00402d04 <ioport_toggle_pin_level>:
 * an output.
 *
 * \param pin IOPORT pin to toggle
 */
static inline void ioport_toggle_pin_level(ioport_pin_t pin)
{
  402d04:	b480      	push	{r7}
  402d06:	b08b      	sub	sp, #44	; 0x2c
  402d08:	af00      	add	r7, sp, #0
  402d0a:	6078      	str	r0, [r7, #4]
  402d0c:	687b      	ldr	r3, [r7, #4]
  402d0e:	627b      	str	r3, [r7, #36]	; 0x24
  402d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  402d12:	623b      	str	r3, [r7, #32]
  402d14:	6a3b      	ldr	r3, [r7, #32]
  402d16:	61fb      	str	r3, [r7, #28]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  402d18:	69fb      	ldr	r3, [r7, #28]
  402d1a:	095b      	lsrs	r3, r3, #5
  402d1c:	61bb      	str	r3, [r7, #24]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  402d1e:	69ba      	ldr	r2, [r7, #24]
  402d20:	4b12      	ldr	r3, [pc, #72]	; (402d6c <ioport_toggle_pin_level+0x68>)
  402d22:	4413      	add	r3, r2
  402d24:	025b      	lsls	r3, r3, #9
	return arch_ioport_port_to_base(port)->PIO_PDSR & mask;
}

__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	Pio *port = arch_ioport_pin_to_base(pin);
  402d26:	617b      	str	r3, [r7, #20]
  402d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  402d2a:	613b      	str	r3, [r7, #16]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  402d2c:	693b      	ldr	r3, [r7, #16]
  402d2e:	f003 031f 	and.w	r3, r3, #31
  402d32:	2201      	movs	r2, #1
  402d34:	fa02 f303 	lsl.w	r3, r2, r3
}

__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	Pio *port = arch_ioport_pin_to_base(pin);
	ioport_port_mask_t mask = arch_ioport_pin_to_mask(pin);
  402d38:	60fb      	str	r3, [r7, #12]

	if (port->PIO_PDSR & arch_ioport_pin_to_mask(pin)) {
  402d3a:	697b      	ldr	r3, [r7, #20]
  402d3c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
  402d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  402d40:	60bb      	str	r3, [r7, #8]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  402d42:	68bb      	ldr	r3, [r7, #8]
  402d44:	f003 031f 	and.w	r3, r3, #31
  402d48:	2101      	movs	r1, #1
  402d4a:	fa01 f303 	lsl.w	r3, r1, r3
__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	Pio *port = arch_ioport_pin_to_base(pin);
	ioport_port_mask_t mask = arch_ioport_pin_to_mask(pin);

	if (port->PIO_PDSR & arch_ioport_pin_to_mask(pin)) {
  402d4e:	4013      	ands	r3, r2
  402d50:	2b00      	cmp	r3, #0
  402d52:	d003      	beq.n	402d5c <ioport_toggle_pin_level+0x58>
		port->PIO_CODR = mask;
  402d54:	697b      	ldr	r3, [r7, #20]
  402d56:	68fa      	ldr	r2, [r7, #12]
  402d58:	635a      	str	r2, [r3, #52]	; 0x34
  402d5a:	e002      	b.n	402d62 <ioport_toggle_pin_level+0x5e>
	} else {
		port->PIO_SODR = mask;
  402d5c:	697b      	ldr	r3, [r7, #20]
  402d5e:	68fa      	ldr	r2, [r7, #12]
  402d60:	631a      	str	r2, [r3, #48]	; 0x30
	arch_ioport_toggle_pin_level(pin);
}
  402d62:	372c      	adds	r7, #44	; 0x2c
  402d64:	46bd      	mov	sp, r7
  402d66:	f85d 7b04 	ldr.w	r7, [sp], #4
  402d6a:	4770      	bx	lr
  402d6c:	00200707 	.word	0x00200707

00402d70 <usart_serial_init>:
 * \param opt      Options needed to set up RS232 communication (see
 * \ref usart_options_t).
 */
static inline void usart_serial_init(usart_if p_usart,
		usart_serial_options_t *opt)
{
  402d70:	b580      	push	{r7, lr}
  402d72:	b08c      	sub	sp, #48	; 0x30
  402d74:	af00      	add	r7, sp, #0
  402d76:	6078      	str	r0, [r7, #4]
  402d78:	6039      	str	r1, [r7, #0]
#if ((!SAM4L) && (!SAMG55))
	sam_uart_opt_t uart_settings;
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
  402d7a:	4b48      	ldr	r3, [pc, #288]	; (402e9c <usart_serial_init+0x12c>)
  402d7c:	4798      	blx	r3
  402d7e:	4603      	mov	r3, r0
  402d80:	627b      	str	r3, [r7, #36]	; 0x24
	uart_settings.ul_baudrate = opt->baudrate;
  402d82:	683b      	ldr	r3, [r7, #0]
  402d84:	681b      	ldr	r3, [r3, #0]
  402d86:	62bb      	str	r3, [r7, #40]	; 0x28
	uart_settings.ul_mode = opt->paritytype;
  402d88:	683b      	ldr	r3, [r7, #0]
  402d8a:	689b      	ldr	r3, [r3, #8]
  402d8c:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif

	sam_usart_opt_t usart_settings;
	usart_settings.baudrate = opt->baudrate;
  402d8e:	683b      	ldr	r3, [r7, #0]
  402d90:	681b      	ldr	r3, [r3, #0]
  402d92:	60fb      	str	r3, [r7, #12]
	usart_settings.char_length = opt->charlength;
  402d94:	683b      	ldr	r3, [r7, #0]
  402d96:	685b      	ldr	r3, [r3, #4]
  402d98:	613b      	str	r3, [r7, #16]
	usart_settings.parity_type = opt->paritytype;
  402d9a:	683b      	ldr	r3, [r7, #0]
  402d9c:	689b      	ldr	r3, [r3, #8]
  402d9e:	617b      	str	r3, [r7, #20]
	usart_settings.stop_bits= opt->stopbits;
  402da0:	683b      	ldr	r3, [r7, #0]
  402da2:	68db      	ldr	r3, [r3, #12]
  402da4:	61bb      	str	r3, [r7, #24]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
  402da6:	2300      	movs	r3, #0
  402da8:	61fb      	str	r3, [r7, #28]
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  402daa:	687b      	ldr	r3, [r7, #4]
  402dac:	4a3c      	ldr	r2, [pc, #240]	; (402ea0 <usart_serial_init+0x130>)
  402dae:	4293      	cmp	r3, r2
  402db0:	d108      	bne.n	402dc4 <usart_serial_init+0x54>
		sysclk_enable_peripheral_clock(ID_UART0);
  402db2:	2007      	movs	r0, #7
  402db4:	4b3b      	ldr	r3, [pc, #236]	; (402ea4 <usart_serial_init+0x134>)
  402db6:	4798      	blx	r3
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
  402db8:	f107 0324 	add.w	r3, r7, #36	; 0x24
  402dbc:	6878      	ldr	r0, [r7, #4]
  402dbe:	4619      	mov	r1, r3
  402dc0:	4b39      	ldr	r3, [pc, #228]	; (402ea8 <usart_serial_init+0x138>)
  402dc2:	4798      	blx	r3
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  402dc4:	687b      	ldr	r3, [r7, #4]
  402dc6:	4a39      	ldr	r2, [pc, #228]	; (402eac <usart_serial_init+0x13c>)
  402dc8:	4293      	cmp	r3, r2
  402dca:	d108      	bne.n	402dde <usart_serial_init+0x6e>
		sysclk_enable_peripheral_clock(ID_UART1);
  402dcc:	2008      	movs	r0, #8
  402dce:	4b35      	ldr	r3, [pc, #212]	; (402ea4 <usart_serial_init+0x134>)
  402dd0:	4798      	blx	r3
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
  402dd2:	f107 0324 	add.w	r3, r7, #36	; 0x24
  402dd6:	6878      	ldr	r0, [r7, #4]
  402dd8:	4619      	mov	r1, r3
  402dda:	4b33      	ldr	r3, [pc, #204]	; (402ea8 <usart_serial_init+0x138>)
  402ddc:	4798      	blx	r3
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  402dde:	687b      	ldr	r3, [r7, #4]
  402de0:	4a33      	ldr	r2, [pc, #204]	; (402eb0 <usart_serial_init+0x140>)
  402de2:	4293      	cmp	r3, r2
  402de4:	d108      	bne.n	402df8 <usart_serial_init+0x88>
		sysclk_enable_peripheral_clock(ID_UART2);
  402de6:	202c      	movs	r0, #44	; 0x2c
  402de8:	4b2e      	ldr	r3, [pc, #184]	; (402ea4 <usart_serial_init+0x134>)
  402dea:	4798      	blx	r3
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
  402dec:	f107 0324 	add.w	r3, r7, #36	; 0x24
  402df0:	6878      	ldr	r0, [r7, #4]
  402df2:	4619      	mov	r1, r3
  402df4:	4b2c      	ldr	r3, [pc, #176]	; (402ea8 <usart_serial_init+0x138>)
  402df6:	4798      	blx	r3
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  402df8:	687b      	ldr	r3, [r7, #4]
  402dfa:	4a2e      	ldr	r2, [pc, #184]	; (402eb4 <usart_serial_init+0x144>)
  402dfc:	4293      	cmp	r3, r2
  402dfe:	d108      	bne.n	402e12 <usart_serial_init+0xa2>
		sysclk_enable_peripheral_clock(ID_UART3);
  402e00:	202d      	movs	r0, #45	; 0x2d
  402e02:	4b28      	ldr	r3, [pc, #160]	; (402ea4 <usart_serial_init+0x134>)
  402e04:	4798      	blx	r3
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
  402e06:	f107 0324 	add.w	r3, r7, #36	; 0x24
  402e0a:	6878      	ldr	r0, [r7, #4]
  402e0c:	4619      	mov	r1, r3
  402e0e:	4b26      	ldr	r3, [pc, #152]	; (402ea8 <usart_serial_init+0x138>)
  402e10:	4798      	blx	r3
		usart_enable_tx(p_usart);
		usart_enable_rx(p_usart);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  402e12:	687b      	ldr	r3, [r7, #4]
  402e14:	4a28      	ldr	r2, [pc, #160]	; (402eb8 <usart_serial_init+0x148>)
  402e16:	4293      	cmp	r3, r2
  402e18:	d111      	bne.n	402e3e <usart_serial_init+0xce>
#if (!SAM4L)
#if (SAMG55)
		flexcom_enable(FLEXCOM0);
		flexcom_set_opmode(FLEXCOM0, FLEXCOM_USART);
#else
		sysclk_enable_peripheral_clock(ID_USART0);
  402e1a:	200d      	movs	r0, #13
  402e1c:	4b21      	ldr	r3, [pc, #132]	; (402ea4 <usart_serial_init+0x134>)
  402e1e:	4798      	blx	r3
#endif
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
  402e20:	4b1e      	ldr	r3, [pc, #120]	; (402e9c <usart_serial_init+0x12c>)
  402e22:	4798      	blx	r3
  402e24:	4602      	mov	r2, r0
  402e26:	f107 030c 	add.w	r3, r7, #12
  402e2a:	6878      	ldr	r0, [r7, #4]
  402e2c:	4619      	mov	r1, r3
  402e2e:	4b23      	ldr	r3, [pc, #140]	; (402ebc <usart_serial_init+0x14c>)
  402e30:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
  402e32:	6878      	ldr	r0, [r7, #4]
  402e34:	4b22      	ldr	r3, [pc, #136]	; (402ec0 <usart_serial_init+0x150>)
  402e36:	4798      	blx	r3
		usart_enable_rx(p_usart);
  402e38:	6878      	ldr	r0, [r7, #4]
  402e3a:	4b22      	ldr	r3, [pc, #136]	; (402ec4 <usart_serial_init+0x154>)
  402e3c:	4798      	blx	r3
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  402e3e:	687b      	ldr	r3, [r7, #4]
  402e40:	4a21      	ldr	r2, [pc, #132]	; (402ec8 <usart_serial_init+0x158>)
  402e42:	4293      	cmp	r3, r2
  402e44:	d111      	bne.n	402e6a <usart_serial_init+0xfa>
#if (!SAM4L)
#if (SAMG55)
		flexcom_enable(FLEXCOM1);
		flexcom_set_opmode(FLEXCOM1, FLEXCOM_USART);
#else
		sysclk_enable_peripheral_clock(ID_USART1);
  402e46:	200e      	movs	r0, #14
  402e48:	4b16      	ldr	r3, [pc, #88]	; (402ea4 <usart_serial_init+0x134>)
  402e4a:	4798      	blx	r3
#endif
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
  402e4c:	4b13      	ldr	r3, [pc, #76]	; (402e9c <usart_serial_init+0x12c>)
  402e4e:	4798      	blx	r3
  402e50:	4602      	mov	r2, r0
  402e52:	f107 030c 	add.w	r3, r7, #12
  402e56:	6878      	ldr	r0, [r7, #4]
  402e58:	4619      	mov	r1, r3
  402e5a:	4b18      	ldr	r3, [pc, #96]	; (402ebc <usart_serial_init+0x14c>)
  402e5c:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
  402e5e:	6878      	ldr	r0, [r7, #4]
  402e60:	4b17      	ldr	r3, [pc, #92]	; (402ec0 <usart_serial_init+0x150>)
  402e62:	4798      	blx	r3
		usart_enable_rx(p_usart);
  402e64:	6878      	ldr	r0, [r7, #4]
  402e66:	4b17      	ldr	r3, [pc, #92]	; (402ec4 <usart_serial_init+0x154>)
  402e68:	4798      	blx	r3
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  402e6a:	687b      	ldr	r3, [r7, #4]
  402e6c:	4a17      	ldr	r2, [pc, #92]	; (402ecc <usart_serial_init+0x15c>)
  402e6e:	4293      	cmp	r3, r2
  402e70:	d111      	bne.n	402e96 <usart_serial_init+0x126>
#if (!SAM4L)
#if (SAMG55)
		flexcom_enable(FLEXCOM2);
		flexcom_set_opmode(FLEXCOM2, FLEXCOM_USART);
#else
		sysclk_enable_peripheral_clock(ID_USART2);
  402e72:	200f      	movs	r0, #15
  402e74:	4b0b      	ldr	r3, [pc, #44]	; (402ea4 <usart_serial_init+0x134>)
  402e76:	4798      	blx	r3
#endif
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
  402e78:	4b08      	ldr	r3, [pc, #32]	; (402e9c <usart_serial_init+0x12c>)
  402e7a:	4798      	blx	r3
  402e7c:	4602      	mov	r2, r0
  402e7e:	f107 030c 	add.w	r3, r7, #12
  402e82:	6878      	ldr	r0, [r7, #4]
  402e84:	4619      	mov	r1, r3
  402e86:	4b0d      	ldr	r3, [pc, #52]	; (402ebc <usart_serial_init+0x14c>)
  402e88:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
  402e8a:	6878      	ldr	r0, [r7, #4]
  402e8c:	4b0c      	ldr	r3, [pc, #48]	; (402ec0 <usart_serial_init+0x150>)
  402e8e:	4798      	blx	r3
		usart_enable_rx(p_usart);
  402e90:	6878      	ldr	r0, [r7, #4]
  402e92:	4b0c      	ldr	r3, [pc, #48]	; (402ec4 <usart_serial_init+0x154>)
  402e94:	4798      	blx	r3
	}
# endif

#endif /* ifdef USART */

}
  402e96:	3730      	adds	r7, #48	; 0x30
  402e98:	46bd      	mov	sp, r7
  402e9a:	bd80      	pop	{r7, pc}
  402e9c:	00402be5 	.word	0x00402be5
  402ea0:	400e0800 	.word	0x400e0800
  402ea4:	00402bf9 	.word	0x00402bf9
  402ea8:	00401915 	.word	0x00401915
  402eac:	400e0a00 	.word	0x400e0a00
  402eb0:	400e1a00 	.word	0x400e1a00
  402eb4:	400e1c00 	.word	0x400e1c00
  402eb8:	40024000 	.word	0x40024000
  402ebc:	00401ab1 	.word	0x00401ab1
  402ec0:	00401b35 	.word	0x00401b35
  402ec4:	00401b81 	.word	0x00401b81
  402ec8:	40028000 	.word	0x40028000
  402ecc:	4002c000 	.word	0x4002c000

00402ed0 <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
  402ed0:	b580      	push	{r7, lr}
  402ed2:	b082      	sub	sp, #8
  402ed4:	af00      	add	r7, sp, #0
  402ed6:	6078      	str	r0, [r7, #4]
  402ed8:	460b      	mov	r3, r1
  402eda:	70fb      	strb	r3, [r7, #3]
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  402edc:	687b      	ldr	r3, [r7, #4]
  402ede:	4a36      	ldr	r2, [pc, #216]	; (402fb8 <usart_serial_putchar+0xe8>)
  402ee0:	4293      	cmp	r3, r2
  402ee2:	d10a      	bne.n	402efa <usart_serial_putchar+0x2a>
		while (uart_write((Uart*)p_usart, c)!=0);
  402ee4:	bf00      	nop
  402ee6:	78fb      	ldrb	r3, [r7, #3]
  402ee8:	6878      	ldr	r0, [r7, #4]
  402eea:	4619      	mov	r1, r3
  402eec:	4b33      	ldr	r3, [pc, #204]	; (402fbc <usart_serial_putchar+0xec>)
  402eee:	4798      	blx	r3
  402ef0:	4603      	mov	r3, r0
  402ef2:	2b00      	cmp	r3, #0
  402ef4:	d1f7      	bne.n	402ee6 <usart_serial_putchar+0x16>
		return 1;
  402ef6:	2301      	movs	r3, #1
  402ef8:	e05a      	b.n	402fb0 <usart_serial_putchar+0xe0>
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  402efa:	687b      	ldr	r3, [r7, #4]
  402efc:	4a30      	ldr	r2, [pc, #192]	; (402fc0 <usart_serial_putchar+0xf0>)
  402efe:	4293      	cmp	r3, r2
  402f00:	d10a      	bne.n	402f18 <usart_serial_putchar+0x48>
		while (uart_write((Uart*)p_usart, c)!=0);
  402f02:	bf00      	nop
  402f04:	78fb      	ldrb	r3, [r7, #3]
  402f06:	6878      	ldr	r0, [r7, #4]
  402f08:	4619      	mov	r1, r3
  402f0a:	4b2c      	ldr	r3, [pc, #176]	; (402fbc <usart_serial_putchar+0xec>)
  402f0c:	4798      	blx	r3
  402f0e:	4603      	mov	r3, r0
  402f10:	2b00      	cmp	r3, #0
  402f12:	d1f7      	bne.n	402f04 <usart_serial_putchar+0x34>
		return 1;
  402f14:	2301      	movs	r3, #1
  402f16:	e04b      	b.n	402fb0 <usart_serial_putchar+0xe0>
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  402f18:	687b      	ldr	r3, [r7, #4]
  402f1a:	4a2a      	ldr	r2, [pc, #168]	; (402fc4 <usart_serial_putchar+0xf4>)
  402f1c:	4293      	cmp	r3, r2
  402f1e:	d10a      	bne.n	402f36 <usart_serial_putchar+0x66>
		while (uart_write((Uart*)p_usart, c)!=0);
  402f20:	bf00      	nop
  402f22:	78fb      	ldrb	r3, [r7, #3]
  402f24:	6878      	ldr	r0, [r7, #4]
  402f26:	4619      	mov	r1, r3
  402f28:	4b24      	ldr	r3, [pc, #144]	; (402fbc <usart_serial_putchar+0xec>)
  402f2a:	4798      	blx	r3
  402f2c:	4603      	mov	r3, r0
  402f2e:	2b00      	cmp	r3, #0
  402f30:	d1f7      	bne.n	402f22 <usart_serial_putchar+0x52>
		return 1;
  402f32:	2301      	movs	r3, #1
  402f34:	e03c      	b.n	402fb0 <usart_serial_putchar+0xe0>
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  402f36:	687b      	ldr	r3, [r7, #4]
  402f38:	4a23      	ldr	r2, [pc, #140]	; (402fc8 <usart_serial_putchar+0xf8>)
  402f3a:	4293      	cmp	r3, r2
  402f3c:	d10a      	bne.n	402f54 <usart_serial_putchar+0x84>
		while (uart_write((Uart*)p_usart, c)!=0);
  402f3e:	bf00      	nop
  402f40:	78fb      	ldrb	r3, [r7, #3]
  402f42:	6878      	ldr	r0, [r7, #4]
  402f44:	4619      	mov	r1, r3
  402f46:	4b1d      	ldr	r3, [pc, #116]	; (402fbc <usart_serial_putchar+0xec>)
  402f48:	4798      	blx	r3
  402f4a:	4603      	mov	r3, r0
  402f4c:	2b00      	cmp	r3, #0
  402f4e:	d1f7      	bne.n	402f40 <usart_serial_putchar+0x70>
		return 1;
  402f50:	2301      	movs	r3, #1
  402f52:	e02d      	b.n	402fb0 <usart_serial_putchar+0xe0>
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  402f54:	687b      	ldr	r3, [r7, #4]
  402f56:	4a1d      	ldr	r2, [pc, #116]	; (402fcc <usart_serial_putchar+0xfc>)
  402f58:	4293      	cmp	r3, r2
  402f5a:	d10a      	bne.n	402f72 <usart_serial_putchar+0xa2>
		while (usart_write(p_usart, c)!=0);
  402f5c:	bf00      	nop
  402f5e:	78fb      	ldrb	r3, [r7, #3]
  402f60:	6878      	ldr	r0, [r7, #4]
  402f62:	4619      	mov	r1, r3
  402f64:	4b1a      	ldr	r3, [pc, #104]	; (402fd0 <usart_serial_putchar+0x100>)
  402f66:	4798      	blx	r3
  402f68:	4603      	mov	r3, r0
  402f6a:	2b00      	cmp	r3, #0
  402f6c:	d1f7      	bne.n	402f5e <usart_serial_putchar+0x8e>
		return 1;
  402f6e:	2301      	movs	r3, #1
  402f70:	e01e      	b.n	402fb0 <usart_serial_putchar+0xe0>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  402f72:	687b      	ldr	r3, [r7, #4]
  402f74:	4a17      	ldr	r2, [pc, #92]	; (402fd4 <usart_serial_putchar+0x104>)
  402f76:	4293      	cmp	r3, r2
  402f78:	d10a      	bne.n	402f90 <usart_serial_putchar+0xc0>
		while (usart_write(p_usart, c)!=0);
  402f7a:	bf00      	nop
  402f7c:	78fb      	ldrb	r3, [r7, #3]
  402f7e:	6878      	ldr	r0, [r7, #4]
  402f80:	4619      	mov	r1, r3
  402f82:	4b13      	ldr	r3, [pc, #76]	; (402fd0 <usart_serial_putchar+0x100>)
  402f84:	4798      	blx	r3
  402f86:	4603      	mov	r3, r0
  402f88:	2b00      	cmp	r3, #0
  402f8a:	d1f7      	bne.n	402f7c <usart_serial_putchar+0xac>
		return 1;
  402f8c:	2301      	movs	r3, #1
  402f8e:	e00f      	b.n	402fb0 <usart_serial_putchar+0xe0>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  402f90:	687b      	ldr	r3, [r7, #4]
  402f92:	4a11      	ldr	r2, [pc, #68]	; (402fd8 <usart_serial_putchar+0x108>)
  402f94:	4293      	cmp	r3, r2
  402f96:	d10a      	bne.n	402fae <usart_serial_putchar+0xde>
		while (usart_write(p_usart, c)!=0);
  402f98:	bf00      	nop
  402f9a:	78fb      	ldrb	r3, [r7, #3]
  402f9c:	6878      	ldr	r0, [r7, #4]
  402f9e:	4619      	mov	r1, r3
  402fa0:	4b0b      	ldr	r3, [pc, #44]	; (402fd0 <usart_serial_putchar+0x100>)
  402fa2:	4798      	blx	r3
  402fa4:	4603      	mov	r3, r0
  402fa6:	2b00      	cmp	r3, #0
  402fa8:	d1f7      	bne.n	402f9a <usart_serial_putchar+0xca>
		return 1;
  402faa:	2301      	movs	r3, #1
  402fac:	e000      	b.n	402fb0 <usart_serial_putchar+0xe0>
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
  402fae:	2300      	movs	r3, #0
}
  402fb0:	4618      	mov	r0, r3
  402fb2:	3708      	adds	r7, #8
  402fb4:	46bd      	mov	sp, r7
  402fb6:	bd80      	pop	{r7, pc}
  402fb8:	400e0800 	.word	0x400e0800
  402fbc:	0040196d 	.word	0x0040196d
  402fc0:	400e0a00 	.word	0x400e0a00
  402fc4:	400e1a00 	.word	0x400e1a00
  402fc8:	400e1c00 	.word	0x400e1c00
  402fcc:	40024000 	.word	0x40024000
  402fd0:	00401c89 	.word	0x00401c89
  402fd4:	40028000 	.word	0x40028000
  402fd8:	4002c000 	.word	0x4002c000

00402fdc <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  402fdc:	b580      	push	{r7, lr}
  402fde:	b084      	sub	sp, #16
  402fe0:	af00      	add	r7, sp, #0
  402fe2:	6078      	str	r0, [r7, #4]
  402fe4:	6039      	str	r1, [r7, #0]
	uint32_t val = 0;
  402fe6:	2300      	movs	r3, #0
  402fe8:	60fb      	str	r3, [r7, #12]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  402fea:	687b      	ldr	r3, [r7, #4]
  402fec:	4a33      	ldr	r2, [pc, #204]	; (4030bc <usart_serial_getchar+0xe0>)
  402fee:	4293      	cmp	r3, r2
  402ff0:	d107      	bne.n	403002 <usart_serial_getchar+0x26>
		while (uart_read((Uart*)p_usart, data));
  402ff2:	bf00      	nop
  402ff4:	6878      	ldr	r0, [r7, #4]
  402ff6:	6839      	ldr	r1, [r7, #0]
  402ff8:	4b31      	ldr	r3, [pc, #196]	; (4030c0 <usart_serial_getchar+0xe4>)
  402ffa:	4798      	blx	r3
  402ffc:	4603      	mov	r3, r0
  402ffe:	2b00      	cmp	r3, #0
  403000:	d1f8      	bne.n	402ff4 <usart_serial_getchar+0x18>
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  403002:	687b      	ldr	r3, [r7, #4]
  403004:	4a2f      	ldr	r2, [pc, #188]	; (4030c4 <usart_serial_getchar+0xe8>)
  403006:	4293      	cmp	r3, r2
  403008:	d107      	bne.n	40301a <usart_serial_getchar+0x3e>
		while (uart_read((Uart*)p_usart, data));
  40300a:	bf00      	nop
  40300c:	6878      	ldr	r0, [r7, #4]
  40300e:	6839      	ldr	r1, [r7, #0]
  403010:	4b2b      	ldr	r3, [pc, #172]	; (4030c0 <usart_serial_getchar+0xe4>)
  403012:	4798      	blx	r3
  403014:	4603      	mov	r3, r0
  403016:	2b00      	cmp	r3, #0
  403018:	d1f8      	bne.n	40300c <usart_serial_getchar+0x30>
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  40301a:	687b      	ldr	r3, [r7, #4]
  40301c:	4a2a      	ldr	r2, [pc, #168]	; (4030c8 <usart_serial_getchar+0xec>)
  40301e:	4293      	cmp	r3, r2
  403020:	d107      	bne.n	403032 <usart_serial_getchar+0x56>
		while (uart_read((Uart*)p_usart, data));
  403022:	bf00      	nop
  403024:	6878      	ldr	r0, [r7, #4]
  403026:	6839      	ldr	r1, [r7, #0]
  403028:	4b25      	ldr	r3, [pc, #148]	; (4030c0 <usart_serial_getchar+0xe4>)
  40302a:	4798      	blx	r3
  40302c:	4603      	mov	r3, r0
  40302e:	2b00      	cmp	r3, #0
  403030:	d1f8      	bne.n	403024 <usart_serial_getchar+0x48>
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  403032:	687b      	ldr	r3, [r7, #4]
  403034:	4a25      	ldr	r2, [pc, #148]	; (4030cc <usart_serial_getchar+0xf0>)
  403036:	4293      	cmp	r3, r2
  403038:	d107      	bne.n	40304a <usart_serial_getchar+0x6e>
		while (uart_read((Uart*)p_usart, data));
  40303a:	bf00      	nop
  40303c:	6878      	ldr	r0, [r7, #4]
  40303e:	6839      	ldr	r1, [r7, #0]
  403040:	4b1f      	ldr	r3, [pc, #124]	; (4030c0 <usart_serial_getchar+0xe4>)
  403042:	4798      	blx	r3
  403044:	4603      	mov	r3, r0
  403046:	2b00      	cmp	r3, #0
  403048:	d1f8      	bne.n	40303c <usart_serial_getchar+0x60>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  40304a:	687b      	ldr	r3, [r7, #4]
  40304c:	4a20      	ldr	r2, [pc, #128]	; (4030d0 <usart_serial_getchar+0xf4>)
  40304e:	4293      	cmp	r3, r2
  403050:	d10d      	bne.n	40306e <usart_serial_getchar+0x92>
		while (usart_read(p_usart, &val));
  403052:	bf00      	nop
  403054:	f107 030c 	add.w	r3, r7, #12
  403058:	6878      	ldr	r0, [r7, #4]
  40305a:	4619      	mov	r1, r3
  40305c:	4b1d      	ldr	r3, [pc, #116]	; (4030d4 <usart_serial_getchar+0xf8>)
  40305e:	4798      	blx	r3
  403060:	4603      	mov	r3, r0
  403062:	2b00      	cmp	r3, #0
  403064:	d1f6      	bne.n	403054 <usart_serial_getchar+0x78>
		*data = (uint8_t)(val & 0xFF);
  403066:	68fb      	ldr	r3, [r7, #12]
  403068:	b2da      	uxtb	r2, r3
  40306a:	683b      	ldr	r3, [r7, #0]
  40306c:	701a      	strb	r2, [r3, #0]
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  40306e:	687b      	ldr	r3, [r7, #4]
  403070:	4a19      	ldr	r2, [pc, #100]	; (4030d8 <usart_serial_getchar+0xfc>)
  403072:	4293      	cmp	r3, r2
  403074:	d10d      	bne.n	403092 <usart_serial_getchar+0xb6>
		while (usart_read(p_usart, &val));
  403076:	bf00      	nop
  403078:	f107 030c 	add.w	r3, r7, #12
  40307c:	6878      	ldr	r0, [r7, #4]
  40307e:	4619      	mov	r1, r3
  403080:	4b14      	ldr	r3, [pc, #80]	; (4030d4 <usart_serial_getchar+0xf8>)
  403082:	4798      	blx	r3
  403084:	4603      	mov	r3, r0
  403086:	2b00      	cmp	r3, #0
  403088:	d1f6      	bne.n	403078 <usart_serial_getchar+0x9c>
		*data = (uint8_t)(val & 0xFF);
  40308a:	68fb      	ldr	r3, [r7, #12]
  40308c:	b2da      	uxtb	r2, r3
  40308e:	683b      	ldr	r3, [r7, #0]
  403090:	701a      	strb	r2, [r3, #0]
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  403092:	687b      	ldr	r3, [r7, #4]
  403094:	4a11      	ldr	r2, [pc, #68]	; (4030dc <usart_serial_getchar+0x100>)
  403096:	4293      	cmp	r3, r2
  403098:	d10d      	bne.n	4030b6 <usart_serial_getchar+0xda>
		while (usart_read(p_usart, &val));
  40309a:	bf00      	nop
  40309c:	f107 030c 	add.w	r3, r7, #12
  4030a0:	6878      	ldr	r0, [r7, #4]
  4030a2:	4619      	mov	r1, r3
  4030a4:	4b0b      	ldr	r3, [pc, #44]	; (4030d4 <usart_serial_getchar+0xf8>)
  4030a6:	4798      	blx	r3
  4030a8:	4603      	mov	r3, r0
  4030aa:	2b00      	cmp	r3, #0
  4030ac:	d1f6      	bne.n	40309c <usart_serial_getchar+0xc0>
		*data = (uint8_t)(val & 0xFF);
  4030ae:	68fb      	ldr	r3, [r7, #12]
  4030b0:	b2da      	uxtb	r2, r3
  4030b2:	683b      	ldr	r3, [r7, #0]
  4030b4:	701a      	strb	r2, [r3, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  4030b6:	3710      	adds	r7, #16
  4030b8:	46bd      	mov	sp, r7
  4030ba:	bd80      	pop	{r7, pc}
  4030bc:	400e0800 	.word	0x400e0800
  4030c0:	0040199d 	.word	0x0040199d
  4030c4:	400e0a00 	.word	0x400e0a00
  4030c8:	400e1a00 	.word	0x400e1a00
  4030cc:	400e1c00 	.word	0x400e1c00
  4030d0:	40024000 	.word	0x40024000
  4030d4:	00401cbd 	.word	0x00401cbd
  4030d8:	40028000 	.word	0x40028000
  4030dc:	4002c000 	.word	0x4002c000

004030e0 <stdio_serial_init>:
 * \param usart       Base address of the USART instance.
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
  4030e0:	b580      	push	{r7, lr}
  4030e2:	b082      	sub	sp, #8
  4030e4:	af00      	add	r7, sp, #0
  4030e6:	6078      	str	r0, [r7, #4]
  4030e8:	6039      	str	r1, [r7, #0]
	stdio_base = (void *)usart;
  4030ea:	4a0f      	ldr	r2, [pc, #60]	; (403128 <stdio_serial_init+0x48>)
  4030ec:	687b      	ldr	r3, [r7, #4]
  4030ee:	6013      	str	r3, [r2, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  4030f0:	4b0e      	ldr	r3, [pc, #56]	; (40312c <stdio_serial_init+0x4c>)
  4030f2:	4a0f      	ldr	r2, [pc, #60]	; (403130 <stdio_serial_init+0x50>)
  4030f4:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  4030f6:	4b0f      	ldr	r3, [pc, #60]	; (403134 <stdio_serial_init+0x54>)
  4030f8:	4a0f      	ldr	r2, [pc, #60]	; (403138 <stdio_serial_init+0x58>)
  4030fa:	601a      	str	r2, [r3, #0]
# if (XMEGA || MEGA_RF)
	usart_serial_init((USART_t *)usart,opt);
# elif UC3
	usart_serial_init(usart,(usart_serial_options_t *)opt);
# elif SAM
	usart_serial_init((Usart *)usart,(usart_serial_options_t *)opt);
  4030fc:	6878      	ldr	r0, [r7, #4]
  4030fe:	6839      	ldr	r1, [r7, #0]
  403100:	4b0e      	ldr	r3, [pc, #56]	; (40313c <stdio_serial_init+0x5c>)
  403102:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  403104:	4b0e      	ldr	r3, [pc, #56]	; (403140 <stdio_serial_init+0x60>)
  403106:	681b      	ldr	r3, [r3, #0]
  403108:	689b      	ldr	r3, [r3, #8]
  40310a:	4618      	mov	r0, r3
  40310c:	2100      	movs	r1, #0
  40310e:	4b0d      	ldr	r3, [pc, #52]	; (403144 <stdio_serial_init+0x64>)
  403110:	4798      	blx	r3
	setbuf(stdin, NULL);
  403112:	4b0b      	ldr	r3, [pc, #44]	; (403140 <stdio_serial_init+0x60>)
  403114:	681b      	ldr	r3, [r3, #0]
  403116:	685b      	ldr	r3, [r3, #4]
  403118:	4618      	mov	r0, r3
  40311a:	2100      	movs	r1, #0
  40311c:	4b09      	ldr	r3, [pc, #36]	; (403144 <stdio_serial_init+0x64>)
  40311e:	4798      	blx	r3
	// and AVR GCC library:
	// - printf() emits one character at a time.
	// - getchar() requests only 1 byte to exit.
#  endif
# endif
}
  403120:	3708      	adds	r7, #8
  403122:	46bd      	mov	sp, r7
  403124:	bd80      	pop	{r7, pc}
  403126:	bf00      	nop
  403128:	20400a00 	.word	0x20400a00
  40312c:	204009fc 	.word	0x204009fc
  403130:	00402ed1 	.word	0x00402ed1
  403134:	204009f8 	.word	0x204009f8
  403138:	00402fdd 	.word	0x00402fdd
  40313c:	00402d71 	.word	0x00402d71
  403140:	204004b0 	.word	0x204004b0
  403144:	00403c49 	.word	0x00403c49

00403148 <mdelay>:
 * by the SAM microcontroller system tick).
 *
 * \param ul_dly_ticks  Delay to wait for, in milliseconds.
 */
void mdelay(uint32_t ul_dly_ticks)
{
  403148:	b480      	push	{r7}
  40314a:	b085      	sub	sp, #20
  40314c:	af00      	add	r7, sp, #0
  40314e:	6078      	str	r0, [r7, #4]
	uint32_t ul_cur_ticks;

	ul_cur_ticks = ul_ms_ticks;
  403150:	4b07      	ldr	r3, [pc, #28]	; (403170 <mdelay+0x28>)
  403152:	681b      	ldr	r3, [r3, #0]
  403154:	60fb      	str	r3, [r7, #12]
	while ((ul_ms_ticks - ul_cur_ticks) < ul_dly_ticks) {
  403156:	bf00      	nop
  403158:	4b05      	ldr	r3, [pc, #20]	; (403170 <mdelay+0x28>)
  40315a:	681a      	ldr	r2, [r3, #0]
  40315c:	68fb      	ldr	r3, [r7, #12]
  40315e:	1ad2      	subs	r2, r2, r3
  403160:	687b      	ldr	r3, [r7, #4]
  403162:	429a      	cmp	r2, r3
  403164:	d3f8      	bcc.n	403158 <mdelay+0x10>
	}
}
  403166:	3714      	adds	r7, #20
  403168:	46bd      	mov	sp, r7
  40316a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40316e:	4770      	bx	lr
  403170:	20400998 	.word	0x20400998

00403174 <SysTick_Handler>:
 *
 *  Process System Tick Event.
 *  Increment the ul_ms_ticks counter.
 */
void SysTick_Handler(void)
{
  403174:	b480      	push	{r7}
  403176:	af00      	add	r7, sp, #0
	g_ul_tick_count++;
  403178:	4b06      	ldr	r3, [pc, #24]	; (403194 <SysTick_Handler+0x20>)
  40317a:	681b      	ldr	r3, [r3, #0]
  40317c:	3301      	adds	r3, #1
  40317e:	4a05      	ldr	r2, [pc, #20]	; (403194 <SysTick_Handler+0x20>)
  403180:	6013      	str	r3, [r2, #0]
	ul_ms_ticks++; //jsi 6feb16
  403182:	4b05      	ldr	r3, [pc, #20]	; (403198 <SysTick_Handler+0x24>)
  403184:	681b      	ldr	r3, [r3, #0]
  403186:	3301      	adds	r3, #1
  403188:	4a03      	ldr	r2, [pc, #12]	; (403198 <SysTick_Handler+0x24>)
  40318a:	6013      	str	r3, [r2, #0]
}
  40318c:	46bd      	mov	sp, r7
  40318e:	f85d 7b04 	ldr.w	r7, [sp], #4
  403192:	4770      	bx	lr
  403194:	20400ab0 	.word	0x20400ab0
  403198:	20400998 	.word	0x20400998

0040319c <USART0_Handler>:
/**
 *  \brief Handler for USART interrupt.
 *
 */
void USART_Handler(void)
{
  40319c:	b580      	push	{r7, lr}
  40319e:	b082      	sub	sp, #8
  4031a0:	af00      	add	r7, sp, #0
	uint32_t ul_status;
	uint8_t uc_char;

	/* Read USART status. */
	ul_status = usart_get_status(BOARD_USART);
  4031a2:	481b      	ldr	r0, [pc, #108]	; (403210 <USART0_Handler+0x74>)
  4031a4:	4b1b      	ldr	r3, [pc, #108]	; (403214 <USART0_Handler+0x78>)
  4031a6:	4798      	blx	r3
  4031a8:	6078      	str	r0, [r7, #4]

	/*transmit interrupt rises*/
	if(ul_status & (US_IER_TXRDY | US_IER_TXEMPTY)) {
  4031aa:	687a      	ldr	r2, [r7, #4]
  4031ac:	f240 2302 	movw	r3, #514	; 0x202
  4031b0:	4013      	ands	r3, r2
  4031b2:	2b00      	cmp	r3, #0
  4031b4:	d004      	beq.n	4031c0 <USART0_Handler+0x24>
		usart_disable_interrupt(BOARD_USART, (US_IER_TXRDY | US_IER_TXEMPTY));
  4031b6:	4816      	ldr	r0, [pc, #88]	; (403210 <USART0_Handler+0x74>)
  4031b8:	f240 2102 	movw	r1, #514	; 0x202
  4031bc:	4b16      	ldr	r3, [pc, #88]	; (403218 <USART0_Handler+0x7c>)
  4031be:	4798      	blx	r3
	}

	/*receive interrupt rise, store character to receiver buffer*/
	if((g_state == RECEIVING) && (usart_read(BOARD_USART, (uint32_t *)&uc_char) == 0)) {
  4031c0:	4b16      	ldr	r3, [pc, #88]	; (40321c <USART0_Handler+0x80>)
  4031c2:	781b      	ldrb	r3, [r3, #0]
  4031c4:	b2db      	uxtb	r3, r3
  4031c6:	2b02      	cmp	r3, #2
  4031c8:	d11f      	bne.n	40320a <USART0_Handler+0x6e>
  4031ca:	1cfb      	adds	r3, r7, #3
  4031cc:	4810      	ldr	r0, [pc, #64]	; (403210 <USART0_Handler+0x74>)
  4031ce:	4619      	mov	r1, r3
  4031d0:	4b13      	ldr	r3, [pc, #76]	; (403220 <USART0_Handler+0x84>)
  4031d2:	4798      	blx	r3
  4031d4:	4603      	mov	r3, r0
  4031d6:	2b00      	cmp	r3, #0
  4031d8:	d117      	bne.n	40320a <USART0_Handler+0x6e>
		*p_revdata++ = uc_char;
  4031da:	4b12      	ldr	r3, [pc, #72]	; (403224 <USART0_Handler+0x88>)
  4031dc:	681b      	ldr	r3, [r3, #0]
  4031de:	1c5a      	adds	r2, r3, #1
  4031e0:	4910      	ldr	r1, [pc, #64]	; (403224 <USART0_Handler+0x88>)
  4031e2:	600a      	str	r2, [r1, #0]
  4031e4:	78fa      	ldrb	r2, [r7, #3]
  4031e6:	701a      	strb	r2, [r3, #0]
		g_ulcount++;
  4031e8:	4b0f      	ldr	r3, [pc, #60]	; (403228 <USART0_Handler+0x8c>)
  4031ea:	681b      	ldr	r3, [r3, #0]
  4031ec:	3301      	adds	r3, #1
  4031ee:	4a0e      	ldr	r2, [pc, #56]	; (403228 <USART0_Handler+0x8c>)
  4031f0:	6013      	str	r3, [r2, #0]
		if(g_ulcount >= BUFFER_SIZE) {
  4031f2:	4b0d      	ldr	r3, [pc, #52]	; (403228 <USART0_Handler+0x8c>)
  4031f4:	681b      	ldr	r3, [r3, #0]
  4031f6:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
  4031fa:	d306      	bcc.n	40320a <USART0_Handler+0x6e>
			g_state = RECEIVED;
  4031fc:	4b07      	ldr	r3, [pc, #28]	; (40321c <USART0_Handler+0x80>)
  4031fe:	2203      	movs	r2, #3
  403200:	701a      	strb	r2, [r3, #0]
			usart_disable_interrupt(BOARD_USART, US_IER_RXRDY);
  403202:	4803      	ldr	r0, [pc, #12]	; (403210 <USART0_Handler+0x74>)
  403204:	2101      	movs	r1, #1
  403206:	4b04      	ldr	r3, [pc, #16]	; (403218 <USART0_Handler+0x7c>)
  403208:	4798      	blx	r3
		}
	}
}
  40320a:	3708      	adds	r7, #8
  40320c:	46bd      	mov	sp, r7
  40320e:	bd80      	pop	{r7, pc}
  403210:	40024000 	.word	0x40024000
  403214:	00401be9 	.word	0x00401be9
  403218:	00401bcd 	.word	0x00401bcd
  40321c:	20400990 	.word	0x20400990
  403220:	00401cbd 	.word	0x00401cbd
  403224:	20400008 	.word	0x20400008
  403228:	20400994 	.word	0x20400994

0040322c <configure_usart>:
 *
 *  Configure USART in RS485 mode, asynchronous, 8 bits, 1 stop bit,
 *  no parity, 256000 bauds and enable its transmitter and receiver.
 */
static void configure_usart(void)
{
  40322c:	b5b0      	push	{r4, r5, r7, lr}
  40322e:	b086      	sub	sp, #24
  403230:	af00      	add	r7, sp, #0
	const sam_usart_opt_t usart_console_settings = {
  403232:	4b14      	ldr	r3, [pc, #80]	; (403284 <configure_usart+0x58>)
  403234:	463c      	mov	r4, r7
  403236:	461d      	mov	r5, r3
  403238:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  40323a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  40323c:	e895 0003 	ldmia.w	r5, {r0, r1}
  403240:	e884 0003 	stmia.w	r4, {r0, r1}
		/* This field is only used in IrDA mode. */
		0
	};

	/* Enable the peripheral clock in the PMC. */
	sysclk_enable_peripheral_clock(BOARD_ID_USART);
  403244:	200d      	movs	r0, #13
  403246:	4b10      	ldr	r3, [pc, #64]	; (403288 <configure_usart+0x5c>)
  403248:	4798      	blx	r3

	/* Configure USART in RS485 mode. */
//jsi 7feb16 we want rs232 not rs485 for our application	usart_init_rs485(BOARD_USART, &usart_console_settings,
//jsi 7feb16 we want rs232 not rs485 for our application			sysclk_get_cpu_hz());
			
	usart_init_rs232(BOARD_USART, &usart_console_settings, sysclk_get_cpu_hz());
  40324a:	4b10      	ldr	r3, [pc, #64]	; (40328c <configure_usart+0x60>)
  40324c:	4798      	blx	r3
  40324e:	4602      	mov	r2, r0
  403250:	463b      	mov	r3, r7
  403252:	480f      	ldr	r0, [pc, #60]	; (403290 <configure_usart+0x64>)
  403254:	4619      	mov	r1, r3
  403256:	4b0f      	ldr	r3, [pc, #60]	; (403294 <configure_usart+0x68>)
  403258:	4798      	blx	r3

	/* enable transmitter timeguard, 4 bit period delay. */
	usart_set_tx_timeguard(BOARD_USART, 4);
  40325a:	480d      	ldr	r0, [pc, #52]	; (403290 <configure_usart+0x64>)
  40325c:	2104      	movs	r1, #4
  40325e:	4b0e      	ldr	r3, [pc, #56]	; (403298 <configure_usart+0x6c>)
  403260:	4798      	blx	r3

	/* Disable all the interrupts. */
	usart_disable_interrupt(BOARD_USART, ALL_INTERRUPT_MASK);
  403262:	480b      	ldr	r0, [pc, #44]	; (403290 <configure_usart+0x64>)
  403264:	f04f 31ff 	mov.w	r1, #4294967295
  403268:	4b0c      	ldr	r3, [pc, #48]	; (40329c <configure_usart+0x70>)
  40326a:	4798      	blx	r3

	/* Enable TX & RX function. */
	usart_enable_tx(BOARD_USART);
  40326c:	4808      	ldr	r0, [pc, #32]	; (403290 <configure_usart+0x64>)
  40326e:	4b0c      	ldr	r3, [pc, #48]	; (4032a0 <configure_usart+0x74>)
  403270:	4798      	blx	r3
	usart_enable_rx(BOARD_USART);
  403272:	4807      	ldr	r0, [pc, #28]	; (403290 <configure_usart+0x64>)
  403274:	4b0b      	ldr	r3, [pc, #44]	; (4032a4 <configure_usart+0x78>)
  403276:	4798      	blx	r3

	/* Configure and enable interrupt of USART. */
	NVIC_EnableIRQ(USART_IRQn);
  403278:	200d      	movs	r0, #13
  40327a:	4b0b      	ldr	r3, [pc, #44]	; (4032a8 <configure_usart+0x7c>)
  40327c:	4798      	blx	r3
}
  40327e:	3718      	adds	r7, #24
  403280:	46bd      	mov	sp, r7
  403282:	bdb0      	pop	{r4, r5, r7, pc}
  403284:	00409320 	.word	0x00409320
  403288:	00402bf9 	.word	0x00402bf9
  40328c:	00402bd1 	.word	0x00402bd1
  403290:	40024000 	.word	0x40024000
  403294:	00401ab1 	.word	0x00401ab1
  403298:	00401b65 	.word	0x00401b65
  40329c:	00401bcd 	.word	0x00401bcd
  4032a0:	00401b35 	.word	0x00401b35
  4032a4:	00401b81 	.word	0x00401b81
  4032a8:	00402935 	.word	0x00402935

004032ac <configure_systick>:

/**
 *  Configure system tick to generate an interrupt every 1us. Note that this was 1ms in the example code. jsi 11feb16
 */
static void configure_systick(void)
{
  4032ac:	b580      	push	{r7, lr}
  4032ae:	b082      	sub	sp, #8
  4032b0:	af00      	add	r7, sp, #0
	uint32_t ul_flag;

	ul_flag = SysTick_Config(sysclk_get_cpu_hz()/SYS_TICK_FREQ);
  4032b2:	4b0a      	ldr	r3, [pc, #40]	; (4032dc <configure_systick+0x30>)
  4032b4:	4798      	blx	r3
  4032b6:	4602      	mov	r2, r0
  4032b8:	4b09      	ldr	r3, [pc, #36]	; (4032e0 <configure_systick+0x34>)
  4032ba:	fba3 2302 	umull	r2, r3, r3, r2
  4032be:	099b      	lsrs	r3, r3, #6
  4032c0:	4618      	mov	r0, r3
  4032c2:	4b08      	ldr	r3, [pc, #32]	; (4032e4 <configure_systick+0x38>)
  4032c4:	4798      	blx	r3
  4032c6:	6078      	str	r0, [r7, #4]
	if (ul_flag) {
  4032c8:	687b      	ldr	r3, [r7, #4]
  4032ca:	2b00      	cmp	r3, #0
  4032cc:	d003      	beq.n	4032d6 <configure_systick+0x2a>
		puts("-F- Systick configuration error\r");
  4032ce:	4806      	ldr	r0, [pc, #24]	; (4032e8 <configure_systick+0x3c>)
  4032d0:	4b06      	ldr	r3, [pc, #24]	; (4032ec <configure_systick+0x40>)
  4032d2:	4798      	blx	r3
		while (1) {
		}
  4032d4:	e7fe      	b.n	4032d4 <configure_systick+0x28>
	}
}
  4032d6:	3708      	adds	r7, #8
  4032d8:	46bd      	mov	sp, r7
  4032da:	bd80      	pop	{r7, pc}
  4032dc:	00402bd1 	.word	0x00402bd1
  4032e0:	10624dd3 	.word	0x10624dd3
  4032e4:	004029b9 	.word	0x004029b9
  4032e8:	00409338 	.word	0x00409338
  4032ec:	00403c39 	.word	0x00403c39

004032f0 <configure_console>:

/**
 *  Configure UART for debug message output.
 */
static void configure_console(void)
{
  4032f0:	b590      	push	{r4, r7, lr}
  4032f2:	b085      	sub	sp, #20
  4032f4:	af00      	add	r7, sp, #0
	const usart_serial_options_t uart_serial_options = {
  4032f6:	4b08      	ldr	r3, [pc, #32]	; (403318 <configure_console+0x28>)
  4032f8:	463c      	mov	r4, r7
  4032fa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  4032fc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		.stopbits = CONF_UART_STOP_BITS,
#endif
	};

	/* Configure console UART. */
	sysclk_enable_peripheral_clock(CONSOLE_UART_ID);
  403300:	2007      	movs	r0, #7
  403302:	4b06      	ldr	r3, [pc, #24]	; (40331c <configure_console+0x2c>)
  403304:	4798      	blx	r3
	stdio_serial_init(CONF_UART, &uart_serial_options);
  403306:	463b      	mov	r3, r7
  403308:	4805      	ldr	r0, [pc, #20]	; (403320 <configure_console+0x30>)
  40330a:	4619      	mov	r1, r3
  40330c:	4b05      	ldr	r3, [pc, #20]	; (403324 <configure_console+0x34>)
  40330e:	4798      	blx	r3
}
  403310:	3714      	adds	r7, #20
  403312:	46bd      	mov	sp, r7
  403314:	bd90      	pop	{r4, r7, pc}
  403316:	bf00      	nop
  403318:	0040935c 	.word	0x0040935c
  40331c:	00402bf9 	.word	0x00402bf9
  403320:	400e0800 	.word	0x400e0800
  403324:	004030e1 	.word	0x004030e1

00403328 <func_transmit>:
* \param *p_buff  data to be transmitted
* \param ulsize size of all data.
*
*/
uint8_t func_transmit(const uint8_t *p_buff, uint32_t ulsize)
{
  403328:	b580      	push	{r7, lr}
  40332a:	b082      	sub	sp, #8
  40332c:	af00      	add	r7, sp, #0
  40332e:	6078      	str	r0, [r7, #4]
  403330:	6039      	str	r1, [r7, #0]
	Assert(p_buff);

	while(ulsize > 0) {
  403332:	e013      	b.n	40335c <func_transmit+0x34>
		if(0 == usart_write(BOARD_USART, *p_buff)){
  403334:	687b      	ldr	r3, [r7, #4]
  403336:	781b      	ldrb	r3, [r3, #0]
  403338:	4810      	ldr	r0, [pc, #64]	; (40337c <func_transmit+0x54>)
  40333a:	4619      	mov	r1, r3
  40333c:	4b10      	ldr	r3, [pc, #64]	; (403380 <func_transmit+0x58>)
  40333e:	4798      	blx	r3
  403340:	4603      	mov	r3, r0
  403342:	2b00      	cmp	r3, #0
  403344:	d10a      	bne.n	40335c <func_transmit+0x34>
			usart_enable_interrupt(BOARD_USART, US_IER_TXRDY | US_IER_TXEMPTY);
  403346:	480d      	ldr	r0, [pc, #52]	; (40337c <func_transmit+0x54>)
  403348:	f240 2102 	movw	r1, #514	; 0x202
  40334c:	4b0d      	ldr	r3, [pc, #52]	; (403384 <func_transmit+0x5c>)
  40334e:	4798      	blx	r3
			ulsize--;
  403350:	683b      	ldr	r3, [r7, #0]
  403352:	3b01      	subs	r3, #1
  403354:	603b      	str	r3, [r7, #0]
			p_buff++;
  403356:	687b      	ldr	r3, [r7, #4]
  403358:	3301      	adds	r3, #1
  40335a:	607b      	str	r3, [r7, #4]
*/
uint8_t func_transmit(const uint8_t *p_buff, uint32_t ulsize)
{
	Assert(p_buff);

	while(ulsize > 0) {
  40335c:	683b      	ldr	r3, [r7, #0]
  40335e:	2b00      	cmp	r3, #0
  403360:	d1e8      	bne.n	403334 <func_transmit+0xc>
			ulsize--;
			p_buff++;
		}
	}

	while(!usart_is_tx_empty(BOARD_USART)) {
  403362:	bf00      	nop
  403364:	4805      	ldr	r0, [pc, #20]	; (40337c <func_transmit+0x54>)
  403366:	4b08      	ldr	r3, [pc, #32]	; (403388 <func_transmit+0x60>)
  403368:	4798      	blx	r3
  40336a:	4603      	mov	r3, r0
  40336c:	2b00      	cmp	r3, #0
  40336e:	d0f9      	beq.n	403364 <func_transmit+0x3c>
		;  /*waiting for transmit over*/
	}

	return 0;
  403370:	2300      	movs	r3, #0
}
  403372:	4618      	mov	r0, r3
  403374:	3708      	adds	r7, #8
  403376:	46bd      	mov	sp, r7
  403378:	bd80      	pop	{r7, pc}
  40337a:	bf00      	nop
  40337c:	40024000 	.word	0x40024000
  403380:	00401c89 	.word	0x00401c89
  403384:	00401bb1 	.word	0x00401bb1
  403388:	00401c39 	.word	0x00401c39

0040338c <twi_init>:
	}
}

static void twi_init(void);
static void twi_init(void)
{
  40338c:	b580      	push	{r7, lr}
  40338e:	b084      	sub	sp, #16
  403390:	af00      	add	r7, sp, #0
	twihs_options_t opt;

	/* Enable the peripheral clock for TWI */
	pmc_enable_periph_clk(ID_TWIHS0);
  403392:	2013      	movs	r0, #19
  403394:	4b09      	ldr	r3, [pc, #36]	; (4033bc <twi_init+0x30>)
  403396:	4798      	blx	r3

	/* Configure the options of TWI driver */
	opt.master_clk = sysclk_get_cpu_hz();
  403398:	4b09      	ldr	r3, [pc, #36]	; (4033c0 <twi_init+0x34>)
  40339a:	4798      	blx	r3
  40339c:	4603      	mov	r3, r0
  40339e:	607b      	str	r3, [r7, #4]
	opt.speed      = TWIHS_CLK; //400KHz
  4033a0:	4b08      	ldr	r3, [pc, #32]	; (4033c4 <twi_init+0x38>)
  4033a2:	60bb      	str	r3, [r7, #8]

	if (twihs_master_init(TWIHS0, &opt) != TWIHS_SUCCESS) {
  4033a4:	1d3b      	adds	r3, r7, #4
  4033a6:	4808      	ldr	r0, [pc, #32]	; (4033c8 <twi_init+0x3c>)
  4033a8:	4619      	mov	r1, r3
  4033aa:	4b08      	ldr	r3, [pc, #32]	; (4033cc <twi_init+0x40>)
  4033ac:	4798      	blx	r3
  4033ae:	4603      	mov	r3, r0
  4033b0:	2b00      	cmp	r3, #0
  4033b2:	d000      	beq.n	4033b6 <twi_init+0x2a>
		while (1) {
			/* Capture error */
		}
  4033b4:	e7fe      	b.n	4033b4 <twi_init+0x28>
	}
}
  4033b6:	3710      	adds	r7, #16
  4033b8:	46bd      	mov	sp, r7
  4033ba:	bd80      	pop	{r7, pc}
  4033bc:	00401569 	.word	0x00401569
  4033c0:	00402bd1 	.word	0x00402bd1
  4033c4:	00061a80 	.word	0x00061a80
  4033c8:	40018000 	.word	0x40018000
  4033cc:	00401611 	.word	0x00401611

004033d0 <afec0_data_ready>:

uint32_t g_afec0_sample_data;
uint32_t g_afec1_sample_data;

static void afec0_data_ready(void)
{
  4033d0:	b580      	push	{r7, lr}
  4033d2:	af00      	add	r7, sp, #0
	g_afec0_sample_data = afec_get_latest_value(AFEC0);
  4033d4:	4803      	ldr	r0, [pc, #12]	; (4033e4 <afec0_data_ready+0x14>)
  4033d6:	4b04      	ldr	r3, [pc, #16]	; (4033e8 <afec0_data_ready+0x18>)
  4033d8:	4798      	blx	r3
  4033da:	4602      	mov	r2, r0
  4033dc:	4b03      	ldr	r3, [pc, #12]	; (4033ec <afec0_data_ready+0x1c>)
  4033de:	601a      	str	r2, [r3, #0]
}
  4033e0:	bd80      	pop	{r7, pc}
  4033e2:	bf00      	nop
  4033e4:	4003c000 	.word	0x4003c000
  4033e8:	00402b05 	.word	0x00402b05
  4033ec:	2040128c 	.word	0x2040128c

004033f0 <afec1_data_ready>:

static void afec1_data_ready(void)
{
  4033f0:	b580      	push	{r7, lr}
  4033f2:	af00      	add	r7, sp, #0
	g_afec1_sample_data = afec_get_latest_value(AFEC1);
  4033f4:	4803      	ldr	r0, [pc, #12]	; (403404 <afec1_data_ready+0x14>)
  4033f6:	4b04      	ldr	r3, [pc, #16]	; (403408 <afec1_data_ready+0x18>)
  4033f8:	4798      	blx	r3
  4033fa:	4602      	mov	r2, r0
  4033fc:	4b03      	ldr	r3, [pc, #12]	; (40340c <afec1_data_ready+0x1c>)
  4033fe:	601a      	str	r2, [r3, #0]
}
  403400:	bd80      	pop	{r7, pc}
  403402:	bf00      	nop
  403404:	40064000 	.word	0x40064000
  403408:	00402b05 	.word	0x00402b05
  40340c:	20400aac 	.word	0x20400aac

00403410 <init_adc>:
{
	afec_end_conversion(3);
}

void init_adc(void)
{
  403410:	b590      	push	{r4, r7, lr}
  403412:	b089      	sub	sp, #36	; 0x24
  403414:	af00      	add	r7, sp, #0
	afec_channel_enable(AFEC0, AFEC_CHANNEL_0);
	afec_channel_enable(AFEC0, AFEC_CHANNEL_4);
	afec_channel_enable(AFEC0, AFEC_CHANNEL_5);
#endif	
	
	afec_enable(AFEC0);
  403416:	4825      	ldr	r0, [pc, #148]	; (4034ac <init_adc+0x9c>)
  403418:	4b25      	ldr	r3, [pc, #148]	; (4034b0 <init_adc+0xa0>)
  40341a:	4798      	blx	r3
	afec_enable(AFEC1);
  40341c:	4825      	ldr	r0, [pc, #148]	; (4034b4 <init_adc+0xa4>)
  40341e:	4b24      	ldr	r3, [pc, #144]	; (4034b0 <init_adc+0xa0>)
  403420:	4798      	blx	r3

	afec_cfg.resolution = AFEC_16_BITS;
  403422:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
  403426:	60bb      	str	r3, [r7, #8]
	afec_init(AFEC0, &afec_cfg);
  403428:	f107 0308 	add.w	r3, r7, #8
  40342c:	481f      	ldr	r0, [pc, #124]	; (4034ac <init_adc+0x9c>)
  40342e:	4619      	mov	r1, r3
  403430:	4b21      	ldr	r3, [pc, #132]	; (4034b8 <init_adc+0xa8>)
  403432:	4798      	blx	r3
	afec_init(AFEC1, &afec_cfg);
  403434:	f107 0308 	add.w	r3, r7, #8
  403438:	481e      	ldr	r0, [pc, #120]	; (4034b4 <init_adc+0xa4>)
  40343a:	4619      	mov	r1, r3
  40343c:	4b1e      	ldr	r3, [pc, #120]	; (4034b8 <init_adc+0xa8>)
  40343e:	4798      	blx	r3
	
	afec_ch_get_config_defaults(&afec_ch_cfg);
  403440:	1d3b      	adds	r3, r7, #4
  403442:	4618      	mov	r0, r3
  403444:	4b1d      	ldr	r3, [pc, #116]	; (4034bc <init_adc+0xac>)
  403446:	4798      	blx	r3
	afec_ch_cfg.gain = AFEC_GAINVALUE_3;
  403448:	2303      	movs	r3, #3
  40344a:	717b      	strb	r3, [r7, #5]
	
	afec_ch_set_config(AFEC1, AFEC_CHANNEL_9, &afec_ch_cfg);
  40344c:	1d3b      	adds	r3, r7, #4
  40344e:	4819      	ldr	r0, [pc, #100]	; (4034b4 <init_adc+0xa4>)
  403450:	2109      	movs	r1, #9
  403452:	461a      	mov	r2, r3
  403454:	4b1a      	ldr	r3, [pc, #104]	; (4034c0 <init_adc+0xb0>)
  403456:	4798      	blx	r3
	afec_ch_set_config(AFEC0, AFEC_CHANNEL_0, &afec_ch_cfg);
  403458:	1d3b      	adds	r3, r7, #4
  40345a:	4814      	ldr	r0, [pc, #80]	; (4034ac <init_adc+0x9c>)
  40345c:	2100      	movs	r1, #0
  40345e:	461a      	mov	r2, r3
  403460:	4b17      	ldr	r3, [pc, #92]	; (4034c0 <init_adc+0xb0>)
  403462:	4798      	blx	r3
	afec_ch_set_config(AFEC0, AFEC_CHANNEL_4, &afec_ch_cfg);
  403464:	1d3b      	adds	r3, r7, #4
  403466:	4811      	ldr	r0, [pc, #68]	; (4034ac <init_adc+0x9c>)
  403468:	2104      	movs	r1, #4
  40346a:	461a      	mov	r2, r3
  40346c:	4b14      	ldr	r3, [pc, #80]	; (4034c0 <init_adc+0xb0>)
  40346e:	4798      	blx	r3
	afec_ch_set_config(AFEC0, AFEC_CHANNEL_5, &afec_ch_cfg);
  403470:	1d3b      	adds	r3, r7, #4
  403472:	480e      	ldr	r0, [pc, #56]	; (4034ac <init_adc+0x9c>)
  403474:	2105      	movs	r1, #5
  403476:	461a      	mov	r2, r3
  403478:	4b11      	ldr	r3, [pc, #68]	; (4034c0 <init_adc+0xb0>)
  40347a:	4798      	blx	r3

	afec_set_trigger(AFEC0, AFEC_TRIG_SW);
  40347c:	480b      	ldr	r0, [pc, #44]	; (4034ac <init_adc+0x9c>)
  40347e:	2100      	movs	r1, #0
  403480:	4b10      	ldr	r3, [pc, #64]	; (4034c4 <init_adc+0xb4>)
  403482:	4798      	blx	r3
	afec_set_trigger(AFEC1, AFEC_TRIG_SW);
  403484:	480b      	ldr	r0, [pc, #44]	; (4034b4 <init_adc+0xa4>)
  403486:	2100      	movs	r1, #0
  403488:	4b0e      	ldr	r3, [pc, #56]	; (4034c4 <init_adc+0xb4>)
  40348a:	4798      	blx	r3

	afec_set_callback(AFEC0, AFEC_INTERRUPT_DATA_READY, afec0_data_ready, 1);
  40348c:	4807      	ldr	r0, [pc, #28]	; (4034ac <init_adc+0x9c>)
  40348e:	210c      	movs	r1, #12
  403490:	4a0d      	ldr	r2, [pc, #52]	; (4034c8 <init_adc+0xb8>)
  403492:	2301      	movs	r3, #1
  403494:	4c0d      	ldr	r4, [pc, #52]	; (4034cc <init_adc+0xbc>)
  403496:	47a0      	blx	r4
	afec_set_callback(AFEC1, AFEC_INTERRUPT_DATA_READY, afec1_data_ready, 1);
  403498:	4806      	ldr	r0, [pc, #24]	; (4034b4 <init_adc+0xa4>)
  40349a:	210c      	movs	r1, #12
  40349c:	4a0c      	ldr	r2, [pc, #48]	; (4034d0 <init_adc+0xc0>)
  40349e:	2301      	movs	r3, #1
  4034a0:	4c0a      	ldr	r4, [pc, #40]	; (4034cc <init_adc+0xbc>)
  4034a2:	47a0      	blx	r4
//	while((afec_get_interrupt_status(AFEC0) & AFEC_ISR_EOCAL) != AFEC_ISR_EOCAL);
	
//	afec_start_calibration(AFEC1);
//	while((afec_get_interrupt_status(AFEC1) & AFEC_ISR_EOCAL) != AFEC_ISR_EOCAL);
	
}
  4034a4:	3724      	adds	r7, #36	; 0x24
  4034a6:	46bd      	mov	sp, r7
  4034a8:	bd90      	pop	{r4, r7, pc}
  4034aa:	bf00      	nop
  4034ac:	4003c000 	.word	0x4003c000
  4034b0:	00401129 	.word	0x00401129
  4034b4:	40064000 	.word	0x40064000
  4034b8:	00400ea5 	.word	0x00400ea5
  4034bc:	00400e85 	.word	0x00400e85
  4034c0:	00400df5 	.word	0x00400df5
  4034c4:	00402a19 	.word	0x00402a19
  4034c8:	004033d1 	.word	0x004033d1
  4034cc:	00400f1d 	.word	0x00400f1d
  4034d0:	004033f1 	.word	0x004033f1

004034d4 <main>:
 */

#  define EXAMPLE_LED_GPIO    LED0_GPIO

int main(void) //6feb16 this version of main has been hacked up for only exactly what we need
{
  4034d4:	b5f0      	push	{r4, r5, r6, r7, lr}
  4034d6:	b0a3      	sub	sp, #140	; 0x8c
  4034d8:	af06      	add	r7, sp, #24
	char		txBuf[11] = {0,0,0,0,0,0,0,0,0,0,0}, rxByte;
  4034da:	2300      	movs	r3, #0
  4034dc:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  4034e0:	2300      	movs	r3, #0
  4034e2:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
  4034e6:	2300      	movs	r3, #0
  4034e8:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
  4034ec:	2300      	movs	r3, #0
  4034ee:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  4034f2:	2300      	movs	r3, #0
  4034f4:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  4034f8:	2300      	movs	r3, #0
  4034fa:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
  4034fe:	2300      	movs	r3, #0
  403500:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  403504:	2300      	movs	r3, #0
  403506:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  40350a:	2300      	movs	r3, #0
  40350c:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  403510:	2300      	movs	r3, #0
  403512:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
  403516:	2300      	movs	r3, #0
  403518:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
	uint32_t	i;	
	uint32_t	time_elapsed = 0;
  40351c:	2300      	movs	r3, #0
  40351e:	65fb      	str	r3, [r7, #92]	; 0x5c
	uint32_t	ul_i;
	uint8_t		displayState = 0;
  403520:	2300      	movs	r3, #0
  403522:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
	uint8_t		charCount = 0;
  403526:	2300      	movs	r3, #0
  403528:	f887 306a 	strb.w	r3, [r7, #106]	; 0x6a
	char		printStr[64];
	
	unsigned char idFamily, acc, id[6], idcsum; //10feb16 temp serial ID code, make more formal later

	/* Initialize the SAM system. */
	sysclk_init();
  40352c:	4b9c      	ldr	r3, [pc, #624]	; (4037a0 <main+0x2cc>)
  40352e:	4798      	blx	r3
	board_init();
  403530:	4b9c      	ldr	r3, [pc, #624]	; (4037a4 <main+0x2d0>)
  403532:	4798      	blx	r3

	/* Configure UART for blue scrolling display */
	configure_console();
  403534:	4b9c      	ldr	r3, [pc, #624]	; (4037a8 <main+0x2d4>)
  403536:	4798      	blx	r3

	/* Configure USART. */
	configure_usart();
  403538:	4b9c      	ldr	r3, [pc, #624]	; (4037ac <main+0x2d8>)
  40353a:	4798      	blx	r3

	/* 1ms tick. */
	configure_systick();
  40353c:	4b9c      	ldr	r3, [pc, #624]	; (4037b0 <main+0x2dc>)
  40353e:	4798      	blx	r3

	/*
	 * Put into some kind of "init_io()" function at some point
	 */
	
	ioport_set_pin_dir(ECLAVE_SERIAL_ID0, IOPORT_DIR_OUTPUT);
  403540:	200f      	movs	r0, #15
  403542:	2101      	movs	r1, #1
  403544:	4b9b      	ldr	r3, [pc, #620]	; (4037b4 <main+0x2e0>)
  403546:	4798      	blx	r3
	ioport_set_pin_level(ECLAVE_SERIAL_ID0, IOPORT_PIN_LEVEL_HIGH);
  403548:	200f      	movs	r0, #15
  40354a:	2101      	movs	r1, #1
  40354c:	4b9a      	ldr	r3, [pc, #616]	; (4037b8 <main+0x2e4>)
  40354e:	4798      	blx	r3
	ioport_set_pin_dir(ECLAVE_SERIAL_ID1, IOPORT_DIR_OUTPUT);
  403550:	2010      	movs	r0, #16
  403552:	2101      	movs	r1, #1
  403554:	4b97      	ldr	r3, [pc, #604]	; (4037b4 <main+0x2e0>)
  403556:	4798      	blx	r3
	ioport_set_pin_level(ECLAVE_SERIAL_ID1, IOPORT_PIN_LEVEL_HIGH);
  403558:	2010      	movs	r0, #16
  40355a:	2101      	movs	r1, #1
  40355c:	4b96      	ldr	r3, [pc, #600]	; (4037b8 <main+0x2e4>)
  40355e:	4798      	blx	r3
	ioport_set_pin_dir(ECLAVE_SERIAL_ID2, IOPORT_DIR_OUTPUT);
  403560:	2011      	movs	r0, #17
  403562:	2101      	movs	r1, #1
  403564:	4b93      	ldr	r3, [pc, #588]	; (4037b4 <main+0x2e0>)
  403566:	4798      	blx	r3
	ioport_set_pin_level(ECLAVE_SERIAL_ID2, IOPORT_PIN_LEVEL_HIGH);
  403568:	2011      	movs	r0, #17
  40356a:	2101      	movs	r1, #1
  40356c:	4b92      	ldr	r3, [pc, #584]	; (4037b8 <main+0x2e4>)
  40356e:	4798      	blx	r3
	ioport_set_pin_dir(ECLAVE_SERIAL_ID3, IOPORT_DIR_OUTPUT);
  403570:	2012      	movs	r0, #18
  403572:	2101      	movs	r1, #1
  403574:	4b8f      	ldr	r3, [pc, #572]	; (4037b4 <main+0x2e0>)
  403576:	4798      	blx	r3
	ioport_set_pin_level(ECLAVE_SERIAL_ID3, IOPORT_PIN_LEVEL_HIGH);
  403578:	2012      	movs	r0, #18
  40357a:	2101      	movs	r1, #1
  40357c:	4b8e      	ldr	r3, [pc, #568]	; (4037b8 <main+0x2e4>)
  40357e:	4798      	blx	r3
	ioport_set_pin_dir(ECLAVE_SERIAL_ID4, IOPORT_DIR_OUTPUT);
  403580:	2013      	movs	r0, #19
  403582:	2101      	movs	r1, #1
  403584:	4b8b      	ldr	r3, [pc, #556]	; (4037b4 <main+0x2e0>)
  403586:	4798      	blx	r3
	ioport_set_pin_level(ECLAVE_SERIAL_ID4, IOPORT_PIN_LEVEL_HIGH);
  403588:	2013      	movs	r0, #19
  40358a:	2101      	movs	r1, #1
  40358c:	4b8a      	ldr	r3, [pc, #552]	; (4037b8 <main+0x2e4>)
  40358e:	4798      	blx	r3

	SetSpeed(1); //1==standard speed, not overdrive 
  403590:	2001      	movs	r0, #1
  403592:	4b8a      	ldr	r3, [pc, #552]	; (4037bc <main+0x2e8>)
  403594:	4798      	blx	r3
	
	for (int i=0; i<5; i++)
  403596:	2300      	movs	r3, #0
  403598:	667b      	str	r3, [r7, #100]	; 0x64
  40359a:	e080      	b.n	40369e <main+0x1ca>
	{
		if(!OWTouchReset(i)) //we think a board is present, try to read the serial ID
  40359c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
  40359e:	b2db      	uxtb	r3, r3
  4035a0:	4618      	mov	r0, r3
  4035a2:	4b87      	ldr	r3, [pc, #540]	; (4037c0 <main+0x2ec>)
  4035a4:	4798      	blx	r3
  4035a6:	4603      	mov	r3, r0
  4035a8:	2b00      	cmp	r3, #0
  4035aa:	d171      	bne.n	403690 <main+0x1bc>
		{
			OWWriteByte(i, 0x33); //Read ID command
  4035ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
  4035ae:	b2db      	uxtb	r3, r3
  4035b0:	4618      	mov	r0, r3
  4035b2:	2133      	movs	r1, #51	; 0x33
  4035b4:	4b83      	ldr	r3, [pc, #524]	; (4037c4 <main+0x2f0>)
  4035b6:	4798      	blx	r3
			
			idFamily = OWReadByte(i);
  4035b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
  4035ba:	b2db      	uxtb	r3, r3
  4035bc:	4618      	mov	r0, r3
  4035be:	4b82      	ldr	r3, [pc, #520]	; (4037c8 <main+0x2f4>)
  4035c0:	4798      	blx	r3
  4035c2:	4603      	mov	r3, r0
  4035c4:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
			
			acc = crc8_add(0x00, idFamily);
  4035c8:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
  4035cc:	2000      	movs	r0, #0
  4035ce:	4619      	mov	r1, r3
  4035d0:	4b7e      	ldr	r3, [pc, #504]	; (4037cc <main+0x2f8>)
  4035d2:	4798      	blx	r3
  4035d4:	4603      	mov	r3, r0
  4035d6:	f887 3069 	strb.w	r3, [r7, #105]	; 0x69
			
			for (int j=0; j<6; j++)
  4035da:	2300      	movs	r3, #0
  4035dc:	663b      	str	r3, [r7, #96]	; 0x60
  4035de:	e01b      	b.n	403618 <main+0x144>
			{
				id[j] = OWReadByte(i);
  4035e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
  4035e2:	b2db      	uxtb	r3, r3
  4035e4:	4618      	mov	r0, r3
  4035e6:	4b78      	ldr	r3, [pc, #480]	; (4037c8 <main+0x2f4>)
  4035e8:	4798      	blx	r3
  4035ea:	4603      	mov	r3, r0
  4035ec:	b2d9      	uxtb	r1, r3
  4035ee:	463a      	mov	r2, r7
  4035f0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
  4035f2:	4413      	add	r3, r2
  4035f4:	460a      	mov	r2, r1
  4035f6:	701a      	strb	r2, [r3, #0]
				acc = crc8_add(acc, id[j]);
  4035f8:	463a      	mov	r2, r7
  4035fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
  4035fc:	4413      	add	r3, r2
  4035fe:	781b      	ldrb	r3, [r3, #0]
  403600:	f897 2069 	ldrb.w	r2, [r7, #105]	; 0x69
  403604:	4610      	mov	r0, r2
  403606:	4619      	mov	r1, r3
  403608:	4b70      	ldr	r3, [pc, #448]	; (4037cc <main+0x2f8>)
  40360a:	4798      	blx	r3
  40360c:	4603      	mov	r3, r0
  40360e:	f887 3069 	strb.w	r3, [r7, #105]	; 0x69
			
			idFamily = OWReadByte(i);
			
			acc = crc8_add(0x00, idFamily);
			
			for (int j=0; j<6; j++)
  403612:	6e3b      	ldr	r3, [r7, #96]	; 0x60
  403614:	3301      	adds	r3, #1
  403616:	663b      	str	r3, [r7, #96]	; 0x60
  403618:	6e3b      	ldr	r3, [r7, #96]	; 0x60
  40361a:	2b05      	cmp	r3, #5
  40361c:	dde0      	ble.n	4035e0 <main+0x10c>
			{
				id[j] = OWReadByte(i);
				acc = crc8_add(acc, id[j]);
			}
			
			idcsum = OWReadByte(i);
  40361e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
  403620:	b2db      	uxtb	r3, r3
  403622:	4618      	mov	r0, r3
  403624:	4b68      	ldr	r3, [pc, #416]	; (4037c8 <main+0x2f4>)
  403626:	4798      	blx	r3
  403628:	4603      	mov	r3, r0
  40362a:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a
			
			if (acc != idcsum)
  40362e:	f897 2069 	ldrb.w	r2, [r7, #105]	; 0x69
  403632:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
  403636:	429a      	cmp	r2, r3
  403638:	d004      	beq.n	403644 <main+0x170>
			{
				func_transmit("Invalid serial ID checksum.\r\n", strlen("Invalid serial ID checksum.\r\n"));
  40363a:	4865      	ldr	r0, [pc, #404]	; (4037d0 <main+0x2fc>)
  40363c:	211d      	movs	r1, #29
  40363e:	4b65      	ldr	r3, [pc, #404]	; (4037d4 <main+0x300>)
  403640:	4798      	blx	r3
  403642:	e029      	b.n	403698 <main+0x1c4>
			}
			else
			{
				sprintf(printStr,"LED board %d serial ID: %x%x%x%x%x%x\r\n", i, id[0], id[1], id[2], id[3], id[4], id[5]);
  403644:	783b      	ldrb	r3, [r7, #0]
  403646:	461e      	mov	r6, r3
  403648:	787b      	ldrb	r3, [r7, #1]
  40364a:	461d      	mov	r5, r3
  40364c:	78bb      	ldrb	r3, [r7, #2]
  40364e:	461c      	mov	r4, r3
  403650:	78fb      	ldrb	r3, [r7, #3]
  403652:	4618      	mov	r0, r3
  403654:	793b      	ldrb	r3, [r7, #4]
  403656:	4619      	mov	r1, r3
  403658:	797b      	ldrb	r3, [r7, #5]
  40365a:	461a      	mov	r2, r3
  40365c:	f107 0308 	add.w	r3, r7, #8
  403660:	9500      	str	r5, [sp, #0]
  403662:	9401      	str	r4, [sp, #4]
  403664:	9002      	str	r0, [sp, #8]
  403666:	9103      	str	r1, [sp, #12]
  403668:	9204      	str	r2, [sp, #16]
  40366a:	4618      	mov	r0, r3
  40366c:	495a      	ldr	r1, [pc, #360]	; (4037d8 <main+0x304>)
  40366e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
  403670:	4633      	mov	r3, r6
  403672:	4c5a      	ldr	r4, [pc, #360]	; (4037dc <main+0x308>)
  403674:	47a0      	blx	r4
				func_transmit(printStr,strlen(printStr));
  403676:	f107 0308 	add.w	r3, r7, #8
  40367a:	4618      	mov	r0, r3
  40367c:	4b58      	ldr	r3, [pc, #352]	; (4037e0 <main+0x30c>)
  40367e:	4798      	blx	r3
  403680:	4602      	mov	r2, r0
  403682:	f107 0308 	add.w	r3, r7, #8
  403686:	4618      	mov	r0, r3
  403688:	4611      	mov	r1, r2
  40368a:	4b52      	ldr	r3, [pc, #328]	; (4037d4 <main+0x300>)
  40368c:	4798      	blx	r3
  40368e:	e003      	b.n	403698 <main+0x1c4>
			}
		}
		else
		{
			func_transmit("no board this slot\r\n", strlen("no board this slot\r\n"));
  403690:	4854      	ldr	r0, [pc, #336]	; (4037e4 <main+0x310>)
  403692:	2114      	movs	r1, #20
  403694:	4b4f      	ldr	r3, [pc, #316]	; (4037d4 <main+0x300>)
  403696:	4798      	blx	r3
	ioport_set_pin_dir(ECLAVE_SERIAL_ID4, IOPORT_DIR_OUTPUT);
	ioport_set_pin_level(ECLAVE_SERIAL_ID4, IOPORT_PIN_LEVEL_HIGH);

	SetSpeed(1); //1==standard speed, not overdrive 
	
	for (int i=0; i<5; i++)
  403698:	6e7b      	ldr	r3, [r7, #100]	; 0x64
  40369a:	3301      	adds	r3, #1
  40369c:	667b      	str	r3, [r7, #100]	; 0x64
  40369e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
  4036a0:	2b04      	cmp	r3, #4
  4036a2:	f77f af7b 	ble.w	40359c <main+0xc8>

	/*
	 * End of minimalist serial ID chip stuff
	 */

	twi_init();
  4036a6:	4b50      	ldr	r3, [pc, #320]	; (4037e8 <main+0x314>)
  4036a8:	4798      	blx	r3

//make this ecII jsi 7feb16	gpio_set_pin_high(ECLAVE_LED_OEn); //make sure outputs are disabled at the chip level

	PCA9952_init();
  4036aa:	4b50      	ldr	r3, [pc, #320]	; (4037ec <main+0x318>)
  4036ac:	4798      	blx	r3

	init_adc();
  4036ae:	4b50      	ldr	r3, [pc, #320]	; (4037f0 <main+0x31c>)
  4036b0:	4798      	blx	r3
	
	/*
	 * Enable transmitter here, and disable receiver first, to avoid receiving
	 * characters sent by itself. It's necessary for half duplex RS485.
	 */
	usart_enable_tx(BOARD_USART);
  4036b2:	4850      	ldr	r0, [pc, #320]	; (4037f4 <main+0x320>)
  4036b4:	4b50      	ldr	r3, [pc, #320]	; (4037f8 <main+0x324>)
  4036b6:	4798      	blx	r3
	usart_enable_rx(BOARD_USART);
  4036b8:	484e      	ldr	r0, [pc, #312]	; (4037f4 <main+0x320>)
  4036ba:	4b50      	ldr	r3, [pc, #320]	; (4037fc <main+0x328>)
  4036bc:	4798      	blx	r3

	while (1) {

		/* Test the debug LED */
		ioport_toggle_pin_level(EXAMPLE_LED_GPIO);
  4036be:	2050      	movs	r0, #80	; 0x50
  4036c0:	4b4f      	ldr	r3, [pc, #316]	; (403800 <main+0x32c>)
  4036c2:	4798      	blx	r3


		/* Test the debug usart rx and tx */
		for (i=0; i<70; i++) //7 seconds
  4036c4:	2300      	movs	r3, #0
  4036c6:	66fb      	str	r3, [r7, #108]	; 0x6c
  4036c8:	e017      	b.n	4036fa <main+0x226>
		{
			mdelay(100);
  4036ca:	2064      	movs	r0, #100	; 0x64
  4036cc:	4b4d      	ldr	r3, [pc, #308]	; (403804 <main+0x330>)
  4036ce:	4798      	blx	r3
		
			if (usart_is_rx_ready(BOARD_USART)) {
  4036d0:	4848      	ldr	r0, [pc, #288]	; (4037f4 <main+0x320>)
  4036d2:	4b4d      	ldr	r3, [pc, #308]	; (403808 <main+0x334>)
  4036d4:	4798      	blx	r3
  4036d6:	4603      	mov	r3, r0
  4036d8:	2b00      	cmp	r3, #0
  4036da:	d00b      	beq.n	4036f4 <main+0x220>
				usart_read(BOARD_USART, (uint32_t *)&rxByte);
  4036dc:	f107 034b 	add.w	r3, r7, #75	; 0x4b
  4036e0:	4844      	ldr	r0, [pc, #272]	; (4037f4 <main+0x320>)
  4036e2:	4619      	mov	r1, r3
  4036e4:	4b49      	ldr	r3, [pc, #292]	; (40380c <main+0x338>)
  4036e6:	4798      	blx	r3
				func_transmit(&rxByte, 1);
  4036e8:	f107 034b 	add.w	r3, r7, #75	; 0x4b
  4036ec:	4618      	mov	r0, r3
  4036ee:	2101      	movs	r1, #1
  4036f0:	4b38      	ldr	r3, [pc, #224]	; (4037d4 <main+0x300>)
  4036f2:	4798      	blx	r3
		/* Test the debug LED */
		ioport_toggle_pin_level(EXAMPLE_LED_GPIO);


		/* Test the debug usart rx and tx */
		for (i=0; i<70; i++) //7 seconds
  4036f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
  4036f6:	3301      	adds	r3, #1
  4036f8:	66fb      	str	r3, [r7, #108]	; 0x6c
  4036fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
  4036fc:	2b45      	cmp	r3, #69	; 0x45
  4036fe:	d9e4      	bls.n	4036ca <main+0x1f6>
				func_transmit(&rxByte, 1);
			}
		}

		/* Test the scrolling blue LED display */
		for (charCount = 0; charCount < 7; charCount++)
  403700:	2300      	movs	r3, #0
  403702:	f887 306a 	strb.w	r3, [r7, #106]	; 0x6a
  403706:	e09b      	b.n	403840 <main+0x36c>
		{
			unsigned char temp;
			temp = (*(cmdPtrArray[displayState]+charCount));
  403708:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
  40370c:	4a40      	ldr	r2, [pc, #256]	; (403810 <main+0x33c>)
  40370e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
  403712:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
  403716:	4413      	add	r3, r2
  403718:	781b      	ldrb	r3, [r3, #0]
  40371a:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
			putchar(temp);
  40371e:	4b3d      	ldr	r3, [pc, #244]	; (403814 <main+0x340>)
  403720:	681b      	ldr	r3, [r3, #0]
  403722:	689b      	ldr	r3, [r3, #8]
  403724:	689a      	ldr	r2, [r3, #8]
  403726:	3a01      	subs	r2, #1
  403728:	609a      	str	r2, [r3, #8]
  40372a:	689b      	ldr	r3, [r3, #8]
  40372c:	2b00      	cmp	r3, #0
  40372e:	da75      	bge.n	40381c <main+0x348>
  403730:	4b38      	ldr	r3, [pc, #224]	; (403814 <main+0x340>)
  403732:	681b      	ldr	r3, [r3, #0]
  403734:	689b      	ldr	r3, [r3, #8]
  403736:	689a      	ldr	r2, [r3, #8]
  403738:	4b36      	ldr	r3, [pc, #216]	; (403814 <main+0x340>)
  40373a:	681b      	ldr	r3, [r3, #0]
  40373c:	689b      	ldr	r3, [r3, #8]
  40373e:	699b      	ldr	r3, [r3, #24]
  403740:	429a      	cmp	r2, r3
  403742:	db1f      	blt.n	403784 <main+0x2b0>
  403744:	4b33      	ldr	r3, [pc, #204]	; (403814 <main+0x340>)
  403746:	681b      	ldr	r3, [r3, #0]
  403748:	689b      	ldr	r3, [r3, #8]
  40374a:	681b      	ldr	r3, [r3, #0]
  40374c:	f897 2059 	ldrb.w	r2, [r7, #89]	; 0x59
  403750:	701a      	strb	r2, [r3, #0]
  403752:	4b30      	ldr	r3, [pc, #192]	; (403814 <main+0x340>)
  403754:	681b      	ldr	r3, [r3, #0]
  403756:	689b      	ldr	r3, [r3, #8]
  403758:	681b      	ldr	r3, [r3, #0]
  40375a:	781b      	ldrb	r3, [r3, #0]
  40375c:	2b0a      	cmp	r3, #10
  40375e:	d006      	beq.n	40376e <main+0x29a>
  403760:	4b2c      	ldr	r3, [pc, #176]	; (403814 <main+0x340>)
  403762:	681b      	ldr	r3, [r3, #0]
  403764:	689b      	ldr	r3, [r3, #8]
  403766:	681a      	ldr	r2, [r3, #0]
  403768:	3201      	adds	r2, #1
  40376a:	601a      	str	r2, [r3, #0]
  40376c:	e063      	b.n	403836 <main+0x362>
  40376e:	4b29      	ldr	r3, [pc, #164]	; (403814 <main+0x340>)
  403770:	681a      	ldr	r2, [r3, #0]
  403772:	4b28      	ldr	r3, [pc, #160]	; (403814 <main+0x340>)
  403774:	681b      	ldr	r3, [r3, #0]
  403776:	689b      	ldr	r3, [r3, #8]
  403778:	4610      	mov	r0, r2
  40377a:	210a      	movs	r1, #10
  40377c:	461a      	mov	r2, r3
  40377e:	4b26      	ldr	r3, [pc, #152]	; (403818 <main+0x344>)
  403780:	4798      	blx	r3
  403782:	e058      	b.n	403836 <main+0x362>
  403784:	4b23      	ldr	r3, [pc, #140]	; (403814 <main+0x340>)
  403786:	6819      	ldr	r1, [r3, #0]
  403788:	f897 2059 	ldrb.w	r2, [r7, #89]	; 0x59
  40378c:	4b21      	ldr	r3, [pc, #132]	; (403814 <main+0x340>)
  40378e:	681b      	ldr	r3, [r3, #0]
  403790:	689b      	ldr	r3, [r3, #8]
  403792:	4608      	mov	r0, r1
  403794:	4611      	mov	r1, r2
  403796:	461a      	mov	r2, r3
  403798:	4b1f      	ldr	r3, [pc, #124]	; (403818 <main+0x344>)
  40379a:	4798      	blx	r3
  40379c:	e04b      	b.n	403836 <main+0x362>
  40379e:	bf00      	nop
  4037a0:	00400491 	.word	0x00400491
  4037a4:	00400a6d 	.word	0x00400a6d
  4037a8:	004032f1 	.word	0x004032f1
  4037ac:	0040322d 	.word	0x0040322d
  4037b0:	004032ad 	.word	0x004032ad
  4037b4:	00402c11 	.word	0x00402c11
  4037b8:	00402c99 	.word	0x00402c99
  4037bc:	004025f5 	.word	0x004025f5
  4037c0:	004026b1 	.word	0x004026b1
  4037c4:	00402851 	.word	0x00402851
  4037c8:	00402891 	.word	0x00402891
  4037cc:	004028dd 	.word	0x004028dd
  4037d0:	00409384 	.word	0x00409384
  4037d4:	00403329 	.word	0x00403329
  4037d8:	004093a4 	.word	0x004093a4
  4037dc:	00403d55 	.word	0x00403d55
  4037e0:	00403da1 	.word	0x00403da1
  4037e4:	004093cc 	.word	0x004093cc
  4037e8:	0040338d 	.word	0x0040338d
  4037ec:	00402161 	.word	0x00402161
  4037f0:	00403411 	.word	0x00403411
  4037f4:	40024000 	.word	0x40024000
  4037f8:	00401b35 	.word	0x00401b35
  4037fc:	00401b81 	.word	0x00401b81
  403800:	00402d05 	.word	0x00402d05
  403804:	00403149 	.word	0x00403149
  403808:	00401c61 	.word	0x00401c61
  40380c:	00401cbd 	.word	0x00401cbd
  403810:	2040005c 	.word	0x2040005c
  403814:	204004b0 	.word	0x204004b0
  403818:	0040530d 	.word	0x0040530d
  40381c:	4b9a      	ldr	r3, [pc, #616]	; (403a88 <main+0x5b4>)
  40381e:	681b      	ldr	r3, [r3, #0]
  403820:	689b      	ldr	r3, [r3, #8]
  403822:	681b      	ldr	r3, [r3, #0]
  403824:	f897 2059 	ldrb.w	r2, [r7, #89]	; 0x59
  403828:	701a      	strb	r2, [r3, #0]
  40382a:	4b97      	ldr	r3, [pc, #604]	; (403a88 <main+0x5b4>)
  40382c:	681b      	ldr	r3, [r3, #0]
  40382e:	689b      	ldr	r3, [r3, #8]
  403830:	681a      	ldr	r2, [r3, #0]
  403832:	3201      	adds	r2, #1
  403834:	601a      	str	r2, [r3, #0]
				func_transmit(&rxByte, 1);
			}
		}

		/* Test the scrolling blue LED display */
		for (charCount = 0; charCount < 7; charCount++)
  403836:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
  40383a:	3301      	adds	r3, #1
  40383c:	f887 306a 	strb.w	r3, [r7, #106]	; 0x6a
  403840:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
  403844:	2b06      	cmp	r3, #6
  403846:	f67f af5f 	bls.w	403708 <main+0x234>
			putchar(temp);
		}
		
		/* Test the debug port */

		switch (displayState)
  40384a:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
  40384e:	2b08      	cmp	r3, #8
  403850:	d85a      	bhi.n	403908 <main+0x434>
  403852:	a201      	add	r2, pc, #4	; (adr r2, 403858 <main+0x384>)
  403854:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  403858:	0040387d 	.word	0x0040387d
  40385c:	0040388d 	.word	0x0040388d
  403860:	0040389d 	.word	0x0040389d
  403864:	004038b1 	.word	0x004038b1
  403868:	004038c1 	.word	0x004038c1
  40386c:	004038d1 	.word	0x004038d1
  403870:	004038df 	.word	0x004038df
  403874:	004038ed 	.word	0x004038ed
  403878:	004038fb 	.word	0x004038fb
		{
			case IDX_READY:
				sprintf(txBuf, "Ready\r\n");
  40387c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
  403880:	4a82      	ldr	r2, [pc, #520]	; (403a8c <main+0x5b8>)
  403882:	e892 0003 	ldmia.w	r2, {r0, r1}
  403886:	e883 0003 	stmia.w	r3, {r0, r1}
				break;
  40388a:	e03d      	b.n	403908 <main+0x434>
			case IDX_CLEAN:
				sprintf(txBuf, "Clean\r\n");
  40388c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
  403890:	4a7f      	ldr	r2, [pc, #508]	; (403a90 <main+0x5bc>)
  403892:	e892 0003 	ldmia.w	r2, {r0, r1}
  403896:	e883 0003 	stmia.w	r3, {r0, r1}
				break;
  40389a:	e035      	b.n	403908 <main+0x434>
			case IDX_CLEANING:
				sprintf(txBuf, "Cleaning\r\n");
  40389c:	4a7d      	ldr	r2, [pc, #500]	; (403a94 <main+0x5c0>)
  40389e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
  4038a2:	ca07      	ldmia	r2, {r0, r1, r2}
  4038a4:	c303      	stmia	r3!, {r0, r1}
  4038a6:	801a      	strh	r2, [r3, #0]
  4038a8:	3302      	adds	r3, #2
  4038aa:	0c12      	lsrs	r2, r2, #16
  4038ac:	701a      	strb	r2, [r3, #0]
				break;
  4038ae:	e02b      	b.n	403908 <main+0x434>
			case IDX_DIRTY:
				sprintf(txBuf, "Dirty\r\n");
  4038b0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
  4038b4:	4a78      	ldr	r2, [pc, #480]	; (403a98 <main+0x5c4>)
  4038b6:	e892 0003 	ldmia.w	r2, {r0, r1}
  4038ba:	e883 0003 	stmia.w	r3, {r0, r1}
				break;
  4038be:	e023      	b.n	403908 <main+0x434>
			case IDX_ERROR:
				sprintf(txBuf, "Error\r\n");
  4038c0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
  4038c4:	4a75      	ldr	r2, [pc, #468]	; (403a9c <main+0x5c8>)
  4038c6:	e892 0003 	ldmia.w	r2, {r0, r1}
  4038ca:	e883 0003 	stmia.w	r3, {r0, r1}
				break;
  4038ce:	e01b      	b.n	403908 <main+0x434>
			case IDX_SHELF1:
				sprintf(txBuf, "Shelf1\r\n");
  4038d0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
  4038d4:	4a72      	ldr	r2, [pc, #456]	; (403aa0 <main+0x5cc>)
  4038d6:	ca07      	ldmia	r2, {r0, r1, r2}
  4038d8:	c303      	stmia	r3!, {r0, r1}
  4038da:	701a      	strb	r2, [r3, #0]
				break;
  4038dc:	e014      	b.n	403908 <main+0x434>
			case IDX_SHELF2:
				sprintf(txBuf, "Shelf2\r\n");
  4038de:	f107 034c 	add.w	r3, r7, #76	; 0x4c
  4038e2:	4a70      	ldr	r2, [pc, #448]	; (403aa4 <main+0x5d0>)
  4038e4:	ca07      	ldmia	r2, {r0, r1, r2}
  4038e6:	c303      	stmia	r3!, {r0, r1}
  4038e8:	701a      	strb	r2, [r3, #0]
				break;
  4038ea:	e00d      	b.n	403908 <main+0x434>
			case IDX_SHELF3:
				sprintf(txBuf, "Shelf3\r\n");
  4038ec:	f107 034c 	add.w	r3, r7, #76	; 0x4c
  4038f0:	4a6d      	ldr	r2, [pc, #436]	; (403aa8 <main+0x5d4>)
  4038f2:	ca07      	ldmia	r2, {r0, r1, r2}
  4038f4:	c303      	stmia	r3!, {r0, r1}
  4038f6:	701a      	strb	r2, [r3, #0]
				break;
  4038f8:	e006      	b.n	403908 <main+0x434>
			case IDX_SHELF4:
				sprintf(txBuf, "Shelf4\r\n");
  4038fa:	f107 034c 	add.w	r3, r7, #76	; 0x4c
  4038fe:	4a6b      	ldr	r2, [pc, #428]	; (403aac <main+0x5d8>)
  403900:	ca07      	ldmia	r2, {r0, r1, r2}
  403902:	c303      	stmia	r3!, {r0, r1}
  403904:	701a      	strb	r2, [r3, #0]
				break;
  403906:	bf00      	nop
		}
		
		func_transmit(txBuf, strlen(txBuf));
  403908:	f107 034c 	add.w	r3, r7, #76	; 0x4c
  40390c:	4618      	mov	r0, r3
  40390e:	4b68      	ldr	r3, [pc, #416]	; (403ab0 <main+0x5dc>)
  403910:	4798      	blx	r3
  403912:	4602      	mov	r2, r0
  403914:	f107 034c 	add.w	r3, r7, #76	; 0x4c
  403918:	4618      	mov	r0, r3
  40391a:	4611      	mov	r1, r2
  40391c:	4b65      	ldr	r3, [pc, #404]	; (403ab4 <main+0x5e0>)
  40391e:	4798      	blx	r3


		if ((++displayState) > 8)
  403920:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
  403924:	3301      	adds	r3, #1
  403926:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
  40392a:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
  40392e:	2b08      	cmp	r3, #8
  403930:	d902      	bls.n	403938 <main+0x464>
		{
			displayState = 0;
  403932:	2300      	movs	r3, #0
  403934:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
		
		/*
		 * Read Bluesense lines
		 */
		
		afec_channel_enable(AFEC1, AFEC_CHANNEL_9);
  403938:	485f      	ldr	r0, [pc, #380]	; (403ab8 <main+0x5e4>)
  40393a:	2109      	movs	r1, #9
  40393c:	4b5f      	ldr	r3, [pc, #380]	; (403abc <main+0x5e8>)
  40393e:	4798      	blx	r3
		afec_start_software_conversion(AFEC1);
  403940:	485d      	ldr	r0, [pc, #372]	; (403ab8 <main+0x5e4>)
  403942:	4b5f      	ldr	r3, [pc, #380]	; (403ac0 <main+0x5ec>)
  403944:	4798      	blx	r3
		while (afec_get_interrupt_status(AFEC1) & (1 << AFEC_CHANNEL_9));
  403946:	bf00      	nop
  403948:	485b      	ldr	r0, [pc, #364]	; (403ab8 <main+0x5e4>)
  40394a:	4b5e      	ldr	r3, [pc, #376]	; (403ac4 <main+0x5f0>)
  40394c:	4798      	blx	r3
  40394e:	4603      	mov	r3, r0
  403950:	f403 7300 	and.w	r3, r3, #512	; 0x200
  403954:	2b00      	cmp	r3, #0
  403956:	d1f7      	bne.n	403948 <main+0x474>
		g_ul_value[0] = g_afec1_sample_data;
  403958:	4b5b      	ldr	r3, [pc, #364]	; (403ac8 <main+0x5f4>)
  40395a:	681b      	ldr	r3, [r3, #0]
  40395c:	4a5b      	ldr	r2, [pc, #364]	; (403acc <main+0x5f8>)
  40395e:	6013      	str	r3, [r2, #0]
		afec_channel_disable(AFEC1, AFEC_CHANNEL_9);
  403960:	4855      	ldr	r0, [pc, #340]	; (403ab8 <main+0x5e4>)
  403962:	2109      	movs	r1, #9
  403964:	4b5a      	ldr	r3, [pc, #360]	; (403ad0 <main+0x5fc>)
  403966:	4798      	blx	r3

		afec_channel_enable(AFEC0, AFEC_CHANNEL_0);
  403968:	485a      	ldr	r0, [pc, #360]	; (403ad4 <main+0x600>)
  40396a:	2100      	movs	r1, #0
  40396c:	4b53      	ldr	r3, [pc, #332]	; (403abc <main+0x5e8>)
  40396e:	4798      	blx	r3
		afec_start_software_conversion(AFEC0);
  403970:	4858      	ldr	r0, [pc, #352]	; (403ad4 <main+0x600>)
  403972:	4b53      	ldr	r3, [pc, #332]	; (403ac0 <main+0x5ec>)
  403974:	4798      	blx	r3
		while (afec_get_interrupt_status(AFEC0) & (1 << (AFEC_CHANNEL_0)));
  403976:	bf00      	nop
  403978:	4856      	ldr	r0, [pc, #344]	; (403ad4 <main+0x600>)
  40397a:	4b52      	ldr	r3, [pc, #328]	; (403ac4 <main+0x5f0>)
  40397c:	4798      	blx	r3
  40397e:	4603      	mov	r3, r0
  403980:	f003 0301 	and.w	r3, r3, #1
  403984:	2b00      	cmp	r3, #0
  403986:	d1f7      	bne.n	403978 <main+0x4a4>
		g_ul_value[1] = g_afec0_sample_data;
  403988:	4b53      	ldr	r3, [pc, #332]	; (403ad8 <main+0x604>)
  40398a:	681b      	ldr	r3, [r3, #0]
  40398c:	4a4f      	ldr	r2, [pc, #316]	; (403acc <main+0x5f8>)
  40398e:	6053      	str	r3, [r2, #4]
		afec_channel_disable(AFEC0, AFEC_CHANNEL_0);
  403990:	4850      	ldr	r0, [pc, #320]	; (403ad4 <main+0x600>)
  403992:	2100      	movs	r1, #0
  403994:	4b4e      	ldr	r3, [pc, #312]	; (403ad0 <main+0x5fc>)
  403996:	4798      	blx	r3

		afec_channel_enable(AFEC0, AFEC_CHANNEL_4);
  403998:	484e      	ldr	r0, [pc, #312]	; (403ad4 <main+0x600>)
  40399a:	2104      	movs	r1, #4
  40399c:	4b47      	ldr	r3, [pc, #284]	; (403abc <main+0x5e8>)
  40399e:	4798      	blx	r3
		afec_start_software_conversion(AFEC0);
  4039a0:	484c      	ldr	r0, [pc, #304]	; (403ad4 <main+0x600>)
  4039a2:	4b47      	ldr	r3, [pc, #284]	; (403ac0 <main+0x5ec>)
  4039a4:	4798      	blx	r3
		while (afec_get_interrupt_status(AFEC0) & (1 << (AFEC_CHANNEL_4)));
  4039a6:	bf00      	nop
  4039a8:	484a      	ldr	r0, [pc, #296]	; (403ad4 <main+0x600>)
  4039aa:	4b46      	ldr	r3, [pc, #280]	; (403ac4 <main+0x5f0>)
  4039ac:	4798      	blx	r3
  4039ae:	4603      	mov	r3, r0
  4039b0:	f003 0310 	and.w	r3, r3, #16
  4039b4:	2b00      	cmp	r3, #0
  4039b6:	d1f7      	bne.n	4039a8 <main+0x4d4>
		g_ul_value[2] = g_afec0_sample_data;
  4039b8:	4b47      	ldr	r3, [pc, #284]	; (403ad8 <main+0x604>)
  4039ba:	681b      	ldr	r3, [r3, #0]
  4039bc:	4a43      	ldr	r2, [pc, #268]	; (403acc <main+0x5f8>)
  4039be:	6093      	str	r3, [r2, #8]
		afec_channel_disable(AFEC0, AFEC_CHANNEL_4);
  4039c0:	4844      	ldr	r0, [pc, #272]	; (403ad4 <main+0x600>)
  4039c2:	2104      	movs	r1, #4
  4039c4:	4b42      	ldr	r3, [pc, #264]	; (403ad0 <main+0x5fc>)
  4039c6:	4798      	blx	r3

		afec_channel_enable(AFEC0, AFEC_CHANNEL_5);
  4039c8:	4842      	ldr	r0, [pc, #264]	; (403ad4 <main+0x600>)
  4039ca:	2105      	movs	r1, #5
  4039cc:	4b3b      	ldr	r3, [pc, #236]	; (403abc <main+0x5e8>)
  4039ce:	4798      	blx	r3
		afec_start_software_conversion(AFEC0);
  4039d0:	4840      	ldr	r0, [pc, #256]	; (403ad4 <main+0x600>)
  4039d2:	4b3b      	ldr	r3, [pc, #236]	; (403ac0 <main+0x5ec>)
  4039d4:	4798      	blx	r3
		while (afec_get_interrupt_status(AFEC0) & (1 << (AFEC_CHANNEL_5)));
  4039d6:	bf00      	nop
  4039d8:	483e      	ldr	r0, [pc, #248]	; (403ad4 <main+0x600>)
  4039da:	4b3a      	ldr	r3, [pc, #232]	; (403ac4 <main+0x5f0>)
  4039dc:	4798      	blx	r3
  4039de:	4603      	mov	r3, r0
  4039e0:	f003 0320 	and.w	r3, r3, #32
  4039e4:	2b00      	cmp	r3, #0
  4039e6:	d1f7      	bne.n	4039d8 <main+0x504>
		g_ul_value[3] = g_afec0_sample_data;
  4039e8:	4b3b      	ldr	r3, [pc, #236]	; (403ad8 <main+0x604>)
  4039ea:	681b      	ldr	r3, [r3, #0]
  4039ec:	4a37      	ldr	r2, [pc, #220]	; (403acc <main+0x5f8>)
  4039ee:	60d3      	str	r3, [r2, #12]
		afec_channel_disable(AFEC0, AFEC_CHANNEL_5);
  4039f0:	4838      	ldr	r0, [pc, #224]	; (403ad4 <main+0x600>)
  4039f2:	2105      	movs	r1, #5
  4039f4:	4b36      	ldr	r3, [pc, #216]	; (403ad0 <main+0x5fc>)
  4039f6:	4798      	blx	r3

		if ((g_ul_value[0] != g_ul_last_value[0]) ||
  4039f8:	4b34      	ldr	r3, [pc, #208]	; (403acc <main+0x5f8>)
  4039fa:	681a      	ldr	r2, [r3, #0]
  4039fc:	4b37      	ldr	r3, [pc, #220]	; (403adc <main+0x608>)
  4039fe:	681b      	ldr	r3, [r3, #0]
  403a00:	429a      	cmp	r2, r3
  403a02:	d111      	bne.n	403a28 <main+0x554>
			(g_ul_value[1] != g_ul_last_value[1]) ||
  403a04:	4b31      	ldr	r3, [pc, #196]	; (403acc <main+0x5f8>)
  403a06:	685a      	ldr	r2, [r3, #4]
  403a08:	4b34      	ldr	r3, [pc, #208]	; (403adc <main+0x608>)
  403a0a:	685b      	ldr	r3, [r3, #4]
		afec_start_software_conversion(AFEC0);
		while (afec_get_interrupt_status(AFEC0) & (1 << (AFEC_CHANNEL_5)));
		g_ul_value[3] = g_afec0_sample_data;
		afec_channel_disable(AFEC0, AFEC_CHANNEL_5);

		if ((g_ul_value[0] != g_ul_last_value[0]) ||
  403a0c:	429a      	cmp	r2, r3
  403a0e:	d10b      	bne.n	403a28 <main+0x554>
			(g_ul_value[1] != g_ul_last_value[1]) ||
			(g_ul_value[2] != g_ul_last_value[2]) ||
  403a10:	4b2e      	ldr	r3, [pc, #184]	; (403acc <main+0x5f8>)
  403a12:	689a      	ldr	r2, [r3, #8]
  403a14:	4b31      	ldr	r3, [pc, #196]	; (403adc <main+0x608>)
  403a16:	689b      	ldr	r3, [r3, #8]
		while (afec_get_interrupt_status(AFEC0) & (1 << (AFEC_CHANNEL_5)));
		g_ul_value[3] = g_afec0_sample_data;
		afec_channel_disable(AFEC0, AFEC_CHANNEL_5);

		if ((g_ul_value[0] != g_ul_last_value[0]) ||
			(g_ul_value[1] != g_ul_last_value[1]) ||
  403a18:	429a      	cmp	r2, r3
  403a1a:	d105      	bne.n	403a28 <main+0x554>
			(g_ul_value[2] != g_ul_last_value[2]) ||
			(g_ul_value[3] != g_ul_last_value[3]))
  403a1c:	4b2b      	ldr	r3, [pc, #172]	; (403acc <main+0x5f8>)
  403a1e:	68da      	ldr	r2, [r3, #12]
  403a20:	4b2e      	ldr	r3, [pc, #184]	; (403adc <main+0x608>)
  403a22:	68db      	ldr	r3, [r3, #12]
		g_ul_value[3] = g_afec0_sample_data;
		afec_channel_disable(AFEC0, AFEC_CHANNEL_5);

		if ((g_ul_value[0] != g_ul_last_value[0]) ||
			(g_ul_value[1] != g_ul_last_value[1]) ||
			(g_ul_value[2] != g_ul_last_value[2]) ||
  403a24:	429a      	cmp	r2, r3
  403a26:	d02d      	beq.n	403a84 <main+0x5b0>
			(g_ul_value[3] != g_ul_last_value[3]))
		{
			sprintf(printStr,"ch0: %x ch1: %x ch2: %x ch3: %x\r\n", g_ul_value[0], g_ul_value[1], g_ul_value[2], g_ul_value[3]);
  403a28:	4b28      	ldr	r3, [pc, #160]	; (403acc <main+0x5f8>)
  403a2a:	681d      	ldr	r5, [r3, #0]
  403a2c:	4b27      	ldr	r3, [pc, #156]	; (403acc <main+0x5f8>)
  403a2e:	685c      	ldr	r4, [r3, #4]
  403a30:	4b26      	ldr	r3, [pc, #152]	; (403acc <main+0x5f8>)
  403a32:	689a      	ldr	r2, [r3, #8]
  403a34:	4b25      	ldr	r3, [pc, #148]	; (403acc <main+0x5f8>)
  403a36:	68db      	ldr	r3, [r3, #12]
  403a38:	f107 0108 	add.w	r1, r7, #8
  403a3c:	9200      	str	r2, [sp, #0]
  403a3e:	9301      	str	r3, [sp, #4]
  403a40:	4608      	mov	r0, r1
  403a42:	4927      	ldr	r1, [pc, #156]	; (403ae0 <main+0x60c>)
  403a44:	462a      	mov	r2, r5
  403a46:	4623      	mov	r3, r4
  403a48:	4c26      	ldr	r4, [pc, #152]	; (403ae4 <main+0x610>)
  403a4a:	47a0      	blx	r4
			func_transmit(printStr, strlen(printStr));
  403a4c:	f107 0308 	add.w	r3, r7, #8
  403a50:	4618      	mov	r0, r3
  403a52:	4b17      	ldr	r3, [pc, #92]	; (403ab0 <main+0x5dc>)
  403a54:	4798      	blx	r3
  403a56:	4602      	mov	r2, r0
  403a58:	f107 0308 	add.w	r3, r7, #8
  403a5c:	4618      	mov	r0, r3
  403a5e:	4611      	mov	r1, r2
  403a60:	4b14      	ldr	r3, [pc, #80]	; (403ab4 <main+0x5e0>)
  403a62:	4798      	blx	r3
			g_ul_last_value[0] = g_ul_value[0];
  403a64:	4b19      	ldr	r3, [pc, #100]	; (403acc <main+0x5f8>)
  403a66:	681b      	ldr	r3, [r3, #0]
  403a68:	4a1c      	ldr	r2, [pc, #112]	; (403adc <main+0x608>)
  403a6a:	6013      	str	r3, [r2, #0]
			g_ul_last_value[1] = g_ul_value[1];
  403a6c:	4b17      	ldr	r3, [pc, #92]	; (403acc <main+0x5f8>)
  403a6e:	685b      	ldr	r3, [r3, #4]
  403a70:	4a1a      	ldr	r2, [pc, #104]	; (403adc <main+0x608>)
  403a72:	6053      	str	r3, [r2, #4]
			g_ul_last_value[2] = g_ul_value[2];
  403a74:	4b15      	ldr	r3, [pc, #84]	; (403acc <main+0x5f8>)
  403a76:	689b      	ldr	r3, [r3, #8]
  403a78:	4a18      	ldr	r2, [pc, #96]	; (403adc <main+0x608>)
  403a7a:	6093      	str	r3, [r2, #8]
			g_ul_last_value[3] = g_ul_value[3];
  403a7c:	4b13      	ldr	r3, [pc, #76]	; (403acc <main+0x5f8>)
  403a7e:	68db      	ldr	r3, [r3, #12]
  403a80:	4a16      	ldr	r2, [pc, #88]	; (403adc <main+0x608>)
  403a82:	60d3      	str	r3, [r2, #12]
		}
		
		
	}//while
  403a84:	e61b      	b.n	4036be <main+0x1ea>
  403a86:	bf00      	nop
  403a88:	204004b0 	.word	0x204004b0
  403a8c:	004093e4 	.word	0x004093e4
  403a90:	004093ec 	.word	0x004093ec
  403a94:	00409458 	.word	0x00409458
  403a98:	004093f4 	.word	0x004093f4
  403a9c:	004093fc 	.word	0x004093fc
  403aa0:	00409404 	.word	0x00409404
  403aa4:	00409410 	.word	0x00409410
  403aa8:	0040941c 	.word	0x0040941c
  403aac:	00409428 	.word	0x00409428
  403ab0:	00403da1 	.word	0x00403da1
  403ab4:	00403329 	.word	0x00403329
  403ab8:	40064000 	.word	0x40064000
  403abc:	00402a75 	.word	0x00402a75
  403ac0:	00402a5d 	.word	0x00402a5d
  403ac4:	00402b21 	.word	0x00402b21
  403ac8:	20400aac 	.word	0x20400aac
  403acc:	2040099c 	.word	0x2040099c
  403ad0:	00402abd 	.word	0x00402abd
  403ad4:	4003c000 	.word	0x4003c000
  403ad8:	2040128c 	.word	0x2040128c
  403adc:	204009ac 	.word	0x204009ac
  403ae0:	00409434 	.word	0x00409434
  403ae4:	00403d55 	.word	0x00403d55

00403ae8 <__libc_init_array>:
  403ae8:	b570      	push	{r4, r5, r6, lr}
  403aea:	4e0f      	ldr	r6, [pc, #60]	; (403b28 <__libc_init_array+0x40>)
  403aec:	4d0f      	ldr	r5, [pc, #60]	; (403b2c <__libc_init_array+0x44>)
  403aee:	1b76      	subs	r6, r6, r5
  403af0:	10b6      	asrs	r6, r6, #2
  403af2:	bf18      	it	ne
  403af4:	2400      	movne	r4, #0
  403af6:	d005      	beq.n	403b04 <__libc_init_array+0x1c>
  403af8:	3401      	adds	r4, #1
  403afa:	f855 3b04 	ldr.w	r3, [r5], #4
  403afe:	4798      	blx	r3
  403b00:	42a6      	cmp	r6, r4
  403b02:	d1f9      	bne.n	403af8 <__libc_init_array+0x10>
  403b04:	4e0a      	ldr	r6, [pc, #40]	; (403b30 <__libc_init_array+0x48>)
  403b06:	f005 fd73 	bl	4095f0 <_init>
  403b0a:	4d0a      	ldr	r5, [pc, #40]	; (403b34 <__libc_init_array+0x4c>)
  403b0c:	1b76      	subs	r6, r6, r5
  403b0e:	10b6      	asrs	r6, r6, #2
  403b10:	bf18      	it	ne
  403b12:	2400      	movne	r4, #0
  403b14:	d006      	beq.n	403b24 <__libc_init_array+0x3c>
  403b16:	3401      	adds	r4, #1
  403b18:	f855 3b04 	ldr.w	r3, [r5], #4
  403b1c:	4798      	blx	r3
  403b1e:	42a6      	cmp	r6, r4
  403b20:	d1f9      	bne.n	403b16 <__libc_init_array+0x2e>
  403b22:	bd70      	pop	{r4, r5, r6, pc}
  403b24:	bd70      	pop	{r4, r5, r6, pc}
  403b26:	bf00      	nop
  403b28:	004095fc 	.word	0x004095fc
  403b2c:	004095fc 	.word	0x004095fc
  403b30:	00409604 	.word	0x00409604
  403b34:	004095fc 	.word	0x004095fc

00403b38 <memset>:
  403b38:	0783      	lsls	r3, r0, #30
  403b3a:	b470      	push	{r4, r5, r6}
  403b3c:	d049      	beq.n	403bd2 <memset+0x9a>
  403b3e:	1e54      	subs	r4, r2, #1
  403b40:	2a00      	cmp	r2, #0
  403b42:	d044      	beq.n	403bce <memset+0x96>
  403b44:	b2cd      	uxtb	r5, r1
  403b46:	4603      	mov	r3, r0
  403b48:	e002      	b.n	403b50 <memset+0x18>
  403b4a:	2c00      	cmp	r4, #0
  403b4c:	d03f      	beq.n	403bce <memset+0x96>
  403b4e:	4614      	mov	r4, r2
  403b50:	f803 5b01 	strb.w	r5, [r3], #1
  403b54:	f013 0f03 	tst.w	r3, #3
  403b58:	f104 32ff 	add.w	r2, r4, #4294967295
  403b5c:	d1f5      	bne.n	403b4a <memset+0x12>
  403b5e:	2c03      	cmp	r4, #3
  403b60:	d92e      	bls.n	403bc0 <memset+0x88>
  403b62:	b2cd      	uxtb	r5, r1
  403b64:	2c0f      	cmp	r4, #15
  403b66:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  403b6a:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  403b6e:	d919      	bls.n	403ba4 <memset+0x6c>
  403b70:	f103 0210 	add.w	r2, r3, #16
  403b74:	4626      	mov	r6, r4
  403b76:	3e10      	subs	r6, #16
  403b78:	f842 5c10 	str.w	r5, [r2, #-16]
  403b7c:	f842 5c0c 	str.w	r5, [r2, #-12]
  403b80:	3210      	adds	r2, #16
  403b82:	2e0f      	cmp	r6, #15
  403b84:	f842 5c18 	str.w	r5, [r2, #-24]
  403b88:	f842 5c14 	str.w	r5, [r2, #-20]
  403b8c:	d8f3      	bhi.n	403b76 <memset+0x3e>
  403b8e:	f1a4 0210 	sub.w	r2, r4, #16
  403b92:	f004 040f 	and.w	r4, r4, #15
  403b96:	f022 020f 	bic.w	r2, r2, #15
  403b9a:	2c03      	cmp	r4, #3
  403b9c:	f102 0210 	add.w	r2, r2, #16
  403ba0:	4413      	add	r3, r2
  403ba2:	d90d      	bls.n	403bc0 <memset+0x88>
  403ba4:	461e      	mov	r6, r3
  403ba6:	4622      	mov	r2, r4
  403ba8:	3a04      	subs	r2, #4
  403baa:	f846 5b04 	str.w	r5, [r6], #4
  403bae:	2a03      	cmp	r2, #3
  403bb0:	d8fa      	bhi.n	403ba8 <memset+0x70>
  403bb2:	1f22      	subs	r2, r4, #4
  403bb4:	f004 0403 	and.w	r4, r4, #3
  403bb8:	f022 0203 	bic.w	r2, r2, #3
  403bbc:	3204      	adds	r2, #4
  403bbe:	4413      	add	r3, r2
  403bc0:	b12c      	cbz	r4, 403bce <memset+0x96>
  403bc2:	b2c9      	uxtb	r1, r1
  403bc4:	441c      	add	r4, r3
  403bc6:	f803 1b01 	strb.w	r1, [r3], #1
  403bca:	42a3      	cmp	r3, r4
  403bcc:	d1fb      	bne.n	403bc6 <memset+0x8e>
  403bce:	bc70      	pop	{r4, r5, r6}
  403bd0:	4770      	bx	lr
  403bd2:	4614      	mov	r4, r2
  403bd4:	4603      	mov	r3, r0
  403bd6:	e7c2      	b.n	403b5e <memset+0x26>

00403bd8 <_puts_r>:
  403bd8:	b5f0      	push	{r4, r5, r6, r7, lr}
  403bda:	4604      	mov	r4, r0
  403bdc:	b089      	sub	sp, #36	; 0x24
  403bde:	4608      	mov	r0, r1
  403be0:	460d      	mov	r5, r1
  403be2:	f000 f8dd 	bl	403da0 <strlen>
  403be6:	68a3      	ldr	r3, [r4, #8]
  403be8:	2701      	movs	r7, #1
  403bea:	2102      	movs	r1, #2
  403bec:	899a      	ldrh	r2, [r3, #12]
  403bee:	ae04      	add	r6, sp, #16
  403bf0:	eb00 0c07 	add.w	ip, r0, r7
  403bf4:	f8df e03c 	ldr.w	lr, [pc, #60]	; 403c34 <_puts_r+0x5c>
  403bf8:	9102      	str	r1, [sp, #8]
  403bfa:	0491      	lsls	r1, r2, #18
  403bfc:	9504      	str	r5, [sp, #16]
  403bfe:	9005      	str	r0, [sp, #20]
  403c00:	f8cd c00c 	str.w	ip, [sp, #12]
  403c04:	f8cd e018 	str.w	lr, [sp, #24]
  403c08:	9707      	str	r7, [sp, #28]
  403c0a:	9601      	str	r6, [sp, #4]
  403c0c:	d406      	bmi.n	403c1c <_puts_r+0x44>
  403c0e:	6e59      	ldr	r1, [r3, #100]	; 0x64
  403c10:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  403c14:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  403c18:	819a      	strh	r2, [r3, #12]
  403c1a:	6659      	str	r1, [r3, #100]	; 0x64
  403c1c:	4620      	mov	r0, r4
  403c1e:	4619      	mov	r1, r3
  403c20:	aa01      	add	r2, sp, #4
  403c22:	f002 fed1 	bl	4069c8 <__sfvwrite_r>
  403c26:	2800      	cmp	r0, #0
  403c28:	bf14      	ite	ne
  403c2a:	f04f 30ff 	movne.w	r0, #4294967295
  403c2e:	200a      	moveq	r0, #10
  403c30:	b009      	add	sp, #36	; 0x24
  403c32:	bdf0      	pop	{r4, r5, r6, r7, pc}
  403c34:	0040946c 	.word	0x0040946c

00403c38 <puts>:
  403c38:	4b02      	ldr	r3, [pc, #8]	; (403c44 <puts+0xc>)
  403c3a:	4601      	mov	r1, r0
  403c3c:	6818      	ldr	r0, [r3, #0]
  403c3e:	f7ff bfcb 	b.w	403bd8 <_puts_r>
  403c42:	bf00      	nop
  403c44:	204004b0 	.word	0x204004b0

00403c48 <setbuf>:
  403c48:	2900      	cmp	r1, #0
  403c4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
  403c4e:	bf0c      	ite	eq
  403c50:	2202      	moveq	r2, #2
  403c52:	2200      	movne	r2, #0
  403c54:	f000 b800 	b.w	403c58 <setvbuf>

00403c58 <setvbuf>:
  403c58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  403c5c:	4e3b      	ldr	r6, [pc, #236]	; (403d4c <setvbuf+0xf4>)
  403c5e:	4604      	mov	r4, r0
  403c60:	460d      	mov	r5, r1
  403c62:	4690      	mov	r8, r2
  403c64:	6837      	ldr	r7, [r6, #0]
  403c66:	461e      	mov	r6, r3
  403c68:	b117      	cbz	r7, 403c70 <setvbuf+0x18>
  403c6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
  403c6c:	2b00      	cmp	r3, #0
  403c6e:	d03f      	beq.n	403cf0 <setvbuf+0x98>
  403c70:	f1b8 0f02 	cmp.w	r8, #2
  403c74:	d832      	bhi.n	403cdc <setvbuf+0x84>
  403c76:	ea5f 79d6 	movs.w	r9, r6, lsr #31
  403c7a:	d12f      	bne.n	403cdc <setvbuf+0x84>
  403c7c:	4621      	mov	r1, r4
  403c7e:	4638      	mov	r0, r7
  403c80:	f002 fcc2 	bl	406608 <_fflush_r>
  403c84:	89a1      	ldrh	r1, [r4, #12]
  403c86:	f8c4 9004 	str.w	r9, [r4, #4]
  403c8a:	060b      	lsls	r3, r1, #24
  403c8c:	f8c4 9018 	str.w	r9, [r4, #24]
  403c90:	d428      	bmi.n	403ce4 <setvbuf+0x8c>
  403c92:	f021 0183 	bic.w	r1, r1, #131	; 0x83
  403c96:	f1b8 0f02 	cmp.w	r8, #2
  403c9a:	b289      	uxth	r1, r1
  403c9c:	81a1      	strh	r1, [r4, #12]
  403c9e:	d02b      	beq.n	403cf8 <setvbuf+0xa0>
  403ca0:	2d00      	cmp	r5, #0
  403ca2:	d037      	beq.n	403d14 <setvbuf+0xbc>
  403ca4:	f1b8 0f01 	cmp.w	r8, #1
  403ca8:	d012      	beq.n	403cd0 <setvbuf+0x78>
  403caa:	b289      	uxth	r1, r1
  403cac:	4b28      	ldr	r3, [pc, #160]	; (403d50 <setvbuf+0xf8>)
  403cae:	f001 0008 	and.w	r0, r1, #8
  403cb2:	63fb      	str	r3, [r7, #60]	; 0x3c
  403cb4:	6025      	str	r5, [r4, #0]
  403cb6:	b280      	uxth	r0, r0
  403cb8:	6125      	str	r5, [r4, #16]
  403cba:	6166      	str	r6, [r4, #20]
  403cbc:	b180      	cbz	r0, 403ce0 <setvbuf+0x88>
  403cbe:	f011 0f03 	tst.w	r1, #3
  403cc2:	f04f 0000 	mov.w	r0, #0
  403cc6:	bf18      	it	ne
  403cc8:	4606      	movne	r6, r0
  403cca:	60a6      	str	r6, [r4, #8]
  403ccc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  403cd0:	f041 0101 	orr.w	r1, r1, #1
  403cd4:	4273      	negs	r3, r6
  403cd6:	81a1      	strh	r1, [r4, #12]
  403cd8:	61a3      	str	r3, [r4, #24]
  403cda:	e7e6      	b.n	403caa <setvbuf+0x52>
  403cdc:	f04f 30ff 	mov.w	r0, #4294967295
  403ce0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  403ce4:	6921      	ldr	r1, [r4, #16]
  403ce6:	4638      	mov	r0, r7
  403ce8:	f002 fd96 	bl	406818 <_free_r>
  403cec:	89a1      	ldrh	r1, [r4, #12]
  403cee:	e7d0      	b.n	403c92 <setvbuf+0x3a>
  403cf0:	4638      	mov	r0, r7
  403cf2:	f002 fd23 	bl	40673c <__sinit>
  403cf6:	e7bb      	b.n	403c70 <setvbuf+0x18>
  403cf8:	2000      	movs	r0, #0
  403cfa:	f104 0343 	add.w	r3, r4, #67	; 0x43
  403cfe:	f041 0102 	orr.w	r1, r1, #2
  403d02:	2500      	movs	r5, #0
  403d04:	2201      	movs	r2, #1
  403d06:	81a1      	strh	r1, [r4, #12]
  403d08:	60a5      	str	r5, [r4, #8]
  403d0a:	6023      	str	r3, [r4, #0]
  403d0c:	6123      	str	r3, [r4, #16]
  403d0e:	6162      	str	r2, [r4, #20]
  403d10:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  403d14:	2e00      	cmp	r6, #0
  403d16:	bf08      	it	eq
  403d18:	f44f 6680 	moveq.w	r6, #1024	; 0x400
  403d1c:	4630      	mov	r0, r6
  403d1e:	f003 f883 	bl	406e28 <malloc>
  403d22:	4605      	mov	r5, r0
  403d24:	b128      	cbz	r0, 403d32 <setvbuf+0xda>
  403d26:	89a1      	ldrh	r1, [r4, #12]
  403d28:	f041 0180 	orr.w	r1, r1, #128	; 0x80
  403d2c:	b289      	uxth	r1, r1
  403d2e:	81a1      	strh	r1, [r4, #12]
  403d30:	e7b8      	b.n	403ca4 <setvbuf+0x4c>
  403d32:	f44f 6080 	mov.w	r0, #1024	; 0x400
  403d36:	f003 f877 	bl	406e28 <malloc>
  403d3a:	4605      	mov	r5, r0
  403d3c:	b918      	cbnz	r0, 403d46 <setvbuf+0xee>
  403d3e:	89a1      	ldrh	r1, [r4, #12]
  403d40:	f04f 30ff 	mov.w	r0, #4294967295
  403d44:	e7d9      	b.n	403cfa <setvbuf+0xa2>
  403d46:	f44f 6680 	mov.w	r6, #1024	; 0x400
  403d4a:	e7ec      	b.n	403d26 <setvbuf+0xce>
  403d4c:	204004b0 	.word	0x204004b0
  403d50:	00406635 	.word	0x00406635

00403d54 <sprintf>:
  403d54:	b40e      	push	{r1, r2, r3}
  403d56:	b5f0      	push	{r4, r5, r6, r7, lr}
  403d58:	b09c      	sub	sp, #112	; 0x70
  403d5a:	4b10      	ldr	r3, [pc, #64]	; (403d9c <sprintf+0x48>)
  403d5c:	4606      	mov	r6, r0
  403d5e:	f44f 7e02 	mov.w	lr, #520	; 0x208
  403d62:	ac21      	add	r4, sp, #132	; 0x84
  403d64:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
  403d68:	f64f 77ff 	movw	r7, #65535	; 0xffff
  403d6c:	6818      	ldr	r0, [r3, #0]
  403d6e:	f854 2b04 	ldr.w	r2, [r4], #4
  403d72:	a902      	add	r1, sp, #8
  403d74:	9602      	str	r6, [sp, #8]
  403d76:	4623      	mov	r3, r4
  403d78:	9606      	str	r6, [sp, #24]
  403d7a:	9401      	str	r4, [sp, #4]
  403d7c:	f8ad e014 	strh.w	lr, [sp, #20]
  403d80:	9504      	str	r5, [sp, #16]
  403d82:	9507      	str	r5, [sp, #28]
  403d84:	f8ad 7016 	strh.w	r7, [sp, #22]
  403d88:	f000 f838 	bl	403dfc <_svfprintf_r>
  403d8c:	9b02      	ldr	r3, [sp, #8]
  403d8e:	2200      	movs	r2, #0
  403d90:	701a      	strb	r2, [r3, #0]
  403d92:	b01c      	add	sp, #112	; 0x70
  403d94:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  403d98:	b003      	add	sp, #12
  403d9a:	4770      	bx	lr
  403d9c:	204004b0 	.word	0x204004b0

00403da0 <strlen>:
  403da0:	f020 0103 	bic.w	r1, r0, #3
  403da4:	f010 0003 	ands.w	r0, r0, #3
  403da8:	f1c0 0000 	rsb	r0, r0, #0
  403dac:	f851 3b04 	ldr.w	r3, [r1], #4
  403db0:	f100 0c04 	add.w	ip, r0, #4
  403db4:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
  403db8:	f06f 0200 	mvn.w	r2, #0
  403dbc:	bf1c      	itt	ne
  403dbe:	fa22 f20c 	lsrne.w	r2, r2, ip
  403dc2:	4313      	orrne	r3, r2
  403dc4:	f04f 0c01 	mov.w	ip, #1
  403dc8:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
  403dcc:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
  403dd0:	eba3 020c 	sub.w	r2, r3, ip
  403dd4:	ea22 0203 	bic.w	r2, r2, r3
  403dd8:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
  403ddc:	bf04      	itt	eq
  403dde:	f851 3b04 	ldreq.w	r3, [r1], #4
  403de2:	3004      	addeq	r0, #4
  403de4:	d0f4      	beq.n	403dd0 <strlen+0x30>
  403de6:	f1c2 0100 	rsb	r1, r2, #0
  403dea:	ea02 0201 	and.w	r2, r2, r1
  403dee:	fab2 f282 	clz	r2, r2
  403df2:	f1c2 021f 	rsb	r2, r2, #31
  403df6:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  403dfa:	4770      	bx	lr

00403dfc <_svfprintf_r>:
  403dfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403e00:	b0c1      	sub	sp, #260	; 0x104
  403e02:	4689      	mov	r9, r1
  403e04:	9208      	str	r2, [sp, #32]
  403e06:	930c      	str	r3, [sp, #48]	; 0x30
  403e08:	9009      	str	r0, [sp, #36]	; 0x24
  403e0a:	f002 ff97 	bl	406d3c <_localeconv_r>
  403e0e:	6803      	ldr	r3, [r0, #0]
  403e10:	4618      	mov	r0, r3
  403e12:	9316      	str	r3, [sp, #88]	; 0x58
  403e14:	f7ff ffc4 	bl	403da0 <strlen>
  403e18:	f8b9 300c 	ldrh.w	r3, [r9, #12]
  403e1c:	9017      	str	r0, [sp, #92]	; 0x5c
  403e1e:	061d      	lsls	r5, r3, #24
  403e20:	d504      	bpl.n	403e2c <_svfprintf_r+0x30>
  403e22:	f8d9 3010 	ldr.w	r3, [r9, #16]
  403e26:	2b00      	cmp	r3, #0
  403e28:	f001 8080 	beq.w	404f2c <_svfprintf_r+0x1130>
  403e2c:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  403e30:	2300      	movs	r3, #0
  403e32:	46c3      	mov	fp, r8
  403e34:	9313      	str	r3, [sp, #76]	; 0x4c
  403e36:	9314      	str	r3, [sp, #80]	; 0x50
  403e38:	9312      	str	r3, [sp, #72]	; 0x48
  403e3a:	9315      	str	r3, [sp, #84]	; 0x54
  403e3c:	9319      	str	r3, [sp, #100]	; 0x64
  403e3e:	930a      	str	r3, [sp, #40]	; 0x28
  403e40:	9325      	str	r3, [sp, #148]	; 0x94
  403e42:	9324      	str	r3, [sp, #144]	; 0x90
  403e44:	f8cd 808c 	str.w	r8, [sp, #140]	; 0x8c
  403e48:	9a08      	ldr	r2, [sp, #32]
  403e4a:	7813      	ldrb	r3, [r2, #0]
  403e4c:	2b25      	cmp	r3, #37	; 0x25
  403e4e:	f000 80a6 	beq.w	403f9e <_svfprintf_r+0x1a2>
  403e52:	b90b      	cbnz	r3, 403e58 <_svfprintf_r+0x5c>
  403e54:	e0a3      	b.n	403f9e <_svfprintf_r+0x1a2>
  403e56:	b11b      	cbz	r3, 403e60 <_svfprintf_r+0x64>
  403e58:	f812 3f01 	ldrb.w	r3, [r2, #1]!
  403e5c:	2b25      	cmp	r3, #37	; 0x25
  403e5e:	d1fa      	bne.n	403e56 <_svfprintf_r+0x5a>
  403e60:	9908      	ldr	r1, [sp, #32]
  403e62:	4614      	mov	r4, r2
  403e64:	1a55      	subs	r5, r2, r1
  403e66:	d010      	beq.n	403e8a <_svfprintf_r+0x8e>
  403e68:	9b24      	ldr	r3, [sp, #144]	; 0x90
  403e6a:	9a25      	ldr	r2, [sp, #148]	; 0x94
  403e6c:	3301      	adds	r3, #1
  403e6e:	f8cb 1000 	str.w	r1, [fp]
  403e72:	442a      	add	r2, r5
  403e74:	f8cb 5004 	str.w	r5, [fp, #4]
  403e78:	2b07      	cmp	r3, #7
  403e7a:	9324      	str	r3, [sp, #144]	; 0x90
  403e7c:	9225      	str	r2, [sp, #148]	; 0x94
  403e7e:	dc73      	bgt.n	403f68 <_svfprintf_r+0x16c>
  403e80:	f10b 0b08 	add.w	fp, fp, #8
  403e84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  403e86:	442b      	add	r3, r5
  403e88:	930a      	str	r3, [sp, #40]	; 0x28
  403e8a:	7823      	ldrb	r3, [r4, #0]
  403e8c:	2b00      	cmp	r3, #0
  403e8e:	d073      	beq.n	403f78 <_svfprintf_r+0x17c>
  403e90:	2300      	movs	r3, #0
  403e92:	f04f 3cff 	mov.w	ip, #4294967295
  403e96:	1c61      	adds	r1, r4, #1
  403e98:	7866      	ldrb	r6, [r4, #1]
  403e9a:	461a      	mov	r2, r3
  403e9c:	4664      	mov	r4, ip
  403e9e:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  403ea2:	930b      	str	r3, [sp, #44]	; 0x2c
  403ea4:	9306      	str	r3, [sp, #24]
  403ea6:	1c4b      	adds	r3, r1, #1
  403ea8:	f1a6 0120 	sub.w	r1, r6, #32
  403eac:	2958      	cmp	r1, #88	; 0x58
  403eae:	f200 83b2 	bhi.w	404616 <_svfprintf_r+0x81a>
  403eb2:	e8df f011 	tbh	[pc, r1, lsl #1]
  403eb6:	0319      	.short	0x0319
  403eb8:	03b003b0 	.word	0x03b003b0
  403ebc:	03b00320 	.word	0x03b00320
  403ec0:	03b003b0 	.word	0x03b003b0
  403ec4:	03b003b0 	.word	0x03b003b0
  403ec8:	024003b0 	.word	0x024003b0
  403ecc:	03b001fb 	.word	0x03b001fb
  403ed0:	01ff01e2 	.word	0x01ff01e2
  403ed4:	032703b0 	.word	0x032703b0
  403ed8:	032e032e 	.word	0x032e032e
  403edc:	032e032e 	.word	0x032e032e
  403ee0:	032e032e 	.word	0x032e032e
  403ee4:	032e032e 	.word	0x032e032e
  403ee8:	03b0032e 	.word	0x03b0032e
  403eec:	03b003b0 	.word	0x03b003b0
  403ef0:	03b003b0 	.word	0x03b003b0
  403ef4:	03b003b0 	.word	0x03b003b0
  403ef8:	03b003b0 	.word	0x03b003b0
  403efc:	033d03b0 	.word	0x033d03b0
  403f00:	03b00365 	.word	0x03b00365
  403f04:	03b00365 	.word	0x03b00365
  403f08:	03b003b0 	.word	0x03b003b0
  403f0c:	02fe03b0 	.word	0x02fe03b0
  403f10:	03b003b0 	.word	0x03b003b0
  403f14:	03b00293 	.word	0x03b00293
  403f18:	03b003b0 	.word	0x03b003b0
  403f1c:	03b003b0 	.word	0x03b003b0
  403f20:	03b002b0 	.word	0x03b002b0
  403f24:	02c603b0 	.word	0x02c603b0
  403f28:	03b003b0 	.word	0x03b003b0
  403f2c:	03b003b0 	.word	0x03b003b0
  403f30:	03b003b0 	.word	0x03b003b0
  403f34:	03b003b0 	.word	0x03b003b0
  403f38:	03b003b0 	.word	0x03b003b0
  403f3c:	021802eb 	.word	0x021802eb
  403f40:	03650365 	.word	0x03650365
  403f44:	024e0365 	.word	0x024e0365
  403f48:	03b00218 	.word	0x03b00218
  403f4c:	023603b0 	.word	0x023603b0
  403f50:	026003b0 	.word	0x026003b0
  403f54:	039901e9 	.word	0x039901e9
  403f58:	03b00259 	.word	0x03b00259
  403f5c:	03b00272 	.word	0x03b00272
  403f60:	03b00076 	.word	0x03b00076
  403f64:	030503b0 	.word	0x030503b0
  403f68:	9809      	ldr	r0, [sp, #36]	; 0x24
  403f6a:	4649      	mov	r1, r9
  403f6c:	aa23      	add	r2, sp, #140	; 0x8c
  403f6e:	f004 f8d3 	bl	408118 <__ssprint_r>
  403f72:	b940      	cbnz	r0, 403f86 <_svfprintf_r+0x18a>
  403f74:	46c3      	mov	fp, r8
  403f76:	e785      	b.n	403e84 <_svfprintf_r+0x88>
  403f78:	9b25      	ldr	r3, [sp, #148]	; 0x94
  403f7a:	b123      	cbz	r3, 403f86 <_svfprintf_r+0x18a>
  403f7c:	9809      	ldr	r0, [sp, #36]	; 0x24
  403f7e:	4649      	mov	r1, r9
  403f80:	aa23      	add	r2, sp, #140	; 0x8c
  403f82:	f004 f8c9 	bl	408118 <__ssprint_r>
  403f86:	f8b9 300c 	ldrh.w	r3, [r9, #12]
  403f8a:	f013 0f40 	tst.w	r3, #64	; 0x40
  403f8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  403f90:	bf18      	it	ne
  403f92:	f04f 33ff 	movne.w	r3, #4294967295
  403f96:	4618      	mov	r0, r3
  403f98:	b041      	add	sp, #260	; 0x104
  403f9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403f9e:	9c08      	ldr	r4, [sp, #32]
  403fa0:	e773      	b.n	403e8a <_svfprintf_r+0x8e>
  403fa2:	9308      	str	r3, [sp, #32]
  403fa4:	46a4      	mov	ip, r4
  403fa6:	9b06      	ldr	r3, [sp, #24]
  403fa8:	0698      	lsls	r0, r3, #26
  403faa:	f140 823e 	bpl.w	40442a <_svfprintf_r+0x62e>
  403fae:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  403fb0:	2301      	movs	r3, #1
  403fb2:	3707      	adds	r7, #7
  403fb4:	f027 0207 	bic.w	r2, r7, #7
  403fb8:	f102 0108 	add.w	r1, r2, #8
  403fbc:	e9d2 4500 	ldrd	r4, r5, [r2]
  403fc0:	910c      	str	r1, [sp, #48]	; 0x30
  403fc2:	2200      	movs	r2, #0
  403fc4:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
  403fc8:	4617      	mov	r7, r2
  403fca:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
  403fce:	f1bc 0f00 	cmp.w	ip, #0
  403fd2:	db03      	blt.n	403fdc <_svfprintf_r+0x1e0>
  403fd4:	9a06      	ldr	r2, [sp, #24]
  403fd6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
  403fda:	9206      	str	r2, [sp, #24]
  403fdc:	f1bc 0f00 	cmp.w	ip, #0
  403fe0:	f040 83ac 	bne.w	40473c <_svfprintf_r+0x940>
  403fe4:	ea54 0205 	orrs.w	r2, r4, r5
  403fe8:	bf14      	ite	ne
  403fea:	2201      	movne	r2, #1
  403fec:	2200      	moveq	r2, #0
  403fee:	2a00      	cmp	r2, #0
  403ff0:	f040 83a4 	bne.w	40473c <_svfprintf_r+0x940>
  403ff4:	2b00      	cmp	r3, #0
  403ff6:	f040 8460 	bne.w	4048ba <_svfprintf_r+0xabe>
  403ffa:	9a06      	ldr	r2, [sp, #24]
  403ffc:	07d2      	lsls	r2, r2, #31
  403ffe:	f140 84fd 	bpl.w	4049fc <_svfprintf_r+0xc00>
  404002:	f50d 7a80 	add.w	sl, sp, #256	; 0x100
  404006:	2330      	movs	r3, #48	; 0x30
  404008:	f80a 3d41 	strb.w	r3, [sl, #-65]!
  40400c:	ebca 0408 	rsb	r4, sl, r8
  404010:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
  404014:	45a4      	cmp	ip, r4
  404016:	4663      	mov	r3, ip
  404018:	bfb8      	it	lt
  40401a:	4623      	movlt	r3, r4
  40401c:	9307      	str	r3, [sp, #28]
  40401e:	2300      	movs	r3, #0
  404020:	9311      	str	r3, [sp, #68]	; 0x44
  404022:	b117      	cbz	r7, 40402a <_svfprintf_r+0x22e>
  404024:	9b07      	ldr	r3, [sp, #28]
  404026:	3301      	adds	r3, #1
  404028:	9307      	str	r3, [sp, #28]
  40402a:	9b06      	ldr	r3, [sp, #24]
  40402c:	f013 0302 	ands.w	r3, r3, #2
  404030:	930d      	str	r3, [sp, #52]	; 0x34
  404032:	d002      	beq.n	40403a <_svfprintf_r+0x23e>
  404034:	9b07      	ldr	r3, [sp, #28]
  404036:	3302      	adds	r3, #2
  404038:	9307      	str	r3, [sp, #28]
  40403a:	9b06      	ldr	r3, [sp, #24]
  40403c:	f013 0384 	ands.w	r3, r3, #132	; 0x84
  404040:	930e      	str	r3, [sp, #56]	; 0x38
  404042:	f040 8307 	bne.w	404654 <_svfprintf_r+0x858>
  404046:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  404048:	9a07      	ldr	r2, [sp, #28]
  40404a:	ebc2 0a03 	rsb	sl, r2, r3
  40404e:	f1ba 0f00 	cmp.w	sl, #0
  404052:	f340 82ff 	ble.w	404654 <_svfprintf_r+0x858>
  404056:	f1ba 0f10 	cmp.w	sl, #16
  40405a:	9925      	ldr	r1, [sp, #148]	; 0x94
  40405c:	f340 87dd 	ble.w	40501a <_svfprintf_r+0x121e>
  404060:	4fbf      	ldr	r7, [pc, #764]	; (404360 <_svfprintf_r+0x564>)
  404062:	2510      	movs	r5, #16
  404064:	9618      	str	r6, [sp, #96]	; 0x60
  404066:	9a24      	ldr	r2, [sp, #144]	; 0x90
  404068:	463e      	mov	r6, r7
  40406a:	4627      	mov	r7, r4
  40406c:	9c09      	ldr	r4, [sp, #36]	; 0x24
  40406e:	e004      	b.n	40407a <_svfprintf_r+0x27e>
  404070:	f1aa 0a10 	sub.w	sl, sl, #16
  404074:	f1ba 0f10 	cmp.w	sl, #16
  404078:	dd1b      	ble.n	4040b2 <_svfprintf_r+0x2b6>
  40407a:	3201      	adds	r2, #1
  40407c:	3110      	adds	r1, #16
  40407e:	f8cb 6000 	str.w	r6, [fp]
  404082:	f10b 0b08 	add.w	fp, fp, #8
  404086:	2a07      	cmp	r2, #7
  404088:	f84b 5c04 	str.w	r5, [fp, #-4]
  40408c:	9125      	str	r1, [sp, #148]	; 0x94
  40408e:	9224      	str	r2, [sp, #144]	; 0x90
  404090:	ddee      	ble.n	404070 <_svfprintf_r+0x274>
  404092:	4620      	mov	r0, r4
  404094:	4649      	mov	r1, r9
  404096:	aa23      	add	r2, sp, #140	; 0x8c
  404098:	46c3      	mov	fp, r8
  40409a:	f004 f83d 	bl	408118 <__ssprint_r>
  40409e:	2800      	cmp	r0, #0
  4040a0:	f47f af71 	bne.w	403f86 <_svfprintf_r+0x18a>
  4040a4:	f1aa 0a10 	sub.w	sl, sl, #16
  4040a8:	9925      	ldr	r1, [sp, #148]	; 0x94
  4040aa:	9a24      	ldr	r2, [sp, #144]	; 0x90
  4040ac:	f1ba 0f10 	cmp.w	sl, #16
  4040b0:	dce3      	bgt.n	40407a <_svfprintf_r+0x27e>
  4040b2:	463c      	mov	r4, r7
  4040b4:	4637      	mov	r7, r6
  4040b6:	9e18      	ldr	r6, [sp, #96]	; 0x60
  4040b8:	3201      	adds	r2, #1
  4040ba:	eb0a 0c01 	add.w	ip, sl, r1
  4040be:	f8cb 7000 	str.w	r7, [fp]
  4040c2:	2a07      	cmp	r2, #7
  4040c4:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
  4040c8:	9224      	str	r2, [sp, #144]	; 0x90
  4040ca:	f8cb a004 	str.w	sl, [fp, #4]
  4040ce:	f300 82b6 	bgt.w	40463e <_svfprintf_r+0x842>
  4040d2:	f10b 0b08 	add.w	fp, fp, #8
  4040d6:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  4040da:	b197      	cbz	r7, 404102 <_svfprintf_r+0x306>
  4040dc:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4040de:	2201      	movs	r2, #1
  4040e0:	f10c 0c01 	add.w	ip, ip, #1
  4040e4:	f10d 016f 	add.w	r1, sp, #111	; 0x6f
  4040e8:	4413      	add	r3, r2
  4040ea:	f8cb 2004 	str.w	r2, [fp, #4]
  4040ee:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
  4040f2:	2b07      	cmp	r3, #7
  4040f4:	f8cb 1000 	str.w	r1, [fp]
  4040f8:	9324      	str	r3, [sp, #144]	; 0x90
  4040fa:	f300 83fb 	bgt.w	4048f4 <_svfprintf_r+0xaf8>
  4040fe:	f10b 0b08 	add.w	fp, fp, #8
  404102:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  404104:	b18b      	cbz	r3, 40412a <_svfprintf_r+0x32e>
  404106:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404108:	f10c 0c02 	add.w	ip, ip, #2
  40410c:	a91c      	add	r1, sp, #112	; 0x70
  40410e:	2202      	movs	r2, #2
  404110:	3301      	adds	r3, #1
  404112:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
  404116:	f8cb 1000 	str.w	r1, [fp]
  40411a:	2b07      	cmp	r3, #7
  40411c:	9324      	str	r3, [sp, #144]	; 0x90
  40411e:	f8cb 2004 	str.w	r2, [fp, #4]
  404122:	f300 83db 	bgt.w	4048dc <_svfprintf_r+0xae0>
  404126:	f10b 0b08 	add.w	fp, fp, #8
  40412a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40412c:	2b80      	cmp	r3, #128	; 0x80
  40412e:	f000 8321 	beq.w	404774 <_svfprintf_r+0x978>
  404132:	9b10      	ldr	r3, [sp, #64]	; 0x40
  404134:	1b1f      	subs	r7, r3, r4
  404136:	2f00      	cmp	r7, #0
  404138:	dd37      	ble.n	4041aa <_svfprintf_r+0x3ae>
  40413a:	2f10      	cmp	r7, #16
  40413c:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40413e:	f340 85ec 	ble.w	404d1a <_svfprintf_r+0xf1e>
  404142:	940d      	str	r4, [sp, #52]	; 0x34
  404144:	f04f 0a10 	mov.w	sl, #16
  404148:	4d86      	ldr	r5, [pc, #536]	; (404364 <_svfprintf_r+0x568>)
  40414a:	4662      	mov	r2, ip
  40414c:	9c09      	ldr	r4, [sp, #36]	; 0x24
  40414e:	e002      	b.n	404156 <_svfprintf_r+0x35a>
  404150:	3f10      	subs	r7, #16
  404152:	2f10      	cmp	r7, #16
  404154:	dd19      	ble.n	40418a <_svfprintf_r+0x38e>
  404156:	3301      	adds	r3, #1
  404158:	3210      	adds	r2, #16
  40415a:	f8cb 5000 	str.w	r5, [fp]
  40415e:	f10b 0b08 	add.w	fp, fp, #8
  404162:	2b07      	cmp	r3, #7
  404164:	f84b ac04 	str.w	sl, [fp, #-4]
  404168:	9225      	str	r2, [sp, #148]	; 0x94
  40416a:	9324      	str	r3, [sp, #144]	; 0x90
  40416c:	ddf0      	ble.n	404150 <_svfprintf_r+0x354>
  40416e:	4620      	mov	r0, r4
  404170:	4649      	mov	r1, r9
  404172:	aa23      	add	r2, sp, #140	; 0x8c
  404174:	46c3      	mov	fp, r8
  404176:	f003 ffcf 	bl	408118 <__ssprint_r>
  40417a:	2800      	cmp	r0, #0
  40417c:	f47f af03 	bne.w	403f86 <_svfprintf_r+0x18a>
  404180:	3f10      	subs	r7, #16
  404182:	9a25      	ldr	r2, [sp, #148]	; 0x94
  404184:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404186:	2f10      	cmp	r7, #16
  404188:	dce5      	bgt.n	404156 <_svfprintf_r+0x35a>
  40418a:	9c0d      	ldr	r4, [sp, #52]	; 0x34
  40418c:	4694      	mov	ip, r2
  40418e:	3301      	adds	r3, #1
  404190:	44bc      	add	ip, r7
  404192:	f8cb 5000 	str.w	r5, [fp]
  404196:	2b07      	cmp	r3, #7
  404198:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
  40419c:	9324      	str	r3, [sp, #144]	; 0x90
  40419e:	f8cb 7004 	str.w	r7, [fp, #4]
  4041a2:	f300 838f 	bgt.w	4048c4 <_svfprintf_r+0xac8>
  4041a6:	f10b 0b08 	add.w	fp, fp, #8
  4041aa:	9b06      	ldr	r3, [sp, #24]
  4041ac:	05df      	lsls	r7, r3, #23
  4041ae:	f100 8254 	bmi.w	40465a <_svfprintf_r+0x85e>
  4041b2:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4041b4:	44a4      	add	ip, r4
  4041b6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4041b8:	3301      	adds	r3, #1
  4041ba:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
  4041be:	f8cb 2000 	str.w	r2, [fp]
  4041c2:	2b07      	cmp	r3, #7
  4041c4:	f8cb 4004 	str.w	r4, [fp, #4]
  4041c8:	9324      	str	r3, [sp, #144]	; 0x90
  4041ca:	f300 8360 	bgt.w	40488e <_svfprintf_r+0xa92>
  4041ce:	f10b 0b08 	add.w	fp, fp, #8
  4041d2:	9b06      	ldr	r3, [sp, #24]
  4041d4:	075a      	lsls	r2, r3, #29
  4041d6:	d540      	bpl.n	40425a <_svfprintf_r+0x45e>
  4041d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  4041da:	9a07      	ldr	r2, [sp, #28]
  4041dc:	1a9c      	subs	r4, r3, r2
  4041de:	2c00      	cmp	r4, #0
  4041e0:	dd3b      	ble.n	40425a <_svfprintf_r+0x45e>
  4041e2:	2c10      	cmp	r4, #16
  4041e4:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4041e6:	f340 876b 	ble.w	4050c0 <_svfprintf_r+0x12c4>
  4041ea:	2510      	movs	r5, #16
  4041ec:	4f5c      	ldr	r7, [pc, #368]	; (404360 <_svfprintf_r+0x564>)
  4041ee:	4662      	mov	r2, ip
  4041f0:	9e09      	ldr	r6, [sp, #36]	; 0x24
  4041f2:	e002      	b.n	4041fa <_svfprintf_r+0x3fe>
  4041f4:	3c10      	subs	r4, #16
  4041f6:	2c10      	cmp	r4, #16
  4041f8:	dd19      	ble.n	40422e <_svfprintf_r+0x432>
  4041fa:	3301      	adds	r3, #1
  4041fc:	3210      	adds	r2, #16
  4041fe:	f8cb 7000 	str.w	r7, [fp]
  404202:	f10b 0b08 	add.w	fp, fp, #8
  404206:	2b07      	cmp	r3, #7
  404208:	f84b 5c04 	str.w	r5, [fp, #-4]
  40420c:	9225      	str	r2, [sp, #148]	; 0x94
  40420e:	9324      	str	r3, [sp, #144]	; 0x90
  404210:	ddf0      	ble.n	4041f4 <_svfprintf_r+0x3f8>
  404212:	4630      	mov	r0, r6
  404214:	4649      	mov	r1, r9
  404216:	aa23      	add	r2, sp, #140	; 0x8c
  404218:	46c3      	mov	fp, r8
  40421a:	f003 ff7d 	bl	408118 <__ssprint_r>
  40421e:	2800      	cmp	r0, #0
  404220:	f47f aeb1 	bne.w	403f86 <_svfprintf_r+0x18a>
  404224:	3c10      	subs	r4, #16
  404226:	9a25      	ldr	r2, [sp, #148]	; 0x94
  404228:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40422a:	2c10      	cmp	r4, #16
  40422c:	dce5      	bgt.n	4041fa <_svfprintf_r+0x3fe>
  40422e:	4694      	mov	ip, r2
  404230:	3301      	adds	r3, #1
  404232:	44a4      	add	ip, r4
  404234:	f8cb 7000 	str.w	r7, [fp]
  404238:	2b07      	cmp	r3, #7
  40423a:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
  40423e:	9324      	str	r3, [sp, #144]	; 0x90
  404240:	f8cb 4004 	str.w	r4, [fp, #4]
  404244:	dd09      	ble.n	40425a <_svfprintf_r+0x45e>
  404246:	9809      	ldr	r0, [sp, #36]	; 0x24
  404248:	4649      	mov	r1, r9
  40424a:	aa23      	add	r2, sp, #140	; 0x8c
  40424c:	f003 ff64 	bl	408118 <__ssprint_r>
  404250:	2800      	cmp	r0, #0
  404252:	f47f ae98 	bne.w	403f86 <_svfprintf_r+0x18a>
  404256:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
  40425a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40425c:	9a07      	ldr	r2, [sp, #28]
  40425e:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404260:	428a      	cmp	r2, r1
  404262:	bfac      	ite	ge
  404264:	189b      	addge	r3, r3, r2
  404266:	185b      	addlt	r3, r3, r1
  404268:	930a      	str	r3, [sp, #40]	; 0x28
  40426a:	f1bc 0f00 	cmp.w	ip, #0
  40426e:	f040 831a 	bne.w	4048a6 <_svfprintf_r+0xaaa>
  404272:	2300      	movs	r3, #0
  404274:	46c3      	mov	fp, r8
  404276:	9324      	str	r3, [sp, #144]	; 0x90
  404278:	e5e6      	b.n	403e48 <_svfprintf_r+0x4c>
  40427a:	4619      	mov	r1, r3
  40427c:	9806      	ldr	r0, [sp, #24]
  40427e:	781e      	ldrb	r6, [r3, #0]
  404280:	f040 0004 	orr.w	r0, r0, #4
  404284:	9006      	str	r0, [sp, #24]
  404286:	e60e      	b.n	403ea6 <_svfprintf_r+0xaa>
  404288:	9308      	str	r3, [sp, #32]
  40428a:	46a4      	mov	ip, r4
  40428c:	9b06      	ldr	r3, [sp, #24]
  40428e:	f013 0320 	ands.w	r3, r3, #32
  404292:	f000 80ae 	beq.w	4043f2 <_svfprintf_r+0x5f6>
  404296:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  404298:	2300      	movs	r3, #0
  40429a:	3707      	adds	r7, #7
  40429c:	f027 0207 	bic.w	r2, r7, #7
  4042a0:	f102 0108 	add.w	r1, r2, #8
  4042a4:	e9d2 4500 	ldrd	r4, r5, [r2]
  4042a8:	910c      	str	r1, [sp, #48]	; 0x30
  4042aa:	e68a      	b.n	403fc2 <_svfprintf_r+0x1c6>
  4042ac:	781e      	ldrb	r6, [r3, #0]
  4042ae:	4619      	mov	r1, r3
  4042b0:	222b      	movs	r2, #43	; 0x2b
  4042b2:	e5f8      	b.n	403ea6 <_svfprintf_r+0xaa>
  4042b4:	781e      	ldrb	r6, [r3, #0]
  4042b6:	1c59      	adds	r1, r3, #1
  4042b8:	2e2a      	cmp	r6, #42	; 0x2a
  4042ba:	f001 8006 	beq.w	4052ca <_svfprintf_r+0x14ce>
  4042be:	f1a6 0030 	sub.w	r0, r6, #48	; 0x30
  4042c2:	460b      	mov	r3, r1
  4042c4:	2400      	movs	r4, #0
  4042c6:	2809      	cmp	r0, #9
  4042c8:	f63f adee 	bhi.w	403ea8 <_svfprintf_r+0xac>
  4042cc:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  4042d0:	f813 6b01 	ldrb.w	r6, [r3], #1
  4042d4:	eb00 0444 	add.w	r4, r0, r4, lsl #1
  4042d8:	f1a6 0030 	sub.w	r0, r6, #48	; 0x30
  4042dc:	2809      	cmp	r0, #9
  4042de:	d9f5      	bls.n	4042cc <_svfprintf_r+0x4d0>
  4042e0:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
  4042e4:	e5e0      	b.n	403ea8 <_svfprintf_r+0xac>
  4042e6:	9308      	str	r3, [sp, #32]
  4042e8:	46a4      	mov	ip, r4
  4042ea:	9b06      	ldr	r3, [sp, #24]
  4042ec:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
  4042f0:	069c      	lsls	r4, r3, #26
  4042f2:	f140 8129 	bpl.w	404548 <_svfprintf_r+0x74c>
  4042f6:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  4042f8:	3707      	adds	r7, #7
  4042fa:	f027 0707 	bic.w	r7, r7, #7
  4042fe:	e9d7 2300 	ldrd	r2, r3, [r7]
  404302:	f107 0108 	add.w	r1, r7, #8
  404306:	4614      	mov	r4, r2
  404308:	461d      	mov	r5, r3
  40430a:	910c      	str	r1, [sp, #48]	; 0x30
  40430c:	2a00      	cmp	r2, #0
  40430e:	f173 0300 	sbcs.w	r3, r3, #0
  404312:	f2c0 812a 	blt.w	40456a <_svfprintf_r+0x76e>
  404316:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  40431a:	2301      	movs	r3, #1
  40431c:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
  404320:	e655      	b.n	403fce <_svfprintf_r+0x1d2>
  404322:	781e      	ldrb	r6, [r3, #0]
  404324:	9906      	ldr	r1, [sp, #24]
  404326:	2e6c      	cmp	r6, #108	; 0x6c
  404328:	f000 8557 	beq.w	404dda <_svfprintf_r+0xfde>
  40432c:	f041 0110 	orr.w	r1, r1, #16
  404330:	9106      	str	r1, [sp, #24]
  404332:	4619      	mov	r1, r3
  404334:	e5b7      	b.n	403ea6 <_svfprintf_r+0xaa>
  404336:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  404338:	6829      	ldr	r1, [r5, #0]
  40433a:	4608      	mov	r0, r1
  40433c:	910b      	str	r1, [sp, #44]	; 0x2c
  40433e:	4629      	mov	r1, r5
  404340:	2800      	cmp	r0, #0
  404342:	f101 0104 	add.w	r1, r1, #4
  404346:	f2c0 854f 	blt.w	404de8 <_svfprintf_r+0xfec>
  40434a:	910c      	str	r1, [sp, #48]	; 0x30
  40434c:	4619      	mov	r1, r3
  40434e:	781e      	ldrb	r6, [r3, #0]
  404350:	e5a9      	b.n	403ea6 <_svfprintf_r+0xaa>
  404352:	9906      	ldr	r1, [sp, #24]
  404354:	f041 0140 	orr.w	r1, r1, #64	; 0x40
  404358:	9106      	str	r1, [sp, #24]
  40435a:	4619      	mov	r1, r3
  40435c:	781e      	ldrb	r6, [r3, #0]
  40435e:	e5a2      	b.n	403ea6 <_svfprintf_r+0xaa>
  404360:	00409480 	.word	0x00409480
  404364:	00409470 	.word	0x00409470
  404368:	9906      	ldr	r1, [sp, #24]
  40436a:	f041 0120 	orr.w	r1, r1, #32
  40436e:	9106      	str	r1, [sp, #24]
  404370:	4619      	mov	r1, r3
  404372:	781e      	ldrb	r6, [r3, #0]
  404374:	e597      	b.n	403ea6 <_svfprintf_r+0xaa>
  404376:	9308      	str	r3, [sp, #32]
  404378:	9b06      	ldr	r3, [sp, #24]
  40437a:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
  40437e:	069e      	lsls	r6, r3, #26
  404380:	f140 84a4 	bpl.w	404ccc <_svfprintf_r+0xed0>
  404384:	990a      	ldr	r1, [sp, #40]	; 0x28
  404386:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  404388:	17cd      	asrs	r5, r1, #31
  40438a:	4608      	mov	r0, r1
  40438c:	6813      	ldr	r3, [r2, #0]
  40438e:	3204      	adds	r2, #4
  404390:	4629      	mov	r1, r5
  404392:	920c      	str	r2, [sp, #48]	; 0x30
  404394:	e9c3 0100 	strd	r0, r1, [r3]
  404398:	e556      	b.n	403e48 <_svfprintf_r+0x4c>
  40439a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  40439c:	2500      	movs	r5, #0
  40439e:	9308      	str	r3, [sp, #32]
  4043a0:	6813      	ldr	r3, [r2, #0]
  4043a2:	1d17      	adds	r7, r2, #4
  4043a4:	f88d 506f 	strb.w	r5, [sp, #111]	; 0x6f
  4043a8:	930f      	str	r3, [sp, #60]	; 0x3c
  4043aa:	2b00      	cmp	r3, #0
  4043ac:	f000 867a 	beq.w	4050a4 <_svfprintf_r+0x12a8>
  4043b0:	2c00      	cmp	r4, #0
  4043b2:	980f      	ldr	r0, [sp, #60]	; 0x3c
  4043b4:	f2c0 8624 	blt.w	405000 <_svfprintf_r+0x1204>
  4043b8:	4629      	mov	r1, r5
  4043ba:	4622      	mov	r2, r4
  4043bc:	f002 ffe8 	bl	407390 <memchr>
  4043c0:	2800      	cmp	r0, #0
  4043c2:	f000 86df 	beq.w	405184 <_svfprintf_r+0x1388>
  4043c6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4043c8:	970c      	str	r7, [sp, #48]	; 0x30
  4043ca:	1ac4      	subs	r4, r0, r3
  4043cc:	9510      	str	r5, [sp, #64]	; 0x40
  4043ce:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  4043d2:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
  4043d6:	9511      	str	r5, [sp, #68]	; 0x44
  4043d8:	9307      	str	r3, [sp, #28]
  4043da:	e622      	b.n	404022 <_svfprintf_r+0x226>
  4043dc:	9308      	str	r3, [sp, #32]
  4043de:	46a4      	mov	ip, r4
  4043e0:	9b06      	ldr	r3, [sp, #24]
  4043e2:	f043 0310 	orr.w	r3, r3, #16
  4043e6:	9306      	str	r3, [sp, #24]
  4043e8:	9b06      	ldr	r3, [sp, #24]
  4043ea:	f013 0320 	ands.w	r3, r3, #32
  4043ee:	f47f af52 	bne.w	404296 <_svfprintf_r+0x49a>
  4043f2:	9a06      	ldr	r2, [sp, #24]
  4043f4:	f012 0210 	ands.w	r2, r2, #16
  4043f8:	f040 8352 	bne.w	404aa0 <_svfprintf_r+0xca4>
  4043fc:	9b06      	ldr	r3, [sp, #24]
  4043fe:	f013 0340 	ands.w	r3, r3, #64	; 0x40
  404402:	f000 834d 	beq.w	404aa0 <_svfprintf_r+0xca4>
  404406:	990c      	ldr	r1, [sp, #48]	; 0x30
  404408:	4613      	mov	r3, r2
  40440a:	2500      	movs	r5, #0
  40440c:	460a      	mov	r2, r1
  40440e:	880c      	ldrh	r4, [r1, #0]
  404410:	3204      	adds	r2, #4
  404412:	920c      	str	r2, [sp, #48]	; 0x30
  404414:	e5d5      	b.n	403fc2 <_svfprintf_r+0x1c6>
  404416:	9308      	str	r3, [sp, #32]
  404418:	46a4      	mov	ip, r4
  40441a:	9b06      	ldr	r3, [sp, #24]
  40441c:	f043 0310 	orr.w	r3, r3, #16
  404420:	9306      	str	r3, [sp, #24]
  404422:	9b06      	ldr	r3, [sp, #24]
  404424:	0698      	lsls	r0, r3, #26
  404426:	f53f adc2 	bmi.w	403fae <_svfprintf_r+0x1b2>
  40442a:	9b06      	ldr	r3, [sp, #24]
  40442c:	06d9      	lsls	r1, r3, #27
  40442e:	f140 8432 	bpl.w	404c96 <_svfprintf_r+0xe9a>
  404432:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  404434:	4613      	mov	r3, r2
  404436:	3204      	adds	r2, #4
  404438:	681c      	ldr	r4, [r3, #0]
  40443a:	2500      	movs	r5, #0
  40443c:	2301      	movs	r3, #1
  40443e:	920c      	str	r2, [sp, #48]	; 0x30
  404440:	e5bf      	b.n	403fc2 <_svfprintf_r+0x1c6>
  404442:	9308      	str	r3, [sp, #32]
  404444:	46a4      	mov	ip, r4
  404446:	4bb7      	ldr	r3, [pc, #732]	; (404724 <_svfprintf_r+0x928>)
  404448:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
  40444c:	9315      	str	r3, [sp, #84]	; 0x54
  40444e:	9b06      	ldr	r3, [sp, #24]
  404450:	069a      	lsls	r2, r3, #26
  404452:	d53e      	bpl.n	4044d2 <_svfprintf_r+0x6d6>
  404454:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  404456:	3707      	adds	r7, #7
  404458:	f027 0307 	bic.w	r3, r7, #7
  40445c:	f103 0208 	add.w	r2, r3, #8
  404460:	e9d3 4500 	ldrd	r4, r5, [r3]
  404464:	920c      	str	r2, [sp, #48]	; 0x30
  404466:	9b06      	ldr	r3, [sp, #24]
  404468:	07df      	lsls	r7, r3, #31
  40446a:	f140 8268 	bpl.w	40493e <_svfprintf_r+0xb42>
  40446e:	ea54 0305 	orrs.w	r3, r4, r5
  404472:	f000 8264 	beq.w	40493e <_svfprintf_r+0xb42>
  404476:	9b06      	ldr	r3, [sp, #24]
  404478:	2230      	movs	r2, #48	; 0x30
  40447a:	f88d 6071 	strb.w	r6, [sp, #113]	; 0x71
  40447e:	f043 0302 	orr.w	r3, r3, #2
  404482:	f88d 2070 	strb.w	r2, [sp, #112]	; 0x70
  404486:	9306      	str	r3, [sp, #24]
  404488:	2302      	movs	r3, #2
  40448a:	e59a      	b.n	403fc2 <_svfprintf_r+0x1c6>
  40448c:	990c      	ldr	r1, [sp, #48]	; 0x30
  40448e:	2001      	movs	r0, #1
  404490:	9308      	str	r3, [sp, #32]
  404492:	2300      	movs	r3, #0
  404494:	680a      	ldr	r2, [r1, #0]
  404496:	3104      	adds	r1, #4
  404498:	461f      	mov	r7, r3
  40449a:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  40449e:	9310      	str	r3, [sp, #64]	; 0x40
  4044a0:	4604      	mov	r4, r0
  4044a2:	9311      	str	r3, [sp, #68]	; 0x44
  4044a4:	ab26      	add	r3, sp, #152	; 0x98
  4044a6:	9007      	str	r0, [sp, #28]
  4044a8:	910c      	str	r1, [sp, #48]	; 0x30
  4044aa:	f88d 2098 	strb.w	r2, [sp, #152]	; 0x98
  4044ae:	930f      	str	r3, [sp, #60]	; 0x3c
  4044b0:	e5bb      	b.n	40402a <_svfprintf_r+0x22e>
  4044b2:	9906      	ldr	r1, [sp, #24]
  4044b4:	f041 0108 	orr.w	r1, r1, #8
  4044b8:	9106      	str	r1, [sp, #24]
  4044ba:	4619      	mov	r1, r3
  4044bc:	781e      	ldrb	r6, [r3, #0]
  4044be:	e4f2      	b.n	403ea6 <_svfprintf_r+0xaa>
  4044c0:	9308      	str	r3, [sp, #32]
  4044c2:	46a4      	mov	ip, r4
  4044c4:	4b98      	ldr	r3, [pc, #608]	; (404728 <_svfprintf_r+0x92c>)
  4044c6:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
  4044ca:	9315      	str	r3, [sp, #84]	; 0x54
  4044cc:	9b06      	ldr	r3, [sp, #24]
  4044ce:	069a      	lsls	r2, r3, #26
  4044d0:	d4c0      	bmi.n	404454 <_svfprintf_r+0x658>
  4044d2:	9b06      	ldr	r3, [sp, #24]
  4044d4:	06db      	lsls	r3, r3, #27
  4044d6:	f140 83ec 	bpl.w	404cb2 <_svfprintf_r+0xeb6>
  4044da:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  4044dc:	2500      	movs	r5, #0
  4044de:	4613      	mov	r3, r2
  4044e0:	6814      	ldr	r4, [r2, #0]
  4044e2:	3304      	adds	r3, #4
  4044e4:	930c      	str	r3, [sp, #48]	; 0x30
  4044e6:	e7be      	b.n	404466 <_svfprintf_r+0x66a>
  4044e8:	781e      	ldrb	r6, [r3, #0]
  4044ea:	4619      	mov	r1, r3
  4044ec:	2a00      	cmp	r2, #0
  4044ee:	f47f acda 	bne.w	403ea6 <_svfprintf_r+0xaa>
  4044f2:	2220      	movs	r2, #32
  4044f4:	e4d7      	b.n	403ea6 <_svfprintf_r+0xaa>
  4044f6:	9906      	ldr	r1, [sp, #24]
  4044f8:	f041 0101 	orr.w	r1, r1, #1
  4044fc:	9106      	str	r1, [sp, #24]
  4044fe:	4619      	mov	r1, r3
  404500:	781e      	ldrb	r6, [r3, #0]
  404502:	e4d0      	b.n	403ea6 <_svfprintf_r+0xaa>
  404504:	9906      	ldr	r1, [sp, #24]
  404506:	f041 0180 	orr.w	r1, r1, #128	; 0x80
  40450a:	9106      	str	r1, [sp, #24]
  40450c:	4619      	mov	r1, r3
  40450e:	781e      	ldrb	r6, [r3, #0]
  404510:	e4c9      	b.n	403ea6 <_svfprintf_r+0xaa>
  404512:	f1a6 0030 	sub.w	r0, r6, #48	; 0x30
  404516:	2100      	movs	r1, #0
  404518:	eb01 0181 	add.w	r1, r1, r1, lsl #2
  40451c:	f813 6b01 	ldrb.w	r6, [r3], #1
  404520:	eb00 0141 	add.w	r1, r0, r1, lsl #1
  404524:	f1a6 0030 	sub.w	r0, r6, #48	; 0x30
  404528:	2809      	cmp	r0, #9
  40452a:	d9f5      	bls.n	404518 <_svfprintf_r+0x71c>
  40452c:	910b      	str	r1, [sp, #44]	; 0x2c
  40452e:	e4bb      	b.n	403ea8 <_svfprintf_r+0xac>
  404530:	9308      	str	r3, [sp, #32]
  404532:	46a4      	mov	ip, r4
  404534:	9b06      	ldr	r3, [sp, #24]
  404536:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
  40453a:	f043 0310 	orr.w	r3, r3, #16
  40453e:	9306      	str	r3, [sp, #24]
  404540:	9b06      	ldr	r3, [sp, #24]
  404542:	069c      	lsls	r4, r3, #26
  404544:	f53f aed7 	bmi.w	4042f6 <_svfprintf_r+0x4fa>
  404548:	9b06      	ldr	r3, [sp, #24]
  40454a:	06d8      	lsls	r0, r3, #27
  40454c:	f140 83d5 	bpl.w	404cfa <_svfprintf_r+0xefe>
  404550:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  404552:	4613      	mov	r3, r2
  404554:	681c      	ldr	r4, [r3, #0]
  404556:	3304      	adds	r3, #4
  404558:	17e5      	asrs	r5, r4, #31
  40455a:	4622      	mov	r2, r4
  40455c:	930c      	str	r3, [sp, #48]	; 0x30
  40455e:	2a00      	cmp	r2, #0
  404560:	462b      	mov	r3, r5
  404562:	f173 0300 	sbcs.w	r3, r3, #0
  404566:	f6bf aed6 	bge.w	404316 <_svfprintf_r+0x51a>
  40456a:	272d      	movs	r7, #45	; 0x2d
  40456c:	4264      	negs	r4, r4
  40456e:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
  404572:	f04f 0301 	mov.w	r3, #1
  404576:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
  40457a:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
  40457e:	e526      	b.n	403fce <_svfprintf_r+0x1d2>
  404580:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  404582:	9308      	str	r3, [sp, #32]
  404584:	3707      	adds	r7, #7
  404586:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
  40458a:	f027 0307 	bic.w	r3, r7, #7
  40458e:	f103 0208 	add.w	r2, r3, #8
  404592:	920c      	str	r2, [sp, #48]	; 0x30
  404594:	681a      	ldr	r2, [r3, #0]
  404596:	9213      	str	r2, [sp, #76]	; 0x4c
  404598:	685b      	ldr	r3, [r3, #4]
  40459a:	9813      	ldr	r0, [sp, #76]	; 0x4c
  40459c:	9314      	str	r3, [sp, #80]	; 0x50
  40459e:	9914      	ldr	r1, [sp, #80]	; 0x50
  4045a0:	9407      	str	r4, [sp, #28]
  4045a2:	f003 fd41 	bl	408028 <__fpclassifyd>
  4045a6:	2801      	cmp	r0, #1
  4045a8:	f8dd c01c 	ldr.w	ip, [sp, #28]
  4045ac:	f040 8355 	bne.w	404c5a <_svfprintf_r+0xe5e>
  4045b0:	9813      	ldr	r0, [sp, #76]	; 0x4c
  4045b2:	2200      	movs	r2, #0
  4045b4:	2300      	movs	r3, #0
  4045b6:	9914      	ldr	r1, [sp, #80]	; 0x50
  4045b8:	f004 fb9a 	bl	408cf0 <__aeabi_dcmplt>
  4045bc:	2800      	cmp	r0, #0
  4045be:	f040 8582 	bne.w	4050c6 <_svfprintf_r+0x12ca>
  4045c2:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  4045c6:	2303      	movs	r3, #3
  4045c8:	9806      	ldr	r0, [sp, #24]
  4045ca:	4a58      	ldr	r2, [pc, #352]	; (40472c <_svfprintf_r+0x930>)
  4045cc:	2100      	movs	r1, #0
  4045ce:	461c      	mov	r4, r3
  4045d0:	9307      	str	r3, [sp, #28]
  4045d2:	4b57      	ldr	r3, [pc, #348]	; (404730 <_svfprintf_r+0x934>)
  4045d4:	f020 0080 	bic.w	r0, r0, #128	; 0x80
  4045d8:	9110      	str	r1, [sp, #64]	; 0x40
  4045da:	2e47      	cmp	r6, #71	; 0x47
  4045dc:	bfd8      	it	le
  4045de:	461a      	movle	r2, r3
  4045e0:	9006      	str	r0, [sp, #24]
  4045e2:	9111      	str	r1, [sp, #68]	; 0x44
  4045e4:	920f      	str	r2, [sp, #60]	; 0x3c
  4045e6:	e51c      	b.n	404022 <_svfprintf_r+0x226>
  4045e8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  4045ea:	2230      	movs	r2, #48	; 0x30
  4045ec:	9806      	ldr	r0, [sp, #24]
  4045ee:	46a4      	mov	ip, r4
  4045f0:	4629      	mov	r1, r5
  4045f2:	9308      	str	r3, [sp, #32]
  4045f4:	2378      	movs	r3, #120	; 0x78
  4045f6:	f040 0002 	orr.w	r0, r0, #2
  4045fa:	3104      	adds	r1, #4
  4045fc:	682c      	ldr	r4, [r5, #0]
  4045fe:	461e      	mov	r6, r3
  404600:	f88d 3071 	strb.w	r3, [sp, #113]	; 0x71
  404604:	4b48      	ldr	r3, [pc, #288]	; (404728 <_svfprintf_r+0x92c>)
  404606:	2500      	movs	r5, #0
  404608:	9006      	str	r0, [sp, #24]
  40460a:	9315      	str	r3, [sp, #84]	; 0x54
  40460c:	2302      	movs	r3, #2
  40460e:	910c      	str	r1, [sp, #48]	; 0x30
  404610:	f88d 2070 	strb.w	r2, [sp, #112]	; 0x70
  404614:	e4d5      	b.n	403fc2 <_svfprintf_r+0x1c6>
  404616:	9308      	str	r3, [sp, #32]
  404618:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
  40461c:	2e00      	cmp	r6, #0
  40461e:	f43f acab 	beq.w	403f78 <_svfprintf_r+0x17c>
  404622:	2300      	movs	r3, #0
  404624:	2201      	movs	r2, #1
  404626:	a926      	add	r1, sp, #152	; 0x98
  404628:	f88d 6098 	strb.w	r6, [sp, #152]	; 0x98
  40462c:	9207      	str	r2, [sp, #28]
  40462e:	461f      	mov	r7, r3
  404630:	910f      	str	r1, [sp, #60]	; 0x3c
  404632:	4614      	mov	r4, r2
  404634:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  404638:	9310      	str	r3, [sp, #64]	; 0x40
  40463a:	9311      	str	r3, [sp, #68]	; 0x44
  40463c:	e4f5      	b.n	40402a <_svfprintf_r+0x22e>
  40463e:	9809      	ldr	r0, [sp, #36]	; 0x24
  404640:	4649      	mov	r1, r9
  404642:	aa23      	add	r2, sp, #140	; 0x8c
  404644:	f003 fd68 	bl	408118 <__ssprint_r>
  404648:	2800      	cmp	r0, #0
  40464a:	f47f ac9c 	bne.w	403f86 <_svfprintf_r+0x18a>
  40464e:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  404652:	46c3      	mov	fp, r8
  404654:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
  404658:	e53f      	b.n	4040da <_svfprintf_r+0x2de>
  40465a:	2e65      	cmp	r6, #101	; 0x65
  40465c:	f340 80c9 	ble.w	4047f2 <_svfprintf_r+0x9f6>
  404660:	9813      	ldr	r0, [sp, #76]	; 0x4c
  404662:	2200      	movs	r2, #0
  404664:	2300      	movs	r3, #0
  404666:	9914      	ldr	r1, [sp, #80]	; 0x50
  404668:	f8cd c034 	str.w	ip, [sp, #52]	; 0x34
  40466c:	f004 fb36 	bl	408cdc <__aeabi_dcmpeq>
  404670:	f8dd c034 	ldr.w	ip, [sp, #52]	; 0x34
  404674:	2800      	cmp	r0, #0
  404676:	f000 8165 	beq.w	404944 <_svfprintf_r+0xb48>
  40467a:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40467c:	2201      	movs	r2, #1
  40467e:	f10c 0c01 	add.w	ip, ip, #1
  404682:	492c      	ldr	r1, [pc, #176]	; (404734 <_svfprintf_r+0x938>)
  404684:	4413      	add	r3, r2
  404686:	f8cb 2004 	str.w	r2, [fp, #4]
  40468a:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
  40468e:	2b07      	cmp	r3, #7
  404690:	f8cb 1000 	str.w	r1, [fp]
  404694:	9324      	str	r3, [sp, #144]	; 0x90
  404696:	f300 8343 	bgt.w	404d20 <_svfprintf_r+0xf24>
  40469a:	f10b 0b08 	add.w	fp, fp, #8
  40469e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  4046a0:	9a12      	ldr	r2, [sp, #72]	; 0x48
  4046a2:	4293      	cmp	r3, r2
  4046a4:	db03      	blt.n	4046ae <_svfprintf_r+0x8b2>
  4046a6:	9b06      	ldr	r3, [sp, #24]
  4046a8:	07de      	lsls	r6, r3, #31
  4046aa:	f57f ad92 	bpl.w	4041d2 <_svfprintf_r+0x3d6>
  4046ae:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4046b0:	9917      	ldr	r1, [sp, #92]	; 0x5c
  4046b2:	3301      	adds	r3, #1
  4046b4:	9a16      	ldr	r2, [sp, #88]	; 0x58
  4046b6:	448c      	add	ip, r1
  4046b8:	f8cb 1004 	str.w	r1, [fp, #4]
  4046bc:	2b07      	cmp	r3, #7
  4046be:	f8cb 2000 	str.w	r2, [fp]
  4046c2:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
  4046c6:	9324      	str	r3, [sp, #144]	; 0x90
  4046c8:	f300 841d 	bgt.w	404f06 <_svfprintf_r+0x110a>
  4046cc:	f10b 0b08 	add.w	fp, fp, #8
  4046d0:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4046d2:	1e5c      	subs	r4, r3, #1
  4046d4:	2c00      	cmp	r4, #0
  4046d6:	f77f ad7c 	ble.w	4041d2 <_svfprintf_r+0x3d6>
  4046da:	2c10      	cmp	r4, #16
  4046dc:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4046de:	f340 85bc 	ble.w	40525a <_svfprintf_r+0x145e>
  4046e2:	2610      	movs	r6, #16
  4046e4:	4d14      	ldr	r5, [pc, #80]	; (404738 <_svfprintf_r+0x93c>)
  4046e6:	4662      	mov	r2, ip
  4046e8:	9f09      	ldr	r7, [sp, #36]	; 0x24
  4046ea:	e003      	b.n	4046f4 <_svfprintf_r+0x8f8>
  4046ec:	3c10      	subs	r4, #16
  4046ee:	2c10      	cmp	r4, #16
  4046f0:	f340 81c8 	ble.w	404a84 <_svfprintf_r+0xc88>
  4046f4:	3301      	adds	r3, #1
  4046f6:	3210      	adds	r2, #16
  4046f8:	f8cb 5000 	str.w	r5, [fp]
  4046fc:	f10b 0b08 	add.w	fp, fp, #8
  404700:	2b07      	cmp	r3, #7
  404702:	f84b 6c04 	str.w	r6, [fp, #-4]
  404706:	9225      	str	r2, [sp, #148]	; 0x94
  404708:	9324      	str	r3, [sp, #144]	; 0x90
  40470a:	ddef      	ble.n	4046ec <_svfprintf_r+0x8f0>
  40470c:	4638      	mov	r0, r7
  40470e:	4649      	mov	r1, r9
  404710:	aa23      	add	r2, sp, #140	; 0x8c
  404712:	46c3      	mov	fp, r8
  404714:	f003 fd00 	bl	408118 <__ssprint_r>
  404718:	2800      	cmp	r0, #0
  40471a:	f47f ac34 	bne.w	403f86 <_svfprintf_r+0x18a>
  40471e:	9a25      	ldr	r2, [sp, #148]	; 0x94
  404720:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404722:	e7e3      	b.n	4046ec <_svfprintf_r+0x8f0>
  404724:	004094a0 	.word	0x004094a0
  404728:	004094b4 	.word	0x004094b4
  40472c:	00409494 	.word	0x00409494
  404730:	00409490 	.word	0x00409490
  404734:	004094d0 	.word	0x004094d0
  404738:	00409470 	.word	0x00409470
  40473c:	2b01      	cmp	r3, #1
  40473e:	f000 814d 	beq.w	4049dc <_svfprintf_r+0xbe0>
  404742:	2b02      	cmp	r3, #2
  404744:	f040 80e3 	bne.w	40490e <_svfprintf_r+0xb12>
  404748:	46c2      	mov	sl, r8
  40474a:	9815      	ldr	r0, [sp, #84]	; 0x54
  40474c:	0923      	lsrs	r3, r4, #4
  40474e:	f004 010f 	and.w	r1, r4, #15
  404752:	092a      	lsrs	r2, r5, #4
  404754:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
  404758:	4615      	mov	r5, r2
  40475a:	461c      	mov	r4, r3
  40475c:	5c43      	ldrb	r3, [r0, r1]
  40475e:	f80a 3d01 	strb.w	r3, [sl, #-1]!
  404762:	ea54 0305 	orrs.w	r3, r4, r5
  404766:	d1f1      	bne.n	40474c <_svfprintf_r+0x950>
  404768:	4653      	mov	r3, sl
  40476a:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
  40476e:	ebc3 0408 	rsb	r4, r3, r8
  404772:	e44f      	b.n	404014 <_svfprintf_r+0x218>
  404774:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  404776:	9a07      	ldr	r2, [sp, #28]
  404778:	1a9f      	subs	r7, r3, r2
  40477a:	2f00      	cmp	r7, #0
  40477c:	f77f acd9 	ble.w	404132 <_svfprintf_r+0x336>
  404780:	2f10      	cmp	r7, #16
  404782:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404784:	f340 84f9 	ble.w	40517a <_svfprintf_r+0x137e>
  404788:	940d      	str	r4, [sp, #52]	; 0x34
  40478a:	f04f 0a10 	mov.w	sl, #16
  40478e:	4dc8      	ldr	r5, [pc, #800]	; (404ab0 <_svfprintf_r+0xcb4>)
  404790:	4662      	mov	r2, ip
  404792:	9c09      	ldr	r4, [sp, #36]	; 0x24
  404794:	e002      	b.n	40479c <_svfprintf_r+0x9a0>
  404796:	3f10      	subs	r7, #16
  404798:	2f10      	cmp	r7, #16
  40479a:	dd19      	ble.n	4047d0 <_svfprintf_r+0x9d4>
  40479c:	3301      	adds	r3, #1
  40479e:	3210      	adds	r2, #16
  4047a0:	f8cb 5000 	str.w	r5, [fp]
  4047a4:	f10b 0b08 	add.w	fp, fp, #8
  4047a8:	2b07      	cmp	r3, #7
  4047aa:	f84b ac04 	str.w	sl, [fp, #-4]
  4047ae:	9225      	str	r2, [sp, #148]	; 0x94
  4047b0:	9324      	str	r3, [sp, #144]	; 0x90
  4047b2:	ddf0      	ble.n	404796 <_svfprintf_r+0x99a>
  4047b4:	4620      	mov	r0, r4
  4047b6:	4649      	mov	r1, r9
  4047b8:	aa23      	add	r2, sp, #140	; 0x8c
  4047ba:	46c3      	mov	fp, r8
  4047bc:	f003 fcac 	bl	408118 <__ssprint_r>
  4047c0:	2800      	cmp	r0, #0
  4047c2:	f47f abe0 	bne.w	403f86 <_svfprintf_r+0x18a>
  4047c6:	3f10      	subs	r7, #16
  4047c8:	9a25      	ldr	r2, [sp, #148]	; 0x94
  4047ca:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4047cc:	2f10      	cmp	r7, #16
  4047ce:	dce5      	bgt.n	40479c <_svfprintf_r+0x9a0>
  4047d0:	9c0d      	ldr	r4, [sp, #52]	; 0x34
  4047d2:	4694      	mov	ip, r2
  4047d4:	3301      	adds	r3, #1
  4047d6:	44bc      	add	ip, r7
  4047d8:	f8cb 5000 	str.w	r5, [fp]
  4047dc:	2b07      	cmp	r3, #7
  4047de:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
  4047e2:	9324      	str	r3, [sp, #144]	; 0x90
  4047e4:	f8cb 7004 	str.w	r7, [fp, #4]
  4047e8:	f300 81fc 	bgt.w	404be4 <_svfprintf_r+0xde8>
  4047ec:	f10b 0b08 	add.w	fp, fp, #8
  4047f0:	e49f      	b.n	404132 <_svfprintf_r+0x336>
  4047f2:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4047f4:	f10c 0601 	add.w	r6, ip, #1
  4047f8:	9c24      	ldr	r4, [sp, #144]	; 0x90
  4047fa:	2b01      	cmp	r3, #1
  4047fc:	f340 81c9 	ble.w	404b92 <_svfprintf_r+0xd96>
  404800:	2301      	movs	r3, #1
  404802:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  404804:	9625      	str	r6, [sp, #148]	; 0x94
  404806:	441c      	add	r4, r3
  404808:	f8cb 2000 	str.w	r2, [fp]
  40480c:	f8cb 3004 	str.w	r3, [fp, #4]
  404810:	2c07      	cmp	r4, #7
  404812:	9424      	str	r4, [sp, #144]	; 0x90
  404814:	f300 81da 	bgt.w	404bcc <_svfprintf_r+0xdd0>
  404818:	f10b 0b08 	add.w	fp, fp, #8
  40481c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
  40481e:	3401      	adds	r4, #1
  404820:	9b16      	ldr	r3, [sp, #88]	; 0x58
  404822:	4416      	add	r6, r2
  404824:	2c07      	cmp	r4, #7
  404826:	f8cb 3000 	str.w	r3, [fp]
  40482a:	9625      	str	r6, [sp, #148]	; 0x94
  40482c:	9424      	str	r4, [sp, #144]	; 0x90
  40482e:	f8cb 2004 	str.w	r2, [fp, #4]
  404832:	f300 81bf 	bgt.w	404bb4 <_svfprintf_r+0xdb8>
  404836:	f10b 0b08 	add.w	fp, fp, #8
  40483a:	2300      	movs	r3, #0
  40483c:	9813      	ldr	r0, [sp, #76]	; 0x4c
  40483e:	2200      	movs	r2, #0
  404840:	9914      	ldr	r1, [sp, #80]	; 0x50
  404842:	f004 fa4b 	bl	408cdc <__aeabi_dcmpeq>
  404846:	9b12      	ldr	r3, [sp, #72]	; 0x48
  404848:	2800      	cmp	r0, #0
  40484a:	f040 80dc 	bne.w	404a06 <_svfprintf_r+0xc0a>
  40484e:	3b01      	subs	r3, #1
  404850:	3401      	adds	r4, #1
  404852:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  404854:	441e      	add	r6, r3
  404856:	2c07      	cmp	r4, #7
  404858:	f102 0201 	add.w	r2, r2, #1
  40485c:	9424      	str	r4, [sp, #144]	; 0x90
  40485e:	9625      	str	r6, [sp, #148]	; 0x94
  404860:	f8cb 2000 	str.w	r2, [fp]
  404864:	f8cb 3004 	str.w	r3, [fp, #4]
  404868:	f300 8100 	bgt.w	404a6c <_svfprintf_r+0xc70>
  40486c:	f10b 0b08 	add.w	fp, fp, #8
  404870:	9a19      	ldr	r2, [sp, #100]	; 0x64
  404872:	3401      	adds	r4, #1
  404874:	ab1f      	add	r3, sp, #124	; 0x7c
  404876:	eb06 0c02 	add.w	ip, r6, r2
  40487a:	2c07      	cmp	r4, #7
  40487c:	f8cb 2004 	str.w	r2, [fp, #4]
  404880:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
  404884:	9424      	str	r4, [sp, #144]	; 0x90
  404886:	f8cb 3000 	str.w	r3, [fp]
  40488a:	f77f aca0 	ble.w	4041ce <_svfprintf_r+0x3d2>
  40488e:	9809      	ldr	r0, [sp, #36]	; 0x24
  404890:	4649      	mov	r1, r9
  404892:	aa23      	add	r2, sp, #140	; 0x8c
  404894:	f003 fc40 	bl	408118 <__ssprint_r>
  404898:	2800      	cmp	r0, #0
  40489a:	f47f ab74 	bne.w	403f86 <_svfprintf_r+0x18a>
  40489e:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
  4048a2:	46c3      	mov	fp, r8
  4048a4:	e495      	b.n	4041d2 <_svfprintf_r+0x3d6>
  4048a6:	9809      	ldr	r0, [sp, #36]	; 0x24
  4048a8:	4649      	mov	r1, r9
  4048aa:	aa23      	add	r2, sp, #140	; 0x8c
  4048ac:	f003 fc34 	bl	408118 <__ssprint_r>
  4048b0:	2800      	cmp	r0, #0
  4048b2:	f43f acde 	beq.w	404272 <_svfprintf_r+0x476>
  4048b6:	f7ff bb66 	b.w	403f86 <_svfprintf_r+0x18a>
  4048ba:	4614      	mov	r4, r2
  4048bc:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
  4048c0:	f7ff bba8 	b.w	404014 <_svfprintf_r+0x218>
  4048c4:	9809      	ldr	r0, [sp, #36]	; 0x24
  4048c6:	4649      	mov	r1, r9
  4048c8:	aa23      	add	r2, sp, #140	; 0x8c
  4048ca:	f003 fc25 	bl	408118 <__ssprint_r>
  4048ce:	2800      	cmp	r0, #0
  4048d0:	f47f ab59 	bne.w	403f86 <_svfprintf_r+0x18a>
  4048d4:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
  4048d8:	46c3      	mov	fp, r8
  4048da:	e466      	b.n	4041aa <_svfprintf_r+0x3ae>
  4048dc:	9809      	ldr	r0, [sp, #36]	; 0x24
  4048de:	4649      	mov	r1, r9
  4048e0:	aa23      	add	r2, sp, #140	; 0x8c
  4048e2:	f003 fc19 	bl	408118 <__ssprint_r>
  4048e6:	2800      	cmp	r0, #0
  4048e8:	f47f ab4d 	bne.w	403f86 <_svfprintf_r+0x18a>
  4048ec:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
  4048f0:	46c3      	mov	fp, r8
  4048f2:	e41a      	b.n	40412a <_svfprintf_r+0x32e>
  4048f4:	9809      	ldr	r0, [sp, #36]	; 0x24
  4048f6:	4649      	mov	r1, r9
  4048f8:	aa23      	add	r2, sp, #140	; 0x8c
  4048fa:	f003 fc0d 	bl	408118 <__ssprint_r>
  4048fe:	2800      	cmp	r0, #0
  404900:	f47f ab41 	bne.w	403f86 <_svfprintf_r+0x18a>
  404904:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
  404908:	46c3      	mov	fp, r8
  40490a:	f7ff bbfa 	b.w	404102 <_svfprintf_r+0x306>
  40490e:	4641      	mov	r1, r8
  404910:	08e2      	lsrs	r2, r4, #3
  404912:	f004 0307 	and.w	r3, r4, #7
  404916:	08e8      	lsrs	r0, r5, #3
  404918:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
  40491c:	3330      	adds	r3, #48	; 0x30
  40491e:	4605      	mov	r5, r0
  404920:	4614      	mov	r4, r2
  404922:	f801 3d01 	strb.w	r3, [r1, #-1]!
  404926:	ea54 0205 	orrs.w	r2, r4, r5
  40492a:	d1f1      	bne.n	404910 <_svfprintf_r+0xb14>
  40492c:	9a06      	ldr	r2, [sp, #24]
  40492e:	910f      	str	r1, [sp, #60]	; 0x3c
  404930:	07d0      	lsls	r0, r2, #31
  404932:	f100 8164 	bmi.w	404bfe <_svfprintf_r+0xe02>
  404936:	ebc1 0408 	rsb	r4, r1, r8
  40493a:	f7ff bb6b 	b.w	404014 <_svfprintf_r+0x218>
  40493e:	2302      	movs	r3, #2
  404940:	f7ff bb3f 	b.w	403fc2 <_svfprintf_r+0x1c6>
  404944:	9c1d      	ldr	r4, [sp, #116]	; 0x74
  404946:	2c00      	cmp	r4, #0
  404948:	f340 81f6 	ble.w	404d38 <_svfprintf_r+0xf3c>
  40494c:	9a12      	ldr	r2, [sp, #72]	; 0x48
  40494e:	9911      	ldr	r1, [sp, #68]	; 0x44
  404950:	4613      	mov	r3, r2
  404952:	428a      	cmp	r2, r1
  404954:	bfa8      	it	ge
  404956:	460b      	movge	r3, r1
  404958:	990f      	ldr	r1, [sp, #60]	; 0x3c
  40495a:	461c      	mov	r4, r3
  40495c:	188f      	adds	r7, r1, r2
  40495e:	2c00      	cmp	r4, #0
  404960:	dd0e      	ble.n	404980 <_svfprintf_r+0xb84>
  404962:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404964:	44a4      	add	ip, r4
  404966:	f8cb 1000 	str.w	r1, [fp]
  40496a:	3301      	adds	r3, #1
  40496c:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
  404970:	f8cb 4004 	str.w	r4, [fp, #4]
  404974:	2b07      	cmp	r3, #7
  404976:	9324      	str	r3, [sp, #144]	; 0x90
  404978:	f300 8353 	bgt.w	405022 <_svfprintf_r+0x1226>
  40497c:	f10b 0b08 	add.w	fp, fp, #8
  404980:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404982:	2c00      	cmp	r4, #0
  404984:	bfa8      	it	ge
  404986:	1b1b      	subge	r3, r3, r4
  404988:	2b00      	cmp	r3, #0
  40498a:	461c      	mov	r4, r3
  40498c:	f340 80a1 	ble.w	404ad2 <_svfprintf_r+0xcd6>
  404990:	2c10      	cmp	r4, #16
  404992:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404994:	f340 846c 	ble.w	405270 <_svfprintf_r+0x1474>
  404998:	2610      	movs	r6, #16
  40499a:	4d45      	ldr	r5, [pc, #276]	; (404ab0 <_svfprintf_r+0xcb4>)
  40499c:	4662      	mov	r2, ip
  40499e:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
  4049a2:	e003      	b.n	4049ac <_svfprintf_r+0xbb0>
  4049a4:	3c10      	subs	r4, #16
  4049a6:	2c10      	cmp	r4, #16
  4049a8:	f340 8084 	ble.w	404ab4 <_svfprintf_r+0xcb8>
  4049ac:	3301      	adds	r3, #1
  4049ae:	3210      	adds	r2, #16
  4049b0:	f8cb 5000 	str.w	r5, [fp]
  4049b4:	f10b 0b08 	add.w	fp, fp, #8
  4049b8:	2b07      	cmp	r3, #7
  4049ba:	f84b 6c04 	str.w	r6, [fp, #-4]
  4049be:	9225      	str	r2, [sp, #148]	; 0x94
  4049c0:	9324      	str	r3, [sp, #144]	; 0x90
  4049c2:	ddef      	ble.n	4049a4 <_svfprintf_r+0xba8>
  4049c4:	4650      	mov	r0, sl
  4049c6:	4649      	mov	r1, r9
  4049c8:	aa23      	add	r2, sp, #140	; 0x8c
  4049ca:	46c3      	mov	fp, r8
  4049cc:	f003 fba4 	bl	408118 <__ssprint_r>
  4049d0:	2800      	cmp	r0, #0
  4049d2:	f47f aad8 	bne.w	403f86 <_svfprintf_r+0x18a>
  4049d6:	9a25      	ldr	r2, [sp, #148]	; 0x94
  4049d8:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4049da:	e7e3      	b.n	4049a4 <_svfprintf_r+0xba8>
  4049dc:	2d00      	cmp	r5, #0
  4049de:	bf08      	it	eq
  4049e0:	2c0a      	cmpeq	r4, #10
  4049e2:	f080 811a 	bcs.w	404c1a <_svfprintf_r+0xe1e>
  4049e6:	f50d 7a80 	add.w	sl, sp, #256	; 0x100
  4049ea:	3430      	adds	r4, #48	; 0x30
  4049ec:	f80a 4d41 	strb.w	r4, [sl, #-65]!
  4049f0:	ebca 0408 	rsb	r4, sl, r8
  4049f4:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
  4049f8:	f7ff bb0c 	b.w	404014 <_svfprintf_r+0x218>
  4049fc:	461c      	mov	r4, r3
  4049fe:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
  404a02:	f7ff bb07 	b.w	404014 <_svfprintf_r+0x218>
  404a06:	1e5f      	subs	r7, r3, #1
  404a08:	2f00      	cmp	r7, #0
  404a0a:	f77f af31 	ble.w	404870 <_svfprintf_r+0xa74>
  404a0e:	2f10      	cmp	r7, #16
  404a10:	4d27      	ldr	r5, [pc, #156]	; (404ab0 <_svfprintf_r+0xcb4>)
  404a12:	bfc8      	it	gt
  404a14:	f04f 0a10 	movgt.w	sl, #16
  404a18:	dc03      	bgt.n	404a22 <_svfprintf_r+0xc26>
  404a1a:	e01c      	b.n	404a56 <_svfprintf_r+0xc5a>
  404a1c:	3f10      	subs	r7, #16
  404a1e:	2f10      	cmp	r7, #16
  404a20:	dd19      	ble.n	404a56 <_svfprintf_r+0xc5a>
  404a22:	3401      	adds	r4, #1
  404a24:	3610      	adds	r6, #16
  404a26:	f8cb 5000 	str.w	r5, [fp]
  404a2a:	f10b 0b08 	add.w	fp, fp, #8
  404a2e:	2c07      	cmp	r4, #7
  404a30:	f84b ac04 	str.w	sl, [fp, #-4]
  404a34:	9625      	str	r6, [sp, #148]	; 0x94
  404a36:	9424      	str	r4, [sp, #144]	; 0x90
  404a38:	ddf0      	ble.n	404a1c <_svfprintf_r+0xc20>
  404a3a:	9809      	ldr	r0, [sp, #36]	; 0x24
  404a3c:	4649      	mov	r1, r9
  404a3e:	aa23      	add	r2, sp, #140	; 0x8c
  404a40:	46c3      	mov	fp, r8
  404a42:	f003 fb69 	bl	408118 <__ssprint_r>
  404a46:	2800      	cmp	r0, #0
  404a48:	f47f aa9d 	bne.w	403f86 <_svfprintf_r+0x18a>
  404a4c:	3f10      	subs	r7, #16
  404a4e:	9e25      	ldr	r6, [sp, #148]	; 0x94
  404a50:	9c24      	ldr	r4, [sp, #144]	; 0x90
  404a52:	2f10      	cmp	r7, #16
  404a54:	dce5      	bgt.n	404a22 <_svfprintf_r+0xc26>
  404a56:	3401      	adds	r4, #1
  404a58:	443e      	add	r6, r7
  404a5a:	f8cb 5000 	str.w	r5, [fp]
  404a5e:	2c07      	cmp	r4, #7
  404a60:	9625      	str	r6, [sp, #148]	; 0x94
  404a62:	9424      	str	r4, [sp, #144]	; 0x90
  404a64:	f8cb 7004 	str.w	r7, [fp, #4]
  404a68:	f77f af00 	ble.w	40486c <_svfprintf_r+0xa70>
  404a6c:	9809      	ldr	r0, [sp, #36]	; 0x24
  404a6e:	4649      	mov	r1, r9
  404a70:	aa23      	add	r2, sp, #140	; 0x8c
  404a72:	f003 fb51 	bl	408118 <__ssprint_r>
  404a76:	2800      	cmp	r0, #0
  404a78:	f47f aa85 	bne.w	403f86 <_svfprintf_r+0x18a>
  404a7c:	9e25      	ldr	r6, [sp, #148]	; 0x94
  404a7e:	46c3      	mov	fp, r8
  404a80:	9c24      	ldr	r4, [sp, #144]	; 0x90
  404a82:	e6f5      	b.n	404870 <_svfprintf_r+0xa74>
  404a84:	4694      	mov	ip, r2
  404a86:	3301      	adds	r3, #1
  404a88:	44a4      	add	ip, r4
  404a8a:	f8cb 5000 	str.w	r5, [fp]
  404a8e:	2b07      	cmp	r3, #7
  404a90:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
  404a94:	9324      	str	r3, [sp, #144]	; 0x90
  404a96:	f8cb 4004 	str.w	r4, [fp, #4]
  404a9a:	f77f ab98 	ble.w	4041ce <_svfprintf_r+0x3d2>
  404a9e:	e6f6      	b.n	40488e <_svfprintf_r+0xa92>
  404aa0:	990c      	ldr	r1, [sp, #48]	; 0x30
  404aa2:	2500      	movs	r5, #0
  404aa4:	460a      	mov	r2, r1
  404aa6:	680c      	ldr	r4, [r1, #0]
  404aa8:	3204      	adds	r2, #4
  404aaa:	920c      	str	r2, [sp, #48]	; 0x30
  404aac:	f7ff ba89 	b.w	403fc2 <_svfprintf_r+0x1c6>
  404ab0:	00409470 	.word	0x00409470
  404ab4:	4694      	mov	ip, r2
  404ab6:	3301      	adds	r3, #1
  404ab8:	44a4      	add	ip, r4
  404aba:	f8cb 5000 	str.w	r5, [fp]
  404abe:	2b07      	cmp	r3, #7
  404ac0:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
  404ac4:	9324      	str	r3, [sp, #144]	; 0x90
  404ac6:	f8cb 4004 	str.w	r4, [fp, #4]
  404aca:	f300 82df 	bgt.w	40508c <_svfprintf_r+0x1290>
  404ace:	f10b 0b08 	add.w	fp, fp, #8
  404ad2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  404ad4:	9911      	ldr	r1, [sp, #68]	; 0x44
  404ad6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  404ad8:	440a      	add	r2, r1
  404ada:	4616      	mov	r6, r2
  404adc:	9a12      	ldr	r2, [sp, #72]	; 0x48
  404ade:	4293      	cmp	r3, r2
  404ae0:	db45      	blt.n	404b6e <_svfprintf_r+0xd72>
  404ae2:	9a06      	ldr	r2, [sp, #24]
  404ae4:	07d0      	lsls	r0, r2, #31
  404ae6:	d442      	bmi.n	404b6e <_svfprintf_r+0xd72>
  404ae8:	9a12      	ldr	r2, [sp, #72]	; 0x48
  404aea:	1bbc      	subs	r4, r7, r6
  404aec:	1ad3      	subs	r3, r2, r3
  404aee:	429c      	cmp	r4, r3
  404af0:	bfa8      	it	ge
  404af2:	461c      	movge	r4, r3
  404af4:	2c00      	cmp	r4, #0
  404af6:	4625      	mov	r5, r4
  404af8:	dd0e      	ble.n	404b18 <_svfprintf_r+0xd1c>
  404afa:	9a24      	ldr	r2, [sp, #144]	; 0x90
  404afc:	44a4      	add	ip, r4
  404afe:	f8cb 6000 	str.w	r6, [fp]
  404b02:	3201      	adds	r2, #1
  404b04:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
  404b08:	f8cb 4004 	str.w	r4, [fp, #4]
  404b0c:	2a07      	cmp	r2, #7
  404b0e:	9224      	str	r2, [sp, #144]	; 0x90
  404b10:	f300 82a0 	bgt.w	405054 <_svfprintf_r+0x1258>
  404b14:	f10b 0b08 	add.w	fp, fp, #8
  404b18:	2d00      	cmp	r5, #0
  404b1a:	bfac      	ite	ge
  404b1c:	1b5c      	subge	r4, r3, r5
  404b1e:	461c      	movlt	r4, r3
  404b20:	2c00      	cmp	r4, #0
  404b22:	f77f ab56 	ble.w	4041d2 <_svfprintf_r+0x3d6>
  404b26:	2c10      	cmp	r4, #16
  404b28:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404b2a:	f340 8396 	ble.w	40525a <_svfprintf_r+0x145e>
  404b2e:	2610      	movs	r6, #16
  404b30:	4db1      	ldr	r5, [pc, #708]	; (404df8 <_svfprintf_r+0xffc>)
  404b32:	4662      	mov	r2, ip
  404b34:	9f09      	ldr	r7, [sp, #36]	; 0x24
  404b36:	e002      	b.n	404b3e <_svfprintf_r+0xd42>
  404b38:	3c10      	subs	r4, #16
  404b3a:	2c10      	cmp	r4, #16
  404b3c:	dda2      	ble.n	404a84 <_svfprintf_r+0xc88>
  404b3e:	3301      	adds	r3, #1
  404b40:	3210      	adds	r2, #16
  404b42:	f8cb 5000 	str.w	r5, [fp]
  404b46:	f10b 0b08 	add.w	fp, fp, #8
  404b4a:	2b07      	cmp	r3, #7
  404b4c:	f84b 6c04 	str.w	r6, [fp, #-4]
  404b50:	9225      	str	r2, [sp, #148]	; 0x94
  404b52:	9324      	str	r3, [sp, #144]	; 0x90
  404b54:	ddf0      	ble.n	404b38 <_svfprintf_r+0xd3c>
  404b56:	4638      	mov	r0, r7
  404b58:	4649      	mov	r1, r9
  404b5a:	aa23      	add	r2, sp, #140	; 0x8c
  404b5c:	46c3      	mov	fp, r8
  404b5e:	f003 fadb 	bl	408118 <__ssprint_r>
  404b62:	2800      	cmp	r0, #0
  404b64:	f47f aa0f 	bne.w	403f86 <_svfprintf_r+0x18a>
  404b68:	9a25      	ldr	r2, [sp, #148]	; 0x94
  404b6a:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404b6c:	e7e4      	b.n	404b38 <_svfprintf_r+0xd3c>
  404b6e:	9a24      	ldr	r2, [sp, #144]	; 0x90
  404b70:	9817      	ldr	r0, [sp, #92]	; 0x5c
  404b72:	3201      	adds	r2, #1
  404b74:	9916      	ldr	r1, [sp, #88]	; 0x58
  404b76:	4484      	add	ip, r0
  404b78:	f8cb 0004 	str.w	r0, [fp, #4]
  404b7c:	2a07      	cmp	r2, #7
  404b7e:	f8cb 1000 	str.w	r1, [fp]
  404b82:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
  404b86:	9224      	str	r2, [sp, #144]	; 0x90
  404b88:	f300 8273 	bgt.w	405072 <_svfprintf_r+0x1276>
  404b8c:	f10b 0b08 	add.w	fp, fp, #8
  404b90:	e7aa      	b.n	404ae8 <_svfprintf_r+0xcec>
  404b92:	9b06      	ldr	r3, [sp, #24]
  404b94:	07d9      	lsls	r1, r3, #31
  404b96:	f53f ae33 	bmi.w	404800 <_svfprintf_r+0xa04>
  404b9a:	2301      	movs	r3, #1
  404b9c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  404b9e:	9625      	str	r6, [sp, #148]	; 0x94
  404ba0:	441c      	add	r4, r3
  404ba2:	f8cb 2000 	str.w	r2, [fp]
  404ba6:	f8cb 3004 	str.w	r3, [fp, #4]
  404baa:	2c07      	cmp	r4, #7
  404bac:	9424      	str	r4, [sp, #144]	; 0x90
  404bae:	f77f ae5d 	ble.w	40486c <_svfprintf_r+0xa70>
  404bb2:	e75b      	b.n	404a6c <_svfprintf_r+0xc70>
  404bb4:	9809      	ldr	r0, [sp, #36]	; 0x24
  404bb6:	4649      	mov	r1, r9
  404bb8:	aa23      	add	r2, sp, #140	; 0x8c
  404bba:	f003 faad 	bl	408118 <__ssprint_r>
  404bbe:	2800      	cmp	r0, #0
  404bc0:	f47f a9e1 	bne.w	403f86 <_svfprintf_r+0x18a>
  404bc4:	9e25      	ldr	r6, [sp, #148]	; 0x94
  404bc6:	46c3      	mov	fp, r8
  404bc8:	9c24      	ldr	r4, [sp, #144]	; 0x90
  404bca:	e636      	b.n	40483a <_svfprintf_r+0xa3e>
  404bcc:	9809      	ldr	r0, [sp, #36]	; 0x24
  404bce:	4649      	mov	r1, r9
  404bd0:	aa23      	add	r2, sp, #140	; 0x8c
  404bd2:	f003 faa1 	bl	408118 <__ssprint_r>
  404bd6:	2800      	cmp	r0, #0
  404bd8:	f47f a9d5 	bne.w	403f86 <_svfprintf_r+0x18a>
  404bdc:	9e25      	ldr	r6, [sp, #148]	; 0x94
  404bde:	46c3      	mov	fp, r8
  404be0:	9c24      	ldr	r4, [sp, #144]	; 0x90
  404be2:	e61b      	b.n	40481c <_svfprintf_r+0xa20>
  404be4:	9809      	ldr	r0, [sp, #36]	; 0x24
  404be6:	4649      	mov	r1, r9
  404be8:	aa23      	add	r2, sp, #140	; 0x8c
  404bea:	f003 fa95 	bl	408118 <__ssprint_r>
  404bee:	2800      	cmp	r0, #0
  404bf0:	f47f a9c9 	bne.w	403f86 <_svfprintf_r+0x18a>
  404bf4:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
  404bf8:	46c3      	mov	fp, r8
  404bfa:	f7ff ba9a 	b.w	404132 <_svfprintf_r+0x336>
  404bfe:	2b30      	cmp	r3, #48	; 0x30
  404c00:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  404c02:	f43f adb4 	beq.w	40476e <_svfprintf_r+0x972>
  404c06:	3b01      	subs	r3, #1
  404c08:	461a      	mov	r2, r3
  404c0a:	930f      	str	r3, [sp, #60]	; 0x3c
  404c0c:	2330      	movs	r3, #48	; 0x30
  404c0e:	ebc2 0408 	rsb	r4, r2, r8
  404c12:	f801 3c01 	strb.w	r3, [r1, #-1]
  404c16:	f7ff b9fd 	b.w	404014 <_svfprintf_r+0x218>
  404c1a:	46c2      	mov	sl, r8
  404c1c:	f8cd c01c 	str.w	ip, [sp, #28]
  404c20:	4620      	mov	r0, r4
  404c22:	4629      	mov	r1, r5
  404c24:	220a      	movs	r2, #10
  404c26:	2300      	movs	r3, #0
  404c28:	f004 f8b2 	bl	408d90 <__aeabi_uldivmod>
  404c2c:	f102 0e30 	add.w	lr, r2, #48	; 0x30
  404c30:	4620      	mov	r0, r4
  404c32:	4629      	mov	r1, r5
  404c34:	2300      	movs	r3, #0
  404c36:	220a      	movs	r2, #10
  404c38:	f80a ed01 	strb.w	lr, [sl, #-1]!
  404c3c:	f004 f8a8 	bl	408d90 <__aeabi_uldivmod>
  404c40:	4604      	mov	r4, r0
  404c42:	460d      	mov	r5, r1
  404c44:	ea54 0305 	orrs.w	r3, r4, r5
  404c48:	d1ea      	bne.n	404c20 <_svfprintf_r+0xe24>
  404c4a:	f8dd c01c 	ldr.w	ip, [sp, #28]
  404c4e:	ebca 0408 	rsb	r4, sl, r8
  404c52:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
  404c56:	f7ff b9dd 	b.w	404014 <_svfprintf_r+0x218>
  404c5a:	9813      	ldr	r0, [sp, #76]	; 0x4c
  404c5c:	9914      	ldr	r1, [sp, #80]	; 0x50
  404c5e:	f8cd c01c 	str.w	ip, [sp, #28]
  404c62:	f003 f9e1 	bl	408028 <__fpclassifyd>
  404c66:	f8dd c01c 	ldr.w	ip, [sp, #28]
  404c6a:	2800      	cmp	r0, #0
  404c6c:	f040 80cc 	bne.w	404e08 <_svfprintf_r+0x100c>
  404c70:	9c06      	ldr	r4, [sp, #24]
  404c72:	2103      	movs	r1, #3
  404c74:	4a61      	ldr	r2, [pc, #388]	; (404dfc <_svfprintf_r+0x1000>)
  404c76:	4b62      	ldr	r3, [pc, #392]	; (404e00 <_svfprintf_r+0x1004>)
  404c78:	f024 0480 	bic.w	r4, r4, #128	; 0x80
  404c7c:	9010      	str	r0, [sp, #64]	; 0x40
  404c7e:	2e47      	cmp	r6, #71	; 0x47
  404c80:	bfd8      	it	le
  404c82:	461a      	movle	r2, r3
  404c84:	9406      	str	r4, [sp, #24]
  404c86:	9107      	str	r1, [sp, #28]
  404c88:	460c      	mov	r4, r1
  404c8a:	9011      	str	r0, [sp, #68]	; 0x44
  404c8c:	920f      	str	r2, [sp, #60]	; 0x3c
  404c8e:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  404c92:	f7ff b9c6 	b.w	404022 <_svfprintf_r+0x226>
  404c96:	9b06      	ldr	r3, [sp, #24]
  404c98:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  404c9a:	f013 0f40 	tst.w	r3, #64	; 0x40
  404c9e:	4613      	mov	r3, r2
  404ca0:	f43f abc9 	beq.w	404436 <_svfprintf_r+0x63a>
  404ca4:	8814      	ldrh	r4, [r2, #0]
  404ca6:	3204      	adds	r2, #4
  404ca8:	2500      	movs	r5, #0
  404caa:	2301      	movs	r3, #1
  404cac:	920c      	str	r2, [sp, #48]	; 0x30
  404cae:	f7ff b988 	b.w	403fc2 <_svfprintf_r+0x1c6>
  404cb2:	9b06      	ldr	r3, [sp, #24]
  404cb4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  404cb6:	f013 0f40 	tst.w	r3, #64	; 0x40
  404cba:	4613      	mov	r3, r2
  404cbc:	f000 8130 	beq.w	404f20 <_svfprintf_r+0x1124>
  404cc0:	3304      	adds	r3, #4
  404cc2:	8814      	ldrh	r4, [r2, #0]
  404cc4:	2500      	movs	r5, #0
  404cc6:	930c      	str	r3, [sp, #48]	; 0x30
  404cc8:	f7ff bbcd 	b.w	404466 <_svfprintf_r+0x66a>
  404ccc:	9b06      	ldr	r3, [sp, #24]
  404cce:	06dd      	lsls	r5, r3, #27
  404cd0:	d40b      	bmi.n	404cea <_svfprintf_r+0xeee>
  404cd2:	9b06      	ldr	r3, [sp, #24]
  404cd4:	065c      	lsls	r4, r3, #25
  404cd6:	d508      	bpl.n	404cea <_svfprintf_r+0xeee>
  404cd8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  404cda:	6813      	ldr	r3, [r2, #0]
  404cdc:	3204      	adds	r2, #4
  404cde:	920c      	str	r2, [sp, #48]	; 0x30
  404ce0:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
  404ce4:	801a      	strh	r2, [r3, #0]
  404ce6:	f7ff b8af 	b.w	403e48 <_svfprintf_r+0x4c>
  404cea:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  404cec:	6813      	ldr	r3, [r2, #0]
  404cee:	3204      	adds	r2, #4
  404cf0:	920c      	str	r2, [sp, #48]	; 0x30
  404cf2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  404cf4:	601a      	str	r2, [r3, #0]
  404cf6:	f7ff b8a7 	b.w	403e48 <_svfprintf_r+0x4c>
  404cfa:	9b06      	ldr	r3, [sp, #24]
  404cfc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  404cfe:	f013 0f40 	tst.w	r3, #64	; 0x40
  404d02:	4613      	mov	r3, r2
  404d04:	f43f ac26 	beq.w	404554 <_svfprintf_r+0x758>
  404d08:	f9b2 4000 	ldrsh.w	r4, [r2]
  404d0c:	3304      	adds	r3, #4
  404d0e:	17e5      	asrs	r5, r4, #31
  404d10:	930c      	str	r3, [sp, #48]	; 0x30
  404d12:	4622      	mov	r2, r4
  404d14:	462b      	mov	r3, r5
  404d16:	f7ff baf9 	b.w	40430c <_svfprintf_r+0x510>
  404d1a:	4d37      	ldr	r5, [pc, #220]	; (404df8 <_svfprintf_r+0xffc>)
  404d1c:	f7ff ba37 	b.w	40418e <_svfprintf_r+0x392>
  404d20:	9809      	ldr	r0, [sp, #36]	; 0x24
  404d22:	4649      	mov	r1, r9
  404d24:	aa23      	add	r2, sp, #140	; 0x8c
  404d26:	f003 f9f7 	bl	408118 <__ssprint_r>
  404d2a:	2800      	cmp	r0, #0
  404d2c:	f47f a92b 	bne.w	403f86 <_svfprintf_r+0x18a>
  404d30:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
  404d34:	46c3      	mov	fp, r8
  404d36:	e4b2      	b.n	40469e <_svfprintf_r+0x8a2>
  404d38:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404d3a:	2201      	movs	r2, #1
  404d3c:	f10c 0c01 	add.w	ip, ip, #1
  404d40:	4930      	ldr	r1, [pc, #192]	; (404e04 <_svfprintf_r+0x1008>)
  404d42:	4413      	add	r3, r2
  404d44:	f8cb 2004 	str.w	r2, [fp, #4]
  404d48:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
  404d4c:	2b07      	cmp	r3, #7
  404d4e:	f8cb 1000 	str.w	r1, [fp]
  404d52:	9324      	str	r3, [sp, #144]	; 0x90
  404d54:	f300 80fa 	bgt.w	404f4c <_svfprintf_r+0x1150>
  404d58:	f10b 0b08 	add.w	fp, fp, #8
  404d5c:	b92c      	cbnz	r4, 404d6a <_svfprintf_r+0xf6e>
  404d5e:	9b12      	ldr	r3, [sp, #72]	; 0x48
  404d60:	b91b      	cbnz	r3, 404d6a <_svfprintf_r+0xf6e>
  404d62:	9b06      	ldr	r3, [sp, #24]
  404d64:	07dd      	lsls	r5, r3, #31
  404d66:	f57f aa34 	bpl.w	4041d2 <_svfprintf_r+0x3d6>
  404d6a:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404d6c:	9917      	ldr	r1, [sp, #92]	; 0x5c
  404d6e:	3301      	adds	r3, #1
  404d70:	9816      	ldr	r0, [sp, #88]	; 0x58
  404d72:	eb0c 0201 	add.w	r2, ip, r1
  404d76:	f8cb 1004 	str.w	r1, [fp, #4]
  404d7a:	2b07      	cmp	r3, #7
  404d7c:	f8cb 0000 	str.w	r0, [fp]
  404d80:	9225      	str	r2, [sp, #148]	; 0x94
  404d82:	9324      	str	r3, [sp, #144]	; 0x90
  404d84:	f300 824c 	bgt.w	405220 <_svfprintf_r+0x1424>
  404d88:	f10b 0b08 	add.w	fp, fp, #8
  404d8c:	4264      	negs	r4, r4
  404d8e:	2c00      	cmp	r4, #0
  404d90:	f340 8126 	ble.w	404fe0 <_svfprintf_r+0x11e4>
  404d94:	2c10      	cmp	r4, #16
  404d96:	4d18      	ldr	r5, [pc, #96]	; (404df8 <_svfprintf_r+0xffc>)
  404d98:	f340 814f 	ble.w	40503a <_svfprintf_r+0x123e>
  404d9c:	2610      	movs	r6, #16
  404d9e:	9f09      	ldr	r7, [sp, #36]	; 0x24
  404da0:	e003      	b.n	404daa <_svfprintf_r+0xfae>
  404da2:	3c10      	subs	r4, #16
  404da4:	2c10      	cmp	r4, #16
  404da6:	f340 8148 	ble.w	40503a <_svfprintf_r+0x123e>
  404daa:	3301      	adds	r3, #1
  404dac:	3210      	adds	r2, #16
  404dae:	f8cb 5000 	str.w	r5, [fp]
  404db2:	f10b 0b08 	add.w	fp, fp, #8
  404db6:	2b07      	cmp	r3, #7
  404db8:	f84b 6c04 	str.w	r6, [fp, #-4]
  404dbc:	9225      	str	r2, [sp, #148]	; 0x94
  404dbe:	9324      	str	r3, [sp, #144]	; 0x90
  404dc0:	ddef      	ble.n	404da2 <_svfprintf_r+0xfa6>
  404dc2:	4638      	mov	r0, r7
  404dc4:	4649      	mov	r1, r9
  404dc6:	aa23      	add	r2, sp, #140	; 0x8c
  404dc8:	46c3      	mov	fp, r8
  404dca:	f003 f9a5 	bl	408118 <__ssprint_r>
  404dce:	2800      	cmp	r0, #0
  404dd0:	f47f a8d9 	bne.w	403f86 <_svfprintf_r+0x18a>
  404dd4:	9a25      	ldr	r2, [sp, #148]	; 0x94
  404dd6:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404dd8:	e7e3      	b.n	404da2 <_svfprintf_r+0xfa6>
  404dda:	f041 0120 	orr.w	r1, r1, #32
  404dde:	785e      	ldrb	r6, [r3, #1]
  404de0:	9106      	str	r1, [sp, #24]
  404de2:	1c59      	adds	r1, r3, #1
  404de4:	f7ff b85f 	b.w	403ea6 <_svfprintf_r+0xaa>
  404de8:	980b      	ldr	r0, [sp, #44]	; 0x2c
  404dea:	910c      	str	r1, [sp, #48]	; 0x30
  404dec:	4619      	mov	r1, r3
  404dee:	4240      	negs	r0, r0
  404df0:	900b      	str	r0, [sp, #44]	; 0x2c
  404df2:	f7ff ba43 	b.w	40427c <_svfprintf_r+0x480>
  404df6:	bf00      	nop
  404df8:	00409470 	.word	0x00409470
  404dfc:	0040949c 	.word	0x0040949c
  404e00:	00409498 	.word	0x00409498
  404e04:	004094d0 	.word	0x004094d0
  404e08:	f1bc 3fff 	cmp.w	ip, #4294967295
  404e0c:	f026 0a20 	bic.w	sl, r6, #32
  404e10:	f000 80a9 	beq.w	404f66 <_svfprintf_r+0x116a>
  404e14:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
  404e18:	f040 80a7 	bne.w	404f6a <_svfprintf_r+0x116e>
  404e1c:	f1bc 0f00 	cmp.w	ip, #0
  404e20:	f040 80a3 	bne.w	404f6a <_svfprintf_r+0x116e>
  404e24:	9b06      	ldr	r3, [sp, #24]
  404e26:	f04f 0a47 	mov.w	sl, #71	; 0x47
  404e2a:	f04f 0c01 	mov.w	ip, #1
  404e2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  404e32:	930e      	str	r3, [sp, #56]	; 0x38
  404e34:	9b14      	ldr	r3, [sp, #80]	; 0x50
  404e36:	2b00      	cmp	r3, #0
  404e38:	f2c0 81ff 	blt.w	40523a <_svfprintf_r+0x143e>
  404e3c:	461d      	mov	r5, r3
  404e3e:	9f13      	ldr	r7, [sp, #76]	; 0x4c
  404e40:	2300      	movs	r3, #0
  404e42:	930d      	str	r3, [sp, #52]	; 0x34
  404e44:	2002      	movs	r0, #2
  404e46:	a91d      	add	r1, sp, #116	; 0x74
  404e48:	f8cd c004 	str.w	ip, [sp, #4]
  404e4c:	463a      	mov	r2, r7
  404e4e:	9000      	str	r0, [sp, #0]
  404e50:	a81e      	add	r0, sp, #120	; 0x78
  404e52:	9102      	str	r1, [sp, #8]
  404e54:	a921      	add	r1, sp, #132	; 0x84
  404e56:	9003      	str	r0, [sp, #12]
  404e58:	462b      	mov	r3, r5
  404e5a:	9809      	ldr	r0, [sp, #36]	; 0x24
  404e5c:	9104      	str	r1, [sp, #16]
  404e5e:	f8cd c01c 	str.w	ip, [sp, #28]
  404e62:	f000 fbb9 	bl	4055d8 <_dtoa_r>
  404e66:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
  404e6a:	900f      	str	r0, [sp, #60]	; 0x3c
  404e6c:	f8dd c01c 	ldr.w	ip, [sp, #28]
  404e70:	f040 8242 	bne.w	4052f8 <_svfprintf_r+0x14fc>
  404e74:	9b06      	ldr	r3, [sp, #24]
  404e76:	07db      	lsls	r3, r3, #31
  404e78:	f140 81f3 	bpl.w	405262 <_svfprintf_r+0x1466>
  404e7c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  404e7e:	eb03 040c 	add.w	r4, r3, ip
  404e82:	4638      	mov	r0, r7
  404e84:	2200      	movs	r2, #0
  404e86:	2300      	movs	r3, #0
  404e88:	4629      	mov	r1, r5
  404e8a:	f8cd c01c 	str.w	ip, [sp, #28]
  404e8e:	f003 ff25 	bl	408cdc <__aeabi_dcmpeq>
  404e92:	f8dd c01c 	ldr.w	ip, [sp, #28]
  404e96:	2800      	cmp	r0, #0
  404e98:	f040 8172 	bne.w	405180 <_svfprintf_r+0x1384>
  404e9c:	9b21      	ldr	r3, [sp, #132]	; 0x84
  404e9e:	429c      	cmp	r4, r3
  404ea0:	d906      	bls.n	404eb0 <_svfprintf_r+0x10b4>
  404ea2:	2130      	movs	r1, #48	; 0x30
  404ea4:	1c5a      	adds	r2, r3, #1
  404ea6:	9221      	str	r2, [sp, #132]	; 0x84
  404ea8:	7019      	strb	r1, [r3, #0]
  404eaa:	9b21      	ldr	r3, [sp, #132]	; 0x84
  404eac:	429c      	cmp	r4, r3
  404eae:	d8f9      	bhi.n	404ea4 <_svfprintf_r+0x10a8>
  404eb0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  404eb2:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
  404eb6:	eba3 0302 	sub.w	r3, r3, r2
  404eba:	9312      	str	r3, [sp, #72]	; 0x48
  404ebc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  404ebe:	f040 8113 	bne.w	4050e8 <_svfprintf_r+0x12ec>
  404ec2:	459c      	cmp	ip, r3
  404ec4:	f2c0 8168 	blt.w	405198 <_svfprintf_r+0x139c>
  404ec8:	1cd9      	adds	r1, r3, #3
  404eca:	f2c0 8165 	blt.w	405198 <_svfprintf_r+0x139c>
  404ece:	2667      	movs	r6, #103	; 0x67
  404ed0:	9311      	str	r3, [sp, #68]	; 0x44
  404ed2:	9b12      	ldr	r3, [sp, #72]	; 0x48
  404ed4:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404ed6:	4293      	cmp	r3, r2
  404ed8:	f300 81b6 	bgt.w	405248 <_svfprintf_r+0x144c>
  404edc:	9b06      	ldr	r3, [sp, #24]
  404ede:	07df      	lsls	r7, r3, #31
  404ee0:	f100 81c1 	bmi.w	405266 <_svfprintf_r+0x146a>
  404ee4:	4614      	mov	r4, r2
  404ee6:	ea22 7ce2 	bic.w	ip, r2, r2, asr #31
  404eea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  404eec:	2b00      	cmp	r3, #0
  404eee:	f040 80f0 	bne.w	4050d2 <_svfprintf_r+0x12d6>
  404ef2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  404ef4:	f8cd c01c 	str.w	ip, [sp, #28]
  404ef8:	9306      	str	r3, [sp, #24]
  404efa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  404efc:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  404f00:	9310      	str	r3, [sp, #64]	; 0x40
  404f02:	f7ff b88e 	b.w	404022 <_svfprintf_r+0x226>
  404f06:	9809      	ldr	r0, [sp, #36]	; 0x24
  404f08:	4649      	mov	r1, r9
  404f0a:	aa23      	add	r2, sp, #140	; 0x8c
  404f0c:	f003 f904 	bl	408118 <__ssprint_r>
  404f10:	2800      	cmp	r0, #0
  404f12:	f47f a838 	bne.w	403f86 <_svfprintf_r+0x18a>
  404f16:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
  404f1a:	46c3      	mov	fp, r8
  404f1c:	f7ff bbd8 	b.w	4046d0 <_svfprintf_r+0x8d4>
  404f20:	3304      	adds	r3, #4
  404f22:	6814      	ldr	r4, [r2, #0]
  404f24:	2500      	movs	r5, #0
  404f26:	930c      	str	r3, [sp, #48]	; 0x30
  404f28:	f7ff ba9d 	b.w	404466 <_svfprintf_r+0x66a>
  404f2c:	9809      	ldr	r0, [sp, #36]	; 0x24
  404f2e:	2140      	movs	r1, #64	; 0x40
  404f30:	f001 ff82 	bl	406e38 <_malloc_r>
  404f34:	f8c9 0000 	str.w	r0, [r9]
  404f38:	f8c9 0010 	str.w	r0, [r9, #16]
  404f3c:	2800      	cmp	r0, #0
  404f3e:	f000 81d4 	beq.w	4052ea <_svfprintf_r+0x14ee>
  404f42:	2340      	movs	r3, #64	; 0x40
  404f44:	f8c9 3014 	str.w	r3, [r9, #20]
  404f48:	f7fe bf70 	b.w	403e2c <_svfprintf_r+0x30>
  404f4c:	9809      	ldr	r0, [sp, #36]	; 0x24
  404f4e:	4649      	mov	r1, r9
  404f50:	aa23      	add	r2, sp, #140	; 0x8c
  404f52:	f003 f8e1 	bl	408118 <__ssprint_r>
  404f56:	2800      	cmp	r0, #0
  404f58:	f47f a815 	bne.w	403f86 <_svfprintf_r+0x18a>
  404f5c:	9c1d      	ldr	r4, [sp, #116]	; 0x74
  404f5e:	46c3      	mov	fp, r8
  404f60:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
  404f64:	e6fa      	b.n	404d5c <_svfprintf_r+0xf60>
  404f66:	f04f 0c06 	mov.w	ip, #6
  404f6a:	9b06      	ldr	r3, [sp, #24]
  404f6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  404f70:	930e      	str	r3, [sp, #56]	; 0x38
  404f72:	9b14      	ldr	r3, [sp, #80]	; 0x50
  404f74:	2b00      	cmp	r3, #0
  404f76:	f2c0 8160 	blt.w	40523a <_svfprintf_r+0x143e>
  404f7a:	461d      	mov	r5, r3
  404f7c:	9f13      	ldr	r7, [sp, #76]	; 0x4c
  404f7e:	2300      	movs	r3, #0
  404f80:	930d      	str	r3, [sp, #52]	; 0x34
  404f82:	f1ba 0f46 	cmp.w	sl, #70	; 0x46
  404f86:	f000 80c4 	beq.w	405112 <_svfprintf_r+0x1316>
  404f8a:	f1ba 0f45 	cmp.w	sl, #69	; 0x45
  404f8e:	f47f af59 	bne.w	404e44 <_svfprintf_r+0x1048>
  404f92:	f10c 0401 	add.w	r4, ip, #1
  404f96:	f8cd c01c 	str.w	ip, [sp, #28]
  404f9a:	f10d 0e74 	add.w	lr, sp, #116	; 0x74
  404f9e:	f10d 0c84 	add.w	ip, sp, #132	; 0x84
  404fa2:	a81e      	add	r0, sp, #120	; 0x78
  404fa4:	2102      	movs	r1, #2
  404fa6:	f8cd c010 	str.w	ip, [sp, #16]
  404faa:	463a      	mov	r2, r7
  404fac:	9003      	str	r0, [sp, #12]
  404fae:	462b      	mov	r3, r5
  404fb0:	9401      	str	r4, [sp, #4]
  404fb2:	9100      	str	r1, [sp, #0]
  404fb4:	f8cd e008 	str.w	lr, [sp, #8]
  404fb8:	9809      	ldr	r0, [sp, #36]	; 0x24
  404fba:	f000 fb0d 	bl	4055d8 <_dtoa_r>
  404fbe:	f8dd c01c 	ldr.w	ip, [sp, #28]
  404fc2:	900f      	str	r0, [sp, #60]	; 0x3c
  404fc4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  404fc6:	441c      	add	r4, r3
  404fc8:	e75b      	b.n	404e82 <_svfprintf_r+0x1086>
  404fca:	9809      	ldr	r0, [sp, #36]	; 0x24
  404fcc:	4649      	mov	r1, r9
  404fce:	aa23      	add	r2, sp, #140	; 0x8c
  404fd0:	f003 f8a2 	bl	408118 <__ssprint_r>
  404fd4:	2800      	cmp	r0, #0
  404fd6:	f47e afd6 	bne.w	403f86 <_svfprintf_r+0x18a>
  404fda:	9a25      	ldr	r2, [sp, #148]	; 0x94
  404fdc:	46c3      	mov	fp, r8
  404fde:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404fe0:	9812      	ldr	r0, [sp, #72]	; 0x48
  404fe2:	3301      	adds	r3, #1
  404fe4:	eb02 0c00 	add.w	ip, r2, r0
  404fe8:	2b07      	cmp	r3, #7
  404fea:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  404fec:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
  404ff0:	f8cb 2000 	str.w	r2, [fp]
  404ff4:	9324      	str	r3, [sp, #144]	; 0x90
  404ff6:	f8cb 0004 	str.w	r0, [fp, #4]
  404ffa:	f77f a8e8 	ble.w	4041ce <_svfprintf_r+0x3d2>
  404ffe:	e446      	b.n	40488e <_svfprintf_r+0xa92>
  405000:	9510      	str	r5, [sp, #64]	; 0x40
  405002:	f7fe fecd 	bl	403da0 <strlen>
  405006:	ea20 73e0 	bic.w	r3, r0, r0, asr #31
  40500a:	970c      	str	r7, [sp, #48]	; 0x30
  40500c:	4604      	mov	r4, r0
  40500e:	9511      	str	r5, [sp, #68]	; 0x44
  405010:	9307      	str	r3, [sp, #28]
  405012:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  405016:	f7ff b804 	b.w	404022 <_svfprintf_r+0x226>
  40501a:	9a24      	ldr	r2, [sp, #144]	; 0x90
  40501c:	4fb7      	ldr	r7, [pc, #732]	; (4052fc <_svfprintf_r+0x1500>)
  40501e:	f7ff b84b 	b.w	4040b8 <_svfprintf_r+0x2bc>
  405022:	9809      	ldr	r0, [sp, #36]	; 0x24
  405024:	4649      	mov	r1, r9
  405026:	aa23      	add	r2, sp, #140	; 0x8c
  405028:	f003 f876 	bl	408118 <__ssprint_r>
  40502c:	2800      	cmp	r0, #0
  40502e:	f47e afaa 	bne.w	403f86 <_svfprintf_r+0x18a>
  405032:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
  405036:	46c3      	mov	fp, r8
  405038:	e4a2      	b.n	404980 <_svfprintf_r+0xb84>
  40503a:	3301      	adds	r3, #1
  40503c:	4422      	add	r2, r4
  40503e:	f8cb 5000 	str.w	r5, [fp]
  405042:	2b07      	cmp	r3, #7
  405044:	9225      	str	r2, [sp, #148]	; 0x94
  405046:	9324      	str	r3, [sp, #144]	; 0x90
  405048:	f8cb 4004 	str.w	r4, [fp, #4]
  40504c:	dcbd      	bgt.n	404fca <_svfprintf_r+0x11ce>
  40504e:	f10b 0b08 	add.w	fp, fp, #8
  405052:	e7c5      	b.n	404fe0 <_svfprintf_r+0x11e4>
  405054:	9809      	ldr	r0, [sp, #36]	; 0x24
  405056:	4649      	mov	r1, r9
  405058:	aa23      	add	r2, sp, #140	; 0x8c
  40505a:	f003 f85d 	bl	408118 <__ssprint_r>
  40505e:	2800      	cmp	r0, #0
  405060:	f47e af91 	bne.w	403f86 <_svfprintf_r+0x18a>
  405064:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  405066:	46c3      	mov	fp, r8
  405068:	9a12      	ldr	r2, [sp, #72]	; 0x48
  40506a:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
  40506e:	1ad3      	subs	r3, r2, r3
  405070:	e552      	b.n	404b18 <_svfprintf_r+0xd1c>
  405072:	9809      	ldr	r0, [sp, #36]	; 0x24
  405074:	4649      	mov	r1, r9
  405076:	aa23      	add	r2, sp, #140	; 0x8c
  405078:	f003 f84e 	bl	408118 <__ssprint_r>
  40507c:	2800      	cmp	r0, #0
  40507e:	f47e af82 	bne.w	403f86 <_svfprintf_r+0x18a>
  405082:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  405084:	46c3      	mov	fp, r8
  405086:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
  40508a:	e52d      	b.n	404ae8 <_svfprintf_r+0xcec>
  40508c:	9809      	ldr	r0, [sp, #36]	; 0x24
  40508e:	4649      	mov	r1, r9
  405090:	aa23      	add	r2, sp, #140	; 0x8c
  405092:	f003 f841 	bl	408118 <__ssprint_r>
  405096:	2800      	cmp	r0, #0
  405098:	f47e af75 	bne.w	403f86 <_svfprintf_r+0x18a>
  40509c:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
  4050a0:	46c3      	mov	fp, r8
  4050a2:	e516      	b.n	404ad2 <_svfprintf_r+0xcd6>
  4050a4:	2c06      	cmp	r4, #6
  4050a6:	970c      	str	r7, [sp, #48]	; 0x30
  4050a8:	9310      	str	r3, [sp, #64]	; 0x40
  4050aa:	461f      	mov	r7, r3
  4050ac:	bf28      	it	cs
  4050ae:	2406      	movcs	r4, #6
  4050b0:	9711      	str	r7, [sp, #68]	; 0x44
  4050b2:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
  4050b6:	9307      	str	r3, [sp, #28]
  4050b8:	4b91      	ldr	r3, [pc, #580]	; (405300 <_svfprintf_r+0x1504>)
  4050ba:	930f      	str	r3, [sp, #60]	; 0x3c
  4050bc:	f7fe bfb1 	b.w	404022 <_svfprintf_r+0x226>
  4050c0:	4f8e      	ldr	r7, [pc, #568]	; (4052fc <_svfprintf_r+0x1500>)
  4050c2:	f7ff b8b5 	b.w	404230 <_svfprintf_r+0x434>
  4050c6:	232d      	movs	r3, #45	; 0x2d
  4050c8:	461f      	mov	r7, r3
  4050ca:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  4050ce:	f7ff ba7a 	b.w	4045c6 <_svfprintf_r+0x7ca>
  4050d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4050d4:	272d      	movs	r7, #45	; 0x2d
  4050d6:	f8cd c01c 	str.w	ip, [sp, #28]
  4050da:	9306      	str	r3, [sp, #24]
  4050dc:	2300      	movs	r3, #0
  4050de:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
  4050e2:	9310      	str	r3, [sp, #64]	; 0x40
  4050e4:	f7fe bf9e 	b.w	404024 <_svfprintf_r+0x228>
  4050e8:	2e65      	cmp	r6, #101	; 0x65
  4050ea:	dd56      	ble.n	40519a <_svfprintf_r+0x139e>
  4050ec:	2e66      	cmp	r6, #102	; 0x66
  4050ee:	9311      	str	r3, [sp, #68]	; 0x44
  4050f0:	f47f aeef 	bne.w	404ed2 <_svfprintf_r+0x10d6>
  4050f4:	2b00      	cmp	r3, #0
  4050f6:	f340 80d6 	ble.w	4052a6 <_svfprintf_r+0x14aa>
  4050fa:	f1bc 0f00 	cmp.w	ip, #0
  4050fe:	f040 80c1 	bne.w	405284 <_svfprintf_r+0x1488>
  405102:	9b06      	ldr	r3, [sp, #24]
  405104:	07da      	lsls	r2, r3, #31
  405106:	f100 80bd 	bmi.w	405284 <_svfprintf_r+0x1488>
  40510a:	9c11      	ldr	r4, [sp, #68]	; 0x44
  40510c:	ea24 7ce4 	bic.w	ip, r4, r4, asr #31
  405110:	e6eb      	b.n	404eea <_svfprintf_r+0x10ee>
  405112:	2003      	movs	r0, #3
  405114:	a91d      	add	r1, sp, #116	; 0x74
  405116:	463a      	mov	r2, r7
  405118:	f8cd c004 	str.w	ip, [sp, #4]
  40511c:	9000      	str	r0, [sp, #0]
  40511e:	a81e      	add	r0, sp, #120	; 0x78
  405120:	9102      	str	r1, [sp, #8]
  405122:	a921      	add	r1, sp, #132	; 0x84
  405124:	462b      	mov	r3, r5
  405126:	9003      	str	r0, [sp, #12]
  405128:	9104      	str	r1, [sp, #16]
  40512a:	9809      	ldr	r0, [sp, #36]	; 0x24
  40512c:	f8cd c01c 	str.w	ip, [sp, #28]
  405130:	f000 fa52 	bl	4055d8 <_dtoa_r>
  405134:	f8dd c01c 	ldr.w	ip, [sp, #28]
  405138:	4602      	mov	r2, r0
  40513a:	7803      	ldrb	r3, [r0, #0]
  40513c:	4462      	add	r2, ip
  40513e:	900f      	str	r0, [sp, #60]	; 0x3c
  405140:	2b30      	cmp	r3, #48	; 0x30
  405142:	9207      	str	r2, [sp, #28]
  405144:	f040 808b 	bne.w	40525e <_svfprintf_r+0x1462>
  405148:	4638      	mov	r0, r7
  40514a:	2200      	movs	r2, #0
  40514c:	2300      	movs	r3, #0
  40514e:	4629      	mov	r1, r5
  405150:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
  405154:	f04f 0401 	mov.w	r4, #1
  405158:	f003 fdc0 	bl	408cdc <__aeabi_dcmpeq>
  40515c:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
  405160:	b108      	cbz	r0, 405166 <_svfprintf_r+0x136a>
  405162:	f04f 0400 	mov.w	r4, #0
  405166:	f014 0fff 	tst.w	r4, #255	; 0xff
  40516a:	d078      	beq.n	40525e <_svfprintf_r+0x1462>
  40516c:	f1cc 0401 	rsb	r4, ip, #1
  405170:	941d      	str	r4, [sp, #116]	; 0x74
  405172:	9b07      	ldr	r3, [sp, #28]
  405174:	4423      	add	r3, r4
  405176:	461c      	mov	r4, r3
  405178:	e683      	b.n	404e82 <_svfprintf_r+0x1086>
  40517a:	4d62      	ldr	r5, [pc, #392]	; (405304 <_svfprintf_r+0x1508>)
  40517c:	f7ff bb2a 	b.w	4047d4 <_svfprintf_r+0x9d8>
  405180:	4623      	mov	r3, r4
  405182:	e695      	b.n	404eb0 <_svfprintf_r+0x10b4>
  405184:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
  405188:	970c      	str	r7, [sp, #48]	; 0x30
  40518a:	9010      	str	r0, [sp, #64]	; 0x40
  40518c:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  405190:	9307      	str	r3, [sp, #28]
  405192:	9011      	str	r0, [sp, #68]	; 0x44
  405194:	f7fe bf45 	b.w	404022 <_svfprintf_r+0x226>
  405198:	3e02      	subs	r6, #2
  40519a:	3b01      	subs	r3, #1
  40519c:	f88d 607c 	strb.w	r6, [sp, #124]	; 0x7c
  4051a0:	2b00      	cmp	r3, #0
  4051a2:	931d      	str	r3, [sp, #116]	; 0x74
  4051a4:	db75      	blt.n	405292 <_svfprintf_r+0x1496>
  4051a6:	222b      	movs	r2, #43	; 0x2b
  4051a8:	f88d 207d 	strb.w	r2, [sp, #125]	; 0x7d
  4051ac:	2b09      	cmp	r3, #9
  4051ae:	dd61      	ble.n	405274 <_svfprintf_r+0x1478>
  4051b0:	f10d 008b 	add.w	r0, sp, #139	; 0x8b
  4051b4:	4601      	mov	r1, r0
  4051b6:	4a54      	ldr	r2, [pc, #336]	; (405308 <_svfprintf_r+0x150c>)
  4051b8:	fb82 2403 	smull	r2, r4, r2, r3
  4051bc:	17da      	asrs	r2, r3, #31
  4051be:	ebc2 04a4 	rsb	r4, r2, r4, asr #2
  4051c2:	eb04 0284 	add.w	r2, r4, r4, lsl #2
  4051c6:	2c09      	cmp	r4, #9
  4051c8:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
  4051cc:	4623      	mov	r3, r4
  4051ce:	f102 0230 	add.w	r2, r2, #48	; 0x30
  4051d2:	f801 2d01 	strb.w	r2, [r1, #-1]!
  4051d6:	dcee      	bgt.n	4051b6 <_svfprintf_r+0x13ba>
  4051d8:	3330      	adds	r3, #48	; 0x30
  4051da:	460a      	mov	r2, r1
  4051dc:	b2db      	uxtb	r3, r3
  4051de:	f802 3d01 	strb.w	r3, [r2, #-1]!
  4051e2:	4290      	cmp	r0, r2
  4051e4:	d97e      	bls.n	4052e4 <_svfprintf_r+0x14e8>
  4051e6:	460a      	mov	r2, r1
  4051e8:	f10d 047e 	add.w	r4, sp, #126	; 0x7e
  4051ec:	e001      	b.n	4051f2 <_svfprintf_r+0x13f6>
  4051ee:	f812 3b01 	ldrb.w	r3, [r2], #1
  4051f2:	4282      	cmp	r2, r0
  4051f4:	f804 3b01 	strb.w	r3, [r4], #1
  4051f8:	d1f9      	bne.n	4051ee <_svfprintf_r+0x13f2>
  4051fa:	ab23      	add	r3, sp, #140	; 0x8c
  4051fc:	f10d 027e 	add.w	r2, sp, #126	; 0x7e
  405200:	1a5b      	subs	r3, r3, r1
  405202:	4413      	add	r3, r2
  405204:	aa1f      	add	r2, sp, #124	; 0x7c
  405206:	1a9b      	subs	r3, r3, r2
  405208:	9a12      	ldr	r2, [sp, #72]	; 0x48
  40520a:	2a01      	cmp	r2, #1
  40520c:	9319      	str	r3, [sp, #100]	; 0x64
  40520e:	eb02 0403 	add.w	r4, r2, r3
  405212:	dd43      	ble.n	40529c <_svfprintf_r+0x14a0>
  405214:	3401      	adds	r4, #1
  405216:	2300      	movs	r3, #0
  405218:	9311      	str	r3, [sp, #68]	; 0x44
  40521a:	ea24 7ce4 	bic.w	ip, r4, r4, asr #31
  40521e:	e664      	b.n	404eea <_svfprintf_r+0x10ee>
  405220:	9809      	ldr	r0, [sp, #36]	; 0x24
  405222:	4649      	mov	r1, r9
  405224:	aa23      	add	r2, sp, #140	; 0x8c
  405226:	f002 ff77 	bl	408118 <__ssprint_r>
  40522a:	2800      	cmp	r0, #0
  40522c:	f47e aeab 	bne.w	403f86 <_svfprintf_r+0x18a>
  405230:	9c1d      	ldr	r4, [sp, #116]	; 0x74
  405232:	46c3      	mov	fp, r8
  405234:	9a25      	ldr	r2, [sp, #148]	; 0x94
  405236:	9b24      	ldr	r3, [sp, #144]	; 0x90
  405238:	e5a8      	b.n	404d8c <_svfprintf_r+0xf90>
  40523a:	9b14      	ldr	r3, [sp, #80]	; 0x50
  40523c:	9f13      	ldr	r7, [sp, #76]	; 0x4c
  40523e:	f103 4500 	add.w	r5, r3, #2147483648	; 0x80000000
  405242:	232d      	movs	r3, #45	; 0x2d
  405244:	930d      	str	r3, [sp, #52]	; 0x34
  405246:	e69c      	b.n	404f82 <_svfprintf_r+0x1186>
  405248:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40524a:	2b00      	cmp	r3, #0
  40524c:	dd35      	ble.n	4052ba <_svfprintf_r+0x14be>
  40524e:	2401      	movs	r4, #1
  405250:	9b12      	ldr	r3, [sp, #72]	; 0x48
  405252:	441c      	add	r4, r3
  405254:	ea24 7ce4 	bic.w	ip, r4, r4, asr #31
  405258:	e647      	b.n	404eea <_svfprintf_r+0x10ee>
  40525a:	4d2a      	ldr	r5, [pc, #168]	; (405304 <_svfprintf_r+0x1508>)
  40525c:	e413      	b.n	404a86 <_svfprintf_r+0xc8a>
  40525e:	9c1d      	ldr	r4, [sp, #116]	; 0x74
  405260:	e787      	b.n	405172 <_svfprintf_r+0x1376>
  405262:	9b21      	ldr	r3, [sp, #132]	; 0x84
  405264:	e624      	b.n	404eb0 <_svfprintf_r+0x10b4>
  405266:	9b11      	ldr	r3, [sp, #68]	; 0x44
  405268:	1c5c      	adds	r4, r3, #1
  40526a:	ea24 7ce4 	bic.w	ip, r4, r4, asr #31
  40526e:	e63c      	b.n	404eea <_svfprintf_r+0x10ee>
  405270:	4d24      	ldr	r5, [pc, #144]	; (405304 <_svfprintf_r+0x1508>)
  405272:	e420      	b.n	404ab6 <_svfprintf_r+0xcba>
  405274:	3330      	adds	r3, #48	; 0x30
  405276:	2230      	movs	r2, #48	; 0x30
  405278:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
  40527c:	ab20      	add	r3, sp, #128	; 0x80
  40527e:	f88d 207e 	strb.w	r2, [sp, #126]	; 0x7e
  405282:	e7bf      	b.n	405204 <_svfprintf_r+0x1408>
  405284:	f10c 0401 	add.w	r4, ip, #1
  405288:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40528a:	441c      	add	r4, r3
  40528c:	ea24 7ce4 	bic.w	ip, r4, r4, asr #31
  405290:	e62b      	b.n	404eea <_svfprintf_r+0x10ee>
  405292:	222d      	movs	r2, #45	; 0x2d
  405294:	425b      	negs	r3, r3
  405296:	f88d 207d 	strb.w	r2, [sp, #125]	; 0x7d
  40529a:	e787      	b.n	4051ac <_svfprintf_r+0x13b0>
  40529c:	9b06      	ldr	r3, [sp, #24]
  40529e:	f013 0301 	ands.w	r3, r3, #1
  4052a2:	d0b9      	beq.n	405218 <_svfprintf_r+0x141c>
  4052a4:	e7b6      	b.n	405214 <_svfprintf_r+0x1418>
  4052a6:	f1bc 0f00 	cmp.w	ip, #0
  4052aa:	d109      	bne.n	4052c0 <_svfprintf_r+0x14c4>
  4052ac:	9b06      	ldr	r3, [sp, #24]
  4052ae:	07db      	lsls	r3, r3, #31
  4052b0:	d406      	bmi.n	4052c0 <_svfprintf_r+0x14c4>
  4052b2:	f04f 0c01 	mov.w	ip, #1
  4052b6:	4664      	mov	r4, ip
  4052b8:	e617      	b.n	404eea <_svfprintf_r+0x10ee>
  4052ba:	f1c3 0402 	rsb	r4, r3, #2
  4052be:	e7c7      	b.n	405250 <_svfprintf_r+0x1454>
  4052c0:	f10c 0402 	add.w	r4, ip, #2
  4052c4:	ea24 7ce4 	bic.w	ip, r4, r4, asr #31
  4052c8:	e60f      	b.n	404eea <_svfprintf_r+0x10ee>
  4052ca:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  4052cc:	785e      	ldrb	r6, [r3, #1]
  4052ce:	4628      	mov	r0, r5
  4052d0:	682c      	ldr	r4, [r5, #0]
  4052d2:	3004      	adds	r0, #4
  4052d4:	2c00      	cmp	r4, #0
  4052d6:	900c      	str	r0, [sp, #48]	; 0x30
  4052d8:	f6be ade5 	bge.w	403ea6 <_svfprintf_r+0xaa>
  4052dc:	f04f 34ff 	mov.w	r4, #4294967295
  4052e0:	f7fe bde1 	b.w	403ea6 <_svfprintf_r+0xaa>
  4052e4:	f10d 037e 	add.w	r3, sp, #126	; 0x7e
  4052e8:	e78c      	b.n	405204 <_svfprintf_r+0x1408>
  4052ea:	230c      	movs	r3, #12
  4052ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
  4052ee:	f04f 30ff 	mov.w	r0, #4294967295
  4052f2:	6013      	str	r3, [r2, #0]
  4052f4:	f7fe be50 	b.w	403f98 <_svfprintf_r+0x19c>
  4052f8:	4664      	mov	r4, ip
  4052fa:	e663      	b.n	404fc4 <_svfprintf_r+0x11c8>
  4052fc:	00409480 	.word	0x00409480
  405300:	004094c8 	.word	0x004094c8
  405304:	00409470 	.word	0x00409470
  405308:	66666667 	.word	0x66666667

0040530c <__swbuf_r>:
  40530c:	b570      	push	{r4, r5, r6, lr}
  40530e:	460d      	mov	r5, r1
  405310:	4614      	mov	r4, r2
  405312:	4606      	mov	r6, r0
  405314:	b110      	cbz	r0, 40531c <__swbuf_r+0x10>
  405316:	6b83      	ldr	r3, [r0, #56]	; 0x38
  405318:	2b00      	cmp	r3, #0
  40531a:	d048      	beq.n	4053ae <__swbuf_r+0xa2>
  40531c:	89a2      	ldrh	r2, [r4, #12]
  40531e:	69a3      	ldr	r3, [r4, #24]
  405320:	b291      	uxth	r1, r2
  405322:	60a3      	str	r3, [r4, #8]
  405324:	0708      	lsls	r0, r1, #28
  405326:	d538      	bpl.n	40539a <__swbuf_r+0x8e>
  405328:	6923      	ldr	r3, [r4, #16]
  40532a:	2b00      	cmp	r3, #0
  40532c:	d035      	beq.n	40539a <__swbuf_r+0x8e>
  40532e:	0489      	lsls	r1, r1, #18
  405330:	b2ed      	uxtb	r5, r5
  405332:	d515      	bpl.n	405360 <__swbuf_r+0x54>
  405334:	6822      	ldr	r2, [r4, #0]
  405336:	6961      	ldr	r1, [r4, #20]
  405338:	1ad3      	subs	r3, r2, r3
  40533a:	428b      	cmp	r3, r1
  40533c:	da1c      	bge.n	405378 <__swbuf_r+0x6c>
  40533e:	3301      	adds	r3, #1
  405340:	68a1      	ldr	r1, [r4, #8]
  405342:	1c50      	adds	r0, r2, #1
  405344:	3901      	subs	r1, #1
  405346:	6020      	str	r0, [r4, #0]
  405348:	60a1      	str	r1, [r4, #8]
  40534a:	7015      	strb	r5, [r2, #0]
  40534c:	6962      	ldr	r2, [r4, #20]
  40534e:	429a      	cmp	r2, r3
  405350:	d01a      	beq.n	405388 <__swbuf_r+0x7c>
  405352:	2d0a      	cmp	r5, #10
  405354:	d102      	bne.n	40535c <__swbuf_r+0x50>
  405356:	7b23      	ldrb	r3, [r4, #12]
  405358:	07db      	lsls	r3, r3, #31
  40535a:	d415      	bmi.n	405388 <__swbuf_r+0x7c>
  40535c:	4628      	mov	r0, r5
  40535e:	bd70      	pop	{r4, r5, r6, pc}
  405360:	6e61      	ldr	r1, [r4, #100]	; 0x64
  405362:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  405366:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  40536a:	81a2      	strh	r2, [r4, #12]
  40536c:	6822      	ldr	r2, [r4, #0]
  40536e:	6661      	str	r1, [r4, #100]	; 0x64
  405370:	1ad3      	subs	r3, r2, r3
  405372:	6961      	ldr	r1, [r4, #20]
  405374:	428b      	cmp	r3, r1
  405376:	dbe2      	blt.n	40533e <__swbuf_r+0x32>
  405378:	4630      	mov	r0, r6
  40537a:	4621      	mov	r1, r4
  40537c:	f001 f944 	bl	406608 <_fflush_r>
  405380:	b940      	cbnz	r0, 405394 <__swbuf_r+0x88>
  405382:	6822      	ldr	r2, [r4, #0]
  405384:	2301      	movs	r3, #1
  405386:	e7db      	b.n	405340 <__swbuf_r+0x34>
  405388:	4630      	mov	r0, r6
  40538a:	4621      	mov	r1, r4
  40538c:	f001 f93c 	bl	406608 <_fflush_r>
  405390:	2800      	cmp	r0, #0
  405392:	d0e3      	beq.n	40535c <__swbuf_r+0x50>
  405394:	f04f 30ff 	mov.w	r0, #4294967295
  405398:	bd70      	pop	{r4, r5, r6, pc}
  40539a:	4630      	mov	r0, r6
  40539c:	4621      	mov	r1, r4
  40539e:	f000 f809 	bl	4053b4 <__swsetup_r>
  4053a2:	2800      	cmp	r0, #0
  4053a4:	d1f6      	bne.n	405394 <__swbuf_r+0x88>
  4053a6:	89a2      	ldrh	r2, [r4, #12]
  4053a8:	6923      	ldr	r3, [r4, #16]
  4053aa:	b291      	uxth	r1, r2
  4053ac:	e7bf      	b.n	40532e <__swbuf_r+0x22>
  4053ae:	f001 f9c5 	bl	40673c <__sinit>
  4053b2:	e7b3      	b.n	40531c <__swbuf_r+0x10>

004053b4 <__swsetup_r>:
  4053b4:	b538      	push	{r3, r4, r5, lr}
  4053b6:	4b2f      	ldr	r3, [pc, #188]	; (405474 <__swsetup_r+0xc0>)
  4053b8:	4605      	mov	r5, r0
  4053ba:	460c      	mov	r4, r1
  4053bc:	6818      	ldr	r0, [r3, #0]
  4053be:	b110      	cbz	r0, 4053c6 <__swsetup_r+0x12>
  4053c0:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4053c2:	2b00      	cmp	r3, #0
  4053c4:	d036      	beq.n	405434 <__swsetup_r+0x80>
  4053c6:	89a2      	ldrh	r2, [r4, #12]
  4053c8:	b293      	uxth	r3, r2
  4053ca:	0718      	lsls	r0, r3, #28
  4053cc:	d50b      	bpl.n	4053e6 <__swsetup_r+0x32>
  4053ce:	6920      	ldr	r0, [r4, #16]
  4053d0:	b1a0      	cbz	r0, 4053fc <__swsetup_r+0x48>
  4053d2:	f013 0201 	ands.w	r2, r3, #1
  4053d6:	d11d      	bne.n	405414 <__swsetup_r+0x60>
  4053d8:	0799      	lsls	r1, r3, #30
  4053da:	d400      	bmi.n	4053de <__swsetup_r+0x2a>
  4053dc:	6962      	ldr	r2, [r4, #20]
  4053de:	60a2      	str	r2, [r4, #8]
  4053e0:	b1f8      	cbz	r0, 405422 <__swsetup_r+0x6e>
  4053e2:	2000      	movs	r0, #0
  4053e4:	bd38      	pop	{r3, r4, r5, pc}
  4053e6:	06d9      	lsls	r1, r3, #27
  4053e8:	d53b      	bpl.n	405462 <__swsetup_r+0xae>
  4053ea:	0758      	lsls	r0, r3, #29
  4053ec:	d425      	bmi.n	40543a <__swsetup_r+0x86>
  4053ee:	6920      	ldr	r0, [r4, #16]
  4053f0:	f042 0208 	orr.w	r2, r2, #8
  4053f4:	b293      	uxth	r3, r2
  4053f6:	81a2      	strh	r2, [r4, #12]
  4053f8:	2800      	cmp	r0, #0
  4053fa:	d1ea      	bne.n	4053d2 <__swsetup_r+0x1e>
  4053fc:	f403 7220 	and.w	r2, r3, #640	; 0x280
  405400:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  405404:	d0e5      	beq.n	4053d2 <__swsetup_r+0x1e>
  405406:	4628      	mov	r0, r5
  405408:	4621      	mov	r1, r4
  40540a:	f001 fc9b 	bl	406d44 <__smakebuf_r>
  40540e:	89a3      	ldrh	r3, [r4, #12]
  405410:	6920      	ldr	r0, [r4, #16]
  405412:	e7de      	b.n	4053d2 <__swsetup_r+0x1e>
  405414:	6963      	ldr	r3, [r4, #20]
  405416:	2200      	movs	r2, #0
  405418:	425b      	negs	r3, r3
  40541a:	60a2      	str	r2, [r4, #8]
  40541c:	61a3      	str	r3, [r4, #24]
  40541e:	2800      	cmp	r0, #0
  405420:	d1df      	bne.n	4053e2 <__swsetup_r+0x2e>
  405422:	89a3      	ldrh	r3, [r4, #12]
  405424:	061a      	lsls	r2, r3, #24
  405426:	d5dd      	bpl.n	4053e4 <__swsetup_r+0x30>
  405428:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40542c:	f04f 30ff 	mov.w	r0, #4294967295
  405430:	81a3      	strh	r3, [r4, #12]
  405432:	bd38      	pop	{r3, r4, r5, pc}
  405434:	f001 f982 	bl	40673c <__sinit>
  405438:	e7c5      	b.n	4053c6 <__swsetup_r+0x12>
  40543a:	6b21      	ldr	r1, [r4, #48]	; 0x30
  40543c:	b149      	cbz	r1, 405452 <__swsetup_r+0x9e>
  40543e:	f104 0340 	add.w	r3, r4, #64	; 0x40
  405442:	4299      	cmp	r1, r3
  405444:	d003      	beq.n	40544e <__swsetup_r+0x9a>
  405446:	4628      	mov	r0, r5
  405448:	f001 f9e6 	bl	406818 <_free_r>
  40544c:	89a2      	ldrh	r2, [r4, #12]
  40544e:	2300      	movs	r3, #0
  405450:	6323      	str	r3, [r4, #48]	; 0x30
  405452:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  405456:	2300      	movs	r3, #0
  405458:	6920      	ldr	r0, [r4, #16]
  40545a:	b292      	uxth	r2, r2
  40545c:	e884 0009 	stmia.w	r4, {r0, r3}
  405460:	e7c6      	b.n	4053f0 <__swsetup_r+0x3c>
  405462:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  405466:	2309      	movs	r3, #9
  405468:	f04f 30ff 	mov.w	r0, #4294967295
  40546c:	602b      	str	r3, [r5, #0]
  40546e:	81a2      	strh	r2, [r4, #12]
  405470:	bd38      	pop	{r3, r4, r5, pc}
  405472:	bf00      	nop
  405474:	204004b0 	.word	0x204004b0

00405478 <register_fini>:
  405478:	4b02      	ldr	r3, [pc, #8]	; (405484 <register_fini+0xc>)
  40547a:	b113      	cbz	r3, 405482 <register_fini+0xa>
  40547c:	4802      	ldr	r0, [pc, #8]	; (405488 <register_fini+0x10>)
  40547e:	f000 b805 	b.w	40548c <atexit>
  405482:	4770      	bx	lr
  405484:	00000000 	.word	0x00000000
  405488:	00406751 	.word	0x00406751

0040548c <atexit>:
  40548c:	4601      	mov	r1, r0
  40548e:	2000      	movs	r0, #0
  405490:	4602      	mov	r2, r0
  405492:	4603      	mov	r3, r0
  405494:	f002 bedc 	b.w	408250 <__register_exitproc>

00405498 <quorem>:
  405498:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40549c:	6903      	ldr	r3, [r0, #16]
  40549e:	b083      	sub	sp, #12
  4054a0:	690f      	ldr	r7, [r1, #16]
  4054a2:	429f      	cmp	r7, r3
  4054a4:	f300 8093 	bgt.w	4055ce <quorem+0x136>
  4054a8:	3f01      	subs	r7, #1
  4054aa:	f101 0614 	add.w	r6, r1, #20
  4054ae:	f100 0a14 	add.w	sl, r0, #20
  4054b2:	00bb      	lsls	r3, r7, #2
  4054b4:	f856 2027 	ldr.w	r2, [r6, r7, lsl #2]
  4054b8:	461d      	mov	r5, r3
  4054ba:	9300      	str	r3, [sp, #0]
  4054bc:	3201      	adds	r2, #1
  4054be:	f85a 3027 	ldr.w	r3, [sl, r7, lsl #2]
  4054c2:	eb0a 0405 	add.w	r4, sl, r5
  4054c6:	eb06 0905 	add.w	r9, r6, r5
  4054ca:	fbb3 f8f2 	udiv	r8, r3, r2
  4054ce:	9401      	str	r4, [sp, #4]
  4054d0:	f1b8 0f00 	cmp.w	r8, #0
  4054d4:	d040      	beq.n	405558 <quorem+0xc0>
  4054d6:	2500      	movs	r5, #0
  4054d8:	46b4      	mov	ip, r6
  4054da:	46d6      	mov	lr, sl
  4054dc:	462b      	mov	r3, r5
  4054de:	f85c bb04 	ldr.w	fp, [ip], #4
  4054e2:	f8de 2000 	ldr.w	r2, [lr]
  4054e6:	fa1f f48b 	uxth.w	r4, fp
  4054ea:	45e1      	cmp	r9, ip
  4054ec:	ea4f 4b1b 	mov.w	fp, fp, lsr #16
  4054f0:	fb04 5508 	mla	r5, r4, r8, r5
  4054f4:	fb0b fb08 	mul.w	fp, fp, r8
  4054f8:	b2ac      	uxth	r4, r5
  4054fa:	eb0b 4515 	add.w	r5, fp, r5, lsr #16
  4054fe:	eba3 0304 	sub.w	r3, r3, r4
  405502:	fa1f fb85 	uxth.w	fp, r5
  405506:	fa13 f482 	uxtah	r4, r3, r2
  40550a:	ea4f 4515 	mov.w	r5, r5, lsr #16
  40550e:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
  405512:	fa1f fb84 	uxth.w	fp, r4
  405516:	eb02 4324 	add.w	r3, r2, r4, asr #16
  40551a:	ea4b 4203 	orr.w	r2, fp, r3, lsl #16
  40551e:	ea4f 4323 	mov.w	r3, r3, asr #16
  405522:	f84e 2b04 	str.w	r2, [lr], #4
  405526:	d2da      	bcs.n	4054de <quorem+0x46>
  405528:	9b00      	ldr	r3, [sp, #0]
  40552a:	f85a 3003 	ldr.w	r3, [sl, r3]
  40552e:	b99b      	cbnz	r3, 405558 <quorem+0xc0>
  405530:	9c01      	ldr	r4, [sp, #4]
  405532:	1f23      	subs	r3, r4, #4
  405534:	459a      	cmp	sl, r3
  405536:	d20e      	bcs.n	405556 <quorem+0xbe>
  405538:	f854 3c04 	ldr.w	r3, [r4, #-4]
  40553c:	b95b      	cbnz	r3, 405556 <quorem+0xbe>
  40553e:	f1a4 0308 	sub.w	r3, r4, #8
  405542:	e001      	b.n	405548 <quorem+0xb0>
  405544:	6812      	ldr	r2, [r2, #0]
  405546:	b932      	cbnz	r2, 405556 <quorem+0xbe>
  405548:	459a      	cmp	sl, r3
  40554a:	461a      	mov	r2, r3
  40554c:	f107 37ff 	add.w	r7, r7, #4294967295
  405550:	f1a3 0304 	sub.w	r3, r3, #4
  405554:	d3f6      	bcc.n	405544 <quorem+0xac>
  405556:	6107      	str	r7, [r0, #16]
  405558:	4604      	mov	r4, r0
  40555a:	f002 fa7f 	bl	407a5c <__mcmp>
  40555e:	2800      	cmp	r0, #0
  405560:	db31      	blt.n	4055c6 <quorem+0x12e>
  405562:	f108 0801 	add.w	r8, r8, #1
  405566:	4655      	mov	r5, sl
  405568:	2000      	movs	r0, #0
  40556a:	f856 1b04 	ldr.w	r1, [r6], #4
  40556e:	682a      	ldr	r2, [r5, #0]
  405570:	b28b      	uxth	r3, r1
  405572:	45b1      	cmp	r9, r6
  405574:	ea4f 4111 	mov.w	r1, r1, lsr #16
  405578:	eba0 0303 	sub.w	r3, r0, r3
  40557c:	ebc1 4112 	rsb	r1, r1, r2, lsr #16
  405580:	fa13 f382 	uxtah	r3, r3, r2
  405584:	eb01 4223 	add.w	r2, r1, r3, asr #16
  405588:	b29b      	uxth	r3, r3
  40558a:	ea4f 4022 	mov.w	r0, r2, asr #16
  40558e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  405592:	f845 3b04 	str.w	r3, [r5], #4
  405596:	d2e8      	bcs.n	40556a <quorem+0xd2>
  405598:	f85a 2027 	ldr.w	r2, [sl, r7, lsl #2]
  40559c:	eb0a 0387 	add.w	r3, sl, r7, lsl #2
  4055a0:	b98a      	cbnz	r2, 4055c6 <quorem+0x12e>
  4055a2:	1f1a      	subs	r2, r3, #4
  4055a4:	4592      	cmp	sl, r2
  4055a6:	d20d      	bcs.n	4055c4 <quorem+0x12c>
  4055a8:	f853 2c04 	ldr.w	r2, [r3, #-4]
  4055ac:	b952      	cbnz	r2, 4055c4 <quorem+0x12c>
  4055ae:	3b08      	subs	r3, #8
  4055b0:	e001      	b.n	4055b6 <quorem+0x11e>
  4055b2:	6812      	ldr	r2, [r2, #0]
  4055b4:	b932      	cbnz	r2, 4055c4 <quorem+0x12c>
  4055b6:	459a      	cmp	sl, r3
  4055b8:	461a      	mov	r2, r3
  4055ba:	f107 37ff 	add.w	r7, r7, #4294967295
  4055be:	f1a3 0304 	sub.w	r3, r3, #4
  4055c2:	d3f6      	bcc.n	4055b2 <quorem+0x11a>
  4055c4:	6127      	str	r7, [r4, #16]
  4055c6:	4640      	mov	r0, r8
  4055c8:	b003      	add	sp, #12
  4055ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4055ce:	2000      	movs	r0, #0
  4055d0:	b003      	add	sp, #12
  4055d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4055d6:	bf00      	nop

004055d8 <_dtoa_r>:
  4055d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4055dc:	469b      	mov	fp, r3
  4055de:	b099      	sub	sp, #100	; 0x64
  4055e0:	6c03      	ldr	r3, [r0, #64]	; 0x40
  4055e2:	4604      	mov	r4, r0
  4055e4:	4692      	mov	sl, r2
  4055e6:	9d25      	ldr	r5, [sp, #148]	; 0x94
  4055e8:	b14b      	cbz	r3, 4055fe <_dtoa_r+0x26>
  4055ea:	6c46      	ldr	r6, [r0, #68]	; 0x44
  4055ec:	2201      	movs	r2, #1
  4055ee:	4619      	mov	r1, r3
  4055f0:	40b2      	lsls	r2, r6
  4055f2:	605e      	str	r6, [r3, #4]
  4055f4:	609a      	str	r2, [r3, #8]
  4055f6:	f002 f83b 	bl	407670 <_Bfree>
  4055fa:	2300      	movs	r3, #0
  4055fc:	6423      	str	r3, [r4, #64]	; 0x40
  4055fe:	f1bb 0f00 	cmp.w	fp, #0
  405602:	46d9      	mov	r9, fp
  405604:	db33      	blt.n	40566e <_dtoa_r+0x96>
  405606:	2300      	movs	r3, #0
  405608:	602b      	str	r3, [r5, #0]
  40560a:	4b99      	ldr	r3, [pc, #612]	; (405870 <_dtoa_r+0x298>)
  40560c:	461a      	mov	r2, r3
  40560e:	ea09 0303 	and.w	r3, r9, r3
  405612:	4293      	cmp	r3, r2
  405614:	d014      	beq.n	405640 <_dtoa_r+0x68>
  405616:	2200      	movs	r2, #0
  405618:	2300      	movs	r3, #0
  40561a:	4650      	mov	r0, sl
  40561c:	4659      	mov	r1, fp
  40561e:	f003 fb5d 	bl	408cdc <__aeabi_dcmpeq>
  405622:	4680      	mov	r8, r0
  405624:	b348      	cbz	r0, 40567a <_dtoa_r+0xa2>
  405626:	2301      	movs	r3, #1
  405628:	9a24      	ldr	r2, [sp, #144]	; 0x90
  40562a:	6013      	str	r3, [r2, #0]
  40562c:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40562e:	2b00      	cmp	r3, #0
  405630:	f000 80cb 	beq.w	4057ca <_dtoa_r+0x1f2>
  405634:	488f      	ldr	r0, [pc, #572]	; (405874 <_dtoa_r+0x29c>)
  405636:	6018      	str	r0, [r3, #0]
  405638:	3801      	subs	r0, #1
  40563a:	b019      	add	sp, #100	; 0x64
  40563c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405640:	f242 730f 	movw	r3, #9999	; 0x270f
  405644:	9a24      	ldr	r2, [sp, #144]	; 0x90
  405646:	6013      	str	r3, [r2, #0]
  405648:	f1ba 0f00 	cmp.w	sl, #0
  40564c:	f000 80a6 	beq.w	40579c <_dtoa_r+0x1c4>
  405650:	4889      	ldr	r0, [pc, #548]	; (405878 <_dtoa_r+0x2a0>)
  405652:	9b26      	ldr	r3, [sp, #152]	; 0x98
  405654:	2b00      	cmp	r3, #0
  405656:	d0f0      	beq.n	40563a <_dtoa_r+0x62>
  405658:	78c3      	ldrb	r3, [r0, #3]
  40565a:	2b00      	cmp	r3, #0
  40565c:	f000 80b7 	beq.w	4057ce <_dtoa_r+0x1f6>
  405660:	f100 0308 	add.w	r3, r0, #8
  405664:	9a26      	ldr	r2, [sp, #152]	; 0x98
  405666:	6013      	str	r3, [r2, #0]
  405668:	b019      	add	sp, #100	; 0x64
  40566a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40566e:	2301      	movs	r3, #1
  405670:	f02b 4900 	bic.w	r9, fp, #2147483648	; 0x80000000
  405674:	602b      	str	r3, [r5, #0]
  405676:	46cb      	mov	fp, r9
  405678:	e7c7      	b.n	40560a <_dtoa_r+0x32>
  40567a:	ad17      	add	r5, sp, #92	; 0x5c
  40567c:	a916      	add	r1, sp, #88	; 0x58
  40567e:	4620      	mov	r0, r4
  405680:	4652      	mov	r2, sl
  405682:	9500      	str	r5, [sp, #0]
  405684:	465b      	mov	r3, fp
  405686:	9101      	str	r1, [sp, #4]
  405688:	f002 fa7e 	bl	407b88 <__d2b>
  40568c:	9006      	str	r0, [sp, #24]
  40568e:	ea5f 5519 	movs.w	r5, r9, lsr #20
  405692:	f040 808c 	bne.w	4057ae <_dtoa_r+0x1d6>
  405696:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
  40569a:	f46f 6382 	mvn.w	r3, #1040	; 0x410
  40569e:	9d17      	ldr	r5, [sp, #92]	; 0x5c
  4056a0:	4445      	add	r5, r8
  4056a2:	429d      	cmp	r5, r3
  4056a4:	f2c0 81cc 	blt.w	405a40 <_dtoa_r+0x468>
  4056a8:	331f      	adds	r3, #31
  4056aa:	f205 4212 	addw	r2, r5, #1042	; 0x412
  4056ae:	1b5b      	subs	r3, r3, r5
  4056b0:	fa2a f002 	lsr.w	r0, sl, r2
  4056b4:	fa09 f903 	lsl.w	r9, r9, r3
  4056b8:	ea49 0000 	orr.w	r0, r9, r0
  4056bc:	f003 f830 	bl	408720 <__aeabi_ui2d>
  4056c0:	3d01      	subs	r5, #1
  4056c2:	2301      	movs	r3, #1
  4056c4:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
  4056c8:	9311      	str	r3, [sp, #68]	; 0x44
  4056ca:	2200      	movs	r2, #0
  4056cc:	4b6b      	ldr	r3, [pc, #428]	; (40587c <_dtoa_r+0x2a4>)
  4056ce:	f002 fee9 	bl	4084a4 <__aeabi_dsub>
  4056d2:	a361      	add	r3, pc, #388	; (adr r3, 405858 <_dtoa_r+0x280>)
  4056d4:	e9d3 2300 	ldrd	r2, r3, [r3]
  4056d8:	f003 f898 	bl	40880c <__aeabi_dmul>
  4056dc:	a360      	add	r3, pc, #384	; (adr r3, 405860 <_dtoa_r+0x288>)
  4056de:	e9d3 2300 	ldrd	r2, r3, [r3]
  4056e2:	f002 fee1 	bl	4084a8 <__adddf3>
  4056e6:	4606      	mov	r6, r0
  4056e8:	460f      	mov	r7, r1
  4056ea:	4628      	mov	r0, r5
  4056ec:	f003 f828 	bl	408740 <__aeabi_i2d>
  4056f0:	a35d      	add	r3, pc, #372	; (adr r3, 405868 <_dtoa_r+0x290>)
  4056f2:	e9d3 2300 	ldrd	r2, r3, [r3]
  4056f6:	f003 f889 	bl	40880c <__aeabi_dmul>
  4056fa:	4602      	mov	r2, r0
  4056fc:	460b      	mov	r3, r1
  4056fe:	4630      	mov	r0, r6
  405700:	4639      	mov	r1, r7
  405702:	f002 fed1 	bl	4084a8 <__adddf3>
  405706:	4606      	mov	r6, r0
  405708:	460f      	mov	r7, r1
  40570a:	f003 fb19 	bl	408d40 <__aeabi_d2iz>
  40570e:	2200      	movs	r2, #0
  405710:	9002      	str	r0, [sp, #8]
  405712:	4639      	mov	r1, r7
  405714:	4630      	mov	r0, r6
  405716:	2300      	movs	r3, #0
  405718:	f003 faea 	bl	408cf0 <__aeabi_dcmplt>
  40571c:	2800      	cmp	r0, #0
  40571e:	f040 8171 	bne.w	405a04 <_dtoa_r+0x42c>
  405722:	9b02      	ldr	r3, [sp, #8]
  405724:	2b16      	cmp	r3, #22
  405726:	f200 8091 	bhi.w	40584c <_dtoa_r+0x274>
  40572a:	9802      	ldr	r0, [sp, #8]
  40572c:	4652      	mov	r2, sl
  40572e:	4954      	ldr	r1, [pc, #336]	; (405880 <_dtoa_r+0x2a8>)
  405730:	465b      	mov	r3, fp
  405732:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
  405736:	e9d1 0100 	ldrd	r0, r1, [r1]
  40573a:	f003 faf7 	bl	408d2c <__aeabi_dcmpgt>
  40573e:	2800      	cmp	r0, #0
  405740:	f000 817c 	beq.w	405a3c <_dtoa_r+0x464>
  405744:	9b02      	ldr	r3, [sp, #8]
  405746:	3b01      	subs	r3, #1
  405748:	9302      	str	r3, [sp, #8]
  40574a:	2300      	movs	r3, #0
  40574c:	930d      	str	r3, [sp, #52]	; 0x34
  40574e:	ebc5 0508 	rsb	r5, r5, r8
  405752:	1e6b      	subs	r3, r5, #1
  405754:	9303      	str	r3, [sp, #12]
  405756:	f100 816c 	bmi.w	405a32 <_dtoa_r+0x45a>
  40575a:	2300      	movs	r3, #0
  40575c:	9307      	str	r3, [sp, #28]
  40575e:	9b02      	ldr	r3, [sp, #8]
  405760:	2b00      	cmp	r3, #0
  405762:	f2c0 815d 	blt.w	405a20 <_dtoa_r+0x448>
  405766:	9a03      	ldr	r2, [sp, #12]
  405768:	930c      	str	r3, [sp, #48]	; 0x30
  40576a:	4611      	mov	r1, r2
  40576c:	4419      	add	r1, r3
  40576e:	2300      	movs	r3, #0
  405770:	9103      	str	r1, [sp, #12]
  405772:	930a      	str	r3, [sp, #40]	; 0x28
  405774:	9b22      	ldr	r3, [sp, #136]	; 0x88
  405776:	2b09      	cmp	r3, #9
  405778:	d82b      	bhi.n	4057d2 <_dtoa_r+0x1fa>
  40577a:	2b05      	cmp	r3, #5
  40577c:	f340 867e 	ble.w	40647c <_dtoa_r+0xea4>
  405780:	3b04      	subs	r3, #4
  405782:	2500      	movs	r5, #0
  405784:	9322      	str	r3, [sp, #136]	; 0x88
  405786:	9b22      	ldr	r3, [sp, #136]	; 0x88
  405788:	3b02      	subs	r3, #2
  40578a:	2b03      	cmp	r3, #3
  40578c:	f200 8679 	bhi.w	406482 <_dtoa_r+0xeaa>
  405790:	e8df f013 	tbh	[pc, r3, lsl #1]
  405794:	0289029b 	.word	0x0289029b
  405798:	068d0180 	.word	0x068d0180
  40579c:	f3c9 0013 	ubfx	r0, r9, #0, #20
  4057a0:	4b35      	ldr	r3, [pc, #212]	; (405878 <_dtoa_r+0x2a0>)
  4057a2:	4a38      	ldr	r2, [pc, #224]	; (405884 <_dtoa_r+0x2ac>)
  4057a4:	2800      	cmp	r0, #0
  4057a6:	bf14      	ite	ne
  4057a8:	4618      	movne	r0, r3
  4057aa:	4610      	moveq	r0, r2
  4057ac:	e751      	b.n	405652 <_dtoa_r+0x7a>
  4057ae:	f3cb 0313 	ubfx	r3, fp, #0, #20
  4057b2:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
  4057b6:	4650      	mov	r0, sl
  4057b8:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
  4057bc:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
  4057c0:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
  4057c4:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
  4057c8:	e77f      	b.n	4056ca <_dtoa_r+0xf2>
  4057ca:	482f      	ldr	r0, [pc, #188]	; (405888 <_dtoa_r+0x2b0>)
  4057cc:	e735      	b.n	40563a <_dtoa_r+0x62>
  4057ce:	1cc3      	adds	r3, r0, #3
  4057d0:	e748      	b.n	405664 <_dtoa_r+0x8c>
  4057d2:	f04f 33ff 	mov.w	r3, #4294967295
  4057d6:	2100      	movs	r1, #0
  4057d8:	4620      	mov	r0, r4
  4057da:	461d      	mov	r5, r3
  4057dc:	9310      	str	r3, [sp, #64]	; 0x40
  4057de:	2301      	movs	r3, #1
  4057e0:	6461      	str	r1, [r4, #68]	; 0x44
  4057e2:	9123      	str	r1, [sp, #140]	; 0x8c
  4057e4:	930b      	str	r3, [sp, #44]	; 0x2c
  4057e6:	f001 ff1b 	bl	407620 <_Balloc>
  4057ea:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  4057ec:	9005      	str	r0, [sp, #20]
  4057ee:	9322      	str	r3, [sp, #136]	; 0x88
  4057f0:	9504      	str	r5, [sp, #16]
  4057f2:	6420      	str	r0, [r4, #64]	; 0x40
  4057f4:	9a02      	ldr	r2, [sp, #8]
  4057f6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  4057f8:	2a0e      	cmp	r2, #14
  4057fa:	dc49      	bgt.n	405890 <_dtoa_r+0x2b8>
  4057fc:	2b00      	cmp	r3, #0
  4057fe:	db47      	blt.n	405890 <_dtoa_r+0x2b8>
  405800:	4b1f      	ldr	r3, [pc, #124]	; (405880 <_dtoa_r+0x2a8>)
  405802:	9a02      	ldr	r2, [sp, #8]
  405804:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  405808:	e9d3 8900 	ldrd	r8, r9, [r3]
  40580c:	9b04      	ldr	r3, [sp, #16]
  40580e:	2b00      	cmp	r3, #0
  405810:	f300 825e 	bgt.w	405cd0 <_dtoa_r+0x6f8>
  405814:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  405816:	2b00      	cmp	r3, #0
  405818:	f280 825a 	bge.w	405cd0 <_dtoa_r+0x6f8>
  40581c:	9b04      	ldr	r3, [sp, #16]
  40581e:	2b00      	cmp	r3, #0
  405820:	f040 85bf 	bne.w	4063a2 <_dtoa_r+0xdca>
  405824:	2200      	movs	r2, #0
  405826:	4b19      	ldr	r3, [pc, #100]	; (40588c <_dtoa_r+0x2b4>)
  405828:	4640      	mov	r0, r8
  40582a:	4649      	mov	r1, r9
  40582c:	f002 ffee 	bl	40880c <__aeabi_dmul>
  405830:	4652      	mov	r2, sl
  405832:	465b      	mov	r3, fp
  405834:	f003 fa70 	bl	408d18 <__aeabi_dcmpge>
  405838:	9f04      	ldr	r7, [sp, #16]
  40583a:	9708      	str	r7, [sp, #32]
  40583c:	2800      	cmp	r0, #0
  40583e:	f000 80bd 	beq.w	4059bc <_dtoa_r+0x3e4>
  405842:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  405844:	9d05      	ldr	r5, [sp, #20]
  405846:	43db      	mvns	r3, r3
  405848:	9302      	str	r3, [sp, #8]
  40584a:	e0be      	b.n	4059ca <_dtoa_r+0x3f2>
  40584c:	2301      	movs	r3, #1
  40584e:	930d      	str	r3, [sp, #52]	; 0x34
  405850:	e77d      	b.n	40574e <_dtoa_r+0x176>
  405852:	bf00      	nop
  405854:	f3af 8000 	nop.w
  405858:	636f4361 	.word	0x636f4361
  40585c:	3fd287a7 	.word	0x3fd287a7
  405860:	8b60c8b3 	.word	0x8b60c8b3
  405864:	3fc68a28 	.word	0x3fc68a28
  405868:	509f79fb 	.word	0x509f79fb
  40586c:	3fd34413 	.word	0x3fd34413
  405870:	7ff00000 	.word	0x7ff00000
  405874:	004094d1 	.word	0x004094d1
  405878:	004094e0 	.word	0x004094e0
  40587c:	3ff80000 	.word	0x3ff80000
  405880:	004094f0 	.word	0x004094f0
  405884:	004094d4 	.word	0x004094d4
  405888:	004094d0 	.word	0x004094d0
  40588c:	40140000 	.word	0x40140000
  405890:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  405892:	2a00      	cmp	r2, #0
  405894:	f040 80e1 	bne.w	405a5a <_dtoa_r+0x482>
  405898:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40589a:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  40589c:	9d07      	ldr	r5, [sp, #28]
  40589e:	9308      	str	r3, [sp, #32]
  4058a0:	9903      	ldr	r1, [sp, #12]
  4058a2:	2900      	cmp	r1, #0
  4058a4:	460b      	mov	r3, r1
  4058a6:	dd0a      	ble.n	4058be <_dtoa_r+0x2e6>
  4058a8:	2d00      	cmp	r5, #0
  4058aa:	dd08      	ble.n	4058be <_dtoa_r+0x2e6>
  4058ac:	42a9      	cmp	r1, r5
  4058ae:	9a07      	ldr	r2, [sp, #28]
  4058b0:	bfa8      	it	ge
  4058b2:	462b      	movge	r3, r5
  4058b4:	1ad2      	subs	r2, r2, r3
  4058b6:	1aed      	subs	r5, r5, r3
  4058b8:	1acb      	subs	r3, r1, r3
  4058ba:	9207      	str	r2, [sp, #28]
  4058bc:	9303      	str	r3, [sp, #12]
  4058be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4058c0:	2b00      	cmp	r3, #0
  4058c2:	dd1b      	ble.n	4058fc <_dtoa_r+0x324>
  4058c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  4058c6:	2b00      	cmp	r3, #0
  4058c8:	f000 84ce 	beq.w	406268 <_dtoa_r+0xc90>
  4058cc:	2e00      	cmp	r6, #0
  4058ce:	dd11      	ble.n	4058f4 <_dtoa_r+0x31c>
  4058d0:	9908      	ldr	r1, [sp, #32]
  4058d2:	4632      	mov	r2, r6
  4058d4:	4620      	mov	r0, r4
  4058d6:	f002 f817 	bl	407908 <__pow5mult>
  4058da:	9f06      	ldr	r7, [sp, #24]
  4058dc:	4601      	mov	r1, r0
  4058de:	9008      	str	r0, [sp, #32]
  4058e0:	463a      	mov	r2, r7
  4058e2:	4620      	mov	r0, r4
  4058e4:	f001 ff6e 	bl	4077c4 <__multiply>
  4058e8:	4603      	mov	r3, r0
  4058ea:	4639      	mov	r1, r7
  4058ec:	4620      	mov	r0, r4
  4058ee:	9306      	str	r3, [sp, #24]
  4058f0:	f001 febe 	bl	407670 <_Bfree>
  4058f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4058f6:	1b9a      	subs	r2, r3, r6
  4058f8:	f040 84ff 	bne.w	4062fa <_dtoa_r+0xd22>
  4058fc:	4620      	mov	r0, r4
  4058fe:	2101      	movs	r1, #1
  405900:	f001 ff56 	bl	4077b0 <__i2b>
  405904:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  405906:	4607      	mov	r7, r0
  405908:	2b00      	cmp	r3, #0
  40590a:	f340 8282 	ble.w	405e12 <_dtoa_r+0x83a>
  40590e:	4601      	mov	r1, r0
  405910:	461a      	mov	r2, r3
  405912:	4620      	mov	r0, r4
  405914:	f001 fff8 	bl	407908 <__pow5mult>
  405918:	9b22      	ldr	r3, [sp, #136]	; 0x88
  40591a:	4607      	mov	r7, r0
  40591c:	2b01      	cmp	r3, #1
  40591e:	f340 84f3 	ble.w	406308 <_dtoa_r+0xd30>
  405922:	f04f 0800 	mov.w	r8, #0
  405926:	693b      	ldr	r3, [r7, #16]
  405928:	eb07 0383 	add.w	r3, r7, r3, lsl #2
  40592c:	6918      	ldr	r0, [r3, #16]
  40592e:	f001 feeb 	bl	407708 <__hi0bits>
  405932:	f1c0 0020 	rsb	r0, r0, #32
  405936:	9b03      	ldr	r3, [sp, #12]
  405938:	4418      	add	r0, r3
  40593a:	f010 001f 	ands.w	r0, r0, #31
  40593e:	f000 82a0 	beq.w	405e82 <_dtoa_r+0x8aa>
  405942:	f1c0 0320 	rsb	r3, r0, #32
  405946:	2b04      	cmp	r3, #4
  405948:	f340 8592 	ble.w	406470 <_dtoa_r+0xe98>
  40594c:	f1c0 001c 	rsb	r0, r0, #28
  405950:	9b07      	ldr	r3, [sp, #28]
  405952:	4405      	add	r5, r0
  405954:	4403      	add	r3, r0
  405956:	9307      	str	r3, [sp, #28]
  405958:	9b03      	ldr	r3, [sp, #12]
  40595a:	4403      	add	r3, r0
  40595c:	9303      	str	r3, [sp, #12]
  40595e:	9b07      	ldr	r3, [sp, #28]
  405960:	2b00      	cmp	r3, #0
  405962:	dd05      	ble.n	405970 <_dtoa_r+0x398>
  405964:	9906      	ldr	r1, [sp, #24]
  405966:	461a      	mov	r2, r3
  405968:	4620      	mov	r0, r4
  40596a:	f002 f81d 	bl	4079a8 <__lshift>
  40596e:	9006      	str	r0, [sp, #24]
  405970:	9b03      	ldr	r3, [sp, #12]
  405972:	2b00      	cmp	r3, #0
  405974:	dd05      	ble.n	405982 <_dtoa_r+0x3aa>
  405976:	4639      	mov	r1, r7
  405978:	461a      	mov	r2, r3
  40597a:	4620      	mov	r0, r4
  40597c:	f002 f814 	bl	4079a8 <__lshift>
  405980:	4607      	mov	r7, r0
  405982:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  405984:	2b00      	cmp	r3, #0
  405986:	f040 838b 	bne.w	4060a0 <_dtoa_r+0xac8>
  40598a:	9b22      	ldr	r3, [sp, #136]	; 0x88
  40598c:	2b02      	cmp	r3, #2
  40598e:	f340 827a 	ble.w	405e86 <_dtoa_r+0x8ae>
  405992:	9b04      	ldr	r3, [sp, #16]
  405994:	2b00      	cmp	r3, #0
  405996:	f300 8276 	bgt.w	405e86 <_dtoa_r+0x8ae>
  40599a:	9b04      	ldr	r3, [sp, #16]
  40599c:	2b00      	cmp	r3, #0
  40599e:	f47f af50 	bne.w	405842 <_dtoa_r+0x26a>
  4059a2:	4639      	mov	r1, r7
  4059a4:	2205      	movs	r2, #5
  4059a6:	4620      	mov	r0, r4
  4059a8:	f001 fe6c 	bl	407684 <__multadd>
  4059ac:	4607      	mov	r7, r0
  4059ae:	9806      	ldr	r0, [sp, #24]
  4059b0:	4639      	mov	r1, r7
  4059b2:	f002 f853 	bl	407a5c <__mcmp>
  4059b6:	2800      	cmp	r0, #0
  4059b8:	f77f af43 	ble.w	405842 <_dtoa_r+0x26a>
  4059bc:	9a02      	ldr	r2, [sp, #8]
  4059be:	2331      	movs	r3, #49	; 0x31
  4059c0:	3201      	adds	r2, #1
  4059c2:	9202      	str	r2, [sp, #8]
  4059c4:	9a05      	ldr	r2, [sp, #20]
  4059c6:	1c55      	adds	r5, r2, #1
  4059c8:	7013      	strb	r3, [r2, #0]
  4059ca:	4639      	mov	r1, r7
  4059cc:	4620      	mov	r0, r4
  4059ce:	f001 fe4f 	bl	407670 <_Bfree>
  4059d2:	9b08      	ldr	r3, [sp, #32]
  4059d4:	b11b      	cbz	r3, 4059de <_dtoa_r+0x406>
  4059d6:	9908      	ldr	r1, [sp, #32]
  4059d8:	4620      	mov	r0, r4
  4059da:	f001 fe49 	bl	407670 <_Bfree>
  4059de:	4620      	mov	r0, r4
  4059e0:	9906      	ldr	r1, [sp, #24]
  4059e2:	f001 fe45 	bl	407670 <_Bfree>
  4059e6:	2200      	movs	r2, #0
  4059e8:	9b02      	ldr	r3, [sp, #8]
  4059ea:	702a      	strb	r2, [r5, #0]
  4059ec:	3301      	adds	r3, #1
  4059ee:	9a24      	ldr	r2, [sp, #144]	; 0x90
  4059f0:	6013      	str	r3, [r2, #0]
  4059f2:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4059f4:	2b00      	cmp	r3, #0
  4059f6:	f000 82a3 	beq.w	405f40 <_dtoa_r+0x968>
  4059fa:	9805      	ldr	r0, [sp, #20]
  4059fc:	601d      	str	r5, [r3, #0]
  4059fe:	b019      	add	sp, #100	; 0x64
  405a00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405a04:	9802      	ldr	r0, [sp, #8]
  405a06:	f002 fe9b 	bl	408740 <__aeabi_i2d>
  405a0a:	4632      	mov	r2, r6
  405a0c:	463b      	mov	r3, r7
  405a0e:	f003 f965 	bl	408cdc <__aeabi_dcmpeq>
  405a12:	2800      	cmp	r0, #0
  405a14:	f47f ae85 	bne.w	405722 <_dtoa_r+0x14a>
  405a18:	9b02      	ldr	r3, [sp, #8]
  405a1a:	3b01      	subs	r3, #1
  405a1c:	9302      	str	r3, [sp, #8]
  405a1e:	e680      	b.n	405722 <_dtoa_r+0x14a>
  405a20:	9a07      	ldr	r2, [sp, #28]
  405a22:	9b02      	ldr	r3, [sp, #8]
  405a24:	1ad2      	subs	r2, r2, r3
  405a26:	425b      	negs	r3, r3
  405a28:	930a      	str	r3, [sp, #40]	; 0x28
  405a2a:	2300      	movs	r3, #0
  405a2c:	9207      	str	r2, [sp, #28]
  405a2e:	930c      	str	r3, [sp, #48]	; 0x30
  405a30:	e6a0      	b.n	405774 <_dtoa_r+0x19c>
  405a32:	425b      	negs	r3, r3
  405a34:	9307      	str	r3, [sp, #28]
  405a36:	2300      	movs	r3, #0
  405a38:	9303      	str	r3, [sp, #12]
  405a3a:	e690      	b.n	40575e <_dtoa_r+0x186>
  405a3c:	900d      	str	r0, [sp, #52]	; 0x34
  405a3e:	e686      	b.n	40574e <_dtoa_r+0x176>
  405a40:	4bbd      	ldr	r3, [pc, #756]	; (405d38 <_dtoa_r+0x760>)
  405a42:	1b5b      	subs	r3, r3, r5
  405a44:	fa0a f003 	lsl.w	r0, sl, r3
  405a48:	e638      	b.n	4056bc <_dtoa_r+0xe4>
  405a4a:	2100      	movs	r1, #0
  405a4c:	f04f 32ff 	mov.w	r2, #4294967295
  405a50:	9123      	str	r1, [sp, #140]	; 0x8c
  405a52:	2101      	movs	r1, #1
  405a54:	9204      	str	r2, [sp, #16]
  405a56:	910b      	str	r1, [sp, #44]	; 0x2c
  405a58:	9210      	str	r2, [sp, #64]	; 0x40
  405a5a:	9a22      	ldr	r2, [sp, #136]	; 0x88
  405a5c:	2a01      	cmp	r2, #1
  405a5e:	f340 8460 	ble.w	406322 <_dtoa_r+0xd4a>
  405a62:	9b04      	ldr	r3, [sp, #16]
  405a64:	1e5e      	subs	r6, r3, #1
  405a66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405a68:	42b3      	cmp	r3, r6
  405a6a:	f2c0 8405 	blt.w	406278 <_dtoa_r+0xca0>
  405a6e:	1b9e      	subs	r6, r3, r6
  405a70:	9b04      	ldr	r3, [sp, #16]
  405a72:	2b00      	cmp	r3, #0
  405a74:	f2c0 8461 	blt.w	40633a <_dtoa_r+0xd62>
  405a78:	9d07      	ldr	r5, [sp, #28]
  405a7a:	9b04      	ldr	r3, [sp, #16]
  405a7c:	9a07      	ldr	r2, [sp, #28]
  405a7e:	4620      	mov	r0, r4
  405a80:	2101      	movs	r1, #1
  405a82:	441a      	add	r2, r3
  405a84:	9207      	str	r2, [sp, #28]
  405a86:	9a03      	ldr	r2, [sp, #12]
  405a88:	441a      	add	r2, r3
  405a8a:	9203      	str	r2, [sp, #12]
  405a8c:	f001 fe90 	bl	4077b0 <__i2b>
  405a90:	9008      	str	r0, [sp, #32]
  405a92:	e705      	b.n	4058a0 <_dtoa_r+0x2c8>
  405a94:	2301      	movs	r3, #1
  405a96:	930b      	str	r3, [sp, #44]	; 0x2c
  405a98:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  405a9a:	2b00      	cmp	r3, #0
  405a9c:	f340 83df 	ble.w	40625e <_dtoa_r+0xc86>
  405aa0:	2b0e      	cmp	r3, #14
  405aa2:	bf8c      	ite	hi
  405aa4:	2500      	movhi	r5, #0
  405aa6:	f005 0501 	andls.w	r5, r5, #1
  405aaa:	461e      	mov	r6, r3
  405aac:	9310      	str	r3, [sp, #64]	; 0x40
  405aae:	9304      	str	r3, [sp, #16]
  405ab0:	2100      	movs	r1, #0
  405ab2:	2e17      	cmp	r6, #23
  405ab4:	6461      	str	r1, [r4, #68]	; 0x44
  405ab6:	d909      	bls.n	405acc <_dtoa_r+0x4f4>
  405ab8:	2201      	movs	r2, #1
  405aba:	2304      	movs	r3, #4
  405abc:	005b      	lsls	r3, r3, #1
  405abe:	4611      	mov	r1, r2
  405ac0:	3201      	adds	r2, #1
  405ac2:	f103 0014 	add.w	r0, r3, #20
  405ac6:	42b0      	cmp	r0, r6
  405ac8:	d9f8      	bls.n	405abc <_dtoa_r+0x4e4>
  405aca:	6461      	str	r1, [r4, #68]	; 0x44
  405acc:	4620      	mov	r0, r4
  405ace:	f001 fda7 	bl	407620 <_Balloc>
  405ad2:	9005      	str	r0, [sp, #20]
  405ad4:	6420      	str	r0, [r4, #64]	; 0x40
  405ad6:	2d00      	cmp	r5, #0
  405ad8:	f43f ae8c 	beq.w	4057f4 <_dtoa_r+0x21c>
  405adc:	9802      	ldr	r0, [sp, #8]
  405ade:	2800      	cmp	r0, #0
  405ae0:	e9cd ab0e 	strd	sl, fp, [sp, #56]	; 0x38
  405ae4:	f340 8233 	ble.w	405f4e <_dtoa_r+0x976>
  405ae8:	4a94      	ldr	r2, [pc, #592]	; (405d3c <_dtoa_r+0x764>)
  405aea:	f000 030f 	and.w	r3, r0, #15
  405aee:	1105      	asrs	r5, r0, #4
  405af0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
  405af4:	06ea      	lsls	r2, r5, #27
  405af6:	e9d3 6700 	ldrd	r6, r7, [r3]
  405afa:	f140 821c 	bpl.w	405f36 <_dtoa_r+0x95e>
  405afe:	4b90      	ldr	r3, [pc, #576]	; (405d40 <_dtoa_r+0x768>)
  405b00:	4650      	mov	r0, sl
  405b02:	4659      	mov	r1, fp
  405b04:	f005 050f 	and.w	r5, r5, #15
  405b08:	f04f 0803 	mov.w	r8, #3
  405b0c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
  405b10:	f002 ffa6 	bl	408a60 <__aeabi_ddiv>
  405b14:	4682      	mov	sl, r0
  405b16:	468b      	mov	fp, r1
  405b18:	b18d      	cbz	r5, 405b3e <_dtoa_r+0x566>
  405b1a:	f8df 9224 	ldr.w	r9, [pc, #548]	; 405d40 <_dtoa_r+0x768>
  405b1e:	07eb      	lsls	r3, r5, #31
  405b20:	4630      	mov	r0, r6
  405b22:	4639      	mov	r1, r7
  405b24:	d507      	bpl.n	405b36 <_dtoa_r+0x55e>
  405b26:	f108 0801 	add.w	r8, r8, #1
  405b2a:	e9d9 2300 	ldrd	r2, r3, [r9]
  405b2e:	f002 fe6d 	bl	40880c <__aeabi_dmul>
  405b32:	4606      	mov	r6, r0
  405b34:	460f      	mov	r7, r1
  405b36:	106d      	asrs	r5, r5, #1
  405b38:	f109 0908 	add.w	r9, r9, #8
  405b3c:	d1ef      	bne.n	405b1e <_dtoa_r+0x546>
  405b3e:	4650      	mov	r0, sl
  405b40:	4659      	mov	r1, fp
  405b42:	4632      	mov	r2, r6
  405b44:	463b      	mov	r3, r7
  405b46:	f002 ff8b 	bl	408a60 <__aeabi_ddiv>
  405b4a:	e9cd 0108 	strd	r0, r1, [sp, #32]
  405b4e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  405b50:	b143      	cbz	r3, 405b64 <_dtoa_r+0x58c>
  405b52:	2200      	movs	r2, #0
  405b54:	4b7b      	ldr	r3, [pc, #492]	; (405d44 <_dtoa_r+0x76c>)
  405b56:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  405b5a:	f003 f8c9 	bl	408cf0 <__aeabi_dcmplt>
  405b5e:	2800      	cmp	r0, #0
  405b60:	f040 8393 	bne.w	40628a <_dtoa_r+0xcb2>
  405b64:	4640      	mov	r0, r8
  405b66:	f002 fdeb 	bl	408740 <__aeabi_i2d>
  405b6a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
  405b6e:	f002 fe4d 	bl	40880c <__aeabi_dmul>
  405b72:	4b75      	ldr	r3, [pc, #468]	; (405d48 <_dtoa_r+0x770>)
  405b74:	2200      	movs	r2, #0
  405b76:	f002 fc97 	bl	4084a8 <__adddf3>
  405b7a:	9b04      	ldr	r3, [sp, #16]
  405b7c:	4606      	mov	r6, r0
  405b7e:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
  405b82:	2b00      	cmp	r3, #0
  405b84:	f000 8161 	beq.w	405e4a <_dtoa_r+0x872>
  405b88:	9b02      	ldr	r3, [sp, #8]
  405b8a:	f8dd c010 	ldr.w	ip, [sp, #16]
  405b8e:	9314      	str	r3, [sp, #80]	; 0x50
  405b90:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  405b92:	2b00      	cmp	r3, #0
  405b94:	f000 820b 	beq.w	405fae <_dtoa_r+0x9d6>
  405b98:	4b68      	ldr	r3, [pc, #416]	; (405d3c <_dtoa_r+0x764>)
  405b9a:	2000      	movs	r0, #0
  405b9c:	9a05      	ldr	r2, [sp, #20]
  405b9e:	eb03 03cc 	add.w	r3, r3, ip, lsl #3
  405ba2:	496a      	ldr	r1, [pc, #424]	; (405d4c <_dtoa_r+0x774>)
  405ba4:	1c55      	adds	r5, r2, #1
  405ba6:	f8cd c048 	str.w	ip, [sp, #72]	; 0x48
  405baa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
  405bae:	f002 ff57 	bl	408a60 <__aeabi_ddiv>
  405bb2:	4632      	mov	r2, r6
  405bb4:	463b      	mov	r3, r7
  405bb6:	f002 fc75 	bl	4084a4 <__aeabi_dsub>
  405bba:	4682      	mov	sl, r0
  405bbc:	468b      	mov	fp, r1
  405bbe:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
  405bc2:	4649      	mov	r1, r9
  405bc4:	4640      	mov	r0, r8
  405bc6:	f003 f8bb 	bl	408d40 <__aeabi_d2iz>
  405bca:	4606      	mov	r6, r0
  405bcc:	f002 fdb8 	bl	408740 <__aeabi_i2d>
  405bd0:	4602      	mov	r2, r0
  405bd2:	3630      	adds	r6, #48	; 0x30
  405bd4:	460b      	mov	r3, r1
  405bd6:	4640      	mov	r0, r8
  405bd8:	4649      	mov	r1, r9
  405bda:	f002 fc63 	bl	4084a4 <__aeabi_dsub>
  405bde:	9f05      	ldr	r7, [sp, #20]
  405be0:	4680      	mov	r8, r0
  405be2:	4689      	mov	r9, r1
  405be4:	b2f6      	uxtb	r6, r6
  405be6:	4650      	mov	r0, sl
  405be8:	4659      	mov	r1, fp
  405bea:	4642      	mov	r2, r8
  405bec:	464b      	mov	r3, r9
  405bee:	703e      	strb	r6, [r7, #0]
  405bf0:	f003 f89c 	bl	408d2c <__aeabi_dcmpgt>
  405bf4:	2800      	cmp	r0, #0
  405bf6:	f040 8243 	bne.w	406080 <_dtoa_r+0xaa8>
  405bfa:	4642      	mov	r2, r8
  405bfc:	464b      	mov	r3, r9
  405bfe:	2000      	movs	r0, #0
  405c00:	4950      	ldr	r1, [pc, #320]	; (405d44 <_dtoa_r+0x76c>)
  405c02:	f002 fc4f 	bl	4084a4 <__aeabi_dsub>
  405c06:	4602      	mov	r2, r0
  405c08:	460b      	mov	r3, r1
  405c0a:	4650      	mov	r0, sl
  405c0c:	4659      	mov	r1, fp
  405c0e:	f003 f88d 	bl	408d2c <__aeabi_dcmpgt>
  405c12:	2800      	cmp	r0, #0
  405c14:	f040 80eb 	bne.w	405dee <_dtoa_r+0x816>
  405c18:	f8dd c048 	ldr.w	ip, [sp, #72]	; 0x48
  405c1c:	f1bc 0f01 	cmp.w	ip, #1
  405c20:	f340 8192 	ble.w	405f48 <_dtoa_r+0x970>
  405c24:	9f05      	ldr	r7, [sp, #20]
  405c26:	9412      	str	r4, [sp, #72]	; 0x48
  405c28:	4467      	add	r7, ip
  405c2a:	9708      	str	r7, [sp, #32]
  405c2c:	e00e      	b.n	405c4c <_dtoa_r+0x674>
  405c2e:	2000      	movs	r0, #0
  405c30:	4944      	ldr	r1, [pc, #272]	; (405d44 <_dtoa_r+0x76c>)
  405c32:	f002 fc37 	bl	4084a4 <__aeabi_dsub>
  405c36:	4652      	mov	r2, sl
  405c38:	465b      	mov	r3, fp
  405c3a:	f003 f859 	bl	408cf0 <__aeabi_dcmplt>
  405c3e:	2800      	cmp	r0, #0
  405c40:	f040 83a1 	bne.w	406386 <_dtoa_r+0xdae>
  405c44:	9b08      	ldr	r3, [sp, #32]
  405c46:	429d      	cmp	r5, r3
  405c48:	f000 817d 	beq.w	405f46 <_dtoa_r+0x96e>
  405c4c:	4650      	mov	r0, sl
  405c4e:	4659      	mov	r1, fp
  405c50:	2200      	movs	r2, #0
  405c52:	4b3f      	ldr	r3, [pc, #252]	; (405d50 <_dtoa_r+0x778>)
  405c54:	f002 fdda 	bl	40880c <__aeabi_dmul>
  405c58:	2200      	movs	r2, #0
  405c5a:	4b3d      	ldr	r3, [pc, #244]	; (405d50 <_dtoa_r+0x778>)
  405c5c:	4682      	mov	sl, r0
  405c5e:	468b      	mov	fp, r1
  405c60:	4640      	mov	r0, r8
  405c62:	4649      	mov	r1, r9
  405c64:	f002 fdd2 	bl	40880c <__aeabi_dmul>
  405c68:	4606      	mov	r6, r0
  405c6a:	460f      	mov	r7, r1
  405c6c:	f003 f868 	bl	408d40 <__aeabi_d2iz>
  405c70:	4604      	mov	r4, r0
  405c72:	f002 fd65 	bl	408740 <__aeabi_i2d>
  405c76:	4602      	mov	r2, r0
  405c78:	460b      	mov	r3, r1
  405c7a:	3430      	adds	r4, #48	; 0x30
  405c7c:	4630      	mov	r0, r6
  405c7e:	4639      	mov	r1, r7
  405c80:	b2e6      	uxtb	r6, r4
  405c82:	f002 fc0f 	bl	4084a4 <__aeabi_dsub>
  405c86:	4680      	mov	r8, r0
  405c88:	4689      	mov	r9, r1
  405c8a:	4652      	mov	r2, sl
  405c8c:	465b      	mov	r3, fp
  405c8e:	f805 6b01 	strb.w	r6, [r5], #1
  405c92:	f003 f82d 	bl	408cf0 <__aeabi_dcmplt>
  405c96:	4642      	mov	r2, r8
  405c98:	464b      	mov	r3, r9
  405c9a:	2800      	cmp	r0, #0
  405c9c:	d0c7      	beq.n	405c2e <_dtoa_r+0x656>
  405c9e:	9b14      	ldr	r3, [sp, #80]	; 0x50
  405ca0:	9c12      	ldr	r4, [sp, #72]	; 0x48
  405ca2:	9302      	str	r3, [sp, #8]
  405ca4:	e69b      	b.n	4059de <_dtoa_r+0x406>
  405ca6:	2300      	movs	r3, #0
  405ca8:	930b      	str	r3, [sp, #44]	; 0x2c
  405caa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  405cac:	9a02      	ldr	r2, [sp, #8]
  405cae:	4413      	add	r3, r2
  405cb0:	9310      	str	r3, [sp, #64]	; 0x40
  405cb2:	3301      	adds	r3, #1
  405cb4:	2b00      	cmp	r3, #0
  405cb6:	9304      	str	r3, [sp, #16]
  405cb8:	f340 82c9 	ble.w	40624e <_dtoa_r+0xc76>
  405cbc:	9e04      	ldr	r6, [sp, #16]
  405cbe:	2e0e      	cmp	r6, #14
  405cc0:	bf8c      	ite	hi
  405cc2:	2500      	movhi	r5, #0
  405cc4:	f005 0501 	andls.w	r5, r5, #1
  405cc8:	e6f2      	b.n	405ab0 <_dtoa_r+0x4d8>
  405cca:	2300      	movs	r3, #0
  405ccc:	930b      	str	r3, [sp, #44]	; 0x2c
  405cce:	e6e3      	b.n	405a98 <_dtoa_r+0x4c0>
  405cd0:	9905      	ldr	r1, [sp, #20]
  405cd2:	4642      	mov	r2, r8
  405cd4:	464b      	mov	r3, r9
  405cd6:	4650      	mov	r0, sl
  405cd8:	1c4d      	adds	r5, r1, #1
  405cda:	4659      	mov	r1, fp
  405cdc:	f002 fec0 	bl	408a60 <__aeabi_ddiv>
  405ce0:	4656      	mov	r6, sl
  405ce2:	f003 f82d 	bl	408d40 <__aeabi_d2iz>
  405ce6:	4682      	mov	sl, r0
  405ce8:	f002 fd2a 	bl	408740 <__aeabi_i2d>
  405cec:	4642      	mov	r2, r8
  405cee:	464b      	mov	r3, r9
  405cf0:	f002 fd8c 	bl	40880c <__aeabi_dmul>
  405cf4:	4602      	mov	r2, r0
  405cf6:	460b      	mov	r3, r1
  405cf8:	4630      	mov	r0, r6
  405cfa:	4659      	mov	r1, fp
  405cfc:	f002 fbd2 	bl	4084a4 <__aeabi_dsub>
  405d00:	f10a 0330 	add.w	r3, sl, #48	; 0x30
  405d04:	9a05      	ldr	r2, [sp, #20]
  405d06:	4606      	mov	r6, r0
  405d08:	460f      	mov	r7, r1
  405d0a:	7013      	strb	r3, [r2, #0]
  405d0c:	9b04      	ldr	r3, [sp, #16]
  405d0e:	2b01      	cmp	r3, #1
  405d10:	d04d      	beq.n	405dae <_dtoa_r+0x7d6>
  405d12:	2200      	movs	r2, #0
  405d14:	4b0e      	ldr	r3, [pc, #56]	; (405d50 <_dtoa_r+0x778>)
  405d16:	f002 fd79 	bl	40880c <__aeabi_dmul>
  405d1a:	2200      	movs	r2, #0
  405d1c:	2300      	movs	r3, #0
  405d1e:	4606      	mov	r6, r0
  405d20:	460f      	mov	r7, r1
  405d22:	f002 ffdb 	bl	408cdc <__aeabi_dcmpeq>
  405d26:	2800      	cmp	r0, #0
  405d28:	f47f ae59 	bne.w	4059de <_dtoa_r+0x406>
  405d2c:	9403      	str	r4, [sp, #12]
  405d2e:	f8dd b014 	ldr.w	fp, [sp, #20]
  405d32:	9c04      	ldr	r4, [sp, #16]
  405d34:	e019      	b.n	405d6a <_dtoa_r+0x792>
  405d36:	bf00      	nop
  405d38:	fffffbee 	.word	0xfffffbee
  405d3c:	004094f0 	.word	0x004094f0
  405d40:	004095c8 	.word	0x004095c8
  405d44:	3ff00000 	.word	0x3ff00000
  405d48:	401c0000 	.word	0x401c0000
  405d4c:	3fe00000 	.word	0x3fe00000
  405d50:	40240000 	.word	0x40240000
  405d54:	f002 fd5a 	bl	40880c <__aeabi_dmul>
  405d58:	2200      	movs	r2, #0
  405d5a:	2300      	movs	r3, #0
  405d5c:	4606      	mov	r6, r0
  405d5e:	460f      	mov	r7, r1
  405d60:	f002 ffbc 	bl	408cdc <__aeabi_dcmpeq>
  405d64:	2800      	cmp	r0, #0
  405d66:	f040 82e5 	bne.w	406334 <_dtoa_r+0xd5c>
  405d6a:	4642      	mov	r2, r8
  405d6c:	464b      	mov	r3, r9
  405d6e:	4630      	mov	r0, r6
  405d70:	4639      	mov	r1, r7
  405d72:	f002 fe75 	bl	408a60 <__aeabi_ddiv>
  405d76:	f002 ffe3 	bl	408d40 <__aeabi_d2iz>
  405d7a:	4682      	mov	sl, r0
  405d7c:	f002 fce0 	bl	408740 <__aeabi_i2d>
  405d80:	4642      	mov	r2, r8
  405d82:	464b      	mov	r3, r9
  405d84:	f002 fd42 	bl	40880c <__aeabi_dmul>
  405d88:	4602      	mov	r2, r0
  405d8a:	460b      	mov	r3, r1
  405d8c:	4630      	mov	r0, r6
  405d8e:	4639      	mov	r1, r7
  405d90:	f002 fb88 	bl	4084a4 <__aeabi_dsub>
  405d94:	f10a 0e30 	add.w	lr, sl, #48	; 0x30
  405d98:	4606      	mov	r6, r0
  405d9a:	460f      	mov	r7, r1
  405d9c:	f805 eb01 	strb.w	lr, [r5], #1
  405da0:	ebcb 0e05 	rsb	lr, fp, r5
  405da4:	2200      	movs	r2, #0
  405da6:	4bb8      	ldr	r3, [pc, #736]	; (406088 <_dtoa_r+0xab0>)
  405da8:	4574      	cmp	r4, lr
  405daa:	d1d3      	bne.n	405d54 <_dtoa_r+0x77c>
  405dac:	9c03      	ldr	r4, [sp, #12]
  405dae:	4632      	mov	r2, r6
  405db0:	463b      	mov	r3, r7
  405db2:	4630      	mov	r0, r6
  405db4:	4639      	mov	r1, r7
  405db6:	f002 fb77 	bl	4084a8 <__adddf3>
  405dba:	4606      	mov	r6, r0
  405dbc:	460f      	mov	r7, r1
  405dbe:	4640      	mov	r0, r8
  405dc0:	4649      	mov	r1, r9
  405dc2:	4632      	mov	r2, r6
  405dc4:	463b      	mov	r3, r7
  405dc6:	f002 ff93 	bl	408cf0 <__aeabi_dcmplt>
  405dca:	b960      	cbnz	r0, 405de6 <_dtoa_r+0x80e>
  405dcc:	4640      	mov	r0, r8
  405dce:	4649      	mov	r1, r9
  405dd0:	4632      	mov	r2, r6
  405dd2:	463b      	mov	r3, r7
  405dd4:	f002 ff82 	bl	408cdc <__aeabi_dcmpeq>
  405dd8:	2800      	cmp	r0, #0
  405dda:	f43f ae00 	beq.w	4059de <_dtoa_r+0x406>
  405dde:	f01a 0f01 	tst.w	sl, #1
  405de2:	f43f adfc 	beq.w	4059de <_dtoa_r+0x406>
  405de6:	9b02      	ldr	r3, [sp, #8]
  405de8:	9314      	str	r3, [sp, #80]	; 0x50
  405dea:	f815 6c01 	ldrb.w	r6, [r5, #-1]
  405dee:	1e6a      	subs	r2, r5, #1
  405df0:	9b05      	ldr	r3, [sp, #20]
  405df2:	e004      	b.n	405dfe <_dtoa_r+0x826>
  405df4:	429a      	cmp	r2, r3
  405df6:	f000 8277 	beq.w	4062e8 <_dtoa_r+0xd10>
  405dfa:	f812 6d01 	ldrb.w	r6, [r2, #-1]!
  405dfe:	2e39      	cmp	r6, #57	; 0x39
  405e00:	f102 0501 	add.w	r5, r2, #1
  405e04:	d0f6      	beq.n	405df4 <_dtoa_r+0x81c>
  405e06:	1c73      	adds	r3, r6, #1
  405e08:	9914      	ldr	r1, [sp, #80]	; 0x50
  405e0a:	b2db      	uxtb	r3, r3
  405e0c:	9102      	str	r1, [sp, #8]
  405e0e:	7013      	strb	r3, [r2, #0]
  405e10:	e5e5      	b.n	4059de <_dtoa_r+0x406>
  405e12:	9b22      	ldr	r3, [sp, #136]	; 0x88
  405e14:	2b01      	cmp	r3, #1
  405e16:	f340 8161 	ble.w	4060dc <_dtoa_r+0xb04>
  405e1a:	f04f 0800 	mov.w	r8, #0
  405e1e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  405e20:	2b00      	cmp	r3, #0
  405e22:	f47f ad80 	bne.w	405926 <_dtoa_r+0x34e>
  405e26:	2001      	movs	r0, #1
  405e28:	e585      	b.n	405936 <_dtoa_r+0x35e>
  405e2a:	4640      	mov	r0, r8
  405e2c:	f002 fc88 	bl	408740 <__aeabi_i2d>
  405e30:	4602      	mov	r2, r0
  405e32:	460b      	mov	r3, r1
  405e34:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  405e38:	f002 fce8 	bl	40880c <__aeabi_dmul>
  405e3c:	2200      	movs	r2, #0
  405e3e:	4b93      	ldr	r3, [pc, #588]	; (40608c <_dtoa_r+0xab4>)
  405e40:	f002 fb32 	bl	4084a8 <__adddf3>
  405e44:	4606      	mov	r6, r0
  405e46:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
  405e4a:	2200      	movs	r2, #0
  405e4c:	4b90      	ldr	r3, [pc, #576]	; (406090 <_dtoa_r+0xab8>)
  405e4e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  405e52:	f002 fb27 	bl	4084a4 <__aeabi_dsub>
  405e56:	4632      	mov	r2, r6
  405e58:	463b      	mov	r3, r7
  405e5a:	4680      	mov	r8, r0
  405e5c:	4689      	mov	r9, r1
  405e5e:	f002 ff65 	bl	408d2c <__aeabi_dcmpgt>
  405e62:	4605      	mov	r5, r0
  405e64:	2800      	cmp	r0, #0
  405e66:	f040 809f 	bne.w	405fa8 <_dtoa_r+0x9d0>
  405e6a:	4632      	mov	r2, r6
  405e6c:	4640      	mov	r0, r8
  405e6e:	4649      	mov	r1, r9
  405e70:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
  405e74:	f002 ff3c 	bl	408cf0 <__aeabi_dcmplt>
  405e78:	2800      	cmp	r0, #0
  405e7a:	d065      	beq.n	405f48 <_dtoa_r+0x970>
  405e7c:	462f      	mov	r7, r5
  405e7e:	9508      	str	r5, [sp, #32]
  405e80:	e4df      	b.n	405842 <_dtoa_r+0x26a>
  405e82:	201c      	movs	r0, #28
  405e84:	e564      	b.n	405950 <_dtoa_r+0x378>
  405e86:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  405e88:	2b00      	cmp	r3, #0
  405e8a:	f040 814f 	bne.w	40612c <_dtoa_r+0xb54>
  405e8e:	f8dd a014 	ldr.w	sl, [sp, #20]
  405e92:	9e06      	ldr	r6, [sp, #24]
  405e94:	4655      	mov	r5, sl
  405e96:	f8dd 8010 	ldr.w	r8, [sp, #16]
  405e9a:	e002      	b.n	405ea2 <_dtoa_r+0x8ca>
  405e9c:	f001 fbf2 	bl	407684 <__multadd>
  405ea0:	4606      	mov	r6, r0
  405ea2:	4639      	mov	r1, r7
  405ea4:	4630      	mov	r0, r6
  405ea6:	f7ff faf7 	bl	405498 <quorem>
  405eaa:	f100 0930 	add.w	r9, r0, #48	; 0x30
  405eae:	4631      	mov	r1, r6
  405eb0:	4620      	mov	r0, r4
  405eb2:	f805 9b01 	strb.w	r9, [r5], #1
  405eb6:	ebca 0e05 	rsb	lr, sl, r5
  405eba:	220a      	movs	r2, #10
  405ebc:	2300      	movs	r3, #0
  405ebe:	45c6      	cmp	lr, r8
  405ec0:	dbec      	blt.n	405e9c <_dtoa_r+0x8c4>
  405ec2:	9b05      	ldr	r3, [sp, #20]
  405ec4:	f04f 0a00 	mov.w	sl, #0
  405ec8:	9a04      	ldr	r2, [sp, #16]
  405eca:	9606      	str	r6, [sp, #24]
  405ecc:	2a01      	cmp	r2, #1
  405ece:	bfac      	ite	ge
  405ed0:	189b      	addge	r3, r3, r2
  405ed2:	3301      	addlt	r3, #1
  405ed4:	461d      	mov	r5, r3
  405ed6:	9906      	ldr	r1, [sp, #24]
  405ed8:	2201      	movs	r2, #1
  405eda:	4620      	mov	r0, r4
  405edc:	f001 fd64 	bl	4079a8 <__lshift>
  405ee0:	4639      	mov	r1, r7
  405ee2:	9006      	str	r0, [sp, #24]
  405ee4:	f001 fdba 	bl	407a5c <__mcmp>
  405ee8:	2800      	cmp	r0, #0
  405eea:	f340 824e 	ble.w	40638a <_dtoa_r+0xdb2>
  405eee:	f815 2c01 	ldrb.w	r2, [r5, #-1]
  405ef2:	1e6b      	subs	r3, r5, #1
  405ef4:	9905      	ldr	r1, [sp, #20]
  405ef6:	e004      	b.n	405f02 <_dtoa_r+0x92a>
  405ef8:	428b      	cmp	r3, r1
  405efa:	f000 820b 	beq.w	406314 <_dtoa_r+0xd3c>
  405efe:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
  405f02:	2a39      	cmp	r2, #57	; 0x39
  405f04:	f103 0501 	add.w	r5, r3, #1
  405f08:	d0f6      	beq.n	405ef8 <_dtoa_r+0x920>
  405f0a:	3201      	adds	r2, #1
  405f0c:	701a      	strb	r2, [r3, #0]
  405f0e:	4639      	mov	r1, r7
  405f10:	4620      	mov	r0, r4
  405f12:	f001 fbad 	bl	407670 <_Bfree>
  405f16:	9b08      	ldr	r3, [sp, #32]
  405f18:	2b00      	cmp	r3, #0
  405f1a:	f43f ad60 	beq.w	4059de <_dtoa_r+0x406>
  405f1e:	459a      	cmp	sl, r3
  405f20:	f43f ad59 	beq.w	4059d6 <_dtoa_r+0x3fe>
  405f24:	f1ba 0f00 	cmp.w	sl, #0
  405f28:	f43f ad55 	beq.w	4059d6 <_dtoa_r+0x3fe>
  405f2c:	4651      	mov	r1, sl
  405f2e:	4620      	mov	r0, r4
  405f30:	f001 fb9e 	bl	407670 <_Bfree>
  405f34:	e54f      	b.n	4059d6 <_dtoa_r+0x3fe>
  405f36:	e9dd ab0e 	ldrd	sl, fp, [sp, #56]	; 0x38
  405f3a:	f04f 0802 	mov.w	r8, #2
  405f3e:	e5eb      	b.n	405b18 <_dtoa_r+0x540>
  405f40:	9805      	ldr	r0, [sp, #20]
  405f42:	f7ff bb7a 	b.w	40563a <_dtoa_r+0x62>
  405f46:	9c12      	ldr	r4, [sp, #72]	; 0x48
  405f48:	e9dd ab0e 	ldrd	sl, fp, [sp, #56]	; 0x38
  405f4c:	e452      	b.n	4057f4 <_dtoa_r+0x21c>
  405f4e:	9b02      	ldr	r3, [sp, #8]
  405f50:	425d      	negs	r5, r3
  405f52:	2d00      	cmp	r5, #0
  405f54:	f000 81c1 	beq.w	4062da <_dtoa_r+0xd02>
  405f58:	f005 020f 	and.w	r2, r5, #15
  405f5c:	4b4d      	ldr	r3, [pc, #308]	; (406094 <_dtoa_r+0xabc>)
  405f5e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  405f62:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
  405f66:	e9d3 2300 	ldrd	r2, r3, [r3]
  405f6a:	f002 fc4f 	bl	40880c <__aeabi_dmul>
  405f6e:	112d      	asrs	r5, r5, #4
  405f70:	e9cd 0108 	strd	r0, r1, [sp, #32]
  405f74:	f000 8275 	beq.w	406462 <_dtoa_r+0xe8a>
  405f78:	4e47      	ldr	r6, [pc, #284]	; (406098 <_dtoa_r+0xac0>)
  405f7a:	f04f 0802 	mov.w	r8, #2
  405f7e:	4602      	mov	r2, r0
  405f80:	460b      	mov	r3, r1
  405f82:	07ef      	lsls	r7, r5, #31
  405f84:	4610      	mov	r0, r2
  405f86:	4619      	mov	r1, r3
  405f88:	d507      	bpl.n	405f9a <_dtoa_r+0x9c2>
  405f8a:	f108 0801 	add.w	r8, r8, #1
  405f8e:	e9d6 2300 	ldrd	r2, r3, [r6]
  405f92:	f002 fc3b 	bl	40880c <__aeabi_dmul>
  405f96:	4602      	mov	r2, r0
  405f98:	460b      	mov	r3, r1
  405f9a:	106d      	asrs	r5, r5, #1
  405f9c:	f106 0608 	add.w	r6, r6, #8
  405fa0:	d1ef      	bne.n	405f82 <_dtoa_r+0x9aa>
  405fa2:	e9cd 2308 	strd	r2, r3, [sp, #32]
  405fa6:	e5d2      	b.n	405b4e <_dtoa_r+0x576>
  405fa8:	2700      	movs	r7, #0
  405faa:	9708      	str	r7, [sp, #32]
  405fac:	e506      	b.n	4059bc <_dtoa_r+0x3e4>
  405fae:	f10c 3bff 	add.w	fp, ip, #4294967295
  405fb2:	4938      	ldr	r1, [pc, #224]	; (406094 <_dtoa_r+0xabc>)
  405fb4:	4632      	mov	r2, r6
  405fb6:	463b      	mov	r3, r7
  405fb8:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
  405fbc:	f8cd c054 	str.w	ip, [sp, #84]	; 0x54
  405fc0:	9f05      	ldr	r7, [sp, #20]
  405fc2:	e9d1 0100 	ldrd	r0, r1, [r1]
  405fc6:	f002 fc21 	bl	40880c <__aeabi_dmul>
  405fca:	1c7d      	adds	r5, r7, #1
  405fcc:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
  405fd0:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
  405fd4:	4649      	mov	r1, r9
  405fd6:	4640      	mov	r0, r8
  405fd8:	f002 feb2 	bl	408d40 <__aeabi_d2iz>
  405fdc:	4606      	mov	r6, r0
  405fde:	f002 fbaf 	bl	408740 <__aeabi_i2d>
  405fe2:	4602      	mov	r2, r0
  405fe4:	460b      	mov	r3, r1
  405fe6:	4640      	mov	r0, r8
  405fe8:	4649      	mov	r1, r9
  405fea:	3630      	adds	r6, #48	; 0x30
  405fec:	f002 fa5a 	bl	4084a4 <__aeabi_dsub>
  405ff0:	f8dd c054 	ldr.w	ip, [sp, #84]	; 0x54
  405ff4:	4680      	mov	r8, r0
  405ff6:	4689      	mov	r9, r1
  405ff8:	f1bc 0f01 	cmp.w	ip, #1
  405ffc:	703e      	strb	r6, [r7, #0]
  405ffe:	d020      	beq.n	406042 <_dtoa_r+0xa6a>
  406000:	9b05      	ldr	r3, [sp, #20]
  406002:	4640      	mov	r0, r8
  406004:	46aa      	mov	sl, r5
  406006:	46a8      	mov	r8, r5
  406008:	eb03 070c 	add.w	r7, r3, ip
  40600c:	46b9      	mov	r9, r7
  40600e:	2200      	movs	r2, #0
  406010:	4b1d      	ldr	r3, [pc, #116]	; (406088 <_dtoa_r+0xab0>)
  406012:	f002 fbfb 	bl	40880c <__aeabi_dmul>
  406016:	460f      	mov	r7, r1
  406018:	4606      	mov	r6, r0
  40601a:	f002 fe91 	bl	408d40 <__aeabi_d2iz>
  40601e:	4605      	mov	r5, r0
  406020:	f002 fb8e 	bl	408740 <__aeabi_i2d>
  406024:	4602      	mov	r2, r0
  406026:	460b      	mov	r3, r1
  406028:	3530      	adds	r5, #48	; 0x30
  40602a:	4630      	mov	r0, r6
  40602c:	4639      	mov	r1, r7
  40602e:	f002 fa39 	bl	4084a4 <__aeabi_dsub>
  406032:	f80a 5b01 	strb.w	r5, [sl], #1
  406036:	45ca      	cmp	sl, r9
  406038:	d1e9      	bne.n	40600e <_dtoa_r+0xa36>
  40603a:	4645      	mov	r5, r8
  40603c:	4689      	mov	r9, r1
  40603e:	4680      	mov	r8, r0
  406040:	445d      	add	r5, fp
  406042:	2200      	movs	r2, #0
  406044:	4b15      	ldr	r3, [pc, #84]	; (40609c <_dtoa_r+0xac4>)
  406046:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
  40604a:	f002 fa2d 	bl	4084a8 <__adddf3>
  40604e:	4642      	mov	r2, r8
  406050:	464b      	mov	r3, r9
  406052:	f002 fe4d 	bl	408cf0 <__aeabi_dcmplt>
  406056:	2800      	cmp	r0, #0
  406058:	f47f aec7 	bne.w	405dea <_dtoa_r+0x812>
  40605c:	2000      	movs	r0, #0
  40605e:	490f      	ldr	r1, [pc, #60]	; (40609c <_dtoa_r+0xac4>)
  406060:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
  406064:	f002 fa1e 	bl	4084a4 <__aeabi_dsub>
  406068:	4642      	mov	r2, r8
  40606a:	464b      	mov	r3, r9
  40606c:	f002 fe5e 	bl	408d2c <__aeabi_dcmpgt>
  406070:	b908      	cbnz	r0, 406076 <_dtoa_r+0xa9e>
  406072:	e769      	b.n	405f48 <_dtoa_r+0x970>
  406074:	4615      	mov	r5, r2
  406076:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  40607a:	1e6a      	subs	r2, r5, #1
  40607c:	2b30      	cmp	r3, #48	; 0x30
  40607e:	d0f9      	beq.n	406074 <_dtoa_r+0xa9c>
  406080:	9b14      	ldr	r3, [sp, #80]	; 0x50
  406082:	9302      	str	r3, [sp, #8]
  406084:	e4ab      	b.n	4059de <_dtoa_r+0x406>
  406086:	bf00      	nop
  406088:	40240000 	.word	0x40240000
  40608c:	401c0000 	.word	0x401c0000
  406090:	40140000 	.word	0x40140000
  406094:	004094f0 	.word	0x004094f0
  406098:	004095c8 	.word	0x004095c8
  40609c:	3fe00000 	.word	0x3fe00000
  4060a0:	9806      	ldr	r0, [sp, #24]
  4060a2:	4639      	mov	r1, r7
  4060a4:	f001 fcda 	bl	407a5c <__mcmp>
  4060a8:	2800      	cmp	r0, #0
  4060aa:	f6bf ac6e 	bge.w	40598a <_dtoa_r+0x3b2>
  4060ae:	9e02      	ldr	r6, [sp, #8]
  4060b0:	2300      	movs	r3, #0
  4060b2:	9906      	ldr	r1, [sp, #24]
  4060b4:	4620      	mov	r0, r4
  4060b6:	3e01      	subs	r6, #1
  4060b8:	220a      	movs	r2, #10
  4060ba:	9602      	str	r6, [sp, #8]
  4060bc:	f001 fae2 	bl	407684 <__multadd>
  4060c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  4060c2:	9006      	str	r0, [sp, #24]
  4060c4:	bb1b      	cbnz	r3, 40610e <_dtoa_r+0xb36>
  4060c6:	9b22      	ldr	r3, [sp, #136]	; 0x88
  4060c8:	2b02      	cmp	r3, #2
  4060ca:	f340 81ce 	ble.w	40646a <_dtoa_r+0xe92>
  4060ce:	9b10      	ldr	r3, [sp, #64]	; 0x40
  4060d0:	2b00      	cmp	r3, #0
  4060d2:	f300 81ca 	bgt.w	40646a <_dtoa_r+0xe92>
  4060d6:	9b10      	ldr	r3, [sp, #64]	; 0x40
  4060d8:	9304      	str	r3, [sp, #16]
  4060da:	e45e      	b.n	40599a <_dtoa_r+0x3c2>
  4060dc:	f1ba 0f00 	cmp.w	sl, #0
  4060e0:	f47f ae9b 	bne.w	405e1a <_dtoa_r+0x842>
  4060e4:	f3cb 0313 	ubfx	r3, fp, #0, #20
  4060e8:	2b00      	cmp	r3, #0
  4060ea:	f47f ae96 	bne.w	405e1a <_dtoa_r+0x842>
  4060ee:	f02b 4600 	bic.w	r6, fp, #2147483648	; 0x80000000
  4060f2:	0d36      	lsrs	r6, r6, #20
  4060f4:	0536      	lsls	r6, r6, #20
  4060f6:	2e00      	cmp	r6, #0
  4060f8:	f000 818a 	beq.w	406410 <_dtoa_r+0xe38>
  4060fc:	9b07      	ldr	r3, [sp, #28]
  4060fe:	f04f 0801 	mov.w	r8, #1
  406102:	3301      	adds	r3, #1
  406104:	9307      	str	r3, [sp, #28]
  406106:	9b03      	ldr	r3, [sp, #12]
  406108:	3301      	adds	r3, #1
  40610a:	9303      	str	r3, [sp, #12]
  40610c:	e687      	b.n	405e1e <_dtoa_r+0x846>
  40610e:	2300      	movs	r3, #0
  406110:	9908      	ldr	r1, [sp, #32]
  406112:	4620      	mov	r0, r4
  406114:	220a      	movs	r2, #10
  406116:	f001 fab5 	bl	407684 <__multadd>
  40611a:	9b22      	ldr	r3, [sp, #136]	; 0x88
  40611c:	9008      	str	r0, [sp, #32]
  40611e:	2b02      	cmp	r3, #2
  406120:	dd02      	ble.n	406128 <_dtoa_r+0xb50>
  406122:	9b10      	ldr	r3, [sp, #64]	; 0x40
  406124:	2b00      	cmp	r3, #0
  406126:	ddd6      	ble.n	4060d6 <_dtoa_r+0xafe>
  406128:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40612a:	9304      	str	r3, [sp, #16]
  40612c:	2d00      	cmp	r5, #0
  40612e:	dd05      	ble.n	40613c <_dtoa_r+0xb64>
  406130:	9908      	ldr	r1, [sp, #32]
  406132:	462a      	mov	r2, r5
  406134:	4620      	mov	r0, r4
  406136:	f001 fc37 	bl	4079a8 <__lshift>
  40613a:	9008      	str	r0, [sp, #32]
  40613c:	f1b8 0f00 	cmp.w	r8, #0
  406140:	f040 8133 	bne.w	4063aa <_dtoa_r+0xdd2>
  406144:	9e08      	ldr	r6, [sp, #32]
  406146:	f00a 0101 	and.w	r1, sl, #1
  40614a:	9b04      	ldr	r3, [sp, #16]
  40614c:	9a22      	ldr	r2, [sp, #136]	; 0x88
  40614e:	3b01      	subs	r3, #1
  406150:	910b      	str	r1, [sp, #44]	; 0x2c
  406152:	9905      	ldr	r1, [sp, #20]
  406154:	fab2 f282 	clz	r2, r2
  406158:	970a      	str	r7, [sp, #40]	; 0x28
  40615a:	18cb      	adds	r3, r1, r3
  40615c:	4688      	mov	r8, r1
  40615e:	f8dd b020 	ldr.w	fp, [sp, #32]
  406162:	930c      	str	r3, [sp, #48]	; 0x30
  406164:	0953      	lsrs	r3, r2, #5
  406166:	9f06      	ldr	r7, [sp, #24]
  406168:	9303      	str	r3, [sp, #12]
  40616a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  40616c:	4638      	mov	r0, r7
  40616e:	4629      	mov	r1, r5
  406170:	f7ff f992 	bl	405498 <quorem>
  406174:	4659      	mov	r1, fp
  406176:	4681      	mov	r9, r0
  406178:	4638      	mov	r0, r7
  40617a:	f001 fc6f 	bl	407a5c <__mcmp>
  40617e:	4629      	mov	r1, r5
  406180:	4632      	mov	r2, r6
  406182:	4682      	mov	sl, r0
  406184:	4620      	mov	r0, r4
  406186:	f001 fc8d 	bl	407aa4 <__mdiff>
  40618a:	68c2      	ldr	r2, [r0, #12]
  40618c:	4605      	mov	r5, r0
  40618e:	f109 0c30 	add.w	ip, r9, #48	; 0x30
  406192:	9207      	str	r2, [sp, #28]
  406194:	2a00      	cmp	r2, #0
  406196:	d150      	bne.n	40623a <_dtoa_r+0xc62>
  406198:	4629      	mov	r1, r5
  40619a:	4638      	mov	r0, r7
  40619c:	f8cd c018 	str.w	ip, [sp, #24]
  4061a0:	f001 fc5c 	bl	407a5c <__mcmp>
  4061a4:	4629      	mov	r1, r5
  4061a6:	9004      	str	r0, [sp, #16]
  4061a8:	4620      	mov	r0, r4
  4061aa:	f001 fa61 	bl	407670 <_Bfree>
  4061ae:	9a03      	ldr	r2, [sp, #12]
  4061b0:	9b04      	ldr	r3, [sp, #16]
  4061b2:	f8dd c018 	ldr.w	ip, [sp, #24]
  4061b6:	b132      	cbz	r2, 4061c6 <_dtoa_r+0xbee>
  4061b8:	b92b      	cbnz	r3, 4061c6 <_dtoa_r+0xbee>
  4061ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  4061bc:	9a07      	ldr	r2, [sp, #28]
  4061be:	2b00      	cmp	r3, #0
  4061c0:	f000 8128 	beq.w	406414 <_dtoa_r+0xe3c>
  4061c4:	4613      	mov	r3, r2
  4061c6:	f1ba 0f00 	cmp.w	sl, #0
  4061ca:	f2c0 80bc 	blt.w	406346 <_dtoa_r+0xd6e>
  4061ce:	9a03      	ldr	r2, [sp, #12]
  4061d0:	b132      	cbz	r2, 4061e0 <_dtoa_r+0xc08>
  4061d2:	f1ba 0f00 	cmp.w	sl, #0
  4061d6:	d103      	bne.n	4061e0 <_dtoa_r+0xc08>
  4061d8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  4061da:	2a00      	cmp	r2, #0
  4061dc:	f000 80b3 	beq.w	406346 <_dtoa_r+0xd6e>
  4061e0:	2b00      	cmp	r3, #0
  4061e2:	f300 80fe 	bgt.w	4063e2 <_dtoa_r+0xe0a>
  4061e6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  4061e8:	f108 0901 	add.w	r9, r8, #1
  4061ec:	f888 c000 	strb.w	ip, [r8]
  4061f0:	4598      	cmp	r8, r3
  4061f2:	464d      	mov	r5, r9
  4061f4:	f000 8106 	beq.w	406404 <_dtoa_r+0xe2c>
  4061f8:	4639      	mov	r1, r7
  4061fa:	220a      	movs	r2, #10
  4061fc:	2300      	movs	r3, #0
  4061fe:	4620      	mov	r0, r4
  406200:	f001 fa40 	bl	407684 <__multadd>
  406204:	45b3      	cmp	fp, r6
  406206:	4607      	mov	r7, r0
  406208:	4659      	mov	r1, fp
  40620a:	4620      	mov	r0, r4
  40620c:	f04f 020a 	mov.w	r2, #10
  406210:	f04f 0300 	mov.w	r3, #0
  406214:	d00b      	beq.n	40622e <_dtoa_r+0xc56>
  406216:	f001 fa35 	bl	407684 <__multadd>
  40621a:	4631      	mov	r1, r6
  40621c:	4683      	mov	fp, r0
  40621e:	220a      	movs	r2, #10
  406220:	4620      	mov	r0, r4
  406222:	2300      	movs	r3, #0
  406224:	f001 fa2e 	bl	407684 <__multadd>
  406228:	46c8      	mov	r8, r9
  40622a:	4606      	mov	r6, r0
  40622c:	e79d      	b.n	40616a <_dtoa_r+0xb92>
  40622e:	f001 fa29 	bl	407684 <__multadd>
  406232:	46c8      	mov	r8, r9
  406234:	4683      	mov	fp, r0
  406236:	4606      	mov	r6, r0
  406238:	e797      	b.n	40616a <_dtoa_r+0xb92>
  40623a:	4601      	mov	r1, r0
  40623c:	4620      	mov	r0, r4
  40623e:	f8cd c010 	str.w	ip, [sp, #16]
  406242:	f001 fa15 	bl	407670 <_Bfree>
  406246:	2301      	movs	r3, #1
  406248:	f8dd c010 	ldr.w	ip, [sp, #16]
  40624c:	e7bb      	b.n	4061c6 <_dtoa_r+0xbee>
  40624e:	2b0e      	cmp	r3, #14
  406250:	bf8c      	ite	hi
  406252:	2300      	movhi	r3, #0
  406254:	2301      	movls	r3, #1
  406256:	2100      	movs	r1, #0
  406258:	401d      	ands	r5, r3
  40625a:	6461      	str	r1, [r4, #68]	; 0x44
  40625c:	e436      	b.n	405acc <_dtoa_r+0x4f4>
  40625e:	2301      	movs	r3, #1
  406260:	9323      	str	r3, [sp, #140]	; 0x8c
  406262:	9310      	str	r3, [sp, #64]	; 0x40
  406264:	9304      	str	r3, [sp, #16]
  406266:	e7f6      	b.n	406256 <_dtoa_r+0xc7e>
  406268:	9906      	ldr	r1, [sp, #24]
  40626a:	4620      	mov	r0, r4
  40626c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40626e:	f001 fb4b 	bl	407908 <__pow5mult>
  406272:	9006      	str	r0, [sp, #24]
  406274:	f7ff bb42 	b.w	4058fc <_dtoa_r+0x324>
  406278:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40627a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  40627c:	1af3      	subs	r3, r6, r3
  40627e:	960a      	str	r6, [sp, #40]	; 0x28
  406280:	2600      	movs	r6, #0
  406282:	441a      	add	r2, r3
  406284:	920c      	str	r2, [sp, #48]	; 0x30
  406286:	f7ff bbf3 	b.w	405a70 <_dtoa_r+0x498>
  40628a:	9b04      	ldr	r3, [sp, #16]
  40628c:	2b00      	cmp	r3, #0
  40628e:	f43f adcc 	beq.w	405e2a <_dtoa_r+0x852>
  406292:	9d10      	ldr	r5, [sp, #64]	; 0x40
  406294:	2d00      	cmp	r5, #0
  406296:	f77f ae57 	ble.w	405f48 <_dtoa_r+0x970>
  40629a:	2200      	movs	r2, #0
  40629c:	4b86      	ldr	r3, [pc, #536]	; (4064b8 <_dtoa_r+0xee0>)
  40629e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  4062a2:	f002 fab3 	bl	40880c <__aeabi_dmul>
  4062a6:	9b02      	ldr	r3, [sp, #8]
  4062a8:	4606      	mov	r6, r0
  4062aa:	460f      	mov	r7, r1
  4062ac:	3b01      	subs	r3, #1
  4062ae:	f108 0001 	add.w	r0, r8, #1
  4062b2:	e9cd 6708 	strd	r6, r7, [sp, #32]
  4062b6:	9314      	str	r3, [sp, #80]	; 0x50
  4062b8:	f002 fa42 	bl	408740 <__aeabi_i2d>
  4062bc:	4602      	mov	r2, r0
  4062be:	460b      	mov	r3, r1
  4062c0:	4630      	mov	r0, r6
  4062c2:	4639      	mov	r1, r7
  4062c4:	f002 faa2 	bl	40880c <__aeabi_dmul>
  4062c8:	2200      	movs	r2, #0
  4062ca:	4b7c      	ldr	r3, [pc, #496]	; (4064bc <_dtoa_r+0xee4>)
  4062cc:	f002 f8ec 	bl	4084a8 <__adddf3>
  4062d0:	46ac      	mov	ip, r5
  4062d2:	4606      	mov	r6, r0
  4062d4:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
  4062d8:	e45a      	b.n	405b90 <_dtoa_r+0x5b8>
  4062da:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
  4062de:	f04f 0802 	mov.w	r8, #2
  4062e2:	e9cd 2308 	strd	r2, r3, [sp, #32]
  4062e6:	e432      	b.n	405b4e <_dtoa_r+0x576>
  4062e8:	9b14      	ldr	r3, [sp, #80]	; 0x50
  4062ea:	2130      	movs	r1, #48	; 0x30
  4062ec:	3301      	adds	r3, #1
  4062ee:	7011      	strb	r1, [r2, #0]
  4062f0:	9302      	str	r3, [sp, #8]
  4062f2:	2331      	movs	r3, #49	; 0x31
  4062f4:	7013      	strb	r3, [r2, #0]
  4062f6:	f7ff bb72 	b.w	4059de <_dtoa_r+0x406>
  4062fa:	9906      	ldr	r1, [sp, #24]
  4062fc:	4620      	mov	r0, r4
  4062fe:	f001 fb03 	bl	407908 <__pow5mult>
  406302:	9006      	str	r0, [sp, #24]
  406304:	f7ff bafa 	b.w	4058fc <_dtoa_r+0x324>
  406308:	f1ba 0f00 	cmp.w	sl, #0
  40630c:	f43f aeea 	beq.w	4060e4 <_dtoa_r+0xb0c>
  406310:	f7ff bb07 	b.w	405922 <_dtoa_r+0x34a>
  406314:	9a02      	ldr	r2, [sp, #8]
  406316:	2331      	movs	r3, #49	; 0x31
  406318:	3201      	adds	r2, #1
  40631a:	9202      	str	r2, [sp, #8]
  40631c:	9a05      	ldr	r2, [sp, #20]
  40631e:	7013      	strb	r3, [r2, #0]
  406320:	e5f5      	b.n	405f0e <_dtoa_r+0x936>
  406322:	9a11      	ldr	r2, [sp, #68]	; 0x44
  406324:	2a00      	cmp	r2, #0
  406326:	d055      	beq.n	4063d4 <_dtoa_r+0xdfc>
  406328:	f203 4333 	addw	r3, r3, #1075	; 0x433
  40632c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  40632e:	9d07      	ldr	r5, [sp, #28]
  406330:	f7ff bba4 	b.w	405a7c <_dtoa_r+0x4a4>
  406334:	9c03      	ldr	r4, [sp, #12]
  406336:	f7ff bb52 	b.w	4059de <_dtoa_r+0x406>
  40633a:	9b07      	ldr	r3, [sp, #28]
  40633c:	9a04      	ldr	r2, [sp, #16]
  40633e:	1a9d      	subs	r5, r3, r2
  406340:	2300      	movs	r3, #0
  406342:	f7ff bb9b 	b.w	405a7c <_dtoa_r+0x4a4>
  406346:	2b00      	cmp	r3, #0
  406348:	9706      	str	r7, [sp, #24]
  40634a:	46e1      	mov	r9, ip
  40634c:	f8cd b020 	str.w	fp, [sp, #32]
  406350:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  406352:	4665      	mov	r5, ip
  406354:	dd0f      	ble.n	406376 <_dtoa_r+0xd9e>
  406356:	9906      	ldr	r1, [sp, #24]
  406358:	2201      	movs	r2, #1
  40635a:	4620      	mov	r0, r4
  40635c:	f001 fb24 	bl	4079a8 <__lshift>
  406360:	4639      	mov	r1, r7
  406362:	9006      	str	r0, [sp, #24]
  406364:	f001 fb7a 	bl	407a5c <__mcmp>
  406368:	2800      	cmp	r0, #0
  40636a:	dd75      	ble.n	406458 <_dtoa_r+0xe80>
  40636c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
  406370:	d066      	beq.n	406440 <_dtoa_r+0xe68>
  406372:	f109 0501 	add.w	r5, r9, #1
  406376:	f8dd a020 	ldr.w	sl, [sp, #32]
  40637a:	f888 5000 	strb.w	r5, [r8]
  40637e:	f108 0501 	add.w	r5, r8, #1
  406382:	9608      	str	r6, [sp, #32]
  406384:	e5c3      	b.n	405f0e <_dtoa_r+0x936>
  406386:	9c12      	ldr	r4, [sp, #72]	; 0x48
  406388:	e531      	b.n	405dee <_dtoa_r+0x816>
  40638a:	d104      	bne.n	406396 <_dtoa_r+0xdbe>
  40638c:	f019 0f01 	tst.w	r9, #1
  406390:	d001      	beq.n	406396 <_dtoa_r+0xdbe>
  406392:	e5ac      	b.n	405eee <_dtoa_r+0x916>
  406394:	4615      	mov	r5, r2
  406396:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  40639a:	1e6a      	subs	r2, r5, #1
  40639c:	2b30      	cmp	r3, #48	; 0x30
  40639e:	d0f9      	beq.n	406394 <_dtoa_r+0xdbc>
  4063a0:	e5b5      	b.n	405f0e <_dtoa_r+0x936>
  4063a2:	2700      	movs	r7, #0
  4063a4:	9708      	str	r7, [sp, #32]
  4063a6:	f7ff ba4c 	b.w	405842 <_dtoa_r+0x26a>
  4063aa:	9e08      	ldr	r6, [sp, #32]
  4063ac:	4620      	mov	r0, r4
  4063ae:	6871      	ldr	r1, [r6, #4]
  4063b0:	f001 f936 	bl	407620 <_Balloc>
  4063b4:	6933      	ldr	r3, [r6, #16]
  4063b6:	4605      	mov	r5, r0
  4063b8:	f106 010c 	add.w	r1, r6, #12
  4063bc:	1c9a      	adds	r2, r3, #2
  4063be:	300c      	adds	r0, #12
  4063c0:	0092      	lsls	r2, r2, #2
  4063c2:	f001 f82d 	bl	407420 <memcpy>
  4063c6:	4620      	mov	r0, r4
  4063c8:	4629      	mov	r1, r5
  4063ca:	2201      	movs	r2, #1
  4063cc:	f001 faec 	bl	4079a8 <__lshift>
  4063d0:	4606      	mov	r6, r0
  4063d2:	e6b8      	b.n	406146 <_dtoa_r+0xb6e>
  4063d4:	9b16      	ldr	r3, [sp, #88]	; 0x58
  4063d6:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  4063d8:	9d07      	ldr	r5, [sp, #28]
  4063da:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
  4063de:	f7ff bb4d 	b.w	405a7c <_dtoa_r+0x4a4>
  4063e2:	f1bc 0f39 	cmp.w	ip, #57	; 0x39
  4063e6:	9706      	str	r7, [sp, #24]
  4063e8:	f8cd b020 	str.w	fp, [sp, #32]
  4063ec:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  4063ee:	d030      	beq.n	406452 <_dtoa_r+0xe7a>
  4063f0:	f10c 0901 	add.w	r9, ip, #1
  4063f4:	f8dd a020 	ldr.w	sl, [sp, #32]
  4063f8:	f108 0501 	add.w	r5, r8, #1
  4063fc:	9608      	str	r6, [sp, #32]
  4063fe:	f888 9000 	strb.w	r9, [r8]
  406402:	e584      	b.n	405f0e <_dtoa_r+0x936>
  406404:	9706      	str	r7, [sp, #24]
  406406:	46e1      	mov	r9, ip
  406408:	46da      	mov	sl, fp
  40640a:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  40640c:	9608      	str	r6, [sp, #32]
  40640e:	e562      	b.n	405ed6 <_dtoa_r+0x8fe>
  406410:	46b0      	mov	r8, r6
  406412:	e504      	b.n	405e1e <_dtoa_r+0x846>
  406414:	f1bc 0f39 	cmp.w	ip, #57	; 0x39
  406418:	9706      	str	r7, [sp, #24]
  40641a:	f8cd b020 	str.w	fp, [sp, #32]
  40641e:	4655      	mov	r5, sl
  406420:	46cb      	mov	fp, r9
  406422:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  406424:	46e1      	mov	r9, ip
  406426:	d00b      	beq.n	406440 <_dtoa_r+0xe68>
  406428:	2d00      	cmp	r5, #0
  40642a:	dd01      	ble.n	406430 <_dtoa_r+0xe58>
  40642c:	f10b 0931 	add.w	r9, fp, #49	; 0x31
  406430:	f8dd a020 	ldr.w	sl, [sp, #32]
  406434:	f108 0501 	add.w	r5, r8, #1
  406438:	f888 9000 	strb.w	r9, [r8]
  40643c:	9608      	str	r6, [sp, #32]
  40643e:	e566      	b.n	405f0e <_dtoa_r+0x936>
  406440:	f8dd a020 	ldr.w	sl, [sp, #32]
  406444:	9608      	str	r6, [sp, #32]
  406446:	2239      	movs	r2, #57	; 0x39
  406448:	f108 0501 	add.w	r5, r8, #1
  40644c:	f888 2000 	strb.w	r2, [r8]
  406450:	e54f      	b.n	405ef2 <_dtoa_r+0x91a>
  406452:	46da      	mov	sl, fp
  406454:	9608      	str	r6, [sp, #32]
  406456:	e7f6      	b.n	406446 <_dtoa_r+0xe6e>
  406458:	d18d      	bne.n	406376 <_dtoa_r+0xd9e>
  40645a:	f019 0f01 	tst.w	r9, #1
  40645e:	d08a      	beq.n	406376 <_dtoa_r+0xd9e>
  406460:	e784      	b.n	40636c <_dtoa_r+0xd94>
  406462:	f04f 0802 	mov.w	r8, #2
  406466:	f7ff bb72 	b.w	405b4e <_dtoa_r+0x576>
  40646a:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40646c:	9304      	str	r3, [sp, #16]
  40646e:	e50e      	b.n	405e8e <_dtoa_r+0x8b6>
  406470:	f43f aa75 	beq.w	40595e <_dtoa_r+0x386>
  406474:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
  406478:	f7ff ba6a 	b.w	405950 <_dtoa_r+0x378>
  40647c:	2501      	movs	r5, #1
  40647e:	f7ff b982 	b.w	405786 <_dtoa_r+0x1ae>
  406482:	2500      	movs	r5, #0
  406484:	4620      	mov	r0, r4
  406486:	6465      	str	r5, [r4, #68]	; 0x44
  406488:	4629      	mov	r1, r5
  40648a:	f001 f8c9 	bl	407620 <_Balloc>
  40648e:	9a02      	ldr	r2, [sp, #8]
  406490:	9005      	str	r0, [sp, #20]
  406492:	2a0e      	cmp	r2, #14
  406494:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  406496:	6420      	str	r0, [r4, #64]	; 0x40
  406498:	f73f aad7 	bgt.w	405a4a <_dtoa_r+0x472>
  40649c:	42ab      	cmp	r3, r5
  40649e:	f6ff aad4 	blt.w	405a4a <_dtoa_r+0x472>
  4064a2:	f04f 33ff 	mov.w	r3, #4294967295
  4064a6:	9523      	str	r5, [sp, #140]	; 0x8c
  4064a8:	9304      	str	r3, [sp, #16]
  4064aa:	f7ff b9a9 	b.w	405800 <_dtoa_r+0x228>
  4064ae:	2301      	movs	r3, #1
  4064b0:	930b      	str	r3, [sp, #44]	; 0x2c
  4064b2:	f7ff bbfa 	b.w	405caa <_dtoa_r+0x6d2>
  4064b6:	bf00      	nop
  4064b8:	40240000 	.word	0x40240000
  4064bc:	401c0000 	.word	0x401c0000

004064c0 <__sflush_r>:
  4064c0:	898b      	ldrh	r3, [r1, #12]
  4064c2:	b29a      	uxth	r2, r3
  4064c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4064c8:	460d      	mov	r5, r1
  4064ca:	0711      	lsls	r1, r2, #28
  4064cc:	4680      	mov	r8, r0
  4064ce:	d43c      	bmi.n	40654a <__sflush_r+0x8a>
  4064d0:	686a      	ldr	r2, [r5, #4]
  4064d2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  4064d6:	2a00      	cmp	r2, #0
  4064d8:	81ab      	strh	r3, [r5, #12]
  4064da:	dd76      	ble.n	4065ca <__sflush_r+0x10a>
  4064dc:	6aae      	ldr	r6, [r5, #40]	; 0x28
  4064de:	2e00      	cmp	r6, #0
  4064e0:	d04b      	beq.n	40657a <__sflush_r+0xba>
  4064e2:	b29b      	uxth	r3, r3
  4064e4:	2100      	movs	r1, #0
  4064e6:	f8d8 4000 	ldr.w	r4, [r8]
  4064ea:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
  4064ee:	f8c8 1000 	str.w	r1, [r8]
  4064f2:	b292      	uxth	r2, r2
  4064f4:	2a00      	cmp	r2, #0
  4064f6:	d06c      	beq.n	4065d2 <__sflush_r+0x112>
  4064f8:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  4064fa:	075f      	lsls	r7, r3, #29
  4064fc:	d505      	bpl.n	40650a <__sflush_r+0x4a>
  4064fe:	6869      	ldr	r1, [r5, #4]
  406500:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  406502:	1a52      	subs	r2, r2, r1
  406504:	b10b      	cbz	r3, 40650a <__sflush_r+0x4a>
  406506:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  406508:	1ad2      	subs	r2, r2, r3
  40650a:	4640      	mov	r0, r8
  40650c:	69e9      	ldr	r1, [r5, #28]
  40650e:	2300      	movs	r3, #0
  406510:	47b0      	blx	r6
  406512:	1c46      	adds	r6, r0, #1
  406514:	d03e      	beq.n	406594 <__sflush_r+0xd4>
  406516:	89ab      	ldrh	r3, [r5, #12]
  406518:	2100      	movs	r1, #0
  40651a:	692a      	ldr	r2, [r5, #16]
  40651c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  406520:	6069      	str	r1, [r5, #4]
  406522:	602a      	str	r2, [r5, #0]
  406524:	b29b      	uxth	r3, r3
  406526:	04da      	lsls	r2, r3, #19
  406528:	81ab      	strh	r3, [r5, #12]
  40652a:	d44c      	bmi.n	4065c6 <__sflush_r+0x106>
  40652c:	6b29      	ldr	r1, [r5, #48]	; 0x30
  40652e:	f8c8 4000 	str.w	r4, [r8]
  406532:	b311      	cbz	r1, 40657a <__sflush_r+0xba>
  406534:	f105 0340 	add.w	r3, r5, #64	; 0x40
  406538:	4299      	cmp	r1, r3
  40653a:	d002      	beq.n	406542 <__sflush_r+0x82>
  40653c:	4640      	mov	r0, r8
  40653e:	f000 f96b 	bl	406818 <_free_r>
  406542:	2000      	movs	r0, #0
  406544:	6328      	str	r0, [r5, #48]	; 0x30
  406546:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40654a:	692e      	ldr	r6, [r5, #16]
  40654c:	b1ae      	cbz	r6, 40657a <__sflush_r+0xba>
  40654e:	682c      	ldr	r4, [r5, #0]
  406550:	0791      	lsls	r1, r2, #30
  406552:	602e      	str	r6, [r5, #0]
  406554:	eba4 0406 	sub.w	r4, r4, r6
  406558:	d11a      	bne.n	406590 <__sflush_r+0xd0>
  40655a:	696b      	ldr	r3, [r5, #20]
  40655c:	60ab      	str	r3, [r5, #8]
  40655e:	e00a      	b.n	406576 <__sflush_r+0xb6>
  406560:	4632      	mov	r2, r6
  406562:	4623      	mov	r3, r4
  406564:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  406566:	4640      	mov	r0, r8
  406568:	69e9      	ldr	r1, [r5, #28]
  40656a:	47b8      	blx	r7
  40656c:	2800      	cmp	r0, #0
  40656e:	eba4 0400 	sub.w	r4, r4, r0
  406572:	4406      	add	r6, r0
  406574:	dd04      	ble.n	406580 <__sflush_r+0xc0>
  406576:	2c00      	cmp	r4, #0
  406578:	dcf2      	bgt.n	406560 <__sflush_r+0xa0>
  40657a:	2000      	movs	r0, #0
  40657c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  406580:	89ab      	ldrh	r3, [r5, #12]
  406582:	f04f 30ff 	mov.w	r0, #4294967295
  406586:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40658a:	81ab      	strh	r3, [r5, #12]
  40658c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  406590:	2300      	movs	r3, #0
  406592:	e7e3      	b.n	40655c <__sflush_r+0x9c>
  406594:	f8d8 3000 	ldr.w	r3, [r8]
  406598:	fab3 f283 	clz	r2, r3
  40659c:	2b00      	cmp	r3, #0
  40659e:	bf18      	it	ne
  4065a0:	2b1d      	cmpne	r3, #29
  4065a2:	ea4f 1252 	mov.w	r2, r2, lsr #5
  4065a6:	d001      	beq.n	4065ac <__sflush_r+0xec>
  4065a8:	2b16      	cmp	r3, #22
  4065aa:	d127      	bne.n	4065fc <__sflush_r+0x13c>
  4065ac:	89ab      	ldrh	r3, [r5, #12]
  4065ae:	2600      	movs	r6, #0
  4065b0:	6929      	ldr	r1, [r5, #16]
  4065b2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  4065b6:	b29b      	uxth	r3, r3
  4065b8:	81ab      	strh	r3, [r5, #12]
  4065ba:	04db      	lsls	r3, r3, #19
  4065bc:	e885 0042 	stmia.w	r5, {r1, r6}
  4065c0:	d5b4      	bpl.n	40652c <__sflush_r+0x6c>
  4065c2:	2a00      	cmp	r2, #0
  4065c4:	d0b2      	beq.n	40652c <__sflush_r+0x6c>
  4065c6:	6528      	str	r0, [r5, #80]	; 0x50
  4065c8:	e7b0      	b.n	40652c <__sflush_r+0x6c>
  4065ca:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  4065cc:	2a00      	cmp	r2, #0
  4065ce:	dc85      	bgt.n	4064dc <__sflush_r+0x1c>
  4065d0:	e7d3      	b.n	40657a <__sflush_r+0xba>
  4065d2:	2301      	movs	r3, #1
  4065d4:	4640      	mov	r0, r8
  4065d6:	69e9      	ldr	r1, [r5, #28]
  4065d8:	47b0      	blx	r6
  4065da:	1c43      	adds	r3, r0, #1
  4065dc:	4602      	mov	r2, r0
  4065de:	d002      	beq.n	4065e6 <__sflush_r+0x126>
  4065e0:	89ab      	ldrh	r3, [r5, #12]
  4065e2:	6aae      	ldr	r6, [r5, #40]	; 0x28
  4065e4:	e789      	b.n	4064fa <__sflush_r+0x3a>
  4065e6:	f8d8 3000 	ldr.w	r3, [r8]
  4065ea:	2b00      	cmp	r3, #0
  4065ec:	d0f8      	beq.n	4065e0 <__sflush_r+0x120>
  4065ee:	2b16      	cmp	r3, #22
  4065f0:	d001      	beq.n	4065f6 <__sflush_r+0x136>
  4065f2:	2b1d      	cmp	r3, #29
  4065f4:	d1c4      	bne.n	406580 <__sflush_r+0xc0>
  4065f6:	f8c8 4000 	str.w	r4, [r8]
  4065fa:	e7be      	b.n	40657a <__sflush_r+0xba>
  4065fc:	89ab      	ldrh	r3, [r5, #12]
  4065fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  406602:	81ab      	strh	r3, [r5, #12]
  406604:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00406608 <_fflush_r>:
  406608:	b510      	push	{r4, lr}
  40660a:	4604      	mov	r4, r0
  40660c:	b082      	sub	sp, #8
  40660e:	b108      	cbz	r0, 406614 <_fflush_r+0xc>
  406610:	6b83      	ldr	r3, [r0, #56]	; 0x38
  406612:	b153      	cbz	r3, 40662a <_fflush_r+0x22>
  406614:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
  406618:	b908      	cbnz	r0, 40661e <_fflush_r+0x16>
  40661a:	b002      	add	sp, #8
  40661c:	bd10      	pop	{r4, pc}
  40661e:	4620      	mov	r0, r4
  406620:	b002      	add	sp, #8
  406622:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  406626:	f7ff bf4b 	b.w	4064c0 <__sflush_r>
  40662a:	9101      	str	r1, [sp, #4]
  40662c:	f000 f886 	bl	40673c <__sinit>
  406630:	9901      	ldr	r1, [sp, #4]
  406632:	e7ef      	b.n	406614 <_fflush_r+0xc>

00406634 <_cleanup_r>:
  406634:	4901      	ldr	r1, [pc, #4]	; (40663c <_cleanup_r+0x8>)
  406636:	f000 bb59 	b.w	406cec <_fwalk_reent>
  40663a:	bf00      	nop
  40663c:	0040837d 	.word	0x0040837d

00406640 <__sinit.part.1>:
  406640:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  406644:	4682      	mov	sl, r0
  406646:	2400      	movs	r4, #0
  406648:	4837      	ldr	r0, [pc, #220]	; (406728 <__sinit.part.1+0xe8>)
  40664a:	2103      	movs	r1, #3
  40664c:	f8da 5004 	ldr.w	r5, [sl, #4]
  406650:	f50a 723b 	add.w	r2, sl, #748	; 0x2ec
  406654:	2604      	movs	r6, #4
  406656:	f8ca 003c 	str.w	r0, [sl, #60]	; 0x3c
  40665a:	f8ca 12e4 	str.w	r1, [sl, #740]	; 0x2e4
  40665e:	f105 005c 	add.w	r0, r5, #92	; 0x5c
  406662:	f8ca 22e8 	str.w	r2, [sl, #744]	; 0x2e8
  406666:	4621      	mov	r1, r4
  406668:	f8ca 42e0 	str.w	r4, [sl, #736]	; 0x2e0
  40666c:	2208      	movs	r2, #8
  40666e:	81ae      	strh	r6, [r5, #12]
  406670:	602c      	str	r4, [r5, #0]
  406672:	606c      	str	r4, [r5, #4]
  406674:	60ac      	str	r4, [r5, #8]
  406676:	666c      	str	r4, [r5, #100]	; 0x64
  406678:	81ec      	strh	r4, [r5, #14]
  40667a:	612c      	str	r4, [r5, #16]
  40667c:	616c      	str	r4, [r5, #20]
  40667e:	61ac      	str	r4, [r5, #24]
  406680:	f7fd fa5a 	bl	403b38 <memset>
  406684:	f8df b0a8 	ldr.w	fp, [pc, #168]	; 406730 <__sinit.part.1+0xf0>
  406688:	f8da 6008 	ldr.w	r6, [sl, #8]
  40668c:	f04f 0301 	mov.w	r3, #1
  406690:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 406734 <__sinit.part.1+0xf4>
  406694:	f04f 0e09 	mov.w	lr, #9
  406698:	f8df 809c 	ldr.w	r8, [pc, #156]	; 406738 <__sinit.part.1+0xf8>
  40669c:	4621      	mov	r1, r4
  40669e:	4f23      	ldr	r7, [pc, #140]	; (40672c <__sinit.part.1+0xec>)
  4066a0:	2208      	movs	r2, #8
  4066a2:	61ed      	str	r5, [r5, #28]
  4066a4:	f106 005c 	add.w	r0, r6, #92	; 0x5c
  4066a8:	f8c5 b020 	str.w	fp, [r5, #32]
  4066ac:	f8c5 9024 	str.w	r9, [r5, #36]	; 0x24
  4066b0:	f8c5 8028 	str.w	r8, [r5, #40]	; 0x28
  4066b4:	62ef      	str	r7, [r5, #44]	; 0x2c
  4066b6:	81f3      	strh	r3, [r6, #14]
  4066b8:	f8a6 e00c 	strh.w	lr, [r6, #12]
  4066bc:	6034      	str	r4, [r6, #0]
  4066be:	6074      	str	r4, [r6, #4]
  4066c0:	60b4      	str	r4, [r6, #8]
  4066c2:	6674      	str	r4, [r6, #100]	; 0x64
  4066c4:	6134      	str	r4, [r6, #16]
  4066c6:	6174      	str	r4, [r6, #20]
  4066c8:	61b4      	str	r4, [r6, #24]
  4066ca:	f7fd fa35 	bl	403b38 <memset>
  4066ce:	f8da 500c 	ldr.w	r5, [sl, #12]
  4066d2:	f04f 0c12 	mov.w	ip, #18
  4066d6:	f04f 0e02 	mov.w	lr, #2
  4066da:	61f6      	str	r6, [r6, #28]
  4066dc:	4621      	mov	r1, r4
  4066de:	f8c6 b020 	str.w	fp, [r6, #32]
  4066e2:	f105 005c 	add.w	r0, r5, #92	; 0x5c
  4066e6:	f8c6 9024 	str.w	r9, [r6, #36]	; 0x24
  4066ea:	2208      	movs	r2, #8
  4066ec:	f8c6 8028 	str.w	r8, [r6, #40]	; 0x28
  4066f0:	62f7      	str	r7, [r6, #44]	; 0x2c
  4066f2:	602c      	str	r4, [r5, #0]
  4066f4:	606c      	str	r4, [r5, #4]
  4066f6:	60ac      	str	r4, [r5, #8]
  4066f8:	666c      	str	r4, [r5, #100]	; 0x64
  4066fa:	612c      	str	r4, [r5, #16]
  4066fc:	616c      	str	r4, [r5, #20]
  4066fe:	61ac      	str	r4, [r5, #24]
  406700:	f8a5 c00c 	strh.w	ip, [r5, #12]
  406704:	f8a5 e00e 	strh.w	lr, [r5, #14]
  406708:	f7fd fa16 	bl	403b38 <memset>
  40670c:	2301      	movs	r3, #1
  40670e:	61ed      	str	r5, [r5, #28]
  406710:	f8c5 b020 	str.w	fp, [r5, #32]
  406714:	f8c5 9024 	str.w	r9, [r5, #36]	; 0x24
  406718:	f8c5 8028 	str.w	r8, [r5, #40]	; 0x28
  40671c:	62ef      	str	r7, [r5, #44]	; 0x2c
  40671e:	f8ca 3038 	str.w	r3, [sl, #56]	; 0x38
  406722:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406726:	bf00      	nop
  406728:	00406635 	.word	0x00406635
  40672c:	00408111 	.word	0x00408111
  406730:	00408091 	.word	0x00408091
  406734:	004080b5 	.word	0x004080b5
  406738:	004080ed 	.word	0x004080ed

0040673c <__sinit>:
  40673c:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40673e:	b103      	cbz	r3, 406742 <__sinit+0x6>
  406740:	4770      	bx	lr
  406742:	f7ff bf7d 	b.w	406640 <__sinit.part.1>
  406746:	bf00      	nop

00406748 <__sfp_lock_acquire>:
  406748:	4770      	bx	lr
  40674a:	bf00      	nop

0040674c <__sfp_lock_release>:
  40674c:	4770      	bx	lr
  40674e:	bf00      	nop

00406750 <__libc_fini_array>:
  406750:	b538      	push	{r3, r4, r5, lr}
  406752:	4b08      	ldr	r3, [pc, #32]	; (406774 <__libc_fini_array+0x24>)
  406754:	4d08      	ldr	r5, [pc, #32]	; (406778 <__libc_fini_array+0x28>)
  406756:	1aed      	subs	r5, r5, r3
  406758:	10ac      	asrs	r4, r5, #2
  40675a:	bf18      	it	ne
  40675c:	18ed      	addne	r5, r5, r3
  40675e:	d005      	beq.n	40676c <__libc_fini_array+0x1c>
  406760:	3c01      	subs	r4, #1
  406762:	f855 3d04 	ldr.w	r3, [r5, #-4]!
  406766:	4798      	blx	r3
  406768:	2c00      	cmp	r4, #0
  40676a:	d1f9      	bne.n	406760 <__libc_fini_array+0x10>
  40676c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  406770:	f002 bf48 	b.w	409604 <_fini>
  406774:	00409610 	.word	0x00409610
  406778:	00409614 	.word	0x00409614

0040677c <_malloc_trim_r>:
  40677c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40677e:	4f22      	ldr	r7, [pc, #136]	; (406808 <_malloc_trim_r+0x8c>)
  406780:	460c      	mov	r4, r1
  406782:	4606      	mov	r6, r0
  406784:	f000 ff48 	bl	407618 <__malloc_lock>
  406788:	68ba      	ldr	r2, [r7, #8]
  40678a:	4b20      	ldr	r3, [pc, #128]	; (40680c <_malloc_trim_r+0x90>)
  40678c:	6855      	ldr	r5, [r2, #4]
  40678e:	f025 0503 	bic.w	r5, r5, #3
  406792:	1b2c      	subs	r4, r5, r4
  406794:	f604 74ef 	addw	r4, r4, #4079	; 0xfef
  406798:	4023      	ands	r3, r4
  40679a:	f5a3 5480 	sub.w	r4, r3, #4096	; 0x1000
  40679e:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  4067a2:	db07      	blt.n	4067b4 <_malloc_trim_r+0x38>
  4067a4:	4630      	mov	r0, r6
  4067a6:	2100      	movs	r1, #0
  4067a8:	f001 fc60 	bl	40806c <_sbrk_r>
  4067ac:	68bb      	ldr	r3, [r7, #8]
  4067ae:	442b      	add	r3, r5
  4067b0:	4298      	cmp	r0, r3
  4067b2:	d004      	beq.n	4067be <_malloc_trim_r+0x42>
  4067b4:	4630      	mov	r0, r6
  4067b6:	f000 ff31 	bl	40761c <__malloc_unlock>
  4067ba:	2000      	movs	r0, #0
  4067bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4067be:	4630      	mov	r0, r6
  4067c0:	4261      	negs	r1, r4
  4067c2:	f001 fc53 	bl	40806c <_sbrk_r>
  4067c6:	3001      	adds	r0, #1
  4067c8:	d00d      	beq.n	4067e6 <_malloc_trim_r+0x6a>
  4067ca:	4a11      	ldr	r2, [pc, #68]	; (406810 <_malloc_trim_r+0x94>)
  4067cc:	1b2d      	subs	r5, r5, r4
  4067ce:	68b9      	ldr	r1, [r7, #8]
  4067d0:	4630      	mov	r0, r6
  4067d2:	6813      	ldr	r3, [r2, #0]
  4067d4:	f045 0501 	orr.w	r5, r5, #1
  4067d8:	1b1b      	subs	r3, r3, r4
  4067da:	604d      	str	r5, [r1, #4]
  4067dc:	6013      	str	r3, [r2, #0]
  4067de:	f000 ff1d 	bl	40761c <__malloc_unlock>
  4067e2:	2001      	movs	r0, #1
  4067e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4067e6:	4630      	mov	r0, r6
  4067e8:	2100      	movs	r1, #0
  4067ea:	f001 fc3f 	bl	40806c <_sbrk_r>
  4067ee:	68ba      	ldr	r2, [r7, #8]
  4067f0:	1a83      	subs	r3, r0, r2
  4067f2:	2b0f      	cmp	r3, #15
  4067f4:	ddde      	ble.n	4067b4 <_malloc_trim_r+0x38>
  4067f6:	4c07      	ldr	r4, [pc, #28]	; (406814 <_malloc_trim_r+0x98>)
  4067f8:	f043 0301 	orr.w	r3, r3, #1
  4067fc:	4904      	ldr	r1, [pc, #16]	; (406810 <_malloc_trim_r+0x94>)
  4067fe:	6824      	ldr	r4, [r4, #0]
  406800:	6053      	str	r3, [r2, #4]
  406802:	1b00      	subs	r0, r0, r4
  406804:	6008      	str	r0, [r1, #0]
  406806:	e7d5      	b.n	4067b4 <_malloc_trim_r+0x38>
  406808:	204004ec 	.word	0x204004ec
  40680c:	fffff000 	.word	0xfffff000
  406810:	204009c8 	.word	0x204009c8
  406814:	204008f8 	.word	0x204008f8

00406818 <_free_r>:
  406818:	2900      	cmp	r1, #0
  40681a:	d04d      	beq.n	4068b8 <_free_r+0xa0>
  40681c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  406820:	460c      	mov	r4, r1
  406822:	4680      	mov	r8, r0
  406824:	f000 fef8 	bl	407618 <__malloc_lock>
  406828:	4963      	ldr	r1, [pc, #396]	; (4069b8 <_free_r+0x1a0>)
  40682a:	f854 7c04 	ldr.w	r7, [r4, #-4]
  40682e:	f1a4 0508 	sub.w	r5, r4, #8
  406832:	688e      	ldr	r6, [r1, #8]
  406834:	f027 0301 	bic.w	r3, r7, #1
  406838:	18ea      	adds	r2, r5, r3
  40683a:	6850      	ldr	r0, [r2, #4]
  40683c:	4296      	cmp	r6, r2
  40683e:	f020 0003 	bic.w	r0, r0, #3
  406842:	d059      	beq.n	4068f8 <_free_r+0xe0>
  406844:	07fe      	lsls	r6, r7, #31
  406846:	6050      	str	r0, [r2, #4]
  406848:	d40b      	bmi.n	406862 <_free_r+0x4a>
  40684a:	f854 4c08 	ldr.w	r4, [r4, #-8]
  40684e:	f101 0708 	add.w	r7, r1, #8
  406852:	1b2d      	subs	r5, r5, r4
  406854:	4423      	add	r3, r4
  406856:	68ac      	ldr	r4, [r5, #8]
  406858:	42bc      	cmp	r4, r7
  40685a:	d066      	beq.n	40692a <_free_r+0x112>
  40685c:	68ef      	ldr	r7, [r5, #12]
  40685e:	60e7      	str	r7, [r4, #12]
  406860:	60bc      	str	r4, [r7, #8]
  406862:	1814      	adds	r4, r2, r0
  406864:	6864      	ldr	r4, [r4, #4]
  406866:	07e4      	lsls	r4, r4, #31
  406868:	d40c      	bmi.n	406884 <_free_r+0x6c>
  40686a:	4c54      	ldr	r4, [pc, #336]	; (4069bc <_free_r+0x1a4>)
  40686c:	4403      	add	r3, r0
  40686e:	6890      	ldr	r0, [r2, #8]
  406870:	42a0      	cmp	r0, r4
  406872:	d07c      	beq.n	40696e <_free_r+0x156>
  406874:	68d4      	ldr	r4, [r2, #12]
  406876:	f043 0201 	orr.w	r2, r3, #1
  40687a:	60c4      	str	r4, [r0, #12]
  40687c:	60a0      	str	r0, [r4, #8]
  40687e:	606a      	str	r2, [r5, #4]
  406880:	50eb      	str	r3, [r5, r3]
  406882:	e003      	b.n	40688c <_free_r+0x74>
  406884:	f043 0201 	orr.w	r2, r3, #1
  406888:	606a      	str	r2, [r5, #4]
  40688a:	50eb      	str	r3, [r5, r3]
  40688c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  406890:	d213      	bcs.n	4068ba <_free_r+0xa2>
  406892:	08db      	lsrs	r3, r3, #3
  406894:	2001      	movs	r0, #1
  406896:	684a      	ldr	r2, [r1, #4]
  406898:	109c      	asrs	r4, r3, #2
  40689a:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
  40689e:	40a0      	lsls	r0, r4
  4068a0:	689c      	ldr	r4, [r3, #8]
  4068a2:	4302      	orrs	r2, r0
  4068a4:	60eb      	str	r3, [r5, #12]
  4068a6:	60ac      	str	r4, [r5, #8]
  4068a8:	604a      	str	r2, [r1, #4]
  4068aa:	609d      	str	r5, [r3, #8]
  4068ac:	60e5      	str	r5, [r4, #12]
  4068ae:	4640      	mov	r0, r8
  4068b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  4068b4:	f000 beb2 	b.w	40761c <__malloc_unlock>
  4068b8:	4770      	bx	lr
  4068ba:	0a5a      	lsrs	r2, r3, #9
  4068bc:	2a04      	cmp	r2, #4
  4068be:	d847      	bhi.n	406950 <_free_r+0x138>
  4068c0:	099a      	lsrs	r2, r3, #6
  4068c2:	f102 0438 	add.w	r4, r2, #56	; 0x38
  4068c6:	0060      	lsls	r0, r4, #1
  4068c8:	eb01 0080 	add.w	r0, r1, r0, lsl #2
  4068cc:	493a      	ldr	r1, [pc, #232]	; (4069b8 <_free_r+0x1a0>)
  4068ce:	6882      	ldr	r2, [r0, #8]
  4068d0:	4282      	cmp	r2, r0
  4068d2:	d043      	beq.n	40695c <_free_r+0x144>
  4068d4:	6851      	ldr	r1, [r2, #4]
  4068d6:	f021 0103 	bic.w	r1, r1, #3
  4068da:	4299      	cmp	r1, r3
  4068dc:	d902      	bls.n	4068e4 <_free_r+0xcc>
  4068de:	6892      	ldr	r2, [r2, #8]
  4068e0:	4290      	cmp	r0, r2
  4068e2:	d1f7      	bne.n	4068d4 <_free_r+0xbc>
  4068e4:	68d3      	ldr	r3, [r2, #12]
  4068e6:	60eb      	str	r3, [r5, #12]
  4068e8:	4640      	mov	r0, r8
  4068ea:	60aa      	str	r2, [r5, #8]
  4068ec:	609d      	str	r5, [r3, #8]
  4068ee:	60d5      	str	r5, [r2, #12]
  4068f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  4068f4:	f000 be92 	b.w	40761c <__malloc_unlock>
  4068f8:	07ff      	lsls	r7, r7, #31
  4068fa:	4403      	add	r3, r0
  4068fc:	d407      	bmi.n	40690e <_free_r+0xf6>
  4068fe:	f854 2c08 	ldr.w	r2, [r4, #-8]
  406902:	1aad      	subs	r5, r5, r2
  406904:	4413      	add	r3, r2
  406906:	68a8      	ldr	r0, [r5, #8]
  406908:	68ea      	ldr	r2, [r5, #12]
  40690a:	60c2      	str	r2, [r0, #12]
  40690c:	6090      	str	r0, [r2, #8]
  40690e:	4a2c      	ldr	r2, [pc, #176]	; (4069c0 <_free_r+0x1a8>)
  406910:	f043 0001 	orr.w	r0, r3, #1
  406914:	6812      	ldr	r2, [r2, #0]
  406916:	6068      	str	r0, [r5, #4]
  406918:	4293      	cmp	r3, r2
  40691a:	608d      	str	r5, [r1, #8]
  40691c:	d3c7      	bcc.n	4068ae <_free_r+0x96>
  40691e:	4b29      	ldr	r3, [pc, #164]	; (4069c4 <_free_r+0x1ac>)
  406920:	4640      	mov	r0, r8
  406922:	6819      	ldr	r1, [r3, #0]
  406924:	f7ff ff2a 	bl	40677c <_malloc_trim_r>
  406928:	e7c1      	b.n	4068ae <_free_r+0x96>
  40692a:	1811      	adds	r1, r2, r0
  40692c:	6849      	ldr	r1, [r1, #4]
  40692e:	07c9      	lsls	r1, r1, #31
  406930:	d409      	bmi.n	406946 <_free_r+0x12e>
  406932:	4403      	add	r3, r0
  406934:	68d1      	ldr	r1, [r2, #12]
  406936:	6892      	ldr	r2, [r2, #8]
  406938:	f043 0001 	orr.w	r0, r3, #1
  40693c:	60d1      	str	r1, [r2, #12]
  40693e:	608a      	str	r2, [r1, #8]
  406940:	6068      	str	r0, [r5, #4]
  406942:	50eb      	str	r3, [r5, r3]
  406944:	e7b3      	b.n	4068ae <_free_r+0x96>
  406946:	f043 0201 	orr.w	r2, r3, #1
  40694a:	606a      	str	r2, [r5, #4]
  40694c:	50eb      	str	r3, [r5, r3]
  40694e:	e7ae      	b.n	4068ae <_free_r+0x96>
  406950:	2a14      	cmp	r2, #20
  406952:	d815      	bhi.n	406980 <_free_r+0x168>
  406954:	f102 045b 	add.w	r4, r2, #91	; 0x5b
  406958:	0060      	lsls	r0, r4, #1
  40695a:	e7b5      	b.n	4068c8 <_free_r+0xb0>
  40695c:	10a4      	asrs	r4, r4, #2
  40695e:	2701      	movs	r7, #1
  406960:	6848      	ldr	r0, [r1, #4]
  406962:	4613      	mov	r3, r2
  406964:	fa07 f404 	lsl.w	r4, r7, r4
  406968:	4320      	orrs	r0, r4
  40696a:	6048      	str	r0, [r1, #4]
  40696c:	e7bb      	b.n	4068e6 <_free_r+0xce>
  40696e:	f043 0201 	orr.w	r2, r3, #1
  406972:	614d      	str	r5, [r1, #20]
  406974:	610d      	str	r5, [r1, #16]
  406976:	60e8      	str	r0, [r5, #12]
  406978:	60a8      	str	r0, [r5, #8]
  40697a:	606a      	str	r2, [r5, #4]
  40697c:	50eb      	str	r3, [r5, r3]
  40697e:	e796      	b.n	4068ae <_free_r+0x96>
  406980:	2a54      	cmp	r2, #84	; 0x54
  406982:	d804      	bhi.n	40698e <_free_r+0x176>
  406984:	0b1a      	lsrs	r2, r3, #12
  406986:	f102 046e 	add.w	r4, r2, #110	; 0x6e
  40698a:	0060      	lsls	r0, r4, #1
  40698c:	e79c      	b.n	4068c8 <_free_r+0xb0>
  40698e:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  406992:	d804      	bhi.n	40699e <_free_r+0x186>
  406994:	0bda      	lsrs	r2, r3, #15
  406996:	f102 0477 	add.w	r4, r2, #119	; 0x77
  40699a:	0060      	lsls	r0, r4, #1
  40699c:	e794      	b.n	4068c8 <_free_r+0xb0>
  40699e:	f240 5054 	movw	r0, #1364	; 0x554
  4069a2:	4282      	cmp	r2, r0
  4069a4:	d804      	bhi.n	4069b0 <_free_r+0x198>
  4069a6:	0c9a      	lsrs	r2, r3, #18
  4069a8:	f102 047c 	add.w	r4, r2, #124	; 0x7c
  4069ac:	0060      	lsls	r0, r4, #1
  4069ae:	e78b      	b.n	4068c8 <_free_r+0xb0>
  4069b0:	20fc      	movs	r0, #252	; 0xfc
  4069b2:	247e      	movs	r4, #126	; 0x7e
  4069b4:	e788      	b.n	4068c8 <_free_r+0xb0>
  4069b6:	bf00      	nop
  4069b8:	204004ec 	.word	0x204004ec
  4069bc:	204004f4 	.word	0x204004f4
  4069c0:	204008f4 	.word	0x204008f4
  4069c4:	204009c4 	.word	0x204009c4

004069c8 <__sfvwrite_r>:
  4069c8:	6893      	ldr	r3, [r2, #8]
  4069ca:	2b00      	cmp	r3, #0
  4069cc:	d07a      	beq.n	406ac4 <__sfvwrite_r+0xfc>
  4069ce:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4069d2:	f8b1 e00c 	ldrh.w	lr, [r1, #12]
  4069d6:	b083      	sub	sp, #12
  4069d8:	460c      	mov	r4, r1
  4069da:	4681      	mov	r9, r0
  4069dc:	f01e 0f08 	tst.w	lr, #8
  4069e0:	4616      	mov	r6, r2
  4069e2:	d026      	beq.n	406a32 <__sfvwrite_r+0x6a>
  4069e4:	690b      	ldr	r3, [r1, #16]
  4069e6:	b323      	cbz	r3, 406a32 <__sfvwrite_r+0x6a>
  4069e8:	f00e 0802 	and.w	r8, lr, #2
  4069ec:	6835      	ldr	r5, [r6, #0]
  4069ee:	fa1f f088 	uxth.w	r0, r8
  4069f2:	b370      	cbz	r0, 406a52 <__sfvwrite_r+0x8a>
  4069f4:	f04f 0a00 	mov.w	sl, #0
  4069f8:	f8df b2ec 	ldr.w	fp, [pc, #748]	; 406ce8 <__sfvwrite_r+0x320>
  4069fc:	46d0      	mov	r8, sl
  4069fe:	45d8      	cmp	r8, fp
  406a00:	4643      	mov	r3, r8
  406a02:	4652      	mov	r2, sl
  406a04:	4648      	mov	r0, r9
  406a06:	bf28      	it	cs
  406a08:	465b      	movcs	r3, fp
  406a0a:	f1b8 0f00 	cmp.w	r8, #0
  406a0e:	d053      	beq.n	406ab8 <__sfvwrite_r+0xf0>
  406a10:	69e1      	ldr	r1, [r4, #28]
  406a12:	6a67      	ldr	r7, [r4, #36]	; 0x24
  406a14:	47b8      	blx	r7
  406a16:	2800      	cmp	r0, #0
  406a18:	dd73      	ble.n	406b02 <__sfvwrite_r+0x13a>
  406a1a:	68b3      	ldr	r3, [r6, #8]
  406a1c:	4482      	add	sl, r0
  406a1e:	ebc0 0808 	rsb	r8, r0, r8
  406a22:	1a18      	subs	r0, r3, r0
  406a24:	60b0      	str	r0, [r6, #8]
  406a26:	2800      	cmp	r0, #0
  406a28:	d1e9      	bne.n	4069fe <__sfvwrite_r+0x36>
  406a2a:	2000      	movs	r0, #0
  406a2c:	b003      	add	sp, #12
  406a2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406a32:	4648      	mov	r0, r9
  406a34:	4621      	mov	r1, r4
  406a36:	f7fe fcbd 	bl	4053b4 <__swsetup_r>
  406a3a:	2800      	cmp	r0, #0
  406a3c:	f040 814c 	bne.w	406cd8 <__sfvwrite_r+0x310>
  406a40:	f8b4 e00c 	ldrh.w	lr, [r4, #12]
  406a44:	6835      	ldr	r5, [r6, #0]
  406a46:	f00e 0802 	and.w	r8, lr, #2
  406a4a:	fa1f f088 	uxth.w	r0, r8
  406a4e:	2800      	cmp	r0, #0
  406a50:	d1d0      	bne.n	4069f4 <__sfvwrite_r+0x2c>
  406a52:	f01e 0b01 	ands.w	fp, lr, #1
  406a56:	d15d      	bne.n	406b14 <__sfvwrite_r+0x14c>
  406a58:	46d8      	mov	r8, fp
  406a5a:	f1b8 0f00 	cmp.w	r8, #0
  406a5e:	d025      	beq.n	406aac <__sfvwrite_r+0xe4>
  406a60:	f41e 7f00 	tst.w	lr, #512	; 0x200
  406a64:	68a7      	ldr	r7, [r4, #8]
  406a66:	d02f      	beq.n	406ac8 <__sfvwrite_r+0x100>
  406a68:	45b8      	cmp	r8, r7
  406a6a:	46ba      	mov	sl, r7
  406a6c:	f0c0 80a8 	bcc.w	406bc0 <__sfvwrite_r+0x1f8>
  406a70:	f41e 6f90 	tst.w	lr, #1152	; 0x480
  406a74:	f040 80b5 	bne.w	406be2 <__sfvwrite_r+0x21a>
  406a78:	6820      	ldr	r0, [r4, #0]
  406a7a:	4659      	mov	r1, fp
  406a7c:	4652      	mov	r2, sl
  406a7e:	f000 fd69 	bl	407554 <memmove>
  406a82:	68a2      	ldr	r2, [r4, #8]
  406a84:	6821      	ldr	r1, [r4, #0]
  406a86:	4640      	mov	r0, r8
  406a88:	1bd7      	subs	r7, r2, r7
  406a8a:	eb01 030a 	add.w	r3, r1, sl
  406a8e:	60a7      	str	r7, [r4, #8]
  406a90:	6023      	str	r3, [r4, #0]
  406a92:	68b3      	ldr	r3, [r6, #8]
  406a94:	4483      	add	fp, r0
  406a96:	ebc0 0808 	rsb	r8, r0, r8
  406a9a:	1a18      	subs	r0, r3, r0
  406a9c:	60b0      	str	r0, [r6, #8]
  406a9e:	2800      	cmp	r0, #0
  406aa0:	d0c3      	beq.n	406a2a <__sfvwrite_r+0x62>
  406aa2:	f8b4 e00c 	ldrh.w	lr, [r4, #12]
  406aa6:	f1b8 0f00 	cmp.w	r8, #0
  406aaa:	d1d9      	bne.n	406a60 <__sfvwrite_r+0x98>
  406aac:	f8d5 b000 	ldr.w	fp, [r5]
  406ab0:	3508      	adds	r5, #8
  406ab2:	f855 8c04 	ldr.w	r8, [r5, #-4]
  406ab6:	e7d0      	b.n	406a5a <__sfvwrite_r+0x92>
  406ab8:	f8d5 a000 	ldr.w	sl, [r5]
  406abc:	3508      	adds	r5, #8
  406abe:	f855 8c04 	ldr.w	r8, [r5, #-4]
  406ac2:	e79c      	b.n	4069fe <__sfvwrite_r+0x36>
  406ac4:	2000      	movs	r0, #0
  406ac6:	4770      	bx	lr
  406ac8:	6820      	ldr	r0, [r4, #0]
  406aca:	6923      	ldr	r3, [r4, #16]
  406acc:	4298      	cmp	r0, r3
  406ace:	d803      	bhi.n	406ad8 <__sfvwrite_r+0x110>
  406ad0:	6963      	ldr	r3, [r4, #20]
  406ad2:	4598      	cmp	r8, r3
  406ad4:	f080 80bf 	bcs.w	406c56 <__sfvwrite_r+0x28e>
  406ad8:	4547      	cmp	r7, r8
  406ada:	4659      	mov	r1, fp
  406adc:	bf28      	it	cs
  406ade:	4647      	movcs	r7, r8
  406ae0:	463a      	mov	r2, r7
  406ae2:	f000 fd37 	bl	407554 <memmove>
  406ae6:	68a3      	ldr	r3, [r4, #8]
  406ae8:	6822      	ldr	r2, [r4, #0]
  406aea:	1bdb      	subs	r3, r3, r7
  406aec:	443a      	add	r2, r7
  406aee:	60a3      	str	r3, [r4, #8]
  406af0:	6022      	str	r2, [r4, #0]
  406af2:	2b00      	cmp	r3, #0
  406af4:	d149      	bne.n	406b8a <__sfvwrite_r+0x1c2>
  406af6:	4648      	mov	r0, r9
  406af8:	4621      	mov	r1, r4
  406afa:	f7ff fd85 	bl	406608 <_fflush_r>
  406afe:	2800      	cmp	r0, #0
  406b00:	d043      	beq.n	406b8a <__sfvwrite_r+0x1c2>
  406b02:	89a3      	ldrh	r3, [r4, #12]
  406b04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  406b08:	f04f 30ff 	mov.w	r0, #4294967295
  406b0c:	81a3      	strh	r3, [r4, #12]
  406b0e:	b003      	add	sp, #12
  406b10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406b14:	4680      	mov	r8, r0
  406b16:	4683      	mov	fp, r0
  406b18:	4682      	mov	sl, r0
  406b1a:	9000      	str	r0, [sp, #0]
  406b1c:	f1ba 0f00 	cmp.w	sl, #0
  406b20:	d02b      	beq.n	406b7a <__sfvwrite_r+0x1b2>
  406b22:	9b00      	ldr	r3, [sp, #0]
  406b24:	2b00      	cmp	r3, #0
  406b26:	d04f      	beq.n	406bc8 <__sfvwrite_r+0x200>
  406b28:	45d0      	cmp	r8, sl
  406b2a:	6962      	ldr	r2, [r4, #20]
  406b2c:	68a1      	ldr	r1, [r4, #8]
  406b2e:	4643      	mov	r3, r8
  406b30:	bf28      	it	cs
  406b32:	4653      	movcs	r3, sl
  406b34:	6820      	ldr	r0, [r4, #0]
  406b36:	eb02 0c01 	add.w	ip, r2, r1
  406b3a:	461f      	mov	r7, r3
  406b3c:	4563      	cmp	r3, ip
  406b3e:	dd03      	ble.n	406b48 <__sfvwrite_r+0x180>
  406b40:	6921      	ldr	r1, [r4, #16]
  406b42:	4288      	cmp	r0, r1
  406b44:	f200 8099 	bhi.w	406c7a <__sfvwrite_r+0x2b2>
  406b48:	4293      	cmp	r3, r2
  406b4a:	db20      	blt.n	406b8e <__sfvwrite_r+0x1c6>
  406b4c:	4613      	mov	r3, r2
  406b4e:	6a67      	ldr	r7, [r4, #36]	; 0x24
  406b50:	4648      	mov	r0, r9
  406b52:	69e1      	ldr	r1, [r4, #28]
  406b54:	465a      	mov	r2, fp
  406b56:	47b8      	blx	r7
  406b58:	1e07      	subs	r7, r0, #0
  406b5a:	ddd2      	ble.n	406b02 <__sfvwrite_r+0x13a>
  406b5c:	ebb8 0807 	subs.w	r8, r8, r7
  406b60:	d025      	beq.n	406bae <__sfvwrite_r+0x1e6>
  406b62:	68b3      	ldr	r3, [r6, #8]
  406b64:	44bb      	add	fp, r7
  406b66:	ebc7 0a0a 	rsb	sl, r7, sl
  406b6a:	1bdf      	subs	r7, r3, r7
  406b6c:	60b7      	str	r7, [r6, #8]
  406b6e:	2f00      	cmp	r7, #0
  406b70:	f43f af5b 	beq.w	406a2a <__sfvwrite_r+0x62>
  406b74:	f1ba 0f00 	cmp.w	sl, #0
  406b78:	d1d3      	bne.n	406b22 <__sfvwrite_r+0x15a>
  406b7a:	2300      	movs	r3, #0
  406b7c:	f8d5 b000 	ldr.w	fp, [r5]
  406b80:	f8d5 a004 	ldr.w	sl, [r5, #4]
  406b84:	3508      	adds	r5, #8
  406b86:	9300      	str	r3, [sp, #0]
  406b88:	e7c8      	b.n	406b1c <__sfvwrite_r+0x154>
  406b8a:	4638      	mov	r0, r7
  406b8c:	e781      	b.n	406a92 <__sfvwrite_r+0xca>
  406b8e:	461a      	mov	r2, r3
  406b90:	4659      	mov	r1, fp
  406b92:	9301      	str	r3, [sp, #4]
  406b94:	f000 fcde 	bl	407554 <memmove>
  406b98:	68a2      	ldr	r2, [r4, #8]
  406b9a:	ebb8 0807 	subs.w	r8, r8, r7
  406b9e:	6821      	ldr	r1, [r4, #0]
  406ba0:	9b01      	ldr	r3, [sp, #4]
  406ba2:	eba2 0203 	sub.w	r2, r2, r3
  406ba6:	440b      	add	r3, r1
  406ba8:	60a2      	str	r2, [r4, #8]
  406baa:	6023      	str	r3, [r4, #0]
  406bac:	d1d9      	bne.n	406b62 <__sfvwrite_r+0x19a>
  406bae:	4648      	mov	r0, r9
  406bb0:	4621      	mov	r1, r4
  406bb2:	f7ff fd29 	bl	406608 <_fflush_r>
  406bb6:	2800      	cmp	r0, #0
  406bb8:	d1a3      	bne.n	406b02 <__sfvwrite_r+0x13a>
  406bba:	f8cd 8000 	str.w	r8, [sp]
  406bbe:	e7d0      	b.n	406b62 <__sfvwrite_r+0x19a>
  406bc0:	4647      	mov	r7, r8
  406bc2:	6820      	ldr	r0, [r4, #0]
  406bc4:	46c2      	mov	sl, r8
  406bc6:	e758      	b.n	406a7a <__sfvwrite_r+0xb2>
  406bc8:	4658      	mov	r0, fp
  406bca:	210a      	movs	r1, #10
  406bcc:	4652      	mov	r2, sl
  406bce:	f000 fbdf 	bl	407390 <memchr>
  406bd2:	2800      	cmp	r0, #0
  406bd4:	d07b      	beq.n	406cce <__sfvwrite_r+0x306>
  406bd6:	3001      	adds	r0, #1
  406bd8:	2301      	movs	r3, #1
  406bda:	ebcb 0800 	rsb	r8, fp, r0
  406bde:	9300      	str	r3, [sp, #0]
  406be0:	e7a2      	b.n	406b28 <__sfvwrite_r+0x160>
  406be2:	6963      	ldr	r3, [r4, #20]
  406be4:	6921      	ldr	r1, [r4, #16]
  406be6:	6827      	ldr	r7, [r4, #0]
  406be8:	eb03 0c43 	add.w	ip, r3, r3, lsl #1
  406bec:	1a7f      	subs	r7, r7, r1
  406bee:	eb0c 7cdc 	add.w	ip, ip, ip, lsr #31
  406bf2:	1c7b      	adds	r3, r7, #1
  406bf4:	ea4f 0c6c 	mov.w	ip, ip, asr #1
  406bf8:	4443      	add	r3, r8
  406bfa:	4662      	mov	r2, ip
  406bfc:	459c      	cmp	ip, r3
  406bfe:	d201      	bcs.n	406c04 <__sfvwrite_r+0x23c>
  406c00:	469c      	mov	ip, r3
  406c02:	461a      	mov	r2, r3
  406c04:	f41e 6f80 	tst.w	lr, #1024	; 0x400
  406c08:	f8cd c000 	str.w	ip, [sp]
  406c0c:	d04b      	beq.n	406ca6 <__sfvwrite_r+0x2de>
  406c0e:	4611      	mov	r1, r2
  406c10:	4648      	mov	r0, r9
  406c12:	f000 f911 	bl	406e38 <_malloc_r>
  406c16:	f8dd c000 	ldr.w	ip, [sp]
  406c1a:	4682      	mov	sl, r0
  406c1c:	2800      	cmp	r0, #0
  406c1e:	d05e      	beq.n	406cde <__sfvwrite_r+0x316>
  406c20:	463a      	mov	r2, r7
  406c22:	6921      	ldr	r1, [r4, #16]
  406c24:	f8cd c000 	str.w	ip, [sp]
  406c28:	f000 fbfa 	bl	407420 <memcpy>
  406c2c:	89a2      	ldrh	r2, [r4, #12]
  406c2e:	f8dd c000 	ldr.w	ip, [sp]
  406c32:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
  406c36:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  406c3a:	81a2      	strh	r2, [r4, #12]
  406c3c:	eb0a 0007 	add.w	r0, sl, r7
  406c40:	ebc7 020c 	rsb	r2, r7, ip
  406c44:	f8c4 a010 	str.w	sl, [r4, #16]
  406c48:	4647      	mov	r7, r8
  406c4a:	6020      	str	r0, [r4, #0]
  406c4c:	46c2      	mov	sl, r8
  406c4e:	60a2      	str	r2, [r4, #8]
  406c50:	f8c4 c014 	str.w	ip, [r4, #20]
  406c54:	e711      	b.n	406a7a <__sfvwrite_r+0xb2>
  406c56:	f06f 4e00 	mvn.w	lr, #2147483648	; 0x80000000
  406c5a:	6a67      	ldr	r7, [r4, #36]	; 0x24
  406c5c:	4648      	mov	r0, r9
  406c5e:	69e1      	ldr	r1, [r4, #28]
  406c60:	45c6      	cmp	lr, r8
  406c62:	465a      	mov	r2, fp
  406c64:	bf28      	it	cs
  406c66:	46c6      	movcs	lr, r8
  406c68:	fb9e fef3 	sdiv	lr, lr, r3
  406c6c:	fb0e f303 	mul.w	r3, lr, r3
  406c70:	47b8      	blx	r7
  406c72:	2800      	cmp	r0, #0
  406c74:	f73f af0d 	bgt.w	406a92 <__sfvwrite_r+0xca>
  406c78:	e743      	b.n	406b02 <__sfvwrite_r+0x13a>
  406c7a:	4662      	mov	r2, ip
  406c7c:	4659      	mov	r1, fp
  406c7e:	f8cd c004 	str.w	ip, [sp, #4]
  406c82:	f000 fc67 	bl	407554 <memmove>
  406c86:	6823      	ldr	r3, [r4, #0]
  406c88:	4648      	mov	r0, r9
  406c8a:	f8dd c004 	ldr.w	ip, [sp, #4]
  406c8e:	4621      	mov	r1, r4
  406c90:	4463      	add	r3, ip
  406c92:	6023      	str	r3, [r4, #0]
  406c94:	f7ff fcb8 	bl	406608 <_fflush_r>
  406c98:	f8dd c004 	ldr.w	ip, [sp, #4]
  406c9c:	2800      	cmp	r0, #0
  406c9e:	f47f af30 	bne.w	406b02 <__sfvwrite_r+0x13a>
  406ca2:	4667      	mov	r7, ip
  406ca4:	e75a      	b.n	406b5c <__sfvwrite_r+0x194>
  406ca6:	4648      	mov	r0, r9
  406ca8:	f000 ffc6 	bl	407c38 <_realloc_r>
  406cac:	f8dd c000 	ldr.w	ip, [sp]
  406cb0:	4682      	mov	sl, r0
  406cb2:	2800      	cmp	r0, #0
  406cb4:	d1c2      	bne.n	406c3c <__sfvwrite_r+0x274>
  406cb6:	4648      	mov	r0, r9
  406cb8:	6921      	ldr	r1, [r4, #16]
  406cba:	f7ff fdad 	bl	406818 <_free_r>
  406cbe:	89a3      	ldrh	r3, [r4, #12]
  406cc0:	220c      	movs	r2, #12
  406cc2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  406cc6:	f8c9 2000 	str.w	r2, [r9]
  406cca:	b29b      	uxth	r3, r3
  406ccc:	e71a      	b.n	406b04 <__sfvwrite_r+0x13c>
  406cce:	2301      	movs	r3, #1
  406cd0:	f10a 0801 	add.w	r8, sl, #1
  406cd4:	9300      	str	r3, [sp, #0]
  406cd6:	e727      	b.n	406b28 <__sfvwrite_r+0x160>
  406cd8:	f04f 30ff 	mov.w	r0, #4294967295
  406cdc:	e6a6      	b.n	406a2c <__sfvwrite_r+0x64>
  406cde:	220c      	movs	r2, #12
  406ce0:	89a3      	ldrh	r3, [r4, #12]
  406ce2:	f8c9 2000 	str.w	r2, [r9]
  406ce6:	e70d      	b.n	406b04 <__sfvwrite_r+0x13c>
  406ce8:	7ffffc00 	.word	0x7ffffc00

00406cec <_fwalk_reent>:
  406cec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  406cf0:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  406cf4:	d01e      	beq.n	406d34 <_fwalk_reent+0x48>
  406cf6:	4688      	mov	r8, r1
  406cf8:	4606      	mov	r6, r0
  406cfa:	f04f 0900 	mov.w	r9, #0
  406cfe:	687d      	ldr	r5, [r7, #4]
  406d00:	68bc      	ldr	r4, [r7, #8]
  406d02:	3d01      	subs	r5, #1
  406d04:	d410      	bmi.n	406d28 <_fwalk_reent+0x3c>
  406d06:	89a3      	ldrh	r3, [r4, #12]
  406d08:	3d01      	subs	r5, #1
  406d0a:	2b01      	cmp	r3, #1
  406d0c:	d908      	bls.n	406d20 <_fwalk_reent+0x34>
  406d0e:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  406d12:	4621      	mov	r1, r4
  406d14:	4630      	mov	r0, r6
  406d16:	3301      	adds	r3, #1
  406d18:	d002      	beq.n	406d20 <_fwalk_reent+0x34>
  406d1a:	47c0      	blx	r8
  406d1c:	ea49 0900 	orr.w	r9, r9, r0
  406d20:	1c6b      	adds	r3, r5, #1
  406d22:	f104 0468 	add.w	r4, r4, #104	; 0x68
  406d26:	d1ee      	bne.n	406d06 <_fwalk_reent+0x1a>
  406d28:	683f      	ldr	r7, [r7, #0]
  406d2a:	2f00      	cmp	r7, #0
  406d2c:	d1e7      	bne.n	406cfe <_fwalk_reent+0x12>
  406d2e:	4648      	mov	r0, r9
  406d30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  406d34:	46b9      	mov	r9, r7
  406d36:	4648      	mov	r0, r9
  406d38:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00406d3c <_localeconv_r>:
  406d3c:	4800      	ldr	r0, [pc, #0]	; (406d40 <_localeconv_r+0x4>)
  406d3e:	4770      	bx	lr
  406d40:	204004b4 	.word	0x204004b4

00406d44 <__smakebuf_r>:
  406d44:	898b      	ldrh	r3, [r1, #12]
  406d46:	b29a      	uxth	r2, r3
  406d48:	f012 0f02 	tst.w	r2, #2
  406d4c:	d13d      	bne.n	406dca <__smakebuf_r+0x86>
  406d4e:	b5f0      	push	{r4, r5, r6, r7, lr}
  406d50:	460c      	mov	r4, r1
  406d52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  406d56:	b091      	sub	sp, #68	; 0x44
  406d58:	4605      	mov	r5, r0
  406d5a:	2900      	cmp	r1, #0
  406d5c:	db19      	blt.n	406d92 <__smakebuf_r+0x4e>
  406d5e:	aa01      	add	r2, sp, #4
  406d60:	f001 fb4e 	bl	408400 <_fstat_r>
  406d64:	2800      	cmp	r0, #0
  406d66:	db12      	blt.n	406d8e <__smakebuf_r+0x4a>
  406d68:	9b02      	ldr	r3, [sp, #8]
  406d6a:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
  406d6e:	f5a3 5700 	sub.w	r7, r3, #8192	; 0x2000
  406d72:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
  406d76:	fab7 f787 	clz	r7, r7
  406d7a:	ea4f 1757 	mov.w	r7, r7, lsr #5
  406d7e:	d02b      	beq.n	406dd8 <__smakebuf_r+0x94>
  406d80:	89a3      	ldrh	r3, [r4, #12]
  406d82:	f44f 6680 	mov.w	r6, #1024	; 0x400
  406d86:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  406d8a:	81a3      	strh	r3, [r4, #12]
  406d8c:	e00c      	b.n	406da8 <__smakebuf_r+0x64>
  406d8e:	89a3      	ldrh	r3, [r4, #12]
  406d90:	b29a      	uxth	r2, r3
  406d92:	f012 0f80 	tst.w	r2, #128	; 0x80
  406d96:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  406d9a:	f04f 0700 	mov.w	r7, #0
  406d9e:	bf0c      	ite	eq
  406da0:	f44f 6680 	moveq.w	r6, #1024	; 0x400
  406da4:	2640      	movne	r6, #64	; 0x40
  406da6:	81a3      	strh	r3, [r4, #12]
  406da8:	4628      	mov	r0, r5
  406daa:	4631      	mov	r1, r6
  406dac:	f000 f844 	bl	406e38 <_malloc_r>
  406db0:	89a3      	ldrh	r3, [r4, #12]
  406db2:	b340      	cbz	r0, 406e06 <__smakebuf_r+0xc2>
  406db4:	4a1a      	ldr	r2, [pc, #104]	; (406e20 <__smakebuf_r+0xdc>)
  406db6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  406dba:	63ea      	str	r2, [r5, #60]	; 0x3c
  406dbc:	81a3      	strh	r3, [r4, #12]
  406dbe:	6020      	str	r0, [r4, #0]
  406dc0:	6120      	str	r0, [r4, #16]
  406dc2:	6166      	str	r6, [r4, #20]
  406dc4:	b99f      	cbnz	r7, 406dee <__smakebuf_r+0xaa>
  406dc6:	b011      	add	sp, #68	; 0x44
  406dc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  406dca:	f101 0343 	add.w	r3, r1, #67	; 0x43
  406dce:	2201      	movs	r2, #1
  406dd0:	600b      	str	r3, [r1, #0]
  406dd2:	610b      	str	r3, [r1, #16]
  406dd4:	614a      	str	r2, [r1, #20]
  406dd6:	4770      	bx	lr
  406dd8:	4b12      	ldr	r3, [pc, #72]	; (406e24 <__smakebuf_r+0xe0>)
  406dda:	6aa2      	ldr	r2, [r4, #40]	; 0x28
  406ddc:	429a      	cmp	r2, r3
  406dde:	d1cf      	bne.n	406d80 <__smakebuf_r+0x3c>
  406de0:	89a3      	ldrh	r3, [r4, #12]
  406de2:	f44f 6680 	mov.w	r6, #1024	; 0x400
  406de6:	4333      	orrs	r3, r6
  406de8:	64e6      	str	r6, [r4, #76]	; 0x4c
  406dea:	81a3      	strh	r3, [r4, #12]
  406dec:	e7dc      	b.n	406da8 <__smakebuf_r+0x64>
  406dee:	4628      	mov	r0, r5
  406df0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  406df4:	f001 fb18 	bl	408428 <_isatty_r>
  406df8:	2800      	cmp	r0, #0
  406dfa:	d0e4      	beq.n	406dc6 <__smakebuf_r+0x82>
  406dfc:	89a3      	ldrh	r3, [r4, #12]
  406dfe:	f043 0301 	orr.w	r3, r3, #1
  406e02:	81a3      	strh	r3, [r4, #12]
  406e04:	e7df      	b.n	406dc6 <__smakebuf_r+0x82>
  406e06:	059a      	lsls	r2, r3, #22
  406e08:	d4dd      	bmi.n	406dc6 <__smakebuf_r+0x82>
  406e0a:	f104 0243 	add.w	r2, r4, #67	; 0x43
  406e0e:	f043 0302 	orr.w	r3, r3, #2
  406e12:	2101      	movs	r1, #1
  406e14:	81a3      	strh	r3, [r4, #12]
  406e16:	6022      	str	r2, [r4, #0]
  406e18:	6122      	str	r2, [r4, #16]
  406e1a:	6161      	str	r1, [r4, #20]
  406e1c:	e7d3      	b.n	406dc6 <__smakebuf_r+0x82>
  406e1e:	bf00      	nop
  406e20:	00406635 	.word	0x00406635
  406e24:	004080ed 	.word	0x004080ed

00406e28 <malloc>:
  406e28:	4b02      	ldr	r3, [pc, #8]	; (406e34 <malloc+0xc>)
  406e2a:	4601      	mov	r1, r0
  406e2c:	6818      	ldr	r0, [r3, #0]
  406e2e:	f000 b803 	b.w	406e38 <_malloc_r>
  406e32:	bf00      	nop
  406e34:	204004b0 	.word	0x204004b0

00406e38 <_malloc_r>:
  406e38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  406e3c:	f101 040b 	add.w	r4, r1, #11
  406e40:	b083      	sub	sp, #12
  406e42:	4605      	mov	r5, r0
  406e44:	2c16      	cmp	r4, #22
  406e46:	d927      	bls.n	406e98 <_malloc_r+0x60>
  406e48:	f034 0407 	bics.w	r4, r4, #7
  406e4c:	d42a      	bmi.n	406ea4 <_malloc_r+0x6c>
  406e4e:	42a1      	cmp	r1, r4
  406e50:	d828      	bhi.n	406ea4 <_malloc_r+0x6c>
  406e52:	f000 fbe1 	bl	407618 <__malloc_lock>
  406e56:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
  406e5a:	d22b      	bcs.n	406eb4 <_malloc_r+0x7c>
  406e5c:	ea4f 0cd4 	mov.w	ip, r4, lsr #3
  406e60:	4ec0      	ldr	r6, [pc, #768]	; (407164 <_malloc_r+0x32c>)
  406e62:	eb06 02cc 	add.w	r2, r6, ip, lsl #3
  406e66:	68d3      	ldr	r3, [r2, #12]
  406e68:	4293      	cmp	r3, r2
  406e6a:	f000 8171 	beq.w	407150 <_malloc_r+0x318>
  406e6e:	685a      	ldr	r2, [r3, #4]
  406e70:	f103 0808 	add.w	r8, r3, #8
  406e74:	68d9      	ldr	r1, [r3, #12]
  406e76:	4628      	mov	r0, r5
  406e78:	f022 0203 	bic.w	r2, r2, #3
  406e7c:	689c      	ldr	r4, [r3, #8]
  406e7e:	4413      	add	r3, r2
  406e80:	60e1      	str	r1, [r4, #12]
  406e82:	608c      	str	r4, [r1, #8]
  406e84:	685a      	ldr	r2, [r3, #4]
  406e86:	f042 0201 	orr.w	r2, r2, #1
  406e8a:	605a      	str	r2, [r3, #4]
  406e8c:	f000 fbc6 	bl	40761c <__malloc_unlock>
  406e90:	4640      	mov	r0, r8
  406e92:	b003      	add	sp, #12
  406e94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406e98:	2910      	cmp	r1, #16
  406e9a:	d803      	bhi.n	406ea4 <_malloc_r+0x6c>
  406e9c:	f000 fbbc 	bl	407618 <__malloc_lock>
  406ea0:	2410      	movs	r4, #16
  406ea2:	e7db      	b.n	406e5c <_malloc_r+0x24>
  406ea4:	f04f 0800 	mov.w	r8, #0
  406ea8:	230c      	movs	r3, #12
  406eaa:	4640      	mov	r0, r8
  406eac:	602b      	str	r3, [r5, #0]
  406eae:	b003      	add	sp, #12
  406eb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406eb4:	ea5f 2c54 	movs.w	ip, r4, lsr #9
  406eb8:	f000 8089 	beq.w	406fce <_malloc_r+0x196>
  406ebc:	f1bc 0f04 	cmp.w	ip, #4
  406ec0:	f200 80c4 	bhi.w	40704c <_malloc_r+0x214>
  406ec4:	ea4f 1c94 	mov.w	ip, r4, lsr #6
  406ec8:	f10c 0c38 	add.w	ip, ip, #56	; 0x38
  406ecc:	ea4f 004c 	mov.w	r0, ip, lsl #1
  406ed0:	4ea4      	ldr	r6, [pc, #656]	; (407164 <_malloc_r+0x32c>)
  406ed2:	eb06 0080 	add.w	r0, r6, r0, lsl #2
  406ed6:	68c3      	ldr	r3, [r0, #12]
  406ed8:	4298      	cmp	r0, r3
  406eda:	d105      	bne.n	406ee8 <_malloc_r+0xb0>
  406edc:	e00c      	b.n	406ef8 <_malloc_r+0xc0>
  406ede:	2900      	cmp	r1, #0
  406ee0:	da79      	bge.n	406fd6 <_malloc_r+0x19e>
  406ee2:	68db      	ldr	r3, [r3, #12]
  406ee4:	4298      	cmp	r0, r3
  406ee6:	d007      	beq.n	406ef8 <_malloc_r+0xc0>
  406ee8:	685a      	ldr	r2, [r3, #4]
  406eea:	f022 0203 	bic.w	r2, r2, #3
  406eee:	1b11      	subs	r1, r2, r4
  406ef0:	290f      	cmp	r1, #15
  406ef2:	ddf4      	ble.n	406ede <_malloc_r+0xa6>
  406ef4:	f10c 3cff 	add.w	ip, ip, #4294967295
  406ef8:	f10c 0c01 	add.w	ip, ip, #1
  406efc:	4f99      	ldr	r7, [pc, #612]	; (407164 <_malloc_r+0x32c>)
  406efe:	6933      	ldr	r3, [r6, #16]
  406f00:	f107 0e08 	add.w	lr, r7, #8
  406f04:	4573      	cmp	r3, lr
  406f06:	f000 8119 	beq.w	40713c <_malloc_r+0x304>
  406f0a:	685a      	ldr	r2, [r3, #4]
  406f0c:	f022 0203 	bic.w	r2, r2, #3
  406f10:	1b11      	subs	r1, r2, r4
  406f12:	290f      	cmp	r1, #15
  406f14:	f300 80ca 	bgt.w	4070ac <_malloc_r+0x274>
  406f18:	2900      	cmp	r1, #0
  406f1a:	f8c7 e014 	str.w	lr, [r7, #20]
  406f1e:	f8c7 e010 	str.w	lr, [r7, #16]
  406f22:	da6a      	bge.n	406ffa <_malloc_r+0x1c2>
  406f24:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  406f28:	f080 809f 	bcs.w	40706a <_malloc_r+0x232>
  406f2c:	08d2      	lsrs	r2, r2, #3
  406f2e:	2001      	movs	r0, #1
  406f30:	6879      	ldr	r1, [r7, #4]
  406f32:	ea4f 08a2 	mov.w	r8, r2, asr #2
  406f36:	eb07 02c2 	add.w	r2, r7, r2, lsl #3
  406f3a:	fa00 f008 	lsl.w	r0, r0, r8
  406f3e:	f8d2 8008 	ldr.w	r8, [r2, #8]
  406f42:	4308      	orrs	r0, r1
  406f44:	60da      	str	r2, [r3, #12]
  406f46:	f8c3 8008 	str.w	r8, [r3, #8]
  406f4a:	6078      	str	r0, [r7, #4]
  406f4c:	6093      	str	r3, [r2, #8]
  406f4e:	f8c8 300c 	str.w	r3, [r8, #12]
  406f52:	ea4f 03ac 	mov.w	r3, ip, asr #2
  406f56:	2101      	movs	r1, #1
  406f58:	4099      	lsls	r1, r3
  406f5a:	4281      	cmp	r1, r0
  406f5c:	d85b      	bhi.n	407016 <_malloc_r+0x1de>
  406f5e:	4208      	tst	r0, r1
  406f60:	d106      	bne.n	406f70 <_malloc_r+0x138>
  406f62:	f02c 0c03 	bic.w	ip, ip, #3
  406f66:	0049      	lsls	r1, r1, #1
  406f68:	f10c 0c04 	add.w	ip, ip, #4
  406f6c:	4208      	tst	r0, r1
  406f6e:	d0fa      	beq.n	406f66 <_malloc_r+0x12e>
  406f70:	eb06 08cc 	add.w	r8, r6, ip, lsl #3
  406f74:	46e1      	mov	r9, ip
  406f76:	4640      	mov	r0, r8
  406f78:	68c7      	ldr	r7, [r0, #12]
  406f7a:	42b8      	cmp	r0, r7
  406f7c:	d107      	bne.n	406f8e <_malloc_r+0x156>
  406f7e:	e0df      	b.n	407140 <_malloc_r+0x308>
  406f80:	2a00      	cmp	r2, #0
  406f82:	f280 80f7 	bge.w	407174 <_malloc_r+0x33c>
  406f86:	68ff      	ldr	r7, [r7, #12]
  406f88:	42b8      	cmp	r0, r7
  406f8a:	f000 80d9 	beq.w	407140 <_malloc_r+0x308>
  406f8e:	687b      	ldr	r3, [r7, #4]
  406f90:	f023 0303 	bic.w	r3, r3, #3
  406f94:	1b1a      	subs	r2, r3, r4
  406f96:	2a0f      	cmp	r2, #15
  406f98:	ddf2      	ble.n	406f80 <_malloc_r+0x148>
  406f9a:	46b8      	mov	r8, r7
  406f9c:	68fb      	ldr	r3, [r7, #12]
  406f9e:	f044 0901 	orr.w	r9, r4, #1
  406fa2:	f042 0c01 	orr.w	ip, r2, #1
  406fa6:	f858 1f08 	ldr.w	r1, [r8, #8]!
  406faa:	443c      	add	r4, r7
  406fac:	f8c7 9004 	str.w	r9, [r7, #4]
  406fb0:	4628      	mov	r0, r5
  406fb2:	60cb      	str	r3, [r1, #12]
  406fb4:	6099      	str	r1, [r3, #8]
  406fb6:	6174      	str	r4, [r6, #20]
  406fb8:	6134      	str	r4, [r6, #16]
  406fba:	f8c4 e00c 	str.w	lr, [r4, #12]
  406fbe:	f8c4 e008 	str.w	lr, [r4, #8]
  406fc2:	f8c4 c004 	str.w	ip, [r4, #4]
  406fc6:	50a2      	str	r2, [r4, r2]
  406fc8:	f000 fb28 	bl	40761c <__malloc_unlock>
  406fcc:	e760      	b.n	406e90 <_malloc_r+0x58>
  406fce:	207e      	movs	r0, #126	; 0x7e
  406fd0:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
  406fd4:	e77c      	b.n	406ed0 <_malloc_r+0x98>
  406fd6:	441a      	add	r2, r3
  406fd8:	68dc      	ldr	r4, [r3, #12]
  406fda:	689e      	ldr	r6, [r3, #8]
  406fdc:	f103 0808 	add.w	r8, r3, #8
  406fe0:	6851      	ldr	r1, [r2, #4]
  406fe2:	4628      	mov	r0, r5
  406fe4:	60f4      	str	r4, [r6, #12]
  406fe6:	f041 0301 	orr.w	r3, r1, #1
  406fea:	60a6      	str	r6, [r4, #8]
  406fec:	6053      	str	r3, [r2, #4]
  406fee:	f000 fb15 	bl	40761c <__malloc_unlock>
  406ff2:	4640      	mov	r0, r8
  406ff4:	b003      	add	sp, #12
  406ff6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406ffa:	441a      	add	r2, r3
  406ffc:	f103 0808 	add.w	r8, r3, #8
  407000:	4628      	mov	r0, r5
  407002:	6853      	ldr	r3, [r2, #4]
  407004:	f043 0301 	orr.w	r3, r3, #1
  407008:	6053      	str	r3, [r2, #4]
  40700a:	f000 fb07 	bl	40761c <__malloc_unlock>
  40700e:	4640      	mov	r0, r8
  407010:	b003      	add	sp, #12
  407012:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407016:	68b7      	ldr	r7, [r6, #8]
  407018:	687a      	ldr	r2, [r7, #4]
  40701a:	f022 0803 	bic.w	r8, r2, #3
  40701e:	ebc4 0208 	rsb	r2, r4, r8
  407022:	2a0f      	cmp	r2, #15
  407024:	dd56      	ble.n	4070d4 <_malloc_r+0x29c>
  407026:	45a0      	cmp	r8, r4
  407028:	d354      	bcc.n	4070d4 <_malloc_r+0x29c>
  40702a:	f044 0301 	orr.w	r3, r4, #1
  40702e:	f042 0201 	orr.w	r2, r2, #1
  407032:	443c      	add	r4, r7
  407034:	f107 0808 	add.w	r8, r7, #8
  407038:	607b      	str	r3, [r7, #4]
  40703a:	4628      	mov	r0, r5
  40703c:	60b4      	str	r4, [r6, #8]
  40703e:	6062      	str	r2, [r4, #4]
  407040:	f000 faec 	bl	40761c <__malloc_unlock>
  407044:	4640      	mov	r0, r8
  407046:	b003      	add	sp, #12
  407048:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40704c:	f1bc 0f14 	cmp.w	ip, #20
  407050:	f240 809f 	bls.w	407192 <_malloc_r+0x35a>
  407054:	f1bc 0f54 	cmp.w	ip, #84	; 0x54
  407058:	f200 8127 	bhi.w	4072aa <_malloc_r+0x472>
  40705c:	ea4f 3c14 	mov.w	ip, r4, lsr #12
  407060:	f10c 0c6e 	add.w	ip, ip, #110	; 0x6e
  407064:	ea4f 004c 	mov.w	r0, ip, lsl #1
  407068:	e732      	b.n	406ed0 <_malloc_r+0x98>
  40706a:	0a51      	lsrs	r1, r2, #9
  40706c:	2904      	cmp	r1, #4
  40706e:	f240 8095 	bls.w	40719c <_malloc_r+0x364>
  407072:	2914      	cmp	r1, #20
  407074:	f200 8142 	bhi.w	4072fc <_malloc_r+0x4c4>
  407078:	f101 075b 	add.w	r7, r1, #91	; 0x5b
  40707c:	0078      	lsls	r0, r7, #1
  40707e:	eb06 0080 	add.w	r0, r6, r0, lsl #2
  407082:	f8df 90e0 	ldr.w	r9, [pc, #224]	; 407164 <_malloc_r+0x32c>
  407086:	6881      	ldr	r1, [r0, #8]
  407088:	4281      	cmp	r1, r0
  40708a:	f000 811b 	beq.w	4072c4 <_malloc_r+0x48c>
  40708e:	684f      	ldr	r7, [r1, #4]
  407090:	f027 0703 	bic.w	r7, r7, #3
  407094:	42ba      	cmp	r2, r7
  407096:	d202      	bcs.n	40709e <_malloc_r+0x266>
  407098:	6889      	ldr	r1, [r1, #8]
  40709a:	4288      	cmp	r0, r1
  40709c:	d1f7      	bne.n	40708e <_malloc_r+0x256>
  40709e:	68ca      	ldr	r2, [r1, #12]
  4070a0:	6870      	ldr	r0, [r6, #4]
  4070a2:	60da      	str	r2, [r3, #12]
  4070a4:	6099      	str	r1, [r3, #8]
  4070a6:	6093      	str	r3, [r2, #8]
  4070a8:	60cb      	str	r3, [r1, #12]
  4070aa:	e752      	b.n	406f52 <_malloc_r+0x11a>
  4070ac:	f044 0601 	orr.w	r6, r4, #1
  4070b0:	f041 0201 	orr.w	r2, r1, #1
  4070b4:	441c      	add	r4, r3
  4070b6:	4628      	mov	r0, r5
  4070b8:	605e      	str	r6, [r3, #4]
  4070ba:	f103 0808 	add.w	r8, r3, #8
  4070be:	617c      	str	r4, [r7, #20]
  4070c0:	613c      	str	r4, [r7, #16]
  4070c2:	f8c4 e00c 	str.w	lr, [r4, #12]
  4070c6:	f8c4 e008 	str.w	lr, [r4, #8]
  4070ca:	6062      	str	r2, [r4, #4]
  4070cc:	5061      	str	r1, [r4, r1]
  4070ce:	f000 faa5 	bl	40761c <__malloc_unlock>
  4070d2:	e6dd      	b.n	406e90 <_malloc_r+0x58>
  4070d4:	4a24      	ldr	r2, [pc, #144]	; (407168 <_malloc_r+0x330>)
  4070d6:	4b25      	ldr	r3, [pc, #148]	; (40716c <_malloc_r+0x334>)
  4070d8:	6811      	ldr	r1, [r2, #0]
  4070da:	681b      	ldr	r3, [r3, #0]
  4070dc:	3101      	adds	r1, #1
  4070de:	4423      	add	r3, r4
  4070e0:	f000 8109 	beq.w	4072f6 <_malloc_r+0x4be>
  4070e4:	f241 010f 	movw	r1, #4111	; 0x100f
  4070e8:	f8df 9084 	ldr.w	r9, [pc, #132]	; 407170 <_malloc_r+0x338>
  4070ec:	4419      	add	r1, r3
  4070ee:	ea01 0909 	and.w	r9, r1, r9
  4070f2:	4628      	mov	r0, r5
  4070f4:	4649      	mov	r1, r9
  4070f6:	9201      	str	r2, [sp, #4]
  4070f8:	f000 ffb8 	bl	40806c <_sbrk_r>
  4070fc:	f1b0 3fff 	cmp.w	r0, #4294967295
  407100:	4682      	mov	sl, r0
  407102:	9a01      	ldr	r2, [sp, #4]
  407104:	f000 8101 	beq.w	40730a <_malloc_r+0x4d2>
  407108:	1bbb      	subs	r3, r7, r6
  40710a:	eb07 0108 	add.w	r1, r7, r8
  40710e:	4815      	ldr	r0, [pc, #84]	; (407164 <_malloc_r+0x32c>)
  407110:	bf18      	it	ne
  407112:	2301      	movne	r3, #1
  407114:	4551      	cmp	r1, sl
  407116:	d967      	bls.n	4071e8 <_malloc_r+0x3b0>
  407118:	2b00      	cmp	r3, #0
  40711a:	d065      	beq.n	4071e8 <_malloc_r+0x3b0>
  40711c:	6887      	ldr	r7, [r0, #8]
  40711e:	687b      	ldr	r3, [r7, #4]
  407120:	f023 0303 	bic.w	r3, r3, #3
  407124:	1b1a      	subs	r2, r3, r4
  407126:	2a0f      	cmp	r2, #15
  407128:	dd02      	ble.n	407130 <_malloc_r+0x2f8>
  40712a:	429c      	cmp	r4, r3
  40712c:	f67f af7d 	bls.w	40702a <_malloc_r+0x1f2>
  407130:	4628      	mov	r0, r5
  407132:	f04f 0800 	mov.w	r8, #0
  407136:	f000 fa71 	bl	40761c <__malloc_unlock>
  40713a:	e6a9      	b.n	406e90 <_malloc_r+0x58>
  40713c:	6878      	ldr	r0, [r7, #4]
  40713e:	e708      	b.n	406f52 <_malloc_r+0x11a>
  407140:	f109 0901 	add.w	r9, r9, #1
  407144:	3008      	adds	r0, #8
  407146:	f019 0f03 	tst.w	r9, #3
  40714a:	f47f af15 	bne.w	406f78 <_malloc_r+0x140>
  40714e:	e02f      	b.n	4071b0 <_malloc_r+0x378>
  407150:	f103 0208 	add.w	r2, r3, #8
  407154:	695b      	ldr	r3, [r3, #20]
  407156:	429a      	cmp	r2, r3
  407158:	bf08      	it	eq
  40715a:	f10c 0c02 	addeq.w	ip, ip, #2
  40715e:	f43f aecd 	beq.w	406efc <_malloc_r+0xc4>
  407162:	e684      	b.n	406e6e <_malloc_r+0x36>
  407164:	204004ec 	.word	0x204004ec
  407168:	204008f8 	.word	0x204008f8
  40716c:	204009c4 	.word	0x204009c4
  407170:	fffff000 	.word	0xfffff000
  407174:	18fa      	adds	r2, r7, r3
  407176:	46b8      	mov	r8, r7
  407178:	68f9      	ldr	r1, [r7, #12]
  40717a:	4628      	mov	r0, r5
  40717c:	6853      	ldr	r3, [r2, #4]
  40717e:	f858 4f08 	ldr.w	r4, [r8, #8]!
  407182:	f043 0301 	orr.w	r3, r3, #1
  407186:	6053      	str	r3, [r2, #4]
  407188:	60e1      	str	r1, [r4, #12]
  40718a:	608c      	str	r4, [r1, #8]
  40718c:	f000 fa46 	bl	40761c <__malloc_unlock>
  407190:	e67e      	b.n	406e90 <_malloc_r+0x58>
  407192:	f10c 0c5b 	add.w	ip, ip, #91	; 0x5b
  407196:	ea4f 004c 	mov.w	r0, ip, lsl #1
  40719a:	e699      	b.n	406ed0 <_malloc_r+0x98>
  40719c:	0991      	lsrs	r1, r2, #6
  40719e:	f101 0738 	add.w	r7, r1, #56	; 0x38
  4071a2:	0078      	lsls	r0, r7, #1
  4071a4:	e76b      	b.n	40707e <_malloc_r+0x246>
  4071a6:	f8d8 8000 	ldr.w	r8, [r8]
  4071aa:	4598      	cmp	r8, r3
  4071ac:	f040 80e6 	bne.w	40737c <_malloc_r+0x544>
  4071b0:	f01c 0f03 	tst.w	ip, #3
  4071b4:	f1a8 0308 	sub.w	r3, r8, #8
  4071b8:	f10c 3cff 	add.w	ip, ip, #4294967295
  4071bc:	d1f3      	bne.n	4071a6 <_malloc_r+0x36e>
  4071be:	6873      	ldr	r3, [r6, #4]
  4071c0:	ea23 0301 	bic.w	r3, r3, r1
  4071c4:	6073      	str	r3, [r6, #4]
  4071c6:	0049      	lsls	r1, r1, #1
  4071c8:	4299      	cmp	r1, r3
  4071ca:	f63f af24 	bhi.w	407016 <_malloc_r+0x1de>
  4071ce:	2900      	cmp	r1, #0
  4071d0:	f43f af21 	beq.w	407016 <_malloc_r+0x1de>
  4071d4:	420b      	tst	r3, r1
  4071d6:	46cc      	mov	ip, r9
  4071d8:	f47f aeca 	bne.w	406f70 <_malloc_r+0x138>
  4071dc:	0049      	lsls	r1, r1, #1
  4071de:	f10c 0c04 	add.w	ip, ip, #4
  4071e2:	420b      	tst	r3, r1
  4071e4:	d0fa      	beq.n	4071dc <_malloc_r+0x3a4>
  4071e6:	e6c3      	b.n	406f70 <_malloc_r+0x138>
  4071e8:	f8df b19c 	ldr.w	fp, [pc, #412]	; 407388 <_malloc_r+0x550>
  4071ec:	4551      	cmp	r1, sl
  4071ee:	f8db 0000 	ldr.w	r0, [fp]
  4071f2:	4448      	add	r0, r9
  4071f4:	f8cb 0000 	str.w	r0, [fp]
  4071f8:	f000 808c 	beq.w	407314 <_malloc_r+0x4dc>
  4071fc:	6812      	ldr	r2, [r2, #0]
  4071fe:	f8df e18c 	ldr.w	lr, [pc, #396]	; 40738c <_malloc_r+0x554>
  407202:	3201      	adds	r2, #1
  407204:	f000 80a3 	beq.w	40734e <_malloc_r+0x516>
  407208:	ebc1 010a 	rsb	r1, r1, sl
  40720c:	4408      	add	r0, r1
  40720e:	f8cb 0000 	str.w	r0, [fp]
  407212:	f01a 0107 	ands.w	r1, sl, #7
  407216:	d052      	beq.n	4072be <_malloc_r+0x486>
  407218:	f1c1 0008 	rsb	r0, r1, #8
  40721c:	f241 0208 	movw	r2, #4104	; 0x1008
  407220:	4482      	add	sl, r0
  407222:	1a52      	subs	r2, r2, r1
  407224:	eb0a 0109 	add.w	r1, sl, r9
  407228:	4628      	mov	r0, r5
  40722a:	9301      	str	r3, [sp, #4]
  40722c:	f3c1 010b 	ubfx	r1, r1, #0, #12
  407230:	ebc1 0902 	rsb	r9, r1, r2
  407234:	4649      	mov	r1, r9
  407236:	f000 ff19 	bl	40806c <_sbrk_r>
  40723a:	1c43      	adds	r3, r0, #1
  40723c:	9b01      	ldr	r3, [sp, #4]
  40723e:	d07a      	beq.n	407336 <_malloc_r+0x4fe>
  407240:	ebca 0200 	rsb	r2, sl, r0
  407244:	444a      	add	r2, r9
  407246:	f042 0201 	orr.w	r2, r2, #1
  40724a:	f8db 0000 	ldr.w	r0, [fp]
  40724e:	f8c6 a008 	str.w	sl, [r6, #8]
  407252:	4448      	add	r0, r9
  407254:	f8ca 2004 	str.w	r2, [sl, #4]
  407258:	f8df 912c 	ldr.w	r9, [pc, #300]	; 407388 <_malloc_r+0x550>
  40725c:	f8cb 0000 	str.w	r0, [fp]
  407260:	b1a3      	cbz	r3, 40728c <_malloc_r+0x454>
  407262:	f1b8 0f0f 	cmp.w	r8, #15
  407266:	d937      	bls.n	4072d8 <_malloc_r+0x4a0>
  407268:	687b      	ldr	r3, [r7, #4]
  40726a:	f1a8 020c 	sub.w	r2, r8, #12
  40726e:	f04f 0e05 	mov.w	lr, #5
  407272:	f022 0207 	bic.w	r2, r2, #7
  407276:	f003 0301 	and.w	r3, r3, #1
  40727a:	18b9      	adds	r1, r7, r2
  40727c:	4313      	orrs	r3, r2
  40727e:	2a0f      	cmp	r2, #15
  407280:	607b      	str	r3, [r7, #4]
  407282:	f8c1 e004 	str.w	lr, [r1, #4]
  407286:	f8c1 e008 	str.w	lr, [r1, #8]
  40728a:	d858      	bhi.n	40733e <_malloc_r+0x506>
  40728c:	4b3c      	ldr	r3, [pc, #240]	; (407380 <_malloc_r+0x548>)
  40728e:	681a      	ldr	r2, [r3, #0]
  407290:	4290      	cmp	r0, r2
  407292:	d900      	bls.n	407296 <_malloc_r+0x45e>
  407294:	6018      	str	r0, [r3, #0]
  407296:	4b3b      	ldr	r3, [pc, #236]	; (407384 <_malloc_r+0x54c>)
  407298:	68b7      	ldr	r7, [r6, #8]
  40729a:	681a      	ldr	r2, [r3, #0]
  40729c:	4290      	cmp	r0, r2
  40729e:	d900      	bls.n	4072a2 <_malloc_r+0x46a>
  4072a0:	6018      	str	r0, [r3, #0]
  4072a2:	687b      	ldr	r3, [r7, #4]
  4072a4:	f023 0303 	bic.w	r3, r3, #3
  4072a8:	e73c      	b.n	407124 <_malloc_r+0x2ec>
  4072aa:	f5bc 7faa 	cmp.w	ip, #340	; 0x154
  4072ae:	d817      	bhi.n	4072e0 <_malloc_r+0x4a8>
  4072b0:	ea4f 3cd4 	mov.w	ip, r4, lsr #15
  4072b4:	f10c 0c77 	add.w	ip, ip, #119	; 0x77
  4072b8:	ea4f 004c 	mov.w	r0, ip, lsl #1
  4072bc:	e608      	b.n	406ed0 <_malloc_r+0x98>
  4072be:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  4072c2:	e7af      	b.n	407224 <_malloc_r+0x3ec>
  4072c4:	10bf      	asrs	r7, r7, #2
  4072c6:	2001      	movs	r0, #1
  4072c8:	460a      	mov	r2, r1
  4072ca:	40b8      	lsls	r0, r7
  4072cc:	f8d9 7004 	ldr.w	r7, [r9, #4]
  4072d0:	4338      	orrs	r0, r7
  4072d2:	f8c9 0004 	str.w	r0, [r9, #4]
  4072d6:	e6e4      	b.n	4070a2 <_malloc_r+0x26a>
  4072d8:	2301      	movs	r3, #1
  4072da:	f8ca 3004 	str.w	r3, [sl, #4]
  4072de:	e727      	b.n	407130 <_malloc_r+0x2f8>
  4072e0:	f240 5354 	movw	r3, #1364	; 0x554
  4072e4:	459c      	cmp	ip, r3
  4072e6:	d822      	bhi.n	40732e <_malloc_r+0x4f6>
  4072e8:	ea4f 4c94 	mov.w	ip, r4, lsr #18
  4072ec:	f10c 0c7c 	add.w	ip, ip, #124	; 0x7c
  4072f0:	ea4f 004c 	mov.w	r0, ip, lsl #1
  4072f4:	e5ec      	b.n	406ed0 <_malloc_r+0x98>
  4072f6:	f103 0910 	add.w	r9, r3, #16
  4072fa:	e6fa      	b.n	4070f2 <_malloc_r+0x2ba>
  4072fc:	2954      	cmp	r1, #84	; 0x54
  4072fe:	d829      	bhi.n	407354 <_malloc_r+0x51c>
  407300:	0b11      	lsrs	r1, r2, #12
  407302:	f101 076e 	add.w	r7, r1, #110	; 0x6e
  407306:	0078      	lsls	r0, r7, #1
  407308:	e6b9      	b.n	40707e <_malloc_r+0x246>
  40730a:	68b7      	ldr	r7, [r6, #8]
  40730c:	687b      	ldr	r3, [r7, #4]
  40730e:	f023 0303 	bic.w	r3, r3, #3
  407312:	e707      	b.n	407124 <_malloc_r+0x2ec>
  407314:	f3c1 0e0b 	ubfx	lr, r1, #0, #12
  407318:	f1be 0f00 	cmp.w	lr, #0
  40731c:	f47f af6e 	bne.w	4071fc <_malloc_r+0x3c4>
  407320:	eb09 0308 	add.w	r3, r9, r8
  407324:	68b2      	ldr	r2, [r6, #8]
  407326:	f043 0301 	orr.w	r3, r3, #1
  40732a:	6053      	str	r3, [r2, #4]
  40732c:	e7ae      	b.n	40728c <_malloc_r+0x454>
  40732e:	20fc      	movs	r0, #252	; 0xfc
  407330:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
  407334:	e5cc      	b.n	406ed0 <_malloc_r+0x98>
  407336:	2201      	movs	r2, #1
  407338:	f04f 0900 	mov.w	r9, #0
  40733c:	e785      	b.n	40724a <_malloc_r+0x412>
  40733e:	4628      	mov	r0, r5
  407340:	f107 0108 	add.w	r1, r7, #8
  407344:	f7ff fa68 	bl	406818 <_free_r>
  407348:	f8d9 0000 	ldr.w	r0, [r9]
  40734c:	e79e      	b.n	40728c <_malloc_r+0x454>
  40734e:	f8ce a000 	str.w	sl, [lr]
  407352:	e75e      	b.n	407212 <_malloc_r+0x3da>
  407354:	f5b1 7faa 	cmp.w	r1, #340	; 0x154
  407358:	d804      	bhi.n	407364 <_malloc_r+0x52c>
  40735a:	0bd1      	lsrs	r1, r2, #15
  40735c:	f101 0777 	add.w	r7, r1, #119	; 0x77
  407360:	0078      	lsls	r0, r7, #1
  407362:	e68c      	b.n	40707e <_malloc_r+0x246>
  407364:	f240 5054 	movw	r0, #1364	; 0x554
  407368:	4281      	cmp	r1, r0
  40736a:	d804      	bhi.n	407376 <_malloc_r+0x53e>
  40736c:	0c91      	lsrs	r1, r2, #18
  40736e:	f101 077c 	add.w	r7, r1, #124	; 0x7c
  407372:	0078      	lsls	r0, r7, #1
  407374:	e683      	b.n	40707e <_malloc_r+0x246>
  407376:	20fc      	movs	r0, #252	; 0xfc
  407378:	277e      	movs	r7, #126	; 0x7e
  40737a:	e680      	b.n	40707e <_malloc_r+0x246>
  40737c:	6873      	ldr	r3, [r6, #4]
  40737e:	e722      	b.n	4071c6 <_malloc_r+0x38e>
  407380:	204009c0 	.word	0x204009c0
  407384:	204009bc 	.word	0x204009bc
  407388:	204009c8 	.word	0x204009c8
  40738c:	204008f8 	.word	0x204008f8

00407390 <memchr>:
  407390:	0783      	lsls	r3, r0, #30
  407392:	b2c9      	uxtb	r1, r1
  407394:	b470      	push	{r4, r5, r6}
  407396:	d03f      	beq.n	407418 <memchr+0x88>
  407398:	1e54      	subs	r4, r2, #1
  40739a:	2a00      	cmp	r2, #0
  40739c:	d03e      	beq.n	40741c <memchr+0x8c>
  40739e:	7803      	ldrb	r3, [r0, #0]
  4073a0:	428b      	cmp	r3, r1
  4073a2:	bf18      	it	ne
  4073a4:	1c43      	addne	r3, r0, #1
  4073a6:	d105      	bne.n	4073b4 <memchr+0x24>
  4073a8:	e01c      	b.n	4073e4 <memchr+0x54>
  4073aa:	b1ec      	cbz	r4, 4073e8 <memchr+0x58>
  4073ac:	7802      	ldrb	r2, [r0, #0]
  4073ae:	3c01      	subs	r4, #1
  4073b0:	428a      	cmp	r2, r1
  4073b2:	d017      	beq.n	4073e4 <memchr+0x54>
  4073b4:	f013 0f03 	tst.w	r3, #3
  4073b8:	4618      	mov	r0, r3
  4073ba:	f103 0301 	add.w	r3, r3, #1
  4073be:	d1f4      	bne.n	4073aa <memchr+0x1a>
  4073c0:	2c03      	cmp	r4, #3
  4073c2:	d814      	bhi.n	4073ee <memchr+0x5e>
  4073c4:	b184      	cbz	r4, 4073e8 <memchr+0x58>
  4073c6:	7803      	ldrb	r3, [r0, #0]
  4073c8:	428b      	cmp	r3, r1
  4073ca:	d00b      	beq.n	4073e4 <memchr+0x54>
  4073cc:	1905      	adds	r5, r0, r4
  4073ce:	1c43      	adds	r3, r0, #1
  4073d0:	e002      	b.n	4073d8 <memchr+0x48>
  4073d2:	7802      	ldrb	r2, [r0, #0]
  4073d4:	428a      	cmp	r2, r1
  4073d6:	d005      	beq.n	4073e4 <memchr+0x54>
  4073d8:	42ab      	cmp	r3, r5
  4073da:	4618      	mov	r0, r3
  4073dc:	f103 0301 	add.w	r3, r3, #1
  4073e0:	d1f7      	bne.n	4073d2 <memchr+0x42>
  4073e2:	2000      	movs	r0, #0
  4073e4:	bc70      	pop	{r4, r5, r6}
  4073e6:	4770      	bx	lr
  4073e8:	4620      	mov	r0, r4
  4073ea:	bc70      	pop	{r4, r5, r6}
  4073ec:	4770      	bx	lr
  4073ee:	ea41 2601 	orr.w	r6, r1, r1, lsl #8
  4073f2:	4602      	mov	r2, r0
  4073f4:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
  4073f8:	4610      	mov	r0, r2
  4073fa:	3204      	adds	r2, #4
  4073fc:	6803      	ldr	r3, [r0, #0]
  4073fe:	4073      	eors	r3, r6
  407400:	f1a3 3501 	sub.w	r5, r3, #16843009	; 0x1010101
  407404:	ea25 0303 	bic.w	r3, r5, r3
  407408:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
  40740c:	d1da      	bne.n	4073c4 <memchr+0x34>
  40740e:	3c04      	subs	r4, #4
  407410:	4610      	mov	r0, r2
  407412:	2c03      	cmp	r4, #3
  407414:	d8f0      	bhi.n	4073f8 <memchr+0x68>
  407416:	e7d5      	b.n	4073c4 <memchr+0x34>
  407418:	4614      	mov	r4, r2
  40741a:	e7d1      	b.n	4073c0 <memchr+0x30>
  40741c:	4610      	mov	r0, r2
  40741e:	e7e1      	b.n	4073e4 <memchr+0x54>

00407420 <memcpy>:
  407420:	4684      	mov	ip, r0
  407422:	ea41 0300 	orr.w	r3, r1, r0
  407426:	f013 0303 	ands.w	r3, r3, #3
  40742a:	d16d      	bne.n	407508 <memcpy+0xe8>
  40742c:	3a40      	subs	r2, #64	; 0x40
  40742e:	d341      	bcc.n	4074b4 <memcpy+0x94>
  407430:	f851 3b04 	ldr.w	r3, [r1], #4
  407434:	f840 3b04 	str.w	r3, [r0], #4
  407438:	f851 3b04 	ldr.w	r3, [r1], #4
  40743c:	f840 3b04 	str.w	r3, [r0], #4
  407440:	f851 3b04 	ldr.w	r3, [r1], #4
  407444:	f840 3b04 	str.w	r3, [r0], #4
  407448:	f851 3b04 	ldr.w	r3, [r1], #4
  40744c:	f840 3b04 	str.w	r3, [r0], #4
  407450:	f851 3b04 	ldr.w	r3, [r1], #4
  407454:	f840 3b04 	str.w	r3, [r0], #4
  407458:	f851 3b04 	ldr.w	r3, [r1], #4
  40745c:	f840 3b04 	str.w	r3, [r0], #4
  407460:	f851 3b04 	ldr.w	r3, [r1], #4
  407464:	f840 3b04 	str.w	r3, [r0], #4
  407468:	f851 3b04 	ldr.w	r3, [r1], #4
  40746c:	f840 3b04 	str.w	r3, [r0], #4
  407470:	f851 3b04 	ldr.w	r3, [r1], #4
  407474:	f840 3b04 	str.w	r3, [r0], #4
  407478:	f851 3b04 	ldr.w	r3, [r1], #4
  40747c:	f840 3b04 	str.w	r3, [r0], #4
  407480:	f851 3b04 	ldr.w	r3, [r1], #4
  407484:	f840 3b04 	str.w	r3, [r0], #4
  407488:	f851 3b04 	ldr.w	r3, [r1], #4
  40748c:	f840 3b04 	str.w	r3, [r0], #4
  407490:	f851 3b04 	ldr.w	r3, [r1], #4
  407494:	f840 3b04 	str.w	r3, [r0], #4
  407498:	f851 3b04 	ldr.w	r3, [r1], #4
  40749c:	f840 3b04 	str.w	r3, [r0], #4
  4074a0:	f851 3b04 	ldr.w	r3, [r1], #4
  4074a4:	f840 3b04 	str.w	r3, [r0], #4
  4074a8:	f851 3b04 	ldr.w	r3, [r1], #4
  4074ac:	f840 3b04 	str.w	r3, [r0], #4
  4074b0:	3a40      	subs	r2, #64	; 0x40
  4074b2:	d2bd      	bcs.n	407430 <memcpy+0x10>
  4074b4:	3230      	adds	r2, #48	; 0x30
  4074b6:	d311      	bcc.n	4074dc <memcpy+0xbc>
  4074b8:	f851 3b04 	ldr.w	r3, [r1], #4
  4074bc:	f840 3b04 	str.w	r3, [r0], #4
  4074c0:	f851 3b04 	ldr.w	r3, [r1], #4
  4074c4:	f840 3b04 	str.w	r3, [r0], #4
  4074c8:	f851 3b04 	ldr.w	r3, [r1], #4
  4074cc:	f840 3b04 	str.w	r3, [r0], #4
  4074d0:	f851 3b04 	ldr.w	r3, [r1], #4
  4074d4:	f840 3b04 	str.w	r3, [r0], #4
  4074d8:	3a10      	subs	r2, #16
  4074da:	d2ed      	bcs.n	4074b8 <memcpy+0x98>
  4074dc:	320c      	adds	r2, #12
  4074de:	d305      	bcc.n	4074ec <memcpy+0xcc>
  4074e0:	f851 3b04 	ldr.w	r3, [r1], #4
  4074e4:	f840 3b04 	str.w	r3, [r0], #4
  4074e8:	3a04      	subs	r2, #4
  4074ea:	d2f9      	bcs.n	4074e0 <memcpy+0xc0>
  4074ec:	3204      	adds	r2, #4
  4074ee:	d008      	beq.n	407502 <memcpy+0xe2>
  4074f0:	07d2      	lsls	r2, r2, #31
  4074f2:	bf1c      	itt	ne
  4074f4:	f811 3b01 	ldrbne.w	r3, [r1], #1
  4074f8:	f800 3b01 	strbne.w	r3, [r0], #1
  4074fc:	d301      	bcc.n	407502 <memcpy+0xe2>
  4074fe:	880b      	ldrh	r3, [r1, #0]
  407500:	8003      	strh	r3, [r0, #0]
  407502:	4660      	mov	r0, ip
  407504:	4770      	bx	lr
  407506:	bf00      	nop
  407508:	2a08      	cmp	r2, #8
  40750a:	d313      	bcc.n	407534 <memcpy+0x114>
  40750c:	078b      	lsls	r3, r1, #30
  40750e:	d08d      	beq.n	40742c <memcpy+0xc>
  407510:	f010 0303 	ands.w	r3, r0, #3
  407514:	d08a      	beq.n	40742c <memcpy+0xc>
  407516:	f1c3 0304 	rsb	r3, r3, #4
  40751a:	1ad2      	subs	r2, r2, r3
  40751c:	07db      	lsls	r3, r3, #31
  40751e:	bf1c      	itt	ne
  407520:	f811 3b01 	ldrbne.w	r3, [r1], #1
  407524:	f800 3b01 	strbne.w	r3, [r0], #1
  407528:	d380      	bcc.n	40742c <memcpy+0xc>
  40752a:	f831 3b02 	ldrh.w	r3, [r1], #2
  40752e:	f820 3b02 	strh.w	r3, [r0], #2
  407532:	e77b      	b.n	40742c <memcpy+0xc>
  407534:	3a04      	subs	r2, #4
  407536:	d3d9      	bcc.n	4074ec <memcpy+0xcc>
  407538:	3a01      	subs	r2, #1
  40753a:	f811 3b01 	ldrb.w	r3, [r1], #1
  40753e:	f800 3b01 	strb.w	r3, [r0], #1
  407542:	d2f9      	bcs.n	407538 <memcpy+0x118>
  407544:	780b      	ldrb	r3, [r1, #0]
  407546:	7003      	strb	r3, [r0, #0]
  407548:	784b      	ldrb	r3, [r1, #1]
  40754a:	7043      	strb	r3, [r0, #1]
  40754c:	788b      	ldrb	r3, [r1, #2]
  40754e:	7083      	strb	r3, [r0, #2]
  407550:	4660      	mov	r0, ip
  407552:	4770      	bx	lr

00407554 <memmove>:
  407554:	4288      	cmp	r0, r1
  407556:	b5f0      	push	{r4, r5, r6, r7, lr}
  407558:	d90d      	bls.n	407576 <memmove+0x22>
  40755a:	188b      	adds	r3, r1, r2
  40755c:	4298      	cmp	r0, r3
  40755e:	d20a      	bcs.n	407576 <memmove+0x22>
  407560:	1881      	adds	r1, r0, r2
  407562:	2a00      	cmp	r2, #0
  407564:	d053      	beq.n	40760e <memmove+0xba>
  407566:	1a9a      	subs	r2, r3, r2
  407568:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  40756c:	4293      	cmp	r3, r2
  40756e:	f801 4d01 	strb.w	r4, [r1, #-1]!
  407572:	d1f9      	bne.n	407568 <memmove+0x14>
  407574:	bdf0      	pop	{r4, r5, r6, r7, pc}
  407576:	2a0f      	cmp	r2, #15
  407578:	d947      	bls.n	40760a <memmove+0xb6>
  40757a:	ea40 0301 	orr.w	r3, r0, r1
  40757e:	079b      	lsls	r3, r3, #30
  407580:	d146      	bne.n	407610 <memmove+0xbc>
  407582:	f100 0410 	add.w	r4, r0, #16
  407586:	f101 0310 	add.w	r3, r1, #16
  40758a:	4615      	mov	r5, r2
  40758c:	f853 6c10 	ldr.w	r6, [r3, #-16]
  407590:	3d10      	subs	r5, #16
  407592:	3310      	adds	r3, #16
  407594:	3410      	adds	r4, #16
  407596:	f844 6c20 	str.w	r6, [r4, #-32]
  40759a:	2d0f      	cmp	r5, #15
  40759c:	f853 6c1c 	ldr.w	r6, [r3, #-28]
  4075a0:	f844 6c1c 	str.w	r6, [r4, #-28]
  4075a4:	f853 6c18 	ldr.w	r6, [r3, #-24]
  4075a8:	f844 6c18 	str.w	r6, [r4, #-24]
  4075ac:	f853 6c14 	ldr.w	r6, [r3, #-20]
  4075b0:	f844 6c14 	str.w	r6, [r4, #-20]
  4075b4:	d8ea      	bhi.n	40758c <memmove+0x38>
  4075b6:	f1a2 0310 	sub.w	r3, r2, #16
  4075ba:	f002 0e0f 	and.w	lr, r2, #15
  4075be:	f023 030f 	bic.w	r3, r3, #15
  4075c2:	f1be 0f03 	cmp.w	lr, #3
  4075c6:	f103 0310 	add.w	r3, r3, #16
  4075ca:	4419      	add	r1, r3
  4075cc:	4403      	add	r3, r0
  4075ce:	d921      	bls.n	407614 <memmove+0xc0>
  4075d0:	1f1e      	subs	r6, r3, #4
  4075d2:	460d      	mov	r5, r1
  4075d4:	4674      	mov	r4, lr
  4075d6:	3c04      	subs	r4, #4
  4075d8:	f855 7b04 	ldr.w	r7, [r5], #4
  4075dc:	2c03      	cmp	r4, #3
  4075de:	f846 7f04 	str.w	r7, [r6, #4]!
  4075e2:	d8f8      	bhi.n	4075d6 <memmove+0x82>
  4075e4:	f1ae 0404 	sub.w	r4, lr, #4
  4075e8:	f002 0203 	and.w	r2, r2, #3
  4075ec:	f024 0403 	bic.w	r4, r4, #3
  4075f0:	3404      	adds	r4, #4
  4075f2:	4423      	add	r3, r4
  4075f4:	4421      	add	r1, r4
  4075f6:	b152      	cbz	r2, 40760e <memmove+0xba>
  4075f8:	3b01      	subs	r3, #1
  4075fa:	440a      	add	r2, r1
  4075fc:	f811 4b01 	ldrb.w	r4, [r1], #1
  407600:	4291      	cmp	r1, r2
  407602:	f803 4f01 	strb.w	r4, [r3, #1]!
  407606:	d1f9      	bne.n	4075fc <memmove+0xa8>
  407608:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40760a:	4603      	mov	r3, r0
  40760c:	e7f3      	b.n	4075f6 <memmove+0xa2>
  40760e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  407610:	4603      	mov	r3, r0
  407612:	e7f1      	b.n	4075f8 <memmove+0xa4>
  407614:	4672      	mov	r2, lr
  407616:	e7ee      	b.n	4075f6 <memmove+0xa2>

00407618 <__malloc_lock>:
  407618:	4770      	bx	lr
  40761a:	bf00      	nop

0040761c <__malloc_unlock>:
  40761c:	4770      	bx	lr
  40761e:	bf00      	nop

00407620 <_Balloc>:
  407620:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
  407622:	b538      	push	{r3, r4, r5, lr}
  407624:	4605      	mov	r5, r0
  407626:	460c      	mov	r4, r1
  407628:	b152      	cbz	r2, 407640 <_Balloc+0x20>
  40762a:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
  40762e:	b18b      	cbz	r3, 407654 <_Balloc+0x34>
  407630:	6819      	ldr	r1, [r3, #0]
  407632:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
  407636:	2200      	movs	r2, #0
  407638:	4618      	mov	r0, r3
  40763a:	611a      	str	r2, [r3, #16]
  40763c:	60da      	str	r2, [r3, #12]
  40763e:	bd38      	pop	{r3, r4, r5, pc}
  407640:	2221      	movs	r2, #33	; 0x21
  407642:	2104      	movs	r1, #4
  407644:	f000 fe58 	bl	4082f8 <_calloc_r>
  407648:	64e8      	str	r0, [r5, #76]	; 0x4c
  40764a:	4602      	mov	r2, r0
  40764c:	2800      	cmp	r0, #0
  40764e:	d1ec      	bne.n	40762a <_Balloc+0xa>
  407650:	2000      	movs	r0, #0
  407652:	bd38      	pop	{r3, r4, r5, pc}
  407654:	2101      	movs	r1, #1
  407656:	4628      	mov	r0, r5
  407658:	fa01 f504 	lsl.w	r5, r1, r4
  40765c:	1d6a      	adds	r2, r5, #5
  40765e:	0092      	lsls	r2, r2, #2
  407660:	f000 fe4a 	bl	4082f8 <_calloc_r>
  407664:	4603      	mov	r3, r0
  407666:	2800      	cmp	r0, #0
  407668:	d0f2      	beq.n	407650 <_Balloc+0x30>
  40766a:	6044      	str	r4, [r0, #4]
  40766c:	6085      	str	r5, [r0, #8]
  40766e:	e7e2      	b.n	407636 <_Balloc+0x16>

00407670 <_Bfree>:
  407670:	b131      	cbz	r1, 407680 <_Bfree+0x10>
  407672:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  407674:	684a      	ldr	r2, [r1, #4]
  407676:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
  40767a:	6008      	str	r0, [r1, #0]
  40767c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  407680:	4770      	bx	lr
  407682:	bf00      	nop

00407684 <__multadd>:
  407684:	b5f0      	push	{r4, r5, r6, r7, lr}
  407686:	460c      	mov	r4, r1
  407688:	b083      	sub	sp, #12
  40768a:	4605      	mov	r5, r0
  40768c:	690e      	ldr	r6, [r1, #16]
  40768e:	f101 0e14 	add.w	lr, r1, #20
  407692:	2700      	movs	r7, #0
  407694:	f8de 1000 	ldr.w	r1, [lr]
  407698:	3701      	adds	r7, #1
  40769a:	b288      	uxth	r0, r1
  40769c:	42be      	cmp	r6, r7
  40769e:	ea4f 4111 	mov.w	r1, r1, lsr #16
  4076a2:	fb02 3300 	mla	r3, r2, r0, r3
  4076a6:	fb02 f101 	mul.w	r1, r2, r1
  4076aa:	b298      	uxth	r0, r3
  4076ac:	eb01 4313 	add.w	r3, r1, r3, lsr #16
  4076b0:	eb00 4103 	add.w	r1, r0, r3, lsl #16
  4076b4:	ea4f 4313 	mov.w	r3, r3, lsr #16
  4076b8:	f84e 1b04 	str.w	r1, [lr], #4
  4076bc:	dcea      	bgt.n	407694 <__multadd+0x10>
  4076be:	b13b      	cbz	r3, 4076d0 <__multadd+0x4c>
  4076c0:	68a2      	ldr	r2, [r4, #8]
  4076c2:	4296      	cmp	r6, r2
  4076c4:	da07      	bge.n	4076d6 <__multadd+0x52>
  4076c6:	eb04 0286 	add.w	r2, r4, r6, lsl #2
  4076ca:	3601      	adds	r6, #1
  4076cc:	6153      	str	r3, [r2, #20]
  4076ce:	6126      	str	r6, [r4, #16]
  4076d0:	4620      	mov	r0, r4
  4076d2:	b003      	add	sp, #12
  4076d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4076d6:	6861      	ldr	r1, [r4, #4]
  4076d8:	4628      	mov	r0, r5
  4076da:	9301      	str	r3, [sp, #4]
  4076dc:	3101      	adds	r1, #1
  4076de:	f7ff ff9f 	bl	407620 <_Balloc>
  4076e2:	6922      	ldr	r2, [r4, #16]
  4076e4:	f104 010c 	add.w	r1, r4, #12
  4076e8:	4607      	mov	r7, r0
  4076ea:	3202      	adds	r2, #2
  4076ec:	300c      	adds	r0, #12
  4076ee:	0092      	lsls	r2, r2, #2
  4076f0:	f7ff fe96 	bl	407420 <memcpy>
  4076f4:	6cea      	ldr	r2, [r5, #76]	; 0x4c
  4076f6:	6861      	ldr	r1, [r4, #4]
  4076f8:	9b01      	ldr	r3, [sp, #4]
  4076fa:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
  4076fe:	6020      	str	r0, [r4, #0]
  407700:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
  407704:	463c      	mov	r4, r7
  407706:	e7de      	b.n	4076c6 <__multadd+0x42>

00407708 <__hi0bits>:
  407708:	4b0f      	ldr	r3, [pc, #60]	; (407748 <__hi0bits+0x40>)
  40770a:	4003      	ands	r3, r0
  40770c:	b9b3      	cbnz	r3, 40773c <__hi0bits+0x34>
  40770e:	0400      	lsls	r0, r0, #16
  407710:	2310      	movs	r3, #16
  407712:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
  407716:	d101      	bne.n	40771c <__hi0bits+0x14>
  407718:	3308      	adds	r3, #8
  40771a:	0200      	lsls	r0, r0, #8
  40771c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
  407720:	d101      	bne.n	407726 <__hi0bits+0x1e>
  407722:	3304      	adds	r3, #4
  407724:	0100      	lsls	r0, r0, #4
  407726:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
  40772a:	d101      	bne.n	407730 <__hi0bits+0x28>
  40772c:	3302      	adds	r3, #2
  40772e:	0080      	lsls	r0, r0, #2
  407730:	2800      	cmp	r0, #0
  407732:	db07      	blt.n	407744 <__hi0bits+0x3c>
  407734:	0042      	lsls	r2, r0, #1
  407736:	d403      	bmi.n	407740 <__hi0bits+0x38>
  407738:	2020      	movs	r0, #32
  40773a:	4770      	bx	lr
  40773c:	2300      	movs	r3, #0
  40773e:	e7e8      	b.n	407712 <__hi0bits+0xa>
  407740:	1c58      	adds	r0, r3, #1
  407742:	4770      	bx	lr
  407744:	4618      	mov	r0, r3
  407746:	4770      	bx	lr
  407748:	ffff0000 	.word	0xffff0000

0040774c <__lo0bits>:
  40774c:	6803      	ldr	r3, [r0, #0]
  40774e:	f013 0207 	ands.w	r2, r3, #7
  407752:	d008      	beq.n	407766 <__lo0bits+0x1a>
  407754:	07d9      	lsls	r1, r3, #31
  407756:	d422      	bmi.n	40779e <__lo0bits+0x52>
  407758:	079a      	lsls	r2, r3, #30
  40775a:	d423      	bmi.n	4077a4 <__lo0bits+0x58>
  40775c:	089b      	lsrs	r3, r3, #2
  40775e:	2202      	movs	r2, #2
  407760:	6003      	str	r3, [r0, #0]
  407762:	4610      	mov	r0, r2
  407764:	4770      	bx	lr
  407766:	b299      	uxth	r1, r3
  407768:	b909      	cbnz	r1, 40776e <__lo0bits+0x22>
  40776a:	0c1b      	lsrs	r3, r3, #16
  40776c:	2210      	movs	r2, #16
  40776e:	f013 0fff 	tst.w	r3, #255	; 0xff
  407772:	d101      	bne.n	407778 <__lo0bits+0x2c>
  407774:	3208      	adds	r2, #8
  407776:	0a1b      	lsrs	r3, r3, #8
  407778:	0719      	lsls	r1, r3, #28
  40777a:	d101      	bne.n	407780 <__lo0bits+0x34>
  40777c:	3204      	adds	r2, #4
  40777e:	091b      	lsrs	r3, r3, #4
  407780:	0799      	lsls	r1, r3, #30
  407782:	d101      	bne.n	407788 <__lo0bits+0x3c>
  407784:	3202      	adds	r2, #2
  407786:	089b      	lsrs	r3, r3, #2
  407788:	07d9      	lsls	r1, r3, #31
  40778a:	d405      	bmi.n	407798 <__lo0bits+0x4c>
  40778c:	085b      	lsrs	r3, r3, #1
  40778e:	d102      	bne.n	407796 <__lo0bits+0x4a>
  407790:	2220      	movs	r2, #32
  407792:	4610      	mov	r0, r2
  407794:	4770      	bx	lr
  407796:	3201      	adds	r2, #1
  407798:	6003      	str	r3, [r0, #0]
  40779a:	4610      	mov	r0, r2
  40779c:	4770      	bx	lr
  40779e:	2200      	movs	r2, #0
  4077a0:	4610      	mov	r0, r2
  4077a2:	4770      	bx	lr
  4077a4:	085b      	lsrs	r3, r3, #1
  4077a6:	2201      	movs	r2, #1
  4077a8:	6003      	str	r3, [r0, #0]
  4077aa:	4610      	mov	r0, r2
  4077ac:	4770      	bx	lr
  4077ae:	bf00      	nop

004077b0 <__i2b>:
  4077b0:	b510      	push	{r4, lr}
  4077b2:	460c      	mov	r4, r1
  4077b4:	2101      	movs	r1, #1
  4077b6:	f7ff ff33 	bl	407620 <_Balloc>
  4077ba:	2201      	movs	r2, #1
  4077bc:	6144      	str	r4, [r0, #20]
  4077be:	6102      	str	r2, [r0, #16]
  4077c0:	bd10      	pop	{r4, pc}
  4077c2:	bf00      	nop

004077c4 <__multiply>:
  4077c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4077c8:	690e      	ldr	r6, [r1, #16]
  4077ca:	b085      	sub	sp, #20
  4077cc:	6915      	ldr	r5, [r2, #16]
  4077ce:	460c      	mov	r4, r1
  4077d0:	4691      	mov	r9, r2
  4077d2:	42ae      	cmp	r6, r5
  4077d4:	f2c0 8094 	blt.w	407900 <__multiply+0x13c>
  4077d8:	462b      	mov	r3, r5
  4077da:	4635      	mov	r5, r6
  4077dc:	461e      	mov	r6, r3
  4077de:	eb05 0806 	add.w	r8, r5, r6
  4077e2:	68a3      	ldr	r3, [r4, #8]
  4077e4:	6861      	ldr	r1, [r4, #4]
  4077e6:	4598      	cmp	r8, r3
  4077e8:	dd00      	ble.n	4077ec <__multiply+0x28>
  4077ea:	3101      	adds	r1, #1
  4077ec:	f7ff ff18 	bl	407620 <_Balloc>
  4077f0:	f100 0a14 	add.w	sl, r0, #20
  4077f4:	9001      	str	r0, [sp, #4]
  4077f6:	eb0a 0b88 	add.w	fp, sl, r8, lsl #2
  4077fa:	45da      	cmp	sl, fp
  4077fc:	d205      	bcs.n	40780a <__multiply+0x46>
  4077fe:	4653      	mov	r3, sl
  407800:	2100      	movs	r1, #0
  407802:	f843 1b04 	str.w	r1, [r3], #4
  407806:	459b      	cmp	fp, r3
  407808:	d8fb      	bhi.n	407802 <__multiply+0x3e>
  40780a:	f109 0914 	add.w	r9, r9, #20
  40780e:	f104 0314 	add.w	r3, r4, #20
  407812:	eb09 0286 	add.w	r2, r9, r6, lsl #2
  407816:	eb03 0c85 	add.w	ip, r3, r5, lsl #2
  40781a:	4591      	cmp	r9, r2
  40781c:	d25b      	bcs.n	4078d6 <__multiply+0x112>
  40781e:	f8cd b008 	str.w	fp, [sp, #8]
  407822:	4693      	mov	fp, r2
  407824:	f8cd 800c 	str.w	r8, [sp, #12]
  407828:	4698      	mov	r8, r3
  40782a:	f859 6b04 	ldr.w	r6, [r9], #4
  40782e:	fa1f fe86 	uxth.w	lr, r6
  407832:	f1be 0f00 	cmp.w	lr, #0
  407836:	d021      	beq.n	40787c <__multiply+0xb8>
  407838:	4647      	mov	r7, r8
  40783a:	4656      	mov	r6, sl
  40783c:	2100      	movs	r1, #0
  40783e:	e000      	b.n	407842 <__multiply+0x7e>
  407840:	4626      	mov	r6, r4
  407842:	f857 2b04 	ldr.w	r2, [r7], #4
  407846:	4634      	mov	r4, r6
  407848:	6835      	ldr	r5, [r6, #0]
  40784a:	b290      	uxth	r0, r2
  40784c:	45bc      	cmp	ip, r7
  40784e:	b2ab      	uxth	r3, r5
  407850:	ea4f 4212 	mov.w	r2, r2, lsr #16
  407854:	fb0e 3000 	mla	r0, lr, r0, r3
  407858:	ea4f 4315 	mov.w	r3, r5, lsr #16
  40785c:	4401      	add	r1, r0
  40785e:	fb0e 3302 	mla	r3, lr, r2, r3
  407862:	b28a      	uxth	r2, r1
  407864:	eb03 4111 	add.w	r1, r3, r1, lsr #16
  407868:	ea42 4301 	orr.w	r3, r2, r1, lsl #16
  40786c:	ea4f 4111 	mov.w	r1, r1, lsr #16
  407870:	f844 3b04 	str.w	r3, [r4], #4
  407874:	d8e4      	bhi.n	407840 <__multiply+0x7c>
  407876:	6071      	str	r1, [r6, #4]
  407878:	f859 6c04 	ldr.w	r6, [r9, #-4]
  40787c:	0c36      	lsrs	r6, r6, #16
  40787e:	d022      	beq.n	4078c6 <__multiply+0x102>
  407880:	f8da 3000 	ldr.w	r3, [sl]
  407884:	2700      	movs	r7, #0
  407886:	4655      	mov	r5, sl
  407888:	4640      	mov	r0, r8
  40788a:	461a      	mov	r2, r3
  40788c:	46be      	mov	lr, r7
  40788e:	e000      	b.n	407892 <__multiply+0xce>
  407890:	4625      	mov	r5, r4
  407892:	8807      	ldrh	r7, [r0, #0]
  407894:	0c12      	lsrs	r2, r2, #16
  407896:	b299      	uxth	r1, r3
  407898:	462c      	mov	r4, r5
  40789a:	fb06 2207 	mla	r2, r6, r7, r2
  40789e:	eb02 070e 	add.w	r7, r2, lr
  4078a2:	ea41 4307 	orr.w	r3, r1, r7, lsl #16
  4078a6:	f844 3b04 	str.w	r3, [r4], #4
  4078aa:	f850 1b04 	ldr.w	r1, [r0], #4
  4078ae:	686a      	ldr	r2, [r5, #4]
  4078b0:	0c09      	lsrs	r1, r1, #16
  4078b2:	4584      	cmp	ip, r0
  4078b4:	b293      	uxth	r3, r2
  4078b6:	fb06 3101 	mla	r1, r6, r1, r3
  4078ba:	eb01 4317 	add.w	r3, r1, r7, lsr #16
  4078be:	ea4f 4e13 	mov.w	lr, r3, lsr #16
  4078c2:	d8e5      	bhi.n	407890 <__multiply+0xcc>
  4078c4:	606b      	str	r3, [r5, #4]
  4078c6:	45cb      	cmp	fp, r9
  4078c8:	f10a 0a04 	add.w	sl, sl, #4
  4078cc:	d8ad      	bhi.n	40782a <__multiply+0x66>
  4078ce:	f8dd b008 	ldr.w	fp, [sp, #8]
  4078d2:	f8dd 800c 	ldr.w	r8, [sp, #12]
  4078d6:	f1b8 0f00 	cmp.w	r8, #0
  4078da:	dd0b      	ble.n	4078f4 <__multiply+0x130>
  4078dc:	f85b 3c04 	ldr.w	r3, [fp, #-4]
  4078e0:	f1ab 0b04 	sub.w	fp, fp, #4
  4078e4:	b11b      	cbz	r3, 4078ee <__multiply+0x12a>
  4078e6:	e005      	b.n	4078f4 <__multiply+0x130>
  4078e8:	f85b 3d04 	ldr.w	r3, [fp, #-4]!
  4078ec:	b913      	cbnz	r3, 4078f4 <__multiply+0x130>
  4078ee:	f1b8 0801 	subs.w	r8, r8, #1
  4078f2:	d1f9      	bne.n	4078e8 <__multiply+0x124>
  4078f4:	9801      	ldr	r0, [sp, #4]
  4078f6:	f8c0 8010 	str.w	r8, [r0, #16]
  4078fa:	b005      	add	sp, #20
  4078fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407900:	4614      	mov	r4, r2
  407902:	4689      	mov	r9, r1
  407904:	e76b      	b.n	4077de <__multiply+0x1a>
  407906:	bf00      	nop

00407908 <__pow5mult>:
  407908:	f012 0303 	ands.w	r3, r2, #3
  40790c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  407910:	4614      	mov	r4, r2
  407912:	4607      	mov	r7, r0
  407914:	460e      	mov	r6, r1
  407916:	d12d      	bne.n	407974 <__pow5mult+0x6c>
  407918:	10a4      	asrs	r4, r4, #2
  40791a:	d01c      	beq.n	407956 <__pow5mult+0x4e>
  40791c:	6cbd      	ldr	r5, [r7, #72]	; 0x48
  40791e:	b395      	cbz	r5, 407986 <__pow5mult+0x7e>
  407920:	07e3      	lsls	r3, r4, #31
  407922:	f04f 0800 	mov.w	r8, #0
  407926:	d406      	bmi.n	407936 <__pow5mult+0x2e>
  407928:	1064      	asrs	r4, r4, #1
  40792a:	d014      	beq.n	407956 <__pow5mult+0x4e>
  40792c:	6828      	ldr	r0, [r5, #0]
  40792e:	b1a8      	cbz	r0, 40795c <__pow5mult+0x54>
  407930:	4605      	mov	r5, r0
  407932:	07e3      	lsls	r3, r4, #31
  407934:	d5f8      	bpl.n	407928 <__pow5mult+0x20>
  407936:	4638      	mov	r0, r7
  407938:	4631      	mov	r1, r6
  40793a:	462a      	mov	r2, r5
  40793c:	f7ff ff42 	bl	4077c4 <__multiply>
  407940:	b1b6      	cbz	r6, 407970 <__pow5mult+0x68>
  407942:	6872      	ldr	r2, [r6, #4]
  407944:	1064      	asrs	r4, r4, #1
  407946:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  407948:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  40794c:	6031      	str	r1, [r6, #0]
  40794e:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
  407952:	4606      	mov	r6, r0
  407954:	d1ea      	bne.n	40792c <__pow5mult+0x24>
  407956:	4630      	mov	r0, r6
  407958:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40795c:	4629      	mov	r1, r5
  40795e:	462a      	mov	r2, r5
  407960:	4638      	mov	r0, r7
  407962:	f7ff ff2f 	bl	4077c4 <__multiply>
  407966:	6028      	str	r0, [r5, #0]
  407968:	f8c0 8000 	str.w	r8, [r0]
  40796c:	4605      	mov	r5, r0
  40796e:	e7e0      	b.n	407932 <__pow5mult+0x2a>
  407970:	4606      	mov	r6, r0
  407972:	e7d9      	b.n	407928 <__pow5mult+0x20>
  407974:	1e5a      	subs	r2, r3, #1
  407976:	4d0b      	ldr	r5, [pc, #44]	; (4079a4 <__pow5mult+0x9c>)
  407978:	2300      	movs	r3, #0
  40797a:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
  40797e:	f7ff fe81 	bl	407684 <__multadd>
  407982:	4606      	mov	r6, r0
  407984:	e7c8      	b.n	407918 <__pow5mult+0x10>
  407986:	2101      	movs	r1, #1
  407988:	4638      	mov	r0, r7
  40798a:	f7ff fe49 	bl	407620 <_Balloc>
  40798e:	f240 2171 	movw	r1, #625	; 0x271
  407992:	2201      	movs	r2, #1
  407994:	2300      	movs	r3, #0
  407996:	6141      	str	r1, [r0, #20]
  407998:	4605      	mov	r5, r0
  40799a:	6102      	str	r2, [r0, #16]
  40799c:	64b8      	str	r0, [r7, #72]	; 0x48
  40799e:	6003      	str	r3, [r0, #0]
  4079a0:	e7be      	b.n	407920 <__pow5mult+0x18>
  4079a2:	bf00      	nop
  4079a4:	004095b8 	.word	0x004095b8

004079a8 <__lshift>:
  4079a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4079ac:	690e      	ldr	r6, [r1, #16]
  4079ae:	ea4f 1962 	mov.w	r9, r2, asr #5
  4079b2:	688b      	ldr	r3, [r1, #8]
  4079b4:	460d      	mov	r5, r1
  4079b6:	444e      	add	r6, r9
  4079b8:	4690      	mov	r8, r2
  4079ba:	4607      	mov	r7, r0
  4079bc:	6849      	ldr	r1, [r1, #4]
  4079be:	1c74      	adds	r4, r6, #1
  4079c0:	429c      	cmp	r4, r3
  4079c2:	dd03      	ble.n	4079cc <__lshift+0x24>
  4079c4:	005b      	lsls	r3, r3, #1
  4079c6:	3101      	adds	r1, #1
  4079c8:	429c      	cmp	r4, r3
  4079ca:	dcfb      	bgt.n	4079c4 <__lshift+0x1c>
  4079cc:	4638      	mov	r0, r7
  4079ce:	f7ff fe27 	bl	407620 <_Balloc>
  4079d2:	f1b9 0f00 	cmp.w	r9, #0
  4079d6:	4684      	mov	ip, r0
  4079d8:	f100 0114 	add.w	r1, r0, #20
  4079dc:	dd09      	ble.n	4079f2 <__lshift+0x4a>
  4079de:	2300      	movs	r3, #0
  4079e0:	460a      	mov	r2, r1
  4079e2:	4618      	mov	r0, r3
  4079e4:	3301      	adds	r3, #1
  4079e6:	f842 0b04 	str.w	r0, [r2], #4
  4079ea:	454b      	cmp	r3, r9
  4079ec:	d1fa      	bne.n	4079e4 <__lshift+0x3c>
  4079ee:	eb01 0183 	add.w	r1, r1, r3, lsl #2
  4079f2:	692a      	ldr	r2, [r5, #16]
  4079f4:	f105 0314 	add.w	r3, r5, #20
  4079f8:	eb03 0e82 	add.w	lr, r3, r2, lsl #2
  4079fc:	f018 021f 	ands.w	r2, r8, #31
  407a00:	d023      	beq.n	407a4a <__lshift+0xa2>
  407a02:	f1c2 0920 	rsb	r9, r2, #32
  407a06:	f04f 0a00 	mov.w	sl, #0
  407a0a:	6818      	ldr	r0, [r3, #0]
  407a0c:	4688      	mov	r8, r1
  407a0e:	4090      	lsls	r0, r2
  407a10:	ea4a 0000 	orr.w	r0, sl, r0
  407a14:	f841 0b04 	str.w	r0, [r1], #4
  407a18:	f853 0b04 	ldr.w	r0, [r3], #4
  407a1c:	459e      	cmp	lr, r3
  407a1e:	fa20 fa09 	lsr.w	sl, r0, r9
  407a22:	d8f2      	bhi.n	407a0a <__lshift+0x62>
  407a24:	f8c8 a004 	str.w	sl, [r8, #4]
  407a28:	f1ba 0f00 	cmp.w	sl, #0
  407a2c:	d000      	beq.n	407a30 <__lshift+0x88>
  407a2e:	1cb4      	adds	r4, r6, #2
  407a30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  407a32:	3c01      	subs	r4, #1
  407a34:	686a      	ldr	r2, [r5, #4]
  407a36:	4660      	mov	r0, ip
  407a38:	f8cc 4010 	str.w	r4, [ip, #16]
  407a3c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  407a40:	6029      	str	r1, [r5, #0]
  407a42:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
  407a46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  407a4a:	3904      	subs	r1, #4
  407a4c:	f853 2b04 	ldr.w	r2, [r3], #4
  407a50:	459e      	cmp	lr, r3
  407a52:	f841 2f04 	str.w	r2, [r1, #4]!
  407a56:	d8f9      	bhi.n	407a4c <__lshift+0xa4>
  407a58:	e7ea      	b.n	407a30 <__lshift+0x88>
  407a5a:	bf00      	nop

00407a5c <__mcmp>:
  407a5c:	6902      	ldr	r2, [r0, #16]
  407a5e:	690b      	ldr	r3, [r1, #16]
  407a60:	1ad2      	subs	r2, r2, r3
  407a62:	d113      	bne.n	407a8c <__mcmp+0x30>
  407a64:	009a      	lsls	r2, r3, #2
  407a66:	3014      	adds	r0, #20
  407a68:	3114      	adds	r1, #20
  407a6a:	1883      	adds	r3, r0, r2
  407a6c:	4411      	add	r1, r2
  407a6e:	b410      	push	{r4}
  407a70:	e001      	b.n	407a76 <__mcmp+0x1a>
  407a72:	4298      	cmp	r0, r3
  407a74:	d20c      	bcs.n	407a90 <__mcmp+0x34>
  407a76:	f853 4d04 	ldr.w	r4, [r3, #-4]!
  407a7a:	f851 2d04 	ldr.w	r2, [r1, #-4]!
  407a7e:	4294      	cmp	r4, r2
  407a80:	d0f7      	beq.n	407a72 <__mcmp+0x16>
  407a82:	d309      	bcc.n	407a98 <__mcmp+0x3c>
  407a84:	2001      	movs	r0, #1
  407a86:	f85d 4b04 	ldr.w	r4, [sp], #4
  407a8a:	4770      	bx	lr
  407a8c:	4610      	mov	r0, r2
  407a8e:	4770      	bx	lr
  407a90:	2000      	movs	r0, #0
  407a92:	f85d 4b04 	ldr.w	r4, [sp], #4
  407a96:	4770      	bx	lr
  407a98:	f04f 30ff 	mov.w	r0, #4294967295
  407a9c:	f85d 4b04 	ldr.w	r4, [sp], #4
  407aa0:	4770      	bx	lr
  407aa2:	bf00      	nop

00407aa4 <__mdiff>:
  407aa4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  407aa8:	460c      	mov	r4, r1
  407aaa:	4605      	mov	r5, r0
  407aac:	4611      	mov	r1, r2
  407aae:	4617      	mov	r7, r2
  407ab0:	4620      	mov	r0, r4
  407ab2:	f7ff ffd3 	bl	407a5c <__mcmp>
  407ab6:	1e06      	subs	r6, r0, #0
  407ab8:	d05c      	beq.n	407b74 <__mdiff+0xd0>
  407aba:	db55      	blt.n	407b68 <__mdiff+0xc4>
  407abc:	f04f 0800 	mov.w	r8, #0
  407ac0:	6861      	ldr	r1, [r4, #4]
  407ac2:	4628      	mov	r0, r5
  407ac4:	f7ff fdac 	bl	407620 <_Balloc>
  407ac8:	f107 0514 	add.w	r5, r7, #20
  407acc:	693b      	ldr	r3, [r7, #16]
  407ace:	f104 0114 	add.w	r1, r4, #20
  407ad2:	6926      	ldr	r6, [r4, #16]
  407ad4:	4684      	mov	ip, r0
  407ad6:	eb05 0e83 	add.w	lr, r5, r3, lsl #2
  407ada:	f100 0414 	add.w	r4, r0, #20
  407ade:	eb01 0786 	add.w	r7, r1, r6, lsl #2
  407ae2:	2300      	movs	r3, #0
  407ae4:	f8c0 800c 	str.w	r8, [r0, #12]
  407ae8:	f851 9b04 	ldr.w	r9, [r1], #4
  407aec:	f855 2b04 	ldr.w	r2, [r5], #4
  407af0:	fa13 f889 	uxtah	r8, r3, r9
  407af4:	4608      	mov	r0, r1
  407af6:	b293      	uxth	r3, r2
  407af8:	45ae      	cmp	lr, r5
  407afa:	ea4f 4212 	mov.w	r2, r2, lsr #16
  407afe:	ebc3 0308 	rsb	r3, r3, r8
  407b02:	ebc2 4219 	rsb	r2, r2, r9, lsr #16
  407b06:	fa1f f883 	uxth.w	r8, r3
  407b0a:	eb02 4323 	add.w	r3, r2, r3, asr #16
  407b0e:	ea48 4203 	orr.w	r2, r8, r3, lsl #16
  407b12:	ea4f 4323 	mov.w	r3, r3, asr #16
  407b16:	f844 2b04 	str.w	r2, [r4], #4
  407b1a:	d8e5      	bhi.n	407ae8 <__mdiff+0x44>
  407b1c:	428f      	cmp	r7, r1
  407b1e:	4625      	mov	r5, r4
  407b20:	d916      	bls.n	407b50 <__mdiff+0xac>
  407b22:	f850 2b04 	ldr.w	r2, [r0], #4
  407b26:	fa13 f382 	uxtah	r3, r3, r2
  407b2a:	0c12      	lsrs	r2, r2, #16
  407b2c:	4287      	cmp	r7, r0
  407b2e:	fa1f fe83 	uxth.w	lr, r3
  407b32:	eb02 4323 	add.w	r3, r2, r3, asr #16
  407b36:	ea4e 4203 	orr.w	r2, lr, r3, lsl #16
  407b3a:	ea4f 4323 	mov.w	r3, r3, asr #16
  407b3e:	f844 2b04 	str.w	r2, [r4], #4
  407b42:	d8ee      	bhi.n	407b22 <__mdiff+0x7e>
  407b44:	43c9      	mvns	r1, r1
  407b46:	4439      	add	r1, r7
  407b48:	f021 0403 	bic.w	r4, r1, #3
  407b4c:	3404      	adds	r4, #4
  407b4e:	442c      	add	r4, r5
  407b50:	3c04      	subs	r4, #4
  407b52:	b922      	cbnz	r2, 407b5e <__mdiff+0xba>
  407b54:	f854 3d04 	ldr.w	r3, [r4, #-4]!
  407b58:	3e01      	subs	r6, #1
  407b5a:	2b00      	cmp	r3, #0
  407b5c:	d0fa      	beq.n	407b54 <__mdiff+0xb0>
  407b5e:	4660      	mov	r0, ip
  407b60:	f8cc 6010 	str.w	r6, [ip, #16]
  407b64:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  407b68:	4623      	mov	r3, r4
  407b6a:	f04f 0801 	mov.w	r8, #1
  407b6e:	463c      	mov	r4, r7
  407b70:	461f      	mov	r7, r3
  407b72:	e7a5      	b.n	407ac0 <__mdiff+0x1c>
  407b74:	4628      	mov	r0, r5
  407b76:	4631      	mov	r1, r6
  407b78:	f7ff fd52 	bl	407620 <_Balloc>
  407b7c:	2201      	movs	r2, #1
  407b7e:	4603      	mov	r3, r0
  407b80:	6146      	str	r6, [r0, #20]
  407b82:	611a      	str	r2, [r3, #16]
  407b84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00407b88 <__d2b>:
  407b88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  407b8c:	461c      	mov	r4, r3
  407b8e:	b082      	sub	sp, #8
  407b90:	2101      	movs	r1, #1
  407b92:	4616      	mov	r6, r2
  407b94:	f3c4 550a 	ubfx	r5, r4, #20, #11
  407b98:	f7ff fd42 	bl	407620 <_Balloc>
  407b9c:	f3c4 0413 	ubfx	r4, r4, #0, #20
  407ba0:	4607      	mov	r7, r0
  407ba2:	b10d      	cbz	r5, 407ba8 <__d2b+0x20>
  407ba4:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
  407ba8:	9401      	str	r4, [sp, #4]
  407baa:	b30e      	cbz	r6, 407bf0 <__d2b+0x68>
  407bac:	a802      	add	r0, sp, #8
  407bae:	f840 6d08 	str.w	r6, [r0, #-8]!
  407bb2:	f7ff fdcb 	bl	40774c <__lo0bits>
  407bb6:	2800      	cmp	r0, #0
  407bb8:	d132      	bne.n	407c20 <__d2b+0x98>
  407bba:	e89d 000c 	ldmia.w	sp, {r2, r3}
  407bbe:	617a      	str	r2, [r7, #20]
  407bc0:	2b00      	cmp	r3, #0
  407bc2:	61bb      	str	r3, [r7, #24]
  407bc4:	bf14      	ite	ne
  407bc6:	2402      	movne	r4, #2
  407bc8:	2401      	moveq	r4, #1
  407bca:	613c      	str	r4, [r7, #16]
  407bcc:	b9dd      	cbnz	r5, 407c06 <__d2b+0x7e>
  407bce:	eb07 0384 	add.w	r3, r7, r4, lsl #2
  407bd2:	9a08      	ldr	r2, [sp, #32]
  407bd4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
  407bd8:	6010      	str	r0, [r2, #0]
  407bda:	6918      	ldr	r0, [r3, #16]
  407bdc:	f7ff fd94 	bl	407708 <__hi0bits>
  407be0:	9b09      	ldr	r3, [sp, #36]	; 0x24
  407be2:	ebc0 1044 	rsb	r0, r0, r4, lsl #5
  407be6:	6018      	str	r0, [r3, #0]
  407be8:	4638      	mov	r0, r7
  407bea:	b002      	add	sp, #8
  407bec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  407bf0:	a801      	add	r0, sp, #4
  407bf2:	f7ff fdab 	bl	40774c <__lo0bits>
  407bf6:	2301      	movs	r3, #1
  407bf8:	9a01      	ldr	r2, [sp, #4]
  407bfa:	3020      	adds	r0, #32
  407bfc:	461c      	mov	r4, r3
  407bfe:	613b      	str	r3, [r7, #16]
  407c00:	617a      	str	r2, [r7, #20]
  407c02:	2d00      	cmp	r5, #0
  407c04:	d0e3      	beq.n	407bce <__d2b+0x46>
  407c06:	f2a5 4833 	subw	r8, r5, #1075	; 0x433
  407c0a:	f1c0 0335 	rsb	r3, r0, #53	; 0x35
  407c0e:	9a08      	ldr	r2, [sp, #32]
  407c10:	4440      	add	r0, r8
  407c12:	6010      	str	r0, [r2, #0]
  407c14:	4638      	mov	r0, r7
  407c16:	9a09      	ldr	r2, [sp, #36]	; 0x24
  407c18:	6013      	str	r3, [r2, #0]
  407c1a:	b002      	add	sp, #8
  407c1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  407c20:	9b01      	ldr	r3, [sp, #4]
  407c22:	f1c0 0120 	rsb	r1, r0, #32
  407c26:	9a00      	ldr	r2, [sp, #0]
  407c28:	fa03 f101 	lsl.w	r1, r3, r1
  407c2c:	40c3      	lsrs	r3, r0
  407c2e:	430a      	orrs	r2, r1
  407c30:	9301      	str	r3, [sp, #4]
  407c32:	617a      	str	r2, [r7, #20]
  407c34:	e7c4      	b.n	407bc0 <__d2b+0x38>
  407c36:	bf00      	nop

00407c38 <_realloc_r>:
  407c38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  407c3c:	4617      	mov	r7, r2
  407c3e:	b083      	sub	sp, #12
  407c40:	460e      	mov	r6, r1
  407c42:	2900      	cmp	r1, #0
  407c44:	f000 80e2 	beq.w	407e0c <_realloc_r+0x1d4>
  407c48:	f107 040b 	add.w	r4, r7, #11
  407c4c:	4681      	mov	r9, r0
  407c4e:	f7ff fce3 	bl	407618 <__malloc_lock>
  407c52:	f856 3c04 	ldr.w	r3, [r6, #-4]
  407c56:	2c16      	cmp	r4, #22
  407c58:	f1a6 0808 	sub.w	r8, r6, #8
  407c5c:	f023 0503 	bic.w	r5, r3, #3
  407c60:	d850      	bhi.n	407d04 <_realloc_r+0xcc>
  407c62:	2210      	movs	r2, #16
  407c64:	2100      	movs	r1, #0
  407c66:	4614      	mov	r4, r2
  407c68:	42bc      	cmp	r4, r7
  407c6a:	f0c0 80dc 	bcc.w	407e26 <_realloc_r+0x1ee>
  407c6e:	2900      	cmp	r1, #0
  407c70:	f040 80d9 	bne.w	407e26 <_realloc_r+0x1ee>
  407c74:	4295      	cmp	r5, r2
  407c76:	da4a      	bge.n	407d0e <_realloc_r+0xd6>
  407c78:	f8df b3a8 	ldr.w	fp, [pc, #936]	; 408024 <_realloc_r+0x3ec>
  407c7c:	eb08 0105 	add.w	r1, r8, r5
  407c80:	f8db 0008 	ldr.w	r0, [fp, #8]
  407c84:	4288      	cmp	r0, r1
  407c86:	f000 80d3 	beq.w	407e30 <_realloc_r+0x1f8>
  407c8a:	6848      	ldr	r0, [r1, #4]
  407c8c:	f020 0e01 	bic.w	lr, r0, #1
  407c90:	448e      	add	lr, r1
  407c92:	f8de e004 	ldr.w	lr, [lr, #4]
  407c96:	f01e 0f01 	tst.w	lr, #1
  407c9a:	d14e      	bne.n	407d3a <_realloc_r+0x102>
  407c9c:	f020 0003 	bic.w	r0, r0, #3
  407ca0:	4428      	add	r0, r5
  407ca2:	4290      	cmp	r0, r2
  407ca4:	f280 80b8 	bge.w	407e18 <_realloc_r+0x1e0>
  407ca8:	07db      	lsls	r3, r3, #31
  407caa:	f100 808b 	bmi.w	407dc4 <_realloc_r+0x18c>
  407cae:	f856 3c08 	ldr.w	r3, [r6, #-8]
  407cb2:	ebc3 0a08 	rsb	sl, r3, r8
  407cb6:	f8da 3004 	ldr.w	r3, [sl, #4]
  407cba:	f023 0303 	bic.w	r3, r3, #3
  407cbe:	eb00 0e03 	add.w	lr, r0, r3
  407cc2:	4596      	cmp	lr, r2
  407cc4:	db43      	blt.n	407d4e <_realloc_r+0x116>
  407cc6:	68cb      	ldr	r3, [r1, #12]
  407cc8:	4657      	mov	r7, sl
  407cca:	6889      	ldr	r1, [r1, #8]
  407ccc:	1f2a      	subs	r2, r5, #4
  407cce:	60cb      	str	r3, [r1, #12]
  407cd0:	2a24      	cmp	r2, #36	; 0x24
  407cd2:	6099      	str	r1, [r3, #8]
  407cd4:	f857 1f08 	ldr.w	r1, [r7, #8]!
  407cd8:	f8da 300c 	ldr.w	r3, [sl, #12]
  407cdc:	60cb      	str	r3, [r1, #12]
  407cde:	6099      	str	r1, [r3, #8]
  407ce0:	f200 813c 	bhi.w	407f5c <_realloc_r+0x324>
  407ce4:	2a13      	cmp	r2, #19
  407ce6:	f240 80fa 	bls.w	407ede <_realloc_r+0x2a6>
  407cea:	6833      	ldr	r3, [r6, #0]
  407cec:	2a1b      	cmp	r2, #27
  407cee:	f8ca 3008 	str.w	r3, [sl, #8]
  407cf2:	6873      	ldr	r3, [r6, #4]
  407cf4:	f8ca 300c 	str.w	r3, [sl, #12]
  407cf8:	f200 813b 	bhi.w	407f72 <_realloc_r+0x33a>
  407cfc:	3608      	adds	r6, #8
  407cfe:	f10a 0310 	add.w	r3, sl, #16
  407d02:	e0ed      	b.n	407ee0 <_realloc_r+0x2a8>
  407d04:	f024 0407 	bic.w	r4, r4, #7
  407d08:	4622      	mov	r2, r4
  407d0a:	0fe1      	lsrs	r1, r4, #31
  407d0c:	e7ac      	b.n	407c68 <_realloc_r+0x30>
  407d0e:	4637      	mov	r7, r6
  407d10:	1b2a      	subs	r2, r5, r4
  407d12:	f003 0301 	and.w	r3, r3, #1
  407d16:	2a0f      	cmp	r2, #15
  407d18:	d841      	bhi.n	407d9e <_realloc_r+0x166>
  407d1a:	eb08 0205 	add.w	r2, r8, r5
  407d1e:	431d      	orrs	r5, r3
  407d20:	f8c8 5004 	str.w	r5, [r8, #4]
  407d24:	6853      	ldr	r3, [r2, #4]
  407d26:	f043 0301 	orr.w	r3, r3, #1
  407d2a:	6053      	str	r3, [r2, #4]
  407d2c:	4648      	mov	r0, r9
  407d2e:	f7ff fc75 	bl	40761c <__malloc_unlock>
  407d32:	4638      	mov	r0, r7
  407d34:	b003      	add	sp, #12
  407d36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407d3a:	07d9      	lsls	r1, r3, #31
  407d3c:	d442      	bmi.n	407dc4 <_realloc_r+0x18c>
  407d3e:	f856 3c08 	ldr.w	r3, [r6, #-8]
  407d42:	ebc3 0a08 	rsb	sl, r3, r8
  407d46:	f8da 3004 	ldr.w	r3, [sl, #4]
  407d4a:	f023 0303 	bic.w	r3, r3, #3
  407d4e:	442b      	add	r3, r5
  407d50:	4293      	cmp	r3, r2
  407d52:	db37      	blt.n	407dc4 <_realloc_r+0x18c>
  407d54:	4657      	mov	r7, sl
  407d56:	1f2a      	subs	r2, r5, #4
  407d58:	f8da 100c 	ldr.w	r1, [sl, #12]
  407d5c:	f857 0f08 	ldr.w	r0, [r7, #8]!
  407d60:	2a24      	cmp	r2, #36	; 0x24
  407d62:	60c1      	str	r1, [r0, #12]
  407d64:	6088      	str	r0, [r1, #8]
  407d66:	f200 80c6 	bhi.w	407ef6 <_realloc_r+0x2be>
  407d6a:	2a13      	cmp	r2, #19
  407d6c:	f240 80ff 	bls.w	407f6e <_realloc_r+0x336>
  407d70:	6831      	ldr	r1, [r6, #0]
  407d72:	2a1b      	cmp	r2, #27
  407d74:	f8ca 1008 	str.w	r1, [sl, #8]
  407d78:	6871      	ldr	r1, [r6, #4]
  407d7a:	f8ca 100c 	str.w	r1, [sl, #12]
  407d7e:	f200 810d 	bhi.w	407f9c <_realloc_r+0x364>
  407d82:	3608      	adds	r6, #8
  407d84:	f10a 0210 	add.w	r2, sl, #16
  407d88:	6831      	ldr	r1, [r6, #0]
  407d8a:	461d      	mov	r5, r3
  407d8c:	46d0      	mov	r8, sl
  407d8e:	6011      	str	r1, [r2, #0]
  407d90:	6873      	ldr	r3, [r6, #4]
  407d92:	6053      	str	r3, [r2, #4]
  407d94:	68b3      	ldr	r3, [r6, #8]
  407d96:	6093      	str	r3, [r2, #8]
  407d98:	f8da 3004 	ldr.w	r3, [sl, #4]
  407d9c:	e7b8      	b.n	407d10 <_realloc_r+0xd8>
  407d9e:	eb08 0504 	add.w	r5, r8, r4
  407da2:	f042 0601 	orr.w	r6, r2, #1
  407da6:	431c      	orrs	r4, r3
  407da8:	4648      	mov	r0, r9
  407daa:	442a      	add	r2, r5
  407dac:	f105 0108 	add.w	r1, r5, #8
  407db0:	f8c8 4004 	str.w	r4, [r8, #4]
  407db4:	606e      	str	r6, [r5, #4]
  407db6:	6853      	ldr	r3, [r2, #4]
  407db8:	f043 0301 	orr.w	r3, r3, #1
  407dbc:	6053      	str	r3, [r2, #4]
  407dbe:	f7fe fd2b 	bl	406818 <_free_r>
  407dc2:	e7b3      	b.n	407d2c <_realloc_r+0xf4>
  407dc4:	4639      	mov	r1, r7
  407dc6:	4648      	mov	r0, r9
  407dc8:	f7ff f836 	bl	406e38 <_malloc_r>
  407dcc:	4607      	mov	r7, r0
  407dce:	2800      	cmp	r0, #0
  407dd0:	d0ac      	beq.n	407d2c <_realloc_r+0xf4>
  407dd2:	f856 3c04 	ldr.w	r3, [r6, #-4]
  407dd6:	f1a0 0108 	sub.w	r1, r0, #8
  407dda:	f023 0201 	bic.w	r2, r3, #1
  407dde:	4442      	add	r2, r8
  407de0:	4291      	cmp	r1, r2
  407de2:	f000 80b4 	beq.w	407f4e <_realloc_r+0x316>
  407de6:	1f2a      	subs	r2, r5, #4
  407de8:	2a24      	cmp	r2, #36	; 0x24
  407dea:	f200 80a1 	bhi.w	407f30 <_realloc_r+0x2f8>
  407dee:	2a13      	cmp	r2, #19
  407df0:	d86a      	bhi.n	407ec8 <_realloc_r+0x290>
  407df2:	4603      	mov	r3, r0
  407df4:	4632      	mov	r2, r6
  407df6:	6811      	ldr	r1, [r2, #0]
  407df8:	6019      	str	r1, [r3, #0]
  407dfa:	6851      	ldr	r1, [r2, #4]
  407dfc:	6059      	str	r1, [r3, #4]
  407dfe:	6892      	ldr	r2, [r2, #8]
  407e00:	609a      	str	r2, [r3, #8]
  407e02:	4631      	mov	r1, r6
  407e04:	4648      	mov	r0, r9
  407e06:	f7fe fd07 	bl	406818 <_free_r>
  407e0a:	e78f      	b.n	407d2c <_realloc_r+0xf4>
  407e0c:	4611      	mov	r1, r2
  407e0e:	b003      	add	sp, #12
  407e10:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  407e14:	f7ff b810 	b.w	406e38 <_malloc_r>
  407e18:	68ca      	ldr	r2, [r1, #12]
  407e1a:	4637      	mov	r7, r6
  407e1c:	6889      	ldr	r1, [r1, #8]
  407e1e:	4605      	mov	r5, r0
  407e20:	60ca      	str	r2, [r1, #12]
  407e22:	6091      	str	r1, [r2, #8]
  407e24:	e774      	b.n	407d10 <_realloc_r+0xd8>
  407e26:	230c      	movs	r3, #12
  407e28:	2000      	movs	r0, #0
  407e2a:	f8c9 3000 	str.w	r3, [r9]
  407e2e:	e781      	b.n	407d34 <_realloc_r+0xfc>
  407e30:	6841      	ldr	r1, [r0, #4]
  407e32:	f104 0010 	add.w	r0, r4, #16
  407e36:	f021 0103 	bic.w	r1, r1, #3
  407e3a:	4429      	add	r1, r5
  407e3c:	4281      	cmp	r1, r0
  407e3e:	da63      	bge.n	407f08 <_realloc_r+0x2d0>
  407e40:	07db      	lsls	r3, r3, #31
  407e42:	d4bf      	bmi.n	407dc4 <_realloc_r+0x18c>
  407e44:	f856 3c08 	ldr.w	r3, [r6, #-8]
  407e48:	ebc3 0a08 	rsb	sl, r3, r8
  407e4c:	f8da 3004 	ldr.w	r3, [sl, #4]
  407e50:	f023 0303 	bic.w	r3, r3, #3
  407e54:	eb01 0c03 	add.w	ip, r1, r3
  407e58:	4560      	cmp	r0, ip
  407e5a:	f73f af78 	bgt.w	407d4e <_realloc_r+0x116>
  407e5e:	4657      	mov	r7, sl
  407e60:	1f2a      	subs	r2, r5, #4
  407e62:	f8da 300c 	ldr.w	r3, [sl, #12]
  407e66:	f857 1f08 	ldr.w	r1, [r7, #8]!
  407e6a:	2a24      	cmp	r2, #36	; 0x24
  407e6c:	60cb      	str	r3, [r1, #12]
  407e6e:	6099      	str	r1, [r3, #8]
  407e70:	f200 80b8 	bhi.w	407fe4 <_realloc_r+0x3ac>
  407e74:	2a13      	cmp	r2, #19
  407e76:	f240 80a8 	bls.w	407fca <_realloc_r+0x392>
  407e7a:	6833      	ldr	r3, [r6, #0]
  407e7c:	2a1b      	cmp	r2, #27
  407e7e:	f8ca 3008 	str.w	r3, [sl, #8]
  407e82:	6873      	ldr	r3, [r6, #4]
  407e84:	f8ca 300c 	str.w	r3, [sl, #12]
  407e88:	f200 80b5 	bhi.w	407ff6 <_realloc_r+0x3be>
  407e8c:	3608      	adds	r6, #8
  407e8e:	f10a 0310 	add.w	r3, sl, #16
  407e92:	6832      	ldr	r2, [r6, #0]
  407e94:	601a      	str	r2, [r3, #0]
  407e96:	6872      	ldr	r2, [r6, #4]
  407e98:	605a      	str	r2, [r3, #4]
  407e9a:	68b2      	ldr	r2, [r6, #8]
  407e9c:	609a      	str	r2, [r3, #8]
  407e9e:	ebc4 030c 	rsb	r3, r4, ip
  407ea2:	eb0a 0204 	add.w	r2, sl, r4
  407ea6:	4648      	mov	r0, r9
  407ea8:	f043 0301 	orr.w	r3, r3, #1
  407eac:	f8cb 2008 	str.w	r2, [fp, #8]
  407eb0:	6053      	str	r3, [r2, #4]
  407eb2:	f8da 3004 	ldr.w	r3, [sl, #4]
  407eb6:	f003 0301 	and.w	r3, r3, #1
  407eba:	431c      	orrs	r4, r3
  407ebc:	f8ca 4004 	str.w	r4, [sl, #4]
  407ec0:	f7ff fbac 	bl	40761c <__malloc_unlock>
  407ec4:	4638      	mov	r0, r7
  407ec6:	e735      	b.n	407d34 <_realloc_r+0xfc>
  407ec8:	6833      	ldr	r3, [r6, #0]
  407eca:	2a1b      	cmp	r2, #27
  407ecc:	6003      	str	r3, [r0, #0]
  407ece:	6873      	ldr	r3, [r6, #4]
  407ed0:	6043      	str	r3, [r0, #4]
  407ed2:	d831      	bhi.n	407f38 <_realloc_r+0x300>
  407ed4:	f100 0308 	add.w	r3, r0, #8
  407ed8:	f106 0208 	add.w	r2, r6, #8
  407edc:	e78b      	b.n	407df6 <_realloc_r+0x1be>
  407ede:	463b      	mov	r3, r7
  407ee0:	6832      	ldr	r2, [r6, #0]
  407ee2:	4675      	mov	r5, lr
  407ee4:	46d0      	mov	r8, sl
  407ee6:	601a      	str	r2, [r3, #0]
  407ee8:	6872      	ldr	r2, [r6, #4]
  407eea:	605a      	str	r2, [r3, #4]
  407eec:	68b2      	ldr	r2, [r6, #8]
  407eee:	609a      	str	r2, [r3, #8]
  407ef0:	f8da 3004 	ldr.w	r3, [sl, #4]
  407ef4:	e70c      	b.n	407d10 <_realloc_r+0xd8>
  407ef6:	4631      	mov	r1, r6
  407ef8:	4638      	mov	r0, r7
  407efa:	461d      	mov	r5, r3
  407efc:	46d0      	mov	r8, sl
  407efe:	f7ff fb29 	bl	407554 <memmove>
  407f02:	f8da 3004 	ldr.w	r3, [sl, #4]
  407f06:	e703      	b.n	407d10 <_realloc_r+0xd8>
  407f08:	1b0b      	subs	r3, r1, r4
  407f0a:	eb08 0204 	add.w	r2, r8, r4
  407f0e:	4648      	mov	r0, r9
  407f10:	f043 0301 	orr.w	r3, r3, #1
  407f14:	f8cb 2008 	str.w	r2, [fp, #8]
  407f18:	6053      	str	r3, [r2, #4]
  407f1a:	f856 3c04 	ldr.w	r3, [r6, #-4]
  407f1e:	f003 0301 	and.w	r3, r3, #1
  407f22:	431c      	orrs	r4, r3
  407f24:	f846 4c04 	str.w	r4, [r6, #-4]
  407f28:	f7ff fb78 	bl	40761c <__malloc_unlock>
  407f2c:	4630      	mov	r0, r6
  407f2e:	e701      	b.n	407d34 <_realloc_r+0xfc>
  407f30:	4631      	mov	r1, r6
  407f32:	f7ff fb0f 	bl	407554 <memmove>
  407f36:	e764      	b.n	407e02 <_realloc_r+0x1ca>
  407f38:	68b3      	ldr	r3, [r6, #8]
  407f3a:	2a24      	cmp	r2, #36	; 0x24
  407f3c:	6083      	str	r3, [r0, #8]
  407f3e:	68f3      	ldr	r3, [r6, #12]
  407f40:	60c3      	str	r3, [r0, #12]
  407f42:	d022      	beq.n	407f8a <_realloc_r+0x352>
  407f44:	f100 0310 	add.w	r3, r0, #16
  407f48:	f106 0210 	add.w	r2, r6, #16
  407f4c:	e753      	b.n	407df6 <_realloc_r+0x1be>
  407f4e:	f850 2c04 	ldr.w	r2, [r0, #-4]
  407f52:	4637      	mov	r7, r6
  407f54:	f022 0203 	bic.w	r2, r2, #3
  407f58:	4415      	add	r5, r2
  407f5a:	e6d9      	b.n	407d10 <_realloc_r+0xd8>
  407f5c:	4631      	mov	r1, r6
  407f5e:	4638      	mov	r0, r7
  407f60:	4675      	mov	r5, lr
  407f62:	46d0      	mov	r8, sl
  407f64:	f7ff faf6 	bl	407554 <memmove>
  407f68:	f8da 3004 	ldr.w	r3, [sl, #4]
  407f6c:	e6d0      	b.n	407d10 <_realloc_r+0xd8>
  407f6e:	463a      	mov	r2, r7
  407f70:	e70a      	b.n	407d88 <_realloc_r+0x150>
  407f72:	68b3      	ldr	r3, [r6, #8]
  407f74:	2a24      	cmp	r2, #36	; 0x24
  407f76:	f8ca 3010 	str.w	r3, [sl, #16]
  407f7a:	68f3      	ldr	r3, [r6, #12]
  407f7c:	f8ca 3014 	str.w	r3, [sl, #20]
  407f80:	d018      	beq.n	407fb4 <_realloc_r+0x37c>
  407f82:	3610      	adds	r6, #16
  407f84:	f10a 0318 	add.w	r3, sl, #24
  407f88:	e7aa      	b.n	407ee0 <_realloc_r+0x2a8>
  407f8a:	6931      	ldr	r1, [r6, #16]
  407f8c:	f100 0318 	add.w	r3, r0, #24
  407f90:	f106 0218 	add.w	r2, r6, #24
  407f94:	6101      	str	r1, [r0, #16]
  407f96:	6971      	ldr	r1, [r6, #20]
  407f98:	6141      	str	r1, [r0, #20]
  407f9a:	e72c      	b.n	407df6 <_realloc_r+0x1be>
  407f9c:	68b1      	ldr	r1, [r6, #8]
  407f9e:	2a24      	cmp	r2, #36	; 0x24
  407fa0:	f8ca 1010 	str.w	r1, [sl, #16]
  407fa4:	68f1      	ldr	r1, [r6, #12]
  407fa6:	f8ca 1014 	str.w	r1, [sl, #20]
  407faa:	d010      	beq.n	407fce <_realloc_r+0x396>
  407fac:	3610      	adds	r6, #16
  407fae:	f10a 0218 	add.w	r2, sl, #24
  407fb2:	e6e9      	b.n	407d88 <_realloc_r+0x150>
  407fb4:	6932      	ldr	r2, [r6, #16]
  407fb6:	f10a 0320 	add.w	r3, sl, #32
  407fba:	3618      	adds	r6, #24
  407fbc:	f8ca 2018 	str.w	r2, [sl, #24]
  407fc0:	f856 2c04 	ldr.w	r2, [r6, #-4]
  407fc4:	f8ca 201c 	str.w	r2, [sl, #28]
  407fc8:	e78a      	b.n	407ee0 <_realloc_r+0x2a8>
  407fca:	463b      	mov	r3, r7
  407fcc:	e761      	b.n	407e92 <_realloc_r+0x25a>
  407fce:	6931      	ldr	r1, [r6, #16]
  407fd0:	f10a 0220 	add.w	r2, sl, #32
  407fd4:	3618      	adds	r6, #24
  407fd6:	f8ca 1018 	str.w	r1, [sl, #24]
  407fda:	f856 1c04 	ldr.w	r1, [r6, #-4]
  407fde:	f8ca 101c 	str.w	r1, [sl, #28]
  407fe2:	e6d1      	b.n	407d88 <_realloc_r+0x150>
  407fe4:	4631      	mov	r1, r6
  407fe6:	4638      	mov	r0, r7
  407fe8:	f8cd c004 	str.w	ip, [sp, #4]
  407fec:	f7ff fab2 	bl	407554 <memmove>
  407ff0:	f8dd c004 	ldr.w	ip, [sp, #4]
  407ff4:	e753      	b.n	407e9e <_realloc_r+0x266>
  407ff6:	68b3      	ldr	r3, [r6, #8]
  407ff8:	2a24      	cmp	r2, #36	; 0x24
  407ffa:	f8ca 3010 	str.w	r3, [sl, #16]
  407ffe:	68f3      	ldr	r3, [r6, #12]
  408000:	f8ca 3014 	str.w	r3, [sl, #20]
  408004:	d003      	beq.n	40800e <_realloc_r+0x3d6>
  408006:	3610      	adds	r6, #16
  408008:	f10a 0318 	add.w	r3, sl, #24
  40800c:	e741      	b.n	407e92 <_realloc_r+0x25a>
  40800e:	6932      	ldr	r2, [r6, #16]
  408010:	f10a 0320 	add.w	r3, sl, #32
  408014:	3618      	adds	r6, #24
  408016:	f8ca 2018 	str.w	r2, [sl, #24]
  40801a:	f856 2c04 	ldr.w	r2, [r6, #-4]
  40801e:	f8ca 201c 	str.w	r2, [sl, #28]
  408022:	e736      	b.n	407e92 <_realloc_r+0x25a>
  408024:	204004ec 	.word	0x204004ec

00408028 <__fpclassifyd>:
  408028:	fab0 f080 	clz	r0, r0
  40802c:	f031 4100 	bics.w	r1, r1, #2147483648	; 0x80000000
  408030:	ea4f 1050 	mov.w	r0, r0, lsr #5
  408034:	d102      	bne.n	40803c <__fpclassifyd+0x14>
  408036:	b108      	cbz	r0, 40803c <__fpclassifyd+0x14>
  408038:	2002      	movs	r0, #2
  40803a:	4770      	bx	lr
  40803c:	f5a1 1280 	sub.w	r2, r1, #1048576	; 0x100000
  408040:	4b08      	ldr	r3, [pc, #32]	; (408064 <__fpclassifyd+0x3c>)
  408042:	429a      	cmp	r2, r3
  408044:	d801      	bhi.n	40804a <__fpclassifyd+0x22>
  408046:	2004      	movs	r0, #4
  408048:	4770      	bx	lr
  40804a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  40804e:	d201      	bcs.n	408054 <__fpclassifyd+0x2c>
  408050:	2003      	movs	r0, #3
  408052:	4770      	bx	lr
  408054:	4b04      	ldr	r3, [pc, #16]	; (408068 <__fpclassifyd+0x40>)
  408056:	4299      	cmp	r1, r3
  408058:	bf14      	ite	ne
  40805a:	2000      	movne	r0, #0
  40805c:	f000 0001 	andeq.w	r0, r0, #1
  408060:	4770      	bx	lr
  408062:	bf00      	nop
  408064:	7fdfffff 	.word	0x7fdfffff
  408068:	7ff00000 	.word	0x7ff00000

0040806c <_sbrk_r>:
  40806c:	b538      	push	{r3, r4, r5, lr}
  40806e:	2300      	movs	r3, #0
  408070:	4c06      	ldr	r4, [pc, #24]	; (40808c <_sbrk_r+0x20>)
  408072:	4605      	mov	r5, r0
  408074:	4608      	mov	r0, r1
  408076:	6023      	str	r3, [r4, #0]
  408078:	f7f9 ff8e 	bl	401f98 <_sbrk>
  40807c:	1c43      	adds	r3, r0, #1
  40807e:	d000      	beq.n	408082 <_sbrk_r+0x16>
  408080:	bd38      	pop	{r3, r4, r5, pc}
  408082:	6823      	ldr	r3, [r4, #0]
  408084:	2b00      	cmp	r3, #0
  408086:	d0fb      	beq.n	408080 <_sbrk_r+0x14>
  408088:	602b      	str	r3, [r5, #0]
  40808a:	bd38      	pop	{r3, r4, r5, pc}
  40808c:	20401290 	.word	0x20401290

00408090 <__sread>:
  408090:	b510      	push	{r4, lr}
  408092:	460c      	mov	r4, r1
  408094:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  408098:	f000 f9ec 	bl	408474 <_read_r>
  40809c:	2800      	cmp	r0, #0
  40809e:	db03      	blt.n	4080a8 <__sread+0x18>
  4080a0:	6d23      	ldr	r3, [r4, #80]	; 0x50
  4080a2:	4403      	add	r3, r0
  4080a4:	6523      	str	r3, [r4, #80]	; 0x50
  4080a6:	bd10      	pop	{r4, pc}
  4080a8:	89a3      	ldrh	r3, [r4, #12]
  4080aa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  4080ae:	81a3      	strh	r3, [r4, #12]
  4080b0:	bd10      	pop	{r4, pc}
  4080b2:	bf00      	nop

004080b4 <__swrite>:
  4080b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4080b8:	461d      	mov	r5, r3
  4080ba:	898b      	ldrh	r3, [r1, #12]
  4080bc:	4616      	mov	r6, r2
  4080be:	460c      	mov	r4, r1
  4080c0:	05da      	lsls	r2, r3, #23
  4080c2:	4607      	mov	r7, r0
  4080c4:	d506      	bpl.n	4080d4 <__swrite+0x20>
  4080c6:	2302      	movs	r3, #2
  4080c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4080cc:	2200      	movs	r2, #0
  4080ce:	f000 f9bd 	bl	40844c <_lseek_r>
  4080d2:	89a3      	ldrh	r3, [r4, #12]
  4080d4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  4080d8:	4638      	mov	r0, r7
  4080da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  4080de:	4632      	mov	r2, r6
  4080e0:	81a3      	strh	r3, [r4, #12]
  4080e2:	462b      	mov	r3, r5
  4080e4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  4080e8:	f000 b89e 	b.w	408228 <_write_r>

004080ec <__sseek>:
  4080ec:	b510      	push	{r4, lr}
  4080ee:	460c      	mov	r4, r1
  4080f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4080f4:	f000 f9aa 	bl	40844c <_lseek_r>
  4080f8:	1c42      	adds	r2, r0, #1
  4080fa:	89a3      	ldrh	r3, [r4, #12]
  4080fc:	d004      	beq.n	408108 <__sseek+0x1c>
  4080fe:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
  408102:	6520      	str	r0, [r4, #80]	; 0x50
  408104:	81a3      	strh	r3, [r4, #12]
  408106:	bd10      	pop	{r4, pc}
  408108:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  40810c:	81a3      	strh	r3, [r4, #12]
  40810e:	bd10      	pop	{r4, pc}

00408110 <__sclose>:
  408110:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  408114:	f000 b920 	b.w	408358 <_close_r>

00408118 <__ssprint_r>:
  408118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40811c:	6893      	ldr	r3, [r2, #8]
  40811e:	b083      	sub	sp, #12
  408120:	4691      	mov	r9, r2
  408122:	f8d2 8000 	ldr.w	r8, [r2]
  408126:	9001      	str	r0, [sp, #4]
  408128:	2b00      	cmp	r3, #0
  40812a:	d073      	beq.n	408214 <__ssprint_r+0xfc>
  40812c:	f04f 0b00 	mov.w	fp, #0
  408130:	460d      	mov	r5, r1
  408132:	6808      	ldr	r0, [r1, #0]
  408134:	688b      	ldr	r3, [r1, #8]
  408136:	465c      	mov	r4, fp
  408138:	2c00      	cmp	r4, #0
  40813a:	d046      	beq.n	4081ca <__ssprint_r+0xb2>
  40813c:	429c      	cmp	r4, r3
  40813e:	461e      	mov	r6, r3
  408140:	469a      	mov	sl, r3
  408142:	d349      	bcc.n	4081d8 <__ssprint_r+0xc0>
  408144:	f8b5 e00c 	ldrh.w	lr, [r5, #12]
  408148:	f41e 6f90 	tst.w	lr, #1152	; 0x480
  40814c:	d02d      	beq.n	4081aa <__ssprint_r+0x92>
  40814e:	696b      	ldr	r3, [r5, #20]
  408150:	1c62      	adds	r2, r4, #1
  408152:	6929      	ldr	r1, [r5, #16]
  408154:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  408158:	1a46      	subs	r6, r0, r1
  40815a:	4610      	mov	r0, r2
  40815c:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
  408160:	4430      	add	r0, r6
  408162:	105f      	asrs	r7, r3, #1
  408164:	4287      	cmp	r7, r0
  408166:	463a      	mov	r2, r7
  408168:	d201      	bcs.n	40816e <__ssprint_r+0x56>
  40816a:	4607      	mov	r7, r0
  40816c:	4602      	mov	r2, r0
  40816e:	f41e 6f80 	tst.w	lr, #1024	; 0x400
  408172:	d034      	beq.n	4081de <__ssprint_r+0xc6>
  408174:	4611      	mov	r1, r2
  408176:	9801      	ldr	r0, [sp, #4]
  408178:	f7fe fe5e 	bl	406e38 <_malloc_r>
  40817c:	4682      	mov	sl, r0
  40817e:	2800      	cmp	r0, #0
  408180:	d04e      	beq.n	408220 <__ssprint_r+0x108>
  408182:	4632      	mov	r2, r6
  408184:	6929      	ldr	r1, [r5, #16]
  408186:	f7ff f94b 	bl	407420 <memcpy>
  40818a:	89aa      	ldrh	r2, [r5, #12]
  40818c:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
  408190:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  408194:	81aa      	strh	r2, [r5, #12]
  408196:	eb0a 0006 	add.w	r0, sl, r6
  40819a:	1bba      	subs	r2, r7, r6
  40819c:	f8c5 a010 	str.w	sl, [r5, #16]
  4081a0:	4626      	mov	r6, r4
  4081a2:	46a2      	mov	sl, r4
  4081a4:	6028      	str	r0, [r5, #0]
  4081a6:	60aa      	str	r2, [r5, #8]
  4081a8:	616f      	str	r7, [r5, #20]
  4081aa:	4652      	mov	r2, sl
  4081ac:	4659      	mov	r1, fp
  4081ae:	f7ff f9d1 	bl	407554 <memmove>
  4081b2:	f8d9 2008 	ldr.w	r2, [r9, #8]
  4081b6:	68ab      	ldr	r3, [r5, #8]
  4081b8:	6828      	ldr	r0, [r5, #0]
  4081ba:	1b14      	subs	r4, r2, r4
  4081bc:	1b9b      	subs	r3, r3, r6
  4081be:	4450      	add	r0, sl
  4081c0:	60ab      	str	r3, [r5, #8]
  4081c2:	6028      	str	r0, [r5, #0]
  4081c4:	f8c9 4008 	str.w	r4, [r9, #8]
  4081c8:	b324      	cbz	r4, 408214 <__ssprint_r+0xfc>
  4081ca:	f8d8 b000 	ldr.w	fp, [r8]
  4081ce:	f108 0808 	add.w	r8, r8, #8
  4081d2:	f858 4c04 	ldr.w	r4, [r8, #-4]
  4081d6:	e7af      	b.n	408138 <__ssprint_r+0x20>
  4081d8:	4626      	mov	r6, r4
  4081da:	46a2      	mov	sl, r4
  4081dc:	e7e5      	b.n	4081aa <__ssprint_r+0x92>
  4081de:	9801      	ldr	r0, [sp, #4]
  4081e0:	f7ff fd2a 	bl	407c38 <_realloc_r>
  4081e4:	4682      	mov	sl, r0
  4081e6:	2800      	cmp	r0, #0
  4081e8:	d1d5      	bne.n	408196 <__ssprint_r+0x7e>
  4081ea:	9c01      	ldr	r4, [sp, #4]
  4081ec:	6929      	ldr	r1, [r5, #16]
  4081ee:	4620      	mov	r0, r4
  4081f0:	f7fe fb12 	bl	406818 <_free_r>
  4081f4:	230c      	movs	r3, #12
  4081f6:	6023      	str	r3, [r4, #0]
  4081f8:	89ab      	ldrh	r3, [r5, #12]
  4081fa:	2200      	movs	r2, #0
  4081fc:	f04f 30ff 	mov.w	r0, #4294967295
  408200:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  408204:	81ab      	strh	r3, [r5, #12]
  408206:	f8c9 2008 	str.w	r2, [r9, #8]
  40820a:	f8c9 2004 	str.w	r2, [r9, #4]
  40820e:	b003      	add	sp, #12
  408210:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408214:	2000      	movs	r0, #0
  408216:	f8c9 0004 	str.w	r0, [r9, #4]
  40821a:	b003      	add	sp, #12
  40821c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408220:	230c      	movs	r3, #12
  408222:	9a01      	ldr	r2, [sp, #4]
  408224:	6013      	str	r3, [r2, #0]
  408226:	e7e7      	b.n	4081f8 <__ssprint_r+0xe0>

00408228 <_write_r>:
  408228:	b570      	push	{r4, r5, r6, lr}
  40822a:	4c08      	ldr	r4, [pc, #32]	; (40824c <_write_r+0x24>)
  40822c:	2500      	movs	r5, #0
  40822e:	4606      	mov	r6, r0
  408230:	4608      	mov	r0, r1
  408232:	4611      	mov	r1, r2
  408234:	461a      	mov	r2, r3
  408236:	6025      	str	r5, [r4, #0]
  408238:	f7f8 f994 	bl	400564 <_write>
  40823c:	1c43      	adds	r3, r0, #1
  40823e:	d000      	beq.n	408242 <_write_r+0x1a>
  408240:	bd70      	pop	{r4, r5, r6, pc}
  408242:	6823      	ldr	r3, [r4, #0]
  408244:	2b00      	cmp	r3, #0
  408246:	d0fb      	beq.n	408240 <_write_r+0x18>
  408248:	6033      	str	r3, [r6, #0]
  40824a:	bd70      	pop	{r4, r5, r6, pc}
  40824c:	20401290 	.word	0x20401290

00408250 <__register_exitproc>:
  408250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  408254:	4c26      	ldr	r4, [pc, #152]	; (4082f0 <__register_exitproc+0xa0>)
  408256:	4606      	mov	r6, r0
  408258:	4688      	mov	r8, r1
  40825a:	4691      	mov	r9, r2
  40825c:	6825      	ldr	r5, [r4, #0]
  40825e:	469a      	mov	sl, r3
  408260:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
  408264:	2c00      	cmp	r4, #0
  408266:	d03a      	beq.n	4082de <__register_exitproc+0x8e>
  408268:	6860      	ldr	r0, [r4, #4]
  40826a:	281f      	cmp	r0, #31
  40826c:	dc19      	bgt.n	4082a2 <__register_exitproc+0x52>
  40826e:	1c41      	adds	r1, r0, #1
  408270:	b186      	cbz	r6, 408294 <__register_exitproc+0x44>
  408272:	eb04 0580 	add.w	r5, r4, r0, lsl #2
  408276:	2201      	movs	r2, #1
  408278:	2e02      	cmp	r6, #2
  40827a:	f8c5 9088 	str.w	r9, [r5, #136]	; 0x88
  40827e:	fa02 f200 	lsl.w	r2, r2, r0
  408282:	f8d4 3188 	ldr.w	r3, [r4, #392]	; 0x188
  408286:	ea43 0302 	orr.w	r3, r3, r2
  40828a:	f8c4 3188 	str.w	r3, [r4, #392]	; 0x188
  40828e:	f8c5 a108 	str.w	sl, [r5, #264]	; 0x108
  408292:	d01e      	beq.n	4082d2 <__register_exitproc+0x82>
  408294:	1c83      	adds	r3, r0, #2
  408296:	6061      	str	r1, [r4, #4]
  408298:	2000      	movs	r0, #0
  40829a:	f844 8023 	str.w	r8, [r4, r3, lsl #2]
  40829e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4082a2:	4b14      	ldr	r3, [pc, #80]	; (4082f4 <__register_exitproc+0xa4>)
  4082a4:	b303      	cbz	r3, 4082e8 <__register_exitproc+0x98>
  4082a6:	f44f 70c8 	mov.w	r0, #400	; 0x190
  4082aa:	f7fe fdbd 	bl	406e28 <malloc>
  4082ae:	4604      	mov	r4, r0
  4082b0:	b1d0      	cbz	r0, 4082e8 <__register_exitproc+0x98>
  4082b2:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
  4082b6:	2700      	movs	r7, #0
  4082b8:	2101      	movs	r1, #1
  4082ba:	6003      	str	r3, [r0, #0]
  4082bc:	4638      	mov	r0, r7
  4082be:	6067      	str	r7, [r4, #4]
  4082c0:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  4082c4:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
  4082c8:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
  4082cc:	2e00      	cmp	r6, #0
  4082ce:	d0e1      	beq.n	408294 <__register_exitproc+0x44>
  4082d0:	e7cf      	b.n	408272 <__register_exitproc+0x22>
  4082d2:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
  4082d6:	431a      	orrs	r2, r3
  4082d8:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
  4082dc:	e7da      	b.n	408294 <__register_exitproc+0x44>
  4082de:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
  4082e2:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  4082e6:	e7bf      	b.n	408268 <__register_exitproc+0x18>
  4082e8:	f04f 30ff 	mov.w	r0, #4294967295
  4082ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4082f0:	00409468 	.word	0x00409468
  4082f4:	00406e29 	.word	0x00406e29

004082f8 <_calloc_r>:
  4082f8:	b510      	push	{r4, lr}
  4082fa:	fb02 f101 	mul.w	r1, r2, r1
  4082fe:	f7fe fd9b 	bl	406e38 <_malloc_r>
  408302:	4604      	mov	r4, r0
  408304:	b168      	cbz	r0, 408322 <_calloc_r+0x2a>
  408306:	f850 2c04 	ldr.w	r2, [r0, #-4]
  40830a:	f022 0203 	bic.w	r2, r2, #3
  40830e:	3a04      	subs	r2, #4
  408310:	2a24      	cmp	r2, #36	; 0x24
  408312:	d814      	bhi.n	40833e <_calloc_r+0x46>
  408314:	2a13      	cmp	r2, #19
  408316:	d806      	bhi.n	408326 <_calloc_r+0x2e>
  408318:	4603      	mov	r3, r0
  40831a:	2200      	movs	r2, #0
  40831c:	601a      	str	r2, [r3, #0]
  40831e:	605a      	str	r2, [r3, #4]
  408320:	609a      	str	r2, [r3, #8]
  408322:	4620      	mov	r0, r4
  408324:	bd10      	pop	{r4, pc}
  408326:	2100      	movs	r1, #0
  408328:	2a1b      	cmp	r2, #27
  40832a:	6001      	str	r1, [r0, #0]
  40832c:	6041      	str	r1, [r0, #4]
  40832e:	d90b      	bls.n	408348 <_calloc_r+0x50>
  408330:	2a24      	cmp	r2, #36	; 0x24
  408332:	6081      	str	r1, [r0, #8]
  408334:	60c1      	str	r1, [r0, #12]
  408336:	d00a      	beq.n	40834e <_calloc_r+0x56>
  408338:	f100 0310 	add.w	r3, r0, #16
  40833c:	e7ed      	b.n	40831a <_calloc_r+0x22>
  40833e:	2100      	movs	r1, #0
  408340:	f7fb fbfa 	bl	403b38 <memset>
  408344:	4620      	mov	r0, r4
  408346:	bd10      	pop	{r4, pc}
  408348:	f100 0308 	add.w	r3, r0, #8
  40834c:	e7e5      	b.n	40831a <_calloc_r+0x22>
  40834e:	6101      	str	r1, [r0, #16]
  408350:	f100 0318 	add.w	r3, r0, #24
  408354:	6141      	str	r1, [r0, #20]
  408356:	e7e0      	b.n	40831a <_calloc_r+0x22>

00408358 <_close_r>:
  408358:	b538      	push	{r3, r4, r5, lr}
  40835a:	2300      	movs	r3, #0
  40835c:	4c06      	ldr	r4, [pc, #24]	; (408378 <_close_r+0x20>)
  40835e:	4605      	mov	r5, r0
  408360:	4608      	mov	r0, r1
  408362:	6023      	str	r3, [r4, #0]
  408364:	f7f9 fe44 	bl	401ff0 <_close>
  408368:	1c43      	adds	r3, r0, #1
  40836a:	d000      	beq.n	40836e <_close_r+0x16>
  40836c:	bd38      	pop	{r3, r4, r5, pc}
  40836e:	6823      	ldr	r3, [r4, #0]
  408370:	2b00      	cmp	r3, #0
  408372:	d0fb      	beq.n	40836c <_close_r+0x14>
  408374:	602b      	str	r3, [r5, #0]
  408376:	bd38      	pop	{r3, r4, r5, pc}
  408378:	20401290 	.word	0x20401290

0040837c <_fclose_r>:
  40837c:	2900      	cmp	r1, #0
  40837e:	d03d      	beq.n	4083fc <_fclose_r+0x80>
  408380:	b570      	push	{r4, r5, r6, lr}
  408382:	4605      	mov	r5, r0
  408384:	460c      	mov	r4, r1
  408386:	b108      	cbz	r0, 40838c <_fclose_r+0x10>
  408388:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40838a:	b37b      	cbz	r3, 4083ec <_fclose_r+0x70>
  40838c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  408390:	b90b      	cbnz	r3, 408396 <_fclose_r+0x1a>
  408392:	2000      	movs	r0, #0
  408394:	bd70      	pop	{r4, r5, r6, pc}
  408396:	4628      	mov	r0, r5
  408398:	4621      	mov	r1, r4
  40839a:	f7fe f891 	bl	4064c0 <__sflush_r>
  40839e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  4083a0:	4606      	mov	r6, r0
  4083a2:	b133      	cbz	r3, 4083b2 <_fclose_r+0x36>
  4083a4:	4628      	mov	r0, r5
  4083a6:	69e1      	ldr	r1, [r4, #28]
  4083a8:	4798      	blx	r3
  4083aa:	2800      	cmp	r0, #0
  4083ac:	bfb8      	it	lt
  4083ae:	f04f 36ff 	movlt.w	r6, #4294967295
  4083b2:	89a3      	ldrh	r3, [r4, #12]
  4083b4:	061b      	lsls	r3, r3, #24
  4083b6:	d41c      	bmi.n	4083f2 <_fclose_r+0x76>
  4083b8:	6b21      	ldr	r1, [r4, #48]	; 0x30
  4083ba:	b141      	cbz	r1, 4083ce <_fclose_r+0x52>
  4083bc:	f104 0340 	add.w	r3, r4, #64	; 0x40
  4083c0:	4299      	cmp	r1, r3
  4083c2:	d002      	beq.n	4083ca <_fclose_r+0x4e>
  4083c4:	4628      	mov	r0, r5
  4083c6:	f7fe fa27 	bl	406818 <_free_r>
  4083ca:	2300      	movs	r3, #0
  4083cc:	6323      	str	r3, [r4, #48]	; 0x30
  4083ce:	6c61      	ldr	r1, [r4, #68]	; 0x44
  4083d0:	b121      	cbz	r1, 4083dc <_fclose_r+0x60>
  4083d2:	4628      	mov	r0, r5
  4083d4:	f7fe fa20 	bl	406818 <_free_r>
  4083d8:	2300      	movs	r3, #0
  4083da:	6463      	str	r3, [r4, #68]	; 0x44
  4083dc:	f7fe f9b4 	bl	406748 <__sfp_lock_acquire>
  4083e0:	2300      	movs	r3, #0
  4083e2:	81a3      	strh	r3, [r4, #12]
  4083e4:	f7fe f9b2 	bl	40674c <__sfp_lock_release>
  4083e8:	4630      	mov	r0, r6
  4083ea:	bd70      	pop	{r4, r5, r6, pc}
  4083ec:	f7fe f9a6 	bl	40673c <__sinit>
  4083f0:	e7cc      	b.n	40838c <_fclose_r+0x10>
  4083f2:	4628      	mov	r0, r5
  4083f4:	6921      	ldr	r1, [r4, #16]
  4083f6:	f7fe fa0f 	bl	406818 <_free_r>
  4083fa:	e7dd      	b.n	4083b8 <_fclose_r+0x3c>
  4083fc:	2000      	movs	r0, #0
  4083fe:	4770      	bx	lr

00408400 <_fstat_r>:
  408400:	b538      	push	{r3, r4, r5, lr}
  408402:	2300      	movs	r3, #0
  408404:	4c07      	ldr	r4, [pc, #28]	; (408424 <_fstat_r+0x24>)
  408406:	4605      	mov	r5, r0
  408408:	4608      	mov	r0, r1
  40840a:	4611      	mov	r1, r2
  40840c:	6023      	str	r3, [r4, #0]
  40840e:	f7f9 fdfb 	bl	402008 <_fstat>
  408412:	1c43      	adds	r3, r0, #1
  408414:	d000      	beq.n	408418 <_fstat_r+0x18>
  408416:	bd38      	pop	{r3, r4, r5, pc}
  408418:	6823      	ldr	r3, [r4, #0]
  40841a:	2b00      	cmp	r3, #0
  40841c:	d0fb      	beq.n	408416 <_fstat_r+0x16>
  40841e:	602b      	str	r3, [r5, #0]
  408420:	bd38      	pop	{r3, r4, r5, pc}
  408422:	bf00      	nop
  408424:	20401290 	.word	0x20401290

00408428 <_isatty_r>:
  408428:	b538      	push	{r3, r4, r5, lr}
  40842a:	2300      	movs	r3, #0
  40842c:	4c06      	ldr	r4, [pc, #24]	; (408448 <_isatty_r+0x20>)
  40842e:	4605      	mov	r5, r0
  408430:	4608      	mov	r0, r1
  408432:	6023      	str	r3, [r4, #0]
  408434:	f7f9 fdf8 	bl	402028 <_isatty>
  408438:	1c43      	adds	r3, r0, #1
  40843a:	d000      	beq.n	40843e <_isatty_r+0x16>
  40843c:	bd38      	pop	{r3, r4, r5, pc}
  40843e:	6823      	ldr	r3, [r4, #0]
  408440:	2b00      	cmp	r3, #0
  408442:	d0fb      	beq.n	40843c <_isatty_r+0x14>
  408444:	602b      	str	r3, [r5, #0]
  408446:	bd38      	pop	{r3, r4, r5, pc}
  408448:	20401290 	.word	0x20401290

0040844c <_lseek_r>:
  40844c:	b570      	push	{r4, r5, r6, lr}
  40844e:	4c08      	ldr	r4, [pc, #32]	; (408470 <_lseek_r+0x24>)
  408450:	2500      	movs	r5, #0
  408452:	4606      	mov	r6, r0
  408454:	4608      	mov	r0, r1
  408456:	4611      	mov	r1, r2
  408458:	461a      	mov	r2, r3
  40845a:	6025      	str	r5, [r4, #0]
  40845c:	f7f9 fdf0 	bl	402040 <_lseek>
  408460:	1c43      	adds	r3, r0, #1
  408462:	d000      	beq.n	408466 <_lseek_r+0x1a>
  408464:	bd70      	pop	{r4, r5, r6, pc}
  408466:	6823      	ldr	r3, [r4, #0]
  408468:	2b00      	cmp	r3, #0
  40846a:	d0fb      	beq.n	408464 <_lseek_r+0x18>
  40846c:	6033      	str	r3, [r6, #0]
  40846e:	bd70      	pop	{r4, r5, r6, pc}
  408470:	20401290 	.word	0x20401290

00408474 <_read_r>:
  408474:	b570      	push	{r4, r5, r6, lr}
  408476:	4c08      	ldr	r4, [pc, #32]	; (408498 <_read_r+0x24>)
  408478:	2500      	movs	r5, #0
  40847a:	4606      	mov	r6, r0
  40847c:	4608      	mov	r0, r1
  40847e:	4611      	mov	r1, r2
  408480:	461a      	mov	r2, r3
  408482:	6025      	str	r5, [r4, #0]
  408484:	f7f8 f842 	bl	40050c <_read>
  408488:	1c43      	adds	r3, r0, #1
  40848a:	d000      	beq.n	40848e <_read_r+0x1a>
  40848c:	bd70      	pop	{r4, r5, r6, pc}
  40848e:	6823      	ldr	r3, [r4, #0]
  408490:	2b00      	cmp	r3, #0
  408492:	d0fb      	beq.n	40848c <_read_r+0x18>
  408494:	6033      	str	r3, [r6, #0]
  408496:	bd70      	pop	{r4, r5, r6, pc}
  408498:	20401290 	.word	0x20401290

0040849c <__aeabi_drsub>:
  40849c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  4084a0:	e002      	b.n	4084a8 <__adddf3>
  4084a2:	bf00      	nop

004084a4 <__aeabi_dsub>:
  4084a4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

004084a8 <__adddf3>:
  4084a8:	b530      	push	{r4, r5, lr}
  4084aa:	ea4f 0441 	mov.w	r4, r1, lsl #1
  4084ae:	ea4f 0543 	mov.w	r5, r3, lsl #1
  4084b2:	ea94 0f05 	teq	r4, r5
  4084b6:	bf08      	it	eq
  4084b8:	ea90 0f02 	teqeq	r0, r2
  4084bc:	bf1f      	itttt	ne
  4084be:	ea54 0c00 	orrsne.w	ip, r4, r0
  4084c2:	ea55 0c02 	orrsne.w	ip, r5, r2
  4084c6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  4084ca:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  4084ce:	f000 80e2 	beq.w	408696 <__adddf3+0x1ee>
  4084d2:	ea4f 5454 	mov.w	r4, r4, lsr #21
  4084d6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  4084da:	bfb8      	it	lt
  4084dc:	426d      	neglt	r5, r5
  4084de:	dd0c      	ble.n	4084fa <__adddf3+0x52>
  4084e0:	442c      	add	r4, r5
  4084e2:	ea80 0202 	eor.w	r2, r0, r2
  4084e6:	ea81 0303 	eor.w	r3, r1, r3
  4084ea:	ea82 0000 	eor.w	r0, r2, r0
  4084ee:	ea83 0101 	eor.w	r1, r3, r1
  4084f2:	ea80 0202 	eor.w	r2, r0, r2
  4084f6:	ea81 0303 	eor.w	r3, r1, r3
  4084fa:	2d36      	cmp	r5, #54	; 0x36
  4084fc:	bf88      	it	hi
  4084fe:	bd30      	pophi	{r4, r5, pc}
  408500:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  408504:	ea4f 3101 	mov.w	r1, r1, lsl #12
  408508:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  40850c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  408510:	d002      	beq.n	408518 <__adddf3+0x70>
  408512:	4240      	negs	r0, r0
  408514:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  408518:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  40851c:	ea4f 3303 	mov.w	r3, r3, lsl #12
  408520:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  408524:	d002      	beq.n	40852c <__adddf3+0x84>
  408526:	4252      	negs	r2, r2
  408528:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  40852c:	ea94 0f05 	teq	r4, r5
  408530:	f000 80a7 	beq.w	408682 <__adddf3+0x1da>
  408534:	f1a4 0401 	sub.w	r4, r4, #1
  408538:	f1d5 0e20 	rsbs	lr, r5, #32
  40853c:	db0d      	blt.n	40855a <__adddf3+0xb2>
  40853e:	fa02 fc0e 	lsl.w	ip, r2, lr
  408542:	fa22 f205 	lsr.w	r2, r2, r5
  408546:	1880      	adds	r0, r0, r2
  408548:	f141 0100 	adc.w	r1, r1, #0
  40854c:	fa03 f20e 	lsl.w	r2, r3, lr
  408550:	1880      	adds	r0, r0, r2
  408552:	fa43 f305 	asr.w	r3, r3, r5
  408556:	4159      	adcs	r1, r3
  408558:	e00e      	b.n	408578 <__adddf3+0xd0>
  40855a:	f1a5 0520 	sub.w	r5, r5, #32
  40855e:	f10e 0e20 	add.w	lr, lr, #32
  408562:	2a01      	cmp	r2, #1
  408564:	fa03 fc0e 	lsl.w	ip, r3, lr
  408568:	bf28      	it	cs
  40856a:	f04c 0c02 	orrcs.w	ip, ip, #2
  40856e:	fa43 f305 	asr.w	r3, r3, r5
  408572:	18c0      	adds	r0, r0, r3
  408574:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  408578:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  40857c:	d507      	bpl.n	40858e <__adddf3+0xe6>
  40857e:	f04f 0e00 	mov.w	lr, #0
  408582:	f1dc 0c00 	rsbs	ip, ip, #0
  408586:	eb7e 0000 	sbcs.w	r0, lr, r0
  40858a:	eb6e 0101 	sbc.w	r1, lr, r1
  40858e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  408592:	d31b      	bcc.n	4085cc <__adddf3+0x124>
  408594:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  408598:	d30c      	bcc.n	4085b4 <__adddf3+0x10c>
  40859a:	0849      	lsrs	r1, r1, #1
  40859c:	ea5f 0030 	movs.w	r0, r0, rrx
  4085a0:	ea4f 0c3c 	mov.w	ip, ip, rrx
  4085a4:	f104 0401 	add.w	r4, r4, #1
  4085a8:	ea4f 5244 	mov.w	r2, r4, lsl #21
  4085ac:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  4085b0:	f080 809a 	bcs.w	4086e8 <__adddf3+0x240>
  4085b4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  4085b8:	bf08      	it	eq
  4085ba:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  4085be:	f150 0000 	adcs.w	r0, r0, #0
  4085c2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  4085c6:	ea41 0105 	orr.w	r1, r1, r5
  4085ca:	bd30      	pop	{r4, r5, pc}
  4085cc:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  4085d0:	4140      	adcs	r0, r0
  4085d2:	eb41 0101 	adc.w	r1, r1, r1
  4085d6:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  4085da:	f1a4 0401 	sub.w	r4, r4, #1
  4085de:	d1e9      	bne.n	4085b4 <__adddf3+0x10c>
  4085e0:	f091 0f00 	teq	r1, #0
  4085e4:	bf04      	itt	eq
  4085e6:	4601      	moveq	r1, r0
  4085e8:	2000      	moveq	r0, #0
  4085ea:	fab1 f381 	clz	r3, r1
  4085ee:	bf08      	it	eq
  4085f0:	3320      	addeq	r3, #32
  4085f2:	f1a3 030b 	sub.w	r3, r3, #11
  4085f6:	f1b3 0220 	subs.w	r2, r3, #32
  4085fa:	da0c      	bge.n	408616 <__adddf3+0x16e>
  4085fc:	320c      	adds	r2, #12
  4085fe:	dd08      	ble.n	408612 <__adddf3+0x16a>
  408600:	f102 0c14 	add.w	ip, r2, #20
  408604:	f1c2 020c 	rsb	r2, r2, #12
  408608:	fa01 f00c 	lsl.w	r0, r1, ip
  40860c:	fa21 f102 	lsr.w	r1, r1, r2
  408610:	e00c      	b.n	40862c <__adddf3+0x184>
  408612:	f102 0214 	add.w	r2, r2, #20
  408616:	bfd8      	it	le
  408618:	f1c2 0c20 	rsble	ip, r2, #32
  40861c:	fa01 f102 	lsl.w	r1, r1, r2
  408620:	fa20 fc0c 	lsr.w	ip, r0, ip
  408624:	bfdc      	itt	le
  408626:	ea41 010c 	orrle.w	r1, r1, ip
  40862a:	4090      	lslle	r0, r2
  40862c:	1ae4      	subs	r4, r4, r3
  40862e:	bfa2      	ittt	ge
  408630:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  408634:	4329      	orrge	r1, r5
  408636:	bd30      	popge	{r4, r5, pc}
  408638:	ea6f 0404 	mvn.w	r4, r4
  40863c:	3c1f      	subs	r4, #31
  40863e:	da1c      	bge.n	40867a <__adddf3+0x1d2>
  408640:	340c      	adds	r4, #12
  408642:	dc0e      	bgt.n	408662 <__adddf3+0x1ba>
  408644:	f104 0414 	add.w	r4, r4, #20
  408648:	f1c4 0220 	rsb	r2, r4, #32
  40864c:	fa20 f004 	lsr.w	r0, r0, r4
  408650:	fa01 f302 	lsl.w	r3, r1, r2
  408654:	ea40 0003 	orr.w	r0, r0, r3
  408658:	fa21 f304 	lsr.w	r3, r1, r4
  40865c:	ea45 0103 	orr.w	r1, r5, r3
  408660:	bd30      	pop	{r4, r5, pc}
  408662:	f1c4 040c 	rsb	r4, r4, #12
  408666:	f1c4 0220 	rsb	r2, r4, #32
  40866a:	fa20 f002 	lsr.w	r0, r0, r2
  40866e:	fa01 f304 	lsl.w	r3, r1, r4
  408672:	ea40 0003 	orr.w	r0, r0, r3
  408676:	4629      	mov	r1, r5
  408678:	bd30      	pop	{r4, r5, pc}
  40867a:	fa21 f004 	lsr.w	r0, r1, r4
  40867e:	4629      	mov	r1, r5
  408680:	bd30      	pop	{r4, r5, pc}
  408682:	f094 0f00 	teq	r4, #0
  408686:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  40868a:	bf06      	itte	eq
  40868c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  408690:	3401      	addeq	r4, #1
  408692:	3d01      	subne	r5, #1
  408694:	e74e      	b.n	408534 <__adddf3+0x8c>
  408696:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  40869a:	bf18      	it	ne
  40869c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  4086a0:	d029      	beq.n	4086f6 <__adddf3+0x24e>
  4086a2:	ea94 0f05 	teq	r4, r5
  4086a6:	bf08      	it	eq
  4086a8:	ea90 0f02 	teqeq	r0, r2
  4086ac:	d005      	beq.n	4086ba <__adddf3+0x212>
  4086ae:	ea54 0c00 	orrs.w	ip, r4, r0
  4086b2:	bf04      	itt	eq
  4086b4:	4619      	moveq	r1, r3
  4086b6:	4610      	moveq	r0, r2
  4086b8:	bd30      	pop	{r4, r5, pc}
  4086ba:	ea91 0f03 	teq	r1, r3
  4086be:	bf1e      	ittt	ne
  4086c0:	2100      	movne	r1, #0
  4086c2:	2000      	movne	r0, #0
  4086c4:	bd30      	popne	{r4, r5, pc}
  4086c6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  4086ca:	d105      	bne.n	4086d8 <__adddf3+0x230>
  4086cc:	0040      	lsls	r0, r0, #1
  4086ce:	4149      	adcs	r1, r1
  4086d0:	bf28      	it	cs
  4086d2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  4086d6:	bd30      	pop	{r4, r5, pc}
  4086d8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  4086dc:	bf3c      	itt	cc
  4086de:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  4086e2:	bd30      	popcc	{r4, r5, pc}
  4086e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  4086e8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  4086ec:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  4086f0:	f04f 0000 	mov.w	r0, #0
  4086f4:	bd30      	pop	{r4, r5, pc}
  4086f6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  4086fa:	bf1a      	itte	ne
  4086fc:	4619      	movne	r1, r3
  4086fe:	4610      	movne	r0, r2
  408700:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  408704:	bf1c      	itt	ne
  408706:	460b      	movne	r3, r1
  408708:	4602      	movne	r2, r0
  40870a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  40870e:	bf06      	itte	eq
  408710:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  408714:	ea91 0f03 	teqeq	r1, r3
  408718:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  40871c:	bd30      	pop	{r4, r5, pc}
  40871e:	bf00      	nop

00408720 <__aeabi_ui2d>:
  408720:	f090 0f00 	teq	r0, #0
  408724:	bf04      	itt	eq
  408726:	2100      	moveq	r1, #0
  408728:	4770      	bxeq	lr
  40872a:	b530      	push	{r4, r5, lr}
  40872c:	f44f 6480 	mov.w	r4, #1024	; 0x400
  408730:	f104 0432 	add.w	r4, r4, #50	; 0x32
  408734:	f04f 0500 	mov.w	r5, #0
  408738:	f04f 0100 	mov.w	r1, #0
  40873c:	e750      	b.n	4085e0 <__adddf3+0x138>
  40873e:	bf00      	nop

00408740 <__aeabi_i2d>:
  408740:	f090 0f00 	teq	r0, #0
  408744:	bf04      	itt	eq
  408746:	2100      	moveq	r1, #0
  408748:	4770      	bxeq	lr
  40874a:	b530      	push	{r4, r5, lr}
  40874c:	f44f 6480 	mov.w	r4, #1024	; 0x400
  408750:	f104 0432 	add.w	r4, r4, #50	; 0x32
  408754:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  408758:	bf48      	it	mi
  40875a:	4240      	negmi	r0, r0
  40875c:	f04f 0100 	mov.w	r1, #0
  408760:	e73e      	b.n	4085e0 <__adddf3+0x138>
  408762:	bf00      	nop

00408764 <__aeabi_f2d>:
  408764:	0042      	lsls	r2, r0, #1
  408766:	ea4f 01e2 	mov.w	r1, r2, asr #3
  40876a:	ea4f 0131 	mov.w	r1, r1, rrx
  40876e:	ea4f 7002 	mov.w	r0, r2, lsl #28
  408772:	bf1f      	itttt	ne
  408774:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  408778:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  40877c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  408780:	4770      	bxne	lr
  408782:	f092 0f00 	teq	r2, #0
  408786:	bf14      	ite	ne
  408788:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  40878c:	4770      	bxeq	lr
  40878e:	b530      	push	{r4, r5, lr}
  408790:	f44f 7460 	mov.w	r4, #896	; 0x380
  408794:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  408798:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  40879c:	e720      	b.n	4085e0 <__adddf3+0x138>
  40879e:	bf00      	nop

004087a0 <__aeabi_ul2d>:
  4087a0:	ea50 0201 	orrs.w	r2, r0, r1
  4087a4:	bf08      	it	eq
  4087a6:	4770      	bxeq	lr
  4087a8:	b530      	push	{r4, r5, lr}
  4087aa:	f04f 0500 	mov.w	r5, #0
  4087ae:	e00a      	b.n	4087c6 <__aeabi_l2d+0x16>

004087b0 <__aeabi_l2d>:
  4087b0:	ea50 0201 	orrs.w	r2, r0, r1
  4087b4:	bf08      	it	eq
  4087b6:	4770      	bxeq	lr
  4087b8:	b530      	push	{r4, r5, lr}
  4087ba:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  4087be:	d502      	bpl.n	4087c6 <__aeabi_l2d+0x16>
  4087c0:	4240      	negs	r0, r0
  4087c2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  4087c6:	f44f 6480 	mov.w	r4, #1024	; 0x400
  4087ca:	f104 0432 	add.w	r4, r4, #50	; 0x32
  4087ce:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  4087d2:	f43f aedc 	beq.w	40858e <__adddf3+0xe6>
  4087d6:	f04f 0203 	mov.w	r2, #3
  4087da:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  4087de:	bf18      	it	ne
  4087e0:	3203      	addne	r2, #3
  4087e2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  4087e6:	bf18      	it	ne
  4087e8:	3203      	addne	r2, #3
  4087ea:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  4087ee:	f1c2 0320 	rsb	r3, r2, #32
  4087f2:	fa00 fc03 	lsl.w	ip, r0, r3
  4087f6:	fa20 f002 	lsr.w	r0, r0, r2
  4087fa:	fa01 fe03 	lsl.w	lr, r1, r3
  4087fe:	ea40 000e 	orr.w	r0, r0, lr
  408802:	fa21 f102 	lsr.w	r1, r1, r2
  408806:	4414      	add	r4, r2
  408808:	e6c1      	b.n	40858e <__adddf3+0xe6>
  40880a:	bf00      	nop

0040880c <__aeabi_dmul>:
  40880c:	b570      	push	{r4, r5, r6, lr}
  40880e:	f04f 0cff 	mov.w	ip, #255	; 0xff
  408812:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  408816:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  40881a:	bf1d      	ittte	ne
  40881c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  408820:	ea94 0f0c 	teqne	r4, ip
  408824:	ea95 0f0c 	teqne	r5, ip
  408828:	f000 f8de 	bleq	4089e8 <__aeabi_dmul+0x1dc>
  40882c:	442c      	add	r4, r5
  40882e:	ea81 0603 	eor.w	r6, r1, r3
  408832:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  408836:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  40883a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  40883e:	bf18      	it	ne
  408840:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  408844:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  408848:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  40884c:	d038      	beq.n	4088c0 <__aeabi_dmul+0xb4>
  40884e:	fba0 ce02 	umull	ip, lr, r0, r2
  408852:	f04f 0500 	mov.w	r5, #0
  408856:	fbe1 e502 	umlal	lr, r5, r1, r2
  40885a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  40885e:	fbe0 e503 	umlal	lr, r5, r0, r3
  408862:	f04f 0600 	mov.w	r6, #0
  408866:	fbe1 5603 	umlal	r5, r6, r1, r3
  40886a:	f09c 0f00 	teq	ip, #0
  40886e:	bf18      	it	ne
  408870:	f04e 0e01 	orrne.w	lr, lr, #1
  408874:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  408878:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  40887c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  408880:	d204      	bcs.n	40888c <__aeabi_dmul+0x80>
  408882:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  408886:	416d      	adcs	r5, r5
  408888:	eb46 0606 	adc.w	r6, r6, r6
  40888c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  408890:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  408894:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  408898:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  40889c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  4088a0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  4088a4:	bf88      	it	hi
  4088a6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  4088aa:	d81e      	bhi.n	4088ea <__aeabi_dmul+0xde>
  4088ac:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  4088b0:	bf08      	it	eq
  4088b2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  4088b6:	f150 0000 	adcs.w	r0, r0, #0
  4088ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  4088be:	bd70      	pop	{r4, r5, r6, pc}
  4088c0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  4088c4:	ea46 0101 	orr.w	r1, r6, r1
  4088c8:	ea40 0002 	orr.w	r0, r0, r2
  4088cc:	ea81 0103 	eor.w	r1, r1, r3
  4088d0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  4088d4:	bfc2      	ittt	gt
  4088d6:	ebd4 050c 	rsbsgt	r5, r4, ip
  4088da:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  4088de:	bd70      	popgt	{r4, r5, r6, pc}
  4088e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  4088e4:	f04f 0e00 	mov.w	lr, #0
  4088e8:	3c01      	subs	r4, #1
  4088ea:	f300 80ab 	bgt.w	408a44 <__aeabi_dmul+0x238>
  4088ee:	f114 0f36 	cmn.w	r4, #54	; 0x36
  4088f2:	bfde      	ittt	le
  4088f4:	2000      	movle	r0, #0
  4088f6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  4088fa:	bd70      	pople	{r4, r5, r6, pc}
  4088fc:	f1c4 0400 	rsb	r4, r4, #0
  408900:	3c20      	subs	r4, #32
  408902:	da35      	bge.n	408970 <__aeabi_dmul+0x164>
  408904:	340c      	adds	r4, #12
  408906:	dc1b      	bgt.n	408940 <__aeabi_dmul+0x134>
  408908:	f104 0414 	add.w	r4, r4, #20
  40890c:	f1c4 0520 	rsb	r5, r4, #32
  408910:	fa00 f305 	lsl.w	r3, r0, r5
  408914:	fa20 f004 	lsr.w	r0, r0, r4
  408918:	fa01 f205 	lsl.w	r2, r1, r5
  40891c:	ea40 0002 	orr.w	r0, r0, r2
  408920:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  408924:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  408928:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  40892c:	fa21 f604 	lsr.w	r6, r1, r4
  408930:	eb42 0106 	adc.w	r1, r2, r6
  408934:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  408938:	bf08      	it	eq
  40893a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40893e:	bd70      	pop	{r4, r5, r6, pc}
  408940:	f1c4 040c 	rsb	r4, r4, #12
  408944:	f1c4 0520 	rsb	r5, r4, #32
  408948:	fa00 f304 	lsl.w	r3, r0, r4
  40894c:	fa20 f005 	lsr.w	r0, r0, r5
  408950:	fa01 f204 	lsl.w	r2, r1, r4
  408954:	ea40 0002 	orr.w	r0, r0, r2
  408958:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40895c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  408960:	f141 0100 	adc.w	r1, r1, #0
  408964:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  408968:	bf08      	it	eq
  40896a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40896e:	bd70      	pop	{r4, r5, r6, pc}
  408970:	f1c4 0520 	rsb	r5, r4, #32
  408974:	fa00 f205 	lsl.w	r2, r0, r5
  408978:	ea4e 0e02 	orr.w	lr, lr, r2
  40897c:	fa20 f304 	lsr.w	r3, r0, r4
  408980:	fa01 f205 	lsl.w	r2, r1, r5
  408984:	ea43 0302 	orr.w	r3, r3, r2
  408988:	fa21 f004 	lsr.w	r0, r1, r4
  40898c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  408990:	fa21 f204 	lsr.w	r2, r1, r4
  408994:	ea20 0002 	bic.w	r0, r0, r2
  408998:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  40899c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  4089a0:	bf08      	it	eq
  4089a2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  4089a6:	bd70      	pop	{r4, r5, r6, pc}
  4089a8:	f094 0f00 	teq	r4, #0
  4089ac:	d10f      	bne.n	4089ce <__aeabi_dmul+0x1c2>
  4089ae:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  4089b2:	0040      	lsls	r0, r0, #1
  4089b4:	eb41 0101 	adc.w	r1, r1, r1
  4089b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  4089bc:	bf08      	it	eq
  4089be:	3c01      	subeq	r4, #1
  4089c0:	d0f7      	beq.n	4089b2 <__aeabi_dmul+0x1a6>
  4089c2:	ea41 0106 	orr.w	r1, r1, r6
  4089c6:	f095 0f00 	teq	r5, #0
  4089ca:	bf18      	it	ne
  4089cc:	4770      	bxne	lr
  4089ce:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  4089d2:	0052      	lsls	r2, r2, #1
  4089d4:	eb43 0303 	adc.w	r3, r3, r3
  4089d8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  4089dc:	bf08      	it	eq
  4089de:	3d01      	subeq	r5, #1
  4089e0:	d0f7      	beq.n	4089d2 <__aeabi_dmul+0x1c6>
  4089e2:	ea43 0306 	orr.w	r3, r3, r6
  4089e6:	4770      	bx	lr
  4089e8:	ea94 0f0c 	teq	r4, ip
  4089ec:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  4089f0:	bf18      	it	ne
  4089f2:	ea95 0f0c 	teqne	r5, ip
  4089f6:	d00c      	beq.n	408a12 <__aeabi_dmul+0x206>
  4089f8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  4089fc:	bf18      	it	ne
  4089fe:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  408a02:	d1d1      	bne.n	4089a8 <__aeabi_dmul+0x19c>
  408a04:	ea81 0103 	eor.w	r1, r1, r3
  408a08:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  408a0c:	f04f 0000 	mov.w	r0, #0
  408a10:	bd70      	pop	{r4, r5, r6, pc}
  408a12:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  408a16:	bf06      	itte	eq
  408a18:	4610      	moveq	r0, r2
  408a1a:	4619      	moveq	r1, r3
  408a1c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  408a20:	d019      	beq.n	408a56 <__aeabi_dmul+0x24a>
  408a22:	ea94 0f0c 	teq	r4, ip
  408a26:	d102      	bne.n	408a2e <__aeabi_dmul+0x222>
  408a28:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  408a2c:	d113      	bne.n	408a56 <__aeabi_dmul+0x24a>
  408a2e:	ea95 0f0c 	teq	r5, ip
  408a32:	d105      	bne.n	408a40 <__aeabi_dmul+0x234>
  408a34:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  408a38:	bf1c      	itt	ne
  408a3a:	4610      	movne	r0, r2
  408a3c:	4619      	movne	r1, r3
  408a3e:	d10a      	bne.n	408a56 <__aeabi_dmul+0x24a>
  408a40:	ea81 0103 	eor.w	r1, r1, r3
  408a44:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  408a48:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  408a4c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  408a50:	f04f 0000 	mov.w	r0, #0
  408a54:	bd70      	pop	{r4, r5, r6, pc}
  408a56:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  408a5a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  408a5e:	bd70      	pop	{r4, r5, r6, pc}

00408a60 <__aeabi_ddiv>:
  408a60:	b570      	push	{r4, r5, r6, lr}
  408a62:	f04f 0cff 	mov.w	ip, #255	; 0xff
  408a66:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  408a6a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  408a6e:	bf1d      	ittte	ne
  408a70:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  408a74:	ea94 0f0c 	teqne	r4, ip
  408a78:	ea95 0f0c 	teqne	r5, ip
  408a7c:	f000 f8a7 	bleq	408bce <__aeabi_ddiv+0x16e>
  408a80:	eba4 0405 	sub.w	r4, r4, r5
  408a84:	ea81 0e03 	eor.w	lr, r1, r3
  408a88:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  408a8c:	ea4f 3101 	mov.w	r1, r1, lsl #12
  408a90:	f000 8088 	beq.w	408ba4 <__aeabi_ddiv+0x144>
  408a94:	ea4f 3303 	mov.w	r3, r3, lsl #12
  408a98:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  408a9c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  408aa0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  408aa4:	ea4f 2202 	mov.w	r2, r2, lsl #8
  408aa8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  408aac:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  408ab0:	ea4f 2600 	mov.w	r6, r0, lsl #8
  408ab4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  408ab8:	429d      	cmp	r5, r3
  408aba:	bf08      	it	eq
  408abc:	4296      	cmpeq	r6, r2
  408abe:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  408ac2:	f504 7440 	add.w	r4, r4, #768	; 0x300
  408ac6:	d202      	bcs.n	408ace <__aeabi_ddiv+0x6e>
  408ac8:	085b      	lsrs	r3, r3, #1
  408aca:	ea4f 0232 	mov.w	r2, r2, rrx
  408ace:	1ab6      	subs	r6, r6, r2
  408ad0:	eb65 0503 	sbc.w	r5, r5, r3
  408ad4:	085b      	lsrs	r3, r3, #1
  408ad6:	ea4f 0232 	mov.w	r2, r2, rrx
  408ada:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  408ade:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  408ae2:	ebb6 0e02 	subs.w	lr, r6, r2
  408ae6:	eb75 0e03 	sbcs.w	lr, r5, r3
  408aea:	bf22      	ittt	cs
  408aec:	1ab6      	subcs	r6, r6, r2
  408aee:	4675      	movcs	r5, lr
  408af0:	ea40 000c 	orrcs.w	r0, r0, ip
  408af4:	085b      	lsrs	r3, r3, #1
  408af6:	ea4f 0232 	mov.w	r2, r2, rrx
  408afa:	ebb6 0e02 	subs.w	lr, r6, r2
  408afe:	eb75 0e03 	sbcs.w	lr, r5, r3
  408b02:	bf22      	ittt	cs
  408b04:	1ab6      	subcs	r6, r6, r2
  408b06:	4675      	movcs	r5, lr
  408b08:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  408b0c:	085b      	lsrs	r3, r3, #1
  408b0e:	ea4f 0232 	mov.w	r2, r2, rrx
  408b12:	ebb6 0e02 	subs.w	lr, r6, r2
  408b16:	eb75 0e03 	sbcs.w	lr, r5, r3
  408b1a:	bf22      	ittt	cs
  408b1c:	1ab6      	subcs	r6, r6, r2
  408b1e:	4675      	movcs	r5, lr
  408b20:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  408b24:	085b      	lsrs	r3, r3, #1
  408b26:	ea4f 0232 	mov.w	r2, r2, rrx
  408b2a:	ebb6 0e02 	subs.w	lr, r6, r2
  408b2e:	eb75 0e03 	sbcs.w	lr, r5, r3
  408b32:	bf22      	ittt	cs
  408b34:	1ab6      	subcs	r6, r6, r2
  408b36:	4675      	movcs	r5, lr
  408b38:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  408b3c:	ea55 0e06 	orrs.w	lr, r5, r6
  408b40:	d018      	beq.n	408b74 <__aeabi_ddiv+0x114>
  408b42:	ea4f 1505 	mov.w	r5, r5, lsl #4
  408b46:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  408b4a:	ea4f 1606 	mov.w	r6, r6, lsl #4
  408b4e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  408b52:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  408b56:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  408b5a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  408b5e:	d1c0      	bne.n	408ae2 <__aeabi_ddiv+0x82>
  408b60:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  408b64:	d10b      	bne.n	408b7e <__aeabi_ddiv+0x11e>
  408b66:	ea41 0100 	orr.w	r1, r1, r0
  408b6a:	f04f 0000 	mov.w	r0, #0
  408b6e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  408b72:	e7b6      	b.n	408ae2 <__aeabi_ddiv+0x82>
  408b74:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  408b78:	bf04      	itt	eq
  408b7a:	4301      	orreq	r1, r0
  408b7c:	2000      	moveq	r0, #0
  408b7e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  408b82:	bf88      	it	hi
  408b84:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  408b88:	f63f aeaf 	bhi.w	4088ea <__aeabi_dmul+0xde>
  408b8c:	ebb5 0c03 	subs.w	ip, r5, r3
  408b90:	bf04      	itt	eq
  408b92:	ebb6 0c02 	subseq.w	ip, r6, r2
  408b96:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  408b9a:	f150 0000 	adcs.w	r0, r0, #0
  408b9e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  408ba2:	bd70      	pop	{r4, r5, r6, pc}
  408ba4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  408ba8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  408bac:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  408bb0:	bfc2      	ittt	gt
  408bb2:	ebd4 050c 	rsbsgt	r5, r4, ip
  408bb6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  408bba:	bd70      	popgt	{r4, r5, r6, pc}
  408bbc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  408bc0:	f04f 0e00 	mov.w	lr, #0
  408bc4:	3c01      	subs	r4, #1
  408bc6:	e690      	b.n	4088ea <__aeabi_dmul+0xde>
  408bc8:	ea45 0e06 	orr.w	lr, r5, r6
  408bcc:	e68d      	b.n	4088ea <__aeabi_dmul+0xde>
  408bce:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  408bd2:	ea94 0f0c 	teq	r4, ip
  408bd6:	bf08      	it	eq
  408bd8:	ea95 0f0c 	teqeq	r5, ip
  408bdc:	f43f af3b 	beq.w	408a56 <__aeabi_dmul+0x24a>
  408be0:	ea94 0f0c 	teq	r4, ip
  408be4:	d10a      	bne.n	408bfc <__aeabi_ddiv+0x19c>
  408be6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  408bea:	f47f af34 	bne.w	408a56 <__aeabi_dmul+0x24a>
  408bee:	ea95 0f0c 	teq	r5, ip
  408bf2:	f47f af25 	bne.w	408a40 <__aeabi_dmul+0x234>
  408bf6:	4610      	mov	r0, r2
  408bf8:	4619      	mov	r1, r3
  408bfa:	e72c      	b.n	408a56 <__aeabi_dmul+0x24a>
  408bfc:	ea95 0f0c 	teq	r5, ip
  408c00:	d106      	bne.n	408c10 <__aeabi_ddiv+0x1b0>
  408c02:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  408c06:	f43f aefd 	beq.w	408a04 <__aeabi_dmul+0x1f8>
  408c0a:	4610      	mov	r0, r2
  408c0c:	4619      	mov	r1, r3
  408c0e:	e722      	b.n	408a56 <__aeabi_dmul+0x24a>
  408c10:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  408c14:	bf18      	it	ne
  408c16:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  408c1a:	f47f aec5 	bne.w	4089a8 <__aeabi_dmul+0x19c>
  408c1e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  408c22:	f47f af0d 	bne.w	408a40 <__aeabi_dmul+0x234>
  408c26:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  408c2a:	f47f aeeb 	bne.w	408a04 <__aeabi_dmul+0x1f8>
  408c2e:	e712      	b.n	408a56 <__aeabi_dmul+0x24a>

00408c30 <__gedf2>:
  408c30:	f04f 3cff 	mov.w	ip, #4294967295
  408c34:	e006      	b.n	408c44 <__cmpdf2+0x4>
  408c36:	bf00      	nop

00408c38 <__ledf2>:
  408c38:	f04f 0c01 	mov.w	ip, #1
  408c3c:	e002      	b.n	408c44 <__cmpdf2+0x4>
  408c3e:	bf00      	nop

00408c40 <__cmpdf2>:
  408c40:	f04f 0c01 	mov.w	ip, #1
  408c44:	f84d cd04 	str.w	ip, [sp, #-4]!
  408c48:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  408c4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  408c50:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  408c54:	bf18      	it	ne
  408c56:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  408c5a:	d01b      	beq.n	408c94 <__cmpdf2+0x54>
  408c5c:	b001      	add	sp, #4
  408c5e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  408c62:	bf0c      	ite	eq
  408c64:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  408c68:	ea91 0f03 	teqne	r1, r3
  408c6c:	bf02      	ittt	eq
  408c6e:	ea90 0f02 	teqeq	r0, r2
  408c72:	2000      	moveq	r0, #0
  408c74:	4770      	bxeq	lr
  408c76:	f110 0f00 	cmn.w	r0, #0
  408c7a:	ea91 0f03 	teq	r1, r3
  408c7e:	bf58      	it	pl
  408c80:	4299      	cmppl	r1, r3
  408c82:	bf08      	it	eq
  408c84:	4290      	cmpeq	r0, r2
  408c86:	bf2c      	ite	cs
  408c88:	17d8      	asrcs	r0, r3, #31
  408c8a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  408c8e:	f040 0001 	orr.w	r0, r0, #1
  408c92:	4770      	bx	lr
  408c94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  408c98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  408c9c:	d102      	bne.n	408ca4 <__cmpdf2+0x64>
  408c9e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  408ca2:	d107      	bne.n	408cb4 <__cmpdf2+0x74>
  408ca4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  408ca8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  408cac:	d1d6      	bne.n	408c5c <__cmpdf2+0x1c>
  408cae:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  408cb2:	d0d3      	beq.n	408c5c <__cmpdf2+0x1c>
  408cb4:	f85d 0b04 	ldr.w	r0, [sp], #4
  408cb8:	4770      	bx	lr
  408cba:	bf00      	nop

00408cbc <__aeabi_cdrcmple>:
  408cbc:	4684      	mov	ip, r0
  408cbe:	4610      	mov	r0, r2
  408cc0:	4662      	mov	r2, ip
  408cc2:	468c      	mov	ip, r1
  408cc4:	4619      	mov	r1, r3
  408cc6:	4663      	mov	r3, ip
  408cc8:	e000      	b.n	408ccc <__aeabi_cdcmpeq>
  408cca:	bf00      	nop

00408ccc <__aeabi_cdcmpeq>:
  408ccc:	b501      	push	{r0, lr}
  408cce:	f7ff ffb7 	bl	408c40 <__cmpdf2>
  408cd2:	2800      	cmp	r0, #0
  408cd4:	bf48      	it	mi
  408cd6:	f110 0f00 	cmnmi.w	r0, #0
  408cda:	bd01      	pop	{r0, pc}

00408cdc <__aeabi_dcmpeq>:
  408cdc:	f84d ed08 	str.w	lr, [sp, #-8]!
  408ce0:	f7ff fff4 	bl	408ccc <__aeabi_cdcmpeq>
  408ce4:	bf0c      	ite	eq
  408ce6:	2001      	moveq	r0, #1
  408ce8:	2000      	movne	r0, #0
  408cea:	f85d fb08 	ldr.w	pc, [sp], #8
  408cee:	bf00      	nop

00408cf0 <__aeabi_dcmplt>:
  408cf0:	f84d ed08 	str.w	lr, [sp, #-8]!
  408cf4:	f7ff ffea 	bl	408ccc <__aeabi_cdcmpeq>
  408cf8:	bf34      	ite	cc
  408cfa:	2001      	movcc	r0, #1
  408cfc:	2000      	movcs	r0, #0
  408cfe:	f85d fb08 	ldr.w	pc, [sp], #8
  408d02:	bf00      	nop

00408d04 <__aeabi_dcmple>:
  408d04:	f84d ed08 	str.w	lr, [sp, #-8]!
  408d08:	f7ff ffe0 	bl	408ccc <__aeabi_cdcmpeq>
  408d0c:	bf94      	ite	ls
  408d0e:	2001      	movls	r0, #1
  408d10:	2000      	movhi	r0, #0
  408d12:	f85d fb08 	ldr.w	pc, [sp], #8
  408d16:	bf00      	nop

00408d18 <__aeabi_dcmpge>:
  408d18:	f84d ed08 	str.w	lr, [sp, #-8]!
  408d1c:	f7ff ffce 	bl	408cbc <__aeabi_cdrcmple>
  408d20:	bf94      	ite	ls
  408d22:	2001      	movls	r0, #1
  408d24:	2000      	movhi	r0, #0
  408d26:	f85d fb08 	ldr.w	pc, [sp], #8
  408d2a:	bf00      	nop

00408d2c <__aeabi_dcmpgt>:
  408d2c:	f84d ed08 	str.w	lr, [sp, #-8]!
  408d30:	f7ff ffc4 	bl	408cbc <__aeabi_cdrcmple>
  408d34:	bf34      	ite	cc
  408d36:	2001      	movcc	r0, #1
  408d38:	2000      	movcs	r0, #0
  408d3a:	f85d fb08 	ldr.w	pc, [sp], #8
  408d3e:	bf00      	nop

00408d40 <__aeabi_d2iz>:
  408d40:	ea4f 0241 	mov.w	r2, r1, lsl #1
  408d44:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  408d48:	d215      	bcs.n	408d76 <__aeabi_d2iz+0x36>
  408d4a:	d511      	bpl.n	408d70 <__aeabi_d2iz+0x30>
  408d4c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  408d50:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  408d54:	d912      	bls.n	408d7c <__aeabi_d2iz+0x3c>
  408d56:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  408d5a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  408d5e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  408d62:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  408d66:	fa23 f002 	lsr.w	r0, r3, r2
  408d6a:	bf18      	it	ne
  408d6c:	4240      	negne	r0, r0
  408d6e:	4770      	bx	lr
  408d70:	f04f 0000 	mov.w	r0, #0
  408d74:	4770      	bx	lr
  408d76:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  408d7a:	d105      	bne.n	408d88 <__aeabi_d2iz+0x48>
  408d7c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  408d80:	bf08      	it	eq
  408d82:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  408d86:	4770      	bx	lr
  408d88:	f04f 0000 	mov.w	r0, #0
  408d8c:	4770      	bx	lr
  408d8e:	bf00      	nop

00408d90 <__aeabi_uldivmod>:
  408d90:	b953      	cbnz	r3, 408da8 <__aeabi_uldivmod+0x18>
  408d92:	b94a      	cbnz	r2, 408da8 <__aeabi_uldivmod+0x18>
  408d94:	2900      	cmp	r1, #0
  408d96:	bf08      	it	eq
  408d98:	2800      	cmpeq	r0, #0
  408d9a:	bf1c      	itt	ne
  408d9c:	f04f 31ff 	movne.w	r1, #4294967295
  408da0:	f04f 30ff 	movne.w	r0, #4294967295
  408da4:	f000 b83c 	b.w	408e20 <__aeabi_idiv0>
  408da8:	b082      	sub	sp, #8
  408daa:	46ec      	mov	ip, sp
  408dac:	e92d 5000 	stmdb	sp!, {ip, lr}
  408db0:	f000 f81e 	bl	408df0 <__gnu_uldivmod_helper>
  408db4:	f8dd e004 	ldr.w	lr, [sp, #4]
  408db8:	b002      	add	sp, #8
  408dba:	bc0c      	pop	{r2, r3}
  408dbc:	4770      	bx	lr
  408dbe:	bf00      	nop

00408dc0 <__gnu_ldivmod_helper>:
  408dc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  408dc4:	4690      	mov	r8, r2
  408dc6:	4606      	mov	r6, r0
  408dc8:	460f      	mov	r7, r1
  408dca:	461d      	mov	r5, r3
  408dcc:	9c06      	ldr	r4, [sp, #24]
  408dce:	f000 f829 	bl	408e24 <__divdi3>
  408dd2:	fb08 fc01 	mul.w	ip, r8, r1
  408dd6:	4686      	mov	lr, r0
  408dd8:	fba8 2300 	umull	r2, r3, r8, r0
  408ddc:	fb00 c505 	mla	r5, r0, r5, ip
  408de0:	1ab2      	subs	r2, r6, r2
  408de2:	442b      	add	r3, r5
  408de4:	eb67 0303 	sbc.w	r3, r7, r3
  408de8:	e9c4 2300 	strd	r2, r3, [r4]
  408dec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00408df0 <__gnu_uldivmod_helper>:
  408df0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  408df4:	461d      	mov	r5, r3
  408df6:	4617      	mov	r7, r2
  408df8:	4680      	mov	r8, r0
  408dfa:	4689      	mov	r9, r1
  408dfc:	9e08      	ldr	r6, [sp, #32]
  408dfe:	f000 f953 	bl	4090a8 <__udivdi3>
  408e02:	fb00 f305 	mul.w	r3, r0, r5
  408e06:	fba0 4507 	umull	r4, r5, r0, r7
  408e0a:	fb07 3701 	mla	r7, r7, r1, r3
  408e0e:	ebb8 0404 	subs.w	r4, r8, r4
  408e12:	443d      	add	r5, r7
  408e14:	eb69 0505 	sbc.w	r5, r9, r5
  408e18:	e9c6 4500 	strd	r4, r5, [r6]
  408e1c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00408e20 <__aeabi_idiv0>:
  408e20:	4770      	bx	lr
  408e22:	bf00      	nop

00408e24 <__divdi3>:
  408e24:	2900      	cmp	r1, #0
  408e26:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  408e2a:	f2c0 80a2 	blt.w	408f72 <__divdi3+0x14e>
  408e2e:	2600      	movs	r6, #0
  408e30:	2b00      	cmp	r3, #0
  408e32:	f2c0 8098 	blt.w	408f66 <__divdi3+0x142>
  408e36:	468c      	mov	ip, r1
  408e38:	4690      	mov	r8, r2
  408e3a:	469e      	mov	lr, r3
  408e3c:	4615      	mov	r5, r2
  408e3e:	4604      	mov	r4, r0
  408e40:	460f      	mov	r7, r1
  408e42:	bbcb      	cbnz	r3, 408eb8 <__divdi3+0x94>
  408e44:	428a      	cmp	r2, r1
  408e46:	d956      	bls.n	408ef6 <__divdi3+0xd2>
  408e48:	fab2 f382 	clz	r3, r2
  408e4c:	b13b      	cbz	r3, 408e5e <__divdi3+0x3a>
  408e4e:	f1c3 0220 	rsb	r2, r3, #32
  408e52:	409f      	lsls	r7, r3
  408e54:	409d      	lsls	r5, r3
  408e56:	409c      	lsls	r4, r3
  408e58:	fa20 f202 	lsr.w	r2, r0, r2
  408e5c:	4317      	orrs	r7, r2
  408e5e:	0c28      	lsrs	r0, r5, #16
  408e60:	0c22      	lsrs	r2, r4, #16
  408e62:	fa1f fe85 	uxth.w	lr, r5
  408e66:	fbb7 f1f0 	udiv	r1, r7, r0
  408e6a:	fb00 7711 	mls	r7, r0, r1, r7
  408e6e:	fb0e f301 	mul.w	r3, lr, r1
  408e72:	ea42 4707 	orr.w	r7, r2, r7, lsl #16
  408e76:	42bb      	cmp	r3, r7
  408e78:	d907      	bls.n	408e8a <__divdi3+0x66>
  408e7a:	197f      	adds	r7, r7, r5
  408e7c:	f080 8101 	bcs.w	409082 <__divdi3+0x25e>
  408e80:	42bb      	cmp	r3, r7
  408e82:	f240 80fe 	bls.w	409082 <__divdi3+0x25e>
  408e86:	3902      	subs	r1, #2
  408e88:	442f      	add	r7, r5
  408e8a:	1aff      	subs	r7, r7, r3
  408e8c:	b2a4      	uxth	r4, r4
  408e8e:	fbb7 f3f0 	udiv	r3, r7, r0
  408e92:	fb00 7713 	mls	r7, r0, r3, r7
  408e96:	fb0e fe03 	mul.w	lr, lr, r3
  408e9a:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
  408e9e:	45be      	cmp	lr, r7
  408ea0:	d906      	bls.n	408eb0 <__divdi3+0x8c>
  408ea2:	197f      	adds	r7, r7, r5
  408ea4:	f080 80eb 	bcs.w	40907e <__divdi3+0x25a>
  408ea8:	45be      	cmp	lr, r7
  408eaa:	f240 80e8 	bls.w	40907e <__divdi3+0x25a>
  408eae:	3b02      	subs	r3, #2
  408eb0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
  408eb4:	2200      	movs	r2, #0
  408eb6:	e003      	b.n	408ec0 <__divdi3+0x9c>
  408eb8:	428b      	cmp	r3, r1
  408eba:	d90f      	bls.n	408edc <__divdi3+0xb8>
  408ebc:	2200      	movs	r2, #0
  408ebe:	4613      	mov	r3, r2
  408ec0:	1c34      	adds	r4, r6, #0
  408ec2:	f04f 0500 	mov.w	r5, #0
  408ec6:	bf18      	it	ne
  408ec8:	2401      	movne	r4, #1
  408eca:	4260      	negs	r0, r4
  408ecc:	eb65 0145 	sbc.w	r1, r5, r5, lsl #1
  408ed0:	4058      	eors	r0, r3
  408ed2:	4051      	eors	r1, r2
  408ed4:	1900      	adds	r0, r0, r4
  408ed6:	4169      	adcs	r1, r5
  408ed8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  408edc:	fab3 f283 	clz	r2, r3
  408ee0:	2a00      	cmp	r2, #0
  408ee2:	f040 8083 	bne.w	408fec <__divdi3+0x1c8>
  408ee6:	4580      	cmp	r8, r0
  408ee8:	f240 80cd 	bls.w	409086 <__divdi3+0x262>
  408eec:	428b      	cmp	r3, r1
  408eee:	f0c0 80ca 	bcc.w	409086 <__divdi3+0x262>
  408ef2:	4613      	mov	r3, r2
  408ef4:	e7e4      	b.n	408ec0 <__divdi3+0x9c>
  408ef6:	b912      	cbnz	r2, 408efe <__divdi3+0xda>
  408ef8:	2301      	movs	r3, #1
  408efa:	fbb3 f5f2 	udiv	r5, r3, r2
  408efe:	fab5 f285 	clz	r2, r5
  408f02:	2a00      	cmp	r2, #0
  408f04:	d13b      	bne.n	408f7e <__divdi3+0x15a>
  408f06:	1b78      	subs	r0, r7, r5
  408f08:	ea4f 4e15 	mov.w	lr, r5, lsr #16
  408f0c:	fa1f fc85 	uxth.w	ip, r5
  408f10:	2201      	movs	r2, #1
  408f12:	0c21      	lsrs	r1, r4, #16
  408f14:	fbb0 f8fe 	udiv	r8, r0, lr
  408f18:	fb0e 0018 	mls	r0, lr, r8, r0
  408f1c:	fb0c f308 	mul.w	r3, ip, r8
  408f20:	ea41 4700 	orr.w	r7, r1, r0, lsl #16
  408f24:	42bb      	cmp	r3, r7
  408f26:	d908      	bls.n	408f3a <__divdi3+0x116>
  408f28:	197f      	adds	r7, r7, r5
  408f2a:	f080 80b0 	bcs.w	40908e <__divdi3+0x26a>
  408f2e:	42bb      	cmp	r3, r7
  408f30:	f240 80ad 	bls.w	40908e <__divdi3+0x26a>
  408f34:	f1a8 0802 	sub.w	r8, r8, #2
  408f38:	442f      	add	r7, r5
  408f3a:	1aff      	subs	r7, r7, r3
  408f3c:	b2a4      	uxth	r4, r4
  408f3e:	fbb7 f3fe 	udiv	r3, r7, lr
  408f42:	fb0e 7713 	mls	r7, lr, r3, r7
  408f46:	fb0c fc03 	mul.w	ip, ip, r3
  408f4a:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
  408f4e:	45bc      	cmp	ip, r7
  408f50:	d906      	bls.n	408f60 <__divdi3+0x13c>
  408f52:	197f      	adds	r7, r7, r5
  408f54:	f080 8099 	bcs.w	40908a <__divdi3+0x266>
  408f58:	45bc      	cmp	ip, r7
  408f5a:	f240 8096 	bls.w	40908a <__divdi3+0x266>
  408f5e:	3b02      	subs	r3, #2
  408f60:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
  408f64:	e7ac      	b.n	408ec0 <__divdi3+0x9c>
  408f66:	4252      	negs	r2, r2
  408f68:	ea6f 0606 	mvn.w	r6, r6
  408f6c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  408f70:	e761      	b.n	408e36 <__divdi3+0x12>
  408f72:	4240      	negs	r0, r0
  408f74:	f04f 36ff 	mov.w	r6, #4294967295
  408f78:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  408f7c:	e758      	b.n	408e30 <__divdi3+0xc>
  408f7e:	4095      	lsls	r5, r2
  408f80:	f1c2 0120 	rsb	r1, r2, #32
  408f84:	fa07 f302 	lsl.w	r3, r7, r2
  408f88:	ea4f 4e15 	mov.w	lr, r5, lsr #16
  408f8c:	40cf      	lsrs	r7, r1
  408f8e:	fa24 f101 	lsr.w	r1, r4, r1
  408f92:	4094      	lsls	r4, r2
  408f94:	fa1f fc85 	uxth.w	ip, r5
  408f98:	4319      	orrs	r1, r3
  408f9a:	fbb7 f2fe 	udiv	r2, r7, lr
  408f9e:	ea4f 4811 	mov.w	r8, r1, lsr #16
  408fa2:	fb0e 7712 	mls	r7, lr, r2, r7
  408fa6:	fb0c f302 	mul.w	r3, ip, r2
  408faa:	ea48 4707 	orr.w	r7, r8, r7, lsl #16
  408fae:	42bb      	cmp	r3, r7
  408fb0:	d905      	bls.n	408fbe <__divdi3+0x19a>
  408fb2:	197f      	adds	r7, r7, r5
  408fb4:	d271      	bcs.n	40909a <__divdi3+0x276>
  408fb6:	42bb      	cmp	r3, r7
  408fb8:	d96f      	bls.n	40909a <__divdi3+0x276>
  408fba:	3a02      	subs	r2, #2
  408fbc:	442f      	add	r7, r5
  408fbe:	1aff      	subs	r7, r7, r3
  408fc0:	b289      	uxth	r1, r1
  408fc2:	fbb7 f8fe 	udiv	r8, r7, lr
  408fc6:	fb0e 7718 	mls	r7, lr, r8, r7
  408fca:	fb0c f008 	mul.w	r0, ip, r8
  408fce:	ea41 4307 	orr.w	r3, r1, r7, lsl #16
  408fd2:	4298      	cmp	r0, r3
  408fd4:	d906      	bls.n	408fe4 <__divdi3+0x1c0>
  408fd6:	195b      	adds	r3, r3, r5
  408fd8:	d261      	bcs.n	40909e <__divdi3+0x27a>
  408fda:	4298      	cmp	r0, r3
  408fdc:	d95f      	bls.n	40909e <__divdi3+0x27a>
  408fde:	f1a8 0802 	sub.w	r8, r8, #2
  408fe2:	442b      	add	r3, r5
  408fe4:	1a18      	subs	r0, r3, r0
  408fe6:	ea48 4202 	orr.w	r2, r8, r2, lsl #16
  408fea:	e792      	b.n	408f12 <__divdi3+0xee>
  408fec:	f1c2 0720 	rsb	r7, r2, #32
  408ff0:	fa03 fe02 	lsl.w	lr, r3, r2
  408ff4:	fa08 f502 	lsl.w	r5, r8, r2
  408ff8:	4091      	lsls	r1, r2
  408ffa:	fa28 f307 	lsr.w	r3, r8, r7
  408ffe:	fa2c fc07 	lsr.w	ip, ip, r7
  409002:	40f8      	lsrs	r0, r7
  409004:	ea43 0e0e 	orr.w	lr, r3, lr
  409008:	4308      	orrs	r0, r1
  40900a:	ea4f 481e 	mov.w	r8, lr, lsr #16
  40900e:	0c07      	lsrs	r7, r0, #16
  409010:	fa1f fa8e 	uxth.w	sl, lr
  409014:	fbbc f9f8 	udiv	r9, ip, r8
  409018:	fb08 cc19 	mls	ip, r8, r9, ip
  40901c:	fb0a f109 	mul.w	r1, sl, r9
  409020:	ea47 4c0c 	orr.w	ip, r7, ip, lsl #16
  409024:	4561      	cmp	r1, ip
  409026:	d907      	bls.n	409038 <__divdi3+0x214>
  409028:	eb1c 0c0e 	adds.w	ip, ip, lr
  40902c:	d232      	bcs.n	409094 <__divdi3+0x270>
  40902e:	4561      	cmp	r1, ip
  409030:	d930      	bls.n	409094 <__divdi3+0x270>
  409032:	f1a9 0902 	sub.w	r9, r9, #2
  409036:	44f4      	add	ip, lr
  409038:	ebc1 0c0c 	rsb	ip, r1, ip
  40903c:	b280      	uxth	r0, r0
  40903e:	fbbc f3f8 	udiv	r3, ip, r8
  409042:	fb08 cc13 	mls	ip, r8, r3, ip
  409046:	fb0a fa03 	mul.w	sl, sl, r3
  40904a:	ea40 410c 	orr.w	r1, r0, ip, lsl #16
  40904e:	458a      	cmp	sl, r1
  409050:	d906      	bls.n	409060 <__divdi3+0x23c>
  409052:	eb11 010e 	adds.w	r1, r1, lr
  409056:	d225      	bcs.n	4090a4 <__divdi3+0x280>
  409058:	458a      	cmp	sl, r1
  40905a:	d923      	bls.n	4090a4 <__divdi3+0x280>
  40905c:	3b02      	subs	r3, #2
  40905e:	4471      	add	r1, lr
  409060:	ea43 4309 	orr.w	r3, r3, r9, lsl #16
  409064:	ebca 0101 	rsb	r1, sl, r1
  409068:	fba3 8905 	umull	r8, r9, r3, r5
  40906c:	4549      	cmp	r1, r9
  40906e:	d303      	bcc.n	409078 <__divdi3+0x254>
  409070:	d103      	bne.n	40907a <__divdi3+0x256>
  409072:	4094      	lsls	r4, r2
  409074:	4544      	cmp	r4, r8
  409076:	d200      	bcs.n	40907a <__divdi3+0x256>
  409078:	3b01      	subs	r3, #1
  40907a:	2200      	movs	r2, #0
  40907c:	e720      	b.n	408ec0 <__divdi3+0x9c>
  40907e:	3b01      	subs	r3, #1
  409080:	e716      	b.n	408eb0 <__divdi3+0x8c>
  409082:	3901      	subs	r1, #1
  409084:	e701      	b.n	408e8a <__divdi3+0x66>
  409086:	2301      	movs	r3, #1
  409088:	e71a      	b.n	408ec0 <__divdi3+0x9c>
  40908a:	3b01      	subs	r3, #1
  40908c:	e768      	b.n	408f60 <__divdi3+0x13c>
  40908e:	f108 38ff 	add.w	r8, r8, #4294967295
  409092:	e752      	b.n	408f3a <__divdi3+0x116>
  409094:	f109 39ff 	add.w	r9, r9, #4294967295
  409098:	e7ce      	b.n	409038 <__divdi3+0x214>
  40909a:	3a01      	subs	r2, #1
  40909c:	e78f      	b.n	408fbe <__divdi3+0x19a>
  40909e:	f108 38ff 	add.w	r8, r8, #4294967295
  4090a2:	e79f      	b.n	408fe4 <__divdi3+0x1c0>
  4090a4:	3b01      	subs	r3, #1
  4090a6:	e7db      	b.n	409060 <__divdi3+0x23c>

004090a8 <__udivdi3>:
  4090a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  4090ac:	2b00      	cmp	r3, #0
  4090ae:	d140      	bne.n	409132 <__udivdi3+0x8a>
  4090b0:	428a      	cmp	r2, r1
  4090b2:	4604      	mov	r4, r0
  4090b4:	4615      	mov	r5, r2
  4090b6:	d94a      	bls.n	40914e <__udivdi3+0xa6>
  4090b8:	fab2 f382 	clz	r3, r2
  4090bc:	460f      	mov	r7, r1
  4090be:	b14b      	cbz	r3, 4090d4 <__udivdi3+0x2c>
  4090c0:	f1c3 0620 	rsb	r6, r3, #32
  4090c4:	4099      	lsls	r1, r3
  4090c6:	fa00 f403 	lsl.w	r4, r0, r3
  4090ca:	fa02 f503 	lsl.w	r5, r2, r3
  4090ce:	40f0      	lsrs	r0, r6
  4090d0:	ea40 0701 	orr.w	r7, r0, r1
  4090d4:	0c29      	lsrs	r1, r5, #16
  4090d6:	0c26      	lsrs	r6, r4, #16
  4090d8:	fa1f fe85 	uxth.w	lr, r5
  4090dc:	fbb7 f0f1 	udiv	r0, r7, r1
  4090e0:	fb01 7710 	mls	r7, r1, r0, r7
  4090e4:	fb0e f200 	mul.w	r2, lr, r0
  4090e8:	ea46 4307 	orr.w	r3, r6, r7, lsl #16
  4090ec:	429a      	cmp	r2, r3
  4090ee:	d907      	bls.n	409100 <__udivdi3+0x58>
  4090f0:	195b      	adds	r3, r3, r5
  4090f2:	f080 80ea 	bcs.w	4092ca <__udivdi3+0x222>
  4090f6:	429a      	cmp	r2, r3
  4090f8:	f240 80e7 	bls.w	4092ca <__udivdi3+0x222>
  4090fc:	3802      	subs	r0, #2
  4090fe:	442b      	add	r3, r5
  409100:	1a9a      	subs	r2, r3, r2
  409102:	b2a4      	uxth	r4, r4
  409104:	fbb2 f3f1 	udiv	r3, r2, r1
  409108:	fb01 2213 	mls	r2, r1, r3, r2
  40910c:	fb0e fe03 	mul.w	lr, lr, r3
  409110:	ea44 4202 	orr.w	r2, r4, r2, lsl #16
  409114:	4596      	cmp	lr, r2
  409116:	d906      	bls.n	409126 <__udivdi3+0x7e>
  409118:	1952      	adds	r2, r2, r5
  40911a:	f080 80da 	bcs.w	4092d2 <__udivdi3+0x22a>
  40911e:	4596      	cmp	lr, r2
  409120:	f240 80d7 	bls.w	4092d2 <__udivdi3+0x22a>
  409124:	3b02      	subs	r3, #2
  409126:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
  40912a:	2600      	movs	r6, #0
  40912c:	4631      	mov	r1, r6
  40912e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  409132:	428b      	cmp	r3, r1
  409134:	d844      	bhi.n	4091c0 <__udivdi3+0x118>
  409136:	fab3 f683 	clz	r6, r3
  40913a:	2e00      	cmp	r6, #0
  40913c:	d145      	bne.n	4091ca <__udivdi3+0x122>
  40913e:	4282      	cmp	r2, r0
  409140:	f240 80bf 	bls.w	4092c2 <__udivdi3+0x21a>
  409144:	428b      	cmp	r3, r1
  409146:	f0c0 80bc 	bcc.w	4092c2 <__udivdi3+0x21a>
  40914a:	4630      	mov	r0, r6
  40914c:	e7ee      	b.n	40912c <__udivdi3+0x84>
  40914e:	b912      	cbnz	r2, 409156 <__udivdi3+0xae>
  409150:	2501      	movs	r5, #1
  409152:	fbb5 f5f2 	udiv	r5, r5, r2
  409156:	fab5 f285 	clz	r2, r5
  40915a:	2a00      	cmp	r2, #0
  40915c:	d17b      	bne.n	409256 <__udivdi3+0x1ae>
  40915e:	1b4a      	subs	r2, r1, r5
  409160:	0c2f      	lsrs	r7, r5, #16
  409162:	fa1f fe85 	uxth.w	lr, r5
  409166:	2601      	movs	r6, #1
  409168:	0c23      	lsrs	r3, r4, #16
  40916a:	fbb2 f0f7 	udiv	r0, r2, r7
  40916e:	fb07 2210 	mls	r2, r7, r0, r2
  409172:	fb0e fc00 	mul.w	ip, lr, r0
  409176:	ea43 4102 	orr.w	r1, r3, r2, lsl #16
  40917a:	458c      	cmp	ip, r1
  40917c:	d907      	bls.n	40918e <__udivdi3+0xe6>
  40917e:	1949      	adds	r1, r1, r5
  409180:	f080 80a1 	bcs.w	4092c6 <__udivdi3+0x21e>
  409184:	458c      	cmp	ip, r1
  409186:	f240 809e 	bls.w	4092c6 <__udivdi3+0x21e>
  40918a:	3802      	subs	r0, #2
  40918c:	4429      	add	r1, r5
  40918e:	ebcc 0101 	rsb	r1, ip, r1
  409192:	b2a4      	uxth	r4, r4
  409194:	fbb1 f3f7 	udiv	r3, r1, r7
  409198:	fb07 1113 	mls	r1, r7, r3, r1
  40919c:	fb0e fe03 	mul.w	lr, lr, r3
  4091a0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
  4091a4:	45a6      	cmp	lr, r4
  4091a6:	d906      	bls.n	4091b6 <__udivdi3+0x10e>
  4091a8:	1964      	adds	r4, r4, r5
  4091aa:	f080 8090 	bcs.w	4092ce <__udivdi3+0x226>
  4091ae:	45a6      	cmp	lr, r4
  4091b0:	f240 808d 	bls.w	4092ce <__udivdi3+0x226>
  4091b4:	3b02      	subs	r3, #2
  4091b6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
  4091ba:	4631      	mov	r1, r6
  4091bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4091c0:	2600      	movs	r6, #0
  4091c2:	4630      	mov	r0, r6
  4091c4:	4631      	mov	r1, r6
  4091c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4091ca:	f1c6 0520 	rsb	r5, r6, #32
  4091ce:	40b3      	lsls	r3, r6
  4091d0:	fa02 f706 	lsl.w	r7, r2, r6
  4091d4:	fa01 f406 	lsl.w	r4, r1, r6
  4091d8:	40ea      	lsrs	r2, r5
  4091da:	40e9      	lsrs	r1, r5
  4091dc:	fa20 f505 	lsr.w	r5, r0, r5
  4091e0:	431a      	orrs	r2, r3
  4091e2:	4325      	orrs	r5, r4
  4091e4:	ea4f 4c12 	mov.w	ip, r2, lsr #16
  4091e8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
  4091ec:	b293      	uxth	r3, r2
  4091ee:	fbb1 f8fc 	udiv	r8, r1, ip
  4091f2:	fb0c 1118 	mls	r1, ip, r8, r1
  4091f6:	fb03 f408 	mul.w	r4, r3, r8
  4091fa:	ea4e 4101 	orr.w	r1, lr, r1, lsl #16
  4091fe:	428c      	cmp	r4, r1
  409200:	d906      	bls.n	409210 <__udivdi3+0x168>
  409202:	1889      	adds	r1, r1, r2
  409204:	d269      	bcs.n	4092da <__udivdi3+0x232>
  409206:	428c      	cmp	r4, r1
  409208:	d967      	bls.n	4092da <__udivdi3+0x232>
  40920a:	f1a8 0802 	sub.w	r8, r8, #2
  40920e:	4411      	add	r1, r2
  409210:	1b09      	subs	r1, r1, r4
  409212:	b2ad      	uxth	r5, r5
  409214:	fbb1 f4fc 	udiv	r4, r1, ip
  409218:	fb0c 1114 	mls	r1, ip, r4, r1
  40921c:	fb03 fe04 	mul.w	lr, r3, r4
  409220:	ea45 4301 	orr.w	r3, r5, r1, lsl #16
  409224:	459e      	cmp	lr, r3
  409226:	d905      	bls.n	409234 <__udivdi3+0x18c>
  409228:	189b      	adds	r3, r3, r2
  40922a:	d254      	bcs.n	4092d6 <__udivdi3+0x22e>
  40922c:	459e      	cmp	lr, r3
  40922e:	d952      	bls.n	4092d6 <__udivdi3+0x22e>
  409230:	3c02      	subs	r4, #2
  409232:	4413      	add	r3, r2
  409234:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
  409238:	ebce 0303 	rsb	r3, lr, r3
  40923c:	fba4 8907 	umull	r8, r9, r4, r7
  409240:	454b      	cmp	r3, r9
  409242:	d303      	bcc.n	40924c <__udivdi3+0x1a4>
  409244:	d151      	bne.n	4092ea <__udivdi3+0x242>
  409246:	40b0      	lsls	r0, r6
  409248:	4540      	cmp	r0, r8
  40924a:	d24e      	bcs.n	4092ea <__udivdi3+0x242>
  40924c:	2600      	movs	r6, #0
  40924e:	1e60      	subs	r0, r4, #1
  409250:	4631      	mov	r1, r6
  409252:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  409256:	f1c2 0620 	rsb	r6, r2, #32
  40925a:	4095      	lsls	r5, r2
  40925c:	fa01 f302 	lsl.w	r3, r1, r2
  409260:	fa00 f402 	lsl.w	r4, r0, r2
  409264:	0c2f      	lsrs	r7, r5, #16
  409266:	40f1      	lsrs	r1, r6
  409268:	40f0      	lsrs	r0, r6
  40926a:	fa1f fe85 	uxth.w	lr, r5
  40926e:	fbb1 f6f7 	udiv	r6, r1, r7
  409272:	4318      	orrs	r0, r3
  409274:	fb07 1116 	mls	r1, r7, r6, r1
  409278:	fb0e f206 	mul.w	r2, lr, r6
  40927c:	ea4f 4c10 	mov.w	ip, r0, lsr #16
  409280:	ea4c 4301 	orr.w	r3, ip, r1, lsl #16
  409284:	429a      	cmp	r2, r3
  409286:	d905      	bls.n	409294 <__udivdi3+0x1ec>
  409288:	195b      	adds	r3, r3, r5
  40928a:	d229      	bcs.n	4092e0 <__udivdi3+0x238>
  40928c:	429a      	cmp	r2, r3
  40928e:	d927      	bls.n	4092e0 <__udivdi3+0x238>
  409290:	3e02      	subs	r6, #2
  409292:	442b      	add	r3, r5
  409294:	1a9b      	subs	r3, r3, r2
  409296:	b280      	uxth	r0, r0
  409298:	fbb3 fcf7 	udiv	ip, r3, r7
  40929c:	fb07 331c 	mls	r3, r7, ip, r3
  4092a0:	fb0e f10c 	mul.w	r1, lr, ip
  4092a4:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
  4092a8:	4299      	cmp	r1, r3
  4092aa:	d906      	bls.n	4092ba <__udivdi3+0x212>
  4092ac:	195b      	adds	r3, r3, r5
  4092ae:	d219      	bcs.n	4092e4 <__udivdi3+0x23c>
  4092b0:	4299      	cmp	r1, r3
  4092b2:	d917      	bls.n	4092e4 <__udivdi3+0x23c>
  4092b4:	f1ac 0c02 	sub.w	ip, ip, #2
  4092b8:	442b      	add	r3, r5
  4092ba:	1a5a      	subs	r2, r3, r1
  4092bc:	ea4c 4606 	orr.w	r6, ip, r6, lsl #16
  4092c0:	e752      	b.n	409168 <__udivdi3+0xc0>
  4092c2:	2001      	movs	r0, #1
  4092c4:	e732      	b.n	40912c <__udivdi3+0x84>
  4092c6:	3801      	subs	r0, #1
  4092c8:	e761      	b.n	40918e <__udivdi3+0xe6>
  4092ca:	3801      	subs	r0, #1
  4092cc:	e718      	b.n	409100 <__udivdi3+0x58>
  4092ce:	3b01      	subs	r3, #1
  4092d0:	e771      	b.n	4091b6 <__udivdi3+0x10e>
  4092d2:	3b01      	subs	r3, #1
  4092d4:	e727      	b.n	409126 <__udivdi3+0x7e>
  4092d6:	3c01      	subs	r4, #1
  4092d8:	e7ac      	b.n	409234 <__udivdi3+0x18c>
  4092da:	f108 38ff 	add.w	r8, r8, #4294967295
  4092de:	e797      	b.n	409210 <__udivdi3+0x168>
  4092e0:	3e01      	subs	r6, #1
  4092e2:	e7d7      	b.n	409294 <__udivdi3+0x1ec>
  4092e4:	f10c 3cff 	add.w	ip, ip, #4294967295
  4092e8:	e7e7      	b.n	4092ba <__udivdi3+0x212>
  4092ea:	4620      	mov	r0, r4
  4092ec:	2600      	movs	r6, #0
  4092ee:	e71d      	b.n	40912c <__udivdi3+0x84>
  4092f0:	39414350 	.word	0x39414350
  4092f4:	3a323539 	.word	0x3a323539
  4092f8:	706d7420 	.word	0x706d7420
  4092fc:	25203a31 	.word	0x25203a31
  409300:	6d742078 	.word	0x6d742078
  409304:	203a3270 	.word	0x203a3270
  409308:	74207825 	.word	0x74207825
  40930c:	3a33706d 	.word	0x3a33706d
  409310:	20782520 	.word	0x20782520
  409314:	34706d74 	.word	0x34706d74
  409318:	7825203a 	.word	0x7825203a
  40931c:	00000a0d 	.word	0x00000a0d
  409320:	0001c200 	.word	0x0001c200
  409324:	000000c0 	.word	0x000000c0
  409328:	00000800 	.word	0x00000800
	...
  409338:	202d462d 	.word	0x202d462d
  40933c:	74737953 	.word	0x74737953
  409340:	206b6369 	.word	0x206b6369
  409344:	666e6f63 	.word	0x666e6f63
  409348:	72756769 	.word	0x72756769
  40934c:	6f697461 	.word	0x6f697461
  409350:	7265206e 	.word	0x7265206e
  409354:	0d726f72 	.word	0x0d726f72
  409358:	00000000 	.word	0x00000000
  40935c:	00000960 	.word	0x00000960
  409360:	000000c0 	.word	0x000000c0
  409364:	00000800 	.word	0x00000800
  409368:	00000000 	.word	0x00000000
  40936c:	00006325 	.word	0x00006325
  409370:	20636461 	.word	0x20636461
  409374:	25206863 	.word	0x25206863
  409378:	25203a64 	.word	0x25203a64
  40937c:	0a0d7834 	.word	0x0a0d7834
  409380:	00000000 	.word	0x00000000
  409384:	61766e49 	.word	0x61766e49
  409388:	2064696c 	.word	0x2064696c
  40938c:	69726573 	.word	0x69726573
  409390:	49206c61 	.word	0x49206c61
  409394:	68632044 	.word	0x68632044
  409398:	736b6365 	.word	0x736b6365
  40939c:	0d2e6d75 	.word	0x0d2e6d75
  4093a0:	0000000a 	.word	0x0000000a
  4093a4:	2044454c 	.word	0x2044454c
  4093a8:	72616f62 	.word	0x72616f62
  4093ac:	64252064 	.word	0x64252064
  4093b0:	72657320 	.word	0x72657320
  4093b4:	206c6169 	.word	0x206c6169
  4093b8:	203a4449 	.word	0x203a4449
  4093bc:	78257825 	.word	0x78257825
  4093c0:	78257825 	.word	0x78257825
  4093c4:	78257825 	.word	0x78257825
  4093c8:	00000a0d 	.word	0x00000a0d
  4093cc:	62206f6e 	.word	0x62206f6e
  4093d0:	6472616f 	.word	0x6472616f
  4093d4:	69687420 	.word	0x69687420
  4093d8:	6c732073 	.word	0x6c732073
  4093dc:	0a0d746f 	.word	0x0a0d746f
  4093e0:	00000000 	.word	0x00000000
  4093e4:	64616552 	.word	0x64616552
  4093e8:	000a0d79 	.word	0x000a0d79
  4093ec:	61656c43 	.word	0x61656c43
  4093f0:	000a0d6e 	.word	0x000a0d6e
  4093f4:	74726944 	.word	0x74726944
  4093f8:	000a0d79 	.word	0x000a0d79
  4093fc:	6f727245 	.word	0x6f727245
  409400:	000a0d72 	.word	0x000a0d72
  409404:	6c656853 	.word	0x6c656853
  409408:	0a0d3166 	.word	0x0a0d3166
  40940c:	00000000 	.word	0x00000000
  409410:	6c656853 	.word	0x6c656853
  409414:	0a0d3266 	.word	0x0a0d3266
  409418:	00000000 	.word	0x00000000
  40941c:	6c656853 	.word	0x6c656853
  409420:	0a0d3366 	.word	0x0a0d3366
  409424:	00000000 	.word	0x00000000
  409428:	6c656853 	.word	0x6c656853
  40942c:	0a0d3466 	.word	0x0a0d3466
  409430:	00000000 	.word	0x00000000
  409434:	3a306863 	.word	0x3a306863
  409438:	20782520 	.word	0x20782520
  40943c:	3a316863 	.word	0x3a316863
  409440:	20782520 	.word	0x20782520
  409444:	3a326863 	.word	0x3a326863
  409448:	20782520 	.word	0x20782520
  40944c:	3a336863 	.word	0x3a336863
  409450:	0d782520 	.word	0x0d782520
  409454:	0000000a 	.word	0x0000000a
  409458:	61656c43 	.word	0x61656c43
  40945c:	676e696e 	.word	0x676e696e
  409460:	00000a0d 	.word	0x00000a0d
  409464:	00000043 	.word	0x00000043

00409468 <_global_impure_ptr>:
  409468:	20400088 0000000a                       ..@ ....

00409470 <zeroes.6911>:
  409470:	30303030 30303030 30303030 30303030     0000000000000000

00409480 <blanks.6910>:
  409480:	20202020 20202020 20202020 20202020                     
  409490:	00464e49 00666e69 004e414e 006e616e     INF.inf.NAN.nan.
  4094a0:	33323130 37363534 42413938 46454443     0123456789ABCDEF
  4094b0:	00000000 33323130 37363534 62613938     ....0123456789ab
  4094c0:	66656463 00000000 6c756e28 0000296c     cdef....(null)..
  4094d0:	00000030 69666e49 7974696e 00000000     0...Infinity....
  4094e0:	004e614e 49534f50 00000058 0000002e     NaN.POSIX.......

004094f0 <__mprec_tens>:
  4094f0:	00000000 3ff00000 00000000 40240000     .......?......$@
  409500:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
  409510:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
  409520:	00000000 412e8480 00000000 416312d0     .......A......cA
  409530:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
  409540:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
  409550:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
  409560:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
  409570:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
  409580:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
  409590:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
  4095a0:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
  4095b0:	79d99db4 44ea7843                       ...yCx.D

004095b8 <p05.5302>:
  4095b8:	00000005 00000019 0000007d 00000000     ........}.......

004095c8 <__mprec_bigtens>:
  4095c8:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
  4095d8:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
  4095e8:	7f73bf3c 75154fdd                       <.s..O.u

004095f0 <_init>:
  4095f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4095f2:	bf00      	nop
  4095f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4095f6:	bc08      	pop	{r3}
  4095f8:	469e      	mov	lr, r3
  4095fa:	4770      	bx	lr

004095fc <__init_array_start>:
  4095fc:	00405479 	.word	0x00405479

00409600 <__frame_dummy_init_array_entry>:
  409600:	00400165                                e.@.

00409604 <_fini>:
  409604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  409606:	bf00      	nop
  409608:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40960a:	bc08      	pop	{r3}
  40960c:	469e      	mov	lr, r3
  40960e:	4770      	bx	lr

00409610 <__fini_array_start>:
  409610:	00400141 	.word	0x00400141
