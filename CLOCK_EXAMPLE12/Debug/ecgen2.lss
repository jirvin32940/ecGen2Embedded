
ecgen2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00008bec  00400000  00400000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00408bec  00408bec  00010bec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000008f4  20400000  00408bf4  00018000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          000008e4  204008f4  004094e8  000188f4  2**2
                  ALLOC
  4 .stack        00002000  204011d8  00409dcc  000188f4  2**0
                  ALLOC
  5 .heap         00000200  204031d8  0040bdcc  000188f4  2**0
                  ALLOC
  6 .ARM.attributes 00000033  00000000  00000000  000188f4  2**0
                  CONTENTS, READONLY
  7 .comment      0000005b  00000000  00000000  00018927  2**0
                  CONTENTS, READONLY
  8 .debug_info   0000d095  00000000  00000000  00018982  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00001d42  00000000  00000000  00025a17  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00008038  00000000  00000000  00027759  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000d80  00000000  00000000  0002f791  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000c80  00000000  00000000  00030511  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0001e3d6  00000000  00000000  00031191  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000ba0b  00000000  00000000  0004f567  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0008b3cb  00000000  00000000  0005af72  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00004954  00000000  00000000  000e6340  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <_sfixed>:
  400000:	204031d8 	.word	0x204031d8
  400004:	004016e1 	.word	0x004016e1
  400008:	00401765 	.word	0x00401765
  40000c:	00401765 	.word	0x00401765
  400010:	00401765 	.word	0x00401765
  400014:	00401765 	.word	0x00401765
  400018:	00401765 	.word	0x00401765
	...
  40002c:	00401765 	.word	0x00401765
  400030:	00401765 	.word	0x00401765
  400034:	00000000 	.word	0x00000000
  400038:	00401765 	.word	0x00401765
  40003c:	0040291d 	.word	0x0040291d
  400040:	00401765 	.word	0x00401765
  400044:	00401765 	.word	0x00401765
  400048:	00401765 	.word	0x00401765
  40004c:	00401765 	.word	0x00401765
  400050:	00401765 	.word	0x00401765
  400054:	00401765 	.word	0x00401765
  400058:	00401765 	.word	0x00401765
  40005c:	00401765 	.word	0x00401765
  400060:	00401765 	.word	0x00401765
  400064:	00000000 	.word	0x00000000
  400068:	00400c05 	.word	0x00400c05
  40006c:	00400c1d 	.word	0x00400c1d
  400070:	00400c35 	.word	0x00400c35
  400074:	00402945 	.word	0x00402945
  400078:	00401765 	.word	0x00401765
  40007c:	00401765 	.word	0x00401765
  400080:	00400c4d 	.word	0x00400c4d
  400084:	00400c65 	.word	0x00400c65
  400088:	00401765 	.word	0x00401765
  40008c:	00401765 	.word	0x00401765
  400090:	00401765 	.word	0x00401765
  400094:	00401765 	.word	0x00401765
  400098:	00401765 	.word	0x00401765
  40009c:	00401765 	.word	0x00401765
  4000a0:	00401765 	.word	0x00401765
  4000a4:	00401765 	.word	0x00401765
  4000a8:	00401765 	.word	0x00401765
  4000ac:	00401765 	.word	0x00401765
  4000b0:	00401765 	.word	0x00401765
  4000b4:	00401765 	.word	0x00401765
  4000b8:	00401765 	.word	0x00401765
  4000bc:	00401765 	.word	0x00401765
  4000c0:	00401765 	.word	0x00401765
  4000c4:	00401765 	.word	0x00401765
  4000c8:	00401765 	.word	0x00401765
  4000cc:	00401765 	.word	0x00401765
  4000d0:	00000000 	.word	0x00000000
  4000d4:	00401765 	.word	0x00401765
  4000d8:	00000000 	.word	0x00000000
  4000dc:	00401765 	.word	0x00401765
  4000e0:	00401765 	.word	0x00401765
  4000e4:	00401765 	.word	0x00401765
  4000e8:	00401765 	.word	0x00401765
  4000ec:	00401765 	.word	0x00401765
  4000f0:	00401765 	.word	0x00401765
  4000f4:	00401765 	.word	0x00401765
  4000f8:	00401765 	.word	0x00401765
  4000fc:	00401765 	.word	0x00401765
  400100:	00401765 	.word	0x00401765
  400104:	00401765 	.word	0x00401765
  400108:	00401765 	.word	0x00401765
  40010c:	00401765 	.word	0x00401765
  400110:	00401765 	.word	0x00401765
	...
  400120:	00401765 	.word	0x00401765
  400124:	00401765 	.word	0x00401765
  400128:	00401765 	.word	0x00401765
  40012c:	00401765 	.word	0x00401765
  400130:	00401765 	.word	0x00401765
  400134:	00000000 	.word	0x00000000
  400138:	00401765 	.word	0x00401765
  40013c:	00401765 	.word	0x00401765

00400140 <__do_global_dtors_aux>:
  400140:	b510      	push	{r4, lr}
  400142:	4c05      	ldr	r4, [pc, #20]	; (400158 <__do_global_dtors_aux+0x18>)
  400144:	7823      	ldrb	r3, [r4, #0]
  400146:	b933      	cbnz	r3, 400156 <__do_global_dtors_aux+0x16>
  400148:	4b04      	ldr	r3, [pc, #16]	; (40015c <__do_global_dtors_aux+0x1c>)
  40014a:	b113      	cbz	r3, 400152 <__do_global_dtors_aux+0x12>
  40014c:	4804      	ldr	r0, [pc, #16]	; (400160 <__do_global_dtors_aux+0x20>)
  40014e:	f3af 8000 	nop.w
  400152:	2301      	movs	r3, #1
  400154:	7023      	strb	r3, [r4, #0]
  400156:	bd10      	pop	{r4, pc}
  400158:	204008f4 	.word	0x204008f4
  40015c:	00000000 	.word	0x00000000
  400160:	00408bf4 	.word	0x00408bf4

00400164 <frame_dummy>:
  400164:	4b08      	ldr	r3, [pc, #32]	; (400188 <frame_dummy+0x24>)
  400166:	b510      	push	{r4, lr}
  400168:	b11b      	cbz	r3, 400172 <frame_dummy+0xe>
  40016a:	4808      	ldr	r0, [pc, #32]	; (40018c <frame_dummy+0x28>)
  40016c:	4908      	ldr	r1, [pc, #32]	; (400190 <frame_dummy+0x2c>)
  40016e:	f3af 8000 	nop.w
  400172:	4808      	ldr	r0, [pc, #32]	; (400194 <frame_dummy+0x30>)
  400174:	6803      	ldr	r3, [r0, #0]
  400176:	b903      	cbnz	r3, 40017a <frame_dummy+0x16>
  400178:	bd10      	pop	{r4, pc}
  40017a:	4b07      	ldr	r3, [pc, #28]	; (400198 <frame_dummy+0x34>)
  40017c:	2b00      	cmp	r3, #0
  40017e:	d0fb      	beq.n	400178 <frame_dummy+0x14>
  400180:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400184:	4718      	bx	r3
  400186:	bf00      	nop
  400188:	00000000 	.word	0x00000000
  40018c:	00408bf4 	.word	0x00408bf4
  400190:	204008f8 	.word	0x204008f8
  400194:	00408bf4 	.word	0x00408bf4
  400198:	00000000 	.word	0x00000000

0040019c <osc_enable>:
#define OSC_MAINCK_XTAL_HZ      BOARD_FREQ_MAINCK_XTAL    //!< External crystal oscillator.
#define OSC_MAINCK_BYPASS_HZ    BOARD_FREQ_MAINCK_BYPASS  //!< External bypass oscillator.
//@}

static inline void osc_enable(uint32_t ul_id)
{
  40019c:	b580      	push	{r7, lr}
  40019e:	b082      	sub	sp, #8
  4001a0:	af00      	add	r7, sp, #0
  4001a2:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  4001a4:	687b      	ldr	r3, [r7, #4]
  4001a6:	2b07      	cmp	r3, #7
  4001a8:	d830      	bhi.n	40020c <osc_enable+0x70>
  4001aa:	a201      	add	r2, pc, #4	; (adr r2, 4001b0 <osc_enable+0x14>)
  4001ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4001b0:	0040020d 	.word	0x0040020d
  4001b4:	004001d1 	.word	0x004001d1
  4001b8:	004001d9 	.word	0x004001d9
  4001bc:	004001e1 	.word	0x004001e1
  4001c0:	004001e9 	.word	0x004001e9
  4001c4:	004001f1 	.word	0x004001f1
  4001c8:	004001f9 	.word	0x004001f9
  4001cc:	00400203 	.word	0x00400203
	case OSC_SLCK_32K_RC:
		break;

	case OSC_SLCK_32K_XTAL:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
  4001d0:	2000      	movs	r0, #0
  4001d2:	4b10      	ldr	r3, [pc, #64]	; (400214 <osc_enable+0x78>)
  4001d4:	4798      	blx	r3
		break;
  4001d6:	e019      	b.n	40020c <osc_enable+0x70>

	case OSC_SLCK_32K_BYPASS:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
  4001d8:	2001      	movs	r0, #1
  4001da:	4b0e      	ldr	r3, [pc, #56]	; (400214 <osc_enable+0x78>)
  4001dc:	4798      	blx	r3
		break;
  4001de:	e015      	b.n	40020c <osc_enable+0x70>


	case OSC_MAINCK_4M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
  4001e0:	2000      	movs	r0, #0
  4001e2:	4b0d      	ldr	r3, [pc, #52]	; (400218 <osc_enable+0x7c>)
  4001e4:	4798      	blx	r3
		break;
  4001e6:	e011      	b.n	40020c <osc_enable+0x70>

	case OSC_MAINCK_8M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
  4001e8:	2010      	movs	r0, #16
  4001ea:	4b0b      	ldr	r3, [pc, #44]	; (400218 <osc_enable+0x7c>)
  4001ec:	4798      	blx	r3
		break;
  4001ee:	e00d      	b.n	40020c <osc_enable+0x70>

	case OSC_MAINCK_12M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
  4001f0:	2020      	movs	r0, #32
  4001f2:	4b09      	ldr	r3, [pc, #36]	; (400218 <osc_enable+0x7c>)
  4001f4:	4798      	blx	r3
		break;
  4001f6:	e009      	b.n	40020c <osc_enable+0x70>


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  4001f8:	2000      	movs	r0, #0
  4001fa:	213e      	movs	r1, #62	; 0x3e
  4001fc:	4b07      	ldr	r3, [pc, #28]	; (40021c <osc_enable+0x80>)
  4001fe:	4798      	blx	r3
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
  400200:	e004      	b.n	40020c <osc_enable+0x70>

	case OSC_MAINCK_BYPASS:
		pmc_switch_mainck_to_xtal(PMC_OSC_BYPASS,
  400202:	2001      	movs	r0, #1
  400204:	213e      	movs	r1, #62	; 0x3e
  400206:	4b05      	ldr	r3, [pc, #20]	; (40021c <osc_enable+0x80>)
  400208:	4798      	blx	r3
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
  40020a:	bf00      	nop
	}
}
  40020c:	3708      	adds	r7, #8
  40020e:	46bd      	mov	sp, r7
  400210:	bd80      	pop	{r7, pc}
  400212:	bf00      	nop
  400214:	00400d79 	.word	0x00400d79
  400218:	00400de5 	.word	0x00400de5
  40021c:	00400e55 	.word	0x00400e55

00400220 <osc_is_ready>:
		break;
	}
}

static inline bool osc_is_ready(uint32_t ul_id)
{
  400220:	b580      	push	{r7, lr}
  400222:	b082      	sub	sp, #8
  400224:	af00      	add	r7, sp, #0
  400226:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  400228:	687b      	ldr	r3, [r7, #4]
  40022a:	2b07      	cmp	r3, #7
  40022c:	d826      	bhi.n	40027c <osc_is_ready+0x5c>
  40022e:	a201      	add	r2, pc, #4	; (adr r2, 400234 <osc_is_ready+0x14>)
  400230:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  400234:	00400255 	.word	0x00400255
  400238:	00400259 	.word	0x00400259
  40023c:	00400259 	.word	0x00400259
  400240:	0040026b 	.word	0x0040026b
  400244:	0040026b 	.word	0x0040026b
  400248:	0040026b 	.word	0x0040026b
  40024c:	0040026b 	.word	0x0040026b
  400250:	0040026b 	.word	0x0040026b
	case OSC_SLCK_32K_RC:
		return 1;
  400254:	2301      	movs	r3, #1
  400256:	e012      	b.n	40027e <osc_is_ready+0x5e>

	case OSC_SLCK_32K_XTAL:
	case OSC_SLCK_32K_BYPASS:
		return pmc_osc_is_ready_32kxtal();
  400258:	4b0b      	ldr	r3, [pc, #44]	; (400288 <osc_is_ready+0x68>)
  40025a:	4798      	blx	r3
  40025c:	4603      	mov	r3, r0
  40025e:	2b00      	cmp	r3, #0
  400260:	bf14      	ite	ne
  400262:	2301      	movne	r3, #1
  400264:	2300      	moveq	r3, #0
  400266:	b2db      	uxtb	r3, r3
  400268:	e009      	b.n	40027e <osc_is_ready+0x5e>
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  40026a:	4b08      	ldr	r3, [pc, #32]	; (40028c <osc_is_ready+0x6c>)
  40026c:	4798      	blx	r3
  40026e:	4603      	mov	r3, r0
  400270:	2b00      	cmp	r3, #0
  400272:	bf14      	ite	ne
  400274:	2301      	movne	r3, #1
  400276:	2300      	moveq	r3, #0
  400278:	b2db      	uxtb	r3, r3
  40027a:	e000      	b.n	40027e <osc_is_ready+0x5e>
	}

	return 0;
  40027c:	2300      	movs	r3, #0
}
  40027e:	4618      	mov	r0, r3
  400280:	3708      	adds	r7, #8
  400282:	46bd      	mov	sp, r7
  400284:	bd80      	pop	{r7, pc}
  400286:	bf00      	nop
  400288:	00400db1 	.word	0x00400db1
  40028c:	00400ecd 	.word	0x00400ecd

00400290 <osc_get_rate>:

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  400290:	b480      	push	{r7}
  400292:	b083      	sub	sp, #12
  400294:	af00      	add	r7, sp, #0
  400296:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  400298:	687b      	ldr	r3, [r7, #4]
  40029a:	2b07      	cmp	r3, #7
  40029c:	d825      	bhi.n	4002ea <osc_get_rate+0x5a>
  40029e:	a201      	add	r2, pc, #4	; (adr r2, 4002a4 <osc_get_rate+0x14>)
  4002a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4002a4:	004002c5 	.word	0x004002c5
  4002a8:	004002cb 	.word	0x004002cb
  4002ac:	004002d1 	.word	0x004002d1
  4002b0:	004002d7 	.word	0x004002d7
  4002b4:	004002db 	.word	0x004002db
  4002b8:	004002df 	.word	0x004002df
  4002bc:	004002e3 	.word	0x004002e3
  4002c0:	004002e7 	.word	0x004002e7
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  4002c4:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  4002c8:	e010      	b.n	4002ec <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  4002ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4002ce:	e00d      	b.n	4002ec <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  4002d0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4002d4:	e00a      	b.n	4002ec <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  4002d6:	4b08      	ldr	r3, [pc, #32]	; (4002f8 <osc_get_rate+0x68>)
  4002d8:	e008      	b.n	4002ec <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  4002da:	4b08      	ldr	r3, [pc, #32]	; (4002fc <osc_get_rate+0x6c>)
  4002dc:	e006      	b.n	4002ec <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  4002de:	4b08      	ldr	r3, [pc, #32]	; (400300 <osc_get_rate+0x70>)
  4002e0:	e004      	b.n	4002ec <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  4002e2:	4b08      	ldr	r3, [pc, #32]	; (400304 <osc_get_rate+0x74>)
  4002e4:	e002      	b.n	4002ec <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  4002e6:	4b06      	ldr	r3, [pc, #24]	; (400300 <osc_get_rate+0x70>)
  4002e8:	e000      	b.n	4002ec <osc_get_rate+0x5c>
	}

	return 0;
  4002ea:	2300      	movs	r3, #0
}
  4002ec:	4618      	mov	r0, r3
  4002ee:	370c      	adds	r7, #12
  4002f0:	46bd      	mov	sp, r7
  4002f2:	f85d 7b04 	ldr.w	r7, [sp], #4
  4002f6:	4770      	bx	lr
  4002f8:	003d0900 	.word	0x003d0900
  4002fc:	007a1200 	.word	0x007a1200
  400300:	00b71b00 	.word	0x00b71b00
  400304:	00f42400 	.word	0x00f42400

00400308 <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
  400308:	b580      	push	{r7, lr}
  40030a:	b082      	sub	sp, #8
  40030c:	af00      	add	r7, sp, #0
  40030e:	4603      	mov	r3, r0
  400310:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
  400312:	bf00      	nop
  400314:	79fb      	ldrb	r3, [r7, #7]
  400316:	4618      	mov	r0, r3
  400318:	4b05      	ldr	r3, [pc, #20]	; (400330 <osc_wait_ready+0x28>)
  40031a:	4798      	blx	r3
  40031c:	4603      	mov	r3, r0
  40031e:	f083 0301 	eor.w	r3, r3, #1
  400322:	b2db      	uxtb	r3, r3
  400324:	2b00      	cmp	r3, #0
  400326:	d1f5      	bne.n	400314 <osc_wait_ready+0xc>
		/* Do nothing */
	}
}
  400328:	3708      	adds	r7, #8
  40032a:	46bd      	mov	sp, r7
  40032c:	bd80      	pop	{r7, pc}
  40032e:	bf00      	nop
  400330:	00400221 	.word	0x00400221

00400334 <pll_config_init>:
 * hardware mul+1 is hidden in this implementation. Use mul as mul effective
 * value.
 */
static inline void pll_config_init(struct pll_config *p_cfg,
		enum pll_source e_src, uint32_t ul_div, uint32_t ul_mul)
{
  400334:	b580      	push	{r7, lr}
  400336:	b086      	sub	sp, #24
  400338:	af00      	add	r7, sp, #0
  40033a:	60f8      	str	r0, [r7, #12]
  40033c:	607a      	str	r2, [r7, #4]
  40033e:	603b      	str	r3, [r7, #0]
  400340:	460b      	mov	r3, r1
  400342:	72fb      	strb	r3, [r7, #11]
	uint32_t vco_hz;

	Assert(e_src < PLL_NR_SOURCES);

	if (ul_div == 0 && ul_mul == 0) { /* Must only be true for UTMI PLL */
  400344:	687b      	ldr	r3, [r7, #4]
  400346:	2b00      	cmp	r3, #0
  400348:	d107      	bne.n	40035a <pll_config_init+0x26>
  40034a:	683b      	ldr	r3, [r7, #0]
  40034c:	2b00      	cmp	r3, #0
  40034e:	d104      	bne.n	40035a <pll_config_init+0x26>
		p_cfg->ctrl = CKGR_UCKR_UPLLCOUNT(PLL_COUNT);
  400350:	68fb      	ldr	r3, [r7, #12]
  400352:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
  400356:	601a      	str	r2, [r3, #0]
  400358:	e019      	b.n	40038e <pll_config_init+0x5a>
	} else { /* PLLA */
	/* Calculate internal VCO frequency */
	vco_hz = osc_get_rate(e_src) / ul_div;
  40035a:	7afb      	ldrb	r3, [r7, #11]
  40035c:	4618      	mov	r0, r3
  40035e:	4b0d      	ldr	r3, [pc, #52]	; (400394 <pll_config_init+0x60>)
  400360:	4798      	blx	r3
  400362:	4602      	mov	r2, r0
  400364:	687b      	ldr	r3, [r7, #4]
  400366:	fbb2 f3f3 	udiv	r3, r2, r3
  40036a:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_INPUT_MIN_HZ);
	Assert(vco_hz <= PLL_INPUT_MAX_HZ);

	vco_hz *= ul_mul;
  40036c:	697b      	ldr	r3, [r7, #20]
  40036e:	683a      	ldr	r2, [r7, #0]
  400370:	fb02 f303 	mul.w	r3, r2, r3
  400374:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_OUTPUT_MIN_HZ);
	Assert(vco_hz <= PLL_OUTPUT_MAX_HZ);

	/* PMC hardware will automatically make it mul+1 */
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) | CKGR_PLLAR_DIVA(ul_div)  \
  400376:	683b      	ldr	r3, [r7, #0]
  400378:	3b01      	subs	r3, #1
  40037a:	041a      	lsls	r2, r3, #16
  40037c:	4b06      	ldr	r3, [pc, #24]	; (400398 <pll_config_init+0x64>)
  40037e:	4013      	ands	r3, r2
  400380:	687a      	ldr	r2, [r7, #4]
  400382:	b2d2      	uxtb	r2, r2
  400384:	4313      	orrs	r3, r2
		| CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
  400386:	f443 527c 	orr.w	r2, r3, #16128	; 0x3f00
	vco_hz *= ul_mul;
	Assert(vco_hz >= PLL_OUTPUT_MIN_HZ);
	Assert(vco_hz <= PLL_OUTPUT_MAX_HZ);

	/* PMC hardware will automatically make it mul+1 */
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) | CKGR_PLLAR_DIVA(ul_div)  \
  40038a:	68fb      	ldr	r3, [r7, #12]
  40038c:	601a      	str	r2, [r3, #0]
		| CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
	}
}
  40038e:	3718      	adds	r7, #24
  400390:	46bd      	mov	sp, r7
  400392:	bd80      	pop	{r7, pc}
  400394:	00400291 	.word	0x00400291
  400398:	07ff0000 	.word	0x07ff0000

0040039c <pll_enable>:
		PMC->CKGR_UCKR = p_cfg->ctrl;
	}
}

static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
  40039c:	b580      	push	{r7, lr}
  40039e:	b082      	sub	sp, #8
  4003a0:	af00      	add	r7, sp, #0
  4003a2:	6078      	str	r0, [r7, #4]
  4003a4:	6039      	str	r1, [r7, #0]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  4003a6:	683b      	ldr	r3, [r7, #0]
  4003a8:	2b00      	cmp	r3, #0
  4003aa:	d108      	bne.n	4003be <pll_enable+0x22>
		pmc_disable_pllack(); // Always stop PLL first!
  4003ac:	4b08      	ldr	r3, [pc, #32]	; (4003d0 <pll_enable+0x34>)
  4003ae:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  4003b0:	4a08      	ldr	r2, [pc, #32]	; (4003d4 <pll_enable+0x38>)
  4003b2:	687b      	ldr	r3, [r7, #4]
  4003b4:	681b      	ldr	r3, [r3, #0]
  4003b6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  4003ba:	6293      	str	r3, [r2, #40]	; 0x28
  4003bc:	e005      	b.n	4003ca <pll_enable+0x2e>
	} else {
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
  4003be:	4a05      	ldr	r2, [pc, #20]	; (4003d4 <pll_enable+0x38>)
  4003c0:	687b      	ldr	r3, [r7, #4]
  4003c2:	681b      	ldr	r3, [r3, #0]
  4003c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  4003c8:	61d3      	str	r3, [r2, #28]
	}
}
  4003ca:	3708      	adds	r7, #8
  4003cc:	46bd      	mov	sp, r7
  4003ce:	bd80      	pop	{r7, pc}
  4003d0:	00400ee9 	.word	0x00400ee9
  4003d4:	400e0600 	.word	0x400e0600

004003d8 <pll_is_locked>:
		PMC->CKGR_UCKR &= ~CKGR_UCKR_UPLLEN;
	}
}

static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
  4003d8:	b580      	push	{r7, lr}
  4003da:	b082      	sub	sp, #8
  4003dc:	af00      	add	r7, sp, #0
  4003de:	6078      	str	r0, [r7, #4]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  4003e0:	687b      	ldr	r3, [r7, #4]
  4003e2:	2b00      	cmp	r3, #0
  4003e4:	d103      	bne.n	4003ee <pll_is_locked+0x16>
	return pmc_is_locked_pllack();
  4003e6:	4b05      	ldr	r3, [pc, #20]	; (4003fc <pll_is_locked+0x24>)
  4003e8:	4798      	blx	r3
  4003ea:	4603      	mov	r3, r0
  4003ec:	e002      	b.n	4003f4 <pll_is_locked+0x1c>
	} else {
		return pmc_is_locked_upll();
  4003ee:	4b04      	ldr	r3, [pc, #16]	; (400400 <pll_is_locked+0x28>)
  4003f0:	4798      	blx	r3
  4003f2:	4603      	mov	r3, r0
	}
}
  4003f4:	4618      	mov	r0, r3
  4003f6:	3708      	adds	r7, #8
  4003f8:	46bd      	mov	sp, r7
  4003fa:	bd80      	pop	{r7, pc}
  4003fc:	00400f01 	.word	0x00400f01
  400400:	00400f1d 	.word	0x00400f1d

00400404 <pll_enable_source>:

static inline void pll_enable_source(enum pll_source e_src)
{
  400404:	b580      	push	{r7, lr}
  400406:	b082      	sub	sp, #8
  400408:	af00      	add	r7, sp, #0
  40040a:	4603      	mov	r3, r0
  40040c:	71fb      	strb	r3, [r7, #7]
	switch (e_src) {
  40040e:	79fb      	ldrb	r3, [r7, #7]
  400410:	3b03      	subs	r3, #3
  400412:	2b04      	cmp	r3, #4
  400414:	d808      	bhi.n	400428 <pll_enable_source+0x24>
	case PLL_SRC_MAINCK_4M_RC:
	case PLL_SRC_MAINCK_8M_RC:
	case PLL_SRC_MAINCK_12M_RC:
	case PLL_SRC_MAINCK_XTAL:
	case PLL_SRC_MAINCK_BYPASS:
		osc_enable(e_src);
  400416:	79fb      	ldrb	r3, [r7, #7]
  400418:	4618      	mov	r0, r3
  40041a:	4b05      	ldr	r3, [pc, #20]	; (400430 <pll_enable_source+0x2c>)
  40041c:	4798      	blx	r3
		osc_wait_ready(e_src);
  40041e:	79fb      	ldrb	r3, [r7, #7]
  400420:	4618      	mov	r0, r3
  400422:	4b04      	ldr	r3, [pc, #16]	; (400434 <pll_enable_source+0x30>)
  400424:	4798      	blx	r3
		break;
  400426:	e000      	b.n	40042a <pll_enable_source+0x26>

	default:
		Assert(false);
		break;
  400428:	bf00      	nop
	}
}
  40042a:	3708      	adds	r7, #8
  40042c:	46bd      	mov	sp, r7
  40042e:	bd80      	pop	{r7, pc}
  400430:	0040019d 	.word	0x0040019d
  400434:	00400309 	.word	0x00400309

00400438 <pll_wait_for_lock>:
 *
 * \retval STATUS_OK The PLL is now locked.
 * \retval ERR_TIMEOUT Timed out waiting for PLL to become locked.
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
  400438:	b580      	push	{r7, lr}
  40043a:	b082      	sub	sp, #8
  40043c:	af00      	add	r7, sp, #0
  40043e:	6078      	str	r0, [r7, #4]
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  400440:	bf00      	nop
  400442:	6878      	ldr	r0, [r7, #4]
  400444:	4b04      	ldr	r3, [pc, #16]	; (400458 <pll_wait_for_lock+0x20>)
  400446:	4798      	blx	r3
  400448:	4603      	mov	r3, r0
  40044a:	2b00      	cmp	r3, #0
  40044c:	d0f9      	beq.n	400442 <pll_wait_for_lock+0xa>
		/* Do nothing */
	}

	return 0;
  40044e:	2300      	movs	r3, #0
}
  400450:	4618      	mov	r0, r3
  400452:	3708      	adds	r7, #8
  400454:	46bd      	mov	sp, r7
  400456:	bd80      	pop	{r7, pc}
  400458:	004003d9 	.word	0x004003d9

0040045c <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  40045c:	b580      	push	{r7, lr}
  40045e:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  400460:	2006      	movs	r0, #6
  400462:	4b05      	ldr	r3, [pc, #20]	; (400478 <sysclk_get_main_hz+0x1c>)
  400464:	4798      	blx	r3
  400466:	4602      	mov	r2, r0
  400468:	4613      	mov	r3, r2
  40046a:	009b      	lsls	r3, r3, #2
  40046c:	4413      	add	r3, r2
  40046e:	009a      	lsls	r2, r3, #2
  400470:	4413      	add	r3, r2
  400472:	089b      	lsrs	r3, r3, #2
#endif
	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  400474:	4618      	mov	r0, r3
  400476:	bd80      	pop	{r7, pc}
  400478:	00400291 	.word	0x00400291

0040047c <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
  40047c:	b580      	push	{r7, lr}
  40047e:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  400480:	4b02      	ldr	r3, [pc, #8]	; (40048c <sysclk_get_cpu_hz+0x10>)
  400482:	4798      	blx	r3
  400484:	4603      	mov	r3, r0
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  400486:	4618      	mov	r0, r3
  400488:	bd80      	pop	{r7, pc}
  40048a:	bf00      	nop
  40048c:	0040045d 	.word	0x0040045d

00400490 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  400490:	b590      	push	{r4, r7, lr}
  400492:	b083      	sub	sp, #12
  400494:	af00      	add	r7, sp, #0
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  400496:	4813      	ldr	r0, [pc, #76]	; (4004e4 <sysclk_init+0x54>)
  400498:	4b13      	ldr	r3, [pc, #76]	; (4004e8 <sysclk_init+0x58>)
  40049a:	4798      	blx	r3
		pmc_switch_mck_to_mainck(CONFIG_SYSCLK_PRES);
	}

#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
  40049c:	2006      	movs	r0, #6
  40049e:	4b13      	ldr	r3, [pc, #76]	; (4004ec <sysclk_init+0x5c>)
  4004a0:	4798      	blx	r3
		pll_config_defaults(&pllcfg, 0);
  4004a2:	1d3b      	adds	r3, r7, #4
  4004a4:	4618      	mov	r0, r3
  4004a6:	2106      	movs	r1, #6
  4004a8:	2204      	movs	r2, #4
  4004aa:	2319      	movs	r3, #25
  4004ac:	4c10      	ldr	r4, [pc, #64]	; (4004f0 <sysclk_init+0x60>)
  4004ae:	47a0      	blx	r4
		pll_enable(&pllcfg, 0);
  4004b0:	1d3b      	adds	r3, r7, #4
  4004b2:	4618      	mov	r0, r3
  4004b4:	2100      	movs	r1, #0
  4004b6:	4b0f      	ldr	r3, [pc, #60]	; (4004f4 <sysclk_init+0x64>)
  4004b8:	4798      	blx	r3
		pll_wait_for_lock(0);
  4004ba:	2000      	movs	r0, #0
  4004bc:	4b0e      	ldr	r3, [pc, #56]	; (4004f8 <sysclk_init+0x68>)
  4004be:	4798      	blx	r3
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  4004c0:	2001      	movs	r0, #1
  4004c2:	4b0e      	ldr	r3, [pc, #56]	; (4004fc <sysclk_init+0x6c>)
  4004c4:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  4004c6:	2000      	movs	r0, #0
  4004c8:	4b0d      	ldr	r3, [pc, #52]	; (400500 <sysclk_init+0x70>)
  4004ca:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  4004cc:	4b0d      	ldr	r3, [pc, #52]	; (400504 <sysclk_init+0x74>)
  4004ce:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  4004d0:	4b0d      	ldr	r3, [pc, #52]	; (400508 <sysclk_init+0x78>)
  4004d2:	4798      	blx	r3
  4004d4:	4603      	mov	r3, r0
  4004d6:	4618      	mov	r0, r3
  4004d8:	4b03      	ldr	r3, [pc, #12]	; (4004e8 <sysclk_init+0x58>)
  4004da:	4798      	blx	r3

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
  4004dc:	370c      	adds	r7, #12
  4004de:	46bd      	mov	sp, r7
  4004e0:	bd90      	pop	{r4, r7, pc}
  4004e2:	bf00      	nop
  4004e4:	11e1a300 	.word	0x11e1a300
  4004e8:	004018d5 	.word	0x004018d5
  4004ec:	00400405 	.word	0x00400405
  4004f0:	00400335 	.word	0x00400335
  4004f4:	0040039d 	.word	0x0040039d
  4004f8:	00400439 	.word	0x00400439
  4004fc:	00400c7d 	.word	0x00400c7d
  400500:	00400cf5 	.word	0x00400cf5
  400504:	0040176d 	.word	0x0040176d
  400508:	0040047d 	.word	0x0040047d

0040050c <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  40050c:	b580      	push	{r7, lr}
  40050e:	b086      	sub	sp, #24
  400510:	af00      	add	r7, sp, #0
  400512:	60f8      	str	r0, [r7, #12]
  400514:	60b9      	str	r1, [r7, #8]
  400516:	607a      	str	r2, [r7, #4]
	int nChars = 0;
  400518:	2300      	movs	r3, #0
  40051a:	617b      	str	r3, [r7, #20]

	if (file != 0) {
  40051c:	68fb      	ldr	r3, [r7, #12]
  40051e:	2b00      	cmp	r3, #0
  400520:	d002      	beq.n	400528 <_read+0x1c>
		return -1;
  400522:	f04f 33ff 	mov.w	r3, #4294967295
  400526:	e014      	b.n	400552 <_read+0x46>
	}

	for (; len > 0; --len) {
  400528:	e00f      	b.n	40054a <_read+0x3e>
		ptr_get(stdio_base, ptr);
  40052a:	4b0c      	ldr	r3, [pc, #48]	; (40055c <_read+0x50>)
  40052c:	681b      	ldr	r3, [r3, #0]
  40052e:	4a0c      	ldr	r2, [pc, #48]	; (400560 <_read+0x54>)
  400530:	6812      	ldr	r2, [r2, #0]
  400532:	4610      	mov	r0, r2
  400534:	68b9      	ldr	r1, [r7, #8]
  400536:	4798      	blx	r3
		ptr++;
  400538:	68bb      	ldr	r3, [r7, #8]
  40053a:	3301      	adds	r3, #1
  40053c:	60bb      	str	r3, [r7, #8]
		nChars++;
  40053e:	697b      	ldr	r3, [r7, #20]
  400540:	3301      	adds	r3, #1
  400542:	617b      	str	r3, [r7, #20]

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
  400544:	687b      	ldr	r3, [r7, #4]
  400546:	3b01      	subs	r3, #1
  400548:	607b      	str	r3, [r7, #4]
  40054a:	687b      	ldr	r3, [r7, #4]
  40054c:	2b00      	cmp	r3, #0
  40054e:	dcec      	bgt.n	40052a <_read+0x1e>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
  400550:	697b      	ldr	r3, [r7, #20]
}
  400552:	4618      	mov	r0, r3
  400554:	3718      	adds	r7, #24
  400556:	46bd      	mov	sp, r7
  400558:	bd80      	pop	{r7, pc}
  40055a:	bf00      	nop
  40055c:	204009c8 	.word	0x204009c8
  400560:	204009d0 	.word	0x204009d0

00400564 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
  400564:	b580      	push	{r7, lr}
  400566:	b086      	sub	sp, #24
  400568:	af00      	add	r7, sp, #0
  40056a:	60f8      	str	r0, [r7, #12]
  40056c:	60b9      	str	r1, [r7, #8]
  40056e:	607a      	str	r2, [r7, #4]
	int nChars = 0;
  400570:	2300      	movs	r3, #0
  400572:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
  400574:	68fb      	ldr	r3, [r7, #12]
  400576:	2b01      	cmp	r3, #1
  400578:	d008      	beq.n	40058c <_write+0x28>
  40057a:	68fb      	ldr	r3, [r7, #12]
  40057c:	2b02      	cmp	r3, #2
  40057e:	d005      	beq.n	40058c <_write+0x28>
  400580:	68fb      	ldr	r3, [r7, #12]
  400582:	2b03      	cmp	r3, #3
  400584:	d002      	beq.n	40058c <_write+0x28>
		return -1;
  400586:	f04f 33ff 	mov.w	r3, #4294967295
  40058a:	e01a      	b.n	4005c2 <_write+0x5e>
	}

	for (; len != 0; --len) {
  40058c:	e015      	b.n	4005ba <_write+0x56>
		if (ptr_put(stdio_base, *ptr++) < 0) {
  40058e:	4b0f      	ldr	r3, [pc, #60]	; (4005cc <_write+0x68>)
  400590:	681a      	ldr	r2, [r3, #0]
  400592:	4b0f      	ldr	r3, [pc, #60]	; (4005d0 <_write+0x6c>)
  400594:	6818      	ldr	r0, [r3, #0]
  400596:	68bb      	ldr	r3, [r7, #8]
  400598:	1c59      	adds	r1, r3, #1
  40059a:	60b9      	str	r1, [r7, #8]
  40059c:	781b      	ldrb	r3, [r3, #0]
  40059e:	4619      	mov	r1, r3
  4005a0:	4790      	blx	r2
  4005a2:	4603      	mov	r3, r0
  4005a4:	2b00      	cmp	r3, #0
  4005a6:	da02      	bge.n	4005ae <_write+0x4a>
			return -1;
  4005a8:	f04f 33ff 	mov.w	r3, #4294967295
  4005ac:	e009      	b.n	4005c2 <_write+0x5e>
		}
		++nChars;
  4005ae:	697b      	ldr	r3, [r7, #20]
  4005b0:	3301      	adds	r3, #1
  4005b2:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
  4005b4:	687b      	ldr	r3, [r7, #4]
  4005b6:	3b01      	subs	r3, #1
  4005b8:	607b      	str	r3, [r7, #4]
  4005ba:	687b      	ldr	r3, [r7, #4]
  4005bc:	2b00      	cmp	r3, #0
  4005be:	d1e6      	bne.n	40058e <_write+0x2a>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
	}
	return nChars;
  4005c0:	697b      	ldr	r3, [r7, #20]
}
  4005c2:	4618      	mov	r0, r3
  4005c4:	3718      	adds	r7, #24
  4005c6:	46bd      	mov	sp, r7
  4005c8:	bd80      	pop	{r7, pc}
  4005ca:	bf00      	nop
  4005cc:	204009cc 	.word	0x204009cc
  4005d0:	204009d0 	.word	0x204009d0

004005d4 <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
  4005d4:	b580      	push	{r7, lr}
  4005d6:	b082      	sub	sp, #8
  4005d8:	af00      	add	r7, sp, #0
  4005da:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  4005dc:	6878      	ldr	r0, [r7, #4]
  4005de:	4b02      	ldr	r3, [pc, #8]	; (4005e8 <sysclk_enable_peripheral_clock+0x14>)
  4005e0:	4798      	blx	r3
}
  4005e2:	3708      	adds	r7, #8
  4005e4:	46bd      	mov	sp, r7
  4005e6:	bd80      	pop	{r7, pc}
  4005e8:	00400f39 	.word	0x00400f39

004005ec <ioport_init>:
 *
 * This function must be called before using any other functions in the IOPORT
 * service.
 */
static inline void ioport_init(void)
{
  4005ec:	b580      	push	{r7, lr}
  4005ee:	af00      	add	r7, sp, #0
}

__always_inline static void arch_ioport_init(void)
{
#ifdef ID_PIOA
	sysclk_enable_peripheral_clock(ID_PIOA);
  4005f0:	200a      	movs	r0, #10
  4005f2:	4b07      	ldr	r3, [pc, #28]	; (400610 <ioport_init+0x24>)
  4005f4:	4798      	blx	r3
#endif
#ifdef ID_PIOB
	sysclk_enable_peripheral_clock(ID_PIOB);
  4005f6:	200b      	movs	r0, #11
  4005f8:	4b05      	ldr	r3, [pc, #20]	; (400610 <ioport_init+0x24>)
  4005fa:	4798      	blx	r3
#endif
#ifdef ID_PIOC
	sysclk_enable_peripheral_clock(ID_PIOC);
  4005fc:	200c      	movs	r0, #12
  4005fe:	4b04      	ldr	r3, [pc, #16]	; (400610 <ioport_init+0x24>)
  400600:	4798      	blx	r3
#endif
#ifdef ID_PIOD
	sysclk_enable_peripheral_clock(ID_PIOD);
  400602:	2010      	movs	r0, #16
  400604:	4b02      	ldr	r3, [pc, #8]	; (400610 <ioport_init+0x24>)
  400606:	4798      	blx	r3
#endif
#ifdef ID_PIOE
	sysclk_enable_peripheral_clock(ID_PIOE);
  400608:	2011      	movs	r0, #17
  40060a:	4b01      	ldr	r3, [pc, #4]	; (400610 <ioport_init+0x24>)
  40060c:	4798      	blx	r3
	arch_ioport_init();
}
  40060e:	bd80      	pop	{r7, pc}
  400610:	004005d5 	.word	0x004005d5

00400614 <ioport_disable_pin>:
 *        IOPORT_CREATE_PIN().
 *
 * \param pin IOPORT pin to disable
 */
static inline void ioport_disable_pin(ioport_pin_t pin)
{
  400614:	b480      	push	{r7}
  400616:	b089      	sub	sp, #36	; 0x24
  400618:	af00      	add	r7, sp, #0
  40061a:	6078      	str	r0, [r7, #4]
  40061c:	687b      	ldr	r3, [r7, #4]
  40061e:	61fb      	str	r3, [r7, #28]
  400620:	69fb      	ldr	r3, [r7, #28]
  400622:	61bb      	str	r3, [r7, #24]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  400624:	69bb      	ldr	r3, [r7, #24]
  400626:	095a      	lsrs	r2, r3, #5
  400628:	69fb      	ldr	r3, [r7, #28]
  40062a:	617b      	str	r3, [r7, #20]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  40062c:	697b      	ldr	r3, [r7, #20]
  40062e:	f003 031f 	and.w	r3, r3, #31
  400632:	2101      	movs	r1, #1
  400634:	fa01 f303 	lsl.w	r3, r1, r3
  400638:	613a      	str	r2, [r7, #16]
  40063a:	60fb      	str	r3, [r7, #12]
  40063c:	693b      	ldr	r3, [r7, #16]
  40063e:	60bb      	str	r3, [r7, #8]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  400640:	68ba      	ldr	r2, [r7, #8]
  400642:	4b05      	ldr	r3, [pc, #20]	; (400658 <ioport_disable_pin+0x44>)
  400644:	4413      	add	r3, r2
  400646:	025b      	lsls	r3, r3, #9
  400648:	461a      	mov	r2, r3
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  40064a:	68fb      	ldr	r3, [r7, #12]
  40064c:	6053      	str	r3, [r2, #4]
	arch_ioport_disable_pin(pin);
}
  40064e:	3724      	adds	r7, #36	; 0x24
  400650:	46bd      	mov	sp, r7
  400652:	f85d 7b04 	ldr.w	r7, [sp], #4
  400656:	4770      	bx	lr
  400658:	00200707 	.word	0x00200707

0040065c <ioport_disable_port>:
 * \param port IOPORT port to disable
 * \param mask Pin mask of pins to disable
 */
static inline void ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
  40065c:	b480      	push	{r7}
  40065e:	b087      	sub	sp, #28
  400660:	af00      	add	r7, sp, #0
  400662:	6078      	str	r0, [r7, #4]
  400664:	6039      	str	r1, [r7, #0]
  400666:	687b      	ldr	r3, [r7, #4]
  400668:	617b      	str	r3, [r7, #20]
  40066a:	683b      	ldr	r3, [r7, #0]
  40066c:	613b      	str	r3, [r7, #16]
  40066e:	697b      	ldr	r3, [r7, #20]
  400670:	60fb      	str	r3, [r7, #12]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  400672:	68fa      	ldr	r2, [r7, #12]
  400674:	4b05      	ldr	r3, [pc, #20]	; (40068c <ioport_disable_port+0x30>)
  400676:	4413      	add	r3, r2
  400678:	025b      	lsls	r3, r3, #9
  40067a:	461a      	mov	r2, r3
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  40067c:	693b      	ldr	r3, [r7, #16]
  40067e:	6053      	str	r3, [r2, #4]
	arch_ioport_disable_port(port, mask);
}
  400680:	371c      	adds	r7, #28
  400682:	46bd      	mov	sp, r7
  400684:	f85d 7b04 	ldr.w	r7, [sp], #4
  400688:	4770      	bx	lr
  40068a:	bf00      	nop
  40068c:	00200707 	.word	0x00200707

00400690 <ioport_set_port_mode>:
 * \param mode Mode masks to configure for the specified pins (\ref
 * ioport_modes)
 */
static inline void ioport_set_port_mode(ioport_port_t port,
		ioport_port_mask_t mask, ioport_mode_t mode)
{
  400690:	b480      	push	{r7}
  400692:	b08b      	sub	sp, #44	; 0x2c
  400694:	af00      	add	r7, sp, #0
  400696:	60f8      	str	r0, [r7, #12]
  400698:	60b9      	str	r1, [r7, #8]
  40069a:	607a      	str	r2, [r7, #4]
  40069c:	68fb      	ldr	r3, [r7, #12]
  40069e:	627b      	str	r3, [r7, #36]	; 0x24
  4006a0:	68bb      	ldr	r3, [r7, #8]
  4006a2:	623b      	str	r3, [r7, #32]
  4006a4:	687b      	ldr	r3, [r7, #4]
  4006a6:	61fb      	str	r3, [r7, #28]
  4006a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4006aa:	61bb      	str	r3, [r7, #24]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  4006ac:	69ba      	ldr	r2, [r7, #24]
  4006ae:	4b37      	ldr	r3, [pc, #220]	; (40078c <ioport_set_port_mode+0xfc>)
  4006b0:	4413      	add	r3, r2
  4006b2:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_port_mode(ioport_port_t port,
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);
  4006b4:	617b      	str	r3, [r7, #20]

	if (mode & IOPORT_MODE_PULLUP) {
  4006b6:	69fb      	ldr	r3, [r7, #28]
  4006b8:	f003 0308 	and.w	r3, r3, #8
  4006bc:	2b00      	cmp	r3, #0
  4006be:	d003      	beq.n	4006c8 <ioport_set_port_mode+0x38>
		base->PIO_PUER = mask;
  4006c0:	697b      	ldr	r3, [r7, #20]
  4006c2:	6a3a      	ldr	r2, [r7, #32]
  4006c4:	665a      	str	r2, [r3, #100]	; 0x64
  4006c6:	e002      	b.n	4006ce <ioport_set_port_mode+0x3e>
	} else {
		base->PIO_PUDR = mask;
  4006c8:	697b      	ldr	r3, [r7, #20]
  4006ca:	6a3a      	ldr	r2, [r7, #32]
  4006cc:	661a      	str	r2, [r3, #96]	; 0x60
	}

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
  4006ce:	69fb      	ldr	r3, [r7, #28]
  4006d0:	f003 0310 	and.w	r3, r3, #16
  4006d4:	2b00      	cmp	r3, #0
  4006d6:	d004      	beq.n	4006e2 <ioport_set_port_mode+0x52>
		base->PIO_PPDER = mask;
  4006d8:	697b      	ldr	r3, [r7, #20]
  4006da:	6a3a      	ldr	r2, [r7, #32]
  4006dc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  4006e0:	e003      	b.n	4006ea <ioport_set_port_mode+0x5a>
	} else {
		base->PIO_PPDDR = mask;
  4006e2:	697b      	ldr	r3, [r7, #20]
  4006e4:	6a3a      	ldr	r2, [r7, #32]
  4006e6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	}
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
  4006ea:	69fb      	ldr	r3, [r7, #28]
  4006ec:	f003 0320 	and.w	r3, r3, #32
  4006f0:	2b00      	cmp	r3, #0
  4006f2:	d003      	beq.n	4006fc <ioport_set_port_mode+0x6c>
		base->PIO_MDER = mask;
  4006f4:	697b      	ldr	r3, [r7, #20]
  4006f6:	6a3a      	ldr	r2, [r7, #32]
  4006f8:	651a      	str	r2, [r3, #80]	; 0x50
  4006fa:	e002      	b.n	400702 <ioport_set_port_mode+0x72>
	} else {
		base->PIO_MDDR = mask;
  4006fc:	697b      	ldr	r3, [r7, #20]
  4006fe:	6a3a      	ldr	r2, [r7, #32]
  400700:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
  400702:	69fb      	ldr	r3, [r7, #28]
  400704:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
  400708:	2b00      	cmp	r3, #0
  40070a:	d003      	beq.n	400714 <ioport_set_port_mode+0x84>
		base->PIO_IFER = mask;
  40070c:	697b      	ldr	r3, [r7, #20]
  40070e:	6a3a      	ldr	r2, [r7, #32]
  400710:	621a      	str	r2, [r3, #32]
  400712:	e002      	b.n	40071a <ioport_set_port_mode+0x8a>
	} else {
		base->PIO_IFDR = mask;
  400714:	697b      	ldr	r3, [r7, #20]
  400716:	6a3a      	ldr	r2, [r7, #32]
  400718:	625a      	str	r2, [r3, #36]	; 0x24
	}

	if (mode & IOPORT_MODE_DEBOUNCE) {
  40071a:	69fb      	ldr	r3, [r7, #28]
  40071c:	f003 0380 	and.w	r3, r3, #128	; 0x80
  400720:	2b00      	cmp	r3, #0
  400722:	d004      	beq.n	40072e <ioport_set_port_mode+0x9e>
#if SAM3U || SAM3XA
		base->PIO_DIFSR = mask;
#else
		base->PIO_IFSCER = mask;
  400724:	697b      	ldr	r3, [r7, #20]
  400726:	6a3a      	ldr	r2, [r7, #32]
  400728:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  40072c:	e003      	b.n	400736 <ioport_set_port_mode+0xa6>
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  40072e:	697b      	ldr	r3, [r7, #20]
  400730:	6a3a      	ldr	r2, [r7, #32]
  400732:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABSR |= mask;
	} else {
		base->PIO_ABSR &= ~mask;
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
  400736:	69fb      	ldr	r3, [r7, #28]
  400738:	f003 0301 	and.w	r3, r3, #1
  40073c:	2b00      	cmp	r3, #0
  40073e:	d006      	beq.n	40074e <ioport_set_port_mode+0xbe>
		base->PIO_ABCDSR[0] |= mask;
  400740:	697b      	ldr	r3, [r7, #20]
  400742:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400744:	6a3b      	ldr	r3, [r7, #32]
  400746:	431a      	orrs	r2, r3
  400748:	697b      	ldr	r3, [r7, #20]
  40074a:	671a      	str	r2, [r3, #112]	; 0x70
  40074c:	e006      	b.n	40075c <ioport_set_port_mode+0xcc>
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  40074e:	697b      	ldr	r3, [r7, #20]
  400750:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400752:	6a3b      	ldr	r3, [r7, #32]
  400754:	43db      	mvns	r3, r3
  400756:	401a      	ands	r2, r3
  400758:	697b      	ldr	r3, [r7, #20]
  40075a:	671a      	str	r2, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
  40075c:	69fb      	ldr	r3, [r7, #28]
  40075e:	f003 0302 	and.w	r3, r3, #2
  400762:	2b00      	cmp	r3, #0
  400764:	d006      	beq.n	400774 <ioport_set_port_mode+0xe4>
		base->PIO_ABCDSR[1] |= mask;
  400766:	697b      	ldr	r3, [r7, #20]
  400768:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  40076a:	6a3b      	ldr	r3, [r7, #32]
  40076c:	431a      	orrs	r2, r3
  40076e:	697b      	ldr	r3, [r7, #20]
  400770:	675a      	str	r2, [r3, #116]	; 0x74
  400772:	e006      	b.n	400782 <ioport_set_port_mode+0xf2>
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  400774:	697b      	ldr	r3, [r7, #20]
  400776:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400778:	6a3b      	ldr	r3, [r7, #32]
  40077a:	43db      	mvns	r3, r3
  40077c:	401a      	ands	r2, r3
  40077e:	697b      	ldr	r3, [r7, #20]
  400780:	675a      	str	r2, [r3, #116]	; 0x74
	arch_ioport_set_port_mode(port, mask, mode);
}
  400782:	372c      	adds	r7, #44	; 0x2c
  400784:	46bd      	mov	sp, r7
  400786:	f85d 7b04 	ldr.w	r7, [sp], #4
  40078a:	4770      	bx	lr
  40078c:	00200707 	.word	0x00200707

00400790 <ioport_set_pin_mode>:
 *
 * \param pin IOPORT pin to configure
 * \param mode Mode masks to configure for the specified pin (\ref ioport_modes)
 */
static inline void ioport_set_pin_mode(ioport_pin_t pin, ioport_mode_t mode)
{
  400790:	b480      	push	{r7}
  400792:	b08d      	sub	sp, #52	; 0x34
  400794:	af00      	add	r7, sp, #0
  400796:	6078      	str	r0, [r7, #4]
  400798:	6039      	str	r1, [r7, #0]
  40079a:	687b      	ldr	r3, [r7, #4]
  40079c:	62fb      	str	r3, [r7, #44]	; 0x2c
  40079e:	683b      	ldr	r3, [r7, #0]
  4007a0:	62bb      	str	r3, [r7, #40]	; 0x28
  4007a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4007a4:	627b      	str	r3, [r7, #36]	; 0x24
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  4007a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4007a8:	095a      	lsrs	r2, r3, #5
  4007aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4007ac:	623b      	str	r3, [r7, #32]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  4007ae:	6a3b      	ldr	r3, [r7, #32]
  4007b0:	f003 031f 	and.w	r3, r3, #31
  4007b4:	2101      	movs	r1, #1
  4007b6:	fa01 f303 	lsl.w	r3, r1, r3
  4007ba:	61fa      	str	r2, [r7, #28]
  4007bc:	61bb      	str	r3, [r7, #24]
  4007be:	6abb      	ldr	r3, [r7, #40]	; 0x28
  4007c0:	617b      	str	r3, [r7, #20]
  4007c2:	69fb      	ldr	r3, [r7, #28]
  4007c4:	613b      	str	r3, [r7, #16]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  4007c6:	693a      	ldr	r2, [r7, #16]
  4007c8:	4b37      	ldr	r3, [pc, #220]	; (4008a8 <ioport_set_pin_mode+0x118>)
  4007ca:	4413      	add	r3, r2
  4007cc:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_port_mode(ioport_port_t port,
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);
  4007ce:	60fb      	str	r3, [r7, #12]

	if (mode & IOPORT_MODE_PULLUP) {
  4007d0:	697b      	ldr	r3, [r7, #20]
  4007d2:	f003 0308 	and.w	r3, r3, #8
  4007d6:	2b00      	cmp	r3, #0
  4007d8:	d003      	beq.n	4007e2 <ioport_set_pin_mode+0x52>
		base->PIO_PUER = mask;
  4007da:	68fb      	ldr	r3, [r7, #12]
  4007dc:	69ba      	ldr	r2, [r7, #24]
  4007de:	665a      	str	r2, [r3, #100]	; 0x64
  4007e0:	e002      	b.n	4007e8 <ioport_set_pin_mode+0x58>
	} else {
		base->PIO_PUDR = mask;
  4007e2:	68fb      	ldr	r3, [r7, #12]
  4007e4:	69ba      	ldr	r2, [r7, #24]
  4007e6:	661a      	str	r2, [r3, #96]	; 0x60
	}

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
  4007e8:	697b      	ldr	r3, [r7, #20]
  4007ea:	f003 0310 	and.w	r3, r3, #16
  4007ee:	2b00      	cmp	r3, #0
  4007f0:	d004      	beq.n	4007fc <ioport_set_pin_mode+0x6c>
		base->PIO_PPDER = mask;
  4007f2:	68fb      	ldr	r3, [r7, #12]
  4007f4:	69ba      	ldr	r2, [r7, #24]
  4007f6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  4007fa:	e003      	b.n	400804 <ioport_set_pin_mode+0x74>
	} else {
		base->PIO_PPDDR = mask;
  4007fc:	68fb      	ldr	r3, [r7, #12]
  4007fe:	69ba      	ldr	r2, [r7, #24]
  400800:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	}
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
  400804:	697b      	ldr	r3, [r7, #20]
  400806:	f003 0320 	and.w	r3, r3, #32
  40080a:	2b00      	cmp	r3, #0
  40080c:	d003      	beq.n	400816 <ioport_set_pin_mode+0x86>
		base->PIO_MDER = mask;
  40080e:	68fb      	ldr	r3, [r7, #12]
  400810:	69ba      	ldr	r2, [r7, #24]
  400812:	651a      	str	r2, [r3, #80]	; 0x50
  400814:	e002      	b.n	40081c <ioport_set_pin_mode+0x8c>
	} else {
		base->PIO_MDDR = mask;
  400816:	68fb      	ldr	r3, [r7, #12]
  400818:	69ba      	ldr	r2, [r7, #24]
  40081a:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
  40081c:	697b      	ldr	r3, [r7, #20]
  40081e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
  400822:	2b00      	cmp	r3, #0
  400824:	d003      	beq.n	40082e <ioport_set_pin_mode+0x9e>
		base->PIO_IFER = mask;
  400826:	68fb      	ldr	r3, [r7, #12]
  400828:	69ba      	ldr	r2, [r7, #24]
  40082a:	621a      	str	r2, [r3, #32]
  40082c:	e002      	b.n	400834 <ioport_set_pin_mode+0xa4>
	} else {
		base->PIO_IFDR = mask;
  40082e:	68fb      	ldr	r3, [r7, #12]
  400830:	69ba      	ldr	r2, [r7, #24]
  400832:	625a      	str	r2, [r3, #36]	; 0x24
	}

	if (mode & IOPORT_MODE_DEBOUNCE) {
  400834:	697b      	ldr	r3, [r7, #20]
  400836:	f003 0380 	and.w	r3, r3, #128	; 0x80
  40083a:	2b00      	cmp	r3, #0
  40083c:	d004      	beq.n	400848 <ioport_set_pin_mode+0xb8>
#if SAM3U || SAM3XA
		base->PIO_DIFSR = mask;
#else
		base->PIO_IFSCER = mask;
  40083e:	68fb      	ldr	r3, [r7, #12]
  400840:	69ba      	ldr	r2, [r7, #24]
  400842:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  400846:	e003      	b.n	400850 <ioport_set_pin_mode+0xc0>
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  400848:	68fb      	ldr	r3, [r7, #12]
  40084a:	69ba      	ldr	r2, [r7, #24]
  40084c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABSR |= mask;
	} else {
		base->PIO_ABSR &= ~mask;
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
  400850:	697b      	ldr	r3, [r7, #20]
  400852:	f003 0301 	and.w	r3, r3, #1
  400856:	2b00      	cmp	r3, #0
  400858:	d006      	beq.n	400868 <ioport_set_pin_mode+0xd8>
		base->PIO_ABCDSR[0] |= mask;
  40085a:	68fb      	ldr	r3, [r7, #12]
  40085c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  40085e:	69bb      	ldr	r3, [r7, #24]
  400860:	431a      	orrs	r2, r3
  400862:	68fb      	ldr	r3, [r7, #12]
  400864:	671a      	str	r2, [r3, #112]	; 0x70
  400866:	e006      	b.n	400876 <ioport_set_pin_mode+0xe6>
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  400868:	68fb      	ldr	r3, [r7, #12]
  40086a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  40086c:	69bb      	ldr	r3, [r7, #24]
  40086e:	43db      	mvns	r3, r3
  400870:	401a      	ands	r2, r3
  400872:	68fb      	ldr	r3, [r7, #12]
  400874:	671a      	str	r2, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
  400876:	697b      	ldr	r3, [r7, #20]
  400878:	f003 0302 	and.w	r3, r3, #2
  40087c:	2b00      	cmp	r3, #0
  40087e:	d006      	beq.n	40088e <ioport_set_pin_mode+0xfe>
		base->PIO_ABCDSR[1] |= mask;
  400880:	68fb      	ldr	r3, [r7, #12]
  400882:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400884:	69bb      	ldr	r3, [r7, #24]
  400886:	431a      	orrs	r2, r3
  400888:	68fb      	ldr	r3, [r7, #12]
  40088a:	675a      	str	r2, [r3, #116]	; 0x74
  40088c:	e006      	b.n	40089c <ioport_set_pin_mode+0x10c>
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  40088e:	68fb      	ldr	r3, [r7, #12]
  400890:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400892:	69bb      	ldr	r3, [r7, #24]
  400894:	43db      	mvns	r3, r3
  400896:	401a      	ands	r2, r3
  400898:	68fb      	ldr	r3, [r7, #12]
  40089a:	675a      	str	r2, [r3, #116]	; 0x74
	arch_ioport_set_pin_mode(pin, mode);
}
  40089c:	3734      	adds	r7, #52	; 0x34
  40089e:	46bd      	mov	sp, r7
  4008a0:	f85d 7b04 	ldr.w	r7, [sp], #4
  4008a4:	4770      	bx	lr
  4008a6:	bf00      	nop
  4008a8:	00200707 	.word	0x00200707

004008ac <ioport_set_pin_dir>:
 * \param pin IOPORT pin to configure
 * \param dir Direction to set for the specified pin (\ref ioport_direction)
 */
static inline void ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
  4008ac:	b480      	push	{r7}
  4008ae:	b08d      	sub	sp, #52	; 0x34
  4008b0:	af00      	add	r7, sp, #0
  4008b2:	6078      	str	r0, [r7, #4]
  4008b4:	460b      	mov	r3, r1
  4008b6:	70fb      	strb	r3, [r7, #3]
  4008b8:	687b      	ldr	r3, [r7, #4]
  4008ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  4008bc:	78fb      	ldrb	r3, [r7, #3]
  4008be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  4008c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4008c4:	627b      	str	r3, [r7, #36]	; 0x24
  4008c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4008c8:	623b      	str	r3, [r7, #32]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  4008ca:	6a3b      	ldr	r3, [r7, #32]
  4008cc:	095b      	lsrs	r3, r3, #5
  4008ce:	61fb      	str	r3, [r7, #28]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  4008d0:	69fa      	ldr	r2, [r7, #28]
  4008d2:	4b17      	ldr	r3, [pc, #92]	; (400930 <ioport_set_pin_dir+0x84>)
  4008d4:	4413      	add	r3, r2
  4008d6:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);
  4008d8:	61bb      	str	r3, [r7, #24]

	if (dir == IOPORT_DIR_OUTPUT) {
  4008da:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  4008de:	2b01      	cmp	r3, #1
  4008e0:	d109      	bne.n	4008f6 <ioport_set_pin_dir+0x4a>
  4008e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4008e4:	617b      	str	r3, [r7, #20]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  4008e6:	697b      	ldr	r3, [r7, #20]
  4008e8:	f003 031f 	and.w	r3, r3, #31
  4008ec:	2201      	movs	r2, #1
  4008ee:	409a      	lsls	r2, r3
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4008f0:	69bb      	ldr	r3, [r7, #24]
  4008f2:	611a      	str	r2, [r3, #16]
  4008f4:	e00c      	b.n	400910 <ioport_set_pin_dir+0x64>
	} else if (dir == IOPORT_DIR_INPUT) {
  4008f6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  4008fa:	2b00      	cmp	r3, #0
  4008fc:	d108      	bne.n	400910 <ioport_set_pin_dir+0x64>
  4008fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  400900:	613b      	str	r3, [r7, #16]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  400902:	693b      	ldr	r3, [r7, #16]
  400904:	f003 031f 	and.w	r3, r3, #31
  400908:	2201      	movs	r2, #1
  40090a:	409a      	lsls	r2, r3
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40090c:	69bb      	ldr	r3, [r7, #24]
  40090e:	615a      	str	r2, [r3, #20]
  400910:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  400912:	60fb      	str	r3, [r7, #12]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  400914:	68fb      	ldr	r3, [r7, #12]
  400916:	f003 031f 	and.w	r3, r3, #31
  40091a:	2201      	movs	r2, #1
  40091c:	409a      	lsls	r2, r3
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40091e:	69bb      	ldr	r3, [r7, #24]
  400920:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	arch_ioport_set_pin_dir(pin, dir);
}
  400924:	3734      	adds	r7, #52	; 0x34
  400926:	46bd      	mov	sp, r7
  400928:	f85d 7b04 	ldr.w	r7, [sp], #4
  40092c:	4770      	bx	lr
  40092e:	bf00      	nop
  400930:	00200707 	.word	0x00200707

00400934 <ioport_set_pin_level>:
 *
 * \param pin IOPORT pin to configure
 * \param level Logical value of the pin
 */
static inline void ioport_set_pin_level(ioport_pin_t pin, bool level)
{
  400934:	b480      	push	{r7}
  400936:	b08b      	sub	sp, #44	; 0x2c
  400938:	af00      	add	r7, sp, #0
  40093a:	6078      	str	r0, [r7, #4]
  40093c:	460b      	mov	r3, r1
  40093e:	70fb      	strb	r3, [r7, #3]
  400940:	687b      	ldr	r3, [r7, #4]
  400942:	627b      	str	r3, [r7, #36]	; 0x24
  400944:	78fb      	ldrb	r3, [r7, #3]
  400946:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  40094a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40094c:	61fb      	str	r3, [r7, #28]
  40094e:	69fb      	ldr	r3, [r7, #28]
  400950:	61bb      	str	r3, [r7, #24]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  400952:	69bb      	ldr	r3, [r7, #24]
  400954:	095b      	lsrs	r3, r3, #5
  400956:	617b      	str	r3, [r7, #20]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  400958:	697a      	ldr	r2, [r7, #20]
  40095a:	4b10      	ldr	r3, [pc, #64]	; (40099c <ioport_set_pin_level+0x68>)
  40095c:	4413      	add	r3, r2
  40095e:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);
  400960:	613b      	str	r3, [r7, #16]

	if (level) {
  400962:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
  400966:	2b00      	cmp	r3, #0
  400968:	d009      	beq.n	40097e <ioport_set_pin_level+0x4a>
  40096a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40096c:	60fb      	str	r3, [r7, #12]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  40096e:	68fb      	ldr	r3, [r7, #12]
  400970:	f003 031f 	and.w	r3, r3, #31
  400974:	2201      	movs	r2, #1
  400976:	409a      	lsls	r2, r3
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400978:	693b      	ldr	r3, [r7, #16]
  40097a:	631a      	str	r2, [r3, #48]	; 0x30
  40097c:	e008      	b.n	400990 <ioport_set_pin_level+0x5c>
  40097e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  400980:	60bb      	str	r3, [r7, #8]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  400982:	68bb      	ldr	r3, [r7, #8]
  400984:	f003 031f 	and.w	r3, r3, #31
  400988:	2201      	movs	r2, #1
  40098a:	409a      	lsls	r2, r3
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  40098c:	693b      	ldr	r3, [r7, #16]
  40098e:	635a      	str	r2, [r3, #52]	; 0x34
	arch_ioport_set_pin_level(pin, level);
}
  400990:	372c      	adds	r7, #44	; 0x2c
  400992:	46bd      	mov	sp, r7
  400994:	f85d 7b04 	ldr.w	r7, [sp], #4
  400998:	4770      	bx	lr
  40099a:	bf00      	nop
  40099c:	00200707 	.word	0x00200707

004009a0 <ioport_set_pin_sense_mode>:
 * \param pin IOPORT pin to configure
 * \param pin_sense Edge to sense for the pin (\ref ioport_sense)
 */
static inline void ioport_set_pin_sense_mode(ioport_pin_t pin,
		enum ioport_sense pin_sense)
{
  4009a0:	b480      	push	{r7}
  4009a2:	b08d      	sub	sp, #52	; 0x34
  4009a4:	af00      	add	r7, sp, #0
  4009a6:	6078      	str	r0, [r7, #4]
  4009a8:	460b      	mov	r3, r1
  4009aa:	70fb      	strb	r3, [r7, #3]
  4009ac:	687b      	ldr	r3, [r7, #4]
  4009ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  4009b0:	78fb      	ldrb	r3, [r7, #3]
  4009b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  4009b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4009b8:	627b      	str	r3, [r7, #36]	; 0x24
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  4009ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4009bc:	095a      	lsrs	r2, r3, #5
  4009be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4009c0:	623b      	str	r3, [r7, #32]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  4009c2:	6a3b      	ldr	r3, [r7, #32]
  4009c4:	f003 031f 	and.w	r3, r3, #31
  4009c8:	2101      	movs	r1, #1
  4009ca:	fa01 f303 	lsl.w	r3, r1, r3
  4009ce:	61fa      	str	r2, [r7, #28]
  4009d0:	61bb      	str	r3, [r7, #24]
  4009d2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  4009d6:	75fb      	strb	r3, [r7, #23]
  4009d8:	69fb      	ldr	r3, [r7, #28]
  4009da:	613b      	str	r3, [r7, #16]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  4009dc:	693a      	ldr	r2, [r7, #16]
  4009de:	4b22      	ldr	r3, [pc, #136]	; (400a68 <ioport_set_pin_sense_mode+0xc8>)
  4009e0:	4413      	add	r3, r2
  4009e2:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_port_sense_mode(ioport_port_t port,
		ioport_port_mask_t mask, enum ioport_sense pin_sense)
{
	Pio *base = arch_ioport_port_to_base(port);
  4009e4:	60fb      	str	r3, [r7, #12]
	 *       1       0         0    IOPORT_SENSE_FALLING
	 *       1       0         1    IOPORT_SENSE_RISING
	 *       1       1         0    IOPORT_SENSE_LEVEL_LOW
	 *       1       1         1    IOPORT_SENSE_LEVEL_HIGH
	 */
	switch(pin_sense) {
  4009e6:	7dfb      	ldrb	r3, [r7, #23]
  4009e8:	3b01      	subs	r3, #1
  4009ea:	2b03      	cmp	r3, #3
  4009ec:	d82e      	bhi.n	400a4c <ioport_set_pin_sense_mode+0xac>
  4009ee:	a201      	add	r2, pc, #4	; (adr r2, 4009f4 <ioport_set_pin_sense_mode+0x54>)
  4009f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4009f4:	00400a29 	.word	0x00400a29
  4009f8:	00400a3b 	.word	0x00400a3b
  4009fc:	00400a05 	.word	0x00400a05
  400a00:	00400a17 	.word	0x00400a17
	case IOPORT_SENSE_LEVEL_LOW:
		base->PIO_LSR = mask;
  400a04:	68fb      	ldr	r3, [r7, #12]
  400a06:	69ba      	ldr	r2, [r7, #24]
  400a08:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
		base->PIO_FELLSR = mask;
  400a0c:	68fb      	ldr	r3, [r7, #12]
  400a0e:	69ba      	ldr	r2, [r7, #24]
  400a10:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
  400a14:	e01f      	b.n	400a56 <ioport_set_pin_sense_mode+0xb6>
		break;
	case IOPORT_SENSE_LEVEL_HIGH:
		base->PIO_LSR = mask;
  400a16:	68fb      	ldr	r3, [r7, #12]
  400a18:	69ba      	ldr	r2, [r7, #24]
  400a1a:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
		base->PIO_REHLSR = mask;
  400a1e:	68fb      	ldr	r3, [r7, #12]
  400a20:	69ba      	ldr	r2, [r7, #24]
  400a22:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  400a26:	e016      	b.n	400a56 <ioport_set_pin_sense_mode+0xb6>
		break;
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
  400a28:	68fb      	ldr	r3, [r7, #12]
  400a2a:	69ba      	ldr	r2, [r7, #24]
  400a2c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_FELLSR = mask;
  400a30:	68fb      	ldr	r3, [r7, #12]
  400a32:	69ba      	ldr	r2, [r7, #24]
  400a34:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
  400a38:	e00d      	b.n	400a56 <ioport_set_pin_sense_mode+0xb6>
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  400a3a:	68fb      	ldr	r3, [r7, #12]
  400a3c:	69ba      	ldr	r2, [r7, #24]
  400a3e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  400a42:	68fb      	ldr	r3, [r7, #12]
  400a44:	69ba      	ldr	r2, [r7, #24]
  400a46:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  400a4a:	e004      	b.n	400a56 <ioport_set_pin_sense_mode+0xb6>
		break;
	default:
		base->PIO_AIMDR = mask;
  400a4c:	68fb      	ldr	r3, [r7, #12]
  400a4e:	69ba      	ldr	r2, [r7, #24]
  400a50:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
  400a54:	e003      	b.n	400a5e <ioport_set_pin_sense_mode+0xbe>
		return;
	}
	base->PIO_AIMER = mask;
  400a56:	68fb      	ldr	r3, [r7, #12]
  400a58:	69ba      	ldr	r2, [r7, #24]
  400a5a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	arch_ioport_set_pin_sense_mode(pin, pin_sense);
}
  400a5e:	3734      	adds	r7, #52	; 0x34
  400a60:	46bd      	mov	sp, r7
  400a62:	f85d 7b04 	ldr.w	r7, [sp], #4
  400a66:	4770      	bx	lr
  400a68:	00200707 	.word	0x00200707

00400a6c <board_init>:
	__ISB();
}
#endif

void board_init(void)
{
  400a6c:	b580      	push	{r7, lr}
  400a6e:	af00      	add	r7, sp, #0
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  400a70:	4b24      	ldr	r3, [pc, #144]	; (400b04 <board_init+0x98>)
  400a72:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  400a76:	605a      	str	r2, [r3, #4]
#endif

	/* Initialize IOPORTs */
	ioport_init();
  400a78:	4b23      	ldr	r3, [pc, #140]	; (400b08 <board_init+0x9c>)
  400a7a:	4798      	blx	r3

	/* Configure the pins connected to LED as output and set their
	 * default initial state to high (LED off).
	 */
	ioport_set_pin_dir(LED0_GPIO, IOPORT_DIR_OUTPUT);
  400a7c:	2050      	movs	r0, #80	; 0x50
  400a7e:	2101      	movs	r1, #1
  400a80:	4b22      	ldr	r3, [pc, #136]	; (400b0c <board_init+0xa0>)
  400a82:	4798      	blx	r3
	ioport_set_pin_level(LED0_GPIO, LED0_INACTIVE_LEVEL);
  400a84:	2050      	movs	r0, #80	; 0x50
  400a86:	2101      	movs	r1, #1
  400a88:	4b21      	ldr	r3, [pc, #132]	; (400b10 <board_init+0xa4>)
  400a8a:	4798      	blx	r3

	/* Configure Push Button pins */
	ioport_set_pin_input_mode(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS,
  400a8c:	200b      	movs	r0, #11
  400a8e:	2100      	movs	r1, #0
  400a90:	4b1e      	ldr	r3, [pc, #120]	; (400b0c <board_init+0xa0>)
  400a92:	4798      	blx	r3
  400a94:	200b      	movs	r0, #11
  400a96:	2188      	movs	r1, #136	; 0x88
  400a98:	4b1e      	ldr	r3, [pc, #120]	; (400b14 <board_init+0xa8>)
  400a9a:	4798      	blx	r3
  400a9c:	200b      	movs	r0, #11
  400a9e:	2102      	movs	r1, #2
  400aa0:	4b1d      	ldr	r3, [pc, #116]	; (400b18 <board_init+0xac>)
  400aa2:	4798      	blx	r3
//jsi 7feb16 following defines are from the DMA-UART example project for the SAM4E
#define PINS_UART0_PORT		IOPORT_PIOA
#define PINS_UART0			(PIO_PA9A_URXD0 | PIO_PA10A_UTXD0)
#define PINS_UART0_FLAGS	IOPORT_MODE_MUX_A

	ioport_set_port_peripheral_mode(PINS_UART0_PORT, PINS_UART0, PINS_UART0_FLAGS); //jsi 6feb16 was USART1
  400aa4:	2000      	movs	r0, #0
  400aa6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
  400aaa:	2200      	movs	r2, #0
  400aac:	4b1b      	ldr	r3, [pc, #108]	; (400b1c <board_init+0xb0>)
  400aae:	4798      	blx	r3
  400ab0:	2000      	movs	r0, #0
  400ab2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
  400ab6:	4b1a      	ldr	r3, [pc, #104]	; (400b20 <board_init+0xb4>)
  400ab8:	4798      	blx	r3

#endif

#define CONF_BOARD_TWIHS0 //jsi 7feb16
#ifdef CONF_BOARD_TWIHS0
	ioport_set_pin_peripheral_mode(TWIHS0_DATA_GPIO, TWIHS0_DATA_FLAGS);
  400aba:	2003      	movs	r0, #3
  400abc:	2100      	movs	r1, #0
  400abe:	4b15      	ldr	r3, [pc, #84]	; (400b14 <board_init+0xa8>)
  400ac0:	4798      	blx	r3
  400ac2:	2003      	movs	r0, #3
  400ac4:	4b17      	ldr	r3, [pc, #92]	; (400b24 <board_init+0xb8>)
  400ac6:	4798      	blx	r3
	ioport_set_pin_peripheral_mode(TWIHS0_CLK_GPIO, TWIHS0_CLK_FLAGS);
  400ac8:	2004      	movs	r0, #4
  400aca:	2100      	movs	r1, #0
  400acc:	4b11      	ldr	r3, [pc, #68]	; (400b14 <board_init+0xa8>)
  400ace:	4798      	blx	r3
  400ad0:	2004      	movs	r0, #4
  400ad2:	4b14      	ldr	r3, [pc, #80]	; (400b24 <board_init+0xb8>)
  400ad4:	4798      	blx	r3
#endif


#ifdef CONF_BOARD_USART_RXD
	/* Configure USART RXD pin */
	ioport_set_pin_peripheral_mode(USART0_RXD_GPIO, USART0_RXD_FLAGS);
  400ad6:	2020      	movs	r0, #32
  400ad8:	2102      	movs	r1, #2
  400ada:	4b0e      	ldr	r3, [pc, #56]	; (400b14 <board_init+0xa8>)
  400adc:	4798      	blx	r3
  400ade:	2020      	movs	r0, #32
  400ae0:	4b10      	ldr	r3, [pc, #64]	; (400b24 <board_init+0xb8>)
  400ae2:	4798      	blx	r3
#endif

#ifdef CONF_BOARD_USART_TXD
	/* Configure USART TXD pin */
	ioport_set_pin_peripheral_mode(USART0_TXD_GPIO, USART0_TXD_FLAGS);
  400ae4:	2021      	movs	r0, #33	; 0x21
  400ae6:	2102      	movs	r1, #2
  400ae8:	4b0a      	ldr	r3, [pc, #40]	; (400b14 <board_init+0xa8>)
  400aea:	4798      	blx	r3
  400aec:	2021      	movs	r0, #33	; 0x21
  400aee:	4b0d      	ldr	r3, [pc, #52]	; (400b24 <board_init+0xb8>)
  400af0:	4798      	blx	r3
	ioport_set_pin_peripheral_mode(PIN_USART0_CTS_IDX,PIN_USART0_CTS_FLAGS);
#endif

#ifdef CONF_BOARD_USART_RTS
	/* Configure USART RTS pin */
	ioport_set_pin_peripheral_mode(PIN_USART0_RTS_IDX, PIN_USART0_RTS_FLAGS);
  400af2:	2023      	movs	r0, #35	; 0x23
  400af4:	2102      	movs	r1, #2
  400af6:	4b07      	ldr	r3, [pc, #28]	; (400b14 <board_init+0xa8>)
  400af8:	4798      	blx	r3
  400afa:	2023      	movs	r0, #35	; 0x23
  400afc:	4b09      	ldr	r3, [pc, #36]	; (400b24 <board_init+0xb8>)
  400afe:	4798      	blx	r3
#endif

#ifdef CONF_BOARD_CONFIG_MPU_AT_INIT
	_setup_memory_region();
#endif
}
  400b00:	bd80      	pop	{r7, pc}
  400b02:	bf00      	nop
  400b04:	400e1850 	.word	0x400e1850
  400b08:	004005ed 	.word	0x004005ed
  400b0c:	004008ad 	.word	0x004008ad
  400b10:	00400935 	.word	0x00400935
  400b14:	00400791 	.word	0x00400791
  400b18:	004009a1 	.word	0x004009a1
  400b1c:	00400691 	.word	0x00400691
  400b20:	0040065d 	.word	0x0040065d
  400b24:	00400615 	.word	0x00400615

00400b28 <pio_get_interrupt_status>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
  400b28:	b480      	push	{r7}
  400b2a:	b083      	sub	sp, #12
  400b2c:	af00      	add	r7, sp, #0
  400b2e:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_ISR;
  400b30:	687b      	ldr	r3, [r7, #4]
  400b32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
  400b34:	4618      	mov	r0, r3
  400b36:	370c      	adds	r7, #12
  400b38:	46bd      	mov	sp, r7
  400b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
  400b3e:	4770      	bx	lr

00400b40 <pio_get_interrupt_mask>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
  400b40:	b480      	push	{r7}
  400b42:	b083      	sub	sp, #12
  400b44:	af00      	add	r7, sp, #0
  400b46:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_IMR;
  400b48:	687b      	ldr	r3, [r7, #4]
  400b4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
  400b4c:	4618      	mov	r0, r3
  400b4e:	370c      	adds	r7, #12
  400b50:	46bd      	mov	sp, r7
  400b52:	f85d 7b04 	ldr.w	r7, [sp], #4
  400b56:	4770      	bx	lr

00400b58 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  400b58:	b580      	push	{r7, lr}
  400b5a:	b084      	sub	sp, #16
  400b5c:	af00      	add	r7, sp, #0
  400b5e:	6078      	str	r0, [r7, #4]
  400b60:	6039      	str	r1, [r7, #0]
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  400b62:	6878      	ldr	r0, [r7, #4]
  400b64:	4b24      	ldr	r3, [pc, #144]	; (400bf8 <pio_handler_process+0xa0>)
  400b66:	4798      	blx	r3
  400b68:	60f8      	str	r0, [r7, #12]
	status &= pio_get_interrupt_mask(p_pio);
  400b6a:	6878      	ldr	r0, [r7, #4]
  400b6c:	4b23      	ldr	r3, [pc, #140]	; (400bfc <pio_handler_process+0xa4>)
  400b6e:	4798      	blx	r3
  400b70:	4602      	mov	r2, r0
  400b72:	68fb      	ldr	r3, [r7, #12]
  400b74:	4013      	ands	r3, r2
  400b76:	60fb      	str	r3, [r7, #12]

	/* Check pending events */
	if (status != 0) {
  400b78:	68fb      	ldr	r3, [r7, #12]
  400b7a:	2b00      	cmp	r3, #0
  400b7c:	d038      	beq.n	400bf0 <pio_handler_process+0x98>
		/* Find triggering source */
		i = 0;
  400b7e:	2300      	movs	r3, #0
  400b80:	60bb      	str	r3, [r7, #8]
		while (status != 0) {
  400b82:	e032      	b.n	400bea <pio_handler_process+0x92>
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  400b84:	4a1e      	ldr	r2, [pc, #120]	; (400c00 <pio_handler_process+0xa8>)
  400b86:	68bb      	ldr	r3, [r7, #8]
  400b88:	011b      	lsls	r3, r3, #4
  400b8a:	4413      	add	r3, r2
  400b8c:	681a      	ldr	r2, [r3, #0]
  400b8e:	683b      	ldr	r3, [r7, #0]
  400b90:	429a      	cmp	r2, r3
  400b92:	d123      	bne.n	400bdc <pio_handler_process+0x84>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  400b94:	4a1a      	ldr	r2, [pc, #104]	; (400c00 <pio_handler_process+0xa8>)
  400b96:	68bb      	ldr	r3, [r7, #8]
  400b98:	011b      	lsls	r3, r3, #4
  400b9a:	4413      	add	r3, r2
  400b9c:	685a      	ldr	r2, [r3, #4]
  400b9e:	68fb      	ldr	r3, [r7, #12]
  400ba0:	4013      	ands	r3, r2
  400ba2:	2b00      	cmp	r3, #0
  400ba4:	d01a      	beq.n	400bdc <pio_handler_process+0x84>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  400ba6:	4a16      	ldr	r2, [pc, #88]	; (400c00 <pio_handler_process+0xa8>)
  400ba8:	68bb      	ldr	r3, [r7, #8]
  400baa:	011b      	lsls	r3, r3, #4
  400bac:	4413      	add	r3, r2
  400bae:	3308      	adds	r3, #8
  400bb0:	685b      	ldr	r3, [r3, #4]
  400bb2:	4913      	ldr	r1, [pc, #76]	; (400c00 <pio_handler_process+0xa8>)
  400bb4:	68ba      	ldr	r2, [r7, #8]
  400bb6:	0112      	lsls	r2, r2, #4
  400bb8:	440a      	add	r2, r1
  400bba:	6810      	ldr	r0, [r2, #0]
  400bbc:	4910      	ldr	r1, [pc, #64]	; (400c00 <pio_handler_process+0xa8>)
  400bbe:	68ba      	ldr	r2, [r7, #8]
  400bc0:	0112      	lsls	r2, r2, #4
  400bc2:	440a      	add	r2, r1
  400bc4:	6852      	ldr	r2, [r2, #4]
  400bc6:	4611      	mov	r1, r2
  400bc8:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  400bca:	4a0d      	ldr	r2, [pc, #52]	; (400c00 <pio_handler_process+0xa8>)
  400bcc:	68bb      	ldr	r3, [r7, #8]
  400bce:	011b      	lsls	r3, r3, #4
  400bd0:	4413      	add	r3, r2
  400bd2:	685b      	ldr	r3, [r3, #4]
  400bd4:	43db      	mvns	r3, r3
  400bd6:	68fa      	ldr	r2, [r7, #12]
  400bd8:	4013      	ands	r3, r2
  400bda:	60fb      	str	r3, [r7, #12]
				}
			}
			i++;
  400bdc:	68bb      	ldr	r3, [r7, #8]
  400bde:	3301      	adds	r3, #1
  400be0:	60bb      	str	r3, [r7, #8]
			if (i >= MAX_INTERRUPT_SOURCES) {
  400be2:	68bb      	ldr	r3, [r7, #8]
  400be4:	2b06      	cmp	r3, #6
  400be6:	d900      	bls.n	400bea <pio_handler_process+0x92>
				break;
  400be8:	e002      	b.n	400bf0 <pio_handler_process+0x98>

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
  400bea:	68fb      	ldr	r3, [r7, #12]
  400bec:	2b00      	cmp	r3, #0
  400bee:	d1c9      	bne.n	400b84 <pio_handler_process+0x2c>
		if (pio_capture_handler) {
			pio_capture_handler(p_pio);
		}
	}
#endif
}
  400bf0:	3710      	adds	r7, #16
  400bf2:	46bd      	mov	sp, r7
  400bf4:	bd80      	pop	{r7, pc}
  400bf6:	bf00      	nop
  400bf8:	00400b29 	.word	0x00400b29
  400bfc:	00400b41 	.word	0x00400b41
  400c00:	20400910 	.word	0x20400910

00400c04 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  400c04:	b580      	push	{r7, lr}
  400c06:	af00      	add	r7, sp, #0
	pio_handler_process(PIOA, ID_PIOA);
  400c08:	4802      	ldr	r0, [pc, #8]	; (400c14 <PIOA_Handler+0x10>)
  400c0a:	210a      	movs	r1, #10
  400c0c:	4b02      	ldr	r3, [pc, #8]	; (400c18 <PIOA_Handler+0x14>)
  400c0e:	4798      	blx	r3
}
  400c10:	bd80      	pop	{r7, pc}
  400c12:	bf00      	nop
  400c14:	400e0e00 	.word	0x400e0e00
  400c18:	00400b59 	.word	0x00400b59

00400c1c <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  400c1c:	b580      	push	{r7, lr}
  400c1e:	af00      	add	r7, sp, #0
    pio_handler_process(PIOB, ID_PIOB);
  400c20:	4802      	ldr	r0, [pc, #8]	; (400c2c <PIOB_Handler+0x10>)
  400c22:	210b      	movs	r1, #11
  400c24:	4b02      	ldr	r3, [pc, #8]	; (400c30 <PIOB_Handler+0x14>)
  400c26:	4798      	blx	r3
}
  400c28:	bd80      	pop	{r7, pc}
  400c2a:	bf00      	nop
  400c2c:	400e1000 	.word	0x400e1000
  400c30:	00400b59 	.word	0x00400b59

00400c34 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  400c34:	b580      	push	{r7, lr}
  400c36:	af00      	add	r7, sp, #0
	pio_handler_process(PIOC, ID_PIOC);
  400c38:	4802      	ldr	r0, [pc, #8]	; (400c44 <PIOC_Handler+0x10>)
  400c3a:	210c      	movs	r1, #12
  400c3c:	4b02      	ldr	r3, [pc, #8]	; (400c48 <PIOC_Handler+0x14>)
  400c3e:	4798      	blx	r3
}
  400c40:	bd80      	pop	{r7, pc}
  400c42:	bf00      	nop
  400c44:	400e1200 	.word	0x400e1200
  400c48:	00400b59 	.word	0x00400b59

00400c4c <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  400c4c:	b580      	push	{r7, lr}
  400c4e:	af00      	add	r7, sp, #0
	pio_handler_process(PIOD, ID_PIOD);
  400c50:	4802      	ldr	r0, [pc, #8]	; (400c5c <PIOD_Handler+0x10>)
  400c52:	2110      	movs	r1, #16
  400c54:	4b02      	ldr	r3, [pc, #8]	; (400c60 <PIOD_Handler+0x14>)
  400c56:	4798      	blx	r3
}
  400c58:	bd80      	pop	{r7, pc}
  400c5a:	bf00      	nop
  400c5c:	400e1400 	.word	0x400e1400
  400c60:	00400b59 	.word	0x00400b59

00400c64 <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  400c64:	b580      	push	{r7, lr}
  400c66:	af00      	add	r7, sp, #0
	pio_handler_process(PIOE, ID_PIOE);
  400c68:	4802      	ldr	r0, [pc, #8]	; (400c74 <PIOE_Handler+0x10>)
  400c6a:	2111      	movs	r1, #17
  400c6c:	4b02      	ldr	r3, [pc, #8]	; (400c78 <PIOE_Handler+0x14>)
  400c6e:	4798      	blx	r3
}
  400c70:	bd80      	pop	{r7, pc}
  400c72:	bf00      	nop
  400c74:	400e1600 	.word	0x400e1600
  400c78:	00400b59 	.word	0x00400b59

00400c7c <pmc_mck_set_division>:
 * \brief Set the division of the MCK.
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
  400c7c:	b480      	push	{r7}
  400c7e:	b083      	sub	sp, #12
  400c80:	af00      	add	r7, sp, #0
  400c82:	6078      	str	r0, [r7, #4]
	switch (ul_div) {
  400c84:	687b      	ldr	r3, [r7, #4]
  400c86:	3b01      	subs	r3, #1
  400c88:	2b03      	cmp	r3, #3
  400c8a:	d81a      	bhi.n	400cc2 <pmc_mck_set_division+0x46>
  400c8c:	a201      	add	r2, pc, #4	; (adr r2, 400c94 <pmc_mck_set_division+0x18>)
  400c8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  400c92:	bf00      	nop
  400c94:	00400ca5 	.word	0x00400ca5
  400c98:	00400cab 	.word	0x00400cab
  400c9c:	00400cb3 	.word	0x00400cb3
  400ca0:	00400cbb 	.word	0x00400cbb
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  400ca4:	2300      	movs	r3, #0
  400ca6:	607b      	str	r3, [r7, #4]
			break;
  400ca8:	e00e      	b.n	400cc8 <pmc_mck_set_division+0x4c>
		case 2:
			ul_div = PMC_MCKR_MDIV_PCK_DIV2;
  400caa:	f44f 7380 	mov.w	r3, #256	; 0x100
  400cae:	607b      	str	r3, [r7, #4]
			break;
  400cb0:	e00a      	b.n	400cc8 <pmc_mck_set_division+0x4c>
		case 3:
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  400cb2:	f44f 7340 	mov.w	r3, #768	; 0x300
  400cb6:	607b      	str	r3, [r7, #4]
			break;
  400cb8:	e006      	b.n	400cc8 <pmc_mck_set_division+0x4c>
		case 4:
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  400cba:	f44f 7300 	mov.w	r3, #512	; 0x200
  400cbe:	607b      	str	r3, [r7, #4]
			break;
  400cc0:	e002      	b.n	400cc8 <pmc_mck_set_division+0x4c>
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  400cc2:	2300      	movs	r3, #0
  400cc4:	607b      	str	r3, [r7, #4]
			break;
  400cc6:	bf00      	nop
	}
	PMC->PMC_MCKR =
  400cc8:	4909      	ldr	r1, [pc, #36]	; (400cf0 <pmc_mck_set_division+0x74>)
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  400cca:	4b09      	ldr	r3, [pc, #36]	; (400cf0 <pmc_mck_set_division+0x74>)
  400ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400cce:	f423 7240 	bic.w	r2, r3, #768	; 0x300
  400cd2:	687b      	ldr	r3, [r7, #4]
  400cd4:	4313      	orrs	r3, r2
			break;
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
  400cd6:	630b      	str	r3, [r1, #48]	; 0x30
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  400cd8:	bf00      	nop
  400cda:	4b05      	ldr	r3, [pc, #20]	; (400cf0 <pmc_mck_set_division+0x74>)
  400cdc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400cde:	f003 0308 	and.w	r3, r3, #8
  400ce2:	2b00      	cmp	r3, #0
  400ce4:	d0f9      	beq.n	400cda <pmc_mck_set_division+0x5e>
}
  400ce6:	370c      	adds	r7, #12
  400ce8:	46bd      	mov	sp, r7
  400cea:	f85d 7b04 	ldr.w	r7, [sp], #4
  400cee:	4770      	bx	lr
  400cf0:	400e0600 	.word	0x400e0600

00400cf4 <pmc_switch_mck_to_pllack>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
  400cf4:	b480      	push	{r7}
  400cf6:	b085      	sub	sp, #20
  400cf8:	af00      	add	r7, sp, #0
  400cfa:	6078      	str	r0, [r7, #4]
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  400cfc:	491d      	ldr	r1, [pc, #116]	; (400d74 <pmc_switch_mck_to_pllack+0x80>)
  400cfe:	4b1d      	ldr	r3, [pc, #116]	; (400d74 <pmc_switch_mck_to_pllack+0x80>)
  400d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400d02:	f023 0270 	bic.w	r2, r3, #112	; 0x70
  400d06:	687b      	ldr	r3, [r7, #4]
  400d08:	4313      	orrs	r3, r2
  400d0a:	630b      	str	r3, [r1, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400d0c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  400d10:	60fb      	str	r3, [r7, #12]
  400d12:	e007      	b.n	400d24 <pmc_switch_mck_to_pllack+0x30>
			--ul_timeout) {
		if (ul_timeout == 0) {
  400d14:	68fb      	ldr	r3, [r7, #12]
  400d16:	2b00      	cmp	r3, #0
  400d18:	d101      	bne.n	400d1e <pmc_switch_mck_to_pllack+0x2a>
			return 1;
  400d1a:	2301      	movs	r3, #1
  400d1c:	e023      	b.n	400d66 <pmc_switch_mck_to_pllack+0x72>
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
  400d1e:	68fb      	ldr	r3, [r7, #12]
  400d20:	3b01      	subs	r3, #1
  400d22:	60fb      	str	r3, [r7, #12]
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400d24:	4b13      	ldr	r3, [pc, #76]	; (400d74 <pmc_switch_mck_to_pllack+0x80>)
  400d26:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400d28:	f003 0308 	and.w	r3, r3, #8
  400d2c:	2b00      	cmp	r3, #0
  400d2e:	d0f1      	beq.n	400d14 <pmc_switch_mck_to_pllack+0x20>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  400d30:	4a10      	ldr	r2, [pc, #64]	; (400d74 <pmc_switch_mck_to_pllack+0x80>)
  400d32:	4b10      	ldr	r3, [pc, #64]	; (400d74 <pmc_switch_mck_to_pllack+0x80>)
  400d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400d36:	f023 0303 	bic.w	r3, r3, #3
  400d3a:	f043 0302 	orr.w	r3, r3, #2
  400d3e:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400d40:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  400d44:	60fb      	str	r3, [r7, #12]
  400d46:	e007      	b.n	400d58 <pmc_switch_mck_to_pllack+0x64>
			--ul_timeout) {
		if (ul_timeout == 0) {
  400d48:	68fb      	ldr	r3, [r7, #12]
  400d4a:	2b00      	cmp	r3, #0
  400d4c:	d101      	bne.n	400d52 <pmc_switch_mck_to_pllack+0x5e>
			return 1;
  400d4e:	2301      	movs	r3, #1
  400d50:	e009      	b.n	400d66 <pmc_switch_mck_to_pllack+0x72>

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
  400d52:	68fb      	ldr	r3, [r7, #12]
  400d54:	3b01      	subs	r3, #1
  400d56:	60fb      	str	r3, [r7, #12]
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400d58:	4b06      	ldr	r3, [pc, #24]	; (400d74 <pmc_switch_mck_to_pllack+0x80>)
  400d5a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400d5c:	f003 0308 	and.w	r3, r3, #8
  400d60:	2b00      	cmp	r3, #0
  400d62:	d0f1      	beq.n	400d48 <pmc_switch_mck_to_pllack+0x54>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
  400d64:	2300      	movs	r3, #0
}
  400d66:	4618      	mov	r0, r3
  400d68:	3714      	adds	r7, #20
  400d6a:	46bd      	mov	sp, r7
  400d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
  400d70:	4770      	bx	lr
  400d72:	bf00      	nop
  400d74:	400e0600 	.word	0x400e0600

00400d78 <pmc_switch_sclk_to_32kxtal>:
 *       VDDIO power supply.
 *
 * \param ul_bypass 0 for Xtal, 1 for bypass.
 */
void pmc_switch_sclk_to_32kxtal(uint32_t ul_bypass)
{
  400d78:	b480      	push	{r7}
  400d7a:	b083      	sub	sp, #12
  400d7c:	af00      	add	r7, sp, #0
  400d7e:	6078      	str	r0, [r7, #4]
	/* Set Bypass mode if required */
	if (ul_bypass == 1) {
  400d80:	687b      	ldr	r3, [r7, #4]
  400d82:	2b01      	cmp	r3, #1
  400d84:	d105      	bne.n	400d92 <pmc_switch_sclk_to_32kxtal+0x1a>
		SUPC->SUPC_MR |= SUPC_MR_KEY_PASSWD |
  400d86:	4907      	ldr	r1, [pc, #28]	; (400da4 <pmc_switch_sclk_to_32kxtal+0x2c>)
  400d88:	4b06      	ldr	r3, [pc, #24]	; (400da4 <pmc_switch_sclk_to_32kxtal+0x2c>)
  400d8a:	689a      	ldr	r2, [r3, #8]
  400d8c:	4b06      	ldr	r3, [pc, #24]	; (400da8 <pmc_switch_sclk_to_32kxtal+0x30>)
  400d8e:	4313      	orrs	r3, r2
  400d90:	608b      	str	r3, [r1, #8]
			SUPC_MR_OSCBYPASS;
	}

	SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_XTALSEL;
  400d92:	4b04      	ldr	r3, [pc, #16]	; (400da4 <pmc_switch_sclk_to_32kxtal+0x2c>)
  400d94:	4a05      	ldr	r2, [pc, #20]	; (400dac <pmc_switch_sclk_to_32kxtal+0x34>)
  400d96:	601a      	str	r2, [r3, #0]
}
  400d98:	370c      	adds	r7, #12
  400d9a:	46bd      	mov	sp, r7
  400d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
  400da0:	4770      	bx	lr
  400da2:	bf00      	nop
  400da4:	400e1810 	.word	0x400e1810
  400da8:	a5100000 	.word	0xa5100000
  400dac:	a5000008 	.word	0xa5000008

00400db0 <pmc_osc_is_ready_32kxtal>:
 *
 * \retval 1 External 32k Xtal is ready.
 * \retval 0 External 32k Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_32kxtal(void)
{
  400db0:	b480      	push	{r7}
  400db2:	af00      	add	r7, sp, #0
	return ((SUPC->SUPC_SR & SUPC_SR_OSCSEL)
  400db4:	4b09      	ldr	r3, [pc, #36]	; (400ddc <pmc_osc_is_ready_32kxtal+0x2c>)
  400db6:	695b      	ldr	r3, [r3, #20]
  400db8:	f003 0380 	and.w	r3, r3, #128	; 0x80
			&& (PMC->PMC_SR & PMC_SR_OSCSELS));
  400dbc:	2b00      	cmp	r3, #0
  400dbe:	d007      	beq.n	400dd0 <pmc_osc_is_ready_32kxtal+0x20>
  400dc0:	4b07      	ldr	r3, [pc, #28]	; (400de0 <pmc_osc_is_ready_32kxtal+0x30>)
  400dc2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400dc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
  400dc8:	2b00      	cmp	r3, #0
  400dca:	d001      	beq.n	400dd0 <pmc_osc_is_ready_32kxtal+0x20>
  400dcc:	2301      	movs	r3, #1
  400dce:	e000      	b.n	400dd2 <pmc_osc_is_ready_32kxtal+0x22>
  400dd0:	2300      	movs	r3, #0
}
  400dd2:	4618      	mov	r0, r3
  400dd4:	46bd      	mov	sp, r7
  400dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
  400dda:	4770      	bx	lr
  400ddc:	400e1810 	.word	0x400e1810
  400de0:	400e0600 	.word	0x400e0600

00400de4 <pmc_switch_mainck_to_fastrc>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 * \retval 2 Invalid frequency.
 */
void pmc_switch_mainck_to_fastrc(uint32_t ul_moscrcf)
{
  400de4:	b480      	push	{r7}
  400de6:	b083      	sub	sp, #12
  400de8:	af00      	add	r7, sp, #0
  400dea:	6078      	str	r0, [r7, #4]
	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	PMC->CKGR_MOR |= (CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCRCEN);
  400dec:	4915      	ldr	r1, [pc, #84]	; (400e44 <pmc_switch_mainck_to_fastrc+0x60>)
  400dee:	4b15      	ldr	r3, [pc, #84]	; (400e44 <pmc_switch_mainck_to_fastrc+0x60>)
  400df0:	6a1a      	ldr	r2, [r3, #32]
  400df2:	4b15      	ldr	r3, [pc, #84]	; (400e48 <pmc_switch_mainck_to_fastrc+0x64>)
  400df4:	4313      	orrs	r3, r2
  400df6:	620b      	str	r3, [r1, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  400df8:	bf00      	nop
  400dfa:	4b12      	ldr	r3, [pc, #72]	; (400e44 <pmc_switch_mainck_to_fastrc+0x60>)
  400dfc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400dfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  400e02:	2b00      	cmp	r3, #0
  400e04:	d0f9      	beq.n	400dfa <pmc_switch_mainck_to_fastrc+0x16>

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  400e06:	490f      	ldr	r1, [pc, #60]	; (400e44 <pmc_switch_mainck_to_fastrc+0x60>)
  400e08:	4b0e      	ldr	r3, [pc, #56]	; (400e44 <pmc_switch_mainck_to_fastrc+0x60>)
  400e0a:	6a1a      	ldr	r2, [r3, #32]
  400e0c:	4b0f      	ldr	r3, [pc, #60]	; (400e4c <pmc_switch_mainck_to_fastrc+0x68>)
  400e0e:	4013      	ands	r3, r2
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;
  400e10:	687a      	ldr	r2, [r7, #4]
  400e12:	4313      	orrs	r3, r2
  400e14:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  400e18:	620b      	str	r3, [r1, #32]
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  400e1a:	bf00      	nop
  400e1c:	4b09      	ldr	r3, [pc, #36]	; (400e44 <pmc_switch_mainck_to_fastrc+0x60>)
  400e1e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400e20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  400e24:	2b00      	cmp	r3, #0
  400e26:	d0f9      	beq.n	400e1c <pmc_switch_mainck_to_fastrc+0x38>

	/* Switch to Fast RC */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
  400e28:	4906      	ldr	r1, [pc, #24]	; (400e44 <pmc_switch_mainck_to_fastrc+0x60>)
  400e2a:	4b06      	ldr	r3, [pc, #24]	; (400e44 <pmc_switch_mainck_to_fastrc+0x60>)
  400e2c:	6a1a      	ldr	r2, [r3, #32]
  400e2e:	4b08      	ldr	r3, [pc, #32]	; (400e50 <pmc_switch_mainck_to_fastrc+0x6c>)
  400e30:	4013      	ands	r3, r2
  400e32:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  400e36:	620b      	str	r3, [r1, #32]
			CKGR_MOR_KEY_PASSWD;
}
  400e38:	370c      	adds	r7, #12
  400e3a:	46bd      	mov	sp, r7
  400e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
  400e40:	4770      	bx	lr
  400e42:	bf00      	nop
  400e44:	400e0600 	.word	0x400e0600
  400e48:	00370008 	.word	0x00370008
  400e4c:	ffc8ff8f 	.word	0xffc8ff8f
  400e50:	fec8ffff 	.word	0xfec8ffff

00400e54 <pmc_switch_mainck_to_xtal>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
  400e54:	b480      	push	{r7}
  400e56:	b083      	sub	sp, #12
  400e58:	af00      	add	r7, sp, #0
  400e5a:	6078      	str	r0, [r7, #4]
  400e5c:	6039      	str	r1, [r7, #0]
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  400e5e:	687b      	ldr	r3, [r7, #4]
  400e60:	2b00      	cmp	r3, #0
  400e62:	d008      	beq.n	400e76 <pmc_switch_mainck_to_xtal+0x22>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400e64:	4913      	ldr	r1, [pc, #76]	; (400eb4 <pmc_switch_mainck_to_xtal+0x60>)
  400e66:	4b13      	ldr	r3, [pc, #76]	; (400eb4 <pmc_switch_mainck_to_xtal+0x60>)
  400e68:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  400e6a:	4a13      	ldr	r2, [pc, #76]	; (400eb8 <pmc_switch_mainck_to_xtal+0x64>)
  400e6c:	401a      	ands	r2, r3
  400e6e:	4b13      	ldr	r3, [pc, #76]	; (400ebc <pmc_switch_mainck_to_xtal+0x68>)
  400e70:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400e72:	620b      	str	r3, [r1, #32]
  400e74:	e018      	b.n	400ea8 <pmc_switch_mainck_to_xtal+0x54>
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400e76:	490f      	ldr	r1, [pc, #60]	; (400eb4 <pmc_switch_mainck_to_xtal+0x60>)
  400e78:	4b0e      	ldr	r3, [pc, #56]	; (400eb4 <pmc_switch_mainck_to_xtal+0x60>)
  400e7a:	6a1a      	ldr	r2, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  400e7c:	4b10      	ldr	r3, [pc, #64]	; (400ec0 <pmc_switch_mainck_to_xtal+0x6c>)
  400e7e:	4013      	ands	r3, r2
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  400e80:	683a      	ldr	r2, [r7, #0]
  400e82:	0212      	lsls	r2, r2, #8
  400e84:	b292      	uxth	r2, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  400e86:	431a      	orrs	r2, r3
  400e88:	4b0e      	ldr	r3, [pc, #56]	; (400ec4 <pmc_switch_mainck_to_xtal+0x70>)
  400e8a:	4313      	orrs	r3, r2
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400e8c:	620b      	str	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  400e8e:	bf00      	nop
  400e90:	4b08      	ldr	r3, [pc, #32]	; (400eb4 <pmc_switch_mainck_to_xtal+0x60>)
  400e92:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400e94:	f003 0301 	and.w	r3, r3, #1
  400e98:	2b00      	cmp	r3, #0
  400e9a:	d0f9      	beq.n	400e90 <pmc_switch_mainck_to_xtal+0x3c>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  400e9c:	4905      	ldr	r1, [pc, #20]	; (400eb4 <pmc_switch_mainck_to_xtal+0x60>)
  400e9e:	4b05      	ldr	r3, [pc, #20]	; (400eb4 <pmc_switch_mainck_to_xtal+0x60>)
  400ea0:	6a1a      	ldr	r2, [r3, #32]
  400ea2:	4b09      	ldr	r3, [pc, #36]	; (400ec8 <pmc_switch_mainck_to_xtal+0x74>)
  400ea4:	4313      	orrs	r3, r2
  400ea6:	620b      	str	r3, [r1, #32]
	}
}
  400ea8:	370c      	adds	r7, #12
  400eaa:	46bd      	mov	sp, r7
  400eac:	f85d 7b04 	ldr.w	r7, [sp], #4
  400eb0:	4770      	bx	lr
  400eb2:	bf00      	nop
  400eb4:	400e0600 	.word	0x400e0600
  400eb8:	fec8fffc 	.word	0xfec8fffc
  400ebc:	01370002 	.word	0x01370002
  400ec0:	ffc8fffc 	.word	0xffc8fffc
  400ec4:	00370001 	.word	0x00370001
  400ec8:	01370000 	.word	0x01370000

00400ecc <pmc_osc_is_ready_mainck>:
 *
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
  400ecc:	b480      	push	{r7}
  400ece:	af00      	add	r7, sp, #0
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  400ed0:	4b04      	ldr	r3, [pc, #16]	; (400ee4 <pmc_osc_is_ready_mainck+0x18>)
  400ed2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400ed4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
  400ed8:	4618      	mov	r0, r3
  400eda:	46bd      	mov	sp, r7
  400edc:	f85d 7b04 	ldr.w	r7, [sp], #4
  400ee0:	4770      	bx	lr
  400ee2:	bf00      	nop
  400ee4:	400e0600 	.word	0x400e0600

00400ee8 <pmc_disable_pllack>:

/**
 * \brief Disable PLLA clock.
 */
void pmc_disable_pllack(void)
{
  400ee8:	b480      	push	{r7}
  400eea:	af00      	add	r7, sp, #0
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  400eec:	4b03      	ldr	r3, [pc, #12]	; (400efc <pmc_disable_pllack+0x14>)
  400eee:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  400ef2:	629a      	str	r2, [r3, #40]	; 0x28
#endif
}
  400ef4:	46bd      	mov	sp, r7
  400ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
  400efa:	4770      	bx	lr
  400efc:	400e0600 	.word	0x400e0600

00400f00 <pmc_is_locked_pllack>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
  400f00:	b480      	push	{r7}
  400f02:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  400f04:	4b04      	ldr	r3, [pc, #16]	; (400f18 <pmc_is_locked_pllack+0x18>)
  400f06:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400f08:	f003 0302 	and.w	r3, r3, #2
}
  400f0c:	4618      	mov	r0, r3
  400f0e:	46bd      	mov	sp, r7
  400f10:	f85d 7b04 	ldr.w	r7, [sp], #4
  400f14:	4770      	bx	lr
  400f16:	bf00      	nop
  400f18:	400e0600 	.word	0x400e0600

00400f1c <pmc_is_locked_upll>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_upll(void)
{
  400f1c:	b480      	push	{r7}
  400f1e:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKU);
  400f20:	4b04      	ldr	r3, [pc, #16]	; (400f34 <pmc_is_locked_upll+0x18>)
  400f22:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400f24:	f003 0340 	and.w	r3, r3, #64	; 0x40
}
  400f28:	4618      	mov	r0, r3
  400f2a:	46bd      	mov	sp, r7
  400f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
  400f30:	4770      	bx	lr
  400f32:	bf00      	nop
  400f34:	400e0600 	.word	0x400e0600

00400f38 <pmc_enable_periph_clk>:
 *
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
  400f38:	b480      	push	{r7}
  400f3a:	b083      	sub	sp, #12
  400f3c:	af00      	add	r7, sp, #0
  400f3e:	6078      	str	r0, [r7, #4]
	if (ul_id > MAX_PERIPH_ID) {
  400f40:	687b      	ldr	r3, [r7, #4]
  400f42:	2b3f      	cmp	r3, #63	; 0x3f
  400f44:	d901      	bls.n	400f4a <pmc_enable_periph_clk+0x12>
		return 1;
  400f46:	2301      	movs	r3, #1
  400f48:	e02f      	b.n	400faa <pmc_enable_periph_clk+0x72>
	}

	if (ul_id < 32) {
  400f4a:	687b      	ldr	r3, [r7, #4]
  400f4c:	2b1f      	cmp	r3, #31
  400f4e:	d813      	bhi.n	400f78 <pmc_enable_periph_clk+0x40>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  400f50:	4b19      	ldr	r3, [pc, #100]	; (400fb8 <pmc_enable_periph_clk+0x80>)
  400f52:	699a      	ldr	r2, [r3, #24]
  400f54:	687b      	ldr	r3, [r7, #4]
  400f56:	2101      	movs	r1, #1
  400f58:	fa01 f303 	lsl.w	r3, r1, r3
  400f5c:	401a      	ands	r2, r3
  400f5e:	687b      	ldr	r3, [r7, #4]
  400f60:	2101      	movs	r1, #1
  400f62:	fa01 f303 	lsl.w	r3, r1, r3
  400f66:	429a      	cmp	r2, r3
  400f68:	d01e      	beq.n	400fa8 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER0 = 1 << ul_id;
  400f6a:	4a13      	ldr	r2, [pc, #76]	; (400fb8 <pmc_enable_periph_clk+0x80>)
  400f6c:	687b      	ldr	r3, [r7, #4]
  400f6e:	2101      	movs	r1, #1
  400f70:	fa01 f303 	lsl.w	r3, r1, r3
  400f74:	6113      	str	r3, [r2, #16]
  400f76:	e017      	b.n	400fa8 <pmc_enable_periph_clk+0x70>
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
  400f78:	687b      	ldr	r3, [r7, #4]
  400f7a:	3b20      	subs	r3, #32
  400f7c:	607b      	str	r3, [r7, #4]
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  400f7e:	4b0e      	ldr	r3, [pc, #56]	; (400fb8 <pmc_enable_periph_clk+0x80>)
  400f80:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  400f84:	687b      	ldr	r3, [r7, #4]
  400f86:	2101      	movs	r1, #1
  400f88:	fa01 f303 	lsl.w	r3, r1, r3
  400f8c:	401a      	ands	r2, r3
  400f8e:	687b      	ldr	r3, [r7, #4]
  400f90:	2101      	movs	r1, #1
  400f92:	fa01 f303 	lsl.w	r3, r1, r3
  400f96:	429a      	cmp	r2, r3
  400f98:	d006      	beq.n	400fa8 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER1 = 1 << ul_id;
  400f9a:	4a07      	ldr	r2, [pc, #28]	; (400fb8 <pmc_enable_periph_clk+0x80>)
  400f9c:	687b      	ldr	r3, [r7, #4]
  400f9e:	2101      	movs	r1, #1
  400fa0:	fa01 f303 	lsl.w	r3, r1, r3
  400fa4:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
		}
#endif
	}

	return 0;
  400fa8:	2300      	movs	r3, #0
}
  400faa:	4618      	mov	r0, r3
  400fac:	370c      	adds	r7, #12
  400fae:	46bd      	mov	sp, r7
  400fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
  400fb4:	4770      	bx	lr
  400fb6:	bf00      	nop
  400fb8:	400e0600 	.word	0x400e0600

00400fbc <twihs_enable_master_mode>:
 * \brief Enable TWIHS master mode.
 *
 * \param p_twihs Pointer to a TWIHS instance.
 */
void twihs_enable_master_mode(Twihs *p_twihs)
{
  400fbc:	b480      	push	{r7}
  400fbe:	b083      	sub	sp, #12
  400fc0:	af00      	add	r7, sp, #0
  400fc2:	6078      	str	r0, [r7, #4]
	/* Set Master Disable bit and Slave Disable bit */
	p_twihs->TWIHS_CR = TWIHS_CR_MSDIS;
  400fc4:	687b      	ldr	r3, [r7, #4]
  400fc6:	2208      	movs	r2, #8
  400fc8:	601a      	str	r2, [r3, #0]
	p_twihs->TWIHS_CR = TWIHS_CR_SVDIS;
  400fca:	687b      	ldr	r3, [r7, #4]
  400fcc:	2220      	movs	r2, #32
  400fce:	601a      	str	r2, [r3, #0]

	/* Set Master Enable bit */
	p_twihs->TWIHS_CR = TWIHS_CR_MSEN;
  400fd0:	687b      	ldr	r3, [r7, #4]
  400fd2:	2204      	movs	r2, #4
  400fd4:	601a      	str	r2, [r3, #0]
}
  400fd6:	370c      	adds	r7, #12
  400fd8:	46bd      	mov	sp, r7
  400fda:	f85d 7b04 	ldr.w	r7, [sp], #4
  400fde:	4770      	bx	lr

00400fe0 <twihs_master_init>:
 * \param p_opt Options for initializing the TWIHS module (see \ref twihs_options_t).
 *
 * \return TWIHS_SUCCESS if initialization is complete, error code otherwise.
 */
uint32_t twihs_master_init(Twihs *p_twihs, const twihs_options_t *p_opt)
{
  400fe0:	b580      	push	{r7, lr}
  400fe2:	b084      	sub	sp, #16
  400fe4:	af00      	add	r7, sp, #0
  400fe6:	6078      	str	r0, [r7, #4]
  400fe8:	6039      	str	r1, [r7, #0]
	uint32_t status = TWIHS_SUCCESS;
  400fea:	2300      	movs	r3, #0
  400fec:	60fb      	str	r3, [r7, #12]

	/* Disable TWIHS interrupts */
	p_twihs->TWIHS_IDR = ~0UL;
  400fee:	687b      	ldr	r3, [r7, #4]
  400ff0:	f04f 32ff 	mov.w	r2, #4294967295
  400ff4:	629a      	str	r2, [r3, #40]	; 0x28

	/* Dummy read in status register */
	p_twihs->TWIHS_SR;
  400ff6:	687b      	ldr	r3, [r7, #4]
  400ff8:	6a1b      	ldr	r3, [r3, #32]

	/* Reset TWIHS peripheral */
	twihs_reset(p_twihs);
  400ffa:	6878      	ldr	r0, [r7, #4]
  400ffc:	4b0b      	ldr	r3, [pc, #44]	; (40102c <twihs_master_init+0x4c>)
  400ffe:	4798      	blx	r3

	twihs_enable_master_mode(p_twihs);
  401000:	6878      	ldr	r0, [r7, #4]
  401002:	4b0b      	ldr	r3, [pc, #44]	; (401030 <twihs_master_init+0x50>)
  401004:	4798      	blx	r3

	/* Select the speed */
	if (twihs_set_speed(p_twihs, p_opt->speed, p_opt->master_clk) == FAIL) {
  401006:	683b      	ldr	r3, [r7, #0]
  401008:	685a      	ldr	r2, [r3, #4]
  40100a:	683b      	ldr	r3, [r7, #0]
  40100c:	681b      	ldr	r3, [r3, #0]
  40100e:	6878      	ldr	r0, [r7, #4]
  401010:	4611      	mov	r1, r2
  401012:	461a      	mov	r2, r3
  401014:	4b07      	ldr	r3, [pc, #28]	; (401034 <twihs_master_init+0x54>)
  401016:	4798      	blx	r3
  401018:	4603      	mov	r3, r0
  40101a:	2b01      	cmp	r3, #1
  40101c:	d101      	bne.n	401022 <twihs_master_init+0x42>
		/* The desired speed setting is rejected */
		status = TWIHS_INVALID_ARGUMENT;
  40101e:	2301      	movs	r3, #1
  401020:	60fb      	str	r3, [r7, #12]
	}

	return status;
  401022:	68fb      	ldr	r3, [r7, #12]
}
  401024:	4618      	mov	r0, r3
  401026:	3710      	adds	r7, #16
  401028:	46bd      	mov	sp, r7
  40102a:	bd80      	pop	{r7, pc}
  40102c:	004012c9 	.word	0x004012c9
  401030:	00400fbd 	.word	0x00400fbd
  401034:	00401039 	.word	0x00401039

00401038 <twihs_set_speed>:
 *
 * \retval PASS New speed setting is accepted.
 * \retval FAIL New speed setting is rejected.
 */
uint32_t twihs_set_speed(Twihs *p_twihs, uint32_t ul_speed, uint32_t ul_mck)
{
  401038:	b480      	push	{r7}
  40103a:	b087      	sub	sp, #28
  40103c:	af00      	add	r7, sp, #0
  40103e:	60f8      	str	r0, [r7, #12]
  401040:	60b9      	str	r1, [r7, #8]
  401042:	607a      	str	r2, [r7, #4]
	uint32_t ckdiv = 0;
  401044:	2300      	movs	r3, #0
  401046:	617b      	str	r3, [r7, #20]
	uint32_t c_lh_div;

	/* High-Speed can be only used in slave mode, 400k is the max speed allowed for master */
	if (ul_speed > I2C_FAST_MODE_SPEED) {
  401048:	68bb      	ldr	r3, [r7, #8]
  40104a:	4a16      	ldr	r2, [pc, #88]	; (4010a4 <twihs_set_speed+0x6c>)
  40104c:	4293      	cmp	r3, r2
  40104e:	d901      	bls.n	401054 <twihs_set_speed+0x1c>
		return FAIL;
  401050:	2301      	movs	r3, #1
  401052:	e021      	b.n	401098 <twihs_set_speed+0x60>
	}

	c_lh_div = ul_mck / (ul_speed * TWIHS_CLK_DIVIDER) - TWIHS_CLK_CALC_ARGU;
  401054:	68bb      	ldr	r3, [r7, #8]
  401056:	005b      	lsls	r3, r3, #1
  401058:	687a      	ldr	r2, [r7, #4]
  40105a:	fbb2 f3f3 	udiv	r3, r2, r3
  40105e:	3b04      	subs	r3, #4
  401060:	613b      	str	r3, [r7, #16]

	/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
	while ((c_lh_div > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  401062:	e005      	b.n	401070 <twihs_set_speed+0x38>
		/* Increase clock divider */
		ckdiv++;
  401064:	697b      	ldr	r3, [r7, #20]
  401066:	3301      	adds	r3, #1
  401068:	617b      	str	r3, [r7, #20]
		/* Divide cldiv value */
		c_lh_div /= TWIHS_CLK_DIVIDER;
  40106a:	693b      	ldr	r3, [r7, #16]
  40106c:	085b      	lsrs	r3, r3, #1
  40106e:	613b      	str	r3, [r7, #16]
	}

	c_lh_div = ul_mck / (ul_speed * TWIHS_CLK_DIVIDER) - TWIHS_CLK_CALC_ARGU;

	/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
	while ((c_lh_div > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  401070:	693b      	ldr	r3, [r7, #16]
  401072:	2bff      	cmp	r3, #255	; 0xff
  401074:	d902      	bls.n	40107c <twihs_set_speed+0x44>
  401076:	697b      	ldr	r3, [r7, #20]
  401078:	2b06      	cmp	r3, #6
  40107a:	d9f3      	bls.n	401064 <twihs_set_speed+0x2c>
		c_lh_div /= TWIHS_CLK_DIVIDER;
	}

	/* set clock waveform generator register */
	p_twihs->TWIHS_CWGR =
			TWIHS_CWGR_CLDIV(c_lh_div) | TWIHS_CWGR_CHDIV(c_lh_div) |
  40107c:	693b      	ldr	r3, [r7, #16]
  40107e:	b2da      	uxtb	r2, r3
  401080:	693b      	ldr	r3, [r7, #16]
  401082:	021b      	lsls	r3, r3, #8
  401084:	b29b      	uxth	r3, r3
  401086:	431a      	orrs	r2, r3
			TWIHS_CWGR_CKDIV(ckdiv);
  401088:	697b      	ldr	r3, [r7, #20]
  40108a:	041b      	lsls	r3, r3, #16
  40108c:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
		c_lh_div /= TWIHS_CLK_DIVIDER;
	}

	/* set clock waveform generator register */
	p_twihs->TWIHS_CWGR =
			TWIHS_CWGR_CLDIV(c_lh_div) | TWIHS_CWGR_CHDIV(c_lh_div) |
  401090:	431a      	orrs	r2, r3
		/* Divide cldiv value */
		c_lh_div /= TWIHS_CLK_DIVIDER;
	}

	/* set clock waveform generator register */
	p_twihs->TWIHS_CWGR =
  401092:	68fb      	ldr	r3, [r7, #12]
  401094:	611a      	str	r2, [r3, #16]
			TWIHS_CWGR_CLDIV(c_lh_div) | TWIHS_CWGR_CHDIV(c_lh_div) |
			TWIHS_CWGR_CKDIV(ckdiv);

	return PASS;
  401096:	2300      	movs	r3, #0
}
  401098:	4618      	mov	r0, r3
  40109a:	371c      	adds	r7, #28
  40109c:	46bd      	mov	sp, r7
  40109e:	f85d 7b04 	ldr.w	r7, [sp], #4
  4010a2:	4770      	bx	lr
  4010a4:	00061a80 	.word	0x00061a80

004010a8 <twihs_mk_addr>:
 * which byte is the MSB to start with.
 *
 * Please see the device datasheet for details on this.
 */
static uint32_t twihs_mk_addr(const uint8_t *addr, int len)
{
  4010a8:	b480      	push	{r7}
  4010aa:	b085      	sub	sp, #20
  4010ac:	af00      	add	r7, sp, #0
  4010ae:	6078      	str	r0, [r7, #4]
  4010b0:	6039      	str	r1, [r7, #0]
	uint32_t val;

	if (len == 0)
  4010b2:	683b      	ldr	r3, [r7, #0]
  4010b4:	2b00      	cmp	r3, #0
  4010b6:	d101      	bne.n	4010bc <twihs_mk_addr+0x14>
		return 0;
  4010b8:	2300      	movs	r3, #0
  4010ba:	e01d      	b.n	4010f8 <twihs_mk_addr+0x50>

	val = addr[0];
  4010bc:	687b      	ldr	r3, [r7, #4]
  4010be:	781b      	ldrb	r3, [r3, #0]
  4010c0:	60fb      	str	r3, [r7, #12]
	if (len > 1) {
  4010c2:	683b      	ldr	r3, [r7, #0]
  4010c4:	2b01      	cmp	r3, #1
  4010c6:	dd09      	ble.n	4010dc <twihs_mk_addr+0x34>
		val <<= 8;
  4010c8:	68fb      	ldr	r3, [r7, #12]
  4010ca:	021b      	lsls	r3, r3, #8
  4010cc:	60fb      	str	r3, [r7, #12]
		val |= addr[1];
  4010ce:	687b      	ldr	r3, [r7, #4]
  4010d0:	3301      	adds	r3, #1
  4010d2:	781b      	ldrb	r3, [r3, #0]
  4010d4:	461a      	mov	r2, r3
  4010d6:	68fb      	ldr	r3, [r7, #12]
  4010d8:	4313      	orrs	r3, r2
  4010da:	60fb      	str	r3, [r7, #12]
	}
	if (len > 2) {
  4010dc:	683b      	ldr	r3, [r7, #0]
  4010de:	2b02      	cmp	r3, #2
  4010e0:	dd09      	ble.n	4010f6 <twihs_mk_addr+0x4e>
		val <<= 8;
  4010e2:	68fb      	ldr	r3, [r7, #12]
  4010e4:	021b      	lsls	r3, r3, #8
  4010e6:	60fb      	str	r3, [r7, #12]
		val |= addr[2];
  4010e8:	687b      	ldr	r3, [r7, #4]
  4010ea:	3302      	adds	r3, #2
  4010ec:	781b      	ldrb	r3, [r3, #0]
  4010ee:	461a      	mov	r2, r3
  4010f0:	68fb      	ldr	r3, [r7, #12]
  4010f2:	4313      	orrs	r3, r2
  4010f4:	60fb      	str	r3, [r7, #12]
	}
	return val;
  4010f6:	68fb      	ldr	r3, [r7, #12]
}
  4010f8:	4618      	mov	r0, r3
  4010fa:	3714      	adds	r7, #20
  4010fc:	46bd      	mov	sp, r7
  4010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
  401102:	4770      	bx	lr

00401104 <twihs_master_read>:
 * \param p_packet Packet information and data (see \ref twihs_packet_t).
 *
 * \return TWIHS_SUCCESS if all bytes were read, error code otherwise.
 */
uint32_t twihs_master_read(Twihs *p_twihs, twihs_packet_t *p_packet)
{
  401104:	b580      	push	{r7, lr}
  401106:	b086      	sub	sp, #24
  401108:	af00      	add	r7, sp, #0
  40110a:	6078      	str	r0, [r7, #4]
  40110c:	6039      	str	r1, [r7, #0]
	uint32_t status, cnt = p_packet->length;
  40110e:	683b      	ldr	r3, [r7, #0]
  401110:	68db      	ldr	r3, [r3, #12]
  401112:	617b      	str	r3, [r7, #20]
	uint8_t *buffer = p_packet->buffer;
  401114:	683b      	ldr	r3, [r7, #0]
  401116:	689b      	ldr	r3, [r3, #8]
  401118:	613b      	str	r3, [r7, #16]
	uint32_t timeout = TWIHS_TIMEOUT;
  40111a:	f643 2398 	movw	r3, #15000	; 0x3a98
  40111e:	60fb      	str	r3, [r7, #12]

	/* Check argument */
	if (cnt == 0) {
  401120:	697b      	ldr	r3, [r7, #20]
  401122:	2b00      	cmp	r3, #0
  401124:	d101      	bne.n	40112a <twihs_master_read+0x26>
		return TWIHS_INVALID_ARGUMENT;
  401126:	2301      	movs	r3, #1
  401128:	e059      	b.n	4011de <twihs_master_read+0xda>
	}

	/* Set read mode, slave address and 3 internal address byte lengths */
	p_twihs->TWIHS_MMR = 0;
  40112a:	687b      	ldr	r3, [r7, #4]
  40112c:	2200      	movs	r2, #0
  40112e:	605a      	str	r2, [r3, #4]
	p_twihs->TWIHS_MMR = TWIHS_MMR_MREAD | TWIHS_MMR_DADR(p_packet->chip) |
  401130:	683b      	ldr	r3, [r7, #0]
  401132:	7c1b      	ldrb	r3, [r3, #16]
  401134:	041b      	lsls	r3, r3, #16
  401136:	f403 02fe 	and.w	r2, r3, #8323072	; 0x7f0000
			((p_packet->addr_length << TWIHS_MMR_IADRSZ_Pos) &
  40113a:	683b      	ldr	r3, [r7, #0]
  40113c:	685b      	ldr	r3, [r3, #4]
  40113e:	021b      	lsls	r3, r3, #8
  401140:	f403 7340 	and.w	r3, r3, #768	; 0x300
		return TWIHS_INVALID_ARGUMENT;
	}

	/* Set read mode, slave address and 3 internal address byte lengths */
	p_twihs->TWIHS_MMR = 0;
	p_twihs->TWIHS_MMR = TWIHS_MMR_MREAD | TWIHS_MMR_DADR(p_packet->chip) |
  401144:	4313      	orrs	r3, r2
  401146:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
  40114a:	687b      	ldr	r3, [r7, #4]
  40114c:	605a      	str	r2, [r3, #4]
			((p_packet->addr_length << TWIHS_MMR_IADRSZ_Pos) &
			TWIHS_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twihs->TWIHS_IADR = 0;
  40114e:	687b      	ldr	r3, [r7, #4]
  401150:	2200      	movs	r2, #0
  401152:	60da      	str	r2, [r3, #12]
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);
  401154:	683a      	ldr	r2, [r7, #0]
  401156:	683b      	ldr	r3, [r7, #0]
  401158:	685b      	ldr	r3, [r3, #4]
  40115a:	4610      	mov	r0, r2
  40115c:	4619      	mov	r1, r3
  40115e:	4b22      	ldr	r3, [pc, #136]	; (4011e8 <twihs_master_read+0xe4>)
  401160:	4798      	blx	r3
  401162:	4602      	mov	r2, r0
  401164:	687b      	ldr	r3, [r7, #4]
  401166:	60da      	str	r2, [r3, #12]

	/* Send a START Condition */
	p_twihs->TWIHS_CR = TWIHS_CR_START;
  401168:	687b      	ldr	r3, [r7, #4]
  40116a:	2201      	movs	r2, #1
  40116c:	601a      	str	r2, [r3, #0]

	while (cnt > 0) {
  40116e:	e029      	b.n	4011c4 <twihs_master_read+0xc0>
		status = p_twihs->TWIHS_SR;
  401170:	687b      	ldr	r3, [r7, #4]
  401172:	6a1b      	ldr	r3, [r3, #32]
  401174:	60bb      	str	r3, [r7, #8]
		if (status & TWIHS_SR_NACK) {
  401176:	68bb      	ldr	r3, [r7, #8]
  401178:	f403 7380 	and.w	r3, r3, #256	; 0x100
  40117c:	2b00      	cmp	r3, #0
  40117e:	d001      	beq.n	401184 <twihs_master_read+0x80>
			return TWIHS_RECEIVE_NACK;
  401180:	2305      	movs	r3, #5
  401182:	e02c      	b.n	4011de <twihs_master_read+0xda>
		}
		if (!timeout--) {
  401184:	68fb      	ldr	r3, [r7, #12]
  401186:	1e5a      	subs	r2, r3, #1
  401188:	60fa      	str	r2, [r7, #12]
  40118a:	2b00      	cmp	r3, #0
  40118c:	d101      	bne.n	401192 <twihs_master_read+0x8e>
			return TWIHS_ERROR_TIMEOUT;
  40118e:	2309      	movs	r3, #9
  401190:	e025      	b.n	4011de <twihs_master_read+0xda>
		}
		/* Last byte ? */
		if (cnt == 1) {
  401192:	697b      	ldr	r3, [r7, #20]
  401194:	2b01      	cmp	r3, #1
  401196:	d102      	bne.n	40119e <twihs_master_read+0x9a>
			p_twihs->TWIHS_CR = TWIHS_CR_STOP;
  401198:	687b      	ldr	r3, [r7, #4]
  40119a:	2202      	movs	r2, #2
  40119c:	601a      	str	r2, [r3, #0]
		}

		if (!(status & TWIHS_SR_RXRDY)) {
  40119e:	68bb      	ldr	r3, [r7, #8]
  4011a0:	f003 0302 	and.w	r3, r3, #2
  4011a4:	2b00      	cmp	r3, #0
  4011a6:	d100      	bne.n	4011aa <twihs_master_read+0xa6>
			continue;
  4011a8:	e00c      	b.n	4011c4 <twihs_master_read+0xc0>
		}
		*buffer++ = p_twihs->TWIHS_RHR;
  4011aa:	693b      	ldr	r3, [r7, #16]
  4011ac:	1c5a      	adds	r2, r3, #1
  4011ae:	613a      	str	r2, [r7, #16]
  4011b0:	687a      	ldr	r2, [r7, #4]
  4011b2:	6b12      	ldr	r2, [r2, #48]	; 0x30
  4011b4:	b2d2      	uxtb	r2, r2
  4011b6:	701a      	strb	r2, [r3, #0]

		cnt--;
  4011b8:	697b      	ldr	r3, [r7, #20]
  4011ba:	3b01      	subs	r3, #1
  4011bc:	617b      	str	r3, [r7, #20]
		timeout = TWIHS_TIMEOUT;
  4011be:	f643 2398 	movw	r3, #15000	; 0x3a98
  4011c2:	60fb      	str	r3, [r7, #12]
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);

	/* Send a START Condition */
	p_twihs->TWIHS_CR = TWIHS_CR_START;

	while (cnt > 0) {
  4011c4:	697b      	ldr	r3, [r7, #20]
  4011c6:	2b00      	cmp	r3, #0
  4011c8:	d1d2      	bne.n	401170 <twihs_master_read+0x6c>

		cnt--;
		timeout = TWIHS_TIMEOUT;
	}

	while (!(p_twihs->TWIHS_SR & TWIHS_SR_TXCOMP)) {
  4011ca:	bf00      	nop
  4011cc:	687b      	ldr	r3, [r7, #4]
  4011ce:	6a1b      	ldr	r3, [r3, #32]
  4011d0:	f003 0301 	and.w	r3, r3, #1
  4011d4:	2b00      	cmp	r3, #0
  4011d6:	d0f9      	beq.n	4011cc <twihs_master_read+0xc8>
	}

	p_twihs->TWIHS_SR;
  4011d8:	687b      	ldr	r3, [r7, #4]
  4011da:	6a1b      	ldr	r3, [r3, #32]

	return TWIHS_SUCCESS;
  4011dc:	2300      	movs	r3, #0
}
  4011de:	4618      	mov	r0, r3
  4011e0:	3718      	adds	r7, #24
  4011e2:	46bd      	mov	sp, r7
  4011e4:	bd80      	pop	{r7, pc}
  4011e6:	bf00      	nop
  4011e8:	004010a9 	.word	0x004010a9

004011ec <twihs_master_write>:
 * \param p_packet Packet information and data (see \ref twihs_packet_t).
 *
 * \return TWIHS_SUCCESS if all bytes were written, error code otherwise.
 */
uint32_t twihs_master_write(Twihs *p_twihs, twihs_packet_t *p_packet)
{
  4011ec:	b580      	push	{r7, lr}
  4011ee:	b086      	sub	sp, #24
  4011f0:	af00      	add	r7, sp, #0
  4011f2:	6078      	str	r0, [r7, #4]
  4011f4:	6039      	str	r1, [r7, #0]
	uint32_t status, cnt = p_packet->length;
  4011f6:	683b      	ldr	r3, [r7, #0]
  4011f8:	68db      	ldr	r3, [r3, #12]
  4011fa:	617b      	str	r3, [r7, #20]
	uint8_t *buffer = p_packet->buffer;
  4011fc:	683b      	ldr	r3, [r7, #0]
  4011fe:	689b      	ldr	r3, [r3, #8]
  401200:	613b      	str	r3, [r7, #16]

	/* Check argument */
	if (cnt == 0) {
  401202:	697b      	ldr	r3, [r7, #20]
  401204:	2b00      	cmp	r3, #0
  401206:	d101      	bne.n	40120c <twihs_master_write+0x20>
		return TWIHS_INVALID_ARGUMENT;
  401208:	2301      	movs	r3, #1
  40120a:	e056      	b.n	4012ba <twihs_master_write+0xce>
	}

	/* Set write mode, slave address and 3 internal address byte lengths */
	p_twihs->TWIHS_MMR = 0;
  40120c:	687b      	ldr	r3, [r7, #4]
  40120e:	2200      	movs	r2, #0
  401210:	605a      	str	r2, [r3, #4]
	p_twihs->TWIHS_MMR = TWIHS_MMR_DADR(p_packet->chip) |
  401212:	683b      	ldr	r3, [r7, #0]
  401214:	7c1b      	ldrb	r3, [r3, #16]
  401216:	041b      	lsls	r3, r3, #16
  401218:	f403 02fe 	and.w	r2, r3, #8323072	; 0x7f0000
			((p_packet->addr_length << TWIHS_MMR_IADRSZ_Pos) &
  40121c:	683b      	ldr	r3, [r7, #0]
  40121e:	685b      	ldr	r3, [r3, #4]
  401220:	021b      	lsls	r3, r3, #8
  401222:	f403 7340 	and.w	r3, r3, #768	; 0x300
		return TWIHS_INVALID_ARGUMENT;
	}

	/* Set write mode, slave address and 3 internal address byte lengths */
	p_twihs->TWIHS_MMR = 0;
	p_twihs->TWIHS_MMR = TWIHS_MMR_DADR(p_packet->chip) |
  401226:	431a      	orrs	r2, r3
  401228:	687b      	ldr	r3, [r7, #4]
  40122a:	605a      	str	r2, [r3, #4]
			((p_packet->addr_length << TWIHS_MMR_IADRSZ_Pos) &
			TWIHS_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twihs->TWIHS_IADR = 0;
  40122c:	687b      	ldr	r3, [r7, #4]
  40122e:	2200      	movs	r2, #0
  401230:	60da      	str	r2, [r3, #12]
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);
  401232:	683a      	ldr	r2, [r7, #0]
  401234:	683b      	ldr	r3, [r7, #0]
  401236:	685b      	ldr	r3, [r3, #4]
  401238:	4610      	mov	r0, r2
  40123a:	4619      	mov	r1, r3
  40123c:	4b21      	ldr	r3, [pc, #132]	; (4012c4 <twihs_master_write+0xd8>)
  40123e:	4798      	blx	r3
  401240:	4602      	mov	r2, r0
  401242:	687b      	ldr	r3, [r7, #4]
  401244:	60da      	str	r2, [r3, #12]

	/* Send all bytes */
	while (cnt > 0) {
  401246:	e019      	b.n	40127c <twihs_master_write+0x90>
		status = p_twihs->TWIHS_SR;
  401248:	687b      	ldr	r3, [r7, #4]
  40124a:	6a1b      	ldr	r3, [r3, #32]
  40124c:	60fb      	str	r3, [r7, #12]
		if (status & TWIHS_SR_NACK) {
  40124e:	68fb      	ldr	r3, [r7, #12]
  401250:	f403 7380 	and.w	r3, r3, #256	; 0x100
  401254:	2b00      	cmp	r3, #0
  401256:	d001      	beq.n	40125c <twihs_master_write+0x70>
			return TWIHS_RECEIVE_NACK;
  401258:	2305      	movs	r3, #5
  40125a:	e02e      	b.n	4012ba <twihs_master_write+0xce>
		}

		if (!(status & TWIHS_SR_TXRDY)) {
  40125c:	68fb      	ldr	r3, [r7, #12]
  40125e:	f003 0304 	and.w	r3, r3, #4
  401262:	2b00      	cmp	r3, #0
  401264:	d100      	bne.n	401268 <twihs_master_write+0x7c>
			continue;
  401266:	e009      	b.n	40127c <twihs_master_write+0x90>
		}
		p_twihs->TWIHS_THR = *buffer++;
  401268:	693b      	ldr	r3, [r7, #16]
  40126a:	1c5a      	adds	r2, r3, #1
  40126c:	613a      	str	r2, [r7, #16]
  40126e:	781b      	ldrb	r3, [r3, #0]
  401270:	461a      	mov	r2, r3
  401272:	687b      	ldr	r3, [r7, #4]
  401274:	635a      	str	r2, [r3, #52]	; 0x34

		cnt--;
  401276:	697b      	ldr	r3, [r7, #20]
  401278:	3b01      	subs	r3, #1
  40127a:	617b      	str	r3, [r7, #20]
	/* Set internal address for remote chip */
	p_twihs->TWIHS_IADR = 0;
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);

	/* Send all bytes */
	while (cnt > 0) {
  40127c:	697b      	ldr	r3, [r7, #20]
  40127e:	2b00      	cmp	r3, #0
  401280:	d1e2      	bne.n	401248 <twihs_master_write+0x5c>

		cnt--;
	}

	while (1) {
		status = p_twihs->TWIHS_SR;
  401282:	687b      	ldr	r3, [r7, #4]
  401284:	6a1b      	ldr	r3, [r3, #32]
  401286:	60fb      	str	r3, [r7, #12]
		if (status & TWIHS_SR_NACK) {
  401288:	68fb      	ldr	r3, [r7, #12]
  40128a:	f403 7380 	and.w	r3, r3, #256	; 0x100
  40128e:	2b00      	cmp	r3, #0
  401290:	d001      	beq.n	401296 <twihs_master_write+0xaa>
			return TWIHS_RECEIVE_NACK;
  401292:	2305      	movs	r3, #5
  401294:	e011      	b.n	4012ba <twihs_master_write+0xce>
		}

		if (status & TWIHS_SR_TXRDY) {
  401296:	68fb      	ldr	r3, [r7, #12]
  401298:	f003 0304 	and.w	r3, r3, #4
  40129c:	2b00      	cmp	r3, #0
  40129e:	d004      	beq.n	4012aa <twihs_master_write+0xbe>
			break;
  4012a0:	bf00      	nop
		}
	}

	p_twihs->TWIHS_CR = TWIHS_CR_STOP;
  4012a2:	687b      	ldr	r3, [r7, #4]
  4012a4:	2202      	movs	r2, #2
  4012a6:	601a      	str	r2, [r3, #0]

	while (!(p_twihs->TWIHS_SR & TWIHS_SR_TXCOMP)) {
  4012a8:	e000      	b.n	4012ac <twihs_master_write+0xc0>
		}

		if (status & TWIHS_SR_TXRDY) {
			break;
		}
	}
  4012aa:	e7ea      	b.n	401282 <twihs_master_write+0x96>

	p_twihs->TWIHS_CR = TWIHS_CR_STOP;

	while (!(p_twihs->TWIHS_SR & TWIHS_SR_TXCOMP)) {
  4012ac:	687b      	ldr	r3, [r7, #4]
  4012ae:	6a1b      	ldr	r3, [r3, #32]
  4012b0:	f003 0301 	and.w	r3, r3, #1
  4012b4:	2b00      	cmp	r3, #0
  4012b6:	d0f9      	beq.n	4012ac <twihs_master_write+0xc0>
	}

	return TWIHS_SUCCESS;
  4012b8:	2300      	movs	r3, #0
}
  4012ba:	4618      	mov	r0, r3
  4012bc:	3718      	adds	r7, #24
  4012be:	46bd      	mov	sp, r7
  4012c0:	bd80      	pop	{r7, pc}
  4012c2:	bf00      	nop
  4012c4:	004010a9 	.word	0x004010a9

004012c8 <twihs_reset>:
 * \brief Reset TWIHS.
 *
 * \param p_twihs Pointer to a TWIHS instance.
 */
void twihs_reset(Twihs *p_twihs)
{
  4012c8:	b480      	push	{r7}
  4012ca:	b083      	sub	sp, #12
  4012cc:	af00      	add	r7, sp, #0
  4012ce:	6078      	str	r0, [r7, #4]
	/* Set SWRST bit to reset TWIHS peripheral */
	p_twihs->TWIHS_CR = TWIHS_CR_SWRST;
  4012d0:	687b      	ldr	r3, [r7, #4]
  4012d2:	2280      	movs	r2, #128	; 0x80
  4012d4:	601a      	str	r2, [r3, #0]
	p_twihs->TWIHS_RHR;
  4012d6:	687b      	ldr	r3, [r7, #4]
  4012d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
  4012da:	370c      	adds	r7, #12
  4012dc:	46bd      	mov	sp, r7
  4012de:	f85d 7b04 	ldr.w	r7, [sp], #4
  4012e2:	4770      	bx	lr

004012e4 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
  4012e4:	b480      	push	{r7}
  4012e6:	b085      	sub	sp, #20
  4012e8:	af00      	add	r7, sp, #0
  4012ea:	6078      	str	r0, [r7, #4]
  4012ec:	6039      	str	r1, [r7, #0]
	uint32_t cd = 0;
  4012ee:	2300      	movs	r3, #0
  4012f0:	60fb      	str	r3, [r7, #12]

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
  4012f2:	687b      	ldr	r3, [r7, #4]
  4012f4:	22ac      	movs	r2, #172	; 0xac
  4012f6:	601a      	str	r2, [r3, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
  4012f8:	683b      	ldr	r3, [r7, #0]
  4012fa:	681a      	ldr	r2, [r3, #0]
  4012fc:	683b      	ldr	r3, [r7, #0]
  4012fe:	685b      	ldr	r3, [r3, #4]
  401300:	fbb2 f3f3 	udiv	r3, r2, r3
  401304:	091b      	lsrs	r3, r3, #4
  401306:	60fb      	str	r3, [r7, #12]
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
  401308:	68fb      	ldr	r3, [r7, #12]
  40130a:	2b00      	cmp	r3, #0
  40130c:	d003      	beq.n	401316 <uart_init+0x32>
  40130e:	68fb      	ldr	r3, [r7, #12]
  401310:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
  401314:	d301      	bcc.n	40131a <uart_init+0x36>
		return 1;
  401316:	2301      	movs	r3, #1
  401318:	e00a      	b.n	401330 <uart_init+0x4c>

	p_uart->UART_BRGR = cd;
  40131a:	687b      	ldr	r3, [r7, #4]
  40131c:	68fa      	ldr	r2, [r7, #12]
  40131e:	621a      	str	r2, [r3, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
  401320:	683b      	ldr	r3, [r7, #0]
  401322:	689a      	ldr	r2, [r3, #8]
  401324:	687b      	ldr	r3, [r7, #4]
  401326:	605a      	str	r2, [r3, #4]
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
  401328:	687b      	ldr	r3, [r7, #4]
  40132a:	2250      	movs	r2, #80	; 0x50
  40132c:	601a      	str	r2, [r3, #0]

	return 0;
  40132e:	2300      	movs	r3, #0
}
  401330:	4618      	mov	r0, r3
  401332:	3714      	adds	r7, #20
  401334:	46bd      	mov	sp, r7
  401336:	f85d 7b04 	ldr.w	r7, [sp], #4
  40133a:	4770      	bx	lr

0040133c <uart_write>:
 *
 * \retval 0 Success.
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
  40133c:	b480      	push	{r7}
  40133e:	b083      	sub	sp, #12
  401340:	af00      	add	r7, sp, #0
  401342:	6078      	str	r0, [r7, #4]
  401344:	460b      	mov	r3, r1
  401346:	70fb      	strb	r3, [r7, #3]
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  401348:	687b      	ldr	r3, [r7, #4]
  40134a:	695b      	ldr	r3, [r3, #20]
  40134c:	f003 0302 	and.w	r3, r3, #2
  401350:	2b00      	cmp	r3, #0
  401352:	d101      	bne.n	401358 <uart_write+0x1c>
		return 1;
  401354:	2301      	movs	r3, #1
  401356:	e003      	b.n	401360 <uart_write+0x24>

	/* Send character */
	p_uart->UART_THR = uc_data;
  401358:	78fa      	ldrb	r2, [r7, #3]
  40135a:	687b      	ldr	r3, [r7, #4]
  40135c:	61da      	str	r2, [r3, #28]
	return 0;
  40135e:	2300      	movs	r3, #0
}
  401360:	4618      	mov	r0, r3
  401362:	370c      	adds	r7, #12
  401364:	46bd      	mov	sp, r7
  401366:	f85d 7b04 	ldr.w	r7, [sp], #4
  40136a:	4770      	bx	lr

0040136c <uart_read>:
 *
 * \retval 0 Success.
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
  40136c:	b480      	push	{r7}
  40136e:	b083      	sub	sp, #12
  401370:	af00      	add	r7, sp, #0
  401372:	6078      	str	r0, [r7, #4]
  401374:	6039      	str	r1, [r7, #0]
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  401376:	687b      	ldr	r3, [r7, #4]
  401378:	695b      	ldr	r3, [r3, #20]
  40137a:	f003 0301 	and.w	r3, r3, #1
  40137e:	2b00      	cmp	r3, #0
  401380:	d101      	bne.n	401386 <uart_read+0x1a>
		return 1;
  401382:	2301      	movs	r3, #1
  401384:	e005      	b.n	401392 <uart_read+0x26>

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  401386:	687b      	ldr	r3, [r7, #4]
  401388:	699b      	ldr	r3, [r3, #24]
  40138a:	b2da      	uxtb	r2, r3
  40138c:	683b      	ldr	r3, [r7, #0]
  40138e:	701a      	strb	r2, [r3, #0]
	return 0;
  401390:	2300      	movs	r3, #0
}
  401392:	4618      	mov	r0, r3
  401394:	370c      	adds	r7, #12
  401396:	46bd      	mov	sp, r7
  401398:	f85d 7b04 	ldr.w	r7, [sp], #4
  40139c:	4770      	bx	lr
  40139e:	bf00      	nop

004013a0 <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  4013a0:	b480      	push	{r7}
  4013a2:	b089      	sub	sp, #36	; 0x24
  4013a4:	af00      	add	r7, sp, #0
  4013a6:	60f8      	str	r0, [r7, #12]
  4013a8:	60b9      	str	r1, [r7, #8]
  4013aa:	607a      	str	r2, [r7, #4]
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  4013ac:	68bb      	ldr	r3, [r7, #8]
  4013ae:	011a      	lsls	r2, r3, #4
  4013b0:	687b      	ldr	r3, [r7, #4]
  4013b2:	429a      	cmp	r2, r3
  4013b4:	d802      	bhi.n	4013bc <usart_set_async_baudrate+0x1c>
		over = HIGH_FRQ_SAMPLE_DIV;
  4013b6:	2310      	movs	r3, #16
  4013b8:	61fb      	str	r3, [r7, #28]
  4013ba:	e001      	b.n	4013c0 <usart_set_async_baudrate+0x20>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
  4013bc:	2308      	movs	r3, #8
  4013be:	61fb      	str	r3, [r7, #28]
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  4013c0:	687b      	ldr	r3, [r7, #4]
  4013c2:	00da      	lsls	r2, r3, #3
  4013c4:	69fb      	ldr	r3, [r7, #28]
  4013c6:	68b9      	ldr	r1, [r7, #8]
  4013c8:	fb01 f303 	mul.w	r3, r1, r3
  4013cc:	085b      	lsrs	r3, r3, #1
  4013ce:	441a      	add	r2, r3
  4013d0:	69fb      	ldr	r3, [r7, #28]
  4013d2:	68b9      	ldr	r1, [r7, #8]
  4013d4:	fb01 f303 	mul.w	r3, r1, r3
  4013d8:	fbb2 f3f3 	udiv	r3, r2, r3
  4013dc:	61bb      	str	r3, [r7, #24]
	cd = cd_fp >> 3;
  4013de:	69bb      	ldr	r3, [r7, #24]
  4013e0:	08db      	lsrs	r3, r3, #3
  4013e2:	617b      	str	r3, [r7, #20]
	fp = cd_fp & 0x07;
  4013e4:	69bb      	ldr	r3, [r7, #24]
  4013e6:	f003 0307 	and.w	r3, r3, #7
  4013ea:	613b      	str	r3, [r7, #16]
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  4013ec:	697b      	ldr	r3, [r7, #20]
  4013ee:	2b00      	cmp	r3, #0
  4013f0:	d003      	beq.n	4013fa <usart_set_async_baudrate+0x5a>
  4013f2:	697b      	ldr	r3, [r7, #20]
  4013f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
  4013f8:	d301      	bcc.n	4013fe <usart_set_async_baudrate+0x5e>
		return 1;
  4013fa:	2301      	movs	r3, #1
  4013fc:	e00f      	b.n	40141e <usart_set_async_baudrate+0x7e>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
  4013fe:	69fb      	ldr	r3, [r7, #28]
  401400:	2b08      	cmp	r3, #8
  401402:	d105      	bne.n	401410 <usart_set_async_baudrate+0x70>
		p_usart->US_MR |= US_MR_OVER;
  401404:	68fb      	ldr	r3, [r7, #12]
  401406:	685b      	ldr	r3, [r3, #4]
  401408:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
  40140c:	68fb      	ldr	r3, [r7, #12]
  40140e:	605a      	str	r2, [r3, #4]
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  401410:	693b      	ldr	r3, [r7, #16]
  401412:	041a      	lsls	r2, r3, #16
  401414:	697b      	ldr	r3, [r7, #20]
  401416:	431a      	orrs	r2, r3
  401418:	68fb      	ldr	r3, [r7, #12]
  40141a:	621a      	str	r2, [r3, #32]

	return 0;
  40141c:	2300      	movs	r3, #0
}
  40141e:	4618      	mov	r0, r3
  401420:	3724      	adds	r7, #36	; 0x24
  401422:	46bd      	mov	sp, r7
  401424:	f85d 7b04 	ldr.w	r7, [sp], #4
  401428:	4770      	bx	lr
  40142a:	bf00      	nop

0040142c <usart_reset>:
 * \brief Reset the USART and disable TX and RX.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset(Usart *p_usart)
{
  40142c:	b580      	push	{r7, lr}
  40142e:	b082      	sub	sp, #8
  401430:	af00      	add	r7, sp, #0
  401432:	6078      	str	r0, [r7, #4]
	/* Disable the Write Protect. */
	usart_disable_writeprotect(p_usart);
  401434:	6878      	ldr	r0, [r7, #4]
  401436:	4b0d      	ldr	r3, [pc, #52]	; (40146c <usart_reset+0x40>)
  401438:	4798      	blx	r3

	/* Reset registers that could cause unpredictable behavior after reset. */
	p_usart->US_MR = 0;
  40143a:	687b      	ldr	r3, [r7, #4]
  40143c:	2200      	movs	r2, #0
  40143e:	605a      	str	r2, [r3, #4]
	p_usart->US_RTOR = 0;
  401440:	687b      	ldr	r3, [r7, #4]
  401442:	2200      	movs	r2, #0
  401444:	625a      	str	r2, [r3, #36]	; 0x24
	p_usart->US_TTGR = 0;
  401446:	687b      	ldr	r3, [r7, #4]
  401448:	2200      	movs	r2, #0
  40144a:	629a      	str	r2, [r3, #40]	; 0x28

	/* Disable TX and RX. */
	usart_reset_tx(p_usart);
  40144c:	6878      	ldr	r0, [r7, #4]
  40144e:	4b08      	ldr	r3, [pc, #32]	; (401470 <usart_reset+0x44>)
  401450:	4798      	blx	r3
	usart_reset_rx(p_usart);
  401452:	6878      	ldr	r0, [r7, #4]
  401454:	4b07      	ldr	r3, [pc, #28]	; (401474 <usart_reset+0x48>)
  401456:	4798      	blx	r3
	/* Reset status bits. */
	usart_reset_status(p_usart);
  401458:	6878      	ldr	r0, [r7, #4]
  40145a:	4b07      	ldr	r3, [pc, #28]	; (401478 <usart_reset+0x4c>)
  40145c:	4798      	blx	r3
	/* Turn off RTS and DTR if exist. */
	usart_drive_RTS_pin_high(p_usart);
  40145e:	6878      	ldr	r0, [r7, #4]
  401460:	4b06      	ldr	r3, [pc, #24]	; (40147c <usart_reset+0x50>)
  401462:	4798      	blx	r3
#if (SAM3S || SAM4S || SAM3U || SAM4L || SAM4E)
	usart_drive_DTR_pin_high(p_usart);
#endif
}
  401464:	3708      	adds	r7, #8
  401466:	46bd      	mov	sp, r7
  401468:	bd80      	pop	{r7, pc}
  40146a:	bf00      	nop
  40146c:	004016c1 	.word	0x004016c1
  401470:	0040151d 	.word	0x0040151d
  401474:	00401569 	.word	0x00401569
  401478:	004015d1 	.word	0x004015d1
  40147c:	004015ed 	.word	0x004015ed

00401480 <usart_init_rs232>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_rs232(Usart *p_usart,
		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
{
  401480:	b580      	push	{r7, lr}
  401482:	b084      	sub	sp, #16
  401484:	af00      	add	r7, sp, #0
  401486:	60f8      	str	r0, [r7, #12]
  401488:	60b9      	str	r1, [r7, #8]
  40148a:	607a      	str	r2, [r7, #4]
	static uint32_t ul_reg_val;

	/* Reset the USART and shut down TX and RX. */
	usart_reset(p_usart);
  40148c:	68f8      	ldr	r0, [r7, #12]
  40148e:	4b1a      	ldr	r3, [pc, #104]	; (4014f8 <usart_init_rs232+0x78>)
  401490:	4798      	blx	r3

	ul_reg_val = 0;
  401492:	4b1a      	ldr	r3, [pc, #104]	; (4014fc <usart_init_rs232+0x7c>)
  401494:	2200      	movs	r2, #0
  401496:	601a      	str	r2, [r3, #0]
	/* Check whether the input values are legal. */
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  401498:	68bb      	ldr	r3, [r7, #8]
  40149a:	2b00      	cmp	r3, #0
  40149c:	d009      	beq.n	4014b2 <usart_init_rs232+0x32>
  40149e:	68bb      	ldr	r3, [r7, #8]
  4014a0:	681b      	ldr	r3, [r3, #0]
  4014a2:	68f8      	ldr	r0, [r7, #12]
  4014a4:	4619      	mov	r1, r3
  4014a6:	687a      	ldr	r2, [r7, #4]
  4014a8:	4b15      	ldr	r3, [pc, #84]	; (401500 <usart_init_rs232+0x80>)
  4014aa:	4798      	blx	r3
  4014ac:	4603      	mov	r3, r0
  4014ae:	2b00      	cmp	r3, #0
  4014b0:	d001      	beq.n	4014b6 <usart_init_rs232+0x36>
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
  4014b2:	2301      	movs	r3, #1
  4014b4:	e01b      	b.n	4014ee <usart_init_rs232+0x6e>
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  4014b6:	68bb      	ldr	r3, [r7, #8]
  4014b8:	685a      	ldr	r2, [r3, #4]
  4014ba:	68bb      	ldr	r3, [r7, #8]
  4014bc:	689b      	ldr	r3, [r3, #8]
  4014be:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  4014c0:	68bb      	ldr	r3, [r7, #8]
  4014c2:	691b      	ldr	r3, [r3, #16]
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  4014c4:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  4014c6:	68bb      	ldr	r3, [r7, #8]
  4014c8:	68db      	ldr	r3, [r3, #12]
  4014ca:	431a      	orrs	r2, r3
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  4014cc:	4b0b      	ldr	r3, [pc, #44]	; (4014fc <usart_init_rs232+0x7c>)
  4014ce:	681b      	ldr	r3, [r3, #0]
  4014d0:	4313      	orrs	r3, r2
  4014d2:	4a0a      	ldr	r2, [pc, #40]	; (4014fc <usart_init_rs232+0x7c>)
  4014d4:	6013      	str	r3, [r2, #0]
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;

	/* Configure the USART mode as normal mode. */
	ul_reg_val |= US_MR_USART_MODE_NORMAL;
  4014d6:	4b09      	ldr	r3, [pc, #36]	; (4014fc <usart_init_rs232+0x7c>)
  4014d8:	681b      	ldr	r3, [r3, #0]
  4014da:	4a08      	ldr	r2, [pc, #32]	; (4014fc <usart_init_rs232+0x7c>)
  4014dc:	6013      	str	r3, [r2, #0]

	p_usart->US_MR |= ul_reg_val;
  4014de:	68fb      	ldr	r3, [r7, #12]
  4014e0:	685a      	ldr	r2, [r3, #4]
  4014e2:	4b06      	ldr	r3, [pc, #24]	; (4014fc <usart_init_rs232+0x7c>)
  4014e4:	681b      	ldr	r3, [r3, #0]
  4014e6:	431a      	orrs	r2, r3
  4014e8:	68fb      	ldr	r3, [r7, #12]
  4014ea:	605a      	str	r2, [r3, #4]

	return 0;
  4014ec:	2300      	movs	r3, #0
}
  4014ee:	4618      	mov	r0, r3
  4014f0:	3710      	adds	r7, #16
  4014f2:	46bd      	mov	sp, r7
  4014f4:	bd80      	pop	{r7, pc}
  4014f6:	bf00      	nop
  4014f8:	0040142d 	.word	0x0040142d
  4014fc:	20400980 	.word	0x20400980
  401500:	004013a1 	.word	0x004013a1

00401504 <usart_enable_tx>:
 * \brief Enable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_tx(Usart *p_usart)
{
  401504:	b480      	push	{r7}
  401506:	b083      	sub	sp, #12
  401508:	af00      	add	r7, sp, #0
  40150a:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_TXEN;
  40150c:	687b      	ldr	r3, [r7, #4]
  40150e:	2240      	movs	r2, #64	; 0x40
  401510:	601a      	str	r2, [r3, #0]
}
  401512:	370c      	adds	r7, #12
  401514:	46bd      	mov	sp, r7
  401516:	f85d 7b04 	ldr.w	r7, [sp], #4
  40151a:	4770      	bx	lr

0040151c <usart_reset_tx>:
 * \brief Immediately stop and disable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_tx(Usart *p_usart)
{
  40151c:	b480      	push	{r7}
  40151e:	b083      	sub	sp, #12
  401520:	af00      	add	r7, sp, #0
  401522:	6078      	str	r0, [r7, #4]
	/* Reset transmitter */
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  401524:	687b      	ldr	r3, [r7, #4]
  401526:	2288      	movs	r2, #136	; 0x88
  401528:	601a      	str	r2, [r3, #0]
}
  40152a:	370c      	adds	r7, #12
  40152c:	46bd      	mov	sp, r7
  40152e:	f85d 7b04 	ldr.w	r7, [sp], #4
  401532:	4770      	bx	lr

00401534 <usart_set_tx_timeguard>:
 *
 * \param p_usart Pointer to a USART instance.
 * \param timeguard The value of transmit timeguard.
 */
void usart_set_tx_timeguard(Usart *p_usart, uint32_t timeguard)
{
  401534:	b480      	push	{r7}
  401536:	b083      	sub	sp, #12
  401538:	af00      	add	r7, sp, #0
  40153a:	6078      	str	r0, [r7, #4]
  40153c:	6039      	str	r1, [r7, #0]
	p_usart->US_TTGR = timeguard;
  40153e:	687b      	ldr	r3, [r7, #4]
  401540:	683a      	ldr	r2, [r7, #0]
  401542:	629a      	str	r2, [r3, #40]	; 0x28
}
  401544:	370c      	adds	r7, #12
  401546:	46bd      	mov	sp, r7
  401548:	f85d 7b04 	ldr.w	r7, [sp], #4
  40154c:	4770      	bx	lr
  40154e:	bf00      	nop

00401550 <usart_enable_rx>:
 * \brief Enable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_rx(Usart *p_usart)
{
  401550:	b480      	push	{r7}
  401552:	b083      	sub	sp, #12
  401554:	af00      	add	r7, sp, #0
  401556:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RXEN;
  401558:	687b      	ldr	r3, [r7, #4]
  40155a:	2210      	movs	r2, #16
  40155c:	601a      	str	r2, [r3, #0]
}
  40155e:	370c      	adds	r7, #12
  401560:	46bd      	mov	sp, r7
  401562:	f85d 7b04 	ldr.w	r7, [sp], #4
  401566:	4770      	bx	lr

00401568 <usart_reset_rx>:
 * \brief Immediately stop and disable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_rx(Usart *p_usart)
{
  401568:	b480      	push	{r7}
  40156a:	b083      	sub	sp, #12
  40156c:	af00      	add	r7, sp, #0
  40156e:	6078      	str	r0, [r7, #4]
	/* Reset Receiver */
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  401570:	687b      	ldr	r3, [r7, #4]
  401572:	2224      	movs	r2, #36	; 0x24
  401574:	601a      	str	r2, [r3, #0]
}
  401576:	370c      	adds	r7, #12
  401578:	46bd      	mov	sp, r7
  40157a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40157e:	4770      	bx	lr

00401580 <usart_enable_interrupt>:
 *
 * \param p_usart Pointer to a USART peripheral.
 * \param ul_sources Interrupt sources bit map.
 */
void usart_enable_interrupt(Usart *p_usart, uint32_t ul_sources)
{
  401580:	b480      	push	{r7}
  401582:	b083      	sub	sp, #12
  401584:	af00      	add	r7, sp, #0
  401586:	6078      	str	r0, [r7, #4]
  401588:	6039      	str	r1, [r7, #0]
	p_usart->US_IER = ul_sources;
  40158a:	687b      	ldr	r3, [r7, #4]
  40158c:	683a      	ldr	r2, [r7, #0]
  40158e:	609a      	str	r2, [r3, #8]
}
  401590:	370c      	adds	r7, #12
  401592:	46bd      	mov	sp, r7
  401594:	f85d 7b04 	ldr.w	r7, [sp], #4
  401598:	4770      	bx	lr
  40159a:	bf00      	nop

0040159c <usart_disable_interrupt>:
 *
 * \param p_usart Pointer to a USART peripheral.
 * \param ul_sources Interrupt sources bit map.
 */
void usart_disable_interrupt(Usart *p_usart, uint32_t ul_sources)
{
  40159c:	b480      	push	{r7}
  40159e:	b083      	sub	sp, #12
  4015a0:	af00      	add	r7, sp, #0
  4015a2:	6078      	str	r0, [r7, #4]
  4015a4:	6039      	str	r1, [r7, #0]
	p_usart->US_IDR = ul_sources;
  4015a6:	687b      	ldr	r3, [r7, #4]
  4015a8:	683a      	ldr	r2, [r7, #0]
  4015aa:	60da      	str	r2, [r3, #12]
}
  4015ac:	370c      	adds	r7, #12
  4015ae:	46bd      	mov	sp, r7
  4015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
  4015b4:	4770      	bx	lr
  4015b6:	bf00      	nop

004015b8 <usart_get_status>:
 * \param p_usart Pointer to a USART instance.
 *
 * \return The current USART status.
 */
uint32_t usart_get_status(Usart *p_usart)
{
  4015b8:	b480      	push	{r7}
  4015ba:	b083      	sub	sp, #12
  4015bc:	af00      	add	r7, sp, #0
  4015be:	6078      	str	r0, [r7, #4]
	return p_usart->US_CSR;
  4015c0:	687b      	ldr	r3, [r7, #4]
  4015c2:	695b      	ldr	r3, [r3, #20]
}
  4015c4:	4618      	mov	r0, r3
  4015c6:	370c      	adds	r7, #12
  4015c8:	46bd      	mov	sp, r7
  4015ca:	f85d 7b04 	ldr.w	r7, [sp], #4
  4015ce:	4770      	bx	lr

004015d0 <usart_reset_status>:
 * \brief Reset status bits (PARE, OVER, MANERR, UNRE and PXBRK in US_CSR).
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_status(Usart *p_usart)
{
  4015d0:	b480      	push	{r7}
  4015d2:	b083      	sub	sp, #12
  4015d4:	af00      	add	r7, sp, #0
  4015d6:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RSTSTA;
  4015d8:	687b      	ldr	r3, [r7, #4]
  4015da:	f44f 7280 	mov.w	r2, #256	; 0x100
  4015de:	601a      	str	r2, [r3, #0]
}
  4015e0:	370c      	adds	r7, #12
  4015e2:	46bd      	mov	sp, r7
  4015e4:	f85d 7b04 	ldr.w	r7, [sp], #4
  4015e8:	4770      	bx	lr
  4015ea:	bf00      	nop

004015ec <usart_drive_RTS_pin_high>:
 * \brief Drive the pin RTS to 1.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_RTS_pin_high(Usart *p_usart)
{
  4015ec:	b480      	push	{r7}
  4015ee:	b083      	sub	sp, #12
  4015f0:	af00      	add	r7, sp, #0
  4015f2:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RTSDIS;
  4015f4:	687b      	ldr	r3, [r7, #4]
  4015f6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  4015fa:	601a      	str	r2, [r3, #0]
}
  4015fc:	370c      	adds	r7, #12
  4015fe:	46bd      	mov	sp, r7
  401600:	f85d 7b04 	ldr.w	r7, [sp], #4
  401604:	4770      	bx	lr
  401606:	bf00      	nop

00401608 <usart_is_tx_empty>:
 *
 * \retval 1 Transmitter is empty.
 * \retval 0 Transmitter is not empty.
 */
uint32_t usart_is_tx_empty(Usart *p_usart)
{
  401608:	b480      	push	{r7}
  40160a:	b083      	sub	sp, #12
  40160c:	af00      	add	r7, sp, #0
  40160e:	6078      	str	r0, [r7, #4]
	return (p_usart->US_CSR & US_CSR_TXEMPTY) > 0;
  401610:	687b      	ldr	r3, [r7, #4]
  401612:	695b      	ldr	r3, [r3, #20]
  401614:	f403 7300 	and.w	r3, r3, #512	; 0x200
  401618:	2b00      	cmp	r3, #0
  40161a:	bf14      	ite	ne
  40161c:	2301      	movne	r3, #1
  40161e:	2300      	moveq	r3, #0
  401620:	b2db      	uxtb	r3, r3
}
  401622:	4618      	mov	r0, r3
  401624:	370c      	adds	r7, #12
  401626:	46bd      	mov	sp, r7
  401628:	f85d 7b04 	ldr.w	r7, [sp], #4
  40162c:	4770      	bx	lr
  40162e:	bf00      	nop

00401630 <usart_is_rx_ready>:
 *
 * \retval 1 Some data has been received.
 * \retval 0 No data has been received.
 */
uint32_t usart_is_rx_ready(Usart *p_usart)
{
  401630:	b480      	push	{r7}
  401632:	b083      	sub	sp, #12
  401634:	af00      	add	r7, sp, #0
  401636:	6078      	str	r0, [r7, #4]
	return (p_usart->US_CSR & US_CSR_RXRDY) > 0;
  401638:	687b      	ldr	r3, [r7, #4]
  40163a:	695b      	ldr	r3, [r3, #20]
  40163c:	f003 0301 	and.w	r3, r3, #1
  401640:	2b00      	cmp	r3, #0
  401642:	bf14      	ite	ne
  401644:	2301      	movne	r3, #1
  401646:	2300      	moveq	r3, #0
  401648:	b2db      	uxtb	r3, r3
}
  40164a:	4618      	mov	r0, r3
  40164c:	370c      	adds	r7, #12
  40164e:	46bd      	mov	sp, r7
  401650:	f85d 7b04 	ldr.w	r7, [sp], #4
  401654:	4770      	bx	lr
  401656:	bf00      	nop

00401658 <usart_write>:
 *
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
  401658:	b480      	push	{r7}
  40165a:	b083      	sub	sp, #12
  40165c:	af00      	add	r7, sp, #0
  40165e:	6078      	str	r0, [r7, #4]
  401660:	6039      	str	r1, [r7, #0]
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  401662:	687b      	ldr	r3, [r7, #4]
  401664:	695b      	ldr	r3, [r3, #20]
  401666:	f003 0302 	and.w	r3, r3, #2
  40166a:	2b00      	cmp	r3, #0
  40166c:	d101      	bne.n	401672 <usart_write+0x1a>
		return 1;
  40166e:	2301      	movs	r3, #1
  401670:	e005      	b.n	40167e <usart_write+0x26>
	}

	p_usart->US_THR = US_THR_TXCHR(c);
  401672:	683b      	ldr	r3, [r7, #0]
  401674:	f3c3 0208 	ubfx	r2, r3, #0, #9
  401678:	687b      	ldr	r3, [r7, #4]
  40167a:	61da      	str	r2, [r3, #28]
	return 0;
  40167c:	2300      	movs	r3, #0
}
  40167e:	4618      	mov	r0, r3
  401680:	370c      	adds	r7, #12
  401682:	46bd      	mov	sp, r7
  401684:	f85d 7b04 	ldr.w	r7, [sp], #4
  401688:	4770      	bx	lr
  40168a:	bf00      	nop

0040168c <usart_read>:
 *
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
  40168c:	b480      	push	{r7}
  40168e:	b083      	sub	sp, #12
  401690:	af00      	add	r7, sp, #0
  401692:	6078      	str	r0, [r7, #4]
  401694:	6039      	str	r1, [r7, #0]
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  401696:	687b      	ldr	r3, [r7, #4]
  401698:	695b      	ldr	r3, [r3, #20]
  40169a:	f003 0301 	and.w	r3, r3, #1
  40169e:	2b00      	cmp	r3, #0
  4016a0:	d101      	bne.n	4016a6 <usart_read+0x1a>
		return 1;
  4016a2:	2301      	movs	r3, #1
  4016a4:	e006      	b.n	4016b4 <usart_read+0x28>
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  4016a6:	687b      	ldr	r3, [r7, #4]
  4016a8:	699b      	ldr	r3, [r3, #24]
  4016aa:	f3c3 0208 	ubfx	r2, r3, #0, #9
  4016ae:	683b      	ldr	r3, [r7, #0]
  4016b0:	601a      	str	r2, [r3, #0]

	return 0;
  4016b2:	2300      	movs	r3, #0
}
  4016b4:	4618      	mov	r0, r3
  4016b6:	370c      	adds	r7, #12
  4016b8:	46bd      	mov	sp, r7
  4016ba:	f85d 7b04 	ldr.w	r7, [sp], #4
  4016be:	4770      	bx	lr

004016c0 <usart_disable_writeprotect>:
 * \brief Disable write protect of USART registers.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
  4016c0:	b480      	push	{r7}
  4016c2:	b083      	sub	sp, #12
  4016c4:	af00      	add	r7, sp, #0
  4016c6:	6078      	str	r0, [r7, #4]
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  4016c8:	687b      	ldr	r3, [r7, #4]
  4016ca:	4a04      	ldr	r2, [pc, #16]	; (4016dc <usart_disable_writeprotect+0x1c>)
  4016cc:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
}
  4016d0:	370c      	adds	r7, #12
  4016d2:	46bd      	mov	sp, r7
  4016d4:	f85d 7b04 	ldr.w	r7, [sp], #4
  4016d8:	4770      	bx	lr
  4016da:	bf00      	nop
  4016dc:	55534100 	.word	0x55534100

004016e0 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  4016e0:	b580      	push	{r7, lr}
  4016e2:	b082      	sub	sp, #8
  4016e4:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
  4016e6:	4b16      	ldr	r3, [pc, #88]	; (401740 <Reset_Handler+0x60>)
  4016e8:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
  4016ea:	4b16      	ldr	r3, [pc, #88]	; (401744 <Reset_Handler+0x64>)
  4016ec:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
  4016ee:	687a      	ldr	r2, [r7, #4]
  4016f0:	683b      	ldr	r3, [r7, #0]
  4016f2:	429a      	cmp	r2, r3
  4016f4:	d00c      	beq.n	401710 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
  4016f6:	e007      	b.n	401708 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
  4016f8:	683b      	ldr	r3, [r7, #0]
  4016fa:	1d1a      	adds	r2, r3, #4
  4016fc:	603a      	str	r2, [r7, #0]
  4016fe:	687a      	ldr	r2, [r7, #4]
  401700:	1d11      	adds	r1, r2, #4
  401702:	6079      	str	r1, [r7, #4]
  401704:	6812      	ldr	r2, [r2, #0]
  401706:	601a      	str	r2, [r3, #0]
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
  401708:	683b      	ldr	r3, [r7, #0]
  40170a:	4a0f      	ldr	r2, [pc, #60]	; (401748 <Reset_Handler+0x68>)
  40170c:	4293      	cmp	r3, r2
  40170e:	d3f3      	bcc.n	4016f8 <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
  401710:	4b0e      	ldr	r3, [pc, #56]	; (40174c <Reset_Handler+0x6c>)
  401712:	603b      	str	r3, [r7, #0]
  401714:	e004      	b.n	401720 <Reset_Handler+0x40>
                *pDest++ = 0;
  401716:	683b      	ldr	r3, [r7, #0]
  401718:	1d1a      	adds	r2, r3, #4
  40171a:	603a      	str	r2, [r7, #0]
  40171c:	2200      	movs	r2, #0
  40171e:	601a      	str	r2, [r3, #0]
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
  401720:	683b      	ldr	r3, [r7, #0]
  401722:	4a0b      	ldr	r2, [pc, #44]	; (401750 <Reset_Handler+0x70>)
  401724:	4293      	cmp	r3, r2
  401726:	d3f6      	bcc.n	401716 <Reset_Handler+0x36>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
  401728:	4b0a      	ldr	r3, [pc, #40]	; (401754 <Reset_Handler+0x74>)
  40172a:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  40172c:	4a0a      	ldr	r2, [pc, #40]	; (401758 <Reset_Handler+0x78>)
  40172e:	687b      	ldr	r3, [r7, #4]
  401730:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  401734:	6093      	str	r3, [r2, #8]

        /* Initialize the C library */
        __libc_init_array();
  401736:	4b09      	ldr	r3, [pc, #36]	; (40175c <Reset_Handler+0x7c>)
  401738:	4798      	blx	r3

        /* Branch to main function */
        main();
  40173a:	4b09      	ldr	r3, [pc, #36]	; (401760 <Reset_Handler+0x80>)
  40173c:	4798      	blx	r3

        /* Infinite loop */
        while (1);
  40173e:	e7fe      	b.n	40173e <Reset_Handler+0x5e>
  401740:	00408bf4 	.word	0x00408bf4
  401744:	20400000 	.word	0x20400000
  401748:	204008f4 	.word	0x204008f4
  40174c:	204008f4 	.word	0x204008f4
  401750:	204011d8 	.word	0x204011d8
  401754:	00400000 	.word	0x00400000
  401758:	e000ed00 	.word	0xe000ed00
  40175c:	00403005 	.word	0x00403005
  401760:	00402b79 	.word	0x00402b79

00401764 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  401764:	b480      	push	{r7}
  401766:	af00      	add	r7, sp, #0
        while (1) {
        }
  401768:	e7fe      	b.n	401768 <Dummy_Handler+0x4>
  40176a:	bf00      	nop

0040176c <SystemCoreClockUpdate>:

  SystemCoreClock = CHIP_FREQ_CPU_MAX;
}

void SystemCoreClockUpdate( void )
{
  40176c:	b480      	push	{r7}
  40176e:	af00      	add	r7, sp, #0
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  401770:	4b51      	ldr	r3, [pc, #324]	; (4018b8 <SystemCoreClockUpdate+0x14c>)
  401772:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401774:	f003 0303 	and.w	r3, r3, #3
  401778:	2b01      	cmp	r3, #1
  40177a:	d014      	beq.n	4017a6 <SystemCoreClockUpdate+0x3a>
  40177c:	2b01      	cmp	r3, #1
  40177e:	d302      	bcc.n	401786 <SystemCoreClockUpdate+0x1a>
  401780:	2b02      	cmp	r3, #2
  401782:	d038      	beq.n	4017f6 <SystemCoreClockUpdate+0x8a>
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
      }
    break;

    default:
    break;
  401784:	e07b      	b.n	40187e <SystemCoreClockUpdate+0x112>
{
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  {
    case PMC_MCKR_CSS_SLOW_CLK: /* Slow clock */
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  401786:	4b4d      	ldr	r3, [pc, #308]	; (4018bc <SystemCoreClockUpdate+0x150>)
  401788:	695b      	ldr	r3, [r3, #20]
  40178a:	f003 0380 	and.w	r3, r3, #128	; 0x80
  40178e:	2b00      	cmp	r3, #0
  401790:	d004      	beq.n	40179c <SystemCoreClockUpdate+0x30>
      {
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  401792:	4b4b      	ldr	r3, [pc, #300]	; (4018c0 <SystemCoreClockUpdate+0x154>)
  401794:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  401798:	601a      	str	r2, [r3, #0]
      }
      else
      {
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
      }
    break;
  40179a:	e070      	b.n	40187e <SystemCoreClockUpdate+0x112>
      {
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
      }
      else
      {
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  40179c:	4b48      	ldr	r3, [pc, #288]	; (4018c0 <SystemCoreClockUpdate+0x154>)
  40179e:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
  4017a2:	601a      	str	r2, [r3, #0]
      }
    break;
  4017a4:	e06b      	b.n	40187e <SystemCoreClockUpdate+0x112>

    case PMC_MCKR_CSS_MAIN_CLK: /* Main clock */
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  4017a6:	4b44      	ldr	r3, [pc, #272]	; (4018b8 <SystemCoreClockUpdate+0x14c>)
  4017a8:	6a1b      	ldr	r3, [r3, #32]
  4017aa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  4017ae:	2b00      	cmp	r3, #0
  4017b0:	d003      	beq.n	4017ba <SystemCoreClockUpdate+0x4e>
      {
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  4017b2:	4b43      	ldr	r3, [pc, #268]	; (4018c0 <SystemCoreClockUpdate+0x154>)
  4017b4:	4a43      	ldr	r2, [pc, #268]	; (4018c4 <SystemCoreClockUpdate+0x158>)
  4017b6:	601a      	str	r2, [r3, #0]
  4017b8:	e01c      	b.n	4017f4 <SystemCoreClockUpdate+0x88>
      }
      else
      {
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4017ba:	4b41      	ldr	r3, [pc, #260]	; (4018c0 <SystemCoreClockUpdate+0x154>)
  4017bc:	4a42      	ldr	r2, [pc, #264]	; (4018c8 <SystemCoreClockUpdate+0x15c>)
  4017be:	601a      	str	r2, [r3, #0]

        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  4017c0:	4b3d      	ldr	r3, [pc, #244]	; (4018b8 <SystemCoreClockUpdate+0x14c>)
  4017c2:	6a1b      	ldr	r3, [r3, #32]
  4017c4:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4017c8:	2b10      	cmp	r3, #16
  4017ca:	d004      	beq.n	4017d6 <SystemCoreClockUpdate+0x6a>
  4017cc:	2b20      	cmp	r3, #32
  4017ce:	d008      	beq.n	4017e2 <SystemCoreClockUpdate+0x76>
  4017d0:	2b00      	cmp	r3, #0
  4017d2:	d00e      	beq.n	4017f2 <SystemCoreClockUpdate+0x86>
          case CKGR_MOR_MOSCRCF_12_MHz:
            SystemCoreClock *= 3U;
          break;

          default:
          break;
  4017d4:	e00e      	b.n	4017f4 <SystemCoreClockUpdate+0x88>
        {
          case CKGR_MOR_MOSCRCF_4_MHz:
          break;

          case CKGR_MOR_MOSCRCF_8_MHz:
            SystemCoreClock *= 2U;
  4017d6:	4b3a      	ldr	r3, [pc, #232]	; (4018c0 <SystemCoreClockUpdate+0x154>)
  4017d8:	681b      	ldr	r3, [r3, #0]
  4017da:	005b      	lsls	r3, r3, #1
  4017dc:	4a38      	ldr	r2, [pc, #224]	; (4018c0 <SystemCoreClockUpdate+0x154>)
  4017de:	6013      	str	r3, [r2, #0]
          break;
  4017e0:	e008      	b.n	4017f4 <SystemCoreClockUpdate+0x88>

          case CKGR_MOR_MOSCRCF_12_MHz:
            SystemCoreClock *= 3U;
  4017e2:	4b37      	ldr	r3, [pc, #220]	; (4018c0 <SystemCoreClockUpdate+0x154>)
  4017e4:	681a      	ldr	r2, [r3, #0]
  4017e6:	4613      	mov	r3, r2
  4017e8:	005b      	lsls	r3, r3, #1
  4017ea:	4413      	add	r3, r2
  4017ec:	4a34      	ldr	r2, [pc, #208]	; (4018c0 <SystemCoreClockUpdate+0x154>)
  4017ee:	6013      	str	r3, [r2, #0]
          break;
  4017f0:	e000      	b.n	4017f4 <SystemCoreClockUpdate+0x88>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;

        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
        {
          case CKGR_MOR_MOSCRCF_4_MHz:
          break;
  4017f2:	bf00      	nop

          default:
          break;
        }
      }
    break;
  4017f4:	e043      	b.n	40187e <SystemCoreClockUpdate+0x112>

    case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  4017f6:	4b30      	ldr	r3, [pc, #192]	; (4018b8 <SystemCoreClockUpdate+0x14c>)
  4017f8:	6a1b      	ldr	r3, [r3, #32]
  4017fa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  4017fe:	2b00      	cmp	r3, #0
  401800:	d003      	beq.n	40180a <SystemCoreClockUpdate+0x9e>
      {
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  401802:	4b2f      	ldr	r3, [pc, #188]	; (4018c0 <SystemCoreClockUpdate+0x154>)
  401804:	4a2f      	ldr	r2, [pc, #188]	; (4018c4 <SystemCoreClockUpdate+0x158>)
  401806:	601a      	str	r2, [r3, #0]
  401808:	e01c      	b.n	401844 <SystemCoreClockUpdate+0xd8>
      }
      else
      {
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  40180a:	4b2d      	ldr	r3, [pc, #180]	; (4018c0 <SystemCoreClockUpdate+0x154>)
  40180c:	4a2e      	ldr	r2, [pc, #184]	; (4018c8 <SystemCoreClockUpdate+0x15c>)
  40180e:	601a      	str	r2, [r3, #0]

        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  401810:	4b29      	ldr	r3, [pc, #164]	; (4018b8 <SystemCoreClockUpdate+0x14c>)
  401812:	6a1b      	ldr	r3, [r3, #32]
  401814:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401818:	2b10      	cmp	r3, #16
  40181a:	d004      	beq.n	401826 <SystemCoreClockUpdate+0xba>
  40181c:	2b20      	cmp	r3, #32
  40181e:	d008      	beq.n	401832 <SystemCoreClockUpdate+0xc6>
  401820:	2b00      	cmp	r3, #0
  401822:	d00e      	beq.n	401842 <SystemCoreClockUpdate+0xd6>
          case CKGR_MOR_MOSCRCF_12_MHz:
            SystemCoreClock *= 3U;
          break;

          default:
          break;
  401824:	e00e      	b.n	401844 <SystemCoreClockUpdate+0xd8>
        {
          case CKGR_MOR_MOSCRCF_4_MHz:
          break;

          case CKGR_MOR_MOSCRCF_8_MHz:
            SystemCoreClock *= 2U;
  401826:	4b26      	ldr	r3, [pc, #152]	; (4018c0 <SystemCoreClockUpdate+0x154>)
  401828:	681b      	ldr	r3, [r3, #0]
  40182a:	005b      	lsls	r3, r3, #1
  40182c:	4a24      	ldr	r2, [pc, #144]	; (4018c0 <SystemCoreClockUpdate+0x154>)
  40182e:	6013      	str	r3, [r2, #0]
          break;
  401830:	e008      	b.n	401844 <SystemCoreClockUpdate+0xd8>

          case CKGR_MOR_MOSCRCF_12_MHz:
            SystemCoreClock *= 3U;
  401832:	4b23      	ldr	r3, [pc, #140]	; (4018c0 <SystemCoreClockUpdate+0x154>)
  401834:	681a      	ldr	r2, [r3, #0]
  401836:	4613      	mov	r3, r2
  401838:	005b      	lsls	r3, r3, #1
  40183a:	4413      	add	r3, r2
  40183c:	4a20      	ldr	r2, [pc, #128]	; (4018c0 <SystemCoreClockUpdate+0x154>)
  40183e:	6013      	str	r3, [r2, #0]
          break;
  401840:	e000      	b.n	401844 <SystemCoreClockUpdate+0xd8>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;

        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
        {
          case CKGR_MOR_MOSCRCF_4_MHz:
          break;
  401842:	bf00      	nop
          default:
          break;
        }
      }

      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  401844:	4b1c      	ldr	r3, [pc, #112]	; (4018b8 <SystemCoreClockUpdate+0x14c>)
  401846:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401848:	f003 0303 	and.w	r3, r3, #3
  40184c:	2b02      	cmp	r3, #2
  40184e:	d115      	bne.n	40187c <SystemCoreClockUpdate+0x110>
      {
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  401850:	4b19      	ldr	r3, [pc, #100]	; (4018b8 <SystemCoreClockUpdate+0x14c>)
  401852:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  401854:	4b1d      	ldr	r3, [pc, #116]	; (4018cc <SystemCoreClockUpdate+0x160>)
  401856:	4013      	ands	r3, r2
  401858:	0c1b      	lsrs	r3, r3, #16
  40185a:	3301      	adds	r3, #1
  40185c:	4a18      	ldr	r2, [pc, #96]	; (4018c0 <SystemCoreClockUpdate+0x154>)
  40185e:	6812      	ldr	r2, [r2, #0]
  401860:	fb02 f303 	mul.w	r3, r2, r3
  401864:	4a16      	ldr	r2, [pc, #88]	; (4018c0 <SystemCoreClockUpdate+0x154>)
  401866:	6013      	str	r3, [r2, #0]
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  401868:	4b13      	ldr	r3, [pc, #76]	; (4018b8 <SystemCoreClockUpdate+0x14c>)
  40186a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  40186c:	b2db      	uxtb	r3, r3
  40186e:	4a14      	ldr	r2, [pc, #80]	; (4018c0 <SystemCoreClockUpdate+0x154>)
  401870:	6812      	ldr	r2, [r2, #0]
  401872:	fbb2 f3f3 	udiv	r3, r2, r3
  401876:	4a12      	ldr	r2, [pc, #72]	; (4018c0 <SystemCoreClockUpdate+0x154>)
  401878:	6013      	str	r3, [r2, #0]
      }
    break;
  40187a:	e7ff      	b.n	40187c <SystemCoreClockUpdate+0x110>
  40187c:	bf00      	nop

    default:
    break;
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  40187e:	4b0e      	ldr	r3, [pc, #56]	; (4018b8 <SystemCoreClockUpdate+0x14c>)
  401880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401882:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401886:	2b70      	cmp	r3, #112	; 0x70
  401888:	d108      	bne.n	40189c <SystemCoreClockUpdate+0x130>
  {
    SystemCoreClock /= 3U;
  40188a:	4b0d      	ldr	r3, [pc, #52]	; (4018c0 <SystemCoreClockUpdate+0x154>)
  40188c:	681b      	ldr	r3, [r3, #0]
  40188e:	4a10      	ldr	r2, [pc, #64]	; (4018d0 <SystemCoreClockUpdate+0x164>)
  401890:	fba2 2303 	umull	r2, r3, r2, r3
  401894:	085b      	lsrs	r3, r3, #1
  401896:	4a0a      	ldr	r2, [pc, #40]	; (4018c0 <SystemCoreClockUpdate+0x154>)
  401898:	6013      	str	r3, [r2, #0]
  40189a:	e009      	b.n	4018b0 <SystemCoreClockUpdate+0x144>
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  40189c:	4b06      	ldr	r3, [pc, #24]	; (4018b8 <SystemCoreClockUpdate+0x14c>)
  40189e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4018a0:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4018a4:	091a      	lsrs	r2, r3, #4
  4018a6:	4b06      	ldr	r3, [pc, #24]	; (4018c0 <SystemCoreClockUpdate+0x154>)
  4018a8:	681b      	ldr	r3, [r3, #0]
  4018aa:	40d3      	lsrs	r3, r2
  4018ac:	4a04      	ldr	r2, [pc, #16]	; (4018c0 <SystemCoreClockUpdate+0x154>)
  4018ae:	6013      	str	r3, [r2, #0]
  }
}
  4018b0:	46bd      	mov	sp, r7
  4018b2:	f85d 7b04 	ldr.w	r7, [sp], #4
  4018b6:	4770      	bx	lr
  4018b8:	400e0600 	.word	0x400e0600
  4018bc:	400e1810 	.word	0x400e1810
  4018c0:	20400000 	.word	0x20400000
  4018c4:	00b71b00 	.word	0x00b71b00
  4018c8:	003d0900 	.word	0x003d0900
  4018cc:	07ff0000 	.word	0x07ff0000
  4018d0:	aaaaaaab 	.word	0xaaaaaaab

004018d4 <system_init_flash>:
/**
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  4018d4:	b480      	push	{r7}
  4018d6:	b083      	sub	sp, #12
  4018d8:	af00      	add	r7, sp, #0
  4018da:	6078      	str	r0, [r7, #4]
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  4018dc:	687b      	ldr	r3, [r7, #4]
  4018de:	4a18      	ldr	r2, [pc, #96]	; (401940 <system_init_flash+0x6c>)
  4018e0:	4293      	cmp	r3, r2
  4018e2:	d804      	bhi.n	4018ee <system_init_flash+0x1a>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  4018e4:	4b17      	ldr	r3, [pc, #92]	; (401944 <system_init_flash+0x70>)
  4018e6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  4018ea:	601a      	str	r2, [r3, #0]
  4018ec:	e023      	b.n	401936 <system_init_flash+0x62>
  }
  else
  {
    if (ul_clk < CHIP_FREQ_FWS_1)
  4018ee:	687b      	ldr	r3, [r7, #4]
  4018f0:	4a15      	ldr	r2, [pc, #84]	; (401948 <system_init_flash+0x74>)
  4018f2:	4293      	cmp	r3, r2
  4018f4:	d803      	bhi.n	4018fe <system_init_flash+0x2a>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  4018f6:	4b13      	ldr	r3, [pc, #76]	; (401944 <system_init_flash+0x70>)
  4018f8:	4a14      	ldr	r2, [pc, #80]	; (40194c <system_init_flash+0x78>)
  4018fa:	601a      	str	r2, [r3, #0]
  4018fc:	e01b      	b.n	401936 <system_init_flash+0x62>
    }
    else
    {
      if (ul_clk < CHIP_FREQ_FWS_2)
  4018fe:	687b      	ldr	r3, [r7, #4]
  401900:	4a13      	ldr	r2, [pc, #76]	; (401950 <system_init_flash+0x7c>)
  401902:	4293      	cmp	r3, r2
  401904:	d803      	bhi.n	40190e <system_init_flash+0x3a>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  401906:	4b0f      	ldr	r3, [pc, #60]	; (401944 <system_init_flash+0x70>)
  401908:	4a12      	ldr	r2, [pc, #72]	; (401954 <system_init_flash+0x80>)
  40190a:	601a      	str	r2, [r3, #0]
  40190c:	e013      	b.n	401936 <system_init_flash+0x62>
      }
      else
      {
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  40190e:	687b      	ldr	r3, [r7, #4]
  401910:	4a11      	ldr	r2, [pc, #68]	; (401958 <system_init_flash+0x84>)
  401912:	4293      	cmp	r3, r2
  401914:	d803      	bhi.n	40191e <system_init_flash+0x4a>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  401916:	4b0b      	ldr	r3, [pc, #44]	; (401944 <system_init_flash+0x70>)
  401918:	4a10      	ldr	r2, [pc, #64]	; (40195c <system_init_flash+0x88>)
  40191a:	601a      	str	r2, [r3, #0]
  40191c:	e00b      	b.n	401936 <system_init_flash+0x62>
        }
        else
        {
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  40191e:	687b      	ldr	r3, [r7, #4]
  401920:	4a0f      	ldr	r2, [pc, #60]	; (401960 <system_init_flash+0x8c>)
  401922:	4293      	cmp	r3, r2
  401924:	d804      	bhi.n	401930 <system_init_flash+0x5c>
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  401926:	4b07      	ldr	r3, [pc, #28]	; (401944 <system_init_flash+0x70>)
  401928:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  40192c:	601a      	str	r2, [r3, #0]
  40192e:	e002      	b.n	401936 <system_init_flash+0x62>
          }
          else
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  401930:	4b04      	ldr	r3, [pc, #16]	; (401944 <system_init_flash+0x70>)
  401932:	4a0c      	ldr	r2, [pc, #48]	; (401964 <system_init_flash+0x90>)
  401934:	601a      	str	r2, [r3, #0]
          }
        }
      }
    }
  }
}
  401936:	370c      	adds	r7, #12
  401938:	46bd      	mov	sp, r7
  40193a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40193e:	4770      	bx	lr
  401940:	01312cff 	.word	0x01312cff
  401944:	400e0c00 	.word	0x400e0c00
  401948:	026259ff 	.word	0x026259ff
  40194c:	04000100 	.word	0x04000100
  401950:	039386ff 	.word	0x039386ff
  401954:	04000200 	.word	0x04000200
  401958:	04c4b3ff 	.word	0x04c4b3ff
  40195c:	04000300 	.word	0x04000300
  401960:	05f5e0ff 	.word	0x05f5e0ff
  401964:	04000500 	.word	0x04000500

00401968 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
  401968:	b480      	push	{r7}
  40196a:	b085      	sub	sp, #20
  40196c:	af00      	add	r7, sp, #0
  40196e:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;
  401970:	4b10      	ldr	r3, [pc, #64]	; (4019b4 <_sbrk+0x4c>)
  401972:	60fb      	str	r3, [r7, #12]

	if (heap == NULL) {
  401974:	4b10      	ldr	r3, [pc, #64]	; (4019b8 <_sbrk+0x50>)
  401976:	681b      	ldr	r3, [r3, #0]
  401978:	2b00      	cmp	r3, #0
  40197a:	d102      	bne.n	401982 <_sbrk+0x1a>
		heap = (unsigned char *)&_end;
  40197c:	4b0e      	ldr	r3, [pc, #56]	; (4019b8 <_sbrk+0x50>)
  40197e:	4a0f      	ldr	r2, [pc, #60]	; (4019bc <_sbrk+0x54>)
  401980:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
  401982:	4b0d      	ldr	r3, [pc, #52]	; (4019b8 <_sbrk+0x50>)
  401984:	681b      	ldr	r3, [r3, #0]
  401986:	60bb      	str	r3, [r7, #8]

	if (((int)prev_heap + incr) > ramend) {
  401988:	68ba      	ldr	r2, [r7, #8]
  40198a:	687b      	ldr	r3, [r7, #4]
  40198c:	441a      	add	r2, r3
  40198e:	68fb      	ldr	r3, [r7, #12]
  401990:	429a      	cmp	r2, r3
  401992:	dd02      	ble.n	40199a <_sbrk+0x32>
		return (caddr_t) -1;	
  401994:	f04f 33ff 	mov.w	r3, #4294967295
  401998:	e006      	b.n	4019a8 <_sbrk+0x40>
	}

	heap += incr;
  40199a:	4b07      	ldr	r3, [pc, #28]	; (4019b8 <_sbrk+0x50>)
  40199c:	681a      	ldr	r2, [r3, #0]
  40199e:	687b      	ldr	r3, [r7, #4]
  4019a0:	4413      	add	r3, r2
  4019a2:	4a05      	ldr	r2, [pc, #20]	; (4019b8 <_sbrk+0x50>)
  4019a4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
  4019a6:	68bb      	ldr	r3, [r7, #8]
}
  4019a8:	4618      	mov	r0, r3
  4019aa:	3714      	adds	r7, #20
  4019ac:	46bd      	mov	sp, r7
  4019ae:	f85d 7b04 	ldr.w	r7, [sp], #4
  4019b2:	4770      	bx	lr
  4019b4:	2045fffc 	.word	0x2045fffc
  4019b8:	20400984 	.word	0x20400984
  4019bc:	204033d8 	.word	0x204033d8

004019c0 <_close>:
{
	return -1;
}

extern int _close(int file)
{
  4019c0:	b480      	push	{r7}
  4019c2:	b083      	sub	sp, #12
  4019c4:	af00      	add	r7, sp, #0
  4019c6:	6078      	str	r0, [r7, #4]
	return -1;
  4019c8:	f04f 33ff 	mov.w	r3, #4294967295
}
  4019cc:	4618      	mov	r0, r3
  4019ce:	370c      	adds	r7, #12
  4019d0:	46bd      	mov	sp, r7
  4019d2:	f85d 7b04 	ldr.w	r7, [sp], #4
  4019d6:	4770      	bx	lr

004019d8 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
  4019d8:	b480      	push	{r7}
  4019da:	b083      	sub	sp, #12
  4019dc:	af00      	add	r7, sp, #0
  4019de:	6078      	str	r0, [r7, #4]
  4019e0:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
  4019e2:	683b      	ldr	r3, [r7, #0]
  4019e4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  4019e8:	605a      	str	r2, [r3, #4]

	return 0;
  4019ea:	2300      	movs	r3, #0
}
  4019ec:	4618      	mov	r0, r3
  4019ee:	370c      	adds	r7, #12
  4019f0:	46bd      	mov	sp, r7
  4019f2:	f85d 7b04 	ldr.w	r7, [sp], #4
  4019f6:	4770      	bx	lr

004019f8 <_isatty>:

extern int _isatty(int file)
{
  4019f8:	b480      	push	{r7}
  4019fa:	b083      	sub	sp, #12
  4019fc:	af00      	add	r7, sp, #0
  4019fe:	6078      	str	r0, [r7, #4]
	return 1;
  401a00:	2301      	movs	r3, #1
}
  401a02:	4618      	mov	r0, r3
  401a04:	370c      	adds	r7, #12
  401a06:	46bd      	mov	sp, r7
  401a08:	f85d 7b04 	ldr.w	r7, [sp], #4
  401a0c:	4770      	bx	lr
  401a0e:	bf00      	nop

00401a10 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
  401a10:	b480      	push	{r7}
  401a12:	b085      	sub	sp, #20
  401a14:	af00      	add	r7, sp, #0
  401a16:	60f8      	str	r0, [r7, #12]
  401a18:	60b9      	str	r1, [r7, #8]
  401a1a:	607a      	str	r2, [r7, #4]
	return 0;
  401a1c:	2300      	movs	r3, #0
}
  401a1e:	4618      	mov	r0, r3
  401a20:	3714      	adds	r7, #20
  401a22:	46bd      	mov	sp, r7
  401a24:	f85d 7b04 	ldr.w	r7, [sp], #4
  401a28:	4770      	bx	lr
  401a2a:	bf00      	nop

00401a2c <PCA9952_write_reg>:
 *
 * \param reg_index Register address. Use macros as defined in the header file.
 * \param data Data that should be written to the device register.
 */
void PCA9952_write_reg(unsigned char topBotn, uint8_t reg_index, uint8_t data)
{
  401a2c:	b580      	push	{r7, lr}
  401a2e:	b088      	sub	sp, #32
  401a30:	af00      	add	r7, sp, #0
  401a32:	4603      	mov	r3, r0
  401a34:	71fb      	strb	r3, [r7, #7]
  401a36:	460b      	mov	r3, r1
  401a38:	71bb      	strb	r3, [r7, #6]
  401a3a:	4613      	mov	r3, r2
  401a3c:	717b      	strb	r3, [r7, #5]
	uint8_t pack[2];
	twihs_packet_t twi_package;

	pack[0] = reg_index;
  401a3e:	79bb      	ldrb	r3, [r7, #6]
  401a40:	773b      	strb	r3, [r7, #28]
	pack[1] = data;
  401a42:	797b      	ldrb	r3, [r7, #5]
  401a44:	777b      	strb	r3, [r7, #29]

//7apr15	twi_package.chip = PCA9952_TWI_ADDRESS;

	if (topBotn == LED_TOP)
  401a46:	79fb      	ldrb	r3, [r7, #7]
  401a48:	2b00      	cmp	r3, #0
  401a4a:	d102      	bne.n	401a52 <PCA9952_write_reg+0x26>
	{
		twi_package.chip = PCA9952_U7_TOPDRIVE_TWI_ADDRESS;
  401a4c:	2360      	movs	r3, #96	; 0x60
  401a4e:	763b      	strb	r3, [r7, #24]
  401a50:	e004      	b.n	401a5c <PCA9952_write_reg+0x30>
	}
	else if (topBotn == LED_BOTTOM)
  401a52:	79fb      	ldrb	r3, [r7, #7]
  401a54:	2b01      	cmp	r3, #1
  401a56:	d101      	bne.n	401a5c <PCA9952_write_reg+0x30>
	{
		twi_package.chip = PCA9952_U8_BOTDRIVE_TWI_ADDRESS;
  401a58:	2361      	movs	r3, #97	; 0x61
  401a5a:	763b      	strb	r3, [r7, #24]
	}

	twi_package.addr[0] = 0;		//is this right? 8feb16
  401a5c:	2300      	movs	r3, #0
  401a5e:	723b      	strb	r3, [r7, #8]
	twi_package.addr[1] = 0;		//is this right? 8feb16
  401a60:	2300      	movs	r3, #0
  401a62:	727b      	strb	r3, [r7, #9]
	twi_package.addr[2] = 0;		//is this right? 8feb16
  401a64:	2300      	movs	r3, #0
  401a66:	72bb      	strb	r3, [r7, #10]
	twi_package.addr_length = 0;
  401a68:	2300      	movs	r3, #0
  401a6a:	60fb      	str	r3, [r7, #12]
	twi_package.buffer = &pack;
  401a6c:	f107 031c 	add.w	r3, r7, #28
  401a70:	613b      	str	r3, [r7, #16]
	twi_package.length = sizeof(pack);
  401a72:	2302      	movs	r3, #2
  401a74:	617b      	str	r3, [r7, #20]

	while(twihs_master_write(PCA9952_TWI, &twi_package)!=TWIHS_SUCCESS);
  401a76:	bf00      	nop
  401a78:	f107 0308 	add.w	r3, r7, #8
  401a7c:	4805      	ldr	r0, [pc, #20]	; (401a94 <PCA9952_write_reg+0x68>)
  401a7e:	4619      	mov	r1, r3
  401a80:	4b05      	ldr	r3, [pc, #20]	; (401a98 <PCA9952_write_reg+0x6c>)
  401a82:	4798      	blx	r3
  401a84:	4603      	mov	r3, r0
  401a86:	2b00      	cmp	r3, #0
  401a88:	d1f6      	bne.n	401a78 <PCA9952_write_reg+0x4c>

	return;
  401a8a:	bf00      	nop
}
  401a8c:	3720      	adds	r7, #32
  401a8e:	46bd      	mov	sp, r7
  401a90:	bd80      	pop	{r7, pc}
  401a92:	bf00      	nop
  401a94:	40018000 	.word	0x40018000
  401a98:	004011ed 	.word	0x004011ed

00401a9c <PCA9952_read_reg>:
 *
 * \param reg_index Register address.
 * \returns Register content.
 */
uint8_t PCA9952_read_reg(unsigned char topBotn, uint8_t reg_index)
{
  401a9c:	b580      	push	{r7, lr}
  401a9e:	b088      	sub	sp, #32
  401aa0:	af00      	add	r7, sp, #0
  401aa2:	4603      	mov	r3, r0
  401aa4:	460a      	mov	r2, r1
  401aa6:	71fb      	strb	r3, [r7, #7]
  401aa8:	4613      	mov	r3, r2
  401aaa:	71bb      	strb	r3, [r7, #6]
	uint8_t data;
	twihs_packet_t twi_package;

//7apr15	twi_package.chip = PCA9952_TWI_ADDRESS;

	if (topBotn == LED_TOP)
  401aac:	79fb      	ldrb	r3, [r7, #7]
  401aae:	2b00      	cmp	r3, #0
  401ab0:	d102      	bne.n	401ab8 <PCA9952_read_reg+0x1c>
	{
		twi_package.chip = PCA9952_U7_TOPDRIVE_TWI_ADDRESS;
  401ab2:	2360      	movs	r3, #96	; 0x60
  401ab4:	763b      	strb	r3, [r7, #24]
  401ab6:	e004      	b.n	401ac2 <PCA9952_read_reg+0x26>
	}
	else if (topBotn == LED_BOTTOM)
  401ab8:	79fb      	ldrb	r3, [r7, #7]
  401aba:	2b01      	cmp	r3, #1
  401abc:	d101      	bne.n	401ac2 <PCA9952_read_reg+0x26>
	{
		twi_package.chip = PCA9952_U8_BOTDRIVE_TWI_ADDRESS;
  401abe:	2361      	movs	r3, #97	; 0x61
  401ac0:	763b      	strb	r3, [r7, #24]
	}

	twi_package.addr[0] = 0;		//is this right? 8feb16
  401ac2:	2300      	movs	r3, #0
  401ac4:	723b      	strb	r3, [r7, #8]
	twi_package.addr[1] = 0;		//is this right? 8feb16
  401ac6:	2300      	movs	r3, #0
  401ac8:	727b      	strb	r3, [r7, #9]
	twi_package.addr[2] = 0;		//is this right? 8feb16
  401aca:	2300      	movs	r3, #0
  401acc:	72bb      	strb	r3, [r7, #10]
	twi_package.addr_length = 0;
  401ace:	2300      	movs	r3, #0
  401ad0:	60fb      	str	r3, [r7, #12]
	twi_package.buffer = &reg_index;
  401ad2:	1dbb      	adds	r3, r7, #6
  401ad4:	613b      	str	r3, [r7, #16]
	twi_package.length = 1;
  401ad6:	2301      	movs	r3, #1
  401ad8:	617b      	str	r3, [r7, #20]
	while(twihs_master_write(PCA9952_TWI, &twi_package)!=TWIHS_SUCCESS);
  401ada:	bf00      	nop
  401adc:	f107 0308 	add.w	r3, r7, #8
  401ae0:	480f      	ldr	r0, [pc, #60]	; (401b20 <PCA9952_read_reg+0x84>)
  401ae2:	4619      	mov	r1, r3
  401ae4:	4b0f      	ldr	r3, [pc, #60]	; (401b24 <PCA9952_read_reg+0x88>)
  401ae6:	4798      	blx	r3
  401ae8:	4603      	mov	r3, r0
  401aea:	2b00      	cmp	r3, #0
  401aec:	d1f6      	bne.n	401adc <PCA9952_read_reg+0x40>
	* specified in the datasheet.
	* Also there seems to be a bug in the TWI module or the driver
	* since some delay here (code or real delay) adds about 500us
	* between the write and the next read cycle.
	*/
	mdelay(20);
  401aee:	2014      	movs	r0, #20
  401af0:	4b0d      	ldr	r3, [pc, #52]	; (401b28 <PCA9952_read_reg+0x8c>)
  401af2:	4798      	blx	r3

//7apr15 this was set above, no need to reassign	twi_package.chip = PCA9952_TWI_ADDRESS;
	twi_package.addr_length = 0;
  401af4:	2300      	movs	r3, #0
  401af6:	60fb      	str	r3, [r7, #12]
	twi_package.buffer = &data;
  401af8:	f107 031f 	add.w	r3, r7, #31
  401afc:	613b      	str	r3, [r7, #16]
	twi_package.length = 1;
  401afe:	2301      	movs	r3, #1
  401b00:	617b      	str	r3, [r7, #20]
	while(twihs_master_read(PCA9952_TWI, &twi_package)!=TWIHS_SUCCESS);
  401b02:	bf00      	nop
  401b04:	f107 0308 	add.w	r3, r7, #8
  401b08:	4805      	ldr	r0, [pc, #20]	; (401b20 <PCA9952_read_reg+0x84>)
  401b0a:	4619      	mov	r1, r3
  401b0c:	4b07      	ldr	r3, [pc, #28]	; (401b2c <PCA9952_read_reg+0x90>)
  401b0e:	4798      	blx	r3
  401b10:	4603      	mov	r3, r0
  401b12:	2b00      	cmp	r3, #0
  401b14:	d1f6      	bne.n	401b04 <PCA9952_read_reg+0x68>

	return data;
  401b16:	7ffb      	ldrb	r3, [r7, #31]
}
  401b18:	4618      	mov	r0, r3
  401b1a:	3720      	adds	r7, #32
  401b1c:	46bd      	mov	sp, r7
  401b1e:	bd80      	pop	{r7, pc}
  401b20:	40018000 	.word	0x40018000
  401b24:	004011ed 	.word	0x004011ed
  401b28:	004028f1 	.word	0x004028f1
  401b2c:	00401105 	.word	0x00401105

00401b30 <PCA9952_init>:

extern uint8_t func_transmit(const uint8_t *p_buff, uint32_t ulsize); //lazy, defined in another c file 10feb16 jsi

void PCA9952_init(void) //7apr15
{
  401b30:	b5b0      	push	{r4, r5, r7, lr}
  401b32:	b094      	sub	sp, #80	; 0x50
  401b34:	af02      	add	r7, sp, #8
	volatile uint8_t tmp1, tmp2, tmp3, tmp4;
	
	char printStr[64] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
  401b36:	1d3b      	adds	r3, r7, #4
  401b38:	2240      	movs	r2, #64	; 0x40
  401b3a:	4618      	mov	r0, r3
  401b3c:	2100      	movs	r1, #0
  401b3e:	4b45      	ldr	r3, [pc, #276]	; (401c54 <PCA9952_init+0x124>)
  401b40:	4798      	blx	r3
	/* Store cpu frequency locally*/
//7apr15	cpu_hz = fcpu;

	//Note output is off at the chip level before coming into this routine, LED_OEn set high before calling this function from main()

	PCA9952_write_reg(LED_TOP, PCA9952_MODE1, 0);		//No autoincrement, normal mode not sleep, does not respond to sub or allcall addresses
  401b42:	2000      	movs	r0, #0
  401b44:	2100      	movs	r1, #0
  401b46:	2200      	movs	r2, #0
  401b48:	4b43      	ldr	r3, [pc, #268]	; (401c58 <PCA9952_init+0x128>)
  401b4a:	4798      	blx	r3
	PCA9952_write_reg(LED_TOP, PCA9952_MODE2, 0);		//Dimming not blinking, change on stop not ack (don't really care but have to pick something)
  401b4c:	2000      	movs	r0, #0
  401b4e:	2101      	movs	r1, #1
  401b50:	2200      	movs	r2, #0
  401b52:	4b41      	ldr	r3, [pc, #260]	; (401c58 <PCA9952_init+0x128>)
  401b54:	4798      	blx	r3
	PCA9952_write_reg(LED_TOP, PCA9952_IREFALL, LED_DRIVER_CURRENT); //9apr15 drive at half current for now, power supply circuit needs modification
  401b56:	2000      	movs	r0, #0
  401b58:	2143      	movs	r1, #67	; 0x43
  401b5a:	22c8      	movs	r2, #200	; 0xc8
  401b5c:	4b3e      	ldr	r3, [pc, #248]	; (401c58 <PCA9952_init+0x128>)
  401b5e:	4798      	blx	r3
	PCA9952_write_reg(LED_TOP, PCA9952_LEDOUT0, 0);		//Setting all channels off for now
  401b60:	2000      	movs	r0, #0
  401b62:	2102      	movs	r1, #2
  401b64:	2200      	movs	r2, #0
  401b66:	4b3c      	ldr	r3, [pc, #240]	; (401c58 <PCA9952_init+0x128>)
  401b68:	4798      	blx	r3
	PCA9952_write_reg(LED_TOP, PCA9952_LEDOUT1, 0);
  401b6a:	2000      	movs	r0, #0
  401b6c:	2103      	movs	r1, #3
  401b6e:	2200      	movs	r2, #0
  401b70:	4b39      	ldr	r3, [pc, #228]	; (401c58 <PCA9952_init+0x128>)
  401b72:	4798      	blx	r3
	PCA9952_write_reg(LED_TOP, PCA9952_LEDOUT2, 0);
  401b74:	2000      	movs	r0, #0
  401b76:	2104      	movs	r1, #4
  401b78:	2200      	movs	r2, #0
  401b7a:	4b37      	ldr	r3, [pc, #220]	; (401c58 <PCA9952_init+0x128>)
  401b7c:	4798      	blx	r3
	PCA9952_write_reg(LED_TOP, PCA9952_LEDOUT3, 0);
  401b7e:	2000      	movs	r0, #0
  401b80:	2105      	movs	r1, #5
  401b82:	2200      	movs	r2, #0
  401b84:	4b34      	ldr	r3, [pc, #208]	; (401c58 <PCA9952_init+0x128>)
  401b86:	4798      	blx	r3

	tmp1 = PCA9952_read_reg(LED_TOP, PCA9952_EFLAG0);	//TODO: just see what we get, will need to weave error checking into this system later
  401b88:	2000      	movs	r0, #0
  401b8a:	2144      	movs	r1, #68	; 0x44
  401b8c:	4b33      	ldr	r3, [pc, #204]	; (401c5c <PCA9952_init+0x12c>)
  401b8e:	4798      	blx	r3
  401b90:	4603      	mov	r3, r0
  401b92:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	tmp2 = PCA9952_read_reg(LED_TOP, PCA9952_EFLAG1);
  401b96:	2000      	movs	r0, #0
  401b98:	2145      	movs	r1, #69	; 0x45
  401b9a:	4b30      	ldr	r3, [pc, #192]	; (401c5c <PCA9952_init+0x12c>)
  401b9c:	4798      	blx	r3
  401b9e:	4603      	mov	r3, r0
  401ba0:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46

	PCA9952_write_reg(LED_BOTTOM, PCA9952_MODE1, 0);		//No autoincrement, normal mode not sleep, does not respond to sub or allcall addresses
  401ba4:	2001      	movs	r0, #1
  401ba6:	2100      	movs	r1, #0
  401ba8:	2200      	movs	r2, #0
  401baa:	4b2b      	ldr	r3, [pc, #172]	; (401c58 <PCA9952_init+0x128>)
  401bac:	4798      	blx	r3
	PCA9952_write_reg(LED_BOTTOM, PCA9952_MODE2, 0);		//Dimming not blinking, change on stop not ack (don't really care but have to pick something)
  401bae:	2001      	movs	r0, #1
  401bb0:	2101      	movs	r1, #1
  401bb2:	2200      	movs	r2, #0
  401bb4:	4b28      	ldr	r3, [pc, #160]	; (401c58 <PCA9952_init+0x128>)
  401bb6:	4798      	blx	r3
	PCA9952_write_reg(LED_BOTTOM, PCA9952_IREFALL, LED_DRIVER_CURRENT); //9apr15 drive at half current for now, power supply circuit needs modification
  401bb8:	2001      	movs	r0, #1
  401bba:	2143      	movs	r1, #67	; 0x43
  401bbc:	22c8      	movs	r2, #200	; 0xc8
  401bbe:	4b26      	ldr	r3, [pc, #152]	; (401c58 <PCA9952_init+0x128>)
  401bc0:	4798      	blx	r3
	PCA9952_write_reg(LED_BOTTOM, PCA9952_LEDOUT0, 0);		//Setting all channels off for now
  401bc2:	2001      	movs	r0, #1
  401bc4:	2102      	movs	r1, #2
  401bc6:	2200      	movs	r2, #0
  401bc8:	4b23      	ldr	r3, [pc, #140]	; (401c58 <PCA9952_init+0x128>)
  401bca:	4798      	blx	r3
	PCA9952_write_reg(LED_BOTTOM, PCA9952_LEDOUT1, 0);
  401bcc:	2001      	movs	r0, #1
  401bce:	2103      	movs	r1, #3
  401bd0:	2200      	movs	r2, #0
  401bd2:	4b21      	ldr	r3, [pc, #132]	; (401c58 <PCA9952_init+0x128>)
  401bd4:	4798      	blx	r3
	PCA9952_write_reg(LED_BOTTOM, PCA9952_LEDOUT2, 0);
  401bd6:	2001      	movs	r0, #1
  401bd8:	2104      	movs	r1, #4
  401bda:	2200      	movs	r2, #0
  401bdc:	4b1e      	ldr	r3, [pc, #120]	; (401c58 <PCA9952_init+0x128>)
  401bde:	4798      	blx	r3
	PCA9952_write_reg(LED_BOTTOM, PCA9952_LEDOUT3, 0);
  401be0:	2001      	movs	r0, #1
  401be2:	2105      	movs	r1, #5
  401be4:	2200      	movs	r2, #0
  401be6:	4b1c      	ldr	r3, [pc, #112]	; (401c58 <PCA9952_init+0x128>)
  401be8:	4798      	blx	r3

	tmp3 = PCA9952_read_reg(LED_BOTTOM, PCA9952_EFLAG0);	//TODO: just see what we get, will need to weave error checking into this system later
  401bea:	2001      	movs	r0, #1
  401bec:	2144      	movs	r1, #68	; 0x44
  401bee:	4b1b      	ldr	r3, [pc, #108]	; (401c5c <PCA9952_init+0x12c>)
  401bf0:	4798      	blx	r3
  401bf2:	4603      	mov	r3, r0
  401bf4:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
	tmp4 = PCA9952_read_reg(LED_BOTTOM, PCA9952_EFLAG1);
  401bf8:	2001      	movs	r0, #1
  401bfa:	2145      	movs	r1, #69	; 0x45
  401bfc:	4b17      	ldr	r3, [pc, #92]	; (401c5c <PCA9952_init+0x12c>)
  401bfe:	4798      	blx	r3
  401c00:	4603      	mov	r3, r0
  401c02:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
	
	sprintf(printStr,"PCA9952: tmp1: %x tmp2: %x tmp3: %x tmp4: %x\r\n", tmp1, tmp2, tmp3, tmp4); //10feb16 just for debug jsi
  401c06:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
  401c0a:	b2db      	uxtb	r3, r3
  401c0c:	461d      	mov	r5, r3
  401c0e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
  401c12:	b2db      	uxtb	r3, r3
  401c14:	461c      	mov	r4, r3
  401c16:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
  401c1a:	b2db      	uxtb	r3, r3
  401c1c:	4619      	mov	r1, r3
  401c1e:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
  401c22:	b2db      	uxtb	r3, r3
  401c24:	461a      	mov	r2, r3
  401c26:	1d3b      	adds	r3, r7, #4
  401c28:	9100      	str	r1, [sp, #0]
  401c2a:	9201      	str	r2, [sp, #4]
  401c2c:	4618      	mov	r0, r3
  401c2e:	490c      	ldr	r1, [pc, #48]	; (401c60 <PCA9952_init+0x130>)
  401c30:	462a      	mov	r2, r5
  401c32:	4623      	mov	r3, r4
  401c34:	4c0b      	ldr	r4, [pc, #44]	; (401c64 <PCA9952_init+0x134>)
  401c36:	47a0      	blx	r4
	func_transmit(printStr, strlen(printStr));
  401c38:	1d3b      	adds	r3, r7, #4
  401c3a:	4618      	mov	r0, r3
  401c3c:	4b0a      	ldr	r3, [pc, #40]	; (401c68 <PCA9952_init+0x138>)
  401c3e:	4798      	blx	r3
  401c40:	4602      	mov	r2, r0
  401c42:	1d3b      	adds	r3, r7, #4
  401c44:	4618      	mov	r0, r3
  401c46:	4611      	mov	r1, r2
  401c48:	4b08      	ldr	r3, [pc, #32]	; (401c6c <PCA9952_init+0x13c>)
  401c4a:	4798      	blx	r3
	
	
}
  401c4c:	3748      	adds	r7, #72	; 0x48
  401c4e:	46bd      	mov	sp, r7
  401c50:	bdb0      	pop	{r4, r5, r7, pc}
  401c52:	bf00      	nop
  401c54:	00403055 	.word	0x00403055
  401c58:	00401a2d 	.word	0x00401a2d
  401c5c:	00401a9d 	.word	0x00401a9d
  401c60:	00408810 	.word	0x00408810
  401c64:	00403271 	.word	0x00403271
  401c68:	004032bd 	.word	0x004032bd
  401c6c:	00402ad1 	.word	0x00402ad1

00401c70 <ioport_set_pin_dir>:
 * \param pin IOPORT pin to configure
 * \param dir Direction to set for the specified pin (\ref ioport_direction)
 */
static inline void ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
  401c70:	b480      	push	{r7}
  401c72:	b08d      	sub	sp, #52	; 0x34
  401c74:	af00      	add	r7, sp, #0
  401c76:	6078      	str	r0, [r7, #4]
  401c78:	460b      	mov	r3, r1
  401c7a:	70fb      	strb	r3, [r7, #3]
  401c7c:	687b      	ldr	r3, [r7, #4]
  401c7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  401c80:	78fb      	ldrb	r3, [r7, #3]
  401c82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  401c86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  401c88:	627b      	str	r3, [r7, #36]	; 0x24
  401c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  401c8c:	623b      	str	r3, [r7, #32]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  401c8e:	6a3b      	ldr	r3, [r7, #32]
  401c90:	095b      	lsrs	r3, r3, #5
  401c92:	61fb      	str	r3, [r7, #28]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  401c94:	69fa      	ldr	r2, [r7, #28]
  401c96:	4b17      	ldr	r3, [pc, #92]	; (401cf4 <ioport_set_pin_dir+0x84>)
  401c98:	4413      	add	r3, r2
  401c9a:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);
  401c9c:	61bb      	str	r3, [r7, #24]

	if (dir == IOPORT_DIR_OUTPUT) {
  401c9e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  401ca2:	2b01      	cmp	r3, #1
  401ca4:	d109      	bne.n	401cba <ioport_set_pin_dir+0x4a>
  401ca6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  401ca8:	617b      	str	r3, [r7, #20]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  401caa:	697b      	ldr	r3, [r7, #20]
  401cac:	f003 031f 	and.w	r3, r3, #31
  401cb0:	2201      	movs	r2, #1
  401cb2:	409a      	lsls	r2, r3
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  401cb4:	69bb      	ldr	r3, [r7, #24]
  401cb6:	611a      	str	r2, [r3, #16]
  401cb8:	e00c      	b.n	401cd4 <ioport_set_pin_dir+0x64>
	} else if (dir == IOPORT_DIR_INPUT) {
  401cba:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  401cbe:	2b00      	cmp	r3, #0
  401cc0:	d108      	bne.n	401cd4 <ioport_set_pin_dir+0x64>
  401cc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  401cc4:	613b      	str	r3, [r7, #16]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  401cc6:	693b      	ldr	r3, [r7, #16]
  401cc8:	f003 031f 	and.w	r3, r3, #31
  401ccc:	2201      	movs	r2, #1
  401cce:	409a      	lsls	r2, r3
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  401cd0:	69bb      	ldr	r3, [r7, #24]
  401cd2:	615a      	str	r2, [r3, #20]
  401cd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  401cd6:	60fb      	str	r3, [r7, #12]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  401cd8:	68fb      	ldr	r3, [r7, #12]
  401cda:	f003 031f 	and.w	r3, r3, #31
  401cde:	2201      	movs	r2, #1
  401ce0:	409a      	lsls	r2, r3
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401ce2:	69bb      	ldr	r3, [r7, #24]
  401ce4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	arch_ioport_set_pin_dir(pin, dir);
}
  401ce8:	3734      	adds	r7, #52	; 0x34
  401cea:	46bd      	mov	sp, r7
  401cec:	f85d 7b04 	ldr.w	r7, [sp], #4
  401cf0:	4770      	bx	lr
  401cf2:	bf00      	nop
  401cf4:	00200707 	.word	0x00200707

00401cf8 <ioport_set_pin_level>:
 *
 * \param pin IOPORT pin to configure
 * \param level Logical value of the pin
 */
static inline void ioport_set_pin_level(ioport_pin_t pin, bool level)
{
  401cf8:	b480      	push	{r7}
  401cfa:	b08b      	sub	sp, #44	; 0x2c
  401cfc:	af00      	add	r7, sp, #0
  401cfe:	6078      	str	r0, [r7, #4]
  401d00:	460b      	mov	r3, r1
  401d02:	70fb      	strb	r3, [r7, #3]
  401d04:	687b      	ldr	r3, [r7, #4]
  401d06:	627b      	str	r3, [r7, #36]	; 0x24
  401d08:	78fb      	ldrb	r3, [r7, #3]
  401d0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  401d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  401d10:	61fb      	str	r3, [r7, #28]
  401d12:	69fb      	ldr	r3, [r7, #28]
  401d14:	61bb      	str	r3, [r7, #24]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  401d16:	69bb      	ldr	r3, [r7, #24]
  401d18:	095b      	lsrs	r3, r3, #5
  401d1a:	617b      	str	r3, [r7, #20]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  401d1c:	697a      	ldr	r2, [r7, #20]
  401d1e:	4b10      	ldr	r3, [pc, #64]	; (401d60 <ioport_set_pin_level+0x68>)
  401d20:	4413      	add	r3, r2
  401d22:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);
  401d24:	613b      	str	r3, [r7, #16]

	if (level) {
  401d26:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
  401d2a:	2b00      	cmp	r3, #0
  401d2c:	d009      	beq.n	401d42 <ioport_set_pin_level+0x4a>
  401d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  401d30:	60fb      	str	r3, [r7, #12]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  401d32:	68fb      	ldr	r3, [r7, #12]
  401d34:	f003 031f 	and.w	r3, r3, #31
  401d38:	2201      	movs	r2, #1
  401d3a:	409a      	lsls	r2, r3
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  401d3c:	693b      	ldr	r3, [r7, #16]
  401d3e:	631a      	str	r2, [r3, #48]	; 0x30
  401d40:	e008      	b.n	401d54 <ioport_set_pin_level+0x5c>
  401d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  401d44:	60bb      	str	r3, [r7, #8]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  401d46:	68bb      	ldr	r3, [r7, #8]
  401d48:	f003 031f 	and.w	r3, r3, #31
  401d4c:	2201      	movs	r2, #1
  401d4e:	409a      	lsls	r2, r3
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  401d50:	693b      	ldr	r3, [r7, #16]
  401d52:	635a      	str	r2, [r3, #52]	; 0x34
	arch_ioport_set_pin_level(pin, level);
}
  401d54:	372c      	adds	r7, #44	; 0x2c
  401d56:	46bd      	mov	sp, r7
  401d58:	f85d 7b04 	ldr.w	r7, [sp], #4
  401d5c:	4770      	bx	lr
  401d5e:	bf00      	nop
  401d60:	00200707 	.word	0x00200707

00401d64 <ioport_get_pin_level>:
 *
 * \param pin IOPORT pin to read
 * \return Current logical value of the specified pin
 */
static inline bool ioport_get_pin_level(ioport_pin_t pin)
{
  401d64:	b480      	push	{r7}
  401d66:	b089      	sub	sp, #36	; 0x24
  401d68:	af00      	add	r7, sp, #0
  401d6a:	6078      	str	r0, [r7, #4]
  401d6c:	687b      	ldr	r3, [r7, #4]
  401d6e:	61fb      	str	r3, [r7, #28]
  401d70:	69fb      	ldr	r3, [r7, #28]
  401d72:	61bb      	str	r3, [r7, #24]
  401d74:	69bb      	ldr	r3, [r7, #24]
  401d76:	617b      	str	r3, [r7, #20]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  401d78:	697b      	ldr	r3, [r7, #20]
  401d7a:	095b      	lsrs	r3, r3, #5
  401d7c:	613b      	str	r3, [r7, #16]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  401d7e:	693a      	ldr	r2, [r7, #16]
  401d80:	4b0b      	ldr	r3, [pc, #44]	; (401db0 <ioport_get_pin_level+0x4c>)
  401d82:	4413      	add	r3, r2
  401d84:	025b      	lsls	r3, r3, #9
	base->PIO_CODR = mask & ~level;
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  401d86:	6bda      	ldr	r2, [r3, #60]	; 0x3c
  401d88:	69fb      	ldr	r3, [r7, #28]
  401d8a:	60fb      	str	r3, [r7, #12]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  401d8c:	68fb      	ldr	r3, [r7, #12]
  401d8e:	f003 031f 	and.w	r3, r3, #31
  401d92:	2101      	movs	r1, #1
  401d94:	fa01 f303 	lsl.w	r3, r1, r3
	base->PIO_CODR = mask & ~level;
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  401d98:	4013      	ands	r3, r2
  401d9a:	2b00      	cmp	r3, #0
  401d9c:	bf14      	ite	ne
  401d9e:	2301      	movne	r3, #1
  401da0:	2300      	moveq	r3, #0
  401da2:	b2db      	uxtb	r3, r3
	return arch_ioport_get_pin_level(pin);
}
  401da4:	4618      	mov	r0, r3
  401da6:	3724      	adds	r7, #36	; 0x24
  401da8:	46bd      	mov	sp, r7
  401daa:	f85d 7b04 	ldr.w	r7, [sp], #4
  401dae:	4770      	bx	lr
  401db0:	00200707 	.word	0x00200707

00401db4 <io_pin>:

#define EC_ONE_MICROSECOND 8

unsigned char io_pin(unsigned char idx);
unsigned char io_pin(unsigned char idx)
{
  401db4:	b480      	push	{r7}
  401db6:	b083      	sub	sp, #12
  401db8:	af00      	add	r7, sp, #0
  401dba:	4603      	mov	r3, r0
  401dbc:	71fb      	strb	r3, [r7, #7]
	switch (idx)
  401dbe:	79fb      	ldrb	r3, [r7, #7]
  401dc0:	2b04      	cmp	r3, #4
  401dc2:	d817      	bhi.n	401df4 <io_pin+0x40>
  401dc4:	a201      	add	r2, pc, #4	; (adr r2, 401dcc <io_pin+0x18>)
  401dc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  401dca:	bf00      	nop
  401dcc:	00401de1 	.word	0x00401de1
  401dd0:	00401de5 	.word	0x00401de5
  401dd4:	00401de9 	.word	0x00401de9
  401dd8:	00401ded 	.word	0x00401ded
  401ddc:	00401df1 	.word	0x00401df1
	{
		case 0:
			return ECLAVE_SERIAL_ID0;
  401de0:	230f      	movs	r3, #15
  401de2:	e008      	b.n	401df6 <io_pin+0x42>
			break;
		case 1:
			return ECLAVE_SERIAL_ID1;
  401de4:	2310      	movs	r3, #16
  401de6:	e006      	b.n	401df6 <io_pin+0x42>
			break;
		case 2:
			return ECLAVE_SERIAL_ID2;
  401de8:	2311      	movs	r3, #17
  401dea:	e004      	b.n	401df6 <io_pin+0x42>
			break;
		case 3:
			return ECLAVE_SERIAL_ID3;
  401dec:	2312      	movs	r3, #18
  401dee:	e002      	b.n	401df6 <io_pin+0x42>
			break;
		case 4:
			return ECLAVE_SERIAL_ID4;
  401df0:	2313      	movs	r3, #19
  401df2:	e000      	b.n	401df6 <io_pin+0x42>
			break;
		default: 
			return 0; //TODO: return a better error code here
  401df4:	2300      	movs	r3, #0
			break;
	}
}
  401df6:	4618      	mov	r0, r3
  401df8:	370c      	adds	r7, #12
  401dfa:	46bd      	mov	sp, r7
  401dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
  401e00:	4770      	bx	lr
  401e02:	bf00      	nop

00401e04 <drive_DQ_low>:

void drive_DQ_low(unsigned char idx);
void drive_DQ_low(unsigned char idx)
{
  401e04:	b580      	push	{r7, lr}
  401e06:	b084      	sub	sp, #16
  401e08:	af00      	add	r7, sp, #0
  401e0a:	4603      	mov	r3, r0
  401e0c:	71fb      	strb	r3, [r7, #7]
	unsigned char ioPin;
	int32_t ioFlags;
	
	ioPin = io_pin(idx);
  401e0e:	79fb      	ldrb	r3, [r7, #7]
  401e10:	4618      	mov	r0, r3
  401e12:	4b08      	ldr	r3, [pc, #32]	; (401e34 <drive_DQ_low+0x30>)
  401e14:	4798      	blx	r3
  401e16:	4603      	mov	r3, r0
  401e18:	73fb      	strb	r3, [r7, #15]
	
	ioport_set_pin_dir(ioPin, IOPORT_DIR_OUTPUT);
  401e1a:	7bfb      	ldrb	r3, [r7, #15]
  401e1c:	4618      	mov	r0, r3
  401e1e:	2101      	movs	r1, #1
  401e20:	4b05      	ldr	r3, [pc, #20]	; (401e38 <drive_DQ_low+0x34>)
  401e22:	4798      	blx	r3
	ioport_set_pin_level(ioPin, IOPORT_PIN_LEVEL_LOW);
  401e24:	7bfb      	ldrb	r3, [r7, #15]
  401e26:	4618      	mov	r0, r3
  401e28:	2100      	movs	r1, #0
  401e2a:	4b04      	ldr	r3, [pc, #16]	; (401e3c <drive_DQ_low+0x38>)
  401e2c:	4798      	blx	r3

}
  401e2e:	3710      	adds	r7, #16
  401e30:	46bd      	mov	sp, r7
  401e32:	bd80      	pop	{r7, pc}
  401e34:	00401db5 	.word	0x00401db5
  401e38:	00401c71 	.word	0x00401c71
  401e3c:	00401cf9 	.word	0x00401cf9

00401e40 <release_the_bus>:

void release_the_bus(unsigned char idx);
void release_the_bus(unsigned char idx)
{
  401e40:	b580      	push	{r7, lr}
  401e42:	b084      	sub	sp, #16
  401e44:	af00      	add	r7, sp, #0
  401e46:	4603      	mov	r3, r0
  401e48:	71fb      	strb	r3, [r7, #7]
	unsigned char ioPin;
	int32_t ioFlags;
	
	ioPin = io_pin(idx);
  401e4a:	79fb      	ldrb	r3, [r7, #7]
  401e4c:	4618      	mov	r0, r3
  401e4e:	4b06      	ldr	r3, [pc, #24]	; (401e68 <release_the_bus+0x28>)
  401e50:	4798      	blx	r3
  401e52:	4603      	mov	r3, r0
  401e54:	73fb      	strb	r3, [r7, #15]
	
	ioport_set_pin_dir(ioPin, IOPORT_DIR_INPUT);
  401e56:	7bfb      	ldrb	r3, [r7, #15]
  401e58:	4618      	mov	r0, r3
  401e5a:	2100      	movs	r1, #0
  401e5c:	4b03      	ldr	r3, [pc, #12]	; (401e6c <release_the_bus+0x2c>)
  401e5e:	4798      	blx	r3
	

}
  401e60:	3710      	adds	r7, #16
  401e62:	46bd      	mov	sp, r7
  401e64:	bd80      	pop	{r7, pc}
  401e66:	bf00      	nop
  401e68:	00401db5 	.word	0x00401db5
  401e6c:	00401c71 	.word	0x00401c71

00401e70 <gpio_input>:

void gpio_input(unsigned char idx) //14may15 experiment
{
  401e70:	b580      	push	{r7, lr}
  401e72:	b084      	sub	sp, #16
  401e74:	af00      	add	r7, sp, #0
  401e76:	4603      	mov	r3, r0
  401e78:	71fb      	strb	r3, [r7, #7]
	uint32_t ioFlags;
	unsigned char ioPin;
		
	ioPin = io_pin(idx);
  401e7a:	79fb      	ldrb	r3, [r7, #7]
  401e7c:	4618      	mov	r0, r3
  401e7e:	4b06      	ldr	r3, [pc, #24]	; (401e98 <gpio_input+0x28>)
  401e80:	4798      	blx	r3
  401e82:	4603      	mov	r3, r0
  401e84:	73fb      	strb	r3, [r7, #15]
		
	ioport_set_pin_dir(ioPin, IOPORT_DIR_INPUT);
  401e86:	7bfb      	ldrb	r3, [r7, #15]
  401e88:	4618      	mov	r0, r3
  401e8a:	2100      	movs	r1, #0
  401e8c:	4b03      	ldr	r3, [pc, #12]	; (401e9c <gpio_input+0x2c>)
  401e8e:	4798      	blx	r3


}
  401e90:	3710      	adds	r7, #16
  401e92:	46bd      	mov	sp, r7
  401e94:	bd80      	pop	{r7, pc}
  401e96:	bf00      	nop
  401e98:	00401db5 	.word	0x00401db5
  401e9c:	00401c71 	.word	0x00401c71

00401ea0 <sample_line>:

unsigned char sample_line(unsigned char idx);
unsigned char sample_line(unsigned char idx)
{
  401ea0:	b580      	push	{r7, lr}
  401ea2:	b084      	sub	sp, #16
  401ea4:	af00      	add	r7, sp, #0
  401ea6:	4603      	mov	r3, r0
  401ea8:	71fb      	strb	r3, [r7, #7]
//14may15 experiment		uint32_t ioFlags;
		unsigned char retVal, ioPin;
		
		ioPin = io_pin(idx);
  401eaa:	79fb      	ldrb	r3, [r7, #7]
  401eac:	4618      	mov	r0, r3
  401eae:	4b07      	ldr	r3, [pc, #28]	; (401ecc <sample_line+0x2c>)
  401eb0:	4798      	blx	r3
  401eb2:	4603      	mov	r3, r0
  401eb4:	73fb      	strb	r3, [r7, #15]
		
//14may15 experiment		ioFlags = (GPIO_DIR_INPUT);
//14may15 experiment		gpio_configure_pin(ioPin, ioFlags);

		retVal = ioport_get_pin_level(ioPin);
  401eb6:	7bfb      	ldrb	r3, [r7, #15]
  401eb8:	4618      	mov	r0, r3
  401eba:	4b05      	ldr	r3, [pc, #20]	; (401ed0 <sample_line+0x30>)
  401ebc:	4798      	blx	r3
  401ebe:	4603      	mov	r3, r0
  401ec0:	73bb      	strb	r3, [r7, #14]

//14may15 experiment		ioFlags = (GPIO_DIR_OUTPUT);
//14may15 experiment		gpio_configure_pin(ioPin, ioFlags);

		return retVal;
  401ec2:	7bbb      	ldrb	r3, [r7, #14]
}
  401ec4:	4618      	mov	r0, r3
  401ec6:	3710      	adds	r7, #16
  401ec8:	46bd      	mov	sp, r7
  401eca:	bd80      	pop	{r7, pc}
  401ecc:	00401db5 	.word	0x00401db5
  401ed0:	00401d65 	.word	0x00401d65

00401ed4 <SetSpeed>:

//-----------------------------------------------------------------------------
// Set the 1-Wire timing to 'standard' (standard=1) or 'overdrive' (standard=0).
//
void SetSpeed(int standard)
{
  401ed4:	b480      	push	{r7}
  401ed6:	b083      	sub	sp, #12
  401ed8:	af00      	add	r7, sp, #0
  401eda:	6078      	str	r0, [r7, #4]
		J = 410;
	}
	
#endif

	if (standard) //experiment 16may15 cut everything in half, some issue with using the PLL? and fudge the tight numbers at the low end
  401edc:	687b      	ldr	r3, [r7, #4]
  401ede:	2b00      	cmp	r3, #0
  401ee0:	d01e      	beq.n	401f20 <SetSpeed+0x4c>
	{
		// Standard Speed
		A = 0; //6;
  401ee2:	4b21      	ldr	r3, [pc, #132]	; (401f68 <SetSpeed+0x94>)
  401ee4:	2200      	movs	r2, #0
  401ee6:	601a      	str	r2, [r3, #0]
		B = 32; //64;
  401ee8:	4b20      	ldr	r3, [pc, #128]	; (401f6c <SetSpeed+0x98>)
  401eea:	2220      	movs	r2, #32
  401eec:	601a      	str	r2, [r3, #0]
		C = 30; //60;
  401eee:	4b20      	ldr	r3, [pc, #128]	; (401f70 <SetSpeed+0x9c>)
  401ef0:	221e      	movs	r2, #30
  401ef2:	601a      	str	r2, [r3, #0]
		D = 2; //10;
  401ef4:	4b1f      	ldr	r3, [pc, #124]	; (401f74 <SetSpeed+0xa0>)
  401ef6:	2202      	movs	r2, #2
  401ef8:	601a      	str	r2, [r3, #0]
		E = 2; //9;
  401efa:	4b1f      	ldr	r3, [pc, #124]	; (401f78 <SetSpeed+0xa4>)
  401efc:	2202      	movs	r2, #2
  401efe:	601a      	str	r2, [r3, #0]
		F = 27; //55;
  401f00:	4b1e      	ldr	r3, [pc, #120]	; (401f7c <SetSpeed+0xa8>)
  401f02:	221b      	movs	r2, #27
  401f04:	601a      	str	r2, [r3, #0]
		G = 0; //0;
  401f06:	4b1e      	ldr	r3, [pc, #120]	; (401f80 <SetSpeed+0xac>)
  401f08:	2200      	movs	r2, #0
  401f0a:	601a      	str	r2, [r3, #0]
		H = 240; //480;
  401f0c:	4b1d      	ldr	r3, [pc, #116]	; (401f84 <SetSpeed+0xb0>)
  401f0e:	22f0      	movs	r2, #240	; 0xf0
  401f10:	601a      	str	r2, [r3, #0]
		I = 35; //70;
  401f12:	4b1d      	ldr	r3, [pc, #116]	; (401f88 <SetSpeed+0xb4>)
  401f14:	2223      	movs	r2, #35	; 0x23
  401f16:	601a      	str	r2, [r3, #0]
		J = 205; //410;
  401f18:	4b1c      	ldr	r3, [pc, #112]	; (401f8c <SetSpeed+0xb8>)
  401f1a:	22cd      	movs	r2, #205	; 0xcd
  401f1c:	601a      	str	r2, [r3, #0]
  401f1e:	e01d      	b.n	401f5c <SetSpeed+0x88>


	else
	{
		// Overdrive Speed
		A = 1.5;
  401f20:	4b11      	ldr	r3, [pc, #68]	; (401f68 <SetSpeed+0x94>)
  401f22:	2201      	movs	r2, #1
  401f24:	601a      	str	r2, [r3, #0]
		B = 7.5;
  401f26:	4b11      	ldr	r3, [pc, #68]	; (401f6c <SetSpeed+0x98>)
  401f28:	2207      	movs	r2, #7
  401f2a:	601a      	str	r2, [r3, #0]
		C = 7.5;
  401f2c:	4b10      	ldr	r3, [pc, #64]	; (401f70 <SetSpeed+0x9c>)
  401f2e:	2207      	movs	r2, #7
  401f30:	601a      	str	r2, [r3, #0]
		D = 2.5;
  401f32:	4b10      	ldr	r3, [pc, #64]	; (401f74 <SetSpeed+0xa0>)
  401f34:	2202      	movs	r2, #2
  401f36:	601a      	str	r2, [r3, #0]
		E = 0.75;
  401f38:	4b0f      	ldr	r3, [pc, #60]	; (401f78 <SetSpeed+0xa4>)
  401f3a:	2200      	movs	r2, #0
  401f3c:	601a      	str	r2, [r3, #0]
		F = 7;
  401f3e:	4b0f      	ldr	r3, [pc, #60]	; (401f7c <SetSpeed+0xa8>)
  401f40:	2207      	movs	r2, #7
  401f42:	601a      	str	r2, [r3, #0]
		G = 2.5;
  401f44:	4b0e      	ldr	r3, [pc, #56]	; (401f80 <SetSpeed+0xac>)
  401f46:	2202      	movs	r2, #2
  401f48:	601a      	str	r2, [r3, #0]
		H = 70;
  401f4a:	4b0e      	ldr	r3, [pc, #56]	; (401f84 <SetSpeed+0xb0>)
  401f4c:	2246      	movs	r2, #70	; 0x46
  401f4e:	601a      	str	r2, [r3, #0]
		I = 8.5;
  401f50:	4b0d      	ldr	r3, [pc, #52]	; (401f88 <SetSpeed+0xb4>)
  401f52:	2208      	movs	r2, #8
  401f54:	601a      	str	r2, [r3, #0]
		J = 40;
  401f56:	4b0d      	ldr	r3, [pc, #52]	; (401f8c <SetSpeed+0xb8>)
  401f58:	2228      	movs	r2, #40	; 0x28
  401f5a:	601a      	str	r2, [r3, #0]
	}
}
  401f5c:	370c      	adds	r7, #12
  401f5e:	46bd      	mov	sp, r7
  401f60:	f85d 7b04 	ldr.w	r7, [sp], #4
  401f64:	4770      	bx	lr
  401f66:	bf00      	nop
  401f68:	204009d8 	.word	0x204009d8
  401f6c:	204009dc 	.word	0x204009dc
  401f70:	204009e4 	.word	0x204009e4
  401f74:	204009d4 	.word	0x204009d4
  401f78:	204009f0 	.word	0x204009f0
  401f7c:	204009f8 	.word	0x204009f8
  401f80:	204009e8 	.word	0x204009e8
  401f84:	204009ec 	.word	0x204009ec
  401f88:	204009f4 	.word	0x204009f4
  401f8c:	204009e0 	.word	0x204009e0

00401f90 <OWTouchReset>:
// Generate a 1-Wire reset, return 1 if no presence detect was found,
// return 0 otherwise.
// (NOTE: Does not handle alarm presence from DS2404/DS1994)
//
int OWTouchReset(unsigned char idx)
{
  401f90:	b580      	push	{r7, lr}
  401f92:	b084      	sub	sp, #16
  401f94:	af00      	add	r7, sp, #0
  401f96:	4603      	mov	r3, r0
  401f98:	71fb      	strb	r3, [r7, #7]
	int result;

	mdelay(A);
  401f9a:	4b17      	ldr	r3, [pc, #92]	; (401ff8 <OWTouchReset+0x68>)
  401f9c:	681b      	ldr	r3, [r3, #0]
  401f9e:	4618      	mov	r0, r3
  401fa0:	4b16      	ldr	r3, [pc, #88]	; (401ffc <OWTouchReset+0x6c>)
  401fa2:	4798      	blx	r3
	drive_DQ_low(idx);
  401fa4:	79fb      	ldrb	r3, [r7, #7]
  401fa6:	4618      	mov	r0, r3
  401fa8:	4b15      	ldr	r3, [pc, #84]	; (402000 <OWTouchReset+0x70>)
  401faa:	4798      	blx	r3
	mdelay(H);	//tRSTL (reset low) 480-640us
  401fac:	4b15      	ldr	r3, [pc, #84]	; (402004 <OWTouchReset+0x74>)
  401fae:	681b      	ldr	r3, [r3, #0]
  401fb0:	4618      	mov	r0, r3
  401fb2:	4b12      	ldr	r3, [pc, #72]	; (401ffc <OWTouchReset+0x6c>)
  401fb4:	4798      	blx	r3
	release_the_bus(idx);
  401fb6:	79fb      	ldrb	r3, [r7, #7]
  401fb8:	4618      	mov	r0, r3
  401fba:	4b13      	ldr	r3, [pc, #76]	; (402008 <OWTouchReset+0x78>)
  401fbc:	4798      	blx	r3
	
	gpio_input(idx); //14may15 experiment
  401fbe:	79fb      	ldrb	r3, [r7, #7]
  401fc0:	4618      	mov	r0, r3
  401fc2:	4b12      	ldr	r3, [pc, #72]	; (40200c <OWTouchReset+0x7c>)
  401fc4:	4798      	blx	r3

	
	mdelay(I);	//tMSP (presence detect sample) 60-75us
  401fc6:	4b12      	ldr	r3, [pc, #72]	; (402010 <OWTouchReset+0x80>)
  401fc8:	681b      	ldr	r3, [r3, #0]
  401fca:	4618      	mov	r0, r3
  401fcc:	4b0b      	ldr	r3, [pc, #44]	; (401ffc <OWTouchReset+0x6c>)
  401fce:	4798      	blx	r3
	result = sample_line(idx);
  401fd0:	79fb      	ldrb	r3, [r7, #7]
  401fd2:	4618      	mov	r0, r3
  401fd4:	4b0f      	ldr	r3, [pc, #60]	; (402014 <OWTouchReset+0x84>)
  401fd6:	4798      	blx	r3
  401fd8:	4603      	mov	r3, r0
  401fda:	60fb      	str	r3, [r7, #12]
	
	gpio_input(idx); //14may15 experiement
  401fdc:	79fb      	ldrb	r3, [r7, #7]
  401fde:	4618      	mov	r0, r3
  401fe0:	4b0a      	ldr	r3, [pc, #40]	; (40200c <OWTouchReset+0x7c>)
  401fe2:	4798      	blx	r3

	mdelay(J); // Complete the reset sequence recovery 5-??us (no max?)
  401fe4:	4b0c      	ldr	r3, [pc, #48]	; (402018 <OWTouchReset+0x88>)
  401fe6:	681b      	ldr	r3, [r3, #0]
  401fe8:	4618      	mov	r0, r3
  401fea:	4b04      	ldr	r3, [pc, #16]	; (401ffc <OWTouchReset+0x6c>)
  401fec:	4798      	blx	r3
	return result; // Return sample presence pulse result
  401fee:	68fb      	ldr	r3, [r7, #12]
}
  401ff0:	4618      	mov	r0, r3
  401ff2:	3710      	adds	r7, #16
  401ff4:	46bd      	mov	sp, r7
  401ff6:	bd80      	pop	{r7, pc}
  401ff8:	204009d8 	.word	0x204009d8
  401ffc:	004028f1 	.word	0x004028f1
  402000:	00401e05 	.word	0x00401e05
  402004:	204009ec 	.word	0x204009ec
  402008:	00401e41 	.word	0x00401e41
  40200c:	00401e71 	.word	0x00401e71
  402010:	204009f4 	.word	0x204009f4
  402014:	00401ea1 	.word	0x00401ea1
  402018:	204009e0 	.word	0x204009e0

0040201c <drive_DQ_low_and_release_the_bus>:

void drive_DQ_low_and_release_the_bus(unsigned char idx);
void drive_DQ_low_and_release_the_bus(unsigned char idx)
{
  40201c:	b580      	push	{r7, lr}
  40201e:	b084      	sub	sp, #16
  402020:	af00      	add	r7, sp, #0
  402022:	4603      	mov	r3, r0
  402024:	71fb      	strb	r3, [r7, #7]
	unsigned char ioPin;
	int32_t ioFlagsOutput, ioFlagsInput;
	
	ioPin = io_pin(idx);
  402026:	79fb      	ldrb	r3, [r7, #7]
  402028:	4618      	mov	r0, r3
  40202a:	4b0d      	ldr	r3, [pc, #52]	; (402060 <drive_DQ_low_and_release_the_bus+0x44>)
  40202c:	4798      	blx	r3
  40202e:	4603      	mov	r3, r0
  402030:	73fb      	strb	r3, [r7, #15]
	
	ioport_set_pin_dir(ioPin, IOPORT_DIR_OUTPUT);
  402032:	7bfb      	ldrb	r3, [r7, #15]
  402034:	4618      	mov	r0, r3
  402036:	2101      	movs	r1, #1
  402038:	4b0a      	ldr	r3, [pc, #40]	; (402064 <drive_DQ_low_and_release_the_bus+0x48>)
  40203a:	4798      	blx	r3
	ioport_set_pin_level(ioPin, IOPORT_PIN_LEVEL_LOW);
  40203c:	7bfb      	ldrb	r3, [r7, #15]
  40203e:	4618      	mov	r0, r3
  402040:	2100      	movs	r1, #0
  402042:	4b09      	ldr	r3, [pc, #36]	; (402068 <drive_DQ_low_and_release_the_bus+0x4c>)
  402044:	4798      	blx	r3

	mdelay(A);	//tW1L 5-15us
  402046:	4b09      	ldr	r3, [pc, #36]	; (40206c <drive_DQ_low_and_release_the_bus+0x50>)
  402048:	681b      	ldr	r3, [r3, #0]
  40204a:	4618      	mov	r0, r3
  40204c:	4b08      	ldr	r3, [pc, #32]	; (402070 <drive_DQ_low_and_release_the_bus+0x54>)
  40204e:	4798      	blx	r3

	ioport_set_pin_dir(ioPin, IOPORT_DIR_INPUT);
  402050:	7bfb      	ldrb	r3, [r7, #15]
  402052:	4618      	mov	r0, r3
  402054:	2100      	movs	r1, #0
  402056:	4b03      	ldr	r3, [pc, #12]	; (402064 <drive_DQ_low_and_release_the_bus+0x48>)
  402058:	4798      	blx	r3
	
}
  40205a:	3710      	adds	r7, #16
  40205c:	46bd      	mov	sp, r7
  40205e:	bd80      	pop	{r7, pc}
  402060:	00401db5 	.word	0x00401db5
  402064:	00401c71 	.word	0x00401c71
  402068:	00401cf9 	.word	0x00401cf9
  40206c:	204009d8 	.word	0x204009d8
  402070:	004028f1 	.word	0x004028f1

00402074 <OWWriteBit>:
//-----------------------------------------------------------------------------
// Send a 1-Wire write bit. Provide 10us recovery time.
//
void OWWriteBit(unsigned char idx, int bit);
void OWWriteBit(unsigned char idx, int bit)
{
  402074:	b580      	push	{r7, lr}
  402076:	b082      	sub	sp, #8
  402078:	af00      	add	r7, sp, #0
  40207a:	4603      	mov	r3, r0
  40207c:	6039      	str	r1, [r7, #0]
  40207e:	71fb      	strb	r3, [r7, #7]
	if (bit)
  402080:	683b      	ldr	r3, [r7, #0]
  402082:	2b00      	cmp	r3, #0
  402084:	d009      	beq.n	40209a <OWWriteBit+0x26>
	{
		// Write '1' bit
		drive_DQ_low_and_release_the_bus(idx);
  402086:	79fb      	ldrb	r3, [r7, #7]
  402088:	4618      	mov	r0, r3
  40208a:	4b0e      	ldr	r3, [pc, #56]	; (4020c4 <OWWriteBit+0x50>)
  40208c:	4798      	blx	r3
#if 0
		drive_DQ_low(idx);
//14may15 take this out entirely, we can't seem to control this precisely enough		cpu_delay_us(A, EC_CPU_CLOCK_100MHZ	//tW1L 5-15us
		release_the_bus(idx);
#endif
		mdelay(B);	// Complete the time slot and 10us recovery tSLOT 65-??us (no max)
  40208e:	4b0e      	ldr	r3, [pc, #56]	; (4020c8 <OWWriteBit+0x54>)
  402090:	681b      	ldr	r3, [r3, #0]
  402092:	4618      	mov	r0, r3
  402094:	4b0d      	ldr	r3, [pc, #52]	; (4020cc <OWWriteBit+0x58>)
  402096:	4798      	blx	r3
  402098:	e011      	b.n	4020be <OWWriteBit+0x4a>
	}
	else
	{
		// Write '0' bit
		drive_DQ_low(idx);
  40209a:	79fb      	ldrb	r3, [r7, #7]
  40209c:	4618      	mov	r0, r3
  40209e:	4b0c      	ldr	r3, [pc, #48]	; (4020d0 <OWWriteBit+0x5c>)
  4020a0:	4798      	blx	r3
		mdelay(C);	//tW0L 60-120us
  4020a2:	4b0c      	ldr	r3, [pc, #48]	; (4020d4 <OWWriteBit+0x60>)
  4020a4:	681b      	ldr	r3, [r3, #0]
  4020a6:	4618      	mov	r0, r3
  4020a8:	4b08      	ldr	r3, [pc, #32]	; (4020cc <OWWriteBit+0x58>)
  4020aa:	4798      	blx	r3
		release_the_bus(idx);
  4020ac:	79fb      	ldrb	r3, [r7, #7]
  4020ae:	4618      	mov	r0, r3
  4020b0:	4b09      	ldr	r3, [pc, #36]	; (4020d8 <OWWriteBit+0x64>)
  4020b2:	4798      	blx	r3
		mdelay(D);	//tREC 5-??us
  4020b4:	4b09      	ldr	r3, [pc, #36]	; (4020dc <OWWriteBit+0x68>)
  4020b6:	681b      	ldr	r3, [r3, #0]
  4020b8:	4618      	mov	r0, r3
  4020ba:	4b04      	ldr	r3, [pc, #16]	; (4020cc <OWWriteBit+0x58>)
  4020bc:	4798      	blx	r3
	}
}
  4020be:	3708      	adds	r7, #8
  4020c0:	46bd      	mov	sp, r7
  4020c2:	bd80      	pop	{r7, pc}
  4020c4:	0040201d 	.word	0x0040201d
  4020c8:	204009dc 	.word	0x204009dc
  4020cc:	004028f1 	.word	0x004028f1
  4020d0:	00401e05 	.word	0x00401e05
  4020d4:	204009e4 	.word	0x204009e4
  4020d8:	00401e41 	.word	0x00401e41
  4020dc:	204009d4 	.word	0x204009d4

004020e0 <OWReadBit>:
//-----------------------------------------------------------------------------
// Read a bit from the 1-Wire bus and return it. Provide 10us recovery time.
//
int OWReadBit(unsigned char idx);
int OWReadBit(unsigned char idx)
{
  4020e0:	b580      	push	{r7, lr}
  4020e2:	b084      	sub	sp, #16
  4020e4:	af00      	add	r7, sp, #0
  4020e6:	4603      	mov	r3, r0
  4020e8:	71fb      	strb	r3, [r7, #7]
#if 0
	drive_DQ_low(idx);
//14may15 take this out entirely, we can't seem to control this precisely enough	cpu_delay_us(A, EC_CPU_CLOCK_100MHZ	//tRL 5-15us
	release_the_bus(idx);
#endif
	drive_DQ_low_and_release_the_bus(idx);
  4020ea:	79fb      	ldrb	r3, [r7, #7]
  4020ec:	4618      	mov	r0, r3
  4020ee:	4b0b      	ldr	r3, [pc, #44]	; (40211c <OWReadBit+0x3c>)
  4020f0:	4798      	blx	r3
	
	mdelay(E);	//tMSR 5-15us
  4020f2:	4b0b      	ldr	r3, [pc, #44]	; (402120 <OWReadBit+0x40>)
  4020f4:	681b      	ldr	r3, [r3, #0]
  4020f6:	4618      	mov	r0, r3
  4020f8:	4b0a      	ldr	r3, [pc, #40]	; (402124 <OWReadBit+0x44>)
  4020fa:	4798      	blx	r3
	result = sample_line(idx);
  4020fc:	79fb      	ldrb	r3, [r7, #7]
  4020fe:	4618      	mov	r0, r3
  402100:	4b09      	ldr	r3, [pc, #36]	; (402128 <OWReadBit+0x48>)
  402102:	4798      	blx	r3
  402104:	4603      	mov	r3, r0
  402106:	60fb      	str	r3, [r7, #12]
	mdelay(F); // Complete the time slot and 10us recovery tREC 5+us
  402108:	4b08      	ldr	r3, [pc, #32]	; (40212c <OWReadBit+0x4c>)
  40210a:	681b      	ldr	r3, [r3, #0]
  40210c:	4618      	mov	r0, r3
  40210e:	4b05      	ldr	r3, [pc, #20]	; (402124 <OWReadBit+0x44>)
  402110:	4798      	blx	r3

	return result;
  402112:	68fb      	ldr	r3, [r7, #12]
}
  402114:	4618      	mov	r0, r3
  402116:	3710      	adds	r7, #16
  402118:	46bd      	mov	sp, r7
  40211a:	bd80      	pop	{r7, pc}
  40211c:	0040201d 	.word	0x0040201d
  402120:	204009f0 	.word	0x204009f0
  402124:	004028f1 	.word	0x004028f1
  402128:	00401ea1 	.word	0x00401ea1
  40212c:	204009f8 	.word	0x204009f8

00402130 <OWWriteByte>:

//-----------------------------------------------------------------------------
// Write 1-Wire data byte
//
void OWWriteByte(unsigned char idx, int data)
{
  402130:	b580      	push	{r7, lr}
  402132:	b084      	sub	sp, #16
  402134:	af00      	add	r7, sp, #0
  402136:	4603      	mov	r3, r0
  402138:	6039      	str	r1, [r7, #0]
  40213a:	71fb      	strb	r3, [r7, #7]
	int loop;

	// Loop to write each bit in the byte, LS-bit first
	for (loop = 0; loop < 8; loop++)
  40213c:	2300      	movs	r3, #0
  40213e:	60fb      	str	r3, [r7, #12]
  402140:	e00d      	b.n	40215e <OWWriteByte+0x2e>
	{
		OWWriteBit(idx, data & 0x01);
  402142:	683b      	ldr	r3, [r7, #0]
  402144:	f003 0301 	and.w	r3, r3, #1
  402148:	79fa      	ldrb	r2, [r7, #7]
  40214a:	4610      	mov	r0, r2
  40214c:	4619      	mov	r1, r3
  40214e:	4b07      	ldr	r3, [pc, #28]	; (40216c <OWWriteByte+0x3c>)
  402150:	4798      	blx	r3

		// shift the data byte for the next bit
		data >>= 1;
  402152:	683b      	ldr	r3, [r7, #0]
  402154:	105b      	asrs	r3, r3, #1
  402156:	603b      	str	r3, [r7, #0]
void OWWriteByte(unsigned char idx, int data)
{
	int loop;

	// Loop to write each bit in the byte, LS-bit first
	for (loop = 0; loop < 8; loop++)
  402158:	68fb      	ldr	r3, [r7, #12]
  40215a:	3301      	adds	r3, #1
  40215c:	60fb      	str	r3, [r7, #12]
  40215e:	68fb      	ldr	r3, [r7, #12]
  402160:	2b07      	cmp	r3, #7
  402162:	ddee      	ble.n	402142 <OWWriteByte+0x12>
		OWWriteBit(idx, data & 0x01);

		// shift the data byte for the next bit
		data >>= 1;
	}
}
  402164:	3710      	adds	r7, #16
  402166:	46bd      	mov	sp, r7
  402168:	bd80      	pop	{r7, pc}
  40216a:	bf00      	nop
  40216c:	00402075 	.word	0x00402075

00402170 <OWReadByte>:

//-----------------------------------------------------------------------------
// Read 1-Wire data byte and return it
//
int OWReadByte(unsigned char idx)
{
  402170:	b580      	push	{r7, lr}
  402172:	b084      	sub	sp, #16
  402174:	af00      	add	r7, sp, #0
  402176:	4603      	mov	r3, r0
  402178:	71fb      	strb	r3, [r7, #7]
	int loop, result=0;
  40217a:	2300      	movs	r3, #0
  40217c:	60bb      	str	r3, [r7, #8]

	for (loop = 0; loop < 8; loop++)
  40217e:	2300      	movs	r3, #0
  402180:	60fb      	str	r3, [r7, #12]
  402182:	e010      	b.n	4021a6 <OWReadByte+0x36>
	{
		// shift the result to get it ready for the next bit
		result >>= 1;
  402184:	68bb      	ldr	r3, [r7, #8]
  402186:	105b      	asrs	r3, r3, #1
  402188:	60bb      	str	r3, [r7, #8]

		// if result is one, then set MS bit
		if (OWReadBit(idx))
  40218a:	79fb      	ldrb	r3, [r7, #7]
  40218c:	4618      	mov	r0, r3
  40218e:	4b0a      	ldr	r3, [pc, #40]	; (4021b8 <OWReadByte+0x48>)
  402190:	4798      	blx	r3
  402192:	4603      	mov	r3, r0
  402194:	2b00      	cmp	r3, #0
  402196:	d003      	beq.n	4021a0 <OWReadByte+0x30>
		result |= 0x80;
  402198:	68bb      	ldr	r3, [r7, #8]
  40219a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  40219e:	60bb      	str	r3, [r7, #8]
//
int OWReadByte(unsigned char idx)
{
	int loop, result=0;

	for (loop = 0; loop < 8; loop++)
  4021a0:	68fb      	ldr	r3, [r7, #12]
  4021a2:	3301      	adds	r3, #1
  4021a4:	60fb      	str	r3, [r7, #12]
  4021a6:	68fb      	ldr	r3, [r7, #12]
  4021a8:	2b07      	cmp	r3, #7
  4021aa:	ddeb      	ble.n	402184 <OWReadByte+0x14>

		// if result is one, then set MS bit
		if (OWReadBit(idx))
		result |= 0x80;
	}
	return result;
  4021ac:	68bb      	ldr	r3, [r7, #8]
}
  4021ae:	4618      	mov	r0, r3
  4021b0:	3710      	adds	r7, #16
  4021b2:	46bd      	mov	sp, r7
  4021b4:	bd80      	pop	{r7, pc}
  4021b6:	bf00      	nop
  4021b8:	004020e1 	.word	0x004020e1

004021bc <crc8_add>:
	return OWTouchReset(idx);
}

/* Polynomial ^8 + ^5 + ^4 + 1 */
unsigned char crc8_add(unsigned char acc, unsigned char byte)
{
  4021bc:	b480      	push	{r7}
  4021be:	b085      	sub	sp, #20
  4021c0:	af00      	add	r7, sp, #0
  4021c2:	4603      	mov	r3, r0
  4021c4:	460a      	mov	r2, r1
  4021c6:	71fb      	strb	r3, [r7, #7]
  4021c8:	4613      	mov	r3, r2
  4021ca:	71bb      	strb	r3, [r7, #6]
   int i;
   acc ^= byte;
  4021cc:	79fa      	ldrb	r2, [r7, #7]
  4021ce:	79bb      	ldrb	r3, [r7, #6]
  4021d0:	4053      	eors	r3, r2
  4021d2:	71fb      	strb	r3, [r7, #7]
   for(i = 0; i < 8; i++) 
  4021d4:	2300      	movs	r3, #0
  4021d6:	60fb      	str	r3, [r7, #12]
  4021d8:	e012      	b.n	402200 <crc8_add+0x44>
   {
		if(acc & 1) 
  4021da:	79fb      	ldrb	r3, [r7, #7]
  4021dc:	f003 0301 	and.w	r3, r3, #1
  4021e0:	2b00      	cmp	r3, #0
  4021e2:	d007      	beq.n	4021f4 <crc8_add+0x38>
		{
			acc = (acc >> 1) ^ 0x8c;
  4021e4:	79fb      	ldrb	r3, [r7, #7]
  4021e6:	085b      	lsrs	r3, r3, #1
  4021e8:	b2da      	uxtb	r2, r3
  4021ea:	f06f 0373 	mvn.w	r3, #115	; 0x73
  4021ee:	4053      	eors	r3, r2
  4021f0:	71fb      	strb	r3, [r7, #7]
  4021f2:	e002      	b.n	4021fa <crc8_add+0x3e>
		} 
		else 
		{
			acc >>= 1;
  4021f4:	79fb      	ldrb	r3, [r7, #7]
  4021f6:	085b      	lsrs	r3, r3, #1
  4021f8:	71fb      	strb	r3, [r7, #7]
/* Polynomial ^8 + ^5 + ^4 + 1 */
unsigned char crc8_add(unsigned char acc, unsigned char byte)
{
   int i;
   acc ^= byte;
   for(i = 0; i < 8; i++) 
  4021fa:	68fb      	ldr	r3, [r7, #12]
  4021fc:	3301      	adds	r3, #1
  4021fe:	60fb      	str	r3, [r7, #12]
  402200:	68fb      	ldr	r3, [r7, #12]
  402202:	2b07      	cmp	r3, #7
  402204:	dde9      	ble.n	4021da <crc8_add+0x1e>
		else 
		{
			acc >>= 1;
	    }
   }
   return acc;
  402206:	79fb      	ldrb	r3, [r7, #7]
}
  402208:	4618      	mov	r0, r3
  40220a:	3714      	adds	r7, #20
  40220c:	46bd      	mov	sp, r7
  40220e:	f85d 7b04 	ldr.w	r7, [sp], #4
  402212:	4770      	bx	lr

00402214 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  402214:	b480      	push	{r7}
  402216:	b083      	sub	sp, #12
  402218:	af00      	add	r7, sp, #0
  40221a:	4603      	mov	r3, r0
  40221c:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  40221e:	4908      	ldr	r1, [pc, #32]	; (402240 <NVIC_EnableIRQ+0x2c>)
  402220:	f997 3007 	ldrsb.w	r3, [r7, #7]
  402224:	095b      	lsrs	r3, r3, #5
  402226:	79fa      	ldrb	r2, [r7, #7]
  402228:	f002 021f 	and.w	r2, r2, #31
  40222c:	2001      	movs	r0, #1
  40222e:	fa00 f202 	lsl.w	r2, r0, r2
  402232:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  402236:	370c      	adds	r7, #12
  402238:	46bd      	mov	sp, r7
  40223a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40223e:	4770      	bx	lr
  402240:	e000e100 	.word	0xe000e100

00402244 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  402244:	b480      	push	{r7}
  402246:	b083      	sub	sp, #12
  402248:	af00      	add	r7, sp, #0
  40224a:	4603      	mov	r3, r0
  40224c:	6039      	str	r1, [r7, #0]
  40224e:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
  402250:	f997 3007 	ldrsb.w	r3, [r7, #7]
  402254:	2b00      	cmp	r3, #0
  402256:	da0b      	bge.n	402270 <NVIC_SetPriority+0x2c>
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  402258:	490d      	ldr	r1, [pc, #52]	; (402290 <NVIC_SetPriority+0x4c>)
  40225a:	79fb      	ldrb	r3, [r7, #7]
  40225c:	f003 030f 	and.w	r3, r3, #15
  402260:	3b04      	subs	r3, #4
  402262:	683a      	ldr	r2, [r7, #0]
  402264:	b2d2      	uxtb	r2, r2
  402266:	0152      	lsls	r2, r2, #5
  402268:	b2d2      	uxtb	r2, r2
  40226a:	440b      	add	r3, r1
  40226c:	761a      	strb	r2, [r3, #24]
  40226e:	e009      	b.n	402284 <NVIC_SetPriority+0x40>
  else {
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  402270:	4908      	ldr	r1, [pc, #32]	; (402294 <NVIC_SetPriority+0x50>)
  402272:	f997 3007 	ldrsb.w	r3, [r7, #7]
  402276:	683a      	ldr	r2, [r7, #0]
  402278:	b2d2      	uxtb	r2, r2
  40227a:	0152      	lsls	r2, r2, #5
  40227c:	b2d2      	uxtb	r2, r2
  40227e:	440b      	add	r3, r1
  402280:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
  402284:	370c      	adds	r7, #12
  402286:	46bd      	mov	sp, r7
  402288:	f85d 7b04 	ldr.w	r7, [sp], #4
  40228c:	4770      	bx	lr
  40228e:	bf00      	nop
  402290:	e000ed00 	.word	0xe000ed00
  402294:	e000e100 	.word	0xe000e100

00402298 <SysTick_Config>:
    function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  402298:	b580      	push	{r7, lr}
  40229a:	b082      	sub	sp, #8
  40229c:	af00      	add	r7, sp, #0
  40229e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
  4022a0:	687b      	ldr	r3, [r7, #4]
  4022a2:	3b01      	subs	r3, #1
  4022a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
  4022a8:	d301      	bcc.n	4022ae <SysTick_Config+0x16>
  4022aa:	2301      	movs	r3, #1
  4022ac:	e00f      	b.n	4022ce <SysTick_Config+0x36>

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
  4022ae:	4a0a      	ldr	r2, [pc, #40]	; (4022d8 <SysTick_Config+0x40>)
  4022b0:	687b      	ldr	r3, [r7, #4]
  4022b2:	3b01      	subs	r3, #1
  4022b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  4022b6:	f04f 30ff 	mov.w	r0, #4294967295
  4022ba:	2107      	movs	r1, #7
  4022bc:	4b07      	ldr	r3, [pc, #28]	; (4022dc <SysTick_Config+0x44>)
  4022be:	4798      	blx	r3
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
  4022c0:	4b05      	ldr	r3, [pc, #20]	; (4022d8 <SysTick_Config+0x40>)
  4022c2:	2200      	movs	r2, #0
  4022c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
  4022c6:	4b04      	ldr	r3, [pc, #16]	; (4022d8 <SysTick_Config+0x40>)
  4022c8:	2207      	movs	r2, #7
  4022ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
  4022cc:	2300      	movs	r3, #0
}
  4022ce:	4618      	mov	r0, r3
  4022d0:	3708      	adds	r7, #8
  4022d2:	46bd      	mov	sp, r7
  4022d4:	bd80      	pop	{r7, pc}
  4022d6:	bf00      	nop
  4022d8:	e000e010 	.word	0xe000e010
  4022dc:	00402245 	.word	0x00402245

004022e0 <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  4022e0:	b480      	push	{r7}
  4022e2:	b083      	sub	sp, #12
  4022e4:	af00      	add	r7, sp, #0
  4022e6:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  4022e8:	687b      	ldr	r3, [r7, #4]
  4022ea:	2b07      	cmp	r3, #7
  4022ec:	d825      	bhi.n	40233a <osc_get_rate+0x5a>
  4022ee:	a201      	add	r2, pc, #4	; (adr r2, 4022f4 <osc_get_rate+0x14>)
  4022f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4022f4:	00402315 	.word	0x00402315
  4022f8:	0040231b 	.word	0x0040231b
  4022fc:	00402321 	.word	0x00402321
  402300:	00402327 	.word	0x00402327
  402304:	0040232b 	.word	0x0040232b
  402308:	0040232f 	.word	0x0040232f
  40230c:	00402333 	.word	0x00402333
  402310:	00402337 	.word	0x00402337
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  402314:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  402318:	e010      	b.n	40233c <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  40231a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  40231e:	e00d      	b.n	40233c <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  402320:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  402324:	e00a      	b.n	40233c <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  402326:	4b08      	ldr	r3, [pc, #32]	; (402348 <osc_get_rate+0x68>)
  402328:	e008      	b.n	40233c <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  40232a:	4b08      	ldr	r3, [pc, #32]	; (40234c <osc_get_rate+0x6c>)
  40232c:	e006      	b.n	40233c <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  40232e:	4b08      	ldr	r3, [pc, #32]	; (402350 <osc_get_rate+0x70>)
  402330:	e004      	b.n	40233c <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  402332:	4b08      	ldr	r3, [pc, #32]	; (402354 <osc_get_rate+0x74>)
  402334:	e002      	b.n	40233c <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  402336:	4b06      	ldr	r3, [pc, #24]	; (402350 <osc_get_rate+0x70>)
  402338:	e000      	b.n	40233c <osc_get_rate+0x5c>
	}

	return 0;
  40233a:	2300      	movs	r3, #0
}
  40233c:	4618      	mov	r0, r3
  40233e:	370c      	adds	r7, #12
  402340:	46bd      	mov	sp, r7
  402342:	f85d 7b04 	ldr.w	r7, [sp], #4
  402346:	4770      	bx	lr
  402348:	003d0900 	.word	0x003d0900
  40234c:	007a1200 	.word	0x007a1200
  402350:	00b71b00 	.word	0x00b71b00
  402354:	00f42400 	.word	0x00f42400

00402358 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  402358:	b580      	push	{r7, lr}
  40235a:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  40235c:	2006      	movs	r0, #6
  40235e:	4b05      	ldr	r3, [pc, #20]	; (402374 <sysclk_get_main_hz+0x1c>)
  402360:	4798      	blx	r3
  402362:	4602      	mov	r2, r0
  402364:	4613      	mov	r3, r2
  402366:	009b      	lsls	r3, r3, #2
  402368:	4413      	add	r3, r2
  40236a:	009a      	lsls	r2, r3, #2
  40236c:	4413      	add	r3, r2
  40236e:	089b      	lsrs	r3, r3, #2
#endif
	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  402370:	4618      	mov	r0, r3
  402372:	bd80      	pop	{r7, pc}
  402374:	004022e1 	.word	0x004022e1

00402378 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
  402378:	b580      	push	{r7, lr}
  40237a:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  40237c:	4b02      	ldr	r3, [pc, #8]	; (402388 <sysclk_get_cpu_hz+0x10>)
  40237e:	4798      	blx	r3
  402380:	4603      	mov	r3, r0
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  402382:	4618      	mov	r0, r3
  402384:	bd80      	pop	{r7, pc}
  402386:	bf00      	nop
  402388:	00402359 	.word	0x00402359

0040238c <sysclk_get_peripheral_hz>:
 * \brief Retrieves the current rate in Hz of the peripheral clocks.
 *
 * \return Frequency of the peripheral clocks, in Hz.
 */
static inline uint32_t sysclk_get_peripheral_hz(void)
{
  40238c:	b580      	push	{r7, lr}
  40238e:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  402390:	4b02      	ldr	r3, [pc, #8]	; (40239c <sysclk_get_peripheral_hz+0x10>)
  402392:	4798      	blx	r3
  402394:	4603      	mov	r3, r0
		(((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 : (1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos))) * CONFIG_SYSCLK_DIV);
}
  402396:	4618      	mov	r0, r3
  402398:	bd80      	pop	{r7, pc}
  40239a:	bf00      	nop
  40239c:	00402359 	.word	0x00402359

004023a0 <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
  4023a0:	b580      	push	{r7, lr}
  4023a2:	b082      	sub	sp, #8
  4023a4:	af00      	add	r7, sp, #0
  4023a6:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  4023a8:	6878      	ldr	r0, [r7, #4]
  4023aa:	4b02      	ldr	r3, [pc, #8]	; (4023b4 <sysclk_enable_peripheral_clock+0x14>)
  4023ac:	4798      	blx	r3
}
  4023ae:	3708      	adds	r7, #8
  4023b0:	46bd      	mov	sp, r7
  4023b2:	bd80      	pop	{r7, pc}
  4023b4:	00400f39 	.word	0x00400f39

004023b8 <ioport_set_pin_dir>:
 * \param pin IOPORT pin to configure
 * \param dir Direction to set for the specified pin (\ref ioport_direction)
 */
static inline void ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
  4023b8:	b480      	push	{r7}
  4023ba:	b08d      	sub	sp, #52	; 0x34
  4023bc:	af00      	add	r7, sp, #0
  4023be:	6078      	str	r0, [r7, #4]
  4023c0:	460b      	mov	r3, r1
  4023c2:	70fb      	strb	r3, [r7, #3]
  4023c4:	687b      	ldr	r3, [r7, #4]
  4023c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  4023c8:	78fb      	ldrb	r3, [r7, #3]
  4023ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  4023ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4023d0:	627b      	str	r3, [r7, #36]	; 0x24
  4023d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4023d4:	623b      	str	r3, [r7, #32]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  4023d6:	6a3b      	ldr	r3, [r7, #32]
  4023d8:	095b      	lsrs	r3, r3, #5
  4023da:	61fb      	str	r3, [r7, #28]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  4023dc:	69fa      	ldr	r2, [r7, #28]
  4023de:	4b17      	ldr	r3, [pc, #92]	; (40243c <ioport_set_pin_dir+0x84>)
  4023e0:	4413      	add	r3, r2
  4023e2:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);
  4023e4:	61bb      	str	r3, [r7, #24]

	if (dir == IOPORT_DIR_OUTPUT) {
  4023e6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  4023ea:	2b01      	cmp	r3, #1
  4023ec:	d109      	bne.n	402402 <ioport_set_pin_dir+0x4a>
  4023ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4023f0:	617b      	str	r3, [r7, #20]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  4023f2:	697b      	ldr	r3, [r7, #20]
  4023f4:	f003 031f 	and.w	r3, r3, #31
  4023f8:	2201      	movs	r2, #1
  4023fa:	409a      	lsls	r2, r3
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4023fc:	69bb      	ldr	r3, [r7, #24]
  4023fe:	611a      	str	r2, [r3, #16]
  402400:	e00c      	b.n	40241c <ioport_set_pin_dir+0x64>
	} else if (dir == IOPORT_DIR_INPUT) {
  402402:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  402406:	2b00      	cmp	r3, #0
  402408:	d108      	bne.n	40241c <ioport_set_pin_dir+0x64>
  40240a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  40240c:	613b      	str	r3, [r7, #16]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  40240e:	693b      	ldr	r3, [r7, #16]
  402410:	f003 031f 	and.w	r3, r3, #31
  402414:	2201      	movs	r2, #1
  402416:	409a      	lsls	r2, r3
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  402418:	69bb      	ldr	r3, [r7, #24]
  40241a:	615a      	str	r2, [r3, #20]
  40241c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  40241e:	60fb      	str	r3, [r7, #12]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  402420:	68fb      	ldr	r3, [r7, #12]
  402422:	f003 031f 	and.w	r3, r3, #31
  402426:	2201      	movs	r2, #1
  402428:	409a      	lsls	r2, r3
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40242a:	69bb      	ldr	r3, [r7, #24]
  40242c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	arch_ioport_set_pin_dir(pin, dir);
}
  402430:	3734      	adds	r7, #52	; 0x34
  402432:	46bd      	mov	sp, r7
  402434:	f85d 7b04 	ldr.w	r7, [sp], #4
  402438:	4770      	bx	lr
  40243a:	bf00      	nop
  40243c:	00200707 	.word	0x00200707

00402440 <ioport_set_pin_level>:
 *
 * \param pin IOPORT pin to configure
 * \param level Logical value of the pin
 */
static inline void ioport_set_pin_level(ioport_pin_t pin, bool level)
{
  402440:	b480      	push	{r7}
  402442:	b08b      	sub	sp, #44	; 0x2c
  402444:	af00      	add	r7, sp, #0
  402446:	6078      	str	r0, [r7, #4]
  402448:	460b      	mov	r3, r1
  40244a:	70fb      	strb	r3, [r7, #3]
  40244c:	687b      	ldr	r3, [r7, #4]
  40244e:	627b      	str	r3, [r7, #36]	; 0x24
  402450:	78fb      	ldrb	r3, [r7, #3]
  402452:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  402456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  402458:	61fb      	str	r3, [r7, #28]
  40245a:	69fb      	ldr	r3, [r7, #28]
  40245c:	61bb      	str	r3, [r7, #24]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  40245e:	69bb      	ldr	r3, [r7, #24]
  402460:	095b      	lsrs	r3, r3, #5
  402462:	617b      	str	r3, [r7, #20]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  402464:	697a      	ldr	r2, [r7, #20]
  402466:	4b10      	ldr	r3, [pc, #64]	; (4024a8 <ioport_set_pin_level+0x68>)
  402468:	4413      	add	r3, r2
  40246a:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);
  40246c:	613b      	str	r3, [r7, #16]

	if (level) {
  40246e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
  402472:	2b00      	cmp	r3, #0
  402474:	d009      	beq.n	40248a <ioport_set_pin_level+0x4a>
  402476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  402478:	60fb      	str	r3, [r7, #12]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  40247a:	68fb      	ldr	r3, [r7, #12]
  40247c:	f003 031f 	and.w	r3, r3, #31
  402480:	2201      	movs	r2, #1
  402482:	409a      	lsls	r2, r3
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  402484:	693b      	ldr	r3, [r7, #16]
  402486:	631a      	str	r2, [r3, #48]	; 0x30
  402488:	e008      	b.n	40249c <ioport_set_pin_level+0x5c>
  40248a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40248c:	60bb      	str	r3, [r7, #8]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  40248e:	68bb      	ldr	r3, [r7, #8]
  402490:	f003 031f 	and.w	r3, r3, #31
  402494:	2201      	movs	r2, #1
  402496:	409a      	lsls	r2, r3
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  402498:	693b      	ldr	r3, [r7, #16]
  40249a:	635a      	str	r2, [r3, #52]	; 0x34
	arch_ioport_set_pin_level(pin, level);
}
  40249c:	372c      	adds	r7, #44	; 0x2c
  40249e:	46bd      	mov	sp, r7
  4024a0:	f85d 7b04 	ldr.w	r7, [sp], #4
  4024a4:	4770      	bx	lr
  4024a6:	bf00      	nop
  4024a8:	00200707 	.word	0x00200707

004024ac <ioport_toggle_pin_level>:
 * an output.
 *
 * \param pin IOPORT pin to toggle
 */
static inline void ioport_toggle_pin_level(ioport_pin_t pin)
{
  4024ac:	b480      	push	{r7}
  4024ae:	b08b      	sub	sp, #44	; 0x2c
  4024b0:	af00      	add	r7, sp, #0
  4024b2:	6078      	str	r0, [r7, #4]
  4024b4:	687b      	ldr	r3, [r7, #4]
  4024b6:	627b      	str	r3, [r7, #36]	; 0x24
  4024b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4024ba:	623b      	str	r3, [r7, #32]
  4024bc:	6a3b      	ldr	r3, [r7, #32]
  4024be:	61fb      	str	r3, [r7, #28]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  4024c0:	69fb      	ldr	r3, [r7, #28]
  4024c2:	095b      	lsrs	r3, r3, #5
  4024c4:	61bb      	str	r3, [r7, #24]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  4024c6:	69ba      	ldr	r2, [r7, #24]
  4024c8:	4b12      	ldr	r3, [pc, #72]	; (402514 <ioport_toggle_pin_level+0x68>)
  4024ca:	4413      	add	r3, r2
  4024cc:	025b      	lsls	r3, r3, #9
	return arch_ioport_port_to_base(port)->PIO_PDSR & mask;
}

__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	Pio *port = arch_ioport_pin_to_base(pin);
  4024ce:	617b      	str	r3, [r7, #20]
  4024d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4024d2:	613b      	str	r3, [r7, #16]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  4024d4:	693b      	ldr	r3, [r7, #16]
  4024d6:	f003 031f 	and.w	r3, r3, #31
  4024da:	2201      	movs	r2, #1
  4024dc:	fa02 f303 	lsl.w	r3, r2, r3
}

__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	Pio *port = arch_ioport_pin_to_base(pin);
	ioport_port_mask_t mask = arch_ioport_pin_to_mask(pin);
  4024e0:	60fb      	str	r3, [r7, #12]

	if (port->PIO_PDSR & arch_ioport_pin_to_mask(pin)) {
  4024e2:	697b      	ldr	r3, [r7, #20]
  4024e4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
  4024e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4024e8:	60bb      	str	r3, [r7, #8]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  4024ea:	68bb      	ldr	r3, [r7, #8]
  4024ec:	f003 031f 	and.w	r3, r3, #31
  4024f0:	2101      	movs	r1, #1
  4024f2:	fa01 f303 	lsl.w	r3, r1, r3
__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	Pio *port = arch_ioport_pin_to_base(pin);
	ioport_port_mask_t mask = arch_ioport_pin_to_mask(pin);

	if (port->PIO_PDSR & arch_ioport_pin_to_mask(pin)) {
  4024f6:	4013      	ands	r3, r2
  4024f8:	2b00      	cmp	r3, #0
  4024fa:	d003      	beq.n	402504 <ioport_toggle_pin_level+0x58>
		port->PIO_CODR = mask;
  4024fc:	697b      	ldr	r3, [r7, #20]
  4024fe:	68fa      	ldr	r2, [r7, #12]
  402500:	635a      	str	r2, [r3, #52]	; 0x34
  402502:	e002      	b.n	40250a <ioport_toggle_pin_level+0x5e>
	} else {
		port->PIO_SODR = mask;
  402504:	697b      	ldr	r3, [r7, #20]
  402506:	68fa      	ldr	r2, [r7, #12]
  402508:	631a      	str	r2, [r3, #48]	; 0x30
	arch_ioport_toggle_pin_level(pin);
}
  40250a:	372c      	adds	r7, #44	; 0x2c
  40250c:	46bd      	mov	sp, r7
  40250e:	f85d 7b04 	ldr.w	r7, [sp], #4
  402512:	4770      	bx	lr
  402514:	00200707 	.word	0x00200707

00402518 <usart_serial_init>:
 * \param opt      Options needed to set up RS232 communication (see
 * \ref usart_options_t).
 */
static inline void usart_serial_init(usart_if p_usart,
		usart_serial_options_t *opt)
{
  402518:	b580      	push	{r7, lr}
  40251a:	b08c      	sub	sp, #48	; 0x30
  40251c:	af00      	add	r7, sp, #0
  40251e:	6078      	str	r0, [r7, #4]
  402520:	6039      	str	r1, [r7, #0]
#if ((!SAM4L) && (!SAMG55))
	sam_uart_opt_t uart_settings;
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
  402522:	4b48      	ldr	r3, [pc, #288]	; (402644 <usart_serial_init+0x12c>)
  402524:	4798      	blx	r3
  402526:	4603      	mov	r3, r0
  402528:	627b      	str	r3, [r7, #36]	; 0x24
	uart_settings.ul_baudrate = opt->baudrate;
  40252a:	683b      	ldr	r3, [r7, #0]
  40252c:	681b      	ldr	r3, [r3, #0]
  40252e:	62bb      	str	r3, [r7, #40]	; 0x28
	uart_settings.ul_mode = opt->paritytype;
  402530:	683b      	ldr	r3, [r7, #0]
  402532:	689b      	ldr	r3, [r3, #8]
  402534:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif

	sam_usart_opt_t usart_settings;
	usart_settings.baudrate = opt->baudrate;
  402536:	683b      	ldr	r3, [r7, #0]
  402538:	681b      	ldr	r3, [r3, #0]
  40253a:	60fb      	str	r3, [r7, #12]
	usart_settings.char_length = opt->charlength;
  40253c:	683b      	ldr	r3, [r7, #0]
  40253e:	685b      	ldr	r3, [r3, #4]
  402540:	613b      	str	r3, [r7, #16]
	usart_settings.parity_type = opt->paritytype;
  402542:	683b      	ldr	r3, [r7, #0]
  402544:	689b      	ldr	r3, [r3, #8]
  402546:	617b      	str	r3, [r7, #20]
	usart_settings.stop_bits= opt->stopbits;
  402548:	683b      	ldr	r3, [r7, #0]
  40254a:	68db      	ldr	r3, [r3, #12]
  40254c:	61bb      	str	r3, [r7, #24]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
  40254e:	2300      	movs	r3, #0
  402550:	61fb      	str	r3, [r7, #28]
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  402552:	687b      	ldr	r3, [r7, #4]
  402554:	4a3c      	ldr	r2, [pc, #240]	; (402648 <usart_serial_init+0x130>)
  402556:	4293      	cmp	r3, r2
  402558:	d108      	bne.n	40256c <usart_serial_init+0x54>
		sysclk_enable_peripheral_clock(ID_UART0);
  40255a:	2007      	movs	r0, #7
  40255c:	4b3b      	ldr	r3, [pc, #236]	; (40264c <usart_serial_init+0x134>)
  40255e:	4798      	blx	r3
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
  402560:	f107 0324 	add.w	r3, r7, #36	; 0x24
  402564:	6878      	ldr	r0, [r7, #4]
  402566:	4619      	mov	r1, r3
  402568:	4b39      	ldr	r3, [pc, #228]	; (402650 <usart_serial_init+0x138>)
  40256a:	4798      	blx	r3
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  40256c:	687b      	ldr	r3, [r7, #4]
  40256e:	4a39      	ldr	r2, [pc, #228]	; (402654 <usart_serial_init+0x13c>)
  402570:	4293      	cmp	r3, r2
  402572:	d108      	bne.n	402586 <usart_serial_init+0x6e>
		sysclk_enable_peripheral_clock(ID_UART1);
  402574:	2008      	movs	r0, #8
  402576:	4b35      	ldr	r3, [pc, #212]	; (40264c <usart_serial_init+0x134>)
  402578:	4798      	blx	r3
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
  40257a:	f107 0324 	add.w	r3, r7, #36	; 0x24
  40257e:	6878      	ldr	r0, [r7, #4]
  402580:	4619      	mov	r1, r3
  402582:	4b33      	ldr	r3, [pc, #204]	; (402650 <usart_serial_init+0x138>)
  402584:	4798      	blx	r3
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  402586:	687b      	ldr	r3, [r7, #4]
  402588:	4a33      	ldr	r2, [pc, #204]	; (402658 <usart_serial_init+0x140>)
  40258a:	4293      	cmp	r3, r2
  40258c:	d108      	bne.n	4025a0 <usart_serial_init+0x88>
		sysclk_enable_peripheral_clock(ID_UART2);
  40258e:	202c      	movs	r0, #44	; 0x2c
  402590:	4b2e      	ldr	r3, [pc, #184]	; (40264c <usart_serial_init+0x134>)
  402592:	4798      	blx	r3
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
  402594:	f107 0324 	add.w	r3, r7, #36	; 0x24
  402598:	6878      	ldr	r0, [r7, #4]
  40259a:	4619      	mov	r1, r3
  40259c:	4b2c      	ldr	r3, [pc, #176]	; (402650 <usart_serial_init+0x138>)
  40259e:	4798      	blx	r3
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  4025a0:	687b      	ldr	r3, [r7, #4]
  4025a2:	4a2e      	ldr	r2, [pc, #184]	; (40265c <usart_serial_init+0x144>)
  4025a4:	4293      	cmp	r3, r2
  4025a6:	d108      	bne.n	4025ba <usart_serial_init+0xa2>
		sysclk_enable_peripheral_clock(ID_UART3);
  4025a8:	202d      	movs	r0, #45	; 0x2d
  4025aa:	4b28      	ldr	r3, [pc, #160]	; (40264c <usart_serial_init+0x134>)
  4025ac:	4798      	blx	r3
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
  4025ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
  4025b2:	6878      	ldr	r0, [r7, #4]
  4025b4:	4619      	mov	r1, r3
  4025b6:	4b26      	ldr	r3, [pc, #152]	; (402650 <usart_serial_init+0x138>)
  4025b8:	4798      	blx	r3
		usart_enable_tx(p_usart);
		usart_enable_rx(p_usart);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  4025ba:	687b      	ldr	r3, [r7, #4]
  4025bc:	4a28      	ldr	r2, [pc, #160]	; (402660 <usart_serial_init+0x148>)
  4025be:	4293      	cmp	r3, r2
  4025c0:	d111      	bne.n	4025e6 <usart_serial_init+0xce>
#if (!SAM4L)
#if (SAMG55)
		flexcom_enable(FLEXCOM0);
		flexcom_set_opmode(FLEXCOM0, FLEXCOM_USART);
#else
		sysclk_enable_peripheral_clock(ID_USART0);
  4025c2:	200d      	movs	r0, #13
  4025c4:	4b21      	ldr	r3, [pc, #132]	; (40264c <usart_serial_init+0x134>)
  4025c6:	4798      	blx	r3
#endif
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
  4025c8:	4b1e      	ldr	r3, [pc, #120]	; (402644 <usart_serial_init+0x12c>)
  4025ca:	4798      	blx	r3
  4025cc:	4602      	mov	r2, r0
  4025ce:	f107 030c 	add.w	r3, r7, #12
  4025d2:	6878      	ldr	r0, [r7, #4]
  4025d4:	4619      	mov	r1, r3
  4025d6:	4b23      	ldr	r3, [pc, #140]	; (402664 <usart_serial_init+0x14c>)
  4025d8:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
  4025da:	6878      	ldr	r0, [r7, #4]
  4025dc:	4b22      	ldr	r3, [pc, #136]	; (402668 <usart_serial_init+0x150>)
  4025de:	4798      	blx	r3
		usart_enable_rx(p_usart);
  4025e0:	6878      	ldr	r0, [r7, #4]
  4025e2:	4b22      	ldr	r3, [pc, #136]	; (40266c <usart_serial_init+0x154>)
  4025e4:	4798      	blx	r3
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  4025e6:	687b      	ldr	r3, [r7, #4]
  4025e8:	4a21      	ldr	r2, [pc, #132]	; (402670 <usart_serial_init+0x158>)
  4025ea:	4293      	cmp	r3, r2
  4025ec:	d111      	bne.n	402612 <usart_serial_init+0xfa>
#if (!SAM4L)
#if (SAMG55)
		flexcom_enable(FLEXCOM1);
		flexcom_set_opmode(FLEXCOM1, FLEXCOM_USART);
#else
		sysclk_enable_peripheral_clock(ID_USART1);
  4025ee:	200e      	movs	r0, #14
  4025f0:	4b16      	ldr	r3, [pc, #88]	; (40264c <usart_serial_init+0x134>)
  4025f2:	4798      	blx	r3
#endif
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
  4025f4:	4b13      	ldr	r3, [pc, #76]	; (402644 <usart_serial_init+0x12c>)
  4025f6:	4798      	blx	r3
  4025f8:	4602      	mov	r2, r0
  4025fa:	f107 030c 	add.w	r3, r7, #12
  4025fe:	6878      	ldr	r0, [r7, #4]
  402600:	4619      	mov	r1, r3
  402602:	4b18      	ldr	r3, [pc, #96]	; (402664 <usart_serial_init+0x14c>)
  402604:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
  402606:	6878      	ldr	r0, [r7, #4]
  402608:	4b17      	ldr	r3, [pc, #92]	; (402668 <usart_serial_init+0x150>)
  40260a:	4798      	blx	r3
		usart_enable_rx(p_usart);
  40260c:	6878      	ldr	r0, [r7, #4]
  40260e:	4b17      	ldr	r3, [pc, #92]	; (40266c <usart_serial_init+0x154>)
  402610:	4798      	blx	r3
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  402612:	687b      	ldr	r3, [r7, #4]
  402614:	4a17      	ldr	r2, [pc, #92]	; (402674 <usart_serial_init+0x15c>)
  402616:	4293      	cmp	r3, r2
  402618:	d111      	bne.n	40263e <usart_serial_init+0x126>
#if (!SAM4L)
#if (SAMG55)
		flexcom_enable(FLEXCOM2);
		flexcom_set_opmode(FLEXCOM2, FLEXCOM_USART);
#else
		sysclk_enable_peripheral_clock(ID_USART2);
  40261a:	200f      	movs	r0, #15
  40261c:	4b0b      	ldr	r3, [pc, #44]	; (40264c <usart_serial_init+0x134>)
  40261e:	4798      	blx	r3
#endif
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
  402620:	4b08      	ldr	r3, [pc, #32]	; (402644 <usart_serial_init+0x12c>)
  402622:	4798      	blx	r3
  402624:	4602      	mov	r2, r0
  402626:	f107 030c 	add.w	r3, r7, #12
  40262a:	6878      	ldr	r0, [r7, #4]
  40262c:	4619      	mov	r1, r3
  40262e:	4b0d      	ldr	r3, [pc, #52]	; (402664 <usart_serial_init+0x14c>)
  402630:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
  402632:	6878      	ldr	r0, [r7, #4]
  402634:	4b0c      	ldr	r3, [pc, #48]	; (402668 <usart_serial_init+0x150>)
  402636:	4798      	blx	r3
		usart_enable_rx(p_usart);
  402638:	6878      	ldr	r0, [r7, #4]
  40263a:	4b0c      	ldr	r3, [pc, #48]	; (40266c <usart_serial_init+0x154>)
  40263c:	4798      	blx	r3
	}
# endif

#endif /* ifdef USART */

}
  40263e:	3730      	adds	r7, #48	; 0x30
  402640:	46bd      	mov	sp, r7
  402642:	bd80      	pop	{r7, pc}
  402644:	0040238d 	.word	0x0040238d
  402648:	400e0800 	.word	0x400e0800
  40264c:	004023a1 	.word	0x004023a1
  402650:	004012e5 	.word	0x004012e5
  402654:	400e0a00 	.word	0x400e0a00
  402658:	400e1a00 	.word	0x400e1a00
  40265c:	400e1c00 	.word	0x400e1c00
  402660:	40024000 	.word	0x40024000
  402664:	00401481 	.word	0x00401481
  402668:	00401505 	.word	0x00401505
  40266c:	00401551 	.word	0x00401551
  402670:	40028000 	.word	0x40028000
  402674:	4002c000 	.word	0x4002c000

00402678 <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
  402678:	b580      	push	{r7, lr}
  40267a:	b082      	sub	sp, #8
  40267c:	af00      	add	r7, sp, #0
  40267e:	6078      	str	r0, [r7, #4]
  402680:	460b      	mov	r3, r1
  402682:	70fb      	strb	r3, [r7, #3]
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  402684:	687b      	ldr	r3, [r7, #4]
  402686:	4a36      	ldr	r2, [pc, #216]	; (402760 <usart_serial_putchar+0xe8>)
  402688:	4293      	cmp	r3, r2
  40268a:	d10a      	bne.n	4026a2 <usart_serial_putchar+0x2a>
		while (uart_write((Uart*)p_usart, c)!=0);
  40268c:	bf00      	nop
  40268e:	78fb      	ldrb	r3, [r7, #3]
  402690:	6878      	ldr	r0, [r7, #4]
  402692:	4619      	mov	r1, r3
  402694:	4b33      	ldr	r3, [pc, #204]	; (402764 <usart_serial_putchar+0xec>)
  402696:	4798      	blx	r3
  402698:	4603      	mov	r3, r0
  40269a:	2b00      	cmp	r3, #0
  40269c:	d1f7      	bne.n	40268e <usart_serial_putchar+0x16>
		return 1;
  40269e:	2301      	movs	r3, #1
  4026a0:	e05a      	b.n	402758 <usart_serial_putchar+0xe0>
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  4026a2:	687b      	ldr	r3, [r7, #4]
  4026a4:	4a30      	ldr	r2, [pc, #192]	; (402768 <usart_serial_putchar+0xf0>)
  4026a6:	4293      	cmp	r3, r2
  4026a8:	d10a      	bne.n	4026c0 <usart_serial_putchar+0x48>
		while (uart_write((Uart*)p_usart, c)!=0);
  4026aa:	bf00      	nop
  4026ac:	78fb      	ldrb	r3, [r7, #3]
  4026ae:	6878      	ldr	r0, [r7, #4]
  4026b0:	4619      	mov	r1, r3
  4026b2:	4b2c      	ldr	r3, [pc, #176]	; (402764 <usart_serial_putchar+0xec>)
  4026b4:	4798      	blx	r3
  4026b6:	4603      	mov	r3, r0
  4026b8:	2b00      	cmp	r3, #0
  4026ba:	d1f7      	bne.n	4026ac <usart_serial_putchar+0x34>
		return 1;
  4026bc:	2301      	movs	r3, #1
  4026be:	e04b      	b.n	402758 <usart_serial_putchar+0xe0>
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  4026c0:	687b      	ldr	r3, [r7, #4]
  4026c2:	4a2a      	ldr	r2, [pc, #168]	; (40276c <usart_serial_putchar+0xf4>)
  4026c4:	4293      	cmp	r3, r2
  4026c6:	d10a      	bne.n	4026de <usart_serial_putchar+0x66>
		while (uart_write((Uart*)p_usart, c)!=0);
  4026c8:	bf00      	nop
  4026ca:	78fb      	ldrb	r3, [r7, #3]
  4026cc:	6878      	ldr	r0, [r7, #4]
  4026ce:	4619      	mov	r1, r3
  4026d0:	4b24      	ldr	r3, [pc, #144]	; (402764 <usart_serial_putchar+0xec>)
  4026d2:	4798      	blx	r3
  4026d4:	4603      	mov	r3, r0
  4026d6:	2b00      	cmp	r3, #0
  4026d8:	d1f7      	bne.n	4026ca <usart_serial_putchar+0x52>
		return 1;
  4026da:	2301      	movs	r3, #1
  4026dc:	e03c      	b.n	402758 <usart_serial_putchar+0xe0>
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  4026de:	687b      	ldr	r3, [r7, #4]
  4026e0:	4a23      	ldr	r2, [pc, #140]	; (402770 <usart_serial_putchar+0xf8>)
  4026e2:	4293      	cmp	r3, r2
  4026e4:	d10a      	bne.n	4026fc <usart_serial_putchar+0x84>
		while (uart_write((Uart*)p_usart, c)!=0);
  4026e6:	bf00      	nop
  4026e8:	78fb      	ldrb	r3, [r7, #3]
  4026ea:	6878      	ldr	r0, [r7, #4]
  4026ec:	4619      	mov	r1, r3
  4026ee:	4b1d      	ldr	r3, [pc, #116]	; (402764 <usart_serial_putchar+0xec>)
  4026f0:	4798      	blx	r3
  4026f2:	4603      	mov	r3, r0
  4026f4:	2b00      	cmp	r3, #0
  4026f6:	d1f7      	bne.n	4026e8 <usart_serial_putchar+0x70>
		return 1;
  4026f8:	2301      	movs	r3, #1
  4026fa:	e02d      	b.n	402758 <usart_serial_putchar+0xe0>
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  4026fc:	687b      	ldr	r3, [r7, #4]
  4026fe:	4a1d      	ldr	r2, [pc, #116]	; (402774 <usart_serial_putchar+0xfc>)
  402700:	4293      	cmp	r3, r2
  402702:	d10a      	bne.n	40271a <usart_serial_putchar+0xa2>
		while (usart_write(p_usart, c)!=0);
  402704:	bf00      	nop
  402706:	78fb      	ldrb	r3, [r7, #3]
  402708:	6878      	ldr	r0, [r7, #4]
  40270a:	4619      	mov	r1, r3
  40270c:	4b1a      	ldr	r3, [pc, #104]	; (402778 <usart_serial_putchar+0x100>)
  40270e:	4798      	blx	r3
  402710:	4603      	mov	r3, r0
  402712:	2b00      	cmp	r3, #0
  402714:	d1f7      	bne.n	402706 <usart_serial_putchar+0x8e>
		return 1;
  402716:	2301      	movs	r3, #1
  402718:	e01e      	b.n	402758 <usart_serial_putchar+0xe0>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  40271a:	687b      	ldr	r3, [r7, #4]
  40271c:	4a17      	ldr	r2, [pc, #92]	; (40277c <usart_serial_putchar+0x104>)
  40271e:	4293      	cmp	r3, r2
  402720:	d10a      	bne.n	402738 <usart_serial_putchar+0xc0>
		while (usart_write(p_usart, c)!=0);
  402722:	bf00      	nop
  402724:	78fb      	ldrb	r3, [r7, #3]
  402726:	6878      	ldr	r0, [r7, #4]
  402728:	4619      	mov	r1, r3
  40272a:	4b13      	ldr	r3, [pc, #76]	; (402778 <usart_serial_putchar+0x100>)
  40272c:	4798      	blx	r3
  40272e:	4603      	mov	r3, r0
  402730:	2b00      	cmp	r3, #0
  402732:	d1f7      	bne.n	402724 <usart_serial_putchar+0xac>
		return 1;
  402734:	2301      	movs	r3, #1
  402736:	e00f      	b.n	402758 <usart_serial_putchar+0xe0>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  402738:	687b      	ldr	r3, [r7, #4]
  40273a:	4a11      	ldr	r2, [pc, #68]	; (402780 <usart_serial_putchar+0x108>)
  40273c:	4293      	cmp	r3, r2
  40273e:	d10a      	bne.n	402756 <usart_serial_putchar+0xde>
		while (usart_write(p_usart, c)!=0);
  402740:	bf00      	nop
  402742:	78fb      	ldrb	r3, [r7, #3]
  402744:	6878      	ldr	r0, [r7, #4]
  402746:	4619      	mov	r1, r3
  402748:	4b0b      	ldr	r3, [pc, #44]	; (402778 <usart_serial_putchar+0x100>)
  40274a:	4798      	blx	r3
  40274c:	4603      	mov	r3, r0
  40274e:	2b00      	cmp	r3, #0
  402750:	d1f7      	bne.n	402742 <usart_serial_putchar+0xca>
		return 1;
  402752:	2301      	movs	r3, #1
  402754:	e000      	b.n	402758 <usart_serial_putchar+0xe0>
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
  402756:	2300      	movs	r3, #0
}
  402758:	4618      	mov	r0, r3
  40275a:	3708      	adds	r7, #8
  40275c:	46bd      	mov	sp, r7
  40275e:	bd80      	pop	{r7, pc}
  402760:	400e0800 	.word	0x400e0800
  402764:	0040133d 	.word	0x0040133d
  402768:	400e0a00 	.word	0x400e0a00
  40276c:	400e1a00 	.word	0x400e1a00
  402770:	400e1c00 	.word	0x400e1c00
  402774:	40024000 	.word	0x40024000
  402778:	00401659 	.word	0x00401659
  40277c:	40028000 	.word	0x40028000
  402780:	4002c000 	.word	0x4002c000

00402784 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  402784:	b580      	push	{r7, lr}
  402786:	b084      	sub	sp, #16
  402788:	af00      	add	r7, sp, #0
  40278a:	6078      	str	r0, [r7, #4]
  40278c:	6039      	str	r1, [r7, #0]
	uint32_t val = 0;
  40278e:	2300      	movs	r3, #0
  402790:	60fb      	str	r3, [r7, #12]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  402792:	687b      	ldr	r3, [r7, #4]
  402794:	4a33      	ldr	r2, [pc, #204]	; (402864 <usart_serial_getchar+0xe0>)
  402796:	4293      	cmp	r3, r2
  402798:	d107      	bne.n	4027aa <usart_serial_getchar+0x26>
		while (uart_read((Uart*)p_usart, data));
  40279a:	bf00      	nop
  40279c:	6878      	ldr	r0, [r7, #4]
  40279e:	6839      	ldr	r1, [r7, #0]
  4027a0:	4b31      	ldr	r3, [pc, #196]	; (402868 <usart_serial_getchar+0xe4>)
  4027a2:	4798      	blx	r3
  4027a4:	4603      	mov	r3, r0
  4027a6:	2b00      	cmp	r3, #0
  4027a8:	d1f8      	bne.n	40279c <usart_serial_getchar+0x18>
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  4027aa:	687b      	ldr	r3, [r7, #4]
  4027ac:	4a2f      	ldr	r2, [pc, #188]	; (40286c <usart_serial_getchar+0xe8>)
  4027ae:	4293      	cmp	r3, r2
  4027b0:	d107      	bne.n	4027c2 <usart_serial_getchar+0x3e>
		while (uart_read((Uart*)p_usart, data));
  4027b2:	bf00      	nop
  4027b4:	6878      	ldr	r0, [r7, #4]
  4027b6:	6839      	ldr	r1, [r7, #0]
  4027b8:	4b2b      	ldr	r3, [pc, #172]	; (402868 <usart_serial_getchar+0xe4>)
  4027ba:	4798      	blx	r3
  4027bc:	4603      	mov	r3, r0
  4027be:	2b00      	cmp	r3, #0
  4027c0:	d1f8      	bne.n	4027b4 <usart_serial_getchar+0x30>
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  4027c2:	687b      	ldr	r3, [r7, #4]
  4027c4:	4a2a      	ldr	r2, [pc, #168]	; (402870 <usart_serial_getchar+0xec>)
  4027c6:	4293      	cmp	r3, r2
  4027c8:	d107      	bne.n	4027da <usart_serial_getchar+0x56>
		while (uart_read((Uart*)p_usart, data));
  4027ca:	bf00      	nop
  4027cc:	6878      	ldr	r0, [r7, #4]
  4027ce:	6839      	ldr	r1, [r7, #0]
  4027d0:	4b25      	ldr	r3, [pc, #148]	; (402868 <usart_serial_getchar+0xe4>)
  4027d2:	4798      	blx	r3
  4027d4:	4603      	mov	r3, r0
  4027d6:	2b00      	cmp	r3, #0
  4027d8:	d1f8      	bne.n	4027cc <usart_serial_getchar+0x48>
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  4027da:	687b      	ldr	r3, [r7, #4]
  4027dc:	4a25      	ldr	r2, [pc, #148]	; (402874 <usart_serial_getchar+0xf0>)
  4027de:	4293      	cmp	r3, r2
  4027e0:	d107      	bne.n	4027f2 <usart_serial_getchar+0x6e>
		while (uart_read((Uart*)p_usart, data));
  4027e2:	bf00      	nop
  4027e4:	6878      	ldr	r0, [r7, #4]
  4027e6:	6839      	ldr	r1, [r7, #0]
  4027e8:	4b1f      	ldr	r3, [pc, #124]	; (402868 <usart_serial_getchar+0xe4>)
  4027ea:	4798      	blx	r3
  4027ec:	4603      	mov	r3, r0
  4027ee:	2b00      	cmp	r3, #0
  4027f0:	d1f8      	bne.n	4027e4 <usart_serial_getchar+0x60>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  4027f2:	687b      	ldr	r3, [r7, #4]
  4027f4:	4a20      	ldr	r2, [pc, #128]	; (402878 <usart_serial_getchar+0xf4>)
  4027f6:	4293      	cmp	r3, r2
  4027f8:	d10d      	bne.n	402816 <usart_serial_getchar+0x92>
		while (usart_read(p_usart, &val));
  4027fa:	bf00      	nop
  4027fc:	f107 030c 	add.w	r3, r7, #12
  402800:	6878      	ldr	r0, [r7, #4]
  402802:	4619      	mov	r1, r3
  402804:	4b1d      	ldr	r3, [pc, #116]	; (40287c <usart_serial_getchar+0xf8>)
  402806:	4798      	blx	r3
  402808:	4603      	mov	r3, r0
  40280a:	2b00      	cmp	r3, #0
  40280c:	d1f6      	bne.n	4027fc <usart_serial_getchar+0x78>
		*data = (uint8_t)(val & 0xFF);
  40280e:	68fb      	ldr	r3, [r7, #12]
  402810:	b2da      	uxtb	r2, r3
  402812:	683b      	ldr	r3, [r7, #0]
  402814:	701a      	strb	r2, [r3, #0]
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  402816:	687b      	ldr	r3, [r7, #4]
  402818:	4a19      	ldr	r2, [pc, #100]	; (402880 <usart_serial_getchar+0xfc>)
  40281a:	4293      	cmp	r3, r2
  40281c:	d10d      	bne.n	40283a <usart_serial_getchar+0xb6>
		while (usart_read(p_usart, &val));
  40281e:	bf00      	nop
  402820:	f107 030c 	add.w	r3, r7, #12
  402824:	6878      	ldr	r0, [r7, #4]
  402826:	4619      	mov	r1, r3
  402828:	4b14      	ldr	r3, [pc, #80]	; (40287c <usart_serial_getchar+0xf8>)
  40282a:	4798      	blx	r3
  40282c:	4603      	mov	r3, r0
  40282e:	2b00      	cmp	r3, #0
  402830:	d1f6      	bne.n	402820 <usart_serial_getchar+0x9c>
		*data = (uint8_t)(val & 0xFF);
  402832:	68fb      	ldr	r3, [r7, #12]
  402834:	b2da      	uxtb	r2, r3
  402836:	683b      	ldr	r3, [r7, #0]
  402838:	701a      	strb	r2, [r3, #0]
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  40283a:	687b      	ldr	r3, [r7, #4]
  40283c:	4a11      	ldr	r2, [pc, #68]	; (402884 <usart_serial_getchar+0x100>)
  40283e:	4293      	cmp	r3, r2
  402840:	d10d      	bne.n	40285e <usart_serial_getchar+0xda>
		while (usart_read(p_usart, &val));
  402842:	bf00      	nop
  402844:	f107 030c 	add.w	r3, r7, #12
  402848:	6878      	ldr	r0, [r7, #4]
  40284a:	4619      	mov	r1, r3
  40284c:	4b0b      	ldr	r3, [pc, #44]	; (40287c <usart_serial_getchar+0xf8>)
  40284e:	4798      	blx	r3
  402850:	4603      	mov	r3, r0
  402852:	2b00      	cmp	r3, #0
  402854:	d1f6      	bne.n	402844 <usart_serial_getchar+0xc0>
		*data = (uint8_t)(val & 0xFF);
  402856:	68fb      	ldr	r3, [r7, #12]
  402858:	b2da      	uxtb	r2, r3
  40285a:	683b      	ldr	r3, [r7, #0]
  40285c:	701a      	strb	r2, [r3, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  40285e:	3710      	adds	r7, #16
  402860:	46bd      	mov	sp, r7
  402862:	bd80      	pop	{r7, pc}
  402864:	400e0800 	.word	0x400e0800
  402868:	0040136d 	.word	0x0040136d
  40286c:	400e0a00 	.word	0x400e0a00
  402870:	400e1a00 	.word	0x400e1a00
  402874:	400e1c00 	.word	0x400e1c00
  402878:	40024000 	.word	0x40024000
  40287c:	0040168d 	.word	0x0040168d
  402880:	40028000 	.word	0x40028000
  402884:	4002c000 	.word	0x4002c000

00402888 <stdio_serial_init>:
 * \param usart       Base address of the USART instance.
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
  402888:	b580      	push	{r7, lr}
  40288a:	b082      	sub	sp, #8
  40288c:	af00      	add	r7, sp, #0
  40288e:	6078      	str	r0, [r7, #4]
  402890:	6039      	str	r1, [r7, #0]
	stdio_base = (void *)usart;
  402892:	4a0f      	ldr	r2, [pc, #60]	; (4028d0 <stdio_serial_init+0x48>)
  402894:	687b      	ldr	r3, [r7, #4]
  402896:	6013      	str	r3, [r2, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  402898:	4b0e      	ldr	r3, [pc, #56]	; (4028d4 <stdio_serial_init+0x4c>)
  40289a:	4a0f      	ldr	r2, [pc, #60]	; (4028d8 <stdio_serial_init+0x50>)
  40289c:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  40289e:	4b0f      	ldr	r3, [pc, #60]	; (4028dc <stdio_serial_init+0x54>)
  4028a0:	4a0f      	ldr	r2, [pc, #60]	; (4028e0 <stdio_serial_init+0x58>)
  4028a2:	601a      	str	r2, [r3, #0]
# if (XMEGA || MEGA_RF)
	usart_serial_init((USART_t *)usart,opt);
# elif UC3
	usart_serial_init(usart,(usart_serial_options_t *)opt);
# elif SAM
	usart_serial_init((Usart *)usart,(usart_serial_options_t *)opt);
  4028a4:	6878      	ldr	r0, [r7, #4]
  4028a6:	6839      	ldr	r1, [r7, #0]
  4028a8:	4b0e      	ldr	r3, [pc, #56]	; (4028e4 <stdio_serial_init+0x5c>)
  4028aa:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  4028ac:	4b0e      	ldr	r3, [pc, #56]	; (4028e8 <stdio_serial_init+0x60>)
  4028ae:	681b      	ldr	r3, [r3, #0]
  4028b0:	689b      	ldr	r3, [r3, #8]
  4028b2:	4618      	mov	r0, r3
  4028b4:	2100      	movs	r1, #0
  4028b6:	4b0d      	ldr	r3, [pc, #52]	; (4028ec <stdio_serial_init+0x64>)
  4028b8:	4798      	blx	r3
	setbuf(stdin, NULL);
  4028ba:	4b0b      	ldr	r3, [pc, #44]	; (4028e8 <stdio_serial_init+0x60>)
  4028bc:	681b      	ldr	r3, [r3, #0]
  4028be:	685b      	ldr	r3, [r3, #4]
  4028c0:	4618      	mov	r0, r3
  4028c2:	2100      	movs	r1, #0
  4028c4:	4b09      	ldr	r3, [pc, #36]	; (4028ec <stdio_serial_init+0x64>)
  4028c6:	4798      	blx	r3
	// and AVR GCC library:
	// - printf() emits one character at a time.
	// - getchar() requests only 1 byte to exit.
#  endif
# endif
}
  4028c8:	3708      	adds	r7, #8
  4028ca:	46bd      	mov	sp, r7
  4028cc:	bd80      	pop	{r7, pc}
  4028ce:	bf00      	nop
  4028d0:	204009d0 	.word	0x204009d0
  4028d4:	204009cc 	.word	0x204009cc
  4028d8:	00402679 	.word	0x00402679
  4028dc:	204009c8 	.word	0x204009c8
  4028e0:	00402785 	.word	0x00402785
  4028e4:	00402519 	.word	0x00402519
  4028e8:	204004a8 	.word	0x204004a8
  4028ec:	00403165 	.word	0x00403165

004028f0 <mdelay>:
 * by the SAM microcontroller system tick).
 *
 * \param ul_dly_ticks  Delay to wait for, in milliseconds.
 */
void mdelay(uint32_t ul_dly_ticks)
{
  4028f0:	b480      	push	{r7}
  4028f2:	b085      	sub	sp, #20
  4028f4:	af00      	add	r7, sp, #0
  4028f6:	6078      	str	r0, [r7, #4]
	uint32_t ul_cur_ticks;

	ul_cur_ticks = ul_ms_ticks;
  4028f8:	4b07      	ldr	r3, [pc, #28]	; (402918 <mdelay+0x28>)
  4028fa:	681b      	ldr	r3, [r3, #0]
  4028fc:	60fb      	str	r3, [r7, #12]
	while ((ul_ms_ticks - ul_cur_ticks) < ul_dly_ticks) {
  4028fe:	bf00      	nop
  402900:	4b05      	ldr	r3, [pc, #20]	; (402918 <mdelay+0x28>)
  402902:	681a      	ldr	r2, [r3, #0]
  402904:	68fb      	ldr	r3, [r7, #12]
  402906:	1ad2      	subs	r2, r2, r3
  402908:	687b      	ldr	r3, [r7, #4]
  40290a:	429a      	cmp	r2, r3
  40290c:	d3f8      	bcc.n	402900 <mdelay+0x10>
	}
}
  40290e:	3714      	adds	r7, #20
  402910:	46bd      	mov	sp, r7
  402912:	f85d 7b04 	ldr.w	r7, [sp], #4
  402916:	4770      	bx	lr
  402918:	20400990 	.word	0x20400990

0040291c <SysTick_Handler>:
 *
 *  Process System Tick Event.
 *  Increment the ul_ms_ticks counter.
 */
void SysTick_Handler(void)
{
  40291c:	b480      	push	{r7}
  40291e:	af00      	add	r7, sp, #0
	g_ul_tick_count++;
  402920:	4b06      	ldr	r3, [pc, #24]	; (40293c <SysTick_Handler+0x20>)
  402922:	681b      	ldr	r3, [r3, #0]
  402924:	3301      	adds	r3, #1
  402926:	4a05      	ldr	r2, [pc, #20]	; (40293c <SysTick_Handler+0x20>)
  402928:	6013      	str	r3, [r2, #0]
	ul_ms_ticks++; //jsi 6feb16
  40292a:	4b05      	ldr	r3, [pc, #20]	; (402940 <SysTick_Handler+0x24>)
  40292c:	681b      	ldr	r3, [r3, #0]
  40292e:	3301      	adds	r3, #1
  402930:	4a03      	ldr	r2, [pc, #12]	; (402940 <SysTick_Handler+0x24>)
  402932:	6013      	str	r3, [r2, #0]
}
  402934:	46bd      	mov	sp, r7
  402936:	f85d 7b04 	ldr.w	r7, [sp], #4
  40293a:	4770      	bx	lr
  40293c:	204009fc 	.word	0x204009fc
  402940:	20400990 	.word	0x20400990

00402944 <USART0_Handler>:
/**
 *  \brief Handler for USART interrupt.
 *
 */
void USART_Handler(void)
{
  402944:	b580      	push	{r7, lr}
  402946:	b082      	sub	sp, #8
  402948:	af00      	add	r7, sp, #0
	uint32_t ul_status;
	uint8_t uc_char;

	/* Read USART status. */
	ul_status = usart_get_status(BOARD_USART);
  40294a:	481b      	ldr	r0, [pc, #108]	; (4029b8 <USART0_Handler+0x74>)
  40294c:	4b1b      	ldr	r3, [pc, #108]	; (4029bc <USART0_Handler+0x78>)
  40294e:	4798      	blx	r3
  402950:	6078      	str	r0, [r7, #4]

	/*transmit interrupt rises*/
	if(ul_status & (US_IER_TXRDY | US_IER_TXEMPTY)) {
  402952:	687a      	ldr	r2, [r7, #4]
  402954:	f240 2302 	movw	r3, #514	; 0x202
  402958:	4013      	ands	r3, r2
  40295a:	2b00      	cmp	r3, #0
  40295c:	d004      	beq.n	402968 <USART0_Handler+0x24>
		usart_disable_interrupt(BOARD_USART, (US_IER_TXRDY | US_IER_TXEMPTY));
  40295e:	4816      	ldr	r0, [pc, #88]	; (4029b8 <USART0_Handler+0x74>)
  402960:	f240 2102 	movw	r1, #514	; 0x202
  402964:	4b16      	ldr	r3, [pc, #88]	; (4029c0 <USART0_Handler+0x7c>)
  402966:	4798      	blx	r3
	}

	/*receive interrupt rise, store character to receiver buffer*/
	if((g_state == RECEIVING) && (usart_read(BOARD_USART, (uint32_t *)&uc_char) == 0)) {
  402968:	4b16      	ldr	r3, [pc, #88]	; (4029c4 <USART0_Handler+0x80>)
  40296a:	781b      	ldrb	r3, [r3, #0]
  40296c:	b2db      	uxtb	r3, r3
  40296e:	2b02      	cmp	r3, #2
  402970:	d11f      	bne.n	4029b2 <USART0_Handler+0x6e>
  402972:	1cfb      	adds	r3, r7, #3
  402974:	4810      	ldr	r0, [pc, #64]	; (4029b8 <USART0_Handler+0x74>)
  402976:	4619      	mov	r1, r3
  402978:	4b13      	ldr	r3, [pc, #76]	; (4029c8 <USART0_Handler+0x84>)
  40297a:	4798      	blx	r3
  40297c:	4603      	mov	r3, r0
  40297e:	2b00      	cmp	r3, #0
  402980:	d117      	bne.n	4029b2 <USART0_Handler+0x6e>
		*p_revdata++ = uc_char;
  402982:	4b12      	ldr	r3, [pc, #72]	; (4029cc <USART0_Handler+0x88>)
  402984:	681b      	ldr	r3, [r3, #0]
  402986:	1c5a      	adds	r2, r3, #1
  402988:	4910      	ldr	r1, [pc, #64]	; (4029cc <USART0_Handler+0x88>)
  40298a:	600a      	str	r2, [r1, #0]
  40298c:	78fa      	ldrb	r2, [r7, #3]
  40298e:	701a      	strb	r2, [r3, #0]
		g_ulcount++;
  402990:	4b0f      	ldr	r3, [pc, #60]	; (4029d0 <USART0_Handler+0x8c>)
  402992:	681b      	ldr	r3, [r3, #0]
  402994:	3301      	adds	r3, #1
  402996:	4a0e      	ldr	r2, [pc, #56]	; (4029d0 <USART0_Handler+0x8c>)
  402998:	6013      	str	r3, [r2, #0]
		if(g_ulcount >= BUFFER_SIZE) {
  40299a:	4b0d      	ldr	r3, [pc, #52]	; (4029d0 <USART0_Handler+0x8c>)
  40299c:	681b      	ldr	r3, [r3, #0]
  40299e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
  4029a2:	d306      	bcc.n	4029b2 <USART0_Handler+0x6e>
			g_state = RECEIVED;
  4029a4:	4b07      	ldr	r3, [pc, #28]	; (4029c4 <USART0_Handler+0x80>)
  4029a6:	2203      	movs	r2, #3
  4029a8:	701a      	strb	r2, [r3, #0]
			usart_disable_interrupt(BOARD_USART, US_IER_RXRDY);
  4029aa:	4803      	ldr	r0, [pc, #12]	; (4029b8 <USART0_Handler+0x74>)
  4029ac:	2101      	movs	r1, #1
  4029ae:	4b04      	ldr	r3, [pc, #16]	; (4029c0 <USART0_Handler+0x7c>)
  4029b0:	4798      	blx	r3
		}
	}
}
  4029b2:	3708      	adds	r7, #8
  4029b4:	46bd      	mov	sp, r7
  4029b6:	bd80      	pop	{r7, pc}
  4029b8:	40024000 	.word	0x40024000
  4029bc:	004015b9 	.word	0x004015b9
  4029c0:	0040159d 	.word	0x0040159d
  4029c4:	20400988 	.word	0x20400988
  4029c8:	0040168d 	.word	0x0040168d
  4029cc:	20400004 	.word	0x20400004
  4029d0:	2040098c 	.word	0x2040098c

004029d4 <configure_usart>:
 *
 *  Configure USART in RS485 mode, asynchronous, 8 bits, 1 stop bit,
 *  no parity, 256000 bauds and enable its transmitter and receiver.
 */
static void configure_usart(void)
{
  4029d4:	b5b0      	push	{r4, r5, r7, lr}
  4029d6:	b086      	sub	sp, #24
  4029d8:	af00      	add	r7, sp, #0
	const sam_usart_opt_t usart_console_settings = {
  4029da:	4b14      	ldr	r3, [pc, #80]	; (402a2c <configure_usart+0x58>)
  4029dc:	463c      	mov	r4, r7
  4029de:	461d      	mov	r5, r3
  4029e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  4029e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  4029e4:	e895 0003 	ldmia.w	r5, {r0, r1}
  4029e8:	e884 0003 	stmia.w	r4, {r0, r1}
		/* This field is only used in IrDA mode. */
		0
	};

	/* Enable the peripheral clock in the PMC. */
	sysclk_enable_peripheral_clock(BOARD_ID_USART);
  4029ec:	200d      	movs	r0, #13
  4029ee:	4b10      	ldr	r3, [pc, #64]	; (402a30 <configure_usart+0x5c>)
  4029f0:	4798      	blx	r3

	/* Configure USART in RS485 mode. */
//jsi 7feb16 we want rs232 not rs485 for our application	usart_init_rs485(BOARD_USART, &usart_console_settings,
//jsi 7feb16 we want rs232 not rs485 for our application			sysclk_get_cpu_hz());
			
	usart_init_rs232(BOARD_USART, &usart_console_settings, sysclk_get_cpu_hz());
  4029f2:	4b10      	ldr	r3, [pc, #64]	; (402a34 <configure_usart+0x60>)
  4029f4:	4798      	blx	r3
  4029f6:	4602      	mov	r2, r0
  4029f8:	463b      	mov	r3, r7
  4029fa:	480f      	ldr	r0, [pc, #60]	; (402a38 <configure_usart+0x64>)
  4029fc:	4619      	mov	r1, r3
  4029fe:	4b0f      	ldr	r3, [pc, #60]	; (402a3c <configure_usart+0x68>)
  402a00:	4798      	blx	r3

	/* enable transmitter timeguard, 4 bit period delay. */
	usart_set_tx_timeguard(BOARD_USART, 4);
  402a02:	480d      	ldr	r0, [pc, #52]	; (402a38 <configure_usart+0x64>)
  402a04:	2104      	movs	r1, #4
  402a06:	4b0e      	ldr	r3, [pc, #56]	; (402a40 <configure_usart+0x6c>)
  402a08:	4798      	blx	r3

	/* Disable all the interrupts. */
	usart_disable_interrupt(BOARD_USART, ALL_INTERRUPT_MASK);
  402a0a:	480b      	ldr	r0, [pc, #44]	; (402a38 <configure_usart+0x64>)
  402a0c:	f04f 31ff 	mov.w	r1, #4294967295
  402a10:	4b0c      	ldr	r3, [pc, #48]	; (402a44 <configure_usart+0x70>)
  402a12:	4798      	blx	r3

	/* Enable TX & RX function. */
	usart_enable_tx(BOARD_USART);
  402a14:	4808      	ldr	r0, [pc, #32]	; (402a38 <configure_usart+0x64>)
  402a16:	4b0c      	ldr	r3, [pc, #48]	; (402a48 <configure_usart+0x74>)
  402a18:	4798      	blx	r3
	usart_enable_rx(BOARD_USART);
  402a1a:	4807      	ldr	r0, [pc, #28]	; (402a38 <configure_usart+0x64>)
  402a1c:	4b0b      	ldr	r3, [pc, #44]	; (402a4c <configure_usart+0x78>)
  402a1e:	4798      	blx	r3

	/* Configure and enable interrupt of USART. */
	NVIC_EnableIRQ(USART_IRQn);
  402a20:	200d      	movs	r0, #13
  402a22:	4b0b      	ldr	r3, [pc, #44]	; (402a50 <configure_usart+0x7c>)
  402a24:	4798      	blx	r3
}
  402a26:	3718      	adds	r7, #24
  402a28:	46bd      	mov	sp, r7
  402a2a:	bdb0      	pop	{r4, r5, r7, pc}
  402a2c:	00408840 	.word	0x00408840
  402a30:	004023a1 	.word	0x004023a1
  402a34:	00402379 	.word	0x00402379
  402a38:	40024000 	.word	0x40024000
  402a3c:	00401481 	.word	0x00401481
  402a40:	00401535 	.word	0x00401535
  402a44:	0040159d 	.word	0x0040159d
  402a48:	00401505 	.word	0x00401505
  402a4c:	00401551 	.word	0x00401551
  402a50:	00402215 	.word	0x00402215

00402a54 <configure_systick>:

/**
 *  Configure system tick to generate an interrupt every 1ms.
 */
static void configure_systick(void)
{
  402a54:	b580      	push	{r7, lr}
  402a56:	b082      	sub	sp, #8
  402a58:	af00      	add	r7, sp, #0
	uint32_t ul_flag;

	ul_flag = SysTick_Config(sysclk_get_cpu_hz() / SYS_TICK_FREQ);
  402a5a:	4b0a      	ldr	r3, [pc, #40]	; (402a84 <configure_systick+0x30>)
  402a5c:	4798      	blx	r3
  402a5e:	4602      	mov	r2, r0
  402a60:	4b09      	ldr	r3, [pc, #36]	; (402a88 <configure_systick+0x34>)
  402a62:	fba3 2302 	umull	r2, r3, r3, r2
  402a66:	099b      	lsrs	r3, r3, #6
  402a68:	4618      	mov	r0, r3
  402a6a:	4b08      	ldr	r3, [pc, #32]	; (402a8c <configure_systick+0x38>)
  402a6c:	4798      	blx	r3
  402a6e:	6078      	str	r0, [r7, #4]
	if (ul_flag) {
  402a70:	687b      	ldr	r3, [r7, #4]
  402a72:	2b00      	cmp	r3, #0
  402a74:	d003      	beq.n	402a7e <configure_systick+0x2a>
		puts("-F- Systick configuration error\r");
  402a76:	4806      	ldr	r0, [pc, #24]	; (402a90 <configure_systick+0x3c>)
  402a78:	4b06      	ldr	r3, [pc, #24]	; (402a94 <configure_systick+0x40>)
  402a7a:	4798      	blx	r3
		while (1) {
		}
  402a7c:	e7fe      	b.n	402a7c <configure_systick+0x28>
	}
}
  402a7e:	3708      	adds	r7, #8
  402a80:	46bd      	mov	sp, r7
  402a82:	bd80      	pop	{r7, pc}
  402a84:	00402379 	.word	0x00402379
  402a88:	10624dd3 	.word	0x10624dd3
  402a8c:	00402299 	.word	0x00402299
  402a90:	00408858 	.word	0x00408858
  402a94:	00403155 	.word	0x00403155

00402a98 <configure_console>:

/**
 *  Configure UART for debug message output.
 */
static void configure_console(void)
{
  402a98:	b590      	push	{r4, r7, lr}
  402a9a:	b085      	sub	sp, #20
  402a9c:	af00      	add	r7, sp, #0
	const usart_serial_options_t uart_serial_options = {
  402a9e:	4b08      	ldr	r3, [pc, #32]	; (402ac0 <configure_console+0x28>)
  402aa0:	463c      	mov	r4, r7
  402aa2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  402aa4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		.stopbits = CONF_UART_STOP_BITS,
#endif
	};

	/* Configure console UART. */
	sysclk_enable_peripheral_clock(CONSOLE_UART_ID);
  402aa8:	2007      	movs	r0, #7
  402aaa:	4b06      	ldr	r3, [pc, #24]	; (402ac4 <configure_console+0x2c>)
  402aac:	4798      	blx	r3
	stdio_serial_init(CONF_UART, &uart_serial_options);
  402aae:	463b      	mov	r3, r7
  402ab0:	4805      	ldr	r0, [pc, #20]	; (402ac8 <configure_console+0x30>)
  402ab2:	4619      	mov	r1, r3
  402ab4:	4b05      	ldr	r3, [pc, #20]	; (402acc <configure_console+0x34>)
  402ab6:	4798      	blx	r3
}
  402ab8:	3714      	adds	r7, #20
  402aba:	46bd      	mov	sp, r7
  402abc:	bd90      	pop	{r4, r7, pc}
  402abe:	bf00      	nop
  402ac0:	0040887c 	.word	0x0040887c
  402ac4:	004023a1 	.word	0x004023a1
  402ac8:	400e0800 	.word	0x400e0800
  402acc:	00402889 	.word	0x00402889

00402ad0 <func_transmit>:
* \param *p_buff  data to be transmitted
* \param ulsize size of all data.
*
*/
uint8_t func_transmit(const uint8_t *p_buff, uint32_t ulsize)
{
  402ad0:	b580      	push	{r7, lr}
  402ad2:	b082      	sub	sp, #8
  402ad4:	af00      	add	r7, sp, #0
  402ad6:	6078      	str	r0, [r7, #4]
  402ad8:	6039      	str	r1, [r7, #0]
	Assert(p_buff);

	while(ulsize > 0) {
  402ada:	e013      	b.n	402b04 <func_transmit+0x34>
		if(0 == usart_write(BOARD_USART, *p_buff)){
  402adc:	687b      	ldr	r3, [r7, #4]
  402ade:	781b      	ldrb	r3, [r3, #0]
  402ae0:	4810      	ldr	r0, [pc, #64]	; (402b24 <func_transmit+0x54>)
  402ae2:	4619      	mov	r1, r3
  402ae4:	4b10      	ldr	r3, [pc, #64]	; (402b28 <func_transmit+0x58>)
  402ae6:	4798      	blx	r3
  402ae8:	4603      	mov	r3, r0
  402aea:	2b00      	cmp	r3, #0
  402aec:	d10a      	bne.n	402b04 <func_transmit+0x34>
			usart_enable_interrupt(BOARD_USART, US_IER_TXRDY | US_IER_TXEMPTY);
  402aee:	480d      	ldr	r0, [pc, #52]	; (402b24 <func_transmit+0x54>)
  402af0:	f240 2102 	movw	r1, #514	; 0x202
  402af4:	4b0d      	ldr	r3, [pc, #52]	; (402b2c <func_transmit+0x5c>)
  402af6:	4798      	blx	r3
			ulsize--;
  402af8:	683b      	ldr	r3, [r7, #0]
  402afa:	3b01      	subs	r3, #1
  402afc:	603b      	str	r3, [r7, #0]
			p_buff++;
  402afe:	687b      	ldr	r3, [r7, #4]
  402b00:	3301      	adds	r3, #1
  402b02:	607b      	str	r3, [r7, #4]
*/
uint8_t func_transmit(const uint8_t *p_buff, uint32_t ulsize)
{
	Assert(p_buff);

	while(ulsize > 0) {
  402b04:	683b      	ldr	r3, [r7, #0]
  402b06:	2b00      	cmp	r3, #0
  402b08:	d1e8      	bne.n	402adc <func_transmit+0xc>
			ulsize--;
			p_buff++;
		}
	}

	while(!usart_is_tx_empty(BOARD_USART)) {
  402b0a:	bf00      	nop
  402b0c:	4805      	ldr	r0, [pc, #20]	; (402b24 <func_transmit+0x54>)
  402b0e:	4b08      	ldr	r3, [pc, #32]	; (402b30 <func_transmit+0x60>)
  402b10:	4798      	blx	r3
  402b12:	4603      	mov	r3, r0
  402b14:	2b00      	cmp	r3, #0
  402b16:	d0f9      	beq.n	402b0c <func_transmit+0x3c>
		;  /*waiting for transmit over*/
	}

	return 0;
  402b18:	2300      	movs	r3, #0
}
  402b1a:	4618      	mov	r0, r3
  402b1c:	3708      	adds	r7, #8
  402b1e:	46bd      	mov	sp, r7
  402b20:	bd80      	pop	{r7, pc}
  402b22:	bf00      	nop
  402b24:	40024000 	.word	0x40024000
  402b28:	00401659 	.word	0x00401659
  402b2c:	00401581 	.word	0x00401581
  402b30:	00401609 	.word	0x00401609

00402b34 <twi_init>:
	}
}

static void twi_init(void);
static void twi_init(void)
{
  402b34:	b580      	push	{r7, lr}
  402b36:	b084      	sub	sp, #16
  402b38:	af00      	add	r7, sp, #0
	twihs_options_t opt;

	/* Enable the peripheral clock for TWI */
	pmc_enable_periph_clk(ID_TWIHS0);
  402b3a:	2013      	movs	r0, #19
  402b3c:	4b09      	ldr	r3, [pc, #36]	; (402b64 <twi_init+0x30>)
  402b3e:	4798      	blx	r3

	/* Configure the options of TWI driver */
	opt.master_clk = sysclk_get_cpu_hz();
  402b40:	4b09      	ldr	r3, [pc, #36]	; (402b68 <twi_init+0x34>)
  402b42:	4798      	blx	r3
  402b44:	4603      	mov	r3, r0
  402b46:	607b      	str	r3, [r7, #4]
	opt.speed      = TWIHS_CLK; //400KHz
  402b48:	4b08      	ldr	r3, [pc, #32]	; (402b6c <twi_init+0x38>)
  402b4a:	60bb      	str	r3, [r7, #8]

	if (twihs_master_init(TWIHS0, &opt) != TWIHS_SUCCESS) {
  402b4c:	1d3b      	adds	r3, r7, #4
  402b4e:	4808      	ldr	r0, [pc, #32]	; (402b70 <twi_init+0x3c>)
  402b50:	4619      	mov	r1, r3
  402b52:	4b08      	ldr	r3, [pc, #32]	; (402b74 <twi_init+0x40>)
  402b54:	4798      	blx	r3
  402b56:	4603      	mov	r3, r0
  402b58:	2b00      	cmp	r3, #0
  402b5a:	d000      	beq.n	402b5e <twi_init+0x2a>
		while (1) {
			/* Capture error */
		}
  402b5c:	e7fe      	b.n	402b5c <twi_init+0x28>
	}
}
  402b5e:	3710      	adds	r7, #16
  402b60:	46bd      	mov	sp, r7
  402b62:	bd80      	pop	{r7, pc}
  402b64:	00400f39 	.word	0x00400f39
  402b68:	00402379 	.word	0x00402379
  402b6c:	00061a80 	.word	0x00061a80
  402b70:	40018000 	.word	0x40018000
  402b74:	00400fe1 	.word	0x00400fe1

00402b78 <main>:
 */

#  define EXAMPLE_LED_GPIO    LED0_GPIO

int main(void) //6feb16 this version of main has been hacked up for only exactly what we need
{
  402b78:	b5f0      	push	{r4, r5, r6, r7, lr}
  402b7a:	b0a1      	sub	sp, #132	; 0x84
  402b7c:	af04      	add	r7, sp, #16
	char		txBuf[11] = {0,0,0,0,0,0,0,0,0,0,0}, rxByte;
  402b7e:	2300      	movs	r3, #0
  402b80:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  402b84:	2300      	movs	r3, #0
  402b86:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
  402b8a:	2300      	movs	r3, #0
  402b8c:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
  402b90:	2300      	movs	r3, #0
  402b92:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  402b96:	2300      	movs	r3, #0
  402b98:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  402b9c:	2300      	movs	r3, #0
  402b9e:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
  402ba2:	2300      	movs	r3, #0
  402ba4:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  402ba8:	2300      	movs	r3, #0
  402baa:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  402bae:	2300      	movs	r3, #0
  402bb0:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  402bb4:	2300      	movs	r3, #0
  402bb6:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
  402bba:	2300      	movs	r3, #0
  402bbc:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
	uint32_t	i;	
	uint32_t	time_elapsed = 0;
  402bc0:	2300      	movs	r3, #0
  402bc2:	65fb      	str	r3, [r7, #92]	; 0x5c
	uint32_t	ul_i;
	uint8_t		displayState = 0;
  402bc4:	2300      	movs	r3, #0
  402bc6:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
	uint8_t		charCount = 0;
  402bca:	2300      	movs	r3, #0
  402bcc:	f887 306a 	strb.w	r3, [r7, #106]	; 0x6a
	char		printStr[64];
	
	unsigned char idFamily, acc, id[6], idcsum; //10feb16 temp serial ID code, make more formal later

	/* Initialize the SAM system. */
	sysclk_init();
  402bd0:	4b9a      	ldr	r3, [pc, #616]	; (402e3c <main+0x2c4>)
  402bd2:	4798      	blx	r3
	board_init();
  402bd4:	4b9a      	ldr	r3, [pc, #616]	; (402e40 <main+0x2c8>)
  402bd6:	4798      	blx	r3

	/* Configure UART for blue scrolling display */
	configure_console();
  402bd8:	4b9a      	ldr	r3, [pc, #616]	; (402e44 <main+0x2cc>)
  402bda:	4798      	blx	r3

	/* Configure USART. */
	configure_usart();
  402bdc:	4b9a      	ldr	r3, [pc, #616]	; (402e48 <main+0x2d0>)
  402bde:	4798      	blx	r3

	/* 1ms tick. */
	configure_systick();
  402be0:	4b9a      	ldr	r3, [pc, #616]	; (402e4c <main+0x2d4>)
  402be2:	4798      	blx	r3

	/*
	 * Put into some kind of "init_io()" function at some point
	 */
	
	ioport_set_pin_dir(ECLAVE_SERIAL_ID0, IOPORT_DIR_OUTPUT);
  402be4:	200f      	movs	r0, #15
  402be6:	2101      	movs	r1, #1
  402be8:	4b99      	ldr	r3, [pc, #612]	; (402e50 <main+0x2d8>)
  402bea:	4798      	blx	r3
	ioport_set_pin_level(ECLAVE_SERIAL_ID0, IOPORT_PIN_LEVEL_HIGH);
  402bec:	200f      	movs	r0, #15
  402bee:	2101      	movs	r1, #1
  402bf0:	4b98      	ldr	r3, [pc, #608]	; (402e54 <main+0x2dc>)
  402bf2:	4798      	blx	r3
	ioport_set_pin_dir(ECLAVE_SERIAL_ID1, IOPORT_DIR_OUTPUT);
  402bf4:	2010      	movs	r0, #16
  402bf6:	2101      	movs	r1, #1
  402bf8:	4b95      	ldr	r3, [pc, #596]	; (402e50 <main+0x2d8>)
  402bfa:	4798      	blx	r3
	ioport_set_pin_level(ECLAVE_SERIAL_ID1, IOPORT_PIN_LEVEL_HIGH);
  402bfc:	2010      	movs	r0, #16
  402bfe:	2101      	movs	r1, #1
  402c00:	4b94      	ldr	r3, [pc, #592]	; (402e54 <main+0x2dc>)
  402c02:	4798      	blx	r3
	ioport_set_pin_dir(ECLAVE_SERIAL_ID2, IOPORT_DIR_OUTPUT);
  402c04:	2011      	movs	r0, #17
  402c06:	2101      	movs	r1, #1
  402c08:	4b91      	ldr	r3, [pc, #580]	; (402e50 <main+0x2d8>)
  402c0a:	4798      	blx	r3
	ioport_set_pin_level(ECLAVE_SERIAL_ID2, IOPORT_PIN_LEVEL_HIGH);
  402c0c:	2011      	movs	r0, #17
  402c0e:	2101      	movs	r1, #1
  402c10:	4b90      	ldr	r3, [pc, #576]	; (402e54 <main+0x2dc>)
  402c12:	4798      	blx	r3
	ioport_set_pin_dir(ECLAVE_SERIAL_ID3, IOPORT_DIR_OUTPUT);
  402c14:	2012      	movs	r0, #18
  402c16:	2101      	movs	r1, #1
  402c18:	4b8d      	ldr	r3, [pc, #564]	; (402e50 <main+0x2d8>)
  402c1a:	4798      	blx	r3
	ioport_set_pin_level(ECLAVE_SERIAL_ID3, IOPORT_PIN_LEVEL_HIGH);
  402c1c:	2012      	movs	r0, #18
  402c1e:	2101      	movs	r1, #1
  402c20:	4b8c      	ldr	r3, [pc, #560]	; (402e54 <main+0x2dc>)
  402c22:	4798      	blx	r3
	ioport_set_pin_dir(ECLAVE_SERIAL_ID4, IOPORT_DIR_OUTPUT);
  402c24:	2013      	movs	r0, #19
  402c26:	2101      	movs	r1, #1
  402c28:	4b89      	ldr	r3, [pc, #548]	; (402e50 <main+0x2d8>)
  402c2a:	4798      	blx	r3
	ioport_set_pin_level(ECLAVE_SERIAL_ID4, IOPORT_PIN_LEVEL_HIGH);
  402c2c:	2013      	movs	r0, #19
  402c2e:	2101      	movs	r1, #1
  402c30:	4b88      	ldr	r3, [pc, #544]	; (402e54 <main+0x2dc>)
  402c32:	4798      	blx	r3

	SetSpeed(1); //1==standard speed, not overdrive 
  402c34:	2001      	movs	r0, #1
  402c36:	4b88      	ldr	r3, [pc, #544]	; (402e58 <main+0x2e0>)
  402c38:	4798      	blx	r3
	
	for (int i=0; i<5; i++)
  402c3a:	2300      	movs	r3, #0
  402c3c:	667b      	str	r3, [r7, #100]	; 0x64
  402c3e:	e07f      	b.n	402d40 <main+0x1c8>
	{
		if(!OWTouchReset(i)) //we think a board is present, try to read the serial ID
  402c40:	6e7b      	ldr	r3, [r7, #100]	; 0x64
  402c42:	b2db      	uxtb	r3, r3
  402c44:	4618      	mov	r0, r3
  402c46:	4b85      	ldr	r3, [pc, #532]	; (402e5c <main+0x2e4>)
  402c48:	4798      	blx	r3
  402c4a:	4603      	mov	r3, r0
  402c4c:	2b00      	cmp	r3, #0
  402c4e:	d170      	bne.n	402d32 <main+0x1ba>
		{
			OWWriteByte(i, 0x33); //Read ID command
  402c50:	6e7b      	ldr	r3, [r7, #100]	; 0x64
  402c52:	b2db      	uxtb	r3, r3
  402c54:	4618      	mov	r0, r3
  402c56:	2133      	movs	r1, #51	; 0x33
  402c58:	4b81      	ldr	r3, [pc, #516]	; (402e60 <main+0x2e8>)
  402c5a:	4798      	blx	r3
			
			idFamily = OWReadByte(i);
  402c5c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
  402c5e:	b2db      	uxtb	r3, r3
  402c60:	4618      	mov	r0, r3
  402c62:	4b80      	ldr	r3, [pc, #512]	; (402e64 <main+0x2ec>)
  402c64:	4798      	blx	r3
  402c66:	4603      	mov	r3, r0
  402c68:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
			
			acc = crc8_add(0x00, idFamily);
  402c6c:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
  402c70:	2000      	movs	r0, #0
  402c72:	4619      	mov	r1, r3
  402c74:	4b7c      	ldr	r3, [pc, #496]	; (402e68 <main+0x2f0>)
  402c76:	4798      	blx	r3
  402c78:	4603      	mov	r3, r0
  402c7a:	f887 3069 	strb.w	r3, [r7, #105]	; 0x69
			
			for (int j=0; j<6; j++)
  402c7e:	2300      	movs	r3, #0
  402c80:	663b      	str	r3, [r7, #96]	; 0x60
  402c82:	e01b      	b.n	402cbc <main+0x144>
			{
				id[j] = OWReadByte(i);
  402c84:	6e7b      	ldr	r3, [r7, #100]	; 0x64
  402c86:	b2db      	uxtb	r3, r3
  402c88:	4618      	mov	r0, r3
  402c8a:	4b76      	ldr	r3, [pc, #472]	; (402e64 <main+0x2ec>)
  402c8c:	4798      	blx	r3
  402c8e:	4603      	mov	r3, r0
  402c90:	b2d9      	uxtb	r1, r3
  402c92:	463a      	mov	r2, r7
  402c94:	6e3b      	ldr	r3, [r7, #96]	; 0x60
  402c96:	4413      	add	r3, r2
  402c98:	460a      	mov	r2, r1
  402c9a:	701a      	strb	r2, [r3, #0]
				acc = crc8_add(acc, id[j]);
  402c9c:	463a      	mov	r2, r7
  402c9e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
  402ca0:	4413      	add	r3, r2
  402ca2:	781b      	ldrb	r3, [r3, #0]
  402ca4:	f897 2069 	ldrb.w	r2, [r7, #105]	; 0x69
  402ca8:	4610      	mov	r0, r2
  402caa:	4619      	mov	r1, r3
  402cac:	4b6e      	ldr	r3, [pc, #440]	; (402e68 <main+0x2f0>)
  402cae:	4798      	blx	r3
  402cb0:	4603      	mov	r3, r0
  402cb2:	f887 3069 	strb.w	r3, [r7, #105]	; 0x69
			
			idFamily = OWReadByte(i);
			
			acc = crc8_add(0x00, idFamily);
			
			for (int j=0; j<6; j++)
  402cb6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
  402cb8:	3301      	adds	r3, #1
  402cba:	663b      	str	r3, [r7, #96]	; 0x60
  402cbc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
  402cbe:	2b05      	cmp	r3, #5
  402cc0:	dde0      	ble.n	402c84 <main+0x10c>
			{
				id[j] = OWReadByte(i);
				acc = crc8_add(acc, id[j]);
			}
			
			idcsum = OWReadByte(i);
  402cc2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
  402cc4:	b2db      	uxtb	r3, r3
  402cc6:	4618      	mov	r0, r3
  402cc8:	4b66      	ldr	r3, [pc, #408]	; (402e64 <main+0x2ec>)
  402cca:	4798      	blx	r3
  402ccc:	4603      	mov	r3, r0
  402cce:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a
			
			if (acc != idcsum)
  402cd2:	f897 2069 	ldrb.w	r2, [r7, #105]	; 0x69
  402cd6:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
  402cda:	429a      	cmp	r2, r3
  402cdc:	d004      	beq.n	402ce8 <main+0x170>
			{
				func_transmit("Invalid serial ID checksum.\r\n", strlen("Invalid serial ID checksum.\r\n"));
  402cde:	4863      	ldr	r0, [pc, #396]	; (402e6c <main+0x2f4>)
  402ce0:	211d      	movs	r1, #29
  402ce2:	4b63      	ldr	r3, [pc, #396]	; (402e70 <main+0x2f8>)
  402ce4:	4798      	blx	r3
  402ce6:	e028      	b.n	402d3a <main+0x1c2>
			}
			else
			{
				sprintf(printStr,"LED board %d serial ID: %x%x%x%x%x%x\r\n", id[0], id[1], id[2], id[3], id[4], id[5]);
  402ce8:	783b      	ldrb	r3, [r7, #0]
  402cea:	461e      	mov	r6, r3
  402cec:	787b      	ldrb	r3, [r7, #1]
  402cee:	461d      	mov	r5, r3
  402cf0:	78bb      	ldrb	r3, [r7, #2]
  402cf2:	461c      	mov	r4, r3
  402cf4:	78fb      	ldrb	r3, [r7, #3]
  402cf6:	4618      	mov	r0, r3
  402cf8:	793b      	ldrb	r3, [r7, #4]
  402cfa:	4619      	mov	r1, r3
  402cfc:	797b      	ldrb	r3, [r7, #5]
  402cfe:	461a      	mov	r2, r3
  402d00:	f107 0308 	add.w	r3, r7, #8
  402d04:	9400      	str	r4, [sp, #0]
  402d06:	9001      	str	r0, [sp, #4]
  402d08:	9102      	str	r1, [sp, #8]
  402d0a:	9203      	str	r2, [sp, #12]
  402d0c:	4618      	mov	r0, r3
  402d0e:	4959      	ldr	r1, [pc, #356]	; (402e74 <main+0x2fc>)
  402d10:	4632      	mov	r2, r6
  402d12:	462b      	mov	r3, r5
  402d14:	4c58      	ldr	r4, [pc, #352]	; (402e78 <main+0x300>)
  402d16:	47a0      	blx	r4
				func_transmit(printStr,strlen(printStr));
  402d18:	f107 0308 	add.w	r3, r7, #8
  402d1c:	4618      	mov	r0, r3
  402d1e:	4b57      	ldr	r3, [pc, #348]	; (402e7c <main+0x304>)
  402d20:	4798      	blx	r3
  402d22:	4602      	mov	r2, r0
  402d24:	f107 0308 	add.w	r3, r7, #8
  402d28:	4618      	mov	r0, r3
  402d2a:	4611      	mov	r1, r2
  402d2c:	4b50      	ldr	r3, [pc, #320]	; (402e70 <main+0x2f8>)
  402d2e:	4798      	blx	r3
  402d30:	e003      	b.n	402d3a <main+0x1c2>
			}
		}
		else
		{
			func_transmit("no board this slot\r\n", strlen("no board this slot\r\n"));
  402d32:	4853      	ldr	r0, [pc, #332]	; (402e80 <main+0x308>)
  402d34:	2114      	movs	r1, #20
  402d36:	4b4e      	ldr	r3, [pc, #312]	; (402e70 <main+0x2f8>)
  402d38:	4798      	blx	r3
	ioport_set_pin_dir(ECLAVE_SERIAL_ID4, IOPORT_DIR_OUTPUT);
	ioport_set_pin_level(ECLAVE_SERIAL_ID4, IOPORT_PIN_LEVEL_HIGH);

	SetSpeed(1); //1==standard speed, not overdrive 
	
	for (int i=0; i<5; i++)
  402d3a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
  402d3c:	3301      	adds	r3, #1
  402d3e:	667b      	str	r3, [r7, #100]	; 0x64
  402d40:	6e7b      	ldr	r3, [r7, #100]	; 0x64
  402d42:	2b04      	cmp	r3, #4
  402d44:	f77f af7c 	ble.w	402c40 <main+0xc8>

	/*
	 * End of minimalist serial ID chip stuff
	 */

	twi_init();
  402d48:	4b4e      	ldr	r3, [pc, #312]	; (402e84 <main+0x30c>)
  402d4a:	4798      	blx	r3

//make this ecII jsi 7feb16	gpio_set_pin_high(ECLAVE_LED_OEn); //make sure outputs are disabled at the chip level

	PCA9952_init();
  402d4c:	4b4e      	ldr	r3, [pc, #312]	; (402e88 <main+0x310>)
  402d4e:	4798      	blx	r3
	
	/*
	 * Enable transmitter here, and disable receiver first, to avoid receiving
	 * characters sent by itself. It's necessary for half duplex RS485.
	 */
	usart_enable_tx(BOARD_USART);
  402d50:	484e      	ldr	r0, [pc, #312]	; (402e8c <main+0x314>)
  402d52:	4b4f      	ldr	r3, [pc, #316]	; (402e90 <main+0x318>)
  402d54:	4798      	blx	r3
	usart_enable_rx(BOARD_USART);
  402d56:	484d      	ldr	r0, [pc, #308]	; (402e8c <main+0x314>)
  402d58:	4b4e      	ldr	r3, [pc, #312]	; (402e94 <main+0x31c>)
  402d5a:	4798      	blx	r3

	while (1) {

		/* Test the debug LED */
		ioport_toggle_pin_level(EXAMPLE_LED_GPIO);
  402d5c:	2050      	movs	r0, #80	; 0x50
  402d5e:	4b4e      	ldr	r3, [pc, #312]	; (402e98 <main+0x320>)
  402d60:	4798      	blx	r3


		/* Test the debug usart rx and tx */
		for (i=0; i<70; i++) //7 seconds
  402d62:	2300      	movs	r3, #0
  402d64:	66fb      	str	r3, [r7, #108]	; 0x6c
  402d66:	e017      	b.n	402d98 <main+0x220>
		{
			mdelay(100);
  402d68:	2064      	movs	r0, #100	; 0x64
  402d6a:	4b4c      	ldr	r3, [pc, #304]	; (402e9c <main+0x324>)
  402d6c:	4798      	blx	r3
		
			if (usart_is_rx_ready(BOARD_USART)) {
  402d6e:	4847      	ldr	r0, [pc, #284]	; (402e8c <main+0x314>)
  402d70:	4b4b      	ldr	r3, [pc, #300]	; (402ea0 <main+0x328>)
  402d72:	4798      	blx	r3
  402d74:	4603      	mov	r3, r0
  402d76:	2b00      	cmp	r3, #0
  402d78:	d00b      	beq.n	402d92 <main+0x21a>
				usart_read(BOARD_USART, (uint32_t *)&rxByte);
  402d7a:	f107 034b 	add.w	r3, r7, #75	; 0x4b
  402d7e:	4843      	ldr	r0, [pc, #268]	; (402e8c <main+0x314>)
  402d80:	4619      	mov	r1, r3
  402d82:	4b48      	ldr	r3, [pc, #288]	; (402ea4 <main+0x32c>)
  402d84:	4798      	blx	r3
				func_transmit(&rxByte, 1);
  402d86:	f107 034b 	add.w	r3, r7, #75	; 0x4b
  402d8a:	4618      	mov	r0, r3
  402d8c:	2101      	movs	r1, #1
  402d8e:	4b38      	ldr	r3, [pc, #224]	; (402e70 <main+0x2f8>)
  402d90:	4798      	blx	r3
		/* Test the debug LED */
		ioport_toggle_pin_level(EXAMPLE_LED_GPIO);


		/* Test the debug usart rx and tx */
		for (i=0; i<70; i++) //7 seconds
  402d92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
  402d94:	3301      	adds	r3, #1
  402d96:	66fb      	str	r3, [r7, #108]	; 0x6c
  402d98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
  402d9a:	2b45      	cmp	r3, #69	; 0x45
  402d9c:	d9e4      	bls.n	402d68 <main+0x1f0>
				func_transmit(&rxByte, 1);
			}
		}

		/* Test the scrolling blue LED display */
		for (charCount = 0; charCount < 7; charCount++)
  402d9e:	2300      	movs	r3, #0
  402da0:	f887 306a 	strb.w	r3, [r7, #106]	; 0x6a
  402da4:	e098      	b.n	402ed8 <main+0x360>
		{
			unsigned char temp;
			temp = (*(cmdPtrArray[displayState]+charCount));
  402da6:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
  402daa:	4a3f      	ldr	r2, [pc, #252]	; (402ea8 <main+0x330>)
  402dac:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
  402db0:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
  402db4:	4413      	add	r3, r2
  402db6:	781b      	ldrb	r3, [r3, #0]
  402db8:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
			putchar(temp);
  402dbc:	4b3b      	ldr	r3, [pc, #236]	; (402eac <main+0x334>)
  402dbe:	681b      	ldr	r3, [r3, #0]
  402dc0:	689b      	ldr	r3, [r3, #8]
  402dc2:	689a      	ldr	r2, [r3, #8]
  402dc4:	3a01      	subs	r2, #1
  402dc6:	609a      	str	r2, [r3, #8]
  402dc8:	689b      	ldr	r3, [r3, #8]
  402dca:	2b00      	cmp	r3, #0
  402dcc:	da72      	bge.n	402eb4 <main+0x33c>
  402dce:	4b37      	ldr	r3, [pc, #220]	; (402eac <main+0x334>)
  402dd0:	681b      	ldr	r3, [r3, #0]
  402dd2:	689b      	ldr	r3, [r3, #8]
  402dd4:	689a      	ldr	r2, [r3, #8]
  402dd6:	4b35      	ldr	r3, [pc, #212]	; (402eac <main+0x334>)
  402dd8:	681b      	ldr	r3, [r3, #0]
  402dda:	689b      	ldr	r3, [r3, #8]
  402ddc:	699b      	ldr	r3, [r3, #24]
  402dde:	429a      	cmp	r2, r3
  402de0:	db1f      	blt.n	402e22 <main+0x2aa>
  402de2:	4b32      	ldr	r3, [pc, #200]	; (402eac <main+0x334>)
  402de4:	681b      	ldr	r3, [r3, #0]
  402de6:	689b      	ldr	r3, [r3, #8]
  402de8:	681b      	ldr	r3, [r3, #0]
  402dea:	f897 2059 	ldrb.w	r2, [r7, #89]	; 0x59
  402dee:	701a      	strb	r2, [r3, #0]
  402df0:	4b2e      	ldr	r3, [pc, #184]	; (402eac <main+0x334>)
  402df2:	681b      	ldr	r3, [r3, #0]
  402df4:	689b      	ldr	r3, [r3, #8]
  402df6:	681b      	ldr	r3, [r3, #0]
  402df8:	781b      	ldrb	r3, [r3, #0]
  402dfa:	2b0a      	cmp	r3, #10
  402dfc:	d006      	beq.n	402e0c <main+0x294>
  402dfe:	4b2b      	ldr	r3, [pc, #172]	; (402eac <main+0x334>)
  402e00:	681b      	ldr	r3, [r3, #0]
  402e02:	689b      	ldr	r3, [r3, #8]
  402e04:	681a      	ldr	r2, [r3, #0]
  402e06:	3201      	adds	r2, #1
  402e08:	601a      	str	r2, [r3, #0]
  402e0a:	e060      	b.n	402ece <main+0x356>
  402e0c:	4b27      	ldr	r3, [pc, #156]	; (402eac <main+0x334>)
  402e0e:	681a      	ldr	r2, [r3, #0]
  402e10:	4b26      	ldr	r3, [pc, #152]	; (402eac <main+0x334>)
  402e12:	681b      	ldr	r3, [r3, #0]
  402e14:	689b      	ldr	r3, [r3, #8]
  402e16:	4610      	mov	r0, r2
  402e18:	210a      	movs	r1, #10
  402e1a:	461a      	mov	r2, r3
  402e1c:	4b24      	ldr	r3, [pc, #144]	; (402eb0 <main+0x338>)
  402e1e:	4798      	blx	r3
  402e20:	e055      	b.n	402ece <main+0x356>
  402e22:	4b22      	ldr	r3, [pc, #136]	; (402eac <main+0x334>)
  402e24:	6819      	ldr	r1, [r3, #0]
  402e26:	f897 2059 	ldrb.w	r2, [r7, #89]	; 0x59
  402e2a:	4b20      	ldr	r3, [pc, #128]	; (402eac <main+0x334>)
  402e2c:	681b      	ldr	r3, [r3, #0]
  402e2e:	689b      	ldr	r3, [r3, #8]
  402e30:	4608      	mov	r0, r1
  402e32:	4611      	mov	r1, r2
  402e34:	461a      	mov	r2, r3
  402e36:	4b1e      	ldr	r3, [pc, #120]	; (402eb0 <main+0x338>)
  402e38:	4798      	blx	r3
  402e3a:	e048      	b.n	402ece <main+0x356>
  402e3c:	00400491 	.word	0x00400491
  402e40:	00400a6d 	.word	0x00400a6d
  402e44:	00402a99 	.word	0x00402a99
  402e48:	004029d5 	.word	0x004029d5
  402e4c:	00402a55 	.word	0x00402a55
  402e50:	004023b9 	.word	0x004023b9
  402e54:	00402441 	.word	0x00402441
  402e58:	00401ed5 	.word	0x00401ed5
  402e5c:	00401f91 	.word	0x00401f91
  402e60:	00402131 	.word	0x00402131
  402e64:	00402171 	.word	0x00402171
  402e68:	004021bd 	.word	0x004021bd
  402e6c:	00408890 	.word	0x00408890
  402e70:	00402ad1 	.word	0x00402ad1
  402e74:	004088b0 	.word	0x004088b0
  402e78:	00403271 	.word	0x00403271
  402e7c:	004032bd 	.word	0x004032bd
  402e80:	004088d8 	.word	0x004088d8
  402e84:	00402b35 	.word	0x00402b35
  402e88:	00401b31 	.word	0x00401b31
  402e8c:	40024000 	.word	0x40024000
  402e90:	00401505 	.word	0x00401505
  402e94:	00401551 	.word	0x00401551
  402e98:	004024ad 	.word	0x004024ad
  402e9c:	004028f1 	.word	0x004028f1
  402ea0:	00401631 	.word	0x00401631
  402ea4:	0040168d 	.word	0x0040168d
  402ea8:	20400058 	.word	0x20400058
  402eac:	204004a8 	.word	0x204004a8
  402eb0:	00404829 	.word	0x00404829
  402eb4:	4b47      	ldr	r3, [pc, #284]	; (402fd4 <main+0x45c>)
  402eb6:	681b      	ldr	r3, [r3, #0]
  402eb8:	689b      	ldr	r3, [r3, #8]
  402eba:	681b      	ldr	r3, [r3, #0]
  402ebc:	f897 2059 	ldrb.w	r2, [r7, #89]	; 0x59
  402ec0:	701a      	strb	r2, [r3, #0]
  402ec2:	4b44      	ldr	r3, [pc, #272]	; (402fd4 <main+0x45c>)
  402ec4:	681b      	ldr	r3, [r3, #0]
  402ec6:	689b      	ldr	r3, [r3, #8]
  402ec8:	681a      	ldr	r2, [r3, #0]
  402eca:	3201      	adds	r2, #1
  402ecc:	601a      	str	r2, [r3, #0]
				func_transmit(&rxByte, 1);
			}
		}

		/* Test the scrolling blue LED display */
		for (charCount = 0; charCount < 7; charCount++)
  402ece:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
  402ed2:	3301      	adds	r3, #1
  402ed4:	f887 306a 	strb.w	r3, [r7, #106]	; 0x6a
  402ed8:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
  402edc:	2b06      	cmp	r3, #6
  402ede:	f67f af62 	bls.w	402da6 <main+0x22e>
			putchar(temp);
		}
		
		/* Test the debug port */

		switch (displayState)
  402ee2:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
  402ee6:	2b08      	cmp	r3, #8
  402ee8:	d85a      	bhi.n	402fa0 <main+0x428>
  402eea:	a201      	add	r2, pc, #4	; (adr r2, 402ef0 <main+0x378>)
  402eec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  402ef0:	00402f15 	.word	0x00402f15
  402ef4:	00402f25 	.word	0x00402f25
  402ef8:	00402f35 	.word	0x00402f35
  402efc:	00402f49 	.word	0x00402f49
  402f00:	00402f59 	.word	0x00402f59
  402f04:	00402f69 	.word	0x00402f69
  402f08:	00402f77 	.word	0x00402f77
  402f0c:	00402f85 	.word	0x00402f85
  402f10:	00402f93 	.word	0x00402f93
		{
			case IDX_READY:
				sprintf(txBuf, "Ready\r\n");
  402f14:	f107 034c 	add.w	r3, r7, #76	; 0x4c
  402f18:	4a2f      	ldr	r2, [pc, #188]	; (402fd8 <main+0x460>)
  402f1a:	e892 0003 	ldmia.w	r2, {r0, r1}
  402f1e:	e883 0003 	stmia.w	r3, {r0, r1}
				break;
  402f22:	e03d      	b.n	402fa0 <main+0x428>
			case IDX_CLEAN:
				sprintf(txBuf, "Clean\r\n");
  402f24:	f107 034c 	add.w	r3, r7, #76	; 0x4c
  402f28:	4a2c      	ldr	r2, [pc, #176]	; (402fdc <main+0x464>)
  402f2a:	e892 0003 	ldmia.w	r2, {r0, r1}
  402f2e:	e883 0003 	stmia.w	r3, {r0, r1}
				break;
  402f32:	e035      	b.n	402fa0 <main+0x428>
			case IDX_CLEANING:
				sprintf(txBuf, "Cleaning\r\n");
  402f34:	4a2a      	ldr	r2, [pc, #168]	; (402fe0 <main+0x468>)
  402f36:	f107 034c 	add.w	r3, r7, #76	; 0x4c
  402f3a:	ca07      	ldmia	r2, {r0, r1, r2}
  402f3c:	c303      	stmia	r3!, {r0, r1}
  402f3e:	801a      	strh	r2, [r3, #0]
  402f40:	3302      	adds	r3, #2
  402f42:	0c12      	lsrs	r2, r2, #16
  402f44:	701a      	strb	r2, [r3, #0]
				break;
  402f46:	e02b      	b.n	402fa0 <main+0x428>
			case IDX_DIRTY:
				sprintf(txBuf, "Dirty\r\n");
  402f48:	f107 034c 	add.w	r3, r7, #76	; 0x4c
  402f4c:	4a25      	ldr	r2, [pc, #148]	; (402fe4 <main+0x46c>)
  402f4e:	e892 0003 	ldmia.w	r2, {r0, r1}
  402f52:	e883 0003 	stmia.w	r3, {r0, r1}
				break;
  402f56:	e023      	b.n	402fa0 <main+0x428>
			case IDX_ERROR:
				sprintf(txBuf, "Error\r\n");
  402f58:	f107 034c 	add.w	r3, r7, #76	; 0x4c
  402f5c:	4a22      	ldr	r2, [pc, #136]	; (402fe8 <main+0x470>)
  402f5e:	e892 0003 	ldmia.w	r2, {r0, r1}
  402f62:	e883 0003 	stmia.w	r3, {r0, r1}
				break;
  402f66:	e01b      	b.n	402fa0 <main+0x428>
			case IDX_SHELF1:
				sprintf(txBuf, "Shelf1\r\n");
  402f68:	f107 034c 	add.w	r3, r7, #76	; 0x4c
  402f6c:	4a1f      	ldr	r2, [pc, #124]	; (402fec <main+0x474>)
  402f6e:	ca07      	ldmia	r2, {r0, r1, r2}
  402f70:	c303      	stmia	r3!, {r0, r1}
  402f72:	701a      	strb	r2, [r3, #0]
				break;
  402f74:	e014      	b.n	402fa0 <main+0x428>
			case IDX_SHELF2:
				sprintf(txBuf, "Shelf2\r\n");
  402f76:	f107 034c 	add.w	r3, r7, #76	; 0x4c
  402f7a:	4a1d      	ldr	r2, [pc, #116]	; (402ff0 <main+0x478>)
  402f7c:	ca07      	ldmia	r2, {r0, r1, r2}
  402f7e:	c303      	stmia	r3!, {r0, r1}
  402f80:	701a      	strb	r2, [r3, #0]
				break;
  402f82:	e00d      	b.n	402fa0 <main+0x428>
			case IDX_SHELF3:
				sprintf(txBuf, "Shelf3\r\n");
  402f84:	f107 034c 	add.w	r3, r7, #76	; 0x4c
  402f88:	4a1a      	ldr	r2, [pc, #104]	; (402ff4 <main+0x47c>)
  402f8a:	ca07      	ldmia	r2, {r0, r1, r2}
  402f8c:	c303      	stmia	r3!, {r0, r1}
  402f8e:	701a      	strb	r2, [r3, #0]
				break;
  402f90:	e006      	b.n	402fa0 <main+0x428>
			case IDX_SHELF4:
				sprintf(txBuf, "Shelf4\r\n");
  402f92:	f107 034c 	add.w	r3, r7, #76	; 0x4c
  402f96:	4a18      	ldr	r2, [pc, #96]	; (402ff8 <main+0x480>)
  402f98:	ca07      	ldmia	r2, {r0, r1, r2}
  402f9a:	c303      	stmia	r3!, {r0, r1}
  402f9c:	701a      	strb	r2, [r3, #0]
				break;
  402f9e:	bf00      	nop
		}
		
		func_transmit(txBuf, strlen(txBuf));
  402fa0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
  402fa4:	4618      	mov	r0, r3
  402fa6:	4b15      	ldr	r3, [pc, #84]	; (402ffc <main+0x484>)
  402fa8:	4798      	blx	r3
  402faa:	4602      	mov	r2, r0
  402fac:	f107 034c 	add.w	r3, r7, #76	; 0x4c
  402fb0:	4618      	mov	r0, r3
  402fb2:	4611      	mov	r1, r2
  402fb4:	4b12      	ldr	r3, [pc, #72]	; (403000 <main+0x488>)
  402fb6:	4798      	blx	r3


		if ((++displayState) > 8)
  402fb8:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
  402fbc:	3301      	adds	r3, #1
  402fbe:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
  402fc2:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
  402fc6:	2b08      	cmp	r3, #8
  402fc8:	d902      	bls.n	402fd0 <main+0x458>
		{
			displayState = 0;
  402fca:	2300      	movs	r3, #0
  402fcc:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
		}
		
		
	}
  402fd0:	e6c4      	b.n	402d5c <main+0x1e4>
  402fd2:	bf00      	nop
  402fd4:	204004a8 	.word	0x204004a8
  402fd8:	004088f0 	.word	0x004088f0
  402fdc:	004088f8 	.word	0x004088f8
  402fe0:	00408940 	.word	0x00408940
  402fe4:	00408900 	.word	0x00408900
  402fe8:	00408908 	.word	0x00408908
  402fec:	00408910 	.word	0x00408910
  402ff0:	0040891c 	.word	0x0040891c
  402ff4:	00408928 	.word	0x00408928
  402ff8:	00408934 	.word	0x00408934
  402ffc:	004032bd 	.word	0x004032bd
  403000:	00402ad1 	.word	0x00402ad1

00403004 <__libc_init_array>:
  403004:	b570      	push	{r4, r5, r6, lr}
  403006:	4e0f      	ldr	r6, [pc, #60]	; (403044 <__libc_init_array+0x40>)
  403008:	4d0f      	ldr	r5, [pc, #60]	; (403048 <__libc_init_array+0x44>)
  40300a:	1b76      	subs	r6, r6, r5
  40300c:	10b6      	asrs	r6, r6, #2
  40300e:	bf18      	it	ne
  403010:	2400      	movne	r4, #0
  403012:	d005      	beq.n	403020 <__libc_init_array+0x1c>
  403014:	3401      	adds	r4, #1
  403016:	f855 3b04 	ldr.w	r3, [r5], #4
  40301a:	4798      	blx	r3
  40301c:	42a6      	cmp	r6, r4
  40301e:	d1f9      	bne.n	403014 <__libc_init_array+0x10>
  403020:	4e0a      	ldr	r6, [pc, #40]	; (40304c <__libc_init_array+0x48>)
  403022:	f005 fdd1 	bl	408bc8 <_init>
  403026:	4d0a      	ldr	r5, [pc, #40]	; (403050 <__libc_init_array+0x4c>)
  403028:	1b76      	subs	r6, r6, r5
  40302a:	10b6      	asrs	r6, r6, #2
  40302c:	bf18      	it	ne
  40302e:	2400      	movne	r4, #0
  403030:	d006      	beq.n	403040 <__libc_init_array+0x3c>
  403032:	3401      	adds	r4, #1
  403034:	f855 3b04 	ldr.w	r3, [r5], #4
  403038:	4798      	blx	r3
  40303a:	42a6      	cmp	r6, r4
  40303c:	d1f9      	bne.n	403032 <__libc_init_array+0x2e>
  40303e:	bd70      	pop	{r4, r5, r6, pc}
  403040:	bd70      	pop	{r4, r5, r6, pc}
  403042:	bf00      	nop
  403044:	00408bd4 	.word	0x00408bd4
  403048:	00408bd4 	.word	0x00408bd4
  40304c:	00408bdc 	.word	0x00408bdc
  403050:	00408bd4 	.word	0x00408bd4

00403054 <memset>:
  403054:	0783      	lsls	r3, r0, #30
  403056:	b470      	push	{r4, r5, r6}
  403058:	d049      	beq.n	4030ee <memset+0x9a>
  40305a:	1e54      	subs	r4, r2, #1
  40305c:	2a00      	cmp	r2, #0
  40305e:	d044      	beq.n	4030ea <memset+0x96>
  403060:	b2cd      	uxtb	r5, r1
  403062:	4603      	mov	r3, r0
  403064:	e002      	b.n	40306c <memset+0x18>
  403066:	2c00      	cmp	r4, #0
  403068:	d03f      	beq.n	4030ea <memset+0x96>
  40306a:	4614      	mov	r4, r2
  40306c:	f803 5b01 	strb.w	r5, [r3], #1
  403070:	f013 0f03 	tst.w	r3, #3
  403074:	f104 32ff 	add.w	r2, r4, #4294967295
  403078:	d1f5      	bne.n	403066 <memset+0x12>
  40307a:	2c03      	cmp	r4, #3
  40307c:	d92e      	bls.n	4030dc <memset+0x88>
  40307e:	b2cd      	uxtb	r5, r1
  403080:	2c0f      	cmp	r4, #15
  403082:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  403086:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  40308a:	d919      	bls.n	4030c0 <memset+0x6c>
  40308c:	f103 0210 	add.w	r2, r3, #16
  403090:	4626      	mov	r6, r4
  403092:	3e10      	subs	r6, #16
  403094:	f842 5c10 	str.w	r5, [r2, #-16]
  403098:	f842 5c0c 	str.w	r5, [r2, #-12]
  40309c:	3210      	adds	r2, #16
  40309e:	2e0f      	cmp	r6, #15
  4030a0:	f842 5c18 	str.w	r5, [r2, #-24]
  4030a4:	f842 5c14 	str.w	r5, [r2, #-20]
  4030a8:	d8f3      	bhi.n	403092 <memset+0x3e>
  4030aa:	f1a4 0210 	sub.w	r2, r4, #16
  4030ae:	f004 040f 	and.w	r4, r4, #15
  4030b2:	f022 020f 	bic.w	r2, r2, #15
  4030b6:	2c03      	cmp	r4, #3
  4030b8:	f102 0210 	add.w	r2, r2, #16
  4030bc:	4413      	add	r3, r2
  4030be:	d90d      	bls.n	4030dc <memset+0x88>
  4030c0:	461e      	mov	r6, r3
  4030c2:	4622      	mov	r2, r4
  4030c4:	3a04      	subs	r2, #4
  4030c6:	f846 5b04 	str.w	r5, [r6], #4
  4030ca:	2a03      	cmp	r2, #3
  4030cc:	d8fa      	bhi.n	4030c4 <memset+0x70>
  4030ce:	1f22      	subs	r2, r4, #4
  4030d0:	f004 0403 	and.w	r4, r4, #3
  4030d4:	f022 0203 	bic.w	r2, r2, #3
  4030d8:	3204      	adds	r2, #4
  4030da:	4413      	add	r3, r2
  4030dc:	b12c      	cbz	r4, 4030ea <memset+0x96>
  4030de:	b2c9      	uxtb	r1, r1
  4030e0:	441c      	add	r4, r3
  4030e2:	f803 1b01 	strb.w	r1, [r3], #1
  4030e6:	42a3      	cmp	r3, r4
  4030e8:	d1fb      	bne.n	4030e2 <memset+0x8e>
  4030ea:	bc70      	pop	{r4, r5, r6}
  4030ec:	4770      	bx	lr
  4030ee:	4614      	mov	r4, r2
  4030f0:	4603      	mov	r3, r0
  4030f2:	e7c2      	b.n	40307a <memset+0x26>

004030f4 <_puts_r>:
  4030f4:	b5f0      	push	{r4, r5, r6, r7, lr}
  4030f6:	4604      	mov	r4, r0
  4030f8:	b089      	sub	sp, #36	; 0x24
  4030fa:	4608      	mov	r0, r1
  4030fc:	460d      	mov	r5, r1
  4030fe:	f000 f8dd 	bl	4032bc <strlen>
  403102:	68a3      	ldr	r3, [r4, #8]
  403104:	2701      	movs	r7, #1
  403106:	2102      	movs	r1, #2
  403108:	899a      	ldrh	r2, [r3, #12]
  40310a:	ae04      	add	r6, sp, #16
  40310c:	eb00 0c07 	add.w	ip, r0, r7
  403110:	f8df e03c 	ldr.w	lr, [pc, #60]	; 403150 <_puts_r+0x5c>
  403114:	9102      	str	r1, [sp, #8]
  403116:	0491      	lsls	r1, r2, #18
  403118:	9504      	str	r5, [sp, #16]
  40311a:	9005      	str	r0, [sp, #20]
  40311c:	f8cd c00c 	str.w	ip, [sp, #12]
  403120:	f8cd e018 	str.w	lr, [sp, #24]
  403124:	9707      	str	r7, [sp, #28]
  403126:	9601      	str	r6, [sp, #4]
  403128:	d406      	bmi.n	403138 <_puts_r+0x44>
  40312a:	6e59      	ldr	r1, [r3, #100]	; 0x64
  40312c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  403130:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  403134:	819a      	strh	r2, [r3, #12]
  403136:	6659      	str	r1, [r3, #100]	; 0x64
  403138:	4620      	mov	r0, r4
  40313a:	4619      	mov	r1, r3
  40313c:	aa01      	add	r2, sp, #4
  40313e:	f002 fed3 	bl	405ee8 <__sfvwrite_r>
  403142:	2800      	cmp	r0, #0
  403144:	bf14      	ite	ne
  403146:	f04f 30ff 	movne.w	r0, #4294967295
  40314a:	200a      	moveq	r0, #10
  40314c:	b009      	add	sp, #36	; 0x24
  40314e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  403150:	00408a40 	.word	0x00408a40

00403154 <puts>:
  403154:	4b02      	ldr	r3, [pc, #8]	; (403160 <puts+0xc>)
  403156:	4601      	mov	r1, r0
  403158:	6818      	ldr	r0, [r3, #0]
  40315a:	f7ff bfcb 	b.w	4030f4 <_puts_r>
  40315e:	bf00      	nop
  403160:	204004a8 	.word	0x204004a8

00403164 <setbuf>:
  403164:	2900      	cmp	r1, #0
  403166:	f44f 6380 	mov.w	r3, #1024	; 0x400
  40316a:	bf0c      	ite	eq
  40316c:	2202      	moveq	r2, #2
  40316e:	2200      	movne	r2, #0
  403170:	f000 b800 	b.w	403174 <setvbuf>

00403174 <setvbuf>:
  403174:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  403178:	4e3b      	ldr	r6, [pc, #236]	; (403268 <setvbuf+0xf4>)
  40317a:	4604      	mov	r4, r0
  40317c:	460d      	mov	r5, r1
  40317e:	4690      	mov	r8, r2
  403180:	6837      	ldr	r7, [r6, #0]
  403182:	461e      	mov	r6, r3
  403184:	b117      	cbz	r7, 40318c <setvbuf+0x18>
  403186:	6bbb      	ldr	r3, [r7, #56]	; 0x38
  403188:	2b00      	cmp	r3, #0
  40318a:	d03f      	beq.n	40320c <setvbuf+0x98>
  40318c:	f1b8 0f02 	cmp.w	r8, #2
  403190:	d832      	bhi.n	4031f8 <setvbuf+0x84>
  403192:	ea5f 79d6 	movs.w	r9, r6, lsr #31
  403196:	d12f      	bne.n	4031f8 <setvbuf+0x84>
  403198:	4621      	mov	r1, r4
  40319a:	4638      	mov	r0, r7
  40319c:	f002 fcc4 	bl	405b28 <_fflush_r>
  4031a0:	89a1      	ldrh	r1, [r4, #12]
  4031a2:	f8c4 9004 	str.w	r9, [r4, #4]
  4031a6:	060b      	lsls	r3, r1, #24
  4031a8:	f8c4 9018 	str.w	r9, [r4, #24]
  4031ac:	d428      	bmi.n	403200 <setvbuf+0x8c>
  4031ae:	f021 0183 	bic.w	r1, r1, #131	; 0x83
  4031b2:	f1b8 0f02 	cmp.w	r8, #2
  4031b6:	b289      	uxth	r1, r1
  4031b8:	81a1      	strh	r1, [r4, #12]
  4031ba:	d02b      	beq.n	403214 <setvbuf+0xa0>
  4031bc:	2d00      	cmp	r5, #0
  4031be:	d037      	beq.n	403230 <setvbuf+0xbc>
  4031c0:	f1b8 0f01 	cmp.w	r8, #1
  4031c4:	d012      	beq.n	4031ec <setvbuf+0x78>
  4031c6:	b289      	uxth	r1, r1
  4031c8:	4b28      	ldr	r3, [pc, #160]	; (40326c <setvbuf+0xf8>)
  4031ca:	f001 0008 	and.w	r0, r1, #8
  4031ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  4031d0:	6025      	str	r5, [r4, #0]
  4031d2:	b280      	uxth	r0, r0
  4031d4:	6125      	str	r5, [r4, #16]
  4031d6:	6166      	str	r6, [r4, #20]
  4031d8:	b180      	cbz	r0, 4031fc <setvbuf+0x88>
  4031da:	f011 0f03 	tst.w	r1, #3
  4031de:	f04f 0000 	mov.w	r0, #0
  4031e2:	bf18      	it	ne
  4031e4:	4606      	movne	r6, r0
  4031e6:	60a6      	str	r6, [r4, #8]
  4031e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4031ec:	f041 0101 	orr.w	r1, r1, #1
  4031f0:	4273      	negs	r3, r6
  4031f2:	81a1      	strh	r1, [r4, #12]
  4031f4:	61a3      	str	r3, [r4, #24]
  4031f6:	e7e6      	b.n	4031c6 <setvbuf+0x52>
  4031f8:	f04f 30ff 	mov.w	r0, #4294967295
  4031fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  403200:	6921      	ldr	r1, [r4, #16]
  403202:	4638      	mov	r0, r7
  403204:	f002 fd98 	bl	405d38 <_free_r>
  403208:	89a1      	ldrh	r1, [r4, #12]
  40320a:	e7d0      	b.n	4031ae <setvbuf+0x3a>
  40320c:	4638      	mov	r0, r7
  40320e:	f002 fd25 	bl	405c5c <__sinit>
  403212:	e7bb      	b.n	40318c <setvbuf+0x18>
  403214:	2000      	movs	r0, #0
  403216:	f104 0343 	add.w	r3, r4, #67	; 0x43
  40321a:	f041 0102 	orr.w	r1, r1, #2
  40321e:	2500      	movs	r5, #0
  403220:	2201      	movs	r2, #1
  403222:	81a1      	strh	r1, [r4, #12]
  403224:	60a5      	str	r5, [r4, #8]
  403226:	6023      	str	r3, [r4, #0]
  403228:	6123      	str	r3, [r4, #16]
  40322a:	6162      	str	r2, [r4, #20]
  40322c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  403230:	2e00      	cmp	r6, #0
  403232:	bf08      	it	eq
  403234:	f44f 6680 	moveq.w	r6, #1024	; 0x400
  403238:	4630      	mov	r0, r6
  40323a:	f003 f885 	bl	406348 <malloc>
  40323e:	4605      	mov	r5, r0
  403240:	b128      	cbz	r0, 40324e <setvbuf+0xda>
  403242:	89a1      	ldrh	r1, [r4, #12]
  403244:	f041 0180 	orr.w	r1, r1, #128	; 0x80
  403248:	b289      	uxth	r1, r1
  40324a:	81a1      	strh	r1, [r4, #12]
  40324c:	e7b8      	b.n	4031c0 <setvbuf+0x4c>
  40324e:	f44f 6080 	mov.w	r0, #1024	; 0x400
  403252:	f003 f879 	bl	406348 <malloc>
  403256:	4605      	mov	r5, r0
  403258:	b918      	cbnz	r0, 403262 <setvbuf+0xee>
  40325a:	89a1      	ldrh	r1, [r4, #12]
  40325c:	f04f 30ff 	mov.w	r0, #4294967295
  403260:	e7d9      	b.n	403216 <setvbuf+0xa2>
  403262:	f44f 6680 	mov.w	r6, #1024	; 0x400
  403266:	e7ec      	b.n	403242 <setvbuf+0xce>
  403268:	204004a8 	.word	0x204004a8
  40326c:	00405b55 	.word	0x00405b55

00403270 <sprintf>:
  403270:	b40e      	push	{r1, r2, r3}
  403272:	b5f0      	push	{r4, r5, r6, r7, lr}
  403274:	b09c      	sub	sp, #112	; 0x70
  403276:	4b10      	ldr	r3, [pc, #64]	; (4032b8 <sprintf+0x48>)
  403278:	4606      	mov	r6, r0
  40327a:	f44f 7e02 	mov.w	lr, #520	; 0x208
  40327e:	ac21      	add	r4, sp, #132	; 0x84
  403280:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
  403284:	f64f 77ff 	movw	r7, #65535	; 0xffff
  403288:	6818      	ldr	r0, [r3, #0]
  40328a:	f854 2b04 	ldr.w	r2, [r4], #4
  40328e:	a902      	add	r1, sp, #8
  403290:	9602      	str	r6, [sp, #8]
  403292:	4623      	mov	r3, r4
  403294:	9606      	str	r6, [sp, #24]
  403296:	9401      	str	r4, [sp, #4]
  403298:	f8ad e014 	strh.w	lr, [sp, #20]
  40329c:	9504      	str	r5, [sp, #16]
  40329e:	9507      	str	r5, [sp, #28]
  4032a0:	f8ad 7016 	strh.w	r7, [sp, #22]
  4032a4:	f000 f838 	bl	403318 <_svfprintf_r>
  4032a8:	9b02      	ldr	r3, [sp, #8]
  4032aa:	2200      	movs	r2, #0
  4032ac:	701a      	strb	r2, [r3, #0]
  4032ae:	b01c      	add	sp, #112	; 0x70
  4032b0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  4032b4:	b003      	add	sp, #12
  4032b6:	4770      	bx	lr
  4032b8:	204004a8 	.word	0x204004a8

004032bc <strlen>:
  4032bc:	f020 0103 	bic.w	r1, r0, #3
  4032c0:	f010 0003 	ands.w	r0, r0, #3
  4032c4:	f1c0 0000 	rsb	r0, r0, #0
  4032c8:	f851 3b04 	ldr.w	r3, [r1], #4
  4032cc:	f100 0c04 	add.w	ip, r0, #4
  4032d0:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
  4032d4:	f06f 0200 	mvn.w	r2, #0
  4032d8:	bf1c      	itt	ne
  4032da:	fa22 f20c 	lsrne.w	r2, r2, ip
  4032de:	4313      	orrne	r3, r2
  4032e0:	f04f 0c01 	mov.w	ip, #1
  4032e4:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
  4032e8:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
  4032ec:	eba3 020c 	sub.w	r2, r3, ip
  4032f0:	ea22 0203 	bic.w	r2, r2, r3
  4032f4:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
  4032f8:	bf04      	itt	eq
  4032fa:	f851 3b04 	ldreq.w	r3, [r1], #4
  4032fe:	3004      	addeq	r0, #4
  403300:	d0f4      	beq.n	4032ec <strlen+0x30>
  403302:	f1c2 0100 	rsb	r1, r2, #0
  403306:	ea02 0201 	and.w	r2, r2, r1
  40330a:	fab2 f282 	clz	r2, r2
  40330e:	f1c2 021f 	rsb	r2, r2, #31
  403312:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  403316:	4770      	bx	lr

00403318 <_svfprintf_r>:
  403318:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40331c:	b0c1      	sub	sp, #260	; 0x104
  40331e:	4689      	mov	r9, r1
  403320:	9208      	str	r2, [sp, #32]
  403322:	930c      	str	r3, [sp, #48]	; 0x30
  403324:	9009      	str	r0, [sp, #36]	; 0x24
  403326:	f002 ff99 	bl	40625c <_localeconv_r>
  40332a:	6803      	ldr	r3, [r0, #0]
  40332c:	4618      	mov	r0, r3
  40332e:	9316      	str	r3, [sp, #88]	; 0x58
  403330:	f7ff ffc4 	bl	4032bc <strlen>
  403334:	f8b9 300c 	ldrh.w	r3, [r9, #12]
  403338:	9017      	str	r0, [sp, #92]	; 0x5c
  40333a:	061d      	lsls	r5, r3, #24
  40333c:	d504      	bpl.n	403348 <_svfprintf_r+0x30>
  40333e:	f8d9 3010 	ldr.w	r3, [r9, #16]
  403342:	2b00      	cmp	r3, #0
  403344:	f001 8080 	beq.w	404448 <_svfprintf_r+0x1130>
  403348:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  40334c:	2300      	movs	r3, #0
  40334e:	46c3      	mov	fp, r8
  403350:	9313      	str	r3, [sp, #76]	; 0x4c
  403352:	9314      	str	r3, [sp, #80]	; 0x50
  403354:	9312      	str	r3, [sp, #72]	; 0x48
  403356:	9315      	str	r3, [sp, #84]	; 0x54
  403358:	9319      	str	r3, [sp, #100]	; 0x64
  40335a:	930a      	str	r3, [sp, #40]	; 0x28
  40335c:	9325      	str	r3, [sp, #148]	; 0x94
  40335e:	9324      	str	r3, [sp, #144]	; 0x90
  403360:	f8cd 808c 	str.w	r8, [sp, #140]	; 0x8c
  403364:	9a08      	ldr	r2, [sp, #32]
  403366:	7813      	ldrb	r3, [r2, #0]
  403368:	2b25      	cmp	r3, #37	; 0x25
  40336a:	f000 80a6 	beq.w	4034ba <_svfprintf_r+0x1a2>
  40336e:	b90b      	cbnz	r3, 403374 <_svfprintf_r+0x5c>
  403370:	e0a3      	b.n	4034ba <_svfprintf_r+0x1a2>
  403372:	b11b      	cbz	r3, 40337c <_svfprintf_r+0x64>
  403374:	f812 3f01 	ldrb.w	r3, [r2, #1]!
  403378:	2b25      	cmp	r3, #37	; 0x25
  40337a:	d1fa      	bne.n	403372 <_svfprintf_r+0x5a>
  40337c:	9908      	ldr	r1, [sp, #32]
  40337e:	4614      	mov	r4, r2
  403380:	1a55      	subs	r5, r2, r1
  403382:	d010      	beq.n	4033a6 <_svfprintf_r+0x8e>
  403384:	9b24      	ldr	r3, [sp, #144]	; 0x90
  403386:	9a25      	ldr	r2, [sp, #148]	; 0x94
  403388:	3301      	adds	r3, #1
  40338a:	f8cb 1000 	str.w	r1, [fp]
  40338e:	442a      	add	r2, r5
  403390:	f8cb 5004 	str.w	r5, [fp, #4]
  403394:	2b07      	cmp	r3, #7
  403396:	9324      	str	r3, [sp, #144]	; 0x90
  403398:	9225      	str	r2, [sp, #148]	; 0x94
  40339a:	dc73      	bgt.n	403484 <_svfprintf_r+0x16c>
  40339c:	f10b 0b08 	add.w	fp, fp, #8
  4033a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4033a2:	442b      	add	r3, r5
  4033a4:	930a      	str	r3, [sp, #40]	; 0x28
  4033a6:	7823      	ldrb	r3, [r4, #0]
  4033a8:	2b00      	cmp	r3, #0
  4033aa:	d073      	beq.n	403494 <_svfprintf_r+0x17c>
  4033ac:	2300      	movs	r3, #0
  4033ae:	f04f 3cff 	mov.w	ip, #4294967295
  4033b2:	1c61      	adds	r1, r4, #1
  4033b4:	7866      	ldrb	r6, [r4, #1]
  4033b6:	461a      	mov	r2, r3
  4033b8:	4664      	mov	r4, ip
  4033ba:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  4033be:	930b      	str	r3, [sp, #44]	; 0x2c
  4033c0:	9306      	str	r3, [sp, #24]
  4033c2:	1c4b      	adds	r3, r1, #1
  4033c4:	f1a6 0120 	sub.w	r1, r6, #32
  4033c8:	2958      	cmp	r1, #88	; 0x58
  4033ca:	f200 83b2 	bhi.w	403b32 <_svfprintf_r+0x81a>
  4033ce:	e8df f011 	tbh	[pc, r1, lsl #1]
  4033d2:	0319      	.short	0x0319
  4033d4:	03b003b0 	.word	0x03b003b0
  4033d8:	03b00320 	.word	0x03b00320
  4033dc:	03b003b0 	.word	0x03b003b0
  4033e0:	03b003b0 	.word	0x03b003b0
  4033e4:	024003b0 	.word	0x024003b0
  4033e8:	03b001fb 	.word	0x03b001fb
  4033ec:	01ff01e2 	.word	0x01ff01e2
  4033f0:	032703b0 	.word	0x032703b0
  4033f4:	032e032e 	.word	0x032e032e
  4033f8:	032e032e 	.word	0x032e032e
  4033fc:	032e032e 	.word	0x032e032e
  403400:	032e032e 	.word	0x032e032e
  403404:	03b0032e 	.word	0x03b0032e
  403408:	03b003b0 	.word	0x03b003b0
  40340c:	03b003b0 	.word	0x03b003b0
  403410:	03b003b0 	.word	0x03b003b0
  403414:	03b003b0 	.word	0x03b003b0
  403418:	033d03b0 	.word	0x033d03b0
  40341c:	03b00365 	.word	0x03b00365
  403420:	03b00365 	.word	0x03b00365
  403424:	03b003b0 	.word	0x03b003b0
  403428:	02fe03b0 	.word	0x02fe03b0
  40342c:	03b003b0 	.word	0x03b003b0
  403430:	03b00293 	.word	0x03b00293
  403434:	03b003b0 	.word	0x03b003b0
  403438:	03b003b0 	.word	0x03b003b0
  40343c:	03b002b0 	.word	0x03b002b0
  403440:	02c603b0 	.word	0x02c603b0
  403444:	03b003b0 	.word	0x03b003b0
  403448:	03b003b0 	.word	0x03b003b0
  40344c:	03b003b0 	.word	0x03b003b0
  403450:	03b003b0 	.word	0x03b003b0
  403454:	03b003b0 	.word	0x03b003b0
  403458:	021802eb 	.word	0x021802eb
  40345c:	03650365 	.word	0x03650365
  403460:	024e0365 	.word	0x024e0365
  403464:	03b00218 	.word	0x03b00218
  403468:	023603b0 	.word	0x023603b0
  40346c:	026003b0 	.word	0x026003b0
  403470:	039901e9 	.word	0x039901e9
  403474:	03b00259 	.word	0x03b00259
  403478:	03b00272 	.word	0x03b00272
  40347c:	03b00076 	.word	0x03b00076
  403480:	030503b0 	.word	0x030503b0
  403484:	9809      	ldr	r0, [sp, #36]	; 0x24
  403486:	4649      	mov	r1, r9
  403488:	aa23      	add	r2, sp, #140	; 0x8c
  40348a:	f004 f8d5 	bl	407638 <__ssprint_r>
  40348e:	b940      	cbnz	r0, 4034a2 <_svfprintf_r+0x18a>
  403490:	46c3      	mov	fp, r8
  403492:	e785      	b.n	4033a0 <_svfprintf_r+0x88>
  403494:	9b25      	ldr	r3, [sp, #148]	; 0x94
  403496:	b123      	cbz	r3, 4034a2 <_svfprintf_r+0x18a>
  403498:	9809      	ldr	r0, [sp, #36]	; 0x24
  40349a:	4649      	mov	r1, r9
  40349c:	aa23      	add	r2, sp, #140	; 0x8c
  40349e:	f004 f8cb 	bl	407638 <__ssprint_r>
  4034a2:	f8b9 300c 	ldrh.w	r3, [r9, #12]
  4034a6:	f013 0f40 	tst.w	r3, #64	; 0x40
  4034aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4034ac:	bf18      	it	ne
  4034ae:	f04f 33ff 	movne.w	r3, #4294967295
  4034b2:	4618      	mov	r0, r3
  4034b4:	b041      	add	sp, #260	; 0x104
  4034b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4034ba:	9c08      	ldr	r4, [sp, #32]
  4034bc:	e773      	b.n	4033a6 <_svfprintf_r+0x8e>
  4034be:	9308      	str	r3, [sp, #32]
  4034c0:	46a4      	mov	ip, r4
  4034c2:	9b06      	ldr	r3, [sp, #24]
  4034c4:	0698      	lsls	r0, r3, #26
  4034c6:	f140 823e 	bpl.w	403946 <_svfprintf_r+0x62e>
  4034ca:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  4034cc:	2301      	movs	r3, #1
  4034ce:	3707      	adds	r7, #7
  4034d0:	f027 0207 	bic.w	r2, r7, #7
  4034d4:	f102 0108 	add.w	r1, r2, #8
  4034d8:	e9d2 4500 	ldrd	r4, r5, [r2]
  4034dc:	910c      	str	r1, [sp, #48]	; 0x30
  4034de:	2200      	movs	r2, #0
  4034e0:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
  4034e4:	4617      	mov	r7, r2
  4034e6:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
  4034ea:	f1bc 0f00 	cmp.w	ip, #0
  4034ee:	db03      	blt.n	4034f8 <_svfprintf_r+0x1e0>
  4034f0:	9a06      	ldr	r2, [sp, #24]
  4034f2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
  4034f6:	9206      	str	r2, [sp, #24]
  4034f8:	f1bc 0f00 	cmp.w	ip, #0
  4034fc:	f040 83ac 	bne.w	403c58 <_svfprintf_r+0x940>
  403500:	ea54 0205 	orrs.w	r2, r4, r5
  403504:	bf14      	ite	ne
  403506:	2201      	movne	r2, #1
  403508:	2200      	moveq	r2, #0
  40350a:	2a00      	cmp	r2, #0
  40350c:	f040 83a4 	bne.w	403c58 <_svfprintf_r+0x940>
  403510:	2b00      	cmp	r3, #0
  403512:	f040 8460 	bne.w	403dd6 <_svfprintf_r+0xabe>
  403516:	9a06      	ldr	r2, [sp, #24]
  403518:	07d2      	lsls	r2, r2, #31
  40351a:	f140 84fd 	bpl.w	403f18 <_svfprintf_r+0xc00>
  40351e:	f50d 7a80 	add.w	sl, sp, #256	; 0x100
  403522:	2330      	movs	r3, #48	; 0x30
  403524:	f80a 3d41 	strb.w	r3, [sl, #-65]!
  403528:	ebca 0408 	rsb	r4, sl, r8
  40352c:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
  403530:	45a4      	cmp	ip, r4
  403532:	4663      	mov	r3, ip
  403534:	bfb8      	it	lt
  403536:	4623      	movlt	r3, r4
  403538:	9307      	str	r3, [sp, #28]
  40353a:	2300      	movs	r3, #0
  40353c:	9311      	str	r3, [sp, #68]	; 0x44
  40353e:	b117      	cbz	r7, 403546 <_svfprintf_r+0x22e>
  403540:	9b07      	ldr	r3, [sp, #28]
  403542:	3301      	adds	r3, #1
  403544:	9307      	str	r3, [sp, #28]
  403546:	9b06      	ldr	r3, [sp, #24]
  403548:	f013 0302 	ands.w	r3, r3, #2
  40354c:	930d      	str	r3, [sp, #52]	; 0x34
  40354e:	d002      	beq.n	403556 <_svfprintf_r+0x23e>
  403550:	9b07      	ldr	r3, [sp, #28]
  403552:	3302      	adds	r3, #2
  403554:	9307      	str	r3, [sp, #28]
  403556:	9b06      	ldr	r3, [sp, #24]
  403558:	f013 0384 	ands.w	r3, r3, #132	; 0x84
  40355c:	930e      	str	r3, [sp, #56]	; 0x38
  40355e:	f040 8307 	bne.w	403b70 <_svfprintf_r+0x858>
  403562:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  403564:	9a07      	ldr	r2, [sp, #28]
  403566:	ebc2 0a03 	rsb	sl, r2, r3
  40356a:	f1ba 0f00 	cmp.w	sl, #0
  40356e:	f340 82ff 	ble.w	403b70 <_svfprintf_r+0x858>
  403572:	f1ba 0f10 	cmp.w	sl, #16
  403576:	9925      	ldr	r1, [sp, #148]	; 0x94
  403578:	f340 87dd 	ble.w	404536 <_svfprintf_r+0x121e>
  40357c:	4fbf      	ldr	r7, [pc, #764]	; (40387c <_svfprintf_r+0x564>)
  40357e:	2510      	movs	r5, #16
  403580:	9618      	str	r6, [sp, #96]	; 0x60
  403582:	9a24      	ldr	r2, [sp, #144]	; 0x90
  403584:	463e      	mov	r6, r7
  403586:	4627      	mov	r7, r4
  403588:	9c09      	ldr	r4, [sp, #36]	; 0x24
  40358a:	e004      	b.n	403596 <_svfprintf_r+0x27e>
  40358c:	f1aa 0a10 	sub.w	sl, sl, #16
  403590:	f1ba 0f10 	cmp.w	sl, #16
  403594:	dd1b      	ble.n	4035ce <_svfprintf_r+0x2b6>
  403596:	3201      	adds	r2, #1
  403598:	3110      	adds	r1, #16
  40359a:	f8cb 6000 	str.w	r6, [fp]
  40359e:	f10b 0b08 	add.w	fp, fp, #8
  4035a2:	2a07      	cmp	r2, #7
  4035a4:	f84b 5c04 	str.w	r5, [fp, #-4]
  4035a8:	9125      	str	r1, [sp, #148]	; 0x94
  4035aa:	9224      	str	r2, [sp, #144]	; 0x90
  4035ac:	ddee      	ble.n	40358c <_svfprintf_r+0x274>
  4035ae:	4620      	mov	r0, r4
  4035b0:	4649      	mov	r1, r9
  4035b2:	aa23      	add	r2, sp, #140	; 0x8c
  4035b4:	46c3      	mov	fp, r8
  4035b6:	f004 f83f 	bl	407638 <__ssprint_r>
  4035ba:	2800      	cmp	r0, #0
  4035bc:	f47f af71 	bne.w	4034a2 <_svfprintf_r+0x18a>
  4035c0:	f1aa 0a10 	sub.w	sl, sl, #16
  4035c4:	9925      	ldr	r1, [sp, #148]	; 0x94
  4035c6:	9a24      	ldr	r2, [sp, #144]	; 0x90
  4035c8:	f1ba 0f10 	cmp.w	sl, #16
  4035cc:	dce3      	bgt.n	403596 <_svfprintf_r+0x27e>
  4035ce:	463c      	mov	r4, r7
  4035d0:	4637      	mov	r7, r6
  4035d2:	9e18      	ldr	r6, [sp, #96]	; 0x60
  4035d4:	3201      	adds	r2, #1
  4035d6:	eb0a 0c01 	add.w	ip, sl, r1
  4035da:	f8cb 7000 	str.w	r7, [fp]
  4035de:	2a07      	cmp	r2, #7
  4035e0:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
  4035e4:	9224      	str	r2, [sp, #144]	; 0x90
  4035e6:	f8cb a004 	str.w	sl, [fp, #4]
  4035ea:	f300 82b6 	bgt.w	403b5a <_svfprintf_r+0x842>
  4035ee:	f10b 0b08 	add.w	fp, fp, #8
  4035f2:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  4035f6:	b197      	cbz	r7, 40361e <_svfprintf_r+0x306>
  4035f8:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4035fa:	2201      	movs	r2, #1
  4035fc:	f10c 0c01 	add.w	ip, ip, #1
  403600:	f10d 016f 	add.w	r1, sp, #111	; 0x6f
  403604:	4413      	add	r3, r2
  403606:	f8cb 2004 	str.w	r2, [fp, #4]
  40360a:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
  40360e:	2b07      	cmp	r3, #7
  403610:	f8cb 1000 	str.w	r1, [fp]
  403614:	9324      	str	r3, [sp, #144]	; 0x90
  403616:	f300 83fb 	bgt.w	403e10 <_svfprintf_r+0xaf8>
  40361a:	f10b 0b08 	add.w	fp, fp, #8
  40361e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  403620:	b18b      	cbz	r3, 403646 <_svfprintf_r+0x32e>
  403622:	9b24      	ldr	r3, [sp, #144]	; 0x90
  403624:	f10c 0c02 	add.w	ip, ip, #2
  403628:	a91c      	add	r1, sp, #112	; 0x70
  40362a:	2202      	movs	r2, #2
  40362c:	3301      	adds	r3, #1
  40362e:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
  403632:	f8cb 1000 	str.w	r1, [fp]
  403636:	2b07      	cmp	r3, #7
  403638:	9324      	str	r3, [sp, #144]	; 0x90
  40363a:	f8cb 2004 	str.w	r2, [fp, #4]
  40363e:	f300 83db 	bgt.w	403df8 <_svfprintf_r+0xae0>
  403642:	f10b 0b08 	add.w	fp, fp, #8
  403646:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  403648:	2b80      	cmp	r3, #128	; 0x80
  40364a:	f000 8321 	beq.w	403c90 <_svfprintf_r+0x978>
  40364e:	9b10      	ldr	r3, [sp, #64]	; 0x40
  403650:	1b1f      	subs	r7, r3, r4
  403652:	2f00      	cmp	r7, #0
  403654:	dd37      	ble.n	4036c6 <_svfprintf_r+0x3ae>
  403656:	2f10      	cmp	r7, #16
  403658:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40365a:	f340 85ec 	ble.w	404236 <_svfprintf_r+0xf1e>
  40365e:	940d      	str	r4, [sp, #52]	; 0x34
  403660:	f04f 0a10 	mov.w	sl, #16
  403664:	4d86      	ldr	r5, [pc, #536]	; (403880 <_svfprintf_r+0x568>)
  403666:	4662      	mov	r2, ip
  403668:	9c09      	ldr	r4, [sp, #36]	; 0x24
  40366a:	e002      	b.n	403672 <_svfprintf_r+0x35a>
  40366c:	3f10      	subs	r7, #16
  40366e:	2f10      	cmp	r7, #16
  403670:	dd19      	ble.n	4036a6 <_svfprintf_r+0x38e>
  403672:	3301      	adds	r3, #1
  403674:	3210      	adds	r2, #16
  403676:	f8cb 5000 	str.w	r5, [fp]
  40367a:	f10b 0b08 	add.w	fp, fp, #8
  40367e:	2b07      	cmp	r3, #7
  403680:	f84b ac04 	str.w	sl, [fp, #-4]
  403684:	9225      	str	r2, [sp, #148]	; 0x94
  403686:	9324      	str	r3, [sp, #144]	; 0x90
  403688:	ddf0      	ble.n	40366c <_svfprintf_r+0x354>
  40368a:	4620      	mov	r0, r4
  40368c:	4649      	mov	r1, r9
  40368e:	aa23      	add	r2, sp, #140	; 0x8c
  403690:	46c3      	mov	fp, r8
  403692:	f003 ffd1 	bl	407638 <__ssprint_r>
  403696:	2800      	cmp	r0, #0
  403698:	f47f af03 	bne.w	4034a2 <_svfprintf_r+0x18a>
  40369c:	3f10      	subs	r7, #16
  40369e:	9a25      	ldr	r2, [sp, #148]	; 0x94
  4036a0:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4036a2:	2f10      	cmp	r7, #16
  4036a4:	dce5      	bgt.n	403672 <_svfprintf_r+0x35a>
  4036a6:	9c0d      	ldr	r4, [sp, #52]	; 0x34
  4036a8:	4694      	mov	ip, r2
  4036aa:	3301      	adds	r3, #1
  4036ac:	44bc      	add	ip, r7
  4036ae:	f8cb 5000 	str.w	r5, [fp]
  4036b2:	2b07      	cmp	r3, #7
  4036b4:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
  4036b8:	9324      	str	r3, [sp, #144]	; 0x90
  4036ba:	f8cb 7004 	str.w	r7, [fp, #4]
  4036be:	f300 838f 	bgt.w	403de0 <_svfprintf_r+0xac8>
  4036c2:	f10b 0b08 	add.w	fp, fp, #8
  4036c6:	9b06      	ldr	r3, [sp, #24]
  4036c8:	05df      	lsls	r7, r3, #23
  4036ca:	f100 8254 	bmi.w	403b76 <_svfprintf_r+0x85e>
  4036ce:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4036d0:	44a4      	add	ip, r4
  4036d2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4036d4:	3301      	adds	r3, #1
  4036d6:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
  4036da:	f8cb 2000 	str.w	r2, [fp]
  4036de:	2b07      	cmp	r3, #7
  4036e0:	f8cb 4004 	str.w	r4, [fp, #4]
  4036e4:	9324      	str	r3, [sp, #144]	; 0x90
  4036e6:	f300 8360 	bgt.w	403daa <_svfprintf_r+0xa92>
  4036ea:	f10b 0b08 	add.w	fp, fp, #8
  4036ee:	9b06      	ldr	r3, [sp, #24]
  4036f0:	075a      	lsls	r2, r3, #29
  4036f2:	d540      	bpl.n	403776 <_svfprintf_r+0x45e>
  4036f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  4036f6:	9a07      	ldr	r2, [sp, #28]
  4036f8:	1a9c      	subs	r4, r3, r2
  4036fa:	2c00      	cmp	r4, #0
  4036fc:	dd3b      	ble.n	403776 <_svfprintf_r+0x45e>
  4036fe:	2c10      	cmp	r4, #16
  403700:	9b24      	ldr	r3, [sp, #144]	; 0x90
  403702:	f340 876b 	ble.w	4045dc <_svfprintf_r+0x12c4>
  403706:	2510      	movs	r5, #16
  403708:	4f5c      	ldr	r7, [pc, #368]	; (40387c <_svfprintf_r+0x564>)
  40370a:	4662      	mov	r2, ip
  40370c:	9e09      	ldr	r6, [sp, #36]	; 0x24
  40370e:	e002      	b.n	403716 <_svfprintf_r+0x3fe>
  403710:	3c10      	subs	r4, #16
  403712:	2c10      	cmp	r4, #16
  403714:	dd19      	ble.n	40374a <_svfprintf_r+0x432>
  403716:	3301      	adds	r3, #1
  403718:	3210      	adds	r2, #16
  40371a:	f8cb 7000 	str.w	r7, [fp]
  40371e:	f10b 0b08 	add.w	fp, fp, #8
  403722:	2b07      	cmp	r3, #7
  403724:	f84b 5c04 	str.w	r5, [fp, #-4]
  403728:	9225      	str	r2, [sp, #148]	; 0x94
  40372a:	9324      	str	r3, [sp, #144]	; 0x90
  40372c:	ddf0      	ble.n	403710 <_svfprintf_r+0x3f8>
  40372e:	4630      	mov	r0, r6
  403730:	4649      	mov	r1, r9
  403732:	aa23      	add	r2, sp, #140	; 0x8c
  403734:	46c3      	mov	fp, r8
  403736:	f003 ff7f 	bl	407638 <__ssprint_r>
  40373a:	2800      	cmp	r0, #0
  40373c:	f47f aeb1 	bne.w	4034a2 <_svfprintf_r+0x18a>
  403740:	3c10      	subs	r4, #16
  403742:	9a25      	ldr	r2, [sp, #148]	; 0x94
  403744:	9b24      	ldr	r3, [sp, #144]	; 0x90
  403746:	2c10      	cmp	r4, #16
  403748:	dce5      	bgt.n	403716 <_svfprintf_r+0x3fe>
  40374a:	4694      	mov	ip, r2
  40374c:	3301      	adds	r3, #1
  40374e:	44a4      	add	ip, r4
  403750:	f8cb 7000 	str.w	r7, [fp]
  403754:	2b07      	cmp	r3, #7
  403756:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
  40375a:	9324      	str	r3, [sp, #144]	; 0x90
  40375c:	f8cb 4004 	str.w	r4, [fp, #4]
  403760:	dd09      	ble.n	403776 <_svfprintf_r+0x45e>
  403762:	9809      	ldr	r0, [sp, #36]	; 0x24
  403764:	4649      	mov	r1, r9
  403766:	aa23      	add	r2, sp, #140	; 0x8c
  403768:	f003 ff66 	bl	407638 <__ssprint_r>
  40376c:	2800      	cmp	r0, #0
  40376e:	f47f ae98 	bne.w	4034a2 <_svfprintf_r+0x18a>
  403772:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
  403776:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  403778:	9a07      	ldr	r2, [sp, #28]
  40377a:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40377c:	428a      	cmp	r2, r1
  40377e:	bfac      	ite	ge
  403780:	189b      	addge	r3, r3, r2
  403782:	185b      	addlt	r3, r3, r1
  403784:	930a      	str	r3, [sp, #40]	; 0x28
  403786:	f1bc 0f00 	cmp.w	ip, #0
  40378a:	f040 831a 	bne.w	403dc2 <_svfprintf_r+0xaaa>
  40378e:	2300      	movs	r3, #0
  403790:	46c3      	mov	fp, r8
  403792:	9324      	str	r3, [sp, #144]	; 0x90
  403794:	e5e6      	b.n	403364 <_svfprintf_r+0x4c>
  403796:	4619      	mov	r1, r3
  403798:	9806      	ldr	r0, [sp, #24]
  40379a:	781e      	ldrb	r6, [r3, #0]
  40379c:	f040 0004 	orr.w	r0, r0, #4
  4037a0:	9006      	str	r0, [sp, #24]
  4037a2:	e60e      	b.n	4033c2 <_svfprintf_r+0xaa>
  4037a4:	9308      	str	r3, [sp, #32]
  4037a6:	46a4      	mov	ip, r4
  4037a8:	9b06      	ldr	r3, [sp, #24]
  4037aa:	f013 0320 	ands.w	r3, r3, #32
  4037ae:	f000 80ae 	beq.w	40390e <_svfprintf_r+0x5f6>
  4037b2:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  4037b4:	2300      	movs	r3, #0
  4037b6:	3707      	adds	r7, #7
  4037b8:	f027 0207 	bic.w	r2, r7, #7
  4037bc:	f102 0108 	add.w	r1, r2, #8
  4037c0:	e9d2 4500 	ldrd	r4, r5, [r2]
  4037c4:	910c      	str	r1, [sp, #48]	; 0x30
  4037c6:	e68a      	b.n	4034de <_svfprintf_r+0x1c6>
  4037c8:	781e      	ldrb	r6, [r3, #0]
  4037ca:	4619      	mov	r1, r3
  4037cc:	222b      	movs	r2, #43	; 0x2b
  4037ce:	e5f8      	b.n	4033c2 <_svfprintf_r+0xaa>
  4037d0:	781e      	ldrb	r6, [r3, #0]
  4037d2:	1c59      	adds	r1, r3, #1
  4037d4:	2e2a      	cmp	r6, #42	; 0x2a
  4037d6:	f001 8006 	beq.w	4047e6 <_svfprintf_r+0x14ce>
  4037da:	f1a6 0030 	sub.w	r0, r6, #48	; 0x30
  4037de:	460b      	mov	r3, r1
  4037e0:	2400      	movs	r4, #0
  4037e2:	2809      	cmp	r0, #9
  4037e4:	f63f adee 	bhi.w	4033c4 <_svfprintf_r+0xac>
  4037e8:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  4037ec:	f813 6b01 	ldrb.w	r6, [r3], #1
  4037f0:	eb00 0444 	add.w	r4, r0, r4, lsl #1
  4037f4:	f1a6 0030 	sub.w	r0, r6, #48	; 0x30
  4037f8:	2809      	cmp	r0, #9
  4037fa:	d9f5      	bls.n	4037e8 <_svfprintf_r+0x4d0>
  4037fc:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
  403800:	e5e0      	b.n	4033c4 <_svfprintf_r+0xac>
  403802:	9308      	str	r3, [sp, #32]
  403804:	46a4      	mov	ip, r4
  403806:	9b06      	ldr	r3, [sp, #24]
  403808:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
  40380c:	069c      	lsls	r4, r3, #26
  40380e:	f140 8129 	bpl.w	403a64 <_svfprintf_r+0x74c>
  403812:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  403814:	3707      	adds	r7, #7
  403816:	f027 0707 	bic.w	r7, r7, #7
  40381a:	e9d7 2300 	ldrd	r2, r3, [r7]
  40381e:	f107 0108 	add.w	r1, r7, #8
  403822:	4614      	mov	r4, r2
  403824:	461d      	mov	r5, r3
  403826:	910c      	str	r1, [sp, #48]	; 0x30
  403828:	2a00      	cmp	r2, #0
  40382a:	f173 0300 	sbcs.w	r3, r3, #0
  40382e:	f2c0 812a 	blt.w	403a86 <_svfprintf_r+0x76e>
  403832:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  403836:	2301      	movs	r3, #1
  403838:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
  40383c:	e655      	b.n	4034ea <_svfprintf_r+0x1d2>
  40383e:	781e      	ldrb	r6, [r3, #0]
  403840:	9906      	ldr	r1, [sp, #24]
  403842:	2e6c      	cmp	r6, #108	; 0x6c
  403844:	f000 8557 	beq.w	4042f6 <_svfprintf_r+0xfde>
  403848:	f041 0110 	orr.w	r1, r1, #16
  40384c:	9106      	str	r1, [sp, #24]
  40384e:	4619      	mov	r1, r3
  403850:	e5b7      	b.n	4033c2 <_svfprintf_r+0xaa>
  403852:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  403854:	6829      	ldr	r1, [r5, #0]
  403856:	4608      	mov	r0, r1
  403858:	910b      	str	r1, [sp, #44]	; 0x2c
  40385a:	4629      	mov	r1, r5
  40385c:	2800      	cmp	r0, #0
  40385e:	f101 0104 	add.w	r1, r1, #4
  403862:	f2c0 854f 	blt.w	404304 <_svfprintf_r+0xfec>
  403866:	910c      	str	r1, [sp, #48]	; 0x30
  403868:	4619      	mov	r1, r3
  40386a:	781e      	ldrb	r6, [r3, #0]
  40386c:	e5a9      	b.n	4033c2 <_svfprintf_r+0xaa>
  40386e:	9906      	ldr	r1, [sp, #24]
  403870:	f041 0140 	orr.w	r1, r1, #64	; 0x40
  403874:	9106      	str	r1, [sp, #24]
  403876:	4619      	mov	r1, r3
  403878:	781e      	ldrb	r6, [r3, #0]
  40387a:	e5a2      	b.n	4033c2 <_svfprintf_r+0xaa>
  40387c:	00408a54 	.word	0x00408a54
  403880:	00408a44 	.word	0x00408a44
  403884:	9906      	ldr	r1, [sp, #24]
  403886:	f041 0120 	orr.w	r1, r1, #32
  40388a:	9106      	str	r1, [sp, #24]
  40388c:	4619      	mov	r1, r3
  40388e:	781e      	ldrb	r6, [r3, #0]
  403890:	e597      	b.n	4033c2 <_svfprintf_r+0xaa>
  403892:	9308      	str	r3, [sp, #32]
  403894:	9b06      	ldr	r3, [sp, #24]
  403896:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
  40389a:	069e      	lsls	r6, r3, #26
  40389c:	f140 84a4 	bpl.w	4041e8 <_svfprintf_r+0xed0>
  4038a0:	990a      	ldr	r1, [sp, #40]	; 0x28
  4038a2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  4038a4:	17cd      	asrs	r5, r1, #31
  4038a6:	4608      	mov	r0, r1
  4038a8:	6813      	ldr	r3, [r2, #0]
  4038aa:	3204      	adds	r2, #4
  4038ac:	4629      	mov	r1, r5
  4038ae:	920c      	str	r2, [sp, #48]	; 0x30
  4038b0:	e9c3 0100 	strd	r0, r1, [r3]
  4038b4:	e556      	b.n	403364 <_svfprintf_r+0x4c>
  4038b6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  4038b8:	2500      	movs	r5, #0
  4038ba:	9308      	str	r3, [sp, #32]
  4038bc:	6813      	ldr	r3, [r2, #0]
  4038be:	1d17      	adds	r7, r2, #4
  4038c0:	f88d 506f 	strb.w	r5, [sp, #111]	; 0x6f
  4038c4:	930f      	str	r3, [sp, #60]	; 0x3c
  4038c6:	2b00      	cmp	r3, #0
  4038c8:	f000 867a 	beq.w	4045c0 <_svfprintf_r+0x12a8>
  4038cc:	2c00      	cmp	r4, #0
  4038ce:	980f      	ldr	r0, [sp, #60]	; 0x3c
  4038d0:	f2c0 8624 	blt.w	40451c <_svfprintf_r+0x1204>
  4038d4:	4629      	mov	r1, r5
  4038d6:	4622      	mov	r2, r4
  4038d8:	f002 ffea 	bl	4068b0 <memchr>
  4038dc:	2800      	cmp	r0, #0
  4038de:	f000 86df 	beq.w	4046a0 <_svfprintf_r+0x1388>
  4038e2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4038e4:	970c      	str	r7, [sp, #48]	; 0x30
  4038e6:	1ac4      	subs	r4, r0, r3
  4038e8:	9510      	str	r5, [sp, #64]	; 0x40
  4038ea:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  4038ee:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
  4038f2:	9511      	str	r5, [sp, #68]	; 0x44
  4038f4:	9307      	str	r3, [sp, #28]
  4038f6:	e622      	b.n	40353e <_svfprintf_r+0x226>
  4038f8:	9308      	str	r3, [sp, #32]
  4038fa:	46a4      	mov	ip, r4
  4038fc:	9b06      	ldr	r3, [sp, #24]
  4038fe:	f043 0310 	orr.w	r3, r3, #16
  403902:	9306      	str	r3, [sp, #24]
  403904:	9b06      	ldr	r3, [sp, #24]
  403906:	f013 0320 	ands.w	r3, r3, #32
  40390a:	f47f af52 	bne.w	4037b2 <_svfprintf_r+0x49a>
  40390e:	9a06      	ldr	r2, [sp, #24]
  403910:	f012 0210 	ands.w	r2, r2, #16
  403914:	f040 8352 	bne.w	403fbc <_svfprintf_r+0xca4>
  403918:	9b06      	ldr	r3, [sp, #24]
  40391a:	f013 0340 	ands.w	r3, r3, #64	; 0x40
  40391e:	f000 834d 	beq.w	403fbc <_svfprintf_r+0xca4>
  403922:	990c      	ldr	r1, [sp, #48]	; 0x30
  403924:	4613      	mov	r3, r2
  403926:	2500      	movs	r5, #0
  403928:	460a      	mov	r2, r1
  40392a:	880c      	ldrh	r4, [r1, #0]
  40392c:	3204      	adds	r2, #4
  40392e:	920c      	str	r2, [sp, #48]	; 0x30
  403930:	e5d5      	b.n	4034de <_svfprintf_r+0x1c6>
  403932:	9308      	str	r3, [sp, #32]
  403934:	46a4      	mov	ip, r4
  403936:	9b06      	ldr	r3, [sp, #24]
  403938:	f043 0310 	orr.w	r3, r3, #16
  40393c:	9306      	str	r3, [sp, #24]
  40393e:	9b06      	ldr	r3, [sp, #24]
  403940:	0698      	lsls	r0, r3, #26
  403942:	f53f adc2 	bmi.w	4034ca <_svfprintf_r+0x1b2>
  403946:	9b06      	ldr	r3, [sp, #24]
  403948:	06d9      	lsls	r1, r3, #27
  40394a:	f140 8432 	bpl.w	4041b2 <_svfprintf_r+0xe9a>
  40394e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  403950:	4613      	mov	r3, r2
  403952:	3204      	adds	r2, #4
  403954:	681c      	ldr	r4, [r3, #0]
  403956:	2500      	movs	r5, #0
  403958:	2301      	movs	r3, #1
  40395a:	920c      	str	r2, [sp, #48]	; 0x30
  40395c:	e5bf      	b.n	4034de <_svfprintf_r+0x1c6>
  40395e:	9308      	str	r3, [sp, #32]
  403960:	46a4      	mov	ip, r4
  403962:	4bb7      	ldr	r3, [pc, #732]	; (403c40 <_svfprintf_r+0x928>)
  403964:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
  403968:	9315      	str	r3, [sp, #84]	; 0x54
  40396a:	9b06      	ldr	r3, [sp, #24]
  40396c:	069a      	lsls	r2, r3, #26
  40396e:	d53e      	bpl.n	4039ee <_svfprintf_r+0x6d6>
  403970:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  403972:	3707      	adds	r7, #7
  403974:	f027 0307 	bic.w	r3, r7, #7
  403978:	f103 0208 	add.w	r2, r3, #8
  40397c:	e9d3 4500 	ldrd	r4, r5, [r3]
  403980:	920c      	str	r2, [sp, #48]	; 0x30
  403982:	9b06      	ldr	r3, [sp, #24]
  403984:	07df      	lsls	r7, r3, #31
  403986:	f140 8268 	bpl.w	403e5a <_svfprintf_r+0xb42>
  40398a:	ea54 0305 	orrs.w	r3, r4, r5
  40398e:	f000 8264 	beq.w	403e5a <_svfprintf_r+0xb42>
  403992:	9b06      	ldr	r3, [sp, #24]
  403994:	2230      	movs	r2, #48	; 0x30
  403996:	f88d 6071 	strb.w	r6, [sp, #113]	; 0x71
  40399a:	f043 0302 	orr.w	r3, r3, #2
  40399e:	f88d 2070 	strb.w	r2, [sp, #112]	; 0x70
  4039a2:	9306      	str	r3, [sp, #24]
  4039a4:	2302      	movs	r3, #2
  4039a6:	e59a      	b.n	4034de <_svfprintf_r+0x1c6>
  4039a8:	990c      	ldr	r1, [sp, #48]	; 0x30
  4039aa:	2001      	movs	r0, #1
  4039ac:	9308      	str	r3, [sp, #32]
  4039ae:	2300      	movs	r3, #0
  4039b0:	680a      	ldr	r2, [r1, #0]
  4039b2:	3104      	adds	r1, #4
  4039b4:	461f      	mov	r7, r3
  4039b6:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  4039ba:	9310      	str	r3, [sp, #64]	; 0x40
  4039bc:	4604      	mov	r4, r0
  4039be:	9311      	str	r3, [sp, #68]	; 0x44
  4039c0:	ab26      	add	r3, sp, #152	; 0x98
  4039c2:	9007      	str	r0, [sp, #28]
  4039c4:	910c      	str	r1, [sp, #48]	; 0x30
  4039c6:	f88d 2098 	strb.w	r2, [sp, #152]	; 0x98
  4039ca:	930f      	str	r3, [sp, #60]	; 0x3c
  4039cc:	e5bb      	b.n	403546 <_svfprintf_r+0x22e>
  4039ce:	9906      	ldr	r1, [sp, #24]
  4039d0:	f041 0108 	orr.w	r1, r1, #8
  4039d4:	9106      	str	r1, [sp, #24]
  4039d6:	4619      	mov	r1, r3
  4039d8:	781e      	ldrb	r6, [r3, #0]
  4039da:	e4f2      	b.n	4033c2 <_svfprintf_r+0xaa>
  4039dc:	9308      	str	r3, [sp, #32]
  4039de:	46a4      	mov	ip, r4
  4039e0:	4b98      	ldr	r3, [pc, #608]	; (403c44 <_svfprintf_r+0x92c>)
  4039e2:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
  4039e6:	9315      	str	r3, [sp, #84]	; 0x54
  4039e8:	9b06      	ldr	r3, [sp, #24]
  4039ea:	069a      	lsls	r2, r3, #26
  4039ec:	d4c0      	bmi.n	403970 <_svfprintf_r+0x658>
  4039ee:	9b06      	ldr	r3, [sp, #24]
  4039f0:	06db      	lsls	r3, r3, #27
  4039f2:	f140 83ec 	bpl.w	4041ce <_svfprintf_r+0xeb6>
  4039f6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  4039f8:	2500      	movs	r5, #0
  4039fa:	4613      	mov	r3, r2
  4039fc:	6814      	ldr	r4, [r2, #0]
  4039fe:	3304      	adds	r3, #4
  403a00:	930c      	str	r3, [sp, #48]	; 0x30
  403a02:	e7be      	b.n	403982 <_svfprintf_r+0x66a>
  403a04:	781e      	ldrb	r6, [r3, #0]
  403a06:	4619      	mov	r1, r3
  403a08:	2a00      	cmp	r2, #0
  403a0a:	f47f acda 	bne.w	4033c2 <_svfprintf_r+0xaa>
  403a0e:	2220      	movs	r2, #32
  403a10:	e4d7      	b.n	4033c2 <_svfprintf_r+0xaa>
  403a12:	9906      	ldr	r1, [sp, #24]
  403a14:	f041 0101 	orr.w	r1, r1, #1
  403a18:	9106      	str	r1, [sp, #24]
  403a1a:	4619      	mov	r1, r3
  403a1c:	781e      	ldrb	r6, [r3, #0]
  403a1e:	e4d0      	b.n	4033c2 <_svfprintf_r+0xaa>
  403a20:	9906      	ldr	r1, [sp, #24]
  403a22:	f041 0180 	orr.w	r1, r1, #128	; 0x80
  403a26:	9106      	str	r1, [sp, #24]
  403a28:	4619      	mov	r1, r3
  403a2a:	781e      	ldrb	r6, [r3, #0]
  403a2c:	e4c9      	b.n	4033c2 <_svfprintf_r+0xaa>
  403a2e:	f1a6 0030 	sub.w	r0, r6, #48	; 0x30
  403a32:	2100      	movs	r1, #0
  403a34:	eb01 0181 	add.w	r1, r1, r1, lsl #2
  403a38:	f813 6b01 	ldrb.w	r6, [r3], #1
  403a3c:	eb00 0141 	add.w	r1, r0, r1, lsl #1
  403a40:	f1a6 0030 	sub.w	r0, r6, #48	; 0x30
  403a44:	2809      	cmp	r0, #9
  403a46:	d9f5      	bls.n	403a34 <_svfprintf_r+0x71c>
  403a48:	910b      	str	r1, [sp, #44]	; 0x2c
  403a4a:	e4bb      	b.n	4033c4 <_svfprintf_r+0xac>
  403a4c:	9308      	str	r3, [sp, #32]
  403a4e:	46a4      	mov	ip, r4
  403a50:	9b06      	ldr	r3, [sp, #24]
  403a52:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
  403a56:	f043 0310 	orr.w	r3, r3, #16
  403a5a:	9306      	str	r3, [sp, #24]
  403a5c:	9b06      	ldr	r3, [sp, #24]
  403a5e:	069c      	lsls	r4, r3, #26
  403a60:	f53f aed7 	bmi.w	403812 <_svfprintf_r+0x4fa>
  403a64:	9b06      	ldr	r3, [sp, #24]
  403a66:	06d8      	lsls	r0, r3, #27
  403a68:	f140 83d5 	bpl.w	404216 <_svfprintf_r+0xefe>
  403a6c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  403a6e:	4613      	mov	r3, r2
  403a70:	681c      	ldr	r4, [r3, #0]
  403a72:	3304      	adds	r3, #4
  403a74:	17e5      	asrs	r5, r4, #31
  403a76:	4622      	mov	r2, r4
  403a78:	930c      	str	r3, [sp, #48]	; 0x30
  403a7a:	2a00      	cmp	r2, #0
  403a7c:	462b      	mov	r3, r5
  403a7e:	f173 0300 	sbcs.w	r3, r3, #0
  403a82:	f6bf aed6 	bge.w	403832 <_svfprintf_r+0x51a>
  403a86:	272d      	movs	r7, #45	; 0x2d
  403a88:	4264      	negs	r4, r4
  403a8a:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
  403a8e:	f04f 0301 	mov.w	r3, #1
  403a92:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
  403a96:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
  403a9a:	e526      	b.n	4034ea <_svfprintf_r+0x1d2>
  403a9c:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  403a9e:	9308      	str	r3, [sp, #32]
  403aa0:	3707      	adds	r7, #7
  403aa2:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
  403aa6:	f027 0307 	bic.w	r3, r7, #7
  403aaa:	f103 0208 	add.w	r2, r3, #8
  403aae:	920c      	str	r2, [sp, #48]	; 0x30
  403ab0:	681a      	ldr	r2, [r3, #0]
  403ab2:	9213      	str	r2, [sp, #76]	; 0x4c
  403ab4:	685b      	ldr	r3, [r3, #4]
  403ab6:	9813      	ldr	r0, [sp, #76]	; 0x4c
  403ab8:	9314      	str	r3, [sp, #80]	; 0x50
  403aba:	9914      	ldr	r1, [sp, #80]	; 0x50
  403abc:	9407      	str	r4, [sp, #28]
  403abe:	f003 fd43 	bl	407548 <__fpclassifyd>
  403ac2:	2801      	cmp	r0, #1
  403ac4:	f8dd c01c 	ldr.w	ip, [sp, #28]
  403ac8:	f040 8355 	bne.w	404176 <_svfprintf_r+0xe5e>
  403acc:	9813      	ldr	r0, [sp, #76]	; 0x4c
  403ace:	2200      	movs	r2, #0
  403ad0:	2300      	movs	r3, #0
  403ad2:	9914      	ldr	r1, [sp, #80]	; 0x50
  403ad4:	f004 fb9c 	bl	408210 <__aeabi_dcmplt>
  403ad8:	2800      	cmp	r0, #0
  403ada:	f040 8582 	bne.w	4045e2 <_svfprintf_r+0x12ca>
  403ade:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  403ae2:	2303      	movs	r3, #3
  403ae4:	9806      	ldr	r0, [sp, #24]
  403ae6:	4a58      	ldr	r2, [pc, #352]	; (403c48 <_svfprintf_r+0x930>)
  403ae8:	2100      	movs	r1, #0
  403aea:	461c      	mov	r4, r3
  403aec:	9307      	str	r3, [sp, #28]
  403aee:	4b57      	ldr	r3, [pc, #348]	; (403c4c <_svfprintf_r+0x934>)
  403af0:	f020 0080 	bic.w	r0, r0, #128	; 0x80
  403af4:	9110      	str	r1, [sp, #64]	; 0x40
  403af6:	2e47      	cmp	r6, #71	; 0x47
  403af8:	bfd8      	it	le
  403afa:	461a      	movle	r2, r3
  403afc:	9006      	str	r0, [sp, #24]
  403afe:	9111      	str	r1, [sp, #68]	; 0x44
  403b00:	920f      	str	r2, [sp, #60]	; 0x3c
  403b02:	e51c      	b.n	40353e <_svfprintf_r+0x226>
  403b04:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  403b06:	2230      	movs	r2, #48	; 0x30
  403b08:	9806      	ldr	r0, [sp, #24]
  403b0a:	46a4      	mov	ip, r4
  403b0c:	4629      	mov	r1, r5
  403b0e:	9308      	str	r3, [sp, #32]
  403b10:	2378      	movs	r3, #120	; 0x78
  403b12:	f040 0002 	orr.w	r0, r0, #2
  403b16:	3104      	adds	r1, #4
  403b18:	682c      	ldr	r4, [r5, #0]
  403b1a:	461e      	mov	r6, r3
  403b1c:	f88d 3071 	strb.w	r3, [sp, #113]	; 0x71
  403b20:	4b48      	ldr	r3, [pc, #288]	; (403c44 <_svfprintf_r+0x92c>)
  403b22:	2500      	movs	r5, #0
  403b24:	9006      	str	r0, [sp, #24]
  403b26:	9315      	str	r3, [sp, #84]	; 0x54
  403b28:	2302      	movs	r3, #2
  403b2a:	910c      	str	r1, [sp, #48]	; 0x30
  403b2c:	f88d 2070 	strb.w	r2, [sp, #112]	; 0x70
  403b30:	e4d5      	b.n	4034de <_svfprintf_r+0x1c6>
  403b32:	9308      	str	r3, [sp, #32]
  403b34:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
  403b38:	2e00      	cmp	r6, #0
  403b3a:	f43f acab 	beq.w	403494 <_svfprintf_r+0x17c>
  403b3e:	2300      	movs	r3, #0
  403b40:	2201      	movs	r2, #1
  403b42:	a926      	add	r1, sp, #152	; 0x98
  403b44:	f88d 6098 	strb.w	r6, [sp, #152]	; 0x98
  403b48:	9207      	str	r2, [sp, #28]
  403b4a:	461f      	mov	r7, r3
  403b4c:	910f      	str	r1, [sp, #60]	; 0x3c
  403b4e:	4614      	mov	r4, r2
  403b50:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  403b54:	9310      	str	r3, [sp, #64]	; 0x40
  403b56:	9311      	str	r3, [sp, #68]	; 0x44
  403b58:	e4f5      	b.n	403546 <_svfprintf_r+0x22e>
  403b5a:	9809      	ldr	r0, [sp, #36]	; 0x24
  403b5c:	4649      	mov	r1, r9
  403b5e:	aa23      	add	r2, sp, #140	; 0x8c
  403b60:	f003 fd6a 	bl	407638 <__ssprint_r>
  403b64:	2800      	cmp	r0, #0
  403b66:	f47f ac9c 	bne.w	4034a2 <_svfprintf_r+0x18a>
  403b6a:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  403b6e:	46c3      	mov	fp, r8
  403b70:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
  403b74:	e53f      	b.n	4035f6 <_svfprintf_r+0x2de>
  403b76:	2e65      	cmp	r6, #101	; 0x65
  403b78:	f340 80c9 	ble.w	403d0e <_svfprintf_r+0x9f6>
  403b7c:	9813      	ldr	r0, [sp, #76]	; 0x4c
  403b7e:	2200      	movs	r2, #0
  403b80:	2300      	movs	r3, #0
  403b82:	9914      	ldr	r1, [sp, #80]	; 0x50
  403b84:	f8cd c034 	str.w	ip, [sp, #52]	; 0x34
  403b88:	f004 fb38 	bl	4081fc <__aeabi_dcmpeq>
  403b8c:	f8dd c034 	ldr.w	ip, [sp, #52]	; 0x34
  403b90:	2800      	cmp	r0, #0
  403b92:	f000 8165 	beq.w	403e60 <_svfprintf_r+0xb48>
  403b96:	9b24      	ldr	r3, [sp, #144]	; 0x90
  403b98:	2201      	movs	r2, #1
  403b9a:	f10c 0c01 	add.w	ip, ip, #1
  403b9e:	492c      	ldr	r1, [pc, #176]	; (403c50 <_svfprintf_r+0x938>)
  403ba0:	4413      	add	r3, r2
  403ba2:	f8cb 2004 	str.w	r2, [fp, #4]
  403ba6:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
  403baa:	2b07      	cmp	r3, #7
  403bac:	f8cb 1000 	str.w	r1, [fp]
  403bb0:	9324      	str	r3, [sp, #144]	; 0x90
  403bb2:	f300 8343 	bgt.w	40423c <_svfprintf_r+0xf24>
  403bb6:	f10b 0b08 	add.w	fp, fp, #8
  403bba:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  403bbc:	9a12      	ldr	r2, [sp, #72]	; 0x48
  403bbe:	4293      	cmp	r3, r2
  403bc0:	db03      	blt.n	403bca <_svfprintf_r+0x8b2>
  403bc2:	9b06      	ldr	r3, [sp, #24]
  403bc4:	07de      	lsls	r6, r3, #31
  403bc6:	f57f ad92 	bpl.w	4036ee <_svfprintf_r+0x3d6>
  403bca:	9b24      	ldr	r3, [sp, #144]	; 0x90
  403bcc:	9917      	ldr	r1, [sp, #92]	; 0x5c
  403bce:	3301      	adds	r3, #1
  403bd0:	9a16      	ldr	r2, [sp, #88]	; 0x58
  403bd2:	448c      	add	ip, r1
  403bd4:	f8cb 1004 	str.w	r1, [fp, #4]
  403bd8:	2b07      	cmp	r3, #7
  403bda:	f8cb 2000 	str.w	r2, [fp]
  403bde:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
  403be2:	9324      	str	r3, [sp, #144]	; 0x90
  403be4:	f300 841d 	bgt.w	404422 <_svfprintf_r+0x110a>
  403be8:	f10b 0b08 	add.w	fp, fp, #8
  403bec:	9b12      	ldr	r3, [sp, #72]	; 0x48
  403bee:	1e5c      	subs	r4, r3, #1
  403bf0:	2c00      	cmp	r4, #0
  403bf2:	f77f ad7c 	ble.w	4036ee <_svfprintf_r+0x3d6>
  403bf6:	2c10      	cmp	r4, #16
  403bf8:	9b24      	ldr	r3, [sp, #144]	; 0x90
  403bfa:	f340 85bc 	ble.w	404776 <_svfprintf_r+0x145e>
  403bfe:	2610      	movs	r6, #16
  403c00:	4d14      	ldr	r5, [pc, #80]	; (403c54 <_svfprintf_r+0x93c>)
  403c02:	4662      	mov	r2, ip
  403c04:	9f09      	ldr	r7, [sp, #36]	; 0x24
  403c06:	e003      	b.n	403c10 <_svfprintf_r+0x8f8>
  403c08:	3c10      	subs	r4, #16
  403c0a:	2c10      	cmp	r4, #16
  403c0c:	f340 81c8 	ble.w	403fa0 <_svfprintf_r+0xc88>
  403c10:	3301      	adds	r3, #1
  403c12:	3210      	adds	r2, #16
  403c14:	f8cb 5000 	str.w	r5, [fp]
  403c18:	f10b 0b08 	add.w	fp, fp, #8
  403c1c:	2b07      	cmp	r3, #7
  403c1e:	f84b 6c04 	str.w	r6, [fp, #-4]
  403c22:	9225      	str	r2, [sp, #148]	; 0x94
  403c24:	9324      	str	r3, [sp, #144]	; 0x90
  403c26:	ddef      	ble.n	403c08 <_svfprintf_r+0x8f0>
  403c28:	4638      	mov	r0, r7
  403c2a:	4649      	mov	r1, r9
  403c2c:	aa23      	add	r2, sp, #140	; 0x8c
  403c2e:	46c3      	mov	fp, r8
  403c30:	f003 fd02 	bl	407638 <__ssprint_r>
  403c34:	2800      	cmp	r0, #0
  403c36:	f47f ac34 	bne.w	4034a2 <_svfprintf_r+0x18a>
  403c3a:	9a25      	ldr	r2, [sp, #148]	; 0x94
  403c3c:	9b24      	ldr	r3, [sp, #144]	; 0x90
  403c3e:	e7e3      	b.n	403c08 <_svfprintf_r+0x8f0>
  403c40:	00408a74 	.word	0x00408a74
  403c44:	00408a88 	.word	0x00408a88
  403c48:	00408a68 	.word	0x00408a68
  403c4c:	00408a64 	.word	0x00408a64
  403c50:	00408aa4 	.word	0x00408aa4
  403c54:	00408a44 	.word	0x00408a44
  403c58:	2b01      	cmp	r3, #1
  403c5a:	f000 814d 	beq.w	403ef8 <_svfprintf_r+0xbe0>
  403c5e:	2b02      	cmp	r3, #2
  403c60:	f040 80e3 	bne.w	403e2a <_svfprintf_r+0xb12>
  403c64:	46c2      	mov	sl, r8
  403c66:	9815      	ldr	r0, [sp, #84]	; 0x54
  403c68:	0923      	lsrs	r3, r4, #4
  403c6a:	f004 010f 	and.w	r1, r4, #15
  403c6e:	092a      	lsrs	r2, r5, #4
  403c70:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
  403c74:	4615      	mov	r5, r2
  403c76:	461c      	mov	r4, r3
  403c78:	5c43      	ldrb	r3, [r0, r1]
  403c7a:	f80a 3d01 	strb.w	r3, [sl, #-1]!
  403c7e:	ea54 0305 	orrs.w	r3, r4, r5
  403c82:	d1f1      	bne.n	403c68 <_svfprintf_r+0x950>
  403c84:	4653      	mov	r3, sl
  403c86:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
  403c8a:	ebc3 0408 	rsb	r4, r3, r8
  403c8e:	e44f      	b.n	403530 <_svfprintf_r+0x218>
  403c90:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  403c92:	9a07      	ldr	r2, [sp, #28]
  403c94:	1a9f      	subs	r7, r3, r2
  403c96:	2f00      	cmp	r7, #0
  403c98:	f77f acd9 	ble.w	40364e <_svfprintf_r+0x336>
  403c9c:	2f10      	cmp	r7, #16
  403c9e:	9b24      	ldr	r3, [sp, #144]	; 0x90
  403ca0:	f340 84f9 	ble.w	404696 <_svfprintf_r+0x137e>
  403ca4:	940d      	str	r4, [sp, #52]	; 0x34
  403ca6:	f04f 0a10 	mov.w	sl, #16
  403caa:	4dc8      	ldr	r5, [pc, #800]	; (403fcc <_svfprintf_r+0xcb4>)
  403cac:	4662      	mov	r2, ip
  403cae:	9c09      	ldr	r4, [sp, #36]	; 0x24
  403cb0:	e002      	b.n	403cb8 <_svfprintf_r+0x9a0>
  403cb2:	3f10      	subs	r7, #16
  403cb4:	2f10      	cmp	r7, #16
  403cb6:	dd19      	ble.n	403cec <_svfprintf_r+0x9d4>
  403cb8:	3301      	adds	r3, #1
  403cba:	3210      	adds	r2, #16
  403cbc:	f8cb 5000 	str.w	r5, [fp]
  403cc0:	f10b 0b08 	add.w	fp, fp, #8
  403cc4:	2b07      	cmp	r3, #7
  403cc6:	f84b ac04 	str.w	sl, [fp, #-4]
  403cca:	9225      	str	r2, [sp, #148]	; 0x94
  403ccc:	9324      	str	r3, [sp, #144]	; 0x90
  403cce:	ddf0      	ble.n	403cb2 <_svfprintf_r+0x99a>
  403cd0:	4620      	mov	r0, r4
  403cd2:	4649      	mov	r1, r9
  403cd4:	aa23      	add	r2, sp, #140	; 0x8c
  403cd6:	46c3      	mov	fp, r8
  403cd8:	f003 fcae 	bl	407638 <__ssprint_r>
  403cdc:	2800      	cmp	r0, #0
  403cde:	f47f abe0 	bne.w	4034a2 <_svfprintf_r+0x18a>
  403ce2:	3f10      	subs	r7, #16
  403ce4:	9a25      	ldr	r2, [sp, #148]	; 0x94
  403ce6:	9b24      	ldr	r3, [sp, #144]	; 0x90
  403ce8:	2f10      	cmp	r7, #16
  403cea:	dce5      	bgt.n	403cb8 <_svfprintf_r+0x9a0>
  403cec:	9c0d      	ldr	r4, [sp, #52]	; 0x34
  403cee:	4694      	mov	ip, r2
  403cf0:	3301      	adds	r3, #1
  403cf2:	44bc      	add	ip, r7
  403cf4:	f8cb 5000 	str.w	r5, [fp]
  403cf8:	2b07      	cmp	r3, #7
  403cfa:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
  403cfe:	9324      	str	r3, [sp, #144]	; 0x90
  403d00:	f8cb 7004 	str.w	r7, [fp, #4]
  403d04:	f300 81fc 	bgt.w	404100 <_svfprintf_r+0xde8>
  403d08:	f10b 0b08 	add.w	fp, fp, #8
  403d0c:	e49f      	b.n	40364e <_svfprintf_r+0x336>
  403d0e:	9b12      	ldr	r3, [sp, #72]	; 0x48
  403d10:	f10c 0601 	add.w	r6, ip, #1
  403d14:	9c24      	ldr	r4, [sp, #144]	; 0x90
  403d16:	2b01      	cmp	r3, #1
  403d18:	f340 81c9 	ble.w	4040ae <_svfprintf_r+0xd96>
  403d1c:	2301      	movs	r3, #1
  403d1e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  403d20:	9625      	str	r6, [sp, #148]	; 0x94
  403d22:	441c      	add	r4, r3
  403d24:	f8cb 2000 	str.w	r2, [fp]
  403d28:	f8cb 3004 	str.w	r3, [fp, #4]
  403d2c:	2c07      	cmp	r4, #7
  403d2e:	9424      	str	r4, [sp, #144]	; 0x90
  403d30:	f300 81da 	bgt.w	4040e8 <_svfprintf_r+0xdd0>
  403d34:	f10b 0b08 	add.w	fp, fp, #8
  403d38:	9a17      	ldr	r2, [sp, #92]	; 0x5c
  403d3a:	3401      	adds	r4, #1
  403d3c:	9b16      	ldr	r3, [sp, #88]	; 0x58
  403d3e:	4416      	add	r6, r2
  403d40:	2c07      	cmp	r4, #7
  403d42:	f8cb 3000 	str.w	r3, [fp]
  403d46:	9625      	str	r6, [sp, #148]	; 0x94
  403d48:	9424      	str	r4, [sp, #144]	; 0x90
  403d4a:	f8cb 2004 	str.w	r2, [fp, #4]
  403d4e:	f300 81bf 	bgt.w	4040d0 <_svfprintf_r+0xdb8>
  403d52:	f10b 0b08 	add.w	fp, fp, #8
  403d56:	2300      	movs	r3, #0
  403d58:	9813      	ldr	r0, [sp, #76]	; 0x4c
  403d5a:	2200      	movs	r2, #0
  403d5c:	9914      	ldr	r1, [sp, #80]	; 0x50
  403d5e:	f004 fa4d 	bl	4081fc <__aeabi_dcmpeq>
  403d62:	9b12      	ldr	r3, [sp, #72]	; 0x48
  403d64:	2800      	cmp	r0, #0
  403d66:	f040 80dc 	bne.w	403f22 <_svfprintf_r+0xc0a>
  403d6a:	3b01      	subs	r3, #1
  403d6c:	3401      	adds	r4, #1
  403d6e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  403d70:	441e      	add	r6, r3
  403d72:	2c07      	cmp	r4, #7
  403d74:	f102 0201 	add.w	r2, r2, #1
  403d78:	9424      	str	r4, [sp, #144]	; 0x90
  403d7a:	9625      	str	r6, [sp, #148]	; 0x94
  403d7c:	f8cb 2000 	str.w	r2, [fp]
  403d80:	f8cb 3004 	str.w	r3, [fp, #4]
  403d84:	f300 8100 	bgt.w	403f88 <_svfprintf_r+0xc70>
  403d88:	f10b 0b08 	add.w	fp, fp, #8
  403d8c:	9a19      	ldr	r2, [sp, #100]	; 0x64
  403d8e:	3401      	adds	r4, #1
  403d90:	ab1f      	add	r3, sp, #124	; 0x7c
  403d92:	eb06 0c02 	add.w	ip, r6, r2
  403d96:	2c07      	cmp	r4, #7
  403d98:	f8cb 2004 	str.w	r2, [fp, #4]
  403d9c:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
  403da0:	9424      	str	r4, [sp, #144]	; 0x90
  403da2:	f8cb 3000 	str.w	r3, [fp]
  403da6:	f77f aca0 	ble.w	4036ea <_svfprintf_r+0x3d2>
  403daa:	9809      	ldr	r0, [sp, #36]	; 0x24
  403dac:	4649      	mov	r1, r9
  403dae:	aa23      	add	r2, sp, #140	; 0x8c
  403db0:	f003 fc42 	bl	407638 <__ssprint_r>
  403db4:	2800      	cmp	r0, #0
  403db6:	f47f ab74 	bne.w	4034a2 <_svfprintf_r+0x18a>
  403dba:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
  403dbe:	46c3      	mov	fp, r8
  403dc0:	e495      	b.n	4036ee <_svfprintf_r+0x3d6>
  403dc2:	9809      	ldr	r0, [sp, #36]	; 0x24
  403dc4:	4649      	mov	r1, r9
  403dc6:	aa23      	add	r2, sp, #140	; 0x8c
  403dc8:	f003 fc36 	bl	407638 <__ssprint_r>
  403dcc:	2800      	cmp	r0, #0
  403dce:	f43f acde 	beq.w	40378e <_svfprintf_r+0x476>
  403dd2:	f7ff bb66 	b.w	4034a2 <_svfprintf_r+0x18a>
  403dd6:	4614      	mov	r4, r2
  403dd8:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
  403ddc:	f7ff bba8 	b.w	403530 <_svfprintf_r+0x218>
  403de0:	9809      	ldr	r0, [sp, #36]	; 0x24
  403de2:	4649      	mov	r1, r9
  403de4:	aa23      	add	r2, sp, #140	; 0x8c
  403de6:	f003 fc27 	bl	407638 <__ssprint_r>
  403dea:	2800      	cmp	r0, #0
  403dec:	f47f ab59 	bne.w	4034a2 <_svfprintf_r+0x18a>
  403df0:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
  403df4:	46c3      	mov	fp, r8
  403df6:	e466      	b.n	4036c6 <_svfprintf_r+0x3ae>
  403df8:	9809      	ldr	r0, [sp, #36]	; 0x24
  403dfa:	4649      	mov	r1, r9
  403dfc:	aa23      	add	r2, sp, #140	; 0x8c
  403dfe:	f003 fc1b 	bl	407638 <__ssprint_r>
  403e02:	2800      	cmp	r0, #0
  403e04:	f47f ab4d 	bne.w	4034a2 <_svfprintf_r+0x18a>
  403e08:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
  403e0c:	46c3      	mov	fp, r8
  403e0e:	e41a      	b.n	403646 <_svfprintf_r+0x32e>
  403e10:	9809      	ldr	r0, [sp, #36]	; 0x24
  403e12:	4649      	mov	r1, r9
  403e14:	aa23      	add	r2, sp, #140	; 0x8c
  403e16:	f003 fc0f 	bl	407638 <__ssprint_r>
  403e1a:	2800      	cmp	r0, #0
  403e1c:	f47f ab41 	bne.w	4034a2 <_svfprintf_r+0x18a>
  403e20:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
  403e24:	46c3      	mov	fp, r8
  403e26:	f7ff bbfa 	b.w	40361e <_svfprintf_r+0x306>
  403e2a:	4641      	mov	r1, r8
  403e2c:	08e2      	lsrs	r2, r4, #3
  403e2e:	f004 0307 	and.w	r3, r4, #7
  403e32:	08e8      	lsrs	r0, r5, #3
  403e34:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
  403e38:	3330      	adds	r3, #48	; 0x30
  403e3a:	4605      	mov	r5, r0
  403e3c:	4614      	mov	r4, r2
  403e3e:	f801 3d01 	strb.w	r3, [r1, #-1]!
  403e42:	ea54 0205 	orrs.w	r2, r4, r5
  403e46:	d1f1      	bne.n	403e2c <_svfprintf_r+0xb14>
  403e48:	9a06      	ldr	r2, [sp, #24]
  403e4a:	910f      	str	r1, [sp, #60]	; 0x3c
  403e4c:	07d0      	lsls	r0, r2, #31
  403e4e:	f100 8164 	bmi.w	40411a <_svfprintf_r+0xe02>
  403e52:	ebc1 0408 	rsb	r4, r1, r8
  403e56:	f7ff bb6b 	b.w	403530 <_svfprintf_r+0x218>
  403e5a:	2302      	movs	r3, #2
  403e5c:	f7ff bb3f 	b.w	4034de <_svfprintf_r+0x1c6>
  403e60:	9c1d      	ldr	r4, [sp, #116]	; 0x74
  403e62:	2c00      	cmp	r4, #0
  403e64:	f340 81f6 	ble.w	404254 <_svfprintf_r+0xf3c>
  403e68:	9a12      	ldr	r2, [sp, #72]	; 0x48
  403e6a:	9911      	ldr	r1, [sp, #68]	; 0x44
  403e6c:	4613      	mov	r3, r2
  403e6e:	428a      	cmp	r2, r1
  403e70:	bfa8      	it	ge
  403e72:	460b      	movge	r3, r1
  403e74:	990f      	ldr	r1, [sp, #60]	; 0x3c
  403e76:	461c      	mov	r4, r3
  403e78:	188f      	adds	r7, r1, r2
  403e7a:	2c00      	cmp	r4, #0
  403e7c:	dd0e      	ble.n	403e9c <_svfprintf_r+0xb84>
  403e7e:	9b24      	ldr	r3, [sp, #144]	; 0x90
  403e80:	44a4      	add	ip, r4
  403e82:	f8cb 1000 	str.w	r1, [fp]
  403e86:	3301      	adds	r3, #1
  403e88:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
  403e8c:	f8cb 4004 	str.w	r4, [fp, #4]
  403e90:	2b07      	cmp	r3, #7
  403e92:	9324      	str	r3, [sp, #144]	; 0x90
  403e94:	f300 8353 	bgt.w	40453e <_svfprintf_r+0x1226>
  403e98:	f10b 0b08 	add.w	fp, fp, #8
  403e9c:	9b11      	ldr	r3, [sp, #68]	; 0x44
  403e9e:	2c00      	cmp	r4, #0
  403ea0:	bfa8      	it	ge
  403ea2:	1b1b      	subge	r3, r3, r4
  403ea4:	2b00      	cmp	r3, #0
  403ea6:	461c      	mov	r4, r3
  403ea8:	f340 80a1 	ble.w	403fee <_svfprintf_r+0xcd6>
  403eac:	2c10      	cmp	r4, #16
  403eae:	9b24      	ldr	r3, [sp, #144]	; 0x90
  403eb0:	f340 846c 	ble.w	40478c <_svfprintf_r+0x1474>
  403eb4:	2610      	movs	r6, #16
  403eb6:	4d45      	ldr	r5, [pc, #276]	; (403fcc <_svfprintf_r+0xcb4>)
  403eb8:	4662      	mov	r2, ip
  403eba:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
  403ebe:	e003      	b.n	403ec8 <_svfprintf_r+0xbb0>
  403ec0:	3c10      	subs	r4, #16
  403ec2:	2c10      	cmp	r4, #16
  403ec4:	f340 8084 	ble.w	403fd0 <_svfprintf_r+0xcb8>
  403ec8:	3301      	adds	r3, #1
  403eca:	3210      	adds	r2, #16
  403ecc:	f8cb 5000 	str.w	r5, [fp]
  403ed0:	f10b 0b08 	add.w	fp, fp, #8
  403ed4:	2b07      	cmp	r3, #7
  403ed6:	f84b 6c04 	str.w	r6, [fp, #-4]
  403eda:	9225      	str	r2, [sp, #148]	; 0x94
  403edc:	9324      	str	r3, [sp, #144]	; 0x90
  403ede:	ddef      	ble.n	403ec0 <_svfprintf_r+0xba8>
  403ee0:	4650      	mov	r0, sl
  403ee2:	4649      	mov	r1, r9
  403ee4:	aa23      	add	r2, sp, #140	; 0x8c
  403ee6:	46c3      	mov	fp, r8
  403ee8:	f003 fba6 	bl	407638 <__ssprint_r>
  403eec:	2800      	cmp	r0, #0
  403eee:	f47f aad8 	bne.w	4034a2 <_svfprintf_r+0x18a>
  403ef2:	9a25      	ldr	r2, [sp, #148]	; 0x94
  403ef4:	9b24      	ldr	r3, [sp, #144]	; 0x90
  403ef6:	e7e3      	b.n	403ec0 <_svfprintf_r+0xba8>
  403ef8:	2d00      	cmp	r5, #0
  403efa:	bf08      	it	eq
  403efc:	2c0a      	cmpeq	r4, #10
  403efe:	f080 811a 	bcs.w	404136 <_svfprintf_r+0xe1e>
  403f02:	f50d 7a80 	add.w	sl, sp, #256	; 0x100
  403f06:	3430      	adds	r4, #48	; 0x30
  403f08:	f80a 4d41 	strb.w	r4, [sl, #-65]!
  403f0c:	ebca 0408 	rsb	r4, sl, r8
  403f10:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
  403f14:	f7ff bb0c 	b.w	403530 <_svfprintf_r+0x218>
  403f18:	461c      	mov	r4, r3
  403f1a:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
  403f1e:	f7ff bb07 	b.w	403530 <_svfprintf_r+0x218>
  403f22:	1e5f      	subs	r7, r3, #1
  403f24:	2f00      	cmp	r7, #0
  403f26:	f77f af31 	ble.w	403d8c <_svfprintf_r+0xa74>
  403f2a:	2f10      	cmp	r7, #16
  403f2c:	4d27      	ldr	r5, [pc, #156]	; (403fcc <_svfprintf_r+0xcb4>)
  403f2e:	bfc8      	it	gt
  403f30:	f04f 0a10 	movgt.w	sl, #16
  403f34:	dc03      	bgt.n	403f3e <_svfprintf_r+0xc26>
  403f36:	e01c      	b.n	403f72 <_svfprintf_r+0xc5a>
  403f38:	3f10      	subs	r7, #16
  403f3a:	2f10      	cmp	r7, #16
  403f3c:	dd19      	ble.n	403f72 <_svfprintf_r+0xc5a>
  403f3e:	3401      	adds	r4, #1
  403f40:	3610      	adds	r6, #16
  403f42:	f8cb 5000 	str.w	r5, [fp]
  403f46:	f10b 0b08 	add.w	fp, fp, #8
  403f4a:	2c07      	cmp	r4, #7
  403f4c:	f84b ac04 	str.w	sl, [fp, #-4]
  403f50:	9625      	str	r6, [sp, #148]	; 0x94
  403f52:	9424      	str	r4, [sp, #144]	; 0x90
  403f54:	ddf0      	ble.n	403f38 <_svfprintf_r+0xc20>
  403f56:	9809      	ldr	r0, [sp, #36]	; 0x24
  403f58:	4649      	mov	r1, r9
  403f5a:	aa23      	add	r2, sp, #140	; 0x8c
  403f5c:	46c3      	mov	fp, r8
  403f5e:	f003 fb6b 	bl	407638 <__ssprint_r>
  403f62:	2800      	cmp	r0, #0
  403f64:	f47f aa9d 	bne.w	4034a2 <_svfprintf_r+0x18a>
  403f68:	3f10      	subs	r7, #16
  403f6a:	9e25      	ldr	r6, [sp, #148]	; 0x94
  403f6c:	9c24      	ldr	r4, [sp, #144]	; 0x90
  403f6e:	2f10      	cmp	r7, #16
  403f70:	dce5      	bgt.n	403f3e <_svfprintf_r+0xc26>
  403f72:	3401      	adds	r4, #1
  403f74:	443e      	add	r6, r7
  403f76:	f8cb 5000 	str.w	r5, [fp]
  403f7a:	2c07      	cmp	r4, #7
  403f7c:	9625      	str	r6, [sp, #148]	; 0x94
  403f7e:	9424      	str	r4, [sp, #144]	; 0x90
  403f80:	f8cb 7004 	str.w	r7, [fp, #4]
  403f84:	f77f af00 	ble.w	403d88 <_svfprintf_r+0xa70>
  403f88:	9809      	ldr	r0, [sp, #36]	; 0x24
  403f8a:	4649      	mov	r1, r9
  403f8c:	aa23      	add	r2, sp, #140	; 0x8c
  403f8e:	f003 fb53 	bl	407638 <__ssprint_r>
  403f92:	2800      	cmp	r0, #0
  403f94:	f47f aa85 	bne.w	4034a2 <_svfprintf_r+0x18a>
  403f98:	9e25      	ldr	r6, [sp, #148]	; 0x94
  403f9a:	46c3      	mov	fp, r8
  403f9c:	9c24      	ldr	r4, [sp, #144]	; 0x90
  403f9e:	e6f5      	b.n	403d8c <_svfprintf_r+0xa74>
  403fa0:	4694      	mov	ip, r2
  403fa2:	3301      	adds	r3, #1
  403fa4:	44a4      	add	ip, r4
  403fa6:	f8cb 5000 	str.w	r5, [fp]
  403faa:	2b07      	cmp	r3, #7
  403fac:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
  403fb0:	9324      	str	r3, [sp, #144]	; 0x90
  403fb2:	f8cb 4004 	str.w	r4, [fp, #4]
  403fb6:	f77f ab98 	ble.w	4036ea <_svfprintf_r+0x3d2>
  403fba:	e6f6      	b.n	403daa <_svfprintf_r+0xa92>
  403fbc:	990c      	ldr	r1, [sp, #48]	; 0x30
  403fbe:	2500      	movs	r5, #0
  403fc0:	460a      	mov	r2, r1
  403fc2:	680c      	ldr	r4, [r1, #0]
  403fc4:	3204      	adds	r2, #4
  403fc6:	920c      	str	r2, [sp, #48]	; 0x30
  403fc8:	f7ff ba89 	b.w	4034de <_svfprintf_r+0x1c6>
  403fcc:	00408a44 	.word	0x00408a44
  403fd0:	4694      	mov	ip, r2
  403fd2:	3301      	adds	r3, #1
  403fd4:	44a4      	add	ip, r4
  403fd6:	f8cb 5000 	str.w	r5, [fp]
  403fda:	2b07      	cmp	r3, #7
  403fdc:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
  403fe0:	9324      	str	r3, [sp, #144]	; 0x90
  403fe2:	f8cb 4004 	str.w	r4, [fp, #4]
  403fe6:	f300 82df 	bgt.w	4045a8 <_svfprintf_r+0x1290>
  403fea:	f10b 0b08 	add.w	fp, fp, #8
  403fee:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  403ff0:	9911      	ldr	r1, [sp, #68]	; 0x44
  403ff2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  403ff4:	440a      	add	r2, r1
  403ff6:	4616      	mov	r6, r2
  403ff8:	9a12      	ldr	r2, [sp, #72]	; 0x48
  403ffa:	4293      	cmp	r3, r2
  403ffc:	db45      	blt.n	40408a <_svfprintf_r+0xd72>
  403ffe:	9a06      	ldr	r2, [sp, #24]
  404000:	07d0      	lsls	r0, r2, #31
  404002:	d442      	bmi.n	40408a <_svfprintf_r+0xd72>
  404004:	9a12      	ldr	r2, [sp, #72]	; 0x48
  404006:	1bbc      	subs	r4, r7, r6
  404008:	1ad3      	subs	r3, r2, r3
  40400a:	429c      	cmp	r4, r3
  40400c:	bfa8      	it	ge
  40400e:	461c      	movge	r4, r3
  404010:	2c00      	cmp	r4, #0
  404012:	4625      	mov	r5, r4
  404014:	dd0e      	ble.n	404034 <_svfprintf_r+0xd1c>
  404016:	9a24      	ldr	r2, [sp, #144]	; 0x90
  404018:	44a4      	add	ip, r4
  40401a:	f8cb 6000 	str.w	r6, [fp]
  40401e:	3201      	adds	r2, #1
  404020:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
  404024:	f8cb 4004 	str.w	r4, [fp, #4]
  404028:	2a07      	cmp	r2, #7
  40402a:	9224      	str	r2, [sp, #144]	; 0x90
  40402c:	f300 82a0 	bgt.w	404570 <_svfprintf_r+0x1258>
  404030:	f10b 0b08 	add.w	fp, fp, #8
  404034:	2d00      	cmp	r5, #0
  404036:	bfac      	ite	ge
  404038:	1b5c      	subge	r4, r3, r5
  40403a:	461c      	movlt	r4, r3
  40403c:	2c00      	cmp	r4, #0
  40403e:	f77f ab56 	ble.w	4036ee <_svfprintf_r+0x3d6>
  404042:	2c10      	cmp	r4, #16
  404044:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404046:	f340 8396 	ble.w	404776 <_svfprintf_r+0x145e>
  40404a:	2610      	movs	r6, #16
  40404c:	4db1      	ldr	r5, [pc, #708]	; (404314 <_svfprintf_r+0xffc>)
  40404e:	4662      	mov	r2, ip
  404050:	9f09      	ldr	r7, [sp, #36]	; 0x24
  404052:	e002      	b.n	40405a <_svfprintf_r+0xd42>
  404054:	3c10      	subs	r4, #16
  404056:	2c10      	cmp	r4, #16
  404058:	dda2      	ble.n	403fa0 <_svfprintf_r+0xc88>
  40405a:	3301      	adds	r3, #1
  40405c:	3210      	adds	r2, #16
  40405e:	f8cb 5000 	str.w	r5, [fp]
  404062:	f10b 0b08 	add.w	fp, fp, #8
  404066:	2b07      	cmp	r3, #7
  404068:	f84b 6c04 	str.w	r6, [fp, #-4]
  40406c:	9225      	str	r2, [sp, #148]	; 0x94
  40406e:	9324      	str	r3, [sp, #144]	; 0x90
  404070:	ddf0      	ble.n	404054 <_svfprintf_r+0xd3c>
  404072:	4638      	mov	r0, r7
  404074:	4649      	mov	r1, r9
  404076:	aa23      	add	r2, sp, #140	; 0x8c
  404078:	46c3      	mov	fp, r8
  40407a:	f003 fadd 	bl	407638 <__ssprint_r>
  40407e:	2800      	cmp	r0, #0
  404080:	f47f aa0f 	bne.w	4034a2 <_svfprintf_r+0x18a>
  404084:	9a25      	ldr	r2, [sp, #148]	; 0x94
  404086:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404088:	e7e4      	b.n	404054 <_svfprintf_r+0xd3c>
  40408a:	9a24      	ldr	r2, [sp, #144]	; 0x90
  40408c:	9817      	ldr	r0, [sp, #92]	; 0x5c
  40408e:	3201      	adds	r2, #1
  404090:	9916      	ldr	r1, [sp, #88]	; 0x58
  404092:	4484      	add	ip, r0
  404094:	f8cb 0004 	str.w	r0, [fp, #4]
  404098:	2a07      	cmp	r2, #7
  40409a:	f8cb 1000 	str.w	r1, [fp]
  40409e:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
  4040a2:	9224      	str	r2, [sp, #144]	; 0x90
  4040a4:	f300 8273 	bgt.w	40458e <_svfprintf_r+0x1276>
  4040a8:	f10b 0b08 	add.w	fp, fp, #8
  4040ac:	e7aa      	b.n	404004 <_svfprintf_r+0xcec>
  4040ae:	9b06      	ldr	r3, [sp, #24]
  4040b0:	07d9      	lsls	r1, r3, #31
  4040b2:	f53f ae33 	bmi.w	403d1c <_svfprintf_r+0xa04>
  4040b6:	2301      	movs	r3, #1
  4040b8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4040ba:	9625      	str	r6, [sp, #148]	; 0x94
  4040bc:	441c      	add	r4, r3
  4040be:	f8cb 2000 	str.w	r2, [fp]
  4040c2:	f8cb 3004 	str.w	r3, [fp, #4]
  4040c6:	2c07      	cmp	r4, #7
  4040c8:	9424      	str	r4, [sp, #144]	; 0x90
  4040ca:	f77f ae5d 	ble.w	403d88 <_svfprintf_r+0xa70>
  4040ce:	e75b      	b.n	403f88 <_svfprintf_r+0xc70>
  4040d0:	9809      	ldr	r0, [sp, #36]	; 0x24
  4040d2:	4649      	mov	r1, r9
  4040d4:	aa23      	add	r2, sp, #140	; 0x8c
  4040d6:	f003 faaf 	bl	407638 <__ssprint_r>
  4040da:	2800      	cmp	r0, #0
  4040dc:	f47f a9e1 	bne.w	4034a2 <_svfprintf_r+0x18a>
  4040e0:	9e25      	ldr	r6, [sp, #148]	; 0x94
  4040e2:	46c3      	mov	fp, r8
  4040e4:	9c24      	ldr	r4, [sp, #144]	; 0x90
  4040e6:	e636      	b.n	403d56 <_svfprintf_r+0xa3e>
  4040e8:	9809      	ldr	r0, [sp, #36]	; 0x24
  4040ea:	4649      	mov	r1, r9
  4040ec:	aa23      	add	r2, sp, #140	; 0x8c
  4040ee:	f003 faa3 	bl	407638 <__ssprint_r>
  4040f2:	2800      	cmp	r0, #0
  4040f4:	f47f a9d5 	bne.w	4034a2 <_svfprintf_r+0x18a>
  4040f8:	9e25      	ldr	r6, [sp, #148]	; 0x94
  4040fa:	46c3      	mov	fp, r8
  4040fc:	9c24      	ldr	r4, [sp, #144]	; 0x90
  4040fe:	e61b      	b.n	403d38 <_svfprintf_r+0xa20>
  404100:	9809      	ldr	r0, [sp, #36]	; 0x24
  404102:	4649      	mov	r1, r9
  404104:	aa23      	add	r2, sp, #140	; 0x8c
  404106:	f003 fa97 	bl	407638 <__ssprint_r>
  40410a:	2800      	cmp	r0, #0
  40410c:	f47f a9c9 	bne.w	4034a2 <_svfprintf_r+0x18a>
  404110:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
  404114:	46c3      	mov	fp, r8
  404116:	f7ff ba9a 	b.w	40364e <_svfprintf_r+0x336>
  40411a:	2b30      	cmp	r3, #48	; 0x30
  40411c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40411e:	f43f adb4 	beq.w	403c8a <_svfprintf_r+0x972>
  404122:	3b01      	subs	r3, #1
  404124:	461a      	mov	r2, r3
  404126:	930f      	str	r3, [sp, #60]	; 0x3c
  404128:	2330      	movs	r3, #48	; 0x30
  40412a:	ebc2 0408 	rsb	r4, r2, r8
  40412e:	f801 3c01 	strb.w	r3, [r1, #-1]
  404132:	f7ff b9fd 	b.w	403530 <_svfprintf_r+0x218>
  404136:	46c2      	mov	sl, r8
  404138:	f8cd c01c 	str.w	ip, [sp, #28]
  40413c:	4620      	mov	r0, r4
  40413e:	4629      	mov	r1, r5
  404140:	220a      	movs	r2, #10
  404142:	2300      	movs	r3, #0
  404144:	f004 f8b4 	bl	4082b0 <__aeabi_uldivmod>
  404148:	f102 0e30 	add.w	lr, r2, #48	; 0x30
  40414c:	4620      	mov	r0, r4
  40414e:	4629      	mov	r1, r5
  404150:	2300      	movs	r3, #0
  404152:	220a      	movs	r2, #10
  404154:	f80a ed01 	strb.w	lr, [sl, #-1]!
  404158:	f004 f8aa 	bl	4082b0 <__aeabi_uldivmod>
  40415c:	4604      	mov	r4, r0
  40415e:	460d      	mov	r5, r1
  404160:	ea54 0305 	orrs.w	r3, r4, r5
  404164:	d1ea      	bne.n	40413c <_svfprintf_r+0xe24>
  404166:	f8dd c01c 	ldr.w	ip, [sp, #28]
  40416a:	ebca 0408 	rsb	r4, sl, r8
  40416e:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
  404172:	f7ff b9dd 	b.w	403530 <_svfprintf_r+0x218>
  404176:	9813      	ldr	r0, [sp, #76]	; 0x4c
  404178:	9914      	ldr	r1, [sp, #80]	; 0x50
  40417a:	f8cd c01c 	str.w	ip, [sp, #28]
  40417e:	f003 f9e3 	bl	407548 <__fpclassifyd>
  404182:	f8dd c01c 	ldr.w	ip, [sp, #28]
  404186:	2800      	cmp	r0, #0
  404188:	f040 80cc 	bne.w	404324 <_svfprintf_r+0x100c>
  40418c:	9c06      	ldr	r4, [sp, #24]
  40418e:	2103      	movs	r1, #3
  404190:	4a61      	ldr	r2, [pc, #388]	; (404318 <_svfprintf_r+0x1000>)
  404192:	4b62      	ldr	r3, [pc, #392]	; (40431c <_svfprintf_r+0x1004>)
  404194:	f024 0480 	bic.w	r4, r4, #128	; 0x80
  404198:	9010      	str	r0, [sp, #64]	; 0x40
  40419a:	2e47      	cmp	r6, #71	; 0x47
  40419c:	bfd8      	it	le
  40419e:	461a      	movle	r2, r3
  4041a0:	9406      	str	r4, [sp, #24]
  4041a2:	9107      	str	r1, [sp, #28]
  4041a4:	460c      	mov	r4, r1
  4041a6:	9011      	str	r0, [sp, #68]	; 0x44
  4041a8:	920f      	str	r2, [sp, #60]	; 0x3c
  4041aa:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  4041ae:	f7ff b9c6 	b.w	40353e <_svfprintf_r+0x226>
  4041b2:	9b06      	ldr	r3, [sp, #24]
  4041b4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  4041b6:	f013 0f40 	tst.w	r3, #64	; 0x40
  4041ba:	4613      	mov	r3, r2
  4041bc:	f43f abc9 	beq.w	403952 <_svfprintf_r+0x63a>
  4041c0:	8814      	ldrh	r4, [r2, #0]
  4041c2:	3204      	adds	r2, #4
  4041c4:	2500      	movs	r5, #0
  4041c6:	2301      	movs	r3, #1
  4041c8:	920c      	str	r2, [sp, #48]	; 0x30
  4041ca:	f7ff b988 	b.w	4034de <_svfprintf_r+0x1c6>
  4041ce:	9b06      	ldr	r3, [sp, #24]
  4041d0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  4041d2:	f013 0f40 	tst.w	r3, #64	; 0x40
  4041d6:	4613      	mov	r3, r2
  4041d8:	f000 8130 	beq.w	40443c <_svfprintf_r+0x1124>
  4041dc:	3304      	adds	r3, #4
  4041de:	8814      	ldrh	r4, [r2, #0]
  4041e0:	2500      	movs	r5, #0
  4041e2:	930c      	str	r3, [sp, #48]	; 0x30
  4041e4:	f7ff bbcd 	b.w	403982 <_svfprintf_r+0x66a>
  4041e8:	9b06      	ldr	r3, [sp, #24]
  4041ea:	06dd      	lsls	r5, r3, #27
  4041ec:	d40b      	bmi.n	404206 <_svfprintf_r+0xeee>
  4041ee:	9b06      	ldr	r3, [sp, #24]
  4041f0:	065c      	lsls	r4, r3, #25
  4041f2:	d508      	bpl.n	404206 <_svfprintf_r+0xeee>
  4041f4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  4041f6:	6813      	ldr	r3, [r2, #0]
  4041f8:	3204      	adds	r2, #4
  4041fa:	920c      	str	r2, [sp, #48]	; 0x30
  4041fc:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
  404200:	801a      	strh	r2, [r3, #0]
  404202:	f7ff b8af 	b.w	403364 <_svfprintf_r+0x4c>
  404206:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  404208:	6813      	ldr	r3, [r2, #0]
  40420a:	3204      	adds	r2, #4
  40420c:	920c      	str	r2, [sp, #48]	; 0x30
  40420e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  404210:	601a      	str	r2, [r3, #0]
  404212:	f7ff b8a7 	b.w	403364 <_svfprintf_r+0x4c>
  404216:	9b06      	ldr	r3, [sp, #24]
  404218:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  40421a:	f013 0f40 	tst.w	r3, #64	; 0x40
  40421e:	4613      	mov	r3, r2
  404220:	f43f ac26 	beq.w	403a70 <_svfprintf_r+0x758>
  404224:	f9b2 4000 	ldrsh.w	r4, [r2]
  404228:	3304      	adds	r3, #4
  40422a:	17e5      	asrs	r5, r4, #31
  40422c:	930c      	str	r3, [sp, #48]	; 0x30
  40422e:	4622      	mov	r2, r4
  404230:	462b      	mov	r3, r5
  404232:	f7ff baf9 	b.w	403828 <_svfprintf_r+0x510>
  404236:	4d37      	ldr	r5, [pc, #220]	; (404314 <_svfprintf_r+0xffc>)
  404238:	f7ff ba37 	b.w	4036aa <_svfprintf_r+0x392>
  40423c:	9809      	ldr	r0, [sp, #36]	; 0x24
  40423e:	4649      	mov	r1, r9
  404240:	aa23      	add	r2, sp, #140	; 0x8c
  404242:	f003 f9f9 	bl	407638 <__ssprint_r>
  404246:	2800      	cmp	r0, #0
  404248:	f47f a92b 	bne.w	4034a2 <_svfprintf_r+0x18a>
  40424c:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
  404250:	46c3      	mov	fp, r8
  404252:	e4b2      	b.n	403bba <_svfprintf_r+0x8a2>
  404254:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404256:	2201      	movs	r2, #1
  404258:	f10c 0c01 	add.w	ip, ip, #1
  40425c:	4930      	ldr	r1, [pc, #192]	; (404320 <_svfprintf_r+0x1008>)
  40425e:	4413      	add	r3, r2
  404260:	f8cb 2004 	str.w	r2, [fp, #4]
  404264:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
  404268:	2b07      	cmp	r3, #7
  40426a:	f8cb 1000 	str.w	r1, [fp]
  40426e:	9324      	str	r3, [sp, #144]	; 0x90
  404270:	f300 80fa 	bgt.w	404468 <_svfprintf_r+0x1150>
  404274:	f10b 0b08 	add.w	fp, fp, #8
  404278:	b92c      	cbnz	r4, 404286 <_svfprintf_r+0xf6e>
  40427a:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40427c:	b91b      	cbnz	r3, 404286 <_svfprintf_r+0xf6e>
  40427e:	9b06      	ldr	r3, [sp, #24]
  404280:	07dd      	lsls	r5, r3, #31
  404282:	f57f aa34 	bpl.w	4036ee <_svfprintf_r+0x3d6>
  404286:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404288:	9917      	ldr	r1, [sp, #92]	; 0x5c
  40428a:	3301      	adds	r3, #1
  40428c:	9816      	ldr	r0, [sp, #88]	; 0x58
  40428e:	eb0c 0201 	add.w	r2, ip, r1
  404292:	f8cb 1004 	str.w	r1, [fp, #4]
  404296:	2b07      	cmp	r3, #7
  404298:	f8cb 0000 	str.w	r0, [fp]
  40429c:	9225      	str	r2, [sp, #148]	; 0x94
  40429e:	9324      	str	r3, [sp, #144]	; 0x90
  4042a0:	f300 824c 	bgt.w	40473c <_svfprintf_r+0x1424>
  4042a4:	f10b 0b08 	add.w	fp, fp, #8
  4042a8:	4264      	negs	r4, r4
  4042aa:	2c00      	cmp	r4, #0
  4042ac:	f340 8126 	ble.w	4044fc <_svfprintf_r+0x11e4>
  4042b0:	2c10      	cmp	r4, #16
  4042b2:	4d18      	ldr	r5, [pc, #96]	; (404314 <_svfprintf_r+0xffc>)
  4042b4:	f340 814f 	ble.w	404556 <_svfprintf_r+0x123e>
  4042b8:	2610      	movs	r6, #16
  4042ba:	9f09      	ldr	r7, [sp, #36]	; 0x24
  4042bc:	e003      	b.n	4042c6 <_svfprintf_r+0xfae>
  4042be:	3c10      	subs	r4, #16
  4042c0:	2c10      	cmp	r4, #16
  4042c2:	f340 8148 	ble.w	404556 <_svfprintf_r+0x123e>
  4042c6:	3301      	adds	r3, #1
  4042c8:	3210      	adds	r2, #16
  4042ca:	f8cb 5000 	str.w	r5, [fp]
  4042ce:	f10b 0b08 	add.w	fp, fp, #8
  4042d2:	2b07      	cmp	r3, #7
  4042d4:	f84b 6c04 	str.w	r6, [fp, #-4]
  4042d8:	9225      	str	r2, [sp, #148]	; 0x94
  4042da:	9324      	str	r3, [sp, #144]	; 0x90
  4042dc:	ddef      	ble.n	4042be <_svfprintf_r+0xfa6>
  4042de:	4638      	mov	r0, r7
  4042e0:	4649      	mov	r1, r9
  4042e2:	aa23      	add	r2, sp, #140	; 0x8c
  4042e4:	46c3      	mov	fp, r8
  4042e6:	f003 f9a7 	bl	407638 <__ssprint_r>
  4042ea:	2800      	cmp	r0, #0
  4042ec:	f47f a8d9 	bne.w	4034a2 <_svfprintf_r+0x18a>
  4042f0:	9a25      	ldr	r2, [sp, #148]	; 0x94
  4042f2:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4042f4:	e7e3      	b.n	4042be <_svfprintf_r+0xfa6>
  4042f6:	f041 0120 	orr.w	r1, r1, #32
  4042fa:	785e      	ldrb	r6, [r3, #1]
  4042fc:	9106      	str	r1, [sp, #24]
  4042fe:	1c59      	adds	r1, r3, #1
  404300:	f7ff b85f 	b.w	4033c2 <_svfprintf_r+0xaa>
  404304:	980b      	ldr	r0, [sp, #44]	; 0x2c
  404306:	910c      	str	r1, [sp, #48]	; 0x30
  404308:	4619      	mov	r1, r3
  40430a:	4240      	negs	r0, r0
  40430c:	900b      	str	r0, [sp, #44]	; 0x2c
  40430e:	f7ff ba43 	b.w	403798 <_svfprintf_r+0x480>
  404312:	bf00      	nop
  404314:	00408a44 	.word	0x00408a44
  404318:	00408a70 	.word	0x00408a70
  40431c:	00408a6c 	.word	0x00408a6c
  404320:	00408aa4 	.word	0x00408aa4
  404324:	f1bc 3fff 	cmp.w	ip, #4294967295
  404328:	f026 0a20 	bic.w	sl, r6, #32
  40432c:	f000 80a9 	beq.w	404482 <_svfprintf_r+0x116a>
  404330:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
  404334:	f040 80a7 	bne.w	404486 <_svfprintf_r+0x116e>
  404338:	f1bc 0f00 	cmp.w	ip, #0
  40433c:	f040 80a3 	bne.w	404486 <_svfprintf_r+0x116e>
  404340:	9b06      	ldr	r3, [sp, #24]
  404342:	f04f 0a47 	mov.w	sl, #71	; 0x47
  404346:	f04f 0c01 	mov.w	ip, #1
  40434a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  40434e:	930e      	str	r3, [sp, #56]	; 0x38
  404350:	9b14      	ldr	r3, [sp, #80]	; 0x50
  404352:	2b00      	cmp	r3, #0
  404354:	f2c0 81ff 	blt.w	404756 <_svfprintf_r+0x143e>
  404358:	461d      	mov	r5, r3
  40435a:	9f13      	ldr	r7, [sp, #76]	; 0x4c
  40435c:	2300      	movs	r3, #0
  40435e:	930d      	str	r3, [sp, #52]	; 0x34
  404360:	2002      	movs	r0, #2
  404362:	a91d      	add	r1, sp, #116	; 0x74
  404364:	f8cd c004 	str.w	ip, [sp, #4]
  404368:	463a      	mov	r2, r7
  40436a:	9000      	str	r0, [sp, #0]
  40436c:	a81e      	add	r0, sp, #120	; 0x78
  40436e:	9102      	str	r1, [sp, #8]
  404370:	a921      	add	r1, sp, #132	; 0x84
  404372:	9003      	str	r0, [sp, #12]
  404374:	462b      	mov	r3, r5
  404376:	9809      	ldr	r0, [sp, #36]	; 0x24
  404378:	9104      	str	r1, [sp, #16]
  40437a:	f8cd c01c 	str.w	ip, [sp, #28]
  40437e:	f000 fbbb 	bl	404af8 <_dtoa_r>
  404382:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
  404386:	900f      	str	r0, [sp, #60]	; 0x3c
  404388:	f8dd c01c 	ldr.w	ip, [sp, #28]
  40438c:	f040 8242 	bne.w	404814 <_svfprintf_r+0x14fc>
  404390:	9b06      	ldr	r3, [sp, #24]
  404392:	07db      	lsls	r3, r3, #31
  404394:	f140 81f3 	bpl.w	40477e <_svfprintf_r+0x1466>
  404398:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40439a:	eb03 040c 	add.w	r4, r3, ip
  40439e:	4638      	mov	r0, r7
  4043a0:	2200      	movs	r2, #0
  4043a2:	2300      	movs	r3, #0
  4043a4:	4629      	mov	r1, r5
  4043a6:	f8cd c01c 	str.w	ip, [sp, #28]
  4043aa:	f003 ff27 	bl	4081fc <__aeabi_dcmpeq>
  4043ae:	f8dd c01c 	ldr.w	ip, [sp, #28]
  4043b2:	2800      	cmp	r0, #0
  4043b4:	f040 8172 	bne.w	40469c <_svfprintf_r+0x1384>
  4043b8:	9b21      	ldr	r3, [sp, #132]	; 0x84
  4043ba:	429c      	cmp	r4, r3
  4043bc:	d906      	bls.n	4043cc <_svfprintf_r+0x10b4>
  4043be:	2130      	movs	r1, #48	; 0x30
  4043c0:	1c5a      	adds	r2, r3, #1
  4043c2:	9221      	str	r2, [sp, #132]	; 0x84
  4043c4:	7019      	strb	r1, [r3, #0]
  4043c6:	9b21      	ldr	r3, [sp, #132]	; 0x84
  4043c8:	429c      	cmp	r4, r3
  4043ca:	d8f9      	bhi.n	4043c0 <_svfprintf_r+0x10a8>
  4043cc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4043ce:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
  4043d2:	eba3 0302 	sub.w	r3, r3, r2
  4043d6:	9312      	str	r3, [sp, #72]	; 0x48
  4043d8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  4043da:	f040 8113 	bne.w	404604 <_svfprintf_r+0x12ec>
  4043de:	459c      	cmp	ip, r3
  4043e0:	f2c0 8168 	blt.w	4046b4 <_svfprintf_r+0x139c>
  4043e4:	1cd9      	adds	r1, r3, #3
  4043e6:	f2c0 8165 	blt.w	4046b4 <_svfprintf_r+0x139c>
  4043ea:	2667      	movs	r6, #103	; 0x67
  4043ec:	9311      	str	r3, [sp, #68]	; 0x44
  4043ee:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4043f0:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4043f2:	4293      	cmp	r3, r2
  4043f4:	f300 81b6 	bgt.w	404764 <_svfprintf_r+0x144c>
  4043f8:	9b06      	ldr	r3, [sp, #24]
  4043fa:	07df      	lsls	r7, r3, #31
  4043fc:	f100 81c1 	bmi.w	404782 <_svfprintf_r+0x146a>
  404400:	4614      	mov	r4, r2
  404402:	ea22 7ce2 	bic.w	ip, r2, r2, asr #31
  404406:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  404408:	2b00      	cmp	r3, #0
  40440a:	f040 80f0 	bne.w	4045ee <_svfprintf_r+0x12d6>
  40440e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  404410:	f8cd c01c 	str.w	ip, [sp, #28]
  404414:	9306      	str	r3, [sp, #24]
  404416:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  404418:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  40441c:	9310      	str	r3, [sp, #64]	; 0x40
  40441e:	f7ff b88e 	b.w	40353e <_svfprintf_r+0x226>
  404422:	9809      	ldr	r0, [sp, #36]	; 0x24
  404424:	4649      	mov	r1, r9
  404426:	aa23      	add	r2, sp, #140	; 0x8c
  404428:	f003 f906 	bl	407638 <__ssprint_r>
  40442c:	2800      	cmp	r0, #0
  40442e:	f47f a838 	bne.w	4034a2 <_svfprintf_r+0x18a>
  404432:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
  404436:	46c3      	mov	fp, r8
  404438:	f7ff bbd8 	b.w	403bec <_svfprintf_r+0x8d4>
  40443c:	3304      	adds	r3, #4
  40443e:	6814      	ldr	r4, [r2, #0]
  404440:	2500      	movs	r5, #0
  404442:	930c      	str	r3, [sp, #48]	; 0x30
  404444:	f7ff ba9d 	b.w	403982 <_svfprintf_r+0x66a>
  404448:	9809      	ldr	r0, [sp, #36]	; 0x24
  40444a:	2140      	movs	r1, #64	; 0x40
  40444c:	f001 ff84 	bl	406358 <_malloc_r>
  404450:	f8c9 0000 	str.w	r0, [r9]
  404454:	f8c9 0010 	str.w	r0, [r9, #16]
  404458:	2800      	cmp	r0, #0
  40445a:	f000 81d4 	beq.w	404806 <_svfprintf_r+0x14ee>
  40445e:	2340      	movs	r3, #64	; 0x40
  404460:	f8c9 3014 	str.w	r3, [r9, #20]
  404464:	f7fe bf70 	b.w	403348 <_svfprintf_r+0x30>
  404468:	9809      	ldr	r0, [sp, #36]	; 0x24
  40446a:	4649      	mov	r1, r9
  40446c:	aa23      	add	r2, sp, #140	; 0x8c
  40446e:	f003 f8e3 	bl	407638 <__ssprint_r>
  404472:	2800      	cmp	r0, #0
  404474:	f47f a815 	bne.w	4034a2 <_svfprintf_r+0x18a>
  404478:	9c1d      	ldr	r4, [sp, #116]	; 0x74
  40447a:	46c3      	mov	fp, r8
  40447c:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
  404480:	e6fa      	b.n	404278 <_svfprintf_r+0xf60>
  404482:	f04f 0c06 	mov.w	ip, #6
  404486:	9b06      	ldr	r3, [sp, #24]
  404488:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  40448c:	930e      	str	r3, [sp, #56]	; 0x38
  40448e:	9b14      	ldr	r3, [sp, #80]	; 0x50
  404490:	2b00      	cmp	r3, #0
  404492:	f2c0 8160 	blt.w	404756 <_svfprintf_r+0x143e>
  404496:	461d      	mov	r5, r3
  404498:	9f13      	ldr	r7, [sp, #76]	; 0x4c
  40449a:	2300      	movs	r3, #0
  40449c:	930d      	str	r3, [sp, #52]	; 0x34
  40449e:	f1ba 0f46 	cmp.w	sl, #70	; 0x46
  4044a2:	f000 80c4 	beq.w	40462e <_svfprintf_r+0x1316>
  4044a6:	f1ba 0f45 	cmp.w	sl, #69	; 0x45
  4044aa:	f47f af59 	bne.w	404360 <_svfprintf_r+0x1048>
  4044ae:	f10c 0401 	add.w	r4, ip, #1
  4044b2:	f8cd c01c 	str.w	ip, [sp, #28]
  4044b6:	f10d 0e74 	add.w	lr, sp, #116	; 0x74
  4044ba:	f10d 0c84 	add.w	ip, sp, #132	; 0x84
  4044be:	a81e      	add	r0, sp, #120	; 0x78
  4044c0:	2102      	movs	r1, #2
  4044c2:	f8cd c010 	str.w	ip, [sp, #16]
  4044c6:	463a      	mov	r2, r7
  4044c8:	9003      	str	r0, [sp, #12]
  4044ca:	462b      	mov	r3, r5
  4044cc:	9401      	str	r4, [sp, #4]
  4044ce:	9100      	str	r1, [sp, #0]
  4044d0:	f8cd e008 	str.w	lr, [sp, #8]
  4044d4:	9809      	ldr	r0, [sp, #36]	; 0x24
  4044d6:	f000 fb0f 	bl	404af8 <_dtoa_r>
  4044da:	f8dd c01c 	ldr.w	ip, [sp, #28]
  4044de:	900f      	str	r0, [sp, #60]	; 0x3c
  4044e0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4044e2:	441c      	add	r4, r3
  4044e4:	e75b      	b.n	40439e <_svfprintf_r+0x1086>
  4044e6:	9809      	ldr	r0, [sp, #36]	; 0x24
  4044e8:	4649      	mov	r1, r9
  4044ea:	aa23      	add	r2, sp, #140	; 0x8c
  4044ec:	f003 f8a4 	bl	407638 <__ssprint_r>
  4044f0:	2800      	cmp	r0, #0
  4044f2:	f47e afd6 	bne.w	4034a2 <_svfprintf_r+0x18a>
  4044f6:	9a25      	ldr	r2, [sp, #148]	; 0x94
  4044f8:	46c3      	mov	fp, r8
  4044fa:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4044fc:	9812      	ldr	r0, [sp, #72]	; 0x48
  4044fe:	3301      	adds	r3, #1
  404500:	eb02 0c00 	add.w	ip, r2, r0
  404504:	2b07      	cmp	r3, #7
  404506:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  404508:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
  40450c:	f8cb 2000 	str.w	r2, [fp]
  404510:	9324      	str	r3, [sp, #144]	; 0x90
  404512:	f8cb 0004 	str.w	r0, [fp, #4]
  404516:	f77f a8e8 	ble.w	4036ea <_svfprintf_r+0x3d2>
  40451a:	e446      	b.n	403daa <_svfprintf_r+0xa92>
  40451c:	9510      	str	r5, [sp, #64]	; 0x40
  40451e:	f7fe fecd 	bl	4032bc <strlen>
  404522:	ea20 73e0 	bic.w	r3, r0, r0, asr #31
  404526:	970c      	str	r7, [sp, #48]	; 0x30
  404528:	4604      	mov	r4, r0
  40452a:	9511      	str	r5, [sp, #68]	; 0x44
  40452c:	9307      	str	r3, [sp, #28]
  40452e:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  404532:	f7ff b804 	b.w	40353e <_svfprintf_r+0x226>
  404536:	9a24      	ldr	r2, [sp, #144]	; 0x90
  404538:	4fb7      	ldr	r7, [pc, #732]	; (404818 <_svfprintf_r+0x1500>)
  40453a:	f7ff b84b 	b.w	4035d4 <_svfprintf_r+0x2bc>
  40453e:	9809      	ldr	r0, [sp, #36]	; 0x24
  404540:	4649      	mov	r1, r9
  404542:	aa23      	add	r2, sp, #140	; 0x8c
  404544:	f003 f878 	bl	407638 <__ssprint_r>
  404548:	2800      	cmp	r0, #0
  40454a:	f47e afaa 	bne.w	4034a2 <_svfprintf_r+0x18a>
  40454e:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
  404552:	46c3      	mov	fp, r8
  404554:	e4a2      	b.n	403e9c <_svfprintf_r+0xb84>
  404556:	3301      	adds	r3, #1
  404558:	4422      	add	r2, r4
  40455a:	f8cb 5000 	str.w	r5, [fp]
  40455e:	2b07      	cmp	r3, #7
  404560:	9225      	str	r2, [sp, #148]	; 0x94
  404562:	9324      	str	r3, [sp, #144]	; 0x90
  404564:	f8cb 4004 	str.w	r4, [fp, #4]
  404568:	dcbd      	bgt.n	4044e6 <_svfprintf_r+0x11ce>
  40456a:	f10b 0b08 	add.w	fp, fp, #8
  40456e:	e7c5      	b.n	4044fc <_svfprintf_r+0x11e4>
  404570:	9809      	ldr	r0, [sp, #36]	; 0x24
  404572:	4649      	mov	r1, r9
  404574:	aa23      	add	r2, sp, #140	; 0x8c
  404576:	f003 f85f 	bl	407638 <__ssprint_r>
  40457a:	2800      	cmp	r0, #0
  40457c:	f47e af91 	bne.w	4034a2 <_svfprintf_r+0x18a>
  404580:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  404582:	46c3      	mov	fp, r8
  404584:	9a12      	ldr	r2, [sp, #72]	; 0x48
  404586:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
  40458a:	1ad3      	subs	r3, r2, r3
  40458c:	e552      	b.n	404034 <_svfprintf_r+0xd1c>
  40458e:	9809      	ldr	r0, [sp, #36]	; 0x24
  404590:	4649      	mov	r1, r9
  404592:	aa23      	add	r2, sp, #140	; 0x8c
  404594:	f003 f850 	bl	407638 <__ssprint_r>
  404598:	2800      	cmp	r0, #0
  40459a:	f47e af82 	bne.w	4034a2 <_svfprintf_r+0x18a>
  40459e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  4045a0:	46c3      	mov	fp, r8
  4045a2:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
  4045a6:	e52d      	b.n	404004 <_svfprintf_r+0xcec>
  4045a8:	9809      	ldr	r0, [sp, #36]	; 0x24
  4045aa:	4649      	mov	r1, r9
  4045ac:	aa23      	add	r2, sp, #140	; 0x8c
  4045ae:	f003 f843 	bl	407638 <__ssprint_r>
  4045b2:	2800      	cmp	r0, #0
  4045b4:	f47e af75 	bne.w	4034a2 <_svfprintf_r+0x18a>
  4045b8:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
  4045bc:	46c3      	mov	fp, r8
  4045be:	e516      	b.n	403fee <_svfprintf_r+0xcd6>
  4045c0:	2c06      	cmp	r4, #6
  4045c2:	970c      	str	r7, [sp, #48]	; 0x30
  4045c4:	9310      	str	r3, [sp, #64]	; 0x40
  4045c6:	461f      	mov	r7, r3
  4045c8:	bf28      	it	cs
  4045ca:	2406      	movcs	r4, #6
  4045cc:	9711      	str	r7, [sp, #68]	; 0x44
  4045ce:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
  4045d2:	9307      	str	r3, [sp, #28]
  4045d4:	4b91      	ldr	r3, [pc, #580]	; (40481c <_svfprintf_r+0x1504>)
  4045d6:	930f      	str	r3, [sp, #60]	; 0x3c
  4045d8:	f7fe bfb1 	b.w	40353e <_svfprintf_r+0x226>
  4045dc:	4f8e      	ldr	r7, [pc, #568]	; (404818 <_svfprintf_r+0x1500>)
  4045de:	f7ff b8b5 	b.w	40374c <_svfprintf_r+0x434>
  4045e2:	232d      	movs	r3, #45	; 0x2d
  4045e4:	461f      	mov	r7, r3
  4045e6:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  4045ea:	f7ff ba7a 	b.w	403ae2 <_svfprintf_r+0x7ca>
  4045ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4045f0:	272d      	movs	r7, #45	; 0x2d
  4045f2:	f8cd c01c 	str.w	ip, [sp, #28]
  4045f6:	9306      	str	r3, [sp, #24]
  4045f8:	2300      	movs	r3, #0
  4045fa:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
  4045fe:	9310      	str	r3, [sp, #64]	; 0x40
  404600:	f7fe bf9e 	b.w	403540 <_svfprintf_r+0x228>
  404604:	2e65      	cmp	r6, #101	; 0x65
  404606:	dd56      	ble.n	4046b6 <_svfprintf_r+0x139e>
  404608:	2e66      	cmp	r6, #102	; 0x66
  40460a:	9311      	str	r3, [sp, #68]	; 0x44
  40460c:	f47f aeef 	bne.w	4043ee <_svfprintf_r+0x10d6>
  404610:	2b00      	cmp	r3, #0
  404612:	f340 80d6 	ble.w	4047c2 <_svfprintf_r+0x14aa>
  404616:	f1bc 0f00 	cmp.w	ip, #0
  40461a:	f040 80c1 	bne.w	4047a0 <_svfprintf_r+0x1488>
  40461e:	9b06      	ldr	r3, [sp, #24]
  404620:	07da      	lsls	r2, r3, #31
  404622:	f100 80bd 	bmi.w	4047a0 <_svfprintf_r+0x1488>
  404626:	9c11      	ldr	r4, [sp, #68]	; 0x44
  404628:	ea24 7ce4 	bic.w	ip, r4, r4, asr #31
  40462c:	e6eb      	b.n	404406 <_svfprintf_r+0x10ee>
  40462e:	2003      	movs	r0, #3
  404630:	a91d      	add	r1, sp, #116	; 0x74
  404632:	463a      	mov	r2, r7
  404634:	f8cd c004 	str.w	ip, [sp, #4]
  404638:	9000      	str	r0, [sp, #0]
  40463a:	a81e      	add	r0, sp, #120	; 0x78
  40463c:	9102      	str	r1, [sp, #8]
  40463e:	a921      	add	r1, sp, #132	; 0x84
  404640:	462b      	mov	r3, r5
  404642:	9003      	str	r0, [sp, #12]
  404644:	9104      	str	r1, [sp, #16]
  404646:	9809      	ldr	r0, [sp, #36]	; 0x24
  404648:	f8cd c01c 	str.w	ip, [sp, #28]
  40464c:	f000 fa54 	bl	404af8 <_dtoa_r>
  404650:	f8dd c01c 	ldr.w	ip, [sp, #28]
  404654:	4602      	mov	r2, r0
  404656:	7803      	ldrb	r3, [r0, #0]
  404658:	4462      	add	r2, ip
  40465a:	900f      	str	r0, [sp, #60]	; 0x3c
  40465c:	2b30      	cmp	r3, #48	; 0x30
  40465e:	9207      	str	r2, [sp, #28]
  404660:	f040 808b 	bne.w	40477a <_svfprintf_r+0x1462>
  404664:	4638      	mov	r0, r7
  404666:	2200      	movs	r2, #0
  404668:	2300      	movs	r3, #0
  40466a:	4629      	mov	r1, r5
  40466c:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
  404670:	f04f 0401 	mov.w	r4, #1
  404674:	f003 fdc2 	bl	4081fc <__aeabi_dcmpeq>
  404678:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
  40467c:	b108      	cbz	r0, 404682 <_svfprintf_r+0x136a>
  40467e:	f04f 0400 	mov.w	r4, #0
  404682:	f014 0fff 	tst.w	r4, #255	; 0xff
  404686:	d078      	beq.n	40477a <_svfprintf_r+0x1462>
  404688:	f1cc 0401 	rsb	r4, ip, #1
  40468c:	941d      	str	r4, [sp, #116]	; 0x74
  40468e:	9b07      	ldr	r3, [sp, #28]
  404690:	4423      	add	r3, r4
  404692:	461c      	mov	r4, r3
  404694:	e683      	b.n	40439e <_svfprintf_r+0x1086>
  404696:	4d62      	ldr	r5, [pc, #392]	; (404820 <_svfprintf_r+0x1508>)
  404698:	f7ff bb2a 	b.w	403cf0 <_svfprintf_r+0x9d8>
  40469c:	4623      	mov	r3, r4
  40469e:	e695      	b.n	4043cc <_svfprintf_r+0x10b4>
  4046a0:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
  4046a4:	970c      	str	r7, [sp, #48]	; 0x30
  4046a6:	9010      	str	r0, [sp, #64]	; 0x40
  4046a8:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  4046ac:	9307      	str	r3, [sp, #28]
  4046ae:	9011      	str	r0, [sp, #68]	; 0x44
  4046b0:	f7fe bf45 	b.w	40353e <_svfprintf_r+0x226>
  4046b4:	3e02      	subs	r6, #2
  4046b6:	3b01      	subs	r3, #1
  4046b8:	f88d 607c 	strb.w	r6, [sp, #124]	; 0x7c
  4046bc:	2b00      	cmp	r3, #0
  4046be:	931d      	str	r3, [sp, #116]	; 0x74
  4046c0:	db75      	blt.n	4047ae <_svfprintf_r+0x1496>
  4046c2:	222b      	movs	r2, #43	; 0x2b
  4046c4:	f88d 207d 	strb.w	r2, [sp, #125]	; 0x7d
  4046c8:	2b09      	cmp	r3, #9
  4046ca:	dd61      	ble.n	404790 <_svfprintf_r+0x1478>
  4046cc:	f10d 008b 	add.w	r0, sp, #139	; 0x8b
  4046d0:	4601      	mov	r1, r0
  4046d2:	4a54      	ldr	r2, [pc, #336]	; (404824 <_svfprintf_r+0x150c>)
  4046d4:	fb82 2403 	smull	r2, r4, r2, r3
  4046d8:	17da      	asrs	r2, r3, #31
  4046da:	ebc2 04a4 	rsb	r4, r2, r4, asr #2
  4046de:	eb04 0284 	add.w	r2, r4, r4, lsl #2
  4046e2:	2c09      	cmp	r4, #9
  4046e4:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
  4046e8:	4623      	mov	r3, r4
  4046ea:	f102 0230 	add.w	r2, r2, #48	; 0x30
  4046ee:	f801 2d01 	strb.w	r2, [r1, #-1]!
  4046f2:	dcee      	bgt.n	4046d2 <_svfprintf_r+0x13ba>
  4046f4:	3330      	adds	r3, #48	; 0x30
  4046f6:	460a      	mov	r2, r1
  4046f8:	b2db      	uxtb	r3, r3
  4046fa:	f802 3d01 	strb.w	r3, [r2, #-1]!
  4046fe:	4290      	cmp	r0, r2
  404700:	d97e      	bls.n	404800 <_svfprintf_r+0x14e8>
  404702:	460a      	mov	r2, r1
  404704:	f10d 047e 	add.w	r4, sp, #126	; 0x7e
  404708:	e001      	b.n	40470e <_svfprintf_r+0x13f6>
  40470a:	f812 3b01 	ldrb.w	r3, [r2], #1
  40470e:	4282      	cmp	r2, r0
  404710:	f804 3b01 	strb.w	r3, [r4], #1
  404714:	d1f9      	bne.n	40470a <_svfprintf_r+0x13f2>
  404716:	ab23      	add	r3, sp, #140	; 0x8c
  404718:	f10d 027e 	add.w	r2, sp, #126	; 0x7e
  40471c:	1a5b      	subs	r3, r3, r1
  40471e:	4413      	add	r3, r2
  404720:	aa1f      	add	r2, sp, #124	; 0x7c
  404722:	1a9b      	subs	r3, r3, r2
  404724:	9a12      	ldr	r2, [sp, #72]	; 0x48
  404726:	2a01      	cmp	r2, #1
  404728:	9319      	str	r3, [sp, #100]	; 0x64
  40472a:	eb02 0403 	add.w	r4, r2, r3
  40472e:	dd43      	ble.n	4047b8 <_svfprintf_r+0x14a0>
  404730:	3401      	adds	r4, #1
  404732:	2300      	movs	r3, #0
  404734:	9311      	str	r3, [sp, #68]	; 0x44
  404736:	ea24 7ce4 	bic.w	ip, r4, r4, asr #31
  40473a:	e664      	b.n	404406 <_svfprintf_r+0x10ee>
  40473c:	9809      	ldr	r0, [sp, #36]	; 0x24
  40473e:	4649      	mov	r1, r9
  404740:	aa23      	add	r2, sp, #140	; 0x8c
  404742:	f002 ff79 	bl	407638 <__ssprint_r>
  404746:	2800      	cmp	r0, #0
  404748:	f47e aeab 	bne.w	4034a2 <_svfprintf_r+0x18a>
  40474c:	9c1d      	ldr	r4, [sp, #116]	; 0x74
  40474e:	46c3      	mov	fp, r8
  404750:	9a25      	ldr	r2, [sp, #148]	; 0x94
  404752:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404754:	e5a8      	b.n	4042a8 <_svfprintf_r+0xf90>
  404756:	9b14      	ldr	r3, [sp, #80]	; 0x50
  404758:	9f13      	ldr	r7, [sp, #76]	; 0x4c
  40475a:	f103 4500 	add.w	r5, r3, #2147483648	; 0x80000000
  40475e:	232d      	movs	r3, #45	; 0x2d
  404760:	930d      	str	r3, [sp, #52]	; 0x34
  404762:	e69c      	b.n	40449e <_svfprintf_r+0x1186>
  404764:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404766:	2b00      	cmp	r3, #0
  404768:	dd35      	ble.n	4047d6 <_svfprintf_r+0x14be>
  40476a:	2401      	movs	r4, #1
  40476c:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40476e:	441c      	add	r4, r3
  404770:	ea24 7ce4 	bic.w	ip, r4, r4, asr #31
  404774:	e647      	b.n	404406 <_svfprintf_r+0x10ee>
  404776:	4d2a      	ldr	r5, [pc, #168]	; (404820 <_svfprintf_r+0x1508>)
  404778:	e413      	b.n	403fa2 <_svfprintf_r+0xc8a>
  40477a:	9c1d      	ldr	r4, [sp, #116]	; 0x74
  40477c:	e787      	b.n	40468e <_svfprintf_r+0x1376>
  40477e:	9b21      	ldr	r3, [sp, #132]	; 0x84
  404780:	e624      	b.n	4043cc <_svfprintf_r+0x10b4>
  404782:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404784:	1c5c      	adds	r4, r3, #1
  404786:	ea24 7ce4 	bic.w	ip, r4, r4, asr #31
  40478a:	e63c      	b.n	404406 <_svfprintf_r+0x10ee>
  40478c:	4d24      	ldr	r5, [pc, #144]	; (404820 <_svfprintf_r+0x1508>)
  40478e:	e420      	b.n	403fd2 <_svfprintf_r+0xcba>
  404790:	3330      	adds	r3, #48	; 0x30
  404792:	2230      	movs	r2, #48	; 0x30
  404794:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
  404798:	ab20      	add	r3, sp, #128	; 0x80
  40479a:	f88d 207e 	strb.w	r2, [sp, #126]	; 0x7e
  40479e:	e7bf      	b.n	404720 <_svfprintf_r+0x1408>
  4047a0:	f10c 0401 	add.w	r4, ip, #1
  4047a4:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4047a6:	441c      	add	r4, r3
  4047a8:	ea24 7ce4 	bic.w	ip, r4, r4, asr #31
  4047ac:	e62b      	b.n	404406 <_svfprintf_r+0x10ee>
  4047ae:	222d      	movs	r2, #45	; 0x2d
  4047b0:	425b      	negs	r3, r3
  4047b2:	f88d 207d 	strb.w	r2, [sp, #125]	; 0x7d
  4047b6:	e787      	b.n	4046c8 <_svfprintf_r+0x13b0>
  4047b8:	9b06      	ldr	r3, [sp, #24]
  4047ba:	f013 0301 	ands.w	r3, r3, #1
  4047be:	d0b9      	beq.n	404734 <_svfprintf_r+0x141c>
  4047c0:	e7b6      	b.n	404730 <_svfprintf_r+0x1418>
  4047c2:	f1bc 0f00 	cmp.w	ip, #0
  4047c6:	d109      	bne.n	4047dc <_svfprintf_r+0x14c4>
  4047c8:	9b06      	ldr	r3, [sp, #24]
  4047ca:	07db      	lsls	r3, r3, #31
  4047cc:	d406      	bmi.n	4047dc <_svfprintf_r+0x14c4>
  4047ce:	f04f 0c01 	mov.w	ip, #1
  4047d2:	4664      	mov	r4, ip
  4047d4:	e617      	b.n	404406 <_svfprintf_r+0x10ee>
  4047d6:	f1c3 0402 	rsb	r4, r3, #2
  4047da:	e7c7      	b.n	40476c <_svfprintf_r+0x1454>
  4047dc:	f10c 0402 	add.w	r4, ip, #2
  4047e0:	ea24 7ce4 	bic.w	ip, r4, r4, asr #31
  4047e4:	e60f      	b.n	404406 <_svfprintf_r+0x10ee>
  4047e6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  4047e8:	785e      	ldrb	r6, [r3, #1]
  4047ea:	4628      	mov	r0, r5
  4047ec:	682c      	ldr	r4, [r5, #0]
  4047ee:	3004      	adds	r0, #4
  4047f0:	2c00      	cmp	r4, #0
  4047f2:	900c      	str	r0, [sp, #48]	; 0x30
  4047f4:	f6be ade5 	bge.w	4033c2 <_svfprintf_r+0xaa>
  4047f8:	f04f 34ff 	mov.w	r4, #4294967295
  4047fc:	f7fe bde1 	b.w	4033c2 <_svfprintf_r+0xaa>
  404800:	f10d 037e 	add.w	r3, sp, #126	; 0x7e
  404804:	e78c      	b.n	404720 <_svfprintf_r+0x1408>
  404806:	230c      	movs	r3, #12
  404808:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40480a:	f04f 30ff 	mov.w	r0, #4294967295
  40480e:	6013      	str	r3, [r2, #0]
  404810:	f7fe be50 	b.w	4034b4 <_svfprintf_r+0x19c>
  404814:	4664      	mov	r4, ip
  404816:	e663      	b.n	4044e0 <_svfprintf_r+0x11c8>
  404818:	00408a54 	.word	0x00408a54
  40481c:	00408a9c 	.word	0x00408a9c
  404820:	00408a44 	.word	0x00408a44
  404824:	66666667 	.word	0x66666667

00404828 <__swbuf_r>:
  404828:	b570      	push	{r4, r5, r6, lr}
  40482a:	460d      	mov	r5, r1
  40482c:	4614      	mov	r4, r2
  40482e:	4606      	mov	r6, r0
  404830:	b110      	cbz	r0, 404838 <__swbuf_r+0x10>
  404832:	6b83      	ldr	r3, [r0, #56]	; 0x38
  404834:	2b00      	cmp	r3, #0
  404836:	d048      	beq.n	4048ca <__swbuf_r+0xa2>
  404838:	89a2      	ldrh	r2, [r4, #12]
  40483a:	69a3      	ldr	r3, [r4, #24]
  40483c:	b291      	uxth	r1, r2
  40483e:	60a3      	str	r3, [r4, #8]
  404840:	0708      	lsls	r0, r1, #28
  404842:	d538      	bpl.n	4048b6 <__swbuf_r+0x8e>
  404844:	6923      	ldr	r3, [r4, #16]
  404846:	2b00      	cmp	r3, #0
  404848:	d035      	beq.n	4048b6 <__swbuf_r+0x8e>
  40484a:	0489      	lsls	r1, r1, #18
  40484c:	b2ed      	uxtb	r5, r5
  40484e:	d515      	bpl.n	40487c <__swbuf_r+0x54>
  404850:	6822      	ldr	r2, [r4, #0]
  404852:	6961      	ldr	r1, [r4, #20]
  404854:	1ad3      	subs	r3, r2, r3
  404856:	428b      	cmp	r3, r1
  404858:	da1c      	bge.n	404894 <__swbuf_r+0x6c>
  40485a:	3301      	adds	r3, #1
  40485c:	68a1      	ldr	r1, [r4, #8]
  40485e:	1c50      	adds	r0, r2, #1
  404860:	3901      	subs	r1, #1
  404862:	6020      	str	r0, [r4, #0]
  404864:	60a1      	str	r1, [r4, #8]
  404866:	7015      	strb	r5, [r2, #0]
  404868:	6962      	ldr	r2, [r4, #20]
  40486a:	429a      	cmp	r2, r3
  40486c:	d01a      	beq.n	4048a4 <__swbuf_r+0x7c>
  40486e:	2d0a      	cmp	r5, #10
  404870:	d102      	bne.n	404878 <__swbuf_r+0x50>
  404872:	7b23      	ldrb	r3, [r4, #12]
  404874:	07db      	lsls	r3, r3, #31
  404876:	d415      	bmi.n	4048a4 <__swbuf_r+0x7c>
  404878:	4628      	mov	r0, r5
  40487a:	bd70      	pop	{r4, r5, r6, pc}
  40487c:	6e61      	ldr	r1, [r4, #100]	; 0x64
  40487e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  404882:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  404886:	81a2      	strh	r2, [r4, #12]
  404888:	6822      	ldr	r2, [r4, #0]
  40488a:	6661      	str	r1, [r4, #100]	; 0x64
  40488c:	1ad3      	subs	r3, r2, r3
  40488e:	6961      	ldr	r1, [r4, #20]
  404890:	428b      	cmp	r3, r1
  404892:	dbe2      	blt.n	40485a <__swbuf_r+0x32>
  404894:	4630      	mov	r0, r6
  404896:	4621      	mov	r1, r4
  404898:	f001 f946 	bl	405b28 <_fflush_r>
  40489c:	b940      	cbnz	r0, 4048b0 <__swbuf_r+0x88>
  40489e:	6822      	ldr	r2, [r4, #0]
  4048a0:	2301      	movs	r3, #1
  4048a2:	e7db      	b.n	40485c <__swbuf_r+0x34>
  4048a4:	4630      	mov	r0, r6
  4048a6:	4621      	mov	r1, r4
  4048a8:	f001 f93e 	bl	405b28 <_fflush_r>
  4048ac:	2800      	cmp	r0, #0
  4048ae:	d0e3      	beq.n	404878 <__swbuf_r+0x50>
  4048b0:	f04f 30ff 	mov.w	r0, #4294967295
  4048b4:	bd70      	pop	{r4, r5, r6, pc}
  4048b6:	4630      	mov	r0, r6
  4048b8:	4621      	mov	r1, r4
  4048ba:	f000 f809 	bl	4048d0 <__swsetup_r>
  4048be:	2800      	cmp	r0, #0
  4048c0:	d1f6      	bne.n	4048b0 <__swbuf_r+0x88>
  4048c2:	89a2      	ldrh	r2, [r4, #12]
  4048c4:	6923      	ldr	r3, [r4, #16]
  4048c6:	b291      	uxth	r1, r2
  4048c8:	e7bf      	b.n	40484a <__swbuf_r+0x22>
  4048ca:	f001 f9c7 	bl	405c5c <__sinit>
  4048ce:	e7b3      	b.n	404838 <__swbuf_r+0x10>

004048d0 <__swsetup_r>:
  4048d0:	b538      	push	{r3, r4, r5, lr}
  4048d2:	4b2f      	ldr	r3, [pc, #188]	; (404990 <__swsetup_r+0xc0>)
  4048d4:	4605      	mov	r5, r0
  4048d6:	460c      	mov	r4, r1
  4048d8:	6818      	ldr	r0, [r3, #0]
  4048da:	b110      	cbz	r0, 4048e2 <__swsetup_r+0x12>
  4048dc:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4048de:	2b00      	cmp	r3, #0
  4048e0:	d036      	beq.n	404950 <__swsetup_r+0x80>
  4048e2:	89a2      	ldrh	r2, [r4, #12]
  4048e4:	b293      	uxth	r3, r2
  4048e6:	0718      	lsls	r0, r3, #28
  4048e8:	d50b      	bpl.n	404902 <__swsetup_r+0x32>
  4048ea:	6920      	ldr	r0, [r4, #16]
  4048ec:	b1a0      	cbz	r0, 404918 <__swsetup_r+0x48>
  4048ee:	f013 0201 	ands.w	r2, r3, #1
  4048f2:	d11d      	bne.n	404930 <__swsetup_r+0x60>
  4048f4:	0799      	lsls	r1, r3, #30
  4048f6:	d400      	bmi.n	4048fa <__swsetup_r+0x2a>
  4048f8:	6962      	ldr	r2, [r4, #20]
  4048fa:	60a2      	str	r2, [r4, #8]
  4048fc:	b1f8      	cbz	r0, 40493e <__swsetup_r+0x6e>
  4048fe:	2000      	movs	r0, #0
  404900:	bd38      	pop	{r3, r4, r5, pc}
  404902:	06d9      	lsls	r1, r3, #27
  404904:	d53b      	bpl.n	40497e <__swsetup_r+0xae>
  404906:	0758      	lsls	r0, r3, #29
  404908:	d425      	bmi.n	404956 <__swsetup_r+0x86>
  40490a:	6920      	ldr	r0, [r4, #16]
  40490c:	f042 0208 	orr.w	r2, r2, #8
  404910:	b293      	uxth	r3, r2
  404912:	81a2      	strh	r2, [r4, #12]
  404914:	2800      	cmp	r0, #0
  404916:	d1ea      	bne.n	4048ee <__swsetup_r+0x1e>
  404918:	f403 7220 	and.w	r2, r3, #640	; 0x280
  40491c:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  404920:	d0e5      	beq.n	4048ee <__swsetup_r+0x1e>
  404922:	4628      	mov	r0, r5
  404924:	4621      	mov	r1, r4
  404926:	f001 fc9d 	bl	406264 <__smakebuf_r>
  40492a:	89a3      	ldrh	r3, [r4, #12]
  40492c:	6920      	ldr	r0, [r4, #16]
  40492e:	e7de      	b.n	4048ee <__swsetup_r+0x1e>
  404930:	6963      	ldr	r3, [r4, #20]
  404932:	2200      	movs	r2, #0
  404934:	425b      	negs	r3, r3
  404936:	60a2      	str	r2, [r4, #8]
  404938:	61a3      	str	r3, [r4, #24]
  40493a:	2800      	cmp	r0, #0
  40493c:	d1df      	bne.n	4048fe <__swsetup_r+0x2e>
  40493e:	89a3      	ldrh	r3, [r4, #12]
  404940:	061a      	lsls	r2, r3, #24
  404942:	d5dd      	bpl.n	404900 <__swsetup_r+0x30>
  404944:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  404948:	f04f 30ff 	mov.w	r0, #4294967295
  40494c:	81a3      	strh	r3, [r4, #12]
  40494e:	bd38      	pop	{r3, r4, r5, pc}
  404950:	f001 f984 	bl	405c5c <__sinit>
  404954:	e7c5      	b.n	4048e2 <__swsetup_r+0x12>
  404956:	6b21      	ldr	r1, [r4, #48]	; 0x30
  404958:	b149      	cbz	r1, 40496e <__swsetup_r+0x9e>
  40495a:	f104 0340 	add.w	r3, r4, #64	; 0x40
  40495e:	4299      	cmp	r1, r3
  404960:	d003      	beq.n	40496a <__swsetup_r+0x9a>
  404962:	4628      	mov	r0, r5
  404964:	f001 f9e8 	bl	405d38 <_free_r>
  404968:	89a2      	ldrh	r2, [r4, #12]
  40496a:	2300      	movs	r3, #0
  40496c:	6323      	str	r3, [r4, #48]	; 0x30
  40496e:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  404972:	2300      	movs	r3, #0
  404974:	6920      	ldr	r0, [r4, #16]
  404976:	b292      	uxth	r2, r2
  404978:	e884 0009 	stmia.w	r4, {r0, r3}
  40497c:	e7c6      	b.n	40490c <__swsetup_r+0x3c>
  40497e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  404982:	2309      	movs	r3, #9
  404984:	f04f 30ff 	mov.w	r0, #4294967295
  404988:	602b      	str	r3, [r5, #0]
  40498a:	81a2      	strh	r2, [r4, #12]
  40498c:	bd38      	pop	{r3, r4, r5, pc}
  40498e:	bf00      	nop
  404990:	204004a8 	.word	0x204004a8

00404994 <register_fini>:
  404994:	4b02      	ldr	r3, [pc, #8]	; (4049a0 <register_fini+0xc>)
  404996:	b113      	cbz	r3, 40499e <register_fini+0xa>
  404998:	4802      	ldr	r0, [pc, #8]	; (4049a4 <register_fini+0x10>)
  40499a:	f000 b805 	b.w	4049a8 <atexit>
  40499e:	4770      	bx	lr
  4049a0:	00000000 	.word	0x00000000
  4049a4:	00405c71 	.word	0x00405c71

004049a8 <atexit>:
  4049a8:	4601      	mov	r1, r0
  4049aa:	2000      	movs	r0, #0
  4049ac:	4602      	mov	r2, r0
  4049ae:	4603      	mov	r3, r0
  4049b0:	f002 bede 	b.w	407770 <__register_exitproc>

004049b4 <quorem>:
  4049b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4049b8:	6903      	ldr	r3, [r0, #16]
  4049ba:	b083      	sub	sp, #12
  4049bc:	690f      	ldr	r7, [r1, #16]
  4049be:	429f      	cmp	r7, r3
  4049c0:	f300 8093 	bgt.w	404aea <quorem+0x136>
  4049c4:	3f01      	subs	r7, #1
  4049c6:	f101 0614 	add.w	r6, r1, #20
  4049ca:	f100 0a14 	add.w	sl, r0, #20
  4049ce:	00bb      	lsls	r3, r7, #2
  4049d0:	f856 2027 	ldr.w	r2, [r6, r7, lsl #2]
  4049d4:	461d      	mov	r5, r3
  4049d6:	9300      	str	r3, [sp, #0]
  4049d8:	3201      	adds	r2, #1
  4049da:	f85a 3027 	ldr.w	r3, [sl, r7, lsl #2]
  4049de:	eb0a 0405 	add.w	r4, sl, r5
  4049e2:	eb06 0905 	add.w	r9, r6, r5
  4049e6:	fbb3 f8f2 	udiv	r8, r3, r2
  4049ea:	9401      	str	r4, [sp, #4]
  4049ec:	f1b8 0f00 	cmp.w	r8, #0
  4049f0:	d040      	beq.n	404a74 <quorem+0xc0>
  4049f2:	2500      	movs	r5, #0
  4049f4:	46b4      	mov	ip, r6
  4049f6:	46d6      	mov	lr, sl
  4049f8:	462b      	mov	r3, r5
  4049fa:	f85c bb04 	ldr.w	fp, [ip], #4
  4049fe:	f8de 2000 	ldr.w	r2, [lr]
  404a02:	fa1f f48b 	uxth.w	r4, fp
  404a06:	45e1      	cmp	r9, ip
  404a08:	ea4f 4b1b 	mov.w	fp, fp, lsr #16
  404a0c:	fb04 5508 	mla	r5, r4, r8, r5
  404a10:	fb0b fb08 	mul.w	fp, fp, r8
  404a14:	b2ac      	uxth	r4, r5
  404a16:	eb0b 4515 	add.w	r5, fp, r5, lsr #16
  404a1a:	eba3 0304 	sub.w	r3, r3, r4
  404a1e:	fa1f fb85 	uxth.w	fp, r5
  404a22:	fa13 f482 	uxtah	r4, r3, r2
  404a26:	ea4f 4515 	mov.w	r5, r5, lsr #16
  404a2a:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
  404a2e:	fa1f fb84 	uxth.w	fp, r4
  404a32:	eb02 4324 	add.w	r3, r2, r4, asr #16
  404a36:	ea4b 4203 	orr.w	r2, fp, r3, lsl #16
  404a3a:	ea4f 4323 	mov.w	r3, r3, asr #16
  404a3e:	f84e 2b04 	str.w	r2, [lr], #4
  404a42:	d2da      	bcs.n	4049fa <quorem+0x46>
  404a44:	9b00      	ldr	r3, [sp, #0]
  404a46:	f85a 3003 	ldr.w	r3, [sl, r3]
  404a4a:	b99b      	cbnz	r3, 404a74 <quorem+0xc0>
  404a4c:	9c01      	ldr	r4, [sp, #4]
  404a4e:	1f23      	subs	r3, r4, #4
  404a50:	459a      	cmp	sl, r3
  404a52:	d20e      	bcs.n	404a72 <quorem+0xbe>
  404a54:	f854 3c04 	ldr.w	r3, [r4, #-4]
  404a58:	b95b      	cbnz	r3, 404a72 <quorem+0xbe>
  404a5a:	f1a4 0308 	sub.w	r3, r4, #8
  404a5e:	e001      	b.n	404a64 <quorem+0xb0>
  404a60:	6812      	ldr	r2, [r2, #0]
  404a62:	b932      	cbnz	r2, 404a72 <quorem+0xbe>
  404a64:	459a      	cmp	sl, r3
  404a66:	461a      	mov	r2, r3
  404a68:	f107 37ff 	add.w	r7, r7, #4294967295
  404a6c:	f1a3 0304 	sub.w	r3, r3, #4
  404a70:	d3f6      	bcc.n	404a60 <quorem+0xac>
  404a72:	6107      	str	r7, [r0, #16]
  404a74:	4604      	mov	r4, r0
  404a76:	f002 fa81 	bl	406f7c <__mcmp>
  404a7a:	2800      	cmp	r0, #0
  404a7c:	db31      	blt.n	404ae2 <quorem+0x12e>
  404a7e:	f108 0801 	add.w	r8, r8, #1
  404a82:	4655      	mov	r5, sl
  404a84:	2000      	movs	r0, #0
  404a86:	f856 1b04 	ldr.w	r1, [r6], #4
  404a8a:	682a      	ldr	r2, [r5, #0]
  404a8c:	b28b      	uxth	r3, r1
  404a8e:	45b1      	cmp	r9, r6
  404a90:	ea4f 4111 	mov.w	r1, r1, lsr #16
  404a94:	eba0 0303 	sub.w	r3, r0, r3
  404a98:	ebc1 4112 	rsb	r1, r1, r2, lsr #16
  404a9c:	fa13 f382 	uxtah	r3, r3, r2
  404aa0:	eb01 4223 	add.w	r2, r1, r3, asr #16
  404aa4:	b29b      	uxth	r3, r3
  404aa6:	ea4f 4022 	mov.w	r0, r2, asr #16
  404aaa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  404aae:	f845 3b04 	str.w	r3, [r5], #4
  404ab2:	d2e8      	bcs.n	404a86 <quorem+0xd2>
  404ab4:	f85a 2027 	ldr.w	r2, [sl, r7, lsl #2]
  404ab8:	eb0a 0387 	add.w	r3, sl, r7, lsl #2
  404abc:	b98a      	cbnz	r2, 404ae2 <quorem+0x12e>
  404abe:	1f1a      	subs	r2, r3, #4
  404ac0:	4592      	cmp	sl, r2
  404ac2:	d20d      	bcs.n	404ae0 <quorem+0x12c>
  404ac4:	f853 2c04 	ldr.w	r2, [r3, #-4]
  404ac8:	b952      	cbnz	r2, 404ae0 <quorem+0x12c>
  404aca:	3b08      	subs	r3, #8
  404acc:	e001      	b.n	404ad2 <quorem+0x11e>
  404ace:	6812      	ldr	r2, [r2, #0]
  404ad0:	b932      	cbnz	r2, 404ae0 <quorem+0x12c>
  404ad2:	459a      	cmp	sl, r3
  404ad4:	461a      	mov	r2, r3
  404ad6:	f107 37ff 	add.w	r7, r7, #4294967295
  404ada:	f1a3 0304 	sub.w	r3, r3, #4
  404ade:	d3f6      	bcc.n	404ace <quorem+0x11a>
  404ae0:	6127      	str	r7, [r4, #16]
  404ae2:	4640      	mov	r0, r8
  404ae4:	b003      	add	sp, #12
  404ae6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404aea:	2000      	movs	r0, #0
  404aec:	b003      	add	sp, #12
  404aee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404af2:	bf00      	nop
  404af4:	0000      	movs	r0, r0
	...

00404af8 <_dtoa_r>:
  404af8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404afc:	469b      	mov	fp, r3
  404afe:	b099      	sub	sp, #100	; 0x64
  404b00:	6c03      	ldr	r3, [r0, #64]	; 0x40
  404b02:	4604      	mov	r4, r0
  404b04:	4692      	mov	sl, r2
  404b06:	9d25      	ldr	r5, [sp, #148]	; 0x94
  404b08:	b14b      	cbz	r3, 404b1e <_dtoa_r+0x26>
  404b0a:	6c46      	ldr	r6, [r0, #68]	; 0x44
  404b0c:	2201      	movs	r2, #1
  404b0e:	4619      	mov	r1, r3
  404b10:	40b2      	lsls	r2, r6
  404b12:	605e      	str	r6, [r3, #4]
  404b14:	609a      	str	r2, [r3, #8]
  404b16:	f002 f83b 	bl	406b90 <_Bfree>
  404b1a:	2300      	movs	r3, #0
  404b1c:	6423      	str	r3, [r4, #64]	; 0x40
  404b1e:	f1bb 0f00 	cmp.w	fp, #0
  404b22:	46d9      	mov	r9, fp
  404b24:	db33      	blt.n	404b8e <_dtoa_r+0x96>
  404b26:	2300      	movs	r3, #0
  404b28:	602b      	str	r3, [r5, #0]
  404b2a:	4b99      	ldr	r3, [pc, #612]	; (404d90 <_dtoa_r+0x298>)
  404b2c:	461a      	mov	r2, r3
  404b2e:	ea09 0303 	and.w	r3, r9, r3
  404b32:	4293      	cmp	r3, r2
  404b34:	d014      	beq.n	404b60 <_dtoa_r+0x68>
  404b36:	2200      	movs	r2, #0
  404b38:	2300      	movs	r3, #0
  404b3a:	4650      	mov	r0, sl
  404b3c:	4659      	mov	r1, fp
  404b3e:	f003 fb5d 	bl	4081fc <__aeabi_dcmpeq>
  404b42:	4680      	mov	r8, r0
  404b44:	b348      	cbz	r0, 404b9a <_dtoa_r+0xa2>
  404b46:	2301      	movs	r3, #1
  404b48:	9a24      	ldr	r2, [sp, #144]	; 0x90
  404b4a:	6013      	str	r3, [r2, #0]
  404b4c:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404b4e:	2b00      	cmp	r3, #0
  404b50:	f000 80cb 	beq.w	404cea <_dtoa_r+0x1f2>
  404b54:	488f      	ldr	r0, [pc, #572]	; (404d94 <_dtoa_r+0x29c>)
  404b56:	6018      	str	r0, [r3, #0]
  404b58:	3801      	subs	r0, #1
  404b5a:	b019      	add	sp, #100	; 0x64
  404b5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404b60:	f242 730f 	movw	r3, #9999	; 0x270f
  404b64:	9a24      	ldr	r2, [sp, #144]	; 0x90
  404b66:	6013      	str	r3, [r2, #0]
  404b68:	f1ba 0f00 	cmp.w	sl, #0
  404b6c:	f000 80a6 	beq.w	404cbc <_dtoa_r+0x1c4>
  404b70:	4889      	ldr	r0, [pc, #548]	; (404d98 <_dtoa_r+0x2a0>)
  404b72:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404b74:	2b00      	cmp	r3, #0
  404b76:	d0f0      	beq.n	404b5a <_dtoa_r+0x62>
  404b78:	78c3      	ldrb	r3, [r0, #3]
  404b7a:	2b00      	cmp	r3, #0
  404b7c:	f000 80b7 	beq.w	404cee <_dtoa_r+0x1f6>
  404b80:	f100 0308 	add.w	r3, r0, #8
  404b84:	9a26      	ldr	r2, [sp, #152]	; 0x98
  404b86:	6013      	str	r3, [r2, #0]
  404b88:	b019      	add	sp, #100	; 0x64
  404b8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404b8e:	2301      	movs	r3, #1
  404b90:	f02b 4900 	bic.w	r9, fp, #2147483648	; 0x80000000
  404b94:	602b      	str	r3, [r5, #0]
  404b96:	46cb      	mov	fp, r9
  404b98:	e7c7      	b.n	404b2a <_dtoa_r+0x32>
  404b9a:	ad17      	add	r5, sp, #92	; 0x5c
  404b9c:	a916      	add	r1, sp, #88	; 0x58
  404b9e:	4620      	mov	r0, r4
  404ba0:	4652      	mov	r2, sl
  404ba2:	9500      	str	r5, [sp, #0]
  404ba4:	465b      	mov	r3, fp
  404ba6:	9101      	str	r1, [sp, #4]
  404ba8:	f002 fa7e 	bl	4070a8 <__d2b>
  404bac:	9006      	str	r0, [sp, #24]
  404bae:	ea5f 5519 	movs.w	r5, r9, lsr #20
  404bb2:	f040 808c 	bne.w	404cce <_dtoa_r+0x1d6>
  404bb6:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
  404bba:	f46f 6382 	mvn.w	r3, #1040	; 0x410
  404bbe:	9d17      	ldr	r5, [sp, #92]	; 0x5c
  404bc0:	4445      	add	r5, r8
  404bc2:	429d      	cmp	r5, r3
  404bc4:	f2c0 81cc 	blt.w	404f60 <_dtoa_r+0x468>
  404bc8:	331f      	adds	r3, #31
  404bca:	f205 4212 	addw	r2, r5, #1042	; 0x412
  404bce:	1b5b      	subs	r3, r3, r5
  404bd0:	fa2a f002 	lsr.w	r0, sl, r2
  404bd4:	fa09 f903 	lsl.w	r9, r9, r3
  404bd8:	ea49 0000 	orr.w	r0, r9, r0
  404bdc:	f003 f830 	bl	407c40 <__aeabi_ui2d>
  404be0:	3d01      	subs	r5, #1
  404be2:	2301      	movs	r3, #1
  404be4:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
  404be8:	9311      	str	r3, [sp, #68]	; 0x44
  404bea:	2200      	movs	r2, #0
  404bec:	4b6b      	ldr	r3, [pc, #428]	; (404d9c <_dtoa_r+0x2a4>)
  404bee:	f002 fee9 	bl	4079c4 <__aeabi_dsub>
  404bf2:	a361      	add	r3, pc, #388	; (adr r3, 404d78 <_dtoa_r+0x280>)
  404bf4:	e9d3 2300 	ldrd	r2, r3, [r3]
  404bf8:	f003 f898 	bl	407d2c <__aeabi_dmul>
  404bfc:	a360      	add	r3, pc, #384	; (adr r3, 404d80 <_dtoa_r+0x288>)
  404bfe:	e9d3 2300 	ldrd	r2, r3, [r3]
  404c02:	f002 fee1 	bl	4079c8 <__adddf3>
  404c06:	4606      	mov	r6, r0
  404c08:	460f      	mov	r7, r1
  404c0a:	4628      	mov	r0, r5
  404c0c:	f003 f828 	bl	407c60 <__aeabi_i2d>
  404c10:	a35d      	add	r3, pc, #372	; (adr r3, 404d88 <_dtoa_r+0x290>)
  404c12:	e9d3 2300 	ldrd	r2, r3, [r3]
  404c16:	f003 f889 	bl	407d2c <__aeabi_dmul>
  404c1a:	4602      	mov	r2, r0
  404c1c:	460b      	mov	r3, r1
  404c1e:	4630      	mov	r0, r6
  404c20:	4639      	mov	r1, r7
  404c22:	f002 fed1 	bl	4079c8 <__adddf3>
  404c26:	4606      	mov	r6, r0
  404c28:	460f      	mov	r7, r1
  404c2a:	f003 fb19 	bl	408260 <__aeabi_d2iz>
  404c2e:	2200      	movs	r2, #0
  404c30:	9002      	str	r0, [sp, #8]
  404c32:	4639      	mov	r1, r7
  404c34:	4630      	mov	r0, r6
  404c36:	2300      	movs	r3, #0
  404c38:	f003 faea 	bl	408210 <__aeabi_dcmplt>
  404c3c:	2800      	cmp	r0, #0
  404c3e:	f040 8171 	bne.w	404f24 <_dtoa_r+0x42c>
  404c42:	9b02      	ldr	r3, [sp, #8]
  404c44:	2b16      	cmp	r3, #22
  404c46:	f200 8091 	bhi.w	404d6c <_dtoa_r+0x274>
  404c4a:	9802      	ldr	r0, [sp, #8]
  404c4c:	4652      	mov	r2, sl
  404c4e:	4954      	ldr	r1, [pc, #336]	; (404da0 <_dtoa_r+0x2a8>)
  404c50:	465b      	mov	r3, fp
  404c52:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
  404c56:	e9d1 0100 	ldrd	r0, r1, [r1]
  404c5a:	f003 faf7 	bl	40824c <__aeabi_dcmpgt>
  404c5e:	2800      	cmp	r0, #0
  404c60:	f000 817c 	beq.w	404f5c <_dtoa_r+0x464>
  404c64:	9b02      	ldr	r3, [sp, #8]
  404c66:	3b01      	subs	r3, #1
  404c68:	9302      	str	r3, [sp, #8]
  404c6a:	2300      	movs	r3, #0
  404c6c:	930d      	str	r3, [sp, #52]	; 0x34
  404c6e:	ebc5 0508 	rsb	r5, r5, r8
  404c72:	1e6b      	subs	r3, r5, #1
  404c74:	9303      	str	r3, [sp, #12]
  404c76:	f100 816c 	bmi.w	404f52 <_dtoa_r+0x45a>
  404c7a:	2300      	movs	r3, #0
  404c7c:	9307      	str	r3, [sp, #28]
  404c7e:	9b02      	ldr	r3, [sp, #8]
  404c80:	2b00      	cmp	r3, #0
  404c82:	f2c0 815d 	blt.w	404f40 <_dtoa_r+0x448>
  404c86:	9a03      	ldr	r2, [sp, #12]
  404c88:	930c      	str	r3, [sp, #48]	; 0x30
  404c8a:	4611      	mov	r1, r2
  404c8c:	4419      	add	r1, r3
  404c8e:	2300      	movs	r3, #0
  404c90:	9103      	str	r1, [sp, #12]
  404c92:	930a      	str	r3, [sp, #40]	; 0x28
  404c94:	9b22      	ldr	r3, [sp, #136]	; 0x88
  404c96:	2b09      	cmp	r3, #9
  404c98:	d82b      	bhi.n	404cf2 <_dtoa_r+0x1fa>
  404c9a:	2b05      	cmp	r3, #5
  404c9c:	f340 867e 	ble.w	40599c <_dtoa_r+0xea4>
  404ca0:	3b04      	subs	r3, #4
  404ca2:	2500      	movs	r5, #0
  404ca4:	9322      	str	r3, [sp, #136]	; 0x88
  404ca6:	9b22      	ldr	r3, [sp, #136]	; 0x88
  404ca8:	3b02      	subs	r3, #2
  404caa:	2b03      	cmp	r3, #3
  404cac:	f200 8679 	bhi.w	4059a2 <_dtoa_r+0xeaa>
  404cb0:	e8df f013 	tbh	[pc, r3, lsl #1]
  404cb4:	0289029b 	.word	0x0289029b
  404cb8:	068d0180 	.word	0x068d0180
  404cbc:	f3c9 0013 	ubfx	r0, r9, #0, #20
  404cc0:	4b35      	ldr	r3, [pc, #212]	; (404d98 <_dtoa_r+0x2a0>)
  404cc2:	4a38      	ldr	r2, [pc, #224]	; (404da4 <_dtoa_r+0x2ac>)
  404cc4:	2800      	cmp	r0, #0
  404cc6:	bf14      	ite	ne
  404cc8:	4618      	movne	r0, r3
  404cca:	4610      	moveq	r0, r2
  404ccc:	e751      	b.n	404b72 <_dtoa_r+0x7a>
  404cce:	f3cb 0313 	ubfx	r3, fp, #0, #20
  404cd2:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
  404cd6:	4650      	mov	r0, sl
  404cd8:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
  404cdc:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
  404ce0:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
  404ce4:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
  404ce8:	e77f      	b.n	404bea <_dtoa_r+0xf2>
  404cea:	482f      	ldr	r0, [pc, #188]	; (404da8 <_dtoa_r+0x2b0>)
  404cec:	e735      	b.n	404b5a <_dtoa_r+0x62>
  404cee:	1cc3      	adds	r3, r0, #3
  404cf0:	e748      	b.n	404b84 <_dtoa_r+0x8c>
  404cf2:	f04f 33ff 	mov.w	r3, #4294967295
  404cf6:	2100      	movs	r1, #0
  404cf8:	4620      	mov	r0, r4
  404cfa:	461d      	mov	r5, r3
  404cfc:	9310      	str	r3, [sp, #64]	; 0x40
  404cfe:	2301      	movs	r3, #1
  404d00:	6461      	str	r1, [r4, #68]	; 0x44
  404d02:	9123      	str	r1, [sp, #140]	; 0x8c
  404d04:	930b      	str	r3, [sp, #44]	; 0x2c
  404d06:	f001 ff1b 	bl	406b40 <_Balloc>
  404d0a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  404d0c:	9005      	str	r0, [sp, #20]
  404d0e:	9322      	str	r3, [sp, #136]	; 0x88
  404d10:	9504      	str	r5, [sp, #16]
  404d12:	6420      	str	r0, [r4, #64]	; 0x40
  404d14:	9a02      	ldr	r2, [sp, #8]
  404d16:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  404d18:	2a0e      	cmp	r2, #14
  404d1a:	dc49      	bgt.n	404db0 <_dtoa_r+0x2b8>
  404d1c:	2b00      	cmp	r3, #0
  404d1e:	db47      	blt.n	404db0 <_dtoa_r+0x2b8>
  404d20:	4b1f      	ldr	r3, [pc, #124]	; (404da0 <_dtoa_r+0x2a8>)
  404d22:	9a02      	ldr	r2, [sp, #8]
  404d24:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  404d28:	e9d3 8900 	ldrd	r8, r9, [r3]
  404d2c:	9b04      	ldr	r3, [sp, #16]
  404d2e:	2b00      	cmp	r3, #0
  404d30:	f300 825e 	bgt.w	4051f0 <_dtoa_r+0x6f8>
  404d34:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  404d36:	2b00      	cmp	r3, #0
  404d38:	f280 825a 	bge.w	4051f0 <_dtoa_r+0x6f8>
  404d3c:	9b04      	ldr	r3, [sp, #16]
  404d3e:	2b00      	cmp	r3, #0
  404d40:	f040 85bf 	bne.w	4058c2 <_dtoa_r+0xdca>
  404d44:	2200      	movs	r2, #0
  404d46:	4b19      	ldr	r3, [pc, #100]	; (404dac <_dtoa_r+0x2b4>)
  404d48:	4640      	mov	r0, r8
  404d4a:	4649      	mov	r1, r9
  404d4c:	f002 ffee 	bl	407d2c <__aeabi_dmul>
  404d50:	4652      	mov	r2, sl
  404d52:	465b      	mov	r3, fp
  404d54:	f003 fa70 	bl	408238 <__aeabi_dcmpge>
  404d58:	9f04      	ldr	r7, [sp, #16]
  404d5a:	9708      	str	r7, [sp, #32]
  404d5c:	2800      	cmp	r0, #0
  404d5e:	f000 80bd 	beq.w	404edc <_dtoa_r+0x3e4>
  404d62:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  404d64:	9d05      	ldr	r5, [sp, #20]
  404d66:	43db      	mvns	r3, r3
  404d68:	9302      	str	r3, [sp, #8]
  404d6a:	e0be      	b.n	404eea <_dtoa_r+0x3f2>
  404d6c:	2301      	movs	r3, #1
  404d6e:	930d      	str	r3, [sp, #52]	; 0x34
  404d70:	e77d      	b.n	404c6e <_dtoa_r+0x176>
  404d72:	bf00      	nop
  404d74:	f3af 8000 	nop.w
  404d78:	636f4361 	.word	0x636f4361
  404d7c:	3fd287a7 	.word	0x3fd287a7
  404d80:	8b60c8b3 	.word	0x8b60c8b3
  404d84:	3fc68a28 	.word	0x3fc68a28
  404d88:	509f79fb 	.word	0x509f79fb
  404d8c:	3fd34413 	.word	0x3fd34413
  404d90:	7ff00000 	.word	0x7ff00000
  404d94:	00408aa5 	.word	0x00408aa5
  404d98:	00408ab4 	.word	0x00408ab4
  404d9c:	3ff80000 	.word	0x3ff80000
  404da0:	00408ac8 	.word	0x00408ac8
  404da4:	00408aa8 	.word	0x00408aa8
  404da8:	00408aa4 	.word	0x00408aa4
  404dac:	40140000 	.word	0x40140000
  404db0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  404db2:	2a00      	cmp	r2, #0
  404db4:	f040 80e1 	bne.w	404f7a <_dtoa_r+0x482>
  404db8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  404dba:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  404dbc:	9d07      	ldr	r5, [sp, #28]
  404dbe:	9308      	str	r3, [sp, #32]
  404dc0:	9903      	ldr	r1, [sp, #12]
  404dc2:	2900      	cmp	r1, #0
  404dc4:	460b      	mov	r3, r1
  404dc6:	dd0a      	ble.n	404dde <_dtoa_r+0x2e6>
  404dc8:	2d00      	cmp	r5, #0
  404dca:	dd08      	ble.n	404dde <_dtoa_r+0x2e6>
  404dcc:	42a9      	cmp	r1, r5
  404dce:	9a07      	ldr	r2, [sp, #28]
  404dd0:	bfa8      	it	ge
  404dd2:	462b      	movge	r3, r5
  404dd4:	1ad2      	subs	r2, r2, r3
  404dd6:	1aed      	subs	r5, r5, r3
  404dd8:	1acb      	subs	r3, r1, r3
  404dda:	9207      	str	r2, [sp, #28]
  404ddc:	9303      	str	r3, [sp, #12]
  404dde:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404de0:	2b00      	cmp	r3, #0
  404de2:	dd1b      	ble.n	404e1c <_dtoa_r+0x324>
  404de4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  404de6:	2b00      	cmp	r3, #0
  404de8:	f000 84ce 	beq.w	405788 <_dtoa_r+0xc90>
  404dec:	2e00      	cmp	r6, #0
  404dee:	dd11      	ble.n	404e14 <_dtoa_r+0x31c>
  404df0:	9908      	ldr	r1, [sp, #32]
  404df2:	4632      	mov	r2, r6
  404df4:	4620      	mov	r0, r4
  404df6:	f002 f817 	bl	406e28 <__pow5mult>
  404dfa:	9f06      	ldr	r7, [sp, #24]
  404dfc:	4601      	mov	r1, r0
  404dfe:	9008      	str	r0, [sp, #32]
  404e00:	463a      	mov	r2, r7
  404e02:	4620      	mov	r0, r4
  404e04:	f001 ff6e 	bl	406ce4 <__multiply>
  404e08:	4603      	mov	r3, r0
  404e0a:	4639      	mov	r1, r7
  404e0c:	4620      	mov	r0, r4
  404e0e:	9306      	str	r3, [sp, #24]
  404e10:	f001 febe 	bl	406b90 <_Bfree>
  404e14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404e16:	1b9a      	subs	r2, r3, r6
  404e18:	f040 84ff 	bne.w	40581a <_dtoa_r+0xd22>
  404e1c:	4620      	mov	r0, r4
  404e1e:	2101      	movs	r1, #1
  404e20:	f001 ff56 	bl	406cd0 <__i2b>
  404e24:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  404e26:	4607      	mov	r7, r0
  404e28:	2b00      	cmp	r3, #0
  404e2a:	f340 8282 	ble.w	405332 <_dtoa_r+0x83a>
  404e2e:	4601      	mov	r1, r0
  404e30:	461a      	mov	r2, r3
  404e32:	4620      	mov	r0, r4
  404e34:	f001 fff8 	bl	406e28 <__pow5mult>
  404e38:	9b22      	ldr	r3, [sp, #136]	; 0x88
  404e3a:	4607      	mov	r7, r0
  404e3c:	2b01      	cmp	r3, #1
  404e3e:	f340 84f3 	ble.w	405828 <_dtoa_r+0xd30>
  404e42:	f04f 0800 	mov.w	r8, #0
  404e46:	693b      	ldr	r3, [r7, #16]
  404e48:	eb07 0383 	add.w	r3, r7, r3, lsl #2
  404e4c:	6918      	ldr	r0, [r3, #16]
  404e4e:	f001 feeb 	bl	406c28 <__hi0bits>
  404e52:	f1c0 0020 	rsb	r0, r0, #32
  404e56:	9b03      	ldr	r3, [sp, #12]
  404e58:	4418      	add	r0, r3
  404e5a:	f010 001f 	ands.w	r0, r0, #31
  404e5e:	f000 82a0 	beq.w	4053a2 <_dtoa_r+0x8aa>
  404e62:	f1c0 0320 	rsb	r3, r0, #32
  404e66:	2b04      	cmp	r3, #4
  404e68:	f340 8592 	ble.w	405990 <_dtoa_r+0xe98>
  404e6c:	f1c0 001c 	rsb	r0, r0, #28
  404e70:	9b07      	ldr	r3, [sp, #28]
  404e72:	4405      	add	r5, r0
  404e74:	4403      	add	r3, r0
  404e76:	9307      	str	r3, [sp, #28]
  404e78:	9b03      	ldr	r3, [sp, #12]
  404e7a:	4403      	add	r3, r0
  404e7c:	9303      	str	r3, [sp, #12]
  404e7e:	9b07      	ldr	r3, [sp, #28]
  404e80:	2b00      	cmp	r3, #0
  404e82:	dd05      	ble.n	404e90 <_dtoa_r+0x398>
  404e84:	9906      	ldr	r1, [sp, #24]
  404e86:	461a      	mov	r2, r3
  404e88:	4620      	mov	r0, r4
  404e8a:	f002 f81d 	bl	406ec8 <__lshift>
  404e8e:	9006      	str	r0, [sp, #24]
  404e90:	9b03      	ldr	r3, [sp, #12]
  404e92:	2b00      	cmp	r3, #0
  404e94:	dd05      	ble.n	404ea2 <_dtoa_r+0x3aa>
  404e96:	4639      	mov	r1, r7
  404e98:	461a      	mov	r2, r3
  404e9a:	4620      	mov	r0, r4
  404e9c:	f002 f814 	bl	406ec8 <__lshift>
  404ea0:	4607      	mov	r7, r0
  404ea2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  404ea4:	2b00      	cmp	r3, #0
  404ea6:	f040 838b 	bne.w	4055c0 <_dtoa_r+0xac8>
  404eaa:	9b22      	ldr	r3, [sp, #136]	; 0x88
  404eac:	2b02      	cmp	r3, #2
  404eae:	f340 827a 	ble.w	4053a6 <_dtoa_r+0x8ae>
  404eb2:	9b04      	ldr	r3, [sp, #16]
  404eb4:	2b00      	cmp	r3, #0
  404eb6:	f300 8276 	bgt.w	4053a6 <_dtoa_r+0x8ae>
  404eba:	9b04      	ldr	r3, [sp, #16]
  404ebc:	2b00      	cmp	r3, #0
  404ebe:	f47f af50 	bne.w	404d62 <_dtoa_r+0x26a>
  404ec2:	4639      	mov	r1, r7
  404ec4:	2205      	movs	r2, #5
  404ec6:	4620      	mov	r0, r4
  404ec8:	f001 fe6c 	bl	406ba4 <__multadd>
  404ecc:	4607      	mov	r7, r0
  404ece:	9806      	ldr	r0, [sp, #24]
  404ed0:	4639      	mov	r1, r7
  404ed2:	f002 f853 	bl	406f7c <__mcmp>
  404ed6:	2800      	cmp	r0, #0
  404ed8:	f77f af43 	ble.w	404d62 <_dtoa_r+0x26a>
  404edc:	9a02      	ldr	r2, [sp, #8]
  404ede:	2331      	movs	r3, #49	; 0x31
  404ee0:	3201      	adds	r2, #1
  404ee2:	9202      	str	r2, [sp, #8]
  404ee4:	9a05      	ldr	r2, [sp, #20]
  404ee6:	1c55      	adds	r5, r2, #1
  404ee8:	7013      	strb	r3, [r2, #0]
  404eea:	4639      	mov	r1, r7
  404eec:	4620      	mov	r0, r4
  404eee:	f001 fe4f 	bl	406b90 <_Bfree>
  404ef2:	9b08      	ldr	r3, [sp, #32]
  404ef4:	b11b      	cbz	r3, 404efe <_dtoa_r+0x406>
  404ef6:	9908      	ldr	r1, [sp, #32]
  404ef8:	4620      	mov	r0, r4
  404efa:	f001 fe49 	bl	406b90 <_Bfree>
  404efe:	4620      	mov	r0, r4
  404f00:	9906      	ldr	r1, [sp, #24]
  404f02:	f001 fe45 	bl	406b90 <_Bfree>
  404f06:	2200      	movs	r2, #0
  404f08:	9b02      	ldr	r3, [sp, #8]
  404f0a:	702a      	strb	r2, [r5, #0]
  404f0c:	3301      	adds	r3, #1
  404f0e:	9a24      	ldr	r2, [sp, #144]	; 0x90
  404f10:	6013      	str	r3, [r2, #0]
  404f12:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404f14:	2b00      	cmp	r3, #0
  404f16:	f000 82a3 	beq.w	405460 <_dtoa_r+0x968>
  404f1a:	9805      	ldr	r0, [sp, #20]
  404f1c:	601d      	str	r5, [r3, #0]
  404f1e:	b019      	add	sp, #100	; 0x64
  404f20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404f24:	9802      	ldr	r0, [sp, #8]
  404f26:	f002 fe9b 	bl	407c60 <__aeabi_i2d>
  404f2a:	4632      	mov	r2, r6
  404f2c:	463b      	mov	r3, r7
  404f2e:	f003 f965 	bl	4081fc <__aeabi_dcmpeq>
  404f32:	2800      	cmp	r0, #0
  404f34:	f47f ae85 	bne.w	404c42 <_dtoa_r+0x14a>
  404f38:	9b02      	ldr	r3, [sp, #8]
  404f3a:	3b01      	subs	r3, #1
  404f3c:	9302      	str	r3, [sp, #8]
  404f3e:	e680      	b.n	404c42 <_dtoa_r+0x14a>
  404f40:	9a07      	ldr	r2, [sp, #28]
  404f42:	9b02      	ldr	r3, [sp, #8]
  404f44:	1ad2      	subs	r2, r2, r3
  404f46:	425b      	negs	r3, r3
  404f48:	930a      	str	r3, [sp, #40]	; 0x28
  404f4a:	2300      	movs	r3, #0
  404f4c:	9207      	str	r2, [sp, #28]
  404f4e:	930c      	str	r3, [sp, #48]	; 0x30
  404f50:	e6a0      	b.n	404c94 <_dtoa_r+0x19c>
  404f52:	425b      	negs	r3, r3
  404f54:	9307      	str	r3, [sp, #28]
  404f56:	2300      	movs	r3, #0
  404f58:	9303      	str	r3, [sp, #12]
  404f5a:	e690      	b.n	404c7e <_dtoa_r+0x186>
  404f5c:	900d      	str	r0, [sp, #52]	; 0x34
  404f5e:	e686      	b.n	404c6e <_dtoa_r+0x176>
  404f60:	4bbd      	ldr	r3, [pc, #756]	; (405258 <_dtoa_r+0x760>)
  404f62:	1b5b      	subs	r3, r3, r5
  404f64:	fa0a f003 	lsl.w	r0, sl, r3
  404f68:	e638      	b.n	404bdc <_dtoa_r+0xe4>
  404f6a:	2100      	movs	r1, #0
  404f6c:	f04f 32ff 	mov.w	r2, #4294967295
  404f70:	9123      	str	r1, [sp, #140]	; 0x8c
  404f72:	2101      	movs	r1, #1
  404f74:	9204      	str	r2, [sp, #16]
  404f76:	910b      	str	r1, [sp, #44]	; 0x2c
  404f78:	9210      	str	r2, [sp, #64]	; 0x40
  404f7a:	9a22      	ldr	r2, [sp, #136]	; 0x88
  404f7c:	2a01      	cmp	r2, #1
  404f7e:	f340 8460 	ble.w	405842 <_dtoa_r+0xd4a>
  404f82:	9b04      	ldr	r3, [sp, #16]
  404f84:	1e5e      	subs	r6, r3, #1
  404f86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404f88:	42b3      	cmp	r3, r6
  404f8a:	f2c0 8405 	blt.w	405798 <_dtoa_r+0xca0>
  404f8e:	1b9e      	subs	r6, r3, r6
  404f90:	9b04      	ldr	r3, [sp, #16]
  404f92:	2b00      	cmp	r3, #0
  404f94:	f2c0 8461 	blt.w	40585a <_dtoa_r+0xd62>
  404f98:	9d07      	ldr	r5, [sp, #28]
  404f9a:	9b04      	ldr	r3, [sp, #16]
  404f9c:	9a07      	ldr	r2, [sp, #28]
  404f9e:	4620      	mov	r0, r4
  404fa0:	2101      	movs	r1, #1
  404fa2:	441a      	add	r2, r3
  404fa4:	9207      	str	r2, [sp, #28]
  404fa6:	9a03      	ldr	r2, [sp, #12]
  404fa8:	441a      	add	r2, r3
  404faa:	9203      	str	r2, [sp, #12]
  404fac:	f001 fe90 	bl	406cd0 <__i2b>
  404fb0:	9008      	str	r0, [sp, #32]
  404fb2:	e705      	b.n	404dc0 <_dtoa_r+0x2c8>
  404fb4:	2301      	movs	r3, #1
  404fb6:	930b      	str	r3, [sp, #44]	; 0x2c
  404fb8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  404fba:	2b00      	cmp	r3, #0
  404fbc:	f340 83df 	ble.w	40577e <_dtoa_r+0xc86>
  404fc0:	2b0e      	cmp	r3, #14
  404fc2:	bf8c      	ite	hi
  404fc4:	2500      	movhi	r5, #0
  404fc6:	f005 0501 	andls.w	r5, r5, #1
  404fca:	461e      	mov	r6, r3
  404fcc:	9310      	str	r3, [sp, #64]	; 0x40
  404fce:	9304      	str	r3, [sp, #16]
  404fd0:	2100      	movs	r1, #0
  404fd2:	2e17      	cmp	r6, #23
  404fd4:	6461      	str	r1, [r4, #68]	; 0x44
  404fd6:	d909      	bls.n	404fec <_dtoa_r+0x4f4>
  404fd8:	2201      	movs	r2, #1
  404fda:	2304      	movs	r3, #4
  404fdc:	005b      	lsls	r3, r3, #1
  404fde:	4611      	mov	r1, r2
  404fe0:	3201      	adds	r2, #1
  404fe2:	f103 0014 	add.w	r0, r3, #20
  404fe6:	42b0      	cmp	r0, r6
  404fe8:	d9f8      	bls.n	404fdc <_dtoa_r+0x4e4>
  404fea:	6461      	str	r1, [r4, #68]	; 0x44
  404fec:	4620      	mov	r0, r4
  404fee:	f001 fda7 	bl	406b40 <_Balloc>
  404ff2:	9005      	str	r0, [sp, #20]
  404ff4:	6420      	str	r0, [r4, #64]	; 0x40
  404ff6:	2d00      	cmp	r5, #0
  404ff8:	f43f ae8c 	beq.w	404d14 <_dtoa_r+0x21c>
  404ffc:	9802      	ldr	r0, [sp, #8]
  404ffe:	2800      	cmp	r0, #0
  405000:	e9cd ab0e 	strd	sl, fp, [sp, #56]	; 0x38
  405004:	f340 8233 	ble.w	40546e <_dtoa_r+0x976>
  405008:	4a94      	ldr	r2, [pc, #592]	; (40525c <_dtoa_r+0x764>)
  40500a:	f000 030f 	and.w	r3, r0, #15
  40500e:	1105      	asrs	r5, r0, #4
  405010:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
  405014:	06ea      	lsls	r2, r5, #27
  405016:	e9d3 6700 	ldrd	r6, r7, [r3]
  40501a:	f140 821c 	bpl.w	405456 <_dtoa_r+0x95e>
  40501e:	4b90      	ldr	r3, [pc, #576]	; (405260 <_dtoa_r+0x768>)
  405020:	4650      	mov	r0, sl
  405022:	4659      	mov	r1, fp
  405024:	f005 050f 	and.w	r5, r5, #15
  405028:	f04f 0803 	mov.w	r8, #3
  40502c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
  405030:	f002 ffa6 	bl	407f80 <__aeabi_ddiv>
  405034:	4682      	mov	sl, r0
  405036:	468b      	mov	fp, r1
  405038:	b18d      	cbz	r5, 40505e <_dtoa_r+0x566>
  40503a:	f8df 9224 	ldr.w	r9, [pc, #548]	; 405260 <_dtoa_r+0x768>
  40503e:	07eb      	lsls	r3, r5, #31
  405040:	4630      	mov	r0, r6
  405042:	4639      	mov	r1, r7
  405044:	d507      	bpl.n	405056 <_dtoa_r+0x55e>
  405046:	f108 0801 	add.w	r8, r8, #1
  40504a:	e9d9 2300 	ldrd	r2, r3, [r9]
  40504e:	f002 fe6d 	bl	407d2c <__aeabi_dmul>
  405052:	4606      	mov	r6, r0
  405054:	460f      	mov	r7, r1
  405056:	106d      	asrs	r5, r5, #1
  405058:	f109 0908 	add.w	r9, r9, #8
  40505c:	d1ef      	bne.n	40503e <_dtoa_r+0x546>
  40505e:	4650      	mov	r0, sl
  405060:	4659      	mov	r1, fp
  405062:	4632      	mov	r2, r6
  405064:	463b      	mov	r3, r7
  405066:	f002 ff8b 	bl	407f80 <__aeabi_ddiv>
  40506a:	e9cd 0108 	strd	r0, r1, [sp, #32]
  40506e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  405070:	b143      	cbz	r3, 405084 <_dtoa_r+0x58c>
  405072:	2200      	movs	r2, #0
  405074:	4b7b      	ldr	r3, [pc, #492]	; (405264 <_dtoa_r+0x76c>)
  405076:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  40507a:	f003 f8c9 	bl	408210 <__aeabi_dcmplt>
  40507e:	2800      	cmp	r0, #0
  405080:	f040 8393 	bne.w	4057aa <_dtoa_r+0xcb2>
  405084:	4640      	mov	r0, r8
  405086:	f002 fdeb 	bl	407c60 <__aeabi_i2d>
  40508a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
  40508e:	f002 fe4d 	bl	407d2c <__aeabi_dmul>
  405092:	4b75      	ldr	r3, [pc, #468]	; (405268 <_dtoa_r+0x770>)
  405094:	2200      	movs	r2, #0
  405096:	f002 fc97 	bl	4079c8 <__adddf3>
  40509a:	9b04      	ldr	r3, [sp, #16]
  40509c:	4606      	mov	r6, r0
  40509e:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
  4050a2:	2b00      	cmp	r3, #0
  4050a4:	f000 8161 	beq.w	40536a <_dtoa_r+0x872>
  4050a8:	9b02      	ldr	r3, [sp, #8]
  4050aa:	f8dd c010 	ldr.w	ip, [sp, #16]
  4050ae:	9314      	str	r3, [sp, #80]	; 0x50
  4050b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  4050b2:	2b00      	cmp	r3, #0
  4050b4:	f000 820b 	beq.w	4054ce <_dtoa_r+0x9d6>
  4050b8:	4b68      	ldr	r3, [pc, #416]	; (40525c <_dtoa_r+0x764>)
  4050ba:	2000      	movs	r0, #0
  4050bc:	9a05      	ldr	r2, [sp, #20]
  4050be:	eb03 03cc 	add.w	r3, r3, ip, lsl #3
  4050c2:	496a      	ldr	r1, [pc, #424]	; (40526c <_dtoa_r+0x774>)
  4050c4:	1c55      	adds	r5, r2, #1
  4050c6:	f8cd c048 	str.w	ip, [sp, #72]	; 0x48
  4050ca:	e953 2302 	ldrd	r2, r3, [r3, #-8]
  4050ce:	f002 ff57 	bl	407f80 <__aeabi_ddiv>
  4050d2:	4632      	mov	r2, r6
  4050d4:	463b      	mov	r3, r7
  4050d6:	f002 fc75 	bl	4079c4 <__aeabi_dsub>
  4050da:	4682      	mov	sl, r0
  4050dc:	468b      	mov	fp, r1
  4050de:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
  4050e2:	4649      	mov	r1, r9
  4050e4:	4640      	mov	r0, r8
  4050e6:	f003 f8bb 	bl	408260 <__aeabi_d2iz>
  4050ea:	4606      	mov	r6, r0
  4050ec:	f002 fdb8 	bl	407c60 <__aeabi_i2d>
  4050f0:	4602      	mov	r2, r0
  4050f2:	3630      	adds	r6, #48	; 0x30
  4050f4:	460b      	mov	r3, r1
  4050f6:	4640      	mov	r0, r8
  4050f8:	4649      	mov	r1, r9
  4050fa:	f002 fc63 	bl	4079c4 <__aeabi_dsub>
  4050fe:	9f05      	ldr	r7, [sp, #20]
  405100:	4680      	mov	r8, r0
  405102:	4689      	mov	r9, r1
  405104:	b2f6      	uxtb	r6, r6
  405106:	4650      	mov	r0, sl
  405108:	4659      	mov	r1, fp
  40510a:	4642      	mov	r2, r8
  40510c:	464b      	mov	r3, r9
  40510e:	703e      	strb	r6, [r7, #0]
  405110:	f003 f89c 	bl	40824c <__aeabi_dcmpgt>
  405114:	2800      	cmp	r0, #0
  405116:	f040 8243 	bne.w	4055a0 <_dtoa_r+0xaa8>
  40511a:	4642      	mov	r2, r8
  40511c:	464b      	mov	r3, r9
  40511e:	2000      	movs	r0, #0
  405120:	4950      	ldr	r1, [pc, #320]	; (405264 <_dtoa_r+0x76c>)
  405122:	f002 fc4f 	bl	4079c4 <__aeabi_dsub>
  405126:	4602      	mov	r2, r0
  405128:	460b      	mov	r3, r1
  40512a:	4650      	mov	r0, sl
  40512c:	4659      	mov	r1, fp
  40512e:	f003 f88d 	bl	40824c <__aeabi_dcmpgt>
  405132:	2800      	cmp	r0, #0
  405134:	f040 80eb 	bne.w	40530e <_dtoa_r+0x816>
  405138:	f8dd c048 	ldr.w	ip, [sp, #72]	; 0x48
  40513c:	f1bc 0f01 	cmp.w	ip, #1
  405140:	f340 8192 	ble.w	405468 <_dtoa_r+0x970>
  405144:	9f05      	ldr	r7, [sp, #20]
  405146:	9412      	str	r4, [sp, #72]	; 0x48
  405148:	4467      	add	r7, ip
  40514a:	9708      	str	r7, [sp, #32]
  40514c:	e00e      	b.n	40516c <_dtoa_r+0x674>
  40514e:	2000      	movs	r0, #0
  405150:	4944      	ldr	r1, [pc, #272]	; (405264 <_dtoa_r+0x76c>)
  405152:	f002 fc37 	bl	4079c4 <__aeabi_dsub>
  405156:	4652      	mov	r2, sl
  405158:	465b      	mov	r3, fp
  40515a:	f003 f859 	bl	408210 <__aeabi_dcmplt>
  40515e:	2800      	cmp	r0, #0
  405160:	f040 83a1 	bne.w	4058a6 <_dtoa_r+0xdae>
  405164:	9b08      	ldr	r3, [sp, #32]
  405166:	429d      	cmp	r5, r3
  405168:	f000 817d 	beq.w	405466 <_dtoa_r+0x96e>
  40516c:	4650      	mov	r0, sl
  40516e:	4659      	mov	r1, fp
  405170:	2200      	movs	r2, #0
  405172:	4b3f      	ldr	r3, [pc, #252]	; (405270 <_dtoa_r+0x778>)
  405174:	f002 fdda 	bl	407d2c <__aeabi_dmul>
  405178:	2200      	movs	r2, #0
  40517a:	4b3d      	ldr	r3, [pc, #244]	; (405270 <_dtoa_r+0x778>)
  40517c:	4682      	mov	sl, r0
  40517e:	468b      	mov	fp, r1
  405180:	4640      	mov	r0, r8
  405182:	4649      	mov	r1, r9
  405184:	f002 fdd2 	bl	407d2c <__aeabi_dmul>
  405188:	4606      	mov	r6, r0
  40518a:	460f      	mov	r7, r1
  40518c:	f003 f868 	bl	408260 <__aeabi_d2iz>
  405190:	4604      	mov	r4, r0
  405192:	f002 fd65 	bl	407c60 <__aeabi_i2d>
  405196:	4602      	mov	r2, r0
  405198:	460b      	mov	r3, r1
  40519a:	3430      	adds	r4, #48	; 0x30
  40519c:	4630      	mov	r0, r6
  40519e:	4639      	mov	r1, r7
  4051a0:	b2e6      	uxtb	r6, r4
  4051a2:	f002 fc0f 	bl	4079c4 <__aeabi_dsub>
  4051a6:	4680      	mov	r8, r0
  4051a8:	4689      	mov	r9, r1
  4051aa:	4652      	mov	r2, sl
  4051ac:	465b      	mov	r3, fp
  4051ae:	f805 6b01 	strb.w	r6, [r5], #1
  4051b2:	f003 f82d 	bl	408210 <__aeabi_dcmplt>
  4051b6:	4642      	mov	r2, r8
  4051b8:	464b      	mov	r3, r9
  4051ba:	2800      	cmp	r0, #0
  4051bc:	d0c7      	beq.n	40514e <_dtoa_r+0x656>
  4051be:	9b14      	ldr	r3, [sp, #80]	; 0x50
  4051c0:	9c12      	ldr	r4, [sp, #72]	; 0x48
  4051c2:	9302      	str	r3, [sp, #8]
  4051c4:	e69b      	b.n	404efe <_dtoa_r+0x406>
  4051c6:	2300      	movs	r3, #0
  4051c8:	930b      	str	r3, [sp, #44]	; 0x2c
  4051ca:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  4051cc:	9a02      	ldr	r2, [sp, #8]
  4051ce:	4413      	add	r3, r2
  4051d0:	9310      	str	r3, [sp, #64]	; 0x40
  4051d2:	3301      	adds	r3, #1
  4051d4:	2b00      	cmp	r3, #0
  4051d6:	9304      	str	r3, [sp, #16]
  4051d8:	f340 82c9 	ble.w	40576e <_dtoa_r+0xc76>
  4051dc:	9e04      	ldr	r6, [sp, #16]
  4051de:	2e0e      	cmp	r6, #14
  4051e0:	bf8c      	ite	hi
  4051e2:	2500      	movhi	r5, #0
  4051e4:	f005 0501 	andls.w	r5, r5, #1
  4051e8:	e6f2      	b.n	404fd0 <_dtoa_r+0x4d8>
  4051ea:	2300      	movs	r3, #0
  4051ec:	930b      	str	r3, [sp, #44]	; 0x2c
  4051ee:	e6e3      	b.n	404fb8 <_dtoa_r+0x4c0>
  4051f0:	9905      	ldr	r1, [sp, #20]
  4051f2:	4642      	mov	r2, r8
  4051f4:	464b      	mov	r3, r9
  4051f6:	4650      	mov	r0, sl
  4051f8:	1c4d      	adds	r5, r1, #1
  4051fa:	4659      	mov	r1, fp
  4051fc:	f002 fec0 	bl	407f80 <__aeabi_ddiv>
  405200:	4656      	mov	r6, sl
  405202:	f003 f82d 	bl	408260 <__aeabi_d2iz>
  405206:	4682      	mov	sl, r0
  405208:	f002 fd2a 	bl	407c60 <__aeabi_i2d>
  40520c:	4642      	mov	r2, r8
  40520e:	464b      	mov	r3, r9
  405210:	f002 fd8c 	bl	407d2c <__aeabi_dmul>
  405214:	4602      	mov	r2, r0
  405216:	460b      	mov	r3, r1
  405218:	4630      	mov	r0, r6
  40521a:	4659      	mov	r1, fp
  40521c:	f002 fbd2 	bl	4079c4 <__aeabi_dsub>
  405220:	f10a 0330 	add.w	r3, sl, #48	; 0x30
  405224:	9a05      	ldr	r2, [sp, #20]
  405226:	4606      	mov	r6, r0
  405228:	460f      	mov	r7, r1
  40522a:	7013      	strb	r3, [r2, #0]
  40522c:	9b04      	ldr	r3, [sp, #16]
  40522e:	2b01      	cmp	r3, #1
  405230:	d04d      	beq.n	4052ce <_dtoa_r+0x7d6>
  405232:	2200      	movs	r2, #0
  405234:	4b0e      	ldr	r3, [pc, #56]	; (405270 <_dtoa_r+0x778>)
  405236:	f002 fd79 	bl	407d2c <__aeabi_dmul>
  40523a:	2200      	movs	r2, #0
  40523c:	2300      	movs	r3, #0
  40523e:	4606      	mov	r6, r0
  405240:	460f      	mov	r7, r1
  405242:	f002 ffdb 	bl	4081fc <__aeabi_dcmpeq>
  405246:	2800      	cmp	r0, #0
  405248:	f47f ae59 	bne.w	404efe <_dtoa_r+0x406>
  40524c:	9403      	str	r4, [sp, #12]
  40524e:	f8dd b014 	ldr.w	fp, [sp, #20]
  405252:	9c04      	ldr	r4, [sp, #16]
  405254:	e019      	b.n	40528a <_dtoa_r+0x792>
  405256:	bf00      	nop
  405258:	fffffbee 	.word	0xfffffbee
  40525c:	00408ac8 	.word	0x00408ac8
  405260:	00408ba0 	.word	0x00408ba0
  405264:	3ff00000 	.word	0x3ff00000
  405268:	401c0000 	.word	0x401c0000
  40526c:	3fe00000 	.word	0x3fe00000
  405270:	40240000 	.word	0x40240000
  405274:	f002 fd5a 	bl	407d2c <__aeabi_dmul>
  405278:	2200      	movs	r2, #0
  40527a:	2300      	movs	r3, #0
  40527c:	4606      	mov	r6, r0
  40527e:	460f      	mov	r7, r1
  405280:	f002 ffbc 	bl	4081fc <__aeabi_dcmpeq>
  405284:	2800      	cmp	r0, #0
  405286:	f040 82e5 	bne.w	405854 <_dtoa_r+0xd5c>
  40528a:	4642      	mov	r2, r8
  40528c:	464b      	mov	r3, r9
  40528e:	4630      	mov	r0, r6
  405290:	4639      	mov	r1, r7
  405292:	f002 fe75 	bl	407f80 <__aeabi_ddiv>
  405296:	f002 ffe3 	bl	408260 <__aeabi_d2iz>
  40529a:	4682      	mov	sl, r0
  40529c:	f002 fce0 	bl	407c60 <__aeabi_i2d>
  4052a0:	4642      	mov	r2, r8
  4052a2:	464b      	mov	r3, r9
  4052a4:	f002 fd42 	bl	407d2c <__aeabi_dmul>
  4052a8:	4602      	mov	r2, r0
  4052aa:	460b      	mov	r3, r1
  4052ac:	4630      	mov	r0, r6
  4052ae:	4639      	mov	r1, r7
  4052b0:	f002 fb88 	bl	4079c4 <__aeabi_dsub>
  4052b4:	f10a 0e30 	add.w	lr, sl, #48	; 0x30
  4052b8:	4606      	mov	r6, r0
  4052ba:	460f      	mov	r7, r1
  4052bc:	f805 eb01 	strb.w	lr, [r5], #1
  4052c0:	ebcb 0e05 	rsb	lr, fp, r5
  4052c4:	2200      	movs	r2, #0
  4052c6:	4bb8      	ldr	r3, [pc, #736]	; (4055a8 <_dtoa_r+0xab0>)
  4052c8:	4574      	cmp	r4, lr
  4052ca:	d1d3      	bne.n	405274 <_dtoa_r+0x77c>
  4052cc:	9c03      	ldr	r4, [sp, #12]
  4052ce:	4632      	mov	r2, r6
  4052d0:	463b      	mov	r3, r7
  4052d2:	4630      	mov	r0, r6
  4052d4:	4639      	mov	r1, r7
  4052d6:	f002 fb77 	bl	4079c8 <__adddf3>
  4052da:	4606      	mov	r6, r0
  4052dc:	460f      	mov	r7, r1
  4052de:	4640      	mov	r0, r8
  4052e0:	4649      	mov	r1, r9
  4052e2:	4632      	mov	r2, r6
  4052e4:	463b      	mov	r3, r7
  4052e6:	f002 ff93 	bl	408210 <__aeabi_dcmplt>
  4052ea:	b960      	cbnz	r0, 405306 <_dtoa_r+0x80e>
  4052ec:	4640      	mov	r0, r8
  4052ee:	4649      	mov	r1, r9
  4052f0:	4632      	mov	r2, r6
  4052f2:	463b      	mov	r3, r7
  4052f4:	f002 ff82 	bl	4081fc <__aeabi_dcmpeq>
  4052f8:	2800      	cmp	r0, #0
  4052fa:	f43f ae00 	beq.w	404efe <_dtoa_r+0x406>
  4052fe:	f01a 0f01 	tst.w	sl, #1
  405302:	f43f adfc 	beq.w	404efe <_dtoa_r+0x406>
  405306:	9b02      	ldr	r3, [sp, #8]
  405308:	9314      	str	r3, [sp, #80]	; 0x50
  40530a:	f815 6c01 	ldrb.w	r6, [r5, #-1]
  40530e:	1e6a      	subs	r2, r5, #1
  405310:	9b05      	ldr	r3, [sp, #20]
  405312:	e004      	b.n	40531e <_dtoa_r+0x826>
  405314:	429a      	cmp	r2, r3
  405316:	f000 8277 	beq.w	405808 <_dtoa_r+0xd10>
  40531a:	f812 6d01 	ldrb.w	r6, [r2, #-1]!
  40531e:	2e39      	cmp	r6, #57	; 0x39
  405320:	f102 0501 	add.w	r5, r2, #1
  405324:	d0f6      	beq.n	405314 <_dtoa_r+0x81c>
  405326:	1c73      	adds	r3, r6, #1
  405328:	9914      	ldr	r1, [sp, #80]	; 0x50
  40532a:	b2db      	uxtb	r3, r3
  40532c:	9102      	str	r1, [sp, #8]
  40532e:	7013      	strb	r3, [r2, #0]
  405330:	e5e5      	b.n	404efe <_dtoa_r+0x406>
  405332:	9b22      	ldr	r3, [sp, #136]	; 0x88
  405334:	2b01      	cmp	r3, #1
  405336:	f340 8161 	ble.w	4055fc <_dtoa_r+0xb04>
  40533a:	f04f 0800 	mov.w	r8, #0
  40533e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  405340:	2b00      	cmp	r3, #0
  405342:	f47f ad80 	bne.w	404e46 <_dtoa_r+0x34e>
  405346:	2001      	movs	r0, #1
  405348:	e585      	b.n	404e56 <_dtoa_r+0x35e>
  40534a:	4640      	mov	r0, r8
  40534c:	f002 fc88 	bl	407c60 <__aeabi_i2d>
  405350:	4602      	mov	r2, r0
  405352:	460b      	mov	r3, r1
  405354:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  405358:	f002 fce8 	bl	407d2c <__aeabi_dmul>
  40535c:	2200      	movs	r2, #0
  40535e:	4b93      	ldr	r3, [pc, #588]	; (4055ac <_dtoa_r+0xab4>)
  405360:	f002 fb32 	bl	4079c8 <__adddf3>
  405364:	4606      	mov	r6, r0
  405366:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
  40536a:	2200      	movs	r2, #0
  40536c:	4b90      	ldr	r3, [pc, #576]	; (4055b0 <_dtoa_r+0xab8>)
  40536e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  405372:	f002 fb27 	bl	4079c4 <__aeabi_dsub>
  405376:	4632      	mov	r2, r6
  405378:	463b      	mov	r3, r7
  40537a:	4680      	mov	r8, r0
  40537c:	4689      	mov	r9, r1
  40537e:	f002 ff65 	bl	40824c <__aeabi_dcmpgt>
  405382:	4605      	mov	r5, r0
  405384:	2800      	cmp	r0, #0
  405386:	f040 809f 	bne.w	4054c8 <_dtoa_r+0x9d0>
  40538a:	4632      	mov	r2, r6
  40538c:	4640      	mov	r0, r8
  40538e:	4649      	mov	r1, r9
  405390:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
  405394:	f002 ff3c 	bl	408210 <__aeabi_dcmplt>
  405398:	2800      	cmp	r0, #0
  40539a:	d065      	beq.n	405468 <_dtoa_r+0x970>
  40539c:	462f      	mov	r7, r5
  40539e:	9508      	str	r5, [sp, #32]
  4053a0:	e4df      	b.n	404d62 <_dtoa_r+0x26a>
  4053a2:	201c      	movs	r0, #28
  4053a4:	e564      	b.n	404e70 <_dtoa_r+0x378>
  4053a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  4053a8:	2b00      	cmp	r3, #0
  4053aa:	f040 814f 	bne.w	40564c <_dtoa_r+0xb54>
  4053ae:	f8dd a014 	ldr.w	sl, [sp, #20]
  4053b2:	9e06      	ldr	r6, [sp, #24]
  4053b4:	4655      	mov	r5, sl
  4053b6:	f8dd 8010 	ldr.w	r8, [sp, #16]
  4053ba:	e002      	b.n	4053c2 <_dtoa_r+0x8ca>
  4053bc:	f001 fbf2 	bl	406ba4 <__multadd>
  4053c0:	4606      	mov	r6, r0
  4053c2:	4639      	mov	r1, r7
  4053c4:	4630      	mov	r0, r6
  4053c6:	f7ff faf5 	bl	4049b4 <quorem>
  4053ca:	f100 0930 	add.w	r9, r0, #48	; 0x30
  4053ce:	4631      	mov	r1, r6
  4053d0:	4620      	mov	r0, r4
  4053d2:	f805 9b01 	strb.w	r9, [r5], #1
  4053d6:	ebca 0e05 	rsb	lr, sl, r5
  4053da:	220a      	movs	r2, #10
  4053dc:	2300      	movs	r3, #0
  4053de:	45c6      	cmp	lr, r8
  4053e0:	dbec      	blt.n	4053bc <_dtoa_r+0x8c4>
  4053e2:	9b05      	ldr	r3, [sp, #20]
  4053e4:	f04f 0a00 	mov.w	sl, #0
  4053e8:	9a04      	ldr	r2, [sp, #16]
  4053ea:	9606      	str	r6, [sp, #24]
  4053ec:	2a01      	cmp	r2, #1
  4053ee:	bfac      	ite	ge
  4053f0:	189b      	addge	r3, r3, r2
  4053f2:	3301      	addlt	r3, #1
  4053f4:	461d      	mov	r5, r3
  4053f6:	9906      	ldr	r1, [sp, #24]
  4053f8:	2201      	movs	r2, #1
  4053fa:	4620      	mov	r0, r4
  4053fc:	f001 fd64 	bl	406ec8 <__lshift>
  405400:	4639      	mov	r1, r7
  405402:	9006      	str	r0, [sp, #24]
  405404:	f001 fdba 	bl	406f7c <__mcmp>
  405408:	2800      	cmp	r0, #0
  40540a:	f340 824e 	ble.w	4058aa <_dtoa_r+0xdb2>
  40540e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
  405412:	1e6b      	subs	r3, r5, #1
  405414:	9905      	ldr	r1, [sp, #20]
  405416:	e004      	b.n	405422 <_dtoa_r+0x92a>
  405418:	428b      	cmp	r3, r1
  40541a:	f000 820b 	beq.w	405834 <_dtoa_r+0xd3c>
  40541e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
  405422:	2a39      	cmp	r2, #57	; 0x39
  405424:	f103 0501 	add.w	r5, r3, #1
  405428:	d0f6      	beq.n	405418 <_dtoa_r+0x920>
  40542a:	3201      	adds	r2, #1
  40542c:	701a      	strb	r2, [r3, #0]
  40542e:	4639      	mov	r1, r7
  405430:	4620      	mov	r0, r4
  405432:	f001 fbad 	bl	406b90 <_Bfree>
  405436:	9b08      	ldr	r3, [sp, #32]
  405438:	2b00      	cmp	r3, #0
  40543a:	f43f ad60 	beq.w	404efe <_dtoa_r+0x406>
  40543e:	459a      	cmp	sl, r3
  405440:	f43f ad59 	beq.w	404ef6 <_dtoa_r+0x3fe>
  405444:	f1ba 0f00 	cmp.w	sl, #0
  405448:	f43f ad55 	beq.w	404ef6 <_dtoa_r+0x3fe>
  40544c:	4651      	mov	r1, sl
  40544e:	4620      	mov	r0, r4
  405450:	f001 fb9e 	bl	406b90 <_Bfree>
  405454:	e54f      	b.n	404ef6 <_dtoa_r+0x3fe>
  405456:	e9dd ab0e 	ldrd	sl, fp, [sp, #56]	; 0x38
  40545a:	f04f 0802 	mov.w	r8, #2
  40545e:	e5eb      	b.n	405038 <_dtoa_r+0x540>
  405460:	9805      	ldr	r0, [sp, #20]
  405462:	f7ff bb7a 	b.w	404b5a <_dtoa_r+0x62>
  405466:	9c12      	ldr	r4, [sp, #72]	; 0x48
  405468:	e9dd ab0e 	ldrd	sl, fp, [sp, #56]	; 0x38
  40546c:	e452      	b.n	404d14 <_dtoa_r+0x21c>
  40546e:	9b02      	ldr	r3, [sp, #8]
  405470:	425d      	negs	r5, r3
  405472:	2d00      	cmp	r5, #0
  405474:	f000 81c1 	beq.w	4057fa <_dtoa_r+0xd02>
  405478:	f005 020f 	and.w	r2, r5, #15
  40547c:	4b4d      	ldr	r3, [pc, #308]	; (4055b4 <_dtoa_r+0xabc>)
  40547e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  405482:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
  405486:	e9d3 2300 	ldrd	r2, r3, [r3]
  40548a:	f002 fc4f 	bl	407d2c <__aeabi_dmul>
  40548e:	112d      	asrs	r5, r5, #4
  405490:	e9cd 0108 	strd	r0, r1, [sp, #32]
  405494:	f000 8275 	beq.w	405982 <_dtoa_r+0xe8a>
  405498:	4e47      	ldr	r6, [pc, #284]	; (4055b8 <_dtoa_r+0xac0>)
  40549a:	f04f 0802 	mov.w	r8, #2
  40549e:	4602      	mov	r2, r0
  4054a0:	460b      	mov	r3, r1
  4054a2:	07ef      	lsls	r7, r5, #31
  4054a4:	4610      	mov	r0, r2
  4054a6:	4619      	mov	r1, r3
  4054a8:	d507      	bpl.n	4054ba <_dtoa_r+0x9c2>
  4054aa:	f108 0801 	add.w	r8, r8, #1
  4054ae:	e9d6 2300 	ldrd	r2, r3, [r6]
  4054b2:	f002 fc3b 	bl	407d2c <__aeabi_dmul>
  4054b6:	4602      	mov	r2, r0
  4054b8:	460b      	mov	r3, r1
  4054ba:	106d      	asrs	r5, r5, #1
  4054bc:	f106 0608 	add.w	r6, r6, #8
  4054c0:	d1ef      	bne.n	4054a2 <_dtoa_r+0x9aa>
  4054c2:	e9cd 2308 	strd	r2, r3, [sp, #32]
  4054c6:	e5d2      	b.n	40506e <_dtoa_r+0x576>
  4054c8:	2700      	movs	r7, #0
  4054ca:	9708      	str	r7, [sp, #32]
  4054cc:	e506      	b.n	404edc <_dtoa_r+0x3e4>
  4054ce:	f10c 3bff 	add.w	fp, ip, #4294967295
  4054d2:	4938      	ldr	r1, [pc, #224]	; (4055b4 <_dtoa_r+0xabc>)
  4054d4:	4632      	mov	r2, r6
  4054d6:	463b      	mov	r3, r7
  4054d8:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
  4054dc:	f8cd c054 	str.w	ip, [sp, #84]	; 0x54
  4054e0:	9f05      	ldr	r7, [sp, #20]
  4054e2:	e9d1 0100 	ldrd	r0, r1, [r1]
  4054e6:	f002 fc21 	bl	407d2c <__aeabi_dmul>
  4054ea:	1c7d      	adds	r5, r7, #1
  4054ec:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
  4054f0:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
  4054f4:	4649      	mov	r1, r9
  4054f6:	4640      	mov	r0, r8
  4054f8:	f002 feb2 	bl	408260 <__aeabi_d2iz>
  4054fc:	4606      	mov	r6, r0
  4054fe:	f002 fbaf 	bl	407c60 <__aeabi_i2d>
  405502:	4602      	mov	r2, r0
  405504:	460b      	mov	r3, r1
  405506:	4640      	mov	r0, r8
  405508:	4649      	mov	r1, r9
  40550a:	3630      	adds	r6, #48	; 0x30
  40550c:	f002 fa5a 	bl	4079c4 <__aeabi_dsub>
  405510:	f8dd c054 	ldr.w	ip, [sp, #84]	; 0x54
  405514:	4680      	mov	r8, r0
  405516:	4689      	mov	r9, r1
  405518:	f1bc 0f01 	cmp.w	ip, #1
  40551c:	703e      	strb	r6, [r7, #0]
  40551e:	d020      	beq.n	405562 <_dtoa_r+0xa6a>
  405520:	9b05      	ldr	r3, [sp, #20]
  405522:	4640      	mov	r0, r8
  405524:	46aa      	mov	sl, r5
  405526:	46a8      	mov	r8, r5
  405528:	eb03 070c 	add.w	r7, r3, ip
  40552c:	46b9      	mov	r9, r7
  40552e:	2200      	movs	r2, #0
  405530:	4b1d      	ldr	r3, [pc, #116]	; (4055a8 <_dtoa_r+0xab0>)
  405532:	f002 fbfb 	bl	407d2c <__aeabi_dmul>
  405536:	460f      	mov	r7, r1
  405538:	4606      	mov	r6, r0
  40553a:	f002 fe91 	bl	408260 <__aeabi_d2iz>
  40553e:	4605      	mov	r5, r0
  405540:	f002 fb8e 	bl	407c60 <__aeabi_i2d>
  405544:	4602      	mov	r2, r0
  405546:	460b      	mov	r3, r1
  405548:	3530      	adds	r5, #48	; 0x30
  40554a:	4630      	mov	r0, r6
  40554c:	4639      	mov	r1, r7
  40554e:	f002 fa39 	bl	4079c4 <__aeabi_dsub>
  405552:	f80a 5b01 	strb.w	r5, [sl], #1
  405556:	45ca      	cmp	sl, r9
  405558:	d1e9      	bne.n	40552e <_dtoa_r+0xa36>
  40555a:	4645      	mov	r5, r8
  40555c:	4689      	mov	r9, r1
  40555e:	4680      	mov	r8, r0
  405560:	445d      	add	r5, fp
  405562:	2200      	movs	r2, #0
  405564:	4b15      	ldr	r3, [pc, #84]	; (4055bc <_dtoa_r+0xac4>)
  405566:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
  40556a:	f002 fa2d 	bl	4079c8 <__adddf3>
  40556e:	4642      	mov	r2, r8
  405570:	464b      	mov	r3, r9
  405572:	f002 fe4d 	bl	408210 <__aeabi_dcmplt>
  405576:	2800      	cmp	r0, #0
  405578:	f47f aec7 	bne.w	40530a <_dtoa_r+0x812>
  40557c:	2000      	movs	r0, #0
  40557e:	490f      	ldr	r1, [pc, #60]	; (4055bc <_dtoa_r+0xac4>)
  405580:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
  405584:	f002 fa1e 	bl	4079c4 <__aeabi_dsub>
  405588:	4642      	mov	r2, r8
  40558a:	464b      	mov	r3, r9
  40558c:	f002 fe5e 	bl	40824c <__aeabi_dcmpgt>
  405590:	b908      	cbnz	r0, 405596 <_dtoa_r+0xa9e>
  405592:	e769      	b.n	405468 <_dtoa_r+0x970>
  405594:	4615      	mov	r5, r2
  405596:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  40559a:	1e6a      	subs	r2, r5, #1
  40559c:	2b30      	cmp	r3, #48	; 0x30
  40559e:	d0f9      	beq.n	405594 <_dtoa_r+0xa9c>
  4055a0:	9b14      	ldr	r3, [sp, #80]	; 0x50
  4055a2:	9302      	str	r3, [sp, #8]
  4055a4:	e4ab      	b.n	404efe <_dtoa_r+0x406>
  4055a6:	bf00      	nop
  4055a8:	40240000 	.word	0x40240000
  4055ac:	401c0000 	.word	0x401c0000
  4055b0:	40140000 	.word	0x40140000
  4055b4:	00408ac8 	.word	0x00408ac8
  4055b8:	00408ba0 	.word	0x00408ba0
  4055bc:	3fe00000 	.word	0x3fe00000
  4055c0:	9806      	ldr	r0, [sp, #24]
  4055c2:	4639      	mov	r1, r7
  4055c4:	f001 fcda 	bl	406f7c <__mcmp>
  4055c8:	2800      	cmp	r0, #0
  4055ca:	f6bf ac6e 	bge.w	404eaa <_dtoa_r+0x3b2>
  4055ce:	9e02      	ldr	r6, [sp, #8]
  4055d0:	2300      	movs	r3, #0
  4055d2:	9906      	ldr	r1, [sp, #24]
  4055d4:	4620      	mov	r0, r4
  4055d6:	3e01      	subs	r6, #1
  4055d8:	220a      	movs	r2, #10
  4055da:	9602      	str	r6, [sp, #8]
  4055dc:	f001 fae2 	bl	406ba4 <__multadd>
  4055e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  4055e2:	9006      	str	r0, [sp, #24]
  4055e4:	bb1b      	cbnz	r3, 40562e <_dtoa_r+0xb36>
  4055e6:	9b22      	ldr	r3, [sp, #136]	; 0x88
  4055e8:	2b02      	cmp	r3, #2
  4055ea:	f340 81ce 	ble.w	40598a <_dtoa_r+0xe92>
  4055ee:	9b10      	ldr	r3, [sp, #64]	; 0x40
  4055f0:	2b00      	cmp	r3, #0
  4055f2:	f300 81ca 	bgt.w	40598a <_dtoa_r+0xe92>
  4055f6:	9b10      	ldr	r3, [sp, #64]	; 0x40
  4055f8:	9304      	str	r3, [sp, #16]
  4055fa:	e45e      	b.n	404eba <_dtoa_r+0x3c2>
  4055fc:	f1ba 0f00 	cmp.w	sl, #0
  405600:	f47f ae9b 	bne.w	40533a <_dtoa_r+0x842>
  405604:	f3cb 0313 	ubfx	r3, fp, #0, #20
  405608:	2b00      	cmp	r3, #0
  40560a:	f47f ae96 	bne.w	40533a <_dtoa_r+0x842>
  40560e:	f02b 4600 	bic.w	r6, fp, #2147483648	; 0x80000000
  405612:	0d36      	lsrs	r6, r6, #20
  405614:	0536      	lsls	r6, r6, #20
  405616:	2e00      	cmp	r6, #0
  405618:	f000 818a 	beq.w	405930 <_dtoa_r+0xe38>
  40561c:	9b07      	ldr	r3, [sp, #28]
  40561e:	f04f 0801 	mov.w	r8, #1
  405622:	3301      	adds	r3, #1
  405624:	9307      	str	r3, [sp, #28]
  405626:	9b03      	ldr	r3, [sp, #12]
  405628:	3301      	adds	r3, #1
  40562a:	9303      	str	r3, [sp, #12]
  40562c:	e687      	b.n	40533e <_dtoa_r+0x846>
  40562e:	2300      	movs	r3, #0
  405630:	9908      	ldr	r1, [sp, #32]
  405632:	4620      	mov	r0, r4
  405634:	220a      	movs	r2, #10
  405636:	f001 fab5 	bl	406ba4 <__multadd>
  40563a:	9b22      	ldr	r3, [sp, #136]	; 0x88
  40563c:	9008      	str	r0, [sp, #32]
  40563e:	2b02      	cmp	r3, #2
  405640:	dd02      	ble.n	405648 <_dtoa_r+0xb50>
  405642:	9b10      	ldr	r3, [sp, #64]	; 0x40
  405644:	2b00      	cmp	r3, #0
  405646:	ddd6      	ble.n	4055f6 <_dtoa_r+0xafe>
  405648:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40564a:	9304      	str	r3, [sp, #16]
  40564c:	2d00      	cmp	r5, #0
  40564e:	dd05      	ble.n	40565c <_dtoa_r+0xb64>
  405650:	9908      	ldr	r1, [sp, #32]
  405652:	462a      	mov	r2, r5
  405654:	4620      	mov	r0, r4
  405656:	f001 fc37 	bl	406ec8 <__lshift>
  40565a:	9008      	str	r0, [sp, #32]
  40565c:	f1b8 0f00 	cmp.w	r8, #0
  405660:	f040 8133 	bne.w	4058ca <_dtoa_r+0xdd2>
  405664:	9e08      	ldr	r6, [sp, #32]
  405666:	f00a 0101 	and.w	r1, sl, #1
  40566a:	9b04      	ldr	r3, [sp, #16]
  40566c:	9a22      	ldr	r2, [sp, #136]	; 0x88
  40566e:	3b01      	subs	r3, #1
  405670:	910b      	str	r1, [sp, #44]	; 0x2c
  405672:	9905      	ldr	r1, [sp, #20]
  405674:	fab2 f282 	clz	r2, r2
  405678:	970a      	str	r7, [sp, #40]	; 0x28
  40567a:	18cb      	adds	r3, r1, r3
  40567c:	4688      	mov	r8, r1
  40567e:	f8dd b020 	ldr.w	fp, [sp, #32]
  405682:	930c      	str	r3, [sp, #48]	; 0x30
  405684:	0953      	lsrs	r3, r2, #5
  405686:	9f06      	ldr	r7, [sp, #24]
  405688:	9303      	str	r3, [sp, #12]
  40568a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  40568c:	4638      	mov	r0, r7
  40568e:	4629      	mov	r1, r5
  405690:	f7ff f990 	bl	4049b4 <quorem>
  405694:	4659      	mov	r1, fp
  405696:	4681      	mov	r9, r0
  405698:	4638      	mov	r0, r7
  40569a:	f001 fc6f 	bl	406f7c <__mcmp>
  40569e:	4629      	mov	r1, r5
  4056a0:	4632      	mov	r2, r6
  4056a2:	4682      	mov	sl, r0
  4056a4:	4620      	mov	r0, r4
  4056a6:	f001 fc8d 	bl	406fc4 <__mdiff>
  4056aa:	68c2      	ldr	r2, [r0, #12]
  4056ac:	4605      	mov	r5, r0
  4056ae:	f109 0c30 	add.w	ip, r9, #48	; 0x30
  4056b2:	9207      	str	r2, [sp, #28]
  4056b4:	2a00      	cmp	r2, #0
  4056b6:	d150      	bne.n	40575a <_dtoa_r+0xc62>
  4056b8:	4629      	mov	r1, r5
  4056ba:	4638      	mov	r0, r7
  4056bc:	f8cd c018 	str.w	ip, [sp, #24]
  4056c0:	f001 fc5c 	bl	406f7c <__mcmp>
  4056c4:	4629      	mov	r1, r5
  4056c6:	9004      	str	r0, [sp, #16]
  4056c8:	4620      	mov	r0, r4
  4056ca:	f001 fa61 	bl	406b90 <_Bfree>
  4056ce:	9a03      	ldr	r2, [sp, #12]
  4056d0:	9b04      	ldr	r3, [sp, #16]
  4056d2:	f8dd c018 	ldr.w	ip, [sp, #24]
  4056d6:	b132      	cbz	r2, 4056e6 <_dtoa_r+0xbee>
  4056d8:	b92b      	cbnz	r3, 4056e6 <_dtoa_r+0xbee>
  4056da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  4056dc:	9a07      	ldr	r2, [sp, #28]
  4056de:	2b00      	cmp	r3, #0
  4056e0:	f000 8128 	beq.w	405934 <_dtoa_r+0xe3c>
  4056e4:	4613      	mov	r3, r2
  4056e6:	f1ba 0f00 	cmp.w	sl, #0
  4056ea:	f2c0 80bc 	blt.w	405866 <_dtoa_r+0xd6e>
  4056ee:	9a03      	ldr	r2, [sp, #12]
  4056f0:	b132      	cbz	r2, 405700 <_dtoa_r+0xc08>
  4056f2:	f1ba 0f00 	cmp.w	sl, #0
  4056f6:	d103      	bne.n	405700 <_dtoa_r+0xc08>
  4056f8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  4056fa:	2a00      	cmp	r2, #0
  4056fc:	f000 80b3 	beq.w	405866 <_dtoa_r+0xd6e>
  405700:	2b00      	cmp	r3, #0
  405702:	f300 80fe 	bgt.w	405902 <_dtoa_r+0xe0a>
  405706:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  405708:	f108 0901 	add.w	r9, r8, #1
  40570c:	f888 c000 	strb.w	ip, [r8]
  405710:	4598      	cmp	r8, r3
  405712:	464d      	mov	r5, r9
  405714:	f000 8106 	beq.w	405924 <_dtoa_r+0xe2c>
  405718:	4639      	mov	r1, r7
  40571a:	220a      	movs	r2, #10
  40571c:	2300      	movs	r3, #0
  40571e:	4620      	mov	r0, r4
  405720:	f001 fa40 	bl	406ba4 <__multadd>
  405724:	45b3      	cmp	fp, r6
  405726:	4607      	mov	r7, r0
  405728:	4659      	mov	r1, fp
  40572a:	4620      	mov	r0, r4
  40572c:	f04f 020a 	mov.w	r2, #10
  405730:	f04f 0300 	mov.w	r3, #0
  405734:	d00b      	beq.n	40574e <_dtoa_r+0xc56>
  405736:	f001 fa35 	bl	406ba4 <__multadd>
  40573a:	4631      	mov	r1, r6
  40573c:	4683      	mov	fp, r0
  40573e:	220a      	movs	r2, #10
  405740:	4620      	mov	r0, r4
  405742:	2300      	movs	r3, #0
  405744:	f001 fa2e 	bl	406ba4 <__multadd>
  405748:	46c8      	mov	r8, r9
  40574a:	4606      	mov	r6, r0
  40574c:	e79d      	b.n	40568a <_dtoa_r+0xb92>
  40574e:	f001 fa29 	bl	406ba4 <__multadd>
  405752:	46c8      	mov	r8, r9
  405754:	4683      	mov	fp, r0
  405756:	4606      	mov	r6, r0
  405758:	e797      	b.n	40568a <_dtoa_r+0xb92>
  40575a:	4601      	mov	r1, r0
  40575c:	4620      	mov	r0, r4
  40575e:	f8cd c010 	str.w	ip, [sp, #16]
  405762:	f001 fa15 	bl	406b90 <_Bfree>
  405766:	2301      	movs	r3, #1
  405768:	f8dd c010 	ldr.w	ip, [sp, #16]
  40576c:	e7bb      	b.n	4056e6 <_dtoa_r+0xbee>
  40576e:	2b0e      	cmp	r3, #14
  405770:	bf8c      	ite	hi
  405772:	2300      	movhi	r3, #0
  405774:	2301      	movls	r3, #1
  405776:	2100      	movs	r1, #0
  405778:	401d      	ands	r5, r3
  40577a:	6461      	str	r1, [r4, #68]	; 0x44
  40577c:	e436      	b.n	404fec <_dtoa_r+0x4f4>
  40577e:	2301      	movs	r3, #1
  405780:	9323      	str	r3, [sp, #140]	; 0x8c
  405782:	9310      	str	r3, [sp, #64]	; 0x40
  405784:	9304      	str	r3, [sp, #16]
  405786:	e7f6      	b.n	405776 <_dtoa_r+0xc7e>
  405788:	9906      	ldr	r1, [sp, #24]
  40578a:	4620      	mov	r0, r4
  40578c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40578e:	f001 fb4b 	bl	406e28 <__pow5mult>
  405792:	9006      	str	r0, [sp, #24]
  405794:	f7ff bb42 	b.w	404e1c <_dtoa_r+0x324>
  405798:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40579a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  40579c:	1af3      	subs	r3, r6, r3
  40579e:	960a      	str	r6, [sp, #40]	; 0x28
  4057a0:	2600      	movs	r6, #0
  4057a2:	441a      	add	r2, r3
  4057a4:	920c      	str	r2, [sp, #48]	; 0x30
  4057a6:	f7ff bbf3 	b.w	404f90 <_dtoa_r+0x498>
  4057aa:	9b04      	ldr	r3, [sp, #16]
  4057ac:	2b00      	cmp	r3, #0
  4057ae:	f43f adcc 	beq.w	40534a <_dtoa_r+0x852>
  4057b2:	9d10      	ldr	r5, [sp, #64]	; 0x40
  4057b4:	2d00      	cmp	r5, #0
  4057b6:	f77f ae57 	ble.w	405468 <_dtoa_r+0x970>
  4057ba:	2200      	movs	r2, #0
  4057bc:	4b86      	ldr	r3, [pc, #536]	; (4059d8 <_dtoa_r+0xee0>)
  4057be:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  4057c2:	f002 fab3 	bl	407d2c <__aeabi_dmul>
  4057c6:	9b02      	ldr	r3, [sp, #8]
  4057c8:	4606      	mov	r6, r0
  4057ca:	460f      	mov	r7, r1
  4057cc:	3b01      	subs	r3, #1
  4057ce:	f108 0001 	add.w	r0, r8, #1
  4057d2:	e9cd 6708 	strd	r6, r7, [sp, #32]
  4057d6:	9314      	str	r3, [sp, #80]	; 0x50
  4057d8:	f002 fa42 	bl	407c60 <__aeabi_i2d>
  4057dc:	4602      	mov	r2, r0
  4057de:	460b      	mov	r3, r1
  4057e0:	4630      	mov	r0, r6
  4057e2:	4639      	mov	r1, r7
  4057e4:	f002 faa2 	bl	407d2c <__aeabi_dmul>
  4057e8:	2200      	movs	r2, #0
  4057ea:	4b7c      	ldr	r3, [pc, #496]	; (4059dc <_dtoa_r+0xee4>)
  4057ec:	f002 f8ec 	bl	4079c8 <__adddf3>
  4057f0:	46ac      	mov	ip, r5
  4057f2:	4606      	mov	r6, r0
  4057f4:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
  4057f8:	e45a      	b.n	4050b0 <_dtoa_r+0x5b8>
  4057fa:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
  4057fe:	f04f 0802 	mov.w	r8, #2
  405802:	e9cd 2308 	strd	r2, r3, [sp, #32]
  405806:	e432      	b.n	40506e <_dtoa_r+0x576>
  405808:	9b14      	ldr	r3, [sp, #80]	; 0x50
  40580a:	2130      	movs	r1, #48	; 0x30
  40580c:	3301      	adds	r3, #1
  40580e:	7011      	strb	r1, [r2, #0]
  405810:	9302      	str	r3, [sp, #8]
  405812:	2331      	movs	r3, #49	; 0x31
  405814:	7013      	strb	r3, [r2, #0]
  405816:	f7ff bb72 	b.w	404efe <_dtoa_r+0x406>
  40581a:	9906      	ldr	r1, [sp, #24]
  40581c:	4620      	mov	r0, r4
  40581e:	f001 fb03 	bl	406e28 <__pow5mult>
  405822:	9006      	str	r0, [sp, #24]
  405824:	f7ff bafa 	b.w	404e1c <_dtoa_r+0x324>
  405828:	f1ba 0f00 	cmp.w	sl, #0
  40582c:	f43f aeea 	beq.w	405604 <_dtoa_r+0xb0c>
  405830:	f7ff bb07 	b.w	404e42 <_dtoa_r+0x34a>
  405834:	9a02      	ldr	r2, [sp, #8]
  405836:	2331      	movs	r3, #49	; 0x31
  405838:	3201      	adds	r2, #1
  40583a:	9202      	str	r2, [sp, #8]
  40583c:	9a05      	ldr	r2, [sp, #20]
  40583e:	7013      	strb	r3, [r2, #0]
  405840:	e5f5      	b.n	40542e <_dtoa_r+0x936>
  405842:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405844:	2a00      	cmp	r2, #0
  405846:	d055      	beq.n	4058f4 <_dtoa_r+0xdfc>
  405848:	f203 4333 	addw	r3, r3, #1075	; 0x433
  40584c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  40584e:	9d07      	ldr	r5, [sp, #28]
  405850:	f7ff bba4 	b.w	404f9c <_dtoa_r+0x4a4>
  405854:	9c03      	ldr	r4, [sp, #12]
  405856:	f7ff bb52 	b.w	404efe <_dtoa_r+0x406>
  40585a:	9b07      	ldr	r3, [sp, #28]
  40585c:	9a04      	ldr	r2, [sp, #16]
  40585e:	1a9d      	subs	r5, r3, r2
  405860:	2300      	movs	r3, #0
  405862:	f7ff bb9b 	b.w	404f9c <_dtoa_r+0x4a4>
  405866:	2b00      	cmp	r3, #0
  405868:	9706      	str	r7, [sp, #24]
  40586a:	46e1      	mov	r9, ip
  40586c:	f8cd b020 	str.w	fp, [sp, #32]
  405870:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  405872:	4665      	mov	r5, ip
  405874:	dd0f      	ble.n	405896 <_dtoa_r+0xd9e>
  405876:	9906      	ldr	r1, [sp, #24]
  405878:	2201      	movs	r2, #1
  40587a:	4620      	mov	r0, r4
  40587c:	f001 fb24 	bl	406ec8 <__lshift>
  405880:	4639      	mov	r1, r7
  405882:	9006      	str	r0, [sp, #24]
  405884:	f001 fb7a 	bl	406f7c <__mcmp>
  405888:	2800      	cmp	r0, #0
  40588a:	dd75      	ble.n	405978 <_dtoa_r+0xe80>
  40588c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
  405890:	d066      	beq.n	405960 <_dtoa_r+0xe68>
  405892:	f109 0501 	add.w	r5, r9, #1
  405896:	f8dd a020 	ldr.w	sl, [sp, #32]
  40589a:	f888 5000 	strb.w	r5, [r8]
  40589e:	f108 0501 	add.w	r5, r8, #1
  4058a2:	9608      	str	r6, [sp, #32]
  4058a4:	e5c3      	b.n	40542e <_dtoa_r+0x936>
  4058a6:	9c12      	ldr	r4, [sp, #72]	; 0x48
  4058a8:	e531      	b.n	40530e <_dtoa_r+0x816>
  4058aa:	d104      	bne.n	4058b6 <_dtoa_r+0xdbe>
  4058ac:	f019 0f01 	tst.w	r9, #1
  4058b0:	d001      	beq.n	4058b6 <_dtoa_r+0xdbe>
  4058b2:	e5ac      	b.n	40540e <_dtoa_r+0x916>
  4058b4:	4615      	mov	r5, r2
  4058b6:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  4058ba:	1e6a      	subs	r2, r5, #1
  4058bc:	2b30      	cmp	r3, #48	; 0x30
  4058be:	d0f9      	beq.n	4058b4 <_dtoa_r+0xdbc>
  4058c0:	e5b5      	b.n	40542e <_dtoa_r+0x936>
  4058c2:	2700      	movs	r7, #0
  4058c4:	9708      	str	r7, [sp, #32]
  4058c6:	f7ff ba4c 	b.w	404d62 <_dtoa_r+0x26a>
  4058ca:	9e08      	ldr	r6, [sp, #32]
  4058cc:	4620      	mov	r0, r4
  4058ce:	6871      	ldr	r1, [r6, #4]
  4058d0:	f001 f936 	bl	406b40 <_Balloc>
  4058d4:	6933      	ldr	r3, [r6, #16]
  4058d6:	4605      	mov	r5, r0
  4058d8:	f106 010c 	add.w	r1, r6, #12
  4058dc:	1c9a      	adds	r2, r3, #2
  4058de:	300c      	adds	r0, #12
  4058e0:	0092      	lsls	r2, r2, #2
  4058e2:	f001 f82d 	bl	406940 <memcpy>
  4058e6:	4620      	mov	r0, r4
  4058e8:	4629      	mov	r1, r5
  4058ea:	2201      	movs	r2, #1
  4058ec:	f001 faec 	bl	406ec8 <__lshift>
  4058f0:	4606      	mov	r6, r0
  4058f2:	e6b8      	b.n	405666 <_dtoa_r+0xb6e>
  4058f4:	9b16      	ldr	r3, [sp, #88]	; 0x58
  4058f6:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  4058f8:	9d07      	ldr	r5, [sp, #28]
  4058fa:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
  4058fe:	f7ff bb4d 	b.w	404f9c <_dtoa_r+0x4a4>
  405902:	f1bc 0f39 	cmp.w	ip, #57	; 0x39
  405906:	9706      	str	r7, [sp, #24]
  405908:	f8cd b020 	str.w	fp, [sp, #32]
  40590c:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  40590e:	d030      	beq.n	405972 <_dtoa_r+0xe7a>
  405910:	f10c 0901 	add.w	r9, ip, #1
  405914:	f8dd a020 	ldr.w	sl, [sp, #32]
  405918:	f108 0501 	add.w	r5, r8, #1
  40591c:	9608      	str	r6, [sp, #32]
  40591e:	f888 9000 	strb.w	r9, [r8]
  405922:	e584      	b.n	40542e <_dtoa_r+0x936>
  405924:	9706      	str	r7, [sp, #24]
  405926:	46e1      	mov	r9, ip
  405928:	46da      	mov	sl, fp
  40592a:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  40592c:	9608      	str	r6, [sp, #32]
  40592e:	e562      	b.n	4053f6 <_dtoa_r+0x8fe>
  405930:	46b0      	mov	r8, r6
  405932:	e504      	b.n	40533e <_dtoa_r+0x846>
  405934:	f1bc 0f39 	cmp.w	ip, #57	; 0x39
  405938:	9706      	str	r7, [sp, #24]
  40593a:	f8cd b020 	str.w	fp, [sp, #32]
  40593e:	4655      	mov	r5, sl
  405940:	46cb      	mov	fp, r9
  405942:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  405944:	46e1      	mov	r9, ip
  405946:	d00b      	beq.n	405960 <_dtoa_r+0xe68>
  405948:	2d00      	cmp	r5, #0
  40594a:	dd01      	ble.n	405950 <_dtoa_r+0xe58>
  40594c:	f10b 0931 	add.w	r9, fp, #49	; 0x31
  405950:	f8dd a020 	ldr.w	sl, [sp, #32]
  405954:	f108 0501 	add.w	r5, r8, #1
  405958:	f888 9000 	strb.w	r9, [r8]
  40595c:	9608      	str	r6, [sp, #32]
  40595e:	e566      	b.n	40542e <_dtoa_r+0x936>
  405960:	f8dd a020 	ldr.w	sl, [sp, #32]
  405964:	9608      	str	r6, [sp, #32]
  405966:	2239      	movs	r2, #57	; 0x39
  405968:	f108 0501 	add.w	r5, r8, #1
  40596c:	f888 2000 	strb.w	r2, [r8]
  405970:	e54f      	b.n	405412 <_dtoa_r+0x91a>
  405972:	46da      	mov	sl, fp
  405974:	9608      	str	r6, [sp, #32]
  405976:	e7f6      	b.n	405966 <_dtoa_r+0xe6e>
  405978:	d18d      	bne.n	405896 <_dtoa_r+0xd9e>
  40597a:	f019 0f01 	tst.w	r9, #1
  40597e:	d08a      	beq.n	405896 <_dtoa_r+0xd9e>
  405980:	e784      	b.n	40588c <_dtoa_r+0xd94>
  405982:	f04f 0802 	mov.w	r8, #2
  405986:	f7ff bb72 	b.w	40506e <_dtoa_r+0x576>
  40598a:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40598c:	9304      	str	r3, [sp, #16]
  40598e:	e50e      	b.n	4053ae <_dtoa_r+0x8b6>
  405990:	f43f aa75 	beq.w	404e7e <_dtoa_r+0x386>
  405994:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
  405998:	f7ff ba6a 	b.w	404e70 <_dtoa_r+0x378>
  40599c:	2501      	movs	r5, #1
  40599e:	f7ff b982 	b.w	404ca6 <_dtoa_r+0x1ae>
  4059a2:	2500      	movs	r5, #0
  4059a4:	4620      	mov	r0, r4
  4059a6:	6465      	str	r5, [r4, #68]	; 0x44
  4059a8:	4629      	mov	r1, r5
  4059aa:	f001 f8c9 	bl	406b40 <_Balloc>
  4059ae:	9a02      	ldr	r2, [sp, #8]
  4059b0:	9005      	str	r0, [sp, #20]
  4059b2:	2a0e      	cmp	r2, #14
  4059b4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  4059b6:	6420      	str	r0, [r4, #64]	; 0x40
  4059b8:	f73f aad7 	bgt.w	404f6a <_dtoa_r+0x472>
  4059bc:	42ab      	cmp	r3, r5
  4059be:	f6ff aad4 	blt.w	404f6a <_dtoa_r+0x472>
  4059c2:	f04f 33ff 	mov.w	r3, #4294967295
  4059c6:	9523      	str	r5, [sp, #140]	; 0x8c
  4059c8:	9304      	str	r3, [sp, #16]
  4059ca:	f7ff b9a9 	b.w	404d20 <_dtoa_r+0x228>
  4059ce:	2301      	movs	r3, #1
  4059d0:	930b      	str	r3, [sp, #44]	; 0x2c
  4059d2:	f7ff bbfa 	b.w	4051ca <_dtoa_r+0x6d2>
  4059d6:	bf00      	nop
  4059d8:	40240000 	.word	0x40240000
  4059dc:	401c0000 	.word	0x401c0000

004059e0 <__sflush_r>:
  4059e0:	898b      	ldrh	r3, [r1, #12]
  4059e2:	b29a      	uxth	r2, r3
  4059e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4059e8:	460d      	mov	r5, r1
  4059ea:	0711      	lsls	r1, r2, #28
  4059ec:	4680      	mov	r8, r0
  4059ee:	d43c      	bmi.n	405a6a <__sflush_r+0x8a>
  4059f0:	686a      	ldr	r2, [r5, #4]
  4059f2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  4059f6:	2a00      	cmp	r2, #0
  4059f8:	81ab      	strh	r3, [r5, #12]
  4059fa:	dd76      	ble.n	405aea <__sflush_r+0x10a>
  4059fc:	6aae      	ldr	r6, [r5, #40]	; 0x28
  4059fe:	2e00      	cmp	r6, #0
  405a00:	d04b      	beq.n	405a9a <__sflush_r+0xba>
  405a02:	b29b      	uxth	r3, r3
  405a04:	2100      	movs	r1, #0
  405a06:	f8d8 4000 	ldr.w	r4, [r8]
  405a0a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
  405a0e:	f8c8 1000 	str.w	r1, [r8]
  405a12:	b292      	uxth	r2, r2
  405a14:	2a00      	cmp	r2, #0
  405a16:	d06c      	beq.n	405af2 <__sflush_r+0x112>
  405a18:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  405a1a:	075f      	lsls	r7, r3, #29
  405a1c:	d505      	bpl.n	405a2a <__sflush_r+0x4a>
  405a1e:	6869      	ldr	r1, [r5, #4]
  405a20:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  405a22:	1a52      	subs	r2, r2, r1
  405a24:	b10b      	cbz	r3, 405a2a <__sflush_r+0x4a>
  405a26:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  405a28:	1ad2      	subs	r2, r2, r3
  405a2a:	4640      	mov	r0, r8
  405a2c:	69e9      	ldr	r1, [r5, #28]
  405a2e:	2300      	movs	r3, #0
  405a30:	47b0      	blx	r6
  405a32:	1c46      	adds	r6, r0, #1
  405a34:	d03e      	beq.n	405ab4 <__sflush_r+0xd4>
  405a36:	89ab      	ldrh	r3, [r5, #12]
  405a38:	2100      	movs	r1, #0
  405a3a:	692a      	ldr	r2, [r5, #16]
  405a3c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  405a40:	6069      	str	r1, [r5, #4]
  405a42:	602a      	str	r2, [r5, #0]
  405a44:	b29b      	uxth	r3, r3
  405a46:	04da      	lsls	r2, r3, #19
  405a48:	81ab      	strh	r3, [r5, #12]
  405a4a:	d44c      	bmi.n	405ae6 <__sflush_r+0x106>
  405a4c:	6b29      	ldr	r1, [r5, #48]	; 0x30
  405a4e:	f8c8 4000 	str.w	r4, [r8]
  405a52:	b311      	cbz	r1, 405a9a <__sflush_r+0xba>
  405a54:	f105 0340 	add.w	r3, r5, #64	; 0x40
  405a58:	4299      	cmp	r1, r3
  405a5a:	d002      	beq.n	405a62 <__sflush_r+0x82>
  405a5c:	4640      	mov	r0, r8
  405a5e:	f000 f96b 	bl	405d38 <_free_r>
  405a62:	2000      	movs	r0, #0
  405a64:	6328      	str	r0, [r5, #48]	; 0x30
  405a66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405a6a:	692e      	ldr	r6, [r5, #16]
  405a6c:	b1ae      	cbz	r6, 405a9a <__sflush_r+0xba>
  405a6e:	682c      	ldr	r4, [r5, #0]
  405a70:	0791      	lsls	r1, r2, #30
  405a72:	602e      	str	r6, [r5, #0]
  405a74:	eba4 0406 	sub.w	r4, r4, r6
  405a78:	d11a      	bne.n	405ab0 <__sflush_r+0xd0>
  405a7a:	696b      	ldr	r3, [r5, #20]
  405a7c:	60ab      	str	r3, [r5, #8]
  405a7e:	e00a      	b.n	405a96 <__sflush_r+0xb6>
  405a80:	4632      	mov	r2, r6
  405a82:	4623      	mov	r3, r4
  405a84:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  405a86:	4640      	mov	r0, r8
  405a88:	69e9      	ldr	r1, [r5, #28]
  405a8a:	47b8      	blx	r7
  405a8c:	2800      	cmp	r0, #0
  405a8e:	eba4 0400 	sub.w	r4, r4, r0
  405a92:	4406      	add	r6, r0
  405a94:	dd04      	ble.n	405aa0 <__sflush_r+0xc0>
  405a96:	2c00      	cmp	r4, #0
  405a98:	dcf2      	bgt.n	405a80 <__sflush_r+0xa0>
  405a9a:	2000      	movs	r0, #0
  405a9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405aa0:	89ab      	ldrh	r3, [r5, #12]
  405aa2:	f04f 30ff 	mov.w	r0, #4294967295
  405aa6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  405aaa:	81ab      	strh	r3, [r5, #12]
  405aac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405ab0:	2300      	movs	r3, #0
  405ab2:	e7e3      	b.n	405a7c <__sflush_r+0x9c>
  405ab4:	f8d8 3000 	ldr.w	r3, [r8]
  405ab8:	fab3 f283 	clz	r2, r3
  405abc:	2b00      	cmp	r3, #0
  405abe:	bf18      	it	ne
  405ac0:	2b1d      	cmpne	r3, #29
  405ac2:	ea4f 1252 	mov.w	r2, r2, lsr #5
  405ac6:	d001      	beq.n	405acc <__sflush_r+0xec>
  405ac8:	2b16      	cmp	r3, #22
  405aca:	d127      	bne.n	405b1c <__sflush_r+0x13c>
  405acc:	89ab      	ldrh	r3, [r5, #12]
  405ace:	2600      	movs	r6, #0
  405ad0:	6929      	ldr	r1, [r5, #16]
  405ad2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  405ad6:	b29b      	uxth	r3, r3
  405ad8:	81ab      	strh	r3, [r5, #12]
  405ada:	04db      	lsls	r3, r3, #19
  405adc:	e885 0042 	stmia.w	r5, {r1, r6}
  405ae0:	d5b4      	bpl.n	405a4c <__sflush_r+0x6c>
  405ae2:	2a00      	cmp	r2, #0
  405ae4:	d0b2      	beq.n	405a4c <__sflush_r+0x6c>
  405ae6:	6528      	str	r0, [r5, #80]	; 0x50
  405ae8:	e7b0      	b.n	405a4c <__sflush_r+0x6c>
  405aea:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  405aec:	2a00      	cmp	r2, #0
  405aee:	dc85      	bgt.n	4059fc <__sflush_r+0x1c>
  405af0:	e7d3      	b.n	405a9a <__sflush_r+0xba>
  405af2:	2301      	movs	r3, #1
  405af4:	4640      	mov	r0, r8
  405af6:	69e9      	ldr	r1, [r5, #28]
  405af8:	47b0      	blx	r6
  405afa:	1c43      	adds	r3, r0, #1
  405afc:	4602      	mov	r2, r0
  405afe:	d002      	beq.n	405b06 <__sflush_r+0x126>
  405b00:	89ab      	ldrh	r3, [r5, #12]
  405b02:	6aae      	ldr	r6, [r5, #40]	; 0x28
  405b04:	e789      	b.n	405a1a <__sflush_r+0x3a>
  405b06:	f8d8 3000 	ldr.w	r3, [r8]
  405b0a:	2b00      	cmp	r3, #0
  405b0c:	d0f8      	beq.n	405b00 <__sflush_r+0x120>
  405b0e:	2b16      	cmp	r3, #22
  405b10:	d001      	beq.n	405b16 <__sflush_r+0x136>
  405b12:	2b1d      	cmp	r3, #29
  405b14:	d1c4      	bne.n	405aa0 <__sflush_r+0xc0>
  405b16:	f8c8 4000 	str.w	r4, [r8]
  405b1a:	e7be      	b.n	405a9a <__sflush_r+0xba>
  405b1c:	89ab      	ldrh	r3, [r5, #12]
  405b1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  405b22:	81ab      	strh	r3, [r5, #12]
  405b24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00405b28 <_fflush_r>:
  405b28:	b510      	push	{r4, lr}
  405b2a:	4604      	mov	r4, r0
  405b2c:	b082      	sub	sp, #8
  405b2e:	b108      	cbz	r0, 405b34 <_fflush_r+0xc>
  405b30:	6b83      	ldr	r3, [r0, #56]	; 0x38
  405b32:	b153      	cbz	r3, 405b4a <_fflush_r+0x22>
  405b34:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
  405b38:	b908      	cbnz	r0, 405b3e <_fflush_r+0x16>
  405b3a:	b002      	add	sp, #8
  405b3c:	bd10      	pop	{r4, pc}
  405b3e:	4620      	mov	r0, r4
  405b40:	b002      	add	sp, #8
  405b42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  405b46:	f7ff bf4b 	b.w	4059e0 <__sflush_r>
  405b4a:	9101      	str	r1, [sp, #4]
  405b4c:	f000 f886 	bl	405c5c <__sinit>
  405b50:	9901      	ldr	r1, [sp, #4]
  405b52:	e7ef      	b.n	405b34 <_fflush_r+0xc>

00405b54 <_cleanup_r>:
  405b54:	4901      	ldr	r1, [pc, #4]	; (405b5c <_cleanup_r+0x8>)
  405b56:	f000 bb59 	b.w	40620c <_fwalk_reent>
  405b5a:	bf00      	nop
  405b5c:	0040789d 	.word	0x0040789d

00405b60 <__sinit.part.1>:
  405b60:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405b64:	4682      	mov	sl, r0
  405b66:	2400      	movs	r4, #0
  405b68:	4837      	ldr	r0, [pc, #220]	; (405c48 <__sinit.part.1+0xe8>)
  405b6a:	2103      	movs	r1, #3
  405b6c:	f8da 5004 	ldr.w	r5, [sl, #4]
  405b70:	f50a 723b 	add.w	r2, sl, #748	; 0x2ec
  405b74:	2604      	movs	r6, #4
  405b76:	f8ca 003c 	str.w	r0, [sl, #60]	; 0x3c
  405b7a:	f8ca 12e4 	str.w	r1, [sl, #740]	; 0x2e4
  405b7e:	f105 005c 	add.w	r0, r5, #92	; 0x5c
  405b82:	f8ca 22e8 	str.w	r2, [sl, #744]	; 0x2e8
  405b86:	4621      	mov	r1, r4
  405b88:	f8ca 42e0 	str.w	r4, [sl, #736]	; 0x2e0
  405b8c:	2208      	movs	r2, #8
  405b8e:	81ae      	strh	r6, [r5, #12]
  405b90:	602c      	str	r4, [r5, #0]
  405b92:	606c      	str	r4, [r5, #4]
  405b94:	60ac      	str	r4, [r5, #8]
  405b96:	666c      	str	r4, [r5, #100]	; 0x64
  405b98:	81ec      	strh	r4, [r5, #14]
  405b9a:	612c      	str	r4, [r5, #16]
  405b9c:	616c      	str	r4, [r5, #20]
  405b9e:	61ac      	str	r4, [r5, #24]
  405ba0:	f7fd fa58 	bl	403054 <memset>
  405ba4:	f8df b0a8 	ldr.w	fp, [pc, #168]	; 405c50 <__sinit.part.1+0xf0>
  405ba8:	f8da 6008 	ldr.w	r6, [sl, #8]
  405bac:	f04f 0301 	mov.w	r3, #1
  405bb0:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 405c54 <__sinit.part.1+0xf4>
  405bb4:	f04f 0e09 	mov.w	lr, #9
  405bb8:	f8df 809c 	ldr.w	r8, [pc, #156]	; 405c58 <__sinit.part.1+0xf8>
  405bbc:	4621      	mov	r1, r4
  405bbe:	4f23      	ldr	r7, [pc, #140]	; (405c4c <__sinit.part.1+0xec>)
  405bc0:	2208      	movs	r2, #8
  405bc2:	61ed      	str	r5, [r5, #28]
  405bc4:	f106 005c 	add.w	r0, r6, #92	; 0x5c
  405bc8:	f8c5 b020 	str.w	fp, [r5, #32]
  405bcc:	f8c5 9024 	str.w	r9, [r5, #36]	; 0x24
  405bd0:	f8c5 8028 	str.w	r8, [r5, #40]	; 0x28
  405bd4:	62ef      	str	r7, [r5, #44]	; 0x2c
  405bd6:	81f3      	strh	r3, [r6, #14]
  405bd8:	f8a6 e00c 	strh.w	lr, [r6, #12]
  405bdc:	6034      	str	r4, [r6, #0]
  405bde:	6074      	str	r4, [r6, #4]
  405be0:	60b4      	str	r4, [r6, #8]
  405be2:	6674      	str	r4, [r6, #100]	; 0x64
  405be4:	6134      	str	r4, [r6, #16]
  405be6:	6174      	str	r4, [r6, #20]
  405be8:	61b4      	str	r4, [r6, #24]
  405bea:	f7fd fa33 	bl	403054 <memset>
  405bee:	f8da 500c 	ldr.w	r5, [sl, #12]
  405bf2:	f04f 0c12 	mov.w	ip, #18
  405bf6:	f04f 0e02 	mov.w	lr, #2
  405bfa:	61f6      	str	r6, [r6, #28]
  405bfc:	4621      	mov	r1, r4
  405bfe:	f8c6 b020 	str.w	fp, [r6, #32]
  405c02:	f105 005c 	add.w	r0, r5, #92	; 0x5c
  405c06:	f8c6 9024 	str.w	r9, [r6, #36]	; 0x24
  405c0a:	2208      	movs	r2, #8
  405c0c:	f8c6 8028 	str.w	r8, [r6, #40]	; 0x28
  405c10:	62f7      	str	r7, [r6, #44]	; 0x2c
  405c12:	602c      	str	r4, [r5, #0]
  405c14:	606c      	str	r4, [r5, #4]
  405c16:	60ac      	str	r4, [r5, #8]
  405c18:	666c      	str	r4, [r5, #100]	; 0x64
  405c1a:	612c      	str	r4, [r5, #16]
  405c1c:	616c      	str	r4, [r5, #20]
  405c1e:	61ac      	str	r4, [r5, #24]
  405c20:	f8a5 c00c 	strh.w	ip, [r5, #12]
  405c24:	f8a5 e00e 	strh.w	lr, [r5, #14]
  405c28:	f7fd fa14 	bl	403054 <memset>
  405c2c:	2301      	movs	r3, #1
  405c2e:	61ed      	str	r5, [r5, #28]
  405c30:	f8c5 b020 	str.w	fp, [r5, #32]
  405c34:	f8c5 9024 	str.w	r9, [r5, #36]	; 0x24
  405c38:	f8c5 8028 	str.w	r8, [r5, #40]	; 0x28
  405c3c:	62ef      	str	r7, [r5, #44]	; 0x2c
  405c3e:	f8ca 3038 	str.w	r3, [sl, #56]	; 0x38
  405c42:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405c46:	bf00      	nop
  405c48:	00405b55 	.word	0x00405b55
  405c4c:	00407631 	.word	0x00407631
  405c50:	004075b1 	.word	0x004075b1
  405c54:	004075d5 	.word	0x004075d5
  405c58:	0040760d 	.word	0x0040760d

00405c5c <__sinit>:
  405c5c:	6b83      	ldr	r3, [r0, #56]	; 0x38
  405c5e:	b103      	cbz	r3, 405c62 <__sinit+0x6>
  405c60:	4770      	bx	lr
  405c62:	f7ff bf7d 	b.w	405b60 <__sinit.part.1>
  405c66:	bf00      	nop

00405c68 <__sfp_lock_acquire>:
  405c68:	4770      	bx	lr
  405c6a:	bf00      	nop

00405c6c <__sfp_lock_release>:
  405c6c:	4770      	bx	lr
  405c6e:	bf00      	nop

00405c70 <__libc_fini_array>:
  405c70:	b538      	push	{r3, r4, r5, lr}
  405c72:	4b08      	ldr	r3, [pc, #32]	; (405c94 <__libc_fini_array+0x24>)
  405c74:	4d08      	ldr	r5, [pc, #32]	; (405c98 <__libc_fini_array+0x28>)
  405c76:	1aed      	subs	r5, r5, r3
  405c78:	10ac      	asrs	r4, r5, #2
  405c7a:	bf18      	it	ne
  405c7c:	18ed      	addne	r5, r5, r3
  405c7e:	d005      	beq.n	405c8c <__libc_fini_array+0x1c>
  405c80:	3c01      	subs	r4, #1
  405c82:	f855 3d04 	ldr.w	r3, [r5, #-4]!
  405c86:	4798      	blx	r3
  405c88:	2c00      	cmp	r4, #0
  405c8a:	d1f9      	bne.n	405c80 <__libc_fini_array+0x10>
  405c8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  405c90:	f002 bfa4 	b.w	408bdc <_fini>
  405c94:	00408be8 	.word	0x00408be8
  405c98:	00408bec 	.word	0x00408bec

00405c9c <_malloc_trim_r>:
  405c9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  405c9e:	4f22      	ldr	r7, [pc, #136]	; (405d28 <_malloc_trim_r+0x8c>)
  405ca0:	460c      	mov	r4, r1
  405ca2:	4606      	mov	r6, r0
  405ca4:	f000 ff48 	bl	406b38 <__malloc_lock>
  405ca8:	68ba      	ldr	r2, [r7, #8]
  405caa:	4b20      	ldr	r3, [pc, #128]	; (405d2c <_malloc_trim_r+0x90>)
  405cac:	6855      	ldr	r5, [r2, #4]
  405cae:	f025 0503 	bic.w	r5, r5, #3
  405cb2:	1b2c      	subs	r4, r5, r4
  405cb4:	f604 74ef 	addw	r4, r4, #4079	; 0xfef
  405cb8:	4023      	ands	r3, r4
  405cba:	f5a3 5480 	sub.w	r4, r3, #4096	; 0x1000
  405cbe:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  405cc2:	db07      	blt.n	405cd4 <_malloc_trim_r+0x38>
  405cc4:	4630      	mov	r0, r6
  405cc6:	2100      	movs	r1, #0
  405cc8:	f001 fc60 	bl	40758c <_sbrk_r>
  405ccc:	68bb      	ldr	r3, [r7, #8]
  405cce:	442b      	add	r3, r5
  405cd0:	4298      	cmp	r0, r3
  405cd2:	d004      	beq.n	405cde <_malloc_trim_r+0x42>
  405cd4:	4630      	mov	r0, r6
  405cd6:	f000 ff31 	bl	406b3c <__malloc_unlock>
  405cda:	2000      	movs	r0, #0
  405cdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  405cde:	4630      	mov	r0, r6
  405ce0:	4261      	negs	r1, r4
  405ce2:	f001 fc53 	bl	40758c <_sbrk_r>
  405ce6:	3001      	adds	r0, #1
  405ce8:	d00d      	beq.n	405d06 <_malloc_trim_r+0x6a>
  405cea:	4a11      	ldr	r2, [pc, #68]	; (405d30 <_malloc_trim_r+0x94>)
  405cec:	1b2d      	subs	r5, r5, r4
  405cee:	68b9      	ldr	r1, [r7, #8]
  405cf0:	4630      	mov	r0, r6
  405cf2:	6813      	ldr	r3, [r2, #0]
  405cf4:	f045 0501 	orr.w	r5, r5, #1
  405cf8:	1b1b      	subs	r3, r3, r4
  405cfa:	604d      	str	r5, [r1, #4]
  405cfc:	6013      	str	r3, [r2, #0]
  405cfe:	f000 ff1d 	bl	406b3c <__malloc_unlock>
  405d02:	2001      	movs	r0, #1
  405d04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  405d06:	4630      	mov	r0, r6
  405d08:	2100      	movs	r1, #0
  405d0a:	f001 fc3f 	bl	40758c <_sbrk_r>
  405d0e:	68ba      	ldr	r2, [r7, #8]
  405d10:	1a83      	subs	r3, r0, r2
  405d12:	2b0f      	cmp	r3, #15
  405d14:	ddde      	ble.n	405cd4 <_malloc_trim_r+0x38>
  405d16:	4c07      	ldr	r4, [pc, #28]	; (405d34 <_malloc_trim_r+0x98>)
  405d18:	f043 0301 	orr.w	r3, r3, #1
  405d1c:	4904      	ldr	r1, [pc, #16]	; (405d30 <_malloc_trim_r+0x94>)
  405d1e:	6824      	ldr	r4, [r4, #0]
  405d20:	6053      	str	r3, [r2, #4]
  405d22:	1b00      	subs	r0, r0, r4
  405d24:	6008      	str	r0, [r1, #0]
  405d26:	e7d5      	b.n	405cd4 <_malloc_trim_r+0x38>
  405d28:	204004e4 	.word	0x204004e4
  405d2c:	fffff000 	.word	0xfffff000
  405d30:	204009a0 	.word	0x204009a0
  405d34:	204008f0 	.word	0x204008f0

00405d38 <_free_r>:
  405d38:	2900      	cmp	r1, #0
  405d3a:	d04d      	beq.n	405dd8 <_free_r+0xa0>
  405d3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  405d40:	460c      	mov	r4, r1
  405d42:	4680      	mov	r8, r0
  405d44:	f000 fef8 	bl	406b38 <__malloc_lock>
  405d48:	4963      	ldr	r1, [pc, #396]	; (405ed8 <_free_r+0x1a0>)
  405d4a:	f854 7c04 	ldr.w	r7, [r4, #-4]
  405d4e:	f1a4 0508 	sub.w	r5, r4, #8
  405d52:	688e      	ldr	r6, [r1, #8]
  405d54:	f027 0301 	bic.w	r3, r7, #1
  405d58:	18ea      	adds	r2, r5, r3
  405d5a:	6850      	ldr	r0, [r2, #4]
  405d5c:	4296      	cmp	r6, r2
  405d5e:	f020 0003 	bic.w	r0, r0, #3
  405d62:	d059      	beq.n	405e18 <_free_r+0xe0>
  405d64:	07fe      	lsls	r6, r7, #31
  405d66:	6050      	str	r0, [r2, #4]
  405d68:	d40b      	bmi.n	405d82 <_free_r+0x4a>
  405d6a:	f854 4c08 	ldr.w	r4, [r4, #-8]
  405d6e:	f101 0708 	add.w	r7, r1, #8
  405d72:	1b2d      	subs	r5, r5, r4
  405d74:	4423      	add	r3, r4
  405d76:	68ac      	ldr	r4, [r5, #8]
  405d78:	42bc      	cmp	r4, r7
  405d7a:	d066      	beq.n	405e4a <_free_r+0x112>
  405d7c:	68ef      	ldr	r7, [r5, #12]
  405d7e:	60e7      	str	r7, [r4, #12]
  405d80:	60bc      	str	r4, [r7, #8]
  405d82:	1814      	adds	r4, r2, r0
  405d84:	6864      	ldr	r4, [r4, #4]
  405d86:	07e4      	lsls	r4, r4, #31
  405d88:	d40c      	bmi.n	405da4 <_free_r+0x6c>
  405d8a:	4c54      	ldr	r4, [pc, #336]	; (405edc <_free_r+0x1a4>)
  405d8c:	4403      	add	r3, r0
  405d8e:	6890      	ldr	r0, [r2, #8]
  405d90:	42a0      	cmp	r0, r4
  405d92:	d07c      	beq.n	405e8e <_free_r+0x156>
  405d94:	68d4      	ldr	r4, [r2, #12]
  405d96:	f043 0201 	orr.w	r2, r3, #1
  405d9a:	60c4      	str	r4, [r0, #12]
  405d9c:	60a0      	str	r0, [r4, #8]
  405d9e:	606a      	str	r2, [r5, #4]
  405da0:	50eb      	str	r3, [r5, r3]
  405da2:	e003      	b.n	405dac <_free_r+0x74>
  405da4:	f043 0201 	orr.w	r2, r3, #1
  405da8:	606a      	str	r2, [r5, #4]
  405daa:	50eb      	str	r3, [r5, r3]
  405dac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  405db0:	d213      	bcs.n	405dda <_free_r+0xa2>
  405db2:	08db      	lsrs	r3, r3, #3
  405db4:	2001      	movs	r0, #1
  405db6:	684a      	ldr	r2, [r1, #4]
  405db8:	109c      	asrs	r4, r3, #2
  405dba:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
  405dbe:	40a0      	lsls	r0, r4
  405dc0:	689c      	ldr	r4, [r3, #8]
  405dc2:	4302      	orrs	r2, r0
  405dc4:	60eb      	str	r3, [r5, #12]
  405dc6:	60ac      	str	r4, [r5, #8]
  405dc8:	604a      	str	r2, [r1, #4]
  405dca:	609d      	str	r5, [r3, #8]
  405dcc:	60e5      	str	r5, [r4, #12]
  405dce:	4640      	mov	r0, r8
  405dd0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  405dd4:	f000 beb2 	b.w	406b3c <__malloc_unlock>
  405dd8:	4770      	bx	lr
  405dda:	0a5a      	lsrs	r2, r3, #9
  405ddc:	2a04      	cmp	r2, #4
  405dde:	d847      	bhi.n	405e70 <_free_r+0x138>
  405de0:	099a      	lsrs	r2, r3, #6
  405de2:	f102 0438 	add.w	r4, r2, #56	; 0x38
  405de6:	0060      	lsls	r0, r4, #1
  405de8:	eb01 0080 	add.w	r0, r1, r0, lsl #2
  405dec:	493a      	ldr	r1, [pc, #232]	; (405ed8 <_free_r+0x1a0>)
  405dee:	6882      	ldr	r2, [r0, #8]
  405df0:	4282      	cmp	r2, r0
  405df2:	d043      	beq.n	405e7c <_free_r+0x144>
  405df4:	6851      	ldr	r1, [r2, #4]
  405df6:	f021 0103 	bic.w	r1, r1, #3
  405dfa:	4299      	cmp	r1, r3
  405dfc:	d902      	bls.n	405e04 <_free_r+0xcc>
  405dfe:	6892      	ldr	r2, [r2, #8]
  405e00:	4290      	cmp	r0, r2
  405e02:	d1f7      	bne.n	405df4 <_free_r+0xbc>
  405e04:	68d3      	ldr	r3, [r2, #12]
  405e06:	60eb      	str	r3, [r5, #12]
  405e08:	4640      	mov	r0, r8
  405e0a:	60aa      	str	r2, [r5, #8]
  405e0c:	609d      	str	r5, [r3, #8]
  405e0e:	60d5      	str	r5, [r2, #12]
  405e10:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  405e14:	f000 be92 	b.w	406b3c <__malloc_unlock>
  405e18:	07ff      	lsls	r7, r7, #31
  405e1a:	4403      	add	r3, r0
  405e1c:	d407      	bmi.n	405e2e <_free_r+0xf6>
  405e1e:	f854 2c08 	ldr.w	r2, [r4, #-8]
  405e22:	1aad      	subs	r5, r5, r2
  405e24:	4413      	add	r3, r2
  405e26:	68a8      	ldr	r0, [r5, #8]
  405e28:	68ea      	ldr	r2, [r5, #12]
  405e2a:	60c2      	str	r2, [r0, #12]
  405e2c:	6090      	str	r0, [r2, #8]
  405e2e:	4a2c      	ldr	r2, [pc, #176]	; (405ee0 <_free_r+0x1a8>)
  405e30:	f043 0001 	orr.w	r0, r3, #1
  405e34:	6812      	ldr	r2, [r2, #0]
  405e36:	6068      	str	r0, [r5, #4]
  405e38:	4293      	cmp	r3, r2
  405e3a:	608d      	str	r5, [r1, #8]
  405e3c:	d3c7      	bcc.n	405dce <_free_r+0x96>
  405e3e:	4b29      	ldr	r3, [pc, #164]	; (405ee4 <_free_r+0x1ac>)
  405e40:	4640      	mov	r0, r8
  405e42:	6819      	ldr	r1, [r3, #0]
  405e44:	f7ff ff2a 	bl	405c9c <_malloc_trim_r>
  405e48:	e7c1      	b.n	405dce <_free_r+0x96>
  405e4a:	1811      	adds	r1, r2, r0
  405e4c:	6849      	ldr	r1, [r1, #4]
  405e4e:	07c9      	lsls	r1, r1, #31
  405e50:	d409      	bmi.n	405e66 <_free_r+0x12e>
  405e52:	4403      	add	r3, r0
  405e54:	68d1      	ldr	r1, [r2, #12]
  405e56:	6892      	ldr	r2, [r2, #8]
  405e58:	f043 0001 	orr.w	r0, r3, #1
  405e5c:	60d1      	str	r1, [r2, #12]
  405e5e:	608a      	str	r2, [r1, #8]
  405e60:	6068      	str	r0, [r5, #4]
  405e62:	50eb      	str	r3, [r5, r3]
  405e64:	e7b3      	b.n	405dce <_free_r+0x96>
  405e66:	f043 0201 	orr.w	r2, r3, #1
  405e6a:	606a      	str	r2, [r5, #4]
  405e6c:	50eb      	str	r3, [r5, r3]
  405e6e:	e7ae      	b.n	405dce <_free_r+0x96>
  405e70:	2a14      	cmp	r2, #20
  405e72:	d815      	bhi.n	405ea0 <_free_r+0x168>
  405e74:	f102 045b 	add.w	r4, r2, #91	; 0x5b
  405e78:	0060      	lsls	r0, r4, #1
  405e7a:	e7b5      	b.n	405de8 <_free_r+0xb0>
  405e7c:	10a4      	asrs	r4, r4, #2
  405e7e:	2701      	movs	r7, #1
  405e80:	6848      	ldr	r0, [r1, #4]
  405e82:	4613      	mov	r3, r2
  405e84:	fa07 f404 	lsl.w	r4, r7, r4
  405e88:	4320      	orrs	r0, r4
  405e8a:	6048      	str	r0, [r1, #4]
  405e8c:	e7bb      	b.n	405e06 <_free_r+0xce>
  405e8e:	f043 0201 	orr.w	r2, r3, #1
  405e92:	614d      	str	r5, [r1, #20]
  405e94:	610d      	str	r5, [r1, #16]
  405e96:	60e8      	str	r0, [r5, #12]
  405e98:	60a8      	str	r0, [r5, #8]
  405e9a:	606a      	str	r2, [r5, #4]
  405e9c:	50eb      	str	r3, [r5, r3]
  405e9e:	e796      	b.n	405dce <_free_r+0x96>
  405ea0:	2a54      	cmp	r2, #84	; 0x54
  405ea2:	d804      	bhi.n	405eae <_free_r+0x176>
  405ea4:	0b1a      	lsrs	r2, r3, #12
  405ea6:	f102 046e 	add.w	r4, r2, #110	; 0x6e
  405eaa:	0060      	lsls	r0, r4, #1
  405eac:	e79c      	b.n	405de8 <_free_r+0xb0>
  405eae:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  405eb2:	d804      	bhi.n	405ebe <_free_r+0x186>
  405eb4:	0bda      	lsrs	r2, r3, #15
  405eb6:	f102 0477 	add.w	r4, r2, #119	; 0x77
  405eba:	0060      	lsls	r0, r4, #1
  405ebc:	e794      	b.n	405de8 <_free_r+0xb0>
  405ebe:	f240 5054 	movw	r0, #1364	; 0x554
  405ec2:	4282      	cmp	r2, r0
  405ec4:	d804      	bhi.n	405ed0 <_free_r+0x198>
  405ec6:	0c9a      	lsrs	r2, r3, #18
  405ec8:	f102 047c 	add.w	r4, r2, #124	; 0x7c
  405ecc:	0060      	lsls	r0, r4, #1
  405ece:	e78b      	b.n	405de8 <_free_r+0xb0>
  405ed0:	20fc      	movs	r0, #252	; 0xfc
  405ed2:	247e      	movs	r4, #126	; 0x7e
  405ed4:	e788      	b.n	405de8 <_free_r+0xb0>
  405ed6:	bf00      	nop
  405ed8:	204004e4 	.word	0x204004e4
  405edc:	204004ec 	.word	0x204004ec
  405ee0:	204008ec 	.word	0x204008ec
  405ee4:	2040099c 	.word	0x2040099c

00405ee8 <__sfvwrite_r>:
  405ee8:	6893      	ldr	r3, [r2, #8]
  405eea:	2b00      	cmp	r3, #0
  405eec:	d07a      	beq.n	405fe4 <__sfvwrite_r+0xfc>
  405eee:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405ef2:	f8b1 e00c 	ldrh.w	lr, [r1, #12]
  405ef6:	b083      	sub	sp, #12
  405ef8:	460c      	mov	r4, r1
  405efa:	4681      	mov	r9, r0
  405efc:	f01e 0f08 	tst.w	lr, #8
  405f00:	4616      	mov	r6, r2
  405f02:	d026      	beq.n	405f52 <__sfvwrite_r+0x6a>
  405f04:	690b      	ldr	r3, [r1, #16]
  405f06:	b323      	cbz	r3, 405f52 <__sfvwrite_r+0x6a>
  405f08:	f00e 0802 	and.w	r8, lr, #2
  405f0c:	6835      	ldr	r5, [r6, #0]
  405f0e:	fa1f f088 	uxth.w	r0, r8
  405f12:	b370      	cbz	r0, 405f72 <__sfvwrite_r+0x8a>
  405f14:	f04f 0a00 	mov.w	sl, #0
  405f18:	f8df b2ec 	ldr.w	fp, [pc, #748]	; 406208 <__sfvwrite_r+0x320>
  405f1c:	46d0      	mov	r8, sl
  405f1e:	45d8      	cmp	r8, fp
  405f20:	4643      	mov	r3, r8
  405f22:	4652      	mov	r2, sl
  405f24:	4648      	mov	r0, r9
  405f26:	bf28      	it	cs
  405f28:	465b      	movcs	r3, fp
  405f2a:	f1b8 0f00 	cmp.w	r8, #0
  405f2e:	d053      	beq.n	405fd8 <__sfvwrite_r+0xf0>
  405f30:	69e1      	ldr	r1, [r4, #28]
  405f32:	6a67      	ldr	r7, [r4, #36]	; 0x24
  405f34:	47b8      	blx	r7
  405f36:	2800      	cmp	r0, #0
  405f38:	dd73      	ble.n	406022 <__sfvwrite_r+0x13a>
  405f3a:	68b3      	ldr	r3, [r6, #8]
  405f3c:	4482      	add	sl, r0
  405f3e:	ebc0 0808 	rsb	r8, r0, r8
  405f42:	1a18      	subs	r0, r3, r0
  405f44:	60b0      	str	r0, [r6, #8]
  405f46:	2800      	cmp	r0, #0
  405f48:	d1e9      	bne.n	405f1e <__sfvwrite_r+0x36>
  405f4a:	2000      	movs	r0, #0
  405f4c:	b003      	add	sp, #12
  405f4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405f52:	4648      	mov	r0, r9
  405f54:	4621      	mov	r1, r4
  405f56:	f7fe fcbb 	bl	4048d0 <__swsetup_r>
  405f5a:	2800      	cmp	r0, #0
  405f5c:	f040 814c 	bne.w	4061f8 <__sfvwrite_r+0x310>
  405f60:	f8b4 e00c 	ldrh.w	lr, [r4, #12]
  405f64:	6835      	ldr	r5, [r6, #0]
  405f66:	f00e 0802 	and.w	r8, lr, #2
  405f6a:	fa1f f088 	uxth.w	r0, r8
  405f6e:	2800      	cmp	r0, #0
  405f70:	d1d0      	bne.n	405f14 <__sfvwrite_r+0x2c>
  405f72:	f01e 0b01 	ands.w	fp, lr, #1
  405f76:	d15d      	bne.n	406034 <__sfvwrite_r+0x14c>
  405f78:	46d8      	mov	r8, fp
  405f7a:	f1b8 0f00 	cmp.w	r8, #0
  405f7e:	d025      	beq.n	405fcc <__sfvwrite_r+0xe4>
  405f80:	f41e 7f00 	tst.w	lr, #512	; 0x200
  405f84:	68a7      	ldr	r7, [r4, #8]
  405f86:	d02f      	beq.n	405fe8 <__sfvwrite_r+0x100>
  405f88:	45b8      	cmp	r8, r7
  405f8a:	46ba      	mov	sl, r7
  405f8c:	f0c0 80a8 	bcc.w	4060e0 <__sfvwrite_r+0x1f8>
  405f90:	f41e 6f90 	tst.w	lr, #1152	; 0x480
  405f94:	f040 80b5 	bne.w	406102 <__sfvwrite_r+0x21a>
  405f98:	6820      	ldr	r0, [r4, #0]
  405f9a:	4659      	mov	r1, fp
  405f9c:	4652      	mov	r2, sl
  405f9e:	f000 fd69 	bl	406a74 <memmove>
  405fa2:	68a2      	ldr	r2, [r4, #8]
  405fa4:	6821      	ldr	r1, [r4, #0]
  405fa6:	4640      	mov	r0, r8
  405fa8:	1bd7      	subs	r7, r2, r7
  405faa:	eb01 030a 	add.w	r3, r1, sl
  405fae:	60a7      	str	r7, [r4, #8]
  405fb0:	6023      	str	r3, [r4, #0]
  405fb2:	68b3      	ldr	r3, [r6, #8]
  405fb4:	4483      	add	fp, r0
  405fb6:	ebc0 0808 	rsb	r8, r0, r8
  405fba:	1a18      	subs	r0, r3, r0
  405fbc:	60b0      	str	r0, [r6, #8]
  405fbe:	2800      	cmp	r0, #0
  405fc0:	d0c3      	beq.n	405f4a <__sfvwrite_r+0x62>
  405fc2:	f8b4 e00c 	ldrh.w	lr, [r4, #12]
  405fc6:	f1b8 0f00 	cmp.w	r8, #0
  405fca:	d1d9      	bne.n	405f80 <__sfvwrite_r+0x98>
  405fcc:	f8d5 b000 	ldr.w	fp, [r5]
  405fd0:	3508      	adds	r5, #8
  405fd2:	f855 8c04 	ldr.w	r8, [r5, #-4]
  405fd6:	e7d0      	b.n	405f7a <__sfvwrite_r+0x92>
  405fd8:	f8d5 a000 	ldr.w	sl, [r5]
  405fdc:	3508      	adds	r5, #8
  405fde:	f855 8c04 	ldr.w	r8, [r5, #-4]
  405fe2:	e79c      	b.n	405f1e <__sfvwrite_r+0x36>
  405fe4:	2000      	movs	r0, #0
  405fe6:	4770      	bx	lr
  405fe8:	6820      	ldr	r0, [r4, #0]
  405fea:	6923      	ldr	r3, [r4, #16]
  405fec:	4298      	cmp	r0, r3
  405fee:	d803      	bhi.n	405ff8 <__sfvwrite_r+0x110>
  405ff0:	6963      	ldr	r3, [r4, #20]
  405ff2:	4598      	cmp	r8, r3
  405ff4:	f080 80bf 	bcs.w	406176 <__sfvwrite_r+0x28e>
  405ff8:	4547      	cmp	r7, r8
  405ffa:	4659      	mov	r1, fp
  405ffc:	bf28      	it	cs
  405ffe:	4647      	movcs	r7, r8
  406000:	463a      	mov	r2, r7
  406002:	f000 fd37 	bl	406a74 <memmove>
  406006:	68a3      	ldr	r3, [r4, #8]
  406008:	6822      	ldr	r2, [r4, #0]
  40600a:	1bdb      	subs	r3, r3, r7
  40600c:	443a      	add	r2, r7
  40600e:	60a3      	str	r3, [r4, #8]
  406010:	6022      	str	r2, [r4, #0]
  406012:	2b00      	cmp	r3, #0
  406014:	d149      	bne.n	4060aa <__sfvwrite_r+0x1c2>
  406016:	4648      	mov	r0, r9
  406018:	4621      	mov	r1, r4
  40601a:	f7ff fd85 	bl	405b28 <_fflush_r>
  40601e:	2800      	cmp	r0, #0
  406020:	d043      	beq.n	4060aa <__sfvwrite_r+0x1c2>
  406022:	89a3      	ldrh	r3, [r4, #12]
  406024:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  406028:	f04f 30ff 	mov.w	r0, #4294967295
  40602c:	81a3      	strh	r3, [r4, #12]
  40602e:	b003      	add	sp, #12
  406030:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406034:	4680      	mov	r8, r0
  406036:	4683      	mov	fp, r0
  406038:	4682      	mov	sl, r0
  40603a:	9000      	str	r0, [sp, #0]
  40603c:	f1ba 0f00 	cmp.w	sl, #0
  406040:	d02b      	beq.n	40609a <__sfvwrite_r+0x1b2>
  406042:	9b00      	ldr	r3, [sp, #0]
  406044:	2b00      	cmp	r3, #0
  406046:	d04f      	beq.n	4060e8 <__sfvwrite_r+0x200>
  406048:	45d0      	cmp	r8, sl
  40604a:	6962      	ldr	r2, [r4, #20]
  40604c:	68a1      	ldr	r1, [r4, #8]
  40604e:	4643      	mov	r3, r8
  406050:	bf28      	it	cs
  406052:	4653      	movcs	r3, sl
  406054:	6820      	ldr	r0, [r4, #0]
  406056:	eb02 0c01 	add.w	ip, r2, r1
  40605a:	461f      	mov	r7, r3
  40605c:	4563      	cmp	r3, ip
  40605e:	dd03      	ble.n	406068 <__sfvwrite_r+0x180>
  406060:	6921      	ldr	r1, [r4, #16]
  406062:	4288      	cmp	r0, r1
  406064:	f200 8099 	bhi.w	40619a <__sfvwrite_r+0x2b2>
  406068:	4293      	cmp	r3, r2
  40606a:	db20      	blt.n	4060ae <__sfvwrite_r+0x1c6>
  40606c:	4613      	mov	r3, r2
  40606e:	6a67      	ldr	r7, [r4, #36]	; 0x24
  406070:	4648      	mov	r0, r9
  406072:	69e1      	ldr	r1, [r4, #28]
  406074:	465a      	mov	r2, fp
  406076:	47b8      	blx	r7
  406078:	1e07      	subs	r7, r0, #0
  40607a:	ddd2      	ble.n	406022 <__sfvwrite_r+0x13a>
  40607c:	ebb8 0807 	subs.w	r8, r8, r7
  406080:	d025      	beq.n	4060ce <__sfvwrite_r+0x1e6>
  406082:	68b3      	ldr	r3, [r6, #8]
  406084:	44bb      	add	fp, r7
  406086:	ebc7 0a0a 	rsb	sl, r7, sl
  40608a:	1bdf      	subs	r7, r3, r7
  40608c:	60b7      	str	r7, [r6, #8]
  40608e:	2f00      	cmp	r7, #0
  406090:	f43f af5b 	beq.w	405f4a <__sfvwrite_r+0x62>
  406094:	f1ba 0f00 	cmp.w	sl, #0
  406098:	d1d3      	bne.n	406042 <__sfvwrite_r+0x15a>
  40609a:	2300      	movs	r3, #0
  40609c:	f8d5 b000 	ldr.w	fp, [r5]
  4060a0:	f8d5 a004 	ldr.w	sl, [r5, #4]
  4060a4:	3508      	adds	r5, #8
  4060a6:	9300      	str	r3, [sp, #0]
  4060a8:	e7c8      	b.n	40603c <__sfvwrite_r+0x154>
  4060aa:	4638      	mov	r0, r7
  4060ac:	e781      	b.n	405fb2 <__sfvwrite_r+0xca>
  4060ae:	461a      	mov	r2, r3
  4060b0:	4659      	mov	r1, fp
  4060b2:	9301      	str	r3, [sp, #4]
  4060b4:	f000 fcde 	bl	406a74 <memmove>
  4060b8:	68a2      	ldr	r2, [r4, #8]
  4060ba:	ebb8 0807 	subs.w	r8, r8, r7
  4060be:	6821      	ldr	r1, [r4, #0]
  4060c0:	9b01      	ldr	r3, [sp, #4]
  4060c2:	eba2 0203 	sub.w	r2, r2, r3
  4060c6:	440b      	add	r3, r1
  4060c8:	60a2      	str	r2, [r4, #8]
  4060ca:	6023      	str	r3, [r4, #0]
  4060cc:	d1d9      	bne.n	406082 <__sfvwrite_r+0x19a>
  4060ce:	4648      	mov	r0, r9
  4060d0:	4621      	mov	r1, r4
  4060d2:	f7ff fd29 	bl	405b28 <_fflush_r>
  4060d6:	2800      	cmp	r0, #0
  4060d8:	d1a3      	bne.n	406022 <__sfvwrite_r+0x13a>
  4060da:	f8cd 8000 	str.w	r8, [sp]
  4060de:	e7d0      	b.n	406082 <__sfvwrite_r+0x19a>
  4060e0:	4647      	mov	r7, r8
  4060e2:	6820      	ldr	r0, [r4, #0]
  4060e4:	46c2      	mov	sl, r8
  4060e6:	e758      	b.n	405f9a <__sfvwrite_r+0xb2>
  4060e8:	4658      	mov	r0, fp
  4060ea:	210a      	movs	r1, #10
  4060ec:	4652      	mov	r2, sl
  4060ee:	f000 fbdf 	bl	4068b0 <memchr>
  4060f2:	2800      	cmp	r0, #0
  4060f4:	d07b      	beq.n	4061ee <__sfvwrite_r+0x306>
  4060f6:	3001      	adds	r0, #1
  4060f8:	2301      	movs	r3, #1
  4060fa:	ebcb 0800 	rsb	r8, fp, r0
  4060fe:	9300      	str	r3, [sp, #0]
  406100:	e7a2      	b.n	406048 <__sfvwrite_r+0x160>
  406102:	6963      	ldr	r3, [r4, #20]
  406104:	6921      	ldr	r1, [r4, #16]
  406106:	6827      	ldr	r7, [r4, #0]
  406108:	eb03 0c43 	add.w	ip, r3, r3, lsl #1
  40610c:	1a7f      	subs	r7, r7, r1
  40610e:	eb0c 7cdc 	add.w	ip, ip, ip, lsr #31
  406112:	1c7b      	adds	r3, r7, #1
  406114:	ea4f 0c6c 	mov.w	ip, ip, asr #1
  406118:	4443      	add	r3, r8
  40611a:	4662      	mov	r2, ip
  40611c:	459c      	cmp	ip, r3
  40611e:	d201      	bcs.n	406124 <__sfvwrite_r+0x23c>
  406120:	469c      	mov	ip, r3
  406122:	461a      	mov	r2, r3
  406124:	f41e 6f80 	tst.w	lr, #1024	; 0x400
  406128:	f8cd c000 	str.w	ip, [sp]
  40612c:	d04b      	beq.n	4061c6 <__sfvwrite_r+0x2de>
  40612e:	4611      	mov	r1, r2
  406130:	4648      	mov	r0, r9
  406132:	f000 f911 	bl	406358 <_malloc_r>
  406136:	f8dd c000 	ldr.w	ip, [sp]
  40613a:	4682      	mov	sl, r0
  40613c:	2800      	cmp	r0, #0
  40613e:	d05e      	beq.n	4061fe <__sfvwrite_r+0x316>
  406140:	463a      	mov	r2, r7
  406142:	6921      	ldr	r1, [r4, #16]
  406144:	f8cd c000 	str.w	ip, [sp]
  406148:	f000 fbfa 	bl	406940 <memcpy>
  40614c:	89a2      	ldrh	r2, [r4, #12]
  40614e:	f8dd c000 	ldr.w	ip, [sp]
  406152:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
  406156:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  40615a:	81a2      	strh	r2, [r4, #12]
  40615c:	eb0a 0007 	add.w	r0, sl, r7
  406160:	ebc7 020c 	rsb	r2, r7, ip
  406164:	f8c4 a010 	str.w	sl, [r4, #16]
  406168:	4647      	mov	r7, r8
  40616a:	6020      	str	r0, [r4, #0]
  40616c:	46c2      	mov	sl, r8
  40616e:	60a2      	str	r2, [r4, #8]
  406170:	f8c4 c014 	str.w	ip, [r4, #20]
  406174:	e711      	b.n	405f9a <__sfvwrite_r+0xb2>
  406176:	f06f 4e00 	mvn.w	lr, #2147483648	; 0x80000000
  40617a:	6a67      	ldr	r7, [r4, #36]	; 0x24
  40617c:	4648      	mov	r0, r9
  40617e:	69e1      	ldr	r1, [r4, #28]
  406180:	45c6      	cmp	lr, r8
  406182:	465a      	mov	r2, fp
  406184:	bf28      	it	cs
  406186:	46c6      	movcs	lr, r8
  406188:	fb9e fef3 	sdiv	lr, lr, r3
  40618c:	fb0e f303 	mul.w	r3, lr, r3
  406190:	47b8      	blx	r7
  406192:	2800      	cmp	r0, #0
  406194:	f73f af0d 	bgt.w	405fb2 <__sfvwrite_r+0xca>
  406198:	e743      	b.n	406022 <__sfvwrite_r+0x13a>
  40619a:	4662      	mov	r2, ip
  40619c:	4659      	mov	r1, fp
  40619e:	f8cd c004 	str.w	ip, [sp, #4]
  4061a2:	f000 fc67 	bl	406a74 <memmove>
  4061a6:	6823      	ldr	r3, [r4, #0]
  4061a8:	4648      	mov	r0, r9
  4061aa:	f8dd c004 	ldr.w	ip, [sp, #4]
  4061ae:	4621      	mov	r1, r4
  4061b0:	4463      	add	r3, ip
  4061b2:	6023      	str	r3, [r4, #0]
  4061b4:	f7ff fcb8 	bl	405b28 <_fflush_r>
  4061b8:	f8dd c004 	ldr.w	ip, [sp, #4]
  4061bc:	2800      	cmp	r0, #0
  4061be:	f47f af30 	bne.w	406022 <__sfvwrite_r+0x13a>
  4061c2:	4667      	mov	r7, ip
  4061c4:	e75a      	b.n	40607c <__sfvwrite_r+0x194>
  4061c6:	4648      	mov	r0, r9
  4061c8:	f000 ffc6 	bl	407158 <_realloc_r>
  4061cc:	f8dd c000 	ldr.w	ip, [sp]
  4061d0:	4682      	mov	sl, r0
  4061d2:	2800      	cmp	r0, #0
  4061d4:	d1c2      	bne.n	40615c <__sfvwrite_r+0x274>
  4061d6:	4648      	mov	r0, r9
  4061d8:	6921      	ldr	r1, [r4, #16]
  4061da:	f7ff fdad 	bl	405d38 <_free_r>
  4061de:	89a3      	ldrh	r3, [r4, #12]
  4061e0:	220c      	movs	r2, #12
  4061e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  4061e6:	f8c9 2000 	str.w	r2, [r9]
  4061ea:	b29b      	uxth	r3, r3
  4061ec:	e71a      	b.n	406024 <__sfvwrite_r+0x13c>
  4061ee:	2301      	movs	r3, #1
  4061f0:	f10a 0801 	add.w	r8, sl, #1
  4061f4:	9300      	str	r3, [sp, #0]
  4061f6:	e727      	b.n	406048 <__sfvwrite_r+0x160>
  4061f8:	f04f 30ff 	mov.w	r0, #4294967295
  4061fc:	e6a6      	b.n	405f4c <__sfvwrite_r+0x64>
  4061fe:	220c      	movs	r2, #12
  406200:	89a3      	ldrh	r3, [r4, #12]
  406202:	f8c9 2000 	str.w	r2, [r9]
  406206:	e70d      	b.n	406024 <__sfvwrite_r+0x13c>
  406208:	7ffffc00 	.word	0x7ffffc00

0040620c <_fwalk_reent>:
  40620c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  406210:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  406214:	d01e      	beq.n	406254 <_fwalk_reent+0x48>
  406216:	4688      	mov	r8, r1
  406218:	4606      	mov	r6, r0
  40621a:	f04f 0900 	mov.w	r9, #0
  40621e:	687d      	ldr	r5, [r7, #4]
  406220:	68bc      	ldr	r4, [r7, #8]
  406222:	3d01      	subs	r5, #1
  406224:	d410      	bmi.n	406248 <_fwalk_reent+0x3c>
  406226:	89a3      	ldrh	r3, [r4, #12]
  406228:	3d01      	subs	r5, #1
  40622a:	2b01      	cmp	r3, #1
  40622c:	d908      	bls.n	406240 <_fwalk_reent+0x34>
  40622e:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  406232:	4621      	mov	r1, r4
  406234:	4630      	mov	r0, r6
  406236:	3301      	adds	r3, #1
  406238:	d002      	beq.n	406240 <_fwalk_reent+0x34>
  40623a:	47c0      	blx	r8
  40623c:	ea49 0900 	orr.w	r9, r9, r0
  406240:	1c6b      	adds	r3, r5, #1
  406242:	f104 0468 	add.w	r4, r4, #104	; 0x68
  406246:	d1ee      	bne.n	406226 <_fwalk_reent+0x1a>
  406248:	683f      	ldr	r7, [r7, #0]
  40624a:	2f00      	cmp	r7, #0
  40624c:	d1e7      	bne.n	40621e <_fwalk_reent+0x12>
  40624e:	4648      	mov	r0, r9
  406250:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  406254:	46b9      	mov	r9, r7
  406256:	4648      	mov	r0, r9
  406258:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0040625c <_localeconv_r>:
  40625c:	4800      	ldr	r0, [pc, #0]	; (406260 <_localeconv_r+0x4>)
  40625e:	4770      	bx	lr
  406260:	204004ac 	.word	0x204004ac

00406264 <__smakebuf_r>:
  406264:	898b      	ldrh	r3, [r1, #12]
  406266:	b29a      	uxth	r2, r3
  406268:	f012 0f02 	tst.w	r2, #2
  40626c:	d13d      	bne.n	4062ea <__smakebuf_r+0x86>
  40626e:	b5f0      	push	{r4, r5, r6, r7, lr}
  406270:	460c      	mov	r4, r1
  406272:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  406276:	b091      	sub	sp, #68	; 0x44
  406278:	4605      	mov	r5, r0
  40627a:	2900      	cmp	r1, #0
  40627c:	db19      	blt.n	4062b2 <__smakebuf_r+0x4e>
  40627e:	aa01      	add	r2, sp, #4
  406280:	f001 fb4e 	bl	407920 <_fstat_r>
  406284:	2800      	cmp	r0, #0
  406286:	db12      	blt.n	4062ae <__smakebuf_r+0x4a>
  406288:	9b02      	ldr	r3, [sp, #8]
  40628a:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
  40628e:	f5a3 5700 	sub.w	r7, r3, #8192	; 0x2000
  406292:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
  406296:	fab7 f787 	clz	r7, r7
  40629a:	ea4f 1757 	mov.w	r7, r7, lsr #5
  40629e:	d02b      	beq.n	4062f8 <__smakebuf_r+0x94>
  4062a0:	89a3      	ldrh	r3, [r4, #12]
  4062a2:	f44f 6680 	mov.w	r6, #1024	; 0x400
  4062a6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  4062aa:	81a3      	strh	r3, [r4, #12]
  4062ac:	e00c      	b.n	4062c8 <__smakebuf_r+0x64>
  4062ae:	89a3      	ldrh	r3, [r4, #12]
  4062b0:	b29a      	uxth	r2, r3
  4062b2:	f012 0f80 	tst.w	r2, #128	; 0x80
  4062b6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  4062ba:	f04f 0700 	mov.w	r7, #0
  4062be:	bf0c      	ite	eq
  4062c0:	f44f 6680 	moveq.w	r6, #1024	; 0x400
  4062c4:	2640      	movne	r6, #64	; 0x40
  4062c6:	81a3      	strh	r3, [r4, #12]
  4062c8:	4628      	mov	r0, r5
  4062ca:	4631      	mov	r1, r6
  4062cc:	f000 f844 	bl	406358 <_malloc_r>
  4062d0:	89a3      	ldrh	r3, [r4, #12]
  4062d2:	b340      	cbz	r0, 406326 <__smakebuf_r+0xc2>
  4062d4:	4a1a      	ldr	r2, [pc, #104]	; (406340 <__smakebuf_r+0xdc>)
  4062d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4062da:	63ea      	str	r2, [r5, #60]	; 0x3c
  4062dc:	81a3      	strh	r3, [r4, #12]
  4062de:	6020      	str	r0, [r4, #0]
  4062e0:	6120      	str	r0, [r4, #16]
  4062e2:	6166      	str	r6, [r4, #20]
  4062e4:	b99f      	cbnz	r7, 40630e <__smakebuf_r+0xaa>
  4062e6:	b011      	add	sp, #68	; 0x44
  4062e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4062ea:	f101 0343 	add.w	r3, r1, #67	; 0x43
  4062ee:	2201      	movs	r2, #1
  4062f0:	600b      	str	r3, [r1, #0]
  4062f2:	610b      	str	r3, [r1, #16]
  4062f4:	614a      	str	r2, [r1, #20]
  4062f6:	4770      	bx	lr
  4062f8:	4b12      	ldr	r3, [pc, #72]	; (406344 <__smakebuf_r+0xe0>)
  4062fa:	6aa2      	ldr	r2, [r4, #40]	; 0x28
  4062fc:	429a      	cmp	r2, r3
  4062fe:	d1cf      	bne.n	4062a0 <__smakebuf_r+0x3c>
  406300:	89a3      	ldrh	r3, [r4, #12]
  406302:	f44f 6680 	mov.w	r6, #1024	; 0x400
  406306:	4333      	orrs	r3, r6
  406308:	64e6      	str	r6, [r4, #76]	; 0x4c
  40630a:	81a3      	strh	r3, [r4, #12]
  40630c:	e7dc      	b.n	4062c8 <__smakebuf_r+0x64>
  40630e:	4628      	mov	r0, r5
  406310:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  406314:	f001 fb18 	bl	407948 <_isatty_r>
  406318:	2800      	cmp	r0, #0
  40631a:	d0e4      	beq.n	4062e6 <__smakebuf_r+0x82>
  40631c:	89a3      	ldrh	r3, [r4, #12]
  40631e:	f043 0301 	orr.w	r3, r3, #1
  406322:	81a3      	strh	r3, [r4, #12]
  406324:	e7df      	b.n	4062e6 <__smakebuf_r+0x82>
  406326:	059a      	lsls	r2, r3, #22
  406328:	d4dd      	bmi.n	4062e6 <__smakebuf_r+0x82>
  40632a:	f104 0243 	add.w	r2, r4, #67	; 0x43
  40632e:	f043 0302 	orr.w	r3, r3, #2
  406332:	2101      	movs	r1, #1
  406334:	81a3      	strh	r3, [r4, #12]
  406336:	6022      	str	r2, [r4, #0]
  406338:	6122      	str	r2, [r4, #16]
  40633a:	6161      	str	r1, [r4, #20]
  40633c:	e7d3      	b.n	4062e6 <__smakebuf_r+0x82>
  40633e:	bf00      	nop
  406340:	00405b55 	.word	0x00405b55
  406344:	0040760d 	.word	0x0040760d

00406348 <malloc>:
  406348:	4b02      	ldr	r3, [pc, #8]	; (406354 <malloc+0xc>)
  40634a:	4601      	mov	r1, r0
  40634c:	6818      	ldr	r0, [r3, #0]
  40634e:	f000 b803 	b.w	406358 <_malloc_r>
  406352:	bf00      	nop
  406354:	204004a8 	.word	0x204004a8

00406358 <_malloc_r>:
  406358:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40635c:	f101 040b 	add.w	r4, r1, #11
  406360:	b083      	sub	sp, #12
  406362:	4605      	mov	r5, r0
  406364:	2c16      	cmp	r4, #22
  406366:	d927      	bls.n	4063b8 <_malloc_r+0x60>
  406368:	f034 0407 	bics.w	r4, r4, #7
  40636c:	d42a      	bmi.n	4063c4 <_malloc_r+0x6c>
  40636e:	42a1      	cmp	r1, r4
  406370:	d828      	bhi.n	4063c4 <_malloc_r+0x6c>
  406372:	f000 fbe1 	bl	406b38 <__malloc_lock>
  406376:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
  40637a:	d22b      	bcs.n	4063d4 <_malloc_r+0x7c>
  40637c:	ea4f 0cd4 	mov.w	ip, r4, lsr #3
  406380:	4ec0      	ldr	r6, [pc, #768]	; (406684 <_malloc_r+0x32c>)
  406382:	eb06 02cc 	add.w	r2, r6, ip, lsl #3
  406386:	68d3      	ldr	r3, [r2, #12]
  406388:	4293      	cmp	r3, r2
  40638a:	f000 8171 	beq.w	406670 <_malloc_r+0x318>
  40638e:	685a      	ldr	r2, [r3, #4]
  406390:	f103 0808 	add.w	r8, r3, #8
  406394:	68d9      	ldr	r1, [r3, #12]
  406396:	4628      	mov	r0, r5
  406398:	f022 0203 	bic.w	r2, r2, #3
  40639c:	689c      	ldr	r4, [r3, #8]
  40639e:	4413      	add	r3, r2
  4063a0:	60e1      	str	r1, [r4, #12]
  4063a2:	608c      	str	r4, [r1, #8]
  4063a4:	685a      	ldr	r2, [r3, #4]
  4063a6:	f042 0201 	orr.w	r2, r2, #1
  4063aa:	605a      	str	r2, [r3, #4]
  4063ac:	f000 fbc6 	bl	406b3c <__malloc_unlock>
  4063b0:	4640      	mov	r0, r8
  4063b2:	b003      	add	sp, #12
  4063b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4063b8:	2910      	cmp	r1, #16
  4063ba:	d803      	bhi.n	4063c4 <_malloc_r+0x6c>
  4063bc:	f000 fbbc 	bl	406b38 <__malloc_lock>
  4063c0:	2410      	movs	r4, #16
  4063c2:	e7db      	b.n	40637c <_malloc_r+0x24>
  4063c4:	f04f 0800 	mov.w	r8, #0
  4063c8:	230c      	movs	r3, #12
  4063ca:	4640      	mov	r0, r8
  4063cc:	602b      	str	r3, [r5, #0]
  4063ce:	b003      	add	sp, #12
  4063d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4063d4:	ea5f 2c54 	movs.w	ip, r4, lsr #9
  4063d8:	f000 8089 	beq.w	4064ee <_malloc_r+0x196>
  4063dc:	f1bc 0f04 	cmp.w	ip, #4
  4063e0:	f200 80c4 	bhi.w	40656c <_malloc_r+0x214>
  4063e4:	ea4f 1c94 	mov.w	ip, r4, lsr #6
  4063e8:	f10c 0c38 	add.w	ip, ip, #56	; 0x38
  4063ec:	ea4f 004c 	mov.w	r0, ip, lsl #1
  4063f0:	4ea4      	ldr	r6, [pc, #656]	; (406684 <_malloc_r+0x32c>)
  4063f2:	eb06 0080 	add.w	r0, r6, r0, lsl #2
  4063f6:	68c3      	ldr	r3, [r0, #12]
  4063f8:	4298      	cmp	r0, r3
  4063fa:	d105      	bne.n	406408 <_malloc_r+0xb0>
  4063fc:	e00c      	b.n	406418 <_malloc_r+0xc0>
  4063fe:	2900      	cmp	r1, #0
  406400:	da79      	bge.n	4064f6 <_malloc_r+0x19e>
  406402:	68db      	ldr	r3, [r3, #12]
  406404:	4298      	cmp	r0, r3
  406406:	d007      	beq.n	406418 <_malloc_r+0xc0>
  406408:	685a      	ldr	r2, [r3, #4]
  40640a:	f022 0203 	bic.w	r2, r2, #3
  40640e:	1b11      	subs	r1, r2, r4
  406410:	290f      	cmp	r1, #15
  406412:	ddf4      	ble.n	4063fe <_malloc_r+0xa6>
  406414:	f10c 3cff 	add.w	ip, ip, #4294967295
  406418:	f10c 0c01 	add.w	ip, ip, #1
  40641c:	4f99      	ldr	r7, [pc, #612]	; (406684 <_malloc_r+0x32c>)
  40641e:	6933      	ldr	r3, [r6, #16]
  406420:	f107 0e08 	add.w	lr, r7, #8
  406424:	4573      	cmp	r3, lr
  406426:	f000 8119 	beq.w	40665c <_malloc_r+0x304>
  40642a:	685a      	ldr	r2, [r3, #4]
  40642c:	f022 0203 	bic.w	r2, r2, #3
  406430:	1b11      	subs	r1, r2, r4
  406432:	290f      	cmp	r1, #15
  406434:	f300 80ca 	bgt.w	4065cc <_malloc_r+0x274>
  406438:	2900      	cmp	r1, #0
  40643a:	f8c7 e014 	str.w	lr, [r7, #20]
  40643e:	f8c7 e010 	str.w	lr, [r7, #16]
  406442:	da6a      	bge.n	40651a <_malloc_r+0x1c2>
  406444:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  406448:	f080 809f 	bcs.w	40658a <_malloc_r+0x232>
  40644c:	08d2      	lsrs	r2, r2, #3
  40644e:	2001      	movs	r0, #1
  406450:	6879      	ldr	r1, [r7, #4]
  406452:	ea4f 08a2 	mov.w	r8, r2, asr #2
  406456:	eb07 02c2 	add.w	r2, r7, r2, lsl #3
  40645a:	fa00 f008 	lsl.w	r0, r0, r8
  40645e:	f8d2 8008 	ldr.w	r8, [r2, #8]
  406462:	4308      	orrs	r0, r1
  406464:	60da      	str	r2, [r3, #12]
  406466:	f8c3 8008 	str.w	r8, [r3, #8]
  40646a:	6078      	str	r0, [r7, #4]
  40646c:	6093      	str	r3, [r2, #8]
  40646e:	f8c8 300c 	str.w	r3, [r8, #12]
  406472:	ea4f 03ac 	mov.w	r3, ip, asr #2
  406476:	2101      	movs	r1, #1
  406478:	4099      	lsls	r1, r3
  40647a:	4281      	cmp	r1, r0
  40647c:	d85b      	bhi.n	406536 <_malloc_r+0x1de>
  40647e:	4208      	tst	r0, r1
  406480:	d106      	bne.n	406490 <_malloc_r+0x138>
  406482:	f02c 0c03 	bic.w	ip, ip, #3
  406486:	0049      	lsls	r1, r1, #1
  406488:	f10c 0c04 	add.w	ip, ip, #4
  40648c:	4208      	tst	r0, r1
  40648e:	d0fa      	beq.n	406486 <_malloc_r+0x12e>
  406490:	eb06 08cc 	add.w	r8, r6, ip, lsl #3
  406494:	46e1      	mov	r9, ip
  406496:	4640      	mov	r0, r8
  406498:	68c7      	ldr	r7, [r0, #12]
  40649a:	42b8      	cmp	r0, r7
  40649c:	d107      	bne.n	4064ae <_malloc_r+0x156>
  40649e:	e0df      	b.n	406660 <_malloc_r+0x308>
  4064a0:	2a00      	cmp	r2, #0
  4064a2:	f280 80f7 	bge.w	406694 <_malloc_r+0x33c>
  4064a6:	68ff      	ldr	r7, [r7, #12]
  4064a8:	42b8      	cmp	r0, r7
  4064aa:	f000 80d9 	beq.w	406660 <_malloc_r+0x308>
  4064ae:	687b      	ldr	r3, [r7, #4]
  4064b0:	f023 0303 	bic.w	r3, r3, #3
  4064b4:	1b1a      	subs	r2, r3, r4
  4064b6:	2a0f      	cmp	r2, #15
  4064b8:	ddf2      	ble.n	4064a0 <_malloc_r+0x148>
  4064ba:	46b8      	mov	r8, r7
  4064bc:	68fb      	ldr	r3, [r7, #12]
  4064be:	f044 0901 	orr.w	r9, r4, #1
  4064c2:	f042 0c01 	orr.w	ip, r2, #1
  4064c6:	f858 1f08 	ldr.w	r1, [r8, #8]!
  4064ca:	443c      	add	r4, r7
  4064cc:	f8c7 9004 	str.w	r9, [r7, #4]
  4064d0:	4628      	mov	r0, r5
  4064d2:	60cb      	str	r3, [r1, #12]
  4064d4:	6099      	str	r1, [r3, #8]
  4064d6:	6174      	str	r4, [r6, #20]
  4064d8:	6134      	str	r4, [r6, #16]
  4064da:	f8c4 e00c 	str.w	lr, [r4, #12]
  4064de:	f8c4 e008 	str.w	lr, [r4, #8]
  4064e2:	f8c4 c004 	str.w	ip, [r4, #4]
  4064e6:	50a2      	str	r2, [r4, r2]
  4064e8:	f000 fb28 	bl	406b3c <__malloc_unlock>
  4064ec:	e760      	b.n	4063b0 <_malloc_r+0x58>
  4064ee:	207e      	movs	r0, #126	; 0x7e
  4064f0:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
  4064f4:	e77c      	b.n	4063f0 <_malloc_r+0x98>
  4064f6:	441a      	add	r2, r3
  4064f8:	68dc      	ldr	r4, [r3, #12]
  4064fa:	689e      	ldr	r6, [r3, #8]
  4064fc:	f103 0808 	add.w	r8, r3, #8
  406500:	6851      	ldr	r1, [r2, #4]
  406502:	4628      	mov	r0, r5
  406504:	60f4      	str	r4, [r6, #12]
  406506:	f041 0301 	orr.w	r3, r1, #1
  40650a:	60a6      	str	r6, [r4, #8]
  40650c:	6053      	str	r3, [r2, #4]
  40650e:	f000 fb15 	bl	406b3c <__malloc_unlock>
  406512:	4640      	mov	r0, r8
  406514:	b003      	add	sp, #12
  406516:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40651a:	441a      	add	r2, r3
  40651c:	f103 0808 	add.w	r8, r3, #8
  406520:	4628      	mov	r0, r5
  406522:	6853      	ldr	r3, [r2, #4]
  406524:	f043 0301 	orr.w	r3, r3, #1
  406528:	6053      	str	r3, [r2, #4]
  40652a:	f000 fb07 	bl	406b3c <__malloc_unlock>
  40652e:	4640      	mov	r0, r8
  406530:	b003      	add	sp, #12
  406532:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406536:	68b7      	ldr	r7, [r6, #8]
  406538:	687a      	ldr	r2, [r7, #4]
  40653a:	f022 0803 	bic.w	r8, r2, #3
  40653e:	ebc4 0208 	rsb	r2, r4, r8
  406542:	2a0f      	cmp	r2, #15
  406544:	dd56      	ble.n	4065f4 <_malloc_r+0x29c>
  406546:	45a0      	cmp	r8, r4
  406548:	d354      	bcc.n	4065f4 <_malloc_r+0x29c>
  40654a:	f044 0301 	orr.w	r3, r4, #1
  40654e:	f042 0201 	orr.w	r2, r2, #1
  406552:	443c      	add	r4, r7
  406554:	f107 0808 	add.w	r8, r7, #8
  406558:	607b      	str	r3, [r7, #4]
  40655a:	4628      	mov	r0, r5
  40655c:	60b4      	str	r4, [r6, #8]
  40655e:	6062      	str	r2, [r4, #4]
  406560:	f000 faec 	bl	406b3c <__malloc_unlock>
  406564:	4640      	mov	r0, r8
  406566:	b003      	add	sp, #12
  406568:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40656c:	f1bc 0f14 	cmp.w	ip, #20
  406570:	f240 809f 	bls.w	4066b2 <_malloc_r+0x35a>
  406574:	f1bc 0f54 	cmp.w	ip, #84	; 0x54
  406578:	f200 8127 	bhi.w	4067ca <_malloc_r+0x472>
  40657c:	ea4f 3c14 	mov.w	ip, r4, lsr #12
  406580:	f10c 0c6e 	add.w	ip, ip, #110	; 0x6e
  406584:	ea4f 004c 	mov.w	r0, ip, lsl #1
  406588:	e732      	b.n	4063f0 <_malloc_r+0x98>
  40658a:	0a51      	lsrs	r1, r2, #9
  40658c:	2904      	cmp	r1, #4
  40658e:	f240 8095 	bls.w	4066bc <_malloc_r+0x364>
  406592:	2914      	cmp	r1, #20
  406594:	f200 8142 	bhi.w	40681c <_malloc_r+0x4c4>
  406598:	f101 075b 	add.w	r7, r1, #91	; 0x5b
  40659c:	0078      	lsls	r0, r7, #1
  40659e:	eb06 0080 	add.w	r0, r6, r0, lsl #2
  4065a2:	f8df 90e0 	ldr.w	r9, [pc, #224]	; 406684 <_malloc_r+0x32c>
  4065a6:	6881      	ldr	r1, [r0, #8]
  4065a8:	4281      	cmp	r1, r0
  4065aa:	f000 811b 	beq.w	4067e4 <_malloc_r+0x48c>
  4065ae:	684f      	ldr	r7, [r1, #4]
  4065b0:	f027 0703 	bic.w	r7, r7, #3
  4065b4:	42ba      	cmp	r2, r7
  4065b6:	d202      	bcs.n	4065be <_malloc_r+0x266>
  4065b8:	6889      	ldr	r1, [r1, #8]
  4065ba:	4288      	cmp	r0, r1
  4065bc:	d1f7      	bne.n	4065ae <_malloc_r+0x256>
  4065be:	68ca      	ldr	r2, [r1, #12]
  4065c0:	6870      	ldr	r0, [r6, #4]
  4065c2:	60da      	str	r2, [r3, #12]
  4065c4:	6099      	str	r1, [r3, #8]
  4065c6:	6093      	str	r3, [r2, #8]
  4065c8:	60cb      	str	r3, [r1, #12]
  4065ca:	e752      	b.n	406472 <_malloc_r+0x11a>
  4065cc:	f044 0601 	orr.w	r6, r4, #1
  4065d0:	f041 0201 	orr.w	r2, r1, #1
  4065d4:	441c      	add	r4, r3
  4065d6:	4628      	mov	r0, r5
  4065d8:	605e      	str	r6, [r3, #4]
  4065da:	f103 0808 	add.w	r8, r3, #8
  4065de:	617c      	str	r4, [r7, #20]
  4065e0:	613c      	str	r4, [r7, #16]
  4065e2:	f8c4 e00c 	str.w	lr, [r4, #12]
  4065e6:	f8c4 e008 	str.w	lr, [r4, #8]
  4065ea:	6062      	str	r2, [r4, #4]
  4065ec:	5061      	str	r1, [r4, r1]
  4065ee:	f000 faa5 	bl	406b3c <__malloc_unlock>
  4065f2:	e6dd      	b.n	4063b0 <_malloc_r+0x58>
  4065f4:	4a24      	ldr	r2, [pc, #144]	; (406688 <_malloc_r+0x330>)
  4065f6:	4b25      	ldr	r3, [pc, #148]	; (40668c <_malloc_r+0x334>)
  4065f8:	6811      	ldr	r1, [r2, #0]
  4065fa:	681b      	ldr	r3, [r3, #0]
  4065fc:	3101      	adds	r1, #1
  4065fe:	4423      	add	r3, r4
  406600:	f000 8109 	beq.w	406816 <_malloc_r+0x4be>
  406604:	f241 010f 	movw	r1, #4111	; 0x100f
  406608:	f8df 9084 	ldr.w	r9, [pc, #132]	; 406690 <_malloc_r+0x338>
  40660c:	4419      	add	r1, r3
  40660e:	ea01 0909 	and.w	r9, r1, r9
  406612:	4628      	mov	r0, r5
  406614:	4649      	mov	r1, r9
  406616:	9201      	str	r2, [sp, #4]
  406618:	f000 ffb8 	bl	40758c <_sbrk_r>
  40661c:	f1b0 3fff 	cmp.w	r0, #4294967295
  406620:	4682      	mov	sl, r0
  406622:	9a01      	ldr	r2, [sp, #4]
  406624:	f000 8101 	beq.w	40682a <_malloc_r+0x4d2>
  406628:	1bbb      	subs	r3, r7, r6
  40662a:	eb07 0108 	add.w	r1, r7, r8
  40662e:	4815      	ldr	r0, [pc, #84]	; (406684 <_malloc_r+0x32c>)
  406630:	bf18      	it	ne
  406632:	2301      	movne	r3, #1
  406634:	4551      	cmp	r1, sl
  406636:	d967      	bls.n	406708 <_malloc_r+0x3b0>
  406638:	2b00      	cmp	r3, #0
  40663a:	d065      	beq.n	406708 <_malloc_r+0x3b0>
  40663c:	6887      	ldr	r7, [r0, #8]
  40663e:	687b      	ldr	r3, [r7, #4]
  406640:	f023 0303 	bic.w	r3, r3, #3
  406644:	1b1a      	subs	r2, r3, r4
  406646:	2a0f      	cmp	r2, #15
  406648:	dd02      	ble.n	406650 <_malloc_r+0x2f8>
  40664a:	429c      	cmp	r4, r3
  40664c:	f67f af7d 	bls.w	40654a <_malloc_r+0x1f2>
  406650:	4628      	mov	r0, r5
  406652:	f04f 0800 	mov.w	r8, #0
  406656:	f000 fa71 	bl	406b3c <__malloc_unlock>
  40665a:	e6a9      	b.n	4063b0 <_malloc_r+0x58>
  40665c:	6878      	ldr	r0, [r7, #4]
  40665e:	e708      	b.n	406472 <_malloc_r+0x11a>
  406660:	f109 0901 	add.w	r9, r9, #1
  406664:	3008      	adds	r0, #8
  406666:	f019 0f03 	tst.w	r9, #3
  40666a:	f47f af15 	bne.w	406498 <_malloc_r+0x140>
  40666e:	e02f      	b.n	4066d0 <_malloc_r+0x378>
  406670:	f103 0208 	add.w	r2, r3, #8
  406674:	695b      	ldr	r3, [r3, #20]
  406676:	429a      	cmp	r2, r3
  406678:	bf08      	it	eq
  40667a:	f10c 0c02 	addeq.w	ip, ip, #2
  40667e:	f43f aecd 	beq.w	40641c <_malloc_r+0xc4>
  406682:	e684      	b.n	40638e <_malloc_r+0x36>
  406684:	204004e4 	.word	0x204004e4
  406688:	204008f0 	.word	0x204008f0
  40668c:	2040099c 	.word	0x2040099c
  406690:	fffff000 	.word	0xfffff000
  406694:	18fa      	adds	r2, r7, r3
  406696:	46b8      	mov	r8, r7
  406698:	68f9      	ldr	r1, [r7, #12]
  40669a:	4628      	mov	r0, r5
  40669c:	6853      	ldr	r3, [r2, #4]
  40669e:	f858 4f08 	ldr.w	r4, [r8, #8]!
  4066a2:	f043 0301 	orr.w	r3, r3, #1
  4066a6:	6053      	str	r3, [r2, #4]
  4066a8:	60e1      	str	r1, [r4, #12]
  4066aa:	608c      	str	r4, [r1, #8]
  4066ac:	f000 fa46 	bl	406b3c <__malloc_unlock>
  4066b0:	e67e      	b.n	4063b0 <_malloc_r+0x58>
  4066b2:	f10c 0c5b 	add.w	ip, ip, #91	; 0x5b
  4066b6:	ea4f 004c 	mov.w	r0, ip, lsl #1
  4066ba:	e699      	b.n	4063f0 <_malloc_r+0x98>
  4066bc:	0991      	lsrs	r1, r2, #6
  4066be:	f101 0738 	add.w	r7, r1, #56	; 0x38
  4066c2:	0078      	lsls	r0, r7, #1
  4066c4:	e76b      	b.n	40659e <_malloc_r+0x246>
  4066c6:	f8d8 8000 	ldr.w	r8, [r8]
  4066ca:	4598      	cmp	r8, r3
  4066cc:	f040 80e6 	bne.w	40689c <_malloc_r+0x544>
  4066d0:	f01c 0f03 	tst.w	ip, #3
  4066d4:	f1a8 0308 	sub.w	r3, r8, #8
  4066d8:	f10c 3cff 	add.w	ip, ip, #4294967295
  4066dc:	d1f3      	bne.n	4066c6 <_malloc_r+0x36e>
  4066de:	6873      	ldr	r3, [r6, #4]
  4066e0:	ea23 0301 	bic.w	r3, r3, r1
  4066e4:	6073      	str	r3, [r6, #4]
  4066e6:	0049      	lsls	r1, r1, #1
  4066e8:	4299      	cmp	r1, r3
  4066ea:	f63f af24 	bhi.w	406536 <_malloc_r+0x1de>
  4066ee:	2900      	cmp	r1, #0
  4066f0:	f43f af21 	beq.w	406536 <_malloc_r+0x1de>
  4066f4:	420b      	tst	r3, r1
  4066f6:	46cc      	mov	ip, r9
  4066f8:	f47f aeca 	bne.w	406490 <_malloc_r+0x138>
  4066fc:	0049      	lsls	r1, r1, #1
  4066fe:	f10c 0c04 	add.w	ip, ip, #4
  406702:	420b      	tst	r3, r1
  406704:	d0fa      	beq.n	4066fc <_malloc_r+0x3a4>
  406706:	e6c3      	b.n	406490 <_malloc_r+0x138>
  406708:	f8df b19c 	ldr.w	fp, [pc, #412]	; 4068a8 <_malloc_r+0x550>
  40670c:	4551      	cmp	r1, sl
  40670e:	f8db 0000 	ldr.w	r0, [fp]
  406712:	4448      	add	r0, r9
  406714:	f8cb 0000 	str.w	r0, [fp]
  406718:	f000 808c 	beq.w	406834 <_malloc_r+0x4dc>
  40671c:	6812      	ldr	r2, [r2, #0]
  40671e:	f8df e18c 	ldr.w	lr, [pc, #396]	; 4068ac <_malloc_r+0x554>
  406722:	3201      	adds	r2, #1
  406724:	f000 80a3 	beq.w	40686e <_malloc_r+0x516>
  406728:	ebc1 010a 	rsb	r1, r1, sl
  40672c:	4408      	add	r0, r1
  40672e:	f8cb 0000 	str.w	r0, [fp]
  406732:	f01a 0107 	ands.w	r1, sl, #7
  406736:	d052      	beq.n	4067de <_malloc_r+0x486>
  406738:	f1c1 0008 	rsb	r0, r1, #8
  40673c:	f241 0208 	movw	r2, #4104	; 0x1008
  406740:	4482      	add	sl, r0
  406742:	1a52      	subs	r2, r2, r1
  406744:	eb0a 0109 	add.w	r1, sl, r9
  406748:	4628      	mov	r0, r5
  40674a:	9301      	str	r3, [sp, #4]
  40674c:	f3c1 010b 	ubfx	r1, r1, #0, #12
  406750:	ebc1 0902 	rsb	r9, r1, r2
  406754:	4649      	mov	r1, r9
  406756:	f000 ff19 	bl	40758c <_sbrk_r>
  40675a:	1c43      	adds	r3, r0, #1
  40675c:	9b01      	ldr	r3, [sp, #4]
  40675e:	d07a      	beq.n	406856 <_malloc_r+0x4fe>
  406760:	ebca 0200 	rsb	r2, sl, r0
  406764:	444a      	add	r2, r9
  406766:	f042 0201 	orr.w	r2, r2, #1
  40676a:	f8db 0000 	ldr.w	r0, [fp]
  40676e:	f8c6 a008 	str.w	sl, [r6, #8]
  406772:	4448      	add	r0, r9
  406774:	f8ca 2004 	str.w	r2, [sl, #4]
  406778:	f8df 912c 	ldr.w	r9, [pc, #300]	; 4068a8 <_malloc_r+0x550>
  40677c:	f8cb 0000 	str.w	r0, [fp]
  406780:	b1a3      	cbz	r3, 4067ac <_malloc_r+0x454>
  406782:	f1b8 0f0f 	cmp.w	r8, #15
  406786:	d937      	bls.n	4067f8 <_malloc_r+0x4a0>
  406788:	687b      	ldr	r3, [r7, #4]
  40678a:	f1a8 020c 	sub.w	r2, r8, #12
  40678e:	f04f 0e05 	mov.w	lr, #5
  406792:	f022 0207 	bic.w	r2, r2, #7
  406796:	f003 0301 	and.w	r3, r3, #1
  40679a:	18b9      	adds	r1, r7, r2
  40679c:	4313      	orrs	r3, r2
  40679e:	2a0f      	cmp	r2, #15
  4067a0:	607b      	str	r3, [r7, #4]
  4067a2:	f8c1 e004 	str.w	lr, [r1, #4]
  4067a6:	f8c1 e008 	str.w	lr, [r1, #8]
  4067aa:	d858      	bhi.n	40685e <_malloc_r+0x506>
  4067ac:	4b3c      	ldr	r3, [pc, #240]	; (4068a0 <_malloc_r+0x548>)
  4067ae:	681a      	ldr	r2, [r3, #0]
  4067b0:	4290      	cmp	r0, r2
  4067b2:	d900      	bls.n	4067b6 <_malloc_r+0x45e>
  4067b4:	6018      	str	r0, [r3, #0]
  4067b6:	4b3b      	ldr	r3, [pc, #236]	; (4068a4 <_malloc_r+0x54c>)
  4067b8:	68b7      	ldr	r7, [r6, #8]
  4067ba:	681a      	ldr	r2, [r3, #0]
  4067bc:	4290      	cmp	r0, r2
  4067be:	d900      	bls.n	4067c2 <_malloc_r+0x46a>
  4067c0:	6018      	str	r0, [r3, #0]
  4067c2:	687b      	ldr	r3, [r7, #4]
  4067c4:	f023 0303 	bic.w	r3, r3, #3
  4067c8:	e73c      	b.n	406644 <_malloc_r+0x2ec>
  4067ca:	f5bc 7faa 	cmp.w	ip, #340	; 0x154
  4067ce:	d817      	bhi.n	406800 <_malloc_r+0x4a8>
  4067d0:	ea4f 3cd4 	mov.w	ip, r4, lsr #15
  4067d4:	f10c 0c77 	add.w	ip, ip, #119	; 0x77
  4067d8:	ea4f 004c 	mov.w	r0, ip, lsl #1
  4067dc:	e608      	b.n	4063f0 <_malloc_r+0x98>
  4067de:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  4067e2:	e7af      	b.n	406744 <_malloc_r+0x3ec>
  4067e4:	10bf      	asrs	r7, r7, #2
  4067e6:	2001      	movs	r0, #1
  4067e8:	460a      	mov	r2, r1
  4067ea:	40b8      	lsls	r0, r7
  4067ec:	f8d9 7004 	ldr.w	r7, [r9, #4]
  4067f0:	4338      	orrs	r0, r7
  4067f2:	f8c9 0004 	str.w	r0, [r9, #4]
  4067f6:	e6e4      	b.n	4065c2 <_malloc_r+0x26a>
  4067f8:	2301      	movs	r3, #1
  4067fa:	f8ca 3004 	str.w	r3, [sl, #4]
  4067fe:	e727      	b.n	406650 <_malloc_r+0x2f8>
  406800:	f240 5354 	movw	r3, #1364	; 0x554
  406804:	459c      	cmp	ip, r3
  406806:	d822      	bhi.n	40684e <_malloc_r+0x4f6>
  406808:	ea4f 4c94 	mov.w	ip, r4, lsr #18
  40680c:	f10c 0c7c 	add.w	ip, ip, #124	; 0x7c
  406810:	ea4f 004c 	mov.w	r0, ip, lsl #1
  406814:	e5ec      	b.n	4063f0 <_malloc_r+0x98>
  406816:	f103 0910 	add.w	r9, r3, #16
  40681a:	e6fa      	b.n	406612 <_malloc_r+0x2ba>
  40681c:	2954      	cmp	r1, #84	; 0x54
  40681e:	d829      	bhi.n	406874 <_malloc_r+0x51c>
  406820:	0b11      	lsrs	r1, r2, #12
  406822:	f101 076e 	add.w	r7, r1, #110	; 0x6e
  406826:	0078      	lsls	r0, r7, #1
  406828:	e6b9      	b.n	40659e <_malloc_r+0x246>
  40682a:	68b7      	ldr	r7, [r6, #8]
  40682c:	687b      	ldr	r3, [r7, #4]
  40682e:	f023 0303 	bic.w	r3, r3, #3
  406832:	e707      	b.n	406644 <_malloc_r+0x2ec>
  406834:	f3c1 0e0b 	ubfx	lr, r1, #0, #12
  406838:	f1be 0f00 	cmp.w	lr, #0
  40683c:	f47f af6e 	bne.w	40671c <_malloc_r+0x3c4>
  406840:	eb09 0308 	add.w	r3, r9, r8
  406844:	68b2      	ldr	r2, [r6, #8]
  406846:	f043 0301 	orr.w	r3, r3, #1
  40684a:	6053      	str	r3, [r2, #4]
  40684c:	e7ae      	b.n	4067ac <_malloc_r+0x454>
  40684e:	20fc      	movs	r0, #252	; 0xfc
  406850:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
  406854:	e5cc      	b.n	4063f0 <_malloc_r+0x98>
  406856:	2201      	movs	r2, #1
  406858:	f04f 0900 	mov.w	r9, #0
  40685c:	e785      	b.n	40676a <_malloc_r+0x412>
  40685e:	4628      	mov	r0, r5
  406860:	f107 0108 	add.w	r1, r7, #8
  406864:	f7ff fa68 	bl	405d38 <_free_r>
  406868:	f8d9 0000 	ldr.w	r0, [r9]
  40686c:	e79e      	b.n	4067ac <_malloc_r+0x454>
  40686e:	f8ce a000 	str.w	sl, [lr]
  406872:	e75e      	b.n	406732 <_malloc_r+0x3da>
  406874:	f5b1 7faa 	cmp.w	r1, #340	; 0x154
  406878:	d804      	bhi.n	406884 <_malloc_r+0x52c>
  40687a:	0bd1      	lsrs	r1, r2, #15
  40687c:	f101 0777 	add.w	r7, r1, #119	; 0x77
  406880:	0078      	lsls	r0, r7, #1
  406882:	e68c      	b.n	40659e <_malloc_r+0x246>
  406884:	f240 5054 	movw	r0, #1364	; 0x554
  406888:	4281      	cmp	r1, r0
  40688a:	d804      	bhi.n	406896 <_malloc_r+0x53e>
  40688c:	0c91      	lsrs	r1, r2, #18
  40688e:	f101 077c 	add.w	r7, r1, #124	; 0x7c
  406892:	0078      	lsls	r0, r7, #1
  406894:	e683      	b.n	40659e <_malloc_r+0x246>
  406896:	20fc      	movs	r0, #252	; 0xfc
  406898:	277e      	movs	r7, #126	; 0x7e
  40689a:	e680      	b.n	40659e <_malloc_r+0x246>
  40689c:	6873      	ldr	r3, [r6, #4]
  40689e:	e722      	b.n	4066e6 <_malloc_r+0x38e>
  4068a0:	20400998 	.word	0x20400998
  4068a4:	20400994 	.word	0x20400994
  4068a8:	204009a0 	.word	0x204009a0
  4068ac:	204008f0 	.word	0x204008f0

004068b0 <memchr>:
  4068b0:	0783      	lsls	r3, r0, #30
  4068b2:	b2c9      	uxtb	r1, r1
  4068b4:	b470      	push	{r4, r5, r6}
  4068b6:	d03f      	beq.n	406938 <memchr+0x88>
  4068b8:	1e54      	subs	r4, r2, #1
  4068ba:	2a00      	cmp	r2, #0
  4068bc:	d03e      	beq.n	40693c <memchr+0x8c>
  4068be:	7803      	ldrb	r3, [r0, #0]
  4068c0:	428b      	cmp	r3, r1
  4068c2:	bf18      	it	ne
  4068c4:	1c43      	addne	r3, r0, #1
  4068c6:	d105      	bne.n	4068d4 <memchr+0x24>
  4068c8:	e01c      	b.n	406904 <memchr+0x54>
  4068ca:	b1ec      	cbz	r4, 406908 <memchr+0x58>
  4068cc:	7802      	ldrb	r2, [r0, #0]
  4068ce:	3c01      	subs	r4, #1
  4068d0:	428a      	cmp	r2, r1
  4068d2:	d017      	beq.n	406904 <memchr+0x54>
  4068d4:	f013 0f03 	tst.w	r3, #3
  4068d8:	4618      	mov	r0, r3
  4068da:	f103 0301 	add.w	r3, r3, #1
  4068de:	d1f4      	bne.n	4068ca <memchr+0x1a>
  4068e0:	2c03      	cmp	r4, #3
  4068e2:	d814      	bhi.n	40690e <memchr+0x5e>
  4068e4:	b184      	cbz	r4, 406908 <memchr+0x58>
  4068e6:	7803      	ldrb	r3, [r0, #0]
  4068e8:	428b      	cmp	r3, r1
  4068ea:	d00b      	beq.n	406904 <memchr+0x54>
  4068ec:	1905      	adds	r5, r0, r4
  4068ee:	1c43      	adds	r3, r0, #1
  4068f0:	e002      	b.n	4068f8 <memchr+0x48>
  4068f2:	7802      	ldrb	r2, [r0, #0]
  4068f4:	428a      	cmp	r2, r1
  4068f6:	d005      	beq.n	406904 <memchr+0x54>
  4068f8:	42ab      	cmp	r3, r5
  4068fa:	4618      	mov	r0, r3
  4068fc:	f103 0301 	add.w	r3, r3, #1
  406900:	d1f7      	bne.n	4068f2 <memchr+0x42>
  406902:	2000      	movs	r0, #0
  406904:	bc70      	pop	{r4, r5, r6}
  406906:	4770      	bx	lr
  406908:	4620      	mov	r0, r4
  40690a:	bc70      	pop	{r4, r5, r6}
  40690c:	4770      	bx	lr
  40690e:	ea41 2601 	orr.w	r6, r1, r1, lsl #8
  406912:	4602      	mov	r2, r0
  406914:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
  406918:	4610      	mov	r0, r2
  40691a:	3204      	adds	r2, #4
  40691c:	6803      	ldr	r3, [r0, #0]
  40691e:	4073      	eors	r3, r6
  406920:	f1a3 3501 	sub.w	r5, r3, #16843009	; 0x1010101
  406924:	ea25 0303 	bic.w	r3, r5, r3
  406928:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
  40692c:	d1da      	bne.n	4068e4 <memchr+0x34>
  40692e:	3c04      	subs	r4, #4
  406930:	4610      	mov	r0, r2
  406932:	2c03      	cmp	r4, #3
  406934:	d8f0      	bhi.n	406918 <memchr+0x68>
  406936:	e7d5      	b.n	4068e4 <memchr+0x34>
  406938:	4614      	mov	r4, r2
  40693a:	e7d1      	b.n	4068e0 <memchr+0x30>
  40693c:	4610      	mov	r0, r2
  40693e:	e7e1      	b.n	406904 <memchr+0x54>

00406940 <memcpy>:
  406940:	4684      	mov	ip, r0
  406942:	ea41 0300 	orr.w	r3, r1, r0
  406946:	f013 0303 	ands.w	r3, r3, #3
  40694a:	d16d      	bne.n	406a28 <memcpy+0xe8>
  40694c:	3a40      	subs	r2, #64	; 0x40
  40694e:	d341      	bcc.n	4069d4 <memcpy+0x94>
  406950:	f851 3b04 	ldr.w	r3, [r1], #4
  406954:	f840 3b04 	str.w	r3, [r0], #4
  406958:	f851 3b04 	ldr.w	r3, [r1], #4
  40695c:	f840 3b04 	str.w	r3, [r0], #4
  406960:	f851 3b04 	ldr.w	r3, [r1], #4
  406964:	f840 3b04 	str.w	r3, [r0], #4
  406968:	f851 3b04 	ldr.w	r3, [r1], #4
  40696c:	f840 3b04 	str.w	r3, [r0], #4
  406970:	f851 3b04 	ldr.w	r3, [r1], #4
  406974:	f840 3b04 	str.w	r3, [r0], #4
  406978:	f851 3b04 	ldr.w	r3, [r1], #4
  40697c:	f840 3b04 	str.w	r3, [r0], #4
  406980:	f851 3b04 	ldr.w	r3, [r1], #4
  406984:	f840 3b04 	str.w	r3, [r0], #4
  406988:	f851 3b04 	ldr.w	r3, [r1], #4
  40698c:	f840 3b04 	str.w	r3, [r0], #4
  406990:	f851 3b04 	ldr.w	r3, [r1], #4
  406994:	f840 3b04 	str.w	r3, [r0], #4
  406998:	f851 3b04 	ldr.w	r3, [r1], #4
  40699c:	f840 3b04 	str.w	r3, [r0], #4
  4069a0:	f851 3b04 	ldr.w	r3, [r1], #4
  4069a4:	f840 3b04 	str.w	r3, [r0], #4
  4069a8:	f851 3b04 	ldr.w	r3, [r1], #4
  4069ac:	f840 3b04 	str.w	r3, [r0], #4
  4069b0:	f851 3b04 	ldr.w	r3, [r1], #4
  4069b4:	f840 3b04 	str.w	r3, [r0], #4
  4069b8:	f851 3b04 	ldr.w	r3, [r1], #4
  4069bc:	f840 3b04 	str.w	r3, [r0], #4
  4069c0:	f851 3b04 	ldr.w	r3, [r1], #4
  4069c4:	f840 3b04 	str.w	r3, [r0], #4
  4069c8:	f851 3b04 	ldr.w	r3, [r1], #4
  4069cc:	f840 3b04 	str.w	r3, [r0], #4
  4069d0:	3a40      	subs	r2, #64	; 0x40
  4069d2:	d2bd      	bcs.n	406950 <memcpy+0x10>
  4069d4:	3230      	adds	r2, #48	; 0x30
  4069d6:	d311      	bcc.n	4069fc <memcpy+0xbc>
  4069d8:	f851 3b04 	ldr.w	r3, [r1], #4
  4069dc:	f840 3b04 	str.w	r3, [r0], #4
  4069e0:	f851 3b04 	ldr.w	r3, [r1], #4
  4069e4:	f840 3b04 	str.w	r3, [r0], #4
  4069e8:	f851 3b04 	ldr.w	r3, [r1], #4
  4069ec:	f840 3b04 	str.w	r3, [r0], #4
  4069f0:	f851 3b04 	ldr.w	r3, [r1], #4
  4069f4:	f840 3b04 	str.w	r3, [r0], #4
  4069f8:	3a10      	subs	r2, #16
  4069fa:	d2ed      	bcs.n	4069d8 <memcpy+0x98>
  4069fc:	320c      	adds	r2, #12
  4069fe:	d305      	bcc.n	406a0c <memcpy+0xcc>
  406a00:	f851 3b04 	ldr.w	r3, [r1], #4
  406a04:	f840 3b04 	str.w	r3, [r0], #4
  406a08:	3a04      	subs	r2, #4
  406a0a:	d2f9      	bcs.n	406a00 <memcpy+0xc0>
  406a0c:	3204      	adds	r2, #4
  406a0e:	d008      	beq.n	406a22 <memcpy+0xe2>
  406a10:	07d2      	lsls	r2, r2, #31
  406a12:	bf1c      	itt	ne
  406a14:	f811 3b01 	ldrbne.w	r3, [r1], #1
  406a18:	f800 3b01 	strbne.w	r3, [r0], #1
  406a1c:	d301      	bcc.n	406a22 <memcpy+0xe2>
  406a1e:	880b      	ldrh	r3, [r1, #0]
  406a20:	8003      	strh	r3, [r0, #0]
  406a22:	4660      	mov	r0, ip
  406a24:	4770      	bx	lr
  406a26:	bf00      	nop
  406a28:	2a08      	cmp	r2, #8
  406a2a:	d313      	bcc.n	406a54 <memcpy+0x114>
  406a2c:	078b      	lsls	r3, r1, #30
  406a2e:	d08d      	beq.n	40694c <memcpy+0xc>
  406a30:	f010 0303 	ands.w	r3, r0, #3
  406a34:	d08a      	beq.n	40694c <memcpy+0xc>
  406a36:	f1c3 0304 	rsb	r3, r3, #4
  406a3a:	1ad2      	subs	r2, r2, r3
  406a3c:	07db      	lsls	r3, r3, #31
  406a3e:	bf1c      	itt	ne
  406a40:	f811 3b01 	ldrbne.w	r3, [r1], #1
  406a44:	f800 3b01 	strbne.w	r3, [r0], #1
  406a48:	d380      	bcc.n	40694c <memcpy+0xc>
  406a4a:	f831 3b02 	ldrh.w	r3, [r1], #2
  406a4e:	f820 3b02 	strh.w	r3, [r0], #2
  406a52:	e77b      	b.n	40694c <memcpy+0xc>
  406a54:	3a04      	subs	r2, #4
  406a56:	d3d9      	bcc.n	406a0c <memcpy+0xcc>
  406a58:	3a01      	subs	r2, #1
  406a5a:	f811 3b01 	ldrb.w	r3, [r1], #1
  406a5e:	f800 3b01 	strb.w	r3, [r0], #1
  406a62:	d2f9      	bcs.n	406a58 <memcpy+0x118>
  406a64:	780b      	ldrb	r3, [r1, #0]
  406a66:	7003      	strb	r3, [r0, #0]
  406a68:	784b      	ldrb	r3, [r1, #1]
  406a6a:	7043      	strb	r3, [r0, #1]
  406a6c:	788b      	ldrb	r3, [r1, #2]
  406a6e:	7083      	strb	r3, [r0, #2]
  406a70:	4660      	mov	r0, ip
  406a72:	4770      	bx	lr

00406a74 <memmove>:
  406a74:	4288      	cmp	r0, r1
  406a76:	b5f0      	push	{r4, r5, r6, r7, lr}
  406a78:	d90d      	bls.n	406a96 <memmove+0x22>
  406a7a:	188b      	adds	r3, r1, r2
  406a7c:	4298      	cmp	r0, r3
  406a7e:	d20a      	bcs.n	406a96 <memmove+0x22>
  406a80:	1881      	adds	r1, r0, r2
  406a82:	2a00      	cmp	r2, #0
  406a84:	d053      	beq.n	406b2e <memmove+0xba>
  406a86:	1a9a      	subs	r2, r3, r2
  406a88:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  406a8c:	4293      	cmp	r3, r2
  406a8e:	f801 4d01 	strb.w	r4, [r1, #-1]!
  406a92:	d1f9      	bne.n	406a88 <memmove+0x14>
  406a94:	bdf0      	pop	{r4, r5, r6, r7, pc}
  406a96:	2a0f      	cmp	r2, #15
  406a98:	d947      	bls.n	406b2a <memmove+0xb6>
  406a9a:	ea40 0301 	orr.w	r3, r0, r1
  406a9e:	079b      	lsls	r3, r3, #30
  406aa0:	d146      	bne.n	406b30 <memmove+0xbc>
  406aa2:	f100 0410 	add.w	r4, r0, #16
  406aa6:	f101 0310 	add.w	r3, r1, #16
  406aaa:	4615      	mov	r5, r2
  406aac:	f853 6c10 	ldr.w	r6, [r3, #-16]
  406ab0:	3d10      	subs	r5, #16
  406ab2:	3310      	adds	r3, #16
  406ab4:	3410      	adds	r4, #16
  406ab6:	f844 6c20 	str.w	r6, [r4, #-32]
  406aba:	2d0f      	cmp	r5, #15
  406abc:	f853 6c1c 	ldr.w	r6, [r3, #-28]
  406ac0:	f844 6c1c 	str.w	r6, [r4, #-28]
  406ac4:	f853 6c18 	ldr.w	r6, [r3, #-24]
  406ac8:	f844 6c18 	str.w	r6, [r4, #-24]
  406acc:	f853 6c14 	ldr.w	r6, [r3, #-20]
  406ad0:	f844 6c14 	str.w	r6, [r4, #-20]
  406ad4:	d8ea      	bhi.n	406aac <memmove+0x38>
  406ad6:	f1a2 0310 	sub.w	r3, r2, #16
  406ada:	f002 0e0f 	and.w	lr, r2, #15
  406ade:	f023 030f 	bic.w	r3, r3, #15
  406ae2:	f1be 0f03 	cmp.w	lr, #3
  406ae6:	f103 0310 	add.w	r3, r3, #16
  406aea:	4419      	add	r1, r3
  406aec:	4403      	add	r3, r0
  406aee:	d921      	bls.n	406b34 <memmove+0xc0>
  406af0:	1f1e      	subs	r6, r3, #4
  406af2:	460d      	mov	r5, r1
  406af4:	4674      	mov	r4, lr
  406af6:	3c04      	subs	r4, #4
  406af8:	f855 7b04 	ldr.w	r7, [r5], #4
  406afc:	2c03      	cmp	r4, #3
  406afe:	f846 7f04 	str.w	r7, [r6, #4]!
  406b02:	d8f8      	bhi.n	406af6 <memmove+0x82>
  406b04:	f1ae 0404 	sub.w	r4, lr, #4
  406b08:	f002 0203 	and.w	r2, r2, #3
  406b0c:	f024 0403 	bic.w	r4, r4, #3
  406b10:	3404      	adds	r4, #4
  406b12:	4423      	add	r3, r4
  406b14:	4421      	add	r1, r4
  406b16:	b152      	cbz	r2, 406b2e <memmove+0xba>
  406b18:	3b01      	subs	r3, #1
  406b1a:	440a      	add	r2, r1
  406b1c:	f811 4b01 	ldrb.w	r4, [r1], #1
  406b20:	4291      	cmp	r1, r2
  406b22:	f803 4f01 	strb.w	r4, [r3, #1]!
  406b26:	d1f9      	bne.n	406b1c <memmove+0xa8>
  406b28:	bdf0      	pop	{r4, r5, r6, r7, pc}
  406b2a:	4603      	mov	r3, r0
  406b2c:	e7f3      	b.n	406b16 <memmove+0xa2>
  406b2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  406b30:	4603      	mov	r3, r0
  406b32:	e7f1      	b.n	406b18 <memmove+0xa4>
  406b34:	4672      	mov	r2, lr
  406b36:	e7ee      	b.n	406b16 <memmove+0xa2>

00406b38 <__malloc_lock>:
  406b38:	4770      	bx	lr
  406b3a:	bf00      	nop

00406b3c <__malloc_unlock>:
  406b3c:	4770      	bx	lr
  406b3e:	bf00      	nop

00406b40 <_Balloc>:
  406b40:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
  406b42:	b538      	push	{r3, r4, r5, lr}
  406b44:	4605      	mov	r5, r0
  406b46:	460c      	mov	r4, r1
  406b48:	b152      	cbz	r2, 406b60 <_Balloc+0x20>
  406b4a:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
  406b4e:	b18b      	cbz	r3, 406b74 <_Balloc+0x34>
  406b50:	6819      	ldr	r1, [r3, #0]
  406b52:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
  406b56:	2200      	movs	r2, #0
  406b58:	4618      	mov	r0, r3
  406b5a:	611a      	str	r2, [r3, #16]
  406b5c:	60da      	str	r2, [r3, #12]
  406b5e:	bd38      	pop	{r3, r4, r5, pc}
  406b60:	2221      	movs	r2, #33	; 0x21
  406b62:	2104      	movs	r1, #4
  406b64:	f000 fe58 	bl	407818 <_calloc_r>
  406b68:	64e8      	str	r0, [r5, #76]	; 0x4c
  406b6a:	4602      	mov	r2, r0
  406b6c:	2800      	cmp	r0, #0
  406b6e:	d1ec      	bne.n	406b4a <_Balloc+0xa>
  406b70:	2000      	movs	r0, #0
  406b72:	bd38      	pop	{r3, r4, r5, pc}
  406b74:	2101      	movs	r1, #1
  406b76:	4628      	mov	r0, r5
  406b78:	fa01 f504 	lsl.w	r5, r1, r4
  406b7c:	1d6a      	adds	r2, r5, #5
  406b7e:	0092      	lsls	r2, r2, #2
  406b80:	f000 fe4a 	bl	407818 <_calloc_r>
  406b84:	4603      	mov	r3, r0
  406b86:	2800      	cmp	r0, #0
  406b88:	d0f2      	beq.n	406b70 <_Balloc+0x30>
  406b8a:	6044      	str	r4, [r0, #4]
  406b8c:	6085      	str	r5, [r0, #8]
  406b8e:	e7e2      	b.n	406b56 <_Balloc+0x16>

00406b90 <_Bfree>:
  406b90:	b131      	cbz	r1, 406ba0 <_Bfree+0x10>
  406b92:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  406b94:	684a      	ldr	r2, [r1, #4]
  406b96:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
  406b9a:	6008      	str	r0, [r1, #0]
  406b9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  406ba0:	4770      	bx	lr
  406ba2:	bf00      	nop

00406ba4 <__multadd>:
  406ba4:	b5f0      	push	{r4, r5, r6, r7, lr}
  406ba6:	460c      	mov	r4, r1
  406ba8:	b083      	sub	sp, #12
  406baa:	4605      	mov	r5, r0
  406bac:	690e      	ldr	r6, [r1, #16]
  406bae:	f101 0e14 	add.w	lr, r1, #20
  406bb2:	2700      	movs	r7, #0
  406bb4:	f8de 1000 	ldr.w	r1, [lr]
  406bb8:	3701      	adds	r7, #1
  406bba:	b288      	uxth	r0, r1
  406bbc:	42be      	cmp	r6, r7
  406bbe:	ea4f 4111 	mov.w	r1, r1, lsr #16
  406bc2:	fb02 3300 	mla	r3, r2, r0, r3
  406bc6:	fb02 f101 	mul.w	r1, r2, r1
  406bca:	b298      	uxth	r0, r3
  406bcc:	eb01 4313 	add.w	r3, r1, r3, lsr #16
  406bd0:	eb00 4103 	add.w	r1, r0, r3, lsl #16
  406bd4:	ea4f 4313 	mov.w	r3, r3, lsr #16
  406bd8:	f84e 1b04 	str.w	r1, [lr], #4
  406bdc:	dcea      	bgt.n	406bb4 <__multadd+0x10>
  406bde:	b13b      	cbz	r3, 406bf0 <__multadd+0x4c>
  406be0:	68a2      	ldr	r2, [r4, #8]
  406be2:	4296      	cmp	r6, r2
  406be4:	da07      	bge.n	406bf6 <__multadd+0x52>
  406be6:	eb04 0286 	add.w	r2, r4, r6, lsl #2
  406bea:	3601      	adds	r6, #1
  406bec:	6153      	str	r3, [r2, #20]
  406bee:	6126      	str	r6, [r4, #16]
  406bf0:	4620      	mov	r0, r4
  406bf2:	b003      	add	sp, #12
  406bf4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  406bf6:	6861      	ldr	r1, [r4, #4]
  406bf8:	4628      	mov	r0, r5
  406bfa:	9301      	str	r3, [sp, #4]
  406bfc:	3101      	adds	r1, #1
  406bfe:	f7ff ff9f 	bl	406b40 <_Balloc>
  406c02:	6922      	ldr	r2, [r4, #16]
  406c04:	f104 010c 	add.w	r1, r4, #12
  406c08:	4607      	mov	r7, r0
  406c0a:	3202      	adds	r2, #2
  406c0c:	300c      	adds	r0, #12
  406c0e:	0092      	lsls	r2, r2, #2
  406c10:	f7ff fe96 	bl	406940 <memcpy>
  406c14:	6cea      	ldr	r2, [r5, #76]	; 0x4c
  406c16:	6861      	ldr	r1, [r4, #4]
  406c18:	9b01      	ldr	r3, [sp, #4]
  406c1a:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
  406c1e:	6020      	str	r0, [r4, #0]
  406c20:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
  406c24:	463c      	mov	r4, r7
  406c26:	e7de      	b.n	406be6 <__multadd+0x42>

00406c28 <__hi0bits>:
  406c28:	4b0f      	ldr	r3, [pc, #60]	; (406c68 <__hi0bits+0x40>)
  406c2a:	4003      	ands	r3, r0
  406c2c:	b9b3      	cbnz	r3, 406c5c <__hi0bits+0x34>
  406c2e:	0400      	lsls	r0, r0, #16
  406c30:	2310      	movs	r3, #16
  406c32:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
  406c36:	d101      	bne.n	406c3c <__hi0bits+0x14>
  406c38:	3308      	adds	r3, #8
  406c3a:	0200      	lsls	r0, r0, #8
  406c3c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
  406c40:	d101      	bne.n	406c46 <__hi0bits+0x1e>
  406c42:	3304      	adds	r3, #4
  406c44:	0100      	lsls	r0, r0, #4
  406c46:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
  406c4a:	d101      	bne.n	406c50 <__hi0bits+0x28>
  406c4c:	3302      	adds	r3, #2
  406c4e:	0080      	lsls	r0, r0, #2
  406c50:	2800      	cmp	r0, #0
  406c52:	db07      	blt.n	406c64 <__hi0bits+0x3c>
  406c54:	0042      	lsls	r2, r0, #1
  406c56:	d403      	bmi.n	406c60 <__hi0bits+0x38>
  406c58:	2020      	movs	r0, #32
  406c5a:	4770      	bx	lr
  406c5c:	2300      	movs	r3, #0
  406c5e:	e7e8      	b.n	406c32 <__hi0bits+0xa>
  406c60:	1c58      	adds	r0, r3, #1
  406c62:	4770      	bx	lr
  406c64:	4618      	mov	r0, r3
  406c66:	4770      	bx	lr
  406c68:	ffff0000 	.word	0xffff0000

00406c6c <__lo0bits>:
  406c6c:	6803      	ldr	r3, [r0, #0]
  406c6e:	f013 0207 	ands.w	r2, r3, #7
  406c72:	d008      	beq.n	406c86 <__lo0bits+0x1a>
  406c74:	07d9      	lsls	r1, r3, #31
  406c76:	d422      	bmi.n	406cbe <__lo0bits+0x52>
  406c78:	079a      	lsls	r2, r3, #30
  406c7a:	d423      	bmi.n	406cc4 <__lo0bits+0x58>
  406c7c:	089b      	lsrs	r3, r3, #2
  406c7e:	2202      	movs	r2, #2
  406c80:	6003      	str	r3, [r0, #0]
  406c82:	4610      	mov	r0, r2
  406c84:	4770      	bx	lr
  406c86:	b299      	uxth	r1, r3
  406c88:	b909      	cbnz	r1, 406c8e <__lo0bits+0x22>
  406c8a:	0c1b      	lsrs	r3, r3, #16
  406c8c:	2210      	movs	r2, #16
  406c8e:	f013 0fff 	tst.w	r3, #255	; 0xff
  406c92:	d101      	bne.n	406c98 <__lo0bits+0x2c>
  406c94:	3208      	adds	r2, #8
  406c96:	0a1b      	lsrs	r3, r3, #8
  406c98:	0719      	lsls	r1, r3, #28
  406c9a:	d101      	bne.n	406ca0 <__lo0bits+0x34>
  406c9c:	3204      	adds	r2, #4
  406c9e:	091b      	lsrs	r3, r3, #4
  406ca0:	0799      	lsls	r1, r3, #30
  406ca2:	d101      	bne.n	406ca8 <__lo0bits+0x3c>
  406ca4:	3202      	adds	r2, #2
  406ca6:	089b      	lsrs	r3, r3, #2
  406ca8:	07d9      	lsls	r1, r3, #31
  406caa:	d405      	bmi.n	406cb8 <__lo0bits+0x4c>
  406cac:	085b      	lsrs	r3, r3, #1
  406cae:	d102      	bne.n	406cb6 <__lo0bits+0x4a>
  406cb0:	2220      	movs	r2, #32
  406cb2:	4610      	mov	r0, r2
  406cb4:	4770      	bx	lr
  406cb6:	3201      	adds	r2, #1
  406cb8:	6003      	str	r3, [r0, #0]
  406cba:	4610      	mov	r0, r2
  406cbc:	4770      	bx	lr
  406cbe:	2200      	movs	r2, #0
  406cc0:	4610      	mov	r0, r2
  406cc2:	4770      	bx	lr
  406cc4:	085b      	lsrs	r3, r3, #1
  406cc6:	2201      	movs	r2, #1
  406cc8:	6003      	str	r3, [r0, #0]
  406cca:	4610      	mov	r0, r2
  406ccc:	4770      	bx	lr
  406cce:	bf00      	nop

00406cd0 <__i2b>:
  406cd0:	b510      	push	{r4, lr}
  406cd2:	460c      	mov	r4, r1
  406cd4:	2101      	movs	r1, #1
  406cd6:	f7ff ff33 	bl	406b40 <_Balloc>
  406cda:	2201      	movs	r2, #1
  406cdc:	6144      	str	r4, [r0, #20]
  406cde:	6102      	str	r2, [r0, #16]
  406ce0:	bd10      	pop	{r4, pc}
  406ce2:	bf00      	nop

00406ce4 <__multiply>:
  406ce4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  406ce8:	690e      	ldr	r6, [r1, #16]
  406cea:	b085      	sub	sp, #20
  406cec:	6915      	ldr	r5, [r2, #16]
  406cee:	460c      	mov	r4, r1
  406cf0:	4691      	mov	r9, r2
  406cf2:	42ae      	cmp	r6, r5
  406cf4:	f2c0 8094 	blt.w	406e20 <__multiply+0x13c>
  406cf8:	462b      	mov	r3, r5
  406cfa:	4635      	mov	r5, r6
  406cfc:	461e      	mov	r6, r3
  406cfe:	eb05 0806 	add.w	r8, r5, r6
  406d02:	68a3      	ldr	r3, [r4, #8]
  406d04:	6861      	ldr	r1, [r4, #4]
  406d06:	4598      	cmp	r8, r3
  406d08:	dd00      	ble.n	406d0c <__multiply+0x28>
  406d0a:	3101      	adds	r1, #1
  406d0c:	f7ff ff18 	bl	406b40 <_Balloc>
  406d10:	f100 0a14 	add.w	sl, r0, #20
  406d14:	9001      	str	r0, [sp, #4]
  406d16:	eb0a 0b88 	add.w	fp, sl, r8, lsl #2
  406d1a:	45da      	cmp	sl, fp
  406d1c:	d205      	bcs.n	406d2a <__multiply+0x46>
  406d1e:	4653      	mov	r3, sl
  406d20:	2100      	movs	r1, #0
  406d22:	f843 1b04 	str.w	r1, [r3], #4
  406d26:	459b      	cmp	fp, r3
  406d28:	d8fb      	bhi.n	406d22 <__multiply+0x3e>
  406d2a:	f109 0914 	add.w	r9, r9, #20
  406d2e:	f104 0314 	add.w	r3, r4, #20
  406d32:	eb09 0286 	add.w	r2, r9, r6, lsl #2
  406d36:	eb03 0c85 	add.w	ip, r3, r5, lsl #2
  406d3a:	4591      	cmp	r9, r2
  406d3c:	d25b      	bcs.n	406df6 <__multiply+0x112>
  406d3e:	f8cd b008 	str.w	fp, [sp, #8]
  406d42:	4693      	mov	fp, r2
  406d44:	f8cd 800c 	str.w	r8, [sp, #12]
  406d48:	4698      	mov	r8, r3
  406d4a:	f859 6b04 	ldr.w	r6, [r9], #4
  406d4e:	fa1f fe86 	uxth.w	lr, r6
  406d52:	f1be 0f00 	cmp.w	lr, #0
  406d56:	d021      	beq.n	406d9c <__multiply+0xb8>
  406d58:	4647      	mov	r7, r8
  406d5a:	4656      	mov	r6, sl
  406d5c:	2100      	movs	r1, #0
  406d5e:	e000      	b.n	406d62 <__multiply+0x7e>
  406d60:	4626      	mov	r6, r4
  406d62:	f857 2b04 	ldr.w	r2, [r7], #4
  406d66:	4634      	mov	r4, r6
  406d68:	6835      	ldr	r5, [r6, #0]
  406d6a:	b290      	uxth	r0, r2
  406d6c:	45bc      	cmp	ip, r7
  406d6e:	b2ab      	uxth	r3, r5
  406d70:	ea4f 4212 	mov.w	r2, r2, lsr #16
  406d74:	fb0e 3000 	mla	r0, lr, r0, r3
  406d78:	ea4f 4315 	mov.w	r3, r5, lsr #16
  406d7c:	4401      	add	r1, r0
  406d7e:	fb0e 3302 	mla	r3, lr, r2, r3
  406d82:	b28a      	uxth	r2, r1
  406d84:	eb03 4111 	add.w	r1, r3, r1, lsr #16
  406d88:	ea42 4301 	orr.w	r3, r2, r1, lsl #16
  406d8c:	ea4f 4111 	mov.w	r1, r1, lsr #16
  406d90:	f844 3b04 	str.w	r3, [r4], #4
  406d94:	d8e4      	bhi.n	406d60 <__multiply+0x7c>
  406d96:	6071      	str	r1, [r6, #4]
  406d98:	f859 6c04 	ldr.w	r6, [r9, #-4]
  406d9c:	0c36      	lsrs	r6, r6, #16
  406d9e:	d022      	beq.n	406de6 <__multiply+0x102>
  406da0:	f8da 3000 	ldr.w	r3, [sl]
  406da4:	2700      	movs	r7, #0
  406da6:	4655      	mov	r5, sl
  406da8:	4640      	mov	r0, r8
  406daa:	461a      	mov	r2, r3
  406dac:	46be      	mov	lr, r7
  406dae:	e000      	b.n	406db2 <__multiply+0xce>
  406db0:	4625      	mov	r5, r4
  406db2:	8807      	ldrh	r7, [r0, #0]
  406db4:	0c12      	lsrs	r2, r2, #16
  406db6:	b299      	uxth	r1, r3
  406db8:	462c      	mov	r4, r5
  406dba:	fb06 2207 	mla	r2, r6, r7, r2
  406dbe:	eb02 070e 	add.w	r7, r2, lr
  406dc2:	ea41 4307 	orr.w	r3, r1, r7, lsl #16
  406dc6:	f844 3b04 	str.w	r3, [r4], #4
  406dca:	f850 1b04 	ldr.w	r1, [r0], #4
  406dce:	686a      	ldr	r2, [r5, #4]
  406dd0:	0c09      	lsrs	r1, r1, #16
  406dd2:	4584      	cmp	ip, r0
  406dd4:	b293      	uxth	r3, r2
  406dd6:	fb06 3101 	mla	r1, r6, r1, r3
  406dda:	eb01 4317 	add.w	r3, r1, r7, lsr #16
  406dde:	ea4f 4e13 	mov.w	lr, r3, lsr #16
  406de2:	d8e5      	bhi.n	406db0 <__multiply+0xcc>
  406de4:	606b      	str	r3, [r5, #4]
  406de6:	45cb      	cmp	fp, r9
  406de8:	f10a 0a04 	add.w	sl, sl, #4
  406dec:	d8ad      	bhi.n	406d4a <__multiply+0x66>
  406dee:	f8dd b008 	ldr.w	fp, [sp, #8]
  406df2:	f8dd 800c 	ldr.w	r8, [sp, #12]
  406df6:	f1b8 0f00 	cmp.w	r8, #0
  406dfa:	dd0b      	ble.n	406e14 <__multiply+0x130>
  406dfc:	f85b 3c04 	ldr.w	r3, [fp, #-4]
  406e00:	f1ab 0b04 	sub.w	fp, fp, #4
  406e04:	b11b      	cbz	r3, 406e0e <__multiply+0x12a>
  406e06:	e005      	b.n	406e14 <__multiply+0x130>
  406e08:	f85b 3d04 	ldr.w	r3, [fp, #-4]!
  406e0c:	b913      	cbnz	r3, 406e14 <__multiply+0x130>
  406e0e:	f1b8 0801 	subs.w	r8, r8, #1
  406e12:	d1f9      	bne.n	406e08 <__multiply+0x124>
  406e14:	9801      	ldr	r0, [sp, #4]
  406e16:	f8c0 8010 	str.w	r8, [r0, #16]
  406e1a:	b005      	add	sp, #20
  406e1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406e20:	4614      	mov	r4, r2
  406e22:	4689      	mov	r9, r1
  406e24:	e76b      	b.n	406cfe <__multiply+0x1a>
  406e26:	bf00      	nop

00406e28 <__pow5mult>:
  406e28:	f012 0303 	ands.w	r3, r2, #3
  406e2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  406e30:	4614      	mov	r4, r2
  406e32:	4607      	mov	r7, r0
  406e34:	460e      	mov	r6, r1
  406e36:	d12d      	bne.n	406e94 <__pow5mult+0x6c>
  406e38:	10a4      	asrs	r4, r4, #2
  406e3a:	d01c      	beq.n	406e76 <__pow5mult+0x4e>
  406e3c:	6cbd      	ldr	r5, [r7, #72]	; 0x48
  406e3e:	b395      	cbz	r5, 406ea6 <__pow5mult+0x7e>
  406e40:	07e3      	lsls	r3, r4, #31
  406e42:	f04f 0800 	mov.w	r8, #0
  406e46:	d406      	bmi.n	406e56 <__pow5mult+0x2e>
  406e48:	1064      	asrs	r4, r4, #1
  406e4a:	d014      	beq.n	406e76 <__pow5mult+0x4e>
  406e4c:	6828      	ldr	r0, [r5, #0]
  406e4e:	b1a8      	cbz	r0, 406e7c <__pow5mult+0x54>
  406e50:	4605      	mov	r5, r0
  406e52:	07e3      	lsls	r3, r4, #31
  406e54:	d5f8      	bpl.n	406e48 <__pow5mult+0x20>
  406e56:	4638      	mov	r0, r7
  406e58:	4631      	mov	r1, r6
  406e5a:	462a      	mov	r2, r5
  406e5c:	f7ff ff42 	bl	406ce4 <__multiply>
  406e60:	b1b6      	cbz	r6, 406e90 <__pow5mult+0x68>
  406e62:	6872      	ldr	r2, [r6, #4]
  406e64:	1064      	asrs	r4, r4, #1
  406e66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  406e68:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  406e6c:	6031      	str	r1, [r6, #0]
  406e6e:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
  406e72:	4606      	mov	r6, r0
  406e74:	d1ea      	bne.n	406e4c <__pow5mult+0x24>
  406e76:	4630      	mov	r0, r6
  406e78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  406e7c:	4629      	mov	r1, r5
  406e7e:	462a      	mov	r2, r5
  406e80:	4638      	mov	r0, r7
  406e82:	f7ff ff2f 	bl	406ce4 <__multiply>
  406e86:	6028      	str	r0, [r5, #0]
  406e88:	f8c0 8000 	str.w	r8, [r0]
  406e8c:	4605      	mov	r5, r0
  406e8e:	e7e0      	b.n	406e52 <__pow5mult+0x2a>
  406e90:	4606      	mov	r6, r0
  406e92:	e7d9      	b.n	406e48 <__pow5mult+0x20>
  406e94:	1e5a      	subs	r2, r3, #1
  406e96:	4d0b      	ldr	r5, [pc, #44]	; (406ec4 <__pow5mult+0x9c>)
  406e98:	2300      	movs	r3, #0
  406e9a:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
  406e9e:	f7ff fe81 	bl	406ba4 <__multadd>
  406ea2:	4606      	mov	r6, r0
  406ea4:	e7c8      	b.n	406e38 <__pow5mult+0x10>
  406ea6:	2101      	movs	r1, #1
  406ea8:	4638      	mov	r0, r7
  406eaa:	f7ff fe49 	bl	406b40 <_Balloc>
  406eae:	f240 2171 	movw	r1, #625	; 0x271
  406eb2:	2201      	movs	r2, #1
  406eb4:	2300      	movs	r3, #0
  406eb6:	6141      	str	r1, [r0, #20]
  406eb8:	4605      	mov	r5, r0
  406eba:	6102      	str	r2, [r0, #16]
  406ebc:	64b8      	str	r0, [r7, #72]	; 0x48
  406ebe:	6003      	str	r3, [r0, #0]
  406ec0:	e7be      	b.n	406e40 <__pow5mult+0x18>
  406ec2:	bf00      	nop
  406ec4:	00408b90 	.word	0x00408b90

00406ec8 <__lshift>:
  406ec8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  406ecc:	690e      	ldr	r6, [r1, #16]
  406ece:	ea4f 1962 	mov.w	r9, r2, asr #5
  406ed2:	688b      	ldr	r3, [r1, #8]
  406ed4:	460d      	mov	r5, r1
  406ed6:	444e      	add	r6, r9
  406ed8:	4690      	mov	r8, r2
  406eda:	4607      	mov	r7, r0
  406edc:	6849      	ldr	r1, [r1, #4]
  406ede:	1c74      	adds	r4, r6, #1
  406ee0:	429c      	cmp	r4, r3
  406ee2:	dd03      	ble.n	406eec <__lshift+0x24>
  406ee4:	005b      	lsls	r3, r3, #1
  406ee6:	3101      	adds	r1, #1
  406ee8:	429c      	cmp	r4, r3
  406eea:	dcfb      	bgt.n	406ee4 <__lshift+0x1c>
  406eec:	4638      	mov	r0, r7
  406eee:	f7ff fe27 	bl	406b40 <_Balloc>
  406ef2:	f1b9 0f00 	cmp.w	r9, #0
  406ef6:	4684      	mov	ip, r0
  406ef8:	f100 0114 	add.w	r1, r0, #20
  406efc:	dd09      	ble.n	406f12 <__lshift+0x4a>
  406efe:	2300      	movs	r3, #0
  406f00:	460a      	mov	r2, r1
  406f02:	4618      	mov	r0, r3
  406f04:	3301      	adds	r3, #1
  406f06:	f842 0b04 	str.w	r0, [r2], #4
  406f0a:	454b      	cmp	r3, r9
  406f0c:	d1fa      	bne.n	406f04 <__lshift+0x3c>
  406f0e:	eb01 0183 	add.w	r1, r1, r3, lsl #2
  406f12:	692a      	ldr	r2, [r5, #16]
  406f14:	f105 0314 	add.w	r3, r5, #20
  406f18:	eb03 0e82 	add.w	lr, r3, r2, lsl #2
  406f1c:	f018 021f 	ands.w	r2, r8, #31
  406f20:	d023      	beq.n	406f6a <__lshift+0xa2>
  406f22:	f1c2 0920 	rsb	r9, r2, #32
  406f26:	f04f 0a00 	mov.w	sl, #0
  406f2a:	6818      	ldr	r0, [r3, #0]
  406f2c:	4688      	mov	r8, r1
  406f2e:	4090      	lsls	r0, r2
  406f30:	ea4a 0000 	orr.w	r0, sl, r0
  406f34:	f841 0b04 	str.w	r0, [r1], #4
  406f38:	f853 0b04 	ldr.w	r0, [r3], #4
  406f3c:	459e      	cmp	lr, r3
  406f3e:	fa20 fa09 	lsr.w	sl, r0, r9
  406f42:	d8f2      	bhi.n	406f2a <__lshift+0x62>
  406f44:	f8c8 a004 	str.w	sl, [r8, #4]
  406f48:	f1ba 0f00 	cmp.w	sl, #0
  406f4c:	d000      	beq.n	406f50 <__lshift+0x88>
  406f4e:	1cb4      	adds	r4, r6, #2
  406f50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  406f52:	3c01      	subs	r4, #1
  406f54:	686a      	ldr	r2, [r5, #4]
  406f56:	4660      	mov	r0, ip
  406f58:	f8cc 4010 	str.w	r4, [ip, #16]
  406f5c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  406f60:	6029      	str	r1, [r5, #0]
  406f62:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
  406f66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  406f6a:	3904      	subs	r1, #4
  406f6c:	f853 2b04 	ldr.w	r2, [r3], #4
  406f70:	459e      	cmp	lr, r3
  406f72:	f841 2f04 	str.w	r2, [r1, #4]!
  406f76:	d8f9      	bhi.n	406f6c <__lshift+0xa4>
  406f78:	e7ea      	b.n	406f50 <__lshift+0x88>
  406f7a:	bf00      	nop

00406f7c <__mcmp>:
  406f7c:	6902      	ldr	r2, [r0, #16]
  406f7e:	690b      	ldr	r3, [r1, #16]
  406f80:	1ad2      	subs	r2, r2, r3
  406f82:	d113      	bne.n	406fac <__mcmp+0x30>
  406f84:	009a      	lsls	r2, r3, #2
  406f86:	3014      	adds	r0, #20
  406f88:	3114      	adds	r1, #20
  406f8a:	1883      	adds	r3, r0, r2
  406f8c:	4411      	add	r1, r2
  406f8e:	b410      	push	{r4}
  406f90:	e001      	b.n	406f96 <__mcmp+0x1a>
  406f92:	4298      	cmp	r0, r3
  406f94:	d20c      	bcs.n	406fb0 <__mcmp+0x34>
  406f96:	f853 4d04 	ldr.w	r4, [r3, #-4]!
  406f9a:	f851 2d04 	ldr.w	r2, [r1, #-4]!
  406f9e:	4294      	cmp	r4, r2
  406fa0:	d0f7      	beq.n	406f92 <__mcmp+0x16>
  406fa2:	d309      	bcc.n	406fb8 <__mcmp+0x3c>
  406fa4:	2001      	movs	r0, #1
  406fa6:	f85d 4b04 	ldr.w	r4, [sp], #4
  406faa:	4770      	bx	lr
  406fac:	4610      	mov	r0, r2
  406fae:	4770      	bx	lr
  406fb0:	2000      	movs	r0, #0
  406fb2:	f85d 4b04 	ldr.w	r4, [sp], #4
  406fb6:	4770      	bx	lr
  406fb8:	f04f 30ff 	mov.w	r0, #4294967295
  406fbc:	f85d 4b04 	ldr.w	r4, [sp], #4
  406fc0:	4770      	bx	lr
  406fc2:	bf00      	nop

00406fc4 <__mdiff>:
  406fc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  406fc8:	460c      	mov	r4, r1
  406fca:	4605      	mov	r5, r0
  406fcc:	4611      	mov	r1, r2
  406fce:	4617      	mov	r7, r2
  406fd0:	4620      	mov	r0, r4
  406fd2:	f7ff ffd3 	bl	406f7c <__mcmp>
  406fd6:	1e06      	subs	r6, r0, #0
  406fd8:	d05c      	beq.n	407094 <__mdiff+0xd0>
  406fda:	db55      	blt.n	407088 <__mdiff+0xc4>
  406fdc:	f04f 0800 	mov.w	r8, #0
  406fe0:	6861      	ldr	r1, [r4, #4]
  406fe2:	4628      	mov	r0, r5
  406fe4:	f7ff fdac 	bl	406b40 <_Balloc>
  406fe8:	f107 0514 	add.w	r5, r7, #20
  406fec:	693b      	ldr	r3, [r7, #16]
  406fee:	f104 0114 	add.w	r1, r4, #20
  406ff2:	6926      	ldr	r6, [r4, #16]
  406ff4:	4684      	mov	ip, r0
  406ff6:	eb05 0e83 	add.w	lr, r5, r3, lsl #2
  406ffa:	f100 0414 	add.w	r4, r0, #20
  406ffe:	eb01 0786 	add.w	r7, r1, r6, lsl #2
  407002:	2300      	movs	r3, #0
  407004:	f8c0 800c 	str.w	r8, [r0, #12]
  407008:	f851 9b04 	ldr.w	r9, [r1], #4
  40700c:	f855 2b04 	ldr.w	r2, [r5], #4
  407010:	fa13 f889 	uxtah	r8, r3, r9
  407014:	4608      	mov	r0, r1
  407016:	b293      	uxth	r3, r2
  407018:	45ae      	cmp	lr, r5
  40701a:	ea4f 4212 	mov.w	r2, r2, lsr #16
  40701e:	ebc3 0308 	rsb	r3, r3, r8
  407022:	ebc2 4219 	rsb	r2, r2, r9, lsr #16
  407026:	fa1f f883 	uxth.w	r8, r3
  40702a:	eb02 4323 	add.w	r3, r2, r3, asr #16
  40702e:	ea48 4203 	orr.w	r2, r8, r3, lsl #16
  407032:	ea4f 4323 	mov.w	r3, r3, asr #16
  407036:	f844 2b04 	str.w	r2, [r4], #4
  40703a:	d8e5      	bhi.n	407008 <__mdiff+0x44>
  40703c:	428f      	cmp	r7, r1
  40703e:	4625      	mov	r5, r4
  407040:	d916      	bls.n	407070 <__mdiff+0xac>
  407042:	f850 2b04 	ldr.w	r2, [r0], #4
  407046:	fa13 f382 	uxtah	r3, r3, r2
  40704a:	0c12      	lsrs	r2, r2, #16
  40704c:	4287      	cmp	r7, r0
  40704e:	fa1f fe83 	uxth.w	lr, r3
  407052:	eb02 4323 	add.w	r3, r2, r3, asr #16
  407056:	ea4e 4203 	orr.w	r2, lr, r3, lsl #16
  40705a:	ea4f 4323 	mov.w	r3, r3, asr #16
  40705e:	f844 2b04 	str.w	r2, [r4], #4
  407062:	d8ee      	bhi.n	407042 <__mdiff+0x7e>
  407064:	43c9      	mvns	r1, r1
  407066:	4439      	add	r1, r7
  407068:	f021 0403 	bic.w	r4, r1, #3
  40706c:	3404      	adds	r4, #4
  40706e:	442c      	add	r4, r5
  407070:	3c04      	subs	r4, #4
  407072:	b922      	cbnz	r2, 40707e <__mdiff+0xba>
  407074:	f854 3d04 	ldr.w	r3, [r4, #-4]!
  407078:	3e01      	subs	r6, #1
  40707a:	2b00      	cmp	r3, #0
  40707c:	d0fa      	beq.n	407074 <__mdiff+0xb0>
  40707e:	4660      	mov	r0, ip
  407080:	f8cc 6010 	str.w	r6, [ip, #16]
  407084:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  407088:	4623      	mov	r3, r4
  40708a:	f04f 0801 	mov.w	r8, #1
  40708e:	463c      	mov	r4, r7
  407090:	461f      	mov	r7, r3
  407092:	e7a5      	b.n	406fe0 <__mdiff+0x1c>
  407094:	4628      	mov	r0, r5
  407096:	4631      	mov	r1, r6
  407098:	f7ff fd52 	bl	406b40 <_Balloc>
  40709c:	2201      	movs	r2, #1
  40709e:	4603      	mov	r3, r0
  4070a0:	6146      	str	r6, [r0, #20]
  4070a2:	611a      	str	r2, [r3, #16]
  4070a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

004070a8 <__d2b>:
  4070a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4070ac:	461c      	mov	r4, r3
  4070ae:	b082      	sub	sp, #8
  4070b0:	2101      	movs	r1, #1
  4070b2:	4616      	mov	r6, r2
  4070b4:	f3c4 550a 	ubfx	r5, r4, #20, #11
  4070b8:	f7ff fd42 	bl	406b40 <_Balloc>
  4070bc:	f3c4 0413 	ubfx	r4, r4, #0, #20
  4070c0:	4607      	mov	r7, r0
  4070c2:	b10d      	cbz	r5, 4070c8 <__d2b+0x20>
  4070c4:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
  4070c8:	9401      	str	r4, [sp, #4]
  4070ca:	b30e      	cbz	r6, 407110 <__d2b+0x68>
  4070cc:	a802      	add	r0, sp, #8
  4070ce:	f840 6d08 	str.w	r6, [r0, #-8]!
  4070d2:	f7ff fdcb 	bl	406c6c <__lo0bits>
  4070d6:	2800      	cmp	r0, #0
  4070d8:	d132      	bne.n	407140 <__d2b+0x98>
  4070da:	e89d 000c 	ldmia.w	sp, {r2, r3}
  4070de:	617a      	str	r2, [r7, #20]
  4070e0:	2b00      	cmp	r3, #0
  4070e2:	61bb      	str	r3, [r7, #24]
  4070e4:	bf14      	ite	ne
  4070e6:	2402      	movne	r4, #2
  4070e8:	2401      	moveq	r4, #1
  4070ea:	613c      	str	r4, [r7, #16]
  4070ec:	b9dd      	cbnz	r5, 407126 <__d2b+0x7e>
  4070ee:	eb07 0384 	add.w	r3, r7, r4, lsl #2
  4070f2:	9a08      	ldr	r2, [sp, #32]
  4070f4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
  4070f8:	6010      	str	r0, [r2, #0]
  4070fa:	6918      	ldr	r0, [r3, #16]
  4070fc:	f7ff fd94 	bl	406c28 <__hi0bits>
  407100:	9b09      	ldr	r3, [sp, #36]	; 0x24
  407102:	ebc0 1044 	rsb	r0, r0, r4, lsl #5
  407106:	6018      	str	r0, [r3, #0]
  407108:	4638      	mov	r0, r7
  40710a:	b002      	add	sp, #8
  40710c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  407110:	a801      	add	r0, sp, #4
  407112:	f7ff fdab 	bl	406c6c <__lo0bits>
  407116:	2301      	movs	r3, #1
  407118:	9a01      	ldr	r2, [sp, #4]
  40711a:	3020      	adds	r0, #32
  40711c:	461c      	mov	r4, r3
  40711e:	613b      	str	r3, [r7, #16]
  407120:	617a      	str	r2, [r7, #20]
  407122:	2d00      	cmp	r5, #0
  407124:	d0e3      	beq.n	4070ee <__d2b+0x46>
  407126:	f2a5 4833 	subw	r8, r5, #1075	; 0x433
  40712a:	f1c0 0335 	rsb	r3, r0, #53	; 0x35
  40712e:	9a08      	ldr	r2, [sp, #32]
  407130:	4440      	add	r0, r8
  407132:	6010      	str	r0, [r2, #0]
  407134:	4638      	mov	r0, r7
  407136:	9a09      	ldr	r2, [sp, #36]	; 0x24
  407138:	6013      	str	r3, [r2, #0]
  40713a:	b002      	add	sp, #8
  40713c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  407140:	9b01      	ldr	r3, [sp, #4]
  407142:	f1c0 0120 	rsb	r1, r0, #32
  407146:	9a00      	ldr	r2, [sp, #0]
  407148:	fa03 f101 	lsl.w	r1, r3, r1
  40714c:	40c3      	lsrs	r3, r0
  40714e:	430a      	orrs	r2, r1
  407150:	9301      	str	r3, [sp, #4]
  407152:	617a      	str	r2, [r7, #20]
  407154:	e7c4      	b.n	4070e0 <__d2b+0x38>
  407156:	bf00      	nop

00407158 <_realloc_r>:
  407158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40715c:	4617      	mov	r7, r2
  40715e:	b083      	sub	sp, #12
  407160:	460e      	mov	r6, r1
  407162:	2900      	cmp	r1, #0
  407164:	f000 80e2 	beq.w	40732c <_realloc_r+0x1d4>
  407168:	f107 040b 	add.w	r4, r7, #11
  40716c:	4681      	mov	r9, r0
  40716e:	f7ff fce3 	bl	406b38 <__malloc_lock>
  407172:	f856 3c04 	ldr.w	r3, [r6, #-4]
  407176:	2c16      	cmp	r4, #22
  407178:	f1a6 0808 	sub.w	r8, r6, #8
  40717c:	f023 0503 	bic.w	r5, r3, #3
  407180:	d850      	bhi.n	407224 <_realloc_r+0xcc>
  407182:	2210      	movs	r2, #16
  407184:	2100      	movs	r1, #0
  407186:	4614      	mov	r4, r2
  407188:	42bc      	cmp	r4, r7
  40718a:	f0c0 80dc 	bcc.w	407346 <_realloc_r+0x1ee>
  40718e:	2900      	cmp	r1, #0
  407190:	f040 80d9 	bne.w	407346 <_realloc_r+0x1ee>
  407194:	4295      	cmp	r5, r2
  407196:	da4a      	bge.n	40722e <_realloc_r+0xd6>
  407198:	f8df b3a8 	ldr.w	fp, [pc, #936]	; 407544 <_realloc_r+0x3ec>
  40719c:	eb08 0105 	add.w	r1, r8, r5
  4071a0:	f8db 0008 	ldr.w	r0, [fp, #8]
  4071a4:	4288      	cmp	r0, r1
  4071a6:	f000 80d3 	beq.w	407350 <_realloc_r+0x1f8>
  4071aa:	6848      	ldr	r0, [r1, #4]
  4071ac:	f020 0e01 	bic.w	lr, r0, #1
  4071b0:	448e      	add	lr, r1
  4071b2:	f8de e004 	ldr.w	lr, [lr, #4]
  4071b6:	f01e 0f01 	tst.w	lr, #1
  4071ba:	d14e      	bne.n	40725a <_realloc_r+0x102>
  4071bc:	f020 0003 	bic.w	r0, r0, #3
  4071c0:	4428      	add	r0, r5
  4071c2:	4290      	cmp	r0, r2
  4071c4:	f280 80b8 	bge.w	407338 <_realloc_r+0x1e0>
  4071c8:	07db      	lsls	r3, r3, #31
  4071ca:	f100 808b 	bmi.w	4072e4 <_realloc_r+0x18c>
  4071ce:	f856 3c08 	ldr.w	r3, [r6, #-8]
  4071d2:	ebc3 0a08 	rsb	sl, r3, r8
  4071d6:	f8da 3004 	ldr.w	r3, [sl, #4]
  4071da:	f023 0303 	bic.w	r3, r3, #3
  4071de:	eb00 0e03 	add.w	lr, r0, r3
  4071e2:	4596      	cmp	lr, r2
  4071e4:	db43      	blt.n	40726e <_realloc_r+0x116>
  4071e6:	68cb      	ldr	r3, [r1, #12]
  4071e8:	4657      	mov	r7, sl
  4071ea:	6889      	ldr	r1, [r1, #8]
  4071ec:	1f2a      	subs	r2, r5, #4
  4071ee:	60cb      	str	r3, [r1, #12]
  4071f0:	2a24      	cmp	r2, #36	; 0x24
  4071f2:	6099      	str	r1, [r3, #8]
  4071f4:	f857 1f08 	ldr.w	r1, [r7, #8]!
  4071f8:	f8da 300c 	ldr.w	r3, [sl, #12]
  4071fc:	60cb      	str	r3, [r1, #12]
  4071fe:	6099      	str	r1, [r3, #8]
  407200:	f200 813c 	bhi.w	40747c <_realloc_r+0x324>
  407204:	2a13      	cmp	r2, #19
  407206:	f240 80fa 	bls.w	4073fe <_realloc_r+0x2a6>
  40720a:	6833      	ldr	r3, [r6, #0]
  40720c:	2a1b      	cmp	r2, #27
  40720e:	f8ca 3008 	str.w	r3, [sl, #8]
  407212:	6873      	ldr	r3, [r6, #4]
  407214:	f8ca 300c 	str.w	r3, [sl, #12]
  407218:	f200 813b 	bhi.w	407492 <_realloc_r+0x33a>
  40721c:	3608      	adds	r6, #8
  40721e:	f10a 0310 	add.w	r3, sl, #16
  407222:	e0ed      	b.n	407400 <_realloc_r+0x2a8>
  407224:	f024 0407 	bic.w	r4, r4, #7
  407228:	4622      	mov	r2, r4
  40722a:	0fe1      	lsrs	r1, r4, #31
  40722c:	e7ac      	b.n	407188 <_realloc_r+0x30>
  40722e:	4637      	mov	r7, r6
  407230:	1b2a      	subs	r2, r5, r4
  407232:	f003 0301 	and.w	r3, r3, #1
  407236:	2a0f      	cmp	r2, #15
  407238:	d841      	bhi.n	4072be <_realloc_r+0x166>
  40723a:	eb08 0205 	add.w	r2, r8, r5
  40723e:	431d      	orrs	r5, r3
  407240:	f8c8 5004 	str.w	r5, [r8, #4]
  407244:	6853      	ldr	r3, [r2, #4]
  407246:	f043 0301 	orr.w	r3, r3, #1
  40724a:	6053      	str	r3, [r2, #4]
  40724c:	4648      	mov	r0, r9
  40724e:	f7ff fc75 	bl	406b3c <__malloc_unlock>
  407252:	4638      	mov	r0, r7
  407254:	b003      	add	sp, #12
  407256:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40725a:	07d9      	lsls	r1, r3, #31
  40725c:	d442      	bmi.n	4072e4 <_realloc_r+0x18c>
  40725e:	f856 3c08 	ldr.w	r3, [r6, #-8]
  407262:	ebc3 0a08 	rsb	sl, r3, r8
  407266:	f8da 3004 	ldr.w	r3, [sl, #4]
  40726a:	f023 0303 	bic.w	r3, r3, #3
  40726e:	442b      	add	r3, r5
  407270:	4293      	cmp	r3, r2
  407272:	db37      	blt.n	4072e4 <_realloc_r+0x18c>
  407274:	4657      	mov	r7, sl
  407276:	1f2a      	subs	r2, r5, #4
  407278:	f8da 100c 	ldr.w	r1, [sl, #12]
  40727c:	f857 0f08 	ldr.w	r0, [r7, #8]!
  407280:	2a24      	cmp	r2, #36	; 0x24
  407282:	60c1      	str	r1, [r0, #12]
  407284:	6088      	str	r0, [r1, #8]
  407286:	f200 80c6 	bhi.w	407416 <_realloc_r+0x2be>
  40728a:	2a13      	cmp	r2, #19
  40728c:	f240 80ff 	bls.w	40748e <_realloc_r+0x336>
  407290:	6831      	ldr	r1, [r6, #0]
  407292:	2a1b      	cmp	r2, #27
  407294:	f8ca 1008 	str.w	r1, [sl, #8]
  407298:	6871      	ldr	r1, [r6, #4]
  40729a:	f8ca 100c 	str.w	r1, [sl, #12]
  40729e:	f200 810d 	bhi.w	4074bc <_realloc_r+0x364>
  4072a2:	3608      	adds	r6, #8
  4072a4:	f10a 0210 	add.w	r2, sl, #16
  4072a8:	6831      	ldr	r1, [r6, #0]
  4072aa:	461d      	mov	r5, r3
  4072ac:	46d0      	mov	r8, sl
  4072ae:	6011      	str	r1, [r2, #0]
  4072b0:	6873      	ldr	r3, [r6, #4]
  4072b2:	6053      	str	r3, [r2, #4]
  4072b4:	68b3      	ldr	r3, [r6, #8]
  4072b6:	6093      	str	r3, [r2, #8]
  4072b8:	f8da 3004 	ldr.w	r3, [sl, #4]
  4072bc:	e7b8      	b.n	407230 <_realloc_r+0xd8>
  4072be:	eb08 0504 	add.w	r5, r8, r4
  4072c2:	f042 0601 	orr.w	r6, r2, #1
  4072c6:	431c      	orrs	r4, r3
  4072c8:	4648      	mov	r0, r9
  4072ca:	442a      	add	r2, r5
  4072cc:	f105 0108 	add.w	r1, r5, #8
  4072d0:	f8c8 4004 	str.w	r4, [r8, #4]
  4072d4:	606e      	str	r6, [r5, #4]
  4072d6:	6853      	ldr	r3, [r2, #4]
  4072d8:	f043 0301 	orr.w	r3, r3, #1
  4072dc:	6053      	str	r3, [r2, #4]
  4072de:	f7fe fd2b 	bl	405d38 <_free_r>
  4072e2:	e7b3      	b.n	40724c <_realloc_r+0xf4>
  4072e4:	4639      	mov	r1, r7
  4072e6:	4648      	mov	r0, r9
  4072e8:	f7ff f836 	bl	406358 <_malloc_r>
  4072ec:	4607      	mov	r7, r0
  4072ee:	2800      	cmp	r0, #0
  4072f0:	d0ac      	beq.n	40724c <_realloc_r+0xf4>
  4072f2:	f856 3c04 	ldr.w	r3, [r6, #-4]
  4072f6:	f1a0 0108 	sub.w	r1, r0, #8
  4072fa:	f023 0201 	bic.w	r2, r3, #1
  4072fe:	4442      	add	r2, r8
  407300:	4291      	cmp	r1, r2
  407302:	f000 80b4 	beq.w	40746e <_realloc_r+0x316>
  407306:	1f2a      	subs	r2, r5, #4
  407308:	2a24      	cmp	r2, #36	; 0x24
  40730a:	f200 80a1 	bhi.w	407450 <_realloc_r+0x2f8>
  40730e:	2a13      	cmp	r2, #19
  407310:	d86a      	bhi.n	4073e8 <_realloc_r+0x290>
  407312:	4603      	mov	r3, r0
  407314:	4632      	mov	r2, r6
  407316:	6811      	ldr	r1, [r2, #0]
  407318:	6019      	str	r1, [r3, #0]
  40731a:	6851      	ldr	r1, [r2, #4]
  40731c:	6059      	str	r1, [r3, #4]
  40731e:	6892      	ldr	r2, [r2, #8]
  407320:	609a      	str	r2, [r3, #8]
  407322:	4631      	mov	r1, r6
  407324:	4648      	mov	r0, r9
  407326:	f7fe fd07 	bl	405d38 <_free_r>
  40732a:	e78f      	b.n	40724c <_realloc_r+0xf4>
  40732c:	4611      	mov	r1, r2
  40732e:	b003      	add	sp, #12
  407330:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  407334:	f7ff b810 	b.w	406358 <_malloc_r>
  407338:	68ca      	ldr	r2, [r1, #12]
  40733a:	4637      	mov	r7, r6
  40733c:	6889      	ldr	r1, [r1, #8]
  40733e:	4605      	mov	r5, r0
  407340:	60ca      	str	r2, [r1, #12]
  407342:	6091      	str	r1, [r2, #8]
  407344:	e774      	b.n	407230 <_realloc_r+0xd8>
  407346:	230c      	movs	r3, #12
  407348:	2000      	movs	r0, #0
  40734a:	f8c9 3000 	str.w	r3, [r9]
  40734e:	e781      	b.n	407254 <_realloc_r+0xfc>
  407350:	6841      	ldr	r1, [r0, #4]
  407352:	f104 0010 	add.w	r0, r4, #16
  407356:	f021 0103 	bic.w	r1, r1, #3
  40735a:	4429      	add	r1, r5
  40735c:	4281      	cmp	r1, r0
  40735e:	da63      	bge.n	407428 <_realloc_r+0x2d0>
  407360:	07db      	lsls	r3, r3, #31
  407362:	d4bf      	bmi.n	4072e4 <_realloc_r+0x18c>
  407364:	f856 3c08 	ldr.w	r3, [r6, #-8]
  407368:	ebc3 0a08 	rsb	sl, r3, r8
  40736c:	f8da 3004 	ldr.w	r3, [sl, #4]
  407370:	f023 0303 	bic.w	r3, r3, #3
  407374:	eb01 0c03 	add.w	ip, r1, r3
  407378:	4560      	cmp	r0, ip
  40737a:	f73f af78 	bgt.w	40726e <_realloc_r+0x116>
  40737e:	4657      	mov	r7, sl
  407380:	1f2a      	subs	r2, r5, #4
  407382:	f8da 300c 	ldr.w	r3, [sl, #12]
  407386:	f857 1f08 	ldr.w	r1, [r7, #8]!
  40738a:	2a24      	cmp	r2, #36	; 0x24
  40738c:	60cb      	str	r3, [r1, #12]
  40738e:	6099      	str	r1, [r3, #8]
  407390:	f200 80b8 	bhi.w	407504 <_realloc_r+0x3ac>
  407394:	2a13      	cmp	r2, #19
  407396:	f240 80a8 	bls.w	4074ea <_realloc_r+0x392>
  40739a:	6833      	ldr	r3, [r6, #0]
  40739c:	2a1b      	cmp	r2, #27
  40739e:	f8ca 3008 	str.w	r3, [sl, #8]
  4073a2:	6873      	ldr	r3, [r6, #4]
  4073a4:	f8ca 300c 	str.w	r3, [sl, #12]
  4073a8:	f200 80b5 	bhi.w	407516 <_realloc_r+0x3be>
  4073ac:	3608      	adds	r6, #8
  4073ae:	f10a 0310 	add.w	r3, sl, #16
  4073b2:	6832      	ldr	r2, [r6, #0]
  4073b4:	601a      	str	r2, [r3, #0]
  4073b6:	6872      	ldr	r2, [r6, #4]
  4073b8:	605a      	str	r2, [r3, #4]
  4073ba:	68b2      	ldr	r2, [r6, #8]
  4073bc:	609a      	str	r2, [r3, #8]
  4073be:	ebc4 030c 	rsb	r3, r4, ip
  4073c2:	eb0a 0204 	add.w	r2, sl, r4
  4073c6:	4648      	mov	r0, r9
  4073c8:	f043 0301 	orr.w	r3, r3, #1
  4073cc:	f8cb 2008 	str.w	r2, [fp, #8]
  4073d0:	6053      	str	r3, [r2, #4]
  4073d2:	f8da 3004 	ldr.w	r3, [sl, #4]
  4073d6:	f003 0301 	and.w	r3, r3, #1
  4073da:	431c      	orrs	r4, r3
  4073dc:	f8ca 4004 	str.w	r4, [sl, #4]
  4073e0:	f7ff fbac 	bl	406b3c <__malloc_unlock>
  4073e4:	4638      	mov	r0, r7
  4073e6:	e735      	b.n	407254 <_realloc_r+0xfc>
  4073e8:	6833      	ldr	r3, [r6, #0]
  4073ea:	2a1b      	cmp	r2, #27
  4073ec:	6003      	str	r3, [r0, #0]
  4073ee:	6873      	ldr	r3, [r6, #4]
  4073f0:	6043      	str	r3, [r0, #4]
  4073f2:	d831      	bhi.n	407458 <_realloc_r+0x300>
  4073f4:	f100 0308 	add.w	r3, r0, #8
  4073f8:	f106 0208 	add.w	r2, r6, #8
  4073fc:	e78b      	b.n	407316 <_realloc_r+0x1be>
  4073fe:	463b      	mov	r3, r7
  407400:	6832      	ldr	r2, [r6, #0]
  407402:	4675      	mov	r5, lr
  407404:	46d0      	mov	r8, sl
  407406:	601a      	str	r2, [r3, #0]
  407408:	6872      	ldr	r2, [r6, #4]
  40740a:	605a      	str	r2, [r3, #4]
  40740c:	68b2      	ldr	r2, [r6, #8]
  40740e:	609a      	str	r2, [r3, #8]
  407410:	f8da 3004 	ldr.w	r3, [sl, #4]
  407414:	e70c      	b.n	407230 <_realloc_r+0xd8>
  407416:	4631      	mov	r1, r6
  407418:	4638      	mov	r0, r7
  40741a:	461d      	mov	r5, r3
  40741c:	46d0      	mov	r8, sl
  40741e:	f7ff fb29 	bl	406a74 <memmove>
  407422:	f8da 3004 	ldr.w	r3, [sl, #4]
  407426:	e703      	b.n	407230 <_realloc_r+0xd8>
  407428:	1b0b      	subs	r3, r1, r4
  40742a:	eb08 0204 	add.w	r2, r8, r4
  40742e:	4648      	mov	r0, r9
  407430:	f043 0301 	orr.w	r3, r3, #1
  407434:	f8cb 2008 	str.w	r2, [fp, #8]
  407438:	6053      	str	r3, [r2, #4]
  40743a:	f856 3c04 	ldr.w	r3, [r6, #-4]
  40743e:	f003 0301 	and.w	r3, r3, #1
  407442:	431c      	orrs	r4, r3
  407444:	f846 4c04 	str.w	r4, [r6, #-4]
  407448:	f7ff fb78 	bl	406b3c <__malloc_unlock>
  40744c:	4630      	mov	r0, r6
  40744e:	e701      	b.n	407254 <_realloc_r+0xfc>
  407450:	4631      	mov	r1, r6
  407452:	f7ff fb0f 	bl	406a74 <memmove>
  407456:	e764      	b.n	407322 <_realloc_r+0x1ca>
  407458:	68b3      	ldr	r3, [r6, #8]
  40745a:	2a24      	cmp	r2, #36	; 0x24
  40745c:	6083      	str	r3, [r0, #8]
  40745e:	68f3      	ldr	r3, [r6, #12]
  407460:	60c3      	str	r3, [r0, #12]
  407462:	d022      	beq.n	4074aa <_realloc_r+0x352>
  407464:	f100 0310 	add.w	r3, r0, #16
  407468:	f106 0210 	add.w	r2, r6, #16
  40746c:	e753      	b.n	407316 <_realloc_r+0x1be>
  40746e:	f850 2c04 	ldr.w	r2, [r0, #-4]
  407472:	4637      	mov	r7, r6
  407474:	f022 0203 	bic.w	r2, r2, #3
  407478:	4415      	add	r5, r2
  40747a:	e6d9      	b.n	407230 <_realloc_r+0xd8>
  40747c:	4631      	mov	r1, r6
  40747e:	4638      	mov	r0, r7
  407480:	4675      	mov	r5, lr
  407482:	46d0      	mov	r8, sl
  407484:	f7ff faf6 	bl	406a74 <memmove>
  407488:	f8da 3004 	ldr.w	r3, [sl, #4]
  40748c:	e6d0      	b.n	407230 <_realloc_r+0xd8>
  40748e:	463a      	mov	r2, r7
  407490:	e70a      	b.n	4072a8 <_realloc_r+0x150>
  407492:	68b3      	ldr	r3, [r6, #8]
  407494:	2a24      	cmp	r2, #36	; 0x24
  407496:	f8ca 3010 	str.w	r3, [sl, #16]
  40749a:	68f3      	ldr	r3, [r6, #12]
  40749c:	f8ca 3014 	str.w	r3, [sl, #20]
  4074a0:	d018      	beq.n	4074d4 <_realloc_r+0x37c>
  4074a2:	3610      	adds	r6, #16
  4074a4:	f10a 0318 	add.w	r3, sl, #24
  4074a8:	e7aa      	b.n	407400 <_realloc_r+0x2a8>
  4074aa:	6931      	ldr	r1, [r6, #16]
  4074ac:	f100 0318 	add.w	r3, r0, #24
  4074b0:	f106 0218 	add.w	r2, r6, #24
  4074b4:	6101      	str	r1, [r0, #16]
  4074b6:	6971      	ldr	r1, [r6, #20]
  4074b8:	6141      	str	r1, [r0, #20]
  4074ba:	e72c      	b.n	407316 <_realloc_r+0x1be>
  4074bc:	68b1      	ldr	r1, [r6, #8]
  4074be:	2a24      	cmp	r2, #36	; 0x24
  4074c0:	f8ca 1010 	str.w	r1, [sl, #16]
  4074c4:	68f1      	ldr	r1, [r6, #12]
  4074c6:	f8ca 1014 	str.w	r1, [sl, #20]
  4074ca:	d010      	beq.n	4074ee <_realloc_r+0x396>
  4074cc:	3610      	adds	r6, #16
  4074ce:	f10a 0218 	add.w	r2, sl, #24
  4074d2:	e6e9      	b.n	4072a8 <_realloc_r+0x150>
  4074d4:	6932      	ldr	r2, [r6, #16]
  4074d6:	f10a 0320 	add.w	r3, sl, #32
  4074da:	3618      	adds	r6, #24
  4074dc:	f8ca 2018 	str.w	r2, [sl, #24]
  4074e0:	f856 2c04 	ldr.w	r2, [r6, #-4]
  4074e4:	f8ca 201c 	str.w	r2, [sl, #28]
  4074e8:	e78a      	b.n	407400 <_realloc_r+0x2a8>
  4074ea:	463b      	mov	r3, r7
  4074ec:	e761      	b.n	4073b2 <_realloc_r+0x25a>
  4074ee:	6931      	ldr	r1, [r6, #16]
  4074f0:	f10a 0220 	add.w	r2, sl, #32
  4074f4:	3618      	adds	r6, #24
  4074f6:	f8ca 1018 	str.w	r1, [sl, #24]
  4074fa:	f856 1c04 	ldr.w	r1, [r6, #-4]
  4074fe:	f8ca 101c 	str.w	r1, [sl, #28]
  407502:	e6d1      	b.n	4072a8 <_realloc_r+0x150>
  407504:	4631      	mov	r1, r6
  407506:	4638      	mov	r0, r7
  407508:	f8cd c004 	str.w	ip, [sp, #4]
  40750c:	f7ff fab2 	bl	406a74 <memmove>
  407510:	f8dd c004 	ldr.w	ip, [sp, #4]
  407514:	e753      	b.n	4073be <_realloc_r+0x266>
  407516:	68b3      	ldr	r3, [r6, #8]
  407518:	2a24      	cmp	r2, #36	; 0x24
  40751a:	f8ca 3010 	str.w	r3, [sl, #16]
  40751e:	68f3      	ldr	r3, [r6, #12]
  407520:	f8ca 3014 	str.w	r3, [sl, #20]
  407524:	d003      	beq.n	40752e <_realloc_r+0x3d6>
  407526:	3610      	adds	r6, #16
  407528:	f10a 0318 	add.w	r3, sl, #24
  40752c:	e741      	b.n	4073b2 <_realloc_r+0x25a>
  40752e:	6932      	ldr	r2, [r6, #16]
  407530:	f10a 0320 	add.w	r3, sl, #32
  407534:	3618      	adds	r6, #24
  407536:	f8ca 2018 	str.w	r2, [sl, #24]
  40753a:	f856 2c04 	ldr.w	r2, [r6, #-4]
  40753e:	f8ca 201c 	str.w	r2, [sl, #28]
  407542:	e736      	b.n	4073b2 <_realloc_r+0x25a>
  407544:	204004e4 	.word	0x204004e4

00407548 <__fpclassifyd>:
  407548:	fab0 f080 	clz	r0, r0
  40754c:	f031 4100 	bics.w	r1, r1, #2147483648	; 0x80000000
  407550:	ea4f 1050 	mov.w	r0, r0, lsr #5
  407554:	d102      	bne.n	40755c <__fpclassifyd+0x14>
  407556:	b108      	cbz	r0, 40755c <__fpclassifyd+0x14>
  407558:	2002      	movs	r0, #2
  40755a:	4770      	bx	lr
  40755c:	f5a1 1280 	sub.w	r2, r1, #1048576	; 0x100000
  407560:	4b08      	ldr	r3, [pc, #32]	; (407584 <__fpclassifyd+0x3c>)
  407562:	429a      	cmp	r2, r3
  407564:	d801      	bhi.n	40756a <__fpclassifyd+0x22>
  407566:	2004      	movs	r0, #4
  407568:	4770      	bx	lr
  40756a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  40756e:	d201      	bcs.n	407574 <__fpclassifyd+0x2c>
  407570:	2003      	movs	r0, #3
  407572:	4770      	bx	lr
  407574:	4b04      	ldr	r3, [pc, #16]	; (407588 <__fpclassifyd+0x40>)
  407576:	4299      	cmp	r1, r3
  407578:	bf14      	ite	ne
  40757a:	2000      	movne	r0, #0
  40757c:	f000 0001 	andeq.w	r0, r0, #1
  407580:	4770      	bx	lr
  407582:	bf00      	nop
  407584:	7fdfffff 	.word	0x7fdfffff
  407588:	7ff00000 	.word	0x7ff00000

0040758c <_sbrk_r>:
  40758c:	b538      	push	{r3, r4, r5, lr}
  40758e:	2300      	movs	r3, #0
  407590:	4c06      	ldr	r4, [pc, #24]	; (4075ac <_sbrk_r+0x20>)
  407592:	4605      	mov	r5, r0
  407594:	4608      	mov	r0, r1
  407596:	6023      	str	r3, [r4, #0]
  407598:	f7fa f9e6 	bl	401968 <_sbrk>
  40759c:	1c43      	adds	r3, r0, #1
  40759e:	d000      	beq.n	4075a2 <_sbrk_r+0x16>
  4075a0:	bd38      	pop	{r3, r4, r5, pc}
  4075a2:	6823      	ldr	r3, [r4, #0]
  4075a4:	2b00      	cmp	r3, #0
  4075a6:	d0fb      	beq.n	4075a0 <_sbrk_r+0x14>
  4075a8:	602b      	str	r3, [r5, #0]
  4075aa:	bd38      	pop	{r3, r4, r5, pc}
  4075ac:	204011d4 	.word	0x204011d4

004075b0 <__sread>:
  4075b0:	b510      	push	{r4, lr}
  4075b2:	460c      	mov	r4, r1
  4075b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4075b8:	f000 f9ec 	bl	407994 <_read_r>
  4075bc:	2800      	cmp	r0, #0
  4075be:	db03      	blt.n	4075c8 <__sread+0x18>
  4075c0:	6d23      	ldr	r3, [r4, #80]	; 0x50
  4075c2:	4403      	add	r3, r0
  4075c4:	6523      	str	r3, [r4, #80]	; 0x50
  4075c6:	bd10      	pop	{r4, pc}
  4075c8:	89a3      	ldrh	r3, [r4, #12]
  4075ca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  4075ce:	81a3      	strh	r3, [r4, #12]
  4075d0:	bd10      	pop	{r4, pc}
  4075d2:	bf00      	nop

004075d4 <__swrite>:
  4075d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4075d8:	461d      	mov	r5, r3
  4075da:	898b      	ldrh	r3, [r1, #12]
  4075dc:	4616      	mov	r6, r2
  4075de:	460c      	mov	r4, r1
  4075e0:	05da      	lsls	r2, r3, #23
  4075e2:	4607      	mov	r7, r0
  4075e4:	d506      	bpl.n	4075f4 <__swrite+0x20>
  4075e6:	2302      	movs	r3, #2
  4075e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4075ec:	2200      	movs	r2, #0
  4075ee:	f000 f9bd 	bl	40796c <_lseek_r>
  4075f2:	89a3      	ldrh	r3, [r4, #12]
  4075f4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  4075f8:	4638      	mov	r0, r7
  4075fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  4075fe:	4632      	mov	r2, r6
  407600:	81a3      	strh	r3, [r4, #12]
  407602:	462b      	mov	r3, r5
  407604:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  407608:	f000 b89e 	b.w	407748 <_write_r>

0040760c <__sseek>:
  40760c:	b510      	push	{r4, lr}
  40760e:	460c      	mov	r4, r1
  407610:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  407614:	f000 f9aa 	bl	40796c <_lseek_r>
  407618:	1c42      	adds	r2, r0, #1
  40761a:	89a3      	ldrh	r3, [r4, #12]
  40761c:	d004      	beq.n	407628 <__sseek+0x1c>
  40761e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
  407622:	6520      	str	r0, [r4, #80]	; 0x50
  407624:	81a3      	strh	r3, [r4, #12]
  407626:	bd10      	pop	{r4, pc}
  407628:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  40762c:	81a3      	strh	r3, [r4, #12]
  40762e:	bd10      	pop	{r4, pc}

00407630 <__sclose>:
  407630:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  407634:	f000 b920 	b.w	407878 <_close_r>

00407638 <__ssprint_r>:
  407638:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40763c:	6893      	ldr	r3, [r2, #8]
  40763e:	b083      	sub	sp, #12
  407640:	4691      	mov	r9, r2
  407642:	f8d2 8000 	ldr.w	r8, [r2]
  407646:	9001      	str	r0, [sp, #4]
  407648:	2b00      	cmp	r3, #0
  40764a:	d073      	beq.n	407734 <__ssprint_r+0xfc>
  40764c:	f04f 0b00 	mov.w	fp, #0
  407650:	460d      	mov	r5, r1
  407652:	6808      	ldr	r0, [r1, #0]
  407654:	688b      	ldr	r3, [r1, #8]
  407656:	465c      	mov	r4, fp
  407658:	2c00      	cmp	r4, #0
  40765a:	d046      	beq.n	4076ea <__ssprint_r+0xb2>
  40765c:	429c      	cmp	r4, r3
  40765e:	461e      	mov	r6, r3
  407660:	469a      	mov	sl, r3
  407662:	d349      	bcc.n	4076f8 <__ssprint_r+0xc0>
  407664:	f8b5 e00c 	ldrh.w	lr, [r5, #12]
  407668:	f41e 6f90 	tst.w	lr, #1152	; 0x480
  40766c:	d02d      	beq.n	4076ca <__ssprint_r+0x92>
  40766e:	696b      	ldr	r3, [r5, #20]
  407670:	1c62      	adds	r2, r4, #1
  407672:	6929      	ldr	r1, [r5, #16]
  407674:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  407678:	1a46      	subs	r6, r0, r1
  40767a:	4610      	mov	r0, r2
  40767c:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
  407680:	4430      	add	r0, r6
  407682:	105f      	asrs	r7, r3, #1
  407684:	4287      	cmp	r7, r0
  407686:	463a      	mov	r2, r7
  407688:	d201      	bcs.n	40768e <__ssprint_r+0x56>
  40768a:	4607      	mov	r7, r0
  40768c:	4602      	mov	r2, r0
  40768e:	f41e 6f80 	tst.w	lr, #1024	; 0x400
  407692:	d034      	beq.n	4076fe <__ssprint_r+0xc6>
  407694:	4611      	mov	r1, r2
  407696:	9801      	ldr	r0, [sp, #4]
  407698:	f7fe fe5e 	bl	406358 <_malloc_r>
  40769c:	4682      	mov	sl, r0
  40769e:	2800      	cmp	r0, #0
  4076a0:	d04e      	beq.n	407740 <__ssprint_r+0x108>
  4076a2:	4632      	mov	r2, r6
  4076a4:	6929      	ldr	r1, [r5, #16]
  4076a6:	f7ff f94b 	bl	406940 <memcpy>
  4076aa:	89aa      	ldrh	r2, [r5, #12]
  4076ac:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
  4076b0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  4076b4:	81aa      	strh	r2, [r5, #12]
  4076b6:	eb0a 0006 	add.w	r0, sl, r6
  4076ba:	1bba      	subs	r2, r7, r6
  4076bc:	f8c5 a010 	str.w	sl, [r5, #16]
  4076c0:	4626      	mov	r6, r4
  4076c2:	46a2      	mov	sl, r4
  4076c4:	6028      	str	r0, [r5, #0]
  4076c6:	60aa      	str	r2, [r5, #8]
  4076c8:	616f      	str	r7, [r5, #20]
  4076ca:	4652      	mov	r2, sl
  4076cc:	4659      	mov	r1, fp
  4076ce:	f7ff f9d1 	bl	406a74 <memmove>
  4076d2:	f8d9 2008 	ldr.w	r2, [r9, #8]
  4076d6:	68ab      	ldr	r3, [r5, #8]
  4076d8:	6828      	ldr	r0, [r5, #0]
  4076da:	1b14      	subs	r4, r2, r4
  4076dc:	1b9b      	subs	r3, r3, r6
  4076de:	4450      	add	r0, sl
  4076e0:	60ab      	str	r3, [r5, #8]
  4076e2:	6028      	str	r0, [r5, #0]
  4076e4:	f8c9 4008 	str.w	r4, [r9, #8]
  4076e8:	b324      	cbz	r4, 407734 <__ssprint_r+0xfc>
  4076ea:	f8d8 b000 	ldr.w	fp, [r8]
  4076ee:	f108 0808 	add.w	r8, r8, #8
  4076f2:	f858 4c04 	ldr.w	r4, [r8, #-4]
  4076f6:	e7af      	b.n	407658 <__ssprint_r+0x20>
  4076f8:	4626      	mov	r6, r4
  4076fa:	46a2      	mov	sl, r4
  4076fc:	e7e5      	b.n	4076ca <__ssprint_r+0x92>
  4076fe:	9801      	ldr	r0, [sp, #4]
  407700:	f7ff fd2a 	bl	407158 <_realloc_r>
  407704:	4682      	mov	sl, r0
  407706:	2800      	cmp	r0, #0
  407708:	d1d5      	bne.n	4076b6 <__ssprint_r+0x7e>
  40770a:	9c01      	ldr	r4, [sp, #4]
  40770c:	6929      	ldr	r1, [r5, #16]
  40770e:	4620      	mov	r0, r4
  407710:	f7fe fb12 	bl	405d38 <_free_r>
  407714:	230c      	movs	r3, #12
  407716:	6023      	str	r3, [r4, #0]
  407718:	89ab      	ldrh	r3, [r5, #12]
  40771a:	2200      	movs	r2, #0
  40771c:	f04f 30ff 	mov.w	r0, #4294967295
  407720:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  407724:	81ab      	strh	r3, [r5, #12]
  407726:	f8c9 2008 	str.w	r2, [r9, #8]
  40772a:	f8c9 2004 	str.w	r2, [r9, #4]
  40772e:	b003      	add	sp, #12
  407730:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407734:	2000      	movs	r0, #0
  407736:	f8c9 0004 	str.w	r0, [r9, #4]
  40773a:	b003      	add	sp, #12
  40773c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407740:	230c      	movs	r3, #12
  407742:	9a01      	ldr	r2, [sp, #4]
  407744:	6013      	str	r3, [r2, #0]
  407746:	e7e7      	b.n	407718 <__ssprint_r+0xe0>

00407748 <_write_r>:
  407748:	b570      	push	{r4, r5, r6, lr}
  40774a:	4c08      	ldr	r4, [pc, #32]	; (40776c <_write_r+0x24>)
  40774c:	2500      	movs	r5, #0
  40774e:	4606      	mov	r6, r0
  407750:	4608      	mov	r0, r1
  407752:	4611      	mov	r1, r2
  407754:	461a      	mov	r2, r3
  407756:	6025      	str	r5, [r4, #0]
  407758:	f7f8 ff04 	bl	400564 <_write>
  40775c:	1c43      	adds	r3, r0, #1
  40775e:	d000      	beq.n	407762 <_write_r+0x1a>
  407760:	bd70      	pop	{r4, r5, r6, pc}
  407762:	6823      	ldr	r3, [r4, #0]
  407764:	2b00      	cmp	r3, #0
  407766:	d0fb      	beq.n	407760 <_write_r+0x18>
  407768:	6033      	str	r3, [r6, #0]
  40776a:	bd70      	pop	{r4, r5, r6, pc}
  40776c:	204011d4 	.word	0x204011d4

00407770 <__register_exitproc>:
  407770:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  407774:	4c26      	ldr	r4, [pc, #152]	; (407810 <__register_exitproc+0xa0>)
  407776:	4606      	mov	r6, r0
  407778:	4688      	mov	r8, r1
  40777a:	4691      	mov	r9, r2
  40777c:	6825      	ldr	r5, [r4, #0]
  40777e:	469a      	mov	sl, r3
  407780:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
  407784:	2c00      	cmp	r4, #0
  407786:	d03a      	beq.n	4077fe <__register_exitproc+0x8e>
  407788:	6860      	ldr	r0, [r4, #4]
  40778a:	281f      	cmp	r0, #31
  40778c:	dc19      	bgt.n	4077c2 <__register_exitproc+0x52>
  40778e:	1c41      	adds	r1, r0, #1
  407790:	b186      	cbz	r6, 4077b4 <__register_exitproc+0x44>
  407792:	eb04 0580 	add.w	r5, r4, r0, lsl #2
  407796:	2201      	movs	r2, #1
  407798:	2e02      	cmp	r6, #2
  40779a:	f8c5 9088 	str.w	r9, [r5, #136]	; 0x88
  40779e:	fa02 f200 	lsl.w	r2, r2, r0
  4077a2:	f8d4 3188 	ldr.w	r3, [r4, #392]	; 0x188
  4077a6:	ea43 0302 	orr.w	r3, r3, r2
  4077aa:	f8c4 3188 	str.w	r3, [r4, #392]	; 0x188
  4077ae:	f8c5 a108 	str.w	sl, [r5, #264]	; 0x108
  4077b2:	d01e      	beq.n	4077f2 <__register_exitproc+0x82>
  4077b4:	1c83      	adds	r3, r0, #2
  4077b6:	6061      	str	r1, [r4, #4]
  4077b8:	2000      	movs	r0, #0
  4077ba:	f844 8023 	str.w	r8, [r4, r3, lsl #2]
  4077be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4077c2:	4b14      	ldr	r3, [pc, #80]	; (407814 <__register_exitproc+0xa4>)
  4077c4:	b303      	cbz	r3, 407808 <__register_exitproc+0x98>
  4077c6:	f44f 70c8 	mov.w	r0, #400	; 0x190
  4077ca:	f7fe fdbd 	bl	406348 <malloc>
  4077ce:	4604      	mov	r4, r0
  4077d0:	b1d0      	cbz	r0, 407808 <__register_exitproc+0x98>
  4077d2:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
  4077d6:	2700      	movs	r7, #0
  4077d8:	2101      	movs	r1, #1
  4077da:	6003      	str	r3, [r0, #0]
  4077dc:	4638      	mov	r0, r7
  4077de:	6067      	str	r7, [r4, #4]
  4077e0:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  4077e4:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
  4077e8:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
  4077ec:	2e00      	cmp	r6, #0
  4077ee:	d0e1      	beq.n	4077b4 <__register_exitproc+0x44>
  4077f0:	e7cf      	b.n	407792 <__register_exitproc+0x22>
  4077f2:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
  4077f6:	431a      	orrs	r2, r3
  4077f8:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
  4077fc:	e7da      	b.n	4077b4 <__register_exitproc+0x44>
  4077fe:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
  407802:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  407806:	e7bf      	b.n	407788 <__register_exitproc+0x18>
  407808:	f04f 30ff 	mov.w	r0, #4294967295
  40780c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  407810:	00408a3c 	.word	0x00408a3c
  407814:	00406349 	.word	0x00406349

00407818 <_calloc_r>:
  407818:	b510      	push	{r4, lr}
  40781a:	fb02 f101 	mul.w	r1, r2, r1
  40781e:	f7fe fd9b 	bl	406358 <_malloc_r>
  407822:	4604      	mov	r4, r0
  407824:	b168      	cbz	r0, 407842 <_calloc_r+0x2a>
  407826:	f850 2c04 	ldr.w	r2, [r0, #-4]
  40782a:	f022 0203 	bic.w	r2, r2, #3
  40782e:	3a04      	subs	r2, #4
  407830:	2a24      	cmp	r2, #36	; 0x24
  407832:	d814      	bhi.n	40785e <_calloc_r+0x46>
  407834:	2a13      	cmp	r2, #19
  407836:	d806      	bhi.n	407846 <_calloc_r+0x2e>
  407838:	4603      	mov	r3, r0
  40783a:	2200      	movs	r2, #0
  40783c:	601a      	str	r2, [r3, #0]
  40783e:	605a      	str	r2, [r3, #4]
  407840:	609a      	str	r2, [r3, #8]
  407842:	4620      	mov	r0, r4
  407844:	bd10      	pop	{r4, pc}
  407846:	2100      	movs	r1, #0
  407848:	2a1b      	cmp	r2, #27
  40784a:	6001      	str	r1, [r0, #0]
  40784c:	6041      	str	r1, [r0, #4]
  40784e:	d90b      	bls.n	407868 <_calloc_r+0x50>
  407850:	2a24      	cmp	r2, #36	; 0x24
  407852:	6081      	str	r1, [r0, #8]
  407854:	60c1      	str	r1, [r0, #12]
  407856:	d00a      	beq.n	40786e <_calloc_r+0x56>
  407858:	f100 0310 	add.w	r3, r0, #16
  40785c:	e7ed      	b.n	40783a <_calloc_r+0x22>
  40785e:	2100      	movs	r1, #0
  407860:	f7fb fbf8 	bl	403054 <memset>
  407864:	4620      	mov	r0, r4
  407866:	bd10      	pop	{r4, pc}
  407868:	f100 0308 	add.w	r3, r0, #8
  40786c:	e7e5      	b.n	40783a <_calloc_r+0x22>
  40786e:	6101      	str	r1, [r0, #16]
  407870:	f100 0318 	add.w	r3, r0, #24
  407874:	6141      	str	r1, [r0, #20]
  407876:	e7e0      	b.n	40783a <_calloc_r+0x22>

00407878 <_close_r>:
  407878:	b538      	push	{r3, r4, r5, lr}
  40787a:	2300      	movs	r3, #0
  40787c:	4c06      	ldr	r4, [pc, #24]	; (407898 <_close_r+0x20>)
  40787e:	4605      	mov	r5, r0
  407880:	4608      	mov	r0, r1
  407882:	6023      	str	r3, [r4, #0]
  407884:	f7fa f89c 	bl	4019c0 <_close>
  407888:	1c43      	adds	r3, r0, #1
  40788a:	d000      	beq.n	40788e <_close_r+0x16>
  40788c:	bd38      	pop	{r3, r4, r5, pc}
  40788e:	6823      	ldr	r3, [r4, #0]
  407890:	2b00      	cmp	r3, #0
  407892:	d0fb      	beq.n	40788c <_close_r+0x14>
  407894:	602b      	str	r3, [r5, #0]
  407896:	bd38      	pop	{r3, r4, r5, pc}
  407898:	204011d4 	.word	0x204011d4

0040789c <_fclose_r>:
  40789c:	2900      	cmp	r1, #0
  40789e:	d03d      	beq.n	40791c <_fclose_r+0x80>
  4078a0:	b570      	push	{r4, r5, r6, lr}
  4078a2:	4605      	mov	r5, r0
  4078a4:	460c      	mov	r4, r1
  4078a6:	b108      	cbz	r0, 4078ac <_fclose_r+0x10>
  4078a8:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4078aa:	b37b      	cbz	r3, 40790c <_fclose_r+0x70>
  4078ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4078b0:	b90b      	cbnz	r3, 4078b6 <_fclose_r+0x1a>
  4078b2:	2000      	movs	r0, #0
  4078b4:	bd70      	pop	{r4, r5, r6, pc}
  4078b6:	4628      	mov	r0, r5
  4078b8:	4621      	mov	r1, r4
  4078ba:	f7fe f891 	bl	4059e0 <__sflush_r>
  4078be:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  4078c0:	4606      	mov	r6, r0
  4078c2:	b133      	cbz	r3, 4078d2 <_fclose_r+0x36>
  4078c4:	4628      	mov	r0, r5
  4078c6:	69e1      	ldr	r1, [r4, #28]
  4078c8:	4798      	blx	r3
  4078ca:	2800      	cmp	r0, #0
  4078cc:	bfb8      	it	lt
  4078ce:	f04f 36ff 	movlt.w	r6, #4294967295
  4078d2:	89a3      	ldrh	r3, [r4, #12]
  4078d4:	061b      	lsls	r3, r3, #24
  4078d6:	d41c      	bmi.n	407912 <_fclose_r+0x76>
  4078d8:	6b21      	ldr	r1, [r4, #48]	; 0x30
  4078da:	b141      	cbz	r1, 4078ee <_fclose_r+0x52>
  4078dc:	f104 0340 	add.w	r3, r4, #64	; 0x40
  4078e0:	4299      	cmp	r1, r3
  4078e2:	d002      	beq.n	4078ea <_fclose_r+0x4e>
  4078e4:	4628      	mov	r0, r5
  4078e6:	f7fe fa27 	bl	405d38 <_free_r>
  4078ea:	2300      	movs	r3, #0
  4078ec:	6323      	str	r3, [r4, #48]	; 0x30
  4078ee:	6c61      	ldr	r1, [r4, #68]	; 0x44
  4078f0:	b121      	cbz	r1, 4078fc <_fclose_r+0x60>
  4078f2:	4628      	mov	r0, r5
  4078f4:	f7fe fa20 	bl	405d38 <_free_r>
  4078f8:	2300      	movs	r3, #0
  4078fa:	6463      	str	r3, [r4, #68]	; 0x44
  4078fc:	f7fe f9b4 	bl	405c68 <__sfp_lock_acquire>
  407900:	2300      	movs	r3, #0
  407902:	81a3      	strh	r3, [r4, #12]
  407904:	f7fe f9b2 	bl	405c6c <__sfp_lock_release>
  407908:	4630      	mov	r0, r6
  40790a:	bd70      	pop	{r4, r5, r6, pc}
  40790c:	f7fe f9a6 	bl	405c5c <__sinit>
  407910:	e7cc      	b.n	4078ac <_fclose_r+0x10>
  407912:	4628      	mov	r0, r5
  407914:	6921      	ldr	r1, [r4, #16]
  407916:	f7fe fa0f 	bl	405d38 <_free_r>
  40791a:	e7dd      	b.n	4078d8 <_fclose_r+0x3c>
  40791c:	2000      	movs	r0, #0
  40791e:	4770      	bx	lr

00407920 <_fstat_r>:
  407920:	b538      	push	{r3, r4, r5, lr}
  407922:	2300      	movs	r3, #0
  407924:	4c07      	ldr	r4, [pc, #28]	; (407944 <_fstat_r+0x24>)
  407926:	4605      	mov	r5, r0
  407928:	4608      	mov	r0, r1
  40792a:	4611      	mov	r1, r2
  40792c:	6023      	str	r3, [r4, #0]
  40792e:	f7fa f853 	bl	4019d8 <_fstat>
  407932:	1c43      	adds	r3, r0, #1
  407934:	d000      	beq.n	407938 <_fstat_r+0x18>
  407936:	bd38      	pop	{r3, r4, r5, pc}
  407938:	6823      	ldr	r3, [r4, #0]
  40793a:	2b00      	cmp	r3, #0
  40793c:	d0fb      	beq.n	407936 <_fstat_r+0x16>
  40793e:	602b      	str	r3, [r5, #0]
  407940:	bd38      	pop	{r3, r4, r5, pc}
  407942:	bf00      	nop
  407944:	204011d4 	.word	0x204011d4

00407948 <_isatty_r>:
  407948:	b538      	push	{r3, r4, r5, lr}
  40794a:	2300      	movs	r3, #0
  40794c:	4c06      	ldr	r4, [pc, #24]	; (407968 <_isatty_r+0x20>)
  40794e:	4605      	mov	r5, r0
  407950:	4608      	mov	r0, r1
  407952:	6023      	str	r3, [r4, #0]
  407954:	f7fa f850 	bl	4019f8 <_isatty>
  407958:	1c43      	adds	r3, r0, #1
  40795a:	d000      	beq.n	40795e <_isatty_r+0x16>
  40795c:	bd38      	pop	{r3, r4, r5, pc}
  40795e:	6823      	ldr	r3, [r4, #0]
  407960:	2b00      	cmp	r3, #0
  407962:	d0fb      	beq.n	40795c <_isatty_r+0x14>
  407964:	602b      	str	r3, [r5, #0]
  407966:	bd38      	pop	{r3, r4, r5, pc}
  407968:	204011d4 	.word	0x204011d4

0040796c <_lseek_r>:
  40796c:	b570      	push	{r4, r5, r6, lr}
  40796e:	4c08      	ldr	r4, [pc, #32]	; (407990 <_lseek_r+0x24>)
  407970:	2500      	movs	r5, #0
  407972:	4606      	mov	r6, r0
  407974:	4608      	mov	r0, r1
  407976:	4611      	mov	r1, r2
  407978:	461a      	mov	r2, r3
  40797a:	6025      	str	r5, [r4, #0]
  40797c:	f7fa f848 	bl	401a10 <_lseek>
  407980:	1c43      	adds	r3, r0, #1
  407982:	d000      	beq.n	407986 <_lseek_r+0x1a>
  407984:	bd70      	pop	{r4, r5, r6, pc}
  407986:	6823      	ldr	r3, [r4, #0]
  407988:	2b00      	cmp	r3, #0
  40798a:	d0fb      	beq.n	407984 <_lseek_r+0x18>
  40798c:	6033      	str	r3, [r6, #0]
  40798e:	bd70      	pop	{r4, r5, r6, pc}
  407990:	204011d4 	.word	0x204011d4

00407994 <_read_r>:
  407994:	b570      	push	{r4, r5, r6, lr}
  407996:	4c08      	ldr	r4, [pc, #32]	; (4079b8 <_read_r+0x24>)
  407998:	2500      	movs	r5, #0
  40799a:	4606      	mov	r6, r0
  40799c:	4608      	mov	r0, r1
  40799e:	4611      	mov	r1, r2
  4079a0:	461a      	mov	r2, r3
  4079a2:	6025      	str	r5, [r4, #0]
  4079a4:	f7f8 fdb2 	bl	40050c <_read>
  4079a8:	1c43      	adds	r3, r0, #1
  4079aa:	d000      	beq.n	4079ae <_read_r+0x1a>
  4079ac:	bd70      	pop	{r4, r5, r6, pc}
  4079ae:	6823      	ldr	r3, [r4, #0]
  4079b0:	2b00      	cmp	r3, #0
  4079b2:	d0fb      	beq.n	4079ac <_read_r+0x18>
  4079b4:	6033      	str	r3, [r6, #0]
  4079b6:	bd70      	pop	{r4, r5, r6, pc}
  4079b8:	204011d4 	.word	0x204011d4

004079bc <__aeabi_drsub>:
  4079bc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  4079c0:	e002      	b.n	4079c8 <__adddf3>
  4079c2:	bf00      	nop

004079c4 <__aeabi_dsub>:
  4079c4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

004079c8 <__adddf3>:
  4079c8:	b530      	push	{r4, r5, lr}
  4079ca:	ea4f 0441 	mov.w	r4, r1, lsl #1
  4079ce:	ea4f 0543 	mov.w	r5, r3, lsl #1
  4079d2:	ea94 0f05 	teq	r4, r5
  4079d6:	bf08      	it	eq
  4079d8:	ea90 0f02 	teqeq	r0, r2
  4079dc:	bf1f      	itttt	ne
  4079de:	ea54 0c00 	orrsne.w	ip, r4, r0
  4079e2:	ea55 0c02 	orrsne.w	ip, r5, r2
  4079e6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  4079ea:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  4079ee:	f000 80e2 	beq.w	407bb6 <__adddf3+0x1ee>
  4079f2:	ea4f 5454 	mov.w	r4, r4, lsr #21
  4079f6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  4079fa:	bfb8      	it	lt
  4079fc:	426d      	neglt	r5, r5
  4079fe:	dd0c      	ble.n	407a1a <__adddf3+0x52>
  407a00:	442c      	add	r4, r5
  407a02:	ea80 0202 	eor.w	r2, r0, r2
  407a06:	ea81 0303 	eor.w	r3, r1, r3
  407a0a:	ea82 0000 	eor.w	r0, r2, r0
  407a0e:	ea83 0101 	eor.w	r1, r3, r1
  407a12:	ea80 0202 	eor.w	r2, r0, r2
  407a16:	ea81 0303 	eor.w	r3, r1, r3
  407a1a:	2d36      	cmp	r5, #54	; 0x36
  407a1c:	bf88      	it	hi
  407a1e:	bd30      	pophi	{r4, r5, pc}
  407a20:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  407a24:	ea4f 3101 	mov.w	r1, r1, lsl #12
  407a28:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  407a2c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  407a30:	d002      	beq.n	407a38 <__adddf3+0x70>
  407a32:	4240      	negs	r0, r0
  407a34:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  407a38:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  407a3c:	ea4f 3303 	mov.w	r3, r3, lsl #12
  407a40:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  407a44:	d002      	beq.n	407a4c <__adddf3+0x84>
  407a46:	4252      	negs	r2, r2
  407a48:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  407a4c:	ea94 0f05 	teq	r4, r5
  407a50:	f000 80a7 	beq.w	407ba2 <__adddf3+0x1da>
  407a54:	f1a4 0401 	sub.w	r4, r4, #1
  407a58:	f1d5 0e20 	rsbs	lr, r5, #32
  407a5c:	db0d      	blt.n	407a7a <__adddf3+0xb2>
  407a5e:	fa02 fc0e 	lsl.w	ip, r2, lr
  407a62:	fa22 f205 	lsr.w	r2, r2, r5
  407a66:	1880      	adds	r0, r0, r2
  407a68:	f141 0100 	adc.w	r1, r1, #0
  407a6c:	fa03 f20e 	lsl.w	r2, r3, lr
  407a70:	1880      	adds	r0, r0, r2
  407a72:	fa43 f305 	asr.w	r3, r3, r5
  407a76:	4159      	adcs	r1, r3
  407a78:	e00e      	b.n	407a98 <__adddf3+0xd0>
  407a7a:	f1a5 0520 	sub.w	r5, r5, #32
  407a7e:	f10e 0e20 	add.w	lr, lr, #32
  407a82:	2a01      	cmp	r2, #1
  407a84:	fa03 fc0e 	lsl.w	ip, r3, lr
  407a88:	bf28      	it	cs
  407a8a:	f04c 0c02 	orrcs.w	ip, ip, #2
  407a8e:	fa43 f305 	asr.w	r3, r3, r5
  407a92:	18c0      	adds	r0, r0, r3
  407a94:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  407a98:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  407a9c:	d507      	bpl.n	407aae <__adddf3+0xe6>
  407a9e:	f04f 0e00 	mov.w	lr, #0
  407aa2:	f1dc 0c00 	rsbs	ip, ip, #0
  407aa6:	eb7e 0000 	sbcs.w	r0, lr, r0
  407aaa:	eb6e 0101 	sbc.w	r1, lr, r1
  407aae:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  407ab2:	d31b      	bcc.n	407aec <__adddf3+0x124>
  407ab4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  407ab8:	d30c      	bcc.n	407ad4 <__adddf3+0x10c>
  407aba:	0849      	lsrs	r1, r1, #1
  407abc:	ea5f 0030 	movs.w	r0, r0, rrx
  407ac0:	ea4f 0c3c 	mov.w	ip, ip, rrx
  407ac4:	f104 0401 	add.w	r4, r4, #1
  407ac8:	ea4f 5244 	mov.w	r2, r4, lsl #21
  407acc:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  407ad0:	f080 809a 	bcs.w	407c08 <__adddf3+0x240>
  407ad4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  407ad8:	bf08      	it	eq
  407ada:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  407ade:	f150 0000 	adcs.w	r0, r0, #0
  407ae2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  407ae6:	ea41 0105 	orr.w	r1, r1, r5
  407aea:	bd30      	pop	{r4, r5, pc}
  407aec:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  407af0:	4140      	adcs	r0, r0
  407af2:	eb41 0101 	adc.w	r1, r1, r1
  407af6:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  407afa:	f1a4 0401 	sub.w	r4, r4, #1
  407afe:	d1e9      	bne.n	407ad4 <__adddf3+0x10c>
  407b00:	f091 0f00 	teq	r1, #0
  407b04:	bf04      	itt	eq
  407b06:	4601      	moveq	r1, r0
  407b08:	2000      	moveq	r0, #0
  407b0a:	fab1 f381 	clz	r3, r1
  407b0e:	bf08      	it	eq
  407b10:	3320      	addeq	r3, #32
  407b12:	f1a3 030b 	sub.w	r3, r3, #11
  407b16:	f1b3 0220 	subs.w	r2, r3, #32
  407b1a:	da0c      	bge.n	407b36 <__adddf3+0x16e>
  407b1c:	320c      	adds	r2, #12
  407b1e:	dd08      	ble.n	407b32 <__adddf3+0x16a>
  407b20:	f102 0c14 	add.w	ip, r2, #20
  407b24:	f1c2 020c 	rsb	r2, r2, #12
  407b28:	fa01 f00c 	lsl.w	r0, r1, ip
  407b2c:	fa21 f102 	lsr.w	r1, r1, r2
  407b30:	e00c      	b.n	407b4c <__adddf3+0x184>
  407b32:	f102 0214 	add.w	r2, r2, #20
  407b36:	bfd8      	it	le
  407b38:	f1c2 0c20 	rsble	ip, r2, #32
  407b3c:	fa01 f102 	lsl.w	r1, r1, r2
  407b40:	fa20 fc0c 	lsr.w	ip, r0, ip
  407b44:	bfdc      	itt	le
  407b46:	ea41 010c 	orrle.w	r1, r1, ip
  407b4a:	4090      	lslle	r0, r2
  407b4c:	1ae4      	subs	r4, r4, r3
  407b4e:	bfa2      	ittt	ge
  407b50:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  407b54:	4329      	orrge	r1, r5
  407b56:	bd30      	popge	{r4, r5, pc}
  407b58:	ea6f 0404 	mvn.w	r4, r4
  407b5c:	3c1f      	subs	r4, #31
  407b5e:	da1c      	bge.n	407b9a <__adddf3+0x1d2>
  407b60:	340c      	adds	r4, #12
  407b62:	dc0e      	bgt.n	407b82 <__adddf3+0x1ba>
  407b64:	f104 0414 	add.w	r4, r4, #20
  407b68:	f1c4 0220 	rsb	r2, r4, #32
  407b6c:	fa20 f004 	lsr.w	r0, r0, r4
  407b70:	fa01 f302 	lsl.w	r3, r1, r2
  407b74:	ea40 0003 	orr.w	r0, r0, r3
  407b78:	fa21 f304 	lsr.w	r3, r1, r4
  407b7c:	ea45 0103 	orr.w	r1, r5, r3
  407b80:	bd30      	pop	{r4, r5, pc}
  407b82:	f1c4 040c 	rsb	r4, r4, #12
  407b86:	f1c4 0220 	rsb	r2, r4, #32
  407b8a:	fa20 f002 	lsr.w	r0, r0, r2
  407b8e:	fa01 f304 	lsl.w	r3, r1, r4
  407b92:	ea40 0003 	orr.w	r0, r0, r3
  407b96:	4629      	mov	r1, r5
  407b98:	bd30      	pop	{r4, r5, pc}
  407b9a:	fa21 f004 	lsr.w	r0, r1, r4
  407b9e:	4629      	mov	r1, r5
  407ba0:	bd30      	pop	{r4, r5, pc}
  407ba2:	f094 0f00 	teq	r4, #0
  407ba6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  407baa:	bf06      	itte	eq
  407bac:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  407bb0:	3401      	addeq	r4, #1
  407bb2:	3d01      	subne	r5, #1
  407bb4:	e74e      	b.n	407a54 <__adddf3+0x8c>
  407bb6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  407bba:	bf18      	it	ne
  407bbc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  407bc0:	d029      	beq.n	407c16 <__adddf3+0x24e>
  407bc2:	ea94 0f05 	teq	r4, r5
  407bc6:	bf08      	it	eq
  407bc8:	ea90 0f02 	teqeq	r0, r2
  407bcc:	d005      	beq.n	407bda <__adddf3+0x212>
  407bce:	ea54 0c00 	orrs.w	ip, r4, r0
  407bd2:	bf04      	itt	eq
  407bd4:	4619      	moveq	r1, r3
  407bd6:	4610      	moveq	r0, r2
  407bd8:	bd30      	pop	{r4, r5, pc}
  407bda:	ea91 0f03 	teq	r1, r3
  407bde:	bf1e      	ittt	ne
  407be0:	2100      	movne	r1, #0
  407be2:	2000      	movne	r0, #0
  407be4:	bd30      	popne	{r4, r5, pc}
  407be6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  407bea:	d105      	bne.n	407bf8 <__adddf3+0x230>
  407bec:	0040      	lsls	r0, r0, #1
  407bee:	4149      	adcs	r1, r1
  407bf0:	bf28      	it	cs
  407bf2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  407bf6:	bd30      	pop	{r4, r5, pc}
  407bf8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  407bfc:	bf3c      	itt	cc
  407bfe:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  407c02:	bd30      	popcc	{r4, r5, pc}
  407c04:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  407c08:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  407c0c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  407c10:	f04f 0000 	mov.w	r0, #0
  407c14:	bd30      	pop	{r4, r5, pc}
  407c16:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  407c1a:	bf1a      	itte	ne
  407c1c:	4619      	movne	r1, r3
  407c1e:	4610      	movne	r0, r2
  407c20:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  407c24:	bf1c      	itt	ne
  407c26:	460b      	movne	r3, r1
  407c28:	4602      	movne	r2, r0
  407c2a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  407c2e:	bf06      	itte	eq
  407c30:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  407c34:	ea91 0f03 	teqeq	r1, r3
  407c38:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  407c3c:	bd30      	pop	{r4, r5, pc}
  407c3e:	bf00      	nop

00407c40 <__aeabi_ui2d>:
  407c40:	f090 0f00 	teq	r0, #0
  407c44:	bf04      	itt	eq
  407c46:	2100      	moveq	r1, #0
  407c48:	4770      	bxeq	lr
  407c4a:	b530      	push	{r4, r5, lr}
  407c4c:	f44f 6480 	mov.w	r4, #1024	; 0x400
  407c50:	f104 0432 	add.w	r4, r4, #50	; 0x32
  407c54:	f04f 0500 	mov.w	r5, #0
  407c58:	f04f 0100 	mov.w	r1, #0
  407c5c:	e750      	b.n	407b00 <__adddf3+0x138>
  407c5e:	bf00      	nop

00407c60 <__aeabi_i2d>:
  407c60:	f090 0f00 	teq	r0, #0
  407c64:	bf04      	itt	eq
  407c66:	2100      	moveq	r1, #0
  407c68:	4770      	bxeq	lr
  407c6a:	b530      	push	{r4, r5, lr}
  407c6c:	f44f 6480 	mov.w	r4, #1024	; 0x400
  407c70:	f104 0432 	add.w	r4, r4, #50	; 0x32
  407c74:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  407c78:	bf48      	it	mi
  407c7a:	4240      	negmi	r0, r0
  407c7c:	f04f 0100 	mov.w	r1, #0
  407c80:	e73e      	b.n	407b00 <__adddf3+0x138>
  407c82:	bf00      	nop

00407c84 <__aeabi_f2d>:
  407c84:	0042      	lsls	r2, r0, #1
  407c86:	ea4f 01e2 	mov.w	r1, r2, asr #3
  407c8a:	ea4f 0131 	mov.w	r1, r1, rrx
  407c8e:	ea4f 7002 	mov.w	r0, r2, lsl #28
  407c92:	bf1f      	itttt	ne
  407c94:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  407c98:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  407c9c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  407ca0:	4770      	bxne	lr
  407ca2:	f092 0f00 	teq	r2, #0
  407ca6:	bf14      	ite	ne
  407ca8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  407cac:	4770      	bxeq	lr
  407cae:	b530      	push	{r4, r5, lr}
  407cb0:	f44f 7460 	mov.w	r4, #896	; 0x380
  407cb4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  407cb8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  407cbc:	e720      	b.n	407b00 <__adddf3+0x138>
  407cbe:	bf00      	nop

00407cc0 <__aeabi_ul2d>:
  407cc0:	ea50 0201 	orrs.w	r2, r0, r1
  407cc4:	bf08      	it	eq
  407cc6:	4770      	bxeq	lr
  407cc8:	b530      	push	{r4, r5, lr}
  407cca:	f04f 0500 	mov.w	r5, #0
  407cce:	e00a      	b.n	407ce6 <__aeabi_l2d+0x16>

00407cd0 <__aeabi_l2d>:
  407cd0:	ea50 0201 	orrs.w	r2, r0, r1
  407cd4:	bf08      	it	eq
  407cd6:	4770      	bxeq	lr
  407cd8:	b530      	push	{r4, r5, lr}
  407cda:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  407cde:	d502      	bpl.n	407ce6 <__aeabi_l2d+0x16>
  407ce0:	4240      	negs	r0, r0
  407ce2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  407ce6:	f44f 6480 	mov.w	r4, #1024	; 0x400
  407cea:	f104 0432 	add.w	r4, r4, #50	; 0x32
  407cee:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  407cf2:	f43f aedc 	beq.w	407aae <__adddf3+0xe6>
  407cf6:	f04f 0203 	mov.w	r2, #3
  407cfa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  407cfe:	bf18      	it	ne
  407d00:	3203      	addne	r2, #3
  407d02:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  407d06:	bf18      	it	ne
  407d08:	3203      	addne	r2, #3
  407d0a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  407d0e:	f1c2 0320 	rsb	r3, r2, #32
  407d12:	fa00 fc03 	lsl.w	ip, r0, r3
  407d16:	fa20 f002 	lsr.w	r0, r0, r2
  407d1a:	fa01 fe03 	lsl.w	lr, r1, r3
  407d1e:	ea40 000e 	orr.w	r0, r0, lr
  407d22:	fa21 f102 	lsr.w	r1, r1, r2
  407d26:	4414      	add	r4, r2
  407d28:	e6c1      	b.n	407aae <__adddf3+0xe6>
  407d2a:	bf00      	nop

00407d2c <__aeabi_dmul>:
  407d2c:	b570      	push	{r4, r5, r6, lr}
  407d2e:	f04f 0cff 	mov.w	ip, #255	; 0xff
  407d32:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  407d36:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  407d3a:	bf1d      	ittte	ne
  407d3c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  407d40:	ea94 0f0c 	teqne	r4, ip
  407d44:	ea95 0f0c 	teqne	r5, ip
  407d48:	f000 f8de 	bleq	407f08 <__aeabi_dmul+0x1dc>
  407d4c:	442c      	add	r4, r5
  407d4e:	ea81 0603 	eor.w	r6, r1, r3
  407d52:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  407d56:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  407d5a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  407d5e:	bf18      	it	ne
  407d60:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  407d64:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  407d68:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  407d6c:	d038      	beq.n	407de0 <__aeabi_dmul+0xb4>
  407d6e:	fba0 ce02 	umull	ip, lr, r0, r2
  407d72:	f04f 0500 	mov.w	r5, #0
  407d76:	fbe1 e502 	umlal	lr, r5, r1, r2
  407d7a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  407d7e:	fbe0 e503 	umlal	lr, r5, r0, r3
  407d82:	f04f 0600 	mov.w	r6, #0
  407d86:	fbe1 5603 	umlal	r5, r6, r1, r3
  407d8a:	f09c 0f00 	teq	ip, #0
  407d8e:	bf18      	it	ne
  407d90:	f04e 0e01 	orrne.w	lr, lr, #1
  407d94:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  407d98:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  407d9c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  407da0:	d204      	bcs.n	407dac <__aeabi_dmul+0x80>
  407da2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  407da6:	416d      	adcs	r5, r5
  407da8:	eb46 0606 	adc.w	r6, r6, r6
  407dac:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  407db0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  407db4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  407db8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  407dbc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  407dc0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  407dc4:	bf88      	it	hi
  407dc6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  407dca:	d81e      	bhi.n	407e0a <__aeabi_dmul+0xde>
  407dcc:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  407dd0:	bf08      	it	eq
  407dd2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  407dd6:	f150 0000 	adcs.w	r0, r0, #0
  407dda:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  407dde:	bd70      	pop	{r4, r5, r6, pc}
  407de0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  407de4:	ea46 0101 	orr.w	r1, r6, r1
  407de8:	ea40 0002 	orr.w	r0, r0, r2
  407dec:	ea81 0103 	eor.w	r1, r1, r3
  407df0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  407df4:	bfc2      	ittt	gt
  407df6:	ebd4 050c 	rsbsgt	r5, r4, ip
  407dfa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  407dfe:	bd70      	popgt	{r4, r5, r6, pc}
  407e00:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  407e04:	f04f 0e00 	mov.w	lr, #0
  407e08:	3c01      	subs	r4, #1
  407e0a:	f300 80ab 	bgt.w	407f64 <__aeabi_dmul+0x238>
  407e0e:	f114 0f36 	cmn.w	r4, #54	; 0x36
  407e12:	bfde      	ittt	le
  407e14:	2000      	movle	r0, #0
  407e16:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  407e1a:	bd70      	pople	{r4, r5, r6, pc}
  407e1c:	f1c4 0400 	rsb	r4, r4, #0
  407e20:	3c20      	subs	r4, #32
  407e22:	da35      	bge.n	407e90 <__aeabi_dmul+0x164>
  407e24:	340c      	adds	r4, #12
  407e26:	dc1b      	bgt.n	407e60 <__aeabi_dmul+0x134>
  407e28:	f104 0414 	add.w	r4, r4, #20
  407e2c:	f1c4 0520 	rsb	r5, r4, #32
  407e30:	fa00 f305 	lsl.w	r3, r0, r5
  407e34:	fa20 f004 	lsr.w	r0, r0, r4
  407e38:	fa01 f205 	lsl.w	r2, r1, r5
  407e3c:	ea40 0002 	orr.w	r0, r0, r2
  407e40:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  407e44:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  407e48:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  407e4c:	fa21 f604 	lsr.w	r6, r1, r4
  407e50:	eb42 0106 	adc.w	r1, r2, r6
  407e54:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  407e58:	bf08      	it	eq
  407e5a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  407e5e:	bd70      	pop	{r4, r5, r6, pc}
  407e60:	f1c4 040c 	rsb	r4, r4, #12
  407e64:	f1c4 0520 	rsb	r5, r4, #32
  407e68:	fa00 f304 	lsl.w	r3, r0, r4
  407e6c:	fa20 f005 	lsr.w	r0, r0, r5
  407e70:	fa01 f204 	lsl.w	r2, r1, r4
  407e74:	ea40 0002 	orr.w	r0, r0, r2
  407e78:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  407e7c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  407e80:	f141 0100 	adc.w	r1, r1, #0
  407e84:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  407e88:	bf08      	it	eq
  407e8a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  407e8e:	bd70      	pop	{r4, r5, r6, pc}
  407e90:	f1c4 0520 	rsb	r5, r4, #32
  407e94:	fa00 f205 	lsl.w	r2, r0, r5
  407e98:	ea4e 0e02 	orr.w	lr, lr, r2
  407e9c:	fa20 f304 	lsr.w	r3, r0, r4
  407ea0:	fa01 f205 	lsl.w	r2, r1, r5
  407ea4:	ea43 0302 	orr.w	r3, r3, r2
  407ea8:	fa21 f004 	lsr.w	r0, r1, r4
  407eac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  407eb0:	fa21 f204 	lsr.w	r2, r1, r4
  407eb4:	ea20 0002 	bic.w	r0, r0, r2
  407eb8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  407ebc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  407ec0:	bf08      	it	eq
  407ec2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  407ec6:	bd70      	pop	{r4, r5, r6, pc}
  407ec8:	f094 0f00 	teq	r4, #0
  407ecc:	d10f      	bne.n	407eee <__aeabi_dmul+0x1c2>
  407ece:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  407ed2:	0040      	lsls	r0, r0, #1
  407ed4:	eb41 0101 	adc.w	r1, r1, r1
  407ed8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  407edc:	bf08      	it	eq
  407ede:	3c01      	subeq	r4, #1
  407ee0:	d0f7      	beq.n	407ed2 <__aeabi_dmul+0x1a6>
  407ee2:	ea41 0106 	orr.w	r1, r1, r6
  407ee6:	f095 0f00 	teq	r5, #0
  407eea:	bf18      	it	ne
  407eec:	4770      	bxne	lr
  407eee:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  407ef2:	0052      	lsls	r2, r2, #1
  407ef4:	eb43 0303 	adc.w	r3, r3, r3
  407ef8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  407efc:	bf08      	it	eq
  407efe:	3d01      	subeq	r5, #1
  407f00:	d0f7      	beq.n	407ef2 <__aeabi_dmul+0x1c6>
  407f02:	ea43 0306 	orr.w	r3, r3, r6
  407f06:	4770      	bx	lr
  407f08:	ea94 0f0c 	teq	r4, ip
  407f0c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  407f10:	bf18      	it	ne
  407f12:	ea95 0f0c 	teqne	r5, ip
  407f16:	d00c      	beq.n	407f32 <__aeabi_dmul+0x206>
  407f18:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  407f1c:	bf18      	it	ne
  407f1e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  407f22:	d1d1      	bne.n	407ec8 <__aeabi_dmul+0x19c>
  407f24:	ea81 0103 	eor.w	r1, r1, r3
  407f28:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  407f2c:	f04f 0000 	mov.w	r0, #0
  407f30:	bd70      	pop	{r4, r5, r6, pc}
  407f32:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  407f36:	bf06      	itte	eq
  407f38:	4610      	moveq	r0, r2
  407f3a:	4619      	moveq	r1, r3
  407f3c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  407f40:	d019      	beq.n	407f76 <__aeabi_dmul+0x24a>
  407f42:	ea94 0f0c 	teq	r4, ip
  407f46:	d102      	bne.n	407f4e <__aeabi_dmul+0x222>
  407f48:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  407f4c:	d113      	bne.n	407f76 <__aeabi_dmul+0x24a>
  407f4e:	ea95 0f0c 	teq	r5, ip
  407f52:	d105      	bne.n	407f60 <__aeabi_dmul+0x234>
  407f54:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  407f58:	bf1c      	itt	ne
  407f5a:	4610      	movne	r0, r2
  407f5c:	4619      	movne	r1, r3
  407f5e:	d10a      	bne.n	407f76 <__aeabi_dmul+0x24a>
  407f60:	ea81 0103 	eor.w	r1, r1, r3
  407f64:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  407f68:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  407f6c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  407f70:	f04f 0000 	mov.w	r0, #0
  407f74:	bd70      	pop	{r4, r5, r6, pc}
  407f76:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  407f7a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  407f7e:	bd70      	pop	{r4, r5, r6, pc}

00407f80 <__aeabi_ddiv>:
  407f80:	b570      	push	{r4, r5, r6, lr}
  407f82:	f04f 0cff 	mov.w	ip, #255	; 0xff
  407f86:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  407f8a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  407f8e:	bf1d      	ittte	ne
  407f90:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  407f94:	ea94 0f0c 	teqne	r4, ip
  407f98:	ea95 0f0c 	teqne	r5, ip
  407f9c:	f000 f8a7 	bleq	4080ee <__aeabi_ddiv+0x16e>
  407fa0:	eba4 0405 	sub.w	r4, r4, r5
  407fa4:	ea81 0e03 	eor.w	lr, r1, r3
  407fa8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  407fac:	ea4f 3101 	mov.w	r1, r1, lsl #12
  407fb0:	f000 8088 	beq.w	4080c4 <__aeabi_ddiv+0x144>
  407fb4:	ea4f 3303 	mov.w	r3, r3, lsl #12
  407fb8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  407fbc:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  407fc0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  407fc4:	ea4f 2202 	mov.w	r2, r2, lsl #8
  407fc8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  407fcc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  407fd0:	ea4f 2600 	mov.w	r6, r0, lsl #8
  407fd4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  407fd8:	429d      	cmp	r5, r3
  407fda:	bf08      	it	eq
  407fdc:	4296      	cmpeq	r6, r2
  407fde:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  407fe2:	f504 7440 	add.w	r4, r4, #768	; 0x300
  407fe6:	d202      	bcs.n	407fee <__aeabi_ddiv+0x6e>
  407fe8:	085b      	lsrs	r3, r3, #1
  407fea:	ea4f 0232 	mov.w	r2, r2, rrx
  407fee:	1ab6      	subs	r6, r6, r2
  407ff0:	eb65 0503 	sbc.w	r5, r5, r3
  407ff4:	085b      	lsrs	r3, r3, #1
  407ff6:	ea4f 0232 	mov.w	r2, r2, rrx
  407ffa:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  407ffe:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  408002:	ebb6 0e02 	subs.w	lr, r6, r2
  408006:	eb75 0e03 	sbcs.w	lr, r5, r3
  40800a:	bf22      	ittt	cs
  40800c:	1ab6      	subcs	r6, r6, r2
  40800e:	4675      	movcs	r5, lr
  408010:	ea40 000c 	orrcs.w	r0, r0, ip
  408014:	085b      	lsrs	r3, r3, #1
  408016:	ea4f 0232 	mov.w	r2, r2, rrx
  40801a:	ebb6 0e02 	subs.w	lr, r6, r2
  40801e:	eb75 0e03 	sbcs.w	lr, r5, r3
  408022:	bf22      	ittt	cs
  408024:	1ab6      	subcs	r6, r6, r2
  408026:	4675      	movcs	r5, lr
  408028:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  40802c:	085b      	lsrs	r3, r3, #1
  40802e:	ea4f 0232 	mov.w	r2, r2, rrx
  408032:	ebb6 0e02 	subs.w	lr, r6, r2
  408036:	eb75 0e03 	sbcs.w	lr, r5, r3
  40803a:	bf22      	ittt	cs
  40803c:	1ab6      	subcs	r6, r6, r2
  40803e:	4675      	movcs	r5, lr
  408040:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  408044:	085b      	lsrs	r3, r3, #1
  408046:	ea4f 0232 	mov.w	r2, r2, rrx
  40804a:	ebb6 0e02 	subs.w	lr, r6, r2
  40804e:	eb75 0e03 	sbcs.w	lr, r5, r3
  408052:	bf22      	ittt	cs
  408054:	1ab6      	subcs	r6, r6, r2
  408056:	4675      	movcs	r5, lr
  408058:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  40805c:	ea55 0e06 	orrs.w	lr, r5, r6
  408060:	d018      	beq.n	408094 <__aeabi_ddiv+0x114>
  408062:	ea4f 1505 	mov.w	r5, r5, lsl #4
  408066:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  40806a:	ea4f 1606 	mov.w	r6, r6, lsl #4
  40806e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  408072:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  408076:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  40807a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  40807e:	d1c0      	bne.n	408002 <__aeabi_ddiv+0x82>
  408080:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  408084:	d10b      	bne.n	40809e <__aeabi_ddiv+0x11e>
  408086:	ea41 0100 	orr.w	r1, r1, r0
  40808a:	f04f 0000 	mov.w	r0, #0
  40808e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  408092:	e7b6      	b.n	408002 <__aeabi_ddiv+0x82>
  408094:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  408098:	bf04      	itt	eq
  40809a:	4301      	orreq	r1, r0
  40809c:	2000      	moveq	r0, #0
  40809e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  4080a2:	bf88      	it	hi
  4080a4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  4080a8:	f63f aeaf 	bhi.w	407e0a <__aeabi_dmul+0xde>
  4080ac:	ebb5 0c03 	subs.w	ip, r5, r3
  4080b0:	bf04      	itt	eq
  4080b2:	ebb6 0c02 	subseq.w	ip, r6, r2
  4080b6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  4080ba:	f150 0000 	adcs.w	r0, r0, #0
  4080be:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  4080c2:	bd70      	pop	{r4, r5, r6, pc}
  4080c4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  4080c8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  4080cc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  4080d0:	bfc2      	ittt	gt
  4080d2:	ebd4 050c 	rsbsgt	r5, r4, ip
  4080d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  4080da:	bd70      	popgt	{r4, r5, r6, pc}
  4080dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  4080e0:	f04f 0e00 	mov.w	lr, #0
  4080e4:	3c01      	subs	r4, #1
  4080e6:	e690      	b.n	407e0a <__aeabi_dmul+0xde>
  4080e8:	ea45 0e06 	orr.w	lr, r5, r6
  4080ec:	e68d      	b.n	407e0a <__aeabi_dmul+0xde>
  4080ee:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  4080f2:	ea94 0f0c 	teq	r4, ip
  4080f6:	bf08      	it	eq
  4080f8:	ea95 0f0c 	teqeq	r5, ip
  4080fc:	f43f af3b 	beq.w	407f76 <__aeabi_dmul+0x24a>
  408100:	ea94 0f0c 	teq	r4, ip
  408104:	d10a      	bne.n	40811c <__aeabi_ddiv+0x19c>
  408106:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  40810a:	f47f af34 	bne.w	407f76 <__aeabi_dmul+0x24a>
  40810e:	ea95 0f0c 	teq	r5, ip
  408112:	f47f af25 	bne.w	407f60 <__aeabi_dmul+0x234>
  408116:	4610      	mov	r0, r2
  408118:	4619      	mov	r1, r3
  40811a:	e72c      	b.n	407f76 <__aeabi_dmul+0x24a>
  40811c:	ea95 0f0c 	teq	r5, ip
  408120:	d106      	bne.n	408130 <__aeabi_ddiv+0x1b0>
  408122:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  408126:	f43f aefd 	beq.w	407f24 <__aeabi_dmul+0x1f8>
  40812a:	4610      	mov	r0, r2
  40812c:	4619      	mov	r1, r3
  40812e:	e722      	b.n	407f76 <__aeabi_dmul+0x24a>
  408130:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  408134:	bf18      	it	ne
  408136:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  40813a:	f47f aec5 	bne.w	407ec8 <__aeabi_dmul+0x19c>
  40813e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  408142:	f47f af0d 	bne.w	407f60 <__aeabi_dmul+0x234>
  408146:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  40814a:	f47f aeeb 	bne.w	407f24 <__aeabi_dmul+0x1f8>
  40814e:	e712      	b.n	407f76 <__aeabi_dmul+0x24a>

00408150 <__gedf2>:
  408150:	f04f 3cff 	mov.w	ip, #4294967295
  408154:	e006      	b.n	408164 <__cmpdf2+0x4>
  408156:	bf00      	nop

00408158 <__ledf2>:
  408158:	f04f 0c01 	mov.w	ip, #1
  40815c:	e002      	b.n	408164 <__cmpdf2+0x4>
  40815e:	bf00      	nop

00408160 <__cmpdf2>:
  408160:	f04f 0c01 	mov.w	ip, #1
  408164:	f84d cd04 	str.w	ip, [sp, #-4]!
  408168:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  40816c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  408170:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  408174:	bf18      	it	ne
  408176:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  40817a:	d01b      	beq.n	4081b4 <__cmpdf2+0x54>
  40817c:	b001      	add	sp, #4
  40817e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  408182:	bf0c      	ite	eq
  408184:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  408188:	ea91 0f03 	teqne	r1, r3
  40818c:	bf02      	ittt	eq
  40818e:	ea90 0f02 	teqeq	r0, r2
  408192:	2000      	moveq	r0, #0
  408194:	4770      	bxeq	lr
  408196:	f110 0f00 	cmn.w	r0, #0
  40819a:	ea91 0f03 	teq	r1, r3
  40819e:	bf58      	it	pl
  4081a0:	4299      	cmppl	r1, r3
  4081a2:	bf08      	it	eq
  4081a4:	4290      	cmpeq	r0, r2
  4081a6:	bf2c      	ite	cs
  4081a8:	17d8      	asrcs	r0, r3, #31
  4081aa:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  4081ae:	f040 0001 	orr.w	r0, r0, #1
  4081b2:	4770      	bx	lr
  4081b4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  4081b8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  4081bc:	d102      	bne.n	4081c4 <__cmpdf2+0x64>
  4081be:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  4081c2:	d107      	bne.n	4081d4 <__cmpdf2+0x74>
  4081c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  4081c8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  4081cc:	d1d6      	bne.n	40817c <__cmpdf2+0x1c>
  4081ce:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  4081d2:	d0d3      	beq.n	40817c <__cmpdf2+0x1c>
  4081d4:	f85d 0b04 	ldr.w	r0, [sp], #4
  4081d8:	4770      	bx	lr
  4081da:	bf00      	nop

004081dc <__aeabi_cdrcmple>:
  4081dc:	4684      	mov	ip, r0
  4081de:	4610      	mov	r0, r2
  4081e0:	4662      	mov	r2, ip
  4081e2:	468c      	mov	ip, r1
  4081e4:	4619      	mov	r1, r3
  4081e6:	4663      	mov	r3, ip
  4081e8:	e000      	b.n	4081ec <__aeabi_cdcmpeq>
  4081ea:	bf00      	nop

004081ec <__aeabi_cdcmpeq>:
  4081ec:	b501      	push	{r0, lr}
  4081ee:	f7ff ffb7 	bl	408160 <__cmpdf2>
  4081f2:	2800      	cmp	r0, #0
  4081f4:	bf48      	it	mi
  4081f6:	f110 0f00 	cmnmi.w	r0, #0
  4081fa:	bd01      	pop	{r0, pc}

004081fc <__aeabi_dcmpeq>:
  4081fc:	f84d ed08 	str.w	lr, [sp, #-8]!
  408200:	f7ff fff4 	bl	4081ec <__aeabi_cdcmpeq>
  408204:	bf0c      	ite	eq
  408206:	2001      	moveq	r0, #1
  408208:	2000      	movne	r0, #0
  40820a:	f85d fb08 	ldr.w	pc, [sp], #8
  40820e:	bf00      	nop

00408210 <__aeabi_dcmplt>:
  408210:	f84d ed08 	str.w	lr, [sp, #-8]!
  408214:	f7ff ffea 	bl	4081ec <__aeabi_cdcmpeq>
  408218:	bf34      	ite	cc
  40821a:	2001      	movcc	r0, #1
  40821c:	2000      	movcs	r0, #0
  40821e:	f85d fb08 	ldr.w	pc, [sp], #8
  408222:	bf00      	nop

00408224 <__aeabi_dcmple>:
  408224:	f84d ed08 	str.w	lr, [sp, #-8]!
  408228:	f7ff ffe0 	bl	4081ec <__aeabi_cdcmpeq>
  40822c:	bf94      	ite	ls
  40822e:	2001      	movls	r0, #1
  408230:	2000      	movhi	r0, #0
  408232:	f85d fb08 	ldr.w	pc, [sp], #8
  408236:	bf00      	nop

00408238 <__aeabi_dcmpge>:
  408238:	f84d ed08 	str.w	lr, [sp, #-8]!
  40823c:	f7ff ffce 	bl	4081dc <__aeabi_cdrcmple>
  408240:	bf94      	ite	ls
  408242:	2001      	movls	r0, #1
  408244:	2000      	movhi	r0, #0
  408246:	f85d fb08 	ldr.w	pc, [sp], #8
  40824a:	bf00      	nop

0040824c <__aeabi_dcmpgt>:
  40824c:	f84d ed08 	str.w	lr, [sp, #-8]!
  408250:	f7ff ffc4 	bl	4081dc <__aeabi_cdrcmple>
  408254:	bf34      	ite	cc
  408256:	2001      	movcc	r0, #1
  408258:	2000      	movcs	r0, #0
  40825a:	f85d fb08 	ldr.w	pc, [sp], #8
  40825e:	bf00      	nop

00408260 <__aeabi_d2iz>:
  408260:	ea4f 0241 	mov.w	r2, r1, lsl #1
  408264:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  408268:	d215      	bcs.n	408296 <__aeabi_d2iz+0x36>
  40826a:	d511      	bpl.n	408290 <__aeabi_d2iz+0x30>
  40826c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  408270:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  408274:	d912      	bls.n	40829c <__aeabi_d2iz+0x3c>
  408276:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  40827a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  40827e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  408282:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  408286:	fa23 f002 	lsr.w	r0, r3, r2
  40828a:	bf18      	it	ne
  40828c:	4240      	negne	r0, r0
  40828e:	4770      	bx	lr
  408290:	f04f 0000 	mov.w	r0, #0
  408294:	4770      	bx	lr
  408296:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  40829a:	d105      	bne.n	4082a8 <__aeabi_d2iz+0x48>
  40829c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  4082a0:	bf08      	it	eq
  4082a2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  4082a6:	4770      	bx	lr
  4082a8:	f04f 0000 	mov.w	r0, #0
  4082ac:	4770      	bx	lr
  4082ae:	bf00      	nop

004082b0 <__aeabi_uldivmod>:
  4082b0:	b953      	cbnz	r3, 4082c8 <__aeabi_uldivmod+0x18>
  4082b2:	b94a      	cbnz	r2, 4082c8 <__aeabi_uldivmod+0x18>
  4082b4:	2900      	cmp	r1, #0
  4082b6:	bf08      	it	eq
  4082b8:	2800      	cmpeq	r0, #0
  4082ba:	bf1c      	itt	ne
  4082bc:	f04f 31ff 	movne.w	r1, #4294967295
  4082c0:	f04f 30ff 	movne.w	r0, #4294967295
  4082c4:	f000 b83c 	b.w	408340 <__aeabi_idiv0>
  4082c8:	b082      	sub	sp, #8
  4082ca:	46ec      	mov	ip, sp
  4082cc:	e92d 5000 	stmdb	sp!, {ip, lr}
  4082d0:	f000 f81e 	bl	408310 <__gnu_uldivmod_helper>
  4082d4:	f8dd e004 	ldr.w	lr, [sp, #4]
  4082d8:	b002      	add	sp, #8
  4082da:	bc0c      	pop	{r2, r3}
  4082dc:	4770      	bx	lr
  4082de:	bf00      	nop

004082e0 <__gnu_ldivmod_helper>:
  4082e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4082e4:	4690      	mov	r8, r2
  4082e6:	4606      	mov	r6, r0
  4082e8:	460f      	mov	r7, r1
  4082ea:	461d      	mov	r5, r3
  4082ec:	9c06      	ldr	r4, [sp, #24]
  4082ee:	f000 f829 	bl	408344 <__divdi3>
  4082f2:	fb08 fc01 	mul.w	ip, r8, r1
  4082f6:	4686      	mov	lr, r0
  4082f8:	fba8 2300 	umull	r2, r3, r8, r0
  4082fc:	fb00 c505 	mla	r5, r0, r5, ip
  408300:	1ab2      	subs	r2, r6, r2
  408302:	442b      	add	r3, r5
  408304:	eb67 0303 	sbc.w	r3, r7, r3
  408308:	e9c4 2300 	strd	r2, r3, [r4]
  40830c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00408310 <__gnu_uldivmod_helper>:
  408310:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  408314:	461d      	mov	r5, r3
  408316:	4617      	mov	r7, r2
  408318:	4680      	mov	r8, r0
  40831a:	4689      	mov	r9, r1
  40831c:	9e08      	ldr	r6, [sp, #32]
  40831e:	f000 f953 	bl	4085c8 <__udivdi3>
  408322:	fb00 f305 	mul.w	r3, r0, r5
  408326:	fba0 4507 	umull	r4, r5, r0, r7
  40832a:	fb07 3701 	mla	r7, r7, r1, r3
  40832e:	ebb8 0404 	subs.w	r4, r8, r4
  408332:	443d      	add	r5, r7
  408334:	eb69 0505 	sbc.w	r5, r9, r5
  408338:	e9c6 4500 	strd	r4, r5, [r6]
  40833c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00408340 <__aeabi_idiv0>:
  408340:	4770      	bx	lr
  408342:	bf00      	nop

00408344 <__divdi3>:
  408344:	2900      	cmp	r1, #0
  408346:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40834a:	f2c0 80a2 	blt.w	408492 <__divdi3+0x14e>
  40834e:	2600      	movs	r6, #0
  408350:	2b00      	cmp	r3, #0
  408352:	f2c0 8098 	blt.w	408486 <__divdi3+0x142>
  408356:	468c      	mov	ip, r1
  408358:	4690      	mov	r8, r2
  40835a:	469e      	mov	lr, r3
  40835c:	4615      	mov	r5, r2
  40835e:	4604      	mov	r4, r0
  408360:	460f      	mov	r7, r1
  408362:	bbcb      	cbnz	r3, 4083d8 <__divdi3+0x94>
  408364:	428a      	cmp	r2, r1
  408366:	d956      	bls.n	408416 <__divdi3+0xd2>
  408368:	fab2 f382 	clz	r3, r2
  40836c:	b13b      	cbz	r3, 40837e <__divdi3+0x3a>
  40836e:	f1c3 0220 	rsb	r2, r3, #32
  408372:	409f      	lsls	r7, r3
  408374:	409d      	lsls	r5, r3
  408376:	409c      	lsls	r4, r3
  408378:	fa20 f202 	lsr.w	r2, r0, r2
  40837c:	4317      	orrs	r7, r2
  40837e:	0c28      	lsrs	r0, r5, #16
  408380:	0c22      	lsrs	r2, r4, #16
  408382:	fa1f fe85 	uxth.w	lr, r5
  408386:	fbb7 f1f0 	udiv	r1, r7, r0
  40838a:	fb00 7711 	mls	r7, r0, r1, r7
  40838e:	fb0e f301 	mul.w	r3, lr, r1
  408392:	ea42 4707 	orr.w	r7, r2, r7, lsl #16
  408396:	42bb      	cmp	r3, r7
  408398:	d907      	bls.n	4083aa <__divdi3+0x66>
  40839a:	197f      	adds	r7, r7, r5
  40839c:	f080 8101 	bcs.w	4085a2 <__divdi3+0x25e>
  4083a0:	42bb      	cmp	r3, r7
  4083a2:	f240 80fe 	bls.w	4085a2 <__divdi3+0x25e>
  4083a6:	3902      	subs	r1, #2
  4083a8:	442f      	add	r7, r5
  4083aa:	1aff      	subs	r7, r7, r3
  4083ac:	b2a4      	uxth	r4, r4
  4083ae:	fbb7 f3f0 	udiv	r3, r7, r0
  4083b2:	fb00 7713 	mls	r7, r0, r3, r7
  4083b6:	fb0e fe03 	mul.w	lr, lr, r3
  4083ba:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
  4083be:	45be      	cmp	lr, r7
  4083c0:	d906      	bls.n	4083d0 <__divdi3+0x8c>
  4083c2:	197f      	adds	r7, r7, r5
  4083c4:	f080 80eb 	bcs.w	40859e <__divdi3+0x25a>
  4083c8:	45be      	cmp	lr, r7
  4083ca:	f240 80e8 	bls.w	40859e <__divdi3+0x25a>
  4083ce:	3b02      	subs	r3, #2
  4083d0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
  4083d4:	2200      	movs	r2, #0
  4083d6:	e003      	b.n	4083e0 <__divdi3+0x9c>
  4083d8:	428b      	cmp	r3, r1
  4083da:	d90f      	bls.n	4083fc <__divdi3+0xb8>
  4083dc:	2200      	movs	r2, #0
  4083de:	4613      	mov	r3, r2
  4083e0:	1c34      	adds	r4, r6, #0
  4083e2:	f04f 0500 	mov.w	r5, #0
  4083e6:	bf18      	it	ne
  4083e8:	2401      	movne	r4, #1
  4083ea:	4260      	negs	r0, r4
  4083ec:	eb65 0145 	sbc.w	r1, r5, r5, lsl #1
  4083f0:	4058      	eors	r0, r3
  4083f2:	4051      	eors	r1, r2
  4083f4:	1900      	adds	r0, r0, r4
  4083f6:	4169      	adcs	r1, r5
  4083f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4083fc:	fab3 f283 	clz	r2, r3
  408400:	2a00      	cmp	r2, #0
  408402:	f040 8083 	bne.w	40850c <__divdi3+0x1c8>
  408406:	4580      	cmp	r8, r0
  408408:	f240 80cd 	bls.w	4085a6 <__divdi3+0x262>
  40840c:	428b      	cmp	r3, r1
  40840e:	f0c0 80ca 	bcc.w	4085a6 <__divdi3+0x262>
  408412:	4613      	mov	r3, r2
  408414:	e7e4      	b.n	4083e0 <__divdi3+0x9c>
  408416:	b912      	cbnz	r2, 40841e <__divdi3+0xda>
  408418:	2301      	movs	r3, #1
  40841a:	fbb3 f5f2 	udiv	r5, r3, r2
  40841e:	fab5 f285 	clz	r2, r5
  408422:	2a00      	cmp	r2, #0
  408424:	d13b      	bne.n	40849e <__divdi3+0x15a>
  408426:	1b78      	subs	r0, r7, r5
  408428:	ea4f 4e15 	mov.w	lr, r5, lsr #16
  40842c:	fa1f fc85 	uxth.w	ip, r5
  408430:	2201      	movs	r2, #1
  408432:	0c21      	lsrs	r1, r4, #16
  408434:	fbb0 f8fe 	udiv	r8, r0, lr
  408438:	fb0e 0018 	mls	r0, lr, r8, r0
  40843c:	fb0c f308 	mul.w	r3, ip, r8
  408440:	ea41 4700 	orr.w	r7, r1, r0, lsl #16
  408444:	42bb      	cmp	r3, r7
  408446:	d908      	bls.n	40845a <__divdi3+0x116>
  408448:	197f      	adds	r7, r7, r5
  40844a:	f080 80b0 	bcs.w	4085ae <__divdi3+0x26a>
  40844e:	42bb      	cmp	r3, r7
  408450:	f240 80ad 	bls.w	4085ae <__divdi3+0x26a>
  408454:	f1a8 0802 	sub.w	r8, r8, #2
  408458:	442f      	add	r7, r5
  40845a:	1aff      	subs	r7, r7, r3
  40845c:	b2a4      	uxth	r4, r4
  40845e:	fbb7 f3fe 	udiv	r3, r7, lr
  408462:	fb0e 7713 	mls	r7, lr, r3, r7
  408466:	fb0c fc03 	mul.w	ip, ip, r3
  40846a:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
  40846e:	45bc      	cmp	ip, r7
  408470:	d906      	bls.n	408480 <__divdi3+0x13c>
  408472:	197f      	adds	r7, r7, r5
  408474:	f080 8099 	bcs.w	4085aa <__divdi3+0x266>
  408478:	45bc      	cmp	ip, r7
  40847a:	f240 8096 	bls.w	4085aa <__divdi3+0x266>
  40847e:	3b02      	subs	r3, #2
  408480:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
  408484:	e7ac      	b.n	4083e0 <__divdi3+0x9c>
  408486:	4252      	negs	r2, r2
  408488:	ea6f 0606 	mvn.w	r6, r6
  40848c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  408490:	e761      	b.n	408356 <__divdi3+0x12>
  408492:	4240      	negs	r0, r0
  408494:	f04f 36ff 	mov.w	r6, #4294967295
  408498:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  40849c:	e758      	b.n	408350 <__divdi3+0xc>
  40849e:	4095      	lsls	r5, r2
  4084a0:	f1c2 0120 	rsb	r1, r2, #32
  4084a4:	fa07 f302 	lsl.w	r3, r7, r2
  4084a8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
  4084ac:	40cf      	lsrs	r7, r1
  4084ae:	fa24 f101 	lsr.w	r1, r4, r1
  4084b2:	4094      	lsls	r4, r2
  4084b4:	fa1f fc85 	uxth.w	ip, r5
  4084b8:	4319      	orrs	r1, r3
  4084ba:	fbb7 f2fe 	udiv	r2, r7, lr
  4084be:	ea4f 4811 	mov.w	r8, r1, lsr #16
  4084c2:	fb0e 7712 	mls	r7, lr, r2, r7
  4084c6:	fb0c f302 	mul.w	r3, ip, r2
  4084ca:	ea48 4707 	orr.w	r7, r8, r7, lsl #16
  4084ce:	42bb      	cmp	r3, r7
  4084d0:	d905      	bls.n	4084de <__divdi3+0x19a>
  4084d2:	197f      	adds	r7, r7, r5
  4084d4:	d271      	bcs.n	4085ba <__divdi3+0x276>
  4084d6:	42bb      	cmp	r3, r7
  4084d8:	d96f      	bls.n	4085ba <__divdi3+0x276>
  4084da:	3a02      	subs	r2, #2
  4084dc:	442f      	add	r7, r5
  4084de:	1aff      	subs	r7, r7, r3
  4084e0:	b289      	uxth	r1, r1
  4084e2:	fbb7 f8fe 	udiv	r8, r7, lr
  4084e6:	fb0e 7718 	mls	r7, lr, r8, r7
  4084ea:	fb0c f008 	mul.w	r0, ip, r8
  4084ee:	ea41 4307 	orr.w	r3, r1, r7, lsl #16
  4084f2:	4298      	cmp	r0, r3
  4084f4:	d906      	bls.n	408504 <__divdi3+0x1c0>
  4084f6:	195b      	adds	r3, r3, r5
  4084f8:	d261      	bcs.n	4085be <__divdi3+0x27a>
  4084fa:	4298      	cmp	r0, r3
  4084fc:	d95f      	bls.n	4085be <__divdi3+0x27a>
  4084fe:	f1a8 0802 	sub.w	r8, r8, #2
  408502:	442b      	add	r3, r5
  408504:	1a18      	subs	r0, r3, r0
  408506:	ea48 4202 	orr.w	r2, r8, r2, lsl #16
  40850a:	e792      	b.n	408432 <__divdi3+0xee>
  40850c:	f1c2 0720 	rsb	r7, r2, #32
  408510:	fa03 fe02 	lsl.w	lr, r3, r2
  408514:	fa08 f502 	lsl.w	r5, r8, r2
  408518:	4091      	lsls	r1, r2
  40851a:	fa28 f307 	lsr.w	r3, r8, r7
  40851e:	fa2c fc07 	lsr.w	ip, ip, r7
  408522:	40f8      	lsrs	r0, r7
  408524:	ea43 0e0e 	orr.w	lr, r3, lr
  408528:	4308      	orrs	r0, r1
  40852a:	ea4f 481e 	mov.w	r8, lr, lsr #16
  40852e:	0c07      	lsrs	r7, r0, #16
  408530:	fa1f fa8e 	uxth.w	sl, lr
  408534:	fbbc f9f8 	udiv	r9, ip, r8
  408538:	fb08 cc19 	mls	ip, r8, r9, ip
  40853c:	fb0a f109 	mul.w	r1, sl, r9
  408540:	ea47 4c0c 	orr.w	ip, r7, ip, lsl #16
  408544:	4561      	cmp	r1, ip
  408546:	d907      	bls.n	408558 <__divdi3+0x214>
  408548:	eb1c 0c0e 	adds.w	ip, ip, lr
  40854c:	d232      	bcs.n	4085b4 <__divdi3+0x270>
  40854e:	4561      	cmp	r1, ip
  408550:	d930      	bls.n	4085b4 <__divdi3+0x270>
  408552:	f1a9 0902 	sub.w	r9, r9, #2
  408556:	44f4      	add	ip, lr
  408558:	ebc1 0c0c 	rsb	ip, r1, ip
  40855c:	b280      	uxth	r0, r0
  40855e:	fbbc f3f8 	udiv	r3, ip, r8
  408562:	fb08 cc13 	mls	ip, r8, r3, ip
  408566:	fb0a fa03 	mul.w	sl, sl, r3
  40856a:	ea40 410c 	orr.w	r1, r0, ip, lsl #16
  40856e:	458a      	cmp	sl, r1
  408570:	d906      	bls.n	408580 <__divdi3+0x23c>
  408572:	eb11 010e 	adds.w	r1, r1, lr
  408576:	d225      	bcs.n	4085c4 <__divdi3+0x280>
  408578:	458a      	cmp	sl, r1
  40857a:	d923      	bls.n	4085c4 <__divdi3+0x280>
  40857c:	3b02      	subs	r3, #2
  40857e:	4471      	add	r1, lr
  408580:	ea43 4309 	orr.w	r3, r3, r9, lsl #16
  408584:	ebca 0101 	rsb	r1, sl, r1
  408588:	fba3 8905 	umull	r8, r9, r3, r5
  40858c:	4549      	cmp	r1, r9
  40858e:	d303      	bcc.n	408598 <__divdi3+0x254>
  408590:	d103      	bne.n	40859a <__divdi3+0x256>
  408592:	4094      	lsls	r4, r2
  408594:	4544      	cmp	r4, r8
  408596:	d200      	bcs.n	40859a <__divdi3+0x256>
  408598:	3b01      	subs	r3, #1
  40859a:	2200      	movs	r2, #0
  40859c:	e720      	b.n	4083e0 <__divdi3+0x9c>
  40859e:	3b01      	subs	r3, #1
  4085a0:	e716      	b.n	4083d0 <__divdi3+0x8c>
  4085a2:	3901      	subs	r1, #1
  4085a4:	e701      	b.n	4083aa <__divdi3+0x66>
  4085a6:	2301      	movs	r3, #1
  4085a8:	e71a      	b.n	4083e0 <__divdi3+0x9c>
  4085aa:	3b01      	subs	r3, #1
  4085ac:	e768      	b.n	408480 <__divdi3+0x13c>
  4085ae:	f108 38ff 	add.w	r8, r8, #4294967295
  4085b2:	e752      	b.n	40845a <__divdi3+0x116>
  4085b4:	f109 39ff 	add.w	r9, r9, #4294967295
  4085b8:	e7ce      	b.n	408558 <__divdi3+0x214>
  4085ba:	3a01      	subs	r2, #1
  4085bc:	e78f      	b.n	4084de <__divdi3+0x19a>
  4085be:	f108 38ff 	add.w	r8, r8, #4294967295
  4085c2:	e79f      	b.n	408504 <__divdi3+0x1c0>
  4085c4:	3b01      	subs	r3, #1
  4085c6:	e7db      	b.n	408580 <__divdi3+0x23c>

004085c8 <__udivdi3>:
  4085c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  4085cc:	2b00      	cmp	r3, #0
  4085ce:	d140      	bne.n	408652 <__udivdi3+0x8a>
  4085d0:	428a      	cmp	r2, r1
  4085d2:	4604      	mov	r4, r0
  4085d4:	4615      	mov	r5, r2
  4085d6:	d94a      	bls.n	40866e <__udivdi3+0xa6>
  4085d8:	fab2 f382 	clz	r3, r2
  4085dc:	460f      	mov	r7, r1
  4085de:	b14b      	cbz	r3, 4085f4 <__udivdi3+0x2c>
  4085e0:	f1c3 0620 	rsb	r6, r3, #32
  4085e4:	4099      	lsls	r1, r3
  4085e6:	fa00 f403 	lsl.w	r4, r0, r3
  4085ea:	fa02 f503 	lsl.w	r5, r2, r3
  4085ee:	40f0      	lsrs	r0, r6
  4085f0:	ea40 0701 	orr.w	r7, r0, r1
  4085f4:	0c29      	lsrs	r1, r5, #16
  4085f6:	0c26      	lsrs	r6, r4, #16
  4085f8:	fa1f fe85 	uxth.w	lr, r5
  4085fc:	fbb7 f0f1 	udiv	r0, r7, r1
  408600:	fb01 7710 	mls	r7, r1, r0, r7
  408604:	fb0e f200 	mul.w	r2, lr, r0
  408608:	ea46 4307 	orr.w	r3, r6, r7, lsl #16
  40860c:	429a      	cmp	r2, r3
  40860e:	d907      	bls.n	408620 <__udivdi3+0x58>
  408610:	195b      	adds	r3, r3, r5
  408612:	f080 80ea 	bcs.w	4087ea <__udivdi3+0x222>
  408616:	429a      	cmp	r2, r3
  408618:	f240 80e7 	bls.w	4087ea <__udivdi3+0x222>
  40861c:	3802      	subs	r0, #2
  40861e:	442b      	add	r3, r5
  408620:	1a9a      	subs	r2, r3, r2
  408622:	b2a4      	uxth	r4, r4
  408624:	fbb2 f3f1 	udiv	r3, r2, r1
  408628:	fb01 2213 	mls	r2, r1, r3, r2
  40862c:	fb0e fe03 	mul.w	lr, lr, r3
  408630:	ea44 4202 	orr.w	r2, r4, r2, lsl #16
  408634:	4596      	cmp	lr, r2
  408636:	d906      	bls.n	408646 <__udivdi3+0x7e>
  408638:	1952      	adds	r2, r2, r5
  40863a:	f080 80da 	bcs.w	4087f2 <__udivdi3+0x22a>
  40863e:	4596      	cmp	lr, r2
  408640:	f240 80d7 	bls.w	4087f2 <__udivdi3+0x22a>
  408644:	3b02      	subs	r3, #2
  408646:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
  40864a:	2600      	movs	r6, #0
  40864c:	4631      	mov	r1, r6
  40864e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  408652:	428b      	cmp	r3, r1
  408654:	d844      	bhi.n	4086e0 <__udivdi3+0x118>
  408656:	fab3 f683 	clz	r6, r3
  40865a:	2e00      	cmp	r6, #0
  40865c:	d145      	bne.n	4086ea <__udivdi3+0x122>
  40865e:	4282      	cmp	r2, r0
  408660:	f240 80bf 	bls.w	4087e2 <__udivdi3+0x21a>
  408664:	428b      	cmp	r3, r1
  408666:	f0c0 80bc 	bcc.w	4087e2 <__udivdi3+0x21a>
  40866a:	4630      	mov	r0, r6
  40866c:	e7ee      	b.n	40864c <__udivdi3+0x84>
  40866e:	b912      	cbnz	r2, 408676 <__udivdi3+0xae>
  408670:	2501      	movs	r5, #1
  408672:	fbb5 f5f2 	udiv	r5, r5, r2
  408676:	fab5 f285 	clz	r2, r5
  40867a:	2a00      	cmp	r2, #0
  40867c:	d17b      	bne.n	408776 <__udivdi3+0x1ae>
  40867e:	1b4a      	subs	r2, r1, r5
  408680:	0c2f      	lsrs	r7, r5, #16
  408682:	fa1f fe85 	uxth.w	lr, r5
  408686:	2601      	movs	r6, #1
  408688:	0c23      	lsrs	r3, r4, #16
  40868a:	fbb2 f0f7 	udiv	r0, r2, r7
  40868e:	fb07 2210 	mls	r2, r7, r0, r2
  408692:	fb0e fc00 	mul.w	ip, lr, r0
  408696:	ea43 4102 	orr.w	r1, r3, r2, lsl #16
  40869a:	458c      	cmp	ip, r1
  40869c:	d907      	bls.n	4086ae <__udivdi3+0xe6>
  40869e:	1949      	adds	r1, r1, r5
  4086a0:	f080 80a1 	bcs.w	4087e6 <__udivdi3+0x21e>
  4086a4:	458c      	cmp	ip, r1
  4086a6:	f240 809e 	bls.w	4087e6 <__udivdi3+0x21e>
  4086aa:	3802      	subs	r0, #2
  4086ac:	4429      	add	r1, r5
  4086ae:	ebcc 0101 	rsb	r1, ip, r1
  4086b2:	b2a4      	uxth	r4, r4
  4086b4:	fbb1 f3f7 	udiv	r3, r1, r7
  4086b8:	fb07 1113 	mls	r1, r7, r3, r1
  4086bc:	fb0e fe03 	mul.w	lr, lr, r3
  4086c0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
  4086c4:	45a6      	cmp	lr, r4
  4086c6:	d906      	bls.n	4086d6 <__udivdi3+0x10e>
  4086c8:	1964      	adds	r4, r4, r5
  4086ca:	f080 8090 	bcs.w	4087ee <__udivdi3+0x226>
  4086ce:	45a6      	cmp	lr, r4
  4086d0:	f240 808d 	bls.w	4087ee <__udivdi3+0x226>
  4086d4:	3b02      	subs	r3, #2
  4086d6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
  4086da:	4631      	mov	r1, r6
  4086dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4086e0:	2600      	movs	r6, #0
  4086e2:	4630      	mov	r0, r6
  4086e4:	4631      	mov	r1, r6
  4086e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4086ea:	f1c6 0520 	rsb	r5, r6, #32
  4086ee:	40b3      	lsls	r3, r6
  4086f0:	fa02 f706 	lsl.w	r7, r2, r6
  4086f4:	fa01 f406 	lsl.w	r4, r1, r6
  4086f8:	40ea      	lsrs	r2, r5
  4086fa:	40e9      	lsrs	r1, r5
  4086fc:	fa20 f505 	lsr.w	r5, r0, r5
  408700:	431a      	orrs	r2, r3
  408702:	4325      	orrs	r5, r4
  408704:	ea4f 4c12 	mov.w	ip, r2, lsr #16
  408708:	ea4f 4e15 	mov.w	lr, r5, lsr #16
  40870c:	b293      	uxth	r3, r2
  40870e:	fbb1 f8fc 	udiv	r8, r1, ip
  408712:	fb0c 1118 	mls	r1, ip, r8, r1
  408716:	fb03 f408 	mul.w	r4, r3, r8
  40871a:	ea4e 4101 	orr.w	r1, lr, r1, lsl #16
  40871e:	428c      	cmp	r4, r1
  408720:	d906      	bls.n	408730 <__udivdi3+0x168>
  408722:	1889      	adds	r1, r1, r2
  408724:	d269      	bcs.n	4087fa <__udivdi3+0x232>
  408726:	428c      	cmp	r4, r1
  408728:	d967      	bls.n	4087fa <__udivdi3+0x232>
  40872a:	f1a8 0802 	sub.w	r8, r8, #2
  40872e:	4411      	add	r1, r2
  408730:	1b09      	subs	r1, r1, r4
  408732:	b2ad      	uxth	r5, r5
  408734:	fbb1 f4fc 	udiv	r4, r1, ip
  408738:	fb0c 1114 	mls	r1, ip, r4, r1
  40873c:	fb03 fe04 	mul.w	lr, r3, r4
  408740:	ea45 4301 	orr.w	r3, r5, r1, lsl #16
  408744:	459e      	cmp	lr, r3
  408746:	d905      	bls.n	408754 <__udivdi3+0x18c>
  408748:	189b      	adds	r3, r3, r2
  40874a:	d254      	bcs.n	4087f6 <__udivdi3+0x22e>
  40874c:	459e      	cmp	lr, r3
  40874e:	d952      	bls.n	4087f6 <__udivdi3+0x22e>
  408750:	3c02      	subs	r4, #2
  408752:	4413      	add	r3, r2
  408754:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
  408758:	ebce 0303 	rsb	r3, lr, r3
  40875c:	fba4 8907 	umull	r8, r9, r4, r7
  408760:	454b      	cmp	r3, r9
  408762:	d303      	bcc.n	40876c <__udivdi3+0x1a4>
  408764:	d151      	bne.n	40880a <__udivdi3+0x242>
  408766:	40b0      	lsls	r0, r6
  408768:	4540      	cmp	r0, r8
  40876a:	d24e      	bcs.n	40880a <__udivdi3+0x242>
  40876c:	2600      	movs	r6, #0
  40876e:	1e60      	subs	r0, r4, #1
  408770:	4631      	mov	r1, r6
  408772:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  408776:	f1c2 0620 	rsb	r6, r2, #32
  40877a:	4095      	lsls	r5, r2
  40877c:	fa01 f302 	lsl.w	r3, r1, r2
  408780:	fa00 f402 	lsl.w	r4, r0, r2
  408784:	0c2f      	lsrs	r7, r5, #16
  408786:	40f1      	lsrs	r1, r6
  408788:	40f0      	lsrs	r0, r6
  40878a:	fa1f fe85 	uxth.w	lr, r5
  40878e:	fbb1 f6f7 	udiv	r6, r1, r7
  408792:	4318      	orrs	r0, r3
  408794:	fb07 1116 	mls	r1, r7, r6, r1
  408798:	fb0e f206 	mul.w	r2, lr, r6
  40879c:	ea4f 4c10 	mov.w	ip, r0, lsr #16
  4087a0:	ea4c 4301 	orr.w	r3, ip, r1, lsl #16
  4087a4:	429a      	cmp	r2, r3
  4087a6:	d905      	bls.n	4087b4 <__udivdi3+0x1ec>
  4087a8:	195b      	adds	r3, r3, r5
  4087aa:	d229      	bcs.n	408800 <__udivdi3+0x238>
  4087ac:	429a      	cmp	r2, r3
  4087ae:	d927      	bls.n	408800 <__udivdi3+0x238>
  4087b0:	3e02      	subs	r6, #2
  4087b2:	442b      	add	r3, r5
  4087b4:	1a9b      	subs	r3, r3, r2
  4087b6:	b280      	uxth	r0, r0
  4087b8:	fbb3 fcf7 	udiv	ip, r3, r7
  4087bc:	fb07 331c 	mls	r3, r7, ip, r3
  4087c0:	fb0e f10c 	mul.w	r1, lr, ip
  4087c4:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
  4087c8:	4299      	cmp	r1, r3
  4087ca:	d906      	bls.n	4087da <__udivdi3+0x212>
  4087cc:	195b      	adds	r3, r3, r5
  4087ce:	d219      	bcs.n	408804 <__udivdi3+0x23c>
  4087d0:	4299      	cmp	r1, r3
  4087d2:	d917      	bls.n	408804 <__udivdi3+0x23c>
  4087d4:	f1ac 0c02 	sub.w	ip, ip, #2
  4087d8:	442b      	add	r3, r5
  4087da:	1a5a      	subs	r2, r3, r1
  4087dc:	ea4c 4606 	orr.w	r6, ip, r6, lsl #16
  4087e0:	e752      	b.n	408688 <__udivdi3+0xc0>
  4087e2:	2001      	movs	r0, #1
  4087e4:	e732      	b.n	40864c <__udivdi3+0x84>
  4087e6:	3801      	subs	r0, #1
  4087e8:	e761      	b.n	4086ae <__udivdi3+0xe6>
  4087ea:	3801      	subs	r0, #1
  4087ec:	e718      	b.n	408620 <__udivdi3+0x58>
  4087ee:	3b01      	subs	r3, #1
  4087f0:	e771      	b.n	4086d6 <__udivdi3+0x10e>
  4087f2:	3b01      	subs	r3, #1
  4087f4:	e727      	b.n	408646 <__udivdi3+0x7e>
  4087f6:	3c01      	subs	r4, #1
  4087f8:	e7ac      	b.n	408754 <__udivdi3+0x18c>
  4087fa:	f108 38ff 	add.w	r8, r8, #4294967295
  4087fe:	e797      	b.n	408730 <__udivdi3+0x168>
  408800:	3e01      	subs	r6, #1
  408802:	e7d7      	b.n	4087b4 <__udivdi3+0x1ec>
  408804:	f10c 3cff 	add.w	ip, ip, #4294967295
  408808:	e7e7      	b.n	4087da <__udivdi3+0x212>
  40880a:	4620      	mov	r0, r4
  40880c:	2600      	movs	r6, #0
  40880e:	e71d      	b.n	40864c <__udivdi3+0x84>
  408810:	39414350 	.word	0x39414350
  408814:	3a323539 	.word	0x3a323539
  408818:	706d7420 	.word	0x706d7420
  40881c:	25203a31 	.word	0x25203a31
  408820:	6d742078 	.word	0x6d742078
  408824:	203a3270 	.word	0x203a3270
  408828:	74207825 	.word	0x74207825
  40882c:	3a33706d 	.word	0x3a33706d
  408830:	20782520 	.word	0x20782520
  408834:	34706d74 	.word	0x34706d74
  408838:	7825203a 	.word	0x7825203a
  40883c:	00000a0d 	.word	0x00000a0d
  408840:	0001c200 	.word	0x0001c200
  408844:	000000c0 	.word	0x000000c0
  408848:	00000800 	.word	0x00000800
	...
  408858:	202d462d 	.word	0x202d462d
  40885c:	74737953 	.word	0x74737953
  408860:	206b6369 	.word	0x206b6369
  408864:	666e6f63 	.word	0x666e6f63
  408868:	72756769 	.word	0x72756769
  40886c:	6f697461 	.word	0x6f697461
  408870:	7265206e 	.word	0x7265206e
  408874:	0d726f72 	.word	0x0d726f72
  408878:	00000000 	.word	0x00000000
  40887c:	00000960 	.word	0x00000960
  408880:	000000c0 	.word	0x000000c0
  408884:	00000800 	.word	0x00000800
  408888:	00000000 	.word	0x00000000
  40888c:	00006325 	.word	0x00006325
  408890:	61766e49 	.word	0x61766e49
  408894:	2064696c 	.word	0x2064696c
  408898:	69726573 	.word	0x69726573
  40889c:	49206c61 	.word	0x49206c61
  4088a0:	68632044 	.word	0x68632044
  4088a4:	736b6365 	.word	0x736b6365
  4088a8:	0d2e6d75 	.word	0x0d2e6d75
  4088ac:	0000000a 	.word	0x0000000a
  4088b0:	2044454c 	.word	0x2044454c
  4088b4:	72616f62 	.word	0x72616f62
  4088b8:	64252064 	.word	0x64252064
  4088bc:	72657320 	.word	0x72657320
  4088c0:	206c6169 	.word	0x206c6169
  4088c4:	203a4449 	.word	0x203a4449
  4088c8:	78257825 	.word	0x78257825
  4088cc:	78257825 	.word	0x78257825
  4088d0:	78257825 	.word	0x78257825
  4088d4:	00000a0d 	.word	0x00000a0d
  4088d8:	62206f6e 	.word	0x62206f6e
  4088dc:	6472616f 	.word	0x6472616f
  4088e0:	69687420 	.word	0x69687420
  4088e4:	6c732073 	.word	0x6c732073
  4088e8:	0a0d746f 	.word	0x0a0d746f
  4088ec:	00000000 	.word	0x00000000
  4088f0:	64616552 	.word	0x64616552
  4088f4:	000a0d79 	.word	0x000a0d79
  4088f8:	61656c43 	.word	0x61656c43
  4088fc:	000a0d6e 	.word	0x000a0d6e
  408900:	74726944 	.word	0x74726944
  408904:	000a0d79 	.word	0x000a0d79
  408908:	6f727245 	.word	0x6f727245
  40890c:	000a0d72 	.word	0x000a0d72
  408910:	6c656853 	.word	0x6c656853
  408914:	0a0d3166 	.word	0x0a0d3166
  408918:	00000000 	.word	0x00000000
  40891c:	6c656853 	.word	0x6c656853
  408920:	0a0d3266 	.word	0x0a0d3266
  408924:	00000000 	.word	0x00000000
  408928:	6c656853 	.word	0x6c656853
  40892c:	0a0d3366 	.word	0x0a0d3366
  408930:	00000000 	.word	0x00000000
  408934:	6c656853 	.word	0x6c656853
  408938:	0a0d3466 	.word	0x0a0d3466
  40893c:	00000000 	.word	0x00000000
  408940:	61656c43 	.word	0x61656c43
  408944:	676e696e 	.word	0x676e696e
  408948:	00000a0d 	.word	0x00000a0d
  40894c:	55202d2d 	.word	0x55202d2d
  408950:	54524153 	.word	0x54524153
  408954:	34535220 	.word	0x34535220
  408958:	45203538 	.word	0x45203538
  40895c:	706d6178 	.word	0x706d6178
  408960:	2d20656c 	.word	0x2d20656c
  408964:	2d0a0d2d 	.word	0x2d0a0d2d
  408968:	4153202d 	.word	0x4153202d
  40896c:	3037454d 	.word	0x3037454d
  408970:	4c50582d 	.word	0x4c50582d
  408974:	2d2d2044 	.word	0x2d2d2044
  408978:	2d2d0a0d 	.word	0x2d2d0a0d
  40897c:	6d6f4320 	.word	0x6d6f4320
  408980:	656c6970 	.word	0x656c6970
  408984:	46203a64 	.word	0x46203a64
  408988:	31206265 	.word	0x31206265
  40898c:	30322030 	.word	0x30322030
  408990:	32203631 	.word	0x32203631
  408994:	30323a30 	.word	0x30323a30
  408998:	2039313a 	.word	0x2039313a
  40899c:	000d2d2d 	.word	0x000d2d2d
  4089a0:	202d492d 	.word	0x202d492d
  4089a4:	72617453 	.word	0x72617453
  4089a8:	72742074 	.word	0x72742074
  4089ac:	6d736e61 	.word	0x6d736e61
  4089b0:	69747469 	.word	0x69747469
  4089b4:	0d21676e 	.word	0x0d21676e
  4089b8:	00000000 	.word	0x00000000
  4089bc:	202d492d 	.word	0x202d492d
  4089c0:	65636552 	.word	0x65636552
  4089c4:	6e697669 	.word	0x6e697669
  4089c8:	79732067 	.word	0x79732067
  4089cc:	6320636e 	.word	0x6320636e
  4089d0:	61726168 	.word	0x61726168
  4089d4:	72657463 	.word	0x72657463
  4089d8:	00000d2e 	.word	0x00000d2e
  4089dc:	202d492d 	.word	0x202d492d
  4089e0:	72617453 	.word	0x72617453
  4089e4:	65722074 	.word	0x65722074
  4089e8:	76696563 	.word	0x76696563
  4089ec:	21676e69 	.word	0x21676e69
  4089f0:	0000000d 	.word	0x0000000d
  4089f4:	202d452d 	.word	0x202d452d
  4089f8:	6f727245 	.word	0x6f727245
  4089fc:	636f2072 	.word	0x636f2072
  408a00:	72727563 	.word	0x72727563
  408a04:	77206465 	.word	0x77206465
  408a08:	656c6968 	.word	0x656c6968
  408a0c:	63657220 	.word	0x63657220
  408a10:	69766965 	.word	0x69766965
  408a14:	0d21676e 	.word	0x0d21676e
  408a18:	00000000 	.word	0x00000000
  408a1c:	202d492d 	.word	0x202d492d
  408a20:	65636552 	.word	0x65636552
  408a24:	64657669 	.word	0x64657669
  408a28:	63757320 	.word	0x63757320
  408a2c:	73736563 	.word	0x73736563
  408a30:	6c6c7566 	.word	0x6c6c7566
  408a34:	000d2179 	.word	0x000d2179
  408a38:	00000043 	.word	0x00000043

00408a3c <_global_impure_ptr>:
  408a3c:	20400080 0000000a                       ..@ ....

00408a44 <zeroes.6911>:
  408a44:	30303030 30303030 30303030 30303030     0000000000000000

00408a54 <blanks.6910>:
  408a54:	20202020 20202020 20202020 20202020                     
  408a64:	00464e49 00666e69 004e414e 006e616e     INF.inf.NAN.nan.
  408a74:	33323130 37363534 42413938 46454443     0123456789ABCDEF
  408a84:	00000000 33323130 37363534 62613938     ....0123456789ab
  408a94:	66656463 00000000 6c756e28 0000296c     cdef....(null)..
  408aa4:	00000030 69666e49 7974696e 00000000     0...Infinity....
  408ab4:	004e614e 49534f50 00000058 0000002e     NaN.POSIX.......
  408ac4:	00000000                                ....

00408ac8 <__mprec_tens>:
  408ac8:	00000000 3ff00000 00000000 40240000     .......?......$@
  408ad8:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
  408ae8:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
  408af8:	00000000 412e8480 00000000 416312d0     .......A......cA
  408b08:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
  408b18:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
  408b28:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
  408b38:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
  408b48:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
  408b58:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
  408b68:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
  408b78:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
  408b88:	79d99db4 44ea7843                       ...yCx.D

00408b90 <p05.5302>:
  408b90:	00000005 00000019 0000007d 00000000     ........}.......

00408ba0 <__mprec_bigtens>:
  408ba0:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
  408bb0:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
  408bc0:	7f73bf3c 75154fdd                       <.s..O.u

00408bc8 <_init>:
  408bc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  408bca:	bf00      	nop
  408bcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
  408bce:	bc08      	pop	{r3}
  408bd0:	469e      	mov	lr, r3
  408bd2:	4770      	bx	lr

00408bd4 <__init_array_start>:
  408bd4:	00404995 	.word	0x00404995

00408bd8 <__frame_dummy_init_array_entry>:
  408bd8:	00400165                                e.@.

00408bdc <_fini>:
  408bdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  408bde:	bf00      	nop
  408be0:	bcf8      	pop	{r3, r4, r5, r6, r7}
  408be2:	bc08      	pop	{r3}
  408be4:	469e      	mov	lr, r3
  408be6:	4770      	bx	lr

00408be8 <__fini_array_start>:
  408be8:	00400141 	.word	0x00400141
