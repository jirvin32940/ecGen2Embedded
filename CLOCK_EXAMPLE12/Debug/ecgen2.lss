
ecgen2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00009e64  00400000  00400000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00409e64  00409e64  00011e64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000008fc  20400000  00409e6c  00018000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          000009e0  204008fc  0040a768  000188fc  2**2
                  ALLOC
  4 .stack        00002004  204012dc  0040b148  000188fc  2**0
                  ALLOC
  5 .heap         00000200  204032e0  0040d14c  000188fc  2**0
                  ALLOC
  6 .ARM.attributes 00000033  00000000  00000000  000188fc  2**0
                  CONTENTS, READONLY
  7 .comment      0000005b  00000000  00000000  0001892f  2**0
                  CONTENTS, READONLY
  8 .debug_info   00011bad  00000000  00000000  0001898a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000024ac  00000000  00000000  0002a537  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00009f96  00000000  00000000  0002c9e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000010c8  00000000  00000000  00036979  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000f80  00000000  00000000  00037a41  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0001fd01  00000000  00000000  000389c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000ed01  00000000  00000000  000586c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0008d2e9  00000000  00000000  000673c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00005778  00000000  00000000  000f46ac  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <_sfixed>:
  400000:	204032e0 	.word	0x204032e0
  400004:	00402315 	.word	0x00402315
  400008:	00402399 	.word	0x00402399
  40000c:	00402399 	.word	0x00402399
  400010:	00402399 	.word	0x00402399
  400014:	00402399 	.word	0x00402399
  400018:	00402399 	.word	0x00402399
	...
  40002c:	00402399 	.word	0x00402399
  400030:	00402399 	.word	0x00402399
  400034:	00000000 	.word	0x00000000
  400038:	00402399 	.word	0x00402399
  40003c:	004037c9 	.word	0x004037c9
  400040:	00402399 	.word	0x00402399
  400044:	00402399 	.word	0x00402399
  400048:	00402399 	.word	0x00402399
  40004c:	00402399 	.word	0x00402399
  400050:	00402399 	.word	0x00402399
  400054:	00402399 	.word	0x00402399
  400058:	00402399 	.word	0x00402399
  40005c:	00402399 	.word	0x00402399
  400060:	00402399 	.word	0x00402399
  400064:	00000000 	.word	0x00000000
  400068:	0040134d 	.word	0x0040134d
  40006c:	00401365 	.word	0x00401365
  400070:	0040137d 	.word	0x0040137d
  400074:	004037f1 	.word	0x004037f1
  400078:	00402399 	.word	0x00402399
  40007c:	00402399 	.word	0x00402399
  400080:	00401395 	.word	0x00401395
  400084:	004013ad 	.word	0x004013ad
  400088:	00402399 	.word	0x00402399
  40008c:	00402399 	.word	0x00402399
  400090:	00402399 	.word	0x00402399
  400094:	00402399 	.word	0x00402399
  400098:	00402399 	.word	0x00402399
  40009c:	00402399 	.word	0x00402399
  4000a0:	00402399 	.word	0x00402399
  4000a4:	00402399 	.word	0x00402399
  4000a8:	00402399 	.word	0x00402399
  4000ac:	00402399 	.word	0x00402399
  4000b0:	00402399 	.word	0x00402399
  4000b4:	00401219 	.word	0x00401219
  4000b8:	00402399 	.word	0x00402399
  4000bc:	00403b45 	.word	0x00403b45
  4000c0:	00402399 	.word	0x00402399
  4000c4:	00402399 	.word	0x00402399
  4000c8:	00402399 	.word	0x00402399
  4000cc:	00402399 	.word	0x00402399
  4000d0:	00000000 	.word	0x00000000
  4000d4:	00402399 	.word	0x00402399
  4000d8:	00000000 	.word	0x00000000
  4000dc:	00402399 	.word	0x00402399
  4000e0:	0040122d 	.word	0x0040122d
  4000e4:	00402399 	.word	0x00402399
  4000e8:	00402399 	.word	0x00402399
  4000ec:	00402399 	.word	0x00402399
  4000f0:	00402399 	.word	0x00402399
  4000f4:	00402399 	.word	0x00402399
  4000f8:	00402399 	.word	0x00402399
  4000fc:	00402399 	.word	0x00402399
  400100:	00402399 	.word	0x00402399
  400104:	00402399 	.word	0x00402399
  400108:	00402399 	.word	0x00402399
  40010c:	00402399 	.word	0x00402399
  400110:	00402399 	.word	0x00402399
	...
  400120:	00402399 	.word	0x00402399
  400124:	00402399 	.word	0x00402399
  400128:	00402399 	.word	0x00402399
  40012c:	00402399 	.word	0x00402399
  400130:	00402399 	.word	0x00402399
  400134:	00000000 	.word	0x00000000
  400138:	00402399 	.word	0x00402399
  40013c:	00402399 	.word	0x00402399

00400140 <__do_global_dtors_aux>:
  400140:	b510      	push	{r4, lr}
  400142:	4c05      	ldr	r4, [pc, #20]	; (400158 <__do_global_dtors_aux+0x18>)
  400144:	7823      	ldrb	r3, [r4, #0]
  400146:	b933      	cbnz	r3, 400156 <__do_global_dtors_aux+0x16>
  400148:	4b04      	ldr	r3, [pc, #16]	; (40015c <__do_global_dtors_aux+0x1c>)
  40014a:	b113      	cbz	r3, 400152 <__do_global_dtors_aux+0x12>
  40014c:	4804      	ldr	r0, [pc, #16]	; (400160 <__do_global_dtors_aux+0x20>)
  40014e:	f3af 8000 	nop.w
  400152:	2301      	movs	r3, #1
  400154:	7023      	strb	r3, [r4, #0]
  400156:	bd10      	pop	{r4, pc}
  400158:	204008fc 	.word	0x204008fc
  40015c:	00000000 	.word	0x00000000
  400160:	00409e6c 	.word	0x00409e6c

00400164 <frame_dummy>:
  400164:	4b08      	ldr	r3, [pc, #32]	; (400188 <frame_dummy+0x24>)
  400166:	b510      	push	{r4, lr}
  400168:	b11b      	cbz	r3, 400172 <frame_dummy+0xe>
  40016a:	4808      	ldr	r0, [pc, #32]	; (40018c <frame_dummy+0x28>)
  40016c:	4908      	ldr	r1, [pc, #32]	; (400190 <frame_dummy+0x2c>)
  40016e:	f3af 8000 	nop.w
  400172:	4808      	ldr	r0, [pc, #32]	; (400194 <frame_dummy+0x30>)
  400174:	6803      	ldr	r3, [r0, #0]
  400176:	b903      	cbnz	r3, 40017a <frame_dummy+0x16>
  400178:	bd10      	pop	{r4, pc}
  40017a:	4b07      	ldr	r3, [pc, #28]	; (400198 <frame_dummy+0x34>)
  40017c:	2b00      	cmp	r3, #0
  40017e:	d0fb      	beq.n	400178 <frame_dummy+0x14>
  400180:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400184:	4718      	bx	r3
  400186:	bf00      	nop
  400188:	00000000 	.word	0x00000000
  40018c:	00409e6c 	.word	0x00409e6c
  400190:	20400900 	.word	0x20400900
  400194:	00409e6c 	.word	0x00409e6c
  400198:	00000000 	.word	0x00000000

0040019c <osc_enable>:
#define OSC_MAINCK_XTAL_HZ      BOARD_FREQ_MAINCK_XTAL    //!< External crystal oscillator.
#define OSC_MAINCK_BYPASS_HZ    BOARD_FREQ_MAINCK_BYPASS  //!< External bypass oscillator.
//@}

static inline void osc_enable(uint32_t ul_id)
{
  40019c:	b580      	push	{r7, lr}
  40019e:	b082      	sub	sp, #8
  4001a0:	af00      	add	r7, sp, #0
  4001a2:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  4001a4:	687b      	ldr	r3, [r7, #4]
  4001a6:	2b07      	cmp	r3, #7
  4001a8:	d830      	bhi.n	40020c <osc_enable+0x70>
  4001aa:	a201      	add	r2, pc, #4	; (adr r2, 4001b0 <osc_enable+0x14>)
  4001ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4001b0:	0040020d 	.word	0x0040020d
  4001b4:	004001d1 	.word	0x004001d1
  4001b8:	004001d9 	.word	0x004001d9
  4001bc:	004001e1 	.word	0x004001e1
  4001c0:	004001e9 	.word	0x004001e9
  4001c4:	004001f1 	.word	0x004001f1
  4001c8:	004001f9 	.word	0x004001f9
  4001cc:	00400203 	.word	0x00400203
	case OSC_SLCK_32K_RC:
		break;

	case OSC_SLCK_32K_XTAL:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
  4001d0:	2000      	movs	r0, #0
  4001d2:	4b10      	ldr	r3, [pc, #64]	; (400214 <osc_enable+0x78>)
  4001d4:	4798      	blx	r3
		break;
  4001d6:	e019      	b.n	40020c <osc_enable+0x70>

	case OSC_SLCK_32K_BYPASS:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
  4001d8:	2001      	movs	r0, #1
  4001da:	4b0e      	ldr	r3, [pc, #56]	; (400214 <osc_enable+0x78>)
  4001dc:	4798      	blx	r3
		break;
  4001de:	e015      	b.n	40020c <osc_enable+0x70>


	case OSC_MAINCK_4M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
  4001e0:	2000      	movs	r0, #0
  4001e2:	4b0d      	ldr	r3, [pc, #52]	; (400218 <osc_enable+0x7c>)
  4001e4:	4798      	blx	r3
		break;
  4001e6:	e011      	b.n	40020c <osc_enable+0x70>

	case OSC_MAINCK_8M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
  4001e8:	2010      	movs	r0, #16
  4001ea:	4b0b      	ldr	r3, [pc, #44]	; (400218 <osc_enable+0x7c>)
  4001ec:	4798      	blx	r3
		break;
  4001ee:	e00d      	b.n	40020c <osc_enable+0x70>

	case OSC_MAINCK_12M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
  4001f0:	2020      	movs	r0, #32
  4001f2:	4b09      	ldr	r3, [pc, #36]	; (400218 <osc_enable+0x7c>)
  4001f4:	4798      	blx	r3
		break;
  4001f6:	e009      	b.n	40020c <osc_enable+0x70>


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  4001f8:	2000      	movs	r0, #0
  4001fa:	213e      	movs	r1, #62	; 0x3e
  4001fc:	4b07      	ldr	r3, [pc, #28]	; (40021c <osc_enable+0x80>)
  4001fe:	4798      	blx	r3
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
  400200:	e004      	b.n	40020c <osc_enable+0x70>

	case OSC_MAINCK_BYPASS:
		pmc_switch_mainck_to_xtal(PMC_OSC_BYPASS,
  400202:	2001      	movs	r0, #1
  400204:	213e      	movs	r1, #62	; 0x3e
  400206:	4b05      	ldr	r3, [pc, #20]	; (40021c <osc_enable+0x80>)
  400208:	4798      	blx	r3
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
  40020a:	bf00      	nop
	}
}
  40020c:	3708      	adds	r7, #8
  40020e:	46bd      	mov	sp, r7
  400210:	bd80      	pop	{r7, pc}
  400212:	bf00      	nop
  400214:	004014c1 	.word	0x004014c1
  400218:	0040152d 	.word	0x0040152d
  40021c:	0040159d 	.word	0x0040159d

00400220 <osc_is_ready>:
		break;
	}
}

static inline bool osc_is_ready(uint32_t ul_id)
{
  400220:	b580      	push	{r7, lr}
  400222:	b082      	sub	sp, #8
  400224:	af00      	add	r7, sp, #0
  400226:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  400228:	687b      	ldr	r3, [r7, #4]
  40022a:	2b07      	cmp	r3, #7
  40022c:	d826      	bhi.n	40027c <osc_is_ready+0x5c>
  40022e:	a201      	add	r2, pc, #4	; (adr r2, 400234 <osc_is_ready+0x14>)
  400230:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  400234:	00400255 	.word	0x00400255
  400238:	00400259 	.word	0x00400259
  40023c:	00400259 	.word	0x00400259
  400240:	0040026b 	.word	0x0040026b
  400244:	0040026b 	.word	0x0040026b
  400248:	0040026b 	.word	0x0040026b
  40024c:	0040026b 	.word	0x0040026b
  400250:	0040026b 	.word	0x0040026b
	case OSC_SLCK_32K_RC:
		return 1;
  400254:	2301      	movs	r3, #1
  400256:	e012      	b.n	40027e <osc_is_ready+0x5e>

	case OSC_SLCK_32K_XTAL:
	case OSC_SLCK_32K_BYPASS:
		return pmc_osc_is_ready_32kxtal();
  400258:	4b0b      	ldr	r3, [pc, #44]	; (400288 <osc_is_ready+0x68>)
  40025a:	4798      	blx	r3
  40025c:	4603      	mov	r3, r0
  40025e:	2b00      	cmp	r3, #0
  400260:	bf14      	ite	ne
  400262:	2301      	movne	r3, #1
  400264:	2300      	moveq	r3, #0
  400266:	b2db      	uxtb	r3, r3
  400268:	e009      	b.n	40027e <osc_is_ready+0x5e>
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  40026a:	4b08      	ldr	r3, [pc, #32]	; (40028c <osc_is_ready+0x6c>)
  40026c:	4798      	blx	r3
  40026e:	4603      	mov	r3, r0
  400270:	2b00      	cmp	r3, #0
  400272:	bf14      	ite	ne
  400274:	2301      	movne	r3, #1
  400276:	2300      	moveq	r3, #0
  400278:	b2db      	uxtb	r3, r3
  40027a:	e000      	b.n	40027e <osc_is_ready+0x5e>
	}

	return 0;
  40027c:	2300      	movs	r3, #0
}
  40027e:	4618      	mov	r0, r3
  400280:	3708      	adds	r7, #8
  400282:	46bd      	mov	sp, r7
  400284:	bd80      	pop	{r7, pc}
  400286:	bf00      	nop
  400288:	004014f9 	.word	0x004014f9
  40028c:	00401615 	.word	0x00401615

00400290 <osc_get_rate>:

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  400290:	b480      	push	{r7}
  400292:	b083      	sub	sp, #12
  400294:	af00      	add	r7, sp, #0
  400296:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  400298:	687b      	ldr	r3, [r7, #4]
  40029a:	2b07      	cmp	r3, #7
  40029c:	d825      	bhi.n	4002ea <osc_get_rate+0x5a>
  40029e:	a201      	add	r2, pc, #4	; (adr r2, 4002a4 <osc_get_rate+0x14>)
  4002a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4002a4:	004002c5 	.word	0x004002c5
  4002a8:	004002cb 	.word	0x004002cb
  4002ac:	004002d1 	.word	0x004002d1
  4002b0:	004002d7 	.word	0x004002d7
  4002b4:	004002db 	.word	0x004002db
  4002b8:	004002df 	.word	0x004002df
  4002bc:	004002e3 	.word	0x004002e3
  4002c0:	004002e7 	.word	0x004002e7
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  4002c4:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  4002c8:	e010      	b.n	4002ec <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  4002ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4002ce:	e00d      	b.n	4002ec <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  4002d0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4002d4:	e00a      	b.n	4002ec <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  4002d6:	4b08      	ldr	r3, [pc, #32]	; (4002f8 <osc_get_rate+0x68>)
  4002d8:	e008      	b.n	4002ec <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  4002da:	4b08      	ldr	r3, [pc, #32]	; (4002fc <osc_get_rate+0x6c>)
  4002dc:	e006      	b.n	4002ec <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  4002de:	4b08      	ldr	r3, [pc, #32]	; (400300 <osc_get_rate+0x70>)
  4002e0:	e004      	b.n	4002ec <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  4002e2:	4b08      	ldr	r3, [pc, #32]	; (400304 <osc_get_rate+0x74>)
  4002e4:	e002      	b.n	4002ec <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  4002e6:	4b06      	ldr	r3, [pc, #24]	; (400300 <osc_get_rate+0x70>)
  4002e8:	e000      	b.n	4002ec <osc_get_rate+0x5c>
	}

	return 0;
  4002ea:	2300      	movs	r3, #0
}
  4002ec:	4618      	mov	r0, r3
  4002ee:	370c      	adds	r7, #12
  4002f0:	46bd      	mov	sp, r7
  4002f2:	f85d 7b04 	ldr.w	r7, [sp], #4
  4002f6:	4770      	bx	lr
  4002f8:	003d0900 	.word	0x003d0900
  4002fc:	007a1200 	.word	0x007a1200
  400300:	00b71b00 	.word	0x00b71b00
  400304:	00f42400 	.word	0x00f42400

00400308 <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
  400308:	b580      	push	{r7, lr}
  40030a:	b082      	sub	sp, #8
  40030c:	af00      	add	r7, sp, #0
  40030e:	4603      	mov	r3, r0
  400310:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
  400312:	bf00      	nop
  400314:	79fb      	ldrb	r3, [r7, #7]
  400316:	4618      	mov	r0, r3
  400318:	4b05      	ldr	r3, [pc, #20]	; (400330 <osc_wait_ready+0x28>)
  40031a:	4798      	blx	r3
  40031c:	4603      	mov	r3, r0
  40031e:	f083 0301 	eor.w	r3, r3, #1
  400322:	b2db      	uxtb	r3, r3
  400324:	2b00      	cmp	r3, #0
  400326:	d1f5      	bne.n	400314 <osc_wait_ready+0xc>
		/* Do nothing */
	}
}
  400328:	3708      	adds	r7, #8
  40032a:	46bd      	mov	sp, r7
  40032c:	bd80      	pop	{r7, pc}
  40032e:	bf00      	nop
  400330:	00400221 	.word	0x00400221

00400334 <pll_config_init>:
 * hardware mul+1 is hidden in this implementation. Use mul as mul effective
 * value.
 */
static inline void pll_config_init(struct pll_config *p_cfg,
		enum pll_source e_src, uint32_t ul_div, uint32_t ul_mul)
{
  400334:	b580      	push	{r7, lr}
  400336:	b086      	sub	sp, #24
  400338:	af00      	add	r7, sp, #0
  40033a:	60f8      	str	r0, [r7, #12]
  40033c:	607a      	str	r2, [r7, #4]
  40033e:	603b      	str	r3, [r7, #0]
  400340:	460b      	mov	r3, r1
  400342:	72fb      	strb	r3, [r7, #11]
	uint32_t vco_hz;

	Assert(e_src < PLL_NR_SOURCES);

	if (ul_div == 0 && ul_mul == 0) { /* Must only be true for UTMI PLL */
  400344:	687b      	ldr	r3, [r7, #4]
  400346:	2b00      	cmp	r3, #0
  400348:	d107      	bne.n	40035a <pll_config_init+0x26>
  40034a:	683b      	ldr	r3, [r7, #0]
  40034c:	2b00      	cmp	r3, #0
  40034e:	d104      	bne.n	40035a <pll_config_init+0x26>
		p_cfg->ctrl = CKGR_UCKR_UPLLCOUNT(PLL_COUNT);
  400350:	68fb      	ldr	r3, [r7, #12]
  400352:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
  400356:	601a      	str	r2, [r3, #0]
  400358:	e019      	b.n	40038e <pll_config_init+0x5a>
	} else { /* PLLA */
	/* Calculate internal VCO frequency */
	vco_hz = osc_get_rate(e_src) / ul_div;
  40035a:	7afb      	ldrb	r3, [r7, #11]
  40035c:	4618      	mov	r0, r3
  40035e:	4b0d      	ldr	r3, [pc, #52]	; (400394 <pll_config_init+0x60>)
  400360:	4798      	blx	r3
  400362:	4602      	mov	r2, r0
  400364:	687b      	ldr	r3, [r7, #4]
  400366:	fbb2 f3f3 	udiv	r3, r2, r3
  40036a:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_INPUT_MIN_HZ);
	Assert(vco_hz <= PLL_INPUT_MAX_HZ);

	vco_hz *= ul_mul;
  40036c:	697b      	ldr	r3, [r7, #20]
  40036e:	683a      	ldr	r2, [r7, #0]
  400370:	fb02 f303 	mul.w	r3, r2, r3
  400374:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_OUTPUT_MIN_HZ);
	Assert(vco_hz <= PLL_OUTPUT_MAX_HZ);

	/* PMC hardware will automatically make it mul+1 */
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) | CKGR_PLLAR_DIVA(ul_div)  \
  400376:	683b      	ldr	r3, [r7, #0]
  400378:	3b01      	subs	r3, #1
  40037a:	041a      	lsls	r2, r3, #16
  40037c:	4b06      	ldr	r3, [pc, #24]	; (400398 <pll_config_init+0x64>)
  40037e:	4013      	ands	r3, r2
  400380:	687a      	ldr	r2, [r7, #4]
  400382:	b2d2      	uxtb	r2, r2
  400384:	4313      	orrs	r3, r2
		| CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
  400386:	f443 527c 	orr.w	r2, r3, #16128	; 0x3f00
	vco_hz *= ul_mul;
	Assert(vco_hz >= PLL_OUTPUT_MIN_HZ);
	Assert(vco_hz <= PLL_OUTPUT_MAX_HZ);

	/* PMC hardware will automatically make it mul+1 */
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) | CKGR_PLLAR_DIVA(ul_div)  \
  40038a:	68fb      	ldr	r3, [r7, #12]
  40038c:	601a      	str	r2, [r3, #0]
		| CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
	}
}
  40038e:	3718      	adds	r7, #24
  400390:	46bd      	mov	sp, r7
  400392:	bd80      	pop	{r7, pc}
  400394:	00400291 	.word	0x00400291
  400398:	07ff0000 	.word	0x07ff0000

0040039c <pll_enable>:
		PMC->CKGR_UCKR = p_cfg->ctrl;
	}
}

static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
  40039c:	b580      	push	{r7, lr}
  40039e:	b082      	sub	sp, #8
  4003a0:	af00      	add	r7, sp, #0
  4003a2:	6078      	str	r0, [r7, #4]
  4003a4:	6039      	str	r1, [r7, #0]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  4003a6:	683b      	ldr	r3, [r7, #0]
  4003a8:	2b00      	cmp	r3, #0
  4003aa:	d108      	bne.n	4003be <pll_enable+0x22>
		pmc_disable_pllack(); // Always stop PLL first!
  4003ac:	4b08      	ldr	r3, [pc, #32]	; (4003d0 <pll_enable+0x34>)
  4003ae:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  4003b0:	4a08      	ldr	r2, [pc, #32]	; (4003d4 <pll_enable+0x38>)
  4003b2:	687b      	ldr	r3, [r7, #4]
  4003b4:	681b      	ldr	r3, [r3, #0]
  4003b6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  4003ba:	6293      	str	r3, [r2, #40]	; 0x28
  4003bc:	e005      	b.n	4003ca <pll_enable+0x2e>
	} else {
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
  4003be:	4a05      	ldr	r2, [pc, #20]	; (4003d4 <pll_enable+0x38>)
  4003c0:	687b      	ldr	r3, [r7, #4]
  4003c2:	681b      	ldr	r3, [r3, #0]
  4003c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  4003c8:	61d3      	str	r3, [r2, #28]
	}
}
  4003ca:	3708      	adds	r7, #8
  4003cc:	46bd      	mov	sp, r7
  4003ce:	bd80      	pop	{r7, pc}
  4003d0:	00401631 	.word	0x00401631
  4003d4:	400e0600 	.word	0x400e0600

004003d8 <pll_is_locked>:
		PMC->CKGR_UCKR &= ~CKGR_UCKR_UPLLEN;
	}
}

static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
  4003d8:	b580      	push	{r7, lr}
  4003da:	b082      	sub	sp, #8
  4003dc:	af00      	add	r7, sp, #0
  4003de:	6078      	str	r0, [r7, #4]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  4003e0:	687b      	ldr	r3, [r7, #4]
  4003e2:	2b00      	cmp	r3, #0
  4003e4:	d103      	bne.n	4003ee <pll_is_locked+0x16>
	return pmc_is_locked_pllack();
  4003e6:	4b05      	ldr	r3, [pc, #20]	; (4003fc <pll_is_locked+0x24>)
  4003e8:	4798      	blx	r3
  4003ea:	4603      	mov	r3, r0
  4003ec:	e002      	b.n	4003f4 <pll_is_locked+0x1c>
	} else {
		return pmc_is_locked_upll();
  4003ee:	4b04      	ldr	r3, [pc, #16]	; (400400 <pll_is_locked+0x28>)
  4003f0:	4798      	blx	r3
  4003f2:	4603      	mov	r3, r0
	}
}
  4003f4:	4618      	mov	r0, r3
  4003f6:	3708      	adds	r7, #8
  4003f8:	46bd      	mov	sp, r7
  4003fa:	bd80      	pop	{r7, pc}
  4003fc:	00401649 	.word	0x00401649
  400400:	00401665 	.word	0x00401665

00400404 <pll_enable_source>:

static inline void pll_enable_source(enum pll_source e_src)
{
  400404:	b580      	push	{r7, lr}
  400406:	b082      	sub	sp, #8
  400408:	af00      	add	r7, sp, #0
  40040a:	4603      	mov	r3, r0
  40040c:	71fb      	strb	r3, [r7, #7]
	switch (e_src) {
  40040e:	79fb      	ldrb	r3, [r7, #7]
  400410:	3b03      	subs	r3, #3
  400412:	2b04      	cmp	r3, #4
  400414:	d808      	bhi.n	400428 <pll_enable_source+0x24>
	case PLL_SRC_MAINCK_4M_RC:
	case PLL_SRC_MAINCK_8M_RC:
	case PLL_SRC_MAINCK_12M_RC:
	case PLL_SRC_MAINCK_XTAL:
	case PLL_SRC_MAINCK_BYPASS:
		osc_enable(e_src);
  400416:	79fb      	ldrb	r3, [r7, #7]
  400418:	4618      	mov	r0, r3
  40041a:	4b05      	ldr	r3, [pc, #20]	; (400430 <pll_enable_source+0x2c>)
  40041c:	4798      	blx	r3
		osc_wait_ready(e_src);
  40041e:	79fb      	ldrb	r3, [r7, #7]
  400420:	4618      	mov	r0, r3
  400422:	4b04      	ldr	r3, [pc, #16]	; (400434 <pll_enable_source+0x30>)
  400424:	4798      	blx	r3
		break;
  400426:	e000      	b.n	40042a <pll_enable_source+0x26>

	default:
		Assert(false);
		break;
  400428:	bf00      	nop
	}
}
  40042a:	3708      	adds	r7, #8
  40042c:	46bd      	mov	sp, r7
  40042e:	bd80      	pop	{r7, pc}
  400430:	0040019d 	.word	0x0040019d
  400434:	00400309 	.word	0x00400309

00400438 <pll_wait_for_lock>:
 *
 * \retval STATUS_OK The PLL is now locked.
 * \retval ERR_TIMEOUT Timed out waiting for PLL to become locked.
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
  400438:	b580      	push	{r7, lr}
  40043a:	b082      	sub	sp, #8
  40043c:	af00      	add	r7, sp, #0
  40043e:	6078      	str	r0, [r7, #4]
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  400440:	bf00      	nop
  400442:	6878      	ldr	r0, [r7, #4]
  400444:	4b04      	ldr	r3, [pc, #16]	; (400458 <pll_wait_for_lock+0x20>)
  400446:	4798      	blx	r3
  400448:	4603      	mov	r3, r0
  40044a:	2b00      	cmp	r3, #0
  40044c:	d0f9      	beq.n	400442 <pll_wait_for_lock+0xa>
		/* Do nothing */
	}

	return 0;
  40044e:	2300      	movs	r3, #0
}
  400450:	4618      	mov	r0, r3
  400452:	3708      	adds	r7, #8
  400454:	46bd      	mov	sp, r7
  400456:	bd80      	pop	{r7, pc}
  400458:	004003d9 	.word	0x004003d9

0040045c <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  40045c:	b580      	push	{r7, lr}
  40045e:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  400460:	2006      	movs	r0, #6
  400462:	4b05      	ldr	r3, [pc, #20]	; (400478 <sysclk_get_main_hz+0x1c>)
  400464:	4798      	blx	r3
  400466:	4602      	mov	r2, r0
  400468:	4613      	mov	r3, r2
  40046a:	009b      	lsls	r3, r3, #2
  40046c:	4413      	add	r3, r2
  40046e:	009a      	lsls	r2, r3, #2
  400470:	4413      	add	r3, r2
  400472:	089b      	lsrs	r3, r3, #2
#endif
	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  400474:	4618      	mov	r0, r3
  400476:	bd80      	pop	{r7, pc}
  400478:	00400291 	.word	0x00400291

0040047c <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
  40047c:	b580      	push	{r7, lr}
  40047e:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  400480:	4b02      	ldr	r3, [pc, #8]	; (40048c <sysclk_get_cpu_hz+0x10>)
  400482:	4798      	blx	r3
  400484:	4603      	mov	r3, r0
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  400486:	4618      	mov	r0, r3
  400488:	bd80      	pop	{r7, pc}
  40048a:	bf00      	nop
  40048c:	0040045d 	.word	0x0040045d

00400490 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  400490:	b590      	push	{r4, r7, lr}
  400492:	b083      	sub	sp, #12
  400494:	af00      	add	r7, sp, #0
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  400496:	4813      	ldr	r0, [pc, #76]	; (4004e4 <sysclk_init+0x54>)
  400498:	4b13      	ldr	r3, [pc, #76]	; (4004e8 <sysclk_init+0x58>)
  40049a:	4798      	blx	r3
		pmc_switch_mck_to_mainck(CONFIG_SYSCLK_PRES);
	}

#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
  40049c:	2006      	movs	r0, #6
  40049e:	4b13      	ldr	r3, [pc, #76]	; (4004ec <sysclk_init+0x5c>)
  4004a0:	4798      	blx	r3
		pll_config_defaults(&pllcfg, 0);
  4004a2:	1d3b      	adds	r3, r7, #4
  4004a4:	4618      	mov	r0, r3
  4004a6:	2106      	movs	r1, #6
  4004a8:	2204      	movs	r2, #4
  4004aa:	2319      	movs	r3, #25
  4004ac:	4c10      	ldr	r4, [pc, #64]	; (4004f0 <sysclk_init+0x60>)
  4004ae:	47a0      	blx	r4
		pll_enable(&pllcfg, 0);
  4004b0:	1d3b      	adds	r3, r7, #4
  4004b2:	4618      	mov	r0, r3
  4004b4:	2100      	movs	r1, #0
  4004b6:	4b0f      	ldr	r3, [pc, #60]	; (4004f4 <sysclk_init+0x64>)
  4004b8:	4798      	blx	r3
		pll_wait_for_lock(0);
  4004ba:	2000      	movs	r0, #0
  4004bc:	4b0e      	ldr	r3, [pc, #56]	; (4004f8 <sysclk_init+0x68>)
  4004be:	4798      	blx	r3
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  4004c0:	2001      	movs	r0, #1
  4004c2:	4b0e      	ldr	r3, [pc, #56]	; (4004fc <sysclk_init+0x6c>)
  4004c4:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  4004c6:	2000      	movs	r0, #0
  4004c8:	4b0d      	ldr	r3, [pc, #52]	; (400500 <sysclk_init+0x70>)
  4004ca:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  4004cc:	4b0d      	ldr	r3, [pc, #52]	; (400504 <sysclk_init+0x74>)
  4004ce:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  4004d0:	4b0d      	ldr	r3, [pc, #52]	; (400508 <sysclk_init+0x78>)
  4004d2:	4798      	blx	r3
  4004d4:	4603      	mov	r3, r0
  4004d6:	4618      	mov	r0, r3
  4004d8:	4b03      	ldr	r3, [pc, #12]	; (4004e8 <sysclk_init+0x58>)
  4004da:	4798      	blx	r3

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
  4004dc:	370c      	adds	r7, #12
  4004de:	46bd      	mov	sp, r7
  4004e0:	bd90      	pop	{r4, r7, pc}
  4004e2:	bf00      	nop
  4004e4:	11e1a300 	.word	0x11e1a300
  4004e8:	00402509 	.word	0x00402509
  4004ec:	00400405 	.word	0x00400405
  4004f0:	00400335 	.word	0x00400335
  4004f4:	0040039d 	.word	0x0040039d
  4004f8:	00400439 	.word	0x00400439
  4004fc:	004013c5 	.word	0x004013c5
  400500:	0040143d 	.word	0x0040143d
  400504:	004023a1 	.word	0x004023a1
  400508:	0040047d 	.word	0x0040047d

0040050c <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  40050c:	b580      	push	{r7, lr}
  40050e:	b086      	sub	sp, #24
  400510:	af00      	add	r7, sp, #0
  400512:	60f8      	str	r0, [r7, #12]
  400514:	60b9      	str	r1, [r7, #8]
  400516:	607a      	str	r2, [r7, #4]
	int nChars = 0;
  400518:	2300      	movs	r3, #0
  40051a:	617b      	str	r3, [r7, #20]

	if (file != 0) {
  40051c:	68fb      	ldr	r3, [r7, #12]
  40051e:	2b00      	cmp	r3, #0
  400520:	d002      	beq.n	400528 <_read+0x1c>
		return -1;
  400522:	f04f 33ff 	mov.w	r3, #4294967295
  400526:	e014      	b.n	400552 <_read+0x46>
	}

	for (; len > 0; --len) {
  400528:	e00f      	b.n	40054a <_read+0x3e>
		ptr_get(stdio_base, ptr);
  40052a:	4b0c      	ldr	r3, [pc, #48]	; (40055c <_read+0x50>)
  40052c:	681b      	ldr	r3, [r3, #0]
  40052e:	4a0c      	ldr	r2, [pc, #48]	; (400560 <_read+0x54>)
  400530:	6812      	ldr	r2, [r2, #0]
  400532:	4610      	mov	r0, r2
  400534:	68b9      	ldr	r1, [r7, #8]
  400536:	4798      	blx	r3
		ptr++;
  400538:	68bb      	ldr	r3, [r7, #8]
  40053a:	3301      	adds	r3, #1
  40053c:	60bb      	str	r3, [r7, #8]
		nChars++;
  40053e:	697b      	ldr	r3, [r7, #20]
  400540:	3301      	adds	r3, #1
  400542:	617b      	str	r3, [r7, #20]

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
  400544:	687b      	ldr	r3, [r7, #4]
  400546:	3b01      	subs	r3, #1
  400548:	607b      	str	r3, [r7, #4]
  40054a:	687b      	ldr	r3, [r7, #4]
  40054c:	2b00      	cmp	r3, #0
  40054e:	dcec      	bgt.n	40052a <_read+0x1e>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
  400550:	697b      	ldr	r3, [r7, #20]
}
  400552:	4618      	mov	r0, r3
  400554:	3718      	adds	r7, #24
  400556:	46bd      	mov	sp, r7
  400558:	bd80      	pop	{r7, pc}
  40055a:	bf00      	nop
  40055c:	20400a04 	.word	0x20400a04
  400560:	20400a0c 	.word	0x20400a0c

00400564 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
  400564:	b580      	push	{r7, lr}
  400566:	b086      	sub	sp, #24
  400568:	af00      	add	r7, sp, #0
  40056a:	60f8      	str	r0, [r7, #12]
  40056c:	60b9      	str	r1, [r7, #8]
  40056e:	607a      	str	r2, [r7, #4]
	int nChars = 0;
  400570:	2300      	movs	r3, #0
  400572:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
  400574:	68fb      	ldr	r3, [r7, #12]
  400576:	2b01      	cmp	r3, #1
  400578:	d008      	beq.n	40058c <_write+0x28>
  40057a:	68fb      	ldr	r3, [r7, #12]
  40057c:	2b02      	cmp	r3, #2
  40057e:	d005      	beq.n	40058c <_write+0x28>
  400580:	68fb      	ldr	r3, [r7, #12]
  400582:	2b03      	cmp	r3, #3
  400584:	d002      	beq.n	40058c <_write+0x28>
		return -1;
  400586:	f04f 33ff 	mov.w	r3, #4294967295
  40058a:	e01a      	b.n	4005c2 <_write+0x5e>
	}

	for (; len != 0; --len) {
  40058c:	e015      	b.n	4005ba <_write+0x56>
		if (ptr_put(stdio_base, *ptr++) < 0) {
  40058e:	4b0f      	ldr	r3, [pc, #60]	; (4005cc <_write+0x68>)
  400590:	681a      	ldr	r2, [r3, #0]
  400592:	4b0f      	ldr	r3, [pc, #60]	; (4005d0 <_write+0x6c>)
  400594:	6818      	ldr	r0, [r3, #0]
  400596:	68bb      	ldr	r3, [r7, #8]
  400598:	1c59      	adds	r1, r3, #1
  40059a:	60b9      	str	r1, [r7, #8]
  40059c:	781b      	ldrb	r3, [r3, #0]
  40059e:	4619      	mov	r1, r3
  4005a0:	4790      	blx	r2
  4005a2:	4603      	mov	r3, r0
  4005a4:	2b00      	cmp	r3, #0
  4005a6:	da02      	bge.n	4005ae <_write+0x4a>
			return -1;
  4005a8:	f04f 33ff 	mov.w	r3, #4294967295
  4005ac:	e009      	b.n	4005c2 <_write+0x5e>
		}
		++nChars;
  4005ae:	697b      	ldr	r3, [r7, #20]
  4005b0:	3301      	adds	r3, #1
  4005b2:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
  4005b4:	687b      	ldr	r3, [r7, #4]
  4005b6:	3b01      	subs	r3, #1
  4005b8:	607b      	str	r3, [r7, #4]
  4005ba:	687b      	ldr	r3, [r7, #4]
  4005bc:	2b00      	cmp	r3, #0
  4005be:	d1e6      	bne.n	40058e <_write+0x2a>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
	}
	return nChars;
  4005c0:	697b      	ldr	r3, [r7, #20]
}
  4005c2:	4618      	mov	r0, r3
  4005c4:	3718      	adds	r7, #24
  4005c6:	46bd      	mov	sp, r7
  4005c8:	bd80      	pop	{r7, pc}
  4005ca:	bf00      	nop
  4005cc:	20400a08 	.word	0x20400a08
  4005d0:	20400a0c 	.word	0x20400a0c

004005d4 <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
  4005d4:	b580      	push	{r7, lr}
  4005d6:	b082      	sub	sp, #8
  4005d8:	af00      	add	r7, sp, #0
  4005da:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  4005dc:	6878      	ldr	r0, [r7, #4]
  4005de:	4b02      	ldr	r3, [pc, #8]	; (4005e8 <sysclk_enable_peripheral_clock+0x14>)
  4005e0:	4798      	blx	r3
}
  4005e2:	3708      	adds	r7, #8
  4005e4:	46bd      	mov	sp, r7
  4005e6:	bd80      	pop	{r7, pc}
  4005e8:	00401681 	.word	0x00401681

004005ec <ioport_init>:
 *
 * This function must be called before using any other functions in the IOPORT
 * service.
 */
static inline void ioport_init(void)
{
  4005ec:	b580      	push	{r7, lr}
  4005ee:	af00      	add	r7, sp, #0
}

__always_inline static void arch_ioport_init(void)
{
#ifdef ID_PIOA
	sysclk_enable_peripheral_clock(ID_PIOA);
  4005f0:	200a      	movs	r0, #10
  4005f2:	4b07      	ldr	r3, [pc, #28]	; (400610 <ioport_init+0x24>)
  4005f4:	4798      	blx	r3
#endif
#ifdef ID_PIOB
	sysclk_enable_peripheral_clock(ID_PIOB);
  4005f6:	200b      	movs	r0, #11
  4005f8:	4b05      	ldr	r3, [pc, #20]	; (400610 <ioport_init+0x24>)
  4005fa:	4798      	blx	r3
#endif
#ifdef ID_PIOC
	sysclk_enable_peripheral_clock(ID_PIOC);
  4005fc:	200c      	movs	r0, #12
  4005fe:	4b04      	ldr	r3, [pc, #16]	; (400610 <ioport_init+0x24>)
  400600:	4798      	blx	r3
#endif
#ifdef ID_PIOD
	sysclk_enable_peripheral_clock(ID_PIOD);
  400602:	2010      	movs	r0, #16
  400604:	4b02      	ldr	r3, [pc, #8]	; (400610 <ioport_init+0x24>)
  400606:	4798      	blx	r3
#endif
#ifdef ID_PIOE
	sysclk_enable_peripheral_clock(ID_PIOE);
  400608:	2011      	movs	r0, #17
  40060a:	4b01      	ldr	r3, [pc, #4]	; (400610 <ioport_init+0x24>)
  40060c:	4798      	blx	r3
	arch_ioport_init();
}
  40060e:	bd80      	pop	{r7, pc}
  400610:	004005d5 	.word	0x004005d5

00400614 <ioport_disable_pin>:
 *        IOPORT_CREATE_PIN().
 *
 * \param pin IOPORT pin to disable
 */
static inline void ioport_disable_pin(ioport_pin_t pin)
{
  400614:	b480      	push	{r7}
  400616:	b089      	sub	sp, #36	; 0x24
  400618:	af00      	add	r7, sp, #0
  40061a:	6078      	str	r0, [r7, #4]
  40061c:	687b      	ldr	r3, [r7, #4]
  40061e:	61fb      	str	r3, [r7, #28]
  400620:	69fb      	ldr	r3, [r7, #28]
  400622:	61bb      	str	r3, [r7, #24]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  400624:	69bb      	ldr	r3, [r7, #24]
  400626:	095a      	lsrs	r2, r3, #5
  400628:	69fb      	ldr	r3, [r7, #28]
  40062a:	617b      	str	r3, [r7, #20]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  40062c:	697b      	ldr	r3, [r7, #20]
  40062e:	f003 031f 	and.w	r3, r3, #31
  400632:	2101      	movs	r1, #1
  400634:	fa01 f303 	lsl.w	r3, r1, r3
  400638:	613a      	str	r2, [r7, #16]
  40063a:	60fb      	str	r3, [r7, #12]
  40063c:	693b      	ldr	r3, [r7, #16]
  40063e:	60bb      	str	r3, [r7, #8]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  400640:	68ba      	ldr	r2, [r7, #8]
  400642:	4b05      	ldr	r3, [pc, #20]	; (400658 <ioport_disable_pin+0x44>)
  400644:	4413      	add	r3, r2
  400646:	025b      	lsls	r3, r3, #9
  400648:	461a      	mov	r2, r3
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  40064a:	68fb      	ldr	r3, [r7, #12]
  40064c:	6053      	str	r3, [r2, #4]
	arch_ioport_disable_pin(pin);
}
  40064e:	3724      	adds	r7, #36	; 0x24
  400650:	46bd      	mov	sp, r7
  400652:	f85d 7b04 	ldr.w	r7, [sp], #4
  400656:	4770      	bx	lr
  400658:	00200707 	.word	0x00200707

0040065c <ioport_disable_port>:
 * \param port IOPORT port to disable
 * \param mask Pin mask of pins to disable
 */
static inline void ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
  40065c:	b480      	push	{r7}
  40065e:	b087      	sub	sp, #28
  400660:	af00      	add	r7, sp, #0
  400662:	6078      	str	r0, [r7, #4]
  400664:	6039      	str	r1, [r7, #0]
  400666:	687b      	ldr	r3, [r7, #4]
  400668:	617b      	str	r3, [r7, #20]
  40066a:	683b      	ldr	r3, [r7, #0]
  40066c:	613b      	str	r3, [r7, #16]
  40066e:	697b      	ldr	r3, [r7, #20]
  400670:	60fb      	str	r3, [r7, #12]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  400672:	68fa      	ldr	r2, [r7, #12]
  400674:	4b05      	ldr	r3, [pc, #20]	; (40068c <ioport_disable_port+0x30>)
  400676:	4413      	add	r3, r2
  400678:	025b      	lsls	r3, r3, #9
  40067a:	461a      	mov	r2, r3
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  40067c:	693b      	ldr	r3, [r7, #16]
  40067e:	6053      	str	r3, [r2, #4]
	arch_ioport_disable_port(port, mask);
}
  400680:	371c      	adds	r7, #28
  400682:	46bd      	mov	sp, r7
  400684:	f85d 7b04 	ldr.w	r7, [sp], #4
  400688:	4770      	bx	lr
  40068a:	bf00      	nop
  40068c:	00200707 	.word	0x00200707

00400690 <ioport_set_port_mode>:
 * \param mode Mode masks to configure for the specified pins (\ref
 * ioport_modes)
 */
static inline void ioport_set_port_mode(ioport_port_t port,
		ioport_port_mask_t mask, ioport_mode_t mode)
{
  400690:	b480      	push	{r7}
  400692:	b08b      	sub	sp, #44	; 0x2c
  400694:	af00      	add	r7, sp, #0
  400696:	60f8      	str	r0, [r7, #12]
  400698:	60b9      	str	r1, [r7, #8]
  40069a:	607a      	str	r2, [r7, #4]
  40069c:	68fb      	ldr	r3, [r7, #12]
  40069e:	627b      	str	r3, [r7, #36]	; 0x24
  4006a0:	68bb      	ldr	r3, [r7, #8]
  4006a2:	623b      	str	r3, [r7, #32]
  4006a4:	687b      	ldr	r3, [r7, #4]
  4006a6:	61fb      	str	r3, [r7, #28]
  4006a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4006aa:	61bb      	str	r3, [r7, #24]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  4006ac:	69ba      	ldr	r2, [r7, #24]
  4006ae:	4b37      	ldr	r3, [pc, #220]	; (40078c <ioport_set_port_mode+0xfc>)
  4006b0:	4413      	add	r3, r2
  4006b2:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_port_mode(ioport_port_t port,
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);
  4006b4:	617b      	str	r3, [r7, #20]

	if (mode & IOPORT_MODE_PULLUP) {
  4006b6:	69fb      	ldr	r3, [r7, #28]
  4006b8:	f003 0308 	and.w	r3, r3, #8
  4006bc:	2b00      	cmp	r3, #0
  4006be:	d003      	beq.n	4006c8 <ioport_set_port_mode+0x38>
		base->PIO_PUER = mask;
  4006c0:	697b      	ldr	r3, [r7, #20]
  4006c2:	6a3a      	ldr	r2, [r7, #32]
  4006c4:	665a      	str	r2, [r3, #100]	; 0x64
  4006c6:	e002      	b.n	4006ce <ioport_set_port_mode+0x3e>
	} else {
		base->PIO_PUDR = mask;
  4006c8:	697b      	ldr	r3, [r7, #20]
  4006ca:	6a3a      	ldr	r2, [r7, #32]
  4006cc:	661a      	str	r2, [r3, #96]	; 0x60
	}

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
  4006ce:	69fb      	ldr	r3, [r7, #28]
  4006d0:	f003 0310 	and.w	r3, r3, #16
  4006d4:	2b00      	cmp	r3, #0
  4006d6:	d004      	beq.n	4006e2 <ioport_set_port_mode+0x52>
		base->PIO_PPDER = mask;
  4006d8:	697b      	ldr	r3, [r7, #20]
  4006da:	6a3a      	ldr	r2, [r7, #32]
  4006dc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  4006e0:	e003      	b.n	4006ea <ioport_set_port_mode+0x5a>
	} else {
		base->PIO_PPDDR = mask;
  4006e2:	697b      	ldr	r3, [r7, #20]
  4006e4:	6a3a      	ldr	r2, [r7, #32]
  4006e6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	}
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
  4006ea:	69fb      	ldr	r3, [r7, #28]
  4006ec:	f003 0320 	and.w	r3, r3, #32
  4006f0:	2b00      	cmp	r3, #0
  4006f2:	d003      	beq.n	4006fc <ioport_set_port_mode+0x6c>
		base->PIO_MDER = mask;
  4006f4:	697b      	ldr	r3, [r7, #20]
  4006f6:	6a3a      	ldr	r2, [r7, #32]
  4006f8:	651a      	str	r2, [r3, #80]	; 0x50
  4006fa:	e002      	b.n	400702 <ioport_set_port_mode+0x72>
	} else {
		base->PIO_MDDR = mask;
  4006fc:	697b      	ldr	r3, [r7, #20]
  4006fe:	6a3a      	ldr	r2, [r7, #32]
  400700:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
  400702:	69fb      	ldr	r3, [r7, #28]
  400704:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
  400708:	2b00      	cmp	r3, #0
  40070a:	d003      	beq.n	400714 <ioport_set_port_mode+0x84>
		base->PIO_IFER = mask;
  40070c:	697b      	ldr	r3, [r7, #20]
  40070e:	6a3a      	ldr	r2, [r7, #32]
  400710:	621a      	str	r2, [r3, #32]
  400712:	e002      	b.n	40071a <ioport_set_port_mode+0x8a>
	} else {
		base->PIO_IFDR = mask;
  400714:	697b      	ldr	r3, [r7, #20]
  400716:	6a3a      	ldr	r2, [r7, #32]
  400718:	625a      	str	r2, [r3, #36]	; 0x24
	}

	if (mode & IOPORT_MODE_DEBOUNCE) {
  40071a:	69fb      	ldr	r3, [r7, #28]
  40071c:	f003 0380 	and.w	r3, r3, #128	; 0x80
  400720:	2b00      	cmp	r3, #0
  400722:	d004      	beq.n	40072e <ioport_set_port_mode+0x9e>
#if SAM3U || SAM3XA
		base->PIO_DIFSR = mask;
#else
		base->PIO_IFSCER = mask;
  400724:	697b      	ldr	r3, [r7, #20]
  400726:	6a3a      	ldr	r2, [r7, #32]
  400728:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  40072c:	e003      	b.n	400736 <ioport_set_port_mode+0xa6>
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  40072e:	697b      	ldr	r3, [r7, #20]
  400730:	6a3a      	ldr	r2, [r7, #32]
  400732:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABSR |= mask;
	} else {
		base->PIO_ABSR &= ~mask;
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
  400736:	69fb      	ldr	r3, [r7, #28]
  400738:	f003 0301 	and.w	r3, r3, #1
  40073c:	2b00      	cmp	r3, #0
  40073e:	d006      	beq.n	40074e <ioport_set_port_mode+0xbe>
		base->PIO_ABCDSR[0] |= mask;
  400740:	697b      	ldr	r3, [r7, #20]
  400742:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400744:	6a3b      	ldr	r3, [r7, #32]
  400746:	431a      	orrs	r2, r3
  400748:	697b      	ldr	r3, [r7, #20]
  40074a:	671a      	str	r2, [r3, #112]	; 0x70
  40074c:	e006      	b.n	40075c <ioport_set_port_mode+0xcc>
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  40074e:	697b      	ldr	r3, [r7, #20]
  400750:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400752:	6a3b      	ldr	r3, [r7, #32]
  400754:	43db      	mvns	r3, r3
  400756:	401a      	ands	r2, r3
  400758:	697b      	ldr	r3, [r7, #20]
  40075a:	671a      	str	r2, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
  40075c:	69fb      	ldr	r3, [r7, #28]
  40075e:	f003 0302 	and.w	r3, r3, #2
  400762:	2b00      	cmp	r3, #0
  400764:	d006      	beq.n	400774 <ioport_set_port_mode+0xe4>
		base->PIO_ABCDSR[1] |= mask;
  400766:	697b      	ldr	r3, [r7, #20]
  400768:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  40076a:	6a3b      	ldr	r3, [r7, #32]
  40076c:	431a      	orrs	r2, r3
  40076e:	697b      	ldr	r3, [r7, #20]
  400770:	675a      	str	r2, [r3, #116]	; 0x74
  400772:	e006      	b.n	400782 <ioport_set_port_mode+0xf2>
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  400774:	697b      	ldr	r3, [r7, #20]
  400776:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400778:	6a3b      	ldr	r3, [r7, #32]
  40077a:	43db      	mvns	r3, r3
  40077c:	401a      	ands	r2, r3
  40077e:	697b      	ldr	r3, [r7, #20]
  400780:	675a      	str	r2, [r3, #116]	; 0x74
	arch_ioport_set_port_mode(port, mask, mode);
}
  400782:	372c      	adds	r7, #44	; 0x2c
  400784:	46bd      	mov	sp, r7
  400786:	f85d 7b04 	ldr.w	r7, [sp], #4
  40078a:	4770      	bx	lr
  40078c:	00200707 	.word	0x00200707

00400790 <ioport_set_pin_mode>:
 *
 * \param pin IOPORT pin to configure
 * \param mode Mode masks to configure for the specified pin (\ref ioport_modes)
 */
static inline void ioport_set_pin_mode(ioport_pin_t pin, ioport_mode_t mode)
{
  400790:	b480      	push	{r7}
  400792:	b08d      	sub	sp, #52	; 0x34
  400794:	af00      	add	r7, sp, #0
  400796:	6078      	str	r0, [r7, #4]
  400798:	6039      	str	r1, [r7, #0]
  40079a:	687b      	ldr	r3, [r7, #4]
  40079c:	62fb      	str	r3, [r7, #44]	; 0x2c
  40079e:	683b      	ldr	r3, [r7, #0]
  4007a0:	62bb      	str	r3, [r7, #40]	; 0x28
  4007a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4007a4:	627b      	str	r3, [r7, #36]	; 0x24
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  4007a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4007a8:	095a      	lsrs	r2, r3, #5
  4007aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4007ac:	623b      	str	r3, [r7, #32]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  4007ae:	6a3b      	ldr	r3, [r7, #32]
  4007b0:	f003 031f 	and.w	r3, r3, #31
  4007b4:	2101      	movs	r1, #1
  4007b6:	fa01 f303 	lsl.w	r3, r1, r3
  4007ba:	61fa      	str	r2, [r7, #28]
  4007bc:	61bb      	str	r3, [r7, #24]
  4007be:	6abb      	ldr	r3, [r7, #40]	; 0x28
  4007c0:	617b      	str	r3, [r7, #20]
  4007c2:	69fb      	ldr	r3, [r7, #28]
  4007c4:	613b      	str	r3, [r7, #16]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  4007c6:	693a      	ldr	r2, [r7, #16]
  4007c8:	4b37      	ldr	r3, [pc, #220]	; (4008a8 <ioport_set_pin_mode+0x118>)
  4007ca:	4413      	add	r3, r2
  4007cc:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_port_mode(ioport_port_t port,
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);
  4007ce:	60fb      	str	r3, [r7, #12]

	if (mode & IOPORT_MODE_PULLUP) {
  4007d0:	697b      	ldr	r3, [r7, #20]
  4007d2:	f003 0308 	and.w	r3, r3, #8
  4007d6:	2b00      	cmp	r3, #0
  4007d8:	d003      	beq.n	4007e2 <ioport_set_pin_mode+0x52>
		base->PIO_PUER = mask;
  4007da:	68fb      	ldr	r3, [r7, #12]
  4007dc:	69ba      	ldr	r2, [r7, #24]
  4007de:	665a      	str	r2, [r3, #100]	; 0x64
  4007e0:	e002      	b.n	4007e8 <ioport_set_pin_mode+0x58>
	} else {
		base->PIO_PUDR = mask;
  4007e2:	68fb      	ldr	r3, [r7, #12]
  4007e4:	69ba      	ldr	r2, [r7, #24]
  4007e6:	661a      	str	r2, [r3, #96]	; 0x60
	}

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
  4007e8:	697b      	ldr	r3, [r7, #20]
  4007ea:	f003 0310 	and.w	r3, r3, #16
  4007ee:	2b00      	cmp	r3, #0
  4007f0:	d004      	beq.n	4007fc <ioport_set_pin_mode+0x6c>
		base->PIO_PPDER = mask;
  4007f2:	68fb      	ldr	r3, [r7, #12]
  4007f4:	69ba      	ldr	r2, [r7, #24]
  4007f6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  4007fa:	e003      	b.n	400804 <ioport_set_pin_mode+0x74>
	} else {
		base->PIO_PPDDR = mask;
  4007fc:	68fb      	ldr	r3, [r7, #12]
  4007fe:	69ba      	ldr	r2, [r7, #24]
  400800:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	}
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
  400804:	697b      	ldr	r3, [r7, #20]
  400806:	f003 0320 	and.w	r3, r3, #32
  40080a:	2b00      	cmp	r3, #0
  40080c:	d003      	beq.n	400816 <ioport_set_pin_mode+0x86>
		base->PIO_MDER = mask;
  40080e:	68fb      	ldr	r3, [r7, #12]
  400810:	69ba      	ldr	r2, [r7, #24]
  400812:	651a      	str	r2, [r3, #80]	; 0x50
  400814:	e002      	b.n	40081c <ioport_set_pin_mode+0x8c>
	} else {
		base->PIO_MDDR = mask;
  400816:	68fb      	ldr	r3, [r7, #12]
  400818:	69ba      	ldr	r2, [r7, #24]
  40081a:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
  40081c:	697b      	ldr	r3, [r7, #20]
  40081e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
  400822:	2b00      	cmp	r3, #0
  400824:	d003      	beq.n	40082e <ioport_set_pin_mode+0x9e>
		base->PIO_IFER = mask;
  400826:	68fb      	ldr	r3, [r7, #12]
  400828:	69ba      	ldr	r2, [r7, #24]
  40082a:	621a      	str	r2, [r3, #32]
  40082c:	e002      	b.n	400834 <ioport_set_pin_mode+0xa4>
	} else {
		base->PIO_IFDR = mask;
  40082e:	68fb      	ldr	r3, [r7, #12]
  400830:	69ba      	ldr	r2, [r7, #24]
  400832:	625a      	str	r2, [r3, #36]	; 0x24
	}

	if (mode & IOPORT_MODE_DEBOUNCE) {
  400834:	697b      	ldr	r3, [r7, #20]
  400836:	f003 0380 	and.w	r3, r3, #128	; 0x80
  40083a:	2b00      	cmp	r3, #0
  40083c:	d004      	beq.n	400848 <ioport_set_pin_mode+0xb8>
#if SAM3U || SAM3XA
		base->PIO_DIFSR = mask;
#else
		base->PIO_IFSCER = mask;
  40083e:	68fb      	ldr	r3, [r7, #12]
  400840:	69ba      	ldr	r2, [r7, #24]
  400842:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  400846:	e003      	b.n	400850 <ioport_set_pin_mode+0xc0>
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  400848:	68fb      	ldr	r3, [r7, #12]
  40084a:	69ba      	ldr	r2, [r7, #24]
  40084c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABSR |= mask;
	} else {
		base->PIO_ABSR &= ~mask;
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
  400850:	697b      	ldr	r3, [r7, #20]
  400852:	f003 0301 	and.w	r3, r3, #1
  400856:	2b00      	cmp	r3, #0
  400858:	d006      	beq.n	400868 <ioport_set_pin_mode+0xd8>
		base->PIO_ABCDSR[0] |= mask;
  40085a:	68fb      	ldr	r3, [r7, #12]
  40085c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  40085e:	69bb      	ldr	r3, [r7, #24]
  400860:	431a      	orrs	r2, r3
  400862:	68fb      	ldr	r3, [r7, #12]
  400864:	671a      	str	r2, [r3, #112]	; 0x70
  400866:	e006      	b.n	400876 <ioport_set_pin_mode+0xe6>
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  400868:	68fb      	ldr	r3, [r7, #12]
  40086a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  40086c:	69bb      	ldr	r3, [r7, #24]
  40086e:	43db      	mvns	r3, r3
  400870:	401a      	ands	r2, r3
  400872:	68fb      	ldr	r3, [r7, #12]
  400874:	671a      	str	r2, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
  400876:	697b      	ldr	r3, [r7, #20]
  400878:	f003 0302 	and.w	r3, r3, #2
  40087c:	2b00      	cmp	r3, #0
  40087e:	d006      	beq.n	40088e <ioport_set_pin_mode+0xfe>
		base->PIO_ABCDSR[1] |= mask;
  400880:	68fb      	ldr	r3, [r7, #12]
  400882:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400884:	69bb      	ldr	r3, [r7, #24]
  400886:	431a      	orrs	r2, r3
  400888:	68fb      	ldr	r3, [r7, #12]
  40088a:	675a      	str	r2, [r3, #116]	; 0x74
  40088c:	e006      	b.n	40089c <ioport_set_pin_mode+0x10c>
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  40088e:	68fb      	ldr	r3, [r7, #12]
  400890:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400892:	69bb      	ldr	r3, [r7, #24]
  400894:	43db      	mvns	r3, r3
  400896:	401a      	ands	r2, r3
  400898:	68fb      	ldr	r3, [r7, #12]
  40089a:	675a      	str	r2, [r3, #116]	; 0x74
	arch_ioport_set_pin_mode(pin, mode);
}
  40089c:	3734      	adds	r7, #52	; 0x34
  40089e:	46bd      	mov	sp, r7
  4008a0:	f85d 7b04 	ldr.w	r7, [sp], #4
  4008a4:	4770      	bx	lr
  4008a6:	bf00      	nop
  4008a8:	00200707 	.word	0x00200707

004008ac <ioport_set_pin_dir>:
 * \param pin IOPORT pin to configure
 * \param dir Direction to set for the specified pin (\ref ioport_direction)
 */
static inline void ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
  4008ac:	b480      	push	{r7}
  4008ae:	b08d      	sub	sp, #52	; 0x34
  4008b0:	af00      	add	r7, sp, #0
  4008b2:	6078      	str	r0, [r7, #4]
  4008b4:	460b      	mov	r3, r1
  4008b6:	70fb      	strb	r3, [r7, #3]
  4008b8:	687b      	ldr	r3, [r7, #4]
  4008ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  4008bc:	78fb      	ldrb	r3, [r7, #3]
  4008be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  4008c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4008c4:	627b      	str	r3, [r7, #36]	; 0x24
  4008c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4008c8:	623b      	str	r3, [r7, #32]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  4008ca:	6a3b      	ldr	r3, [r7, #32]
  4008cc:	095b      	lsrs	r3, r3, #5
  4008ce:	61fb      	str	r3, [r7, #28]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  4008d0:	69fa      	ldr	r2, [r7, #28]
  4008d2:	4b17      	ldr	r3, [pc, #92]	; (400930 <ioport_set_pin_dir+0x84>)
  4008d4:	4413      	add	r3, r2
  4008d6:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);
  4008d8:	61bb      	str	r3, [r7, #24]

	if (dir == IOPORT_DIR_OUTPUT) {
  4008da:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  4008de:	2b01      	cmp	r3, #1
  4008e0:	d109      	bne.n	4008f6 <ioport_set_pin_dir+0x4a>
  4008e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4008e4:	617b      	str	r3, [r7, #20]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  4008e6:	697b      	ldr	r3, [r7, #20]
  4008e8:	f003 031f 	and.w	r3, r3, #31
  4008ec:	2201      	movs	r2, #1
  4008ee:	409a      	lsls	r2, r3
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4008f0:	69bb      	ldr	r3, [r7, #24]
  4008f2:	611a      	str	r2, [r3, #16]
  4008f4:	e00c      	b.n	400910 <ioport_set_pin_dir+0x64>
	} else if (dir == IOPORT_DIR_INPUT) {
  4008f6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  4008fa:	2b00      	cmp	r3, #0
  4008fc:	d108      	bne.n	400910 <ioport_set_pin_dir+0x64>
  4008fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  400900:	613b      	str	r3, [r7, #16]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  400902:	693b      	ldr	r3, [r7, #16]
  400904:	f003 031f 	and.w	r3, r3, #31
  400908:	2201      	movs	r2, #1
  40090a:	409a      	lsls	r2, r3
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40090c:	69bb      	ldr	r3, [r7, #24]
  40090e:	615a      	str	r2, [r3, #20]
  400910:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  400912:	60fb      	str	r3, [r7, #12]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  400914:	68fb      	ldr	r3, [r7, #12]
  400916:	f003 031f 	and.w	r3, r3, #31
  40091a:	2201      	movs	r2, #1
  40091c:	409a      	lsls	r2, r3
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40091e:	69bb      	ldr	r3, [r7, #24]
  400920:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	arch_ioport_set_pin_dir(pin, dir);
}
  400924:	3734      	adds	r7, #52	; 0x34
  400926:	46bd      	mov	sp, r7
  400928:	f85d 7b04 	ldr.w	r7, [sp], #4
  40092c:	4770      	bx	lr
  40092e:	bf00      	nop
  400930:	00200707 	.word	0x00200707

00400934 <ioport_set_pin_level>:
 *
 * \param pin IOPORT pin to configure
 * \param level Logical value of the pin
 */
static inline void ioport_set_pin_level(ioport_pin_t pin, bool level)
{
  400934:	b480      	push	{r7}
  400936:	b08b      	sub	sp, #44	; 0x2c
  400938:	af00      	add	r7, sp, #0
  40093a:	6078      	str	r0, [r7, #4]
  40093c:	460b      	mov	r3, r1
  40093e:	70fb      	strb	r3, [r7, #3]
  400940:	687b      	ldr	r3, [r7, #4]
  400942:	627b      	str	r3, [r7, #36]	; 0x24
  400944:	78fb      	ldrb	r3, [r7, #3]
  400946:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  40094a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40094c:	61fb      	str	r3, [r7, #28]
  40094e:	69fb      	ldr	r3, [r7, #28]
  400950:	61bb      	str	r3, [r7, #24]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  400952:	69bb      	ldr	r3, [r7, #24]
  400954:	095b      	lsrs	r3, r3, #5
  400956:	617b      	str	r3, [r7, #20]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  400958:	697a      	ldr	r2, [r7, #20]
  40095a:	4b10      	ldr	r3, [pc, #64]	; (40099c <ioport_set_pin_level+0x68>)
  40095c:	4413      	add	r3, r2
  40095e:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);
  400960:	613b      	str	r3, [r7, #16]

	if (level) {
  400962:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
  400966:	2b00      	cmp	r3, #0
  400968:	d009      	beq.n	40097e <ioport_set_pin_level+0x4a>
  40096a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40096c:	60fb      	str	r3, [r7, #12]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  40096e:	68fb      	ldr	r3, [r7, #12]
  400970:	f003 031f 	and.w	r3, r3, #31
  400974:	2201      	movs	r2, #1
  400976:	409a      	lsls	r2, r3
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400978:	693b      	ldr	r3, [r7, #16]
  40097a:	631a      	str	r2, [r3, #48]	; 0x30
  40097c:	e008      	b.n	400990 <ioport_set_pin_level+0x5c>
  40097e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  400980:	60bb      	str	r3, [r7, #8]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  400982:	68bb      	ldr	r3, [r7, #8]
  400984:	f003 031f 	and.w	r3, r3, #31
  400988:	2201      	movs	r2, #1
  40098a:	409a      	lsls	r2, r3
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  40098c:	693b      	ldr	r3, [r7, #16]
  40098e:	635a      	str	r2, [r3, #52]	; 0x34
	arch_ioport_set_pin_level(pin, level);
}
  400990:	372c      	adds	r7, #44	; 0x2c
  400992:	46bd      	mov	sp, r7
  400994:	f85d 7b04 	ldr.w	r7, [sp], #4
  400998:	4770      	bx	lr
  40099a:	bf00      	nop
  40099c:	00200707 	.word	0x00200707

004009a0 <ioport_set_pin_sense_mode>:
 * \param pin IOPORT pin to configure
 * \param pin_sense Edge to sense for the pin (\ref ioport_sense)
 */
static inline void ioport_set_pin_sense_mode(ioport_pin_t pin,
		enum ioport_sense pin_sense)
{
  4009a0:	b480      	push	{r7}
  4009a2:	b08d      	sub	sp, #52	; 0x34
  4009a4:	af00      	add	r7, sp, #0
  4009a6:	6078      	str	r0, [r7, #4]
  4009a8:	460b      	mov	r3, r1
  4009aa:	70fb      	strb	r3, [r7, #3]
  4009ac:	687b      	ldr	r3, [r7, #4]
  4009ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  4009b0:	78fb      	ldrb	r3, [r7, #3]
  4009b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  4009b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4009b8:	627b      	str	r3, [r7, #36]	; 0x24
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  4009ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4009bc:	095a      	lsrs	r2, r3, #5
  4009be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4009c0:	623b      	str	r3, [r7, #32]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  4009c2:	6a3b      	ldr	r3, [r7, #32]
  4009c4:	f003 031f 	and.w	r3, r3, #31
  4009c8:	2101      	movs	r1, #1
  4009ca:	fa01 f303 	lsl.w	r3, r1, r3
  4009ce:	61fa      	str	r2, [r7, #28]
  4009d0:	61bb      	str	r3, [r7, #24]
  4009d2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  4009d6:	75fb      	strb	r3, [r7, #23]
  4009d8:	69fb      	ldr	r3, [r7, #28]
  4009da:	613b      	str	r3, [r7, #16]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  4009dc:	693a      	ldr	r2, [r7, #16]
  4009de:	4b22      	ldr	r3, [pc, #136]	; (400a68 <ioport_set_pin_sense_mode+0xc8>)
  4009e0:	4413      	add	r3, r2
  4009e2:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_port_sense_mode(ioport_port_t port,
		ioport_port_mask_t mask, enum ioport_sense pin_sense)
{
	Pio *base = arch_ioport_port_to_base(port);
  4009e4:	60fb      	str	r3, [r7, #12]
	 *       1       0         0    IOPORT_SENSE_FALLING
	 *       1       0         1    IOPORT_SENSE_RISING
	 *       1       1         0    IOPORT_SENSE_LEVEL_LOW
	 *       1       1         1    IOPORT_SENSE_LEVEL_HIGH
	 */
	switch(pin_sense) {
  4009e6:	7dfb      	ldrb	r3, [r7, #23]
  4009e8:	3b01      	subs	r3, #1
  4009ea:	2b03      	cmp	r3, #3
  4009ec:	d82e      	bhi.n	400a4c <ioport_set_pin_sense_mode+0xac>
  4009ee:	a201      	add	r2, pc, #4	; (adr r2, 4009f4 <ioport_set_pin_sense_mode+0x54>)
  4009f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4009f4:	00400a29 	.word	0x00400a29
  4009f8:	00400a3b 	.word	0x00400a3b
  4009fc:	00400a05 	.word	0x00400a05
  400a00:	00400a17 	.word	0x00400a17
	case IOPORT_SENSE_LEVEL_LOW:
		base->PIO_LSR = mask;
  400a04:	68fb      	ldr	r3, [r7, #12]
  400a06:	69ba      	ldr	r2, [r7, #24]
  400a08:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
		base->PIO_FELLSR = mask;
  400a0c:	68fb      	ldr	r3, [r7, #12]
  400a0e:	69ba      	ldr	r2, [r7, #24]
  400a10:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
  400a14:	e01f      	b.n	400a56 <ioport_set_pin_sense_mode+0xb6>
		break;
	case IOPORT_SENSE_LEVEL_HIGH:
		base->PIO_LSR = mask;
  400a16:	68fb      	ldr	r3, [r7, #12]
  400a18:	69ba      	ldr	r2, [r7, #24]
  400a1a:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
		base->PIO_REHLSR = mask;
  400a1e:	68fb      	ldr	r3, [r7, #12]
  400a20:	69ba      	ldr	r2, [r7, #24]
  400a22:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  400a26:	e016      	b.n	400a56 <ioport_set_pin_sense_mode+0xb6>
		break;
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
  400a28:	68fb      	ldr	r3, [r7, #12]
  400a2a:	69ba      	ldr	r2, [r7, #24]
  400a2c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_FELLSR = mask;
  400a30:	68fb      	ldr	r3, [r7, #12]
  400a32:	69ba      	ldr	r2, [r7, #24]
  400a34:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
  400a38:	e00d      	b.n	400a56 <ioport_set_pin_sense_mode+0xb6>
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  400a3a:	68fb      	ldr	r3, [r7, #12]
  400a3c:	69ba      	ldr	r2, [r7, #24]
  400a3e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  400a42:	68fb      	ldr	r3, [r7, #12]
  400a44:	69ba      	ldr	r2, [r7, #24]
  400a46:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  400a4a:	e004      	b.n	400a56 <ioport_set_pin_sense_mode+0xb6>
		break;
	default:
		base->PIO_AIMDR = mask;
  400a4c:	68fb      	ldr	r3, [r7, #12]
  400a4e:	69ba      	ldr	r2, [r7, #24]
  400a50:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
  400a54:	e003      	b.n	400a5e <ioport_set_pin_sense_mode+0xbe>
		return;
	}
	base->PIO_AIMER = mask;
  400a56:	68fb      	ldr	r3, [r7, #12]
  400a58:	69ba      	ldr	r2, [r7, #24]
  400a5a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	arch_ioport_set_pin_sense_mode(pin, pin_sense);
}
  400a5e:	3734      	adds	r7, #52	; 0x34
  400a60:	46bd      	mov	sp, r7
  400a62:	f85d 7b04 	ldr.w	r7, [sp], #4
  400a66:	4770      	bx	lr
  400a68:	00200707 	.word	0x00200707

00400a6c <board_init>:
	__ISB();
}
#endif

void board_init(void)
{
  400a6c:	b580      	push	{r7, lr}
  400a6e:	af00      	add	r7, sp, #0
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  400a70:	4b27      	ldr	r3, [pc, #156]	; (400b10 <board_init+0xa4>)
  400a72:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  400a76:	605a      	str	r2, [r3, #4]
#endif

	/* Initialize IOPORTs */
	ioport_init();
  400a78:	4b26      	ldr	r3, [pc, #152]	; (400b14 <board_init+0xa8>)
  400a7a:	4798      	blx	r3

	/* Configure the pins connected to LED as output and set their
	 * default initial state to high (LED off).
	 */
	ioport_set_pin_dir(LED0_GPIO, IOPORT_DIR_OUTPUT);
  400a7c:	2050      	movs	r0, #80	; 0x50
  400a7e:	2101      	movs	r1, #1
  400a80:	4b25      	ldr	r3, [pc, #148]	; (400b18 <board_init+0xac>)
  400a82:	4798      	blx	r3
	ioport_set_pin_level(LED0_GPIO, LED0_INACTIVE_LEVEL);
  400a84:	2050      	movs	r0, #80	; 0x50
  400a86:	2101      	movs	r1, #1
  400a88:	4b24      	ldr	r3, [pc, #144]	; (400b1c <board_init+0xb0>)
  400a8a:	4798      	blx	r3

	/* Configure Push Button pins */
	ioport_set_pin_input_mode(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS,
  400a8c:	200b      	movs	r0, #11
  400a8e:	2100      	movs	r1, #0
  400a90:	4b21      	ldr	r3, [pc, #132]	; (400b18 <board_init+0xac>)
  400a92:	4798      	blx	r3
  400a94:	200b      	movs	r0, #11
  400a96:	2188      	movs	r1, #136	; 0x88
  400a98:	4b21      	ldr	r3, [pc, #132]	; (400b20 <board_init+0xb4>)
  400a9a:	4798      	blx	r3
  400a9c:	200b      	movs	r0, #11
  400a9e:	2102      	movs	r1, #2
  400aa0:	4b20      	ldr	r3, [pc, #128]	; (400b24 <board_init+0xb8>)
  400aa2:	4798      	blx	r3
//jsi 7feb16 following defines are from the DMA-UART example project for the SAM4E
#define PINS_UART0_PORT		IOPORT_PIOA
#define PINS_UART0			(PIO_PA9A_URXD0 | PIO_PA10A_UTXD0)
#define PINS_UART0_FLAGS	IOPORT_MODE_MUX_A

	ioport_set_port_peripheral_mode(PINS_UART0_PORT, PINS_UART0, PINS_UART0_FLAGS); //jsi 6feb16 was USART1
  400aa4:	2000      	movs	r0, #0
  400aa6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
  400aaa:	2200      	movs	r2, #0
  400aac:	4b1e      	ldr	r3, [pc, #120]	; (400b28 <board_init+0xbc>)
  400aae:	4798      	blx	r3
  400ab0:	2000      	movs	r0, #0
  400ab2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
  400ab6:	4b1d      	ldr	r3, [pc, #116]	; (400b2c <board_init+0xc0>)
  400ab8:	4798      	blx	r3

#endif

#define CONF_BOARD_TWIHS0 //jsi 7feb16
#ifdef CONF_BOARD_TWIHS0
	ioport_set_pin_peripheral_mode(TWIHS0_DATA_GPIO, TWIHS0_DATA_FLAGS);
  400aba:	2003      	movs	r0, #3
  400abc:	2100      	movs	r1, #0
  400abe:	4b18      	ldr	r3, [pc, #96]	; (400b20 <board_init+0xb4>)
  400ac0:	4798      	blx	r3
  400ac2:	2003      	movs	r0, #3
  400ac4:	4b1a      	ldr	r3, [pc, #104]	; (400b30 <board_init+0xc4>)
  400ac6:	4798      	blx	r3
	ioport_set_pin_peripheral_mode(TWIHS0_CLK_GPIO, TWIHS0_CLK_FLAGS);
  400ac8:	2004      	movs	r0, #4
  400aca:	2100      	movs	r1, #0
  400acc:	4b14      	ldr	r3, [pc, #80]	; (400b20 <board_init+0xb4>)
  400ace:	4798      	blx	r3
  400ad0:	2004      	movs	r0, #4
  400ad2:	4b17      	ldr	r3, [pc, #92]	; (400b30 <board_init+0xc4>)
  400ad4:	4798      	blx	r3
	ioport_set_pin_peripheral_mode(QSPI_QIO3_GPIO, QSPI_QIO3_FLAGS);
#endif

#ifdef CONF_BOARD_PWM_LED0
	/* Configure PWM LED0 pin */
	ioport_set_pin_peripheral_mode(PIN_PWM_LED0_GPIO, PIN_PWM_LED0_FLAGS);
  400ad6:	200b      	movs	r0, #11
  400ad8:	2101      	movs	r1, #1
  400ada:	4b11      	ldr	r3, [pc, #68]	; (400b20 <board_init+0xb4>)
  400adc:	4798      	blx	r3
  400ade:	200b      	movs	r0, #11
  400ae0:	4b13      	ldr	r3, [pc, #76]	; (400b30 <board_init+0xc4>)
  400ae2:	4798      	blx	r3
#endif


#ifdef CONF_BOARD_USART_RXD
	/* Configure USART RXD pin */
	ioport_set_pin_peripheral_mode(USART0_RXD_GPIO, USART0_RXD_FLAGS);
  400ae4:	2020      	movs	r0, #32
  400ae6:	2102      	movs	r1, #2
  400ae8:	4b0d      	ldr	r3, [pc, #52]	; (400b20 <board_init+0xb4>)
  400aea:	4798      	blx	r3
  400aec:	2020      	movs	r0, #32
  400aee:	4b10      	ldr	r3, [pc, #64]	; (400b30 <board_init+0xc4>)
  400af0:	4798      	blx	r3
#endif

#ifdef CONF_BOARD_USART_TXD
	/* Configure USART TXD pin */
	ioport_set_pin_peripheral_mode(USART0_TXD_GPIO, USART0_TXD_FLAGS);
  400af2:	2021      	movs	r0, #33	; 0x21
  400af4:	2102      	movs	r1, #2
  400af6:	4b0a      	ldr	r3, [pc, #40]	; (400b20 <board_init+0xb4>)
  400af8:	4798      	blx	r3
  400afa:	2021      	movs	r0, #33	; 0x21
  400afc:	4b0c      	ldr	r3, [pc, #48]	; (400b30 <board_init+0xc4>)
  400afe:	4798      	blx	r3
	ioport_set_pin_peripheral_mode(PIN_USART0_CTS_IDX,PIN_USART0_CTS_FLAGS);
#endif

#ifdef CONF_BOARD_USART_RTS
	/* Configure USART RTS pin */
	ioport_set_pin_peripheral_mode(PIN_USART0_RTS_IDX, PIN_USART0_RTS_FLAGS);
  400b00:	2023      	movs	r0, #35	; 0x23
  400b02:	2102      	movs	r1, #2
  400b04:	4b06      	ldr	r3, [pc, #24]	; (400b20 <board_init+0xb4>)
  400b06:	4798      	blx	r3
  400b08:	2023      	movs	r0, #35	; 0x23
  400b0a:	4b09      	ldr	r3, [pc, #36]	; (400b30 <board_init+0xc4>)
  400b0c:	4798      	blx	r3
#endif

#ifdef CONF_BOARD_CONFIG_MPU_AT_INIT
	_setup_memory_region();
#endif
}
  400b0e:	bd80      	pop	{r7, pc}
  400b10:	400e1850 	.word	0x400e1850
  400b14:	004005ed 	.word	0x004005ed
  400b18:	004008ad 	.word	0x004008ad
  400b1c:	00400935 	.word	0x00400935
  400b20:	00400791 	.word	0x00400791
  400b24:	004009a1 	.word	0x004009a1
  400b28:	00400691 	.word	0x00400691
  400b2c:	0040065d 	.word	0x0040065d
  400b30:	00400615 	.word	0x00400615

00400b34 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  400b34:	b480      	push	{r7}
  400b36:	b083      	sub	sp, #12
  400b38:	af00      	add	r7, sp, #0
  400b3a:	4603      	mov	r3, r0
  400b3c:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  400b3e:	4908      	ldr	r1, [pc, #32]	; (400b60 <NVIC_EnableIRQ+0x2c>)
  400b40:	f997 3007 	ldrsb.w	r3, [r7, #7]
  400b44:	095b      	lsrs	r3, r3, #5
  400b46:	79fa      	ldrb	r2, [r7, #7]
  400b48:	f002 021f 	and.w	r2, r2, #31
  400b4c:	2001      	movs	r0, #1
  400b4e:	fa00 f202 	lsl.w	r2, r0, r2
  400b52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  400b56:	370c      	adds	r7, #12
  400b58:	46bd      	mov	sp, r7
  400b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
  400b5e:	4770      	bx	lr
  400b60:	e000e100 	.word	0xe000e100

00400b64 <NVIC_ClearPendingIRQ>:
    The function clears the pending bit of an external interrupt.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  400b64:	b480      	push	{r7}
  400b66:	b083      	sub	sp, #12
  400b68:	af00      	add	r7, sp, #0
  400b6a:	4603      	mov	r3, r0
  400b6c:	71fb      	strb	r3, [r7, #7]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  400b6e:	4909      	ldr	r1, [pc, #36]	; (400b94 <NVIC_ClearPendingIRQ+0x30>)
  400b70:	f997 3007 	ldrsb.w	r3, [r7, #7]
  400b74:	095b      	lsrs	r3, r3, #5
  400b76:	79fa      	ldrb	r2, [r7, #7]
  400b78:	f002 021f 	and.w	r2, r2, #31
  400b7c:	2001      	movs	r0, #1
  400b7e:	fa00 f202 	lsl.w	r2, r0, r2
  400b82:	3360      	adds	r3, #96	; 0x60
  400b84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  400b88:	370c      	adds	r7, #12
  400b8a:	46bd      	mov	sp, r7
  400b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
  400b90:	4770      	bx	lr
  400b92:	bf00      	nop
  400b94:	e000e100 	.word	0xe000e100

00400b98 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  400b98:	b480      	push	{r7}
  400b9a:	b083      	sub	sp, #12
  400b9c:	af00      	add	r7, sp, #0
  400b9e:	4603      	mov	r3, r0
  400ba0:	6039      	str	r1, [r7, #0]
  400ba2:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
  400ba4:	f997 3007 	ldrsb.w	r3, [r7, #7]
  400ba8:	2b00      	cmp	r3, #0
  400baa:	da0b      	bge.n	400bc4 <NVIC_SetPriority+0x2c>
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  400bac:	490d      	ldr	r1, [pc, #52]	; (400be4 <NVIC_SetPriority+0x4c>)
  400bae:	79fb      	ldrb	r3, [r7, #7]
  400bb0:	f003 030f 	and.w	r3, r3, #15
  400bb4:	3b04      	subs	r3, #4
  400bb6:	683a      	ldr	r2, [r7, #0]
  400bb8:	b2d2      	uxtb	r2, r2
  400bba:	0152      	lsls	r2, r2, #5
  400bbc:	b2d2      	uxtb	r2, r2
  400bbe:	440b      	add	r3, r1
  400bc0:	761a      	strb	r2, [r3, #24]
  400bc2:	e009      	b.n	400bd8 <NVIC_SetPriority+0x40>
  else {
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  400bc4:	4908      	ldr	r1, [pc, #32]	; (400be8 <NVIC_SetPriority+0x50>)
  400bc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
  400bca:	683a      	ldr	r2, [r7, #0]
  400bcc:	b2d2      	uxtb	r2, r2
  400bce:	0152      	lsls	r2, r2, #5
  400bd0:	b2d2      	uxtb	r2, r2
  400bd2:	440b      	add	r3, r1
  400bd4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
  400bd8:	370c      	adds	r7, #12
  400bda:	46bd      	mov	sp, r7
  400bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
  400be0:	4770      	bx	lr
  400be2:	bf00      	nop
  400be4:	e000ed00 	.word	0xe000ed00
  400be8:	e000e100 	.word	0xe000e100

00400bec <cpu_irq_save>:

static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
  400bec:	b480      	push	{r7}
  400bee:	b083      	sub	sp, #12
  400bf0:	af00      	add	r7, sp, #0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  400bf2:	f3ef 8310 	mrs	r3, PRIMASK
  400bf6:	603b      	str	r3, [r7, #0]
  return(result);
  400bf8:	683b      	ldr	r3, [r7, #0]
	irqflags_t flags = cpu_irq_is_enabled();
  400bfa:	2b00      	cmp	r3, #0
  400bfc:	bf0c      	ite	eq
  400bfe:	2301      	moveq	r3, #1
  400c00:	2300      	movne	r3, #0
  400c02:	b2db      	uxtb	r3, r3
  400c04:	607b      	str	r3, [r7, #4]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
  400c06:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  400c08:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  400c0c:	4b04      	ldr	r3, [pc, #16]	; (400c20 <cpu_irq_save+0x34>)
  400c0e:	2200      	movs	r2, #0
  400c10:	701a      	strb	r2, [r3, #0]
	return flags;
  400c12:	687b      	ldr	r3, [r7, #4]
}
  400c14:	4618      	mov	r0, r3
  400c16:	370c      	adds	r7, #12
  400c18:	46bd      	mov	sp, r7
  400c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
  400c1e:	4770      	bx	lr
  400c20:	20400000 	.word	0x20400000

00400c24 <cpu_irq_is_enabled_flags>:

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
  400c24:	b480      	push	{r7}
  400c26:	b083      	sub	sp, #12
  400c28:	af00      	add	r7, sp, #0
  400c2a:	6078      	str	r0, [r7, #4]
	return (flags);
  400c2c:	687b      	ldr	r3, [r7, #4]
  400c2e:	2b00      	cmp	r3, #0
  400c30:	bf14      	ite	ne
  400c32:	2301      	movne	r3, #1
  400c34:	2300      	moveq	r3, #0
  400c36:	b2db      	uxtb	r3, r3
}
  400c38:	4618      	mov	r0, r3
  400c3a:	370c      	adds	r7, #12
  400c3c:	46bd      	mov	sp, r7
  400c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
  400c42:	4770      	bx	lr

00400c44 <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
  400c44:	b580      	push	{r7, lr}
  400c46:	b082      	sub	sp, #8
  400c48:	af00      	add	r7, sp, #0
  400c4a:	6078      	str	r0, [r7, #4]
	if (cpu_irq_is_enabled_flags(flags))
  400c4c:	6878      	ldr	r0, [r7, #4]
  400c4e:	4b07      	ldr	r3, [pc, #28]	; (400c6c <cpu_irq_restore+0x28>)
  400c50:	4798      	blx	r3
  400c52:	4603      	mov	r3, r0
  400c54:	2b00      	cmp	r3, #0
  400c56:	d005      	beq.n	400c64 <cpu_irq_restore+0x20>
		cpu_irq_enable();
  400c58:	4b05      	ldr	r3, [pc, #20]	; (400c70 <cpu_irq_restore+0x2c>)
  400c5a:	2201      	movs	r2, #1
  400c5c:	701a      	strb	r2, [r3, #0]
  400c5e:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
  400c62:	b662      	cpsie	i
}
  400c64:	3708      	adds	r7, #8
  400c66:	46bd      	mov	sp, r7
  400c68:	bd80      	pop	{r7, pc}
  400c6a:	bf00      	nop
  400c6c:	00400c25 	.word	0x00400c25
  400c70:	20400000 	.word	0x20400000

00400c74 <afec_ch_sanity_check>:
 * \param channel  AFEC channel number.
 *
 */
static inline void afec_ch_sanity_check(Afec *const afec,
		const enum afec_channel_num channel)
{
  400c74:	b480      	push	{r7}
  400c76:	b083      	sub	sp, #12
  400c78:	af00      	add	r7, sp, #0
  400c7a:	6078      	str	r0, [r7, #4]
  400c7c:	460b      	mov	r3, r1
  400c7e:	807b      	strh	r3, [r7, #2]
	#endif
	} else if (afec == AFEC1) {
		Assert(channel < NB_CH_AFE1);
	}
	UNUSED(channel);
}
  400c80:	370c      	adds	r7, #12
  400c82:	46bd      	mov	sp, r7
  400c84:	f85d 7b04 	ldr.w	r7, [sp], #4
  400c88:	4770      	bx	lr
  400c8a:	bf00      	nop

00400c8c <afec_get_interrupt_status>:
 * \param afec  Base address of the AFEC.
 *
 * \return The interrupt status value.
 */
static inline uint32_t afec_get_interrupt_status(Afec *const afec)
{
  400c8c:	b480      	push	{r7}
  400c8e:	b083      	sub	sp, #12
  400c90:	af00      	add	r7, sp, #0
  400c92:	6078      	str	r0, [r7, #4]
	return afec->AFEC_ISR;
  400c94:	687b      	ldr	r3, [r7, #4]
  400c96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
  400c98:	4618      	mov	r0, r3
  400c9a:	370c      	adds	r7, #12
  400c9c:	46bd      	mov	sp, r7
  400c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
  400ca2:	4770      	bx	lr

00400ca4 <sleepmgr_lock_mode>:
 * not put the device to sleep in the deeper sleep modes.
 *
 * \param mode Sleep mode to lock.
 */
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
  400ca4:	b580      	push	{r7, lr}
  400ca6:	b084      	sub	sp, #16
  400ca8:	af00      	add	r7, sp, #0
  400caa:	4603      	mov	r3, r0
  400cac:	71fb      	strb	r3, [r7, #7]
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
  400cae:	79fb      	ldrb	r3, [r7, #7]
  400cb0:	4a0a      	ldr	r2, [pc, #40]	; (400cdc <sleepmgr_lock_mode+0x38>)
  400cb2:	5cd3      	ldrb	r3, [r2, r3]
  400cb4:	2bff      	cmp	r3, #255	; 0xff
  400cb6:	d100      	bne.n	400cba <sleepmgr_lock_mode+0x16>
		while (true) {
			// Warning: maximum value of sleepmgr_locks buffer is no more than 255.
			// Check APP or change the data type to uint16_t.
		}
  400cb8:	e7fe      	b.n	400cb8 <sleepmgr_lock_mode+0x14>
	}

	// Enter a critical section
	flags = cpu_irq_save();
  400cba:	4b09      	ldr	r3, [pc, #36]	; (400ce0 <sleepmgr_lock_mode+0x3c>)
  400cbc:	4798      	blx	r3
  400cbe:	60f8      	str	r0, [r7, #12]

	++sleepmgr_locks[mode];
  400cc0:	79fb      	ldrb	r3, [r7, #7]
  400cc2:	4a06      	ldr	r2, [pc, #24]	; (400cdc <sleepmgr_lock_mode+0x38>)
  400cc4:	5cd2      	ldrb	r2, [r2, r3]
  400cc6:	3201      	adds	r2, #1
  400cc8:	b2d1      	uxtb	r1, r2
  400cca:	4a04      	ldr	r2, [pc, #16]	; (400cdc <sleepmgr_lock_mode+0x38>)
  400ccc:	54d1      	strb	r1, [r2, r3]

	// Leave the critical section
	cpu_irq_restore(flags);
  400cce:	68f8      	ldr	r0, [r7, #12]
  400cd0:	4b04      	ldr	r3, [pc, #16]	; (400ce4 <sleepmgr_lock_mode+0x40>)
  400cd2:	4798      	blx	r3
#else
	UNUSED(mode);
#endif /* CONFIG_SLEEPMGR_ENABLE */
}
  400cd4:	3710      	adds	r7, #16
  400cd6:	46bd      	mov	sp, r7
  400cd8:	bd80      	pop	{r7, pc}
  400cda:	bf00      	nop
  400cdc:	204009fc 	.word	0x204009fc
  400ce0:	00400bed 	.word	0x00400bed
  400ce4:	00400c45 	.word	0x00400c45

00400ce8 <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  400ce8:	b480      	push	{r7}
  400cea:	b083      	sub	sp, #12
  400cec:	af00      	add	r7, sp, #0
  400cee:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  400cf0:	687b      	ldr	r3, [r7, #4]
  400cf2:	2b07      	cmp	r3, #7
  400cf4:	d825      	bhi.n	400d42 <osc_get_rate+0x5a>
  400cf6:	a201      	add	r2, pc, #4	; (adr r2, 400cfc <osc_get_rate+0x14>)
  400cf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  400cfc:	00400d1d 	.word	0x00400d1d
  400d00:	00400d23 	.word	0x00400d23
  400d04:	00400d29 	.word	0x00400d29
  400d08:	00400d2f 	.word	0x00400d2f
  400d0c:	00400d33 	.word	0x00400d33
  400d10:	00400d37 	.word	0x00400d37
  400d14:	00400d3b 	.word	0x00400d3b
  400d18:	00400d3f 	.word	0x00400d3f
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  400d1c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  400d20:	e010      	b.n	400d44 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  400d22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400d26:	e00d      	b.n	400d44 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  400d28:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400d2c:	e00a      	b.n	400d44 <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  400d2e:	4b08      	ldr	r3, [pc, #32]	; (400d50 <osc_get_rate+0x68>)
  400d30:	e008      	b.n	400d44 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  400d32:	4b08      	ldr	r3, [pc, #32]	; (400d54 <osc_get_rate+0x6c>)
  400d34:	e006      	b.n	400d44 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  400d36:	4b08      	ldr	r3, [pc, #32]	; (400d58 <osc_get_rate+0x70>)
  400d38:	e004      	b.n	400d44 <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  400d3a:	4b08      	ldr	r3, [pc, #32]	; (400d5c <osc_get_rate+0x74>)
  400d3c:	e002      	b.n	400d44 <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  400d3e:	4b06      	ldr	r3, [pc, #24]	; (400d58 <osc_get_rate+0x70>)
  400d40:	e000      	b.n	400d44 <osc_get_rate+0x5c>
	}

	return 0;
  400d42:	2300      	movs	r3, #0
}
  400d44:	4618      	mov	r0, r3
  400d46:	370c      	adds	r7, #12
  400d48:	46bd      	mov	sp, r7
  400d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
  400d4e:	4770      	bx	lr
  400d50:	003d0900 	.word	0x003d0900
  400d54:	007a1200 	.word	0x007a1200
  400d58:	00b71b00 	.word	0x00b71b00
  400d5c:	00f42400 	.word	0x00f42400

00400d60 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  400d60:	b580      	push	{r7, lr}
  400d62:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  400d64:	2006      	movs	r0, #6
  400d66:	4b05      	ldr	r3, [pc, #20]	; (400d7c <sysclk_get_main_hz+0x1c>)
  400d68:	4798      	blx	r3
  400d6a:	4602      	mov	r2, r0
  400d6c:	4613      	mov	r3, r2
  400d6e:	009b      	lsls	r3, r3, #2
  400d70:	4413      	add	r3, r2
  400d72:	009a      	lsls	r2, r3, #2
  400d74:	4413      	add	r3, r2
  400d76:	089b      	lsrs	r3, r3, #2
#endif
	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  400d78:	4618      	mov	r0, r3
  400d7a:	bd80      	pop	{r7, pc}
  400d7c:	00400ce9 	.word	0x00400ce9

00400d80 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
  400d80:	b580      	push	{r7, lr}
  400d82:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  400d84:	4b02      	ldr	r3, [pc, #8]	; (400d90 <sysclk_get_cpu_hz+0x10>)
  400d86:	4798      	blx	r3
  400d88:	4603      	mov	r3, r0
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  400d8a:	4618      	mov	r0, r3
  400d8c:	bd80      	pop	{r7, pc}
  400d8e:	bf00      	nop
  400d90:	00400d61 	.word	0x00400d61

00400d94 <afec_find_inst_num>:
 * \param afec  Base address of the AFEC
 *
 * \return   AFEC instance number
 */
static uint32_t afec_find_inst_num(Afec *const afec)
{
  400d94:	b480      	push	{r7}
  400d96:	b083      	sub	sp, #12
  400d98:	af00      	add	r7, sp, #0
  400d9a:	6078      	str	r0, [r7, #4]
#if defined(AFEC1)
	if (afec == AFEC1) {
  400d9c:	687b      	ldr	r3, [r7, #4]
  400d9e:	4a09      	ldr	r2, [pc, #36]	; (400dc4 <afec_find_inst_num+0x30>)
  400da0:	4293      	cmp	r3, r2
  400da2:	d101      	bne.n	400da8 <afec_find_inst_num+0x14>
		return 1;
  400da4:	2301      	movs	r3, #1
  400da6:	e006      	b.n	400db6 <afec_find_inst_num+0x22>
	}
#endif
#if defined(AFEC0)
	if (afec == AFEC0) {
  400da8:	687b      	ldr	r3, [r7, #4]
  400daa:	4a07      	ldr	r2, [pc, #28]	; (400dc8 <afec_find_inst_num+0x34>)
  400dac:	4293      	cmp	r3, r2
  400dae:	d101      	bne.n	400db4 <afec_find_inst_num+0x20>
		return 0;
  400db0:	2300      	movs	r3, #0
  400db2:	e000      	b.n	400db6 <afec_find_inst_num+0x22>
	}
#endif
	return 0;
  400db4:	2300      	movs	r3, #0
}
  400db6:	4618      	mov	r0, r3
  400db8:	370c      	adds	r7, #12
  400dba:	46bd      	mov	sp, r7
  400dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
  400dc0:	4770      	bx	lr
  400dc2:	bf00      	nop
  400dc4:	40064000 	.word	0x40064000
  400dc8:	4003c000 	.word	0x4003c000

00400dcc <afec_find_pid>:
 * \param afec  Base address of the AFEC
 *
 * \return   AFEC Peripheral ID
 */
static uint32_t afec_find_pid(Afec *const afec)
{
  400dcc:	b480      	push	{r7}
  400dce:	b083      	sub	sp, #12
  400dd0:	af00      	add	r7, sp, #0
  400dd2:	6078      	str	r0, [r7, #4]
#if defined(ID_AFEC1)
	if (afec == AFEC1) {
  400dd4:	687b      	ldr	r3, [r7, #4]
  400dd6:	4a09      	ldr	r2, [pc, #36]	; (400dfc <afec_find_pid+0x30>)
  400dd8:	4293      	cmp	r3, r2
  400dda:	d101      	bne.n	400de0 <afec_find_pid+0x14>
		return ID_AFEC1;
  400ddc:	2328      	movs	r3, #40	; 0x28
  400dde:	e006      	b.n	400dee <afec_find_pid+0x22>
	}
#endif
#if defined(ID_AFEC0)
	if (afec == AFEC0) {
  400de0:	687b      	ldr	r3, [r7, #4]
  400de2:	4a07      	ldr	r2, [pc, #28]	; (400e00 <afec_find_pid+0x34>)
  400de4:	4293      	cmp	r3, r2
  400de6:	d101      	bne.n	400dec <afec_find_pid+0x20>
		return ID_AFEC0;
  400de8:	231d      	movs	r3, #29
  400dea:	e000      	b.n	400dee <afec_find_pid+0x22>
	}
#endif
	return ID_AFEC0;
  400dec:	231d      	movs	r3, #29
}
  400dee:	4618      	mov	r0, r3
  400df0:	370c      	adds	r7, #12
  400df2:	46bd      	mov	sp, r7
  400df4:	f85d 7b04 	ldr.w	r7, [sp], #4
  400df8:	4770      	bx	lr
  400dfa:	bf00      	nop
  400dfc:	40064000 	.word	0x40064000
  400e00:	4003c000 	.word	0x4003c000

00400e04 <afec_set_config>:
 *
 * \param afec  Base address of the AFEC
 * \param config   Configuration for the AFEC
 */
static void afec_set_config(Afec *const afec, struct afec_config *config)
{
  400e04:	b480      	push	{r7}
  400e06:	b085      	sub	sp, #20
  400e08:	af00      	add	r7, sp, #0
  400e0a:	6078      	str	r0, [r7, #4]
  400e0c:	6039      	str	r1, [r7, #0]
	uint32_t reg = 0;
  400e0e:	2300      	movs	r3, #0
  400e10:	60fb      	str	r3, [r7, #12]

	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  400e12:	683b      	ldr	r3, [r7, #0]
  400e14:	7cdb      	ldrb	r3, [r3, #19]
  400e16:	2b00      	cmp	r3, #0
  400e18:	d002      	beq.n	400e20 <afec_set_config+0x1c>
  400e1a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
  400e1e:	e000      	b.n	400e22 <afec_set_config+0x1e>
  400e20:	2200      	movs	r2, #0
		#if (SAMV71 || SAMV70 || SAME70 || SAMS70)
			AFEC_MR_PRESCAL((config->mck / config->afec_clock )- 1) |
  400e22:	683b      	ldr	r3, [r7, #0]
  400e24:	6859      	ldr	r1, [r3, #4]
  400e26:	683b      	ldr	r3, [r7, #0]
  400e28:	689b      	ldr	r3, [r3, #8]
  400e2a:	fbb1 f3f3 	udiv	r3, r1, r3
  400e2e:	3b01      	subs	r3, #1
  400e30:	021b      	lsls	r3, r3, #8
  400e32:	b29b      	uxth	r3, r3
 */
static void afec_set_config(Afec *const afec, struct afec_config *config)
{
	uint32_t reg = 0;

	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  400e34:	431a      	orrs	r2, r3
		#else
			(config->anach ? AFEC_MR_ANACH_ALLOWED : 0) |
			AFEC_MR_PRESCAL(config->mck / (2 * config->afec_clock) - 1) |
			(config->settling_time) |		
		#endif
			AFEC_MR_TRACKTIM(config->tracktim) |
  400e36:	683b      	ldr	r3, [r7, #0]
  400e38:	7c1b      	ldrb	r3, [r3, #16]
  400e3a:	061b      	lsls	r3, r3, #24
	uint32_t reg = 0;

	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
		#if (SAMV71 || SAMV70 || SAME70 || SAMS70)
			AFEC_MR_PRESCAL((config->mck / config->afec_clock )- 1) |
			AFEC_MR_ONE |
  400e3c:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
  400e40:	431a      	orrs	r2, r3
			(config->anach ? AFEC_MR_ANACH_ALLOWED : 0) |
			AFEC_MR_PRESCAL(config->mck / (2 * config->afec_clock) - 1) |
			(config->settling_time) |		
		#endif
			AFEC_MR_TRACKTIM(config->tracktim) |
			AFEC_MR_TRANSFER(config->transfer) |
  400e42:	683b      	ldr	r3, [r7, #0]
  400e44:	7c5b      	ldrb	r3, [r3, #17]
  400e46:	071b      	lsls	r3, r3, #28
		#else
			(config->anach ? AFEC_MR_ANACH_ALLOWED : 0) |
			AFEC_MR_PRESCAL(config->mck / (2 * config->afec_clock) - 1) |
			(config->settling_time) |		
		#endif
			AFEC_MR_TRACKTIM(config->tracktim) |
  400e48:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
  400e4c:	431a      	orrs	r2, r3
			AFEC_MR_TRANSFER(config->transfer) |
			(config->startup_time);
  400e4e:	683b      	ldr	r3, [r7, #0]
  400e50:	68db      	ldr	r3, [r3, #12]
			(config->anach ? AFEC_MR_ANACH_ALLOWED : 0) |
			AFEC_MR_PRESCAL(config->mck / (2 * config->afec_clock) - 1) |
			(config->settling_time) |		
		#endif
			AFEC_MR_TRACKTIM(config->tracktim) |
			AFEC_MR_TRANSFER(config->transfer) |
  400e52:	4313      	orrs	r3, r2
 */
static void afec_set_config(Afec *const afec, struct afec_config *config)
{
	uint32_t reg = 0;

	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  400e54:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
  400e58:	60fb      	str	r3, [r7, #12]
		#endif
			AFEC_MR_TRACKTIM(config->tracktim) |
			AFEC_MR_TRANSFER(config->transfer) |
			(config->startup_time);

	afec->AFEC_MR = reg;
  400e5a:	687b      	ldr	r3, [r7, #4]
  400e5c:	68fa      	ldr	r2, [r7, #12]
  400e5e:	605a      	str	r2, [r3, #4]

	afec->AFEC_EMR = (config->tag ? AFEC_EMR_TAG : 0) |
  400e60:	683b      	ldr	r3, [r7, #0]
  400e62:	7d1b      	ldrb	r3, [r3, #20]
  400e64:	2b00      	cmp	r3, #0
  400e66:	d002      	beq.n	400e6e <afec_set_config+0x6a>
  400e68:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
  400e6c:	e000      	b.n	400e70 <afec_set_config+0x6c>
  400e6e:	2200      	movs	r2, #0
			(config->resolution) |
  400e70:	683b      	ldr	r3, [r7, #0]
  400e72:	681b      	ldr	r3, [r3, #0]
			AFEC_MR_TRANSFER(config->transfer) |
			(config->startup_time);

	afec->AFEC_MR = reg;

	afec->AFEC_EMR = (config->tag ? AFEC_EMR_TAG : 0) |
  400e74:	431a      	orrs	r2, r3
			(config->resolution) |
			(config->stm ? AFEC_EMR_STM : 0);
  400e76:	683b      	ldr	r3, [r7, #0]
  400e78:	7d5b      	ldrb	r3, [r3, #21]
  400e7a:	2b00      	cmp	r3, #0
  400e7c:	d002      	beq.n	400e84 <afec_set_config+0x80>
  400e7e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
  400e82:	e000      	b.n	400e86 <afec_set_config+0x82>
  400e84:	2300      	movs	r3, #0
			(config->startup_time);

	afec->AFEC_MR = reg;

	afec->AFEC_EMR = (config->tag ? AFEC_EMR_TAG : 0) |
			(config->resolution) |
  400e86:	431a      	orrs	r2, r3
			AFEC_MR_TRANSFER(config->transfer) |
			(config->startup_time);

	afec->AFEC_MR = reg;

	afec->AFEC_EMR = (config->tag ? AFEC_EMR_TAG : 0) |
  400e88:	687b      	ldr	r3, [r7, #4]
  400e8a:	609a      	str	r2, [r3, #8]
			(config->resolution) |
			(config->stm ? AFEC_EMR_STM : 0);
  #if (SAMV71 || SAMV70 || SAME70 || SAMS70)
	afec->AFEC_ACR = AFEC_ACR_IBCTL(config->ibctl) | AFEC_ACR_PGA0EN | AFEC_ACR_PGA1EN;
  400e8c:	683b      	ldr	r3, [r7, #0]
  400e8e:	7d9b      	ldrb	r3, [r3, #22]
  400e90:	021b      	lsls	r3, r3, #8
  400e92:	f403 7340 	and.w	r3, r3, #768	; 0x300
  400e96:	f043 020c 	orr.w	r2, r3, #12
  400e9a:	687b      	ldr	r3, [r7, #4]
  400e9c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  #else
    afec->AFEC_ACR = AFEC_ACR_IBCTL(config->ibctl);
  #endif
}
  400ea0:	3714      	adds	r7, #20
  400ea2:	46bd      	mov	sp, r7
  400ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
  400ea8:	4770      	bx	lr
  400eaa:	bf00      	nop

00400eac <afec_ch_set_config>:
 * \param channel The channel number
 * \param config   Configuration for the AFEC channel
 */
void afec_ch_set_config(Afec *const afec, const enum afec_channel_num channel,
		struct afec_ch_config *config)
{
  400eac:	b580      	push	{r7, lr}
  400eae:	b086      	sub	sp, #24
  400eb0:	af00      	add	r7, sp, #0
  400eb2:	60f8      	str	r0, [r7, #12]
  400eb4:	460b      	mov	r3, r1
  400eb6:	607a      	str	r2, [r7, #4]
  400eb8:	817b      	strh	r3, [r7, #10]
	afec_ch_sanity_check(afec, channel);
  400eba:	897b      	ldrh	r3, [r7, #10]
  400ebc:	68f8      	ldr	r0, [r7, #12]
  400ebe:	4619      	mov	r1, r3
  400ec0:	4b1d      	ldr	r3, [pc, #116]	; (400f38 <afec_ch_set_config+0x8c>)
  400ec2:	4798      	blx	r3
	uint32_t reg = 0;
  400ec4:	2300      	movs	r3, #0
  400ec6:	617b      	str	r3, [r7, #20]

	reg = afec->AFEC_DIFFR;
  400ec8:	68fb      	ldr	r3, [r7, #12]
  400eca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
  400ecc:	617b      	str	r3, [r7, #20]
	reg &= ~(0x1u << channel);
  400ece:	897b      	ldrh	r3, [r7, #10]
  400ed0:	2201      	movs	r2, #1
  400ed2:	fa02 f303 	lsl.w	r3, r2, r3
  400ed6:	43db      	mvns	r3, r3
  400ed8:	697a      	ldr	r2, [r7, #20]
  400eda:	4013      	ands	r3, r2
  400edc:	617b      	str	r3, [r7, #20]
	reg |= (config->diff) ? (0x1u << channel) : 0;
  400ede:	687b      	ldr	r3, [r7, #4]
  400ee0:	781b      	ldrb	r3, [r3, #0]
  400ee2:	2b00      	cmp	r3, #0
  400ee4:	d004      	beq.n	400ef0 <afec_ch_set_config+0x44>
  400ee6:	897b      	ldrh	r3, [r7, #10]
  400ee8:	2201      	movs	r2, #1
  400eea:	fa02 f303 	lsl.w	r3, r2, r3
  400eee:	e000      	b.n	400ef2 <afec_ch_set_config+0x46>
  400ef0:	2300      	movs	r3, #0
  400ef2:	697a      	ldr	r2, [r7, #20]
  400ef4:	4313      	orrs	r3, r2
  400ef6:	617b      	str	r3, [r7, #20]
	afec->AFEC_DIFFR = reg;
  400ef8:	68fb      	ldr	r3, [r7, #12]
  400efa:	697a      	ldr	r2, [r7, #20]
  400efc:	661a      	str	r2, [r3, #96]	; 0x60

	reg = afec->AFEC_CGR;
  400efe:	68fb      	ldr	r3, [r7, #12]
  400f00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
  400f02:	617b      	str	r3, [r7, #20]
	reg &= ~(0x03u << (2 * channel));
  400f04:	897b      	ldrh	r3, [r7, #10]
  400f06:	005b      	lsls	r3, r3, #1
  400f08:	2203      	movs	r2, #3
  400f0a:	fa02 f303 	lsl.w	r3, r2, r3
  400f0e:	43db      	mvns	r3, r3
  400f10:	697a      	ldr	r2, [r7, #20]
  400f12:	4013      	ands	r3, r2
  400f14:	617b      	str	r3, [r7, #20]
	reg |= (config->gain) << (2 * channel);
  400f16:	687b      	ldr	r3, [r7, #4]
  400f18:	785b      	ldrb	r3, [r3, #1]
  400f1a:	461a      	mov	r2, r3
  400f1c:	897b      	ldrh	r3, [r7, #10]
  400f1e:	005b      	lsls	r3, r3, #1
  400f20:	fa02 f303 	lsl.w	r3, r2, r3
  400f24:	461a      	mov	r2, r3
  400f26:	697b      	ldr	r3, [r7, #20]
  400f28:	4313      	orrs	r3, r2
  400f2a:	617b      	str	r3, [r7, #20]
	afec->AFEC_CGR = reg;
  400f2c:	68fb      	ldr	r3, [r7, #12]
  400f2e:	697a      	ldr	r2, [r7, #20]
  400f30:	655a      	str	r2, [r3, #84]	; 0x54
}
  400f32:	3718      	adds	r7, #24
  400f34:	46bd      	mov	sp, r7
  400f36:	bd80      	pop	{r7, pc}
  400f38:	00400c75 	.word	0x00400c75

00400f3c <afec_get_config_defaults>:
 * - AFE Bias Current Control value is 1
 *
 * \param cfg Pointer to configuration structure to be initiated.
 */
void afec_get_config_defaults(struct afec_config *const cfg)
{
  400f3c:	b580      	push	{r7, lr}
  400f3e:	b082      	sub	sp, #8
  400f40:	af00      	add	r7, sp, #0
  400f42:	6078      	str	r0, [r7, #4]
	/* Sanity check argument. */
	Assert(cfg);

	cfg->resolution = AFEC_12_BITS;
  400f44:	687b      	ldr	r3, [r7, #4]
  400f46:	2200      	movs	r2, #0
  400f48:	601a      	str	r2, [r3, #0]
	cfg->mck = sysclk_get_cpu_hz();
  400f4a:	4b12      	ldr	r3, [pc, #72]	; (400f94 <afec_get_config_defaults+0x58>)
  400f4c:	4798      	blx	r3
  400f4e:	4602      	mov	r2, r0
  400f50:	687b      	ldr	r3, [r7, #4]
  400f52:	605a      	str	r2, [r3, #4]
		cfg->afec_clock = 6000000UL;
  400f54:	687b      	ldr	r3, [r7, #4]
  400f56:	4a10      	ldr	r2, [pc, #64]	; (400f98 <afec_get_config_defaults+0x5c>)
  400f58:	609a      	str	r2, [r3, #8]
		cfg->startup_time = AFEC_STARTUP_TIME_4;
  400f5a:	687b      	ldr	r3, [r7, #4]
  400f5c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
  400f60:	60da      	str	r2, [r3, #12]
	#if !(SAMV71 || SAMV70 || SAME70 || SAMS70)
		cfg->settling_time = AFEC_SETTLING_TIME_0;
	#endif	
		cfg->tracktim = 2;
  400f62:	687b      	ldr	r3, [r7, #4]
  400f64:	2202      	movs	r2, #2
  400f66:	741a      	strb	r2, [r3, #16]
		cfg->transfer = 1;
  400f68:	687b      	ldr	r3, [r7, #4]
  400f6a:	2201      	movs	r2, #1
  400f6c:	745a      	strb	r2, [r3, #17]
		cfg->anach = true;
  400f6e:	687b      	ldr	r3, [r7, #4]
  400f70:	2201      	movs	r2, #1
  400f72:	749a      	strb	r2, [r3, #18]
		cfg->useq = false;
  400f74:	687b      	ldr	r3, [r7, #4]
  400f76:	2200      	movs	r2, #0
  400f78:	74da      	strb	r2, [r3, #19]
		cfg->tag = true;
  400f7a:	687b      	ldr	r3, [r7, #4]
  400f7c:	2201      	movs	r2, #1
  400f7e:	751a      	strb	r2, [r3, #20]
		cfg->stm = true;
  400f80:	687b      	ldr	r3, [r7, #4]
  400f82:	2201      	movs	r2, #1
  400f84:	755a      	strb	r2, [r3, #21]
		cfg->ibctl = 1;
  400f86:	687b      	ldr	r3, [r7, #4]
  400f88:	2201      	movs	r2, #1
  400f8a:	759a      	strb	r2, [r3, #22]
}
  400f8c:	3708      	adds	r7, #8
  400f8e:	46bd      	mov	sp, r7
  400f90:	bd80      	pop	{r7, pc}
  400f92:	bf00      	nop
  400f94:	00400d81 	.word	0x00400d81
  400f98:	005b8d80 	.word	0x005b8d80

00400f9c <afec_ch_get_config_defaults>:
 * - Gain value is 1
 *
 * \param cfg Pointer to channel configuration structure to be initiated.
 */
void afec_ch_get_config_defaults(struct afec_ch_config *const cfg)
{
  400f9c:	b480      	push	{r7}
  400f9e:	b083      	sub	sp, #12
  400fa0:	af00      	add	r7, sp, #0
  400fa2:	6078      	str	r0, [r7, #4]
	/*Sanity check argument. */
	Assert(cfg);

	cfg->diff = false;
  400fa4:	687b      	ldr	r3, [r7, #4]
  400fa6:	2200      	movs	r2, #0
  400fa8:	701a      	strb	r2, [r3, #0]
   	cfg->gain = AFEC_GAINVALUE_1;
  400faa:	687b      	ldr	r3, [r7, #4]
  400fac:	2201      	movs	r2, #1
  400fae:	705a      	strb	r2, [r3, #1]

}
  400fb0:	370c      	adds	r7, #12
  400fb2:	46bd      	mov	sp, r7
  400fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
  400fb8:	4770      	bx	lr
  400fba:	bf00      	nop

00400fbc <afec_init>:
 *
 * \retval STATUS_OK  Initialization is finished.
 * \retval STATUS_ERR_BUSY  Initialization failed.
 */
enum status_code afec_init(Afec *const afec, struct afec_config *config)
{
  400fbc:	b580      	push	{r7, lr}
  400fbe:	b084      	sub	sp, #16
  400fc0:	af00      	add	r7, sp, #0
  400fc2:	6078      	str	r0, [r7, #4]
  400fc4:	6039      	str	r1, [r7, #0]
	Assert(afec);
	Assert(config);

	if ((afec_get_interrupt_status(afec) & AFEC_ISR_DRDY) == AFEC_ISR_DRDY) {
  400fc6:	6878      	ldr	r0, [r7, #4]
  400fc8:	4b17      	ldr	r3, [pc, #92]	; (401028 <afec_init+0x6c>)
  400fca:	4798      	blx	r3
  400fcc:	4603      	mov	r3, r0
  400fce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  400fd2:	2b00      	cmp	r3, #0
  400fd4:	d001      	beq.n	400fda <afec_init+0x1e>
		return STATUS_ERR_BUSY;
  400fd6:	2319      	movs	r3, #25
  400fd8:	e021      	b.n	40101e <afec_init+0x62>
	}

	/* Reset and configure the AFEC module */
	afec->AFEC_CR = AFEC_CR_SWRST;
  400fda:	687b      	ldr	r3, [r7, #4]
  400fdc:	2201      	movs	r2, #1
  400fde:	601a      	str	r2, [r3, #0]
	afec_set_config(afec, config);
  400fe0:	6878      	ldr	r0, [r7, #4]
  400fe2:	6839      	ldr	r1, [r7, #0]
  400fe4:	4b11      	ldr	r3, [pc, #68]	; (40102c <afec_init+0x70>)
  400fe6:	4798      	blx	r3

	uint32_t i, j;
	for (i = 0; i < NUM_OF_AFEC; i++) {
  400fe8:	2300      	movs	r3, #0
  400fea:	60fb      	str	r3, [r7, #12]
  400fec:	e013      	b.n	401016 <afec_init+0x5a>
		for (j = 0; j < _AFEC_NUM_OF_INTERRUPT_SOURCE; j++) {
  400fee:	2300      	movs	r3, #0
  400ff0:	60bb      	str	r3, [r7, #8]
  400ff2:	e00a      	b.n	40100a <afec_init+0x4e>
			afec_callback_pointer[i][j] = 0;
  400ff4:	490e      	ldr	r1, [pc, #56]	; (401030 <afec_init+0x74>)
  400ff6:	68fb      	ldr	r3, [r7, #12]
  400ff8:	011a      	lsls	r2, r3, #4
  400ffa:	68bb      	ldr	r3, [r7, #8]
  400ffc:	4413      	add	r3, r2
  400ffe:	2200      	movs	r2, #0
  401000:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	afec->AFEC_CR = AFEC_CR_SWRST;
	afec_set_config(afec, config);

	uint32_t i, j;
	for (i = 0; i < NUM_OF_AFEC; i++) {
		for (j = 0; j < _AFEC_NUM_OF_INTERRUPT_SOURCE; j++) {
  401004:	68bb      	ldr	r3, [r7, #8]
  401006:	3301      	adds	r3, #1
  401008:	60bb      	str	r3, [r7, #8]
  40100a:	68bb      	ldr	r3, [r7, #8]
  40100c:	2b0f      	cmp	r3, #15
  40100e:	d9f1      	bls.n	400ff4 <afec_init+0x38>
	/* Reset and configure the AFEC module */
	afec->AFEC_CR = AFEC_CR_SWRST;
	afec_set_config(afec, config);

	uint32_t i, j;
	for (i = 0; i < NUM_OF_AFEC; i++) {
  401010:	68fb      	ldr	r3, [r7, #12]
  401012:	3301      	adds	r3, #1
  401014:	60fb      	str	r3, [r7, #12]
  401016:	68fb      	ldr	r3, [r7, #12]
  401018:	2b01      	cmp	r3, #1
  40101a:	d9e8      	bls.n	400fee <afec_init+0x32>
		for (j = 0; j < _AFEC_NUM_OF_INTERRUPT_SOURCE; j++) {
			afec_callback_pointer[i][j] = 0;
		}
	}

	return STATUS_OK;
  40101c:	2300      	movs	r3, #0
  40101e:	b25b      	sxtb	r3, r3
}
  401020:	4618      	mov	r0, r3
  401022:	3710      	adds	r7, #16
  401024:	46bd      	mov	sp, r7
  401026:	bd80      	pop	{r7, pc}
  401028:	00400c8d 	.word	0x00400c8d
  40102c:	00400e05 	.word	0x00400e05
  401030:	20400a10 	.word	0x20400a10

00401034 <afec_set_callback>:
 * \param callback  Callback function pointer
 * \param irq_level Interrupt level
 */
void afec_set_callback(Afec *const afec, enum afec_interrupt_source source,
		afec_callback_t callback, uint8_t irq_level)
{
  401034:	b580      	push	{r7, lr}
  401036:	b086      	sub	sp, #24
  401038:	af00      	add	r7, sp, #0
  40103a:	60f8      	str	r0, [r7, #12]
  40103c:	60b9      	str	r1, [r7, #8]
  40103e:	607a      	str	r2, [r7, #4]
  401040:	70fb      	strb	r3, [r7, #3]
	Assert(afec);
	Assert(callback);

	uint32_t i = afec_find_inst_num(afec);
  401042:	68f8      	ldr	r0, [r7, #12]
  401044:	4b17      	ldr	r3, [pc, #92]	; (4010a4 <afec_set_callback+0x70>)
  401046:	4798      	blx	r3
  401048:	6178      	str	r0, [r7, #20]
	afec_callback_pointer[i][source] = callback;
  40104a:	4917      	ldr	r1, [pc, #92]	; (4010a8 <afec_set_callback+0x74>)
  40104c:	697b      	ldr	r3, [r7, #20]
  40104e:	011a      	lsls	r2, r3, #4
  401050:	68bb      	ldr	r3, [r7, #8]
  401052:	4413      	add	r3, r2
  401054:	687a      	ldr	r2, [r7, #4]
  401056:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	if (!i) {
  40105a:	697b      	ldr	r3, [r7, #20]
  40105c:	2b00      	cmp	r3, #0
  40105e:	d10b      	bne.n	401078 <afec_set_callback+0x44>
		irq_register_handler(AFEC0_IRQn, irq_level);
  401060:	201d      	movs	r0, #29
  401062:	4b12      	ldr	r3, [pc, #72]	; (4010ac <afec_set_callback+0x78>)
  401064:	4798      	blx	r3
  401066:	78fb      	ldrb	r3, [r7, #3]
  401068:	201d      	movs	r0, #29
  40106a:	4619      	mov	r1, r3
  40106c:	4b10      	ldr	r3, [pc, #64]	; (4010b0 <afec_set_callback+0x7c>)
  40106e:	4798      	blx	r3
  401070:	201d      	movs	r0, #29
  401072:	4b10      	ldr	r3, [pc, #64]	; (4010b4 <afec_set_callback+0x80>)
  401074:	4798      	blx	r3
  401076:	e00d      	b.n	401094 <afec_set_callback+0x60>
	} else if (i == 1) {
  401078:	697b      	ldr	r3, [r7, #20]
  40107a:	2b01      	cmp	r3, #1
  40107c:	d10a      	bne.n	401094 <afec_set_callback+0x60>
		irq_register_handler(AFEC1_IRQn, irq_level);
  40107e:	2028      	movs	r0, #40	; 0x28
  401080:	4b0a      	ldr	r3, [pc, #40]	; (4010ac <afec_set_callback+0x78>)
  401082:	4798      	blx	r3
  401084:	78fb      	ldrb	r3, [r7, #3]
  401086:	2028      	movs	r0, #40	; 0x28
  401088:	4619      	mov	r1, r3
  40108a:	4b09      	ldr	r3, [pc, #36]	; (4010b0 <afec_set_callback+0x7c>)
  40108c:	4798      	blx	r3
  40108e:	2028      	movs	r0, #40	; 0x28
  401090:	4b08      	ldr	r3, [pc, #32]	; (4010b4 <afec_set_callback+0x80>)
  401092:	4798      	blx	r3
	}
	/* Enable the specified interrupt source */
	afec_enable_interrupt(afec, source);
  401094:	68f8      	ldr	r0, [r7, #12]
  401096:	68b9      	ldr	r1, [r7, #8]
  401098:	4b07      	ldr	r3, [pc, #28]	; (4010b8 <afec_set_callback+0x84>)
  40109a:	4798      	blx	r3
}
  40109c:	3718      	adds	r7, #24
  40109e:	46bd      	mov	sp, r7
  4010a0:	bd80      	pop	{r7, pc}
  4010a2:	bf00      	nop
  4010a4:	00400d95 	.word	0x00400d95
  4010a8:	20400a10 	.word	0x20400a10
  4010ac:	00400b65 	.word	0x00400b65
  4010b0:	00400b99 	.word	0x00400b99
  4010b4:	00400b35 	.word	0x00400b35
  4010b8:	004010bd 	.word	0x004010bd

004010bc <afec_enable_interrupt>:
 * \param afec  Base address of the AFEC.
 * \param interrupt_source Interrupts to be enabled.
 */
void afec_enable_interrupt(Afec *const afec,
		enum afec_interrupt_source interrupt_source)
{
  4010bc:	b480      	push	{r7}
  4010be:	b083      	sub	sp, #12
  4010c0:	af00      	add	r7, sp, #0
  4010c2:	6078      	str	r0, [r7, #4]
  4010c4:	6039      	str	r1, [r7, #0]
	if (interrupt_source == AFEC_INTERRUPT_ALL) {
  4010c6:	683b      	ldr	r3, [r7, #0]
  4010c8:	4a19      	ldr	r2, [pc, #100]	; (401130 <afec_enable_interrupt+0x74>)
  4010ca:	4293      	cmp	r3, r2
  4010cc:	d103      	bne.n	4010d6 <afec_enable_interrupt+0x1a>
		afec->AFEC_IER = AFEC_INTERRUPT_ALL;
  4010ce:	687b      	ldr	r3, [r7, #4]
  4010d0:	4a17      	ldr	r2, [pc, #92]	; (401130 <afec_enable_interrupt+0x74>)
  4010d2:	625a      	str	r2, [r3, #36]	; 0x24
		return;
  4010d4:	e026      	b.n	401124 <afec_enable_interrupt+0x68>
	}

	if (interrupt_source < AFEC_INTERRUPT_DATA_READY) {
  4010d6:	683b      	ldr	r3, [r7, #0]
  4010d8:	2b0b      	cmp	r3, #11
  4010da:	d80f      	bhi.n	4010fc <afec_enable_interrupt+0x40>
	  #if (SAMV71 || SAMV70 || SAME70 || SAMS70)
		if (interrupt_source == AFEC_INTERRUPT_EOC_11) {
  4010dc:	683b      	ldr	r3, [r7, #0]
  4010de:	2b0b      	cmp	r3, #11
  4010e0:	d104      	bne.n	4010ec <afec_enable_interrupt+0x30>
			afec->AFEC_IER = 1 << AFEC_TEMP_INT_SOURCE_NUM;
  4010e2:	687b      	ldr	r3, [r7, #4]
  4010e4:	f44f 6200 	mov.w	r2, #2048	; 0x800
  4010e8:	625a      	str	r2, [r3, #36]	; 0x24
  4010ea:	e01b      	b.n	401124 <afec_enable_interrupt+0x68>
	  #else
		if (interrupt_source == AFEC_INTERRUPT_EOC_15) {
			afec->AFEC_IER = 1 << AFEC_TEMP_INT_SOURCE_NUM;	  
	  #endif 
		} else {
			afec->AFEC_IER = 1 << interrupt_source;
  4010ec:	683b      	ldr	r3, [r7, #0]
  4010ee:	2201      	movs	r2, #1
  4010f0:	fa02 f303 	lsl.w	r3, r2, r3
  4010f4:	461a      	mov	r2, r3
  4010f6:	687b      	ldr	r3, [r7, #4]
  4010f8:	625a      	str	r2, [r3, #36]	; 0x24
  4010fa:	e013      	b.n	401124 <afec_enable_interrupt+0x68>
		}
	} else if (interrupt_source < AFEC_INTERRUPT_TEMP_CHANGE) {
  4010fc:	683b      	ldr	r3, [r7, #0]
  4010fe:	2b0e      	cmp	r3, #14
  401100:	d808      	bhi.n	401114 <afec_enable_interrupt+0x58>
		afec->AFEC_IER = 1 << (interrupt_source + AFEC_INTERRUPT_GAP1);
  401102:	683b      	ldr	r3, [r7, #0]
  401104:	330c      	adds	r3, #12
  401106:	461a      	mov	r2, r3
  401108:	2301      	movs	r3, #1
  40110a:	4093      	lsls	r3, r2
  40110c:	461a      	mov	r2, r3
  40110e:	687b      	ldr	r3, [r7, #4]
  401110:	625a      	str	r2, [r3, #36]	; 0x24
  401112:	e007      	b.n	401124 <afec_enable_interrupt+0x68>
	} else {
		afec->AFEC_IER = 1 << (interrupt_source + AFEC_INTERRUPT_GAP1
				+ AFEC_INTERRUPT_GAP2);
  401114:	683b      	ldr	r3, [r7, #0]
  401116:	330f      	adds	r3, #15
			afec->AFEC_IER = 1 << interrupt_source;
		}
	} else if (interrupt_source < AFEC_INTERRUPT_TEMP_CHANGE) {
		afec->AFEC_IER = 1 << (interrupt_source + AFEC_INTERRUPT_GAP1);
	} else {
		afec->AFEC_IER = 1 << (interrupt_source + AFEC_INTERRUPT_GAP1
  401118:	461a      	mov	r2, r3
  40111a:	2301      	movs	r3, #1
  40111c:	4093      	lsls	r3, r2
  40111e:	461a      	mov	r2, r3
  401120:	687b      	ldr	r3, [r7, #4]
  401122:	625a      	str	r2, [r3, #36]	; 0x24
				+ AFEC_INTERRUPT_GAP2);
	}
}
  401124:	370c      	adds	r7, #12
  401126:	46bd      	mov	sp, r7
  401128:	f85d 7b04 	ldr.w	r7, [sp], #4
  40112c:	4770      	bx	lr
  40112e:	bf00      	nop
  401130:	47000fff 	.word	0x47000fff

00401134 <afec_interrupt>:
 * \param inst_num AFEC instance number to handle interrupt for
 * \param source   Interrupt source number
 */
static void afec_interrupt(uint8_t inst_num,
		enum afec_interrupt_source source)
{
  401134:	b580      	push	{r7, lr}
  401136:	b082      	sub	sp, #8
  401138:	af00      	add	r7, sp, #0
  40113a:	4603      	mov	r3, r0
  40113c:	6039      	str	r1, [r7, #0]
  40113e:	71fb      	strb	r3, [r7, #7]
	if (afec_callback_pointer[inst_num][source]) {
  401140:	79fb      	ldrb	r3, [r7, #7]
  401142:	4909      	ldr	r1, [pc, #36]	; (401168 <afec_interrupt+0x34>)
  401144:	011a      	lsls	r2, r3, #4
  401146:	683b      	ldr	r3, [r7, #0]
  401148:	4413      	add	r3, r2
  40114a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
  40114e:	2b00      	cmp	r3, #0
  401150:	d007      	beq.n	401162 <afec_interrupt+0x2e>
		afec_callback_pointer[inst_num][source]();
  401152:	79fb      	ldrb	r3, [r7, #7]
  401154:	4904      	ldr	r1, [pc, #16]	; (401168 <afec_interrupt+0x34>)
  401156:	011a      	lsls	r2, r3, #4
  401158:	683b      	ldr	r3, [r7, #0]
  40115a:	4413      	add	r3, r2
  40115c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
  401160:	4798      	blx	r3
	}
}
  401162:	3708      	adds	r7, #8
  401164:	46bd      	mov	sp, r7
  401166:	bd80      	pop	{r7, pc}
  401168:	20400a10 	.word	0x20400a10

0040116c <afec_process_callback>:
 * \brief Call the callback function if the corresponding interrupt is asserted
 *
 * \param afec  Base address of the AFEC.
 */
static void afec_process_callback(Afec *const afec)
{
  40116c:	b580      	push	{r7, lr}
  40116e:	b086      	sub	sp, #24
  401170:	af00      	add	r7, sp, #0
  401172:	6078      	str	r0, [r7, #4]
	volatile uint32_t status;
	uint32_t cnt, inst_num;

	status = afec_get_interrupt_status(afec);
  401174:	6878      	ldr	r0, [r7, #4]
  401176:	4b25      	ldr	r3, [pc, #148]	; (40120c <afec_process_callback+0xa0>)
  401178:	4798      	blx	r3
  40117a:	4603      	mov	r3, r0
  40117c:	60fb      	str	r3, [r7, #12]
	inst_num = afec_find_inst_num(afec);
  40117e:	6878      	ldr	r0, [r7, #4]
  401180:	4b23      	ldr	r3, [pc, #140]	; (401210 <afec_process_callback+0xa4>)
  401182:	4798      	blx	r3
  401184:	6138      	str	r0, [r7, #16]

	for (cnt = 0; cnt < _AFEC_NUM_OF_INTERRUPT_SOURCE; cnt++) {
  401186:	2300      	movs	r3, #0
  401188:	617b      	str	r3, [r7, #20]
  40118a:	e039      	b.n	401200 <afec_process_callback+0x94>
		if (cnt < AFEC_INTERRUPT_DATA_READY) {
  40118c:	697b      	ldr	r3, [r7, #20]
  40118e:	2b0b      	cmp	r3, #11
  401190:	d80f      	bhi.n	4011b2 <afec_process_callback+0x46>
				if (status & (1 << cnt)) {
					afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
				}
			}
		#elif defined __SAM4E8E__  || defined __SAM4E16E__ || SAMV71 || SAMV70 || SAMS70 || SAME70
			if (status & (1 << cnt)) {
  401192:	697b      	ldr	r3, [r7, #20]
  401194:	2201      	movs	r2, #1
  401196:	fa02 f303 	lsl.w	r3, r2, r3
  40119a:	461a      	mov	r2, r3
  40119c:	68fb      	ldr	r3, [r7, #12]
  40119e:	4013      	ands	r3, r2
  4011a0:	2b00      	cmp	r3, #0
  4011a2:	d02a      	beq.n	4011fa <afec_process_callback+0x8e>
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
  4011a4:	693b      	ldr	r3, [r7, #16]
  4011a6:	b2db      	uxtb	r3, r3
  4011a8:	4618      	mov	r0, r3
  4011aa:	6979      	ldr	r1, [r7, #20]
  4011ac:	4b19      	ldr	r3, [pc, #100]	; (401214 <afec_process_callback+0xa8>)
  4011ae:	4798      	blx	r3
  4011b0:	e023      	b.n	4011fa <afec_process_callback+0x8e>
			}
		#endif
		} else if (cnt < AFEC_INTERRUPT_TEMP_CHANGE) {
  4011b2:	697b      	ldr	r3, [r7, #20]
  4011b4:	2b0e      	cmp	r3, #14
  4011b6:	d810      	bhi.n	4011da <afec_process_callback+0x6e>
			if (status & (1 << (cnt + AFEC_INTERRUPT_GAP1))) {
  4011b8:	697b      	ldr	r3, [r7, #20]
  4011ba:	330c      	adds	r3, #12
  4011bc:	461a      	mov	r2, r3
  4011be:	2301      	movs	r3, #1
  4011c0:	4093      	lsls	r3, r2
  4011c2:	461a      	mov	r2, r3
  4011c4:	68fb      	ldr	r3, [r7, #12]
  4011c6:	4013      	ands	r3, r2
  4011c8:	2b00      	cmp	r3, #0
  4011ca:	d016      	beq.n	4011fa <afec_process_callback+0x8e>
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
  4011cc:	693b      	ldr	r3, [r7, #16]
  4011ce:	b2db      	uxtb	r3, r3
  4011d0:	4618      	mov	r0, r3
  4011d2:	6979      	ldr	r1, [r7, #20]
  4011d4:	4b0f      	ldr	r3, [pc, #60]	; (401214 <afec_process_callback+0xa8>)
  4011d6:	4798      	blx	r3
  4011d8:	e00f      	b.n	4011fa <afec_process_callback+0x8e>
			}
		} else {
			if (status & (1 << (cnt + AFEC_INTERRUPT_GAP1 + AFEC_INTERRUPT_GAP2))) {
  4011da:	697b      	ldr	r3, [r7, #20]
  4011dc:	330f      	adds	r3, #15
  4011de:	461a      	mov	r2, r3
  4011e0:	2301      	movs	r3, #1
  4011e2:	4093      	lsls	r3, r2
  4011e4:	461a      	mov	r2, r3
  4011e6:	68fb      	ldr	r3, [r7, #12]
  4011e8:	4013      	ands	r3, r2
  4011ea:	2b00      	cmp	r3, #0
  4011ec:	d005      	beq.n	4011fa <afec_process_callback+0x8e>
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
  4011ee:	693b      	ldr	r3, [r7, #16]
  4011f0:	b2db      	uxtb	r3, r3
  4011f2:	4618      	mov	r0, r3
  4011f4:	6979      	ldr	r1, [r7, #20]
  4011f6:	4b07      	ldr	r3, [pc, #28]	; (401214 <afec_process_callback+0xa8>)
  4011f8:	4798      	blx	r3
	uint32_t cnt, inst_num;

	status = afec_get_interrupt_status(afec);
	inst_num = afec_find_inst_num(afec);

	for (cnt = 0; cnt < _AFEC_NUM_OF_INTERRUPT_SOURCE; cnt++) {
  4011fa:	697b      	ldr	r3, [r7, #20]
  4011fc:	3301      	adds	r3, #1
  4011fe:	617b      	str	r3, [r7, #20]
  401200:	697b      	ldr	r3, [r7, #20]
  401202:	2b0f      	cmp	r3, #15
  401204:	d9c2      	bls.n	40118c <afec_process_callback+0x20>
			if (status & (1 << (cnt + AFEC_INTERRUPT_GAP1 + AFEC_INTERRUPT_GAP2))) {
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
			}
		}
	}
}
  401206:	3718      	adds	r7, #24
  401208:	46bd      	mov	sp, r7
  40120a:	bd80      	pop	{r7, pc}
  40120c:	00400c8d 	.word	0x00400c8d
  401210:	00400d95 	.word	0x00400d95
  401214:	00401135 	.word	0x00401135

00401218 <AFEC0_Handler>:

/**
 * \brief Interrupt handler for AFEC0.
 */
void AFEC0_Handler(void)
{
  401218:	b580      	push	{r7, lr}
  40121a:	af00      	add	r7, sp, #0
	afec_process_callback(AFEC0);
  40121c:	4801      	ldr	r0, [pc, #4]	; (401224 <AFEC0_Handler+0xc>)
  40121e:	4b02      	ldr	r3, [pc, #8]	; (401228 <AFEC0_Handler+0x10>)
  401220:	4798      	blx	r3
}
  401222:	bd80      	pop	{r7, pc}
  401224:	4003c000 	.word	0x4003c000
  401228:	0040116d 	.word	0x0040116d

0040122c <AFEC1_Handler>:

/**
 * \brief Interrupt handler for AFEC1.
 */
void AFEC1_Handler(void)
{
  40122c:	b580      	push	{r7, lr}
  40122e:	af00      	add	r7, sp, #0
	afec_process_callback(AFEC1);
  401230:	4801      	ldr	r0, [pc, #4]	; (401238 <AFEC1_Handler+0xc>)
  401232:	4b02      	ldr	r3, [pc, #8]	; (40123c <AFEC1_Handler+0x10>)
  401234:	4798      	blx	r3
}
  401236:	bd80      	pop	{r7, pc}
  401238:	40064000 	.word	0x40064000
  40123c:	0040116d 	.word	0x0040116d

00401240 <afec_enable>:
 * \brief Enable AFEC Module.
 *
 * \param afec  Base address of the AFEC
 */
void afec_enable(Afec *const afec)
{
  401240:	b580      	push	{r7, lr}
  401242:	b084      	sub	sp, #16
  401244:	af00      	add	r7, sp, #0
  401246:	6078      	str	r0, [r7, #4]
	Assert(afec);
	uint32_t pid;

	pid = afec_find_pid(afec);
  401248:	6878      	ldr	r0, [r7, #4]
  40124a:	4b06      	ldr	r3, [pc, #24]	; (401264 <afec_enable+0x24>)
  40124c:	4798      	blx	r3
  40124e:	60f8      	str	r0, [r7, #12]
	/* Enable peripheral clock. */
	pmc_enable_periph_clk(pid);
  401250:	68f8      	ldr	r0, [r7, #12]
  401252:	4b05      	ldr	r3, [pc, #20]	; (401268 <afec_enable+0x28>)
  401254:	4798      	blx	r3
	sleepmgr_lock_mode(SLEEPMGR_SLEEP_WFI);
  401256:	2002      	movs	r0, #2
  401258:	4b04      	ldr	r3, [pc, #16]	; (40126c <afec_enable+0x2c>)
  40125a:	4798      	blx	r3
}
  40125c:	3710      	adds	r7, #16
  40125e:	46bd      	mov	sp, r7
  401260:	bd80      	pop	{r7, pc}
  401262:	bf00      	nop
  401264:	00400dcd 	.word	0x00400dcd
  401268:	00401681 	.word	0x00401681
  40126c:	00400ca5 	.word	0x00400ca5

00401270 <pio_get_interrupt_status>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
  401270:	b480      	push	{r7}
  401272:	b083      	sub	sp, #12
  401274:	af00      	add	r7, sp, #0
  401276:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_ISR;
  401278:	687b      	ldr	r3, [r7, #4]
  40127a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
  40127c:	4618      	mov	r0, r3
  40127e:	370c      	adds	r7, #12
  401280:	46bd      	mov	sp, r7
  401282:	f85d 7b04 	ldr.w	r7, [sp], #4
  401286:	4770      	bx	lr

00401288 <pio_get_interrupt_mask>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
  401288:	b480      	push	{r7}
  40128a:	b083      	sub	sp, #12
  40128c:	af00      	add	r7, sp, #0
  40128e:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_IMR;
  401290:	687b      	ldr	r3, [r7, #4]
  401292:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
  401294:	4618      	mov	r0, r3
  401296:	370c      	adds	r7, #12
  401298:	46bd      	mov	sp, r7
  40129a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40129e:	4770      	bx	lr

004012a0 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  4012a0:	b580      	push	{r7, lr}
  4012a2:	b084      	sub	sp, #16
  4012a4:	af00      	add	r7, sp, #0
  4012a6:	6078      	str	r0, [r7, #4]
  4012a8:	6039      	str	r1, [r7, #0]
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  4012aa:	6878      	ldr	r0, [r7, #4]
  4012ac:	4b24      	ldr	r3, [pc, #144]	; (401340 <pio_handler_process+0xa0>)
  4012ae:	4798      	blx	r3
  4012b0:	60f8      	str	r0, [r7, #12]
	status &= pio_get_interrupt_mask(p_pio);
  4012b2:	6878      	ldr	r0, [r7, #4]
  4012b4:	4b23      	ldr	r3, [pc, #140]	; (401344 <pio_handler_process+0xa4>)
  4012b6:	4798      	blx	r3
  4012b8:	4602      	mov	r2, r0
  4012ba:	68fb      	ldr	r3, [r7, #12]
  4012bc:	4013      	ands	r3, r2
  4012be:	60fb      	str	r3, [r7, #12]

	/* Check pending events */
	if (status != 0) {
  4012c0:	68fb      	ldr	r3, [r7, #12]
  4012c2:	2b00      	cmp	r3, #0
  4012c4:	d038      	beq.n	401338 <pio_handler_process+0x98>
		/* Find triggering source */
		i = 0;
  4012c6:	2300      	movs	r3, #0
  4012c8:	60bb      	str	r3, [r7, #8]
		while (status != 0) {
  4012ca:	e032      	b.n	401332 <pio_handler_process+0x92>
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  4012cc:	4a1e      	ldr	r2, [pc, #120]	; (401348 <pio_handler_process+0xa8>)
  4012ce:	68bb      	ldr	r3, [r7, #8]
  4012d0:	011b      	lsls	r3, r3, #4
  4012d2:	4413      	add	r3, r2
  4012d4:	681a      	ldr	r2, [r3, #0]
  4012d6:	683b      	ldr	r3, [r7, #0]
  4012d8:	429a      	cmp	r2, r3
  4012da:	d123      	bne.n	401324 <pio_handler_process+0x84>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  4012dc:	4a1a      	ldr	r2, [pc, #104]	; (401348 <pio_handler_process+0xa8>)
  4012de:	68bb      	ldr	r3, [r7, #8]
  4012e0:	011b      	lsls	r3, r3, #4
  4012e2:	4413      	add	r3, r2
  4012e4:	685a      	ldr	r2, [r3, #4]
  4012e6:	68fb      	ldr	r3, [r7, #12]
  4012e8:	4013      	ands	r3, r2
  4012ea:	2b00      	cmp	r3, #0
  4012ec:	d01a      	beq.n	401324 <pio_handler_process+0x84>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  4012ee:	4a16      	ldr	r2, [pc, #88]	; (401348 <pio_handler_process+0xa8>)
  4012f0:	68bb      	ldr	r3, [r7, #8]
  4012f2:	011b      	lsls	r3, r3, #4
  4012f4:	4413      	add	r3, r2
  4012f6:	3308      	adds	r3, #8
  4012f8:	685b      	ldr	r3, [r3, #4]
  4012fa:	4913      	ldr	r1, [pc, #76]	; (401348 <pio_handler_process+0xa8>)
  4012fc:	68ba      	ldr	r2, [r7, #8]
  4012fe:	0112      	lsls	r2, r2, #4
  401300:	440a      	add	r2, r1
  401302:	6810      	ldr	r0, [r2, #0]
  401304:	4910      	ldr	r1, [pc, #64]	; (401348 <pio_handler_process+0xa8>)
  401306:	68ba      	ldr	r2, [r7, #8]
  401308:	0112      	lsls	r2, r2, #4
  40130a:	440a      	add	r2, r1
  40130c:	6852      	ldr	r2, [r2, #4]
  40130e:	4611      	mov	r1, r2
  401310:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  401312:	4a0d      	ldr	r2, [pc, #52]	; (401348 <pio_handler_process+0xa8>)
  401314:	68bb      	ldr	r3, [r7, #8]
  401316:	011b      	lsls	r3, r3, #4
  401318:	4413      	add	r3, r2
  40131a:	685b      	ldr	r3, [r3, #4]
  40131c:	43db      	mvns	r3, r3
  40131e:	68fa      	ldr	r2, [r7, #12]
  401320:	4013      	ands	r3, r2
  401322:	60fb      	str	r3, [r7, #12]
				}
			}
			i++;
  401324:	68bb      	ldr	r3, [r7, #8]
  401326:	3301      	adds	r3, #1
  401328:	60bb      	str	r3, [r7, #8]
			if (i >= MAX_INTERRUPT_SOURCES) {
  40132a:	68bb      	ldr	r3, [r7, #8]
  40132c:	2b06      	cmp	r3, #6
  40132e:	d900      	bls.n	401332 <pio_handler_process+0x92>
				break;
  401330:	e002      	b.n	401338 <pio_handler_process+0x98>

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
  401332:	68fb      	ldr	r3, [r7, #12]
  401334:	2b00      	cmp	r3, #0
  401336:	d1c9      	bne.n	4012cc <pio_handler_process+0x2c>
		if (pio_capture_handler) {
			pio_capture_handler(p_pio);
		}
	}
#endif
}
  401338:	3710      	adds	r7, #16
  40133a:	46bd      	mov	sp, r7
  40133c:	bd80      	pop	{r7, pc}
  40133e:	bf00      	nop
  401340:	00401271 	.word	0x00401271
  401344:	00401289 	.word	0x00401289
  401348:	20400918 	.word	0x20400918

0040134c <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  40134c:	b580      	push	{r7, lr}
  40134e:	af00      	add	r7, sp, #0
	pio_handler_process(PIOA, ID_PIOA);
  401350:	4802      	ldr	r0, [pc, #8]	; (40135c <PIOA_Handler+0x10>)
  401352:	210a      	movs	r1, #10
  401354:	4b02      	ldr	r3, [pc, #8]	; (401360 <PIOA_Handler+0x14>)
  401356:	4798      	blx	r3
}
  401358:	bd80      	pop	{r7, pc}
  40135a:	bf00      	nop
  40135c:	400e0e00 	.word	0x400e0e00
  401360:	004012a1 	.word	0x004012a1

00401364 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  401364:	b580      	push	{r7, lr}
  401366:	af00      	add	r7, sp, #0
    pio_handler_process(PIOB, ID_PIOB);
  401368:	4802      	ldr	r0, [pc, #8]	; (401374 <PIOB_Handler+0x10>)
  40136a:	210b      	movs	r1, #11
  40136c:	4b02      	ldr	r3, [pc, #8]	; (401378 <PIOB_Handler+0x14>)
  40136e:	4798      	blx	r3
}
  401370:	bd80      	pop	{r7, pc}
  401372:	bf00      	nop
  401374:	400e1000 	.word	0x400e1000
  401378:	004012a1 	.word	0x004012a1

0040137c <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  40137c:	b580      	push	{r7, lr}
  40137e:	af00      	add	r7, sp, #0
	pio_handler_process(PIOC, ID_PIOC);
  401380:	4802      	ldr	r0, [pc, #8]	; (40138c <PIOC_Handler+0x10>)
  401382:	210c      	movs	r1, #12
  401384:	4b02      	ldr	r3, [pc, #8]	; (401390 <PIOC_Handler+0x14>)
  401386:	4798      	blx	r3
}
  401388:	bd80      	pop	{r7, pc}
  40138a:	bf00      	nop
  40138c:	400e1200 	.word	0x400e1200
  401390:	004012a1 	.word	0x004012a1

00401394 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  401394:	b580      	push	{r7, lr}
  401396:	af00      	add	r7, sp, #0
	pio_handler_process(PIOD, ID_PIOD);
  401398:	4802      	ldr	r0, [pc, #8]	; (4013a4 <PIOD_Handler+0x10>)
  40139a:	2110      	movs	r1, #16
  40139c:	4b02      	ldr	r3, [pc, #8]	; (4013a8 <PIOD_Handler+0x14>)
  40139e:	4798      	blx	r3
}
  4013a0:	bd80      	pop	{r7, pc}
  4013a2:	bf00      	nop
  4013a4:	400e1400 	.word	0x400e1400
  4013a8:	004012a1 	.word	0x004012a1

004013ac <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  4013ac:	b580      	push	{r7, lr}
  4013ae:	af00      	add	r7, sp, #0
	pio_handler_process(PIOE, ID_PIOE);
  4013b0:	4802      	ldr	r0, [pc, #8]	; (4013bc <PIOE_Handler+0x10>)
  4013b2:	2111      	movs	r1, #17
  4013b4:	4b02      	ldr	r3, [pc, #8]	; (4013c0 <PIOE_Handler+0x14>)
  4013b6:	4798      	blx	r3
}
  4013b8:	bd80      	pop	{r7, pc}
  4013ba:	bf00      	nop
  4013bc:	400e1600 	.word	0x400e1600
  4013c0:	004012a1 	.word	0x004012a1

004013c4 <pmc_mck_set_division>:
 * \brief Set the division of the MCK.
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
  4013c4:	b480      	push	{r7}
  4013c6:	b083      	sub	sp, #12
  4013c8:	af00      	add	r7, sp, #0
  4013ca:	6078      	str	r0, [r7, #4]
	switch (ul_div) {
  4013cc:	687b      	ldr	r3, [r7, #4]
  4013ce:	3b01      	subs	r3, #1
  4013d0:	2b03      	cmp	r3, #3
  4013d2:	d81a      	bhi.n	40140a <pmc_mck_set_division+0x46>
  4013d4:	a201      	add	r2, pc, #4	; (adr r2, 4013dc <pmc_mck_set_division+0x18>)
  4013d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4013da:	bf00      	nop
  4013dc:	004013ed 	.word	0x004013ed
  4013e0:	004013f3 	.word	0x004013f3
  4013e4:	004013fb 	.word	0x004013fb
  4013e8:	00401403 	.word	0x00401403
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  4013ec:	2300      	movs	r3, #0
  4013ee:	607b      	str	r3, [r7, #4]
			break;
  4013f0:	e00e      	b.n	401410 <pmc_mck_set_division+0x4c>
		case 2:
			ul_div = PMC_MCKR_MDIV_PCK_DIV2;
  4013f2:	f44f 7380 	mov.w	r3, #256	; 0x100
  4013f6:	607b      	str	r3, [r7, #4]
			break;
  4013f8:	e00a      	b.n	401410 <pmc_mck_set_division+0x4c>
		case 3:
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  4013fa:	f44f 7340 	mov.w	r3, #768	; 0x300
  4013fe:	607b      	str	r3, [r7, #4]
			break;
  401400:	e006      	b.n	401410 <pmc_mck_set_division+0x4c>
		case 4:
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  401402:	f44f 7300 	mov.w	r3, #512	; 0x200
  401406:	607b      	str	r3, [r7, #4]
			break;
  401408:	e002      	b.n	401410 <pmc_mck_set_division+0x4c>
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  40140a:	2300      	movs	r3, #0
  40140c:	607b      	str	r3, [r7, #4]
			break;
  40140e:	bf00      	nop
	}
	PMC->PMC_MCKR =
  401410:	4909      	ldr	r1, [pc, #36]	; (401438 <pmc_mck_set_division+0x74>)
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  401412:	4b09      	ldr	r3, [pc, #36]	; (401438 <pmc_mck_set_division+0x74>)
  401414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401416:	f423 7240 	bic.w	r2, r3, #768	; 0x300
  40141a:	687b      	ldr	r3, [r7, #4]
  40141c:	4313      	orrs	r3, r2
			break;
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
  40141e:	630b      	str	r3, [r1, #48]	; 0x30
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  401420:	bf00      	nop
  401422:	4b05      	ldr	r3, [pc, #20]	; (401438 <pmc_mck_set_division+0x74>)
  401424:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401426:	f003 0308 	and.w	r3, r3, #8
  40142a:	2b00      	cmp	r3, #0
  40142c:	d0f9      	beq.n	401422 <pmc_mck_set_division+0x5e>
}
  40142e:	370c      	adds	r7, #12
  401430:	46bd      	mov	sp, r7
  401432:	f85d 7b04 	ldr.w	r7, [sp], #4
  401436:	4770      	bx	lr
  401438:	400e0600 	.word	0x400e0600

0040143c <pmc_switch_mck_to_pllack>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
  40143c:	b480      	push	{r7}
  40143e:	b085      	sub	sp, #20
  401440:	af00      	add	r7, sp, #0
  401442:	6078      	str	r0, [r7, #4]
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  401444:	491d      	ldr	r1, [pc, #116]	; (4014bc <pmc_switch_mck_to_pllack+0x80>)
  401446:	4b1d      	ldr	r3, [pc, #116]	; (4014bc <pmc_switch_mck_to_pllack+0x80>)
  401448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40144a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
  40144e:	687b      	ldr	r3, [r7, #4]
  401450:	4313      	orrs	r3, r2
  401452:	630b      	str	r3, [r1, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401454:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  401458:	60fb      	str	r3, [r7, #12]
  40145a:	e007      	b.n	40146c <pmc_switch_mck_to_pllack+0x30>
			--ul_timeout) {
		if (ul_timeout == 0) {
  40145c:	68fb      	ldr	r3, [r7, #12]
  40145e:	2b00      	cmp	r3, #0
  401460:	d101      	bne.n	401466 <pmc_switch_mck_to_pllack+0x2a>
			return 1;
  401462:	2301      	movs	r3, #1
  401464:	e023      	b.n	4014ae <pmc_switch_mck_to_pllack+0x72>
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
  401466:	68fb      	ldr	r3, [r7, #12]
  401468:	3b01      	subs	r3, #1
  40146a:	60fb      	str	r3, [r7, #12]
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  40146c:	4b13      	ldr	r3, [pc, #76]	; (4014bc <pmc_switch_mck_to_pllack+0x80>)
  40146e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401470:	f003 0308 	and.w	r3, r3, #8
  401474:	2b00      	cmp	r3, #0
  401476:	d0f1      	beq.n	40145c <pmc_switch_mck_to_pllack+0x20>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  401478:	4a10      	ldr	r2, [pc, #64]	; (4014bc <pmc_switch_mck_to_pllack+0x80>)
  40147a:	4b10      	ldr	r3, [pc, #64]	; (4014bc <pmc_switch_mck_to_pllack+0x80>)
  40147c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40147e:	f023 0303 	bic.w	r3, r3, #3
  401482:	f043 0302 	orr.w	r3, r3, #2
  401486:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401488:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  40148c:	60fb      	str	r3, [r7, #12]
  40148e:	e007      	b.n	4014a0 <pmc_switch_mck_to_pllack+0x64>
			--ul_timeout) {
		if (ul_timeout == 0) {
  401490:	68fb      	ldr	r3, [r7, #12]
  401492:	2b00      	cmp	r3, #0
  401494:	d101      	bne.n	40149a <pmc_switch_mck_to_pllack+0x5e>
			return 1;
  401496:	2301      	movs	r3, #1
  401498:	e009      	b.n	4014ae <pmc_switch_mck_to_pllack+0x72>

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
  40149a:	68fb      	ldr	r3, [r7, #12]
  40149c:	3b01      	subs	r3, #1
  40149e:	60fb      	str	r3, [r7, #12]
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4014a0:	4b06      	ldr	r3, [pc, #24]	; (4014bc <pmc_switch_mck_to_pllack+0x80>)
  4014a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4014a4:	f003 0308 	and.w	r3, r3, #8
  4014a8:	2b00      	cmp	r3, #0
  4014aa:	d0f1      	beq.n	401490 <pmc_switch_mck_to_pllack+0x54>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
  4014ac:	2300      	movs	r3, #0
}
  4014ae:	4618      	mov	r0, r3
  4014b0:	3714      	adds	r7, #20
  4014b2:	46bd      	mov	sp, r7
  4014b4:	f85d 7b04 	ldr.w	r7, [sp], #4
  4014b8:	4770      	bx	lr
  4014ba:	bf00      	nop
  4014bc:	400e0600 	.word	0x400e0600

004014c0 <pmc_switch_sclk_to_32kxtal>:
 *       VDDIO power supply.
 *
 * \param ul_bypass 0 for Xtal, 1 for bypass.
 */
void pmc_switch_sclk_to_32kxtal(uint32_t ul_bypass)
{
  4014c0:	b480      	push	{r7}
  4014c2:	b083      	sub	sp, #12
  4014c4:	af00      	add	r7, sp, #0
  4014c6:	6078      	str	r0, [r7, #4]
	/* Set Bypass mode if required */
	if (ul_bypass == 1) {
  4014c8:	687b      	ldr	r3, [r7, #4]
  4014ca:	2b01      	cmp	r3, #1
  4014cc:	d105      	bne.n	4014da <pmc_switch_sclk_to_32kxtal+0x1a>
		SUPC->SUPC_MR |= SUPC_MR_KEY_PASSWD |
  4014ce:	4907      	ldr	r1, [pc, #28]	; (4014ec <pmc_switch_sclk_to_32kxtal+0x2c>)
  4014d0:	4b06      	ldr	r3, [pc, #24]	; (4014ec <pmc_switch_sclk_to_32kxtal+0x2c>)
  4014d2:	689a      	ldr	r2, [r3, #8]
  4014d4:	4b06      	ldr	r3, [pc, #24]	; (4014f0 <pmc_switch_sclk_to_32kxtal+0x30>)
  4014d6:	4313      	orrs	r3, r2
  4014d8:	608b      	str	r3, [r1, #8]
			SUPC_MR_OSCBYPASS;
	}

	SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_XTALSEL;
  4014da:	4b04      	ldr	r3, [pc, #16]	; (4014ec <pmc_switch_sclk_to_32kxtal+0x2c>)
  4014dc:	4a05      	ldr	r2, [pc, #20]	; (4014f4 <pmc_switch_sclk_to_32kxtal+0x34>)
  4014de:	601a      	str	r2, [r3, #0]
}
  4014e0:	370c      	adds	r7, #12
  4014e2:	46bd      	mov	sp, r7
  4014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
  4014e8:	4770      	bx	lr
  4014ea:	bf00      	nop
  4014ec:	400e1810 	.word	0x400e1810
  4014f0:	a5100000 	.word	0xa5100000
  4014f4:	a5000008 	.word	0xa5000008

004014f8 <pmc_osc_is_ready_32kxtal>:
 *
 * \retval 1 External 32k Xtal is ready.
 * \retval 0 External 32k Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_32kxtal(void)
{
  4014f8:	b480      	push	{r7}
  4014fa:	af00      	add	r7, sp, #0
	return ((SUPC->SUPC_SR & SUPC_SR_OSCSEL)
  4014fc:	4b09      	ldr	r3, [pc, #36]	; (401524 <pmc_osc_is_ready_32kxtal+0x2c>)
  4014fe:	695b      	ldr	r3, [r3, #20]
  401500:	f003 0380 	and.w	r3, r3, #128	; 0x80
			&& (PMC->PMC_SR & PMC_SR_OSCSELS));
  401504:	2b00      	cmp	r3, #0
  401506:	d007      	beq.n	401518 <pmc_osc_is_ready_32kxtal+0x20>
  401508:	4b07      	ldr	r3, [pc, #28]	; (401528 <pmc_osc_is_ready_32kxtal+0x30>)
  40150a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40150c:	f003 0380 	and.w	r3, r3, #128	; 0x80
  401510:	2b00      	cmp	r3, #0
  401512:	d001      	beq.n	401518 <pmc_osc_is_ready_32kxtal+0x20>
  401514:	2301      	movs	r3, #1
  401516:	e000      	b.n	40151a <pmc_osc_is_ready_32kxtal+0x22>
  401518:	2300      	movs	r3, #0
}
  40151a:	4618      	mov	r0, r3
  40151c:	46bd      	mov	sp, r7
  40151e:	f85d 7b04 	ldr.w	r7, [sp], #4
  401522:	4770      	bx	lr
  401524:	400e1810 	.word	0x400e1810
  401528:	400e0600 	.word	0x400e0600

0040152c <pmc_switch_mainck_to_fastrc>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 * \retval 2 Invalid frequency.
 */
void pmc_switch_mainck_to_fastrc(uint32_t ul_moscrcf)
{
  40152c:	b480      	push	{r7}
  40152e:	b083      	sub	sp, #12
  401530:	af00      	add	r7, sp, #0
  401532:	6078      	str	r0, [r7, #4]
	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	PMC->CKGR_MOR |= (CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCRCEN);
  401534:	4915      	ldr	r1, [pc, #84]	; (40158c <pmc_switch_mainck_to_fastrc+0x60>)
  401536:	4b15      	ldr	r3, [pc, #84]	; (40158c <pmc_switch_mainck_to_fastrc+0x60>)
  401538:	6a1a      	ldr	r2, [r3, #32]
  40153a:	4b15      	ldr	r3, [pc, #84]	; (401590 <pmc_switch_mainck_to_fastrc+0x64>)
  40153c:	4313      	orrs	r3, r2
  40153e:	620b      	str	r3, [r1, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  401540:	bf00      	nop
  401542:	4b12      	ldr	r3, [pc, #72]	; (40158c <pmc_switch_mainck_to_fastrc+0x60>)
  401544:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401546:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  40154a:	2b00      	cmp	r3, #0
  40154c:	d0f9      	beq.n	401542 <pmc_switch_mainck_to_fastrc+0x16>

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  40154e:	490f      	ldr	r1, [pc, #60]	; (40158c <pmc_switch_mainck_to_fastrc+0x60>)
  401550:	4b0e      	ldr	r3, [pc, #56]	; (40158c <pmc_switch_mainck_to_fastrc+0x60>)
  401552:	6a1a      	ldr	r2, [r3, #32]
  401554:	4b0f      	ldr	r3, [pc, #60]	; (401594 <pmc_switch_mainck_to_fastrc+0x68>)
  401556:	4013      	ands	r3, r2
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;
  401558:	687a      	ldr	r2, [r7, #4]
  40155a:	4313      	orrs	r3, r2
  40155c:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  401560:	620b      	str	r3, [r1, #32]
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  401562:	bf00      	nop
  401564:	4b09      	ldr	r3, [pc, #36]	; (40158c <pmc_switch_mainck_to_fastrc+0x60>)
  401566:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401568:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  40156c:	2b00      	cmp	r3, #0
  40156e:	d0f9      	beq.n	401564 <pmc_switch_mainck_to_fastrc+0x38>

	/* Switch to Fast RC */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
  401570:	4906      	ldr	r1, [pc, #24]	; (40158c <pmc_switch_mainck_to_fastrc+0x60>)
  401572:	4b06      	ldr	r3, [pc, #24]	; (40158c <pmc_switch_mainck_to_fastrc+0x60>)
  401574:	6a1a      	ldr	r2, [r3, #32]
  401576:	4b08      	ldr	r3, [pc, #32]	; (401598 <pmc_switch_mainck_to_fastrc+0x6c>)
  401578:	4013      	ands	r3, r2
  40157a:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  40157e:	620b      	str	r3, [r1, #32]
			CKGR_MOR_KEY_PASSWD;
}
  401580:	370c      	adds	r7, #12
  401582:	46bd      	mov	sp, r7
  401584:	f85d 7b04 	ldr.w	r7, [sp], #4
  401588:	4770      	bx	lr
  40158a:	bf00      	nop
  40158c:	400e0600 	.word	0x400e0600
  401590:	00370008 	.word	0x00370008
  401594:	ffc8ff8f 	.word	0xffc8ff8f
  401598:	fec8ffff 	.word	0xfec8ffff

0040159c <pmc_switch_mainck_to_xtal>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
  40159c:	b480      	push	{r7}
  40159e:	b083      	sub	sp, #12
  4015a0:	af00      	add	r7, sp, #0
  4015a2:	6078      	str	r0, [r7, #4]
  4015a4:	6039      	str	r1, [r7, #0]
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  4015a6:	687b      	ldr	r3, [r7, #4]
  4015a8:	2b00      	cmp	r3, #0
  4015aa:	d008      	beq.n	4015be <pmc_switch_mainck_to_xtal+0x22>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4015ac:	4913      	ldr	r1, [pc, #76]	; (4015fc <pmc_switch_mainck_to_xtal+0x60>)
  4015ae:	4b13      	ldr	r3, [pc, #76]	; (4015fc <pmc_switch_mainck_to_xtal+0x60>)
  4015b0:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  4015b2:	4a13      	ldr	r2, [pc, #76]	; (401600 <pmc_switch_mainck_to_xtal+0x64>)
  4015b4:	401a      	ands	r2, r3
  4015b6:	4b13      	ldr	r3, [pc, #76]	; (401604 <pmc_switch_mainck_to_xtal+0x68>)
  4015b8:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4015ba:	620b      	str	r3, [r1, #32]
  4015bc:	e018      	b.n	4015f0 <pmc_switch_mainck_to_xtal+0x54>
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4015be:	490f      	ldr	r1, [pc, #60]	; (4015fc <pmc_switch_mainck_to_xtal+0x60>)
  4015c0:	4b0e      	ldr	r3, [pc, #56]	; (4015fc <pmc_switch_mainck_to_xtal+0x60>)
  4015c2:	6a1a      	ldr	r2, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  4015c4:	4b10      	ldr	r3, [pc, #64]	; (401608 <pmc_switch_mainck_to_xtal+0x6c>)
  4015c6:	4013      	ands	r3, r2
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  4015c8:	683a      	ldr	r2, [r7, #0]
  4015ca:	0212      	lsls	r2, r2, #8
  4015cc:	b292      	uxth	r2, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  4015ce:	431a      	orrs	r2, r3
  4015d0:	4b0e      	ldr	r3, [pc, #56]	; (40160c <pmc_switch_mainck_to_xtal+0x70>)
  4015d2:	4313      	orrs	r3, r2
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4015d4:	620b      	str	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  4015d6:	bf00      	nop
  4015d8:	4b08      	ldr	r3, [pc, #32]	; (4015fc <pmc_switch_mainck_to_xtal+0x60>)
  4015da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4015dc:	f003 0301 	and.w	r3, r3, #1
  4015e0:	2b00      	cmp	r3, #0
  4015e2:	d0f9      	beq.n	4015d8 <pmc_switch_mainck_to_xtal+0x3c>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  4015e4:	4905      	ldr	r1, [pc, #20]	; (4015fc <pmc_switch_mainck_to_xtal+0x60>)
  4015e6:	4b05      	ldr	r3, [pc, #20]	; (4015fc <pmc_switch_mainck_to_xtal+0x60>)
  4015e8:	6a1a      	ldr	r2, [r3, #32]
  4015ea:	4b09      	ldr	r3, [pc, #36]	; (401610 <pmc_switch_mainck_to_xtal+0x74>)
  4015ec:	4313      	orrs	r3, r2
  4015ee:	620b      	str	r3, [r1, #32]
	}
}
  4015f0:	370c      	adds	r7, #12
  4015f2:	46bd      	mov	sp, r7
  4015f4:	f85d 7b04 	ldr.w	r7, [sp], #4
  4015f8:	4770      	bx	lr
  4015fa:	bf00      	nop
  4015fc:	400e0600 	.word	0x400e0600
  401600:	fec8fffc 	.word	0xfec8fffc
  401604:	01370002 	.word	0x01370002
  401608:	ffc8fffc 	.word	0xffc8fffc
  40160c:	00370001 	.word	0x00370001
  401610:	01370000 	.word	0x01370000

00401614 <pmc_osc_is_ready_mainck>:
 *
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
  401614:	b480      	push	{r7}
  401616:	af00      	add	r7, sp, #0
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  401618:	4b04      	ldr	r3, [pc, #16]	; (40162c <pmc_osc_is_ready_mainck+0x18>)
  40161a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40161c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
  401620:	4618      	mov	r0, r3
  401622:	46bd      	mov	sp, r7
  401624:	f85d 7b04 	ldr.w	r7, [sp], #4
  401628:	4770      	bx	lr
  40162a:	bf00      	nop
  40162c:	400e0600 	.word	0x400e0600

00401630 <pmc_disable_pllack>:

/**
 * \brief Disable PLLA clock.
 */
void pmc_disable_pllack(void)
{
  401630:	b480      	push	{r7}
  401632:	af00      	add	r7, sp, #0
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  401634:	4b03      	ldr	r3, [pc, #12]	; (401644 <pmc_disable_pllack+0x14>)
  401636:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  40163a:	629a      	str	r2, [r3, #40]	; 0x28
#endif
}
  40163c:	46bd      	mov	sp, r7
  40163e:	f85d 7b04 	ldr.w	r7, [sp], #4
  401642:	4770      	bx	lr
  401644:	400e0600 	.word	0x400e0600

00401648 <pmc_is_locked_pllack>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
  401648:	b480      	push	{r7}
  40164a:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  40164c:	4b04      	ldr	r3, [pc, #16]	; (401660 <pmc_is_locked_pllack+0x18>)
  40164e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401650:	f003 0302 	and.w	r3, r3, #2
}
  401654:	4618      	mov	r0, r3
  401656:	46bd      	mov	sp, r7
  401658:	f85d 7b04 	ldr.w	r7, [sp], #4
  40165c:	4770      	bx	lr
  40165e:	bf00      	nop
  401660:	400e0600 	.word	0x400e0600

00401664 <pmc_is_locked_upll>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_upll(void)
{
  401664:	b480      	push	{r7}
  401666:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKU);
  401668:	4b04      	ldr	r3, [pc, #16]	; (40167c <pmc_is_locked_upll+0x18>)
  40166a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40166c:	f003 0340 	and.w	r3, r3, #64	; 0x40
}
  401670:	4618      	mov	r0, r3
  401672:	46bd      	mov	sp, r7
  401674:	f85d 7b04 	ldr.w	r7, [sp], #4
  401678:	4770      	bx	lr
  40167a:	bf00      	nop
  40167c:	400e0600 	.word	0x400e0600

00401680 <pmc_enable_periph_clk>:
 *
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
  401680:	b480      	push	{r7}
  401682:	b083      	sub	sp, #12
  401684:	af00      	add	r7, sp, #0
  401686:	6078      	str	r0, [r7, #4]
	if (ul_id > MAX_PERIPH_ID) {
  401688:	687b      	ldr	r3, [r7, #4]
  40168a:	2b3f      	cmp	r3, #63	; 0x3f
  40168c:	d901      	bls.n	401692 <pmc_enable_periph_clk+0x12>
		return 1;
  40168e:	2301      	movs	r3, #1
  401690:	e02f      	b.n	4016f2 <pmc_enable_periph_clk+0x72>
	}

	if (ul_id < 32) {
  401692:	687b      	ldr	r3, [r7, #4]
  401694:	2b1f      	cmp	r3, #31
  401696:	d813      	bhi.n	4016c0 <pmc_enable_periph_clk+0x40>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  401698:	4b19      	ldr	r3, [pc, #100]	; (401700 <pmc_enable_periph_clk+0x80>)
  40169a:	699a      	ldr	r2, [r3, #24]
  40169c:	687b      	ldr	r3, [r7, #4]
  40169e:	2101      	movs	r1, #1
  4016a0:	fa01 f303 	lsl.w	r3, r1, r3
  4016a4:	401a      	ands	r2, r3
  4016a6:	687b      	ldr	r3, [r7, #4]
  4016a8:	2101      	movs	r1, #1
  4016aa:	fa01 f303 	lsl.w	r3, r1, r3
  4016ae:	429a      	cmp	r2, r3
  4016b0:	d01e      	beq.n	4016f0 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER0 = 1 << ul_id;
  4016b2:	4a13      	ldr	r2, [pc, #76]	; (401700 <pmc_enable_periph_clk+0x80>)
  4016b4:	687b      	ldr	r3, [r7, #4]
  4016b6:	2101      	movs	r1, #1
  4016b8:	fa01 f303 	lsl.w	r3, r1, r3
  4016bc:	6113      	str	r3, [r2, #16]
  4016be:	e017      	b.n	4016f0 <pmc_enable_periph_clk+0x70>
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
  4016c0:	687b      	ldr	r3, [r7, #4]
  4016c2:	3b20      	subs	r3, #32
  4016c4:	607b      	str	r3, [r7, #4]
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  4016c6:	4b0e      	ldr	r3, [pc, #56]	; (401700 <pmc_enable_periph_clk+0x80>)
  4016c8:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  4016cc:	687b      	ldr	r3, [r7, #4]
  4016ce:	2101      	movs	r1, #1
  4016d0:	fa01 f303 	lsl.w	r3, r1, r3
  4016d4:	401a      	ands	r2, r3
  4016d6:	687b      	ldr	r3, [r7, #4]
  4016d8:	2101      	movs	r1, #1
  4016da:	fa01 f303 	lsl.w	r3, r1, r3
  4016de:	429a      	cmp	r2, r3
  4016e0:	d006      	beq.n	4016f0 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER1 = 1 << ul_id;
  4016e2:	4a07      	ldr	r2, [pc, #28]	; (401700 <pmc_enable_periph_clk+0x80>)
  4016e4:	687b      	ldr	r3, [r7, #4]
  4016e6:	2101      	movs	r1, #1
  4016e8:	fa01 f303 	lsl.w	r3, r1, r3
  4016ec:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
		}
#endif
	}

	return 0;
  4016f0:	2300      	movs	r3, #0
}
  4016f2:	4618      	mov	r0, r3
  4016f4:	370c      	adds	r7, #12
  4016f6:	46bd      	mov	sp, r7
  4016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
  4016fc:	4770      	bx	lr
  4016fe:	bf00      	nop
  401700:	400e0600 	.word	0x400e0600

00401704 <pwm_clocks_generate>:
 *
 * \retval Return the value to be set in the PWM Clock Register (PWM Mode Register for
 * SAM3N/SAM4N/SAM4C/SAM4CP/SAM4CM) or PWM_INVALID_ARGUMENT if the configuration cannot be met.
 */
static uint32_t pwm_clocks_generate(uint32_t ul_frequency, uint32_t ul_mck)
{
  401704:	b4b0      	push	{r4, r5, r7}
  401706:	b091      	sub	sp, #68	; 0x44
  401708:	af00      	add	r7, sp, #0
  40170a:	6078      	str	r0, [r7, #4]
  40170c:	6039      	str	r1, [r7, #0]
	uint32_t ul_divisors[PWM_CLOCK_PRE_MAX] =
  40170e:	4b1b      	ldr	r3, [pc, #108]	; (40177c <pwm_clocks_generate+0x78>)
  401710:	f107 040c 	add.w	r4, r7, #12
  401714:	461d      	mov	r5, r3
  401716:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  401718:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  40171a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  40171c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  40171e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
  401722:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			{1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024 };
	uint32_t ul_pre = 0;
  401726:	2300      	movs	r3, #0
  401728:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	do {
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
  40172a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  40172c:	009b      	lsls	r3, r3, #2
  40172e:	f107 0240 	add.w	r2, r7, #64	; 0x40
  401732:	4413      	add	r3, r2
  401734:	f853 3c34 	ldr.w	r3, [r3, #-52]
  401738:	683a      	ldr	r2, [r7, #0]
  40173a:	fbb2 f2f3 	udiv	r2, r2, r3
  40173e:	687b      	ldr	r3, [r7, #4]
  401740:	fbb2 f3f3 	udiv	r3, r2, r3
  401744:	63bb      	str	r3, [r7, #56]	; 0x38
		if (ul_div <= PWM_CLOCK_DIV_MAX) {
  401746:	6bbb      	ldr	r3, [r7, #56]	; 0x38
  401748:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
  40174c:	d800      	bhi.n	401750 <pwm_clocks_generate+0x4c>
			break;
  40174e:	e005      	b.n	40175c <pwm_clocks_generate+0x58>
		}
		ul_pre++;
  401750:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  401752:	3301      	adds	r3, #1
  401754:	63fb      	str	r3, [r7, #60]	; 0x3c
	} while (ul_pre < PWM_CLOCK_PRE_MAX);
  401756:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  401758:	2b0a      	cmp	r3, #10
  40175a:	d9e6      	bls.n	40172a <pwm_clocks_generate+0x26>

	/* Return result */
	if (ul_pre < PWM_CLOCK_PRE_MAX) {
  40175c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  40175e:	2b0a      	cmp	r3, #10
  401760:	d804      	bhi.n	40176c <pwm_clocks_generate+0x68>
		return ul_div | (ul_pre << 8);
  401762:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  401764:	021a      	lsls	r2, r3, #8
  401766:	6bbb      	ldr	r3, [r7, #56]	; 0x38
  401768:	4313      	orrs	r3, r2
  40176a:	e001      	b.n	401770 <pwm_clocks_generate+0x6c>
	} else {
		return PWM_INVALID_ARGUMENT;
  40176c:	f64f 73ff 	movw	r3, #65535	; 0xffff
	}
}
  401770:	4618      	mov	r0, r3
  401772:	3744      	adds	r7, #68	; 0x44
  401774:	46bd      	mov	sp, r7
  401776:	bcb0      	pop	{r4, r5, r7}
  401778:	4770      	bx	lr
  40177a:	bf00      	nop
  40177c:	00409b28 	.word	0x00409b28

00401780 <pwm_init>:
 * \param clock_config PWM clock configuration.
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_init(Pwm *p_pwm, pwm_clock_t *clock_config)
{
  401780:	b580      	push	{r7, lr}
  401782:	b084      	sub	sp, #16
  401784:	af00      	add	r7, sp, #0
  401786:	6078      	str	r0, [r7, #4]
  401788:	6039      	str	r1, [r7, #0]
	uint32_t clock = 0;
  40178a:	2300      	movs	r3, #0
  40178c:	60fb      	str	r3, [r7, #12]
	uint32_t result;

	/* Clock A */
	if (clock_config->ul_clka != 0) {
  40178e:	683b      	ldr	r3, [r7, #0]
  401790:	681b      	ldr	r3, [r3, #0]
  401792:	2b00      	cmp	r3, #0
  401794:	d011      	beq.n	4017ba <pwm_init+0x3a>
		result = pwm_clocks_generate(clock_config->ul_clka, clock_config->ul_mck);
  401796:	683b      	ldr	r3, [r7, #0]
  401798:	681a      	ldr	r2, [r3, #0]
  40179a:	683b      	ldr	r3, [r7, #0]
  40179c:	689b      	ldr	r3, [r3, #8]
  40179e:	4610      	mov	r0, r2
  4017a0:	4619      	mov	r1, r3
  4017a2:	4b16      	ldr	r3, [pc, #88]	; (4017fc <pwm_init+0x7c>)
  4017a4:	4798      	blx	r3
  4017a6:	60b8      	str	r0, [r7, #8]
		if (result == PWM_INVALID_ARGUMENT) {
  4017a8:	68bb      	ldr	r3, [r7, #8]
  4017aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
  4017ae:	4293      	cmp	r3, r2
  4017b0:	d101      	bne.n	4017b6 <pwm_init+0x36>
			return result;
  4017b2:	68bb      	ldr	r3, [r7, #8]
  4017b4:	e01e      	b.n	4017f4 <pwm_init+0x74>
		}

		clock = result;
  4017b6:	68bb      	ldr	r3, [r7, #8]
  4017b8:	60fb      	str	r3, [r7, #12]
	}

	/* Clock B */
	if (clock_config->ul_clkb != 0) {
  4017ba:	683b      	ldr	r3, [r7, #0]
  4017bc:	685b      	ldr	r3, [r3, #4]
  4017be:	2b00      	cmp	r3, #0
  4017c0:	d014      	beq.n	4017ec <pwm_init+0x6c>
		result = pwm_clocks_generate(clock_config->ul_clkb, clock_config->ul_mck);
  4017c2:	683b      	ldr	r3, [r7, #0]
  4017c4:	685a      	ldr	r2, [r3, #4]
  4017c6:	683b      	ldr	r3, [r7, #0]
  4017c8:	689b      	ldr	r3, [r3, #8]
  4017ca:	4610      	mov	r0, r2
  4017cc:	4619      	mov	r1, r3
  4017ce:	4b0b      	ldr	r3, [pc, #44]	; (4017fc <pwm_init+0x7c>)
  4017d0:	4798      	blx	r3
  4017d2:	60b8      	str	r0, [r7, #8]

		if (result == PWM_INVALID_ARGUMENT) {
  4017d4:	68bb      	ldr	r3, [r7, #8]
  4017d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
  4017da:	4293      	cmp	r3, r2
  4017dc:	d101      	bne.n	4017e2 <pwm_init+0x62>
			return result;
  4017de:	68bb      	ldr	r3, [r7, #8]
  4017e0:	e008      	b.n	4017f4 <pwm_init+0x74>
		}

		clock |= (result << 16);
  4017e2:	68bb      	ldr	r3, [r7, #8]
  4017e4:	041b      	lsls	r3, r3, #16
  4017e6:	68fa      	ldr	r2, [r7, #12]
  4017e8:	4313      	orrs	r3, r2
  4017ea:	60fb      	str	r3, [r7, #12]
	}
#if (SAM3N || SAM4N || SAM4C || SAM4CP || SAM4CM)
	p_pwm->PWM_MR = clock;
#else
	p_pwm->PWM_CLK = clock;
  4017ec:	687b      	ldr	r3, [r7, #4]
  4017ee:	68fa      	ldr	r2, [r7, #12]
  4017f0:	601a      	str	r2, [r3, #0]
#endif
	return 0;
  4017f2:	2300      	movs	r3, #0
}
  4017f4:	4618      	mov	r0, r3
  4017f6:	3710      	adds	r7, #16
  4017f8:	46bd      	mov	sp, r7
  4017fa:	bd80      	pop	{r7, pc}
  4017fc:	00401705 	.word	0x00401705

00401800 <pwm_channel_init>:
 * \param p_channel Configurations of the specified PWM channel.
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_channel_init(Pwm *p_pwm, pwm_channel_t *p_channel)
{
  401800:	b480      	push	{r7}
  401802:	b087      	sub	sp, #28
  401804:	af00      	add	r7, sp, #0
  401806:	6078      	str	r0, [r7, #4]
  401808:	6039      	str	r1, [r7, #0]
	uint32_t tmp_reg = 0;
  40180a:	2300      	movs	r3, #0
  40180c:	617b      	str	r3, [r7, #20]
	uint32_t ch_num = p_channel->channel;
  40180e:	683b      	ldr	r3, [r7, #0]
  401810:	681b      	ldr	r3, [r3, #0]
  401812:	613b      	str	r3, [r7, #16]

	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
  401814:	683b      	ldr	r3, [r7, #0]
  401816:	685b      	ldr	r3, [r3, #4]
  401818:	f003 030f 	and.w	r3, r3, #15
			(p_channel->polarity << 9) |
  40181c:	683a      	ldr	r2, [r7, #0]
  40181e:	7a92      	ldrb	r2, [r2, #10]
  401820:	0252      	lsls	r2, r2, #9
{
	uint32_t tmp_reg = 0;
	uint32_t ch_num = p_channel->channel;

	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
  401822:	4313      	orrs	r3, r2
			(p_channel->polarity << 9) |
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
			(p_channel->counter_event) |
  401824:	683a      	ldr	r2, [r7, #0]
  401826:	8a92      	ldrh	r2, [r2, #20]
	uint32_t tmp_reg = 0;
	uint32_t ch_num = p_channel->channel;

	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
			(p_channel->polarity << 9) |
  401828:	4313      	orrs	r3, r2
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
			(p_channel->counter_event) |
			(p_channel->b_deadtime_generator << 16) |
  40182a:	683a      	ldr	r2, [r7, #0]
  40182c:	7d92      	ldrb	r2, [r2, #22]
  40182e:	0412      	lsls	r2, r2, #16

	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
			(p_channel->polarity << 9) |
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
			(p_channel->counter_event) |
  401830:	4313      	orrs	r3, r2
			(p_channel->b_deadtime_generator << 16) |
			(p_channel->b_pwmh_output_inverted << 17) |
  401832:	683a      	ldr	r2, [r7, #0]
  401834:	7dd2      	ldrb	r2, [r2, #23]
  401836:	0452      	lsls	r2, r2, #17
	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
			(p_channel->polarity << 9) |
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
			(p_channel->counter_event) |
			(p_channel->b_deadtime_generator << 16) |
  401838:	4313      	orrs	r3, r2
			(p_channel->b_pwmh_output_inverted << 17) |
			(p_channel->b_pwml_output_inverted << 18) |
  40183a:	683a      	ldr	r2, [r7, #0]
  40183c:	7e12      	ldrb	r2, [r2, #24]
  40183e:	0492      	lsls	r2, r2, #18
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
			(p_channel->polarity << 9) |
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
			(p_channel->counter_event) |
			(p_channel->b_deadtime_generator << 16) |
			(p_channel->b_pwmh_output_inverted << 17) |
  401840:	4313      	orrs	r3, r2
			(p_channel->b_pwml_output_inverted << 18) |
#endif
			(p_channel->alignment);
  401842:	683a      	ldr	r2, [r7, #0]
  401844:	8912      	ldrh	r2, [r2, #8]
{
	uint32_t tmp_reg = 0;
	uint32_t ch_num = p_channel->channel;

	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
  401846:	4313      	orrs	r3, r2
  401848:	617b      	str	r3, [r7, #20]
			(p_channel->b_deadtime_generator << 16) |
			(p_channel->b_pwmh_output_inverted << 17) |
			(p_channel->b_pwml_output_inverted << 18) |
#endif
			(p_channel->alignment);
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR = tmp_reg;
  40184a:	687a      	ldr	r2, [r7, #4]
  40184c:	693b      	ldr	r3, [r7, #16]
  40184e:	3310      	adds	r3, #16
  401850:	015b      	lsls	r3, r3, #5
  401852:	4413      	add	r3, r2
  401854:	697a      	ldr	r2, [r7, #20]
  401856:	601a      	str	r2, [r3, #0]

	/* Channel Duty Cycle Register */
	p_pwm->PWM_CH_NUM[ch_num].PWM_CDTY = p_channel->ul_duty;
  401858:	683b      	ldr	r3, [r7, #0]
  40185a:	68da      	ldr	r2, [r3, #12]
  40185c:	6879      	ldr	r1, [r7, #4]
  40185e:	693b      	ldr	r3, [r7, #16]
  401860:	3310      	adds	r3, #16
  401862:	015b      	lsls	r3, r3, #5
  401864:	440b      	add	r3, r1
  401866:	605a      	str	r2, [r3, #4]

	/* Channel Period Register */
	p_pwm->PWM_CH_NUM[ch_num].PWM_CPRD = p_channel->ul_period;
  401868:	683b      	ldr	r3, [r7, #0]
  40186a:	691a      	ldr	r2, [r3, #16]
  40186c:	6879      	ldr	r1, [r7, #4]
  40186e:	693b      	ldr	r3, [r7, #16]
  401870:	015b      	lsls	r3, r3, #5
  401872:	440b      	add	r3, r1
  401874:	f503 7302 	add.w	r3, r3, #520	; 0x208
  401878:	605a      	str	r2, [r3, #4]
	
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
	/* Channel Dead Time Register */
	if (p_channel->b_deadtime_generator) {
  40187a:	683b      	ldr	r3, [r7, #0]
  40187c:	7d9b      	ldrb	r3, [r3, #22]
  40187e:	2b00      	cmp	r3, #0
  401880:	d00d      	beq.n	40189e <pwm_channel_init+0x9e>
		p_pwm->PWM_CH_NUM[ch_num].PWM_DT =
				PWM_DT_DTL(p_channel->
  401882:	683b      	ldr	r3, [r7, #0]
  401884:	8b9b      	ldrh	r3, [r3, #28]
  401886:	041b      	lsls	r3, r3, #16
  401888:	461a      	mov	r2, r3
				us_deadtime_pwml) | PWM_DT_DTH(p_channel->
  40188a:	683b      	ldr	r3, [r7, #0]
  40188c:	8b5b      	ldrh	r3, [r3, #26]
  40188e:	431a      	orrs	r2, r3
	p_pwm->PWM_CH_NUM[ch_num].PWM_CPRD = p_channel->ul_period;
	
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
	/* Channel Dead Time Register */
	if (p_channel->b_deadtime_generator) {
		p_pwm->PWM_CH_NUM[ch_num].PWM_DT =
  401890:	6879      	ldr	r1, [r7, #4]
  401892:	693b      	ldr	r3, [r7, #16]
  401894:	015b      	lsls	r3, r3, #5
  401896:	440b      	add	r3, r1
  401898:	f503 7306 	add.w	r3, r3, #536	; 0x218
  40189c:	601a      	str	r2, [r3, #0]
				us_deadtime_pwml) | PWM_DT_DTH(p_channel->
				us_deadtime_pwmh);
	}

	/* Output Selection Register */
	tmp_reg  = p_pwm->PWM_OS & (~((PWM_OS_OSH0 | PWM_OS_OSL0) << ch_num));
  40189e:	687b      	ldr	r3, [r7, #4]
  4018a0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
  4018a2:	693b      	ldr	r3, [r7, #16]
  4018a4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
  4018a8:	fa01 f303 	lsl.w	r3, r1, r3
  4018ac:	43db      	mvns	r3, r3
  4018ae:	4013      	ands	r3, r2
  4018b0:	617b      	str	r3, [r7, #20]
	tmp_reg |= ((p_channel->output_selection.b_override_pwmh) << ch_num) |
  4018b2:	683b      	ldr	r3, [r7, #0]
  4018b4:	7f9b      	ldrb	r3, [r3, #30]
  4018b6:	461a      	mov	r2, r3
  4018b8:	693b      	ldr	r3, [r7, #16]
  4018ba:	409a      	lsls	r2, r3
			(((p_channel->output_selection.b_override_pwml) << ch_num)
  4018bc:	683b      	ldr	r3, [r7, #0]
  4018be:	7fdb      	ldrb	r3, [r3, #31]
  4018c0:	4619      	mov	r1, r3
  4018c2:	693b      	ldr	r3, [r7, #16]
  4018c4:	fa01 f303 	lsl.w	r3, r1, r3
					<< 16);
  4018c8:	041b      	lsls	r3, r3, #16
				us_deadtime_pwmh);
	}

	/* Output Selection Register */
	tmp_reg  = p_pwm->PWM_OS & (~((PWM_OS_OSH0 | PWM_OS_OSL0) << ch_num));
	tmp_reg |= ((p_channel->output_selection.b_override_pwmh) << ch_num) |
  4018ca:	4313      	orrs	r3, r2
  4018cc:	461a      	mov	r2, r3
  4018ce:	697b      	ldr	r3, [r7, #20]
  4018d0:	4313      	orrs	r3, r2
  4018d2:	617b      	str	r3, [r7, #20]
			(((p_channel->output_selection.b_override_pwml) << ch_num)
					<< 16);
	p_pwm->PWM_OS = tmp_reg;
  4018d4:	687b      	ldr	r3, [r7, #4]
  4018d6:	697a      	ldr	r2, [r7, #20]
  4018d8:	649a      	str	r2, [r3, #72]	; 0x48

	/* Output Override Value Register */
	tmp_reg  = p_pwm->PWM_OOV & (~((PWM_OOV_OOVH0 | PWM_OOV_OOVL0) << ch_num));
  4018da:	687b      	ldr	r3, [r7, #4]
  4018dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
  4018de:	693b      	ldr	r3, [r7, #16]
  4018e0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
  4018e4:	fa01 f303 	lsl.w	r3, r1, r3
  4018e8:	43db      	mvns	r3, r3
  4018ea:	4013      	ands	r3, r2
  4018ec:	617b      	str	r3, [r7, #20]
	tmp_reg |= ((p_channel->output_selection.override_level_pwmh) << ch_num) |
  4018ee:	683b      	ldr	r3, [r7, #0]
  4018f0:	f893 3020 	ldrb.w	r3, [r3, #32]
  4018f4:	461a      	mov	r2, r3
  4018f6:	693b      	ldr	r3, [r7, #16]
  4018f8:	409a      	lsls	r2, r3
			(((p_channel->output_selection.override_level_pwml) << ch_num)
  4018fa:	683b      	ldr	r3, [r7, #0]
  4018fc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
  401900:	4619      	mov	r1, r3
  401902:	693b      	ldr	r3, [r7, #16]
  401904:	fa01 f303 	lsl.w	r3, r1, r3
					<< 16);
  401908:	041b      	lsls	r3, r3, #16
					<< 16);
	p_pwm->PWM_OS = tmp_reg;

	/* Output Override Value Register */
	tmp_reg  = p_pwm->PWM_OOV & (~((PWM_OOV_OOVH0 | PWM_OOV_OOVL0) << ch_num));
	tmp_reg |= ((p_channel->output_selection.override_level_pwmh) << ch_num) |
  40190a:	4313      	orrs	r3, r2
  40190c:	461a      	mov	r2, r3
  40190e:	697b      	ldr	r3, [r7, #20]
  401910:	4313      	orrs	r3, r2
  401912:	617b      	str	r3, [r7, #20]
			(((p_channel->output_selection.override_level_pwml) << ch_num)
					<< 16);
	p_pwm->PWM_OOV = tmp_reg;
  401914:	687b      	ldr	r3, [r7, #4]
  401916:	697a      	ldr	r2, [r7, #20]
  401918:	645a      	str	r2, [r3, #68]	; 0x44

	/* Sync Channels Mode Register */
	uint32_t channel = (1 << ch_num);
  40191a:	693b      	ldr	r3, [r7, #16]
  40191c:	2201      	movs	r2, #1
  40191e:	fa02 f303 	lsl.w	r3, r2, r3
  401922:	60fb      	str	r3, [r7, #12]
	if (p_channel->b_sync_ch) {
  401924:	683b      	ldr	r3, [r7, #0]
  401926:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
  40192a:	2b00      	cmp	r3, #0
  40192c:	d006      	beq.n	40193c <pwm_channel_init+0x13c>
		p_pwm->PWM_SCM |= channel;
  40192e:	687b      	ldr	r3, [r7, #4]
  401930:	6a1a      	ldr	r2, [r3, #32]
  401932:	68fb      	ldr	r3, [r7, #12]
  401934:	431a      	orrs	r2, r3
  401936:	687b      	ldr	r3, [r7, #4]
  401938:	621a      	str	r2, [r3, #32]
  40193a:	e006      	b.n	40194a <pwm_channel_init+0x14a>
	} else {
		p_pwm->PWM_SCM &= ~((uint32_t) channel);
  40193c:	687b      	ldr	r3, [r7, #4]
  40193e:	6a1a      	ldr	r2, [r3, #32]
  401940:	68fb      	ldr	r3, [r7, #12]
  401942:	43db      	mvns	r3, r3
  401944:	401a      	ands	r2, r3
  401946:	687b      	ldr	r3, [r7, #4]
  401948:	621a      	str	r2, [r3, #32]
	}

	/* Fault Protection Value Register */
#if (SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
	if (p_channel->ul_fault_output_pwmh == PWM_HIGHZ) {
  40194a:	683b      	ldr	r3, [r7, #0]
  40194c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
  401950:	2b02      	cmp	r3, #2
  401952:	d10b      	bne.n	40196c <pwm_channel_init+0x16c>
		p_pwm->PWM_FPV2 |= (0x01 << ch_num);
  401954:	687b      	ldr	r3, [r7, #4]
  401956:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
  40195a:	693a      	ldr	r2, [r7, #16]
  40195c:	2101      	movs	r1, #1
  40195e:	fa01 f202 	lsl.w	r2, r1, r2
  401962:	431a      	orrs	r2, r3
  401964:	687b      	ldr	r3, [r7, #4]
  401966:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  40196a:	e024      	b.n	4019b6 <pwm_channel_init+0x1b6>
	} else {
		p_pwm->PWM_FPV2 &= ~(0x01 << ch_num);
  40196c:	687b      	ldr	r3, [r7, #4]
  40196e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
  401972:	693a      	ldr	r2, [r7, #16]
  401974:	2101      	movs	r1, #1
  401976:	fa01 f202 	lsl.w	r2, r1, r2
  40197a:	43d2      	mvns	r2, r2
  40197c:	401a      	ands	r2, r3
  40197e:	687b      	ldr	r3, [r7, #4]
  401980:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		if (p_channel->ul_fault_output_pwmh == PWM_HIGH) {
  401984:	683b      	ldr	r3, [r7, #0]
  401986:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
  40198a:	2b01      	cmp	r3, #1
  40198c:	d109      	bne.n	4019a2 <pwm_channel_init+0x1a2>
			p_pwm->PWM_FPV1 |= (0x01 << ch_num);
  40198e:	687b      	ldr	r3, [r7, #4]
  401990:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401992:	693a      	ldr	r2, [r7, #16]
  401994:	2101      	movs	r1, #1
  401996:	fa01 f202 	lsl.w	r2, r1, r2
  40199a:	431a      	orrs	r2, r3
  40199c:	687b      	ldr	r3, [r7, #4]
  40199e:	669a      	str	r2, [r3, #104]	; 0x68
  4019a0:	e009      	b.n	4019b6 <pwm_channel_init+0x1b6>
		} else {
			p_pwm->PWM_FPV1 &= (~(0x01 << ch_num));
  4019a2:	687b      	ldr	r3, [r7, #4]
  4019a4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4019a6:	693a      	ldr	r2, [r7, #16]
  4019a8:	2101      	movs	r1, #1
  4019aa:	fa01 f202 	lsl.w	r2, r1, r2
  4019ae:	43d2      	mvns	r2, r2
  4019b0:	401a      	ands	r2, r3
  4019b2:	687b      	ldr	r3, [r7, #4]
  4019b4:	669a      	str	r2, [r3, #104]	; 0x68
		}
	}
	if (p_channel->ul_fault_output_pwml == PWM_HIGHZ) {
  4019b6:	683b      	ldr	r3, [r7, #0]
  4019b8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
  4019bc:	2b02      	cmp	r3, #2
  4019be:	d10c      	bne.n	4019da <pwm_channel_init+0x1da>
		p_pwm->PWM_FPV2 |= ((0x01 << ch_num) << 16);
  4019c0:	687b      	ldr	r3, [r7, #4]
  4019c2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
  4019c6:	693a      	ldr	r2, [r7, #16]
  4019c8:	2101      	movs	r1, #1
  4019ca:	fa01 f202 	lsl.w	r2, r1, r2
  4019ce:	0412      	lsls	r2, r2, #16
  4019d0:	431a      	orrs	r2, r3
  4019d2:	687b      	ldr	r3, [r7, #4]
  4019d4:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  4019d8:	e027      	b.n	401a2a <pwm_channel_init+0x22a>
	} else {
		p_pwm->PWM_FPV2 &= ~((0x01 << ch_num) << 16);
  4019da:	687b      	ldr	r3, [r7, #4]
  4019dc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
  4019e0:	693a      	ldr	r2, [r7, #16]
  4019e2:	2101      	movs	r1, #1
  4019e4:	fa01 f202 	lsl.w	r2, r1, r2
  4019e8:	0412      	lsls	r2, r2, #16
  4019ea:	43d2      	mvns	r2, r2
  4019ec:	401a      	ands	r2, r3
  4019ee:	687b      	ldr	r3, [r7, #4]
  4019f0:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		if (p_channel->ul_fault_output_pwml == PWM_HIGH) {
  4019f4:	683b      	ldr	r3, [r7, #0]
  4019f6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
  4019fa:	2b01      	cmp	r3, #1
  4019fc:	d10a      	bne.n	401a14 <pwm_channel_init+0x214>
			p_pwm->PWM_FPV1 |= ((0x01 << ch_num) << 16);
  4019fe:	687b      	ldr	r3, [r7, #4]
  401a00:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401a02:	693a      	ldr	r2, [r7, #16]
  401a04:	2101      	movs	r1, #1
  401a06:	fa01 f202 	lsl.w	r2, r1, r2
  401a0a:	0412      	lsls	r2, r2, #16
  401a0c:	431a      	orrs	r2, r3
  401a0e:	687b      	ldr	r3, [r7, #4]
  401a10:	669a      	str	r2, [r3, #104]	; 0x68
  401a12:	e00a      	b.n	401a2a <pwm_channel_init+0x22a>
		} else {
			p_pwm->PWM_FPV1 &= (~((0x01 << ch_num) << 16));
  401a14:	687b      	ldr	r3, [r7, #4]
  401a16:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401a18:	693a      	ldr	r2, [r7, #16]
  401a1a:	2101      	movs	r1, #1
  401a1c:	fa01 f202 	lsl.w	r2, r1, r2
  401a20:	0412      	lsls	r2, r2, #16
  401a22:	43d2      	mvns	r2, r2
  401a24:	401a      	ands	r2, r3
  401a26:	687b      	ldr	r3, [r7, #4]
  401a28:	669a      	str	r2, [r3, #104]	; 0x68
	} else {
		p_pwm->PWM_FPV &= (~((0x01 << ch_num) << 16));
	}
#endif
	/* Fault Protection Enable Register */
	uint32_t fault_enable_reg = 0;
  401a2a:	2300      	movs	r3, #0
  401a2c:	60bb      	str	r3, [r7, #8]
		p_pwm->PWM_FPE2 = fault_enable_reg;
	}
#endif

#if (SAM3U || SAM3S || SAM4S || SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
	ch_num *= 8;
  401a2e:	693b      	ldr	r3, [r7, #16]
  401a30:	00db      	lsls	r3, r3, #3
  401a32:	613b      	str	r3, [r7, #16]
	fault_enable_reg = p_pwm->PWM_FPE;
  401a34:	687b      	ldr	r3, [r7, #4]
  401a36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
  401a38:	60bb      	str	r3, [r7, #8]
	fault_enable_reg &= ~(0xFF << ch_num);
  401a3a:	693b      	ldr	r3, [r7, #16]
  401a3c:	22ff      	movs	r2, #255	; 0xff
  401a3e:	fa02 f303 	lsl.w	r3, r2, r3
  401a42:	43db      	mvns	r3, r3
  401a44:	461a      	mov	r2, r3
  401a46:	68bb      	ldr	r3, [r7, #8]
  401a48:	4013      	ands	r3, r2
  401a4a:	60bb      	str	r3, [r7, #8]
	fault_enable_reg |= ((p_channel->fault_id) << ch_num);
  401a4c:	683b      	ldr	r3, [r7, #0]
  401a4e:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
  401a52:	461a      	mov	r2, r3
  401a54:	693b      	ldr	r3, [r7, #16]
  401a56:	fa02 f303 	lsl.w	r3, r2, r3
  401a5a:	461a      	mov	r2, r3
  401a5c:	68bb      	ldr	r3, [r7, #8]
  401a5e:	4313      	orrs	r3, r2
  401a60:	60bb      	str	r3, [r7, #8]
	p_pwm->PWM_FPE = fault_enable_reg;
  401a62:	687b      	ldr	r3, [r7, #4]
  401a64:	68ba      	ldr	r2, [r7, #8]
  401a66:	66da      	str	r2, [r3, #108]	; 0x6c
	}
	p_pwm->PWM_CH_NUM_0X400[ch_num].PWM_CAE =
			PWM_CAE_ADEDGV(p_channel->ul_additional_edge) |
			p_channel->additional_edge_mode;
#elif (SAMV70 || SAMV71 || SAME70 || SAMS70)
	if (!ch_num) {
  401a68:	693b      	ldr	r3, [r7, #16]
  401a6a:	2b00      	cmp	r3, #0
  401a6c:	d115      	bne.n	401a9a <pwm_channel_init+0x29a>
		if (p_channel->spread_spectrum_mode ==
  401a6e:	683b      	ldr	r3, [r7, #0]
  401a70:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
  401a74:	2b01      	cmp	r3, #1
  401a76:	d109      	bne.n	401a8c <pwm_channel_init+0x28c>
		PWM_SPREAD_SPECTRUM_MODE_RANDOM) {
			p_pwm->PWM_SSPR = PWM_SSPR_SPRD(p_channel->ul_spread) |
  401a78:	683b      	ldr	r3, [r7, #0]
  401a7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  401a7c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  401a80:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
  401a84:	687b      	ldr	r3, [r7, #4]
  401a86:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  401a8a:	e006      	b.n	401a9a <pwm_channel_init+0x29a>
			PWM_SSPR_SPRDM;
			} else {
			p_pwm->PWM_SSPR = PWM_SSPR_SPRD(p_channel->ul_spread);
  401a8c:	683b      	ldr	r3, [r7, #0]
  401a8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  401a90:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
  401a94:	687b      	ldr	r3, [r7, #4]
  401a96:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		}
	}
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR &= (~PWM_CMR_PPM);
  401a9a:	687a      	ldr	r2, [r7, #4]
  401a9c:	693b      	ldr	r3, [r7, #16]
  401a9e:	3310      	adds	r3, #16
  401aa0:	015b      	lsls	r3, r3, #5
  401aa2:	4413      	add	r3, r2
  401aa4:	681b      	ldr	r3, [r3, #0]
  401aa6:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
  401aaa:	6879      	ldr	r1, [r7, #4]
  401aac:	693b      	ldr	r3, [r7, #16]
  401aae:	3310      	adds	r3, #16
  401ab0:	015b      	lsls	r3, r3, #5
  401ab2:	440b      	add	r3, r1
  401ab4:	601a      	str	r2, [r3, #0]
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR |= (p_channel->ul_ppm_mode & PWM_CMR_PPM);
  401ab6:	687a      	ldr	r2, [r7, #4]
  401ab8:	693b      	ldr	r3, [r7, #16]
  401aba:	3310      	adds	r3, #16
  401abc:	015b      	lsls	r3, r3, #5
  401abe:	4413      	add	r3, r2
  401ac0:	681a      	ldr	r2, [r3, #0]
  401ac2:	683b      	ldr	r3, [r7, #0]
  401ac4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  401ac6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
  401aca:	431a      	orrs	r2, r3
  401acc:	6879      	ldr	r1, [r7, #4]
  401ace:	693b      	ldr	r3, [r7, #16]
  401ad0:	3310      	adds	r3, #16
  401ad2:	015b      	lsls	r3, r3, #5
  401ad4:	440b      	add	r3, r1
  401ad6:	601a      	str	r2, [r3, #0]
#endif

	return 0;
  401ad8:	2300      	movs	r3, #0
}
  401ada:	4618      	mov	r0, r3
  401adc:	371c      	adds	r7, #28
  401ade:	46bd      	mov	sp, r7
  401ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
  401ae4:	4770      	bx	lr
  401ae6:	bf00      	nop

00401ae8 <pwm_channel_update_duty>:
 *
 * \retval 0 if changing succeeds, otherwise fails.
 */
uint32_t pwm_channel_update_duty(Pwm *p_pwm, pwm_channel_t *p_channel,
		uint32_t ul_duty)
{
  401ae8:	b480      	push	{r7}
  401aea:	b087      	sub	sp, #28
  401aec:	af00      	add	r7, sp, #0
  401aee:	60f8      	str	r0, [r7, #12]
  401af0:	60b9      	str	r1, [r7, #8]
  401af2:	607a      	str	r2, [r7, #4]
	uint32_t ch_num = p_channel->channel;
  401af4:	68bb      	ldr	r3, [r7, #8]
  401af6:	681b      	ldr	r3, [r3, #0]
  401af8:	617b      	str	r3, [r7, #20]

		/** Check parameter */
	if (p_channel->ul_period < ul_duty) {
  401afa:	68bb      	ldr	r3, [r7, #8]
  401afc:	691a      	ldr	r2, [r3, #16]
  401afe:	687b      	ldr	r3, [r7, #4]
  401b00:	429a      	cmp	r2, r3
  401b02:	d202      	bcs.n	401b0a <pwm_channel_update_duty+0x22>
		return PWM_INVALID_ARGUMENT;
  401b04:	f64f 73ff 	movw	r3, #65535	; 0xffff
  401b08:	e00b      	b.n	401b22 <pwm_channel_update_duty+0x3a>
	} else {
		/* Save new duty cycle value */
		p_channel->ul_duty = ul_duty;
  401b0a:	68bb      	ldr	r3, [r7, #8]
  401b0c:	687a      	ldr	r2, [r7, #4]
  401b0e:	60da      	str	r2, [r3, #12]
		mode &= ~PWM_CMR_CPD;
		p_pwm->PWM_CH_NUM[ch_num].PWM_CMR = mode;

		p_pwm->PWM_CH_NUM[ch_num].PWM_CUPD = ul_duty;
#else
		p_pwm->PWM_CH_NUM[ch_num].PWM_CDTYUPD = ul_duty;
  401b10:	68fa      	ldr	r2, [r7, #12]
  401b12:	697b      	ldr	r3, [r7, #20]
  401b14:	015b      	lsls	r3, r3, #5
  401b16:	4413      	add	r3, r2
  401b18:	f503 7302 	add.w	r3, r3, #520	; 0x208
  401b1c:	687a      	ldr	r2, [r7, #4]
  401b1e:	601a      	str	r2, [r3, #0]
#endif
	}

	return 0;
  401b20:	2300      	movs	r3, #0
}
  401b22:	4618      	mov	r0, r3
  401b24:	371c      	adds	r7, #28
  401b26:	46bd      	mov	sp, r7
  401b28:	f85d 7b04 	ldr.w	r7, [sp], #4
  401b2c:	4770      	bx	lr
  401b2e:	bf00      	nop

00401b30 <pwm_channel_enable>:
 *
 * \param p_pwm Pointer to a PWM instance.
 * \param ul_channel PWM channel number to enable.
 */
void pwm_channel_enable(Pwm *p_pwm, uint32_t ul_channel)
{
  401b30:	b480      	push	{r7}
  401b32:	b083      	sub	sp, #12
  401b34:	af00      	add	r7, sp, #0
  401b36:	6078      	str	r0, [r7, #4]
  401b38:	6039      	str	r1, [r7, #0]
	p_pwm->PWM_ENA = (1 << ul_channel);
  401b3a:	683b      	ldr	r3, [r7, #0]
  401b3c:	2201      	movs	r2, #1
  401b3e:	fa02 f303 	lsl.w	r3, r2, r3
  401b42:	461a      	mov	r2, r3
  401b44:	687b      	ldr	r3, [r7, #4]
  401b46:	605a      	str	r2, [r3, #4]
}
  401b48:	370c      	adds	r7, #12
  401b4a:	46bd      	mov	sp, r7
  401b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
  401b50:	4770      	bx	lr
  401b52:	bf00      	nop

00401b54 <pwm_channel_disable>:
 *
 * \param p_pwm Pointer to a PWM instance.
 * \param ul_channel PWM channel number to disable.
 */
void pwm_channel_disable(Pwm *p_pwm, uint32_t ul_channel)
{
  401b54:	b480      	push	{r7}
  401b56:	b083      	sub	sp, #12
  401b58:	af00      	add	r7, sp, #0
  401b5a:	6078      	str	r0, [r7, #4]
  401b5c:	6039      	str	r1, [r7, #0]
	p_pwm->PWM_DIS = (1 << ul_channel);
  401b5e:	683b      	ldr	r3, [r7, #0]
  401b60:	2201      	movs	r2, #1
  401b62:	fa02 f303 	lsl.w	r3, r2, r3
  401b66:	461a      	mov	r2, r3
  401b68:	687b      	ldr	r3, [r7, #4]
  401b6a:	609a      	str	r2, [r3, #8]
}
  401b6c:	370c      	adds	r7, #12
  401b6e:	46bd      	mov	sp, r7
  401b70:	f85d 7b04 	ldr.w	r7, [sp], #4
  401b74:	4770      	bx	lr
  401b76:	bf00      	nop

00401b78 <pwm_channel_get_interrupt_status>:
 * \param p_pwm Pointer to a PWM instance.
 *
 * \return Channel counter event and fault protection trigger interrupt status.
 */
uint32_t pwm_channel_get_interrupt_status(Pwm *p_pwm)
{
  401b78:	b480      	push	{r7}
  401b7a:	b083      	sub	sp, #12
  401b7c:	af00      	add	r7, sp, #0
  401b7e:	6078      	str	r0, [r7, #4]
#if (SAM3N || SAM4N || SAM4C || SAM4CP || SAM4CM)
	return p_pwm->PWM_ISR;
#else
	return p_pwm->PWM_ISR1;
  401b80:	687b      	ldr	r3, [r7, #4]
  401b82:	69db      	ldr	r3, [r3, #28]
#endif
}
  401b84:	4618      	mov	r0, r3
  401b86:	370c      	adds	r7, #12
  401b88:	46bd      	mov	sp, r7
  401b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
  401b8e:	4770      	bx	lr

00401b90 <pwm_channel_enable_interrupt>:
 * \param ul_fault Channel number to enable fault protection interrupt(ignored
 * by SAM3N/SAM4N/SAM4C/SAM4CP/SAM4CM).
 */
void pwm_channel_enable_interrupt(Pwm *p_pwm, uint32_t ul_event,
		uint32_t ul_fault)
{
  401b90:	b480      	push	{r7}
  401b92:	b085      	sub	sp, #20
  401b94:	af00      	add	r7, sp, #0
  401b96:	60f8      	str	r0, [r7, #12]
  401b98:	60b9      	str	r1, [r7, #8]
  401b9a:	607a      	str	r2, [r7, #4]
#if (SAM3N || SAM4N || SAM4C || SAM4CP || SAM4CM)
	p_pwm->PWM_IER = (1 << ul_event);
	/* avoid Cppcheck Warning */
	UNUSED(ul_fault);
#else
	p_pwm->PWM_IER1 = (1 << ul_event) | (1 << (ul_fault + 16));
  401b9c:	68bb      	ldr	r3, [r7, #8]
  401b9e:	2201      	movs	r2, #1
  401ba0:	409a      	lsls	r2, r3
  401ba2:	687b      	ldr	r3, [r7, #4]
  401ba4:	3310      	adds	r3, #16
  401ba6:	4619      	mov	r1, r3
  401ba8:	2301      	movs	r3, #1
  401baa:	408b      	lsls	r3, r1
  401bac:	4313      	orrs	r3, r2
  401bae:	461a      	mov	r2, r3
  401bb0:	68fb      	ldr	r3, [r7, #12]
  401bb2:	611a      	str	r2, [r3, #16]
#endif
}
  401bb4:	3714      	adds	r7, #20
  401bb6:	46bd      	mov	sp, r7
  401bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
  401bbc:	4770      	bx	lr
  401bbe:	bf00      	nop

00401bc0 <pwm_channel_disable_interrupt>:
 * \param ul_fault Bitmask of channel number to disable fault protection
 * interrupt(ignored by SAM3N/SAM4N/SAM4C/SAM4CP/SAM4CM).
 */
void pwm_channel_disable_interrupt(Pwm *p_pwm, uint32_t ul_event,
		uint32_t ul_fault)
{
  401bc0:	b480      	push	{r7}
  401bc2:	b085      	sub	sp, #20
  401bc4:	af00      	add	r7, sp, #0
  401bc6:	60f8      	str	r0, [r7, #12]
  401bc8:	60b9      	str	r1, [r7, #8]
  401bca:	607a      	str	r2, [r7, #4]
#if (SAM3N || SAM4N || SAM4C || SAM4CP || SAM4CM)
	p_pwm->PWM_IDR = (1 << ul_event);
	/* avoid Cppcheck Warning */
	UNUSED(ul_fault);
#else
	p_pwm->PWM_IDR1 = (1 << ul_event) | (1 << (ul_fault + 16));
  401bcc:	68bb      	ldr	r3, [r7, #8]
  401bce:	2201      	movs	r2, #1
  401bd0:	409a      	lsls	r2, r3
  401bd2:	687b      	ldr	r3, [r7, #4]
  401bd4:	3310      	adds	r3, #16
  401bd6:	4619      	mov	r1, r3
  401bd8:	2301      	movs	r3, #1
  401bda:	408b      	lsls	r3, r1
  401bdc:	4313      	orrs	r3, r2
  401bde:	461a      	mov	r2, r3
  401be0:	68fb      	ldr	r3, [r7, #12]
  401be2:	615a      	str	r2, [r3, #20]
#endif
}
  401be4:	3714      	adds	r7, #20
  401be6:	46bd      	mov	sp, r7
  401be8:	f85d 7b04 	ldr.w	r7, [sp], #4
  401bec:	4770      	bx	lr
  401bee:	bf00      	nop

00401bf0 <twihs_enable_master_mode>:
 * \brief Enable TWIHS master mode.
 *
 * \param p_twihs Pointer to a TWIHS instance.
 */
void twihs_enable_master_mode(Twihs *p_twihs)
{
  401bf0:	b480      	push	{r7}
  401bf2:	b083      	sub	sp, #12
  401bf4:	af00      	add	r7, sp, #0
  401bf6:	6078      	str	r0, [r7, #4]
	/* Set Master Disable bit and Slave Disable bit */
	p_twihs->TWIHS_CR = TWIHS_CR_MSDIS;
  401bf8:	687b      	ldr	r3, [r7, #4]
  401bfa:	2208      	movs	r2, #8
  401bfc:	601a      	str	r2, [r3, #0]
	p_twihs->TWIHS_CR = TWIHS_CR_SVDIS;
  401bfe:	687b      	ldr	r3, [r7, #4]
  401c00:	2220      	movs	r2, #32
  401c02:	601a      	str	r2, [r3, #0]

	/* Set Master Enable bit */
	p_twihs->TWIHS_CR = TWIHS_CR_MSEN;
  401c04:	687b      	ldr	r3, [r7, #4]
  401c06:	2204      	movs	r2, #4
  401c08:	601a      	str	r2, [r3, #0]
}
  401c0a:	370c      	adds	r7, #12
  401c0c:	46bd      	mov	sp, r7
  401c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
  401c12:	4770      	bx	lr

00401c14 <twihs_master_init>:
 * \param p_opt Options for initializing the TWIHS module (see \ref twihs_options_t).
 *
 * \return TWIHS_SUCCESS if initialization is complete, error code otherwise.
 */
uint32_t twihs_master_init(Twihs *p_twihs, const twihs_options_t *p_opt)
{
  401c14:	b580      	push	{r7, lr}
  401c16:	b084      	sub	sp, #16
  401c18:	af00      	add	r7, sp, #0
  401c1a:	6078      	str	r0, [r7, #4]
  401c1c:	6039      	str	r1, [r7, #0]
	uint32_t status = TWIHS_SUCCESS;
  401c1e:	2300      	movs	r3, #0
  401c20:	60fb      	str	r3, [r7, #12]

	/* Disable TWIHS interrupts */
	p_twihs->TWIHS_IDR = ~0UL;
  401c22:	687b      	ldr	r3, [r7, #4]
  401c24:	f04f 32ff 	mov.w	r2, #4294967295
  401c28:	629a      	str	r2, [r3, #40]	; 0x28

	/* Dummy read in status register */
	p_twihs->TWIHS_SR;
  401c2a:	687b      	ldr	r3, [r7, #4]
  401c2c:	6a1b      	ldr	r3, [r3, #32]

	/* Reset TWIHS peripheral */
	twihs_reset(p_twihs);
  401c2e:	6878      	ldr	r0, [r7, #4]
  401c30:	4b0b      	ldr	r3, [pc, #44]	; (401c60 <twihs_master_init+0x4c>)
  401c32:	4798      	blx	r3

	twihs_enable_master_mode(p_twihs);
  401c34:	6878      	ldr	r0, [r7, #4]
  401c36:	4b0b      	ldr	r3, [pc, #44]	; (401c64 <twihs_master_init+0x50>)
  401c38:	4798      	blx	r3

	/* Select the speed */
	if (twihs_set_speed(p_twihs, p_opt->speed, p_opt->master_clk) == FAIL) {
  401c3a:	683b      	ldr	r3, [r7, #0]
  401c3c:	685a      	ldr	r2, [r3, #4]
  401c3e:	683b      	ldr	r3, [r7, #0]
  401c40:	681b      	ldr	r3, [r3, #0]
  401c42:	6878      	ldr	r0, [r7, #4]
  401c44:	4611      	mov	r1, r2
  401c46:	461a      	mov	r2, r3
  401c48:	4b07      	ldr	r3, [pc, #28]	; (401c68 <twihs_master_init+0x54>)
  401c4a:	4798      	blx	r3
  401c4c:	4603      	mov	r3, r0
  401c4e:	2b01      	cmp	r3, #1
  401c50:	d101      	bne.n	401c56 <twihs_master_init+0x42>
		/* The desired speed setting is rejected */
		status = TWIHS_INVALID_ARGUMENT;
  401c52:	2301      	movs	r3, #1
  401c54:	60fb      	str	r3, [r7, #12]
	}

	return status;
  401c56:	68fb      	ldr	r3, [r7, #12]
}
  401c58:	4618      	mov	r0, r3
  401c5a:	3710      	adds	r7, #16
  401c5c:	46bd      	mov	sp, r7
  401c5e:	bd80      	pop	{r7, pc}
  401c60:	00401efd 	.word	0x00401efd
  401c64:	00401bf1 	.word	0x00401bf1
  401c68:	00401c6d 	.word	0x00401c6d

00401c6c <twihs_set_speed>:
 *
 * \retval PASS New speed setting is accepted.
 * \retval FAIL New speed setting is rejected.
 */
uint32_t twihs_set_speed(Twihs *p_twihs, uint32_t ul_speed, uint32_t ul_mck)
{
  401c6c:	b480      	push	{r7}
  401c6e:	b087      	sub	sp, #28
  401c70:	af00      	add	r7, sp, #0
  401c72:	60f8      	str	r0, [r7, #12]
  401c74:	60b9      	str	r1, [r7, #8]
  401c76:	607a      	str	r2, [r7, #4]
	uint32_t ckdiv = 0;
  401c78:	2300      	movs	r3, #0
  401c7a:	617b      	str	r3, [r7, #20]
	uint32_t c_lh_div;

	/* High-Speed can be only used in slave mode, 400k is the max speed allowed for master */
	if (ul_speed > I2C_FAST_MODE_SPEED) {
  401c7c:	68bb      	ldr	r3, [r7, #8]
  401c7e:	4a16      	ldr	r2, [pc, #88]	; (401cd8 <twihs_set_speed+0x6c>)
  401c80:	4293      	cmp	r3, r2
  401c82:	d901      	bls.n	401c88 <twihs_set_speed+0x1c>
		return FAIL;
  401c84:	2301      	movs	r3, #1
  401c86:	e021      	b.n	401ccc <twihs_set_speed+0x60>
	}

	c_lh_div = ul_mck / (ul_speed * TWIHS_CLK_DIVIDER) - TWIHS_CLK_CALC_ARGU;
  401c88:	68bb      	ldr	r3, [r7, #8]
  401c8a:	005b      	lsls	r3, r3, #1
  401c8c:	687a      	ldr	r2, [r7, #4]
  401c8e:	fbb2 f3f3 	udiv	r3, r2, r3
  401c92:	3b04      	subs	r3, #4
  401c94:	613b      	str	r3, [r7, #16]

	/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
	while ((c_lh_div > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  401c96:	e005      	b.n	401ca4 <twihs_set_speed+0x38>
		/* Increase clock divider */
		ckdiv++;
  401c98:	697b      	ldr	r3, [r7, #20]
  401c9a:	3301      	adds	r3, #1
  401c9c:	617b      	str	r3, [r7, #20]
		/* Divide cldiv value */
		c_lh_div /= TWIHS_CLK_DIVIDER;
  401c9e:	693b      	ldr	r3, [r7, #16]
  401ca0:	085b      	lsrs	r3, r3, #1
  401ca2:	613b      	str	r3, [r7, #16]
	}

	c_lh_div = ul_mck / (ul_speed * TWIHS_CLK_DIVIDER) - TWIHS_CLK_CALC_ARGU;

	/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
	while ((c_lh_div > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  401ca4:	693b      	ldr	r3, [r7, #16]
  401ca6:	2bff      	cmp	r3, #255	; 0xff
  401ca8:	d902      	bls.n	401cb0 <twihs_set_speed+0x44>
  401caa:	697b      	ldr	r3, [r7, #20]
  401cac:	2b06      	cmp	r3, #6
  401cae:	d9f3      	bls.n	401c98 <twihs_set_speed+0x2c>
		c_lh_div /= TWIHS_CLK_DIVIDER;
	}

	/* set clock waveform generator register */
	p_twihs->TWIHS_CWGR =
			TWIHS_CWGR_CLDIV(c_lh_div) | TWIHS_CWGR_CHDIV(c_lh_div) |
  401cb0:	693b      	ldr	r3, [r7, #16]
  401cb2:	b2da      	uxtb	r2, r3
  401cb4:	693b      	ldr	r3, [r7, #16]
  401cb6:	021b      	lsls	r3, r3, #8
  401cb8:	b29b      	uxth	r3, r3
  401cba:	431a      	orrs	r2, r3
			TWIHS_CWGR_CKDIV(ckdiv);
  401cbc:	697b      	ldr	r3, [r7, #20]
  401cbe:	041b      	lsls	r3, r3, #16
  401cc0:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
		c_lh_div /= TWIHS_CLK_DIVIDER;
	}

	/* set clock waveform generator register */
	p_twihs->TWIHS_CWGR =
			TWIHS_CWGR_CLDIV(c_lh_div) | TWIHS_CWGR_CHDIV(c_lh_div) |
  401cc4:	431a      	orrs	r2, r3
		/* Divide cldiv value */
		c_lh_div /= TWIHS_CLK_DIVIDER;
	}

	/* set clock waveform generator register */
	p_twihs->TWIHS_CWGR =
  401cc6:	68fb      	ldr	r3, [r7, #12]
  401cc8:	611a      	str	r2, [r3, #16]
			TWIHS_CWGR_CLDIV(c_lh_div) | TWIHS_CWGR_CHDIV(c_lh_div) |
			TWIHS_CWGR_CKDIV(ckdiv);

	return PASS;
  401cca:	2300      	movs	r3, #0
}
  401ccc:	4618      	mov	r0, r3
  401cce:	371c      	adds	r7, #28
  401cd0:	46bd      	mov	sp, r7
  401cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
  401cd6:	4770      	bx	lr
  401cd8:	00061a80 	.word	0x00061a80

00401cdc <twihs_mk_addr>:
 * which byte is the MSB to start with.
 *
 * Please see the device datasheet for details on this.
 */
static uint32_t twihs_mk_addr(const uint8_t *addr, int len)
{
  401cdc:	b480      	push	{r7}
  401cde:	b085      	sub	sp, #20
  401ce0:	af00      	add	r7, sp, #0
  401ce2:	6078      	str	r0, [r7, #4]
  401ce4:	6039      	str	r1, [r7, #0]
	uint32_t val;

	if (len == 0)
  401ce6:	683b      	ldr	r3, [r7, #0]
  401ce8:	2b00      	cmp	r3, #0
  401cea:	d101      	bne.n	401cf0 <twihs_mk_addr+0x14>
		return 0;
  401cec:	2300      	movs	r3, #0
  401cee:	e01d      	b.n	401d2c <twihs_mk_addr+0x50>

	val = addr[0];
  401cf0:	687b      	ldr	r3, [r7, #4]
  401cf2:	781b      	ldrb	r3, [r3, #0]
  401cf4:	60fb      	str	r3, [r7, #12]
	if (len > 1) {
  401cf6:	683b      	ldr	r3, [r7, #0]
  401cf8:	2b01      	cmp	r3, #1
  401cfa:	dd09      	ble.n	401d10 <twihs_mk_addr+0x34>
		val <<= 8;
  401cfc:	68fb      	ldr	r3, [r7, #12]
  401cfe:	021b      	lsls	r3, r3, #8
  401d00:	60fb      	str	r3, [r7, #12]
		val |= addr[1];
  401d02:	687b      	ldr	r3, [r7, #4]
  401d04:	3301      	adds	r3, #1
  401d06:	781b      	ldrb	r3, [r3, #0]
  401d08:	461a      	mov	r2, r3
  401d0a:	68fb      	ldr	r3, [r7, #12]
  401d0c:	4313      	orrs	r3, r2
  401d0e:	60fb      	str	r3, [r7, #12]
	}
	if (len > 2) {
  401d10:	683b      	ldr	r3, [r7, #0]
  401d12:	2b02      	cmp	r3, #2
  401d14:	dd09      	ble.n	401d2a <twihs_mk_addr+0x4e>
		val <<= 8;
  401d16:	68fb      	ldr	r3, [r7, #12]
  401d18:	021b      	lsls	r3, r3, #8
  401d1a:	60fb      	str	r3, [r7, #12]
		val |= addr[2];
  401d1c:	687b      	ldr	r3, [r7, #4]
  401d1e:	3302      	adds	r3, #2
  401d20:	781b      	ldrb	r3, [r3, #0]
  401d22:	461a      	mov	r2, r3
  401d24:	68fb      	ldr	r3, [r7, #12]
  401d26:	4313      	orrs	r3, r2
  401d28:	60fb      	str	r3, [r7, #12]
	}
	return val;
  401d2a:	68fb      	ldr	r3, [r7, #12]
}
  401d2c:	4618      	mov	r0, r3
  401d2e:	3714      	adds	r7, #20
  401d30:	46bd      	mov	sp, r7
  401d32:	f85d 7b04 	ldr.w	r7, [sp], #4
  401d36:	4770      	bx	lr

00401d38 <twihs_master_read>:
 * \param p_packet Packet information and data (see \ref twihs_packet_t).
 *
 * \return TWIHS_SUCCESS if all bytes were read, error code otherwise.
 */
uint32_t twihs_master_read(Twihs *p_twihs, twihs_packet_t *p_packet)
{
  401d38:	b580      	push	{r7, lr}
  401d3a:	b086      	sub	sp, #24
  401d3c:	af00      	add	r7, sp, #0
  401d3e:	6078      	str	r0, [r7, #4]
  401d40:	6039      	str	r1, [r7, #0]
	uint32_t status, cnt = p_packet->length;
  401d42:	683b      	ldr	r3, [r7, #0]
  401d44:	68db      	ldr	r3, [r3, #12]
  401d46:	617b      	str	r3, [r7, #20]
	uint8_t *buffer = p_packet->buffer;
  401d48:	683b      	ldr	r3, [r7, #0]
  401d4a:	689b      	ldr	r3, [r3, #8]
  401d4c:	613b      	str	r3, [r7, #16]
	uint32_t timeout = TWIHS_TIMEOUT;
  401d4e:	f643 2398 	movw	r3, #15000	; 0x3a98
  401d52:	60fb      	str	r3, [r7, #12]

	/* Check argument */
	if (cnt == 0) {
  401d54:	697b      	ldr	r3, [r7, #20]
  401d56:	2b00      	cmp	r3, #0
  401d58:	d101      	bne.n	401d5e <twihs_master_read+0x26>
		return TWIHS_INVALID_ARGUMENT;
  401d5a:	2301      	movs	r3, #1
  401d5c:	e059      	b.n	401e12 <twihs_master_read+0xda>
	}

	/* Set read mode, slave address and 3 internal address byte lengths */
	p_twihs->TWIHS_MMR = 0;
  401d5e:	687b      	ldr	r3, [r7, #4]
  401d60:	2200      	movs	r2, #0
  401d62:	605a      	str	r2, [r3, #4]
	p_twihs->TWIHS_MMR = TWIHS_MMR_MREAD | TWIHS_MMR_DADR(p_packet->chip) |
  401d64:	683b      	ldr	r3, [r7, #0]
  401d66:	7c1b      	ldrb	r3, [r3, #16]
  401d68:	041b      	lsls	r3, r3, #16
  401d6a:	f403 02fe 	and.w	r2, r3, #8323072	; 0x7f0000
			((p_packet->addr_length << TWIHS_MMR_IADRSZ_Pos) &
  401d6e:	683b      	ldr	r3, [r7, #0]
  401d70:	685b      	ldr	r3, [r3, #4]
  401d72:	021b      	lsls	r3, r3, #8
  401d74:	f403 7340 	and.w	r3, r3, #768	; 0x300
		return TWIHS_INVALID_ARGUMENT;
	}

	/* Set read mode, slave address and 3 internal address byte lengths */
	p_twihs->TWIHS_MMR = 0;
	p_twihs->TWIHS_MMR = TWIHS_MMR_MREAD | TWIHS_MMR_DADR(p_packet->chip) |
  401d78:	4313      	orrs	r3, r2
  401d7a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
  401d7e:	687b      	ldr	r3, [r7, #4]
  401d80:	605a      	str	r2, [r3, #4]
			((p_packet->addr_length << TWIHS_MMR_IADRSZ_Pos) &
			TWIHS_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twihs->TWIHS_IADR = 0;
  401d82:	687b      	ldr	r3, [r7, #4]
  401d84:	2200      	movs	r2, #0
  401d86:	60da      	str	r2, [r3, #12]
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);
  401d88:	683a      	ldr	r2, [r7, #0]
  401d8a:	683b      	ldr	r3, [r7, #0]
  401d8c:	685b      	ldr	r3, [r3, #4]
  401d8e:	4610      	mov	r0, r2
  401d90:	4619      	mov	r1, r3
  401d92:	4b22      	ldr	r3, [pc, #136]	; (401e1c <twihs_master_read+0xe4>)
  401d94:	4798      	blx	r3
  401d96:	4602      	mov	r2, r0
  401d98:	687b      	ldr	r3, [r7, #4]
  401d9a:	60da      	str	r2, [r3, #12]

	/* Send a START Condition */
	p_twihs->TWIHS_CR = TWIHS_CR_START;
  401d9c:	687b      	ldr	r3, [r7, #4]
  401d9e:	2201      	movs	r2, #1
  401da0:	601a      	str	r2, [r3, #0]

	while (cnt > 0) {
  401da2:	e029      	b.n	401df8 <twihs_master_read+0xc0>
		status = p_twihs->TWIHS_SR;
  401da4:	687b      	ldr	r3, [r7, #4]
  401da6:	6a1b      	ldr	r3, [r3, #32]
  401da8:	60bb      	str	r3, [r7, #8]
		if (status & TWIHS_SR_NACK) {
  401daa:	68bb      	ldr	r3, [r7, #8]
  401dac:	f403 7380 	and.w	r3, r3, #256	; 0x100
  401db0:	2b00      	cmp	r3, #0
  401db2:	d001      	beq.n	401db8 <twihs_master_read+0x80>
			return TWIHS_RECEIVE_NACK;
  401db4:	2305      	movs	r3, #5
  401db6:	e02c      	b.n	401e12 <twihs_master_read+0xda>
		}
		if (!timeout--) {
  401db8:	68fb      	ldr	r3, [r7, #12]
  401dba:	1e5a      	subs	r2, r3, #1
  401dbc:	60fa      	str	r2, [r7, #12]
  401dbe:	2b00      	cmp	r3, #0
  401dc0:	d101      	bne.n	401dc6 <twihs_master_read+0x8e>
			return TWIHS_ERROR_TIMEOUT;
  401dc2:	2309      	movs	r3, #9
  401dc4:	e025      	b.n	401e12 <twihs_master_read+0xda>
		}
		/* Last byte ? */
		if (cnt == 1) {
  401dc6:	697b      	ldr	r3, [r7, #20]
  401dc8:	2b01      	cmp	r3, #1
  401dca:	d102      	bne.n	401dd2 <twihs_master_read+0x9a>
			p_twihs->TWIHS_CR = TWIHS_CR_STOP;
  401dcc:	687b      	ldr	r3, [r7, #4]
  401dce:	2202      	movs	r2, #2
  401dd0:	601a      	str	r2, [r3, #0]
		}

		if (!(status & TWIHS_SR_RXRDY)) {
  401dd2:	68bb      	ldr	r3, [r7, #8]
  401dd4:	f003 0302 	and.w	r3, r3, #2
  401dd8:	2b00      	cmp	r3, #0
  401dda:	d100      	bne.n	401dde <twihs_master_read+0xa6>
			continue;
  401ddc:	e00c      	b.n	401df8 <twihs_master_read+0xc0>
		}
		*buffer++ = p_twihs->TWIHS_RHR;
  401dde:	693b      	ldr	r3, [r7, #16]
  401de0:	1c5a      	adds	r2, r3, #1
  401de2:	613a      	str	r2, [r7, #16]
  401de4:	687a      	ldr	r2, [r7, #4]
  401de6:	6b12      	ldr	r2, [r2, #48]	; 0x30
  401de8:	b2d2      	uxtb	r2, r2
  401dea:	701a      	strb	r2, [r3, #0]

		cnt--;
  401dec:	697b      	ldr	r3, [r7, #20]
  401dee:	3b01      	subs	r3, #1
  401df0:	617b      	str	r3, [r7, #20]
		timeout = TWIHS_TIMEOUT;
  401df2:	f643 2398 	movw	r3, #15000	; 0x3a98
  401df6:	60fb      	str	r3, [r7, #12]
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);

	/* Send a START Condition */
	p_twihs->TWIHS_CR = TWIHS_CR_START;

	while (cnt > 0) {
  401df8:	697b      	ldr	r3, [r7, #20]
  401dfa:	2b00      	cmp	r3, #0
  401dfc:	d1d2      	bne.n	401da4 <twihs_master_read+0x6c>

		cnt--;
		timeout = TWIHS_TIMEOUT;
	}

	while (!(p_twihs->TWIHS_SR & TWIHS_SR_TXCOMP)) {
  401dfe:	bf00      	nop
  401e00:	687b      	ldr	r3, [r7, #4]
  401e02:	6a1b      	ldr	r3, [r3, #32]
  401e04:	f003 0301 	and.w	r3, r3, #1
  401e08:	2b00      	cmp	r3, #0
  401e0a:	d0f9      	beq.n	401e00 <twihs_master_read+0xc8>
	}

	p_twihs->TWIHS_SR;
  401e0c:	687b      	ldr	r3, [r7, #4]
  401e0e:	6a1b      	ldr	r3, [r3, #32]

	return TWIHS_SUCCESS;
  401e10:	2300      	movs	r3, #0
}
  401e12:	4618      	mov	r0, r3
  401e14:	3718      	adds	r7, #24
  401e16:	46bd      	mov	sp, r7
  401e18:	bd80      	pop	{r7, pc}
  401e1a:	bf00      	nop
  401e1c:	00401cdd 	.word	0x00401cdd

00401e20 <twihs_master_write>:
 * \param p_packet Packet information and data (see \ref twihs_packet_t).
 *
 * \return TWIHS_SUCCESS if all bytes were written, error code otherwise.
 */
uint32_t twihs_master_write(Twihs *p_twihs, twihs_packet_t *p_packet)
{
  401e20:	b580      	push	{r7, lr}
  401e22:	b086      	sub	sp, #24
  401e24:	af00      	add	r7, sp, #0
  401e26:	6078      	str	r0, [r7, #4]
  401e28:	6039      	str	r1, [r7, #0]
	uint32_t status, cnt = p_packet->length;
  401e2a:	683b      	ldr	r3, [r7, #0]
  401e2c:	68db      	ldr	r3, [r3, #12]
  401e2e:	617b      	str	r3, [r7, #20]
	uint8_t *buffer = p_packet->buffer;
  401e30:	683b      	ldr	r3, [r7, #0]
  401e32:	689b      	ldr	r3, [r3, #8]
  401e34:	613b      	str	r3, [r7, #16]

	/* Check argument */
	if (cnt == 0) {
  401e36:	697b      	ldr	r3, [r7, #20]
  401e38:	2b00      	cmp	r3, #0
  401e3a:	d101      	bne.n	401e40 <twihs_master_write+0x20>
		return TWIHS_INVALID_ARGUMENT;
  401e3c:	2301      	movs	r3, #1
  401e3e:	e056      	b.n	401eee <twihs_master_write+0xce>
	}

	/* Set write mode, slave address and 3 internal address byte lengths */
	p_twihs->TWIHS_MMR = 0;
  401e40:	687b      	ldr	r3, [r7, #4]
  401e42:	2200      	movs	r2, #0
  401e44:	605a      	str	r2, [r3, #4]
	p_twihs->TWIHS_MMR = TWIHS_MMR_DADR(p_packet->chip) |
  401e46:	683b      	ldr	r3, [r7, #0]
  401e48:	7c1b      	ldrb	r3, [r3, #16]
  401e4a:	041b      	lsls	r3, r3, #16
  401e4c:	f403 02fe 	and.w	r2, r3, #8323072	; 0x7f0000
			((p_packet->addr_length << TWIHS_MMR_IADRSZ_Pos) &
  401e50:	683b      	ldr	r3, [r7, #0]
  401e52:	685b      	ldr	r3, [r3, #4]
  401e54:	021b      	lsls	r3, r3, #8
  401e56:	f403 7340 	and.w	r3, r3, #768	; 0x300
		return TWIHS_INVALID_ARGUMENT;
	}

	/* Set write mode, slave address and 3 internal address byte lengths */
	p_twihs->TWIHS_MMR = 0;
	p_twihs->TWIHS_MMR = TWIHS_MMR_DADR(p_packet->chip) |
  401e5a:	431a      	orrs	r2, r3
  401e5c:	687b      	ldr	r3, [r7, #4]
  401e5e:	605a      	str	r2, [r3, #4]
			((p_packet->addr_length << TWIHS_MMR_IADRSZ_Pos) &
			TWIHS_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twihs->TWIHS_IADR = 0;
  401e60:	687b      	ldr	r3, [r7, #4]
  401e62:	2200      	movs	r2, #0
  401e64:	60da      	str	r2, [r3, #12]
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);
  401e66:	683a      	ldr	r2, [r7, #0]
  401e68:	683b      	ldr	r3, [r7, #0]
  401e6a:	685b      	ldr	r3, [r3, #4]
  401e6c:	4610      	mov	r0, r2
  401e6e:	4619      	mov	r1, r3
  401e70:	4b21      	ldr	r3, [pc, #132]	; (401ef8 <twihs_master_write+0xd8>)
  401e72:	4798      	blx	r3
  401e74:	4602      	mov	r2, r0
  401e76:	687b      	ldr	r3, [r7, #4]
  401e78:	60da      	str	r2, [r3, #12]

	/* Send all bytes */
	while (cnt > 0) {
  401e7a:	e019      	b.n	401eb0 <twihs_master_write+0x90>
		status = p_twihs->TWIHS_SR;
  401e7c:	687b      	ldr	r3, [r7, #4]
  401e7e:	6a1b      	ldr	r3, [r3, #32]
  401e80:	60fb      	str	r3, [r7, #12]
		if (status & TWIHS_SR_NACK) {
  401e82:	68fb      	ldr	r3, [r7, #12]
  401e84:	f403 7380 	and.w	r3, r3, #256	; 0x100
  401e88:	2b00      	cmp	r3, #0
  401e8a:	d001      	beq.n	401e90 <twihs_master_write+0x70>
			return TWIHS_RECEIVE_NACK;
  401e8c:	2305      	movs	r3, #5
  401e8e:	e02e      	b.n	401eee <twihs_master_write+0xce>
		}

		if (!(status & TWIHS_SR_TXRDY)) {
  401e90:	68fb      	ldr	r3, [r7, #12]
  401e92:	f003 0304 	and.w	r3, r3, #4
  401e96:	2b00      	cmp	r3, #0
  401e98:	d100      	bne.n	401e9c <twihs_master_write+0x7c>
			continue;
  401e9a:	e009      	b.n	401eb0 <twihs_master_write+0x90>
		}
		p_twihs->TWIHS_THR = *buffer++;
  401e9c:	693b      	ldr	r3, [r7, #16]
  401e9e:	1c5a      	adds	r2, r3, #1
  401ea0:	613a      	str	r2, [r7, #16]
  401ea2:	781b      	ldrb	r3, [r3, #0]
  401ea4:	461a      	mov	r2, r3
  401ea6:	687b      	ldr	r3, [r7, #4]
  401ea8:	635a      	str	r2, [r3, #52]	; 0x34

		cnt--;
  401eaa:	697b      	ldr	r3, [r7, #20]
  401eac:	3b01      	subs	r3, #1
  401eae:	617b      	str	r3, [r7, #20]
	/* Set internal address for remote chip */
	p_twihs->TWIHS_IADR = 0;
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);

	/* Send all bytes */
	while (cnt > 0) {
  401eb0:	697b      	ldr	r3, [r7, #20]
  401eb2:	2b00      	cmp	r3, #0
  401eb4:	d1e2      	bne.n	401e7c <twihs_master_write+0x5c>

		cnt--;
	}

	while (1) {
		status = p_twihs->TWIHS_SR;
  401eb6:	687b      	ldr	r3, [r7, #4]
  401eb8:	6a1b      	ldr	r3, [r3, #32]
  401eba:	60fb      	str	r3, [r7, #12]
		if (status & TWIHS_SR_NACK) {
  401ebc:	68fb      	ldr	r3, [r7, #12]
  401ebe:	f403 7380 	and.w	r3, r3, #256	; 0x100
  401ec2:	2b00      	cmp	r3, #0
  401ec4:	d001      	beq.n	401eca <twihs_master_write+0xaa>
			return TWIHS_RECEIVE_NACK;
  401ec6:	2305      	movs	r3, #5
  401ec8:	e011      	b.n	401eee <twihs_master_write+0xce>
		}

		if (status & TWIHS_SR_TXRDY) {
  401eca:	68fb      	ldr	r3, [r7, #12]
  401ecc:	f003 0304 	and.w	r3, r3, #4
  401ed0:	2b00      	cmp	r3, #0
  401ed2:	d004      	beq.n	401ede <twihs_master_write+0xbe>
			break;
  401ed4:	bf00      	nop
		}
	}

	p_twihs->TWIHS_CR = TWIHS_CR_STOP;
  401ed6:	687b      	ldr	r3, [r7, #4]
  401ed8:	2202      	movs	r2, #2
  401eda:	601a      	str	r2, [r3, #0]

	while (!(p_twihs->TWIHS_SR & TWIHS_SR_TXCOMP)) {
  401edc:	e000      	b.n	401ee0 <twihs_master_write+0xc0>
		}

		if (status & TWIHS_SR_TXRDY) {
			break;
		}
	}
  401ede:	e7ea      	b.n	401eb6 <twihs_master_write+0x96>

	p_twihs->TWIHS_CR = TWIHS_CR_STOP;

	while (!(p_twihs->TWIHS_SR & TWIHS_SR_TXCOMP)) {
  401ee0:	687b      	ldr	r3, [r7, #4]
  401ee2:	6a1b      	ldr	r3, [r3, #32]
  401ee4:	f003 0301 	and.w	r3, r3, #1
  401ee8:	2b00      	cmp	r3, #0
  401eea:	d0f9      	beq.n	401ee0 <twihs_master_write+0xc0>
	}

	return TWIHS_SUCCESS;
  401eec:	2300      	movs	r3, #0
}
  401eee:	4618      	mov	r0, r3
  401ef0:	3718      	adds	r7, #24
  401ef2:	46bd      	mov	sp, r7
  401ef4:	bd80      	pop	{r7, pc}
  401ef6:	bf00      	nop
  401ef8:	00401cdd 	.word	0x00401cdd

00401efc <twihs_reset>:
 * \brief Reset TWIHS.
 *
 * \param p_twihs Pointer to a TWIHS instance.
 */
void twihs_reset(Twihs *p_twihs)
{
  401efc:	b480      	push	{r7}
  401efe:	b083      	sub	sp, #12
  401f00:	af00      	add	r7, sp, #0
  401f02:	6078      	str	r0, [r7, #4]
	/* Set SWRST bit to reset TWIHS peripheral */
	p_twihs->TWIHS_CR = TWIHS_CR_SWRST;
  401f04:	687b      	ldr	r3, [r7, #4]
  401f06:	2280      	movs	r2, #128	; 0x80
  401f08:	601a      	str	r2, [r3, #0]
	p_twihs->TWIHS_RHR;
  401f0a:	687b      	ldr	r3, [r7, #4]
  401f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
  401f0e:	370c      	adds	r7, #12
  401f10:	46bd      	mov	sp, r7
  401f12:	f85d 7b04 	ldr.w	r7, [sp], #4
  401f16:	4770      	bx	lr

00401f18 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
  401f18:	b480      	push	{r7}
  401f1a:	b085      	sub	sp, #20
  401f1c:	af00      	add	r7, sp, #0
  401f1e:	6078      	str	r0, [r7, #4]
  401f20:	6039      	str	r1, [r7, #0]
	uint32_t cd = 0;
  401f22:	2300      	movs	r3, #0
  401f24:	60fb      	str	r3, [r7, #12]

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
  401f26:	687b      	ldr	r3, [r7, #4]
  401f28:	22ac      	movs	r2, #172	; 0xac
  401f2a:	601a      	str	r2, [r3, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
  401f2c:	683b      	ldr	r3, [r7, #0]
  401f2e:	681a      	ldr	r2, [r3, #0]
  401f30:	683b      	ldr	r3, [r7, #0]
  401f32:	685b      	ldr	r3, [r3, #4]
  401f34:	fbb2 f3f3 	udiv	r3, r2, r3
  401f38:	091b      	lsrs	r3, r3, #4
  401f3a:	60fb      	str	r3, [r7, #12]
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
  401f3c:	68fb      	ldr	r3, [r7, #12]
  401f3e:	2b00      	cmp	r3, #0
  401f40:	d003      	beq.n	401f4a <uart_init+0x32>
  401f42:	68fb      	ldr	r3, [r7, #12]
  401f44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
  401f48:	d301      	bcc.n	401f4e <uart_init+0x36>
		return 1;
  401f4a:	2301      	movs	r3, #1
  401f4c:	e00a      	b.n	401f64 <uart_init+0x4c>

	p_uart->UART_BRGR = cd;
  401f4e:	687b      	ldr	r3, [r7, #4]
  401f50:	68fa      	ldr	r2, [r7, #12]
  401f52:	621a      	str	r2, [r3, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
  401f54:	683b      	ldr	r3, [r7, #0]
  401f56:	689a      	ldr	r2, [r3, #8]
  401f58:	687b      	ldr	r3, [r7, #4]
  401f5a:	605a      	str	r2, [r3, #4]
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
  401f5c:	687b      	ldr	r3, [r7, #4]
  401f5e:	2250      	movs	r2, #80	; 0x50
  401f60:	601a      	str	r2, [r3, #0]

	return 0;
  401f62:	2300      	movs	r3, #0
}
  401f64:	4618      	mov	r0, r3
  401f66:	3714      	adds	r7, #20
  401f68:	46bd      	mov	sp, r7
  401f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
  401f6e:	4770      	bx	lr

00401f70 <uart_write>:
 *
 * \retval 0 Success.
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
  401f70:	b480      	push	{r7}
  401f72:	b083      	sub	sp, #12
  401f74:	af00      	add	r7, sp, #0
  401f76:	6078      	str	r0, [r7, #4]
  401f78:	460b      	mov	r3, r1
  401f7a:	70fb      	strb	r3, [r7, #3]
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  401f7c:	687b      	ldr	r3, [r7, #4]
  401f7e:	695b      	ldr	r3, [r3, #20]
  401f80:	f003 0302 	and.w	r3, r3, #2
  401f84:	2b00      	cmp	r3, #0
  401f86:	d101      	bne.n	401f8c <uart_write+0x1c>
		return 1;
  401f88:	2301      	movs	r3, #1
  401f8a:	e003      	b.n	401f94 <uart_write+0x24>

	/* Send character */
	p_uart->UART_THR = uc_data;
  401f8c:	78fa      	ldrb	r2, [r7, #3]
  401f8e:	687b      	ldr	r3, [r7, #4]
  401f90:	61da      	str	r2, [r3, #28]
	return 0;
  401f92:	2300      	movs	r3, #0
}
  401f94:	4618      	mov	r0, r3
  401f96:	370c      	adds	r7, #12
  401f98:	46bd      	mov	sp, r7
  401f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
  401f9e:	4770      	bx	lr

00401fa0 <uart_read>:
 *
 * \retval 0 Success.
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
  401fa0:	b480      	push	{r7}
  401fa2:	b083      	sub	sp, #12
  401fa4:	af00      	add	r7, sp, #0
  401fa6:	6078      	str	r0, [r7, #4]
  401fa8:	6039      	str	r1, [r7, #0]
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  401faa:	687b      	ldr	r3, [r7, #4]
  401fac:	695b      	ldr	r3, [r3, #20]
  401fae:	f003 0301 	and.w	r3, r3, #1
  401fb2:	2b00      	cmp	r3, #0
  401fb4:	d101      	bne.n	401fba <uart_read+0x1a>
		return 1;
  401fb6:	2301      	movs	r3, #1
  401fb8:	e005      	b.n	401fc6 <uart_read+0x26>

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  401fba:	687b      	ldr	r3, [r7, #4]
  401fbc:	699b      	ldr	r3, [r3, #24]
  401fbe:	b2da      	uxtb	r2, r3
  401fc0:	683b      	ldr	r3, [r7, #0]
  401fc2:	701a      	strb	r2, [r3, #0]
	return 0;
  401fc4:	2300      	movs	r3, #0
}
  401fc6:	4618      	mov	r0, r3
  401fc8:	370c      	adds	r7, #12
  401fca:	46bd      	mov	sp, r7
  401fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
  401fd0:	4770      	bx	lr
  401fd2:	bf00      	nop

00401fd4 <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  401fd4:	b480      	push	{r7}
  401fd6:	b089      	sub	sp, #36	; 0x24
  401fd8:	af00      	add	r7, sp, #0
  401fda:	60f8      	str	r0, [r7, #12]
  401fdc:	60b9      	str	r1, [r7, #8]
  401fde:	607a      	str	r2, [r7, #4]
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  401fe0:	68bb      	ldr	r3, [r7, #8]
  401fe2:	011a      	lsls	r2, r3, #4
  401fe4:	687b      	ldr	r3, [r7, #4]
  401fe6:	429a      	cmp	r2, r3
  401fe8:	d802      	bhi.n	401ff0 <usart_set_async_baudrate+0x1c>
		over = HIGH_FRQ_SAMPLE_DIV;
  401fea:	2310      	movs	r3, #16
  401fec:	61fb      	str	r3, [r7, #28]
  401fee:	e001      	b.n	401ff4 <usart_set_async_baudrate+0x20>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
  401ff0:	2308      	movs	r3, #8
  401ff2:	61fb      	str	r3, [r7, #28]
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  401ff4:	687b      	ldr	r3, [r7, #4]
  401ff6:	00da      	lsls	r2, r3, #3
  401ff8:	69fb      	ldr	r3, [r7, #28]
  401ffa:	68b9      	ldr	r1, [r7, #8]
  401ffc:	fb01 f303 	mul.w	r3, r1, r3
  402000:	085b      	lsrs	r3, r3, #1
  402002:	441a      	add	r2, r3
  402004:	69fb      	ldr	r3, [r7, #28]
  402006:	68b9      	ldr	r1, [r7, #8]
  402008:	fb01 f303 	mul.w	r3, r1, r3
  40200c:	fbb2 f3f3 	udiv	r3, r2, r3
  402010:	61bb      	str	r3, [r7, #24]
	cd = cd_fp >> 3;
  402012:	69bb      	ldr	r3, [r7, #24]
  402014:	08db      	lsrs	r3, r3, #3
  402016:	617b      	str	r3, [r7, #20]
	fp = cd_fp & 0x07;
  402018:	69bb      	ldr	r3, [r7, #24]
  40201a:	f003 0307 	and.w	r3, r3, #7
  40201e:	613b      	str	r3, [r7, #16]
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  402020:	697b      	ldr	r3, [r7, #20]
  402022:	2b00      	cmp	r3, #0
  402024:	d003      	beq.n	40202e <usart_set_async_baudrate+0x5a>
  402026:	697b      	ldr	r3, [r7, #20]
  402028:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
  40202c:	d301      	bcc.n	402032 <usart_set_async_baudrate+0x5e>
		return 1;
  40202e:	2301      	movs	r3, #1
  402030:	e00f      	b.n	402052 <usart_set_async_baudrate+0x7e>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
  402032:	69fb      	ldr	r3, [r7, #28]
  402034:	2b08      	cmp	r3, #8
  402036:	d105      	bne.n	402044 <usart_set_async_baudrate+0x70>
		p_usart->US_MR |= US_MR_OVER;
  402038:	68fb      	ldr	r3, [r7, #12]
  40203a:	685b      	ldr	r3, [r3, #4]
  40203c:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
  402040:	68fb      	ldr	r3, [r7, #12]
  402042:	605a      	str	r2, [r3, #4]
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  402044:	693b      	ldr	r3, [r7, #16]
  402046:	041a      	lsls	r2, r3, #16
  402048:	697b      	ldr	r3, [r7, #20]
  40204a:	431a      	orrs	r2, r3
  40204c:	68fb      	ldr	r3, [r7, #12]
  40204e:	621a      	str	r2, [r3, #32]

	return 0;
  402050:	2300      	movs	r3, #0
}
  402052:	4618      	mov	r0, r3
  402054:	3724      	adds	r7, #36	; 0x24
  402056:	46bd      	mov	sp, r7
  402058:	f85d 7b04 	ldr.w	r7, [sp], #4
  40205c:	4770      	bx	lr
  40205e:	bf00      	nop

00402060 <usart_reset>:
 * \brief Reset the USART and disable TX and RX.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset(Usart *p_usart)
{
  402060:	b580      	push	{r7, lr}
  402062:	b082      	sub	sp, #8
  402064:	af00      	add	r7, sp, #0
  402066:	6078      	str	r0, [r7, #4]
	/* Disable the Write Protect. */
	usart_disable_writeprotect(p_usart);
  402068:	6878      	ldr	r0, [r7, #4]
  40206a:	4b0d      	ldr	r3, [pc, #52]	; (4020a0 <usart_reset+0x40>)
  40206c:	4798      	blx	r3

	/* Reset registers that could cause unpredictable behavior after reset. */
	p_usart->US_MR = 0;
  40206e:	687b      	ldr	r3, [r7, #4]
  402070:	2200      	movs	r2, #0
  402072:	605a      	str	r2, [r3, #4]
	p_usart->US_RTOR = 0;
  402074:	687b      	ldr	r3, [r7, #4]
  402076:	2200      	movs	r2, #0
  402078:	625a      	str	r2, [r3, #36]	; 0x24
	p_usart->US_TTGR = 0;
  40207a:	687b      	ldr	r3, [r7, #4]
  40207c:	2200      	movs	r2, #0
  40207e:	629a      	str	r2, [r3, #40]	; 0x28

	/* Disable TX and RX. */
	usart_reset_tx(p_usart);
  402080:	6878      	ldr	r0, [r7, #4]
  402082:	4b08      	ldr	r3, [pc, #32]	; (4020a4 <usart_reset+0x44>)
  402084:	4798      	blx	r3
	usart_reset_rx(p_usart);
  402086:	6878      	ldr	r0, [r7, #4]
  402088:	4b07      	ldr	r3, [pc, #28]	; (4020a8 <usart_reset+0x48>)
  40208a:	4798      	blx	r3
	/* Reset status bits. */
	usart_reset_status(p_usart);
  40208c:	6878      	ldr	r0, [r7, #4]
  40208e:	4b07      	ldr	r3, [pc, #28]	; (4020ac <usart_reset+0x4c>)
  402090:	4798      	blx	r3
	/* Turn off RTS and DTR if exist. */
	usart_drive_RTS_pin_high(p_usart);
  402092:	6878      	ldr	r0, [r7, #4]
  402094:	4b06      	ldr	r3, [pc, #24]	; (4020b0 <usart_reset+0x50>)
  402096:	4798      	blx	r3
#if (SAM3S || SAM4S || SAM3U || SAM4L || SAM4E)
	usart_drive_DTR_pin_high(p_usart);
#endif
}
  402098:	3708      	adds	r7, #8
  40209a:	46bd      	mov	sp, r7
  40209c:	bd80      	pop	{r7, pc}
  40209e:	bf00      	nop
  4020a0:	004022f5 	.word	0x004022f5
  4020a4:	00402151 	.word	0x00402151
  4020a8:	0040219d 	.word	0x0040219d
  4020ac:	00402205 	.word	0x00402205
  4020b0:	00402221 	.word	0x00402221

004020b4 <usart_init_rs232>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_rs232(Usart *p_usart,
		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
{
  4020b4:	b580      	push	{r7, lr}
  4020b6:	b084      	sub	sp, #16
  4020b8:	af00      	add	r7, sp, #0
  4020ba:	60f8      	str	r0, [r7, #12]
  4020bc:	60b9      	str	r1, [r7, #8]
  4020be:	607a      	str	r2, [r7, #4]
	static uint32_t ul_reg_val;

	/* Reset the USART and shut down TX and RX. */
	usart_reset(p_usart);
  4020c0:	68f8      	ldr	r0, [r7, #12]
  4020c2:	4b1a      	ldr	r3, [pc, #104]	; (40212c <usart_init_rs232+0x78>)
  4020c4:	4798      	blx	r3

	ul_reg_val = 0;
  4020c6:	4b1a      	ldr	r3, [pc, #104]	; (402130 <usart_init_rs232+0x7c>)
  4020c8:	2200      	movs	r2, #0
  4020ca:	601a      	str	r2, [r3, #0]
	/* Check whether the input values are legal. */
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  4020cc:	68bb      	ldr	r3, [r7, #8]
  4020ce:	2b00      	cmp	r3, #0
  4020d0:	d009      	beq.n	4020e6 <usart_init_rs232+0x32>
  4020d2:	68bb      	ldr	r3, [r7, #8]
  4020d4:	681b      	ldr	r3, [r3, #0]
  4020d6:	68f8      	ldr	r0, [r7, #12]
  4020d8:	4619      	mov	r1, r3
  4020da:	687a      	ldr	r2, [r7, #4]
  4020dc:	4b15      	ldr	r3, [pc, #84]	; (402134 <usart_init_rs232+0x80>)
  4020de:	4798      	blx	r3
  4020e0:	4603      	mov	r3, r0
  4020e2:	2b00      	cmp	r3, #0
  4020e4:	d001      	beq.n	4020ea <usart_init_rs232+0x36>
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
  4020e6:	2301      	movs	r3, #1
  4020e8:	e01b      	b.n	402122 <usart_init_rs232+0x6e>
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  4020ea:	68bb      	ldr	r3, [r7, #8]
  4020ec:	685a      	ldr	r2, [r3, #4]
  4020ee:	68bb      	ldr	r3, [r7, #8]
  4020f0:	689b      	ldr	r3, [r3, #8]
  4020f2:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  4020f4:	68bb      	ldr	r3, [r7, #8]
  4020f6:	691b      	ldr	r3, [r3, #16]
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  4020f8:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  4020fa:	68bb      	ldr	r3, [r7, #8]
  4020fc:	68db      	ldr	r3, [r3, #12]
  4020fe:	431a      	orrs	r2, r3
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  402100:	4b0b      	ldr	r3, [pc, #44]	; (402130 <usart_init_rs232+0x7c>)
  402102:	681b      	ldr	r3, [r3, #0]
  402104:	4313      	orrs	r3, r2
  402106:	4a0a      	ldr	r2, [pc, #40]	; (402130 <usart_init_rs232+0x7c>)
  402108:	6013      	str	r3, [r2, #0]
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;

	/* Configure the USART mode as normal mode. */
	ul_reg_val |= US_MR_USART_MODE_NORMAL;
  40210a:	4b09      	ldr	r3, [pc, #36]	; (402130 <usart_init_rs232+0x7c>)
  40210c:	681b      	ldr	r3, [r3, #0]
  40210e:	4a08      	ldr	r2, [pc, #32]	; (402130 <usart_init_rs232+0x7c>)
  402110:	6013      	str	r3, [r2, #0]

	p_usart->US_MR |= ul_reg_val;
  402112:	68fb      	ldr	r3, [r7, #12]
  402114:	685a      	ldr	r2, [r3, #4]
  402116:	4b06      	ldr	r3, [pc, #24]	; (402130 <usart_init_rs232+0x7c>)
  402118:	681b      	ldr	r3, [r3, #0]
  40211a:	431a      	orrs	r2, r3
  40211c:	68fb      	ldr	r3, [r7, #12]
  40211e:	605a      	str	r2, [r3, #4]

	return 0;
  402120:	2300      	movs	r3, #0
}
  402122:	4618      	mov	r0, r3
  402124:	3710      	adds	r7, #16
  402126:	46bd      	mov	sp, r7
  402128:	bd80      	pop	{r7, pc}
  40212a:	bf00      	nop
  40212c:	00402061 	.word	0x00402061
  402130:	20400988 	.word	0x20400988
  402134:	00401fd5 	.word	0x00401fd5

00402138 <usart_enable_tx>:
 * \brief Enable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_tx(Usart *p_usart)
{
  402138:	b480      	push	{r7}
  40213a:	b083      	sub	sp, #12
  40213c:	af00      	add	r7, sp, #0
  40213e:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_TXEN;
  402140:	687b      	ldr	r3, [r7, #4]
  402142:	2240      	movs	r2, #64	; 0x40
  402144:	601a      	str	r2, [r3, #0]
}
  402146:	370c      	adds	r7, #12
  402148:	46bd      	mov	sp, r7
  40214a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40214e:	4770      	bx	lr

00402150 <usart_reset_tx>:
 * \brief Immediately stop and disable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_tx(Usart *p_usart)
{
  402150:	b480      	push	{r7}
  402152:	b083      	sub	sp, #12
  402154:	af00      	add	r7, sp, #0
  402156:	6078      	str	r0, [r7, #4]
	/* Reset transmitter */
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  402158:	687b      	ldr	r3, [r7, #4]
  40215a:	2288      	movs	r2, #136	; 0x88
  40215c:	601a      	str	r2, [r3, #0]
}
  40215e:	370c      	adds	r7, #12
  402160:	46bd      	mov	sp, r7
  402162:	f85d 7b04 	ldr.w	r7, [sp], #4
  402166:	4770      	bx	lr

00402168 <usart_set_tx_timeguard>:
 *
 * \param p_usart Pointer to a USART instance.
 * \param timeguard The value of transmit timeguard.
 */
void usart_set_tx_timeguard(Usart *p_usart, uint32_t timeguard)
{
  402168:	b480      	push	{r7}
  40216a:	b083      	sub	sp, #12
  40216c:	af00      	add	r7, sp, #0
  40216e:	6078      	str	r0, [r7, #4]
  402170:	6039      	str	r1, [r7, #0]
	p_usart->US_TTGR = timeguard;
  402172:	687b      	ldr	r3, [r7, #4]
  402174:	683a      	ldr	r2, [r7, #0]
  402176:	629a      	str	r2, [r3, #40]	; 0x28
}
  402178:	370c      	adds	r7, #12
  40217a:	46bd      	mov	sp, r7
  40217c:	f85d 7b04 	ldr.w	r7, [sp], #4
  402180:	4770      	bx	lr
  402182:	bf00      	nop

00402184 <usart_enable_rx>:
 * \brief Enable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_rx(Usart *p_usart)
{
  402184:	b480      	push	{r7}
  402186:	b083      	sub	sp, #12
  402188:	af00      	add	r7, sp, #0
  40218a:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RXEN;
  40218c:	687b      	ldr	r3, [r7, #4]
  40218e:	2210      	movs	r2, #16
  402190:	601a      	str	r2, [r3, #0]
}
  402192:	370c      	adds	r7, #12
  402194:	46bd      	mov	sp, r7
  402196:	f85d 7b04 	ldr.w	r7, [sp], #4
  40219a:	4770      	bx	lr

0040219c <usart_reset_rx>:
 * \brief Immediately stop and disable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_rx(Usart *p_usart)
{
  40219c:	b480      	push	{r7}
  40219e:	b083      	sub	sp, #12
  4021a0:	af00      	add	r7, sp, #0
  4021a2:	6078      	str	r0, [r7, #4]
	/* Reset Receiver */
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  4021a4:	687b      	ldr	r3, [r7, #4]
  4021a6:	2224      	movs	r2, #36	; 0x24
  4021a8:	601a      	str	r2, [r3, #0]
}
  4021aa:	370c      	adds	r7, #12
  4021ac:	46bd      	mov	sp, r7
  4021ae:	f85d 7b04 	ldr.w	r7, [sp], #4
  4021b2:	4770      	bx	lr

004021b4 <usart_enable_interrupt>:
 *
 * \param p_usart Pointer to a USART peripheral.
 * \param ul_sources Interrupt sources bit map.
 */
void usart_enable_interrupt(Usart *p_usart, uint32_t ul_sources)
{
  4021b4:	b480      	push	{r7}
  4021b6:	b083      	sub	sp, #12
  4021b8:	af00      	add	r7, sp, #0
  4021ba:	6078      	str	r0, [r7, #4]
  4021bc:	6039      	str	r1, [r7, #0]
	p_usart->US_IER = ul_sources;
  4021be:	687b      	ldr	r3, [r7, #4]
  4021c0:	683a      	ldr	r2, [r7, #0]
  4021c2:	609a      	str	r2, [r3, #8]
}
  4021c4:	370c      	adds	r7, #12
  4021c6:	46bd      	mov	sp, r7
  4021c8:	f85d 7b04 	ldr.w	r7, [sp], #4
  4021cc:	4770      	bx	lr
  4021ce:	bf00      	nop

004021d0 <usart_disable_interrupt>:
 *
 * \param p_usart Pointer to a USART peripheral.
 * \param ul_sources Interrupt sources bit map.
 */
void usart_disable_interrupt(Usart *p_usart, uint32_t ul_sources)
{
  4021d0:	b480      	push	{r7}
  4021d2:	b083      	sub	sp, #12
  4021d4:	af00      	add	r7, sp, #0
  4021d6:	6078      	str	r0, [r7, #4]
  4021d8:	6039      	str	r1, [r7, #0]
	p_usart->US_IDR = ul_sources;
  4021da:	687b      	ldr	r3, [r7, #4]
  4021dc:	683a      	ldr	r2, [r7, #0]
  4021de:	60da      	str	r2, [r3, #12]
}
  4021e0:	370c      	adds	r7, #12
  4021e2:	46bd      	mov	sp, r7
  4021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
  4021e8:	4770      	bx	lr
  4021ea:	bf00      	nop

004021ec <usart_get_status>:
 * \param p_usart Pointer to a USART instance.
 *
 * \return The current USART status.
 */
uint32_t usart_get_status(Usart *p_usart)
{
  4021ec:	b480      	push	{r7}
  4021ee:	b083      	sub	sp, #12
  4021f0:	af00      	add	r7, sp, #0
  4021f2:	6078      	str	r0, [r7, #4]
	return p_usart->US_CSR;
  4021f4:	687b      	ldr	r3, [r7, #4]
  4021f6:	695b      	ldr	r3, [r3, #20]
}
  4021f8:	4618      	mov	r0, r3
  4021fa:	370c      	adds	r7, #12
  4021fc:	46bd      	mov	sp, r7
  4021fe:	f85d 7b04 	ldr.w	r7, [sp], #4
  402202:	4770      	bx	lr

00402204 <usart_reset_status>:
 * \brief Reset status bits (PARE, OVER, MANERR, UNRE and PXBRK in US_CSR).
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_status(Usart *p_usart)
{
  402204:	b480      	push	{r7}
  402206:	b083      	sub	sp, #12
  402208:	af00      	add	r7, sp, #0
  40220a:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RSTSTA;
  40220c:	687b      	ldr	r3, [r7, #4]
  40220e:	f44f 7280 	mov.w	r2, #256	; 0x100
  402212:	601a      	str	r2, [r3, #0]
}
  402214:	370c      	adds	r7, #12
  402216:	46bd      	mov	sp, r7
  402218:	f85d 7b04 	ldr.w	r7, [sp], #4
  40221c:	4770      	bx	lr
  40221e:	bf00      	nop

00402220 <usart_drive_RTS_pin_high>:
 * \brief Drive the pin RTS to 1.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_RTS_pin_high(Usart *p_usart)
{
  402220:	b480      	push	{r7}
  402222:	b083      	sub	sp, #12
  402224:	af00      	add	r7, sp, #0
  402226:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RTSDIS;
  402228:	687b      	ldr	r3, [r7, #4]
  40222a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  40222e:	601a      	str	r2, [r3, #0]
}
  402230:	370c      	adds	r7, #12
  402232:	46bd      	mov	sp, r7
  402234:	f85d 7b04 	ldr.w	r7, [sp], #4
  402238:	4770      	bx	lr
  40223a:	bf00      	nop

0040223c <usart_is_tx_empty>:
 *
 * \retval 1 Transmitter is empty.
 * \retval 0 Transmitter is not empty.
 */
uint32_t usart_is_tx_empty(Usart *p_usart)
{
  40223c:	b480      	push	{r7}
  40223e:	b083      	sub	sp, #12
  402240:	af00      	add	r7, sp, #0
  402242:	6078      	str	r0, [r7, #4]
	return (p_usart->US_CSR & US_CSR_TXEMPTY) > 0;
  402244:	687b      	ldr	r3, [r7, #4]
  402246:	695b      	ldr	r3, [r3, #20]
  402248:	f403 7300 	and.w	r3, r3, #512	; 0x200
  40224c:	2b00      	cmp	r3, #0
  40224e:	bf14      	ite	ne
  402250:	2301      	movne	r3, #1
  402252:	2300      	moveq	r3, #0
  402254:	b2db      	uxtb	r3, r3
}
  402256:	4618      	mov	r0, r3
  402258:	370c      	adds	r7, #12
  40225a:	46bd      	mov	sp, r7
  40225c:	f85d 7b04 	ldr.w	r7, [sp], #4
  402260:	4770      	bx	lr
  402262:	bf00      	nop

00402264 <usart_is_rx_ready>:
 *
 * \retval 1 Some data has been received.
 * \retval 0 No data has been received.
 */
uint32_t usart_is_rx_ready(Usart *p_usart)
{
  402264:	b480      	push	{r7}
  402266:	b083      	sub	sp, #12
  402268:	af00      	add	r7, sp, #0
  40226a:	6078      	str	r0, [r7, #4]
	return (p_usart->US_CSR & US_CSR_RXRDY) > 0;
  40226c:	687b      	ldr	r3, [r7, #4]
  40226e:	695b      	ldr	r3, [r3, #20]
  402270:	f003 0301 	and.w	r3, r3, #1
  402274:	2b00      	cmp	r3, #0
  402276:	bf14      	ite	ne
  402278:	2301      	movne	r3, #1
  40227a:	2300      	moveq	r3, #0
  40227c:	b2db      	uxtb	r3, r3
}
  40227e:	4618      	mov	r0, r3
  402280:	370c      	adds	r7, #12
  402282:	46bd      	mov	sp, r7
  402284:	f85d 7b04 	ldr.w	r7, [sp], #4
  402288:	4770      	bx	lr
  40228a:	bf00      	nop

0040228c <usart_write>:
 *
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
  40228c:	b480      	push	{r7}
  40228e:	b083      	sub	sp, #12
  402290:	af00      	add	r7, sp, #0
  402292:	6078      	str	r0, [r7, #4]
  402294:	6039      	str	r1, [r7, #0]
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  402296:	687b      	ldr	r3, [r7, #4]
  402298:	695b      	ldr	r3, [r3, #20]
  40229a:	f003 0302 	and.w	r3, r3, #2
  40229e:	2b00      	cmp	r3, #0
  4022a0:	d101      	bne.n	4022a6 <usart_write+0x1a>
		return 1;
  4022a2:	2301      	movs	r3, #1
  4022a4:	e005      	b.n	4022b2 <usart_write+0x26>
	}

	p_usart->US_THR = US_THR_TXCHR(c);
  4022a6:	683b      	ldr	r3, [r7, #0]
  4022a8:	f3c3 0208 	ubfx	r2, r3, #0, #9
  4022ac:	687b      	ldr	r3, [r7, #4]
  4022ae:	61da      	str	r2, [r3, #28]
	return 0;
  4022b0:	2300      	movs	r3, #0
}
  4022b2:	4618      	mov	r0, r3
  4022b4:	370c      	adds	r7, #12
  4022b6:	46bd      	mov	sp, r7
  4022b8:	f85d 7b04 	ldr.w	r7, [sp], #4
  4022bc:	4770      	bx	lr
  4022be:	bf00      	nop

004022c0 <usart_read>:
 *
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
  4022c0:	b480      	push	{r7}
  4022c2:	b083      	sub	sp, #12
  4022c4:	af00      	add	r7, sp, #0
  4022c6:	6078      	str	r0, [r7, #4]
  4022c8:	6039      	str	r1, [r7, #0]
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  4022ca:	687b      	ldr	r3, [r7, #4]
  4022cc:	695b      	ldr	r3, [r3, #20]
  4022ce:	f003 0301 	and.w	r3, r3, #1
  4022d2:	2b00      	cmp	r3, #0
  4022d4:	d101      	bne.n	4022da <usart_read+0x1a>
		return 1;
  4022d6:	2301      	movs	r3, #1
  4022d8:	e006      	b.n	4022e8 <usart_read+0x28>
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  4022da:	687b      	ldr	r3, [r7, #4]
  4022dc:	699b      	ldr	r3, [r3, #24]
  4022de:	f3c3 0208 	ubfx	r2, r3, #0, #9
  4022e2:	683b      	ldr	r3, [r7, #0]
  4022e4:	601a      	str	r2, [r3, #0]

	return 0;
  4022e6:	2300      	movs	r3, #0
}
  4022e8:	4618      	mov	r0, r3
  4022ea:	370c      	adds	r7, #12
  4022ec:	46bd      	mov	sp, r7
  4022ee:	f85d 7b04 	ldr.w	r7, [sp], #4
  4022f2:	4770      	bx	lr

004022f4 <usart_disable_writeprotect>:
 * \brief Disable write protect of USART registers.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
  4022f4:	b480      	push	{r7}
  4022f6:	b083      	sub	sp, #12
  4022f8:	af00      	add	r7, sp, #0
  4022fa:	6078      	str	r0, [r7, #4]
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  4022fc:	687b      	ldr	r3, [r7, #4]
  4022fe:	4a04      	ldr	r2, [pc, #16]	; (402310 <usart_disable_writeprotect+0x1c>)
  402300:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
}
  402304:	370c      	adds	r7, #12
  402306:	46bd      	mov	sp, r7
  402308:	f85d 7b04 	ldr.w	r7, [sp], #4
  40230c:	4770      	bx	lr
  40230e:	bf00      	nop
  402310:	55534100 	.word	0x55534100

00402314 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  402314:	b580      	push	{r7, lr}
  402316:	b082      	sub	sp, #8
  402318:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
  40231a:	4b16      	ldr	r3, [pc, #88]	; (402374 <Reset_Handler+0x60>)
  40231c:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
  40231e:	4b16      	ldr	r3, [pc, #88]	; (402378 <Reset_Handler+0x64>)
  402320:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
  402322:	687a      	ldr	r2, [r7, #4]
  402324:	683b      	ldr	r3, [r7, #0]
  402326:	429a      	cmp	r2, r3
  402328:	d00c      	beq.n	402344 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
  40232a:	e007      	b.n	40233c <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
  40232c:	683b      	ldr	r3, [r7, #0]
  40232e:	1d1a      	adds	r2, r3, #4
  402330:	603a      	str	r2, [r7, #0]
  402332:	687a      	ldr	r2, [r7, #4]
  402334:	1d11      	adds	r1, r2, #4
  402336:	6079      	str	r1, [r7, #4]
  402338:	6812      	ldr	r2, [r2, #0]
  40233a:	601a      	str	r2, [r3, #0]
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
  40233c:	683b      	ldr	r3, [r7, #0]
  40233e:	4a0f      	ldr	r2, [pc, #60]	; (40237c <Reset_Handler+0x68>)
  402340:	4293      	cmp	r3, r2
  402342:	d3f3      	bcc.n	40232c <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
  402344:	4b0e      	ldr	r3, [pc, #56]	; (402380 <Reset_Handler+0x6c>)
  402346:	603b      	str	r3, [r7, #0]
  402348:	e004      	b.n	402354 <Reset_Handler+0x40>
                *pDest++ = 0;
  40234a:	683b      	ldr	r3, [r7, #0]
  40234c:	1d1a      	adds	r2, r3, #4
  40234e:	603a      	str	r2, [r7, #0]
  402350:	2200      	movs	r2, #0
  402352:	601a      	str	r2, [r3, #0]
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
  402354:	683b      	ldr	r3, [r7, #0]
  402356:	4a0b      	ldr	r2, [pc, #44]	; (402384 <Reset_Handler+0x70>)
  402358:	4293      	cmp	r3, r2
  40235a:	d3f6      	bcc.n	40234a <Reset_Handler+0x36>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
  40235c:	4b0a      	ldr	r3, [pc, #40]	; (402388 <Reset_Handler+0x74>)
  40235e:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  402360:	4a0a      	ldr	r2, [pc, #40]	; (40238c <Reset_Handler+0x78>)
  402362:	687b      	ldr	r3, [r7, #4]
  402364:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  402368:	6093      	str	r3, [r2, #8]

        /* Initialize the C library */
        __libc_init_array();
  40236a:	4b09      	ldr	r3, [pc, #36]	; (402390 <Reset_Handler+0x7c>)
  40236c:	4798      	blx	r3

        /* Branch to main function */
        main();
  40236e:	4b09      	ldr	r3, [pc, #36]	; (402394 <Reset_Handler+0x80>)
  402370:	4798      	blx	r3

        /* Infinite loop */
        while (1);
  402372:	e7fe      	b.n	402372 <Reset_Handler+0x5e>
  402374:	00409e6c 	.word	0x00409e6c
  402378:	20400000 	.word	0x20400000
  40237c:	204008fc 	.word	0x204008fc
  402380:	204008fc 	.word	0x204008fc
  402384:	204012dc 	.word	0x204012dc
  402388:	00400000 	.word	0x00400000
  40238c:	e000ed00 	.word	0xe000ed00
  402390:	00404321 	.word	0x00404321
  402394:	00403ced 	.word	0x00403ced

00402398 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  402398:	b480      	push	{r7}
  40239a:	af00      	add	r7, sp, #0
        while (1) {
        }
  40239c:	e7fe      	b.n	40239c <Dummy_Handler+0x4>
  40239e:	bf00      	nop

004023a0 <SystemCoreClockUpdate>:

  SystemCoreClock = CHIP_FREQ_CPU_MAX;
}

void SystemCoreClockUpdate( void )
{
  4023a0:	b480      	push	{r7}
  4023a2:	af00      	add	r7, sp, #0
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  4023a4:	4b51      	ldr	r3, [pc, #324]	; (4024ec <SystemCoreClockUpdate+0x14c>)
  4023a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4023a8:	f003 0303 	and.w	r3, r3, #3
  4023ac:	2b01      	cmp	r3, #1
  4023ae:	d014      	beq.n	4023da <SystemCoreClockUpdate+0x3a>
  4023b0:	2b01      	cmp	r3, #1
  4023b2:	d302      	bcc.n	4023ba <SystemCoreClockUpdate+0x1a>
  4023b4:	2b02      	cmp	r3, #2
  4023b6:	d038      	beq.n	40242a <SystemCoreClockUpdate+0x8a>
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
      }
    break;

    default:
    break;
  4023b8:	e07b      	b.n	4024b2 <SystemCoreClockUpdate+0x112>
{
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  {
    case PMC_MCKR_CSS_SLOW_CLK: /* Slow clock */
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  4023ba:	4b4d      	ldr	r3, [pc, #308]	; (4024f0 <SystemCoreClockUpdate+0x150>)
  4023bc:	695b      	ldr	r3, [r3, #20]
  4023be:	f003 0380 	and.w	r3, r3, #128	; 0x80
  4023c2:	2b00      	cmp	r3, #0
  4023c4:	d004      	beq.n	4023d0 <SystemCoreClockUpdate+0x30>
      {
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  4023c6:	4b4b      	ldr	r3, [pc, #300]	; (4024f4 <SystemCoreClockUpdate+0x154>)
  4023c8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  4023cc:	601a      	str	r2, [r3, #0]
      }
      else
      {
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
      }
    break;
  4023ce:	e070      	b.n	4024b2 <SystemCoreClockUpdate+0x112>
      {
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
      }
      else
      {
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  4023d0:	4b48      	ldr	r3, [pc, #288]	; (4024f4 <SystemCoreClockUpdate+0x154>)
  4023d2:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
  4023d6:	601a      	str	r2, [r3, #0]
      }
    break;
  4023d8:	e06b      	b.n	4024b2 <SystemCoreClockUpdate+0x112>

    case PMC_MCKR_CSS_MAIN_CLK: /* Main clock */
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  4023da:	4b44      	ldr	r3, [pc, #272]	; (4024ec <SystemCoreClockUpdate+0x14c>)
  4023dc:	6a1b      	ldr	r3, [r3, #32]
  4023de:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  4023e2:	2b00      	cmp	r3, #0
  4023e4:	d003      	beq.n	4023ee <SystemCoreClockUpdate+0x4e>
      {
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  4023e6:	4b43      	ldr	r3, [pc, #268]	; (4024f4 <SystemCoreClockUpdate+0x154>)
  4023e8:	4a43      	ldr	r2, [pc, #268]	; (4024f8 <SystemCoreClockUpdate+0x158>)
  4023ea:	601a      	str	r2, [r3, #0]
  4023ec:	e01c      	b.n	402428 <SystemCoreClockUpdate+0x88>
      }
      else
      {
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4023ee:	4b41      	ldr	r3, [pc, #260]	; (4024f4 <SystemCoreClockUpdate+0x154>)
  4023f0:	4a42      	ldr	r2, [pc, #264]	; (4024fc <SystemCoreClockUpdate+0x15c>)
  4023f2:	601a      	str	r2, [r3, #0]

        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  4023f4:	4b3d      	ldr	r3, [pc, #244]	; (4024ec <SystemCoreClockUpdate+0x14c>)
  4023f6:	6a1b      	ldr	r3, [r3, #32]
  4023f8:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4023fc:	2b10      	cmp	r3, #16
  4023fe:	d004      	beq.n	40240a <SystemCoreClockUpdate+0x6a>
  402400:	2b20      	cmp	r3, #32
  402402:	d008      	beq.n	402416 <SystemCoreClockUpdate+0x76>
  402404:	2b00      	cmp	r3, #0
  402406:	d00e      	beq.n	402426 <SystemCoreClockUpdate+0x86>
          case CKGR_MOR_MOSCRCF_12_MHz:
            SystemCoreClock *= 3U;
          break;

          default:
          break;
  402408:	e00e      	b.n	402428 <SystemCoreClockUpdate+0x88>
        {
          case CKGR_MOR_MOSCRCF_4_MHz:
          break;

          case CKGR_MOR_MOSCRCF_8_MHz:
            SystemCoreClock *= 2U;
  40240a:	4b3a      	ldr	r3, [pc, #232]	; (4024f4 <SystemCoreClockUpdate+0x154>)
  40240c:	681b      	ldr	r3, [r3, #0]
  40240e:	005b      	lsls	r3, r3, #1
  402410:	4a38      	ldr	r2, [pc, #224]	; (4024f4 <SystemCoreClockUpdate+0x154>)
  402412:	6013      	str	r3, [r2, #0]
          break;
  402414:	e008      	b.n	402428 <SystemCoreClockUpdate+0x88>

          case CKGR_MOR_MOSCRCF_12_MHz:
            SystemCoreClock *= 3U;
  402416:	4b37      	ldr	r3, [pc, #220]	; (4024f4 <SystemCoreClockUpdate+0x154>)
  402418:	681a      	ldr	r2, [r3, #0]
  40241a:	4613      	mov	r3, r2
  40241c:	005b      	lsls	r3, r3, #1
  40241e:	4413      	add	r3, r2
  402420:	4a34      	ldr	r2, [pc, #208]	; (4024f4 <SystemCoreClockUpdate+0x154>)
  402422:	6013      	str	r3, [r2, #0]
          break;
  402424:	e000      	b.n	402428 <SystemCoreClockUpdate+0x88>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;

        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
        {
          case CKGR_MOR_MOSCRCF_4_MHz:
          break;
  402426:	bf00      	nop

          default:
          break;
        }
      }
    break;
  402428:	e043      	b.n	4024b2 <SystemCoreClockUpdate+0x112>

    case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  40242a:	4b30      	ldr	r3, [pc, #192]	; (4024ec <SystemCoreClockUpdate+0x14c>)
  40242c:	6a1b      	ldr	r3, [r3, #32]
  40242e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  402432:	2b00      	cmp	r3, #0
  402434:	d003      	beq.n	40243e <SystemCoreClockUpdate+0x9e>
      {
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  402436:	4b2f      	ldr	r3, [pc, #188]	; (4024f4 <SystemCoreClockUpdate+0x154>)
  402438:	4a2f      	ldr	r2, [pc, #188]	; (4024f8 <SystemCoreClockUpdate+0x158>)
  40243a:	601a      	str	r2, [r3, #0]
  40243c:	e01c      	b.n	402478 <SystemCoreClockUpdate+0xd8>
      }
      else
      {
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  40243e:	4b2d      	ldr	r3, [pc, #180]	; (4024f4 <SystemCoreClockUpdate+0x154>)
  402440:	4a2e      	ldr	r2, [pc, #184]	; (4024fc <SystemCoreClockUpdate+0x15c>)
  402442:	601a      	str	r2, [r3, #0]

        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  402444:	4b29      	ldr	r3, [pc, #164]	; (4024ec <SystemCoreClockUpdate+0x14c>)
  402446:	6a1b      	ldr	r3, [r3, #32]
  402448:	f003 0370 	and.w	r3, r3, #112	; 0x70
  40244c:	2b10      	cmp	r3, #16
  40244e:	d004      	beq.n	40245a <SystemCoreClockUpdate+0xba>
  402450:	2b20      	cmp	r3, #32
  402452:	d008      	beq.n	402466 <SystemCoreClockUpdate+0xc6>
  402454:	2b00      	cmp	r3, #0
  402456:	d00e      	beq.n	402476 <SystemCoreClockUpdate+0xd6>
          case CKGR_MOR_MOSCRCF_12_MHz:
            SystemCoreClock *= 3U;
          break;

          default:
          break;
  402458:	e00e      	b.n	402478 <SystemCoreClockUpdate+0xd8>
        {
          case CKGR_MOR_MOSCRCF_4_MHz:
          break;

          case CKGR_MOR_MOSCRCF_8_MHz:
            SystemCoreClock *= 2U;
  40245a:	4b26      	ldr	r3, [pc, #152]	; (4024f4 <SystemCoreClockUpdate+0x154>)
  40245c:	681b      	ldr	r3, [r3, #0]
  40245e:	005b      	lsls	r3, r3, #1
  402460:	4a24      	ldr	r2, [pc, #144]	; (4024f4 <SystemCoreClockUpdate+0x154>)
  402462:	6013      	str	r3, [r2, #0]
          break;
  402464:	e008      	b.n	402478 <SystemCoreClockUpdate+0xd8>

          case CKGR_MOR_MOSCRCF_12_MHz:
            SystemCoreClock *= 3U;
  402466:	4b23      	ldr	r3, [pc, #140]	; (4024f4 <SystemCoreClockUpdate+0x154>)
  402468:	681a      	ldr	r2, [r3, #0]
  40246a:	4613      	mov	r3, r2
  40246c:	005b      	lsls	r3, r3, #1
  40246e:	4413      	add	r3, r2
  402470:	4a20      	ldr	r2, [pc, #128]	; (4024f4 <SystemCoreClockUpdate+0x154>)
  402472:	6013      	str	r3, [r2, #0]
          break;
  402474:	e000      	b.n	402478 <SystemCoreClockUpdate+0xd8>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;

        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
        {
          case CKGR_MOR_MOSCRCF_4_MHz:
          break;
  402476:	bf00      	nop
          default:
          break;
        }
      }

      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  402478:	4b1c      	ldr	r3, [pc, #112]	; (4024ec <SystemCoreClockUpdate+0x14c>)
  40247a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40247c:	f003 0303 	and.w	r3, r3, #3
  402480:	2b02      	cmp	r3, #2
  402482:	d115      	bne.n	4024b0 <SystemCoreClockUpdate+0x110>
      {
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  402484:	4b19      	ldr	r3, [pc, #100]	; (4024ec <SystemCoreClockUpdate+0x14c>)
  402486:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  402488:	4b1d      	ldr	r3, [pc, #116]	; (402500 <SystemCoreClockUpdate+0x160>)
  40248a:	4013      	ands	r3, r2
  40248c:	0c1b      	lsrs	r3, r3, #16
  40248e:	3301      	adds	r3, #1
  402490:	4a18      	ldr	r2, [pc, #96]	; (4024f4 <SystemCoreClockUpdate+0x154>)
  402492:	6812      	ldr	r2, [r2, #0]
  402494:	fb02 f303 	mul.w	r3, r2, r3
  402498:	4a16      	ldr	r2, [pc, #88]	; (4024f4 <SystemCoreClockUpdate+0x154>)
  40249a:	6013      	str	r3, [r2, #0]
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  40249c:	4b13      	ldr	r3, [pc, #76]	; (4024ec <SystemCoreClockUpdate+0x14c>)
  40249e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  4024a0:	b2db      	uxtb	r3, r3
  4024a2:	4a14      	ldr	r2, [pc, #80]	; (4024f4 <SystemCoreClockUpdate+0x154>)
  4024a4:	6812      	ldr	r2, [r2, #0]
  4024a6:	fbb2 f3f3 	udiv	r3, r2, r3
  4024aa:	4a12      	ldr	r2, [pc, #72]	; (4024f4 <SystemCoreClockUpdate+0x154>)
  4024ac:	6013      	str	r3, [r2, #0]
      }
    break;
  4024ae:	e7ff      	b.n	4024b0 <SystemCoreClockUpdate+0x110>
  4024b0:	bf00      	nop

    default:
    break;
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  4024b2:	4b0e      	ldr	r3, [pc, #56]	; (4024ec <SystemCoreClockUpdate+0x14c>)
  4024b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4024b6:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4024ba:	2b70      	cmp	r3, #112	; 0x70
  4024bc:	d108      	bne.n	4024d0 <SystemCoreClockUpdate+0x130>
  {
    SystemCoreClock /= 3U;
  4024be:	4b0d      	ldr	r3, [pc, #52]	; (4024f4 <SystemCoreClockUpdate+0x154>)
  4024c0:	681b      	ldr	r3, [r3, #0]
  4024c2:	4a10      	ldr	r2, [pc, #64]	; (402504 <SystemCoreClockUpdate+0x164>)
  4024c4:	fba2 2303 	umull	r2, r3, r2, r3
  4024c8:	085b      	lsrs	r3, r3, #1
  4024ca:	4a0a      	ldr	r2, [pc, #40]	; (4024f4 <SystemCoreClockUpdate+0x154>)
  4024cc:	6013      	str	r3, [r2, #0]
  4024ce:	e009      	b.n	4024e4 <SystemCoreClockUpdate+0x144>
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  4024d0:	4b06      	ldr	r3, [pc, #24]	; (4024ec <SystemCoreClockUpdate+0x14c>)
  4024d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4024d4:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4024d8:	091a      	lsrs	r2, r3, #4
  4024da:	4b06      	ldr	r3, [pc, #24]	; (4024f4 <SystemCoreClockUpdate+0x154>)
  4024dc:	681b      	ldr	r3, [r3, #0]
  4024de:	40d3      	lsrs	r3, r2
  4024e0:	4a04      	ldr	r2, [pc, #16]	; (4024f4 <SystemCoreClockUpdate+0x154>)
  4024e2:	6013      	str	r3, [r2, #0]
  }
}
  4024e4:	46bd      	mov	sp, r7
  4024e6:	f85d 7b04 	ldr.w	r7, [sp], #4
  4024ea:	4770      	bx	lr
  4024ec:	400e0600 	.word	0x400e0600
  4024f0:	400e1810 	.word	0x400e1810
  4024f4:	20400004 	.word	0x20400004
  4024f8:	00b71b00 	.word	0x00b71b00
  4024fc:	003d0900 	.word	0x003d0900
  402500:	07ff0000 	.word	0x07ff0000
  402504:	aaaaaaab 	.word	0xaaaaaaab

00402508 <system_init_flash>:
/**
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  402508:	b480      	push	{r7}
  40250a:	b083      	sub	sp, #12
  40250c:	af00      	add	r7, sp, #0
  40250e:	6078      	str	r0, [r7, #4]
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  402510:	687b      	ldr	r3, [r7, #4]
  402512:	4a18      	ldr	r2, [pc, #96]	; (402574 <system_init_flash+0x6c>)
  402514:	4293      	cmp	r3, r2
  402516:	d804      	bhi.n	402522 <system_init_flash+0x1a>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  402518:	4b17      	ldr	r3, [pc, #92]	; (402578 <system_init_flash+0x70>)
  40251a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  40251e:	601a      	str	r2, [r3, #0]
  402520:	e023      	b.n	40256a <system_init_flash+0x62>
  }
  else
  {
    if (ul_clk < CHIP_FREQ_FWS_1)
  402522:	687b      	ldr	r3, [r7, #4]
  402524:	4a15      	ldr	r2, [pc, #84]	; (40257c <system_init_flash+0x74>)
  402526:	4293      	cmp	r3, r2
  402528:	d803      	bhi.n	402532 <system_init_flash+0x2a>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  40252a:	4b13      	ldr	r3, [pc, #76]	; (402578 <system_init_flash+0x70>)
  40252c:	4a14      	ldr	r2, [pc, #80]	; (402580 <system_init_flash+0x78>)
  40252e:	601a      	str	r2, [r3, #0]
  402530:	e01b      	b.n	40256a <system_init_flash+0x62>
    }
    else
    {
      if (ul_clk < CHIP_FREQ_FWS_2)
  402532:	687b      	ldr	r3, [r7, #4]
  402534:	4a13      	ldr	r2, [pc, #76]	; (402584 <system_init_flash+0x7c>)
  402536:	4293      	cmp	r3, r2
  402538:	d803      	bhi.n	402542 <system_init_flash+0x3a>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  40253a:	4b0f      	ldr	r3, [pc, #60]	; (402578 <system_init_flash+0x70>)
  40253c:	4a12      	ldr	r2, [pc, #72]	; (402588 <system_init_flash+0x80>)
  40253e:	601a      	str	r2, [r3, #0]
  402540:	e013      	b.n	40256a <system_init_flash+0x62>
      }
      else
      {
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  402542:	687b      	ldr	r3, [r7, #4]
  402544:	4a11      	ldr	r2, [pc, #68]	; (40258c <system_init_flash+0x84>)
  402546:	4293      	cmp	r3, r2
  402548:	d803      	bhi.n	402552 <system_init_flash+0x4a>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  40254a:	4b0b      	ldr	r3, [pc, #44]	; (402578 <system_init_flash+0x70>)
  40254c:	4a10      	ldr	r2, [pc, #64]	; (402590 <system_init_flash+0x88>)
  40254e:	601a      	str	r2, [r3, #0]
  402550:	e00b      	b.n	40256a <system_init_flash+0x62>
        }
        else
        {
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  402552:	687b      	ldr	r3, [r7, #4]
  402554:	4a0f      	ldr	r2, [pc, #60]	; (402594 <system_init_flash+0x8c>)
  402556:	4293      	cmp	r3, r2
  402558:	d804      	bhi.n	402564 <system_init_flash+0x5c>
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  40255a:	4b07      	ldr	r3, [pc, #28]	; (402578 <system_init_flash+0x70>)
  40255c:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  402560:	601a      	str	r2, [r3, #0]
  402562:	e002      	b.n	40256a <system_init_flash+0x62>
          }
          else
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  402564:	4b04      	ldr	r3, [pc, #16]	; (402578 <system_init_flash+0x70>)
  402566:	4a0c      	ldr	r2, [pc, #48]	; (402598 <system_init_flash+0x90>)
  402568:	601a      	str	r2, [r3, #0]
          }
        }
      }
    }
  }
}
  40256a:	370c      	adds	r7, #12
  40256c:	46bd      	mov	sp, r7
  40256e:	f85d 7b04 	ldr.w	r7, [sp], #4
  402572:	4770      	bx	lr
  402574:	01312cff 	.word	0x01312cff
  402578:	400e0c00 	.word	0x400e0c00
  40257c:	026259ff 	.word	0x026259ff
  402580:	04000100 	.word	0x04000100
  402584:	039386ff 	.word	0x039386ff
  402588:	04000200 	.word	0x04000200
  40258c:	04c4b3ff 	.word	0x04c4b3ff
  402590:	04000300 	.word	0x04000300
  402594:	05f5e0ff 	.word	0x05f5e0ff
  402598:	04000500 	.word	0x04000500

0040259c <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
  40259c:	b480      	push	{r7}
  40259e:	b085      	sub	sp, #20
  4025a0:	af00      	add	r7, sp, #0
  4025a2:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;
  4025a4:	4b10      	ldr	r3, [pc, #64]	; (4025e8 <_sbrk+0x4c>)
  4025a6:	60fb      	str	r3, [r7, #12]

	if (heap == NULL) {
  4025a8:	4b10      	ldr	r3, [pc, #64]	; (4025ec <_sbrk+0x50>)
  4025aa:	681b      	ldr	r3, [r3, #0]
  4025ac:	2b00      	cmp	r3, #0
  4025ae:	d102      	bne.n	4025b6 <_sbrk+0x1a>
		heap = (unsigned char *)&_end;
  4025b0:	4b0e      	ldr	r3, [pc, #56]	; (4025ec <_sbrk+0x50>)
  4025b2:	4a0f      	ldr	r2, [pc, #60]	; (4025f0 <_sbrk+0x54>)
  4025b4:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
  4025b6:	4b0d      	ldr	r3, [pc, #52]	; (4025ec <_sbrk+0x50>)
  4025b8:	681b      	ldr	r3, [r3, #0]
  4025ba:	60bb      	str	r3, [r7, #8]

	if (((int)prev_heap + incr) > ramend) {
  4025bc:	68ba      	ldr	r2, [r7, #8]
  4025be:	687b      	ldr	r3, [r7, #4]
  4025c0:	441a      	add	r2, r3
  4025c2:	68fb      	ldr	r3, [r7, #12]
  4025c4:	429a      	cmp	r2, r3
  4025c6:	dd02      	ble.n	4025ce <_sbrk+0x32>
		return (caddr_t) -1;	
  4025c8:	f04f 33ff 	mov.w	r3, #4294967295
  4025cc:	e006      	b.n	4025dc <_sbrk+0x40>
	}

	heap += incr;
  4025ce:	4b07      	ldr	r3, [pc, #28]	; (4025ec <_sbrk+0x50>)
  4025d0:	681a      	ldr	r2, [r3, #0]
  4025d2:	687b      	ldr	r3, [r7, #4]
  4025d4:	4413      	add	r3, r2
  4025d6:	4a05      	ldr	r2, [pc, #20]	; (4025ec <_sbrk+0x50>)
  4025d8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
  4025da:	68bb      	ldr	r3, [r7, #8]
}
  4025dc:	4618      	mov	r0, r3
  4025de:	3714      	adds	r7, #20
  4025e0:	46bd      	mov	sp, r7
  4025e2:	f85d 7b04 	ldr.w	r7, [sp], #4
  4025e6:	4770      	bx	lr
  4025e8:	2045fffc 	.word	0x2045fffc
  4025ec:	2040098c 	.word	0x2040098c
  4025f0:	204034e0 	.word	0x204034e0

004025f4 <_close>:
{
	return -1;
}

extern int _close(int file)
{
  4025f4:	b480      	push	{r7}
  4025f6:	b083      	sub	sp, #12
  4025f8:	af00      	add	r7, sp, #0
  4025fa:	6078      	str	r0, [r7, #4]
	return -1;
  4025fc:	f04f 33ff 	mov.w	r3, #4294967295
}
  402600:	4618      	mov	r0, r3
  402602:	370c      	adds	r7, #12
  402604:	46bd      	mov	sp, r7
  402606:	f85d 7b04 	ldr.w	r7, [sp], #4
  40260a:	4770      	bx	lr

0040260c <_fstat>:

extern int _fstat(int file, struct stat *st)
{
  40260c:	b480      	push	{r7}
  40260e:	b083      	sub	sp, #12
  402610:	af00      	add	r7, sp, #0
  402612:	6078      	str	r0, [r7, #4]
  402614:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
  402616:	683b      	ldr	r3, [r7, #0]
  402618:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  40261c:	605a      	str	r2, [r3, #4]

	return 0;
  40261e:	2300      	movs	r3, #0
}
  402620:	4618      	mov	r0, r3
  402622:	370c      	adds	r7, #12
  402624:	46bd      	mov	sp, r7
  402626:	f85d 7b04 	ldr.w	r7, [sp], #4
  40262a:	4770      	bx	lr

0040262c <_isatty>:

extern int _isatty(int file)
{
  40262c:	b480      	push	{r7}
  40262e:	b083      	sub	sp, #12
  402630:	af00      	add	r7, sp, #0
  402632:	6078      	str	r0, [r7, #4]
	return 1;
  402634:	2301      	movs	r3, #1
}
  402636:	4618      	mov	r0, r3
  402638:	370c      	adds	r7, #12
  40263a:	46bd      	mov	sp, r7
  40263c:	f85d 7b04 	ldr.w	r7, [sp], #4
  402640:	4770      	bx	lr
  402642:	bf00      	nop

00402644 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
  402644:	b480      	push	{r7}
  402646:	b085      	sub	sp, #20
  402648:	af00      	add	r7, sp, #0
  40264a:	60f8      	str	r0, [r7, #12]
  40264c:	60b9      	str	r1, [r7, #8]
  40264e:	607a      	str	r2, [r7, #4]
	return 0;
  402650:	2300      	movs	r3, #0
}
  402652:	4618      	mov	r0, r3
  402654:	3714      	adds	r7, #20
  402656:	46bd      	mov	sp, r7
  402658:	f85d 7b04 	ldr.w	r7, [sp], #4
  40265c:	4770      	bx	lr
  40265e:	bf00      	nop

00402660 <PCA9952_write_reg>:
 *
 * \param reg_index Register address. Use macros as defined in the header file.
 * \param data Data that should be written to the device register.
 */
void PCA9952_write_reg(unsigned char topBotn, uint8_t reg_index, uint8_t data)
{
  402660:	b580      	push	{r7, lr}
  402662:	b088      	sub	sp, #32
  402664:	af00      	add	r7, sp, #0
  402666:	4603      	mov	r3, r0
  402668:	71fb      	strb	r3, [r7, #7]
  40266a:	460b      	mov	r3, r1
  40266c:	71bb      	strb	r3, [r7, #6]
  40266e:	4613      	mov	r3, r2
  402670:	717b      	strb	r3, [r7, #5]
	uint8_t pack[2];
	twihs_packet_t twi_package;

	pack[0] = reg_index;
  402672:	79bb      	ldrb	r3, [r7, #6]
  402674:	773b      	strb	r3, [r7, #28]
	pack[1] = data;
  402676:	797b      	ldrb	r3, [r7, #5]
  402678:	777b      	strb	r3, [r7, #29]

//7apr15	twi_package.chip = PCA9952_TWI_ADDRESS;

	if (topBotn == LED_TOP)
  40267a:	79fb      	ldrb	r3, [r7, #7]
  40267c:	2b00      	cmp	r3, #0
  40267e:	d102      	bne.n	402686 <PCA9952_write_reg+0x26>
	{
		twi_package.chip = PCA9952_U7_TOPDRIVE_TWI_ADDRESS;
  402680:	2360      	movs	r3, #96	; 0x60
  402682:	763b      	strb	r3, [r7, #24]
  402684:	e004      	b.n	402690 <PCA9952_write_reg+0x30>
	}
	else if (topBotn == LED_BOTTOM)
  402686:	79fb      	ldrb	r3, [r7, #7]
  402688:	2b01      	cmp	r3, #1
  40268a:	d101      	bne.n	402690 <PCA9952_write_reg+0x30>
	{
		twi_package.chip = PCA9952_U8_BOTDRIVE_TWI_ADDRESS;
  40268c:	2361      	movs	r3, #97	; 0x61
  40268e:	763b      	strb	r3, [r7, #24]
	}

	twi_package.addr[0] = 0;		//is this right? 8feb16
  402690:	2300      	movs	r3, #0
  402692:	723b      	strb	r3, [r7, #8]
	twi_package.addr[1] = 0;		//is this right? 8feb16
  402694:	2300      	movs	r3, #0
  402696:	727b      	strb	r3, [r7, #9]
	twi_package.addr[2] = 0;		//is this right? 8feb16
  402698:	2300      	movs	r3, #0
  40269a:	72bb      	strb	r3, [r7, #10]
	twi_package.addr_length = 0;
  40269c:	2300      	movs	r3, #0
  40269e:	60fb      	str	r3, [r7, #12]
	twi_package.buffer = &pack;
  4026a0:	f107 031c 	add.w	r3, r7, #28
  4026a4:	613b      	str	r3, [r7, #16]
	twi_package.length = sizeof(pack);
  4026a6:	2302      	movs	r3, #2
  4026a8:	617b      	str	r3, [r7, #20]

	while(twihs_master_write(PCA9952_TWI, &twi_package)!=TWIHS_SUCCESS);
  4026aa:	bf00      	nop
  4026ac:	f107 0308 	add.w	r3, r7, #8
  4026b0:	4805      	ldr	r0, [pc, #20]	; (4026c8 <PCA9952_write_reg+0x68>)
  4026b2:	4619      	mov	r1, r3
  4026b4:	4b05      	ldr	r3, [pc, #20]	; (4026cc <PCA9952_write_reg+0x6c>)
  4026b6:	4798      	blx	r3
  4026b8:	4603      	mov	r3, r0
  4026ba:	2b00      	cmp	r3, #0
  4026bc:	d1f6      	bne.n	4026ac <PCA9952_write_reg+0x4c>

	return;
  4026be:	bf00      	nop
}
  4026c0:	3720      	adds	r7, #32
  4026c2:	46bd      	mov	sp, r7
  4026c4:	bd80      	pop	{r7, pc}
  4026c6:	bf00      	nop
  4026c8:	40018000 	.word	0x40018000
  4026cc:	00401e21 	.word	0x00401e21

004026d0 <PCA9952_read_reg>:
 *
 * \param reg_index Register address.
 * \returns Register content.
 */
uint8_t PCA9952_read_reg(unsigned char topBotn, uint8_t reg_index)
{
  4026d0:	b580      	push	{r7, lr}
  4026d2:	b088      	sub	sp, #32
  4026d4:	af00      	add	r7, sp, #0
  4026d6:	4603      	mov	r3, r0
  4026d8:	460a      	mov	r2, r1
  4026da:	71fb      	strb	r3, [r7, #7]
  4026dc:	4613      	mov	r3, r2
  4026de:	71bb      	strb	r3, [r7, #6]
	uint8_t data;
	twihs_packet_t twi_package;

//7apr15	twi_package.chip = PCA9952_TWI_ADDRESS;

	if (topBotn == LED_TOP)
  4026e0:	79fb      	ldrb	r3, [r7, #7]
  4026e2:	2b00      	cmp	r3, #0
  4026e4:	d102      	bne.n	4026ec <PCA9952_read_reg+0x1c>
	{
		twi_package.chip = PCA9952_U7_TOPDRIVE_TWI_ADDRESS;
  4026e6:	2360      	movs	r3, #96	; 0x60
  4026e8:	763b      	strb	r3, [r7, #24]
  4026ea:	e004      	b.n	4026f6 <PCA9952_read_reg+0x26>
	}
	else if (topBotn == LED_BOTTOM)
  4026ec:	79fb      	ldrb	r3, [r7, #7]
  4026ee:	2b01      	cmp	r3, #1
  4026f0:	d101      	bne.n	4026f6 <PCA9952_read_reg+0x26>
	{
		twi_package.chip = PCA9952_U8_BOTDRIVE_TWI_ADDRESS;
  4026f2:	2361      	movs	r3, #97	; 0x61
  4026f4:	763b      	strb	r3, [r7, #24]
	}

	twi_package.addr[0] = 0;		//is this right? 8feb16
  4026f6:	2300      	movs	r3, #0
  4026f8:	723b      	strb	r3, [r7, #8]
	twi_package.addr[1] = 0;		//is this right? 8feb16
  4026fa:	2300      	movs	r3, #0
  4026fc:	727b      	strb	r3, [r7, #9]
	twi_package.addr[2] = 0;		//is this right? 8feb16
  4026fe:	2300      	movs	r3, #0
  402700:	72bb      	strb	r3, [r7, #10]
	twi_package.addr_length = 0;
  402702:	2300      	movs	r3, #0
  402704:	60fb      	str	r3, [r7, #12]
	twi_package.buffer = &reg_index;
  402706:	1dbb      	adds	r3, r7, #6
  402708:	613b      	str	r3, [r7, #16]
	twi_package.length = 1;
  40270a:	2301      	movs	r3, #1
  40270c:	617b      	str	r3, [r7, #20]
	while(twihs_master_write(PCA9952_TWI, &twi_package)!=TWIHS_SUCCESS);
  40270e:	bf00      	nop
  402710:	f107 0308 	add.w	r3, r7, #8
  402714:	480f      	ldr	r0, [pc, #60]	; (402754 <PCA9952_read_reg+0x84>)
  402716:	4619      	mov	r1, r3
  402718:	4b0f      	ldr	r3, [pc, #60]	; (402758 <PCA9952_read_reg+0x88>)
  40271a:	4798      	blx	r3
  40271c:	4603      	mov	r3, r0
  40271e:	2b00      	cmp	r3, #0
  402720:	d1f6      	bne.n	402710 <PCA9952_read_reg+0x40>
	* specified in the datasheet.
	* Also there seems to be a bug in the TWI module or the driver
	* since some delay here (code or real delay) adds about 500us
	* between the write and the next read cycle.
	*/
	mdelay(20);
  402722:	2014      	movs	r0, #20
  402724:	4b0d      	ldr	r3, [pc, #52]	; (40275c <PCA9952_read_reg+0x8c>)
  402726:	4798      	blx	r3

//7apr15 this was set above, no need to reassign	twi_package.chip = PCA9952_TWI_ADDRESS;
	twi_package.addr_length = 0;
  402728:	2300      	movs	r3, #0
  40272a:	60fb      	str	r3, [r7, #12]
	twi_package.buffer = &data;
  40272c:	f107 031f 	add.w	r3, r7, #31
  402730:	613b      	str	r3, [r7, #16]
	twi_package.length = 1;
  402732:	2301      	movs	r3, #1
  402734:	617b      	str	r3, [r7, #20]
	while(twihs_master_read(PCA9952_TWI, &twi_package)!=TWIHS_SUCCESS);
  402736:	bf00      	nop
  402738:	f107 0308 	add.w	r3, r7, #8
  40273c:	4805      	ldr	r0, [pc, #20]	; (402754 <PCA9952_read_reg+0x84>)
  40273e:	4619      	mov	r1, r3
  402740:	4b07      	ldr	r3, [pc, #28]	; (402760 <PCA9952_read_reg+0x90>)
  402742:	4798      	blx	r3
  402744:	4603      	mov	r3, r0
  402746:	2b00      	cmp	r3, #0
  402748:	d1f6      	bne.n	402738 <PCA9952_read_reg+0x68>

	return data;
  40274a:	7ffb      	ldrb	r3, [r7, #31]
}
  40274c:	4618      	mov	r0, r3
  40274e:	3720      	adds	r7, #32
  402750:	46bd      	mov	sp, r7
  402752:	bd80      	pop	{r7, pc}
  402754:	40018000 	.word	0x40018000
  402758:	00401e21 	.word	0x00401e21
  40275c:	0040379d 	.word	0x0040379d
  402760:	00401d39 	.word	0x00401d39

00402764 <PCA9952_init>:

extern uint8_t func_transmit(const uint8_t *p_buff, uint32_t ulsize); //lazy, defined in another c file 10feb16 jsi

void PCA9952_init(void) //7apr15
{
  402764:	b5b0      	push	{r4, r5, r7, lr}
  402766:	b094      	sub	sp, #80	; 0x50
  402768:	af02      	add	r7, sp, #8
	volatile uint8_t tmp1, tmp2, tmp3, tmp4;
	
	char printStr[64] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
  40276a:	1d3b      	adds	r3, r7, #4
  40276c:	2240      	movs	r2, #64	; 0x40
  40276e:	4618      	mov	r0, r3
  402770:	2100      	movs	r1, #0
  402772:	4b45      	ldr	r3, [pc, #276]	; (402888 <PCA9952_init+0x124>)
  402774:	4798      	blx	r3
	/* Store cpu frequency locally*/
//7apr15	cpu_hz = fcpu;

	//Note output is off at the chip level before coming into this routine, LED_OEn set high before calling this function from main()

	PCA9952_write_reg(LED_TOP, PCA9952_MODE1, 0);		//No autoincrement, normal mode not sleep, does not respond to sub or allcall addresses
  402776:	2000      	movs	r0, #0
  402778:	2100      	movs	r1, #0
  40277a:	2200      	movs	r2, #0
  40277c:	4b43      	ldr	r3, [pc, #268]	; (40288c <PCA9952_init+0x128>)
  40277e:	4798      	blx	r3
	PCA9952_write_reg(LED_TOP, PCA9952_MODE2, 0);		//Dimming not blinking, change on stop not ack (don't really care but have to pick something)
  402780:	2000      	movs	r0, #0
  402782:	2101      	movs	r1, #1
  402784:	2200      	movs	r2, #0
  402786:	4b41      	ldr	r3, [pc, #260]	; (40288c <PCA9952_init+0x128>)
  402788:	4798      	blx	r3
	PCA9952_write_reg(LED_TOP, PCA9952_IREFALL, LED_DRIVER_CURRENT); //9apr15 drive at half current for now, power supply circuit needs modification
  40278a:	2000      	movs	r0, #0
  40278c:	2143      	movs	r1, #67	; 0x43
  40278e:	22c8      	movs	r2, #200	; 0xc8
  402790:	4b3e      	ldr	r3, [pc, #248]	; (40288c <PCA9952_init+0x128>)
  402792:	4798      	blx	r3
	PCA9952_write_reg(LED_TOP, PCA9952_LEDOUT0, 0);		//Setting all channels off for now
  402794:	2000      	movs	r0, #0
  402796:	2102      	movs	r1, #2
  402798:	2200      	movs	r2, #0
  40279a:	4b3c      	ldr	r3, [pc, #240]	; (40288c <PCA9952_init+0x128>)
  40279c:	4798      	blx	r3
	PCA9952_write_reg(LED_TOP, PCA9952_LEDOUT1, 0);
  40279e:	2000      	movs	r0, #0
  4027a0:	2103      	movs	r1, #3
  4027a2:	2200      	movs	r2, #0
  4027a4:	4b39      	ldr	r3, [pc, #228]	; (40288c <PCA9952_init+0x128>)
  4027a6:	4798      	blx	r3
	PCA9952_write_reg(LED_TOP, PCA9952_LEDOUT2, 0);
  4027a8:	2000      	movs	r0, #0
  4027aa:	2104      	movs	r1, #4
  4027ac:	2200      	movs	r2, #0
  4027ae:	4b37      	ldr	r3, [pc, #220]	; (40288c <PCA9952_init+0x128>)
  4027b0:	4798      	blx	r3
	PCA9952_write_reg(LED_TOP, PCA9952_LEDOUT3, 0);
  4027b2:	2000      	movs	r0, #0
  4027b4:	2105      	movs	r1, #5
  4027b6:	2200      	movs	r2, #0
  4027b8:	4b34      	ldr	r3, [pc, #208]	; (40288c <PCA9952_init+0x128>)
  4027ba:	4798      	blx	r3

	tmp1 = PCA9952_read_reg(LED_TOP, PCA9952_EFLAG0);	//TODO: just see what we get, will need to weave error checking into this system later
  4027bc:	2000      	movs	r0, #0
  4027be:	2144      	movs	r1, #68	; 0x44
  4027c0:	4b33      	ldr	r3, [pc, #204]	; (402890 <PCA9952_init+0x12c>)
  4027c2:	4798      	blx	r3
  4027c4:	4603      	mov	r3, r0
  4027c6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	tmp2 = PCA9952_read_reg(LED_TOP, PCA9952_EFLAG1);
  4027ca:	2000      	movs	r0, #0
  4027cc:	2145      	movs	r1, #69	; 0x45
  4027ce:	4b30      	ldr	r3, [pc, #192]	; (402890 <PCA9952_init+0x12c>)
  4027d0:	4798      	blx	r3
  4027d2:	4603      	mov	r3, r0
  4027d4:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46

	PCA9952_write_reg(LED_BOTTOM, PCA9952_MODE1, 0);		//No autoincrement, normal mode not sleep, does not respond to sub or allcall addresses
  4027d8:	2001      	movs	r0, #1
  4027da:	2100      	movs	r1, #0
  4027dc:	2200      	movs	r2, #0
  4027de:	4b2b      	ldr	r3, [pc, #172]	; (40288c <PCA9952_init+0x128>)
  4027e0:	4798      	blx	r3
	PCA9952_write_reg(LED_BOTTOM, PCA9952_MODE2, 0);		//Dimming not blinking, change on stop not ack (don't really care but have to pick something)
  4027e2:	2001      	movs	r0, #1
  4027e4:	2101      	movs	r1, #1
  4027e6:	2200      	movs	r2, #0
  4027e8:	4b28      	ldr	r3, [pc, #160]	; (40288c <PCA9952_init+0x128>)
  4027ea:	4798      	blx	r3
	PCA9952_write_reg(LED_BOTTOM, PCA9952_IREFALL, LED_DRIVER_CURRENT); //9apr15 drive at half current for now, power supply circuit needs modification
  4027ec:	2001      	movs	r0, #1
  4027ee:	2143      	movs	r1, #67	; 0x43
  4027f0:	22c8      	movs	r2, #200	; 0xc8
  4027f2:	4b26      	ldr	r3, [pc, #152]	; (40288c <PCA9952_init+0x128>)
  4027f4:	4798      	blx	r3
	PCA9952_write_reg(LED_BOTTOM, PCA9952_LEDOUT0, 0);		//Setting all channels off for now
  4027f6:	2001      	movs	r0, #1
  4027f8:	2102      	movs	r1, #2
  4027fa:	2200      	movs	r2, #0
  4027fc:	4b23      	ldr	r3, [pc, #140]	; (40288c <PCA9952_init+0x128>)
  4027fe:	4798      	blx	r3
	PCA9952_write_reg(LED_BOTTOM, PCA9952_LEDOUT1, 0);
  402800:	2001      	movs	r0, #1
  402802:	2103      	movs	r1, #3
  402804:	2200      	movs	r2, #0
  402806:	4b21      	ldr	r3, [pc, #132]	; (40288c <PCA9952_init+0x128>)
  402808:	4798      	blx	r3
	PCA9952_write_reg(LED_BOTTOM, PCA9952_LEDOUT2, 0);
  40280a:	2001      	movs	r0, #1
  40280c:	2104      	movs	r1, #4
  40280e:	2200      	movs	r2, #0
  402810:	4b1e      	ldr	r3, [pc, #120]	; (40288c <PCA9952_init+0x128>)
  402812:	4798      	blx	r3
	PCA9952_write_reg(LED_BOTTOM, PCA9952_LEDOUT3, 0);
  402814:	2001      	movs	r0, #1
  402816:	2105      	movs	r1, #5
  402818:	2200      	movs	r2, #0
  40281a:	4b1c      	ldr	r3, [pc, #112]	; (40288c <PCA9952_init+0x128>)
  40281c:	4798      	blx	r3

	tmp3 = PCA9952_read_reg(LED_BOTTOM, PCA9952_EFLAG0);	//TODO: just see what we get, will need to weave error checking into this system later
  40281e:	2001      	movs	r0, #1
  402820:	2144      	movs	r1, #68	; 0x44
  402822:	4b1b      	ldr	r3, [pc, #108]	; (402890 <PCA9952_init+0x12c>)
  402824:	4798      	blx	r3
  402826:	4603      	mov	r3, r0
  402828:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
	tmp4 = PCA9952_read_reg(LED_BOTTOM, PCA9952_EFLAG1);
  40282c:	2001      	movs	r0, #1
  40282e:	2145      	movs	r1, #69	; 0x45
  402830:	4b17      	ldr	r3, [pc, #92]	; (402890 <PCA9952_init+0x12c>)
  402832:	4798      	blx	r3
  402834:	4603      	mov	r3, r0
  402836:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
	
	sprintf(printStr,"PCA9952: tmp1: %x tmp2: %x tmp3: %x tmp4: %x\r\n", tmp1, tmp2, tmp3, tmp4); //10feb16 just for debug jsi
  40283a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
  40283e:	b2db      	uxtb	r3, r3
  402840:	461d      	mov	r5, r3
  402842:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
  402846:	b2db      	uxtb	r3, r3
  402848:	461c      	mov	r4, r3
  40284a:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
  40284e:	b2db      	uxtb	r3, r3
  402850:	4619      	mov	r1, r3
  402852:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
  402856:	b2db      	uxtb	r3, r3
  402858:	461a      	mov	r2, r3
  40285a:	1d3b      	adds	r3, r7, #4
  40285c:	9100      	str	r1, [sp, #0]
  40285e:	9201      	str	r2, [sp, #4]
  402860:	4618      	mov	r0, r3
  402862:	490c      	ldr	r1, [pc, #48]	; (402894 <PCA9952_init+0x130>)
  402864:	462a      	mov	r2, r5
  402866:	4623      	mov	r3, r4
  402868:	4c0b      	ldr	r4, [pc, #44]	; (402898 <PCA9952_init+0x134>)
  40286a:	47a0      	blx	r4
	func_transmit(printStr, strlen(printStr));
  40286c:	1d3b      	adds	r3, r7, #4
  40286e:	4618      	mov	r0, r3
  402870:	4b0a      	ldr	r3, [pc, #40]	; (40289c <PCA9952_init+0x138>)
  402872:	4798      	blx	r3
  402874:	4602      	mov	r2, r0
  402876:	1d3b      	adds	r3, r7, #4
  402878:	4618      	mov	r0, r3
  40287a:	4611      	mov	r1, r2
  40287c:	4b08      	ldr	r3, [pc, #32]	; (4028a0 <PCA9952_init+0x13c>)
  40287e:	4798      	blx	r3
	
	
}
  402880:	3748      	adds	r7, #72	; 0x48
  402882:	46bd      	mov	sp, r7
  402884:	bdb0      	pop	{r4, r5, r7, pc}
  402886:	bf00      	nop
  402888:	00404371 	.word	0x00404371
  40288c:	00402661 	.word	0x00402661
  402890:	004026d1 	.word	0x004026d1
  402894:	00409b54 	.word	0x00409b54
  402898:	0040458d 	.word	0x0040458d
  40289c:	004045d9 	.word	0x004045d9
  4028a0:	0040397d 	.word	0x0040397d

004028a4 <ioport_set_pin_dir>:
 * \param pin IOPORT pin to configure
 * \param dir Direction to set for the specified pin (\ref ioport_direction)
 */
static inline void ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
  4028a4:	b480      	push	{r7}
  4028a6:	b08d      	sub	sp, #52	; 0x34
  4028a8:	af00      	add	r7, sp, #0
  4028aa:	6078      	str	r0, [r7, #4]
  4028ac:	460b      	mov	r3, r1
  4028ae:	70fb      	strb	r3, [r7, #3]
  4028b0:	687b      	ldr	r3, [r7, #4]
  4028b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  4028b4:	78fb      	ldrb	r3, [r7, #3]
  4028b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  4028ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4028bc:	627b      	str	r3, [r7, #36]	; 0x24
  4028be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4028c0:	623b      	str	r3, [r7, #32]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  4028c2:	6a3b      	ldr	r3, [r7, #32]
  4028c4:	095b      	lsrs	r3, r3, #5
  4028c6:	61fb      	str	r3, [r7, #28]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  4028c8:	69fa      	ldr	r2, [r7, #28]
  4028ca:	4b17      	ldr	r3, [pc, #92]	; (402928 <ioport_set_pin_dir+0x84>)
  4028cc:	4413      	add	r3, r2
  4028ce:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);
  4028d0:	61bb      	str	r3, [r7, #24]

	if (dir == IOPORT_DIR_OUTPUT) {
  4028d2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  4028d6:	2b01      	cmp	r3, #1
  4028d8:	d109      	bne.n	4028ee <ioport_set_pin_dir+0x4a>
  4028da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4028dc:	617b      	str	r3, [r7, #20]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  4028de:	697b      	ldr	r3, [r7, #20]
  4028e0:	f003 031f 	and.w	r3, r3, #31
  4028e4:	2201      	movs	r2, #1
  4028e6:	409a      	lsls	r2, r3
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4028e8:	69bb      	ldr	r3, [r7, #24]
  4028ea:	611a      	str	r2, [r3, #16]
  4028ec:	e00c      	b.n	402908 <ioport_set_pin_dir+0x64>
	} else if (dir == IOPORT_DIR_INPUT) {
  4028ee:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  4028f2:	2b00      	cmp	r3, #0
  4028f4:	d108      	bne.n	402908 <ioport_set_pin_dir+0x64>
  4028f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4028f8:	613b      	str	r3, [r7, #16]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  4028fa:	693b      	ldr	r3, [r7, #16]
  4028fc:	f003 031f 	and.w	r3, r3, #31
  402900:	2201      	movs	r2, #1
  402902:	409a      	lsls	r2, r3
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  402904:	69bb      	ldr	r3, [r7, #24]
  402906:	615a      	str	r2, [r3, #20]
  402908:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  40290a:	60fb      	str	r3, [r7, #12]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  40290c:	68fb      	ldr	r3, [r7, #12]
  40290e:	f003 031f 	and.w	r3, r3, #31
  402912:	2201      	movs	r2, #1
  402914:	409a      	lsls	r2, r3
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  402916:	69bb      	ldr	r3, [r7, #24]
  402918:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	arch_ioport_set_pin_dir(pin, dir);
}
  40291c:	3734      	adds	r7, #52	; 0x34
  40291e:	46bd      	mov	sp, r7
  402920:	f85d 7b04 	ldr.w	r7, [sp], #4
  402924:	4770      	bx	lr
  402926:	bf00      	nop
  402928:	00200707 	.word	0x00200707

0040292c <ioport_set_pin_level>:
 *
 * \param pin IOPORT pin to configure
 * \param level Logical value of the pin
 */
static inline void ioport_set_pin_level(ioport_pin_t pin, bool level)
{
  40292c:	b480      	push	{r7}
  40292e:	b08b      	sub	sp, #44	; 0x2c
  402930:	af00      	add	r7, sp, #0
  402932:	6078      	str	r0, [r7, #4]
  402934:	460b      	mov	r3, r1
  402936:	70fb      	strb	r3, [r7, #3]
  402938:	687b      	ldr	r3, [r7, #4]
  40293a:	627b      	str	r3, [r7, #36]	; 0x24
  40293c:	78fb      	ldrb	r3, [r7, #3]
  40293e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  402942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  402944:	61fb      	str	r3, [r7, #28]
  402946:	69fb      	ldr	r3, [r7, #28]
  402948:	61bb      	str	r3, [r7, #24]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  40294a:	69bb      	ldr	r3, [r7, #24]
  40294c:	095b      	lsrs	r3, r3, #5
  40294e:	617b      	str	r3, [r7, #20]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  402950:	697a      	ldr	r2, [r7, #20]
  402952:	4b10      	ldr	r3, [pc, #64]	; (402994 <ioport_set_pin_level+0x68>)
  402954:	4413      	add	r3, r2
  402956:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);
  402958:	613b      	str	r3, [r7, #16]

	if (level) {
  40295a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
  40295e:	2b00      	cmp	r3, #0
  402960:	d009      	beq.n	402976 <ioport_set_pin_level+0x4a>
  402962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  402964:	60fb      	str	r3, [r7, #12]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  402966:	68fb      	ldr	r3, [r7, #12]
  402968:	f003 031f 	and.w	r3, r3, #31
  40296c:	2201      	movs	r2, #1
  40296e:	409a      	lsls	r2, r3
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  402970:	693b      	ldr	r3, [r7, #16]
  402972:	631a      	str	r2, [r3, #48]	; 0x30
  402974:	e008      	b.n	402988 <ioport_set_pin_level+0x5c>
  402976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  402978:	60bb      	str	r3, [r7, #8]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  40297a:	68bb      	ldr	r3, [r7, #8]
  40297c:	f003 031f 	and.w	r3, r3, #31
  402980:	2201      	movs	r2, #1
  402982:	409a      	lsls	r2, r3
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  402984:	693b      	ldr	r3, [r7, #16]
  402986:	635a      	str	r2, [r3, #52]	; 0x34
	arch_ioport_set_pin_level(pin, level);
}
  402988:	372c      	adds	r7, #44	; 0x2c
  40298a:	46bd      	mov	sp, r7
  40298c:	f85d 7b04 	ldr.w	r7, [sp], #4
  402990:	4770      	bx	lr
  402992:	bf00      	nop
  402994:	00200707 	.word	0x00200707

00402998 <ioport_get_pin_level>:
 *
 * \param pin IOPORT pin to read
 * \return Current logical value of the specified pin
 */
static inline bool ioport_get_pin_level(ioport_pin_t pin)
{
  402998:	b480      	push	{r7}
  40299a:	b089      	sub	sp, #36	; 0x24
  40299c:	af00      	add	r7, sp, #0
  40299e:	6078      	str	r0, [r7, #4]
  4029a0:	687b      	ldr	r3, [r7, #4]
  4029a2:	61fb      	str	r3, [r7, #28]
  4029a4:	69fb      	ldr	r3, [r7, #28]
  4029a6:	61bb      	str	r3, [r7, #24]
  4029a8:	69bb      	ldr	r3, [r7, #24]
  4029aa:	617b      	str	r3, [r7, #20]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  4029ac:	697b      	ldr	r3, [r7, #20]
  4029ae:	095b      	lsrs	r3, r3, #5
  4029b0:	613b      	str	r3, [r7, #16]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  4029b2:	693a      	ldr	r2, [r7, #16]
  4029b4:	4b0b      	ldr	r3, [pc, #44]	; (4029e4 <ioport_get_pin_level+0x4c>)
  4029b6:	4413      	add	r3, r2
  4029b8:	025b      	lsls	r3, r3, #9
	base->PIO_CODR = mask & ~level;
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  4029ba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
  4029bc:	69fb      	ldr	r3, [r7, #28]
  4029be:	60fb      	str	r3, [r7, #12]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  4029c0:	68fb      	ldr	r3, [r7, #12]
  4029c2:	f003 031f 	and.w	r3, r3, #31
  4029c6:	2101      	movs	r1, #1
  4029c8:	fa01 f303 	lsl.w	r3, r1, r3
	base->PIO_CODR = mask & ~level;
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  4029cc:	4013      	ands	r3, r2
  4029ce:	2b00      	cmp	r3, #0
  4029d0:	bf14      	ite	ne
  4029d2:	2301      	movne	r3, #1
  4029d4:	2300      	moveq	r3, #0
  4029d6:	b2db      	uxtb	r3, r3
	return arch_ioport_get_pin_level(pin);
}
  4029d8:	4618      	mov	r0, r3
  4029da:	3724      	adds	r7, #36	; 0x24
  4029dc:	46bd      	mov	sp, r7
  4029de:	f85d 7b04 	ldr.w	r7, [sp], #4
  4029e2:	4770      	bx	lr
  4029e4:	00200707 	.word	0x00200707

004029e8 <udelay>:
/*
 * We have a 100MHz clock, so 100 NOPs should be about 1ns. 
 * Tried to do a 1ns tick but the chip can't seem to handle it.
 */
void udelay(uint32_t ul_dly_ticks)
{
  4029e8:	b480      	push	{r7}
  4029ea:	b085      	sub	sp, #20
  4029ec:	af00      	add	r7, sp, #0
  4029ee:	6078      	str	r0, [r7, #4]
	for (uint32_t i=0; i<ul_dly_ticks; i++)
  4029f0:	2300      	movs	r3, #0
  4029f2:	60fb      	str	r3, [r7, #12]
  4029f4:	e066      	b.n	402ac4 <udelay+0xdc>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  4029f6:	bf00      	nop
  4029f8:	bf00      	nop
  4029fa:	bf00      	nop
  4029fc:	bf00      	nop
  4029fe:	bf00      	nop
  402a00:	bf00      	nop
  402a02:	bf00      	nop
  402a04:	bf00      	nop
  402a06:	bf00      	nop
  402a08:	bf00      	nop
  402a0a:	bf00      	nop
  402a0c:	bf00      	nop
  402a0e:	bf00      	nop
  402a10:	bf00      	nop
  402a12:	bf00      	nop
  402a14:	bf00      	nop
  402a16:	bf00      	nop
  402a18:	bf00      	nop
  402a1a:	bf00      	nop
  402a1c:	bf00      	nop
  402a1e:	bf00      	nop
  402a20:	bf00      	nop
  402a22:	bf00      	nop
  402a24:	bf00      	nop
  402a26:	bf00      	nop
  402a28:	bf00      	nop
  402a2a:	bf00      	nop
  402a2c:	bf00      	nop
  402a2e:	bf00      	nop
  402a30:	bf00      	nop
  402a32:	bf00      	nop
  402a34:	bf00      	nop
  402a36:	bf00      	nop
  402a38:	bf00      	nop
  402a3a:	bf00      	nop
  402a3c:	bf00      	nop
  402a3e:	bf00      	nop
  402a40:	bf00      	nop
  402a42:	bf00      	nop
  402a44:	bf00      	nop
  402a46:	bf00      	nop
  402a48:	bf00      	nop
  402a4a:	bf00      	nop
  402a4c:	bf00      	nop
  402a4e:	bf00      	nop
  402a50:	bf00      	nop
  402a52:	bf00      	nop
  402a54:	bf00      	nop
  402a56:	bf00      	nop
  402a58:	bf00      	nop
  402a5a:	bf00      	nop
  402a5c:	bf00      	nop
  402a5e:	bf00      	nop
  402a60:	bf00      	nop
  402a62:	bf00      	nop
  402a64:	bf00      	nop
  402a66:	bf00      	nop
  402a68:	bf00      	nop
  402a6a:	bf00      	nop
  402a6c:	bf00      	nop
  402a6e:	bf00      	nop
  402a70:	bf00      	nop
  402a72:	bf00      	nop
  402a74:	bf00      	nop
  402a76:	bf00      	nop
  402a78:	bf00      	nop
  402a7a:	bf00      	nop
  402a7c:	bf00      	nop
  402a7e:	bf00      	nop
  402a80:	bf00      	nop
  402a82:	bf00      	nop
  402a84:	bf00      	nop
  402a86:	bf00      	nop
  402a88:	bf00      	nop
  402a8a:	bf00      	nop
  402a8c:	bf00      	nop
  402a8e:	bf00      	nop
  402a90:	bf00      	nop
  402a92:	bf00      	nop
  402a94:	bf00      	nop
  402a96:	bf00      	nop
  402a98:	bf00      	nop
  402a9a:	bf00      	nop
  402a9c:	bf00      	nop
  402a9e:	bf00      	nop
  402aa0:	bf00      	nop
  402aa2:	bf00      	nop
  402aa4:	bf00      	nop
  402aa6:	bf00      	nop
  402aa8:	bf00      	nop
  402aaa:	bf00      	nop
  402aac:	bf00      	nop
  402aae:	bf00      	nop
  402ab0:	bf00      	nop
  402ab2:	bf00      	nop
  402ab4:	bf00      	nop
  402ab6:	bf00      	nop
  402ab8:	bf00      	nop
  402aba:	bf00      	nop
  402abc:	bf00      	nop
  402abe:	68fb      	ldr	r3, [r7, #12]
  402ac0:	3301      	adds	r3, #1
  402ac2:	60fb      	str	r3, [r7, #12]
  402ac4:	68fa      	ldr	r2, [r7, #12]
  402ac6:	687b      	ldr	r3, [r7, #4]
  402ac8:	429a      	cmp	r2, r3
  402aca:	d394      	bcc.n	4029f6 <udelay+0xe>
		__NOP(); __NOP(); __NOP(); __NOP(); __NOP(); __NOP(); __NOP(); __NOP(); __NOP(); __NOP();
		__NOP(); __NOP(); __NOP(); __NOP(); __NOP(); __NOP(); __NOP(); __NOP(); __NOP(); __NOP();
		__NOP(); __NOP(); __NOP(); __NOP(); __NOP(); __NOP(); __NOP(); __NOP(); __NOP(); __NOP();
		__NOP(); __NOP(); __NOP(); __NOP(); __NOP(); __NOP(); __NOP(); __NOP(); __NOP(); __NOP();
	}
}
  402acc:	3714      	adds	r7, #20
  402ace:	46bd      	mov	sp, r7
  402ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
  402ad4:	4770      	bx	lr
  402ad6:	bf00      	nop

00402ad8 <io_pin>:

#define EC_ONE_MICROSECOND 8

unsigned char io_pin(unsigned char idx);
unsigned char io_pin(unsigned char idx)
{
  402ad8:	b480      	push	{r7}
  402ada:	b083      	sub	sp, #12
  402adc:	af00      	add	r7, sp, #0
  402ade:	4603      	mov	r3, r0
  402ae0:	71fb      	strb	r3, [r7, #7]
	switch (idx)
  402ae2:	79fb      	ldrb	r3, [r7, #7]
  402ae4:	2b04      	cmp	r3, #4
  402ae6:	d817      	bhi.n	402b18 <io_pin+0x40>
  402ae8:	a201      	add	r2, pc, #4	; (adr r2, 402af0 <io_pin+0x18>)
  402aea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  402aee:	bf00      	nop
  402af0:	00402b05 	.word	0x00402b05
  402af4:	00402b09 	.word	0x00402b09
  402af8:	00402b0d 	.word	0x00402b0d
  402afc:	00402b11 	.word	0x00402b11
  402b00:	00402b15 	.word	0x00402b15
	{
		case 0:
			return ECLAVE_SERIAL_ID0;
  402b04:	230f      	movs	r3, #15
  402b06:	e008      	b.n	402b1a <io_pin+0x42>
			break;
		case 1:
			return ECLAVE_SERIAL_ID1;
  402b08:	2310      	movs	r3, #16
  402b0a:	e006      	b.n	402b1a <io_pin+0x42>
			break;
		case 2:
			return ECLAVE_SERIAL_ID2;
  402b0c:	2311      	movs	r3, #17
  402b0e:	e004      	b.n	402b1a <io_pin+0x42>
			break;
		case 3:
			return ECLAVE_SERIAL_ID3;
  402b10:	2312      	movs	r3, #18
  402b12:	e002      	b.n	402b1a <io_pin+0x42>
			break;
		case 4:
			return ECLAVE_SERIAL_ID4;
  402b14:	2313      	movs	r3, #19
  402b16:	e000      	b.n	402b1a <io_pin+0x42>
			break;
		default: 
			return 0; //TODO: return a better error code here
  402b18:	2300      	movs	r3, #0
			break;
	}
}
  402b1a:	4618      	mov	r0, r3
  402b1c:	370c      	adds	r7, #12
  402b1e:	46bd      	mov	sp, r7
  402b20:	f85d 7b04 	ldr.w	r7, [sp], #4
  402b24:	4770      	bx	lr
  402b26:	bf00      	nop

00402b28 <drive_DQ_low>:

void drive_DQ_low(unsigned char idx);
void drive_DQ_low(unsigned char idx)
{
  402b28:	b580      	push	{r7, lr}
  402b2a:	b084      	sub	sp, #16
  402b2c:	af00      	add	r7, sp, #0
  402b2e:	4603      	mov	r3, r0
  402b30:	71fb      	strb	r3, [r7, #7]
	unsigned char ioPin;
	int32_t ioFlags;
	
	ioPin = io_pin(idx);
  402b32:	79fb      	ldrb	r3, [r7, #7]
  402b34:	4618      	mov	r0, r3
  402b36:	4b08      	ldr	r3, [pc, #32]	; (402b58 <drive_DQ_low+0x30>)
  402b38:	4798      	blx	r3
  402b3a:	4603      	mov	r3, r0
  402b3c:	73fb      	strb	r3, [r7, #15]
	
	ioport_set_pin_dir(ioPin, IOPORT_DIR_OUTPUT);
  402b3e:	7bfb      	ldrb	r3, [r7, #15]
  402b40:	4618      	mov	r0, r3
  402b42:	2101      	movs	r1, #1
  402b44:	4b05      	ldr	r3, [pc, #20]	; (402b5c <drive_DQ_low+0x34>)
  402b46:	4798      	blx	r3
	ioport_set_pin_level(ioPin, IOPORT_PIN_LEVEL_LOW);
  402b48:	7bfb      	ldrb	r3, [r7, #15]
  402b4a:	4618      	mov	r0, r3
  402b4c:	2100      	movs	r1, #0
  402b4e:	4b04      	ldr	r3, [pc, #16]	; (402b60 <drive_DQ_low+0x38>)
  402b50:	4798      	blx	r3

}
  402b52:	3710      	adds	r7, #16
  402b54:	46bd      	mov	sp, r7
  402b56:	bd80      	pop	{r7, pc}
  402b58:	00402ad9 	.word	0x00402ad9
  402b5c:	004028a5 	.word	0x004028a5
  402b60:	0040292d 	.word	0x0040292d

00402b64 <release_the_bus>:

void release_the_bus(unsigned char idx);
void release_the_bus(unsigned char idx)
{
  402b64:	b580      	push	{r7, lr}
  402b66:	b084      	sub	sp, #16
  402b68:	af00      	add	r7, sp, #0
  402b6a:	4603      	mov	r3, r0
  402b6c:	71fb      	strb	r3, [r7, #7]
	unsigned char ioPin;
	int32_t ioFlags;
	
	ioPin = io_pin(idx);
  402b6e:	79fb      	ldrb	r3, [r7, #7]
  402b70:	4618      	mov	r0, r3
  402b72:	4b06      	ldr	r3, [pc, #24]	; (402b8c <release_the_bus+0x28>)
  402b74:	4798      	blx	r3
  402b76:	4603      	mov	r3, r0
  402b78:	73fb      	strb	r3, [r7, #15]
	
	ioport_set_pin_dir(ioPin, IOPORT_DIR_INPUT);
  402b7a:	7bfb      	ldrb	r3, [r7, #15]
  402b7c:	4618      	mov	r0, r3
  402b7e:	2100      	movs	r1, #0
  402b80:	4b03      	ldr	r3, [pc, #12]	; (402b90 <release_the_bus+0x2c>)
  402b82:	4798      	blx	r3
	

}
  402b84:	3710      	adds	r7, #16
  402b86:	46bd      	mov	sp, r7
  402b88:	bd80      	pop	{r7, pc}
  402b8a:	bf00      	nop
  402b8c:	00402ad9 	.word	0x00402ad9
  402b90:	004028a5 	.word	0x004028a5

00402b94 <gpio_input>:

void gpio_input(unsigned char idx) //14may15 experiment
{
  402b94:	b580      	push	{r7, lr}
  402b96:	b084      	sub	sp, #16
  402b98:	af00      	add	r7, sp, #0
  402b9a:	4603      	mov	r3, r0
  402b9c:	71fb      	strb	r3, [r7, #7]
	uint32_t ioFlags;
	unsigned char ioPin;
		
	ioPin = io_pin(idx);
  402b9e:	79fb      	ldrb	r3, [r7, #7]
  402ba0:	4618      	mov	r0, r3
  402ba2:	4b06      	ldr	r3, [pc, #24]	; (402bbc <gpio_input+0x28>)
  402ba4:	4798      	blx	r3
  402ba6:	4603      	mov	r3, r0
  402ba8:	73fb      	strb	r3, [r7, #15]
		
	ioport_set_pin_dir(ioPin, IOPORT_DIR_INPUT);
  402baa:	7bfb      	ldrb	r3, [r7, #15]
  402bac:	4618      	mov	r0, r3
  402bae:	2100      	movs	r1, #0
  402bb0:	4b03      	ldr	r3, [pc, #12]	; (402bc0 <gpio_input+0x2c>)
  402bb2:	4798      	blx	r3


}
  402bb4:	3710      	adds	r7, #16
  402bb6:	46bd      	mov	sp, r7
  402bb8:	bd80      	pop	{r7, pc}
  402bba:	bf00      	nop
  402bbc:	00402ad9 	.word	0x00402ad9
  402bc0:	004028a5 	.word	0x004028a5

00402bc4 <sample_line>:

unsigned char sample_line(unsigned char idx);
unsigned char sample_line(unsigned char idx)
{
  402bc4:	b580      	push	{r7, lr}
  402bc6:	b084      	sub	sp, #16
  402bc8:	af00      	add	r7, sp, #0
  402bca:	4603      	mov	r3, r0
  402bcc:	71fb      	strb	r3, [r7, #7]
//14may15 experiment		uint32_t ioFlags;
		unsigned char retVal, ioPin;
		
		ioPin = io_pin(idx);
  402bce:	79fb      	ldrb	r3, [r7, #7]
  402bd0:	4618      	mov	r0, r3
  402bd2:	4b07      	ldr	r3, [pc, #28]	; (402bf0 <sample_line+0x2c>)
  402bd4:	4798      	blx	r3
  402bd6:	4603      	mov	r3, r0
  402bd8:	73fb      	strb	r3, [r7, #15]
		
//14may15 experiment		ioFlags = (GPIO_DIR_INPUT);
//14may15 experiment		gpio_configure_pin(ioPin, ioFlags);

		retVal = ioport_get_pin_level(ioPin);
  402bda:	7bfb      	ldrb	r3, [r7, #15]
  402bdc:	4618      	mov	r0, r3
  402bde:	4b05      	ldr	r3, [pc, #20]	; (402bf4 <sample_line+0x30>)
  402be0:	4798      	blx	r3
  402be2:	4603      	mov	r3, r0
  402be4:	73bb      	strb	r3, [r7, #14]

//14may15 experiment		ioFlags = (GPIO_DIR_OUTPUT);
//14may15 experiment		gpio_configure_pin(ioPin, ioFlags);

		return retVal;
  402be6:	7bbb      	ldrb	r3, [r7, #14]
}
  402be8:	4618      	mov	r0, r3
  402bea:	3710      	adds	r7, #16
  402bec:	46bd      	mov	sp, r7
  402bee:	bd80      	pop	{r7, pc}
  402bf0:	00402ad9 	.word	0x00402ad9
  402bf4:	00402999 	.word	0x00402999

00402bf8 <SetSpeed>:

//-----------------------------------------------------------------------------
// Set the 1-Wire timing to 'standard' (standard=1) or 'overdrive' (standard=0).
//
void SetSpeed(int standard)
{
  402bf8:	b480      	push	{r7}
  402bfa:	b083      	sub	sp, #12
  402bfc:	af00      	add	r7, sp, #0
  402bfe:	6078      	str	r0, [r7, #4]
		J = 410;
	}
	
#endif

	if (standard) //experiment 16may15 cut everything in half, some issue with using the PLL? and fudge the tight numbers at the low end
  402c00:	687b      	ldr	r3, [r7, #4]
  402c02:	2b00      	cmp	r3, #0
  402c04:	d01e      	beq.n	402c44 <SetSpeed+0x4c>
	{
		// Standard Speed
		A = 0; //6;
  402c06:	4b21      	ldr	r3, [pc, #132]	; (402c8c <SetSpeed+0x94>)
  402c08:	2200      	movs	r2, #0
  402c0a:	601a      	str	r2, [r3, #0]
		B = 32; //64;
  402c0c:	4b20      	ldr	r3, [pc, #128]	; (402c90 <SetSpeed+0x98>)
  402c0e:	2220      	movs	r2, #32
  402c10:	601a      	str	r2, [r3, #0]
		C = 30; //60;
  402c12:	4b20      	ldr	r3, [pc, #128]	; (402c94 <SetSpeed+0x9c>)
  402c14:	221e      	movs	r2, #30
  402c16:	601a      	str	r2, [r3, #0]
		D = 2; //10;
  402c18:	4b1f      	ldr	r3, [pc, #124]	; (402c98 <SetSpeed+0xa0>)
  402c1a:	2202      	movs	r2, #2
  402c1c:	601a      	str	r2, [r3, #0]
		E = 2; //9;
  402c1e:	4b1f      	ldr	r3, [pc, #124]	; (402c9c <SetSpeed+0xa4>)
  402c20:	2202      	movs	r2, #2
  402c22:	601a      	str	r2, [r3, #0]
		F = 27; //55;
  402c24:	4b1e      	ldr	r3, [pc, #120]	; (402ca0 <SetSpeed+0xa8>)
  402c26:	221b      	movs	r2, #27
  402c28:	601a      	str	r2, [r3, #0]
		G = 0; //0;
  402c2a:	4b1e      	ldr	r3, [pc, #120]	; (402ca4 <SetSpeed+0xac>)
  402c2c:	2200      	movs	r2, #0
  402c2e:	601a      	str	r2, [r3, #0]
		H = 240; //480;
  402c30:	4b1d      	ldr	r3, [pc, #116]	; (402ca8 <SetSpeed+0xb0>)
  402c32:	22f0      	movs	r2, #240	; 0xf0
  402c34:	601a      	str	r2, [r3, #0]
		I = 35; //70;
  402c36:	4b1d      	ldr	r3, [pc, #116]	; (402cac <SetSpeed+0xb4>)
  402c38:	2223      	movs	r2, #35	; 0x23
  402c3a:	601a      	str	r2, [r3, #0]
		J = 205; //410;
  402c3c:	4b1c      	ldr	r3, [pc, #112]	; (402cb0 <SetSpeed+0xb8>)
  402c3e:	22cd      	movs	r2, #205	; 0xcd
  402c40:	601a      	str	r2, [r3, #0]
  402c42:	e01d      	b.n	402c80 <SetSpeed+0x88>


	else
	{
		// Overdrive Speed
		A = 1.5;
  402c44:	4b11      	ldr	r3, [pc, #68]	; (402c8c <SetSpeed+0x94>)
  402c46:	2201      	movs	r2, #1
  402c48:	601a      	str	r2, [r3, #0]
		B = 7.5;
  402c4a:	4b11      	ldr	r3, [pc, #68]	; (402c90 <SetSpeed+0x98>)
  402c4c:	2207      	movs	r2, #7
  402c4e:	601a      	str	r2, [r3, #0]
		C = 7.5;
  402c50:	4b10      	ldr	r3, [pc, #64]	; (402c94 <SetSpeed+0x9c>)
  402c52:	2207      	movs	r2, #7
  402c54:	601a      	str	r2, [r3, #0]
		D = 2.5;
  402c56:	4b10      	ldr	r3, [pc, #64]	; (402c98 <SetSpeed+0xa0>)
  402c58:	2202      	movs	r2, #2
  402c5a:	601a      	str	r2, [r3, #0]
		E = 0.75;
  402c5c:	4b0f      	ldr	r3, [pc, #60]	; (402c9c <SetSpeed+0xa4>)
  402c5e:	2200      	movs	r2, #0
  402c60:	601a      	str	r2, [r3, #0]
		F = 7;
  402c62:	4b0f      	ldr	r3, [pc, #60]	; (402ca0 <SetSpeed+0xa8>)
  402c64:	2207      	movs	r2, #7
  402c66:	601a      	str	r2, [r3, #0]
		G = 2.5;
  402c68:	4b0e      	ldr	r3, [pc, #56]	; (402ca4 <SetSpeed+0xac>)
  402c6a:	2202      	movs	r2, #2
  402c6c:	601a      	str	r2, [r3, #0]
		H = 70;
  402c6e:	4b0e      	ldr	r3, [pc, #56]	; (402ca8 <SetSpeed+0xb0>)
  402c70:	2246      	movs	r2, #70	; 0x46
  402c72:	601a      	str	r2, [r3, #0]
		I = 8.5;
  402c74:	4b0d      	ldr	r3, [pc, #52]	; (402cac <SetSpeed+0xb4>)
  402c76:	2208      	movs	r2, #8
  402c78:	601a      	str	r2, [r3, #0]
		J = 40;
  402c7a:	4b0d      	ldr	r3, [pc, #52]	; (402cb0 <SetSpeed+0xb8>)
  402c7c:	2228      	movs	r2, #40	; 0x28
  402c7e:	601a      	str	r2, [r3, #0]
	}
}
  402c80:	370c      	adds	r7, #12
  402c82:	46bd      	mov	sp, r7
  402c84:	f85d 7b04 	ldr.w	r7, [sp], #4
  402c88:	4770      	bx	lr
  402c8a:	bf00      	nop
  402c8c:	20400a94 	.word	0x20400a94
  402c90:	20400a98 	.word	0x20400a98
  402c94:	20400aa0 	.word	0x20400aa0
  402c98:	20400a90 	.word	0x20400a90
  402c9c:	20400aac 	.word	0x20400aac
  402ca0:	20400ab4 	.word	0x20400ab4
  402ca4:	20400aa4 	.word	0x20400aa4
  402ca8:	20400aa8 	.word	0x20400aa8
  402cac:	20400ab0 	.word	0x20400ab0
  402cb0:	20400a9c 	.word	0x20400a9c

00402cb4 <OWTouchReset>:
// Generate a 1-Wire reset, return 1 if no presence detect was found,
// return 0 otherwise.
// (NOTE: Does not handle alarm presence from DS2404/DS1994)
//
int OWTouchReset(unsigned char idx)
{
  402cb4:	b580      	push	{r7, lr}
  402cb6:	b084      	sub	sp, #16
  402cb8:	af00      	add	r7, sp, #0
  402cba:	4603      	mov	r3, r0
  402cbc:	71fb      	strb	r3, [r7, #7]
	int result;

	udelay(A);
  402cbe:	4b17      	ldr	r3, [pc, #92]	; (402d1c <OWTouchReset+0x68>)
  402cc0:	681b      	ldr	r3, [r3, #0]
  402cc2:	4618      	mov	r0, r3
  402cc4:	4b16      	ldr	r3, [pc, #88]	; (402d20 <OWTouchReset+0x6c>)
  402cc6:	4798      	blx	r3
	drive_DQ_low(idx);
  402cc8:	79fb      	ldrb	r3, [r7, #7]
  402cca:	4618      	mov	r0, r3
  402ccc:	4b15      	ldr	r3, [pc, #84]	; (402d24 <OWTouchReset+0x70>)
  402cce:	4798      	blx	r3
	udelay(H);	//tRSTL (reset low) 480-640us
  402cd0:	4b15      	ldr	r3, [pc, #84]	; (402d28 <OWTouchReset+0x74>)
  402cd2:	681b      	ldr	r3, [r3, #0]
  402cd4:	4618      	mov	r0, r3
  402cd6:	4b12      	ldr	r3, [pc, #72]	; (402d20 <OWTouchReset+0x6c>)
  402cd8:	4798      	blx	r3
	release_the_bus(idx);
  402cda:	79fb      	ldrb	r3, [r7, #7]
  402cdc:	4618      	mov	r0, r3
  402cde:	4b13      	ldr	r3, [pc, #76]	; (402d2c <OWTouchReset+0x78>)
  402ce0:	4798      	blx	r3
	
	gpio_input(idx); //14may15 experiment
  402ce2:	79fb      	ldrb	r3, [r7, #7]
  402ce4:	4618      	mov	r0, r3
  402ce6:	4b12      	ldr	r3, [pc, #72]	; (402d30 <OWTouchReset+0x7c>)
  402ce8:	4798      	blx	r3

	
	udelay(I);	//tMSP (presence detect sample) 60-75us
  402cea:	4b12      	ldr	r3, [pc, #72]	; (402d34 <OWTouchReset+0x80>)
  402cec:	681b      	ldr	r3, [r3, #0]
  402cee:	4618      	mov	r0, r3
  402cf0:	4b0b      	ldr	r3, [pc, #44]	; (402d20 <OWTouchReset+0x6c>)
  402cf2:	4798      	blx	r3
	result = sample_line(idx);
  402cf4:	79fb      	ldrb	r3, [r7, #7]
  402cf6:	4618      	mov	r0, r3
  402cf8:	4b0f      	ldr	r3, [pc, #60]	; (402d38 <OWTouchReset+0x84>)
  402cfa:	4798      	blx	r3
  402cfc:	4603      	mov	r3, r0
  402cfe:	60fb      	str	r3, [r7, #12]
	
	gpio_input(idx); //14may15 experiment
  402d00:	79fb      	ldrb	r3, [r7, #7]
  402d02:	4618      	mov	r0, r3
  402d04:	4b0a      	ldr	r3, [pc, #40]	; (402d30 <OWTouchReset+0x7c>)
  402d06:	4798      	blx	r3

	udelay(J); // Complete the reset sequence recovery 5-??us (no max?)
  402d08:	4b0c      	ldr	r3, [pc, #48]	; (402d3c <OWTouchReset+0x88>)
  402d0a:	681b      	ldr	r3, [r3, #0]
  402d0c:	4618      	mov	r0, r3
  402d0e:	4b04      	ldr	r3, [pc, #16]	; (402d20 <OWTouchReset+0x6c>)
  402d10:	4798      	blx	r3
	return result; // Return sample presence pulse result
  402d12:	68fb      	ldr	r3, [r7, #12]
}
  402d14:	4618      	mov	r0, r3
  402d16:	3710      	adds	r7, #16
  402d18:	46bd      	mov	sp, r7
  402d1a:	bd80      	pop	{r7, pc}
  402d1c:	20400a94 	.word	0x20400a94
  402d20:	004029e9 	.word	0x004029e9
  402d24:	00402b29 	.word	0x00402b29
  402d28:	20400aa8 	.word	0x20400aa8
  402d2c:	00402b65 	.word	0x00402b65
  402d30:	00402b95 	.word	0x00402b95
  402d34:	20400ab0 	.word	0x20400ab0
  402d38:	00402bc5 	.word	0x00402bc5
  402d3c:	20400a9c 	.word	0x20400a9c

00402d40 <drive_DQ_low_and_release_the_bus>:

void drive_DQ_low_and_release_the_bus(unsigned char idx);
void drive_DQ_low_and_release_the_bus(unsigned char idx)
{
  402d40:	b580      	push	{r7, lr}
  402d42:	b084      	sub	sp, #16
  402d44:	af00      	add	r7, sp, #0
  402d46:	4603      	mov	r3, r0
  402d48:	71fb      	strb	r3, [r7, #7]
	unsigned char ioPin;
	int32_t ioFlagsOutput, ioFlagsInput;
	
	ioPin = io_pin(idx);
  402d4a:	79fb      	ldrb	r3, [r7, #7]
  402d4c:	4618      	mov	r0, r3
  402d4e:	4b0d      	ldr	r3, [pc, #52]	; (402d84 <drive_DQ_low_and_release_the_bus+0x44>)
  402d50:	4798      	blx	r3
  402d52:	4603      	mov	r3, r0
  402d54:	73fb      	strb	r3, [r7, #15]
	
	ioport_set_pin_dir(ioPin, IOPORT_DIR_OUTPUT);
  402d56:	7bfb      	ldrb	r3, [r7, #15]
  402d58:	4618      	mov	r0, r3
  402d5a:	2101      	movs	r1, #1
  402d5c:	4b0a      	ldr	r3, [pc, #40]	; (402d88 <drive_DQ_low_and_release_the_bus+0x48>)
  402d5e:	4798      	blx	r3
	ioport_set_pin_level(ioPin, IOPORT_PIN_LEVEL_LOW);
  402d60:	7bfb      	ldrb	r3, [r7, #15]
  402d62:	4618      	mov	r0, r3
  402d64:	2100      	movs	r1, #0
  402d66:	4b09      	ldr	r3, [pc, #36]	; (402d8c <drive_DQ_low_and_release_the_bus+0x4c>)
  402d68:	4798      	blx	r3

	udelay(A);	//tW1L 5-15us
  402d6a:	4b09      	ldr	r3, [pc, #36]	; (402d90 <drive_DQ_low_and_release_the_bus+0x50>)
  402d6c:	681b      	ldr	r3, [r3, #0]
  402d6e:	4618      	mov	r0, r3
  402d70:	4b08      	ldr	r3, [pc, #32]	; (402d94 <drive_DQ_low_and_release_the_bus+0x54>)
  402d72:	4798      	blx	r3

	ioport_set_pin_dir(ioPin, IOPORT_DIR_INPUT);
  402d74:	7bfb      	ldrb	r3, [r7, #15]
  402d76:	4618      	mov	r0, r3
  402d78:	2100      	movs	r1, #0
  402d7a:	4b03      	ldr	r3, [pc, #12]	; (402d88 <drive_DQ_low_and_release_the_bus+0x48>)
  402d7c:	4798      	blx	r3
	
}
  402d7e:	3710      	adds	r7, #16
  402d80:	46bd      	mov	sp, r7
  402d82:	bd80      	pop	{r7, pc}
  402d84:	00402ad9 	.word	0x00402ad9
  402d88:	004028a5 	.word	0x004028a5
  402d8c:	0040292d 	.word	0x0040292d
  402d90:	20400a94 	.word	0x20400a94
  402d94:	004029e9 	.word	0x004029e9

00402d98 <OWWriteBit>:
//-----------------------------------------------------------------------------
// Send a 1-Wire write bit. Provide 10us recovery time.
//
void OWWriteBit(unsigned char idx, int bit);
void OWWriteBit(unsigned char idx, int bit)
{
  402d98:	b580      	push	{r7, lr}
  402d9a:	b082      	sub	sp, #8
  402d9c:	af00      	add	r7, sp, #0
  402d9e:	4603      	mov	r3, r0
  402da0:	6039      	str	r1, [r7, #0]
  402da2:	71fb      	strb	r3, [r7, #7]
	if (bit)
  402da4:	683b      	ldr	r3, [r7, #0]
  402da6:	2b00      	cmp	r3, #0
  402da8:	d009      	beq.n	402dbe <OWWriteBit+0x26>
	{
		// Write '1' bit
		drive_DQ_low_and_release_the_bus(idx);
  402daa:	79fb      	ldrb	r3, [r7, #7]
  402dac:	4618      	mov	r0, r3
  402dae:	4b0e      	ldr	r3, [pc, #56]	; (402de8 <OWWriteBit+0x50>)
  402db0:	4798      	blx	r3
#if 0
		drive_DQ_low(idx);
//14may15 take this out entirely, we can't seem to control this precisely enough		cpu_delay_us(A, EC_CPU_CLOCK_100MHZ	//tW1L 5-15us
		release_the_bus(idx);
#endif
		udelay(B);	// Complete the time slot and 10us recovery tSLOT 65-??us (no max)
  402db2:	4b0e      	ldr	r3, [pc, #56]	; (402dec <OWWriteBit+0x54>)
  402db4:	681b      	ldr	r3, [r3, #0]
  402db6:	4618      	mov	r0, r3
  402db8:	4b0d      	ldr	r3, [pc, #52]	; (402df0 <OWWriteBit+0x58>)
  402dba:	4798      	blx	r3
  402dbc:	e011      	b.n	402de2 <OWWriteBit+0x4a>
	}
	else
	{
		// Write '0' bit
		drive_DQ_low(idx);
  402dbe:	79fb      	ldrb	r3, [r7, #7]
  402dc0:	4618      	mov	r0, r3
  402dc2:	4b0c      	ldr	r3, [pc, #48]	; (402df4 <OWWriteBit+0x5c>)
  402dc4:	4798      	blx	r3
		udelay(C);	//tW0L 60-120us
  402dc6:	4b0c      	ldr	r3, [pc, #48]	; (402df8 <OWWriteBit+0x60>)
  402dc8:	681b      	ldr	r3, [r3, #0]
  402dca:	4618      	mov	r0, r3
  402dcc:	4b08      	ldr	r3, [pc, #32]	; (402df0 <OWWriteBit+0x58>)
  402dce:	4798      	blx	r3
		release_the_bus(idx);
  402dd0:	79fb      	ldrb	r3, [r7, #7]
  402dd2:	4618      	mov	r0, r3
  402dd4:	4b09      	ldr	r3, [pc, #36]	; (402dfc <OWWriteBit+0x64>)
  402dd6:	4798      	blx	r3
		udelay(D);	//tREC 5-??us
  402dd8:	4b09      	ldr	r3, [pc, #36]	; (402e00 <OWWriteBit+0x68>)
  402dda:	681b      	ldr	r3, [r3, #0]
  402ddc:	4618      	mov	r0, r3
  402dde:	4b04      	ldr	r3, [pc, #16]	; (402df0 <OWWriteBit+0x58>)
  402de0:	4798      	blx	r3
	}
}
  402de2:	3708      	adds	r7, #8
  402de4:	46bd      	mov	sp, r7
  402de6:	bd80      	pop	{r7, pc}
  402de8:	00402d41 	.word	0x00402d41
  402dec:	20400a98 	.word	0x20400a98
  402df0:	004029e9 	.word	0x004029e9
  402df4:	00402b29 	.word	0x00402b29
  402df8:	20400aa0 	.word	0x20400aa0
  402dfc:	00402b65 	.word	0x00402b65
  402e00:	20400a90 	.word	0x20400a90

00402e04 <OWReadBit>:
//-----------------------------------------------------------------------------
// Read a bit from the 1-Wire bus and return it. Provide 10us recovery time.
//
int OWReadBit(unsigned char idx);
int OWReadBit(unsigned char idx)
{
  402e04:	b580      	push	{r7, lr}
  402e06:	b084      	sub	sp, #16
  402e08:	af00      	add	r7, sp, #0
  402e0a:	4603      	mov	r3, r0
  402e0c:	71fb      	strb	r3, [r7, #7]
#if 0
	drive_DQ_low(idx);
//14may15 take this out entirely, we can't seem to control this precisely enough	cpu_delay_us(A, EC_CPU_CLOCK_100MHZ	//tRL 5-15us
	release_the_bus(idx);
#endif
	drive_DQ_low_and_release_the_bus(idx);
  402e0e:	79fb      	ldrb	r3, [r7, #7]
  402e10:	4618      	mov	r0, r3
  402e12:	4b0b      	ldr	r3, [pc, #44]	; (402e40 <OWReadBit+0x3c>)
  402e14:	4798      	blx	r3
	
	udelay(E);	//tMSR 5-15us
  402e16:	4b0b      	ldr	r3, [pc, #44]	; (402e44 <OWReadBit+0x40>)
  402e18:	681b      	ldr	r3, [r3, #0]
  402e1a:	4618      	mov	r0, r3
  402e1c:	4b0a      	ldr	r3, [pc, #40]	; (402e48 <OWReadBit+0x44>)
  402e1e:	4798      	blx	r3
	result = sample_line(idx);
  402e20:	79fb      	ldrb	r3, [r7, #7]
  402e22:	4618      	mov	r0, r3
  402e24:	4b09      	ldr	r3, [pc, #36]	; (402e4c <OWReadBit+0x48>)
  402e26:	4798      	blx	r3
  402e28:	4603      	mov	r3, r0
  402e2a:	60fb      	str	r3, [r7, #12]
	udelay(F); // Complete the time slot and 10us recovery tREC 5+us
  402e2c:	4b08      	ldr	r3, [pc, #32]	; (402e50 <OWReadBit+0x4c>)
  402e2e:	681b      	ldr	r3, [r3, #0]
  402e30:	4618      	mov	r0, r3
  402e32:	4b05      	ldr	r3, [pc, #20]	; (402e48 <OWReadBit+0x44>)
  402e34:	4798      	blx	r3

	return result;
  402e36:	68fb      	ldr	r3, [r7, #12]
}
  402e38:	4618      	mov	r0, r3
  402e3a:	3710      	adds	r7, #16
  402e3c:	46bd      	mov	sp, r7
  402e3e:	bd80      	pop	{r7, pc}
  402e40:	00402d41 	.word	0x00402d41
  402e44:	20400aac 	.word	0x20400aac
  402e48:	004029e9 	.word	0x004029e9
  402e4c:	00402bc5 	.word	0x00402bc5
  402e50:	20400ab4 	.word	0x20400ab4

00402e54 <OWWriteByte>:

//-----------------------------------------------------------------------------
// Write 1-Wire data byte
//
void OWWriteByte(unsigned char idx, int data)
{
  402e54:	b580      	push	{r7, lr}
  402e56:	b084      	sub	sp, #16
  402e58:	af00      	add	r7, sp, #0
  402e5a:	4603      	mov	r3, r0
  402e5c:	6039      	str	r1, [r7, #0]
  402e5e:	71fb      	strb	r3, [r7, #7]
	int loop;

	// Loop to write each bit in the byte, LS-bit first
	for (loop = 0; loop < 8; loop++)
  402e60:	2300      	movs	r3, #0
  402e62:	60fb      	str	r3, [r7, #12]
  402e64:	e00d      	b.n	402e82 <OWWriteByte+0x2e>
	{
		OWWriteBit(idx, data & 0x01);
  402e66:	683b      	ldr	r3, [r7, #0]
  402e68:	f003 0301 	and.w	r3, r3, #1
  402e6c:	79fa      	ldrb	r2, [r7, #7]
  402e6e:	4610      	mov	r0, r2
  402e70:	4619      	mov	r1, r3
  402e72:	4b07      	ldr	r3, [pc, #28]	; (402e90 <OWWriteByte+0x3c>)
  402e74:	4798      	blx	r3

		// shift the data byte for the next bit
		data >>= 1;
  402e76:	683b      	ldr	r3, [r7, #0]
  402e78:	105b      	asrs	r3, r3, #1
  402e7a:	603b      	str	r3, [r7, #0]
void OWWriteByte(unsigned char idx, int data)
{
	int loop;

	// Loop to write each bit in the byte, LS-bit first
	for (loop = 0; loop < 8; loop++)
  402e7c:	68fb      	ldr	r3, [r7, #12]
  402e7e:	3301      	adds	r3, #1
  402e80:	60fb      	str	r3, [r7, #12]
  402e82:	68fb      	ldr	r3, [r7, #12]
  402e84:	2b07      	cmp	r3, #7
  402e86:	ddee      	ble.n	402e66 <OWWriteByte+0x12>
		OWWriteBit(idx, data & 0x01);

		// shift the data byte for the next bit
		data >>= 1;
	}
}
  402e88:	3710      	adds	r7, #16
  402e8a:	46bd      	mov	sp, r7
  402e8c:	bd80      	pop	{r7, pc}
  402e8e:	bf00      	nop
  402e90:	00402d99 	.word	0x00402d99

00402e94 <OWReadByte>:

//-----------------------------------------------------------------------------
// Read 1-Wire data byte and return it
//
int OWReadByte(unsigned char idx)
{
  402e94:	b580      	push	{r7, lr}
  402e96:	b084      	sub	sp, #16
  402e98:	af00      	add	r7, sp, #0
  402e9a:	4603      	mov	r3, r0
  402e9c:	71fb      	strb	r3, [r7, #7]
	int loop, result=0;
  402e9e:	2300      	movs	r3, #0
  402ea0:	60bb      	str	r3, [r7, #8]

	for (loop = 0; loop < 8; loop++)
  402ea2:	2300      	movs	r3, #0
  402ea4:	60fb      	str	r3, [r7, #12]
  402ea6:	e010      	b.n	402eca <OWReadByte+0x36>
	{
		// shift the result to get it ready for the next bit
		result >>= 1;
  402ea8:	68bb      	ldr	r3, [r7, #8]
  402eaa:	105b      	asrs	r3, r3, #1
  402eac:	60bb      	str	r3, [r7, #8]

		// if result is one, then set MS bit
		if (OWReadBit(idx))
  402eae:	79fb      	ldrb	r3, [r7, #7]
  402eb0:	4618      	mov	r0, r3
  402eb2:	4b0a      	ldr	r3, [pc, #40]	; (402edc <OWReadByte+0x48>)
  402eb4:	4798      	blx	r3
  402eb6:	4603      	mov	r3, r0
  402eb8:	2b00      	cmp	r3, #0
  402eba:	d003      	beq.n	402ec4 <OWReadByte+0x30>
		result |= 0x80;
  402ebc:	68bb      	ldr	r3, [r7, #8]
  402ebe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  402ec2:	60bb      	str	r3, [r7, #8]
//
int OWReadByte(unsigned char idx)
{
	int loop, result=0;

	for (loop = 0; loop < 8; loop++)
  402ec4:	68fb      	ldr	r3, [r7, #12]
  402ec6:	3301      	adds	r3, #1
  402ec8:	60fb      	str	r3, [r7, #12]
  402eca:	68fb      	ldr	r3, [r7, #12]
  402ecc:	2b07      	cmp	r3, #7
  402ece:	ddeb      	ble.n	402ea8 <OWReadByte+0x14>

		// if result is one, then set MS bit
		if (OWReadBit(idx))
		result |= 0x80;
	}
	return result;
  402ed0:	68bb      	ldr	r3, [r7, #8]
}
  402ed2:	4618      	mov	r0, r3
  402ed4:	3710      	adds	r7, #16
  402ed6:	46bd      	mov	sp, r7
  402ed8:	bd80      	pop	{r7, pc}
  402eda:	bf00      	nop
  402edc:	00402e05 	.word	0x00402e05

00402ee0 <crc8_add>:
	return OWTouchReset(idx);
}

/* Polynomial ^8 + ^5 + ^4 + 1 */
unsigned char crc8_add(unsigned char acc, unsigned char byte)
{
  402ee0:	b480      	push	{r7}
  402ee2:	b085      	sub	sp, #20
  402ee4:	af00      	add	r7, sp, #0
  402ee6:	4603      	mov	r3, r0
  402ee8:	460a      	mov	r2, r1
  402eea:	71fb      	strb	r3, [r7, #7]
  402eec:	4613      	mov	r3, r2
  402eee:	71bb      	strb	r3, [r7, #6]
   int i;
   acc ^= byte;
  402ef0:	79fa      	ldrb	r2, [r7, #7]
  402ef2:	79bb      	ldrb	r3, [r7, #6]
  402ef4:	4053      	eors	r3, r2
  402ef6:	71fb      	strb	r3, [r7, #7]
   for(i = 0; i < 8; i++) 
  402ef8:	2300      	movs	r3, #0
  402efa:	60fb      	str	r3, [r7, #12]
  402efc:	e012      	b.n	402f24 <crc8_add+0x44>
   {
		if(acc & 1) 
  402efe:	79fb      	ldrb	r3, [r7, #7]
  402f00:	f003 0301 	and.w	r3, r3, #1
  402f04:	2b00      	cmp	r3, #0
  402f06:	d007      	beq.n	402f18 <crc8_add+0x38>
		{
			acc = (acc >> 1) ^ 0x8c;
  402f08:	79fb      	ldrb	r3, [r7, #7]
  402f0a:	085b      	lsrs	r3, r3, #1
  402f0c:	b2da      	uxtb	r2, r3
  402f0e:	f06f 0373 	mvn.w	r3, #115	; 0x73
  402f12:	4053      	eors	r3, r2
  402f14:	71fb      	strb	r3, [r7, #7]
  402f16:	e002      	b.n	402f1e <crc8_add+0x3e>
		} 
		else 
		{
			acc >>= 1;
  402f18:	79fb      	ldrb	r3, [r7, #7]
  402f1a:	085b      	lsrs	r3, r3, #1
  402f1c:	71fb      	strb	r3, [r7, #7]
/* Polynomial ^8 + ^5 + ^4 + 1 */
unsigned char crc8_add(unsigned char acc, unsigned char byte)
{
   int i;
   acc ^= byte;
   for(i = 0; i < 8; i++) 
  402f1e:	68fb      	ldr	r3, [r7, #12]
  402f20:	3301      	adds	r3, #1
  402f22:	60fb      	str	r3, [r7, #12]
  402f24:	68fb      	ldr	r3, [r7, #12]
  402f26:	2b07      	cmp	r3, #7
  402f28:	dde9      	ble.n	402efe <crc8_add+0x1e>
		else 
		{
			acc >>= 1;
	    }
   }
   return acc;
  402f2a:	79fb      	ldrb	r3, [r7, #7]
}
  402f2c:	4618      	mov	r0, r3
  402f2e:	3714      	adds	r7, #20
  402f30:	46bd      	mov	sp, r7
  402f32:	f85d 7b04 	ldr.w	r7, [sp], #4
  402f36:	4770      	bx	lr

00402f38 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  402f38:	b480      	push	{r7}
  402f3a:	b083      	sub	sp, #12
  402f3c:	af00      	add	r7, sp, #0
  402f3e:	4603      	mov	r3, r0
  402f40:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  402f42:	4908      	ldr	r1, [pc, #32]	; (402f64 <NVIC_EnableIRQ+0x2c>)
  402f44:	f997 3007 	ldrsb.w	r3, [r7, #7]
  402f48:	095b      	lsrs	r3, r3, #5
  402f4a:	79fa      	ldrb	r2, [r7, #7]
  402f4c:	f002 021f 	and.w	r2, r2, #31
  402f50:	2001      	movs	r0, #1
  402f52:	fa00 f202 	lsl.w	r2, r0, r2
  402f56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  402f5a:	370c      	adds	r7, #12
  402f5c:	46bd      	mov	sp, r7
  402f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
  402f62:	4770      	bx	lr
  402f64:	e000e100 	.word	0xe000e100

00402f68 <NVIC_DisableIRQ>:
    The function disables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  402f68:	b480      	push	{r7}
  402f6a:	b083      	sub	sp, #12
  402f6c:	af00      	add	r7, sp, #0
  402f6e:	4603      	mov	r3, r0
  402f70:	71fb      	strb	r3, [r7, #7]
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  402f72:	4909      	ldr	r1, [pc, #36]	; (402f98 <NVIC_DisableIRQ+0x30>)
  402f74:	f997 3007 	ldrsb.w	r3, [r7, #7]
  402f78:	095b      	lsrs	r3, r3, #5
  402f7a:	79fa      	ldrb	r2, [r7, #7]
  402f7c:	f002 021f 	and.w	r2, r2, #31
  402f80:	2001      	movs	r0, #1
  402f82:	fa00 f202 	lsl.w	r2, r0, r2
  402f86:	3320      	adds	r3, #32
  402f88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  402f8c:	370c      	adds	r7, #12
  402f8e:	46bd      	mov	sp, r7
  402f90:	f85d 7b04 	ldr.w	r7, [sp], #4
  402f94:	4770      	bx	lr
  402f96:	bf00      	nop
  402f98:	e000e100 	.word	0xe000e100

00402f9c <NVIC_ClearPendingIRQ>:
    The function clears the pending bit of an external interrupt.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  402f9c:	b480      	push	{r7}
  402f9e:	b083      	sub	sp, #12
  402fa0:	af00      	add	r7, sp, #0
  402fa2:	4603      	mov	r3, r0
  402fa4:	71fb      	strb	r3, [r7, #7]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  402fa6:	4909      	ldr	r1, [pc, #36]	; (402fcc <NVIC_ClearPendingIRQ+0x30>)
  402fa8:	f997 3007 	ldrsb.w	r3, [r7, #7]
  402fac:	095b      	lsrs	r3, r3, #5
  402fae:	79fa      	ldrb	r2, [r7, #7]
  402fb0:	f002 021f 	and.w	r2, r2, #31
  402fb4:	2001      	movs	r0, #1
  402fb6:	fa00 f202 	lsl.w	r2, r0, r2
  402fba:	3360      	adds	r3, #96	; 0x60
  402fbc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  402fc0:	370c      	adds	r7, #12
  402fc2:	46bd      	mov	sp, r7
  402fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
  402fc8:	4770      	bx	lr
  402fca:	bf00      	nop
  402fcc:	e000e100 	.word	0xe000e100

00402fd0 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  402fd0:	b480      	push	{r7}
  402fd2:	b083      	sub	sp, #12
  402fd4:	af00      	add	r7, sp, #0
  402fd6:	4603      	mov	r3, r0
  402fd8:	6039      	str	r1, [r7, #0]
  402fda:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
  402fdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
  402fe0:	2b00      	cmp	r3, #0
  402fe2:	da0b      	bge.n	402ffc <NVIC_SetPriority+0x2c>
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  402fe4:	490d      	ldr	r1, [pc, #52]	; (40301c <NVIC_SetPriority+0x4c>)
  402fe6:	79fb      	ldrb	r3, [r7, #7]
  402fe8:	f003 030f 	and.w	r3, r3, #15
  402fec:	3b04      	subs	r3, #4
  402fee:	683a      	ldr	r2, [r7, #0]
  402ff0:	b2d2      	uxtb	r2, r2
  402ff2:	0152      	lsls	r2, r2, #5
  402ff4:	b2d2      	uxtb	r2, r2
  402ff6:	440b      	add	r3, r1
  402ff8:	761a      	strb	r2, [r3, #24]
  402ffa:	e009      	b.n	403010 <NVIC_SetPriority+0x40>
  else {
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  402ffc:	4908      	ldr	r1, [pc, #32]	; (403020 <NVIC_SetPriority+0x50>)
  402ffe:	f997 3007 	ldrsb.w	r3, [r7, #7]
  403002:	683a      	ldr	r2, [r7, #0]
  403004:	b2d2      	uxtb	r2, r2
  403006:	0152      	lsls	r2, r2, #5
  403008:	b2d2      	uxtb	r2, r2
  40300a:	440b      	add	r3, r1
  40300c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
  403010:	370c      	adds	r7, #12
  403012:	46bd      	mov	sp, r7
  403014:	f85d 7b04 	ldr.w	r7, [sp], #4
  403018:	4770      	bx	lr
  40301a:	bf00      	nop
  40301c:	e000ed00 	.word	0xe000ed00
  403020:	e000e100 	.word	0xe000e100

00403024 <SysTick_Config>:
    function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  403024:	b580      	push	{r7, lr}
  403026:	b082      	sub	sp, #8
  403028:	af00      	add	r7, sp, #0
  40302a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
  40302c:	687b      	ldr	r3, [r7, #4]
  40302e:	3b01      	subs	r3, #1
  403030:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
  403034:	d301      	bcc.n	40303a <SysTick_Config+0x16>
  403036:	2301      	movs	r3, #1
  403038:	e00f      	b.n	40305a <SysTick_Config+0x36>

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
  40303a:	4a0a      	ldr	r2, [pc, #40]	; (403064 <SysTick_Config+0x40>)
  40303c:	687b      	ldr	r3, [r7, #4]
  40303e:	3b01      	subs	r3, #1
  403040:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  403042:	f04f 30ff 	mov.w	r0, #4294967295
  403046:	2107      	movs	r1, #7
  403048:	4b07      	ldr	r3, [pc, #28]	; (403068 <SysTick_Config+0x44>)
  40304a:	4798      	blx	r3
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
  40304c:	4b05      	ldr	r3, [pc, #20]	; (403064 <SysTick_Config+0x40>)
  40304e:	2200      	movs	r2, #0
  403050:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
  403052:	4b04      	ldr	r3, [pc, #16]	; (403064 <SysTick_Config+0x40>)
  403054:	2207      	movs	r2, #7
  403056:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
  403058:	2300      	movs	r3, #0
}
  40305a:	4618      	mov	r0, r3
  40305c:	3708      	adds	r7, #8
  40305e:	46bd      	mov	sp, r7
  403060:	bd80      	pop	{r7, pc}
  403062:	bf00      	nop
  403064:	e000e010 	.word	0xe000e010
  403068:	00402fd1 	.word	0x00402fd1

0040306c <afec_ch_sanity_check>:
 * \param channel  AFEC channel number.
 *
 */
static inline void afec_ch_sanity_check(Afec *const afec,
		const enum afec_channel_num channel)
{
  40306c:	b480      	push	{r7}
  40306e:	b083      	sub	sp, #12
  403070:	af00      	add	r7, sp, #0
  403072:	6078      	str	r0, [r7, #4]
  403074:	460b      	mov	r3, r1
  403076:	807b      	strh	r3, [r7, #2]
	#endif
	} else if (afec == AFEC1) {
		Assert(channel < NB_CH_AFE1);
	}
	UNUSED(channel);
}
  403078:	370c      	adds	r7, #12
  40307a:	46bd      	mov	sp, r7
  40307c:	f85d 7b04 	ldr.w	r7, [sp], #4
  403080:	4770      	bx	lr
  403082:	bf00      	nop

00403084 <afec_set_trigger>:
 * \param trigger Conversion trigger.
 *
 */
static inline void afec_set_trigger(Afec *const afec,
		const enum afec_trigger trigger)
{
  403084:	b480      	push	{r7}
  403086:	b085      	sub	sp, #20
  403088:	af00      	add	r7, sp, #0
  40308a:	6078      	str	r0, [r7, #4]
  40308c:	460b      	mov	r3, r1
  40308e:	70fb      	strb	r3, [r7, #3]
	uint32_t reg;

	reg = afec->AFEC_MR;
  403090:	687b      	ldr	r3, [r7, #4]
  403092:	685b      	ldr	r3, [r3, #4]
  403094:	60fb      	str	r3, [r7, #12]

	if (trigger == AFEC_TRIG_FREERUN) {
  403096:	78fb      	ldrb	r3, [r7, #3]
  403098:	2bff      	cmp	r3, #255	; 0xff
  40309a:	d104      	bne.n	4030a6 <afec_set_trigger+0x22>
		reg |= AFEC_MR_FREERUN_ON;
  40309c:	68fb      	ldr	r3, [r7, #12]
  40309e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4030a2:	60fb      	str	r3, [r7, #12]
  4030a4:	e007      	b.n	4030b6 <afec_set_trigger+0x32>
	} else {
		reg &= ~(AFEC_MR_TRGSEL_Msk | AFEC_MR_TRGEN | AFEC_MR_FREERUN_ON);
  4030a6:	68fb      	ldr	r3, [r7, #12]
  4030a8:	f023 038f 	bic.w	r3, r3, #143	; 0x8f
  4030ac:	60fb      	str	r3, [r7, #12]
		reg |= trigger;
  4030ae:	78fb      	ldrb	r3, [r7, #3]
  4030b0:	68fa      	ldr	r2, [r7, #12]
  4030b2:	4313      	orrs	r3, r2
  4030b4:	60fb      	str	r3, [r7, #12]
	}

	afec->AFEC_MR = reg;
  4030b6:	687b      	ldr	r3, [r7, #4]
  4030b8:	68fa      	ldr	r2, [r7, #12]
  4030ba:	605a      	str	r2, [r3, #4]
}
  4030bc:	3714      	adds	r7, #20
  4030be:	46bd      	mov	sp, r7
  4030c0:	f85d 7b04 	ldr.w	r7, [sp], #4
  4030c4:	4770      	bx	lr
  4030c6:	bf00      	nop

004030c8 <afec_start_software_conversion>:
 * this function can NOT start analog to digital conversion.
 *
 * \param afec  Base address of the AFEC.
 */
static inline void afec_start_software_conversion(Afec *const afec)
{
  4030c8:	b480      	push	{r7}
  4030ca:	b083      	sub	sp, #12
  4030cc:	af00      	add	r7, sp, #0
  4030ce:	6078      	str	r0, [r7, #4]
	afec->AFEC_CR = AFEC_CR_START;
  4030d0:	687b      	ldr	r3, [r7, #4]
  4030d2:	2202      	movs	r2, #2
  4030d4:	601a      	str	r2, [r3, #0]
}
  4030d6:	370c      	adds	r7, #12
  4030d8:	46bd      	mov	sp, r7
  4030da:	f85d 7b04 	ldr.w	r7, [sp], #4
  4030de:	4770      	bx	lr

004030e0 <afec_channel_enable>:
 * \param afec  Base address of the AFEC.
 * \param afec_ch AFEC channel number.
 */
static inline void afec_channel_enable(Afec *const afec,
		const enum afec_channel_num afec_ch)
{
  4030e0:	b580      	push	{r7, lr}
  4030e2:	b082      	sub	sp, #8
  4030e4:	af00      	add	r7, sp, #0
  4030e6:	6078      	str	r0, [r7, #4]
  4030e8:	460b      	mov	r3, r1
  4030ea:	807b      	strh	r3, [r7, #2]
	if (afec_ch != AFEC_CHANNEL_ALL) {
  4030ec:	887b      	ldrh	r3, [r7, #2]
  4030ee:	f640 72ff 	movw	r2, #4095	; 0xfff
  4030f2:	4293      	cmp	r3, r2
  4030f4:	d004      	beq.n	403100 <afec_channel_enable+0x20>
		afec_ch_sanity_check(afec, afec_ch);
  4030f6:	887b      	ldrh	r3, [r7, #2]
  4030f8:	6878      	ldr	r0, [r7, #4]
  4030fa:	4619      	mov	r1, r3
  4030fc:	4b09      	ldr	r3, [pc, #36]	; (403124 <afec_channel_enable+0x44>)
  4030fe:	4798      	blx	r3
	}

	afec->AFEC_CHER = (afec_ch == AFEC_CHANNEL_ALL) ?
  403100:	887b      	ldrh	r3, [r7, #2]
  403102:	f640 72ff 	movw	r2, #4095	; 0xfff
  403106:	4293      	cmp	r3, r2
  403108:	d005      	beq.n	403116 <afec_channel_enable+0x36>
			AFEC_CHANNEL_ALL : 1 << afec_ch;
  40310a:	887b      	ldrh	r3, [r7, #2]
  40310c:	2201      	movs	r2, #1
  40310e:	fa02 f303 	lsl.w	r3, r2, r3
{
	if (afec_ch != AFEC_CHANNEL_ALL) {
		afec_ch_sanity_check(afec, afec_ch);
	}

	afec->AFEC_CHER = (afec_ch == AFEC_CHANNEL_ALL) ?
  403112:	461a      	mov	r2, r3
  403114:	e001      	b.n	40311a <afec_channel_enable+0x3a>
  403116:	f640 72ff 	movw	r2, #4095	; 0xfff
  40311a:	687b      	ldr	r3, [r7, #4]
  40311c:	615a      	str	r2, [r3, #20]
			AFEC_CHANNEL_ALL : 1 << afec_ch;
}
  40311e:	3708      	adds	r7, #8
  403120:	46bd      	mov	sp, r7
  403122:	bd80      	pop	{r7, pc}
  403124:	0040306d 	.word	0x0040306d

00403128 <afec_channel_disable>:
 * \param afec  Base address of the AFEC.
 * \param afec_ch AFEC channel number.
 */
static inline void afec_channel_disable(Afec *const afec,
		const enum afec_channel_num afec_ch)
{
  403128:	b580      	push	{r7, lr}
  40312a:	b082      	sub	sp, #8
  40312c:	af00      	add	r7, sp, #0
  40312e:	6078      	str	r0, [r7, #4]
  403130:	460b      	mov	r3, r1
  403132:	807b      	strh	r3, [r7, #2]
	if (afec_ch != AFEC_CHANNEL_ALL) {
  403134:	887b      	ldrh	r3, [r7, #2]
  403136:	f640 72ff 	movw	r2, #4095	; 0xfff
  40313a:	4293      	cmp	r3, r2
  40313c:	d004      	beq.n	403148 <afec_channel_disable+0x20>
		afec_ch_sanity_check(afec, afec_ch);
  40313e:	887b      	ldrh	r3, [r7, #2]
  403140:	6878      	ldr	r0, [r7, #4]
  403142:	4619      	mov	r1, r3
  403144:	4b09      	ldr	r3, [pc, #36]	; (40316c <afec_channel_disable+0x44>)
  403146:	4798      	blx	r3
	}

	afec->AFEC_CHDR = (afec_ch == AFEC_CHANNEL_ALL) ?
  403148:	887b      	ldrh	r3, [r7, #2]
  40314a:	f640 72ff 	movw	r2, #4095	; 0xfff
  40314e:	4293      	cmp	r3, r2
  403150:	d005      	beq.n	40315e <afec_channel_disable+0x36>
			AFEC_CHANNEL_ALL : 1 << afec_ch;
  403152:	887b      	ldrh	r3, [r7, #2]
  403154:	2201      	movs	r2, #1
  403156:	fa02 f303 	lsl.w	r3, r2, r3
{
	if (afec_ch != AFEC_CHANNEL_ALL) {
		afec_ch_sanity_check(afec, afec_ch);
	}

	afec->AFEC_CHDR = (afec_ch == AFEC_CHANNEL_ALL) ?
  40315a:	461a      	mov	r2, r3
  40315c:	e001      	b.n	403162 <afec_channel_disable+0x3a>
  40315e:	f640 72ff 	movw	r2, #4095	; 0xfff
  403162:	687b      	ldr	r3, [r7, #4]
  403164:	619a      	str	r2, [r3, #24]
			AFEC_CHANNEL_ALL : 1 << afec_ch;
}
  403166:	3708      	adds	r7, #8
  403168:	46bd      	mov	sp, r7
  40316a:	bd80      	pop	{r7, pc}
  40316c:	0040306d 	.word	0x0040306d

00403170 <afec_get_latest_value>:
 * \param afec  Base address of the AFEC.
 *
 * \return AFEC latest converted value.
 */
static inline uint32_t afec_get_latest_value(Afec *const afec)
{
  403170:	b480      	push	{r7}
  403172:	b083      	sub	sp, #12
  403174:	af00      	add	r7, sp, #0
  403176:	6078      	str	r0, [r7, #4]
	return afec->AFEC_LCDR & AFEC_LCDR_LDATA_Msk;
  403178:	687b      	ldr	r3, [r7, #4]
  40317a:	6a1b      	ldr	r3, [r3, #32]
  40317c:	b29b      	uxth	r3, r3
}
  40317e:	4618      	mov	r0, r3
  403180:	370c      	adds	r7, #12
  403182:	46bd      	mov	sp, r7
  403184:	f85d 7b04 	ldr.w	r7, [sp], #4
  403188:	4770      	bx	lr
  40318a:	bf00      	nop

0040318c <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  40318c:	b480      	push	{r7}
  40318e:	b083      	sub	sp, #12
  403190:	af00      	add	r7, sp, #0
  403192:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  403194:	687b      	ldr	r3, [r7, #4]
  403196:	2b07      	cmp	r3, #7
  403198:	d825      	bhi.n	4031e6 <osc_get_rate+0x5a>
  40319a:	a201      	add	r2, pc, #4	; (adr r2, 4031a0 <osc_get_rate+0x14>)
  40319c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4031a0:	004031c1 	.word	0x004031c1
  4031a4:	004031c7 	.word	0x004031c7
  4031a8:	004031cd 	.word	0x004031cd
  4031ac:	004031d3 	.word	0x004031d3
  4031b0:	004031d7 	.word	0x004031d7
  4031b4:	004031db 	.word	0x004031db
  4031b8:	004031df 	.word	0x004031df
  4031bc:	004031e3 	.word	0x004031e3
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  4031c0:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  4031c4:	e010      	b.n	4031e8 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  4031c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4031ca:	e00d      	b.n	4031e8 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  4031cc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4031d0:	e00a      	b.n	4031e8 <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  4031d2:	4b08      	ldr	r3, [pc, #32]	; (4031f4 <osc_get_rate+0x68>)
  4031d4:	e008      	b.n	4031e8 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  4031d6:	4b08      	ldr	r3, [pc, #32]	; (4031f8 <osc_get_rate+0x6c>)
  4031d8:	e006      	b.n	4031e8 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  4031da:	4b08      	ldr	r3, [pc, #32]	; (4031fc <osc_get_rate+0x70>)
  4031dc:	e004      	b.n	4031e8 <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  4031de:	4b08      	ldr	r3, [pc, #32]	; (403200 <osc_get_rate+0x74>)
  4031e0:	e002      	b.n	4031e8 <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  4031e2:	4b06      	ldr	r3, [pc, #24]	; (4031fc <osc_get_rate+0x70>)
  4031e4:	e000      	b.n	4031e8 <osc_get_rate+0x5c>
	}

	return 0;
  4031e6:	2300      	movs	r3, #0
}
  4031e8:	4618      	mov	r0, r3
  4031ea:	370c      	adds	r7, #12
  4031ec:	46bd      	mov	sp, r7
  4031ee:	f85d 7b04 	ldr.w	r7, [sp], #4
  4031f2:	4770      	bx	lr
  4031f4:	003d0900 	.word	0x003d0900
  4031f8:	007a1200 	.word	0x007a1200
  4031fc:	00b71b00 	.word	0x00b71b00
  403200:	00f42400 	.word	0x00f42400

00403204 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  403204:	b580      	push	{r7, lr}
  403206:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  403208:	2006      	movs	r0, #6
  40320a:	4b05      	ldr	r3, [pc, #20]	; (403220 <sysclk_get_main_hz+0x1c>)
  40320c:	4798      	blx	r3
  40320e:	4602      	mov	r2, r0
  403210:	4613      	mov	r3, r2
  403212:	009b      	lsls	r3, r3, #2
  403214:	4413      	add	r3, r2
  403216:	009a      	lsls	r2, r3, #2
  403218:	4413      	add	r3, r2
  40321a:	089b      	lsrs	r3, r3, #2
#endif
	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  40321c:	4618      	mov	r0, r3
  40321e:	bd80      	pop	{r7, pc}
  403220:	0040318d 	.word	0x0040318d

00403224 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
  403224:	b580      	push	{r7, lr}
  403226:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  403228:	4b02      	ldr	r3, [pc, #8]	; (403234 <sysclk_get_cpu_hz+0x10>)
  40322a:	4798      	blx	r3
  40322c:	4603      	mov	r3, r0
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  40322e:	4618      	mov	r0, r3
  403230:	bd80      	pop	{r7, pc}
  403232:	bf00      	nop
  403234:	00403205 	.word	0x00403205

00403238 <sysclk_get_peripheral_hz>:
 * \brief Retrieves the current rate in Hz of the peripheral clocks.
 *
 * \return Frequency of the peripheral clocks, in Hz.
 */
static inline uint32_t sysclk_get_peripheral_hz(void)
{
  403238:	b580      	push	{r7, lr}
  40323a:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  40323c:	4b02      	ldr	r3, [pc, #8]	; (403248 <sysclk_get_peripheral_hz+0x10>)
  40323e:	4798      	blx	r3
  403240:	4603      	mov	r3, r0
		(((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 : (1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos))) * CONFIG_SYSCLK_DIV);
}
  403242:	4618      	mov	r0, r3
  403244:	bd80      	pop	{r7, pc}
  403246:	bf00      	nop
  403248:	00403205 	.word	0x00403205

0040324c <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
  40324c:	b580      	push	{r7, lr}
  40324e:	b082      	sub	sp, #8
  403250:	af00      	add	r7, sp, #0
  403252:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  403254:	6878      	ldr	r0, [r7, #4]
  403256:	4b02      	ldr	r3, [pc, #8]	; (403260 <sysclk_enable_peripheral_clock+0x14>)
  403258:	4798      	blx	r3
}
  40325a:	3708      	adds	r7, #8
  40325c:	46bd      	mov	sp, r7
  40325e:	bd80      	pop	{r7, pc}
  403260:	00401681 	.word	0x00401681

00403264 <ioport_set_pin_dir>:
 * \param pin IOPORT pin to configure
 * \param dir Direction to set for the specified pin (\ref ioport_direction)
 */
static inline void ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
  403264:	b480      	push	{r7}
  403266:	b08d      	sub	sp, #52	; 0x34
  403268:	af00      	add	r7, sp, #0
  40326a:	6078      	str	r0, [r7, #4]
  40326c:	460b      	mov	r3, r1
  40326e:	70fb      	strb	r3, [r7, #3]
  403270:	687b      	ldr	r3, [r7, #4]
  403272:	62fb      	str	r3, [r7, #44]	; 0x2c
  403274:	78fb      	ldrb	r3, [r7, #3]
  403276:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  40327a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  40327c:	627b      	str	r3, [r7, #36]	; 0x24
  40327e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  403280:	623b      	str	r3, [r7, #32]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  403282:	6a3b      	ldr	r3, [r7, #32]
  403284:	095b      	lsrs	r3, r3, #5
  403286:	61fb      	str	r3, [r7, #28]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  403288:	69fa      	ldr	r2, [r7, #28]
  40328a:	4b17      	ldr	r3, [pc, #92]	; (4032e8 <ioport_set_pin_dir+0x84>)
  40328c:	4413      	add	r3, r2
  40328e:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);
  403290:	61bb      	str	r3, [r7, #24]

	if (dir == IOPORT_DIR_OUTPUT) {
  403292:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  403296:	2b01      	cmp	r3, #1
  403298:	d109      	bne.n	4032ae <ioport_set_pin_dir+0x4a>
  40329a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  40329c:	617b      	str	r3, [r7, #20]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  40329e:	697b      	ldr	r3, [r7, #20]
  4032a0:	f003 031f 	and.w	r3, r3, #31
  4032a4:	2201      	movs	r2, #1
  4032a6:	409a      	lsls	r2, r3
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4032a8:	69bb      	ldr	r3, [r7, #24]
  4032aa:	611a      	str	r2, [r3, #16]
  4032ac:	e00c      	b.n	4032c8 <ioport_set_pin_dir+0x64>
	} else if (dir == IOPORT_DIR_INPUT) {
  4032ae:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  4032b2:	2b00      	cmp	r3, #0
  4032b4:	d108      	bne.n	4032c8 <ioport_set_pin_dir+0x64>
  4032b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4032b8:	613b      	str	r3, [r7, #16]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  4032ba:	693b      	ldr	r3, [r7, #16]
  4032bc:	f003 031f 	and.w	r3, r3, #31
  4032c0:	2201      	movs	r2, #1
  4032c2:	409a      	lsls	r2, r3
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  4032c4:	69bb      	ldr	r3, [r7, #24]
  4032c6:	615a      	str	r2, [r3, #20]
  4032c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4032ca:	60fb      	str	r3, [r7, #12]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  4032cc:	68fb      	ldr	r3, [r7, #12]
  4032ce:	f003 031f 	and.w	r3, r3, #31
  4032d2:	2201      	movs	r2, #1
  4032d4:	409a      	lsls	r2, r3
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4032d6:	69bb      	ldr	r3, [r7, #24]
  4032d8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	arch_ioport_set_pin_dir(pin, dir);
}
  4032dc:	3734      	adds	r7, #52	; 0x34
  4032de:	46bd      	mov	sp, r7
  4032e0:	f85d 7b04 	ldr.w	r7, [sp], #4
  4032e4:	4770      	bx	lr
  4032e6:	bf00      	nop
  4032e8:	00200707 	.word	0x00200707

004032ec <ioport_set_pin_level>:
 *
 * \param pin IOPORT pin to configure
 * \param level Logical value of the pin
 */
static inline void ioport_set_pin_level(ioport_pin_t pin, bool level)
{
  4032ec:	b480      	push	{r7}
  4032ee:	b08b      	sub	sp, #44	; 0x2c
  4032f0:	af00      	add	r7, sp, #0
  4032f2:	6078      	str	r0, [r7, #4]
  4032f4:	460b      	mov	r3, r1
  4032f6:	70fb      	strb	r3, [r7, #3]
  4032f8:	687b      	ldr	r3, [r7, #4]
  4032fa:	627b      	str	r3, [r7, #36]	; 0x24
  4032fc:	78fb      	ldrb	r3, [r7, #3]
  4032fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  403302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  403304:	61fb      	str	r3, [r7, #28]
  403306:	69fb      	ldr	r3, [r7, #28]
  403308:	61bb      	str	r3, [r7, #24]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  40330a:	69bb      	ldr	r3, [r7, #24]
  40330c:	095b      	lsrs	r3, r3, #5
  40330e:	617b      	str	r3, [r7, #20]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  403310:	697a      	ldr	r2, [r7, #20]
  403312:	4b10      	ldr	r3, [pc, #64]	; (403354 <ioport_set_pin_level+0x68>)
  403314:	4413      	add	r3, r2
  403316:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);
  403318:	613b      	str	r3, [r7, #16]

	if (level) {
  40331a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
  40331e:	2b00      	cmp	r3, #0
  403320:	d009      	beq.n	403336 <ioport_set_pin_level+0x4a>
  403322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  403324:	60fb      	str	r3, [r7, #12]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  403326:	68fb      	ldr	r3, [r7, #12]
  403328:	f003 031f 	and.w	r3, r3, #31
  40332c:	2201      	movs	r2, #1
  40332e:	409a      	lsls	r2, r3
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  403330:	693b      	ldr	r3, [r7, #16]
  403332:	631a      	str	r2, [r3, #48]	; 0x30
  403334:	e008      	b.n	403348 <ioport_set_pin_level+0x5c>
  403336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  403338:	60bb      	str	r3, [r7, #8]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  40333a:	68bb      	ldr	r3, [r7, #8]
  40333c:	f003 031f 	and.w	r3, r3, #31
  403340:	2201      	movs	r2, #1
  403342:	409a      	lsls	r2, r3
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  403344:	693b      	ldr	r3, [r7, #16]
  403346:	635a      	str	r2, [r3, #52]	; 0x34
	arch_ioport_set_pin_level(pin, level);
}
  403348:	372c      	adds	r7, #44	; 0x2c
  40334a:	46bd      	mov	sp, r7
  40334c:	f85d 7b04 	ldr.w	r7, [sp], #4
  403350:	4770      	bx	lr
  403352:	bf00      	nop
  403354:	00200707 	.word	0x00200707

00403358 <ioport_toggle_pin_level>:
 * an output.
 *
 * \param pin IOPORT pin to toggle
 */
static inline void ioport_toggle_pin_level(ioport_pin_t pin)
{
  403358:	b480      	push	{r7}
  40335a:	b08b      	sub	sp, #44	; 0x2c
  40335c:	af00      	add	r7, sp, #0
  40335e:	6078      	str	r0, [r7, #4]
  403360:	687b      	ldr	r3, [r7, #4]
  403362:	627b      	str	r3, [r7, #36]	; 0x24
  403364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  403366:	623b      	str	r3, [r7, #32]
  403368:	6a3b      	ldr	r3, [r7, #32]
  40336a:	61fb      	str	r3, [r7, #28]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  40336c:	69fb      	ldr	r3, [r7, #28]
  40336e:	095b      	lsrs	r3, r3, #5
  403370:	61bb      	str	r3, [r7, #24]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  403372:	69ba      	ldr	r2, [r7, #24]
  403374:	4b12      	ldr	r3, [pc, #72]	; (4033c0 <ioport_toggle_pin_level+0x68>)
  403376:	4413      	add	r3, r2
  403378:	025b      	lsls	r3, r3, #9
	return arch_ioport_port_to_base(port)->PIO_PDSR & mask;
}

__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	Pio *port = arch_ioport_pin_to_base(pin);
  40337a:	617b      	str	r3, [r7, #20]
  40337c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40337e:	613b      	str	r3, [r7, #16]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  403380:	693b      	ldr	r3, [r7, #16]
  403382:	f003 031f 	and.w	r3, r3, #31
  403386:	2201      	movs	r2, #1
  403388:	fa02 f303 	lsl.w	r3, r2, r3
}

__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	Pio *port = arch_ioport_pin_to_base(pin);
	ioport_port_mask_t mask = arch_ioport_pin_to_mask(pin);
  40338c:	60fb      	str	r3, [r7, #12]

	if (port->PIO_PDSR & arch_ioport_pin_to_mask(pin)) {
  40338e:	697b      	ldr	r3, [r7, #20]
  403390:	6bda      	ldr	r2, [r3, #60]	; 0x3c
  403392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  403394:	60bb      	str	r3, [r7, #8]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  403396:	68bb      	ldr	r3, [r7, #8]
  403398:	f003 031f 	and.w	r3, r3, #31
  40339c:	2101      	movs	r1, #1
  40339e:	fa01 f303 	lsl.w	r3, r1, r3
__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	Pio *port = arch_ioport_pin_to_base(pin);
	ioport_port_mask_t mask = arch_ioport_pin_to_mask(pin);

	if (port->PIO_PDSR & arch_ioport_pin_to_mask(pin)) {
  4033a2:	4013      	ands	r3, r2
  4033a4:	2b00      	cmp	r3, #0
  4033a6:	d003      	beq.n	4033b0 <ioport_toggle_pin_level+0x58>
		port->PIO_CODR = mask;
  4033a8:	697b      	ldr	r3, [r7, #20]
  4033aa:	68fa      	ldr	r2, [r7, #12]
  4033ac:	635a      	str	r2, [r3, #52]	; 0x34
  4033ae:	e002      	b.n	4033b6 <ioport_toggle_pin_level+0x5e>
	} else {
		port->PIO_SODR = mask;
  4033b0:	697b      	ldr	r3, [r7, #20]
  4033b2:	68fa      	ldr	r2, [r7, #12]
  4033b4:	631a      	str	r2, [r3, #48]	; 0x30
	arch_ioport_toggle_pin_level(pin);
}
  4033b6:	372c      	adds	r7, #44	; 0x2c
  4033b8:	46bd      	mov	sp, r7
  4033ba:	f85d 7b04 	ldr.w	r7, [sp], #4
  4033be:	4770      	bx	lr
  4033c0:	00200707 	.word	0x00200707

004033c4 <usart_serial_init>:
 * \param opt      Options needed to set up RS232 communication (see
 * \ref usart_options_t).
 */
static inline void usart_serial_init(usart_if p_usart,
		usart_serial_options_t *opt)
{
  4033c4:	b580      	push	{r7, lr}
  4033c6:	b08c      	sub	sp, #48	; 0x30
  4033c8:	af00      	add	r7, sp, #0
  4033ca:	6078      	str	r0, [r7, #4]
  4033cc:	6039      	str	r1, [r7, #0]
#if ((!SAM4L) && (!SAMG55))
	sam_uart_opt_t uart_settings;
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
  4033ce:	4b48      	ldr	r3, [pc, #288]	; (4034f0 <usart_serial_init+0x12c>)
  4033d0:	4798      	blx	r3
  4033d2:	4603      	mov	r3, r0
  4033d4:	627b      	str	r3, [r7, #36]	; 0x24
	uart_settings.ul_baudrate = opt->baudrate;
  4033d6:	683b      	ldr	r3, [r7, #0]
  4033d8:	681b      	ldr	r3, [r3, #0]
  4033da:	62bb      	str	r3, [r7, #40]	; 0x28
	uart_settings.ul_mode = opt->paritytype;
  4033dc:	683b      	ldr	r3, [r7, #0]
  4033de:	689b      	ldr	r3, [r3, #8]
  4033e0:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif

	sam_usart_opt_t usart_settings;
	usart_settings.baudrate = opt->baudrate;
  4033e2:	683b      	ldr	r3, [r7, #0]
  4033e4:	681b      	ldr	r3, [r3, #0]
  4033e6:	60fb      	str	r3, [r7, #12]
	usart_settings.char_length = opt->charlength;
  4033e8:	683b      	ldr	r3, [r7, #0]
  4033ea:	685b      	ldr	r3, [r3, #4]
  4033ec:	613b      	str	r3, [r7, #16]
	usart_settings.parity_type = opt->paritytype;
  4033ee:	683b      	ldr	r3, [r7, #0]
  4033f0:	689b      	ldr	r3, [r3, #8]
  4033f2:	617b      	str	r3, [r7, #20]
	usart_settings.stop_bits= opt->stopbits;
  4033f4:	683b      	ldr	r3, [r7, #0]
  4033f6:	68db      	ldr	r3, [r3, #12]
  4033f8:	61bb      	str	r3, [r7, #24]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
  4033fa:	2300      	movs	r3, #0
  4033fc:	61fb      	str	r3, [r7, #28]
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  4033fe:	687b      	ldr	r3, [r7, #4]
  403400:	4a3c      	ldr	r2, [pc, #240]	; (4034f4 <usart_serial_init+0x130>)
  403402:	4293      	cmp	r3, r2
  403404:	d108      	bne.n	403418 <usart_serial_init+0x54>
		sysclk_enable_peripheral_clock(ID_UART0);
  403406:	2007      	movs	r0, #7
  403408:	4b3b      	ldr	r3, [pc, #236]	; (4034f8 <usart_serial_init+0x134>)
  40340a:	4798      	blx	r3
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
  40340c:	f107 0324 	add.w	r3, r7, #36	; 0x24
  403410:	6878      	ldr	r0, [r7, #4]
  403412:	4619      	mov	r1, r3
  403414:	4b39      	ldr	r3, [pc, #228]	; (4034fc <usart_serial_init+0x138>)
  403416:	4798      	blx	r3
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  403418:	687b      	ldr	r3, [r7, #4]
  40341a:	4a39      	ldr	r2, [pc, #228]	; (403500 <usart_serial_init+0x13c>)
  40341c:	4293      	cmp	r3, r2
  40341e:	d108      	bne.n	403432 <usart_serial_init+0x6e>
		sysclk_enable_peripheral_clock(ID_UART1);
  403420:	2008      	movs	r0, #8
  403422:	4b35      	ldr	r3, [pc, #212]	; (4034f8 <usart_serial_init+0x134>)
  403424:	4798      	blx	r3
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
  403426:	f107 0324 	add.w	r3, r7, #36	; 0x24
  40342a:	6878      	ldr	r0, [r7, #4]
  40342c:	4619      	mov	r1, r3
  40342e:	4b33      	ldr	r3, [pc, #204]	; (4034fc <usart_serial_init+0x138>)
  403430:	4798      	blx	r3
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  403432:	687b      	ldr	r3, [r7, #4]
  403434:	4a33      	ldr	r2, [pc, #204]	; (403504 <usart_serial_init+0x140>)
  403436:	4293      	cmp	r3, r2
  403438:	d108      	bne.n	40344c <usart_serial_init+0x88>
		sysclk_enable_peripheral_clock(ID_UART2);
  40343a:	202c      	movs	r0, #44	; 0x2c
  40343c:	4b2e      	ldr	r3, [pc, #184]	; (4034f8 <usart_serial_init+0x134>)
  40343e:	4798      	blx	r3
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
  403440:	f107 0324 	add.w	r3, r7, #36	; 0x24
  403444:	6878      	ldr	r0, [r7, #4]
  403446:	4619      	mov	r1, r3
  403448:	4b2c      	ldr	r3, [pc, #176]	; (4034fc <usart_serial_init+0x138>)
  40344a:	4798      	blx	r3
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  40344c:	687b      	ldr	r3, [r7, #4]
  40344e:	4a2e      	ldr	r2, [pc, #184]	; (403508 <usart_serial_init+0x144>)
  403450:	4293      	cmp	r3, r2
  403452:	d108      	bne.n	403466 <usart_serial_init+0xa2>
		sysclk_enable_peripheral_clock(ID_UART3);
  403454:	202d      	movs	r0, #45	; 0x2d
  403456:	4b28      	ldr	r3, [pc, #160]	; (4034f8 <usart_serial_init+0x134>)
  403458:	4798      	blx	r3
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
  40345a:	f107 0324 	add.w	r3, r7, #36	; 0x24
  40345e:	6878      	ldr	r0, [r7, #4]
  403460:	4619      	mov	r1, r3
  403462:	4b26      	ldr	r3, [pc, #152]	; (4034fc <usart_serial_init+0x138>)
  403464:	4798      	blx	r3
		usart_enable_tx(p_usart);
		usart_enable_rx(p_usart);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  403466:	687b      	ldr	r3, [r7, #4]
  403468:	4a28      	ldr	r2, [pc, #160]	; (40350c <usart_serial_init+0x148>)
  40346a:	4293      	cmp	r3, r2
  40346c:	d111      	bne.n	403492 <usart_serial_init+0xce>
#if (!SAM4L)
#if (SAMG55)
		flexcom_enable(FLEXCOM0);
		flexcom_set_opmode(FLEXCOM0, FLEXCOM_USART);
#else
		sysclk_enable_peripheral_clock(ID_USART0);
  40346e:	200d      	movs	r0, #13
  403470:	4b21      	ldr	r3, [pc, #132]	; (4034f8 <usart_serial_init+0x134>)
  403472:	4798      	blx	r3
#endif
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
  403474:	4b1e      	ldr	r3, [pc, #120]	; (4034f0 <usart_serial_init+0x12c>)
  403476:	4798      	blx	r3
  403478:	4602      	mov	r2, r0
  40347a:	f107 030c 	add.w	r3, r7, #12
  40347e:	6878      	ldr	r0, [r7, #4]
  403480:	4619      	mov	r1, r3
  403482:	4b23      	ldr	r3, [pc, #140]	; (403510 <usart_serial_init+0x14c>)
  403484:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
  403486:	6878      	ldr	r0, [r7, #4]
  403488:	4b22      	ldr	r3, [pc, #136]	; (403514 <usart_serial_init+0x150>)
  40348a:	4798      	blx	r3
		usart_enable_rx(p_usart);
  40348c:	6878      	ldr	r0, [r7, #4]
  40348e:	4b22      	ldr	r3, [pc, #136]	; (403518 <usart_serial_init+0x154>)
  403490:	4798      	blx	r3
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  403492:	687b      	ldr	r3, [r7, #4]
  403494:	4a21      	ldr	r2, [pc, #132]	; (40351c <usart_serial_init+0x158>)
  403496:	4293      	cmp	r3, r2
  403498:	d111      	bne.n	4034be <usart_serial_init+0xfa>
#if (!SAM4L)
#if (SAMG55)
		flexcom_enable(FLEXCOM1);
		flexcom_set_opmode(FLEXCOM1, FLEXCOM_USART);
#else
		sysclk_enable_peripheral_clock(ID_USART1);
  40349a:	200e      	movs	r0, #14
  40349c:	4b16      	ldr	r3, [pc, #88]	; (4034f8 <usart_serial_init+0x134>)
  40349e:	4798      	blx	r3
#endif
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
  4034a0:	4b13      	ldr	r3, [pc, #76]	; (4034f0 <usart_serial_init+0x12c>)
  4034a2:	4798      	blx	r3
  4034a4:	4602      	mov	r2, r0
  4034a6:	f107 030c 	add.w	r3, r7, #12
  4034aa:	6878      	ldr	r0, [r7, #4]
  4034ac:	4619      	mov	r1, r3
  4034ae:	4b18      	ldr	r3, [pc, #96]	; (403510 <usart_serial_init+0x14c>)
  4034b0:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
  4034b2:	6878      	ldr	r0, [r7, #4]
  4034b4:	4b17      	ldr	r3, [pc, #92]	; (403514 <usart_serial_init+0x150>)
  4034b6:	4798      	blx	r3
		usart_enable_rx(p_usart);
  4034b8:	6878      	ldr	r0, [r7, #4]
  4034ba:	4b17      	ldr	r3, [pc, #92]	; (403518 <usart_serial_init+0x154>)
  4034bc:	4798      	blx	r3
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  4034be:	687b      	ldr	r3, [r7, #4]
  4034c0:	4a17      	ldr	r2, [pc, #92]	; (403520 <usart_serial_init+0x15c>)
  4034c2:	4293      	cmp	r3, r2
  4034c4:	d111      	bne.n	4034ea <usart_serial_init+0x126>
#if (!SAM4L)
#if (SAMG55)
		flexcom_enable(FLEXCOM2);
		flexcom_set_opmode(FLEXCOM2, FLEXCOM_USART);
#else
		sysclk_enable_peripheral_clock(ID_USART2);
  4034c6:	200f      	movs	r0, #15
  4034c8:	4b0b      	ldr	r3, [pc, #44]	; (4034f8 <usart_serial_init+0x134>)
  4034ca:	4798      	blx	r3
#endif
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
  4034cc:	4b08      	ldr	r3, [pc, #32]	; (4034f0 <usart_serial_init+0x12c>)
  4034ce:	4798      	blx	r3
  4034d0:	4602      	mov	r2, r0
  4034d2:	f107 030c 	add.w	r3, r7, #12
  4034d6:	6878      	ldr	r0, [r7, #4]
  4034d8:	4619      	mov	r1, r3
  4034da:	4b0d      	ldr	r3, [pc, #52]	; (403510 <usart_serial_init+0x14c>)
  4034dc:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
  4034de:	6878      	ldr	r0, [r7, #4]
  4034e0:	4b0c      	ldr	r3, [pc, #48]	; (403514 <usart_serial_init+0x150>)
  4034e2:	4798      	blx	r3
		usart_enable_rx(p_usart);
  4034e4:	6878      	ldr	r0, [r7, #4]
  4034e6:	4b0c      	ldr	r3, [pc, #48]	; (403518 <usart_serial_init+0x154>)
  4034e8:	4798      	blx	r3
	}
# endif

#endif /* ifdef USART */

}
  4034ea:	3730      	adds	r7, #48	; 0x30
  4034ec:	46bd      	mov	sp, r7
  4034ee:	bd80      	pop	{r7, pc}
  4034f0:	00403239 	.word	0x00403239
  4034f4:	400e0800 	.word	0x400e0800
  4034f8:	0040324d 	.word	0x0040324d
  4034fc:	00401f19 	.word	0x00401f19
  403500:	400e0a00 	.word	0x400e0a00
  403504:	400e1a00 	.word	0x400e1a00
  403508:	400e1c00 	.word	0x400e1c00
  40350c:	40024000 	.word	0x40024000
  403510:	004020b5 	.word	0x004020b5
  403514:	00402139 	.word	0x00402139
  403518:	00402185 	.word	0x00402185
  40351c:	40028000 	.word	0x40028000
  403520:	4002c000 	.word	0x4002c000

00403524 <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
  403524:	b580      	push	{r7, lr}
  403526:	b082      	sub	sp, #8
  403528:	af00      	add	r7, sp, #0
  40352a:	6078      	str	r0, [r7, #4]
  40352c:	460b      	mov	r3, r1
  40352e:	70fb      	strb	r3, [r7, #3]
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  403530:	687b      	ldr	r3, [r7, #4]
  403532:	4a36      	ldr	r2, [pc, #216]	; (40360c <usart_serial_putchar+0xe8>)
  403534:	4293      	cmp	r3, r2
  403536:	d10a      	bne.n	40354e <usart_serial_putchar+0x2a>
		while (uart_write((Uart*)p_usart, c)!=0);
  403538:	bf00      	nop
  40353a:	78fb      	ldrb	r3, [r7, #3]
  40353c:	6878      	ldr	r0, [r7, #4]
  40353e:	4619      	mov	r1, r3
  403540:	4b33      	ldr	r3, [pc, #204]	; (403610 <usart_serial_putchar+0xec>)
  403542:	4798      	blx	r3
  403544:	4603      	mov	r3, r0
  403546:	2b00      	cmp	r3, #0
  403548:	d1f7      	bne.n	40353a <usart_serial_putchar+0x16>
		return 1;
  40354a:	2301      	movs	r3, #1
  40354c:	e05a      	b.n	403604 <usart_serial_putchar+0xe0>
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  40354e:	687b      	ldr	r3, [r7, #4]
  403550:	4a30      	ldr	r2, [pc, #192]	; (403614 <usart_serial_putchar+0xf0>)
  403552:	4293      	cmp	r3, r2
  403554:	d10a      	bne.n	40356c <usart_serial_putchar+0x48>
		while (uart_write((Uart*)p_usart, c)!=0);
  403556:	bf00      	nop
  403558:	78fb      	ldrb	r3, [r7, #3]
  40355a:	6878      	ldr	r0, [r7, #4]
  40355c:	4619      	mov	r1, r3
  40355e:	4b2c      	ldr	r3, [pc, #176]	; (403610 <usart_serial_putchar+0xec>)
  403560:	4798      	blx	r3
  403562:	4603      	mov	r3, r0
  403564:	2b00      	cmp	r3, #0
  403566:	d1f7      	bne.n	403558 <usart_serial_putchar+0x34>
		return 1;
  403568:	2301      	movs	r3, #1
  40356a:	e04b      	b.n	403604 <usart_serial_putchar+0xe0>
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  40356c:	687b      	ldr	r3, [r7, #4]
  40356e:	4a2a      	ldr	r2, [pc, #168]	; (403618 <usart_serial_putchar+0xf4>)
  403570:	4293      	cmp	r3, r2
  403572:	d10a      	bne.n	40358a <usart_serial_putchar+0x66>
		while (uart_write((Uart*)p_usart, c)!=0);
  403574:	bf00      	nop
  403576:	78fb      	ldrb	r3, [r7, #3]
  403578:	6878      	ldr	r0, [r7, #4]
  40357a:	4619      	mov	r1, r3
  40357c:	4b24      	ldr	r3, [pc, #144]	; (403610 <usart_serial_putchar+0xec>)
  40357e:	4798      	blx	r3
  403580:	4603      	mov	r3, r0
  403582:	2b00      	cmp	r3, #0
  403584:	d1f7      	bne.n	403576 <usart_serial_putchar+0x52>
		return 1;
  403586:	2301      	movs	r3, #1
  403588:	e03c      	b.n	403604 <usart_serial_putchar+0xe0>
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  40358a:	687b      	ldr	r3, [r7, #4]
  40358c:	4a23      	ldr	r2, [pc, #140]	; (40361c <usart_serial_putchar+0xf8>)
  40358e:	4293      	cmp	r3, r2
  403590:	d10a      	bne.n	4035a8 <usart_serial_putchar+0x84>
		while (uart_write((Uart*)p_usart, c)!=0);
  403592:	bf00      	nop
  403594:	78fb      	ldrb	r3, [r7, #3]
  403596:	6878      	ldr	r0, [r7, #4]
  403598:	4619      	mov	r1, r3
  40359a:	4b1d      	ldr	r3, [pc, #116]	; (403610 <usart_serial_putchar+0xec>)
  40359c:	4798      	blx	r3
  40359e:	4603      	mov	r3, r0
  4035a0:	2b00      	cmp	r3, #0
  4035a2:	d1f7      	bne.n	403594 <usart_serial_putchar+0x70>
		return 1;
  4035a4:	2301      	movs	r3, #1
  4035a6:	e02d      	b.n	403604 <usart_serial_putchar+0xe0>
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  4035a8:	687b      	ldr	r3, [r7, #4]
  4035aa:	4a1d      	ldr	r2, [pc, #116]	; (403620 <usart_serial_putchar+0xfc>)
  4035ac:	4293      	cmp	r3, r2
  4035ae:	d10a      	bne.n	4035c6 <usart_serial_putchar+0xa2>
		while (usart_write(p_usart, c)!=0);
  4035b0:	bf00      	nop
  4035b2:	78fb      	ldrb	r3, [r7, #3]
  4035b4:	6878      	ldr	r0, [r7, #4]
  4035b6:	4619      	mov	r1, r3
  4035b8:	4b1a      	ldr	r3, [pc, #104]	; (403624 <usart_serial_putchar+0x100>)
  4035ba:	4798      	blx	r3
  4035bc:	4603      	mov	r3, r0
  4035be:	2b00      	cmp	r3, #0
  4035c0:	d1f7      	bne.n	4035b2 <usart_serial_putchar+0x8e>
		return 1;
  4035c2:	2301      	movs	r3, #1
  4035c4:	e01e      	b.n	403604 <usart_serial_putchar+0xe0>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  4035c6:	687b      	ldr	r3, [r7, #4]
  4035c8:	4a17      	ldr	r2, [pc, #92]	; (403628 <usart_serial_putchar+0x104>)
  4035ca:	4293      	cmp	r3, r2
  4035cc:	d10a      	bne.n	4035e4 <usart_serial_putchar+0xc0>
		while (usart_write(p_usart, c)!=0);
  4035ce:	bf00      	nop
  4035d0:	78fb      	ldrb	r3, [r7, #3]
  4035d2:	6878      	ldr	r0, [r7, #4]
  4035d4:	4619      	mov	r1, r3
  4035d6:	4b13      	ldr	r3, [pc, #76]	; (403624 <usart_serial_putchar+0x100>)
  4035d8:	4798      	blx	r3
  4035da:	4603      	mov	r3, r0
  4035dc:	2b00      	cmp	r3, #0
  4035de:	d1f7      	bne.n	4035d0 <usart_serial_putchar+0xac>
		return 1;
  4035e0:	2301      	movs	r3, #1
  4035e2:	e00f      	b.n	403604 <usart_serial_putchar+0xe0>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  4035e4:	687b      	ldr	r3, [r7, #4]
  4035e6:	4a11      	ldr	r2, [pc, #68]	; (40362c <usart_serial_putchar+0x108>)
  4035e8:	4293      	cmp	r3, r2
  4035ea:	d10a      	bne.n	403602 <usart_serial_putchar+0xde>
		while (usart_write(p_usart, c)!=0);
  4035ec:	bf00      	nop
  4035ee:	78fb      	ldrb	r3, [r7, #3]
  4035f0:	6878      	ldr	r0, [r7, #4]
  4035f2:	4619      	mov	r1, r3
  4035f4:	4b0b      	ldr	r3, [pc, #44]	; (403624 <usart_serial_putchar+0x100>)
  4035f6:	4798      	blx	r3
  4035f8:	4603      	mov	r3, r0
  4035fa:	2b00      	cmp	r3, #0
  4035fc:	d1f7      	bne.n	4035ee <usart_serial_putchar+0xca>
		return 1;
  4035fe:	2301      	movs	r3, #1
  403600:	e000      	b.n	403604 <usart_serial_putchar+0xe0>
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
  403602:	2300      	movs	r3, #0
}
  403604:	4618      	mov	r0, r3
  403606:	3708      	adds	r7, #8
  403608:	46bd      	mov	sp, r7
  40360a:	bd80      	pop	{r7, pc}
  40360c:	400e0800 	.word	0x400e0800
  403610:	00401f71 	.word	0x00401f71
  403614:	400e0a00 	.word	0x400e0a00
  403618:	400e1a00 	.word	0x400e1a00
  40361c:	400e1c00 	.word	0x400e1c00
  403620:	40024000 	.word	0x40024000
  403624:	0040228d 	.word	0x0040228d
  403628:	40028000 	.word	0x40028000
  40362c:	4002c000 	.word	0x4002c000

00403630 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  403630:	b580      	push	{r7, lr}
  403632:	b084      	sub	sp, #16
  403634:	af00      	add	r7, sp, #0
  403636:	6078      	str	r0, [r7, #4]
  403638:	6039      	str	r1, [r7, #0]
	uint32_t val = 0;
  40363a:	2300      	movs	r3, #0
  40363c:	60fb      	str	r3, [r7, #12]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  40363e:	687b      	ldr	r3, [r7, #4]
  403640:	4a33      	ldr	r2, [pc, #204]	; (403710 <usart_serial_getchar+0xe0>)
  403642:	4293      	cmp	r3, r2
  403644:	d107      	bne.n	403656 <usart_serial_getchar+0x26>
		while (uart_read((Uart*)p_usart, data));
  403646:	bf00      	nop
  403648:	6878      	ldr	r0, [r7, #4]
  40364a:	6839      	ldr	r1, [r7, #0]
  40364c:	4b31      	ldr	r3, [pc, #196]	; (403714 <usart_serial_getchar+0xe4>)
  40364e:	4798      	blx	r3
  403650:	4603      	mov	r3, r0
  403652:	2b00      	cmp	r3, #0
  403654:	d1f8      	bne.n	403648 <usart_serial_getchar+0x18>
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  403656:	687b      	ldr	r3, [r7, #4]
  403658:	4a2f      	ldr	r2, [pc, #188]	; (403718 <usart_serial_getchar+0xe8>)
  40365a:	4293      	cmp	r3, r2
  40365c:	d107      	bne.n	40366e <usart_serial_getchar+0x3e>
		while (uart_read((Uart*)p_usart, data));
  40365e:	bf00      	nop
  403660:	6878      	ldr	r0, [r7, #4]
  403662:	6839      	ldr	r1, [r7, #0]
  403664:	4b2b      	ldr	r3, [pc, #172]	; (403714 <usart_serial_getchar+0xe4>)
  403666:	4798      	blx	r3
  403668:	4603      	mov	r3, r0
  40366a:	2b00      	cmp	r3, #0
  40366c:	d1f8      	bne.n	403660 <usart_serial_getchar+0x30>
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  40366e:	687b      	ldr	r3, [r7, #4]
  403670:	4a2a      	ldr	r2, [pc, #168]	; (40371c <usart_serial_getchar+0xec>)
  403672:	4293      	cmp	r3, r2
  403674:	d107      	bne.n	403686 <usart_serial_getchar+0x56>
		while (uart_read((Uart*)p_usart, data));
  403676:	bf00      	nop
  403678:	6878      	ldr	r0, [r7, #4]
  40367a:	6839      	ldr	r1, [r7, #0]
  40367c:	4b25      	ldr	r3, [pc, #148]	; (403714 <usart_serial_getchar+0xe4>)
  40367e:	4798      	blx	r3
  403680:	4603      	mov	r3, r0
  403682:	2b00      	cmp	r3, #0
  403684:	d1f8      	bne.n	403678 <usart_serial_getchar+0x48>
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  403686:	687b      	ldr	r3, [r7, #4]
  403688:	4a25      	ldr	r2, [pc, #148]	; (403720 <usart_serial_getchar+0xf0>)
  40368a:	4293      	cmp	r3, r2
  40368c:	d107      	bne.n	40369e <usart_serial_getchar+0x6e>
		while (uart_read((Uart*)p_usart, data));
  40368e:	bf00      	nop
  403690:	6878      	ldr	r0, [r7, #4]
  403692:	6839      	ldr	r1, [r7, #0]
  403694:	4b1f      	ldr	r3, [pc, #124]	; (403714 <usart_serial_getchar+0xe4>)
  403696:	4798      	blx	r3
  403698:	4603      	mov	r3, r0
  40369a:	2b00      	cmp	r3, #0
  40369c:	d1f8      	bne.n	403690 <usart_serial_getchar+0x60>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  40369e:	687b      	ldr	r3, [r7, #4]
  4036a0:	4a20      	ldr	r2, [pc, #128]	; (403724 <usart_serial_getchar+0xf4>)
  4036a2:	4293      	cmp	r3, r2
  4036a4:	d10d      	bne.n	4036c2 <usart_serial_getchar+0x92>
		while (usart_read(p_usart, &val));
  4036a6:	bf00      	nop
  4036a8:	f107 030c 	add.w	r3, r7, #12
  4036ac:	6878      	ldr	r0, [r7, #4]
  4036ae:	4619      	mov	r1, r3
  4036b0:	4b1d      	ldr	r3, [pc, #116]	; (403728 <usart_serial_getchar+0xf8>)
  4036b2:	4798      	blx	r3
  4036b4:	4603      	mov	r3, r0
  4036b6:	2b00      	cmp	r3, #0
  4036b8:	d1f6      	bne.n	4036a8 <usart_serial_getchar+0x78>
		*data = (uint8_t)(val & 0xFF);
  4036ba:	68fb      	ldr	r3, [r7, #12]
  4036bc:	b2da      	uxtb	r2, r3
  4036be:	683b      	ldr	r3, [r7, #0]
  4036c0:	701a      	strb	r2, [r3, #0]
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  4036c2:	687b      	ldr	r3, [r7, #4]
  4036c4:	4a19      	ldr	r2, [pc, #100]	; (40372c <usart_serial_getchar+0xfc>)
  4036c6:	4293      	cmp	r3, r2
  4036c8:	d10d      	bne.n	4036e6 <usart_serial_getchar+0xb6>
		while (usart_read(p_usart, &val));
  4036ca:	bf00      	nop
  4036cc:	f107 030c 	add.w	r3, r7, #12
  4036d0:	6878      	ldr	r0, [r7, #4]
  4036d2:	4619      	mov	r1, r3
  4036d4:	4b14      	ldr	r3, [pc, #80]	; (403728 <usart_serial_getchar+0xf8>)
  4036d6:	4798      	blx	r3
  4036d8:	4603      	mov	r3, r0
  4036da:	2b00      	cmp	r3, #0
  4036dc:	d1f6      	bne.n	4036cc <usart_serial_getchar+0x9c>
		*data = (uint8_t)(val & 0xFF);
  4036de:	68fb      	ldr	r3, [r7, #12]
  4036e0:	b2da      	uxtb	r2, r3
  4036e2:	683b      	ldr	r3, [r7, #0]
  4036e4:	701a      	strb	r2, [r3, #0]
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  4036e6:	687b      	ldr	r3, [r7, #4]
  4036e8:	4a11      	ldr	r2, [pc, #68]	; (403730 <usart_serial_getchar+0x100>)
  4036ea:	4293      	cmp	r3, r2
  4036ec:	d10d      	bne.n	40370a <usart_serial_getchar+0xda>
		while (usart_read(p_usart, &val));
  4036ee:	bf00      	nop
  4036f0:	f107 030c 	add.w	r3, r7, #12
  4036f4:	6878      	ldr	r0, [r7, #4]
  4036f6:	4619      	mov	r1, r3
  4036f8:	4b0b      	ldr	r3, [pc, #44]	; (403728 <usart_serial_getchar+0xf8>)
  4036fa:	4798      	blx	r3
  4036fc:	4603      	mov	r3, r0
  4036fe:	2b00      	cmp	r3, #0
  403700:	d1f6      	bne.n	4036f0 <usart_serial_getchar+0xc0>
		*data = (uint8_t)(val & 0xFF);
  403702:	68fb      	ldr	r3, [r7, #12]
  403704:	b2da      	uxtb	r2, r3
  403706:	683b      	ldr	r3, [r7, #0]
  403708:	701a      	strb	r2, [r3, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  40370a:	3710      	adds	r7, #16
  40370c:	46bd      	mov	sp, r7
  40370e:	bd80      	pop	{r7, pc}
  403710:	400e0800 	.word	0x400e0800
  403714:	00401fa1 	.word	0x00401fa1
  403718:	400e0a00 	.word	0x400e0a00
  40371c:	400e1a00 	.word	0x400e1a00
  403720:	400e1c00 	.word	0x400e1c00
  403724:	40024000 	.word	0x40024000
  403728:	004022c1 	.word	0x004022c1
  40372c:	40028000 	.word	0x40028000
  403730:	4002c000 	.word	0x4002c000

00403734 <stdio_serial_init>:
 * \param usart       Base address of the USART instance.
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
  403734:	b580      	push	{r7, lr}
  403736:	b082      	sub	sp, #8
  403738:	af00      	add	r7, sp, #0
  40373a:	6078      	str	r0, [r7, #4]
  40373c:	6039      	str	r1, [r7, #0]
	stdio_base = (void *)usart;
  40373e:	4a0f      	ldr	r2, [pc, #60]	; (40377c <stdio_serial_init+0x48>)
  403740:	687b      	ldr	r3, [r7, #4]
  403742:	6013      	str	r3, [r2, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  403744:	4b0e      	ldr	r3, [pc, #56]	; (403780 <stdio_serial_init+0x4c>)
  403746:	4a0f      	ldr	r2, [pc, #60]	; (403784 <stdio_serial_init+0x50>)
  403748:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  40374a:	4b0f      	ldr	r3, [pc, #60]	; (403788 <stdio_serial_init+0x54>)
  40374c:	4a0f      	ldr	r2, [pc, #60]	; (40378c <stdio_serial_init+0x58>)
  40374e:	601a      	str	r2, [r3, #0]
# if (XMEGA || MEGA_RF)
	usart_serial_init((USART_t *)usart,opt);
# elif UC3
	usart_serial_init(usart,(usart_serial_options_t *)opt);
# elif SAM
	usart_serial_init((Usart *)usart,(usart_serial_options_t *)opt);
  403750:	6878      	ldr	r0, [r7, #4]
  403752:	6839      	ldr	r1, [r7, #0]
  403754:	4b0e      	ldr	r3, [pc, #56]	; (403790 <stdio_serial_init+0x5c>)
  403756:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  403758:	4b0e      	ldr	r3, [pc, #56]	; (403794 <stdio_serial_init+0x60>)
  40375a:	681b      	ldr	r3, [r3, #0]
  40375c:	689b      	ldr	r3, [r3, #8]
  40375e:	4618      	mov	r0, r3
  403760:	2100      	movs	r1, #0
  403762:	4b0d      	ldr	r3, [pc, #52]	; (403798 <stdio_serial_init+0x64>)
  403764:	4798      	blx	r3
	setbuf(stdin, NULL);
  403766:	4b0b      	ldr	r3, [pc, #44]	; (403794 <stdio_serial_init+0x60>)
  403768:	681b      	ldr	r3, [r3, #0]
  40376a:	685b      	ldr	r3, [r3, #4]
  40376c:	4618      	mov	r0, r3
  40376e:	2100      	movs	r1, #0
  403770:	4b09      	ldr	r3, [pc, #36]	; (403798 <stdio_serial_init+0x64>)
  403772:	4798      	blx	r3
	// and AVR GCC library:
	// - printf() emits one character at a time.
	// - getchar() requests only 1 byte to exit.
#  endif
# endif
}
  403774:	3708      	adds	r7, #8
  403776:	46bd      	mov	sp, r7
  403778:	bd80      	pop	{r7, pc}
  40377a:	bf00      	nop
  40377c:	20400a0c 	.word	0x20400a0c
  403780:	20400a08 	.word	0x20400a08
  403784:	00403525 	.word	0x00403525
  403788:	20400a04 	.word	0x20400a04
  40378c:	00403631 	.word	0x00403631
  403790:	004033c5 	.word	0x004033c5
  403794:	204004b0 	.word	0x204004b0
  403798:	00404481 	.word	0x00404481

0040379c <mdelay>:
 * by the SAM microcontroller system tick).
 *
 * \param ul_dly_ticks  Delay to wait for, in milliseconds.
 */
void mdelay(uint32_t ul_dly_ticks)
{
  40379c:	b480      	push	{r7}
  40379e:	b085      	sub	sp, #20
  4037a0:	af00      	add	r7, sp, #0
  4037a2:	6078      	str	r0, [r7, #4]
	uint32_t ul_cur_ticks;

	ul_cur_ticks = ul_ms_ticks;
  4037a4:	4b07      	ldr	r3, [pc, #28]	; (4037c4 <mdelay+0x28>)
  4037a6:	681b      	ldr	r3, [r3, #0]
  4037a8:	60fb      	str	r3, [r7, #12]
	while ((ul_ms_ticks - ul_cur_ticks) < ul_dly_ticks) {
  4037aa:	bf00      	nop
  4037ac:	4b05      	ldr	r3, [pc, #20]	; (4037c4 <mdelay+0x28>)
  4037ae:	681a      	ldr	r2, [r3, #0]
  4037b0:	68fb      	ldr	r3, [r7, #12]
  4037b2:	1ad2      	subs	r2, r2, r3
  4037b4:	687b      	ldr	r3, [r7, #4]
  4037b6:	429a      	cmp	r2, r3
  4037b8:	d3f8      	bcc.n	4037ac <mdelay+0x10>
	}
}
  4037ba:	3714      	adds	r7, #20
  4037bc:	46bd      	mov	sp, r7
  4037be:	f85d 7b04 	ldr.w	r7, [sp], #4
  4037c2:	4770      	bx	lr
  4037c4:	20400998 	.word	0x20400998

004037c8 <SysTick_Handler>:
 *
 *  Process System Tick Event.
 *  Increment the ul_ms_ticks counter.
 */
void SysTick_Handler(void)
{
  4037c8:	b480      	push	{r7}
  4037ca:	af00      	add	r7, sp, #0
	g_ul_tick_count++;
  4037cc:	4b06      	ldr	r3, [pc, #24]	; (4037e8 <SysTick_Handler+0x20>)
  4037ce:	681b      	ldr	r3, [r3, #0]
  4037d0:	3301      	adds	r3, #1
  4037d2:	4a05      	ldr	r2, [pc, #20]	; (4037e8 <SysTick_Handler+0x20>)
  4037d4:	6013      	str	r3, [r2, #0]
	ul_ms_ticks++; //jsi 6feb16
  4037d6:	4b05      	ldr	r3, [pc, #20]	; (4037ec <SysTick_Handler+0x24>)
  4037d8:	681b      	ldr	r3, [r3, #0]
  4037da:	3301      	adds	r3, #1
  4037dc:	4a03      	ldr	r2, [pc, #12]	; (4037ec <SysTick_Handler+0x24>)
  4037de:	6013      	str	r3, [r2, #0]
}
  4037e0:	46bd      	mov	sp, r7
  4037e2:	f85d 7b04 	ldr.w	r7, [sp], #4
  4037e6:	4770      	bx	lr
  4037e8:	20400af8 	.word	0x20400af8
  4037ec:	20400998 	.word	0x20400998

004037f0 <USART0_Handler>:
/**
 *  \brief Handler for USART interrupt.
 *
 */
void USART_Handler(void)
{
  4037f0:	b580      	push	{r7, lr}
  4037f2:	b082      	sub	sp, #8
  4037f4:	af00      	add	r7, sp, #0
	uint32_t ul_status;
	uint8_t uc_char;

	/* Read USART status. */
	ul_status = usart_get_status(BOARD_USART);
  4037f6:	481b      	ldr	r0, [pc, #108]	; (403864 <USART0_Handler+0x74>)
  4037f8:	4b1b      	ldr	r3, [pc, #108]	; (403868 <USART0_Handler+0x78>)
  4037fa:	4798      	blx	r3
  4037fc:	6078      	str	r0, [r7, #4]

	/*transmit interrupt rises*/
	if(ul_status & (US_IER_TXRDY | US_IER_TXEMPTY)) {
  4037fe:	687a      	ldr	r2, [r7, #4]
  403800:	f240 2302 	movw	r3, #514	; 0x202
  403804:	4013      	ands	r3, r2
  403806:	2b00      	cmp	r3, #0
  403808:	d004      	beq.n	403814 <USART0_Handler+0x24>
		usart_disable_interrupt(BOARD_USART, (US_IER_TXRDY | US_IER_TXEMPTY));
  40380a:	4816      	ldr	r0, [pc, #88]	; (403864 <USART0_Handler+0x74>)
  40380c:	f240 2102 	movw	r1, #514	; 0x202
  403810:	4b16      	ldr	r3, [pc, #88]	; (40386c <USART0_Handler+0x7c>)
  403812:	4798      	blx	r3
	}

	/*receive interrupt rise, store character to receiver buffer*/
	if((g_state == RECEIVING) && (usart_read(BOARD_USART, (uint32_t *)&uc_char) == 0)) {
  403814:	4b16      	ldr	r3, [pc, #88]	; (403870 <USART0_Handler+0x80>)
  403816:	781b      	ldrb	r3, [r3, #0]
  403818:	b2db      	uxtb	r3, r3
  40381a:	2b02      	cmp	r3, #2
  40381c:	d11f      	bne.n	40385e <USART0_Handler+0x6e>
  40381e:	1cfb      	adds	r3, r7, #3
  403820:	4810      	ldr	r0, [pc, #64]	; (403864 <USART0_Handler+0x74>)
  403822:	4619      	mov	r1, r3
  403824:	4b13      	ldr	r3, [pc, #76]	; (403874 <USART0_Handler+0x84>)
  403826:	4798      	blx	r3
  403828:	4603      	mov	r3, r0
  40382a:	2b00      	cmp	r3, #0
  40382c:	d117      	bne.n	40385e <USART0_Handler+0x6e>
		*p_revdata++ = uc_char;
  40382e:	4b12      	ldr	r3, [pc, #72]	; (403878 <USART0_Handler+0x88>)
  403830:	681b      	ldr	r3, [r3, #0]
  403832:	1c5a      	adds	r2, r3, #1
  403834:	4910      	ldr	r1, [pc, #64]	; (403878 <USART0_Handler+0x88>)
  403836:	600a      	str	r2, [r1, #0]
  403838:	78fa      	ldrb	r2, [r7, #3]
  40383a:	701a      	strb	r2, [r3, #0]
		g_ulcount++;
  40383c:	4b0f      	ldr	r3, [pc, #60]	; (40387c <USART0_Handler+0x8c>)
  40383e:	681b      	ldr	r3, [r3, #0]
  403840:	3301      	adds	r3, #1
  403842:	4a0e      	ldr	r2, [pc, #56]	; (40387c <USART0_Handler+0x8c>)
  403844:	6013      	str	r3, [r2, #0]
		if(g_ulcount >= BUFFER_SIZE) {
  403846:	4b0d      	ldr	r3, [pc, #52]	; (40387c <USART0_Handler+0x8c>)
  403848:	681b      	ldr	r3, [r3, #0]
  40384a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
  40384e:	d306      	bcc.n	40385e <USART0_Handler+0x6e>
			g_state = RECEIVED;
  403850:	4b07      	ldr	r3, [pc, #28]	; (403870 <USART0_Handler+0x80>)
  403852:	2203      	movs	r2, #3
  403854:	701a      	strb	r2, [r3, #0]
			usart_disable_interrupt(BOARD_USART, US_IER_RXRDY);
  403856:	4803      	ldr	r0, [pc, #12]	; (403864 <USART0_Handler+0x74>)
  403858:	2101      	movs	r1, #1
  40385a:	4b04      	ldr	r3, [pc, #16]	; (40386c <USART0_Handler+0x7c>)
  40385c:	4798      	blx	r3
		}
	}
}
  40385e:	3708      	adds	r7, #8
  403860:	46bd      	mov	sp, r7
  403862:	bd80      	pop	{r7, pc}
  403864:	40024000 	.word	0x40024000
  403868:	004021ed 	.word	0x004021ed
  40386c:	004021d1 	.word	0x004021d1
  403870:	20400990 	.word	0x20400990
  403874:	004022c1 	.word	0x004022c1
  403878:	20400008 	.word	0x20400008
  40387c:	20400994 	.word	0x20400994

00403880 <configure_usart>:
 *
 *  Configure USART in RS485 mode, asynchronous, 8 bits, 1 stop bit,
 *  no parity, 256000 bauds and enable its transmitter and receiver.
 */
static void configure_usart(void)
{
  403880:	b5b0      	push	{r4, r5, r7, lr}
  403882:	b086      	sub	sp, #24
  403884:	af00      	add	r7, sp, #0
	const sam_usart_opt_t usart_console_settings = {
  403886:	4b14      	ldr	r3, [pc, #80]	; (4038d8 <configure_usart+0x58>)
  403888:	463c      	mov	r4, r7
  40388a:	461d      	mov	r5, r3
  40388c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  40388e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  403890:	e895 0003 	ldmia.w	r5, {r0, r1}
  403894:	e884 0003 	stmia.w	r4, {r0, r1}
		/* This field is only used in IrDA mode. */
		0
	};

	/* Enable the peripheral clock in the PMC. */
	sysclk_enable_peripheral_clock(BOARD_ID_USART);
  403898:	200d      	movs	r0, #13
  40389a:	4b10      	ldr	r3, [pc, #64]	; (4038dc <configure_usart+0x5c>)
  40389c:	4798      	blx	r3

	/* Configure USART in RS485 mode. */
//jsi 7feb16 we want rs232 not rs485 for our application	usart_init_rs485(BOARD_USART, &usart_console_settings,
//jsi 7feb16 we want rs232 not rs485 for our application			sysclk_get_cpu_hz());
			
	usart_init_rs232(BOARD_USART, &usart_console_settings, sysclk_get_cpu_hz());
  40389e:	4b10      	ldr	r3, [pc, #64]	; (4038e0 <configure_usart+0x60>)
  4038a0:	4798      	blx	r3
  4038a2:	4602      	mov	r2, r0
  4038a4:	463b      	mov	r3, r7
  4038a6:	480f      	ldr	r0, [pc, #60]	; (4038e4 <configure_usart+0x64>)
  4038a8:	4619      	mov	r1, r3
  4038aa:	4b0f      	ldr	r3, [pc, #60]	; (4038e8 <configure_usart+0x68>)
  4038ac:	4798      	blx	r3

	/* enable transmitter timeguard, 4 bit period delay. */
	usart_set_tx_timeguard(BOARD_USART, 4);
  4038ae:	480d      	ldr	r0, [pc, #52]	; (4038e4 <configure_usart+0x64>)
  4038b0:	2104      	movs	r1, #4
  4038b2:	4b0e      	ldr	r3, [pc, #56]	; (4038ec <configure_usart+0x6c>)
  4038b4:	4798      	blx	r3

	/* Disable all the interrupts. */
	usart_disable_interrupt(BOARD_USART, ALL_INTERRUPT_MASK);
  4038b6:	480b      	ldr	r0, [pc, #44]	; (4038e4 <configure_usart+0x64>)
  4038b8:	f04f 31ff 	mov.w	r1, #4294967295
  4038bc:	4b0c      	ldr	r3, [pc, #48]	; (4038f0 <configure_usart+0x70>)
  4038be:	4798      	blx	r3

	/* Enable TX & RX function. */
	usart_enable_tx(BOARD_USART);
  4038c0:	4808      	ldr	r0, [pc, #32]	; (4038e4 <configure_usart+0x64>)
  4038c2:	4b0c      	ldr	r3, [pc, #48]	; (4038f4 <configure_usart+0x74>)
  4038c4:	4798      	blx	r3
	usart_enable_rx(BOARD_USART);
  4038c6:	4807      	ldr	r0, [pc, #28]	; (4038e4 <configure_usart+0x64>)
  4038c8:	4b0b      	ldr	r3, [pc, #44]	; (4038f8 <configure_usart+0x78>)
  4038ca:	4798      	blx	r3

	/* Configure and enable interrupt of USART. */
	NVIC_EnableIRQ(USART_IRQn);
  4038cc:	200d      	movs	r0, #13
  4038ce:	4b0b      	ldr	r3, [pc, #44]	; (4038fc <configure_usart+0x7c>)
  4038d0:	4798      	blx	r3
}
  4038d2:	3718      	adds	r7, #24
  4038d4:	46bd      	mov	sp, r7
  4038d6:	bdb0      	pop	{r4, r5, r7, pc}
  4038d8:	00409b84 	.word	0x00409b84
  4038dc:	0040324d 	.word	0x0040324d
  4038e0:	00403225 	.word	0x00403225
  4038e4:	40024000 	.word	0x40024000
  4038e8:	004020b5 	.word	0x004020b5
  4038ec:	00402169 	.word	0x00402169
  4038f0:	004021d1 	.word	0x004021d1
  4038f4:	00402139 	.word	0x00402139
  4038f8:	00402185 	.word	0x00402185
  4038fc:	00402f39 	.word	0x00402f39

00403900 <configure_systick>:

/**
 *  Configure system tick to generate an interrupt every 1us. Note that this was 1ms in the example code. jsi 11feb16
 */
static void configure_systick(void)
{
  403900:	b580      	push	{r7, lr}
  403902:	b082      	sub	sp, #8
  403904:	af00      	add	r7, sp, #0
	uint32_t ul_flag;

	ul_flag = SysTick_Config(sysclk_get_cpu_hz()/SYS_TICK_FREQ);
  403906:	4b0a      	ldr	r3, [pc, #40]	; (403930 <configure_systick+0x30>)
  403908:	4798      	blx	r3
  40390a:	4602      	mov	r2, r0
  40390c:	4b09      	ldr	r3, [pc, #36]	; (403934 <configure_systick+0x34>)
  40390e:	fba3 2302 	umull	r2, r3, r3, r2
  403912:	099b      	lsrs	r3, r3, #6
  403914:	4618      	mov	r0, r3
  403916:	4b08      	ldr	r3, [pc, #32]	; (403938 <configure_systick+0x38>)
  403918:	4798      	blx	r3
  40391a:	6078      	str	r0, [r7, #4]
	if (ul_flag) {
  40391c:	687b      	ldr	r3, [r7, #4]
  40391e:	2b00      	cmp	r3, #0
  403920:	d003      	beq.n	40392a <configure_systick+0x2a>
		puts("-F- Systick configuration error\r");
  403922:	4806      	ldr	r0, [pc, #24]	; (40393c <configure_systick+0x3c>)
  403924:	4b06      	ldr	r3, [pc, #24]	; (403940 <configure_systick+0x40>)
  403926:	4798      	blx	r3
		while (1) {
		}
  403928:	e7fe      	b.n	403928 <configure_systick+0x28>
	}
}
  40392a:	3708      	adds	r7, #8
  40392c:	46bd      	mov	sp, r7
  40392e:	bd80      	pop	{r7, pc}
  403930:	00403225 	.word	0x00403225
  403934:	10624dd3 	.word	0x10624dd3
  403938:	00403025 	.word	0x00403025
  40393c:	00409b9c 	.word	0x00409b9c
  403940:	00404471 	.word	0x00404471

00403944 <configure_console>:

/**
 *  Configure UART for debug message output.
 */
static void configure_console(void)
{
  403944:	b590      	push	{r4, r7, lr}
  403946:	b085      	sub	sp, #20
  403948:	af00      	add	r7, sp, #0
	const usart_serial_options_t uart_serial_options = {
  40394a:	4b08      	ldr	r3, [pc, #32]	; (40396c <configure_console+0x28>)
  40394c:	463c      	mov	r4, r7
  40394e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  403950:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		.stopbits = CONF_UART_STOP_BITS,
#endif
	};

	/* Configure console UART. */
	sysclk_enable_peripheral_clock(CONSOLE_UART_ID);
  403954:	2007      	movs	r0, #7
  403956:	4b06      	ldr	r3, [pc, #24]	; (403970 <configure_console+0x2c>)
  403958:	4798      	blx	r3
	stdio_serial_init(CONF_UART, &uart_serial_options);
  40395a:	463b      	mov	r3, r7
  40395c:	4805      	ldr	r0, [pc, #20]	; (403974 <configure_console+0x30>)
  40395e:	4619      	mov	r1, r3
  403960:	4b05      	ldr	r3, [pc, #20]	; (403978 <configure_console+0x34>)
  403962:	4798      	blx	r3
}
  403964:	3714      	adds	r7, #20
  403966:	46bd      	mov	sp, r7
  403968:	bd90      	pop	{r4, r7, pc}
  40396a:	bf00      	nop
  40396c:	00409bc0 	.word	0x00409bc0
  403970:	0040324d 	.word	0x0040324d
  403974:	400e0800 	.word	0x400e0800
  403978:	00403735 	.word	0x00403735

0040397c <func_transmit>:
* \param *p_buff  data to be transmitted
* \param ulsize size of all data.
*
*/
uint8_t func_transmit(const uint8_t *p_buff, uint32_t ulsize)
{
  40397c:	b580      	push	{r7, lr}
  40397e:	b082      	sub	sp, #8
  403980:	af00      	add	r7, sp, #0
  403982:	6078      	str	r0, [r7, #4]
  403984:	6039      	str	r1, [r7, #0]
	Assert(p_buff);

	while(ulsize > 0) {
  403986:	e013      	b.n	4039b0 <func_transmit+0x34>
		if(0 == usart_write(BOARD_USART, *p_buff)){
  403988:	687b      	ldr	r3, [r7, #4]
  40398a:	781b      	ldrb	r3, [r3, #0]
  40398c:	4810      	ldr	r0, [pc, #64]	; (4039d0 <func_transmit+0x54>)
  40398e:	4619      	mov	r1, r3
  403990:	4b10      	ldr	r3, [pc, #64]	; (4039d4 <func_transmit+0x58>)
  403992:	4798      	blx	r3
  403994:	4603      	mov	r3, r0
  403996:	2b00      	cmp	r3, #0
  403998:	d10a      	bne.n	4039b0 <func_transmit+0x34>
			usart_enable_interrupt(BOARD_USART, US_IER_TXRDY | US_IER_TXEMPTY);
  40399a:	480d      	ldr	r0, [pc, #52]	; (4039d0 <func_transmit+0x54>)
  40399c:	f240 2102 	movw	r1, #514	; 0x202
  4039a0:	4b0d      	ldr	r3, [pc, #52]	; (4039d8 <func_transmit+0x5c>)
  4039a2:	4798      	blx	r3
			ulsize--;
  4039a4:	683b      	ldr	r3, [r7, #0]
  4039a6:	3b01      	subs	r3, #1
  4039a8:	603b      	str	r3, [r7, #0]
			p_buff++;
  4039aa:	687b      	ldr	r3, [r7, #4]
  4039ac:	3301      	adds	r3, #1
  4039ae:	607b      	str	r3, [r7, #4]
*/
uint8_t func_transmit(const uint8_t *p_buff, uint32_t ulsize)
{
	Assert(p_buff);

	while(ulsize > 0) {
  4039b0:	683b      	ldr	r3, [r7, #0]
  4039b2:	2b00      	cmp	r3, #0
  4039b4:	d1e8      	bne.n	403988 <func_transmit+0xc>
			ulsize--;
			p_buff++;
		}
	}

	while(!usart_is_tx_empty(BOARD_USART)) {
  4039b6:	bf00      	nop
  4039b8:	4805      	ldr	r0, [pc, #20]	; (4039d0 <func_transmit+0x54>)
  4039ba:	4b08      	ldr	r3, [pc, #32]	; (4039dc <func_transmit+0x60>)
  4039bc:	4798      	blx	r3
  4039be:	4603      	mov	r3, r0
  4039c0:	2b00      	cmp	r3, #0
  4039c2:	d0f9      	beq.n	4039b8 <func_transmit+0x3c>
		;  /*waiting for transmit over*/
	}

	return 0;
  4039c4:	2300      	movs	r3, #0
}
  4039c6:	4618      	mov	r0, r3
  4039c8:	3708      	adds	r7, #8
  4039ca:	46bd      	mov	sp, r7
  4039cc:	bd80      	pop	{r7, pc}
  4039ce:	bf00      	nop
  4039d0:	40024000 	.word	0x40024000
  4039d4:	0040228d 	.word	0x0040228d
  4039d8:	004021b5 	.word	0x004021b5
  4039dc:	0040223d 	.word	0x0040223d

004039e0 <twi_init>:
	}
}

static void twi_init(void);
static void twi_init(void)
{
  4039e0:	b580      	push	{r7, lr}
  4039e2:	b084      	sub	sp, #16
  4039e4:	af00      	add	r7, sp, #0
	twihs_options_t opt;

	/* Enable the peripheral clock for TWI */
	pmc_enable_periph_clk(ID_TWIHS0);
  4039e6:	2013      	movs	r0, #19
  4039e8:	4b09      	ldr	r3, [pc, #36]	; (403a10 <twi_init+0x30>)
  4039ea:	4798      	blx	r3

	/* Configure the options of TWI driver */
	opt.master_clk = sysclk_get_cpu_hz();
  4039ec:	4b09      	ldr	r3, [pc, #36]	; (403a14 <twi_init+0x34>)
  4039ee:	4798      	blx	r3
  4039f0:	4603      	mov	r3, r0
  4039f2:	607b      	str	r3, [r7, #4]
	opt.speed      = TWIHS_CLK; //400KHz
  4039f4:	4b08      	ldr	r3, [pc, #32]	; (403a18 <twi_init+0x38>)
  4039f6:	60bb      	str	r3, [r7, #8]

	if (twihs_master_init(TWIHS0, &opt) != TWIHS_SUCCESS) {
  4039f8:	1d3b      	adds	r3, r7, #4
  4039fa:	4808      	ldr	r0, [pc, #32]	; (403a1c <twi_init+0x3c>)
  4039fc:	4619      	mov	r1, r3
  4039fe:	4b08      	ldr	r3, [pc, #32]	; (403a20 <twi_init+0x40>)
  403a00:	4798      	blx	r3
  403a02:	4603      	mov	r3, r0
  403a04:	2b00      	cmp	r3, #0
  403a06:	d000      	beq.n	403a0a <twi_init+0x2a>
		while (1) {
			/* Capture error */
		}
  403a08:	e7fe      	b.n	403a08 <twi_init+0x28>
	}
}
  403a0a:	3710      	adds	r7, #16
  403a0c:	46bd      	mov	sp, r7
  403a0e:	bd80      	pop	{r7, pc}
  403a10:	00401681 	.word	0x00401681
  403a14:	00403225 	.word	0x00403225
  403a18:	00061a80 	.word	0x00061a80
  403a1c:	40018000 	.word	0x40018000
  403a20:	00401c15 	.word	0x00401c15

00403a24 <afec0_data_ready>:

uint32_t g_afec0_sample_data;
uint32_t g_afec1_sample_data;

static void afec0_data_ready(void)
{
  403a24:	b580      	push	{r7, lr}
  403a26:	af00      	add	r7, sp, #0
	g_afec0_sample_data = afec_get_latest_value(AFEC0);
  403a28:	4804      	ldr	r0, [pc, #16]	; (403a3c <afec0_data_ready+0x18>)
  403a2a:	4b05      	ldr	r3, [pc, #20]	; (403a40 <afec0_data_ready+0x1c>)
  403a2c:	4798      	blx	r3
  403a2e:	4602      	mov	r2, r0
  403a30:	4b04      	ldr	r3, [pc, #16]	; (403a44 <afec0_data_ready+0x20>)
  403a32:	601a      	str	r2, [r3, #0]
	is_conversion_done = true;
  403a34:	4b04      	ldr	r3, [pc, #16]	; (403a48 <afec0_data_ready+0x24>)
  403a36:	2201      	movs	r2, #1
  403a38:	701a      	strb	r2, [r3, #0]
}
  403a3a:	bd80      	pop	{r7, pc}
  403a3c:	4003c000 	.word	0x4003c000
  403a40:	00403171 	.word	0x00403171
  403a44:	204012d4 	.word	0x204012d4
  403a48:	2040099c 	.word	0x2040099c

00403a4c <afec1_data_ready>:

static void afec1_data_ready(void)
{
  403a4c:	b580      	push	{r7, lr}
  403a4e:	af00      	add	r7, sp, #0
	g_afec1_sample_data = afec_get_latest_value(AFEC1);
  403a50:	4804      	ldr	r0, [pc, #16]	; (403a64 <afec1_data_ready+0x18>)
  403a52:	4b05      	ldr	r3, [pc, #20]	; (403a68 <afec1_data_ready+0x1c>)
  403a54:	4798      	blx	r3
  403a56:	4602      	mov	r2, r0
  403a58:	4b04      	ldr	r3, [pc, #16]	; (403a6c <afec1_data_ready+0x20>)
  403a5a:	601a      	str	r2, [r3, #0]
	is_conversion_done = true;
  403a5c:	4b04      	ldr	r3, [pc, #16]	; (403a70 <afec1_data_ready+0x24>)
  403a5e:	2201      	movs	r2, #1
  403a60:	701a      	strb	r2, [r3, #0]
}
  403a62:	bd80      	pop	{r7, pc}
  403a64:	40064000 	.word	0x40064000
  403a68:	00403171 	.word	0x00403171
  403a6c:	20400ab8 	.word	0x20400ab8
  403a70:	2040099c 	.word	0x2040099c

00403a74 <init_adc>:



void init_adc(void)
{
  403a74:	b590      	push	{r4, r7, lr}
  403a76:	b089      	sub	sp, #36	; 0x24
  403a78:	af00      	add	r7, sp, #0
	struct afec_config afec_cfg;
	struct afec_ch_config afec_ch_cfg;

	
	afec_enable(AFEC0);
  403a7a:	4827      	ldr	r0, [pc, #156]	; (403b18 <init_adc+0xa4>)
  403a7c:	4b27      	ldr	r3, [pc, #156]	; (403b1c <init_adc+0xa8>)
  403a7e:	4798      	blx	r3
	afec_enable(AFEC1);
  403a80:	4827      	ldr	r0, [pc, #156]	; (403b20 <init_adc+0xac>)
  403a82:	4b26      	ldr	r3, [pc, #152]	; (403b1c <init_adc+0xa8>)
  403a84:	4798      	blx	r3

	afec_get_config_defaults(&afec_cfg);
  403a86:	f107 0308 	add.w	r3, r7, #8
  403a8a:	4618      	mov	r0, r3
  403a8c:	4b25      	ldr	r3, [pc, #148]	; (403b24 <init_adc+0xb0>)
  403a8e:	4798      	blx	r3
	afec_cfg.resolution = AFEC_12_BITS;
  403a90:	2300      	movs	r3, #0
  403a92:	60bb      	str	r3, [r7, #8]
	afec_init(AFEC0, &afec_cfg);
  403a94:	f107 0308 	add.w	r3, r7, #8
  403a98:	481f      	ldr	r0, [pc, #124]	; (403b18 <init_adc+0xa4>)
  403a9a:	4619      	mov	r1, r3
  403a9c:	4b22      	ldr	r3, [pc, #136]	; (403b28 <init_adc+0xb4>)
  403a9e:	4798      	blx	r3
	afec_init(AFEC1, &afec_cfg);
  403aa0:	f107 0308 	add.w	r3, r7, #8
  403aa4:	481e      	ldr	r0, [pc, #120]	; (403b20 <init_adc+0xac>)
  403aa6:	4619      	mov	r1, r3
  403aa8:	4b1f      	ldr	r3, [pc, #124]	; (403b28 <init_adc+0xb4>)
  403aaa:	4798      	blx	r3
	
	afec_ch_get_config_defaults(&afec_ch_cfg);
  403aac:	1d3b      	adds	r3, r7, #4
  403aae:	4618      	mov	r0, r3
  403ab0:	4b1e      	ldr	r3, [pc, #120]	; (403b2c <init_adc+0xb8>)
  403ab2:	4798      	blx	r3
	afec_ch_cfg.gain = AFEC_GAINVALUE_3;
  403ab4:	2303      	movs	r3, #3
  403ab6:	717b      	strb	r3, [r7, #5]
	
	afec_ch_set_config(AFEC1, AFEC_CHANNEL_9, &afec_ch_cfg);
  403ab8:	1d3b      	adds	r3, r7, #4
  403aba:	4819      	ldr	r0, [pc, #100]	; (403b20 <init_adc+0xac>)
  403abc:	2109      	movs	r1, #9
  403abe:	461a      	mov	r2, r3
  403ac0:	4b1b      	ldr	r3, [pc, #108]	; (403b30 <init_adc+0xbc>)
  403ac2:	4798      	blx	r3
	afec_ch_set_config(AFEC0, AFEC_CHANNEL_4, &afec_ch_cfg);
  403ac4:	1d3b      	adds	r3, r7, #4
  403ac6:	4814      	ldr	r0, [pc, #80]	; (403b18 <init_adc+0xa4>)
  403ac8:	2104      	movs	r1, #4
  403aca:	461a      	mov	r2, r3
  403acc:	4b18      	ldr	r3, [pc, #96]	; (403b30 <init_adc+0xbc>)
  403ace:	4798      	blx	r3
	afec_ch_set_config(AFEC1, AFEC_CHANNEL_4, &afec_ch_cfg);
  403ad0:	1d3b      	adds	r3, r7, #4
  403ad2:	4813      	ldr	r0, [pc, #76]	; (403b20 <init_adc+0xac>)
  403ad4:	2104      	movs	r1, #4
  403ad6:	461a      	mov	r2, r3
  403ad8:	4b15      	ldr	r3, [pc, #84]	; (403b30 <init_adc+0xbc>)
  403ada:	4798      	blx	r3
	afec_ch_set_config(AFEC1, AFEC_CHANNEL_5, &afec_ch_cfg);
  403adc:	1d3b      	adds	r3, r7, #4
  403ade:	4810      	ldr	r0, [pc, #64]	; (403b20 <init_adc+0xac>)
  403ae0:	2105      	movs	r1, #5
  403ae2:	461a      	mov	r2, r3
  403ae4:	4b12      	ldr	r3, [pc, #72]	; (403b30 <init_adc+0xbc>)
  403ae6:	4798      	blx	r3

	afec_set_trigger(AFEC0, AFEC_TRIG_SW);
  403ae8:	480b      	ldr	r0, [pc, #44]	; (403b18 <init_adc+0xa4>)
  403aea:	2100      	movs	r1, #0
  403aec:	4b11      	ldr	r3, [pc, #68]	; (403b34 <init_adc+0xc0>)
  403aee:	4798      	blx	r3
	afec_set_trigger(AFEC1, AFEC_TRIG_SW);
  403af0:	480b      	ldr	r0, [pc, #44]	; (403b20 <init_adc+0xac>)
  403af2:	2100      	movs	r1, #0
  403af4:	4b0f      	ldr	r3, [pc, #60]	; (403b34 <init_adc+0xc0>)
  403af6:	4798      	blx	r3

	afec_set_callback(AFEC0, AFEC_INTERRUPT_DATA_READY, afec0_data_ready, 1);
  403af8:	4807      	ldr	r0, [pc, #28]	; (403b18 <init_adc+0xa4>)
  403afa:	210c      	movs	r1, #12
  403afc:	4a0e      	ldr	r2, [pc, #56]	; (403b38 <init_adc+0xc4>)
  403afe:	2301      	movs	r3, #1
  403b00:	4c0e      	ldr	r4, [pc, #56]	; (403b3c <init_adc+0xc8>)
  403b02:	47a0      	blx	r4
	afec_set_callback(AFEC1, AFEC_INTERRUPT_DATA_READY, afec1_data_ready, 1);
  403b04:	4806      	ldr	r0, [pc, #24]	; (403b20 <init_adc+0xac>)
  403b06:	210c      	movs	r1, #12
  403b08:	4a0d      	ldr	r2, [pc, #52]	; (403b40 <init_adc+0xcc>)
  403b0a:	2301      	movs	r3, #1
  403b0c:	4c0b      	ldr	r4, [pc, #44]	; (403b3c <init_adc+0xc8>)
  403b0e:	47a0      	blx	r4
//	while((afec_get_interrupt_status(AFEC0) & AFEC_ISR_EOCAL) != AFEC_ISR_EOCAL);
	
//	afec_start_calibration(AFEC1);
//	while((afec_get_interrupt_status(AFEC1) & AFEC_ISR_EOCAL) != AFEC_ISR_EOCAL);
	
}
  403b10:	3724      	adds	r7, #36	; 0x24
  403b12:	46bd      	mov	sp, r7
  403b14:	bd90      	pop	{r4, r7, pc}
  403b16:	bf00      	nop
  403b18:	4003c000 	.word	0x4003c000
  403b1c:	00401241 	.word	0x00401241
  403b20:	40064000 	.word	0x40064000
  403b24:	00400f3d 	.word	0x00400f3d
  403b28:	00400fbd 	.word	0x00400fbd
  403b2c:	00400f9d 	.word	0x00400f9d
  403b30:	00400ead 	.word	0x00400ead
  403b34:	00403085 	.word	0x00403085
  403b38:	00403a25 	.word	0x00403a25
  403b3c:	00401035 	.word	0x00401035
  403b40:	00403a4d 	.word	0x00403a4d

00403b44 <PWM0_Handler>:

/**
 * \brief Interrupt handler for the PWM controller.
 */
void PWM0_Handler(void)
{
  403b44:	b580      	push	{r7, lr}
  403b46:	b082      	sub	sp, #8
  403b48:	af00      	add	r7, sp, #0
	static uint32_t ul_count = 0;  /* PWM counter value */
	static uint32_t ul_duty = INIT_DUTY_VALUE;  /* PWM duty cycle rate */
	static uint8_t fade_in = 1;  /* LED fade in flag */

	uint32_t events = pwm_channel_get_interrupt_status(PWM0);
  403b4a:	481f      	ldr	r0, [pc, #124]	; (403bc8 <PWM0_Handler+0x84>)
  403b4c:	4b1f      	ldr	r3, [pc, #124]	; (403bcc <PWM0_Handler+0x88>)
  403b4e:	4798      	blx	r3
  403b50:	6078      	str	r0, [r7, #4]

	/* Interrupt on PIN_PWM_LED0_CHANNEL */
	if ((events & (1 << PIN_PWM_LED0_CHANNEL)) ==
  403b52:	687b      	ldr	r3, [r7, #4]
  403b54:	f003 0301 	and.w	r3, r3, #1
  403b58:	2b00      	cmp	r3, #0
  403b5a:	d032      	beq.n	403bc2 <PWM0_Handler+0x7e>
	(1 << PIN_PWM_LED0_CHANNEL)) {
		ul_count++;
  403b5c:	4b1c      	ldr	r3, [pc, #112]	; (403bd0 <PWM0_Handler+0x8c>)
  403b5e:	681b      	ldr	r3, [r3, #0]
  403b60:	3301      	adds	r3, #1
  403b62:	4a1b      	ldr	r2, [pc, #108]	; (403bd0 <PWM0_Handler+0x8c>)
  403b64:	6013      	str	r3, [r2, #0]

		/* Fade in/out */
		if (ul_count == (PWM_FREQUENCY / (PERIOD_VALUE - INIT_DUTY_VALUE))) {
  403b66:	4b1a      	ldr	r3, [pc, #104]	; (403bd0 <PWM0_Handler+0x8c>)
  403b68:	681b      	ldr	r3, [r3, #0]
  403b6a:	2b96      	cmp	r3, #150	; 0x96
  403b6c:	d129      	bne.n	403bc2 <PWM0_Handler+0x7e>
			/* Fade in */
			if (fade_in) {
  403b6e:	4b19      	ldr	r3, [pc, #100]	; (403bd4 <PWM0_Handler+0x90>)
  403b70:	781b      	ldrb	r3, [r3, #0]
  403b72:	2b00      	cmp	r3, #0
  403b74:	d00c      	beq.n	403b90 <PWM0_Handler+0x4c>
				ul_duty++;
  403b76:	4b18      	ldr	r3, [pc, #96]	; (403bd8 <PWM0_Handler+0x94>)
  403b78:	681b      	ldr	r3, [r3, #0]
  403b7a:	3301      	adds	r3, #1
  403b7c:	4a16      	ldr	r2, [pc, #88]	; (403bd8 <PWM0_Handler+0x94>)
  403b7e:	6013      	str	r3, [r2, #0]
				if (ul_duty == PERIOD_VALUE) {
  403b80:	4b15      	ldr	r3, [pc, #84]	; (403bd8 <PWM0_Handler+0x94>)
  403b82:	681b      	ldr	r3, [r3, #0]
  403b84:	2b64      	cmp	r3, #100	; 0x64
  403b86:	d10f      	bne.n	403ba8 <PWM0_Handler+0x64>
					fade_in = 0;
  403b88:	4b12      	ldr	r3, [pc, #72]	; (403bd4 <PWM0_Handler+0x90>)
  403b8a:	2200      	movs	r2, #0
  403b8c:	701a      	strb	r2, [r3, #0]
  403b8e:	e00b      	b.n	403ba8 <PWM0_Handler+0x64>
					}
				} else {
				/* Fade out */
				ul_duty--;
  403b90:	4b11      	ldr	r3, [pc, #68]	; (403bd8 <PWM0_Handler+0x94>)
  403b92:	681b      	ldr	r3, [r3, #0]
  403b94:	3b01      	subs	r3, #1
  403b96:	4a10      	ldr	r2, [pc, #64]	; (403bd8 <PWM0_Handler+0x94>)
  403b98:	6013      	str	r3, [r2, #0]
				if (ul_duty == INIT_DUTY_VALUE) {
  403b9a:	4b0f      	ldr	r3, [pc, #60]	; (403bd8 <PWM0_Handler+0x94>)
  403b9c:	681b      	ldr	r3, [r3, #0]
  403b9e:	2b00      	cmp	r3, #0
  403ba0:	d102      	bne.n	403ba8 <PWM0_Handler+0x64>
					fade_in = 1;
  403ba2:	4b0c      	ldr	r3, [pc, #48]	; (403bd4 <PWM0_Handler+0x90>)
  403ba4:	2201      	movs	r2, #1
  403ba6:	701a      	strb	r2, [r3, #0]
				}
			}

			/* Set new duty cycle */
			ul_count = 0;
  403ba8:	4b09      	ldr	r3, [pc, #36]	; (403bd0 <PWM0_Handler+0x8c>)
  403baa:	2200      	movs	r2, #0
  403bac:	601a      	str	r2, [r3, #0]
			g_pwm_channel_led.channel = PIN_PWM_LED0_CHANNEL;
  403bae:	4b0b      	ldr	r3, [pc, #44]	; (403bdc <PWM0_Handler+0x98>)
  403bb0:	2200      	movs	r2, #0
  403bb2:	601a      	str	r2, [r3, #0]
			pwm_channel_update_duty(PWM0, &g_pwm_channel_led, ul_duty);
  403bb4:	4b08      	ldr	r3, [pc, #32]	; (403bd8 <PWM0_Handler+0x94>)
  403bb6:	681b      	ldr	r3, [r3, #0]
  403bb8:	4803      	ldr	r0, [pc, #12]	; (403bc8 <PWM0_Handler+0x84>)
  403bba:	4908      	ldr	r1, [pc, #32]	; (403bdc <PWM0_Handler+0x98>)
  403bbc:	461a      	mov	r2, r3
  403bbe:	4b08      	ldr	r3, [pc, #32]	; (403be0 <PWM0_Handler+0x9c>)
  403bc0:	4798      	blx	r3
//jsi 15feb16			g_pwm_channel_led.channel = PIN_PWM_LED1_CHANNEL;
//jsi 15feb16			pwm_channel_update_duty(PWM0, &g_pwm_channel_led, ul_duty);
		}
	}
}
  403bc2:	3708      	adds	r7, #8
  403bc4:	46bd      	mov	sp, r7
  403bc6:	bd80      	pop	{r7, pc}
  403bc8:	40020000 	.word	0x40020000
  403bcc:	00401b79 	.word	0x00401b79
  403bd0:	204009c0 	.word	0x204009c0
  403bd4:	20400084 	.word	0x20400084
  403bd8:	204009c4 	.word	0x204009c4
  403bdc:	20400abc 	.word	0x20400abc
  403be0:	00401ae9 	.word	0x00401ae9

00403be4 <init_pwm>:



void init_pwm(void)
{
  403be4:	b580      	push	{r7, lr}
  403be6:	b084      	sub	sp, #16
  403be8:	af00      	add	r7, sp, #0
	/* Enable PWM peripheral clock */
	pmc_enable_periph_clk(ID_PWM0);
  403bea:	201f      	movs	r0, #31
  403bec:	4b30      	ldr	r3, [pc, #192]	; (403cb0 <init_pwm+0xcc>)
  403bee:	4798      	blx	r3

	/* Disable PWM channels for LEDs */
	pwm_channel_disable(PWM0, PIN_PWM_LED0_CHANNEL);
  403bf0:	4830      	ldr	r0, [pc, #192]	; (403cb4 <init_pwm+0xd0>)
  403bf2:	2100      	movs	r1, #0
  403bf4:	4b30      	ldr	r3, [pc, #192]	; (403cb8 <init_pwm+0xd4>)
  403bf6:	4798      	blx	r3
	pwm_channel_disable(PWM0, PIN_PWM_LED1_CHANNEL);
  403bf8:	482e      	ldr	r0, [pc, #184]	; (403cb4 <init_pwm+0xd0>)
  403bfa:	2101      	movs	r1, #1
  403bfc:	4b2e      	ldr	r3, [pc, #184]	; (403cb8 <init_pwm+0xd4>)
  403bfe:	4798      	blx	r3

	/* Set PWM clock A as PWM_FREQUENCY*PERIOD_VALUE (clock B is not used) */
	pwm_clock_t clock_setting = {
  403c00:	4b2e      	ldr	r3, [pc, #184]	; (403cbc <init_pwm+0xd8>)
  403c02:	607b      	str	r3, [r7, #4]
  403c04:	2300      	movs	r3, #0
  403c06:	60bb      	str	r3, [r7, #8]
		.ul_clka = PWM_FREQUENCY * PERIOD_VALUE,
		.ul_clkb = 0,
		.ul_mck = sysclk_get_cpu_hz()
  403c08:	4b2d      	ldr	r3, [pc, #180]	; (403cc0 <init_pwm+0xdc>)
  403c0a:	4798      	blx	r3
  403c0c:	4603      	mov	r3, r0
	/* Disable PWM channels for LEDs */
	pwm_channel_disable(PWM0, PIN_PWM_LED0_CHANNEL);
	pwm_channel_disable(PWM0, PIN_PWM_LED1_CHANNEL);

	/* Set PWM clock A as PWM_FREQUENCY*PERIOD_VALUE (clock B is not used) */
	pwm_clock_t clock_setting = {
  403c0e:	60fb      	str	r3, [r7, #12]
		.ul_clka = PWM_FREQUENCY * PERIOD_VALUE,
		.ul_clkb = 0,
		.ul_mck = sysclk_get_cpu_hz()
	};
	pwm_init(PWM0, &clock_setting);
  403c10:	1d3b      	adds	r3, r7, #4
  403c12:	4828      	ldr	r0, [pc, #160]	; (403cb4 <init_pwm+0xd0>)
  403c14:	4619      	mov	r1, r3
  403c16:	4b2b      	ldr	r3, [pc, #172]	; (403cc4 <init_pwm+0xe0>)
  403c18:	4798      	blx	r3

	/* Initialize PWM channel for LED0 */
	/* Period is left-aligned */
	g_pwm_channel_led.alignment = PWM_ALIGN_LEFT;
  403c1a:	4b2b      	ldr	r3, [pc, #172]	; (403cc8 <init_pwm+0xe4>)
  403c1c:	2200      	movs	r2, #0
  403c1e:	811a      	strh	r2, [r3, #8]
	/* Output waveform starts at a low level */
	g_pwm_channel_led.polarity = PWM_LOW;
  403c20:	4b29      	ldr	r3, [pc, #164]	; (403cc8 <init_pwm+0xe4>)
  403c22:	2200      	movs	r2, #0
  403c24:	729a      	strb	r2, [r3, #10]
	/* Use PWM clock A as source clock */
	g_pwm_channel_led.ul_prescaler = PWM_CMR_CPRE_CLKA;
  403c26:	4b28      	ldr	r3, [pc, #160]	; (403cc8 <init_pwm+0xe4>)
  403c28:	220b      	movs	r2, #11
  403c2a:	605a      	str	r2, [r3, #4]
	/* Period value of output waveform */
	g_pwm_channel_led.ul_period = PERIOD_VALUE;
  403c2c:	4b26      	ldr	r3, [pc, #152]	; (403cc8 <init_pwm+0xe4>)
  403c2e:	2264      	movs	r2, #100	; 0x64
  403c30:	611a      	str	r2, [r3, #16]
	/* Duty cycle value of output waveform */
	g_pwm_channel_led.ul_duty = INIT_DUTY_VALUE;
  403c32:	4b25      	ldr	r3, [pc, #148]	; (403cc8 <init_pwm+0xe4>)
  403c34:	2200      	movs	r2, #0
  403c36:	60da      	str	r2, [r3, #12]
	g_pwm_channel_led.channel = PIN_PWM_LED0_CHANNEL;
  403c38:	4b23      	ldr	r3, [pc, #140]	; (403cc8 <init_pwm+0xe4>)
  403c3a:	2200      	movs	r2, #0
  403c3c:	601a      	str	r2, [r3, #0]
	pwm_channel_init(PWM0, &g_pwm_channel_led);
  403c3e:	481d      	ldr	r0, [pc, #116]	; (403cb4 <init_pwm+0xd0>)
  403c40:	4921      	ldr	r1, [pc, #132]	; (403cc8 <init_pwm+0xe4>)
  403c42:	4b22      	ldr	r3, [pc, #136]	; (403ccc <init_pwm+0xe8>)
  403c44:	4798      	blx	r3

	/* Enable channel counter event interrupt */
	pwm_channel_enable_interrupt(PWM0, PIN_PWM_LED0_CHANNEL, 0);
  403c46:	481b      	ldr	r0, [pc, #108]	; (403cb4 <init_pwm+0xd0>)
  403c48:	2100      	movs	r1, #0
  403c4a:	2200      	movs	r2, #0
  403c4c:	4b20      	ldr	r3, [pc, #128]	; (403cd0 <init_pwm+0xec>)
  403c4e:	4798      	blx	r3

	/* Initialize PWM channel for LED1 */
	/* Period is center-aligned */
	g_pwm_channel_led.alignment = PWM_ALIGN_CENTER;
  403c50:	4b1d      	ldr	r3, [pc, #116]	; (403cc8 <init_pwm+0xe4>)
  403c52:	f44f 7280 	mov.w	r2, #256	; 0x100
  403c56:	811a      	strh	r2, [r3, #8]
	/* Output waveform starts at a high level */
	g_pwm_channel_led.polarity = PWM_HIGH;
  403c58:	4b1b      	ldr	r3, [pc, #108]	; (403cc8 <init_pwm+0xe4>)
  403c5a:	2201      	movs	r2, #1
  403c5c:	729a      	strb	r2, [r3, #10]
	/* Use PWM clock A as source clock */
	g_pwm_channel_led.ul_prescaler = PWM_CMR_CPRE_CLKA;
  403c5e:	4b1a      	ldr	r3, [pc, #104]	; (403cc8 <init_pwm+0xe4>)
  403c60:	220b      	movs	r2, #11
  403c62:	605a      	str	r2, [r3, #4]
	/* Period value of output waveform */
	g_pwm_channel_led.ul_period = PERIOD_VALUE;
  403c64:	4b18      	ldr	r3, [pc, #96]	; (403cc8 <init_pwm+0xe4>)
  403c66:	2264      	movs	r2, #100	; 0x64
  403c68:	611a      	str	r2, [r3, #16]
	/* Duty cycle value of output waveform */
	g_pwm_channel_led.ul_duty = INIT_DUTY_VALUE;
  403c6a:	4b17      	ldr	r3, [pc, #92]	; (403cc8 <init_pwm+0xe4>)
  403c6c:	2200      	movs	r2, #0
  403c6e:	60da      	str	r2, [r3, #12]
	g_pwm_channel_led.channel = PIN_PWM_LED1_CHANNEL;
  403c70:	4b15      	ldr	r3, [pc, #84]	; (403cc8 <init_pwm+0xe4>)
  403c72:	2201      	movs	r2, #1
  403c74:	601a      	str	r2, [r3, #0]
	pwm_channel_init(PWM0, &g_pwm_channel_led);
  403c76:	480f      	ldr	r0, [pc, #60]	; (403cb4 <init_pwm+0xd0>)
  403c78:	4913      	ldr	r1, [pc, #76]	; (403cc8 <init_pwm+0xe4>)
  403c7a:	4b14      	ldr	r3, [pc, #80]	; (403ccc <init_pwm+0xe8>)
  403c7c:	4798      	blx	r3

	/* Disable channel counter event interrupt */
	pwm_channel_disable_interrupt(PWM0, PIN_PWM_LED1_CHANNEL, 0);
  403c7e:	480d      	ldr	r0, [pc, #52]	; (403cb4 <init_pwm+0xd0>)
  403c80:	2101      	movs	r1, #1
  403c82:	2200      	movs	r2, #0
  403c84:	4b13      	ldr	r3, [pc, #76]	; (403cd4 <init_pwm+0xf0>)
  403c86:	4798      	blx	r3

	/* Configure interrupt and enable PWM interrupt */
	NVIC_DisableIRQ(PWM0_IRQn);
  403c88:	201f      	movs	r0, #31
  403c8a:	4b13      	ldr	r3, [pc, #76]	; (403cd8 <init_pwm+0xf4>)
  403c8c:	4798      	blx	r3
	NVIC_ClearPendingIRQ(PWM0_IRQn);
  403c8e:	201f      	movs	r0, #31
  403c90:	4b12      	ldr	r3, [pc, #72]	; (403cdc <init_pwm+0xf8>)
  403c92:	4798      	blx	r3
	NVIC_SetPriority(PWM0_IRQn, 0);
  403c94:	201f      	movs	r0, #31
  403c96:	2100      	movs	r1, #0
  403c98:	4b11      	ldr	r3, [pc, #68]	; (403ce0 <init_pwm+0xfc>)
  403c9a:	4798      	blx	r3
	NVIC_EnableIRQ(PWM0_IRQn);
  403c9c:	201f      	movs	r0, #31
  403c9e:	4b11      	ldr	r3, [pc, #68]	; (403ce4 <init_pwm+0x100>)
  403ca0:	4798      	blx	r3
	
	/* Enable PWM channels for LEDs */
	pwm_channel_enable(PWM0, PIN_PWM_LED0_CHANNEL);
  403ca2:	4804      	ldr	r0, [pc, #16]	; (403cb4 <init_pwm+0xd0>)
  403ca4:	2100      	movs	r1, #0
  403ca6:	4b10      	ldr	r3, [pc, #64]	; (403ce8 <init_pwm+0x104>)
  403ca8:	4798      	blx	r3
//jsi 15feb16	pwm_channel_enable(PWM0, PIN_PWM_LED1_CHANNEL);

}
  403caa:	3710      	adds	r7, #16
  403cac:	46bd      	mov	sp, r7
  403cae:	bd80      	pop	{r7, pc}
  403cb0:	00401681 	.word	0x00401681
  403cb4:	40020000 	.word	0x40020000
  403cb8:	00401b55 	.word	0x00401b55
  403cbc:	0016e360 	.word	0x0016e360
  403cc0:	00403225 	.word	0x00403225
  403cc4:	00401781 	.word	0x00401781
  403cc8:	20400abc 	.word	0x20400abc
  403ccc:	00401801 	.word	0x00401801
  403cd0:	00401b91 	.word	0x00401b91
  403cd4:	00401bc1 	.word	0x00401bc1
  403cd8:	00402f69 	.word	0x00402f69
  403cdc:	00402f9d 	.word	0x00402f9d
  403ce0:	00402fd1 	.word	0x00402fd1
  403ce4:	00402f39 	.word	0x00402f39
  403ce8:	00401b31 	.word	0x00401b31

00403cec <main>:
 */

#  define EXAMPLE_LED_GPIO    LED0_GPIO

int main(void) //6feb16 this version of main has been hacked up for only exactly what we need
{
  403cec:	b5f0      	push	{r4, r5, r6, r7, lr}
  403cee:	b0a3      	sub	sp, #140	; 0x8c
  403cf0:	af06      	add	r7, sp, #24
	char		txBuf[11] = {0,0,0,0,0,0,0,0,0,0,0}, rxByte;
  403cf2:	2300      	movs	r3, #0
  403cf4:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  403cf8:	2300      	movs	r3, #0
  403cfa:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
  403cfe:	2300      	movs	r3, #0
  403d00:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
  403d04:	2300      	movs	r3, #0
  403d06:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  403d0a:	2300      	movs	r3, #0
  403d0c:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  403d10:	2300      	movs	r3, #0
  403d12:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
  403d16:	2300      	movs	r3, #0
  403d18:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  403d1c:	2300      	movs	r3, #0
  403d1e:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  403d22:	2300      	movs	r3, #0
  403d24:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  403d28:	2300      	movs	r3, #0
  403d2a:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
  403d2e:	2300      	movs	r3, #0
  403d30:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
	uint32_t	i;	
	uint32_t	time_elapsed = 0;
  403d34:	2300      	movs	r3, #0
  403d36:	65fb      	str	r3, [r7, #92]	; 0x5c
	uint32_t	ul_i;
	uint8_t		displayState = 0;
  403d38:	2300      	movs	r3, #0
  403d3a:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
	uint8_t		charCount = 0;
  403d3e:	2300      	movs	r3, #0
  403d40:	f887 306a 	strb.w	r3, [r7, #106]	; 0x6a
	char		printStr[64];
	
	unsigned char idFamily, acc, id[6], idcsum; //10feb16 temp serial ID code, make more formal later

	/* Initialize the SAM system. */
	sysclk_init();
  403d44:	4b9d      	ldr	r3, [pc, #628]	; (403fbc <main+0x2d0>)
  403d46:	4798      	blx	r3
	board_init();
  403d48:	4b9d      	ldr	r3, [pc, #628]	; (403fc0 <main+0x2d4>)
  403d4a:	4798      	blx	r3

	/* Configure UART for blue scrolling display */
	configure_console();
  403d4c:	4b9d      	ldr	r3, [pc, #628]	; (403fc4 <main+0x2d8>)
  403d4e:	4798      	blx	r3

	/* Configure USART. */
	configure_usart();
  403d50:	4b9d      	ldr	r3, [pc, #628]	; (403fc8 <main+0x2dc>)
  403d52:	4798      	blx	r3

	/* 1ms tick. */
	configure_systick();
  403d54:	4b9d      	ldr	r3, [pc, #628]	; (403fcc <main+0x2e0>)
  403d56:	4798      	blx	r3

	init_pwm();
  403d58:	4b9d      	ldr	r3, [pc, #628]	; (403fd0 <main+0x2e4>)
  403d5a:	4798      	blx	r3
	
	/*
	 * Put into some kind of "init_io()" function at some point
	 */
	
	ioport_set_pin_dir(ECLAVE_SERIAL_ID0, IOPORT_DIR_OUTPUT);
  403d5c:	200f      	movs	r0, #15
  403d5e:	2101      	movs	r1, #1
  403d60:	4b9c      	ldr	r3, [pc, #624]	; (403fd4 <main+0x2e8>)
  403d62:	4798      	blx	r3
	ioport_set_pin_level(ECLAVE_SERIAL_ID0, IOPORT_PIN_LEVEL_HIGH);
  403d64:	200f      	movs	r0, #15
  403d66:	2101      	movs	r1, #1
  403d68:	4b9b      	ldr	r3, [pc, #620]	; (403fd8 <main+0x2ec>)
  403d6a:	4798      	blx	r3
	ioport_set_pin_dir(ECLAVE_SERIAL_ID1, IOPORT_DIR_OUTPUT);
  403d6c:	2010      	movs	r0, #16
  403d6e:	2101      	movs	r1, #1
  403d70:	4b98      	ldr	r3, [pc, #608]	; (403fd4 <main+0x2e8>)
  403d72:	4798      	blx	r3
	ioport_set_pin_level(ECLAVE_SERIAL_ID1, IOPORT_PIN_LEVEL_HIGH);
  403d74:	2010      	movs	r0, #16
  403d76:	2101      	movs	r1, #1
  403d78:	4b97      	ldr	r3, [pc, #604]	; (403fd8 <main+0x2ec>)
  403d7a:	4798      	blx	r3
	ioport_set_pin_dir(ECLAVE_SERIAL_ID2, IOPORT_DIR_OUTPUT);
  403d7c:	2011      	movs	r0, #17
  403d7e:	2101      	movs	r1, #1
  403d80:	4b94      	ldr	r3, [pc, #592]	; (403fd4 <main+0x2e8>)
  403d82:	4798      	blx	r3
	ioport_set_pin_level(ECLAVE_SERIAL_ID2, IOPORT_PIN_LEVEL_HIGH);
  403d84:	2011      	movs	r0, #17
  403d86:	2101      	movs	r1, #1
  403d88:	4b93      	ldr	r3, [pc, #588]	; (403fd8 <main+0x2ec>)
  403d8a:	4798      	blx	r3
	ioport_set_pin_dir(ECLAVE_SERIAL_ID3, IOPORT_DIR_OUTPUT);
  403d8c:	2012      	movs	r0, #18
  403d8e:	2101      	movs	r1, #1
  403d90:	4b90      	ldr	r3, [pc, #576]	; (403fd4 <main+0x2e8>)
  403d92:	4798      	blx	r3
	ioport_set_pin_level(ECLAVE_SERIAL_ID3, IOPORT_PIN_LEVEL_HIGH);
  403d94:	2012      	movs	r0, #18
  403d96:	2101      	movs	r1, #1
  403d98:	4b8f      	ldr	r3, [pc, #572]	; (403fd8 <main+0x2ec>)
  403d9a:	4798      	blx	r3
	ioport_set_pin_dir(ECLAVE_SERIAL_ID4, IOPORT_DIR_OUTPUT);
  403d9c:	2013      	movs	r0, #19
  403d9e:	2101      	movs	r1, #1
  403da0:	4b8c      	ldr	r3, [pc, #560]	; (403fd4 <main+0x2e8>)
  403da2:	4798      	blx	r3
	ioport_set_pin_level(ECLAVE_SERIAL_ID4, IOPORT_PIN_LEVEL_HIGH);
  403da4:	2013      	movs	r0, #19
  403da6:	2101      	movs	r1, #1
  403da8:	4b8b      	ldr	r3, [pc, #556]	; (403fd8 <main+0x2ec>)
  403daa:	4798      	blx	r3

	SetSpeed(1); //1==standard speed, not overdrive 
  403dac:	2001      	movs	r0, #1
  403dae:	4b8b      	ldr	r3, [pc, #556]	; (403fdc <main+0x2f0>)
  403db0:	4798      	blx	r3
	
	for (int i=0; i<5; i++)
  403db2:	2300      	movs	r3, #0
  403db4:	667b      	str	r3, [r7, #100]	; 0x64
  403db6:	e080      	b.n	403eba <main+0x1ce>
	{
		if(!OWTouchReset(i)) //we think a board is present, try to read the serial ID
  403db8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
  403dba:	b2db      	uxtb	r3, r3
  403dbc:	4618      	mov	r0, r3
  403dbe:	4b88      	ldr	r3, [pc, #544]	; (403fe0 <main+0x2f4>)
  403dc0:	4798      	blx	r3
  403dc2:	4603      	mov	r3, r0
  403dc4:	2b00      	cmp	r3, #0
  403dc6:	d171      	bne.n	403eac <main+0x1c0>
		{
			OWWriteByte(i, 0x33); //Read ID command
  403dc8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
  403dca:	b2db      	uxtb	r3, r3
  403dcc:	4618      	mov	r0, r3
  403dce:	2133      	movs	r1, #51	; 0x33
  403dd0:	4b84      	ldr	r3, [pc, #528]	; (403fe4 <main+0x2f8>)
  403dd2:	4798      	blx	r3
			
			idFamily = OWReadByte(i);
  403dd4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
  403dd6:	b2db      	uxtb	r3, r3
  403dd8:	4618      	mov	r0, r3
  403dda:	4b83      	ldr	r3, [pc, #524]	; (403fe8 <main+0x2fc>)
  403ddc:	4798      	blx	r3
  403dde:	4603      	mov	r3, r0
  403de0:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
			
			acc = crc8_add(0x00, idFamily);
  403de4:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
  403de8:	2000      	movs	r0, #0
  403dea:	4619      	mov	r1, r3
  403dec:	4b7f      	ldr	r3, [pc, #508]	; (403fec <main+0x300>)
  403dee:	4798      	blx	r3
  403df0:	4603      	mov	r3, r0
  403df2:	f887 3069 	strb.w	r3, [r7, #105]	; 0x69
			
			for (int j=0; j<6; j++)
  403df6:	2300      	movs	r3, #0
  403df8:	663b      	str	r3, [r7, #96]	; 0x60
  403dfa:	e01b      	b.n	403e34 <main+0x148>
			{
				id[j] = OWReadByte(i);
  403dfc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
  403dfe:	b2db      	uxtb	r3, r3
  403e00:	4618      	mov	r0, r3
  403e02:	4b79      	ldr	r3, [pc, #484]	; (403fe8 <main+0x2fc>)
  403e04:	4798      	blx	r3
  403e06:	4603      	mov	r3, r0
  403e08:	b2d9      	uxtb	r1, r3
  403e0a:	463a      	mov	r2, r7
  403e0c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
  403e0e:	4413      	add	r3, r2
  403e10:	460a      	mov	r2, r1
  403e12:	701a      	strb	r2, [r3, #0]
				acc = crc8_add(acc, id[j]);
  403e14:	463a      	mov	r2, r7
  403e16:	6e3b      	ldr	r3, [r7, #96]	; 0x60
  403e18:	4413      	add	r3, r2
  403e1a:	781b      	ldrb	r3, [r3, #0]
  403e1c:	f897 2069 	ldrb.w	r2, [r7, #105]	; 0x69
  403e20:	4610      	mov	r0, r2
  403e22:	4619      	mov	r1, r3
  403e24:	4b71      	ldr	r3, [pc, #452]	; (403fec <main+0x300>)
  403e26:	4798      	blx	r3
  403e28:	4603      	mov	r3, r0
  403e2a:	f887 3069 	strb.w	r3, [r7, #105]	; 0x69
			
			idFamily = OWReadByte(i);
			
			acc = crc8_add(0x00, idFamily);
			
			for (int j=0; j<6; j++)
  403e2e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
  403e30:	3301      	adds	r3, #1
  403e32:	663b      	str	r3, [r7, #96]	; 0x60
  403e34:	6e3b      	ldr	r3, [r7, #96]	; 0x60
  403e36:	2b05      	cmp	r3, #5
  403e38:	dde0      	ble.n	403dfc <main+0x110>
			{
				id[j] = OWReadByte(i);
				acc = crc8_add(acc, id[j]);
			}
			
			idcsum = OWReadByte(i);
  403e3a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
  403e3c:	b2db      	uxtb	r3, r3
  403e3e:	4618      	mov	r0, r3
  403e40:	4b69      	ldr	r3, [pc, #420]	; (403fe8 <main+0x2fc>)
  403e42:	4798      	blx	r3
  403e44:	4603      	mov	r3, r0
  403e46:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a
			
			if (acc != idcsum)
  403e4a:	f897 2069 	ldrb.w	r2, [r7, #105]	; 0x69
  403e4e:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
  403e52:	429a      	cmp	r2, r3
  403e54:	d004      	beq.n	403e60 <main+0x174>
			{
				func_transmit("Invalid serial ID checksum.\r\n", strlen("Invalid serial ID checksum.\r\n"));
  403e56:	4866      	ldr	r0, [pc, #408]	; (403ff0 <main+0x304>)
  403e58:	211d      	movs	r1, #29
  403e5a:	4b66      	ldr	r3, [pc, #408]	; (403ff4 <main+0x308>)
  403e5c:	4798      	blx	r3
  403e5e:	e029      	b.n	403eb4 <main+0x1c8>
			}
			else
			{
				sprintf(printStr,"LED board %d serial ID: %x%x%x%x%x%x\r\n", i, id[0], id[1], id[2], id[3], id[4], id[5]);
  403e60:	783b      	ldrb	r3, [r7, #0]
  403e62:	461e      	mov	r6, r3
  403e64:	787b      	ldrb	r3, [r7, #1]
  403e66:	461d      	mov	r5, r3
  403e68:	78bb      	ldrb	r3, [r7, #2]
  403e6a:	461c      	mov	r4, r3
  403e6c:	78fb      	ldrb	r3, [r7, #3]
  403e6e:	4618      	mov	r0, r3
  403e70:	793b      	ldrb	r3, [r7, #4]
  403e72:	4619      	mov	r1, r3
  403e74:	797b      	ldrb	r3, [r7, #5]
  403e76:	461a      	mov	r2, r3
  403e78:	f107 0308 	add.w	r3, r7, #8
  403e7c:	9500      	str	r5, [sp, #0]
  403e7e:	9401      	str	r4, [sp, #4]
  403e80:	9002      	str	r0, [sp, #8]
  403e82:	9103      	str	r1, [sp, #12]
  403e84:	9204      	str	r2, [sp, #16]
  403e86:	4618      	mov	r0, r3
  403e88:	495b      	ldr	r1, [pc, #364]	; (403ff8 <main+0x30c>)
  403e8a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
  403e8c:	4633      	mov	r3, r6
  403e8e:	4c5b      	ldr	r4, [pc, #364]	; (403ffc <main+0x310>)
  403e90:	47a0      	blx	r4
				func_transmit(printStr,strlen(printStr));
  403e92:	f107 0308 	add.w	r3, r7, #8
  403e96:	4618      	mov	r0, r3
  403e98:	4b59      	ldr	r3, [pc, #356]	; (404000 <main+0x314>)
  403e9a:	4798      	blx	r3
  403e9c:	4602      	mov	r2, r0
  403e9e:	f107 0308 	add.w	r3, r7, #8
  403ea2:	4618      	mov	r0, r3
  403ea4:	4611      	mov	r1, r2
  403ea6:	4b53      	ldr	r3, [pc, #332]	; (403ff4 <main+0x308>)
  403ea8:	4798      	blx	r3
  403eaa:	e003      	b.n	403eb4 <main+0x1c8>
			}
		}
		else
		{
			func_transmit("no board this slot\r\n", strlen("no board this slot\r\n"));
  403eac:	4855      	ldr	r0, [pc, #340]	; (404004 <main+0x318>)
  403eae:	2114      	movs	r1, #20
  403eb0:	4b50      	ldr	r3, [pc, #320]	; (403ff4 <main+0x308>)
  403eb2:	4798      	blx	r3
	ioport_set_pin_dir(ECLAVE_SERIAL_ID4, IOPORT_DIR_OUTPUT);
	ioport_set_pin_level(ECLAVE_SERIAL_ID4, IOPORT_PIN_LEVEL_HIGH);

	SetSpeed(1); //1==standard speed, not overdrive 
	
	for (int i=0; i<5; i++)
  403eb4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
  403eb6:	3301      	adds	r3, #1
  403eb8:	667b      	str	r3, [r7, #100]	; 0x64
  403eba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
  403ebc:	2b04      	cmp	r3, #4
  403ebe:	f77f af7b 	ble.w	403db8 <main+0xcc>

	/*
	 * End of minimalist serial ID chip stuff
	 */

	twi_init();
  403ec2:	4b51      	ldr	r3, [pc, #324]	; (404008 <main+0x31c>)
  403ec4:	4798      	blx	r3

//make this ecII jsi 7feb16	gpio_set_pin_high(ECLAVE_LED_OEn); //make sure outputs are disabled at the chip level

	PCA9952_init();
  403ec6:	4b51      	ldr	r3, [pc, #324]	; (40400c <main+0x320>)
  403ec8:	4798      	blx	r3

	init_adc();
  403eca:	4b51      	ldr	r3, [pc, #324]	; (404010 <main+0x324>)
  403ecc:	4798      	blx	r3
	
	/*
	 * Enable transmitter here, and disable receiver first, to avoid receiving
	 * characters sent by itself. It's necessary for half duplex RS485.
	 */
	usart_enable_tx(BOARD_USART);
  403ece:	4851      	ldr	r0, [pc, #324]	; (404014 <main+0x328>)
  403ed0:	4b51      	ldr	r3, [pc, #324]	; (404018 <main+0x32c>)
  403ed2:	4798      	blx	r3
	usart_enable_rx(BOARD_USART);
  403ed4:	484f      	ldr	r0, [pc, #316]	; (404014 <main+0x328>)
  403ed6:	4b51      	ldr	r3, [pc, #324]	; (40401c <main+0x330>)
  403ed8:	4798      	blx	r3

	while (1) {

		/* Test the debug LED */
		ioport_toggle_pin_level(EXAMPLE_LED_GPIO);
  403eda:	2050      	movs	r0, #80	; 0x50
  403edc:	4b50      	ldr	r3, [pc, #320]	; (404020 <main+0x334>)
  403ede:	4798      	blx	r3


		/* Test the debug usart rx and tx */
		for (i=0; i<70; i++) //7 seconds
  403ee0:	2300      	movs	r3, #0
  403ee2:	66fb      	str	r3, [r7, #108]	; 0x6c
  403ee4:	e017      	b.n	403f16 <main+0x22a>
		{
			mdelay(100);
  403ee6:	2064      	movs	r0, #100	; 0x64
  403ee8:	4b4e      	ldr	r3, [pc, #312]	; (404024 <main+0x338>)
  403eea:	4798      	blx	r3
		
			if (usart_is_rx_ready(BOARD_USART)) {
  403eec:	4849      	ldr	r0, [pc, #292]	; (404014 <main+0x328>)
  403eee:	4b4e      	ldr	r3, [pc, #312]	; (404028 <main+0x33c>)
  403ef0:	4798      	blx	r3
  403ef2:	4603      	mov	r3, r0
  403ef4:	2b00      	cmp	r3, #0
  403ef6:	d00b      	beq.n	403f10 <main+0x224>
				usart_read(BOARD_USART, (uint32_t *)&rxByte);
  403ef8:	f107 034b 	add.w	r3, r7, #75	; 0x4b
  403efc:	4845      	ldr	r0, [pc, #276]	; (404014 <main+0x328>)
  403efe:	4619      	mov	r1, r3
  403f00:	4b4a      	ldr	r3, [pc, #296]	; (40402c <main+0x340>)
  403f02:	4798      	blx	r3
				func_transmit(&rxByte, 1);
  403f04:	f107 034b 	add.w	r3, r7, #75	; 0x4b
  403f08:	4618      	mov	r0, r3
  403f0a:	2101      	movs	r1, #1
  403f0c:	4b39      	ldr	r3, [pc, #228]	; (403ff4 <main+0x308>)
  403f0e:	4798      	blx	r3
		/* Test the debug LED */
		ioport_toggle_pin_level(EXAMPLE_LED_GPIO);


		/* Test the debug usart rx and tx */
		for (i=0; i<70; i++) //7 seconds
  403f10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
  403f12:	3301      	adds	r3, #1
  403f14:	66fb      	str	r3, [r7, #108]	; 0x6c
  403f16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
  403f18:	2b45      	cmp	r3, #69	; 0x45
  403f1a:	d9e4      	bls.n	403ee6 <main+0x1fa>
				func_transmit(&rxByte, 1);
			}
		}

		/* Test the scrolling blue LED display */
		for (charCount = 0; charCount < 7; charCount++)
  403f1c:	2300      	movs	r3, #0
  403f1e:	f887 306a 	strb.w	r3, [r7, #106]	; 0x6a
  403f22:	e09d      	b.n	404060 <main+0x374>
		{
			unsigned char temp;
			temp = (*(cmdPtrArray[displayState]+charCount));
  403f24:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
  403f28:	4a41      	ldr	r2, [pc, #260]	; (404030 <main+0x344>)
  403f2a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
  403f2e:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
  403f32:	4413      	add	r3, r2
  403f34:	781b      	ldrb	r3, [r3, #0]
  403f36:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
			putchar(temp);
  403f3a:	4b3e      	ldr	r3, [pc, #248]	; (404034 <main+0x348>)
  403f3c:	681b      	ldr	r3, [r3, #0]
  403f3e:	689b      	ldr	r3, [r3, #8]
  403f40:	689a      	ldr	r2, [r3, #8]
  403f42:	3a01      	subs	r2, #1
  403f44:	609a      	str	r2, [r3, #8]
  403f46:	689b      	ldr	r3, [r3, #8]
  403f48:	2b00      	cmp	r3, #0
  403f4a:	da77      	bge.n	40403c <main+0x350>
  403f4c:	4b39      	ldr	r3, [pc, #228]	; (404034 <main+0x348>)
  403f4e:	681b      	ldr	r3, [r3, #0]
  403f50:	689b      	ldr	r3, [r3, #8]
  403f52:	689a      	ldr	r2, [r3, #8]
  403f54:	4b37      	ldr	r3, [pc, #220]	; (404034 <main+0x348>)
  403f56:	681b      	ldr	r3, [r3, #0]
  403f58:	689b      	ldr	r3, [r3, #8]
  403f5a:	699b      	ldr	r3, [r3, #24]
  403f5c:	429a      	cmp	r2, r3
  403f5e:	db1f      	blt.n	403fa0 <main+0x2b4>
  403f60:	4b34      	ldr	r3, [pc, #208]	; (404034 <main+0x348>)
  403f62:	681b      	ldr	r3, [r3, #0]
  403f64:	689b      	ldr	r3, [r3, #8]
  403f66:	681b      	ldr	r3, [r3, #0]
  403f68:	f897 2059 	ldrb.w	r2, [r7, #89]	; 0x59
  403f6c:	701a      	strb	r2, [r3, #0]
  403f6e:	4b31      	ldr	r3, [pc, #196]	; (404034 <main+0x348>)
  403f70:	681b      	ldr	r3, [r3, #0]
  403f72:	689b      	ldr	r3, [r3, #8]
  403f74:	681b      	ldr	r3, [r3, #0]
  403f76:	781b      	ldrb	r3, [r3, #0]
  403f78:	2b0a      	cmp	r3, #10
  403f7a:	d006      	beq.n	403f8a <main+0x29e>
  403f7c:	4b2d      	ldr	r3, [pc, #180]	; (404034 <main+0x348>)
  403f7e:	681b      	ldr	r3, [r3, #0]
  403f80:	689b      	ldr	r3, [r3, #8]
  403f82:	681a      	ldr	r2, [r3, #0]
  403f84:	3201      	adds	r2, #1
  403f86:	601a      	str	r2, [r3, #0]
  403f88:	e065      	b.n	404056 <main+0x36a>
  403f8a:	4b2a      	ldr	r3, [pc, #168]	; (404034 <main+0x348>)
  403f8c:	681a      	ldr	r2, [r3, #0]
  403f8e:	4b29      	ldr	r3, [pc, #164]	; (404034 <main+0x348>)
  403f90:	681b      	ldr	r3, [r3, #0]
  403f92:	689b      	ldr	r3, [r3, #8]
  403f94:	4610      	mov	r0, r2
  403f96:	210a      	movs	r1, #10
  403f98:	461a      	mov	r2, r3
  403f9a:	4b27      	ldr	r3, [pc, #156]	; (404038 <main+0x34c>)
  403f9c:	4798      	blx	r3
  403f9e:	e05a      	b.n	404056 <main+0x36a>
  403fa0:	4b24      	ldr	r3, [pc, #144]	; (404034 <main+0x348>)
  403fa2:	6819      	ldr	r1, [r3, #0]
  403fa4:	f897 2059 	ldrb.w	r2, [r7, #89]	; 0x59
  403fa8:	4b22      	ldr	r3, [pc, #136]	; (404034 <main+0x348>)
  403faa:	681b      	ldr	r3, [r3, #0]
  403fac:	689b      	ldr	r3, [r3, #8]
  403fae:	4608      	mov	r0, r1
  403fb0:	4611      	mov	r1, r2
  403fb2:	461a      	mov	r2, r3
  403fb4:	4b20      	ldr	r3, [pc, #128]	; (404038 <main+0x34c>)
  403fb6:	4798      	blx	r3
  403fb8:	e04d      	b.n	404056 <main+0x36a>
  403fba:	bf00      	nop
  403fbc:	00400491 	.word	0x00400491
  403fc0:	00400a6d 	.word	0x00400a6d
  403fc4:	00403945 	.word	0x00403945
  403fc8:	00403881 	.word	0x00403881
  403fcc:	00403901 	.word	0x00403901
  403fd0:	00403be5 	.word	0x00403be5
  403fd4:	00403265 	.word	0x00403265
  403fd8:	004032ed 	.word	0x004032ed
  403fdc:	00402bf9 	.word	0x00402bf9
  403fe0:	00402cb5 	.word	0x00402cb5
  403fe4:	00402e55 	.word	0x00402e55
  403fe8:	00402e95 	.word	0x00402e95
  403fec:	00402ee1 	.word	0x00402ee1
  403ff0:	00409bd4 	.word	0x00409bd4
  403ff4:	0040397d 	.word	0x0040397d
  403ff8:	00409bf4 	.word	0x00409bf4
  403ffc:	0040458d 	.word	0x0040458d
  404000:	004045d9 	.word	0x004045d9
  404004:	00409c1c 	.word	0x00409c1c
  404008:	004039e1 	.word	0x004039e1
  40400c:	00402765 	.word	0x00402765
  404010:	00403a75 	.word	0x00403a75
  404014:	40024000 	.word	0x40024000
  404018:	00402139 	.word	0x00402139
  40401c:	00402185 	.word	0x00402185
  404020:	00403359 	.word	0x00403359
  404024:	0040379d 	.word	0x0040379d
  404028:	00402265 	.word	0x00402265
  40402c:	004022c1 	.word	0x004022c1
  404030:	2040005c 	.word	0x2040005c
  404034:	204004b0 	.word	0x204004b0
  404038:	00405b45 	.word	0x00405b45
  40403c:	4ba0      	ldr	r3, [pc, #640]	; (4042c0 <main+0x5d4>)
  40403e:	681b      	ldr	r3, [r3, #0]
  404040:	689b      	ldr	r3, [r3, #8]
  404042:	681b      	ldr	r3, [r3, #0]
  404044:	f897 2059 	ldrb.w	r2, [r7, #89]	; 0x59
  404048:	701a      	strb	r2, [r3, #0]
  40404a:	4b9d      	ldr	r3, [pc, #628]	; (4042c0 <main+0x5d4>)
  40404c:	681b      	ldr	r3, [r3, #0]
  40404e:	689b      	ldr	r3, [r3, #8]
  404050:	681a      	ldr	r2, [r3, #0]
  404052:	3201      	adds	r2, #1
  404054:	601a      	str	r2, [r3, #0]
				func_transmit(&rxByte, 1);
			}
		}

		/* Test the scrolling blue LED display */
		for (charCount = 0; charCount < 7; charCount++)
  404056:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
  40405a:	3301      	adds	r3, #1
  40405c:	f887 306a 	strb.w	r3, [r7, #106]	; 0x6a
  404060:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
  404064:	2b06      	cmp	r3, #6
  404066:	f67f af5d 	bls.w	403f24 <main+0x238>
			putchar(temp);
		}
		
		/* Test the debug port */

		switch (displayState)
  40406a:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
  40406e:	2b08      	cmp	r3, #8
  404070:	d85a      	bhi.n	404128 <main+0x43c>
  404072:	a201      	add	r2, pc, #4	; (adr r2, 404078 <main+0x38c>)
  404074:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  404078:	0040409d 	.word	0x0040409d
  40407c:	004040ad 	.word	0x004040ad
  404080:	004040bd 	.word	0x004040bd
  404084:	004040d1 	.word	0x004040d1
  404088:	004040e1 	.word	0x004040e1
  40408c:	004040f1 	.word	0x004040f1
  404090:	004040ff 	.word	0x004040ff
  404094:	0040410d 	.word	0x0040410d
  404098:	0040411b 	.word	0x0040411b
		{
			case IDX_READY:
				sprintf(txBuf, "Ready\r\n");
  40409c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
  4040a0:	4a88      	ldr	r2, [pc, #544]	; (4042c4 <main+0x5d8>)
  4040a2:	e892 0003 	ldmia.w	r2, {r0, r1}
  4040a6:	e883 0003 	stmia.w	r3, {r0, r1}
				break;
  4040aa:	e03d      	b.n	404128 <main+0x43c>
			case IDX_CLEAN:
				sprintf(txBuf, "Clean\r\n");
  4040ac:	f107 034c 	add.w	r3, r7, #76	; 0x4c
  4040b0:	4a85      	ldr	r2, [pc, #532]	; (4042c8 <main+0x5dc>)
  4040b2:	e892 0003 	ldmia.w	r2, {r0, r1}
  4040b6:	e883 0003 	stmia.w	r3, {r0, r1}
				break;
  4040ba:	e035      	b.n	404128 <main+0x43c>
			case IDX_CLEANING:
				sprintf(txBuf, "Cleaning\r\n");
  4040bc:	4a83      	ldr	r2, [pc, #524]	; (4042cc <main+0x5e0>)
  4040be:	f107 034c 	add.w	r3, r7, #76	; 0x4c
  4040c2:	ca07      	ldmia	r2, {r0, r1, r2}
  4040c4:	c303      	stmia	r3!, {r0, r1}
  4040c6:	801a      	strh	r2, [r3, #0]
  4040c8:	3302      	adds	r3, #2
  4040ca:	0c12      	lsrs	r2, r2, #16
  4040cc:	701a      	strb	r2, [r3, #0]
				break;
  4040ce:	e02b      	b.n	404128 <main+0x43c>
			case IDX_DIRTY:
				sprintf(txBuf, "Dirty\r\n");
  4040d0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
  4040d4:	4a7e      	ldr	r2, [pc, #504]	; (4042d0 <main+0x5e4>)
  4040d6:	e892 0003 	ldmia.w	r2, {r0, r1}
  4040da:	e883 0003 	stmia.w	r3, {r0, r1}
				break;
  4040de:	e023      	b.n	404128 <main+0x43c>
			case IDX_ERROR:
				sprintf(txBuf, "Error\r\n");
  4040e0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
  4040e4:	4a7b      	ldr	r2, [pc, #492]	; (4042d4 <main+0x5e8>)
  4040e6:	e892 0003 	ldmia.w	r2, {r0, r1}
  4040ea:	e883 0003 	stmia.w	r3, {r0, r1}
				break;
  4040ee:	e01b      	b.n	404128 <main+0x43c>
			case IDX_SHELF1:
				sprintf(txBuf, "Shelf1\r\n");
  4040f0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
  4040f4:	4a78      	ldr	r2, [pc, #480]	; (4042d8 <main+0x5ec>)
  4040f6:	ca07      	ldmia	r2, {r0, r1, r2}
  4040f8:	c303      	stmia	r3!, {r0, r1}
  4040fa:	701a      	strb	r2, [r3, #0]
				break;
  4040fc:	e014      	b.n	404128 <main+0x43c>
			case IDX_SHELF2:
				sprintf(txBuf, "Shelf2\r\n");
  4040fe:	f107 034c 	add.w	r3, r7, #76	; 0x4c
  404102:	4a76      	ldr	r2, [pc, #472]	; (4042dc <main+0x5f0>)
  404104:	ca07      	ldmia	r2, {r0, r1, r2}
  404106:	c303      	stmia	r3!, {r0, r1}
  404108:	701a      	strb	r2, [r3, #0]
				break;
  40410a:	e00d      	b.n	404128 <main+0x43c>
			case IDX_SHELF3:
				sprintf(txBuf, "Shelf3\r\n");
  40410c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
  404110:	4a73      	ldr	r2, [pc, #460]	; (4042e0 <main+0x5f4>)
  404112:	ca07      	ldmia	r2, {r0, r1, r2}
  404114:	c303      	stmia	r3!, {r0, r1}
  404116:	701a      	strb	r2, [r3, #0]
				break;
  404118:	e006      	b.n	404128 <main+0x43c>
			case IDX_SHELF4:
				sprintf(txBuf, "Shelf4\r\n");
  40411a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
  40411e:	4a71      	ldr	r2, [pc, #452]	; (4042e4 <main+0x5f8>)
  404120:	ca07      	ldmia	r2, {r0, r1, r2}
  404122:	c303      	stmia	r3!, {r0, r1}
  404124:	701a      	strb	r2, [r3, #0]
				break;
  404126:	bf00      	nop
		}
		
		func_transmit(txBuf, strlen(txBuf));
  404128:	f107 034c 	add.w	r3, r7, #76	; 0x4c
  40412c:	4618      	mov	r0, r3
  40412e:	4b6e      	ldr	r3, [pc, #440]	; (4042e8 <main+0x5fc>)
  404130:	4798      	blx	r3
  404132:	4602      	mov	r2, r0
  404134:	f107 034c 	add.w	r3, r7, #76	; 0x4c
  404138:	4618      	mov	r0, r3
  40413a:	4611      	mov	r1, r2
  40413c:	4b6b      	ldr	r3, [pc, #428]	; (4042ec <main+0x600>)
  40413e:	4798      	blx	r3


		if ((++displayState) > 8)
  404140:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
  404144:	3301      	adds	r3, #1
  404146:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
  40414a:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
  40414e:	2b08      	cmp	r3, #8
  404150:	d902      	bls.n	404158 <main+0x46c>
		{
			displayState = 0;
  404152:	2300      	movs	r3, #0
  404154:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
		
		/*
		 * Read Bluesense lines
		 */
		
		afec_channel_enable(AFEC1, AFEC_CHANNEL_9);
  404158:	4865      	ldr	r0, [pc, #404]	; (4042f0 <main+0x604>)
  40415a:	2109      	movs	r1, #9
  40415c:	4b65      	ldr	r3, [pc, #404]	; (4042f4 <main+0x608>)
  40415e:	4798      	blx	r3
		afec_start_software_conversion(AFEC1);
  404160:	4863      	ldr	r0, [pc, #396]	; (4042f0 <main+0x604>)
  404162:	4b65      	ldr	r3, [pc, #404]	; (4042f8 <main+0x60c>)
  404164:	4798      	blx	r3
		is_conversion_done = false;
  404166:	4b65      	ldr	r3, [pc, #404]	; (4042fc <main+0x610>)
  404168:	2200      	movs	r2, #0
  40416a:	701a      	strb	r2, [r3, #0]
		while (is_conversion_done == false);
  40416c:	bf00      	nop
  40416e:	4b63      	ldr	r3, [pc, #396]	; (4042fc <main+0x610>)
  404170:	781b      	ldrb	r3, [r3, #0]
  404172:	b2db      	uxtb	r3, r3
  404174:	f083 0301 	eor.w	r3, r3, #1
  404178:	b2db      	uxtb	r3, r3
  40417a:	2b00      	cmp	r3, #0
  40417c:	d1f7      	bne.n	40416e <main+0x482>
		g_ul_value[0] = g_afec1_sample_data;
  40417e:	4b60      	ldr	r3, [pc, #384]	; (404300 <main+0x614>)
  404180:	681b      	ldr	r3, [r3, #0]
  404182:	4a60      	ldr	r2, [pc, #384]	; (404304 <main+0x618>)
  404184:	6013      	str	r3, [r2, #0]
		afec_channel_disable(AFEC1, AFEC_CHANNEL_9);
  404186:	485a      	ldr	r0, [pc, #360]	; (4042f0 <main+0x604>)
  404188:	2109      	movs	r1, #9
  40418a:	4b5f      	ldr	r3, [pc, #380]	; (404308 <main+0x61c>)
  40418c:	4798      	blx	r3

		afec_channel_enable(AFEC0, AFEC_CHANNEL_4);
  40418e:	485f      	ldr	r0, [pc, #380]	; (40430c <main+0x620>)
  404190:	2104      	movs	r1, #4
  404192:	4b58      	ldr	r3, [pc, #352]	; (4042f4 <main+0x608>)
  404194:	4798      	blx	r3
		afec_start_software_conversion(AFEC0);
  404196:	485d      	ldr	r0, [pc, #372]	; (40430c <main+0x620>)
  404198:	4b57      	ldr	r3, [pc, #348]	; (4042f8 <main+0x60c>)
  40419a:	4798      	blx	r3
		is_conversion_done = false;
  40419c:	4b57      	ldr	r3, [pc, #348]	; (4042fc <main+0x610>)
  40419e:	2200      	movs	r2, #0
  4041a0:	701a      	strb	r2, [r3, #0]
		while (is_conversion_done == false);
  4041a2:	bf00      	nop
  4041a4:	4b55      	ldr	r3, [pc, #340]	; (4042fc <main+0x610>)
  4041a6:	781b      	ldrb	r3, [r3, #0]
  4041a8:	b2db      	uxtb	r3, r3
  4041aa:	f083 0301 	eor.w	r3, r3, #1
  4041ae:	b2db      	uxtb	r3, r3
  4041b0:	2b00      	cmp	r3, #0
  4041b2:	d1f7      	bne.n	4041a4 <main+0x4b8>
		g_ul_value[1] = g_afec0_sample_data;
  4041b4:	4b56      	ldr	r3, [pc, #344]	; (404310 <main+0x624>)
  4041b6:	681b      	ldr	r3, [r3, #0]
  4041b8:	4a52      	ldr	r2, [pc, #328]	; (404304 <main+0x618>)
  4041ba:	6053      	str	r3, [r2, #4]
		afec_channel_disable(AFEC0, AFEC_CHANNEL_4);
  4041bc:	4853      	ldr	r0, [pc, #332]	; (40430c <main+0x620>)
  4041be:	2104      	movs	r1, #4
  4041c0:	4b51      	ldr	r3, [pc, #324]	; (404308 <main+0x61c>)
  4041c2:	4798      	blx	r3

		afec_channel_enable(AFEC1, AFEC_CHANNEL_4);
  4041c4:	484a      	ldr	r0, [pc, #296]	; (4042f0 <main+0x604>)
  4041c6:	2104      	movs	r1, #4
  4041c8:	4b4a      	ldr	r3, [pc, #296]	; (4042f4 <main+0x608>)
  4041ca:	4798      	blx	r3
		afec_start_software_conversion(AFEC1);
  4041cc:	4848      	ldr	r0, [pc, #288]	; (4042f0 <main+0x604>)
  4041ce:	4b4a      	ldr	r3, [pc, #296]	; (4042f8 <main+0x60c>)
  4041d0:	4798      	blx	r3
		is_conversion_done = false;
  4041d2:	4b4a      	ldr	r3, [pc, #296]	; (4042fc <main+0x610>)
  4041d4:	2200      	movs	r2, #0
  4041d6:	701a      	strb	r2, [r3, #0]
		while (is_conversion_done == false);
  4041d8:	bf00      	nop
  4041da:	4b48      	ldr	r3, [pc, #288]	; (4042fc <main+0x610>)
  4041dc:	781b      	ldrb	r3, [r3, #0]
  4041de:	b2db      	uxtb	r3, r3
  4041e0:	f083 0301 	eor.w	r3, r3, #1
  4041e4:	b2db      	uxtb	r3, r3
  4041e6:	2b00      	cmp	r3, #0
  4041e8:	d1f7      	bne.n	4041da <main+0x4ee>
		g_ul_value[2] = g_afec1_sample_data;
  4041ea:	4b45      	ldr	r3, [pc, #276]	; (404300 <main+0x614>)
  4041ec:	681b      	ldr	r3, [r3, #0]
  4041ee:	4a45      	ldr	r2, [pc, #276]	; (404304 <main+0x618>)
  4041f0:	6093      	str	r3, [r2, #8]
		afec_channel_disable(AFEC1, AFEC_CHANNEL_4);
  4041f2:	483f      	ldr	r0, [pc, #252]	; (4042f0 <main+0x604>)
  4041f4:	2104      	movs	r1, #4
  4041f6:	4b44      	ldr	r3, [pc, #272]	; (404308 <main+0x61c>)
  4041f8:	4798      	blx	r3

		afec_channel_enable(AFEC1, AFEC_CHANNEL_5);
  4041fa:	483d      	ldr	r0, [pc, #244]	; (4042f0 <main+0x604>)
  4041fc:	2105      	movs	r1, #5
  4041fe:	4b3d      	ldr	r3, [pc, #244]	; (4042f4 <main+0x608>)
  404200:	4798      	blx	r3
		afec_start_software_conversion(AFEC1);
  404202:	483b      	ldr	r0, [pc, #236]	; (4042f0 <main+0x604>)
  404204:	4b3c      	ldr	r3, [pc, #240]	; (4042f8 <main+0x60c>)
  404206:	4798      	blx	r3
		is_conversion_done = false;
  404208:	4b3c      	ldr	r3, [pc, #240]	; (4042fc <main+0x610>)
  40420a:	2200      	movs	r2, #0
  40420c:	701a      	strb	r2, [r3, #0]
		while (is_conversion_done == false);
  40420e:	bf00      	nop
  404210:	4b3a      	ldr	r3, [pc, #232]	; (4042fc <main+0x610>)
  404212:	781b      	ldrb	r3, [r3, #0]
  404214:	b2db      	uxtb	r3, r3
  404216:	f083 0301 	eor.w	r3, r3, #1
  40421a:	b2db      	uxtb	r3, r3
  40421c:	2b00      	cmp	r3, #0
  40421e:	d1f7      	bne.n	404210 <main+0x524>
		g_ul_value[3] = g_afec1_sample_data;
  404220:	4b37      	ldr	r3, [pc, #220]	; (404300 <main+0x614>)
  404222:	681b      	ldr	r3, [r3, #0]
  404224:	4a37      	ldr	r2, [pc, #220]	; (404304 <main+0x618>)
  404226:	60d3      	str	r3, [r2, #12]
		afec_channel_disable(AFEC1, AFEC_CHANNEL_5);
  404228:	4831      	ldr	r0, [pc, #196]	; (4042f0 <main+0x604>)
  40422a:	2105      	movs	r1, #5
  40422c:	4b36      	ldr	r3, [pc, #216]	; (404308 <main+0x61c>)
  40422e:	4798      	blx	r3

		if ((g_ul_value[0] != g_ul_last_value[0]) ||
  404230:	4b34      	ldr	r3, [pc, #208]	; (404304 <main+0x618>)
  404232:	681a      	ldr	r2, [r3, #0]
  404234:	4b37      	ldr	r3, [pc, #220]	; (404314 <main+0x628>)
  404236:	681b      	ldr	r3, [r3, #0]
  404238:	429a      	cmp	r2, r3
  40423a:	d111      	bne.n	404260 <main+0x574>
			(g_ul_value[1] != g_ul_last_value[1]) ||
  40423c:	4b31      	ldr	r3, [pc, #196]	; (404304 <main+0x618>)
  40423e:	685a      	ldr	r2, [r3, #4]
  404240:	4b34      	ldr	r3, [pc, #208]	; (404314 <main+0x628>)
  404242:	685b      	ldr	r3, [r3, #4]
		is_conversion_done = false;
		while (is_conversion_done == false);
		g_ul_value[3] = g_afec1_sample_data;
		afec_channel_disable(AFEC1, AFEC_CHANNEL_5);

		if ((g_ul_value[0] != g_ul_last_value[0]) ||
  404244:	429a      	cmp	r2, r3
  404246:	d10b      	bne.n	404260 <main+0x574>
			(g_ul_value[1] != g_ul_last_value[1]) ||
			(g_ul_value[2] != g_ul_last_value[2]) ||
  404248:	4b2e      	ldr	r3, [pc, #184]	; (404304 <main+0x618>)
  40424a:	689a      	ldr	r2, [r3, #8]
  40424c:	4b31      	ldr	r3, [pc, #196]	; (404314 <main+0x628>)
  40424e:	689b      	ldr	r3, [r3, #8]
		while (is_conversion_done == false);
		g_ul_value[3] = g_afec1_sample_data;
		afec_channel_disable(AFEC1, AFEC_CHANNEL_5);

		if ((g_ul_value[0] != g_ul_last_value[0]) ||
			(g_ul_value[1] != g_ul_last_value[1]) ||
  404250:	429a      	cmp	r2, r3
  404252:	d105      	bne.n	404260 <main+0x574>
			(g_ul_value[2] != g_ul_last_value[2]) ||
			(g_ul_value[3] != g_ul_last_value[3]))
  404254:	4b2b      	ldr	r3, [pc, #172]	; (404304 <main+0x618>)
  404256:	68da      	ldr	r2, [r3, #12]
  404258:	4b2e      	ldr	r3, [pc, #184]	; (404314 <main+0x628>)
  40425a:	68db      	ldr	r3, [r3, #12]
		g_ul_value[3] = g_afec1_sample_data;
		afec_channel_disable(AFEC1, AFEC_CHANNEL_5);

		if ((g_ul_value[0] != g_ul_last_value[0]) ||
			(g_ul_value[1] != g_ul_last_value[1]) ||
			(g_ul_value[2] != g_ul_last_value[2]) ||
  40425c:	429a      	cmp	r2, r3
  40425e:	d02d      	beq.n	4042bc <main+0x5d0>
			(g_ul_value[3] != g_ul_last_value[3]))
		{
			sprintf(printStr,"ch0: %x ch1: %x ch2: %x ch3: %x\r\n", g_ul_value[0], g_ul_value[1], g_ul_value[2], g_ul_value[3]);
  404260:	4b28      	ldr	r3, [pc, #160]	; (404304 <main+0x618>)
  404262:	681d      	ldr	r5, [r3, #0]
  404264:	4b27      	ldr	r3, [pc, #156]	; (404304 <main+0x618>)
  404266:	685c      	ldr	r4, [r3, #4]
  404268:	4b26      	ldr	r3, [pc, #152]	; (404304 <main+0x618>)
  40426a:	689a      	ldr	r2, [r3, #8]
  40426c:	4b25      	ldr	r3, [pc, #148]	; (404304 <main+0x618>)
  40426e:	68db      	ldr	r3, [r3, #12]
  404270:	f107 0108 	add.w	r1, r7, #8
  404274:	9200      	str	r2, [sp, #0]
  404276:	9301      	str	r3, [sp, #4]
  404278:	4608      	mov	r0, r1
  40427a:	4927      	ldr	r1, [pc, #156]	; (404318 <main+0x62c>)
  40427c:	462a      	mov	r2, r5
  40427e:	4623      	mov	r3, r4
  404280:	4c26      	ldr	r4, [pc, #152]	; (40431c <main+0x630>)
  404282:	47a0      	blx	r4
			func_transmit(printStr, strlen(printStr));
  404284:	f107 0308 	add.w	r3, r7, #8
  404288:	4618      	mov	r0, r3
  40428a:	4b17      	ldr	r3, [pc, #92]	; (4042e8 <main+0x5fc>)
  40428c:	4798      	blx	r3
  40428e:	4602      	mov	r2, r0
  404290:	f107 0308 	add.w	r3, r7, #8
  404294:	4618      	mov	r0, r3
  404296:	4611      	mov	r1, r2
  404298:	4b14      	ldr	r3, [pc, #80]	; (4042ec <main+0x600>)
  40429a:	4798      	blx	r3
			g_ul_last_value[0] = g_ul_value[0];
  40429c:	4b19      	ldr	r3, [pc, #100]	; (404304 <main+0x618>)
  40429e:	681b      	ldr	r3, [r3, #0]
  4042a0:	4a1c      	ldr	r2, [pc, #112]	; (404314 <main+0x628>)
  4042a2:	6013      	str	r3, [r2, #0]
			g_ul_last_value[1] = g_ul_value[1];
  4042a4:	4b17      	ldr	r3, [pc, #92]	; (404304 <main+0x618>)
  4042a6:	685b      	ldr	r3, [r3, #4]
  4042a8:	4a1a      	ldr	r2, [pc, #104]	; (404314 <main+0x628>)
  4042aa:	6053      	str	r3, [r2, #4]
			g_ul_last_value[2] = g_ul_value[2];
  4042ac:	4b15      	ldr	r3, [pc, #84]	; (404304 <main+0x618>)
  4042ae:	689b      	ldr	r3, [r3, #8]
  4042b0:	4a18      	ldr	r2, [pc, #96]	; (404314 <main+0x628>)
  4042b2:	6093      	str	r3, [r2, #8]
			g_ul_last_value[3] = g_ul_value[3];
  4042b4:	4b13      	ldr	r3, [pc, #76]	; (404304 <main+0x618>)
  4042b6:	68db      	ldr	r3, [r3, #12]
  4042b8:	4a16      	ldr	r2, [pc, #88]	; (404314 <main+0x628>)
  4042ba:	60d3      	str	r3, [r2, #12]
		}
		
		
	}//while
  4042bc:	e60d      	b.n	403eda <main+0x1ee>
  4042be:	bf00      	nop
  4042c0:	204004b0 	.word	0x204004b0
  4042c4:	00409c34 	.word	0x00409c34
  4042c8:	00409c3c 	.word	0x00409c3c
  4042cc:	00409ca8 	.word	0x00409ca8
  4042d0:	00409c44 	.word	0x00409c44
  4042d4:	00409c4c 	.word	0x00409c4c
  4042d8:	00409c54 	.word	0x00409c54
  4042dc:	00409c60 	.word	0x00409c60
  4042e0:	00409c6c 	.word	0x00409c6c
  4042e4:	00409c78 	.word	0x00409c78
  4042e8:	004045d9 	.word	0x004045d9
  4042ec:	0040397d 	.word	0x0040397d
  4042f0:	40064000 	.word	0x40064000
  4042f4:	004030e1 	.word	0x004030e1
  4042f8:	004030c9 	.word	0x004030c9
  4042fc:	2040099c 	.word	0x2040099c
  404300:	20400ab8 	.word	0x20400ab8
  404304:	204009a0 	.word	0x204009a0
  404308:	00403129 	.word	0x00403129
  40430c:	4003c000 	.word	0x4003c000
  404310:	204012d4 	.word	0x204012d4
  404314:	204009b0 	.word	0x204009b0
  404318:	00409c84 	.word	0x00409c84
  40431c:	0040458d 	.word	0x0040458d

00404320 <__libc_init_array>:
  404320:	b570      	push	{r4, r5, r6, lr}
  404322:	4e0f      	ldr	r6, [pc, #60]	; (404360 <__libc_init_array+0x40>)
  404324:	4d0f      	ldr	r5, [pc, #60]	; (404364 <__libc_init_array+0x44>)
  404326:	1b76      	subs	r6, r6, r5
  404328:	10b6      	asrs	r6, r6, #2
  40432a:	bf18      	it	ne
  40432c:	2400      	movne	r4, #0
  40432e:	d005      	beq.n	40433c <__libc_init_array+0x1c>
  404330:	3401      	adds	r4, #1
  404332:	f855 3b04 	ldr.w	r3, [r5], #4
  404336:	4798      	blx	r3
  404338:	42a6      	cmp	r6, r4
  40433a:	d1f9      	bne.n	404330 <__libc_init_array+0x10>
  40433c:	4e0a      	ldr	r6, [pc, #40]	; (404368 <__libc_init_array+0x48>)
  40433e:	f005 fd7f 	bl	409e40 <_init>
  404342:	4d0a      	ldr	r5, [pc, #40]	; (40436c <__libc_init_array+0x4c>)
  404344:	1b76      	subs	r6, r6, r5
  404346:	10b6      	asrs	r6, r6, #2
  404348:	bf18      	it	ne
  40434a:	2400      	movne	r4, #0
  40434c:	d006      	beq.n	40435c <__libc_init_array+0x3c>
  40434e:	3401      	adds	r4, #1
  404350:	f855 3b04 	ldr.w	r3, [r5], #4
  404354:	4798      	blx	r3
  404356:	42a6      	cmp	r6, r4
  404358:	d1f9      	bne.n	40434e <__libc_init_array+0x2e>
  40435a:	bd70      	pop	{r4, r5, r6, pc}
  40435c:	bd70      	pop	{r4, r5, r6, pc}
  40435e:	bf00      	nop
  404360:	00409e4c 	.word	0x00409e4c
  404364:	00409e4c 	.word	0x00409e4c
  404368:	00409e54 	.word	0x00409e54
  40436c:	00409e4c 	.word	0x00409e4c

00404370 <memset>:
  404370:	0783      	lsls	r3, r0, #30
  404372:	b470      	push	{r4, r5, r6}
  404374:	d049      	beq.n	40440a <memset+0x9a>
  404376:	1e54      	subs	r4, r2, #1
  404378:	2a00      	cmp	r2, #0
  40437a:	d044      	beq.n	404406 <memset+0x96>
  40437c:	b2cd      	uxtb	r5, r1
  40437e:	4603      	mov	r3, r0
  404380:	e002      	b.n	404388 <memset+0x18>
  404382:	2c00      	cmp	r4, #0
  404384:	d03f      	beq.n	404406 <memset+0x96>
  404386:	4614      	mov	r4, r2
  404388:	f803 5b01 	strb.w	r5, [r3], #1
  40438c:	f013 0f03 	tst.w	r3, #3
  404390:	f104 32ff 	add.w	r2, r4, #4294967295
  404394:	d1f5      	bne.n	404382 <memset+0x12>
  404396:	2c03      	cmp	r4, #3
  404398:	d92e      	bls.n	4043f8 <memset+0x88>
  40439a:	b2cd      	uxtb	r5, r1
  40439c:	2c0f      	cmp	r4, #15
  40439e:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  4043a2:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  4043a6:	d919      	bls.n	4043dc <memset+0x6c>
  4043a8:	f103 0210 	add.w	r2, r3, #16
  4043ac:	4626      	mov	r6, r4
  4043ae:	3e10      	subs	r6, #16
  4043b0:	f842 5c10 	str.w	r5, [r2, #-16]
  4043b4:	f842 5c0c 	str.w	r5, [r2, #-12]
  4043b8:	3210      	adds	r2, #16
  4043ba:	2e0f      	cmp	r6, #15
  4043bc:	f842 5c18 	str.w	r5, [r2, #-24]
  4043c0:	f842 5c14 	str.w	r5, [r2, #-20]
  4043c4:	d8f3      	bhi.n	4043ae <memset+0x3e>
  4043c6:	f1a4 0210 	sub.w	r2, r4, #16
  4043ca:	f004 040f 	and.w	r4, r4, #15
  4043ce:	f022 020f 	bic.w	r2, r2, #15
  4043d2:	2c03      	cmp	r4, #3
  4043d4:	f102 0210 	add.w	r2, r2, #16
  4043d8:	4413      	add	r3, r2
  4043da:	d90d      	bls.n	4043f8 <memset+0x88>
  4043dc:	461e      	mov	r6, r3
  4043de:	4622      	mov	r2, r4
  4043e0:	3a04      	subs	r2, #4
  4043e2:	f846 5b04 	str.w	r5, [r6], #4
  4043e6:	2a03      	cmp	r2, #3
  4043e8:	d8fa      	bhi.n	4043e0 <memset+0x70>
  4043ea:	1f22      	subs	r2, r4, #4
  4043ec:	f004 0403 	and.w	r4, r4, #3
  4043f0:	f022 0203 	bic.w	r2, r2, #3
  4043f4:	3204      	adds	r2, #4
  4043f6:	4413      	add	r3, r2
  4043f8:	b12c      	cbz	r4, 404406 <memset+0x96>
  4043fa:	b2c9      	uxtb	r1, r1
  4043fc:	441c      	add	r4, r3
  4043fe:	f803 1b01 	strb.w	r1, [r3], #1
  404402:	42a3      	cmp	r3, r4
  404404:	d1fb      	bne.n	4043fe <memset+0x8e>
  404406:	bc70      	pop	{r4, r5, r6}
  404408:	4770      	bx	lr
  40440a:	4614      	mov	r4, r2
  40440c:	4603      	mov	r3, r0
  40440e:	e7c2      	b.n	404396 <memset+0x26>

00404410 <_puts_r>:
  404410:	b5f0      	push	{r4, r5, r6, r7, lr}
  404412:	4604      	mov	r4, r0
  404414:	b089      	sub	sp, #36	; 0x24
  404416:	4608      	mov	r0, r1
  404418:	460d      	mov	r5, r1
  40441a:	f000 f8dd 	bl	4045d8 <strlen>
  40441e:	68a3      	ldr	r3, [r4, #8]
  404420:	2701      	movs	r7, #1
  404422:	2102      	movs	r1, #2
  404424:	899a      	ldrh	r2, [r3, #12]
  404426:	ae04      	add	r6, sp, #16
  404428:	eb00 0c07 	add.w	ip, r0, r7
  40442c:	f8df e03c 	ldr.w	lr, [pc, #60]	; 40446c <_puts_r+0x5c>
  404430:	9102      	str	r1, [sp, #8]
  404432:	0491      	lsls	r1, r2, #18
  404434:	9504      	str	r5, [sp, #16]
  404436:	9005      	str	r0, [sp, #20]
  404438:	f8cd c00c 	str.w	ip, [sp, #12]
  40443c:	f8cd e018 	str.w	lr, [sp, #24]
  404440:	9707      	str	r7, [sp, #28]
  404442:	9601      	str	r6, [sp, #4]
  404444:	d406      	bmi.n	404454 <_puts_r+0x44>
  404446:	6e59      	ldr	r1, [r3, #100]	; 0x64
  404448:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  40444c:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  404450:	819a      	strh	r2, [r3, #12]
  404452:	6659      	str	r1, [r3, #100]	; 0x64
  404454:	4620      	mov	r0, r4
  404456:	4619      	mov	r1, r3
  404458:	aa01      	add	r2, sp, #4
  40445a:	f002 fed1 	bl	407200 <__sfvwrite_r>
  40445e:	2800      	cmp	r0, #0
  404460:	bf14      	ite	ne
  404462:	f04f 30ff 	movne.w	r0, #4294967295
  404466:	200a      	moveq	r0, #10
  404468:	b009      	add	sp, #36	; 0x24
  40446a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40446c:	00409cbc 	.word	0x00409cbc

00404470 <puts>:
  404470:	4b02      	ldr	r3, [pc, #8]	; (40447c <puts+0xc>)
  404472:	4601      	mov	r1, r0
  404474:	6818      	ldr	r0, [r3, #0]
  404476:	f7ff bfcb 	b.w	404410 <_puts_r>
  40447a:	bf00      	nop
  40447c:	204004b0 	.word	0x204004b0

00404480 <setbuf>:
  404480:	2900      	cmp	r1, #0
  404482:	f44f 6380 	mov.w	r3, #1024	; 0x400
  404486:	bf0c      	ite	eq
  404488:	2202      	moveq	r2, #2
  40448a:	2200      	movne	r2, #0
  40448c:	f000 b800 	b.w	404490 <setvbuf>

00404490 <setvbuf>:
  404490:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  404494:	4e3b      	ldr	r6, [pc, #236]	; (404584 <setvbuf+0xf4>)
  404496:	4604      	mov	r4, r0
  404498:	460d      	mov	r5, r1
  40449a:	4690      	mov	r8, r2
  40449c:	6837      	ldr	r7, [r6, #0]
  40449e:	461e      	mov	r6, r3
  4044a0:	b117      	cbz	r7, 4044a8 <setvbuf+0x18>
  4044a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
  4044a4:	2b00      	cmp	r3, #0
  4044a6:	d03f      	beq.n	404528 <setvbuf+0x98>
  4044a8:	f1b8 0f02 	cmp.w	r8, #2
  4044ac:	d832      	bhi.n	404514 <setvbuf+0x84>
  4044ae:	ea5f 79d6 	movs.w	r9, r6, lsr #31
  4044b2:	d12f      	bne.n	404514 <setvbuf+0x84>
  4044b4:	4621      	mov	r1, r4
  4044b6:	4638      	mov	r0, r7
  4044b8:	f002 fcc2 	bl	406e40 <_fflush_r>
  4044bc:	89a1      	ldrh	r1, [r4, #12]
  4044be:	f8c4 9004 	str.w	r9, [r4, #4]
  4044c2:	060b      	lsls	r3, r1, #24
  4044c4:	f8c4 9018 	str.w	r9, [r4, #24]
  4044c8:	d428      	bmi.n	40451c <setvbuf+0x8c>
  4044ca:	f021 0183 	bic.w	r1, r1, #131	; 0x83
  4044ce:	f1b8 0f02 	cmp.w	r8, #2
  4044d2:	b289      	uxth	r1, r1
  4044d4:	81a1      	strh	r1, [r4, #12]
  4044d6:	d02b      	beq.n	404530 <setvbuf+0xa0>
  4044d8:	2d00      	cmp	r5, #0
  4044da:	d037      	beq.n	40454c <setvbuf+0xbc>
  4044dc:	f1b8 0f01 	cmp.w	r8, #1
  4044e0:	d012      	beq.n	404508 <setvbuf+0x78>
  4044e2:	b289      	uxth	r1, r1
  4044e4:	4b28      	ldr	r3, [pc, #160]	; (404588 <setvbuf+0xf8>)
  4044e6:	f001 0008 	and.w	r0, r1, #8
  4044ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  4044ec:	6025      	str	r5, [r4, #0]
  4044ee:	b280      	uxth	r0, r0
  4044f0:	6125      	str	r5, [r4, #16]
  4044f2:	6166      	str	r6, [r4, #20]
  4044f4:	b180      	cbz	r0, 404518 <setvbuf+0x88>
  4044f6:	f011 0f03 	tst.w	r1, #3
  4044fa:	f04f 0000 	mov.w	r0, #0
  4044fe:	bf18      	it	ne
  404500:	4606      	movne	r6, r0
  404502:	60a6      	str	r6, [r4, #8]
  404504:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  404508:	f041 0101 	orr.w	r1, r1, #1
  40450c:	4273      	negs	r3, r6
  40450e:	81a1      	strh	r1, [r4, #12]
  404510:	61a3      	str	r3, [r4, #24]
  404512:	e7e6      	b.n	4044e2 <setvbuf+0x52>
  404514:	f04f 30ff 	mov.w	r0, #4294967295
  404518:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40451c:	6921      	ldr	r1, [r4, #16]
  40451e:	4638      	mov	r0, r7
  404520:	f002 fd96 	bl	407050 <_free_r>
  404524:	89a1      	ldrh	r1, [r4, #12]
  404526:	e7d0      	b.n	4044ca <setvbuf+0x3a>
  404528:	4638      	mov	r0, r7
  40452a:	f002 fd23 	bl	406f74 <__sinit>
  40452e:	e7bb      	b.n	4044a8 <setvbuf+0x18>
  404530:	2000      	movs	r0, #0
  404532:	f104 0343 	add.w	r3, r4, #67	; 0x43
  404536:	f041 0102 	orr.w	r1, r1, #2
  40453a:	2500      	movs	r5, #0
  40453c:	2201      	movs	r2, #1
  40453e:	81a1      	strh	r1, [r4, #12]
  404540:	60a5      	str	r5, [r4, #8]
  404542:	6023      	str	r3, [r4, #0]
  404544:	6123      	str	r3, [r4, #16]
  404546:	6162      	str	r2, [r4, #20]
  404548:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40454c:	2e00      	cmp	r6, #0
  40454e:	bf08      	it	eq
  404550:	f44f 6680 	moveq.w	r6, #1024	; 0x400
  404554:	4630      	mov	r0, r6
  404556:	f003 f883 	bl	407660 <malloc>
  40455a:	4605      	mov	r5, r0
  40455c:	b128      	cbz	r0, 40456a <setvbuf+0xda>
  40455e:	89a1      	ldrh	r1, [r4, #12]
  404560:	f041 0180 	orr.w	r1, r1, #128	; 0x80
  404564:	b289      	uxth	r1, r1
  404566:	81a1      	strh	r1, [r4, #12]
  404568:	e7b8      	b.n	4044dc <setvbuf+0x4c>
  40456a:	f44f 6080 	mov.w	r0, #1024	; 0x400
  40456e:	f003 f877 	bl	407660 <malloc>
  404572:	4605      	mov	r5, r0
  404574:	b918      	cbnz	r0, 40457e <setvbuf+0xee>
  404576:	89a1      	ldrh	r1, [r4, #12]
  404578:	f04f 30ff 	mov.w	r0, #4294967295
  40457c:	e7d9      	b.n	404532 <setvbuf+0xa2>
  40457e:	f44f 6680 	mov.w	r6, #1024	; 0x400
  404582:	e7ec      	b.n	40455e <setvbuf+0xce>
  404584:	204004b0 	.word	0x204004b0
  404588:	00406e6d 	.word	0x00406e6d

0040458c <sprintf>:
  40458c:	b40e      	push	{r1, r2, r3}
  40458e:	b5f0      	push	{r4, r5, r6, r7, lr}
  404590:	b09c      	sub	sp, #112	; 0x70
  404592:	4b10      	ldr	r3, [pc, #64]	; (4045d4 <sprintf+0x48>)
  404594:	4606      	mov	r6, r0
  404596:	f44f 7e02 	mov.w	lr, #520	; 0x208
  40459a:	ac21      	add	r4, sp, #132	; 0x84
  40459c:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
  4045a0:	f64f 77ff 	movw	r7, #65535	; 0xffff
  4045a4:	6818      	ldr	r0, [r3, #0]
  4045a6:	f854 2b04 	ldr.w	r2, [r4], #4
  4045aa:	a902      	add	r1, sp, #8
  4045ac:	9602      	str	r6, [sp, #8]
  4045ae:	4623      	mov	r3, r4
  4045b0:	9606      	str	r6, [sp, #24]
  4045b2:	9401      	str	r4, [sp, #4]
  4045b4:	f8ad e014 	strh.w	lr, [sp, #20]
  4045b8:	9504      	str	r5, [sp, #16]
  4045ba:	9507      	str	r5, [sp, #28]
  4045bc:	f8ad 7016 	strh.w	r7, [sp, #22]
  4045c0:	f000 f838 	bl	404634 <_svfprintf_r>
  4045c4:	9b02      	ldr	r3, [sp, #8]
  4045c6:	2200      	movs	r2, #0
  4045c8:	701a      	strb	r2, [r3, #0]
  4045ca:	b01c      	add	sp, #112	; 0x70
  4045cc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  4045d0:	b003      	add	sp, #12
  4045d2:	4770      	bx	lr
  4045d4:	204004b0 	.word	0x204004b0

004045d8 <strlen>:
  4045d8:	f020 0103 	bic.w	r1, r0, #3
  4045dc:	f010 0003 	ands.w	r0, r0, #3
  4045e0:	f1c0 0000 	rsb	r0, r0, #0
  4045e4:	f851 3b04 	ldr.w	r3, [r1], #4
  4045e8:	f100 0c04 	add.w	ip, r0, #4
  4045ec:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
  4045f0:	f06f 0200 	mvn.w	r2, #0
  4045f4:	bf1c      	itt	ne
  4045f6:	fa22 f20c 	lsrne.w	r2, r2, ip
  4045fa:	4313      	orrne	r3, r2
  4045fc:	f04f 0c01 	mov.w	ip, #1
  404600:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
  404604:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
  404608:	eba3 020c 	sub.w	r2, r3, ip
  40460c:	ea22 0203 	bic.w	r2, r2, r3
  404610:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
  404614:	bf04      	itt	eq
  404616:	f851 3b04 	ldreq.w	r3, [r1], #4
  40461a:	3004      	addeq	r0, #4
  40461c:	d0f4      	beq.n	404608 <strlen+0x30>
  40461e:	f1c2 0100 	rsb	r1, r2, #0
  404622:	ea02 0201 	and.w	r2, r2, r1
  404626:	fab2 f282 	clz	r2, r2
  40462a:	f1c2 021f 	rsb	r2, r2, #31
  40462e:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  404632:	4770      	bx	lr

00404634 <_svfprintf_r>:
  404634:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404638:	b0c1      	sub	sp, #260	; 0x104
  40463a:	4689      	mov	r9, r1
  40463c:	9208      	str	r2, [sp, #32]
  40463e:	930c      	str	r3, [sp, #48]	; 0x30
  404640:	9009      	str	r0, [sp, #36]	; 0x24
  404642:	f002 ff97 	bl	407574 <_localeconv_r>
  404646:	6803      	ldr	r3, [r0, #0]
  404648:	4618      	mov	r0, r3
  40464a:	9316      	str	r3, [sp, #88]	; 0x58
  40464c:	f7ff ffc4 	bl	4045d8 <strlen>
  404650:	f8b9 300c 	ldrh.w	r3, [r9, #12]
  404654:	9017      	str	r0, [sp, #92]	; 0x5c
  404656:	061d      	lsls	r5, r3, #24
  404658:	d504      	bpl.n	404664 <_svfprintf_r+0x30>
  40465a:	f8d9 3010 	ldr.w	r3, [r9, #16]
  40465e:	2b00      	cmp	r3, #0
  404660:	f001 8080 	beq.w	405764 <_svfprintf_r+0x1130>
  404664:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  404668:	2300      	movs	r3, #0
  40466a:	46c3      	mov	fp, r8
  40466c:	9313      	str	r3, [sp, #76]	; 0x4c
  40466e:	9314      	str	r3, [sp, #80]	; 0x50
  404670:	9312      	str	r3, [sp, #72]	; 0x48
  404672:	9315      	str	r3, [sp, #84]	; 0x54
  404674:	9319      	str	r3, [sp, #100]	; 0x64
  404676:	930a      	str	r3, [sp, #40]	; 0x28
  404678:	9325      	str	r3, [sp, #148]	; 0x94
  40467a:	9324      	str	r3, [sp, #144]	; 0x90
  40467c:	f8cd 808c 	str.w	r8, [sp, #140]	; 0x8c
  404680:	9a08      	ldr	r2, [sp, #32]
  404682:	7813      	ldrb	r3, [r2, #0]
  404684:	2b25      	cmp	r3, #37	; 0x25
  404686:	f000 80a6 	beq.w	4047d6 <_svfprintf_r+0x1a2>
  40468a:	b90b      	cbnz	r3, 404690 <_svfprintf_r+0x5c>
  40468c:	e0a3      	b.n	4047d6 <_svfprintf_r+0x1a2>
  40468e:	b11b      	cbz	r3, 404698 <_svfprintf_r+0x64>
  404690:	f812 3f01 	ldrb.w	r3, [r2, #1]!
  404694:	2b25      	cmp	r3, #37	; 0x25
  404696:	d1fa      	bne.n	40468e <_svfprintf_r+0x5a>
  404698:	9908      	ldr	r1, [sp, #32]
  40469a:	4614      	mov	r4, r2
  40469c:	1a55      	subs	r5, r2, r1
  40469e:	d010      	beq.n	4046c2 <_svfprintf_r+0x8e>
  4046a0:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4046a2:	9a25      	ldr	r2, [sp, #148]	; 0x94
  4046a4:	3301      	adds	r3, #1
  4046a6:	f8cb 1000 	str.w	r1, [fp]
  4046aa:	442a      	add	r2, r5
  4046ac:	f8cb 5004 	str.w	r5, [fp, #4]
  4046b0:	2b07      	cmp	r3, #7
  4046b2:	9324      	str	r3, [sp, #144]	; 0x90
  4046b4:	9225      	str	r2, [sp, #148]	; 0x94
  4046b6:	dc73      	bgt.n	4047a0 <_svfprintf_r+0x16c>
  4046b8:	f10b 0b08 	add.w	fp, fp, #8
  4046bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4046be:	442b      	add	r3, r5
  4046c0:	930a      	str	r3, [sp, #40]	; 0x28
  4046c2:	7823      	ldrb	r3, [r4, #0]
  4046c4:	2b00      	cmp	r3, #0
  4046c6:	d073      	beq.n	4047b0 <_svfprintf_r+0x17c>
  4046c8:	2300      	movs	r3, #0
  4046ca:	f04f 3cff 	mov.w	ip, #4294967295
  4046ce:	1c61      	adds	r1, r4, #1
  4046d0:	7866      	ldrb	r6, [r4, #1]
  4046d2:	461a      	mov	r2, r3
  4046d4:	4664      	mov	r4, ip
  4046d6:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  4046da:	930b      	str	r3, [sp, #44]	; 0x2c
  4046dc:	9306      	str	r3, [sp, #24]
  4046de:	1c4b      	adds	r3, r1, #1
  4046e0:	f1a6 0120 	sub.w	r1, r6, #32
  4046e4:	2958      	cmp	r1, #88	; 0x58
  4046e6:	f200 83b2 	bhi.w	404e4e <_svfprintf_r+0x81a>
  4046ea:	e8df f011 	tbh	[pc, r1, lsl #1]
  4046ee:	0319      	.short	0x0319
  4046f0:	03b003b0 	.word	0x03b003b0
  4046f4:	03b00320 	.word	0x03b00320
  4046f8:	03b003b0 	.word	0x03b003b0
  4046fc:	03b003b0 	.word	0x03b003b0
  404700:	024003b0 	.word	0x024003b0
  404704:	03b001fb 	.word	0x03b001fb
  404708:	01ff01e2 	.word	0x01ff01e2
  40470c:	032703b0 	.word	0x032703b0
  404710:	032e032e 	.word	0x032e032e
  404714:	032e032e 	.word	0x032e032e
  404718:	032e032e 	.word	0x032e032e
  40471c:	032e032e 	.word	0x032e032e
  404720:	03b0032e 	.word	0x03b0032e
  404724:	03b003b0 	.word	0x03b003b0
  404728:	03b003b0 	.word	0x03b003b0
  40472c:	03b003b0 	.word	0x03b003b0
  404730:	03b003b0 	.word	0x03b003b0
  404734:	033d03b0 	.word	0x033d03b0
  404738:	03b00365 	.word	0x03b00365
  40473c:	03b00365 	.word	0x03b00365
  404740:	03b003b0 	.word	0x03b003b0
  404744:	02fe03b0 	.word	0x02fe03b0
  404748:	03b003b0 	.word	0x03b003b0
  40474c:	03b00293 	.word	0x03b00293
  404750:	03b003b0 	.word	0x03b003b0
  404754:	03b003b0 	.word	0x03b003b0
  404758:	03b002b0 	.word	0x03b002b0
  40475c:	02c603b0 	.word	0x02c603b0
  404760:	03b003b0 	.word	0x03b003b0
  404764:	03b003b0 	.word	0x03b003b0
  404768:	03b003b0 	.word	0x03b003b0
  40476c:	03b003b0 	.word	0x03b003b0
  404770:	03b003b0 	.word	0x03b003b0
  404774:	021802eb 	.word	0x021802eb
  404778:	03650365 	.word	0x03650365
  40477c:	024e0365 	.word	0x024e0365
  404780:	03b00218 	.word	0x03b00218
  404784:	023603b0 	.word	0x023603b0
  404788:	026003b0 	.word	0x026003b0
  40478c:	039901e9 	.word	0x039901e9
  404790:	03b00259 	.word	0x03b00259
  404794:	03b00272 	.word	0x03b00272
  404798:	03b00076 	.word	0x03b00076
  40479c:	030503b0 	.word	0x030503b0
  4047a0:	9809      	ldr	r0, [sp, #36]	; 0x24
  4047a2:	4649      	mov	r1, r9
  4047a4:	aa23      	add	r2, sp, #140	; 0x8c
  4047a6:	f004 f8d3 	bl	408950 <__ssprint_r>
  4047aa:	b940      	cbnz	r0, 4047be <_svfprintf_r+0x18a>
  4047ac:	46c3      	mov	fp, r8
  4047ae:	e785      	b.n	4046bc <_svfprintf_r+0x88>
  4047b0:	9b25      	ldr	r3, [sp, #148]	; 0x94
  4047b2:	b123      	cbz	r3, 4047be <_svfprintf_r+0x18a>
  4047b4:	9809      	ldr	r0, [sp, #36]	; 0x24
  4047b6:	4649      	mov	r1, r9
  4047b8:	aa23      	add	r2, sp, #140	; 0x8c
  4047ba:	f004 f8c9 	bl	408950 <__ssprint_r>
  4047be:	f8b9 300c 	ldrh.w	r3, [r9, #12]
  4047c2:	f013 0f40 	tst.w	r3, #64	; 0x40
  4047c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4047c8:	bf18      	it	ne
  4047ca:	f04f 33ff 	movne.w	r3, #4294967295
  4047ce:	4618      	mov	r0, r3
  4047d0:	b041      	add	sp, #260	; 0x104
  4047d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4047d6:	9c08      	ldr	r4, [sp, #32]
  4047d8:	e773      	b.n	4046c2 <_svfprintf_r+0x8e>
  4047da:	9308      	str	r3, [sp, #32]
  4047dc:	46a4      	mov	ip, r4
  4047de:	9b06      	ldr	r3, [sp, #24]
  4047e0:	0698      	lsls	r0, r3, #26
  4047e2:	f140 823e 	bpl.w	404c62 <_svfprintf_r+0x62e>
  4047e6:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  4047e8:	2301      	movs	r3, #1
  4047ea:	3707      	adds	r7, #7
  4047ec:	f027 0207 	bic.w	r2, r7, #7
  4047f0:	f102 0108 	add.w	r1, r2, #8
  4047f4:	e9d2 4500 	ldrd	r4, r5, [r2]
  4047f8:	910c      	str	r1, [sp, #48]	; 0x30
  4047fa:	2200      	movs	r2, #0
  4047fc:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
  404800:	4617      	mov	r7, r2
  404802:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
  404806:	f1bc 0f00 	cmp.w	ip, #0
  40480a:	db03      	blt.n	404814 <_svfprintf_r+0x1e0>
  40480c:	9a06      	ldr	r2, [sp, #24]
  40480e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
  404812:	9206      	str	r2, [sp, #24]
  404814:	f1bc 0f00 	cmp.w	ip, #0
  404818:	f040 83ac 	bne.w	404f74 <_svfprintf_r+0x940>
  40481c:	ea54 0205 	orrs.w	r2, r4, r5
  404820:	bf14      	ite	ne
  404822:	2201      	movne	r2, #1
  404824:	2200      	moveq	r2, #0
  404826:	2a00      	cmp	r2, #0
  404828:	f040 83a4 	bne.w	404f74 <_svfprintf_r+0x940>
  40482c:	2b00      	cmp	r3, #0
  40482e:	f040 8460 	bne.w	4050f2 <_svfprintf_r+0xabe>
  404832:	9a06      	ldr	r2, [sp, #24]
  404834:	07d2      	lsls	r2, r2, #31
  404836:	f140 84fd 	bpl.w	405234 <_svfprintf_r+0xc00>
  40483a:	f50d 7a80 	add.w	sl, sp, #256	; 0x100
  40483e:	2330      	movs	r3, #48	; 0x30
  404840:	f80a 3d41 	strb.w	r3, [sl, #-65]!
  404844:	ebca 0408 	rsb	r4, sl, r8
  404848:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
  40484c:	45a4      	cmp	ip, r4
  40484e:	4663      	mov	r3, ip
  404850:	bfb8      	it	lt
  404852:	4623      	movlt	r3, r4
  404854:	9307      	str	r3, [sp, #28]
  404856:	2300      	movs	r3, #0
  404858:	9311      	str	r3, [sp, #68]	; 0x44
  40485a:	b117      	cbz	r7, 404862 <_svfprintf_r+0x22e>
  40485c:	9b07      	ldr	r3, [sp, #28]
  40485e:	3301      	adds	r3, #1
  404860:	9307      	str	r3, [sp, #28]
  404862:	9b06      	ldr	r3, [sp, #24]
  404864:	f013 0302 	ands.w	r3, r3, #2
  404868:	930d      	str	r3, [sp, #52]	; 0x34
  40486a:	d002      	beq.n	404872 <_svfprintf_r+0x23e>
  40486c:	9b07      	ldr	r3, [sp, #28]
  40486e:	3302      	adds	r3, #2
  404870:	9307      	str	r3, [sp, #28]
  404872:	9b06      	ldr	r3, [sp, #24]
  404874:	f013 0384 	ands.w	r3, r3, #132	; 0x84
  404878:	930e      	str	r3, [sp, #56]	; 0x38
  40487a:	f040 8307 	bne.w	404e8c <_svfprintf_r+0x858>
  40487e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  404880:	9a07      	ldr	r2, [sp, #28]
  404882:	ebc2 0a03 	rsb	sl, r2, r3
  404886:	f1ba 0f00 	cmp.w	sl, #0
  40488a:	f340 82ff 	ble.w	404e8c <_svfprintf_r+0x858>
  40488e:	f1ba 0f10 	cmp.w	sl, #16
  404892:	9925      	ldr	r1, [sp, #148]	; 0x94
  404894:	f340 87dd 	ble.w	405852 <_svfprintf_r+0x121e>
  404898:	4fbf      	ldr	r7, [pc, #764]	; (404b98 <_svfprintf_r+0x564>)
  40489a:	2510      	movs	r5, #16
  40489c:	9618      	str	r6, [sp, #96]	; 0x60
  40489e:	9a24      	ldr	r2, [sp, #144]	; 0x90
  4048a0:	463e      	mov	r6, r7
  4048a2:	4627      	mov	r7, r4
  4048a4:	9c09      	ldr	r4, [sp, #36]	; 0x24
  4048a6:	e004      	b.n	4048b2 <_svfprintf_r+0x27e>
  4048a8:	f1aa 0a10 	sub.w	sl, sl, #16
  4048ac:	f1ba 0f10 	cmp.w	sl, #16
  4048b0:	dd1b      	ble.n	4048ea <_svfprintf_r+0x2b6>
  4048b2:	3201      	adds	r2, #1
  4048b4:	3110      	adds	r1, #16
  4048b6:	f8cb 6000 	str.w	r6, [fp]
  4048ba:	f10b 0b08 	add.w	fp, fp, #8
  4048be:	2a07      	cmp	r2, #7
  4048c0:	f84b 5c04 	str.w	r5, [fp, #-4]
  4048c4:	9125      	str	r1, [sp, #148]	; 0x94
  4048c6:	9224      	str	r2, [sp, #144]	; 0x90
  4048c8:	ddee      	ble.n	4048a8 <_svfprintf_r+0x274>
  4048ca:	4620      	mov	r0, r4
  4048cc:	4649      	mov	r1, r9
  4048ce:	aa23      	add	r2, sp, #140	; 0x8c
  4048d0:	46c3      	mov	fp, r8
  4048d2:	f004 f83d 	bl	408950 <__ssprint_r>
  4048d6:	2800      	cmp	r0, #0
  4048d8:	f47f af71 	bne.w	4047be <_svfprintf_r+0x18a>
  4048dc:	f1aa 0a10 	sub.w	sl, sl, #16
  4048e0:	9925      	ldr	r1, [sp, #148]	; 0x94
  4048e2:	9a24      	ldr	r2, [sp, #144]	; 0x90
  4048e4:	f1ba 0f10 	cmp.w	sl, #16
  4048e8:	dce3      	bgt.n	4048b2 <_svfprintf_r+0x27e>
  4048ea:	463c      	mov	r4, r7
  4048ec:	4637      	mov	r7, r6
  4048ee:	9e18      	ldr	r6, [sp, #96]	; 0x60
  4048f0:	3201      	adds	r2, #1
  4048f2:	eb0a 0c01 	add.w	ip, sl, r1
  4048f6:	f8cb 7000 	str.w	r7, [fp]
  4048fa:	2a07      	cmp	r2, #7
  4048fc:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
  404900:	9224      	str	r2, [sp, #144]	; 0x90
  404902:	f8cb a004 	str.w	sl, [fp, #4]
  404906:	f300 82b6 	bgt.w	404e76 <_svfprintf_r+0x842>
  40490a:	f10b 0b08 	add.w	fp, fp, #8
  40490e:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  404912:	b197      	cbz	r7, 40493a <_svfprintf_r+0x306>
  404914:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404916:	2201      	movs	r2, #1
  404918:	f10c 0c01 	add.w	ip, ip, #1
  40491c:	f10d 016f 	add.w	r1, sp, #111	; 0x6f
  404920:	4413      	add	r3, r2
  404922:	f8cb 2004 	str.w	r2, [fp, #4]
  404926:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
  40492a:	2b07      	cmp	r3, #7
  40492c:	f8cb 1000 	str.w	r1, [fp]
  404930:	9324      	str	r3, [sp, #144]	; 0x90
  404932:	f300 83fb 	bgt.w	40512c <_svfprintf_r+0xaf8>
  404936:	f10b 0b08 	add.w	fp, fp, #8
  40493a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40493c:	b18b      	cbz	r3, 404962 <_svfprintf_r+0x32e>
  40493e:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404940:	f10c 0c02 	add.w	ip, ip, #2
  404944:	a91c      	add	r1, sp, #112	; 0x70
  404946:	2202      	movs	r2, #2
  404948:	3301      	adds	r3, #1
  40494a:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
  40494e:	f8cb 1000 	str.w	r1, [fp]
  404952:	2b07      	cmp	r3, #7
  404954:	9324      	str	r3, [sp, #144]	; 0x90
  404956:	f8cb 2004 	str.w	r2, [fp, #4]
  40495a:	f300 83db 	bgt.w	405114 <_svfprintf_r+0xae0>
  40495e:	f10b 0b08 	add.w	fp, fp, #8
  404962:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  404964:	2b80      	cmp	r3, #128	; 0x80
  404966:	f000 8321 	beq.w	404fac <_svfprintf_r+0x978>
  40496a:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40496c:	1b1f      	subs	r7, r3, r4
  40496e:	2f00      	cmp	r7, #0
  404970:	dd37      	ble.n	4049e2 <_svfprintf_r+0x3ae>
  404972:	2f10      	cmp	r7, #16
  404974:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404976:	f340 85ec 	ble.w	405552 <_svfprintf_r+0xf1e>
  40497a:	940d      	str	r4, [sp, #52]	; 0x34
  40497c:	f04f 0a10 	mov.w	sl, #16
  404980:	4d86      	ldr	r5, [pc, #536]	; (404b9c <_svfprintf_r+0x568>)
  404982:	4662      	mov	r2, ip
  404984:	9c09      	ldr	r4, [sp, #36]	; 0x24
  404986:	e002      	b.n	40498e <_svfprintf_r+0x35a>
  404988:	3f10      	subs	r7, #16
  40498a:	2f10      	cmp	r7, #16
  40498c:	dd19      	ble.n	4049c2 <_svfprintf_r+0x38e>
  40498e:	3301      	adds	r3, #1
  404990:	3210      	adds	r2, #16
  404992:	f8cb 5000 	str.w	r5, [fp]
  404996:	f10b 0b08 	add.w	fp, fp, #8
  40499a:	2b07      	cmp	r3, #7
  40499c:	f84b ac04 	str.w	sl, [fp, #-4]
  4049a0:	9225      	str	r2, [sp, #148]	; 0x94
  4049a2:	9324      	str	r3, [sp, #144]	; 0x90
  4049a4:	ddf0      	ble.n	404988 <_svfprintf_r+0x354>
  4049a6:	4620      	mov	r0, r4
  4049a8:	4649      	mov	r1, r9
  4049aa:	aa23      	add	r2, sp, #140	; 0x8c
  4049ac:	46c3      	mov	fp, r8
  4049ae:	f003 ffcf 	bl	408950 <__ssprint_r>
  4049b2:	2800      	cmp	r0, #0
  4049b4:	f47f af03 	bne.w	4047be <_svfprintf_r+0x18a>
  4049b8:	3f10      	subs	r7, #16
  4049ba:	9a25      	ldr	r2, [sp, #148]	; 0x94
  4049bc:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4049be:	2f10      	cmp	r7, #16
  4049c0:	dce5      	bgt.n	40498e <_svfprintf_r+0x35a>
  4049c2:	9c0d      	ldr	r4, [sp, #52]	; 0x34
  4049c4:	4694      	mov	ip, r2
  4049c6:	3301      	adds	r3, #1
  4049c8:	44bc      	add	ip, r7
  4049ca:	f8cb 5000 	str.w	r5, [fp]
  4049ce:	2b07      	cmp	r3, #7
  4049d0:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
  4049d4:	9324      	str	r3, [sp, #144]	; 0x90
  4049d6:	f8cb 7004 	str.w	r7, [fp, #4]
  4049da:	f300 838f 	bgt.w	4050fc <_svfprintf_r+0xac8>
  4049de:	f10b 0b08 	add.w	fp, fp, #8
  4049e2:	9b06      	ldr	r3, [sp, #24]
  4049e4:	05df      	lsls	r7, r3, #23
  4049e6:	f100 8254 	bmi.w	404e92 <_svfprintf_r+0x85e>
  4049ea:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4049ec:	44a4      	add	ip, r4
  4049ee:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4049f0:	3301      	adds	r3, #1
  4049f2:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
  4049f6:	f8cb 2000 	str.w	r2, [fp]
  4049fa:	2b07      	cmp	r3, #7
  4049fc:	f8cb 4004 	str.w	r4, [fp, #4]
  404a00:	9324      	str	r3, [sp, #144]	; 0x90
  404a02:	f300 8360 	bgt.w	4050c6 <_svfprintf_r+0xa92>
  404a06:	f10b 0b08 	add.w	fp, fp, #8
  404a0a:	9b06      	ldr	r3, [sp, #24]
  404a0c:	075a      	lsls	r2, r3, #29
  404a0e:	d540      	bpl.n	404a92 <_svfprintf_r+0x45e>
  404a10:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  404a12:	9a07      	ldr	r2, [sp, #28]
  404a14:	1a9c      	subs	r4, r3, r2
  404a16:	2c00      	cmp	r4, #0
  404a18:	dd3b      	ble.n	404a92 <_svfprintf_r+0x45e>
  404a1a:	2c10      	cmp	r4, #16
  404a1c:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404a1e:	f340 876b 	ble.w	4058f8 <_svfprintf_r+0x12c4>
  404a22:	2510      	movs	r5, #16
  404a24:	4f5c      	ldr	r7, [pc, #368]	; (404b98 <_svfprintf_r+0x564>)
  404a26:	4662      	mov	r2, ip
  404a28:	9e09      	ldr	r6, [sp, #36]	; 0x24
  404a2a:	e002      	b.n	404a32 <_svfprintf_r+0x3fe>
  404a2c:	3c10      	subs	r4, #16
  404a2e:	2c10      	cmp	r4, #16
  404a30:	dd19      	ble.n	404a66 <_svfprintf_r+0x432>
  404a32:	3301      	adds	r3, #1
  404a34:	3210      	adds	r2, #16
  404a36:	f8cb 7000 	str.w	r7, [fp]
  404a3a:	f10b 0b08 	add.w	fp, fp, #8
  404a3e:	2b07      	cmp	r3, #7
  404a40:	f84b 5c04 	str.w	r5, [fp, #-4]
  404a44:	9225      	str	r2, [sp, #148]	; 0x94
  404a46:	9324      	str	r3, [sp, #144]	; 0x90
  404a48:	ddf0      	ble.n	404a2c <_svfprintf_r+0x3f8>
  404a4a:	4630      	mov	r0, r6
  404a4c:	4649      	mov	r1, r9
  404a4e:	aa23      	add	r2, sp, #140	; 0x8c
  404a50:	46c3      	mov	fp, r8
  404a52:	f003 ff7d 	bl	408950 <__ssprint_r>
  404a56:	2800      	cmp	r0, #0
  404a58:	f47f aeb1 	bne.w	4047be <_svfprintf_r+0x18a>
  404a5c:	3c10      	subs	r4, #16
  404a5e:	9a25      	ldr	r2, [sp, #148]	; 0x94
  404a60:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404a62:	2c10      	cmp	r4, #16
  404a64:	dce5      	bgt.n	404a32 <_svfprintf_r+0x3fe>
  404a66:	4694      	mov	ip, r2
  404a68:	3301      	adds	r3, #1
  404a6a:	44a4      	add	ip, r4
  404a6c:	f8cb 7000 	str.w	r7, [fp]
  404a70:	2b07      	cmp	r3, #7
  404a72:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
  404a76:	9324      	str	r3, [sp, #144]	; 0x90
  404a78:	f8cb 4004 	str.w	r4, [fp, #4]
  404a7c:	dd09      	ble.n	404a92 <_svfprintf_r+0x45e>
  404a7e:	9809      	ldr	r0, [sp, #36]	; 0x24
  404a80:	4649      	mov	r1, r9
  404a82:	aa23      	add	r2, sp, #140	; 0x8c
  404a84:	f003 ff64 	bl	408950 <__ssprint_r>
  404a88:	2800      	cmp	r0, #0
  404a8a:	f47f ae98 	bne.w	4047be <_svfprintf_r+0x18a>
  404a8e:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
  404a92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404a94:	9a07      	ldr	r2, [sp, #28]
  404a96:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404a98:	428a      	cmp	r2, r1
  404a9a:	bfac      	ite	ge
  404a9c:	189b      	addge	r3, r3, r2
  404a9e:	185b      	addlt	r3, r3, r1
  404aa0:	930a      	str	r3, [sp, #40]	; 0x28
  404aa2:	f1bc 0f00 	cmp.w	ip, #0
  404aa6:	f040 831a 	bne.w	4050de <_svfprintf_r+0xaaa>
  404aaa:	2300      	movs	r3, #0
  404aac:	46c3      	mov	fp, r8
  404aae:	9324      	str	r3, [sp, #144]	; 0x90
  404ab0:	e5e6      	b.n	404680 <_svfprintf_r+0x4c>
  404ab2:	4619      	mov	r1, r3
  404ab4:	9806      	ldr	r0, [sp, #24]
  404ab6:	781e      	ldrb	r6, [r3, #0]
  404ab8:	f040 0004 	orr.w	r0, r0, #4
  404abc:	9006      	str	r0, [sp, #24]
  404abe:	e60e      	b.n	4046de <_svfprintf_r+0xaa>
  404ac0:	9308      	str	r3, [sp, #32]
  404ac2:	46a4      	mov	ip, r4
  404ac4:	9b06      	ldr	r3, [sp, #24]
  404ac6:	f013 0320 	ands.w	r3, r3, #32
  404aca:	f000 80ae 	beq.w	404c2a <_svfprintf_r+0x5f6>
  404ace:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  404ad0:	2300      	movs	r3, #0
  404ad2:	3707      	adds	r7, #7
  404ad4:	f027 0207 	bic.w	r2, r7, #7
  404ad8:	f102 0108 	add.w	r1, r2, #8
  404adc:	e9d2 4500 	ldrd	r4, r5, [r2]
  404ae0:	910c      	str	r1, [sp, #48]	; 0x30
  404ae2:	e68a      	b.n	4047fa <_svfprintf_r+0x1c6>
  404ae4:	781e      	ldrb	r6, [r3, #0]
  404ae6:	4619      	mov	r1, r3
  404ae8:	222b      	movs	r2, #43	; 0x2b
  404aea:	e5f8      	b.n	4046de <_svfprintf_r+0xaa>
  404aec:	781e      	ldrb	r6, [r3, #0]
  404aee:	1c59      	adds	r1, r3, #1
  404af0:	2e2a      	cmp	r6, #42	; 0x2a
  404af2:	f001 8006 	beq.w	405b02 <_svfprintf_r+0x14ce>
  404af6:	f1a6 0030 	sub.w	r0, r6, #48	; 0x30
  404afa:	460b      	mov	r3, r1
  404afc:	2400      	movs	r4, #0
  404afe:	2809      	cmp	r0, #9
  404b00:	f63f adee 	bhi.w	4046e0 <_svfprintf_r+0xac>
  404b04:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  404b08:	f813 6b01 	ldrb.w	r6, [r3], #1
  404b0c:	eb00 0444 	add.w	r4, r0, r4, lsl #1
  404b10:	f1a6 0030 	sub.w	r0, r6, #48	; 0x30
  404b14:	2809      	cmp	r0, #9
  404b16:	d9f5      	bls.n	404b04 <_svfprintf_r+0x4d0>
  404b18:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
  404b1c:	e5e0      	b.n	4046e0 <_svfprintf_r+0xac>
  404b1e:	9308      	str	r3, [sp, #32]
  404b20:	46a4      	mov	ip, r4
  404b22:	9b06      	ldr	r3, [sp, #24]
  404b24:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
  404b28:	069c      	lsls	r4, r3, #26
  404b2a:	f140 8129 	bpl.w	404d80 <_svfprintf_r+0x74c>
  404b2e:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  404b30:	3707      	adds	r7, #7
  404b32:	f027 0707 	bic.w	r7, r7, #7
  404b36:	e9d7 2300 	ldrd	r2, r3, [r7]
  404b3a:	f107 0108 	add.w	r1, r7, #8
  404b3e:	4614      	mov	r4, r2
  404b40:	461d      	mov	r5, r3
  404b42:	910c      	str	r1, [sp, #48]	; 0x30
  404b44:	2a00      	cmp	r2, #0
  404b46:	f173 0300 	sbcs.w	r3, r3, #0
  404b4a:	f2c0 812a 	blt.w	404da2 <_svfprintf_r+0x76e>
  404b4e:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  404b52:	2301      	movs	r3, #1
  404b54:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
  404b58:	e655      	b.n	404806 <_svfprintf_r+0x1d2>
  404b5a:	781e      	ldrb	r6, [r3, #0]
  404b5c:	9906      	ldr	r1, [sp, #24]
  404b5e:	2e6c      	cmp	r6, #108	; 0x6c
  404b60:	f000 8557 	beq.w	405612 <_svfprintf_r+0xfde>
  404b64:	f041 0110 	orr.w	r1, r1, #16
  404b68:	9106      	str	r1, [sp, #24]
  404b6a:	4619      	mov	r1, r3
  404b6c:	e5b7      	b.n	4046de <_svfprintf_r+0xaa>
  404b6e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  404b70:	6829      	ldr	r1, [r5, #0]
  404b72:	4608      	mov	r0, r1
  404b74:	910b      	str	r1, [sp, #44]	; 0x2c
  404b76:	4629      	mov	r1, r5
  404b78:	2800      	cmp	r0, #0
  404b7a:	f101 0104 	add.w	r1, r1, #4
  404b7e:	f2c0 854f 	blt.w	405620 <_svfprintf_r+0xfec>
  404b82:	910c      	str	r1, [sp, #48]	; 0x30
  404b84:	4619      	mov	r1, r3
  404b86:	781e      	ldrb	r6, [r3, #0]
  404b88:	e5a9      	b.n	4046de <_svfprintf_r+0xaa>
  404b8a:	9906      	ldr	r1, [sp, #24]
  404b8c:	f041 0140 	orr.w	r1, r1, #64	; 0x40
  404b90:	9106      	str	r1, [sp, #24]
  404b92:	4619      	mov	r1, r3
  404b94:	781e      	ldrb	r6, [r3, #0]
  404b96:	e5a2      	b.n	4046de <_svfprintf_r+0xaa>
  404b98:	00409cd0 	.word	0x00409cd0
  404b9c:	00409cc0 	.word	0x00409cc0
  404ba0:	9906      	ldr	r1, [sp, #24]
  404ba2:	f041 0120 	orr.w	r1, r1, #32
  404ba6:	9106      	str	r1, [sp, #24]
  404ba8:	4619      	mov	r1, r3
  404baa:	781e      	ldrb	r6, [r3, #0]
  404bac:	e597      	b.n	4046de <_svfprintf_r+0xaa>
  404bae:	9308      	str	r3, [sp, #32]
  404bb0:	9b06      	ldr	r3, [sp, #24]
  404bb2:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
  404bb6:	069e      	lsls	r6, r3, #26
  404bb8:	f140 84a4 	bpl.w	405504 <_svfprintf_r+0xed0>
  404bbc:	990a      	ldr	r1, [sp, #40]	; 0x28
  404bbe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  404bc0:	17cd      	asrs	r5, r1, #31
  404bc2:	4608      	mov	r0, r1
  404bc4:	6813      	ldr	r3, [r2, #0]
  404bc6:	3204      	adds	r2, #4
  404bc8:	4629      	mov	r1, r5
  404bca:	920c      	str	r2, [sp, #48]	; 0x30
  404bcc:	e9c3 0100 	strd	r0, r1, [r3]
  404bd0:	e556      	b.n	404680 <_svfprintf_r+0x4c>
  404bd2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  404bd4:	2500      	movs	r5, #0
  404bd6:	9308      	str	r3, [sp, #32]
  404bd8:	6813      	ldr	r3, [r2, #0]
  404bda:	1d17      	adds	r7, r2, #4
  404bdc:	f88d 506f 	strb.w	r5, [sp, #111]	; 0x6f
  404be0:	930f      	str	r3, [sp, #60]	; 0x3c
  404be2:	2b00      	cmp	r3, #0
  404be4:	f000 867a 	beq.w	4058dc <_svfprintf_r+0x12a8>
  404be8:	2c00      	cmp	r4, #0
  404bea:	980f      	ldr	r0, [sp, #60]	; 0x3c
  404bec:	f2c0 8624 	blt.w	405838 <_svfprintf_r+0x1204>
  404bf0:	4629      	mov	r1, r5
  404bf2:	4622      	mov	r2, r4
  404bf4:	f002 ffe8 	bl	407bc8 <memchr>
  404bf8:	2800      	cmp	r0, #0
  404bfa:	f000 86df 	beq.w	4059bc <_svfprintf_r+0x1388>
  404bfe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  404c00:	970c      	str	r7, [sp, #48]	; 0x30
  404c02:	1ac4      	subs	r4, r0, r3
  404c04:	9510      	str	r5, [sp, #64]	; 0x40
  404c06:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  404c0a:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
  404c0e:	9511      	str	r5, [sp, #68]	; 0x44
  404c10:	9307      	str	r3, [sp, #28]
  404c12:	e622      	b.n	40485a <_svfprintf_r+0x226>
  404c14:	9308      	str	r3, [sp, #32]
  404c16:	46a4      	mov	ip, r4
  404c18:	9b06      	ldr	r3, [sp, #24]
  404c1a:	f043 0310 	orr.w	r3, r3, #16
  404c1e:	9306      	str	r3, [sp, #24]
  404c20:	9b06      	ldr	r3, [sp, #24]
  404c22:	f013 0320 	ands.w	r3, r3, #32
  404c26:	f47f af52 	bne.w	404ace <_svfprintf_r+0x49a>
  404c2a:	9a06      	ldr	r2, [sp, #24]
  404c2c:	f012 0210 	ands.w	r2, r2, #16
  404c30:	f040 8352 	bne.w	4052d8 <_svfprintf_r+0xca4>
  404c34:	9b06      	ldr	r3, [sp, #24]
  404c36:	f013 0340 	ands.w	r3, r3, #64	; 0x40
  404c3a:	f000 834d 	beq.w	4052d8 <_svfprintf_r+0xca4>
  404c3e:	990c      	ldr	r1, [sp, #48]	; 0x30
  404c40:	4613      	mov	r3, r2
  404c42:	2500      	movs	r5, #0
  404c44:	460a      	mov	r2, r1
  404c46:	880c      	ldrh	r4, [r1, #0]
  404c48:	3204      	adds	r2, #4
  404c4a:	920c      	str	r2, [sp, #48]	; 0x30
  404c4c:	e5d5      	b.n	4047fa <_svfprintf_r+0x1c6>
  404c4e:	9308      	str	r3, [sp, #32]
  404c50:	46a4      	mov	ip, r4
  404c52:	9b06      	ldr	r3, [sp, #24]
  404c54:	f043 0310 	orr.w	r3, r3, #16
  404c58:	9306      	str	r3, [sp, #24]
  404c5a:	9b06      	ldr	r3, [sp, #24]
  404c5c:	0698      	lsls	r0, r3, #26
  404c5e:	f53f adc2 	bmi.w	4047e6 <_svfprintf_r+0x1b2>
  404c62:	9b06      	ldr	r3, [sp, #24]
  404c64:	06d9      	lsls	r1, r3, #27
  404c66:	f140 8432 	bpl.w	4054ce <_svfprintf_r+0xe9a>
  404c6a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  404c6c:	4613      	mov	r3, r2
  404c6e:	3204      	adds	r2, #4
  404c70:	681c      	ldr	r4, [r3, #0]
  404c72:	2500      	movs	r5, #0
  404c74:	2301      	movs	r3, #1
  404c76:	920c      	str	r2, [sp, #48]	; 0x30
  404c78:	e5bf      	b.n	4047fa <_svfprintf_r+0x1c6>
  404c7a:	9308      	str	r3, [sp, #32]
  404c7c:	46a4      	mov	ip, r4
  404c7e:	4bb7      	ldr	r3, [pc, #732]	; (404f5c <_svfprintf_r+0x928>)
  404c80:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
  404c84:	9315      	str	r3, [sp, #84]	; 0x54
  404c86:	9b06      	ldr	r3, [sp, #24]
  404c88:	069a      	lsls	r2, r3, #26
  404c8a:	d53e      	bpl.n	404d0a <_svfprintf_r+0x6d6>
  404c8c:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  404c8e:	3707      	adds	r7, #7
  404c90:	f027 0307 	bic.w	r3, r7, #7
  404c94:	f103 0208 	add.w	r2, r3, #8
  404c98:	e9d3 4500 	ldrd	r4, r5, [r3]
  404c9c:	920c      	str	r2, [sp, #48]	; 0x30
  404c9e:	9b06      	ldr	r3, [sp, #24]
  404ca0:	07df      	lsls	r7, r3, #31
  404ca2:	f140 8268 	bpl.w	405176 <_svfprintf_r+0xb42>
  404ca6:	ea54 0305 	orrs.w	r3, r4, r5
  404caa:	f000 8264 	beq.w	405176 <_svfprintf_r+0xb42>
  404cae:	9b06      	ldr	r3, [sp, #24]
  404cb0:	2230      	movs	r2, #48	; 0x30
  404cb2:	f88d 6071 	strb.w	r6, [sp, #113]	; 0x71
  404cb6:	f043 0302 	orr.w	r3, r3, #2
  404cba:	f88d 2070 	strb.w	r2, [sp, #112]	; 0x70
  404cbe:	9306      	str	r3, [sp, #24]
  404cc0:	2302      	movs	r3, #2
  404cc2:	e59a      	b.n	4047fa <_svfprintf_r+0x1c6>
  404cc4:	990c      	ldr	r1, [sp, #48]	; 0x30
  404cc6:	2001      	movs	r0, #1
  404cc8:	9308      	str	r3, [sp, #32]
  404cca:	2300      	movs	r3, #0
  404ccc:	680a      	ldr	r2, [r1, #0]
  404cce:	3104      	adds	r1, #4
  404cd0:	461f      	mov	r7, r3
  404cd2:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  404cd6:	9310      	str	r3, [sp, #64]	; 0x40
  404cd8:	4604      	mov	r4, r0
  404cda:	9311      	str	r3, [sp, #68]	; 0x44
  404cdc:	ab26      	add	r3, sp, #152	; 0x98
  404cde:	9007      	str	r0, [sp, #28]
  404ce0:	910c      	str	r1, [sp, #48]	; 0x30
  404ce2:	f88d 2098 	strb.w	r2, [sp, #152]	; 0x98
  404ce6:	930f      	str	r3, [sp, #60]	; 0x3c
  404ce8:	e5bb      	b.n	404862 <_svfprintf_r+0x22e>
  404cea:	9906      	ldr	r1, [sp, #24]
  404cec:	f041 0108 	orr.w	r1, r1, #8
  404cf0:	9106      	str	r1, [sp, #24]
  404cf2:	4619      	mov	r1, r3
  404cf4:	781e      	ldrb	r6, [r3, #0]
  404cf6:	e4f2      	b.n	4046de <_svfprintf_r+0xaa>
  404cf8:	9308      	str	r3, [sp, #32]
  404cfa:	46a4      	mov	ip, r4
  404cfc:	4b98      	ldr	r3, [pc, #608]	; (404f60 <_svfprintf_r+0x92c>)
  404cfe:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
  404d02:	9315      	str	r3, [sp, #84]	; 0x54
  404d04:	9b06      	ldr	r3, [sp, #24]
  404d06:	069a      	lsls	r2, r3, #26
  404d08:	d4c0      	bmi.n	404c8c <_svfprintf_r+0x658>
  404d0a:	9b06      	ldr	r3, [sp, #24]
  404d0c:	06db      	lsls	r3, r3, #27
  404d0e:	f140 83ec 	bpl.w	4054ea <_svfprintf_r+0xeb6>
  404d12:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  404d14:	2500      	movs	r5, #0
  404d16:	4613      	mov	r3, r2
  404d18:	6814      	ldr	r4, [r2, #0]
  404d1a:	3304      	adds	r3, #4
  404d1c:	930c      	str	r3, [sp, #48]	; 0x30
  404d1e:	e7be      	b.n	404c9e <_svfprintf_r+0x66a>
  404d20:	781e      	ldrb	r6, [r3, #0]
  404d22:	4619      	mov	r1, r3
  404d24:	2a00      	cmp	r2, #0
  404d26:	f47f acda 	bne.w	4046de <_svfprintf_r+0xaa>
  404d2a:	2220      	movs	r2, #32
  404d2c:	e4d7      	b.n	4046de <_svfprintf_r+0xaa>
  404d2e:	9906      	ldr	r1, [sp, #24]
  404d30:	f041 0101 	orr.w	r1, r1, #1
  404d34:	9106      	str	r1, [sp, #24]
  404d36:	4619      	mov	r1, r3
  404d38:	781e      	ldrb	r6, [r3, #0]
  404d3a:	e4d0      	b.n	4046de <_svfprintf_r+0xaa>
  404d3c:	9906      	ldr	r1, [sp, #24]
  404d3e:	f041 0180 	orr.w	r1, r1, #128	; 0x80
  404d42:	9106      	str	r1, [sp, #24]
  404d44:	4619      	mov	r1, r3
  404d46:	781e      	ldrb	r6, [r3, #0]
  404d48:	e4c9      	b.n	4046de <_svfprintf_r+0xaa>
  404d4a:	f1a6 0030 	sub.w	r0, r6, #48	; 0x30
  404d4e:	2100      	movs	r1, #0
  404d50:	eb01 0181 	add.w	r1, r1, r1, lsl #2
  404d54:	f813 6b01 	ldrb.w	r6, [r3], #1
  404d58:	eb00 0141 	add.w	r1, r0, r1, lsl #1
  404d5c:	f1a6 0030 	sub.w	r0, r6, #48	; 0x30
  404d60:	2809      	cmp	r0, #9
  404d62:	d9f5      	bls.n	404d50 <_svfprintf_r+0x71c>
  404d64:	910b      	str	r1, [sp, #44]	; 0x2c
  404d66:	e4bb      	b.n	4046e0 <_svfprintf_r+0xac>
  404d68:	9308      	str	r3, [sp, #32]
  404d6a:	46a4      	mov	ip, r4
  404d6c:	9b06      	ldr	r3, [sp, #24]
  404d6e:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
  404d72:	f043 0310 	orr.w	r3, r3, #16
  404d76:	9306      	str	r3, [sp, #24]
  404d78:	9b06      	ldr	r3, [sp, #24]
  404d7a:	069c      	lsls	r4, r3, #26
  404d7c:	f53f aed7 	bmi.w	404b2e <_svfprintf_r+0x4fa>
  404d80:	9b06      	ldr	r3, [sp, #24]
  404d82:	06d8      	lsls	r0, r3, #27
  404d84:	f140 83d5 	bpl.w	405532 <_svfprintf_r+0xefe>
  404d88:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  404d8a:	4613      	mov	r3, r2
  404d8c:	681c      	ldr	r4, [r3, #0]
  404d8e:	3304      	adds	r3, #4
  404d90:	17e5      	asrs	r5, r4, #31
  404d92:	4622      	mov	r2, r4
  404d94:	930c      	str	r3, [sp, #48]	; 0x30
  404d96:	2a00      	cmp	r2, #0
  404d98:	462b      	mov	r3, r5
  404d9a:	f173 0300 	sbcs.w	r3, r3, #0
  404d9e:	f6bf aed6 	bge.w	404b4e <_svfprintf_r+0x51a>
  404da2:	272d      	movs	r7, #45	; 0x2d
  404da4:	4264      	negs	r4, r4
  404da6:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
  404daa:	f04f 0301 	mov.w	r3, #1
  404dae:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
  404db2:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
  404db6:	e526      	b.n	404806 <_svfprintf_r+0x1d2>
  404db8:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  404dba:	9308      	str	r3, [sp, #32]
  404dbc:	3707      	adds	r7, #7
  404dbe:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
  404dc2:	f027 0307 	bic.w	r3, r7, #7
  404dc6:	f103 0208 	add.w	r2, r3, #8
  404dca:	920c      	str	r2, [sp, #48]	; 0x30
  404dcc:	681a      	ldr	r2, [r3, #0]
  404dce:	9213      	str	r2, [sp, #76]	; 0x4c
  404dd0:	685b      	ldr	r3, [r3, #4]
  404dd2:	9813      	ldr	r0, [sp, #76]	; 0x4c
  404dd4:	9314      	str	r3, [sp, #80]	; 0x50
  404dd6:	9914      	ldr	r1, [sp, #80]	; 0x50
  404dd8:	9407      	str	r4, [sp, #28]
  404dda:	f003 fd41 	bl	408860 <__fpclassifyd>
  404dde:	2801      	cmp	r0, #1
  404de0:	f8dd c01c 	ldr.w	ip, [sp, #28]
  404de4:	f040 8355 	bne.w	405492 <_svfprintf_r+0xe5e>
  404de8:	9813      	ldr	r0, [sp, #76]	; 0x4c
  404dea:	2200      	movs	r2, #0
  404dec:	2300      	movs	r3, #0
  404dee:	9914      	ldr	r1, [sp, #80]	; 0x50
  404df0:	f004 fb9a 	bl	409528 <__aeabi_dcmplt>
  404df4:	2800      	cmp	r0, #0
  404df6:	f040 8582 	bne.w	4058fe <_svfprintf_r+0x12ca>
  404dfa:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  404dfe:	2303      	movs	r3, #3
  404e00:	9806      	ldr	r0, [sp, #24]
  404e02:	4a58      	ldr	r2, [pc, #352]	; (404f64 <_svfprintf_r+0x930>)
  404e04:	2100      	movs	r1, #0
  404e06:	461c      	mov	r4, r3
  404e08:	9307      	str	r3, [sp, #28]
  404e0a:	4b57      	ldr	r3, [pc, #348]	; (404f68 <_svfprintf_r+0x934>)
  404e0c:	f020 0080 	bic.w	r0, r0, #128	; 0x80
  404e10:	9110      	str	r1, [sp, #64]	; 0x40
  404e12:	2e47      	cmp	r6, #71	; 0x47
  404e14:	bfd8      	it	le
  404e16:	461a      	movle	r2, r3
  404e18:	9006      	str	r0, [sp, #24]
  404e1a:	9111      	str	r1, [sp, #68]	; 0x44
  404e1c:	920f      	str	r2, [sp, #60]	; 0x3c
  404e1e:	e51c      	b.n	40485a <_svfprintf_r+0x226>
  404e20:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  404e22:	2230      	movs	r2, #48	; 0x30
  404e24:	9806      	ldr	r0, [sp, #24]
  404e26:	46a4      	mov	ip, r4
  404e28:	4629      	mov	r1, r5
  404e2a:	9308      	str	r3, [sp, #32]
  404e2c:	2378      	movs	r3, #120	; 0x78
  404e2e:	f040 0002 	orr.w	r0, r0, #2
  404e32:	3104      	adds	r1, #4
  404e34:	682c      	ldr	r4, [r5, #0]
  404e36:	461e      	mov	r6, r3
  404e38:	f88d 3071 	strb.w	r3, [sp, #113]	; 0x71
  404e3c:	4b48      	ldr	r3, [pc, #288]	; (404f60 <_svfprintf_r+0x92c>)
  404e3e:	2500      	movs	r5, #0
  404e40:	9006      	str	r0, [sp, #24]
  404e42:	9315      	str	r3, [sp, #84]	; 0x54
  404e44:	2302      	movs	r3, #2
  404e46:	910c      	str	r1, [sp, #48]	; 0x30
  404e48:	f88d 2070 	strb.w	r2, [sp, #112]	; 0x70
  404e4c:	e4d5      	b.n	4047fa <_svfprintf_r+0x1c6>
  404e4e:	9308      	str	r3, [sp, #32]
  404e50:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
  404e54:	2e00      	cmp	r6, #0
  404e56:	f43f acab 	beq.w	4047b0 <_svfprintf_r+0x17c>
  404e5a:	2300      	movs	r3, #0
  404e5c:	2201      	movs	r2, #1
  404e5e:	a926      	add	r1, sp, #152	; 0x98
  404e60:	f88d 6098 	strb.w	r6, [sp, #152]	; 0x98
  404e64:	9207      	str	r2, [sp, #28]
  404e66:	461f      	mov	r7, r3
  404e68:	910f      	str	r1, [sp, #60]	; 0x3c
  404e6a:	4614      	mov	r4, r2
  404e6c:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  404e70:	9310      	str	r3, [sp, #64]	; 0x40
  404e72:	9311      	str	r3, [sp, #68]	; 0x44
  404e74:	e4f5      	b.n	404862 <_svfprintf_r+0x22e>
  404e76:	9809      	ldr	r0, [sp, #36]	; 0x24
  404e78:	4649      	mov	r1, r9
  404e7a:	aa23      	add	r2, sp, #140	; 0x8c
  404e7c:	f003 fd68 	bl	408950 <__ssprint_r>
  404e80:	2800      	cmp	r0, #0
  404e82:	f47f ac9c 	bne.w	4047be <_svfprintf_r+0x18a>
  404e86:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  404e8a:	46c3      	mov	fp, r8
  404e8c:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
  404e90:	e53f      	b.n	404912 <_svfprintf_r+0x2de>
  404e92:	2e65      	cmp	r6, #101	; 0x65
  404e94:	f340 80c9 	ble.w	40502a <_svfprintf_r+0x9f6>
  404e98:	9813      	ldr	r0, [sp, #76]	; 0x4c
  404e9a:	2200      	movs	r2, #0
  404e9c:	2300      	movs	r3, #0
  404e9e:	9914      	ldr	r1, [sp, #80]	; 0x50
  404ea0:	f8cd c034 	str.w	ip, [sp, #52]	; 0x34
  404ea4:	f004 fb36 	bl	409514 <__aeabi_dcmpeq>
  404ea8:	f8dd c034 	ldr.w	ip, [sp, #52]	; 0x34
  404eac:	2800      	cmp	r0, #0
  404eae:	f000 8165 	beq.w	40517c <_svfprintf_r+0xb48>
  404eb2:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404eb4:	2201      	movs	r2, #1
  404eb6:	f10c 0c01 	add.w	ip, ip, #1
  404eba:	492c      	ldr	r1, [pc, #176]	; (404f6c <_svfprintf_r+0x938>)
  404ebc:	4413      	add	r3, r2
  404ebe:	f8cb 2004 	str.w	r2, [fp, #4]
  404ec2:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
  404ec6:	2b07      	cmp	r3, #7
  404ec8:	f8cb 1000 	str.w	r1, [fp]
  404ecc:	9324      	str	r3, [sp, #144]	; 0x90
  404ece:	f300 8343 	bgt.w	405558 <_svfprintf_r+0xf24>
  404ed2:	f10b 0b08 	add.w	fp, fp, #8
  404ed6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  404ed8:	9a12      	ldr	r2, [sp, #72]	; 0x48
  404eda:	4293      	cmp	r3, r2
  404edc:	db03      	blt.n	404ee6 <_svfprintf_r+0x8b2>
  404ede:	9b06      	ldr	r3, [sp, #24]
  404ee0:	07de      	lsls	r6, r3, #31
  404ee2:	f57f ad92 	bpl.w	404a0a <_svfprintf_r+0x3d6>
  404ee6:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404ee8:	9917      	ldr	r1, [sp, #92]	; 0x5c
  404eea:	3301      	adds	r3, #1
  404eec:	9a16      	ldr	r2, [sp, #88]	; 0x58
  404eee:	448c      	add	ip, r1
  404ef0:	f8cb 1004 	str.w	r1, [fp, #4]
  404ef4:	2b07      	cmp	r3, #7
  404ef6:	f8cb 2000 	str.w	r2, [fp]
  404efa:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
  404efe:	9324      	str	r3, [sp, #144]	; 0x90
  404f00:	f300 841d 	bgt.w	40573e <_svfprintf_r+0x110a>
  404f04:	f10b 0b08 	add.w	fp, fp, #8
  404f08:	9b12      	ldr	r3, [sp, #72]	; 0x48
  404f0a:	1e5c      	subs	r4, r3, #1
  404f0c:	2c00      	cmp	r4, #0
  404f0e:	f77f ad7c 	ble.w	404a0a <_svfprintf_r+0x3d6>
  404f12:	2c10      	cmp	r4, #16
  404f14:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404f16:	f340 85bc 	ble.w	405a92 <_svfprintf_r+0x145e>
  404f1a:	2610      	movs	r6, #16
  404f1c:	4d14      	ldr	r5, [pc, #80]	; (404f70 <_svfprintf_r+0x93c>)
  404f1e:	4662      	mov	r2, ip
  404f20:	9f09      	ldr	r7, [sp, #36]	; 0x24
  404f22:	e003      	b.n	404f2c <_svfprintf_r+0x8f8>
  404f24:	3c10      	subs	r4, #16
  404f26:	2c10      	cmp	r4, #16
  404f28:	f340 81c8 	ble.w	4052bc <_svfprintf_r+0xc88>
  404f2c:	3301      	adds	r3, #1
  404f2e:	3210      	adds	r2, #16
  404f30:	f8cb 5000 	str.w	r5, [fp]
  404f34:	f10b 0b08 	add.w	fp, fp, #8
  404f38:	2b07      	cmp	r3, #7
  404f3a:	f84b 6c04 	str.w	r6, [fp, #-4]
  404f3e:	9225      	str	r2, [sp, #148]	; 0x94
  404f40:	9324      	str	r3, [sp, #144]	; 0x90
  404f42:	ddef      	ble.n	404f24 <_svfprintf_r+0x8f0>
  404f44:	4638      	mov	r0, r7
  404f46:	4649      	mov	r1, r9
  404f48:	aa23      	add	r2, sp, #140	; 0x8c
  404f4a:	46c3      	mov	fp, r8
  404f4c:	f003 fd00 	bl	408950 <__ssprint_r>
  404f50:	2800      	cmp	r0, #0
  404f52:	f47f ac34 	bne.w	4047be <_svfprintf_r+0x18a>
  404f56:	9a25      	ldr	r2, [sp, #148]	; 0x94
  404f58:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404f5a:	e7e3      	b.n	404f24 <_svfprintf_r+0x8f0>
  404f5c:	00409cf0 	.word	0x00409cf0
  404f60:	00409d04 	.word	0x00409d04
  404f64:	00409ce4 	.word	0x00409ce4
  404f68:	00409ce0 	.word	0x00409ce0
  404f6c:	00409d20 	.word	0x00409d20
  404f70:	00409cc0 	.word	0x00409cc0
  404f74:	2b01      	cmp	r3, #1
  404f76:	f000 814d 	beq.w	405214 <_svfprintf_r+0xbe0>
  404f7a:	2b02      	cmp	r3, #2
  404f7c:	f040 80e3 	bne.w	405146 <_svfprintf_r+0xb12>
  404f80:	46c2      	mov	sl, r8
  404f82:	9815      	ldr	r0, [sp, #84]	; 0x54
  404f84:	0923      	lsrs	r3, r4, #4
  404f86:	f004 010f 	and.w	r1, r4, #15
  404f8a:	092a      	lsrs	r2, r5, #4
  404f8c:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
  404f90:	4615      	mov	r5, r2
  404f92:	461c      	mov	r4, r3
  404f94:	5c43      	ldrb	r3, [r0, r1]
  404f96:	f80a 3d01 	strb.w	r3, [sl, #-1]!
  404f9a:	ea54 0305 	orrs.w	r3, r4, r5
  404f9e:	d1f1      	bne.n	404f84 <_svfprintf_r+0x950>
  404fa0:	4653      	mov	r3, sl
  404fa2:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
  404fa6:	ebc3 0408 	rsb	r4, r3, r8
  404faa:	e44f      	b.n	40484c <_svfprintf_r+0x218>
  404fac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  404fae:	9a07      	ldr	r2, [sp, #28]
  404fb0:	1a9f      	subs	r7, r3, r2
  404fb2:	2f00      	cmp	r7, #0
  404fb4:	f77f acd9 	ble.w	40496a <_svfprintf_r+0x336>
  404fb8:	2f10      	cmp	r7, #16
  404fba:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404fbc:	f340 84f9 	ble.w	4059b2 <_svfprintf_r+0x137e>
  404fc0:	940d      	str	r4, [sp, #52]	; 0x34
  404fc2:	f04f 0a10 	mov.w	sl, #16
  404fc6:	4dc8      	ldr	r5, [pc, #800]	; (4052e8 <_svfprintf_r+0xcb4>)
  404fc8:	4662      	mov	r2, ip
  404fca:	9c09      	ldr	r4, [sp, #36]	; 0x24
  404fcc:	e002      	b.n	404fd4 <_svfprintf_r+0x9a0>
  404fce:	3f10      	subs	r7, #16
  404fd0:	2f10      	cmp	r7, #16
  404fd2:	dd19      	ble.n	405008 <_svfprintf_r+0x9d4>
  404fd4:	3301      	adds	r3, #1
  404fd6:	3210      	adds	r2, #16
  404fd8:	f8cb 5000 	str.w	r5, [fp]
  404fdc:	f10b 0b08 	add.w	fp, fp, #8
  404fe0:	2b07      	cmp	r3, #7
  404fe2:	f84b ac04 	str.w	sl, [fp, #-4]
  404fe6:	9225      	str	r2, [sp, #148]	; 0x94
  404fe8:	9324      	str	r3, [sp, #144]	; 0x90
  404fea:	ddf0      	ble.n	404fce <_svfprintf_r+0x99a>
  404fec:	4620      	mov	r0, r4
  404fee:	4649      	mov	r1, r9
  404ff0:	aa23      	add	r2, sp, #140	; 0x8c
  404ff2:	46c3      	mov	fp, r8
  404ff4:	f003 fcac 	bl	408950 <__ssprint_r>
  404ff8:	2800      	cmp	r0, #0
  404ffa:	f47f abe0 	bne.w	4047be <_svfprintf_r+0x18a>
  404ffe:	3f10      	subs	r7, #16
  405000:	9a25      	ldr	r2, [sp, #148]	; 0x94
  405002:	9b24      	ldr	r3, [sp, #144]	; 0x90
  405004:	2f10      	cmp	r7, #16
  405006:	dce5      	bgt.n	404fd4 <_svfprintf_r+0x9a0>
  405008:	9c0d      	ldr	r4, [sp, #52]	; 0x34
  40500a:	4694      	mov	ip, r2
  40500c:	3301      	adds	r3, #1
  40500e:	44bc      	add	ip, r7
  405010:	f8cb 5000 	str.w	r5, [fp]
  405014:	2b07      	cmp	r3, #7
  405016:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
  40501a:	9324      	str	r3, [sp, #144]	; 0x90
  40501c:	f8cb 7004 	str.w	r7, [fp, #4]
  405020:	f300 81fc 	bgt.w	40541c <_svfprintf_r+0xde8>
  405024:	f10b 0b08 	add.w	fp, fp, #8
  405028:	e49f      	b.n	40496a <_svfprintf_r+0x336>
  40502a:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40502c:	f10c 0601 	add.w	r6, ip, #1
  405030:	9c24      	ldr	r4, [sp, #144]	; 0x90
  405032:	2b01      	cmp	r3, #1
  405034:	f340 81c9 	ble.w	4053ca <_svfprintf_r+0xd96>
  405038:	2301      	movs	r3, #1
  40503a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40503c:	9625      	str	r6, [sp, #148]	; 0x94
  40503e:	441c      	add	r4, r3
  405040:	f8cb 2000 	str.w	r2, [fp]
  405044:	f8cb 3004 	str.w	r3, [fp, #4]
  405048:	2c07      	cmp	r4, #7
  40504a:	9424      	str	r4, [sp, #144]	; 0x90
  40504c:	f300 81da 	bgt.w	405404 <_svfprintf_r+0xdd0>
  405050:	f10b 0b08 	add.w	fp, fp, #8
  405054:	9a17      	ldr	r2, [sp, #92]	; 0x5c
  405056:	3401      	adds	r4, #1
  405058:	9b16      	ldr	r3, [sp, #88]	; 0x58
  40505a:	4416      	add	r6, r2
  40505c:	2c07      	cmp	r4, #7
  40505e:	f8cb 3000 	str.w	r3, [fp]
  405062:	9625      	str	r6, [sp, #148]	; 0x94
  405064:	9424      	str	r4, [sp, #144]	; 0x90
  405066:	f8cb 2004 	str.w	r2, [fp, #4]
  40506a:	f300 81bf 	bgt.w	4053ec <_svfprintf_r+0xdb8>
  40506e:	f10b 0b08 	add.w	fp, fp, #8
  405072:	2300      	movs	r3, #0
  405074:	9813      	ldr	r0, [sp, #76]	; 0x4c
  405076:	2200      	movs	r2, #0
  405078:	9914      	ldr	r1, [sp, #80]	; 0x50
  40507a:	f004 fa4b 	bl	409514 <__aeabi_dcmpeq>
  40507e:	9b12      	ldr	r3, [sp, #72]	; 0x48
  405080:	2800      	cmp	r0, #0
  405082:	f040 80dc 	bne.w	40523e <_svfprintf_r+0xc0a>
  405086:	3b01      	subs	r3, #1
  405088:	3401      	adds	r4, #1
  40508a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40508c:	441e      	add	r6, r3
  40508e:	2c07      	cmp	r4, #7
  405090:	f102 0201 	add.w	r2, r2, #1
  405094:	9424      	str	r4, [sp, #144]	; 0x90
  405096:	9625      	str	r6, [sp, #148]	; 0x94
  405098:	f8cb 2000 	str.w	r2, [fp]
  40509c:	f8cb 3004 	str.w	r3, [fp, #4]
  4050a0:	f300 8100 	bgt.w	4052a4 <_svfprintf_r+0xc70>
  4050a4:	f10b 0b08 	add.w	fp, fp, #8
  4050a8:	9a19      	ldr	r2, [sp, #100]	; 0x64
  4050aa:	3401      	adds	r4, #1
  4050ac:	ab1f      	add	r3, sp, #124	; 0x7c
  4050ae:	eb06 0c02 	add.w	ip, r6, r2
  4050b2:	2c07      	cmp	r4, #7
  4050b4:	f8cb 2004 	str.w	r2, [fp, #4]
  4050b8:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
  4050bc:	9424      	str	r4, [sp, #144]	; 0x90
  4050be:	f8cb 3000 	str.w	r3, [fp]
  4050c2:	f77f aca0 	ble.w	404a06 <_svfprintf_r+0x3d2>
  4050c6:	9809      	ldr	r0, [sp, #36]	; 0x24
  4050c8:	4649      	mov	r1, r9
  4050ca:	aa23      	add	r2, sp, #140	; 0x8c
  4050cc:	f003 fc40 	bl	408950 <__ssprint_r>
  4050d0:	2800      	cmp	r0, #0
  4050d2:	f47f ab74 	bne.w	4047be <_svfprintf_r+0x18a>
  4050d6:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
  4050da:	46c3      	mov	fp, r8
  4050dc:	e495      	b.n	404a0a <_svfprintf_r+0x3d6>
  4050de:	9809      	ldr	r0, [sp, #36]	; 0x24
  4050e0:	4649      	mov	r1, r9
  4050e2:	aa23      	add	r2, sp, #140	; 0x8c
  4050e4:	f003 fc34 	bl	408950 <__ssprint_r>
  4050e8:	2800      	cmp	r0, #0
  4050ea:	f43f acde 	beq.w	404aaa <_svfprintf_r+0x476>
  4050ee:	f7ff bb66 	b.w	4047be <_svfprintf_r+0x18a>
  4050f2:	4614      	mov	r4, r2
  4050f4:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
  4050f8:	f7ff bba8 	b.w	40484c <_svfprintf_r+0x218>
  4050fc:	9809      	ldr	r0, [sp, #36]	; 0x24
  4050fe:	4649      	mov	r1, r9
  405100:	aa23      	add	r2, sp, #140	; 0x8c
  405102:	f003 fc25 	bl	408950 <__ssprint_r>
  405106:	2800      	cmp	r0, #0
  405108:	f47f ab59 	bne.w	4047be <_svfprintf_r+0x18a>
  40510c:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
  405110:	46c3      	mov	fp, r8
  405112:	e466      	b.n	4049e2 <_svfprintf_r+0x3ae>
  405114:	9809      	ldr	r0, [sp, #36]	; 0x24
  405116:	4649      	mov	r1, r9
  405118:	aa23      	add	r2, sp, #140	; 0x8c
  40511a:	f003 fc19 	bl	408950 <__ssprint_r>
  40511e:	2800      	cmp	r0, #0
  405120:	f47f ab4d 	bne.w	4047be <_svfprintf_r+0x18a>
  405124:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
  405128:	46c3      	mov	fp, r8
  40512a:	e41a      	b.n	404962 <_svfprintf_r+0x32e>
  40512c:	9809      	ldr	r0, [sp, #36]	; 0x24
  40512e:	4649      	mov	r1, r9
  405130:	aa23      	add	r2, sp, #140	; 0x8c
  405132:	f003 fc0d 	bl	408950 <__ssprint_r>
  405136:	2800      	cmp	r0, #0
  405138:	f47f ab41 	bne.w	4047be <_svfprintf_r+0x18a>
  40513c:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
  405140:	46c3      	mov	fp, r8
  405142:	f7ff bbfa 	b.w	40493a <_svfprintf_r+0x306>
  405146:	4641      	mov	r1, r8
  405148:	08e2      	lsrs	r2, r4, #3
  40514a:	f004 0307 	and.w	r3, r4, #7
  40514e:	08e8      	lsrs	r0, r5, #3
  405150:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
  405154:	3330      	adds	r3, #48	; 0x30
  405156:	4605      	mov	r5, r0
  405158:	4614      	mov	r4, r2
  40515a:	f801 3d01 	strb.w	r3, [r1, #-1]!
  40515e:	ea54 0205 	orrs.w	r2, r4, r5
  405162:	d1f1      	bne.n	405148 <_svfprintf_r+0xb14>
  405164:	9a06      	ldr	r2, [sp, #24]
  405166:	910f      	str	r1, [sp, #60]	; 0x3c
  405168:	07d0      	lsls	r0, r2, #31
  40516a:	f100 8164 	bmi.w	405436 <_svfprintf_r+0xe02>
  40516e:	ebc1 0408 	rsb	r4, r1, r8
  405172:	f7ff bb6b 	b.w	40484c <_svfprintf_r+0x218>
  405176:	2302      	movs	r3, #2
  405178:	f7ff bb3f 	b.w	4047fa <_svfprintf_r+0x1c6>
  40517c:	9c1d      	ldr	r4, [sp, #116]	; 0x74
  40517e:	2c00      	cmp	r4, #0
  405180:	f340 81f6 	ble.w	405570 <_svfprintf_r+0xf3c>
  405184:	9a12      	ldr	r2, [sp, #72]	; 0x48
  405186:	9911      	ldr	r1, [sp, #68]	; 0x44
  405188:	4613      	mov	r3, r2
  40518a:	428a      	cmp	r2, r1
  40518c:	bfa8      	it	ge
  40518e:	460b      	movge	r3, r1
  405190:	990f      	ldr	r1, [sp, #60]	; 0x3c
  405192:	461c      	mov	r4, r3
  405194:	188f      	adds	r7, r1, r2
  405196:	2c00      	cmp	r4, #0
  405198:	dd0e      	ble.n	4051b8 <_svfprintf_r+0xb84>
  40519a:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40519c:	44a4      	add	ip, r4
  40519e:	f8cb 1000 	str.w	r1, [fp]
  4051a2:	3301      	adds	r3, #1
  4051a4:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
  4051a8:	f8cb 4004 	str.w	r4, [fp, #4]
  4051ac:	2b07      	cmp	r3, #7
  4051ae:	9324      	str	r3, [sp, #144]	; 0x90
  4051b0:	f300 8353 	bgt.w	40585a <_svfprintf_r+0x1226>
  4051b4:	f10b 0b08 	add.w	fp, fp, #8
  4051b8:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4051ba:	2c00      	cmp	r4, #0
  4051bc:	bfa8      	it	ge
  4051be:	1b1b      	subge	r3, r3, r4
  4051c0:	2b00      	cmp	r3, #0
  4051c2:	461c      	mov	r4, r3
  4051c4:	f340 80a1 	ble.w	40530a <_svfprintf_r+0xcd6>
  4051c8:	2c10      	cmp	r4, #16
  4051ca:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4051cc:	f340 846c 	ble.w	405aa8 <_svfprintf_r+0x1474>
  4051d0:	2610      	movs	r6, #16
  4051d2:	4d45      	ldr	r5, [pc, #276]	; (4052e8 <_svfprintf_r+0xcb4>)
  4051d4:	4662      	mov	r2, ip
  4051d6:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
  4051da:	e003      	b.n	4051e4 <_svfprintf_r+0xbb0>
  4051dc:	3c10      	subs	r4, #16
  4051de:	2c10      	cmp	r4, #16
  4051e0:	f340 8084 	ble.w	4052ec <_svfprintf_r+0xcb8>
  4051e4:	3301      	adds	r3, #1
  4051e6:	3210      	adds	r2, #16
  4051e8:	f8cb 5000 	str.w	r5, [fp]
  4051ec:	f10b 0b08 	add.w	fp, fp, #8
  4051f0:	2b07      	cmp	r3, #7
  4051f2:	f84b 6c04 	str.w	r6, [fp, #-4]
  4051f6:	9225      	str	r2, [sp, #148]	; 0x94
  4051f8:	9324      	str	r3, [sp, #144]	; 0x90
  4051fa:	ddef      	ble.n	4051dc <_svfprintf_r+0xba8>
  4051fc:	4650      	mov	r0, sl
  4051fe:	4649      	mov	r1, r9
  405200:	aa23      	add	r2, sp, #140	; 0x8c
  405202:	46c3      	mov	fp, r8
  405204:	f003 fba4 	bl	408950 <__ssprint_r>
  405208:	2800      	cmp	r0, #0
  40520a:	f47f aad8 	bne.w	4047be <_svfprintf_r+0x18a>
  40520e:	9a25      	ldr	r2, [sp, #148]	; 0x94
  405210:	9b24      	ldr	r3, [sp, #144]	; 0x90
  405212:	e7e3      	b.n	4051dc <_svfprintf_r+0xba8>
  405214:	2d00      	cmp	r5, #0
  405216:	bf08      	it	eq
  405218:	2c0a      	cmpeq	r4, #10
  40521a:	f080 811a 	bcs.w	405452 <_svfprintf_r+0xe1e>
  40521e:	f50d 7a80 	add.w	sl, sp, #256	; 0x100
  405222:	3430      	adds	r4, #48	; 0x30
  405224:	f80a 4d41 	strb.w	r4, [sl, #-65]!
  405228:	ebca 0408 	rsb	r4, sl, r8
  40522c:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
  405230:	f7ff bb0c 	b.w	40484c <_svfprintf_r+0x218>
  405234:	461c      	mov	r4, r3
  405236:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
  40523a:	f7ff bb07 	b.w	40484c <_svfprintf_r+0x218>
  40523e:	1e5f      	subs	r7, r3, #1
  405240:	2f00      	cmp	r7, #0
  405242:	f77f af31 	ble.w	4050a8 <_svfprintf_r+0xa74>
  405246:	2f10      	cmp	r7, #16
  405248:	4d27      	ldr	r5, [pc, #156]	; (4052e8 <_svfprintf_r+0xcb4>)
  40524a:	bfc8      	it	gt
  40524c:	f04f 0a10 	movgt.w	sl, #16
  405250:	dc03      	bgt.n	40525a <_svfprintf_r+0xc26>
  405252:	e01c      	b.n	40528e <_svfprintf_r+0xc5a>
  405254:	3f10      	subs	r7, #16
  405256:	2f10      	cmp	r7, #16
  405258:	dd19      	ble.n	40528e <_svfprintf_r+0xc5a>
  40525a:	3401      	adds	r4, #1
  40525c:	3610      	adds	r6, #16
  40525e:	f8cb 5000 	str.w	r5, [fp]
  405262:	f10b 0b08 	add.w	fp, fp, #8
  405266:	2c07      	cmp	r4, #7
  405268:	f84b ac04 	str.w	sl, [fp, #-4]
  40526c:	9625      	str	r6, [sp, #148]	; 0x94
  40526e:	9424      	str	r4, [sp, #144]	; 0x90
  405270:	ddf0      	ble.n	405254 <_svfprintf_r+0xc20>
  405272:	9809      	ldr	r0, [sp, #36]	; 0x24
  405274:	4649      	mov	r1, r9
  405276:	aa23      	add	r2, sp, #140	; 0x8c
  405278:	46c3      	mov	fp, r8
  40527a:	f003 fb69 	bl	408950 <__ssprint_r>
  40527e:	2800      	cmp	r0, #0
  405280:	f47f aa9d 	bne.w	4047be <_svfprintf_r+0x18a>
  405284:	3f10      	subs	r7, #16
  405286:	9e25      	ldr	r6, [sp, #148]	; 0x94
  405288:	9c24      	ldr	r4, [sp, #144]	; 0x90
  40528a:	2f10      	cmp	r7, #16
  40528c:	dce5      	bgt.n	40525a <_svfprintf_r+0xc26>
  40528e:	3401      	adds	r4, #1
  405290:	443e      	add	r6, r7
  405292:	f8cb 5000 	str.w	r5, [fp]
  405296:	2c07      	cmp	r4, #7
  405298:	9625      	str	r6, [sp, #148]	; 0x94
  40529a:	9424      	str	r4, [sp, #144]	; 0x90
  40529c:	f8cb 7004 	str.w	r7, [fp, #4]
  4052a0:	f77f af00 	ble.w	4050a4 <_svfprintf_r+0xa70>
  4052a4:	9809      	ldr	r0, [sp, #36]	; 0x24
  4052a6:	4649      	mov	r1, r9
  4052a8:	aa23      	add	r2, sp, #140	; 0x8c
  4052aa:	f003 fb51 	bl	408950 <__ssprint_r>
  4052ae:	2800      	cmp	r0, #0
  4052b0:	f47f aa85 	bne.w	4047be <_svfprintf_r+0x18a>
  4052b4:	9e25      	ldr	r6, [sp, #148]	; 0x94
  4052b6:	46c3      	mov	fp, r8
  4052b8:	9c24      	ldr	r4, [sp, #144]	; 0x90
  4052ba:	e6f5      	b.n	4050a8 <_svfprintf_r+0xa74>
  4052bc:	4694      	mov	ip, r2
  4052be:	3301      	adds	r3, #1
  4052c0:	44a4      	add	ip, r4
  4052c2:	f8cb 5000 	str.w	r5, [fp]
  4052c6:	2b07      	cmp	r3, #7
  4052c8:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
  4052cc:	9324      	str	r3, [sp, #144]	; 0x90
  4052ce:	f8cb 4004 	str.w	r4, [fp, #4]
  4052d2:	f77f ab98 	ble.w	404a06 <_svfprintf_r+0x3d2>
  4052d6:	e6f6      	b.n	4050c6 <_svfprintf_r+0xa92>
  4052d8:	990c      	ldr	r1, [sp, #48]	; 0x30
  4052da:	2500      	movs	r5, #0
  4052dc:	460a      	mov	r2, r1
  4052de:	680c      	ldr	r4, [r1, #0]
  4052e0:	3204      	adds	r2, #4
  4052e2:	920c      	str	r2, [sp, #48]	; 0x30
  4052e4:	f7ff ba89 	b.w	4047fa <_svfprintf_r+0x1c6>
  4052e8:	00409cc0 	.word	0x00409cc0
  4052ec:	4694      	mov	ip, r2
  4052ee:	3301      	adds	r3, #1
  4052f0:	44a4      	add	ip, r4
  4052f2:	f8cb 5000 	str.w	r5, [fp]
  4052f6:	2b07      	cmp	r3, #7
  4052f8:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
  4052fc:	9324      	str	r3, [sp, #144]	; 0x90
  4052fe:	f8cb 4004 	str.w	r4, [fp, #4]
  405302:	f300 82df 	bgt.w	4058c4 <_svfprintf_r+0x1290>
  405306:	f10b 0b08 	add.w	fp, fp, #8
  40530a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40530c:	9911      	ldr	r1, [sp, #68]	; 0x44
  40530e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  405310:	440a      	add	r2, r1
  405312:	4616      	mov	r6, r2
  405314:	9a12      	ldr	r2, [sp, #72]	; 0x48
  405316:	4293      	cmp	r3, r2
  405318:	db45      	blt.n	4053a6 <_svfprintf_r+0xd72>
  40531a:	9a06      	ldr	r2, [sp, #24]
  40531c:	07d0      	lsls	r0, r2, #31
  40531e:	d442      	bmi.n	4053a6 <_svfprintf_r+0xd72>
  405320:	9a12      	ldr	r2, [sp, #72]	; 0x48
  405322:	1bbc      	subs	r4, r7, r6
  405324:	1ad3      	subs	r3, r2, r3
  405326:	429c      	cmp	r4, r3
  405328:	bfa8      	it	ge
  40532a:	461c      	movge	r4, r3
  40532c:	2c00      	cmp	r4, #0
  40532e:	4625      	mov	r5, r4
  405330:	dd0e      	ble.n	405350 <_svfprintf_r+0xd1c>
  405332:	9a24      	ldr	r2, [sp, #144]	; 0x90
  405334:	44a4      	add	ip, r4
  405336:	f8cb 6000 	str.w	r6, [fp]
  40533a:	3201      	adds	r2, #1
  40533c:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
  405340:	f8cb 4004 	str.w	r4, [fp, #4]
  405344:	2a07      	cmp	r2, #7
  405346:	9224      	str	r2, [sp, #144]	; 0x90
  405348:	f300 82a0 	bgt.w	40588c <_svfprintf_r+0x1258>
  40534c:	f10b 0b08 	add.w	fp, fp, #8
  405350:	2d00      	cmp	r5, #0
  405352:	bfac      	ite	ge
  405354:	1b5c      	subge	r4, r3, r5
  405356:	461c      	movlt	r4, r3
  405358:	2c00      	cmp	r4, #0
  40535a:	f77f ab56 	ble.w	404a0a <_svfprintf_r+0x3d6>
  40535e:	2c10      	cmp	r4, #16
  405360:	9b24      	ldr	r3, [sp, #144]	; 0x90
  405362:	f340 8396 	ble.w	405a92 <_svfprintf_r+0x145e>
  405366:	2610      	movs	r6, #16
  405368:	4db1      	ldr	r5, [pc, #708]	; (405630 <_svfprintf_r+0xffc>)
  40536a:	4662      	mov	r2, ip
  40536c:	9f09      	ldr	r7, [sp, #36]	; 0x24
  40536e:	e002      	b.n	405376 <_svfprintf_r+0xd42>
  405370:	3c10      	subs	r4, #16
  405372:	2c10      	cmp	r4, #16
  405374:	dda2      	ble.n	4052bc <_svfprintf_r+0xc88>
  405376:	3301      	adds	r3, #1
  405378:	3210      	adds	r2, #16
  40537a:	f8cb 5000 	str.w	r5, [fp]
  40537e:	f10b 0b08 	add.w	fp, fp, #8
  405382:	2b07      	cmp	r3, #7
  405384:	f84b 6c04 	str.w	r6, [fp, #-4]
  405388:	9225      	str	r2, [sp, #148]	; 0x94
  40538a:	9324      	str	r3, [sp, #144]	; 0x90
  40538c:	ddf0      	ble.n	405370 <_svfprintf_r+0xd3c>
  40538e:	4638      	mov	r0, r7
  405390:	4649      	mov	r1, r9
  405392:	aa23      	add	r2, sp, #140	; 0x8c
  405394:	46c3      	mov	fp, r8
  405396:	f003 fadb 	bl	408950 <__ssprint_r>
  40539a:	2800      	cmp	r0, #0
  40539c:	f47f aa0f 	bne.w	4047be <_svfprintf_r+0x18a>
  4053a0:	9a25      	ldr	r2, [sp, #148]	; 0x94
  4053a2:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4053a4:	e7e4      	b.n	405370 <_svfprintf_r+0xd3c>
  4053a6:	9a24      	ldr	r2, [sp, #144]	; 0x90
  4053a8:	9817      	ldr	r0, [sp, #92]	; 0x5c
  4053aa:	3201      	adds	r2, #1
  4053ac:	9916      	ldr	r1, [sp, #88]	; 0x58
  4053ae:	4484      	add	ip, r0
  4053b0:	f8cb 0004 	str.w	r0, [fp, #4]
  4053b4:	2a07      	cmp	r2, #7
  4053b6:	f8cb 1000 	str.w	r1, [fp]
  4053ba:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
  4053be:	9224      	str	r2, [sp, #144]	; 0x90
  4053c0:	f300 8273 	bgt.w	4058aa <_svfprintf_r+0x1276>
  4053c4:	f10b 0b08 	add.w	fp, fp, #8
  4053c8:	e7aa      	b.n	405320 <_svfprintf_r+0xcec>
  4053ca:	9b06      	ldr	r3, [sp, #24]
  4053cc:	07d9      	lsls	r1, r3, #31
  4053ce:	f53f ae33 	bmi.w	405038 <_svfprintf_r+0xa04>
  4053d2:	2301      	movs	r3, #1
  4053d4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4053d6:	9625      	str	r6, [sp, #148]	; 0x94
  4053d8:	441c      	add	r4, r3
  4053da:	f8cb 2000 	str.w	r2, [fp]
  4053de:	f8cb 3004 	str.w	r3, [fp, #4]
  4053e2:	2c07      	cmp	r4, #7
  4053e4:	9424      	str	r4, [sp, #144]	; 0x90
  4053e6:	f77f ae5d 	ble.w	4050a4 <_svfprintf_r+0xa70>
  4053ea:	e75b      	b.n	4052a4 <_svfprintf_r+0xc70>
  4053ec:	9809      	ldr	r0, [sp, #36]	; 0x24
  4053ee:	4649      	mov	r1, r9
  4053f0:	aa23      	add	r2, sp, #140	; 0x8c
  4053f2:	f003 faad 	bl	408950 <__ssprint_r>
  4053f6:	2800      	cmp	r0, #0
  4053f8:	f47f a9e1 	bne.w	4047be <_svfprintf_r+0x18a>
  4053fc:	9e25      	ldr	r6, [sp, #148]	; 0x94
  4053fe:	46c3      	mov	fp, r8
  405400:	9c24      	ldr	r4, [sp, #144]	; 0x90
  405402:	e636      	b.n	405072 <_svfprintf_r+0xa3e>
  405404:	9809      	ldr	r0, [sp, #36]	; 0x24
  405406:	4649      	mov	r1, r9
  405408:	aa23      	add	r2, sp, #140	; 0x8c
  40540a:	f003 faa1 	bl	408950 <__ssprint_r>
  40540e:	2800      	cmp	r0, #0
  405410:	f47f a9d5 	bne.w	4047be <_svfprintf_r+0x18a>
  405414:	9e25      	ldr	r6, [sp, #148]	; 0x94
  405416:	46c3      	mov	fp, r8
  405418:	9c24      	ldr	r4, [sp, #144]	; 0x90
  40541a:	e61b      	b.n	405054 <_svfprintf_r+0xa20>
  40541c:	9809      	ldr	r0, [sp, #36]	; 0x24
  40541e:	4649      	mov	r1, r9
  405420:	aa23      	add	r2, sp, #140	; 0x8c
  405422:	f003 fa95 	bl	408950 <__ssprint_r>
  405426:	2800      	cmp	r0, #0
  405428:	f47f a9c9 	bne.w	4047be <_svfprintf_r+0x18a>
  40542c:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
  405430:	46c3      	mov	fp, r8
  405432:	f7ff ba9a 	b.w	40496a <_svfprintf_r+0x336>
  405436:	2b30      	cmp	r3, #48	; 0x30
  405438:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40543a:	f43f adb4 	beq.w	404fa6 <_svfprintf_r+0x972>
  40543e:	3b01      	subs	r3, #1
  405440:	461a      	mov	r2, r3
  405442:	930f      	str	r3, [sp, #60]	; 0x3c
  405444:	2330      	movs	r3, #48	; 0x30
  405446:	ebc2 0408 	rsb	r4, r2, r8
  40544a:	f801 3c01 	strb.w	r3, [r1, #-1]
  40544e:	f7ff b9fd 	b.w	40484c <_svfprintf_r+0x218>
  405452:	46c2      	mov	sl, r8
  405454:	f8cd c01c 	str.w	ip, [sp, #28]
  405458:	4620      	mov	r0, r4
  40545a:	4629      	mov	r1, r5
  40545c:	220a      	movs	r2, #10
  40545e:	2300      	movs	r3, #0
  405460:	f004 f8b2 	bl	4095c8 <__aeabi_uldivmod>
  405464:	f102 0e30 	add.w	lr, r2, #48	; 0x30
  405468:	4620      	mov	r0, r4
  40546a:	4629      	mov	r1, r5
  40546c:	2300      	movs	r3, #0
  40546e:	220a      	movs	r2, #10
  405470:	f80a ed01 	strb.w	lr, [sl, #-1]!
  405474:	f004 f8a8 	bl	4095c8 <__aeabi_uldivmod>
  405478:	4604      	mov	r4, r0
  40547a:	460d      	mov	r5, r1
  40547c:	ea54 0305 	orrs.w	r3, r4, r5
  405480:	d1ea      	bne.n	405458 <_svfprintf_r+0xe24>
  405482:	f8dd c01c 	ldr.w	ip, [sp, #28]
  405486:	ebca 0408 	rsb	r4, sl, r8
  40548a:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
  40548e:	f7ff b9dd 	b.w	40484c <_svfprintf_r+0x218>
  405492:	9813      	ldr	r0, [sp, #76]	; 0x4c
  405494:	9914      	ldr	r1, [sp, #80]	; 0x50
  405496:	f8cd c01c 	str.w	ip, [sp, #28]
  40549a:	f003 f9e1 	bl	408860 <__fpclassifyd>
  40549e:	f8dd c01c 	ldr.w	ip, [sp, #28]
  4054a2:	2800      	cmp	r0, #0
  4054a4:	f040 80cc 	bne.w	405640 <_svfprintf_r+0x100c>
  4054a8:	9c06      	ldr	r4, [sp, #24]
  4054aa:	2103      	movs	r1, #3
  4054ac:	4a61      	ldr	r2, [pc, #388]	; (405634 <_svfprintf_r+0x1000>)
  4054ae:	4b62      	ldr	r3, [pc, #392]	; (405638 <_svfprintf_r+0x1004>)
  4054b0:	f024 0480 	bic.w	r4, r4, #128	; 0x80
  4054b4:	9010      	str	r0, [sp, #64]	; 0x40
  4054b6:	2e47      	cmp	r6, #71	; 0x47
  4054b8:	bfd8      	it	le
  4054ba:	461a      	movle	r2, r3
  4054bc:	9406      	str	r4, [sp, #24]
  4054be:	9107      	str	r1, [sp, #28]
  4054c0:	460c      	mov	r4, r1
  4054c2:	9011      	str	r0, [sp, #68]	; 0x44
  4054c4:	920f      	str	r2, [sp, #60]	; 0x3c
  4054c6:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  4054ca:	f7ff b9c6 	b.w	40485a <_svfprintf_r+0x226>
  4054ce:	9b06      	ldr	r3, [sp, #24]
  4054d0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  4054d2:	f013 0f40 	tst.w	r3, #64	; 0x40
  4054d6:	4613      	mov	r3, r2
  4054d8:	f43f abc9 	beq.w	404c6e <_svfprintf_r+0x63a>
  4054dc:	8814      	ldrh	r4, [r2, #0]
  4054de:	3204      	adds	r2, #4
  4054e0:	2500      	movs	r5, #0
  4054e2:	2301      	movs	r3, #1
  4054e4:	920c      	str	r2, [sp, #48]	; 0x30
  4054e6:	f7ff b988 	b.w	4047fa <_svfprintf_r+0x1c6>
  4054ea:	9b06      	ldr	r3, [sp, #24]
  4054ec:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  4054ee:	f013 0f40 	tst.w	r3, #64	; 0x40
  4054f2:	4613      	mov	r3, r2
  4054f4:	f000 8130 	beq.w	405758 <_svfprintf_r+0x1124>
  4054f8:	3304      	adds	r3, #4
  4054fa:	8814      	ldrh	r4, [r2, #0]
  4054fc:	2500      	movs	r5, #0
  4054fe:	930c      	str	r3, [sp, #48]	; 0x30
  405500:	f7ff bbcd 	b.w	404c9e <_svfprintf_r+0x66a>
  405504:	9b06      	ldr	r3, [sp, #24]
  405506:	06dd      	lsls	r5, r3, #27
  405508:	d40b      	bmi.n	405522 <_svfprintf_r+0xeee>
  40550a:	9b06      	ldr	r3, [sp, #24]
  40550c:	065c      	lsls	r4, r3, #25
  40550e:	d508      	bpl.n	405522 <_svfprintf_r+0xeee>
  405510:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  405512:	6813      	ldr	r3, [r2, #0]
  405514:	3204      	adds	r2, #4
  405516:	920c      	str	r2, [sp, #48]	; 0x30
  405518:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
  40551c:	801a      	strh	r2, [r3, #0]
  40551e:	f7ff b8af 	b.w	404680 <_svfprintf_r+0x4c>
  405522:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  405524:	6813      	ldr	r3, [r2, #0]
  405526:	3204      	adds	r2, #4
  405528:	920c      	str	r2, [sp, #48]	; 0x30
  40552a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40552c:	601a      	str	r2, [r3, #0]
  40552e:	f7ff b8a7 	b.w	404680 <_svfprintf_r+0x4c>
  405532:	9b06      	ldr	r3, [sp, #24]
  405534:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  405536:	f013 0f40 	tst.w	r3, #64	; 0x40
  40553a:	4613      	mov	r3, r2
  40553c:	f43f ac26 	beq.w	404d8c <_svfprintf_r+0x758>
  405540:	f9b2 4000 	ldrsh.w	r4, [r2]
  405544:	3304      	adds	r3, #4
  405546:	17e5      	asrs	r5, r4, #31
  405548:	930c      	str	r3, [sp, #48]	; 0x30
  40554a:	4622      	mov	r2, r4
  40554c:	462b      	mov	r3, r5
  40554e:	f7ff baf9 	b.w	404b44 <_svfprintf_r+0x510>
  405552:	4d37      	ldr	r5, [pc, #220]	; (405630 <_svfprintf_r+0xffc>)
  405554:	f7ff ba37 	b.w	4049c6 <_svfprintf_r+0x392>
  405558:	9809      	ldr	r0, [sp, #36]	; 0x24
  40555a:	4649      	mov	r1, r9
  40555c:	aa23      	add	r2, sp, #140	; 0x8c
  40555e:	f003 f9f7 	bl	408950 <__ssprint_r>
  405562:	2800      	cmp	r0, #0
  405564:	f47f a92b 	bne.w	4047be <_svfprintf_r+0x18a>
  405568:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
  40556c:	46c3      	mov	fp, r8
  40556e:	e4b2      	b.n	404ed6 <_svfprintf_r+0x8a2>
  405570:	9b24      	ldr	r3, [sp, #144]	; 0x90
  405572:	2201      	movs	r2, #1
  405574:	f10c 0c01 	add.w	ip, ip, #1
  405578:	4930      	ldr	r1, [pc, #192]	; (40563c <_svfprintf_r+0x1008>)
  40557a:	4413      	add	r3, r2
  40557c:	f8cb 2004 	str.w	r2, [fp, #4]
  405580:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
  405584:	2b07      	cmp	r3, #7
  405586:	f8cb 1000 	str.w	r1, [fp]
  40558a:	9324      	str	r3, [sp, #144]	; 0x90
  40558c:	f300 80fa 	bgt.w	405784 <_svfprintf_r+0x1150>
  405590:	f10b 0b08 	add.w	fp, fp, #8
  405594:	b92c      	cbnz	r4, 4055a2 <_svfprintf_r+0xf6e>
  405596:	9b12      	ldr	r3, [sp, #72]	; 0x48
  405598:	b91b      	cbnz	r3, 4055a2 <_svfprintf_r+0xf6e>
  40559a:	9b06      	ldr	r3, [sp, #24]
  40559c:	07dd      	lsls	r5, r3, #31
  40559e:	f57f aa34 	bpl.w	404a0a <_svfprintf_r+0x3d6>
  4055a2:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4055a4:	9917      	ldr	r1, [sp, #92]	; 0x5c
  4055a6:	3301      	adds	r3, #1
  4055a8:	9816      	ldr	r0, [sp, #88]	; 0x58
  4055aa:	eb0c 0201 	add.w	r2, ip, r1
  4055ae:	f8cb 1004 	str.w	r1, [fp, #4]
  4055b2:	2b07      	cmp	r3, #7
  4055b4:	f8cb 0000 	str.w	r0, [fp]
  4055b8:	9225      	str	r2, [sp, #148]	; 0x94
  4055ba:	9324      	str	r3, [sp, #144]	; 0x90
  4055bc:	f300 824c 	bgt.w	405a58 <_svfprintf_r+0x1424>
  4055c0:	f10b 0b08 	add.w	fp, fp, #8
  4055c4:	4264      	negs	r4, r4
  4055c6:	2c00      	cmp	r4, #0
  4055c8:	f340 8126 	ble.w	405818 <_svfprintf_r+0x11e4>
  4055cc:	2c10      	cmp	r4, #16
  4055ce:	4d18      	ldr	r5, [pc, #96]	; (405630 <_svfprintf_r+0xffc>)
  4055d0:	f340 814f 	ble.w	405872 <_svfprintf_r+0x123e>
  4055d4:	2610      	movs	r6, #16
  4055d6:	9f09      	ldr	r7, [sp, #36]	; 0x24
  4055d8:	e003      	b.n	4055e2 <_svfprintf_r+0xfae>
  4055da:	3c10      	subs	r4, #16
  4055dc:	2c10      	cmp	r4, #16
  4055de:	f340 8148 	ble.w	405872 <_svfprintf_r+0x123e>
  4055e2:	3301      	adds	r3, #1
  4055e4:	3210      	adds	r2, #16
  4055e6:	f8cb 5000 	str.w	r5, [fp]
  4055ea:	f10b 0b08 	add.w	fp, fp, #8
  4055ee:	2b07      	cmp	r3, #7
  4055f0:	f84b 6c04 	str.w	r6, [fp, #-4]
  4055f4:	9225      	str	r2, [sp, #148]	; 0x94
  4055f6:	9324      	str	r3, [sp, #144]	; 0x90
  4055f8:	ddef      	ble.n	4055da <_svfprintf_r+0xfa6>
  4055fa:	4638      	mov	r0, r7
  4055fc:	4649      	mov	r1, r9
  4055fe:	aa23      	add	r2, sp, #140	; 0x8c
  405600:	46c3      	mov	fp, r8
  405602:	f003 f9a5 	bl	408950 <__ssprint_r>
  405606:	2800      	cmp	r0, #0
  405608:	f47f a8d9 	bne.w	4047be <_svfprintf_r+0x18a>
  40560c:	9a25      	ldr	r2, [sp, #148]	; 0x94
  40560e:	9b24      	ldr	r3, [sp, #144]	; 0x90
  405610:	e7e3      	b.n	4055da <_svfprintf_r+0xfa6>
  405612:	f041 0120 	orr.w	r1, r1, #32
  405616:	785e      	ldrb	r6, [r3, #1]
  405618:	9106      	str	r1, [sp, #24]
  40561a:	1c59      	adds	r1, r3, #1
  40561c:	f7ff b85f 	b.w	4046de <_svfprintf_r+0xaa>
  405620:	980b      	ldr	r0, [sp, #44]	; 0x2c
  405622:	910c      	str	r1, [sp, #48]	; 0x30
  405624:	4619      	mov	r1, r3
  405626:	4240      	negs	r0, r0
  405628:	900b      	str	r0, [sp, #44]	; 0x2c
  40562a:	f7ff ba43 	b.w	404ab4 <_svfprintf_r+0x480>
  40562e:	bf00      	nop
  405630:	00409cc0 	.word	0x00409cc0
  405634:	00409cec 	.word	0x00409cec
  405638:	00409ce8 	.word	0x00409ce8
  40563c:	00409d20 	.word	0x00409d20
  405640:	f1bc 3fff 	cmp.w	ip, #4294967295
  405644:	f026 0a20 	bic.w	sl, r6, #32
  405648:	f000 80a9 	beq.w	40579e <_svfprintf_r+0x116a>
  40564c:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
  405650:	f040 80a7 	bne.w	4057a2 <_svfprintf_r+0x116e>
  405654:	f1bc 0f00 	cmp.w	ip, #0
  405658:	f040 80a3 	bne.w	4057a2 <_svfprintf_r+0x116e>
  40565c:	9b06      	ldr	r3, [sp, #24]
  40565e:	f04f 0a47 	mov.w	sl, #71	; 0x47
  405662:	f04f 0c01 	mov.w	ip, #1
  405666:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  40566a:	930e      	str	r3, [sp, #56]	; 0x38
  40566c:	9b14      	ldr	r3, [sp, #80]	; 0x50
  40566e:	2b00      	cmp	r3, #0
  405670:	f2c0 81ff 	blt.w	405a72 <_svfprintf_r+0x143e>
  405674:	461d      	mov	r5, r3
  405676:	9f13      	ldr	r7, [sp, #76]	; 0x4c
  405678:	2300      	movs	r3, #0
  40567a:	930d      	str	r3, [sp, #52]	; 0x34
  40567c:	2002      	movs	r0, #2
  40567e:	a91d      	add	r1, sp, #116	; 0x74
  405680:	f8cd c004 	str.w	ip, [sp, #4]
  405684:	463a      	mov	r2, r7
  405686:	9000      	str	r0, [sp, #0]
  405688:	a81e      	add	r0, sp, #120	; 0x78
  40568a:	9102      	str	r1, [sp, #8]
  40568c:	a921      	add	r1, sp, #132	; 0x84
  40568e:	9003      	str	r0, [sp, #12]
  405690:	462b      	mov	r3, r5
  405692:	9809      	ldr	r0, [sp, #36]	; 0x24
  405694:	9104      	str	r1, [sp, #16]
  405696:	f8cd c01c 	str.w	ip, [sp, #28]
  40569a:	f000 fbb9 	bl	405e10 <_dtoa_r>
  40569e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
  4056a2:	900f      	str	r0, [sp, #60]	; 0x3c
  4056a4:	f8dd c01c 	ldr.w	ip, [sp, #28]
  4056a8:	f040 8242 	bne.w	405b30 <_svfprintf_r+0x14fc>
  4056ac:	9b06      	ldr	r3, [sp, #24]
  4056ae:	07db      	lsls	r3, r3, #31
  4056b0:	f140 81f3 	bpl.w	405a9a <_svfprintf_r+0x1466>
  4056b4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4056b6:	eb03 040c 	add.w	r4, r3, ip
  4056ba:	4638      	mov	r0, r7
  4056bc:	2200      	movs	r2, #0
  4056be:	2300      	movs	r3, #0
  4056c0:	4629      	mov	r1, r5
  4056c2:	f8cd c01c 	str.w	ip, [sp, #28]
  4056c6:	f003 ff25 	bl	409514 <__aeabi_dcmpeq>
  4056ca:	f8dd c01c 	ldr.w	ip, [sp, #28]
  4056ce:	2800      	cmp	r0, #0
  4056d0:	f040 8172 	bne.w	4059b8 <_svfprintf_r+0x1384>
  4056d4:	9b21      	ldr	r3, [sp, #132]	; 0x84
  4056d6:	429c      	cmp	r4, r3
  4056d8:	d906      	bls.n	4056e8 <_svfprintf_r+0x10b4>
  4056da:	2130      	movs	r1, #48	; 0x30
  4056dc:	1c5a      	adds	r2, r3, #1
  4056de:	9221      	str	r2, [sp, #132]	; 0x84
  4056e0:	7019      	strb	r1, [r3, #0]
  4056e2:	9b21      	ldr	r3, [sp, #132]	; 0x84
  4056e4:	429c      	cmp	r4, r3
  4056e6:	d8f9      	bhi.n	4056dc <_svfprintf_r+0x10a8>
  4056e8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4056ea:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
  4056ee:	eba3 0302 	sub.w	r3, r3, r2
  4056f2:	9312      	str	r3, [sp, #72]	; 0x48
  4056f4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  4056f6:	f040 8113 	bne.w	405920 <_svfprintf_r+0x12ec>
  4056fa:	459c      	cmp	ip, r3
  4056fc:	f2c0 8168 	blt.w	4059d0 <_svfprintf_r+0x139c>
  405700:	1cd9      	adds	r1, r3, #3
  405702:	f2c0 8165 	blt.w	4059d0 <_svfprintf_r+0x139c>
  405706:	2667      	movs	r6, #103	; 0x67
  405708:	9311      	str	r3, [sp, #68]	; 0x44
  40570a:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40570c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40570e:	4293      	cmp	r3, r2
  405710:	f300 81b6 	bgt.w	405a80 <_svfprintf_r+0x144c>
  405714:	9b06      	ldr	r3, [sp, #24]
  405716:	07df      	lsls	r7, r3, #31
  405718:	f100 81c1 	bmi.w	405a9e <_svfprintf_r+0x146a>
  40571c:	4614      	mov	r4, r2
  40571e:	ea22 7ce2 	bic.w	ip, r2, r2, asr #31
  405722:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  405724:	2b00      	cmp	r3, #0
  405726:	f040 80f0 	bne.w	40590a <_svfprintf_r+0x12d6>
  40572a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40572c:	f8cd c01c 	str.w	ip, [sp, #28]
  405730:	9306      	str	r3, [sp, #24]
  405732:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  405734:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  405738:	9310      	str	r3, [sp, #64]	; 0x40
  40573a:	f7ff b88e 	b.w	40485a <_svfprintf_r+0x226>
  40573e:	9809      	ldr	r0, [sp, #36]	; 0x24
  405740:	4649      	mov	r1, r9
  405742:	aa23      	add	r2, sp, #140	; 0x8c
  405744:	f003 f904 	bl	408950 <__ssprint_r>
  405748:	2800      	cmp	r0, #0
  40574a:	f47f a838 	bne.w	4047be <_svfprintf_r+0x18a>
  40574e:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
  405752:	46c3      	mov	fp, r8
  405754:	f7ff bbd8 	b.w	404f08 <_svfprintf_r+0x8d4>
  405758:	3304      	adds	r3, #4
  40575a:	6814      	ldr	r4, [r2, #0]
  40575c:	2500      	movs	r5, #0
  40575e:	930c      	str	r3, [sp, #48]	; 0x30
  405760:	f7ff ba9d 	b.w	404c9e <_svfprintf_r+0x66a>
  405764:	9809      	ldr	r0, [sp, #36]	; 0x24
  405766:	2140      	movs	r1, #64	; 0x40
  405768:	f001 ff82 	bl	407670 <_malloc_r>
  40576c:	f8c9 0000 	str.w	r0, [r9]
  405770:	f8c9 0010 	str.w	r0, [r9, #16]
  405774:	2800      	cmp	r0, #0
  405776:	f000 81d4 	beq.w	405b22 <_svfprintf_r+0x14ee>
  40577a:	2340      	movs	r3, #64	; 0x40
  40577c:	f8c9 3014 	str.w	r3, [r9, #20]
  405780:	f7fe bf70 	b.w	404664 <_svfprintf_r+0x30>
  405784:	9809      	ldr	r0, [sp, #36]	; 0x24
  405786:	4649      	mov	r1, r9
  405788:	aa23      	add	r2, sp, #140	; 0x8c
  40578a:	f003 f8e1 	bl	408950 <__ssprint_r>
  40578e:	2800      	cmp	r0, #0
  405790:	f47f a815 	bne.w	4047be <_svfprintf_r+0x18a>
  405794:	9c1d      	ldr	r4, [sp, #116]	; 0x74
  405796:	46c3      	mov	fp, r8
  405798:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
  40579c:	e6fa      	b.n	405594 <_svfprintf_r+0xf60>
  40579e:	f04f 0c06 	mov.w	ip, #6
  4057a2:	9b06      	ldr	r3, [sp, #24]
  4057a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  4057a8:	930e      	str	r3, [sp, #56]	; 0x38
  4057aa:	9b14      	ldr	r3, [sp, #80]	; 0x50
  4057ac:	2b00      	cmp	r3, #0
  4057ae:	f2c0 8160 	blt.w	405a72 <_svfprintf_r+0x143e>
  4057b2:	461d      	mov	r5, r3
  4057b4:	9f13      	ldr	r7, [sp, #76]	; 0x4c
  4057b6:	2300      	movs	r3, #0
  4057b8:	930d      	str	r3, [sp, #52]	; 0x34
  4057ba:	f1ba 0f46 	cmp.w	sl, #70	; 0x46
  4057be:	f000 80c4 	beq.w	40594a <_svfprintf_r+0x1316>
  4057c2:	f1ba 0f45 	cmp.w	sl, #69	; 0x45
  4057c6:	f47f af59 	bne.w	40567c <_svfprintf_r+0x1048>
  4057ca:	f10c 0401 	add.w	r4, ip, #1
  4057ce:	f8cd c01c 	str.w	ip, [sp, #28]
  4057d2:	f10d 0e74 	add.w	lr, sp, #116	; 0x74
  4057d6:	f10d 0c84 	add.w	ip, sp, #132	; 0x84
  4057da:	a81e      	add	r0, sp, #120	; 0x78
  4057dc:	2102      	movs	r1, #2
  4057de:	f8cd c010 	str.w	ip, [sp, #16]
  4057e2:	463a      	mov	r2, r7
  4057e4:	9003      	str	r0, [sp, #12]
  4057e6:	462b      	mov	r3, r5
  4057e8:	9401      	str	r4, [sp, #4]
  4057ea:	9100      	str	r1, [sp, #0]
  4057ec:	f8cd e008 	str.w	lr, [sp, #8]
  4057f0:	9809      	ldr	r0, [sp, #36]	; 0x24
  4057f2:	f000 fb0d 	bl	405e10 <_dtoa_r>
  4057f6:	f8dd c01c 	ldr.w	ip, [sp, #28]
  4057fa:	900f      	str	r0, [sp, #60]	; 0x3c
  4057fc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4057fe:	441c      	add	r4, r3
  405800:	e75b      	b.n	4056ba <_svfprintf_r+0x1086>
  405802:	9809      	ldr	r0, [sp, #36]	; 0x24
  405804:	4649      	mov	r1, r9
  405806:	aa23      	add	r2, sp, #140	; 0x8c
  405808:	f003 f8a2 	bl	408950 <__ssprint_r>
  40580c:	2800      	cmp	r0, #0
  40580e:	f47e afd6 	bne.w	4047be <_svfprintf_r+0x18a>
  405812:	9a25      	ldr	r2, [sp, #148]	; 0x94
  405814:	46c3      	mov	fp, r8
  405816:	9b24      	ldr	r3, [sp, #144]	; 0x90
  405818:	9812      	ldr	r0, [sp, #72]	; 0x48
  40581a:	3301      	adds	r3, #1
  40581c:	eb02 0c00 	add.w	ip, r2, r0
  405820:	2b07      	cmp	r3, #7
  405822:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  405824:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
  405828:	f8cb 2000 	str.w	r2, [fp]
  40582c:	9324      	str	r3, [sp, #144]	; 0x90
  40582e:	f8cb 0004 	str.w	r0, [fp, #4]
  405832:	f77f a8e8 	ble.w	404a06 <_svfprintf_r+0x3d2>
  405836:	e446      	b.n	4050c6 <_svfprintf_r+0xa92>
  405838:	9510      	str	r5, [sp, #64]	; 0x40
  40583a:	f7fe fecd 	bl	4045d8 <strlen>
  40583e:	ea20 73e0 	bic.w	r3, r0, r0, asr #31
  405842:	970c      	str	r7, [sp, #48]	; 0x30
  405844:	4604      	mov	r4, r0
  405846:	9511      	str	r5, [sp, #68]	; 0x44
  405848:	9307      	str	r3, [sp, #28]
  40584a:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  40584e:	f7ff b804 	b.w	40485a <_svfprintf_r+0x226>
  405852:	9a24      	ldr	r2, [sp, #144]	; 0x90
  405854:	4fb7      	ldr	r7, [pc, #732]	; (405b34 <_svfprintf_r+0x1500>)
  405856:	f7ff b84b 	b.w	4048f0 <_svfprintf_r+0x2bc>
  40585a:	9809      	ldr	r0, [sp, #36]	; 0x24
  40585c:	4649      	mov	r1, r9
  40585e:	aa23      	add	r2, sp, #140	; 0x8c
  405860:	f003 f876 	bl	408950 <__ssprint_r>
  405864:	2800      	cmp	r0, #0
  405866:	f47e afaa 	bne.w	4047be <_svfprintf_r+0x18a>
  40586a:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
  40586e:	46c3      	mov	fp, r8
  405870:	e4a2      	b.n	4051b8 <_svfprintf_r+0xb84>
  405872:	3301      	adds	r3, #1
  405874:	4422      	add	r2, r4
  405876:	f8cb 5000 	str.w	r5, [fp]
  40587a:	2b07      	cmp	r3, #7
  40587c:	9225      	str	r2, [sp, #148]	; 0x94
  40587e:	9324      	str	r3, [sp, #144]	; 0x90
  405880:	f8cb 4004 	str.w	r4, [fp, #4]
  405884:	dcbd      	bgt.n	405802 <_svfprintf_r+0x11ce>
  405886:	f10b 0b08 	add.w	fp, fp, #8
  40588a:	e7c5      	b.n	405818 <_svfprintf_r+0x11e4>
  40588c:	9809      	ldr	r0, [sp, #36]	; 0x24
  40588e:	4649      	mov	r1, r9
  405890:	aa23      	add	r2, sp, #140	; 0x8c
  405892:	f003 f85d 	bl	408950 <__ssprint_r>
  405896:	2800      	cmp	r0, #0
  405898:	f47e af91 	bne.w	4047be <_svfprintf_r+0x18a>
  40589c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  40589e:	46c3      	mov	fp, r8
  4058a0:	9a12      	ldr	r2, [sp, #72]	; 0x48
  4058a2:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
  4058a6:	1ad3      	subs	r3, r2, r3
  4058a8:	e552      	b.n	405350 <_svfprintf_r+0xd1c>
  4058aa:	9809      	ldr	r0, [sp, #36]	; 0x24
  4058ac:	4649      	mov	r1, r9
  4058ae:	aa23      	add	r2, sp, #140	; 0x8c
  4058b0:	f003 f84e 	bl	408950 <__ssprint_r>
  4058b4:	2800      	cmp	r0, #0
  4058b6:	f47e af82 	bne.w	4047be <_svfprintf_r+0x18a>
  4058ba:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  4058bc:	46c3      	mov	fp, r8
  4058be:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
  4058c2:	e52d      	b.n	405320 <_svfprintf_r+0xcec>
  4058c4:	9809      	ldr	r0, [sp, #36]	; 0x24
  4058c6:	4649      	mov	r1, r9
  4058c8:	aa23      	add	r2, sp, #140	; 0x8c
  4058ca:	f003 f841 	bl	408950 <__ssprint_r>
  4058ce:	2800      	cmp	r0, #0
  4058d0:	f47e af75 	bne.w	4047be <_svfprintf_r+0x18a>
  4058d4:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
  4058d8:	46c3      	mov	fp, r8
  4058da:	e516      	b.n	40530a <_svfprintf_r+0xcd6>
  4058dc:	2c06      	cmp	r4, #6
  4058de:	970c      	str	r7, [sp, #48]	; 0x30
  4058e0:	9310      	str	r3, [sp, #64]	; 0x40
  4058e2:	461f      	mov	r7, r3
  4058e4:	bf28      	it	cs
  4058e6:	2406      	movcs	r4, #6
  4058e8:	9711      	str	r7, [sp, #68]	; 0x44
  4058ea:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
  4058ee:	9307      	str	r3, [sp, #28]
  4058f0:	4b91      	ldr	r3, [pc, #580]	; (405b38 <_svfprintf_r+0x1504>)
  4058f2:	930f      	str	r3, [sp, #60]	; 0x3c
  4058f4:	f7fe bfb1 	b.w	40485a <_svfprintf_r+0x226>
  4058f8:	4f8e      	ldr	r7, [pc, #568]	; (405b34 <_svfprintf_r+0x1500>)
  4058fa:	f7ff b8b5 	b.w	404a68 <_svfprintf_r+0x434>
  4058fe:	232d      	movs	r3, #45	; 0x2d
  405900:	461f      	mov	r7, r3
  405902:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  405906:	f7ff ba7a 	b.w	404dfe <_svfprintf_r+0x7ca>
  40590a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40590c:	272d      	movs	r7, #45	; 0x2d
  40590e:	f8cd c01c 	str.w	ip, [sp, #28]
  405912:	9306      	str	r3, [sp, #24]
  405914:	2300      	movs	r3, #0
  405916:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
  40591a:	9310      	str	r3, [sp, #64]	; 0x40
  40591c:	f7fe bf9e 	b.w	40485c <_svfprintf_r+0x228>
  405920:	2e65      	cmp	r6, #101	; 0x65
  405922:	dd56      	ble.n	4059d2 <_svfprintf_r+0x139e>
  405924:	2e66      	cmp	r6, #102	; 0x66
  405926:	9311      	str	r3, [sp, #68]	; 0x44
  405928:	f47f aeef 	bne.w	40570a <_svfprintf_r+0x10d6>
  40592c:	2b00      	cmp	r3, #0
  40592e:	f340 80d6 	ble.w	405ade <_svfprintf_r+0x14aa>
  405932:	f1bc 0f00 	cmp.w	ip, #0
  405936:	f040 80c1 	bne.w	405abc <_svfprintf_r+0x1488>
  40593a:	9b06      	ldr	r3, [sp, #24]
  40593c:	07da      	lsls	r2, r3, #31
  40593e:	f100 80bd 	bmi.w	405abc <_svfprintf_r+0x1488>
  405942:	9c11      	ldr	r4, [sp, #68]	; 0x44
  405944:	ea24 7ce4 	bic.w	ip, r4, r4, asr #31
  405948:	e6eb      	b.n	405722 <_svfprintf_r+0x10ee>
  40594a:	2003      	movs	r0, #3
  40594c:	a91d      	add	r1, sp, #116	; 0x74
  40594e:	463a      	mov	r2, r7
  405950:	f8cd c004 	str.w	ip, [sp, #4]
  405954:	9000      	str	r0, [sp, #0]
  405956:	a81e      	add	r0, sp, #120	; 0x78
  405958:	9102      	str	r1, [sp, #8]
  40595a:	a921      	add	r1, sp, #132	; 0x84
  40595c:	462b      	mov	r3, r5
  40595e:	9003      	str	r0, [sp, #12]
  405960:	9104      	str	r1, [sp, #16]
  405962:	9809      	ldr	r0, [sp, #36]	; 0x24
  405964:	f8cd c01c 	str.w	ip, [sp, #28]
  405968:	f000 fa52 	bl	405e10 <_dtoa_r>
  40596c:	f8dd c01c 	ldr.w	ip, [sp, #28]
  405970:	4602      	mov	r2, r0
  405972:	7803      	ldrb	r3, [r0, #0]
  405974:	4462      	add	r2, ip
  405976:	900f      	str	r0, [sp, #60]	; 0x3c
  405978:	2b30      	cmp	r3, #48	; 0x30
  40597a:	9207      	str	r2, [sp, #28]
  40597c:	f040 808b 	bne.w	405a96 <_svfprintf_r+0x1462>
  405980:	4638      	mov	r0, r7
  405982:	2200      	movs	r2, #0
  405984:	2300      	movs	r3, #0
  405986:	4629      	mov	r1, r5
  405988:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
  40598c:	f04f 0401 	mov.w	r4, #1
  405990:	f003 fdc0 	bl	409514 <__aeabi_dcmpeq>
  405994:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
  405998:	b108      	cbz	r0, 40599e <_svfprintf_r+0x136a>
  40599a:	f04f 0400 	mov.w	r4, #0
  40599e:	f014 0fff 	tst.w	r4, #255	; 0xff
  4059a2:	d078      	beq.n	405a96 <_svfprintf_r+0x1462>
  4059a4:	f1cc 0401 	rsb	r4, ip, #1
  4059a8:	941d      	str	r4, [sp, #116]	; 0x74
  4059aa:	9b07      	ldr	r3, [sp, #28]
  4059ac:	4423      	add	r3, r4
  4059ae:	461c      	mov	r4, r3
  4059b0:	e683      	b.n	4056ba <_svfprintf_r+0x1086>
  4059b2:	4d62      	ldr	r5, [pc, #392]	; (405b3c <_svfprintf_r+0x1508>)
  4059b4:	f7ff bb2a 	b.w	40500c <_svfprintf_r+0x9d8>
  4059b8:	4623      	mov	r3, r4
  4059ba:	e695      	b.n	4056e8 <_svfprintf_r+0x10b4>
  4059bc:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
  4059c0:	970c      	str	r7, [sp, #48]	; 0x30
  4059c2:	9010      	str	r0, [sp, #64]	; 0x40
  4059c4:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  4059c8:	9307      	str	r3, [sp, #28]
  4059ca:	9011      	str	r0, [sp, #68]	; 0x44
  4059cc:	f7fe bf45 	b.w	40485a <_svfprintf_r+0x226>
  4059d0:	3e02      	subs	r6, #2
  4059d2:	3b01      	subs	r3, #1
  4059d4:	f88d 607c 	strb.w	r6, [sp, #124]	; 0x7c
  4059d8:	2b00      	cmp	r3, #0
  4059da:	931d      	str	r3, [sp, #116]	; 0x74
  4059dc:	db75      	blt.n	405aca <_svfprintf_r+0x1496>
  4059de:	222b      	movs	r2, #43	; 0x2b
  4059e0:	f88d 207d 	strb.w	r2, [sp, #125]	; 0x7d
  4059e4:	2b09      	cmp	r3, #9
  4059e6:	dd61      	ble.n	405aac <_svfprintf_r+0x1478>
  4059e8:	f10d 008b 	add.w	r0, sp, #139	; 0x8b
  4059ec:	4601      	mov	r1, r0
  4059ee:	4a54      	ldr	r2, [pc, #336]	; (405b40 <_svfprintf_r+0x150c>)
  4059f0:	fb82 2403 	smull	r2, r4, r2, r3
  4059f4:	17da      	asrs	r2, r3, #31
  4059f6:	ebc2 04a4 	rsb	r4, r2, r4, asr #2
  4059fa:	eb04 0284 	add.w	r2, r4, r4, lsl #2
  4059fe:	2c09      	cmp	r4, #9
  405a00:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
  405a04:	4623      	mov	r3, r4
  405a06:	f102 0230 	add.w	r2, r2, #48	; 0x30
  405a0a:	f801 2d01 	strb.w	r2, [r1, #-1]!
  405a0e:	dcee      	bgt.n	4059ee <_svfprintf_r+0x13ba>
  405a10:	3330      	adds	r3, #48	; 0x30
  405a12:	460a      	mov	r2, r1
  405a14:	b2db      	uxtb	r3, r3
  405a16:	f802 3d01 	strb.w	r3, [r2, #-1]!
  405a1a:	4290      	cmp	r0, r2
  405a1c:	d97e      	bls.n	405b1c <_svfprintf_r+0x14e8>
  405a1e:	460a      	mov	r2, r1
  405a20:	f10d 047e 	add.w	r4, sp, #126	; 0x7e
  405a24:	e001      	b.n	405a2a <_svfprintf_r+0x13f6>
  405a26:	f812 3b01 	ldrb.w	r3, [r2], #1
  405a2a:	4282      	cmp	r2, r0
  405a2c:	f804 3b01 	strb.w	r3, [r4], #1
  405a30:	d1f9      	bne.n	405a26 <_svfprintf_r+0x13f2>
  405a32:	ab23      	add	r3, sp, #140	; 0x8c
  405a34:	f10d 027e 	add.w	r2, sp, #126	; 0x7e
  405a38:	1a5b      	subs	r3, r3, r1
  405a3a:	4413      	add	r3, r2
  405a3c:	aa1f      	add	r2, sp, #124	; 0x7c
  405a3e:	1a9b      	subs	r3, r3, r2
  405a40:	9a12      	ldr	r2, [sp, #72]	; 0x48
  405a42:	2a01      	cmp	r2, #1
  405a44:	9319      	str	r3, [sp, #100]	; 0x64
  405a46:	eb02 0403 	add.w	r4, r2, r3
  405a4a:	dd43      	ble.n	405ad4 <_svfprintf_r+0x14a0>
  405a4c:	3401      	adds	r4, #1
  405a4e:	2300      	movs	r3, #0
  405a50:	9311      	str	r3, [sp, #68]	; 0x44
  405a52:	ea24 7ce4 	bic.w	ip, r4, r4, asr #31
  405a56:	e664      	b.n	405722 <_svfprintf_r+0x10ee>
  405a58:	9809      	ldr	r0, [sp, #36]	; 0x24
  405a5a:	4649      	mov	r1, r9
  405a5c:	aa23      	add	r2, sp, #140	; 0x8c
  405a5e:	f002 ff77 	bl	408950 <__ssprint_r>
  405a62:	2800      	cmp	r0, #0
  405a64:	f47e aeab 	bne.w	4047be <_svfprintf_r+0x18a>
  405a68:	9c1d      	ldr	r4, [sp, #116]	; 0x74
  405a6a:	46c3      	mov	fp, r8
  405a6c:	9a25      	ldr	r2, [sp, #148]	; 0x94
  405a6e:	9b24      	ldr	r3, [sp, #144]	; 0x90
  405a70:	e5a8      	b.n	4055c4 <_svfprintf_r+0xf90>
  405a72:	9b14      	ldr	r3, [sp, #80]	; 0x50
  405a74:	9f13      	ldr	r7, [sp, #76]	; 0x4c
  405a76:	f103 4500 	add.w	r5, r3, #2147483648	; 0x80000000
  405a7a:	232d      	movs	r3, #45	; 0x2d
  405a7c:	930d      	str	r3, [sp, #52]	; 0x34
  405a7e:	e69c      	b.n	4057ba <_svfprintf_r+0x1186>
  405a80:	9b11      	ldr	r3, [sp, #68]	; 0x44
  405a82:	2b00      	cmp	r3, #0
  405a84:	dd35      	ble.n	405af2 <_svfprintf_r+0x14be>
  405a86:	2401      	movs	r4, #1
  405a88:	9b12      	ldr	r3, [sp, #72]	; 0x48
  405a8a:	441c      	add	r4, r3
  405a8c:	ea24 7ce4 	bic.w	ip, r4, r4, asr #31
  405a90:	e647      	b.n	405722 <_svfprintf_r+0x10ee>
  405a92:	4d2a      	ldr	r5, [pc, #168]	; (405b3c <_svfprintf_r+0x1508>)
  405a94:	e413      	b.n	4052be <_svfprintf_r+0xc8a>
  405a96:	9c1d      	ldr	r4, [sp, #116]	; 0x74
  405a98:	e787      	b.n	4059aa <_svfprintf_r+0x1376>
  405a9a:	9b21      	ldr	r3, [sp, #132]	; 0x84
  405a9c:	e624      	b.n	4056e8 <_svfprintf_r+0x10b4>
  405a9e:	9b11      	ldr	r3, [sp, #68]	; 0x44
  405aa0:	1c5c      	adds	r4, r3, #1
  405aa2:	ea24 7ce4 	bic.w	ip, r4, r4, asr #31
  405aa6:	e63c      	b.n	405722 <_svfprintf_r+0x10ee>
  405aa8:	4d24      	ldr	r5, [pc, #144]	; (405b3c <_svfprintf_r+0x1508>)
  405aaa:	e420      	b.n	4052ee <_svfprintf_r+0xcba>
  405aac:	3330      	adds	r3, #48	; 0x30
  405aae:	2230      	movs	r2, #48	; 0x30
  405ab0:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
  405ab4:	ab20      	add	r3, sp, #128	; 0x80
  405ab6:	f88d 207e 	strb.w	r2, [sp, #126]	; 0x7e
  405aba:	e7bf      	b.n	405a3c <_svfprintf_r+0x1408>
  405abc:	f10c 0401 	add.w	r4, ip, #1
  405ac0:	9b11      	ldr	r3, [sp, #68]	; 0x44
  405ac2:	441c      	add	r4, r3
  405ac4:	ea24 7ce4 	bic.w	ip, r4, r4, asr #31
  405ac8:	e62b      	b.n	405722 <_svfprintf_r+0x10ee>
  405aca:	222d      	movs	r2, #45	; 0x2d
  405acc:	425b      	negs	r3, r3
  405ace:	f88d 207d 	strb.w	r2, [sp, #125]	; 0x7d
  405ad2:	e787      	b.n	4059e4 <_svfprintf_r+0x13b0>
  405ad4:	9b06      	ldr	r3, [sp, #24]
  405ad6:	f013 0301 	ands.w	r3, r3, #1
  405ada:	d0b9      	beq.n	405a50 <_svfprintf_r+0x141c>
  405adc:	e7b6      	b.n	405a4c <_svfprintf_r+0x1418>
  405ade:	f1bc 0f00 	cmp.w	ip, #0
  405ae2:	d109      	bne.n	405af8 <_svfprintf_r+0x14c4>
  405ae4:	9b06      	ldr	r3, [sp, #24]
  405ae6:	07db      	lsls	r3, r3, #31
  405ae8:	d406      	bmi.n	405af8 <_svfprintf_r+0x14c4>
  405aea:	f04f 0c01 	mov.w	ip, #1
  405aee:	4664      	mov	r4, ip
  405af0:	e617      	b.n	405722 <_svfprintf_r+0x10ee>
  405af2:	f1c3 0402 	rsb	r4, r3, #2
  405af6:	e7c7      	b.n	405a88 <_svfprintf_r+0x1454>
  405af8:	f10c 0402 	add.w	r4, ip, #2
  405afc:	ea24 7ce4 	bic.w	ip, r4, r4, asr #31
  405b00:	e60f      	b.n	405722 <_svfprintf_r+0x10ee>
  405b02:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  405b04:	785e      	ldrb	r6, [r3, #1]
  405b06:	4628      	mov	r0, r5
  405b08:	682c      	ldr	r4, [r5, #0]
  405b0a:	3004      	adds	r0, #4
  405b0c:	2c00      	cmp	r4, #0
  405b0e:	900c      	str	r0, [sp, #48]	; 0x30
  405b10:	f6be ade5 	bge.w	4046de <_svfprintf_r+0xaa>
  405b14:	f04f 34ff 	mov.w	r4, #4294967295
  405b18:	f7fe bde1 	b.w	4046de <_svfprintf_r+0xaa>
  405b1c:	f10d 037e 	add.w	r3, sp, #126	; 0x7e
  405b20:	e78c      	b.n	405a3c <_svfprintf_r+0x1408>
  405b22:	230c      	movs	r3, #12
  405b24:	9a09      	ldr	r2, [sp, #36]	; 0x24
  405b26:	f04f 30ff 	mov.w	r0, #4294967295
  405b2a:	6013      	str	r3, [r2, #0]
  405b2c:	f7fe be50 	b.w	4047d0 <_svfprintf_r+0x19c>
  405b30:	4664      	mov	r4, ip
  405b32:	e663      	b.n	4057fc <_svfprintf_r+0x11c8>
  405b34:	00409cd0 	.word	0x00409cd0
  405b38:	00409d18 	.word	0x00409d18
  405b3c:	00409cc0 	.word	0x00409cc0
  405b40:	66666667 	.word	0x66666667

00405b44 <__swbuf_r>:
  405b44:	b570      	push	{r4, r5, r6, lr}
  405b46:	460d      	mov	r5, r1
  405b48:	4614      	mov	r4, r2
  405b4a:	4606      	mov	r6, r0
  405b4c:	b110      	cbz	r0, 405b54 <__swbuf_r+0x10>
  405b4e:	6b83      	ldr	r3, [r0, #56]	; 0x38
  405b50:	2b00      	cmp	r3, #0
  405b52:	d048      	beq.n	405be6 <__swbuf_r+0xa2>
  405b54:	89a2      	ldrh	r2, [r4, #12]
  405b56:	69a3      	ldr	r3, [r4, #24]
  405b58:	b291      	uxth	r1, r2
  405b5a:	60a3      	str	r3, [r4, #8]
  405b5c:	0708      	lsls	r0, r1, #28
  405b5e:	d538      	bpl.n	405bd2 <__swbuf_r+0x8e>
  405b60:	6923      	ldr	r3, [r4, #16]
  405b62:	2b00      	cmp	r3, #0
  405b64:	d035      	beq.n	405bd2 <__swbuf_r+0x8e>
  405b66:	0489      	lsls	r1, r1, #18
  405b68:	b2ed      	uxtb	r5, r5
  405b6a:	d515      	bpl.n	405b98 <__swbuf_r+0x54>
  405b6c:	6822      	ldr	r2, [r4, #0]
  405b6e:	6961      	ldr	r1, [r4, #20]
  405b70:	1ad3      	subs	r3, r2, r3
  405b72:	428b      	cmp	r3, r1
  405b74:	da1c      	bge.n	405bb0 <__swbuf_r+0x6c>
  405b76:	3301      	adds	r3, #1
  405b78:	68a1      	ldr	r1, [r4, #8]
  405b7a:	1c50      	adds	r0, r2, #1
  405b7c:	3901      	subs	r1, #1
  405b7e:	6020      	str	r0, [r4, #0]
  405b80:	60a1      	str	r1, [r4, #8]
  405b82:	7015      	strb	r5, [r2, #0]
  405b84:	6962      	ldr	r2, [r4, #20]
  405b86:	429a      	cmp	r2, r3
  405b88:	d01a      	beq.n	405bc0 <__swbuf_r+0x7c>
  405b8a:	2d0a      	cmp	r5, #10
  405b8c:	d102      	bne.n	405b94 <__swbuf_r+0x50>
  405b8e:	7b23      	ldrb	r3, [r4, #12]
  405b90:	07db      	lsls	r3, r3, #31
  405b92:	d415      	bmi.n	405bc0 <__swbuf_r+0x7c>
  405b94:	4628      	mov	r0, r5
  405b96:	bd70      	pop	{r4, r5, r6, pc}
  405b98:	6e61      	ldr	r1, [r4, #100]	; 0x64
  405b9a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  405b9e:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  405ba2:	81a2      	strh	r2, [r4, #12]
  405ba4:	6822      	ldr	r2, [r4, #0]
  405ba6:	6661      	str	r1, [r4, #100]	; 0x64
  405ba8:	1ad3      	subs	r3, r2, r3
  405baa:	6961      	ldr	r1, [r4, #20]
  405bac:	428b      	cmp	r3, r1
  405bae:	dbe2      	blt.n	405b76 <__swbuf_r+0x32>
  405bb0:	4630      	mov	r0, r6
  405bb2:	4621      	mov	r1, r4
  405bb4:	f001 f944 	bl	406e40 <_fflush_r>
  405bb8:	b940      	cbnz	r0, 405bcc <__swbuf_r+0x88>
  405bba:	6822      	ldr	r2, [r4, #0]
  405bbc:	2301      	movs	r3, #1
  405bbe:	e7db      	b.n	405b78 <__swbuf_r+0x34>
  405bc0:	4630      	mov	r0, r6
  405bc2:	4621      	mov	r1, r4
  405bc4:	f001 f93c 	bl	406e40 <_fflush_r>
  405bc8:	2800      	cmp	r0, #0
  405bca:	d0e3      	beq.n	405b94 <__swbuf_r+0x50>
  405bcc:	f04f 30ff 	mov.w	r0, #4294967295
  405bd0:	bd70      	pop	{r4, r5, r6, pc}
  405bd2:	4630      	mov	r0, r6
  405bd4:	4621      	mov	r1, r4
  405bd6:	f000 f809 	bl	405bec <__swsetup_r>
  405bda:	2800      	cmp	r0, #0
  405bdc:	d1f6      	bne.n	405bcc <__swbuf_r+0x88>
  405bde:	89a2      	ldrh	r2, [r4, #12]
  405be0:	6923      	ldr	r3, [r4, #16]
  405be2:	b291      	uxth	r1, r2
  405be4:	e7bf      	b.n	405b66 <__swbuf_r+0x22>
  405be6:	f001 f9c5 	bl	406f74 <__sinit>
  405bea:	e7b3      	b.n	405b54 <__swbuf_r+0x10>

00405bec <__swsetup_r>:
  405bec:	b538      	push	{r3, r4, r5, lr}
  405bee:	4b2f      	ldr	r3, [pc, #188]	; (405cac <__swsetup_r+0xc0>)
  405bf0:	4605      	mov	r5, r0
  405bf2:	460c      	mov	r4, r1
  405bf4:	6818      	ldr	r0, [r3, #0]
  405bf6:	b110      	cbz	r0, 405bfe <__swsetup_r+0x12>
  405bf8:	6b83      	ldr	r3, [r0, #56]	; 0x38
  405bfa:	2b00      	cmp	r3, #0
  405bfc:	d036      	beq.n	405c6c <__swsetup_r+0x80>
  405bfe:	89a2      	ldrh	r2, [r4, #12]
  405c00:	b293      	uxth	r3, r2
  405c02:	0718      	lsls	r0, r3, #28
  405c04:	d50b      	bpl.n	405c1e <__swsetup_r+0x32>
  405c06:	6920      	ldr	r0, [r4, #16]
  405c08:	b1a0      	cbz	r0, 405c34 <__swsetup_r+0x48>
  405c0a:	f013 0201 	ands.w	r2, r3, #1
  405c0e:	d11d      	bne.n	405c4c <__swsetup_r+0x60>
  405c10:	0799      	lsls	r1, r3, #30
  405c12:	d400      	bmi.n	405c16 <__swsetup_r+0x2a>
  405c14:	6962      	ldr	r2, [r4, #20]
  405c16:	60a2      	str	r2, [r4, #8]
  405c18:	b1f8      	cbz	r0, 405c5a <__swsetup_r+0x6e>
  405c1a:	2000      	movs	r0, #0
  405c1c:	bd38      	pop	{r3, r4, r5, pc}
  405c1e:	06d9      	lsls	r1, r3, #27
  405c20:	d53b      	bpl.n	405c9a <__swsetup_r+0xae>
  405c22:	0758      	lsls	r0, r3, #29
  405c24:	d425      	bmi.n	405c72 <__swsetup_r+0x86>
  405c26:	6920      	ldr	r0, [r4, #16]
  405c28:	f042 0208 	orr.w	r2, r2, #8
  405c2c:	b293      	uxth	r3, r2
  405c2e:	81a2      	strh	r2, [r4, #12]
  405c30:	2800      	cmp	r0, #0
  405c32:	d1ea      	bne.n	405c0a <__swsetup_r+0x1e>
  405c34:	f403 7220 	and.w	r2, r3, #640	; 0x280
  405c38:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  405c3c:	d0e5      	beq.n	405c0a <__swsetup_r+0x1e>
  405c3e:	4628      	mov	r0, r5
  405c40:	4621      	mov	r1, r4
  405c42:	f001 fc9b 	bl	40757c <__smakebuf_r>
  405c46:	89a3      	ldrh	r3, [r4, #12]
  405c48:	6920      	ldr	r0, [r4, #16]
  405c4a:	e7de      	b.n	405c0a <__swsetup_r+0x1e>
  405c4c:	6963      	ldr	r3, [r4, #20]
  405c4e:	2200      	movs	r2, #0
  405c50:	425b      	negs	r3, r3
  405c52:	60a2      	str	r2, [r4, #8]
  405c54:	61a3      	str	r3, [r4, #24]
  405c56:	2800      	cmp	r0, #0
  405c58:	d1df      	bne.n	405c1a <__swsetup_r+0x2e>
  405c5a:	89a3      	ldrh	r3, [r4, #12]
  405c5c:	061a      	lsls	r2, r3, #24
  405c5e:	d5dd      	bpl.n	405c1c <__swsetup_r+0x30>
  405c60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  405c64:	f04f 30ff 	mov.w	r0, #4294967295
  405c68:	81a3      	strh	r3, [r4, #12]
  405c6a:	bd38      	pop	{r3, r4, r5, pc}
  405c6c:	f001 f982 	bl	406f74 <__sinit>
  405c70:	e7c5      	b.n	405bfe <__swsetup_r+0x12>
  405c72:	6b21      	ldr	r1, [r4, #48]	; 0x30
  405c74:	b149      	cbz	r1, 405c8a <__swsetup_r+0x9e>
  405c76:	f104 0340 	add.w	r3, r4, #64	; 0x40
  405c7a:	4299      	cmp	r1, r3
  405c7c:	d003      	beq.n	405c86 <__swsetup_r+0x9a>
  405c7e:	4628      	mov	r0, r5
  405c80:	f001 f9e6 	bl	407050 <_free_r>
  405c84:	89a2      	ldrh	r2, [r4, #12]
  405c86:	2300      	movs	r3, #0
  405c88:	6323      	str	r3, [r4, #48]	; 0x30
  405c8a:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  405c8e:	2300      	movs	r3, #0
  405c90:	6920      	ldr	r0, [r4, #16]
  405c92:	b292      	uxth	r2, r2
  405c94:	e884 0009 	stmia.w	r4, {r0, r3}
  405c98:	e7c6      	b.n	405c28 <__swsetup_r+0x3c>
  405c9a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  405c9e:	2309      	movs	r3, #9
  405ca0:	f04f 30ff 	mov.w	r0, #4294967295
  405ca4:	602b      	str	r3, [r5, #0]
  405ca6:	81a2      	strh	r2, [r4, #12]
  405ca8:	bd38      	pop	{r3, r4, r5, pc}
  405caa:	bf00      	nop
  405cac:	204004b0 	.word	0x204004b0

00405cb0 <register_fini>:
  405cb0:	4b02      	ldr	r3, [pc, #8]	; (405cbc <register_fini+0xc>)
  405cb2:	b113      	cbz	r3, 405cba <register_fini+0xa>
  405cb4:	4802      	ldr	r0, [pc, #8]	; (405cc0 <register_fini+0x10>)
  405cb6:	f000 b805 	b.w	405cc4 <atexit>
  405cba:	4770      	bx	lr
  405cbc:	00000000 	.word	0x00000000
  405cc0:	00406f89 	.word	0x00406f89

00405cc4 <atexit>:
  405cc4:	4601      	mov	r1, r0
  405cc6:	2000      	movs	r0, #0
  405cc8:	4602      	mov	r2, r0
  405cca:	4603      	mov	r3, r0
  405ccc:	f002 bedc 	b.w	408a88 <__register_exitproc>

00405cd0 <quorem>:
  405cd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405cd4:	6903      	ldr	r3, [r0, #16]
  405cd6:	b083      	sub	sp, #12
  405cd8:	690f      	ldr	r7, [r1, #16]
  405cda:	429f      	cmp	r7, r3
  405cdc:	f300 8093 	bgt.w	405e06 <quorem+0x136>
  405ce0:	3f01      	subs	r7, #1
  405ce2:	f101 0614 	add.w	r6, r1, #20
  405ce6:	f100 0a14 	add.w	sl, r0, #20
  405cea:	00bb      	lsls	r3, r7, #2
  405cec:	f856 2027 	ldr.w	r2, [r6, r7, lsl #2]
  405cf0:	461d      	mov	r5, r3
  405cf2:	9300      	str	r3, [sp, #0]
  405cf4:	3201      	adds	r2, #1
  405cf6:	f85a 3027 	ldr.w	r3, [sl, r7, lsl #2]
  405cfa:	eb0a 0405 	add.w	r4, sl, r5
  405cfe:	eb06 0905 	add.w	r9, r6, r5
  405d02:	fbb3 f8f2 	udiv	r8, r3, r2
  405d06:	9401      	str	r4, [sp, #4]
  405d08:	f1b8 0f00 	cmp.w	r8, #0
  405d0c:	d040      	beq.n	405d90 <quorem+0xc0>
  405d0e:	2500      	movs	r5, #0
  405d10:	46b4      	mov	ip, r6
  405d12:	46d6      	mov	lr, sl
  405d14:	462b      	mov	r3, r5
  405d16:	f85c bb04 	ldr.w	fp, [ip], #4
  405d1a:	f8de 2000 	ldr.w	r2, [lr]
  405d1e:	fa1f f48b 	uxth.w	r4, fp
  405d22:	45e1      	cmp	r9, ip
  405d24:	ea4f 4b1b 	mov.w	fp, fp, lsr #16
  405d28:	fb04 5508 	mla	r5, r4, r8, r5
  405d2c:	fb0b fb08 	mul.w	fp, fp, r8
  405d30:	b2ac      	uxth	r4, r5
  405d32:	eb0b 4515 	add.w	r5, fp, r5, lsr #16
  405d36:	eba3 0304 	sub.w	r3, r3, r4
  405d3a:	fa1f fb85 	uxth.w	fp, r5
  405d3e:	fa13 f482 	uxtah	r4, r3, r2
  405d42:	ea4f 4515 	mov.w	r5, r5, lsr #16
  405d46:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
  405d4a:	fa1f fb84 	uxth.w	fp, r4
  405d4e:	eb02 4324 	add.w	r3, r2, r4, asr #16
  405d52:	ea4b 4203 	orr.w	r2, fp, r3, lsl #16
  405d56:	ea4f 4323 	mov.w	r3, r3, asr #16
  405d5a:	f84e 2b04 	str.w	r2, [lr], #4
  405d5e:	d2da      	bcs.n	405d16 <quorem+0x46>
  405d60:	9b00      	ldr	r3, [sp, #0]
  405d62:	f85a 3003 	ldr.w	r3, [sl, r3]
  405d66:	b99b      	cbnz	r3, 405d90 <quorem+0xc0>
  405d68:	9c01      	ldr	r4, [sp, #4]
  405d6a:	1f23      	subs	r3, r4, #4
  405d6c:	459a      	cmp	sl, r3
  405d6e:	d20e      	bcs.n	405d8e <quorem+0xbe>
  405d70:	f854 3c04 	ldr.w	r3, [r4, #-4]
  405d74:	b95b      	cbnz	r3, 405d8e <quorem+0xbe>
  405d76:	f1a4 0308 	sub.w	r3, r4, #8
  405d7a:	e001      	b.n	405d80 <quorem+0xb0>
  405d7c:	6812      	ldr	r2, [r2, #0]
  405d7e:	b932      	cbnz	r2, 405d8e <quorem+0xbe>
  405d80:	459a      	cmp	sl, r3
  405d82:	461a      	mov	r2, r3
  405d84:	f107 37ff 	add.w	r7, r7, #4294967295
  405d88:	f1a3 0304 	sub.w	r3, r3, #4
  405d8c:	d3f6      	bcc.n	405d7c <quorem+0xac>
  405d8e:	6107      	str	r7, [r0, #16]
  405d90:	4604      	mov	r4, r0
  405d92:	f002 fa7f 	bl	408294 <__mcmp>
  405d96:	2800      	cmp	r0, #0
  405d98:	db31      	blt.n	405dfe <quorem+0x12e>
  405d9a:	f108 0801 	add.w	r8, r8, #1
  405d9e:	4655      	mov	r5, sl
  405da0:	2000      	movs	r0, #0
  405da2:	f856 1b04 	ldr.w	r1, [r6], #4
  405da6:	682a      	ldr	r2, [r5, #0]
  405da8:	b28b      	uxth	r3, r1
  405daa:	45b1      	cmp	r9, r6
  405dac:	ea4f 4111 	mov.w	r1, r1, lsr #16
  405db0:	eba0 0303 	sub.w	r3, r0, r3
  405db4:	ebc1 4112 	rsb	r1, r1, r2, lsr #16
  405db8:	fa13 f382 	uxtah	r3, r3, r2
  405dbc:	eb01 4223 	add.w	r2, r1, r3, asr #16
  405dc0:	b29b      	uxth	r3, r3
  405dc2:	ea4f 4022 	mov.w	r0, r2, asr #16
  405dc6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  405dca:	f845 3b04 	str.w	r3, [r5], #4
  405dce:	d2e8      	bcs.n	405da2 <quorem+0xd2>
  405dd0:	f85a 2027 	ldr.w	r2, [sl, r7, lsl #2]
  405dd4:	eb0a 0387 	add.w	r3, sl, r7, lsl #2
  405dd8:	b98a      	cbnz	r2, 405dfe <quorem+0x12e>
  405dda:	1f1a      	subs	r2, r3, #4
  405ddc:	4592      	cmp	sl, r2
  405dde:	d20d      	bcs.n	405dfc <quorem+0x12c>
  405de0:	f853 2c04 	ldr.w	r2, [r3, #-4]
  405de4:	b952      	cbnz	r2, 405dfc <quorem+0x12c>
  405de6:	3b08      	subs	r3, #8
  405de8:	e001      	b.n	405dee <quorem+0x11e>
  405dea:	6812      	ldr	r2, [r2, #0]
  405dec:	b932      	cbnz	r2, 405dfc <quorem+0x12c>
  405dee:	459a      	cmp	sl, r3
  405df0:	461a      	mov	r2, r3
  405df2:	f107 37ff 	add.w	r7, r7, #4294967295
  405df6:	f1a3 0304 	sub.w	r3, r3, #4
  405dfa:	d3f6      	bcc.n	405dea <quorem+0x11a>
  405dfc:	6127      	str	r7, [r4, #16]
  405dfe:	4640      	mov	r0, r8
  405e00:	b003      	add	sp, #12
  405e02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405e06:	2000      	movs	r0, #0
  405e08:	b003      	add	sp, #12
  405e0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405e0e:	bf00      	nop

00405e10 <_dtoa_r>:
  405e10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405e14:	469b      	mov	fp, r3
  405e16:	b099      	sub	sp, #100	; 0x64
  405e18:	6c03      	ldr	r3, [r0, #64]	; 0x40
  405e1a:	4604      	mov	r4, r0
  405e1c:	4692      	mov	sl, r2
  405e1e:	9d25      	ldr	r5, [sp, #148]	; 0x94
  405e20:	b14b      	cbz	r3, 405e36 <_dtoa_r+0x26>
  405e22:	6c46      	ldr	r6, [r0, #68]	; 0x44
  405e24:	2201      	movs	r2, #1
  405e26:	4619      	mov	r1, r3
  405e28:	40b2      	lsls	r2, r6
  405e2a:	605e      	str	r6, [r3, #4]
  405e2c:	609a      	str	r2, [r3, #8]
  405e2e:	f002 f83b 	bl	407ea8 <_Bfree>
  405e32:	2300      	movs	r3, #0
  405e34:	6423      	str	r3, [r4, #64]	; 0x40
  405e36:	f1bb 0f00 	cmp.w	fp, #0
  405e3a:	46d9      	mov	r9, fp
  405e3c:	db33      	blt.n	405ea6 <_dtoa_r+0x96>
  405e3e:	2300      	movs	r3, #0
  405e40:	602b      	str	r3, [r5, #0]
  405e42:	4b99      	ldr	r3, [pc, #612]	; (4060a8 <_dtoa_r+0x298>)
  405e44:	461a      	mov	r2, r3
  405e46:	ea09 0303 	and.w	r3, r9, r3
  405e4a:	4293      	cmp	r3, r2
  405e4c:	d014      	beq.n	405e78 <_dtoa_r+0x68>
  405e4e:	2200      	movs	r2, #0
  405e50:	2300      	movs	r3, #0
  405e52:	4650      	mov	r0, sl
  405e54:	4659      	mov	r1, fp
  405e56:	f003 fb5d 	bl	409514 <__aeabi_dcmpeq>
  405e5a:	4680      	mov	r8, r0
  405e5c:	b348      	cbz	r0, 405eb2 <_dtoa_r+0xa2>
  405e5e:	2301      	movs	r3, #1
  405e60:	9a24      	ldr	r2, [sp, #144]	; 0x90
  405e62:	6013      	str	r3, [r2, #0]
  405e64:	9b26      	ldr	r3, [sp, #152]	; 0x98
  405e66:	2b00      	cmp	r3, #0
  405e68:	f000 80cb 	beq.w	406002 <_dtoa_r+0x1f2>
  405e6c:	488f      	ldr	r0, [pc, #572]	; (4060ac <_dtoa_r+0x29c>)
  405e6e:	6018      	str	r0, [r3, #0]
  405e70:	3801      	subs	r0, #1
  405e72:	b019      	add	sp, #100	; 0x64
  405e74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405e78:	f242 730f 	movw	r3, #9999	; 0x270f
  405e7c:	9a24      	ldr	r2, [sp, #144]	; 0x90
  405e7e:	6013      	str	r3, [r2, #0]
  405e80:	f1ba 0f00 	cmp.w	sl, #0
  405e84:	f000 80a6 	beq.w	405fd4 <_dtoa_r+0x1c4>
  405e88:	4889      	ldr	r0, [pc, #548]	; (4060b0 <_dtoa_r+0x2a0>)
  405e8a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  405e8c:	2b00      	cmp	r3, #0
  405e8e:	d0f0      	beq.n	405e72 <_dtoa_r+0x62>
  405e90:	78c3      	ldrb	r3, [r0, #3]
  405e92:	2b00      	cmp	r3, #0
  405e94:	f000 80b7 	beq.w	406006 <_dtoa_r+0x1f6>
  405e98:	f100 0308 	add.w	r3, r0, #8
  405e9c:	9a26      	ldr	r2, [sp, #152]	; 0x98
  405e9e:	6013      	str	r3, [r2, #0]
  405ea0:	b019      	add	sp, #100	; 0x64
  405ea2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405ea6:	2301      	movs	r3, #1
  405ea8:	f02b 4900 	bic.w	r9, fp, #2147483648	; 0x80000000
  405eac:	602b      	str	r3, [r5, #0]
  405eae:	46cb      	mov	fp, r9
  405eb0:	e7c7      	b.n	405e42 <_dtoa_r+0x32>
  405eb2:	ad17      	add	r5, sp, #92	; 0x5c
  405eb4:	a916      	add	r1, sp, #88	; 0x58
  405eb6:	4620      	mov	r0, r4
  405eb8:	4652      	mov	r2, sl
  405eba:	9500      	str	r5, [sp, #0]
  405ebc:	465b      	mov	r3, fp
  405ebe:	9101      	str	r1, [sp, #4]
  405ec0:	f002 fa7e 	bl	4083c0 <__d2b>
  405ec4:	9006      	str	r0, [sp, #24]
  405ec6:	ea5f 5519 	movs.w	r5, r9, lsr #20
  405eca:	f040 808c 	bne.w	405fe6 <_dtoa_r+0x1d6>
  405ece:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
  405ed2:	f46f 6382 	mvn.w	r3, #1040	; 0x410
  405ed6:	9d17      	ldr	r5, [sp, #92]	; 0x5c
  405ed8:	4445      	add	r5, r8
  405eda:	429d      	cmp	r5, r3
  405edc:	f2c0 81cc 	blt.w	406278 <_dtoa_r+0x468>
  405ee0:	331f      	adds	r3, #31
  405ee2:	f205 4212 	addw	r2, r5, #1042	; 0x412
  405ee6:	1b5b      	subs	r3, r3, r5
  405ee8:	fa2a f002 	lsr.w	r0, sl, r2
  405eec:	fa09 f903 	lsl.w	r9, r9, r3
  405ef0:	ea49 0000 	orr.w	r0, r9, r0
  405ef4:	f003 f830 	bl	408f58 <__aeabi_ui2d>
  405ef8:	3d01      	subs	r5, #1
  405efa:	2301      	movs	r3, #1
  405efc:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
  405f00:	9311      	str	r3, [sp, #68]	; 0x44
  405f02:	2200      	movs	r2, #0
  405f04:	4b6b      	ldr	r3, [pc, #428]	; (4060b4 <_dtoa_r+0x2a4>)
  405f06:	f002 fee9 	bl	408cdc <__aeabi_dsub>
  405f0a:	a361      	add	r3, pc, #388	; (adr r3, 406090 <_dtoa_r+0x280>)
  405f0c:	e9d3 2300 	ldrd	r2, r3, [r3]
  405f10:	f003 f898 	bl	409044 <__aeabi_dmul>
  405f14:	a360      	add	r3, pc, #384	; (adr r3, 406098 <_dtoa_r+0x288>)
  405f16:	e9d3 2300 	ldrd	r2, r3, [r3]
  405f1a:	f002 fee1 	bl	408ce0 <__adddf3>
  405f1e:	4606      	mov	r6, r0
  405f20:	460f      	mov	r7, r1
  405f22:	4628      	mov	r0, r5
  405f24:	f003 f828 	bl	408f78 <__aeabi_i2d>
  405f28:	a35d      	add	r3, pc, #372	; (adr r3, 4060a0 <_dtoa_r+0x290>)
  405f2a:	e9d3 2300 	ldrd	r2, r3, [r3]
  405f2e:	f003 f889 	bl	409044 <__aeabi_dmul>
  405f32:	4602      	mov	r2, r0
  405f34:	460b      	mov	r3, r1
  405f36:	4630      	mov	r0, r6
  405f38:	4639      	mov	r1, r7
  405f3a:	f002 fed1 	bl	408ce0 <__adddf3>
  405f3e:	4606      	mov	r6, r0
  405f40:	460f      	mov	r7, r1
  405f42:	f003 fb19 	bl	409578 <__aeabi_d2iz>
  405f46:	2200      	movs	r2, #0
  405f48:	9002      	str	r0, [sp, #8]
  405f4a:	4639      	mov	r1, r7
  405f4c:	4630      	mov	r0, r6
  405f4e:	2300      	movs	r3, #0
  405f50:	f003 faea 	bl	409528 <__aeabi_dcmplt>
  405f54:	2800      	cmp	r0, #0
  405f56:	f040 8171 	bne.w	40623c <_dtoa_r+0x42c>
  405f5a:	9b02      	ldr	r3, [sp, #8]
  405f5c:	2b16      	cmp	r3, #22
  405f5e:	f200 8091 	bhi.w	406084 <_dtoa_r+0x274>
  405f62:	9802      	ldr	r0, [sp, #8]
  405f64:	4652      	mov	r2, sl
  405f66:	4954      	ldr	r1, [pc, #336]	; (4060b8 <_dtoa_r+0x2a8>)
  405f68:	465b      	mov	r3, fp
  405f6a:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
  405f6e:	e9d1 0100 	ldrd	r0, r1, [r1]
  405f72:	f003 faf7 	bl	409564 <__aeabi_dcmpgt>
  405f76:	2800      	cmp	r0, #0
  405f78:	f000 817c 	beq.w	406274 <_dtoa_r+0x464>
  405f7c:	9b02      	ldr	r3, [sp, #8]
  405f7e:	3b01      	subs	r3, #1
  405f80:	9302      	str	r3, [sp, #8]
  405f82:	2300      	movs	r3, #0
  405f84:	930d      	str	r3, [sp, #52]	; 0x34
  405f86:	ebc5 0508 	rsb	r5, r5, r8
  405f8a:	1e6b      	subs	r3, r5, #1
  405f8c:	9303      	str	r3, [sp, #12]
  405f8e:	f100 816c 	bmi.w	40626a <_dtoa_r+0x45a>
  405f92:	2300      	movs	r3, #0
  405f94:	9307      	str	r3, [sp, #28]
  405f96:	9b02      	ldr	r3, [sp, #8]
  405f98:	2b00      	cmp	r3, #0
  405f9a:	f2c0 815d 	blt.w	406258 <_dtoa_r+0x448>
  405f9e:	9a03      	ldr	r2, [sp, #12]
  405fa0:	930c      	str	r3, [sp, #48]	; 0x30
  405fa2:	4611      	mov	r1, r2
  405fa4:	4419      	add	r1, r3
  405fa6:	2300      	movs	r3, #0
  405fa8:	9103      	str	r1, [sp, #12]
  405faa:	930a      	str	r3, [sp, #40]	; 0x28
  405fac:	9b22      	ldr	r3, [sp, #136]	; 0x88
  405fae:	2b09      	cmp	r3, #9
  405fb0:	d82b      	bhi.n	40600a <_dtoa_r+0x1fa>
  405fb2:	2b05      	cmp	r3, #5
  405fb4:	f340 867e 	ble.w	406cb4 <_dtoa_r+0xea4>
  405fb8:	3b04      	subs	r3, #4
  405fba:	2500      	movs	r5, #0
  405fbc:	9322      	str	r3, [sp, #136]	; 0x88
  405fbe:	9b22      	ldr	r3, [sp, #136]	; 0x88
  405fc0:	3b02      	subs	r3, #2
  405fc2:	2b03      	cmp	r3, #3
  405fc4:	f200 8679 	bhi.w	406cba <_dtoa_r+0xeaa>
  405fc8:	e8df f013 	tbh	[pc, r3, lsl #1]
  405fcc:	0289029b 	.word	0x0289029b
  405fd0:	068d0180 	.word	0x068d0180
  405fd4:	f3c9 0013 	ubfx	r0, r9, #0, #20
  405fd8:	4b35      	ldr	r3, [pc, #212]	; (4060b0 <_dtoa_r+0x2a0>)
  405fda:	4a38      	ldr	r2, [pc, #224]	; (4060bc <_dtoa_r+0x2ac>)
  405fdc:	2800      	cmp	r0, #0
  405fde:	bf14      	ite	ne
  405fe0:	4618      	movne	r0, r3
  405fe2:	4610      	moveq	r0, r2
  405fe4:	e751      	b.n	405e8a <_dtoa_r+0x7a>
  405fe6:	f3cb 0313 	ubfx	r3, fp, #0, #20
  405fea:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
  405fee:	4650      	mov	r0, sl
  405ff0:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
  405ff4:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
  405ff8:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
  405ffc:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
  406000:	e77f      	b.n	405f02 <_dtoa_r+0xf2>
  406002:	482f      	ldr	r0, [pc, #188]	; (4060c0 <_dtoa_r+0x2b0>)
  406004:	e735      	b.n	405e72 <_dtoa_r+0x62>
  406006:	1cc3      	adds	r3, r0, #3
  406008:	e748      	b.n	405e9c <_dtoa_r+0x8c>
  40600a:	f04f 33ff 	mov.w	r3, #4294967295
  40600e:	2100      	movs	r1, #0
  406010:	4620      	mov	r0, r4
  406012:	461d      	mov	r5, r3
  406014:	9310      	str	r3, [sp, #64]	; 0x40
  406016:	2301      	movs	r3, #1
  406018:	6461      	str	r1, [r4, #68]	; 0x44
  40601a:	9123      	str	r1, [sp, #140]	; 0x8c
  40601c:	930b      	str	r3, [sp, #44]	; 0x2c
  40601e:	f001 ff1b 	bl	407e58 <_Balloc>
  406022:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  406024:	9005      	str	r0, [sp, #20]
  406026:	9322      	str	r3, [sp, #136]	; 0x88
  406028:	9504      	str	r5, [sp, #16]
  40602a:	6420      	str	r0, [r4, #64]	; 0x40
  40602c:	9a02      	ldr	r2, [sp, #8]
  40602e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  406030:	2a0e      	cmp	r2, #14
  406032:	dc49      	bgt.n	4060c8 <_dtoa_r+0x2b8>
  406034:	2b00      	cmp	r3, #0
  406036:	db47      	blt.n	4060c8 <_dtoa_r+0x2b8>
  406038:	4b1f      	ldr	r3, [pc, #124]	; (4060b8 <_dtoa_r+0x2a8>)
  40603a:	9a02      	ldr	r2, [sp, #8]
  40603c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  406040:	e9d3 8900 	ldrd	r8, r9, [r3]
  406044:	9b04      	ldr	r3, [sp, #16]
  406046:	2b00      	cmp	r3, #0
  406048:	f300 825e 	bgt.w	406508 <_dtoa_r+0x6f8>
  40604c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  40604e:	2b00      	cmp	r3, #0
  406050:	f280 825a 	bge.w	406508 <_dtoa_r+0x6f8>
  406054:	9b04      	ldr	r3, [sp, #16]
  406056:	2b00      	cmp	r3, #0
  406058:	f040 85bf 	bne.w	406bda <_dtoa_r+0xdca>
  40605c:	2200      	movs	r2, #0
  40605e:	4b19      	ldr	r3, [pc, #100]	; (4060c4 <_dtoa_r+0x2b4>)
  406060:	4640      	mov	r0, r8
  406062:	4649      	mov	r1, r9
  406064:	f002 ffee 	bl	409044 <__aeabi_dmul>
  406068:	4652      	mov	r2, sl
  40606a:	465b      	mov	r3, fp
  40606c:	f003 fa70 	bl	409550 <__aeabi_dcmpge>
  406070:	9f04      	ldr	r7, [sp, #16]
  406072:	9708      	str	r7, [sp, #32]
  406074:	2800      	cmp	r0, #0
  406076:	f000 80bd 	beq.w	4061f4 <_dtoa_r+0x3e4>
  40607a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  40607c:	9d05      	ldr	r5, [sp, #20]
  40607e:	43db      	mvns	r3, r3
  406080:	9302      	str	r3, [sp, #8]
  406082:	e0be      	b.n	406202 <_dtoa_r+0x3f2>
  406084:	2301      	movs	r3, #1
  406086:	930d      	str	r3, [sp, #52]	; 0x34
  406088:	e77d      	b.n	405f86 <_dtoa_r+0x176>
  40608a:	bf00      	nop
  40608c:	f3af 8000 	nop.w
  406090:	636f4361 	.word	0x636f4361
  406094:	3fd287a7 	.word	0x3fd287a7
  406098:	8b60c8b3 	.word	0x8b60c8b3
  40609c:	3fc68a28 	.word	0x3fc68a28
  4060a0:	509f79fb 	.word	0x509f79fb
  4060a4:	3fd34413 	.word	0x3fd34413
  4060a8:	7ff00000 	.word	0x7ff00000
  4060ac:	00409d21 	.word	0x00409d21
  4060b0:	00409d30 	.word	0x00409d30
  4060b4:	3ff80000 	.word	0x3ff80000
  4060b8:	00409d40 	.word	0x00409d40
  4060bc:	00409d24 	.word	0x00409d24
  4060c0:	00409d20 	.word	0x00409d20
  4060c4:	40140000 	.word	0x40140000
  4060c8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  4060ca:	2a00      	cmp	r2, #0
  4060cc:	f040 80e1 	bne.w	406292 <_dtoa_r+0x482>
  4060d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  4060d2:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  4060d4:	9d07      	ldr	r5, [sp, #28]
  4060d6:	9308      	str	r3, [sp, #32]
  4060d8:	9903      	ldr	r1, [sp, #12]
  4060da:	2900      	cmp	r1, #0
  4060dc:	460b      	mov	r3, r1
  4060de:	dd0a      	ble.n	4060f6 <_dtoa_r+0x2e6>
  4060e0:	2d00      	cmp	r5, #0
  4060e2:	dd08      	ble.n	4060f6 <_dtoa_r+0x2e6>
  4060e4:	42a9      	cmp	r1, r5
  4060e6:	9a07      	ldr	r2, [sp, #28]
  4060e8:	bfa8      	it	ge
  4060ea:	462b      	movge	r3, r5
  4060ec:	1ad2      	subs	r2, r2, r3
  4060ee:	1aed      	subs	r5, r5, r3
  4060f0:	1acb      	subs	r3, r1, r3
  4060f2:	9207      	str	r2, [sp, #28]
  4060f4:	9303      	str	r3, [sp, #12]
  4060f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4060f8:	2b00      	cmp	r3, #0
  4060fa:	dd1b      	ble.n	406134 <_dtoa_r+0x324>
  4060fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  4060fe:	2b00      	cmp	r3, #0
  406100:	f000 84ce 	beq.w	406aa0 <_dtoa_r+0xc90>
  406104:	2e00      	cmp	r6, #0
  406106:	dd11      	ble.n	40612c <_dtoa_r+0x31c>
  406108:	9908      	ldr	r1, [sp, #32]
  40610a:	4632      	mov	r2, r6
  40610c:	4620      	mov	r0, r4
  40610e:	f002 f817 	bl	408140 <__pow5mult>
  406112:	9f06      	ldr	r7, [sp, #24]
  406114:	4601      	mov	r1, r0
  406116:	9008      	str	r0, [sp, #32]
  406118:	463a      	mov	r2, r7
  40611a:	4620      	mov	r0, r4
  40611c:	f001 ff6e 	bl	407ffc <__multiply>
  406120:	4603      	mov	r3, r0
  406122:	4639      	mov	r1, r7
  406124:	4620      	mov	r0, r4
  406126:	9306      	str	r3, [sp, #24]
  406128:	f001 febe 	bl	407ea8 <_Bfree>
  40612c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40612e:	1b9a      	subs	r2, r3, r6
  406130:	f040 84ff 	bne.w	406b32 <_dtoa_r+0xd22>
  406134:	4620      	mov	r0, r4
  406136:	2101      	movs	r1, #1
  406138:	f001 ff56 	bl	407fe8 <__i2b>
  40613c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40613e:	4607      	mov	r7, r0
  406140:	2b00      	cmp	r3, #0
  406142:	f340 8282 	ble.w	40664a <_dtoa_r+0x83a>
  406146:	4601      	mov	r1, r0
  406148:	461a      	mov	r2, r3
  40614a:	4620      	mov	r0, r4
  40614c:	f001 fff8 	bl	408140 <__pow5mult>
  406150:	9b22      	ldr	r3, [sp, #136]	; 0x88
  406152:	4607      	mov	r7, r0
  406154:	2b01      	cmp	r3, #1
  406156:	f340 84f3 	ble.w	406b40 <_dtoa_r+0xd30>
  40615a:	f04f 0800 	mov.w	r8, #0
  40615e:	693b      	ldr	r3, [r7, #16]
  406160:	eb07 0383 	add.w	r3, r7, r3, lsl #2
  406164:	6918      	ldr	r0, [r3, #16]
  406166:	f001 feeb 	bl	407f40 <__hi0bits>
  40616a:	f1c0 0020 	rsb	r0, r0, #32
  40616e:	9b03      	ldr	r3, [sp, #12]
  406170:	4418      	add	r0, r3
  406172:	f010 001f 	ands.w	r0, r0, #31
  406176:	f000 82a0 	beq.w	4066ba <_dtoa_r+0x8aa>
  40617a:	f1c0 0320 	rsb	r3, r0, #32
  40617e:	2b04      	cmp	r3, #4
  406180:	f340 8592 	ble.w	406ca8 <_dtoa_r+0xe98>
  406184:	f1c0 001c 	rsb	r0, r0, #28
  406188:	9b07      	ldr	r3, [sp, #28]
  40618a:	4405      	add	r5, r0
  40618c:	4403      	add	r3, r0
  40618e:	9307      	str	r3, [sp, #28]
  406190:	9b03      	ldr	r3, [sp, #12]
  406192:	4403      	add	r3, r0
  406194:	9303      	str	r3, [sp, #12]
  406196:	9b07      	ldr	r3, [sp, #28]
  406198:	2b00      	cmp	r3, #0
  40619a:	dd05      	ble.n	4061a8 <_dtoa_r+0x398>
  40619c:	9906      	ldr	r1, [sp, #24]
  40619e:	461a      	mov	r2, r3
  4061a0:	4620      	mov	r0, r4
  4061a2:	f002 f81d 	bl	4081e0 <__lshift>
  4061a6:	9006      	str	r0, [sp, #24]
  4061a8:	9b03      	ldr	r3, [sp, #12]
  4061aa:	2b00      	cmp	r3, #0
  4061ac:	dd05      	ble.n	4061ba <_dtoa_r+0x3aa>
  4061ae:	4639      	mov	r1, r7
  4061b0:	461a      	mov	r2, r3
  4061b2:	4620      	mov	r0, r4
  4061b4:	f002 f814 	bl	4081e0 <__lshift>
  4061b8:	4607      	mov	r7, r0
  4061ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4061bc:	2b00      	cmp	r3, #0
  4061be:	f040 838b 	bne.w	4068d8 <_dtoa_r+0xac8>
  4061c2:	9b22      	ldr	r3, [sp, #136]	; 0x88
  4061c4:	2b02      	cmp	r3, #2
  4061c6:	f340 827a 	ble.w	4066be <_dtoa_r+0x8ae>
  4061ca:	9b04      	ldr	r3, [sp, #16]
  4061cc:	2b00      	cmp	r3, #0
  4061ce:	f300 8276 	bgt.w	4066be <_dtoa_r+0x8ae>
  4061d2:	9b04      	ldr	r3, [sp, #16]
  4061d4:	2b00      	cmp	r3, #0
  4061d6:	f47f af50 	bne.w	40607a <_dtoa_r+0x26a>
  4061da:	4639      	mov	r1, r7
  4061dc:	2205      	movs	r2, #5
  4061de:	4620      	mov	r0, r4
  4061e0:	f001 fe6c 	bl	407ebc <__multadd>
  4061e4:	4607      	mov	r7, r0
  4061e6:	9806      	ldr	r0, [sp, #24]
  4061e8:	4639      	mov	r1, r7
  4061ea:	f002 f853 	bl	408294 <__mcmp>
  4061ee:	2800      	cmp	r0, #0
  4061f0:	f77f af43 	ble.w	40607a <_dtoa_r+0x26a>
  4061f4:	9a02      	ldr	r2, [sp, #8]
  4061f6:	2331      	movs	r3, #49	; 0x31
  4061f8:	3201      	adds	r2, #1
  4061fa:	9202      	str	r2, [sp, #8]
  4061fc:	9a05      	ldr	r2, [sp, #20]
  4061fe:	1c55      	adds	r5, r2, #1
  406200:	7013      	strb	r3, [r2, #0]
  406202:	4639      	mov	r1, r7
  406204:	4620      	mov	r0, r4
  406206:	f001 fe4f 	bl	407ea8 <_Bfree>
  40620a:	9b08      	ldr	r3, [sp, #32]
  40620c:	b11b      	cbz	r3, 406216 <_dtoa_r+0x406>
  40620e:	9908      	ldr	r1, [sp, #32]
  406210:	4620      	mov	r0, r4
  406212:	f001 fe49 	bl	407ea8 <_Bfree>
  406216:	4620      	mov	r0, r4
  406218:	9906      	ldr	r1, [sp, #24]
  40621a:	f001 fe45 	bl	407ea8 <_Bfree>
  40621e:	2200      	movs	r2, #0
  406220:	9b02      	ldr	r3, [sp, #8]
  406222:	702a      	strb	r2, [r5, #0]
  406224:	3301      	adds	r3, #1
  406226:	9a24      	ldr	r2, [sp, #144]	; 0x90
  406228:	6013      	str	r3, [r2, #0]
  40622a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40622c:	2b00      	cmp	r3, #0
  40622e:	f000 82a3 	beq.w	406778 <_dtoa_r+0x968>
  406232:	9805      	ldr	r0, [sp, #20]
  406234:	601d      	str	r5, [r3, #0]
  406236:	b019      	add	sp, #100	; 0x64
  406238:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40623c:	9802      	ldr	r0, [sp, #8]
  40623e:	f002 fe9b 	bl	408f78 <__aeabi_i2d>
  406242:	4632      	mov	r2, r6
  406244:	463b      	mov	r3, r7
  406246:	f003 f965 	bl	409514 <__aeabi_dcmpeq>
  40624a:	2800      	cmp	r0, #0
  40624c:	f47f ae85 	bne.w	405f5a <_dtoa_r+0x14a>
  406250:	9b02      	ldr	r3, [sp, #8]
  406252:	3b01      	subs	r3, #1
  406254:	9302      	str	r3, [sp, #8]
  406256:	e680      	b.n	405f5a <_dtoa_r+0x14a>
  406258:	9a07      	ldr	r2, [sp, #28]
  40625a:	9b02      	ldr	r3, [sp, #8]
  40625c:	1ad2      	subs	r2, r2, r3
  40625e:	425b      	negs	r3, r3
  406260:	930a      	str	r3, [sp, #40]	; 0x28
  406262:	2300      	movs	r3, #0
  406264:	9207      	str	r2, [sp, #28]
  406266:	930c      	str	r3, [sp, #48]	; 0x30
  406268:	e6a0      	b.n	405fac <_dtoa_r+0x19c>
  40626a:	425b      	negs	r3, r3
  40626c:	9307      	str	r3, [sp, #28]
  40626e:	2300      	movs	r3, #0
  406270:	9303      	str	r3, [sp, #12]
  406272:	e690      	b.n	405f96 <_dtoa_r+0x186>
  406274:	900d      	str	r0, [sp, #52]	; 0x34
  406276:	e686      	b.n	405f86 <_dtoa_r+0x176>
  406278:	4bbd      	ldr	r3, [pc, #756]	; (406570 <_dtoa_r+0x760>)
  40627a:	1b5b      	subs	r3, r3, r5
  40627c:	fa0a f003 	lsl.w	r0, sl, r3
  406280:	e638      	b.n	405ef4 <_dtoa_r+0xe4>
  406282:	2100      	movs	r1, #0
  406284:	f04f 32ff 	mov.w	r2, #4294967295
  406288:	9123      	str	r1, [sp, #140]	; 0x8c
  40628a:	2101      	movs	r1, #1
  40628c:	9204      	str	r2, [sp, #16]
  40628e:	910b      	str	r1, [sp, #44]	; 0x2c
  406290:	9210      	str	r2, [sp, #64]	; 0x40
  406292:	9a22      	ldr	r2, [sp, #136]	; 0x88
  406294:	2a01      	cmp	r2, #1
  406296:	f340 8460 	ble.w	406b5a <_dtoa_r+0xd4a>
  40629a:	9b04      	ldr	r3, [sp, #16]
  40629c:	1e5e      	subs	r6, r3, #1
  40629e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4062a0:	42b3      	cmp	r3, r6
  4062a2:	f2c0 8405 	blt.w	406ab0 <_dtoa_r+0xca0>
  4062a6:	1b9e      	subs	r6, r3, r6
  4062a8:	9b04      	ldr	r3, [sp, #16]
  4062aa:	2b00      	cmp	r3, #0
  4062ac:	f2c0 8461 	blt.w	406b72 <_dtoa_r+0xd62>
  4062b0:	9d07      	ldr	r5, [sp, #28]
  4062b2:	9b04      	ldr	r3, [sp, #16]
  4062b4:	9a07      	ldr	r2, [sp, #28]
  4062b6:	4620      	mov	r0, r4
  4062b8:	2101      	movs	r1, #1
  4062ba:	441a      	add	r2, r3
  4062bc:	9207      	str	r2, [sp, #28]
  4062be:	9a03      	ldr	r2, [sp, #12]
  4062c0:	441a      	add	r2, r3
  4062c2:	9203      	str	r2, [sp, #12]
  4062c4:	f001 fe90 	bl	407fe8 <__i2b>
  4062c8:	9008      	str	r0, [sp, #32]
  4062ca:	e705      	b.n	4060d8 <_dtoa_r+0x2c8>
  4062cc:	2301      	movs	r3, #1
  4062ce:	930b      	str	r3, [sp, #44]	; 0x2c
  4062d0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  4062d2:	2b00      	cmp	r3, #0
  4062d4:	f340 83df 	ble.w	406a96 <_dtoa_r+0xc86>
  4062d8:	2b0e      	cmp	r3, #14
  4062da:	bf8c      	ite	hi
  4062dc:	2500      	movhi	r5, #0
  4062de:	f005 0501 	andls.w	r5, r5, #1
  4062e2:	461e      	mov	r6, r3
  4062e4:	9310      	str	r3, [sp, #64]	; 0x40
  4062e6:	9304      	str	r3, [sp, #16]
  4062e8:	2100      	movs	r1, #0
  4062ea:	2e17      	cmp	r6, #23
  4062ec:	6461      	str	r1, [r4, #68]	; 0x44
  4062ee:	d909      	bls.n	406304 <_dtoa_r+0x4f4>
  4062f0:	2201      	movs	r2, #1
  4062f2:	2304      	movs	r3, #4
  4062f4:	005b      	lsls	r3, r3, #1
  4062f6:	4611      	mov	r1, r2
  4062f8:	3201      	adds	r2, #1
  4062fa:	f103 0014 	add.w	r0, r3, #20
  4062fe:	42b0      	cmp	r0, r6
  406300:	d9f8      	bls.n	4062f4 <_dtoa_r+0x4e4>
  406302:	6461      	str	r1, [r4, #68]	; 0x44
  406304:	4620      	mov	r0, r4
  406306:	f001 fda7 	bl	407e58 <_Balloc>
  40630a:	9005      	str	r0, [sp, #20]
  40630c:	6420      	str	r0, [r4, #64]	; 0x40
  40630e:	2d00      	cmp	r5, #0
  406310:	f43f ae8c 	beq.w	40602c <_dtoa_r+0x21c>
  406314:	9802      	ldr	r0, [sp, #8]
  406316:	2800      	cmp	r0, #0
  406318:	e9cd ab0e 	strd	sl, fp, [sp, #56]	; 0x38
  40631c:	f340 8233 	ble.w	406786 <_dtoa_r+0x976>
  406320:	4a94      	ldr	r2, [pc, #592]	; (406574 <_dtoa_r+0x764>)
  406322:	f000 030f 	and.w	r3, r0, #15
  406326:	1105      	asrs	r5, r0, #4
  406328:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
  40632c:	06ea      	lsls	r2, r5, #27
  40632e:	e9d3 6700 	ldrd	r6, r7, [r3]
  406332:	f140 821c 	bpl.w	40676e <_dtoa_r+0x95e>
  406336:	4b90      	ldr	r3, [pc, #576]	; (406578 <_dtoa_r+0x768>)
  406338:	4650      	mov	r0, sl
  40633a:	4659      	mov	r1, fp
  40633c:	f005 050f 	and.w	r5, r5, #15
  406340:	f04f 0803 	mov.w	r8, #3
  406344:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
  406348:	f002 ffa6 	bl	409298 <__aeabi_ddiv>
  40634c:	4682      	mov	sl, r0
  40634e:	468b      	mov	fp, r1
  406350:	b18d      	cbz	r5, 406376 <_dtoa_r+0x566>
  406352:	f8df 9224 	ldr.w	r9, [pc, #548]	; 406578 <_dtoa_r+0x768>
  406356:	07eb      	lsls	r3, r5, #31
  406358:	4630      	mov	r0, r6
  40635a:	4639      	mov	r1, r7
  40635c:	d507      	bpl.n	40636e <_dtoa_r+0x55e>
  40635e:	f108 0801 	add.w	r8, r8, #1
  406362:	e9d9 2300 	ldrd	r2, r3, [r9]
  406366:	f002 fe6d 	bl	409044 <__aeabi_dmul>
  40636a:	4606      	mov	r6, r0
  40636c:	460f      	mov	r7, r1
  40636e:	106d      	asrs	r5, r5, #1
  406370:	f109 0908 	add.w	r9, r9, #8
  406374:	d1ef      	bne.n	406356 <_dtoa_r+0x546>
  406376:	4650      	mov	r0, sl
  406378:	4659      	mov	r1, fp
  40637a:	4632      	mov	r2, r6
  40637c:	463b      	mov	r3, r7
  40637e:	f002 ff8b 	bl	409298 <__aeabi_ddiv>
  406382:	e9cd 0108 	strd	r0, r1, [sp, #32]
  406386:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  406388:	b143      	cbz	r3, 40639c <_dtoa_r+0x58c>
  40638a:	2200      	movs	r2, #0
  40638c:	4b7b      	ldr	r3, [pc, #492]	; (40657c <_dtoa_r+0x76c>)
  40638e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  406392:	f003 f8c9 	bl	409528 <__aeabi_dcmplt>
  406396:	2800      	cmp	r0, #0
  406398:	f040 8393 	bne.w	406ac2 <_dtoa_r+0xcb2>
  40639c:	4640      	mov	r0, r8
  40639e:	f002 fdeb 	bl	408f78 <__aeabi_i2d>
  4063a2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
  4063a6:	f002 fe4d 	bl	409044 <__aeabi_dmul>
  4063aa:	4b75      	ldr	r3, [pc, #468]	; (406580 <_dtoa_r+0x770>)
  4063ac:	2200      	movs	r2, #0
  4063ae:	f002 fc97 	bl	408ce0 <__adddf3>
  4063b2:	9b04      	ldr	r3, [sp, #16]
  4063b4:	4606      	mov	r6, r0
  4063b6:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
  4063ba:	2b00      	cmp	r3, #0
  4063bc:	f000 8161 	beq.w	406682 <_dtoa_r+0x872>
  4063c0:	9b02      	ldr	r3, [sp, #8]
  4063c2:	f8dd c010 	ldr.w	ip, [sp, #16]
  4063c6:	9314      	str	r3, [sp, #80]	; 0x50
  4063c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  4063ca:	2b00      	cmp	r3, #0
  4063cc:	f000 820b 	beq.w	4067e6 <_dtoa_r+0x9d6>
  4063d0:	4b68      	ldr	r3, [pc, #416]	; (406574 <_dtoa_r+0x764>)
  4063d2:	2000      	movs	r0, #0
  4063d4:	9a05      	ldr	r2, [sp, #20]
  4063d6:	eb03 03cc 	add.w	r3, r3, ip, lsl #3
  4063da:	496a      	ldr	r1, [pc, #424]	; (406584 <_dtoa_r+0x774>)
  4063dc:	1c55      	adds	r5, r2, #1
  4063de:	f8cd c048 	str.w	ip, [sp, #72]	; 0x48
  4063e2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
  4063e6:	f002 ff57 	bl	409298 <__aeabi_ddiv>
  4063ea:	4632      	mov	r2, r6
  4063ec:	463b      	mov	r3, r7
  4063ee:	f002 fc75 	bl	408cdc <__aeabi_dsub>
  4063f2:	4682      	mov	sl, r0
  4063f4:	468b      	mov	fp, r1
  4063f6:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
  4063fa:	4649      	mov	r1, r9
  4063fc:	4640      	mov	r0, r8
  4063fe:	f003 f8bb 	bl	409578 <__aeabi_d2iz>
  406402:	4606      	mov	r6, r0
  406404:	f002 fdb8 	bl	408f78 <__aeabi_i2d>
  406408:	4602      	mov	r2, r0
  40640a:	3630      	adds	r6, #48	; 0x30
  40640c:	460b      	mov	r3, r1
  40640e:	4640      	mov	r0, r8
  406410:	4649      	mov	r1, r9
  406412:	f002 fc63 	bl	408cdc <__aeabi_dsub>
  406416:	9f05      	ldr	r7, [sp, #20]
  406418:	4680      	mov	r8, r0
  40641a:	4689      	mov	r9, r1
  40641c:	b2f6      	uxtb	r6, r6
  40641e:	4650      	mov	r0, sl
  406420:	4659      	mov	r1, fp
  406422:	4642      	mov	r2, r8
  406424:	464b      	mov	r3, r9
  406426:	703e      	strb	r6, [r7, #0]
  406428:	f003 f89c 	bl	409564 <__aeabi_dcmpgt>
  40642c:	2800      	cmp	r0, #0
  40642e:	f040 8243 	bne.w	4068b8 <_dtoa_r+0xaa8>
  406432:	4642      	mov	r2, r8
  406434:	464b      	mov	r3, r9
  406436:	2000      	movs	r0, #0
  406438:	4950      	ldr	r1, [pc, #320]	; (40657c <_dtoa_r+0x76c>)
  40643a:	f002 fc4f 	bl	408cdc <__aeabi_dsub>
  40643e:	4602      	mov	r2, r0
  406440:	460b      	mov	r3, r1
  406442:	4650      	mov	r0, sl
  406444:	4659      	mov	r1, fp
  406446:	f003 f88d 	bl	409564 <__aeabi_dcmpgt>
  40644a:	2800      	cmp	r0, #0
  40644c:	f040 80eb 	bne.w	406626 <_dtoa_r+0x816>
  406450:	f8dd c048 	ldr.w	ip, [sp, #72]	; 0x48
  406454:	f1bc 0f01 	cmp.w	ip, #1
  406458:	f340 8192 	ble.w	406780 <_dtoa_r+0x970>
  40645c:	9f05      	ldr	r7, [sp, #20]
  40645e:	9412      	str	r4, [sp, #72]	; 0x48
  406460:	4467      	add	r7, ip
  406462:	9708      	str	r7, [sp, #32]
  406464:	e00e      	b.n	406484 <_dtoa_r+0x674>
  406466:	2000      	movs	r0, #0
  406468:	4944      	ldr	r1, [pc, #272]	; (40657c <_dtoa_r+0x76c>)
  40646a:	f002 fc37 	bl	408cdc <__aeabi_dsub>
  40646e:	4652      	mov	r2, sl
  406470:	465b      	mov	r3, fp
  406472:	f003 f859 	bl	409528 <__aeabi_dcmplt>
  406476:	2800      	cmp	r0, #0
  406478:	f040 83a1 	bne.w	406bbe <_dtoa_r+0xdae>
  40647c:	9b08      	ldr	r3, [sp, #32]
  40647e:	429d      	cmp	r5, r3
  406480:	f000 817d 	beq.w	40677e <_dtoa_r+0x96e>
  406484:	4650      	mov	r0, sl
  406486:	4659      	mov	r1, fp
  406488:	2200      	movs	r2, #0
  40648a:	4b3f      	ldr	r3, [pc, #252]	; (406588 <_dtoa_r+0x778>)
  40648c:	f002 fdda 	bl	409044 <__aeabi_dmul>
  406490:	2200      	movs	r2, #0
  406492:	4b3d      	ldr	r3, [pc, #244]	; (406588 <_dtoa_r+0x778>)
  406494:	4682      	mov	sl, r0
  406496:	468b      	mov	fp, r1
  406498:	4640      	mov	r0, r8
  40649a:	4649      	mov	r1, r9
  40649c:	f002 fdd2 	bl	409044 <__aeabi_dmul>
  4064a0:	4606      	mov	r6, r0
  4064a2:	460f      	mov	r7, r1
  4064a4:	f003 f868 	bl	409578 <__aeabi_d2iz>
  4064a8:	4604      	mov	r4, r0
  4064aa:	f002 fd65 	bl	408f78 <__aeabi_i2d>
  4064ae:	4602      	mov	r2, r0
  4064b0:	460b      	mov	r3, r1
  4064b2:	3430      	adds	r4, #48	; 0x30
  4064b4:	4630      	mov	r0, r6
  4064b6:	4639      	mov	r1, r7
  4064b8:	b2e6      	uxtb	r6, r4
  4064ba:	f002 fc0f 	bl	408cdc <__aeabi_dsub>
  4064be:	4680      	mov	r8, r0
  4064c0:	4689      	mov	r9, r1
  4064c2:	4652      	mov	r2, sl
  4064c4:	465b      	mov	r3, fp
  4064c6:	f805 6b01 	strb.w	r6, [r5], #1
  4064ca:	f003 f82d 	bl	409528 <__aeabi_dcmplt>
  4064ce:	4642      	mov	r2, r8
  4064d0:	464b      	mov	r3, r9
  4064d2:	2800      	cmp	r0, #0
  4064d4:	d0c7      	beq.n	406466 <_dtoa_r+0x656>
  4064d6:	9b14      	ldr	r3, [sp, #80]	; 0x50
  4064d8:	9c12      	ldr	r4, [sp, #72]	; 0x48
  4064da:	9302      	str	r3, [sp, #8]
  4064dc:	e69b      	b.n	406216 <_dtoa_r+0x406>
  4064de:	2300      	movs	r3, #0
  4064e0:	930b      	str	r3, [sp, #44]	; 0x2c
  4064e2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  4064e4:	9a02      	ldr	r2, [sp, #8]
  4064e6:	4413      	add	r3, r2
  4064e8:	9310      	str	r3, [sp, #64]	; 0x40
  4064ea:	3301      	adds	r3, #1
  4064ec:	2b00      	cmp	r3, #0
  4064ee:	9304      	str	r3, [sp, #16]
  4064f0:	f340 82c9 	ble.w	406a86 <_dtoa_r+0xc76>
  4064f4:	9e04      	ldr	r6, [sp, #16]
  4064f6:	2e0e      	cmp	r6, #14
  4064f8:	bf8c      	ite	hi
  4064fa:	2500      	movhi	r5, #0
  4064fc:	f005 0501 	andls.w	r5, r5, #1
  406500:	e6f2      	b.n	4062e8 <_dtoa_r+0x4d8>
  406502:	2300      	movs	r3, #0
  406504:	930b      	str	r3, [sp, #44]	; 0x2c
  406506:	e6e3      	b.n	4062d0 <_dtoa_r+0x4c0>
  406508:	9905      	ldr	r1, [sp, #20]
  40650a:	4642      	mov	r2, r8
  40650c:	464b      	mov	r3, r9
  40650e:	4650      	mov	r0, sl
  406510:	1c4d      	adds	r5, r1, #1
  406512:	4659      	mov	r1, fp
  406514:	f002 fec0 	bl	409298 <__aeabi_ddiv>
  406518:	4656      	mov	r6, sl
  40651a:	f003 f82d 	bl	409578 <__aeabi_d2iz>
  40651e:	4682      	mov	sl, r0
  406520:	f002 fd2a 	bl	408f78 <__aeabi_i2d>
  406524:	4642      	mov	r2, r8
  406526:	464b      	mov	r3, r9
  406528:	f002 fd8c 	bl	409044 <__aeabi_dmul>
  40652c:	4602      	mov	r2, r0
  40652e:	460b      	mov	r3, r1
  406530:	4630      	mov	r0, r6
  406532:	4659      	mov	r1, fp
  406534:	f002 fbd2 	bl	408cdc <__aeabi_dsub>
  406538:	f10a 0330 	add.w	r3, sl, #48	; 0x30
  40653c:	9a05      	ldr	r2, [sp, #20]
  40653e:	4606      	mov	r6, r0
  406540:	460f      	mov	r7, r1
  406542:	7013      	strb	r3, [r2, #0]
  406544:	9b04      	ldr	r3, [sp, #16]
  406546:	2b01      	cmp	r3, #1
  406548:	d04d      	beq.n	4065e6 <_dtoa_r+0x7d6>
  40654a:	2200      	movs	r2, #0
  40654c:	4b0e      	ldr	r3, [pc, #56]	; (406588 <_dtoa_r+0x778>)
  40654e:	f002 fd79 	bl	409044 <__aeabi_dmul>
  406552:	2200      	movs	r2, #0
  406554:	2300      	movs	r3, #0
  406556:	4606      	mov	r6, r0
  406558:	460f      	mov	r7, r1
  40655a:	f002 ffdb 	bl	409514 <__aeabi_dcmpeq>
  40655e:	2800      	cmp	r0, #0
  406560:	f47f ae59 	bne.w	406216 <_dtoa_r+0x406>
  406564:	9403      	str	r4, [sp, #12]
  406566:	f8dd b014 	ldr.w	fp, [sp, #20]
  40656a:	9c04      	ldr	r4, [sp, #16]
  40656c:	e019      	b.n	4065a2 <_dtoa_r+0x792>
  40656e:	bf00      	nop
  406570:	fffffbee 	.word	0xfffffbee
  406574:	00409d40 	.word	0x00409d40
  406578:	00409e18 	.word	0x00409e18
  40657c:	3ff00000 	.word	0x3ff00000
  406580:	401c0000 	.word	0x401c0000
  406584:	3fe00000 	.word	0x3fe00000
  406588:	40240000 	.word	0x40240000
  40658c:	f002 fd5a 	bl	409044 <__aeabi_dmul>
  406590:	2200      	movs	r2, #0
  406592:	2300      	movs	r3, #0
  406594:	4606      	mov	r6, r0
  406596:	460f      	mov	r7, r1
  406598:	f002 ffbc 	bl	409514 <__aeabi_dcmpeq>
  40659c:	2800      	cmp	r0, #0
  40659e:	f040 82e5 	bne.w	406b6c <_dtoa_r+0xd5c>
  4065a2:	4642      	mov	r2, r8
  4065a4:	464b      	mov	r3, r9
  4065a6:	4630      	mov	r0, r6
  4065a8:	4639      	mov	r1, r7
  4065aa:	f002 fe75 	bl	409298 <__aeabi_ddiv>
  4065ae:	f002 ffe3 	bl	409578 <__aeabi_d2iz>
  4065b2:	4682      	mov	sl, r0
  4065b4:	f002 fce0 	bl	408f78 <__aeabi_i2d>
  4065b8:	4642      	mov	r2, r8
  4065ba:	464b      	mov	r3, r9
  4065bc:	f002 fd42 	bl	409044 <__aeabi_dmul>
  4065c0:	4602      	mov	r2, r0
  4065c2:	460b      	mov	r3, r1
  4065c4:	4630      	mov	r0, r6
  4065c6:	4639      	mov	r1, r7
  4065c8:	f002 fb88 	bl	408cdc <__aeabi_dsub>
  4065cc:	f10a 0e30 	add.w	lr, sl, #48	; 0x30
  4065d0:	4606      	mov	r6, r0
  4065d2:	460f      	mov	r7, r1
  4065d4:	f805 eb01 	strb.w	lr, [r5], #1
  4065d8:	ebcb 0e05 	rsb	lr, fp, r5
  4065dc:	2200      	movs	r2, #0
  4065de:	4bb8      	ldr	r3, [pc, #736]	; (4068c0 <_dtoa_r+0xab0>)
  4065e0:	4574      	cmp	r4, lr
  4065e2:	d1d3      	bne.n	40658c <_dtoa_r+0x77c>
  4065e4:	9c03      	ldr	r4, [sp, #12]
  4065e6:	4632      	mov	r2, r6
  4065e8:	463b      	mov	r3, r7
  4065ea:	4630      	mov	r0, r6
  4065ec:	4639      	mov	r1, r7
  4065ee:	f002 fb77 	bl	408ce0 <__adddf3>
  4065f2:	4606      	mov	r6, r0
  4065f4:	460f      	mov	r7, r1
  4065f6:	4640      	mov	r0, r8
  4065f8:	4649      	mov	r1, r9
  4065fa:	4632      	mov	r2, r6
  4065fc:	463b      	mov	r3, r7
  4065fe:	f002 ff93 	bl	409528 <__aeabi_dcmplt>
  406602:	b960      	cbnz	r0, 40661e <_dtoa_r+0x80e>
  406604:	4640      	mov	r0, r8
  406606:	4649      	mov	r1, r9
  406608:	4632      	mov	r2, r6
  40660a:	463b      	mov	r3, r7
  40660c:	f002 ff82 	bl	409514 <__aeabi_dcmpeq>
  406610:	2800      	cmp	r0, #0
  406612:	f43f ae00 	beq.w	406216 <_dtoa_r+0x406>
  406616:	f01a 0f01 	tst.w	sl, #1
  40661a:	f43f adfc 	beq.w	406216 <_dtoa_r+0x406>
  40661e:	9b02      	ldr	r3, [sp, #8]
  406620:	9314      	str	r3, [sp, #80]	; 0x50
  406622:	f815 6c01 	ldrb.w	r6, [r5, #-1]
  406626:	1e6a      	subs	r2, r5, #1
  406628:	9b05      	ldr	r3, [sp, #20]
  40662a:	e004      	b.n	406636 <_dtoa_r+0x826>
  40662c:	429a      	cmp	r2, r3
  40662e:	f000 8277 	beq.w	406b20 <_dtoa_r+0xd10>
  406632:	f812 6d01 	ldrb.w	r6, [r2, #-1]!
  406636:	2e39      	cmp	r6, #57	; 0x39
  406638:	f102 0501 	add.w	r5, r2, #1
  40663c:	d0f6      	beq.n	40662c <_dtoa_r+0x81c>
  40663e:	1c73      	adds	r3, r6, #1
  406640:	9914      	ldr	r1, [sp, #80]	; 0x50
  406642:	b2db      	uxtb	r3, r3
  406644:	9102      	str	r1, [sp, #8]
  406646:	7013      	strb	r3, [r2, #0]
  406648:	e5e5      	b.n	406216 <_dtoa_r+0x406>
  40664a:	9b22      	ldr	r3, [sp, #136]	; 0x88
  40664c:	2b01      	cmp	r3, #1
  40664e:	f340 8161 	ble.w	406914 <_dtoa_r+0xb04>
  406652:	f04f 0800 	mov.w	r8, #0
  406656:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  406658:	2b00      	cmp	r3, #0
  40665a:	f47f ad80 	bne.w	40615e <_dtoa_r+0x34e>
  40665e:	2001      	movs	r0, #1
  406660:	e585      	b.n	40616e <_dtoa_r+0x35e>
  406662:	4640      	mov	r0, r8
  406664:	f002 fc88 	bl	408f78 <__aeabi_i2d>
  406668:	4602      	mov	r2, r0
  40666a:	460b      	mov	r3, r1
  40666c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  406670:	f002 fce8 	bl	409044 <__aeabi_dmul>
  406674:	2200      	movs	r2, #0
  406676:	4b93      	ldr	r3, [pc, #588]	; (4068c4 <_dtoa_r+0xab4>)
  406678:	f002 fb32 	bl	408ce0 <__adddf3>
  40667c:	4606      	mov	r6, r0
  40667e:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
  406682:	2200      	movs	r2, #0
  406684:	4b90      	ldr	r3, [pc, #576]	; (4068c8 <_dtoa_r+0xab8>)
  406686:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  40668a:	f002 fb27 	bl	408cdc <__aeabi_dsub>
  40668e:	4632      	mov	r2, r6
  406690:	463b      	mov	r3, r7
  406692:	4680      	mov	r8, r0
  406694:	4689      	mov	r9, r1
  406696:	f002 ff65 	bl	409564 <__aeabi_dcmpgt>
  40669a:	4605      	mov	r5, r0
  40669c:	2800      	cmp	r0, #0
  40669e:	f040 809f 	bne.w	4067e0 <_dtoa_r+0x9d0>
  4066a2:	4632      	mov	r2, r6
  4066a4:	4640      	mov	r0, r8
  4066a6:	4649      	mov	r1, r9
  4066a8:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
  4066ac:	f002 ff3c 	bl	409528 <__aeabi_dcmplt>
  4066b0:	2800      	cmp	r0, #0
  4066b2:	d065      	beq.n	406780 <_dtoa_r+0x970>
  4066b4:	462f      	mov	r7, r5
  4066b6:	9508      	str	r5, [sp, #32]
  4066b8:	e4df      	b.n	40607a <_dtoa_r+0x26a>
  4066ba:	201c      	movs	r0, #28
  4066bc:	e564      	b.n	406188 <_dtoa_r+0x378>
  4066be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  4066c0:	2b00      	cmp	r3, #0
  4066c2:	f040 814f 	bne.w	406964 <_dtoa_r+0xb54>
  4066c6:	f8dd a014 	ldr.w	sl, [sp, #20]
  4066ca:	9e06      	ldr	r6, [sp, #24]
  4066cc:	4655      	mov	r5, sl
  4066ce:	f8dd 8010 	ldr.w	r8, [sp, #16]
  4066d2:	e002      	b.n	4066da <_dtoa_r+0x8ca>
  4066d4:	f001 fbf2 	bl	407ebc <__multadd>
  4066d8:	4606      	mov	r6, r0
  4066da:	4639      	mov	r1, r7
  4066dc:	4630      	mov	r0, r6
  4066de:	f7ff faf7 	bl	405cd0 <quorem>
  4066e2:	f100 0930 	add.w	r9, r0, #48	; 0x30
  4066e6:	4631      	mov	r1, r6
  4066e8:	4620      	mov	r0, r4
  4066ea:	f805 9b01 	strb.w	r9, [r5], #1
  4066ee:	ebca 0e05 	rsb	lr, sl, r5
  4066f2:	220a      	movs	r2, #10
  4066f4:	2300      	movs	r3, #0
  4066f6:	45c6      	cmp	lr, r8
  4066f8:	dbec      	blt.n	4066d4 <_dtoa_r+0x8c4>
  4066fa:	9b05      	ldr	r3, [sp, #20]
  4066fc:	f04f 0a00 	mov.w	sl, #0
  406700:	9a04      	ldr	r2, [sp, #16]
  406702:	9606      	str	r6, [sp, #24]
  406704:	2a01      	cmp	r2, #1
  406706:	bfac      	ite	ge
  406708:	189b      	addge	r3, r3, r2
  40670a:	3301      	addlt	r3, #1
  40670c:	461d      	mov	r5, r3
  40670e:	9906      	ldr	r1, [sp, #24]
  406710:	2201      	movs	r2, #1
  406712:	4620      	mov	r0, r4
  406714:	f001 fd64 	bl	4081e0 <__lshift>
  406718:	4639      	mov	r1, r7
  40671a:	9006      	str	r0, [sp, #24]
  40671c:	f001 fdba 	bl	408294 <__mcmp>
  406720:	2800      	cmp	r0, #0
  406722:	f340 824e 	ble.w	406bc2 <_dtoa_r+0xdb2>
  406726:	f815 2c01 	ldrb.w	r2, [r5, #-1]
  40672a:	1e6b      	subs	r3, r5, #1
  40672c:	9905      	ldr	r1, [sp, #20]
  40672e:	e004      	b.n	40673a <_dtoa_r+0x92a>
  406730:	428b      	cmp	r3, r1
  406732:	f000 820b 	beq.w	406b4c <_dtoa_r+0xd3c>
  406736:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
  40673a:	2a39      	cmp	r2, #57	; 0x39
  40673c:	f103 0501 	add.w	r5, r3, #1
  406740:	d0f6      	beq.n	406730 <_dtoa_r+0x920>
  406742:	3201      	adds	r2, #1
  406744:	701a      	strb	r2, [r3, #0]
  406746:	4639      	mov	r1, r7
  406748:	4620      	mov	r0, r4
  40674a:	f001 fbad 	bl	407ea8 <_Bfree>
  40674e:	9b08      	ldr	r3, [sp, #32]
  406750:	2b00      	cmp	r3, #0
  406752:	f43f ad60 	beq.w	406216 <_dtoa_r+0x406>
  406756:	459a      	cmp	sl, r3
  406758:	f43f ad59 	beq.w	40620e <_dtoa_r+0x3fe>
  40675c:	f1ba 0f00 	cmp.w	sl, #0
  406760:	f43f ad55 	beq.w	40620e <_dtoa_r+0x3fe>
  406764:	4651      	mov	r1, sl
  406766:	4620      	mov	r0, r4
  406768:	f001 fb9e 	bl	407ea8 <_Bfree>
  40676c:	e54f      	b.n	40620e <_dtoa_r+0x3fe>
  40676e:	e9dd ab0e 	ldrd	sl, fp, [sp, #56]	; 0x38
  406772:	f04f 0802 	mov.w	r8, #2
  406776:	e5eb      	b.n	406350 <_dtoa_r+0x540>
  406778:	9805      	ldr	r0, [sp, #20]
  40677a:	f7ff bb7a 	b.w	405e72 <_dtoa_r+0x62>
  40677e:	9c12      	ldr	r4, [sp, #72]	; 0x48
  406780:	e9dd ab0e 	ldrd	sl, fp, [sp, #56]	; 0x38
  406784:	e452      	b.n	40602c <_dtoa_r+0x21c>
  406786:	9b02      	ldr	r3, [sp, #8]
  406788:	425d      	negs	r5, r3
  40678a:	2d00      	cmp	r5, #0
  40678c:	f000 81c1 	beq.w	406b12 <_dtoa_r+0xd02>
  406790:	f005 020f 	and.w	r2, r5, #15
  406794:	4b4d      	ldr	r3, [pc, #308]	; (4068cc <_dtoa_r+0xabc>)
  406796:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  40679a:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
  40679e:	e9d3 2300 	ldrd	r2, r3, [r3]
  4067a2:	f002 fc4f 	bl	409044 <__aeabi_dmul>
  4067a6:	112d      	asrs	r5, r5, #4
  4067a8:	e9cd 0108 	strd	r0, r1, [sp, #32]
  4067ac:	f000 8275 	beq.w	406c9a <_dtoa_r+0xe8a>
  4067b0:	4e47      	ldr	r6, [pc, #284]	; (4068d0 <_dtoa_r+0xac0>)
  4067b2:	f04f 0802 	mov.w	r8, #2
  4067b6:	4602      	mov	r2, r0
  4067b8:	460b      	mov	r3, r1
  4067ba:	07ef      	lsls	r7, r5, #31
  4067bc:	4610      	mov	r0, r2
  4067be:	4619      	mov	r1, r3
  4067c0:	d507      	bpl.n	4067d2 <_dtoa_r+0x9c2>
  4067c2:	f108 0801 	add.w	r8, r8, #1
  4067c6:	e9d6 2300 	ldrd	r2, r3, [r6]
  4067ca:	f002 fc3b 	bl	409044 <__aeabi_dmul>
  4067ce:	4602      	mov	r2, r0
  4067d0:	460b      	mov	r3, r1
  4067d2:	106d      	asrs	r5, r5, #1
  4067d4:	f106 0608 	add.w	r6, r6, #8
  4067d8:	d1ef      	bne.n	4067ba <_dtoa_r+0x9aa>
  4067da:	e9cd 2308 	strd	r2, r3, [sp, #32]
  4067de:	e5d2      	b.n	406386 <_dtoa_r+0x576>
  4067e0:	2700      	movs	r7, #0
  4067e2:	9708      	str	r7, [sp, #32]
  4067e4:	e506      	b.n	4061f4 <_dtoa_r+0x3e4>
  4067e6:	f10c 3bff 	add.w	fp, ip, #4294967295
  4067ea:	4938      	ldr	r1, [pc, #224]	; (4068cc <_dtoa_r+0xabc>)
  4067ec:	4632      	mov	r2, r6
  4067ee:	463b      	mov	r3, r7
  4067f0:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
  4067f4:	f8cd c054 	str.w	ip, [sp, #84]	; 0x54
  4067f8:	9f05      	ldr	r7, [sp, #20]
  4067fa:	e9d1 0100 	ldrd	r0, r1, [r1]
  4067fe:	f002 fc21 	bl	409044 <__aeabi_dmul>
  406802:	1c7d      	adds	r5, r7, #1
  406804:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
  406808:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
  40680c:	4649      	mov	r1, r9
  40680e:	4640      	mov	r0, r8
  406810:	f002 feb2 	bl	409578 <__aeabi_d2iz>
  406814:	4606      	mov	r6, r0
  406816:	f002 fbaf 	bl	408f78 <__aeabi_i2d>
  40681a:	4602      	mov	r2, r0
  40681c:	460b      	mov	r3, r1
  40681e:	4640      	mov	r0, r8
  406820:	4649      	mov	r1, r9
  406822:	3630      	adds	r6, #48	; 0x30
  406824:	f002 fa5a 	bl	408cdc <__aeabi_dsub>
  406828:	f8dd c054 	ldr.w	ip, [sp, #84]	; 0x54
  40682c:	4680      	mov	r8, r0
  40682e:	4689      	mov	r9, r1
  406830:	f1bc 0f01 	cmp.w	ip, #1
  406834:	703e      	strb	r6, [r7, #0]
  406836:	d020      	beq.n	40687a <_dtoa_r+0xa6a>
  406838:	9b05      	ldr	r3, [sp, #20]
  40683a:	4640      	mov	r0, r8
  40683c:	46aa      	mov	sl, r5
  40683e:	46a8      	mov	r8, r5
  406840:	eb03 070c 	add.w	r7, r3, ip
  406844:	46b9      	mov	r9, r7
  406846:	2200      	movs	r2, #0
  406848:	4b1d      	ldr	r3, [pc, #116]	; (4068c0 <_dtoa_r+0xab0>)
  40684a:	f002 fbfb 	bl	409044 <__aeabi_dmul>
  40684e:	460f      	mov	r7, r1
  406850:	4606      	mov	r6, r0
  406852:	f002 fe91 	bl	409578 <__aeabi_d2iz>
  406856:	4605      	mov	r5, r0
  406858:	f002 fb8e 	bl	408f78 <__aeabi_i2d>
  40685c:	4602      	mov	r2, r0
  40685e:	460b      	mov	r3, r1
  406860:	3530      	adds	r5, #48	; 0x30
  406862:	4630      	mov	r0, r6
  406864:	4639      	mov	r1, r7
  406866:	f002 fa39 	bl	408cdc <__aeabi_dsub>
  40686a:	f80a 5b01 	strb.w	r5, [sl], #1
  40686e:	45ca      	cmp	sl, r9
  406870:	d1e9      	bne.n	406846 <_dtoa_r+0xa36>
  406872:	4645      	mov	r5, r8
  406874:	4689      	mov	r9, r1
  406876:	4680      	mov	r8, r0
  406878:	445d      	add	r5, fp
  40687a:	2200      	movs	r2, #0
  40687c:	4b15      	ldr	r3, [pc, #84]	; (4068d4 <_dtoa_r+0xac4>)
  40687e:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
  406882:	f002 fa2d 	bl	408ce0 <__adddf3>
  406886:	4642      	mov	r2, r8
  406888:	464b      	mov	r3, r9
  40688a:	f002 fe4d 	bl	409528 <__aeabi_dcmplt>
  40688e:	2800      	cmp	r0, #0
  406890:	f47f aec7 	bne.w	406622 <_dtoa_r+0x812>
  406894:	2000      	movs	r0, #0
  406896:	490f      	ldr	r1, [pc, #60]	; (4068d4 <_dtoa_r+0xac4>)
  406898:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
  40689c:	f002 fa1e 	bl	408cdc <__aeabi_dsub>
  4068a0:	4642      	mov	r2, r8
  4068a2:	464b      	mov	r3, r9
  4068a4:	f002 fe5e 	bl	409564 <__aeabi_dcmpgt>
  4068a8:	b908      	cbnz	r0, 4068ae <_dtoa_r+0xa9e>
  4068aa:	e769      	b.n	406780 <_dtoa_r+0x970>
  4068ac:	4615      	mov	r5, r2
  4068ae:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  4068b2:	1e6a      	subs	r2, r5, #1
  4068b4:	2b30      	cmp	r3, #48	; 0x30
  4068b6:	d0f9      	beq.n	4068ac <_dtoa_r+0xa9c>
  4068b8:	9b14      	ldr	r3, [sp, #80]	; 0x50
  4068ba:	9302      	str	r3, [sp, #8]
  4068bc:	e4ab      	b.n	406216 <_dtoa_r+0x406>
  4068be:	bf00      	nop
  4068c0:	40240000 	.word	0x40240000
  4068c4:	401c0000 	.word	0x401c0000
  4068c8:	40140000 	.word	0x40140000
  4068cc:	00409d40 	.word	0x00409d40
  4068d0:	00409e18 	.word	0x00409e18
  4068d4:	3fe00000 	.word	0x3fe00000
  4068d8:	9806      	ldr	r0, [sp, #24]
  4068da:	4639      	mov	r1, r7
  4068dc:	f001 fcda 	bl	408294 <__mcmp>
  4068e0:	2800      	cmp	r0, #0
  4068e2:	f6bf ac6e 	bge.w	4061c2 <_dtoa_r+0x3b2>
  4068e6:	9e02      	ldr	r6, [sp, #8]
  4068e8:	2300      	movs	r3, #0
  4068ea:	9906      	ldr	r1, [sp, #24]
  4068ec:	4620      	mov	r0, r4
  4068ee:	3e01      	subs	r6, #1
  4068f0:	220a      	movs	r2, #10
  4068f2:	9602      	str	r6, [sp, #8]
  4068f4:	f001 fae2 	bl	407ebc <__multadd>
  4068f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  4068fa:	9006      	str	r0, [sp, #24]
  4068fc:	bb1b      	cbnz	r3, 406946 <_dtoa_r+0xb36>
  4068fe:	9b22      	ldr	r3, [sp, #136]	; 0x88
  406900:	2b02      	cmp	r3, #2
  406902:	f340 81ce 	ble.w	406ca2 <_dtoa_r+0xe92>
  406906:	9b10      	ldr	r3, [sp, #64]	; 0x40
  406908:	2b00      	cmp	r3, #0
  40690a:	f300 81ca 	bgt.w	406ca2 <_dtoa_r+0xe92>
  40690e:	9b10      	ldr	r3, [sp, #64]	; 0x40
  406910:	9304      	str	r3, [sp, #16]
  406912:	e45e      	b.n	4061d2 <_dtoa_r+0x3c2>
  406914:	f1ba 0f00 	cmp.w	sl, #0
  406918:	f47f ae9b 	bne.w	406652 <_dtoa_r+0x842>
  40691c:	f3cb 0313 	ubfx	r3, fp, #0, #20
  406920:	2b00      	cmp	r3, #0
  406922:	f47f ae96 	bne.w	406652 <_dtoa_r+0x842>
  406926:	f02b 4600 	bic.w	r6, fp, #2147483648	; 0x80000000
  40692a:	0d36      	lsrs	r6, r6, #20
  40692c:	0536      	lsls	r6, r6, #20
  40692e:	2e00      	cmp	r6, #0
  406930:	f000 818a 	beq.w	406c48 <_dtoa_r+0xe38>
  406934:	9b07      	ldr	r3, [sp, #28]
  406936:	f04f 0801 	mov.w	r8, #1
  40693a:	3301      	adds	r3, #1
  40693c:	9307      	str	r3, [sp, #28]
  40693e:	9b03      	ldr	r3, [sp, #12]
  406940:	3301      	adds	r3, #1
  406942:	9303      	str	r3, [sp, #12]
  406944:	e687      	b.n	406656 <_dtoa_r+0x846>
  406946:	2300      	movs	r3, #0
  406948:	9908      	ldr	r1, [sp, #32]
  40694a:	4620      	mov	r0, r4
  40694c:	220a      	movs	r2, #10
  40694e:	f001 fab5 	bl	407ebc <__multadd>
  406952:	9b22      	ldr	r3, [sp, #136]	; 0x88
  406954:	9008      	str	r0, [sp, #32]
  406956:	2b02      	cmp	r3, #2
  406958:	dd02      	ble.n	406960 <_dtoa_r+0xb50>
  40695a:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40695c:	2b00      	cmp	r3, #0
  40695e:	ddd6      	ble.n	40690e <_dtoa_r+0xafe>
  406960:	9b10      	ldr	r3, [sp, #64]	; 0x40
  406962:	9304      	str	r3, [sp, #16]
  406964:	2d00      	cmp	r5, #0
  406966:	dd05      	ble.n	406974 <_dtoa_r+0xb64>
  406968:	9908      	ldr	r1, [sp, #32]
  40696a:	462a      	mov	r2, r5
  40696c:	4620      	mov	r0, r4
  40696e:	f001 fc37 	bl	4081e0 <__lshift>
  406972:	9008      	str	r0, [sp, #32]
  406974:	f1b8 0f00 	cmp.w	r8, #0
  406978:	f040 8133 	bne.w	406be2 <_dtoa_r+0xdd2>
  40697c:	9e08      	ldr	r6, [sp, #32]
  40697e:	f00a 0101 	and.w	r1, sl, #1
  406982:	9b04      	ldr	r3, [sp, #16]
  406984:	9a22      	ldr	r2, [sp, #136]	; 0x88
  406986:	3b01      	subs	r3, #1
  406988:	910b      	str	r1, [sp, #44]	; 0x2c
  40698a:	9905      	ldr	r1, [sp, #20]
  40698c:	fab2 f282 	clz	r2, r2
  406990:	970a      	str	r7, [sp, #40]	; 0x28
  406992:	18cb      	adds	r3, r1, r3
  406994:	4688      	mov	r8, r1
  406996:	f8dd b020 	ldr.w	fp, [sp, #32]
  40699a:	930c      	str	r3, [sp, #48]	; 0x30
  40699c:	0953      	lsrs	r3, r2, #5
  40699e:	9f06      	ldr	r7, [sp, #24]
  4069a0:	9303      	str	r3, [sp, #12]
  4069a2:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  4069a4:	4638      	mov	r0, r7
  4069a6:	4629      	mov	r1, r5
  4069a8:	f7ff f992 	bl	405cd0 <quorem>
  4069ac:	4659      	mov	r1, fp
  4069ae:	4681      	mov	r9, r0
  4069b0:	4638      	mov	r0, r7
  4069b2:	f001 fc6f 	bl	408294 <__mcmp>
  4069b6:	4629      	mov	r1, r5
  4069b8:	4632      	mov	r2, r6
  4069ba:	4682      	mov	sl, r0
  4069bc:	4620      	mov	r0, r4
  4069be:	f001 fc8d 	bl	4082dc <__mdiff>
  4069c2:	68c2      	ldr	r2, [r0, #12]
  4069c4:	4605      	mov	r5, r0
  4069c6:	f109 0c30 	add.w	ip, r9, #48	; 0x30
  4069ca:	9207      	str	r2, [sp, #28]
  4069cc:	2a00      	cmp	r2, #0
  4069ce:	d150      	bne.n	406a72 <_dtoa_r+0xc62>
  4069d0:	4629      	mov	r1, r5
  4069d2:	4638      	mov	r0, r7
  4069d4:	f8cd c018 	str.w	ip, [sp, #24]
  4069d8:	f001 fc5c 	bl	408294 <__mcmp>
  4069dc:	4629      	mov	r1, r5
  4069de:	9004      	str	r0, [sp, #16]
  4069e0:	4620      	mov	r0, r4
  4069e2:	f001 fa61 	bl	407ea8 <_Bfree>
  4069e6:	9a03      	ldr	r2, [sp, #12]
  4069e8:	9b04      	ldr	r3, [sp, #16]
  4069ea:	f8dd c018 	ldr.w	ip, [sp, #24]
  4069ee:	b132      	cbz	r2, 4069fe <_dtoa_r+0xbee>
  4069f0:	b92b      	cbnz	r3, 4069fe <_dtoa_r+0xbee>
  4069f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  4069f4:	9a07      	ldr	r2, [sp, #28]
  4069f6:	2b00      	cmp	r3, #0
  4069f8:	f000 8128 	beq.w	406c4c <_dtoa_r+0xe3c>
  4069fc:	4613      	mov	r3, r2
  4069fe:	f1ba 0f00 	cmp.w	sl, #0
  406a02:	f2c0 80bc 	blt.w	406b7e <_dtoa_r+0xd6e>
  406a06:	9a03      	ldr	r2, [sp, #12]
  406a08:	b132      	cbz	r2, 406a18 <_dtoa_r+0xc08>
  406a0a:	f1ba 0f00 	cmp.w	sl, #0
  406a0e:	d103      	bne.n	406a18 <_dtoa_r+0xc08>
  406a10:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  406a12:	2a00      	cmp	r2, #0
  406a14:	f000 80b3 	beq.w	406b7e <_dtoa_r+0xd6e>
  406a18:	2b00      	cmp	r3, #0
  406a1a:	f300 80fe 	bgt.w	406c1a <_dtoa_r+0xe0a>
  406a1e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  406a20:	f108 0901 	add.w	r9, r8, #1
  406a24:	f888 c000 	strb.w	ip, [r8]
  406a28:	4598      	cmp	r8, r3
  406a2a:	464d      	mov	r5, r9
  406a2c:	f000 8106 	beq.w	406c3c <_dtoa_r+0xe2c>
  406a30:	4639      	mov	r1, r7
  406a32:	220a      	movs	r2, #10
  406a34:	2300      	movs	r3, #0
  406a36:	4620      	mov	r0, r4
  406a38:	f001 fa40 	bl	407ebc <__multadd>
  406a3c:	45b3      	cmp	fp, r6
  406a3e:	4607      	mov	r7, r0
  406a40:	4659      	mov	r1, fp
  406a42:	4620      	mov	r0, r4
  406a44:	f04f 020a 	mov.w	r2, #10
  406a48:	f04f 0300 	mov.w	r3, #0
  406a4c:	d00b      	beq.n	406a66 <_dtoa_r+0xc56>
  406a4e:	f001 fa35 	bl	407ebc <__multadd>
  406a52:	4631      	mov	r1, r6
  406a54:	4683      	mov	fp, r0
  406a56:	220a      	movs	r2, #10
  406a58:	4620      	mov	r0, r4
  406a5a:	2300      	movs	r3, #0
  406a5c:	f001 fa2e 	bl	407ebc <__multadd>
  406a60:	46c8      	mov	r8, r9
  406a62:	4606      	mov	r6, r0
  406a64:	e79d      	b.n	4069a2 <_dtoa_r+0xb92>
  406a66:	f001 fa29 	bl	407ebc <__multadd>
  406a6a:	46c8      	mov	r8, r9
  406a6c:	4683      	mov	fp, r0
  406a6e:	4606      	mov	r6, r0
  406a70:	e797      	b.n	4069a2 <_dtoa_r+0xb92>
  406a72:	4601      	mov	r1, r0
  406a74:	4620      	mov	r0, r4
  406a76:	f8cd c010 	str.w	ip, [sp, #16]
  406a7a:	f001 fa15 	bl	407ea8 <_Bfree>
  406a7e:	2301      	movs	r3, #1
  406a80:	f8dd c010 	ldr.w	ip, [sp, #16]
  406a84:	e7bb      	b.n	4069fe <_dtoa_r+0xbee>
  406a86:	2b0e      	cmp	r3, #14
  406a88:	bf8c      	ite	hi
  406a8a:	2300      	movhi	r3, #0
  406a8c:	2301      	movls	r3, #1
  406a8e:	2100      	movs	r1, #0
  406a90:	401d      	ands	r5, r3
  406a92:	6461      	str	r1, [r4, #68]	; 0x44
  406a94:	e436      	b.n	406304 <_dtoa_r+0x4f4>
  406a96:	2301      	movs	r3, #1
  406a98:	9323      	str	r3, [sp, #140]	; 0x8c
  406a9a:	9310      	str	r3, [sp, #64]	; 0x40
  406a9c:	9304      	str	r3, [sp, #16]
  406a9e:	e7f6      	b.n	406a8e <_dtoa_r+0xc7e>
  406aa0:	9906      	ldr	r1, [sp, #24]
  406aa2:	4620      	mov	r0, r4
  406aa4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  406aa6:	f001 fb4b 	bl	408140 <__pow5mult>
  406aaa:	9006      	str	r0, [sp, #24]
  406aac:	f7ff bb42 	b.w	406134 <_dtoa_r+0x324>
  406ab0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  406ab2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  406ab4:	1af3      	subs	r3, r6, r3
  406ab6:	960a      	str	r6, [sp, #40]	; 0x28
  406ab8:	2600      	movs	r6, #0
  406aba:	441a      	add	r2, r3
  406abc:	920c      	str	r2, [sp, #48]	; 0x30
  406abe:	f7ff bbf3 	b.w	4062a8 <_dtoa_r+0x498>
  406ac2:	9b04      	ldr	r3, [sp, #16]
  406ac4:	2b00      	cmp	r3, #0
  406ac6:	f43f adcc 	beq.w	406662 <_dtoa_r+0x852>
  406aca:	9d10      	ldr	r5, [sp, #64]	; 0x40
  406acc:	2d00      	cmp	r5, #0
  406ace:	f77f ae57 	ble.w	406780 <_dtoa_r+0x970>
  406ad2:	2200      	movs	r2, #0
  406ad4:	4b86      	ldr	r3, [pc, #536]	; (406cf0 <_dtoa_r+0xee0>)
  406ad6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  406ada:	f002 fab3 	bl	409044 <__aeabi_dmul>
  406ade:	9b02      	ldr	r3, [sp, #8]
  406ae0:	4606      	mov	r6, r0
  406ae2:	460f      	mov	r7, r1
  406ae4:	3b01      	subs	r3, #1
  406ae6:	f108 0001 	add.w	r0, r8, #1
  406aea:	e9cd 6708 	strd	r6, r7, [sp, #32]
  406aee:	9314      	str	r3, [sp, #80]	; 0x50
  406af0:	f002 fa42 	bl	408f78 <__aeabi_i2d>
  406af4:	4602      	mov	r2, r0
  406af6:	460b      	mov	r3, r1
  406af8:	4630      	mov	r0, r6
  406afa:	4639      	mov	r1, r7
  406afc:	f002 faa2 	bl	409044 <__aeabi_dmul>
  406b00:	2200      	movs	r2, #0
  406b02:	4b7c      	ldr	r3, [pc, #496]	; (406cf4 <_dtoa_r+0xee4>)
  406b04:	f002 f8ec 	bl	408ce0 <__adddf3>
  406b08:	46ac      	mov	ip, r5
  406b0a:	4606      	mov	r6, r0
  406b0c:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
  406b10:	e45a      	b.n	4063c8 <_dtoa_r+0x5b8>
  406b12:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
  406b16:	f04f 0802 	mov.w	r8, #2
  406b1a:	e9cd 2308 	strd	r2, r3, [sp, #32]
  406b1e:	e432      	b.n	406386 <_dtoa_r+0x576>
  406b20:	9b14      	ldr	r3, [sp, #80]	; 0x50
  406b22:	2130      	movs	r1, #48	; 0x30
  406b24:	3301      	adds	r3, #1
  406b26:	7011      	strb	r1, [r2, #0]
  406b28:	9302      	str	r3, [sp, #8]
  406b2a:	2331      	movs	r3, #49	; 0x31
  406b2c:	7013      	strb	r3, [r2, #0]
  406b2e:	f7ff bb72 	b.w	406216 <_dtoa_r+0x406>
  406b32:	9906      	ldr	r1, [sp, #24]
  406b34:	4620      	mov	r0, r4
  406b36:	f001 fb03 	bl	408140 <__pow5mult>
  406b3a:	9006      	str	r0, [sp, #24]
  406b3c:	f7ff bafa 	b.w	406134 <_dtoa_r+0x324>
  406b40:	f1ba 0f00 	cmp.w	sl, #0
  406b44:	f43f aeea 	beq.w	40691c <_dtoa_r+0xb0c>
  406b48:	f7ff bb07 	b.w	40615a <_dtoa_r+0x34a>
  406b4c:	9a02      	ldr	r2, [sp, #8]
  406b4e:	2331      	movs	r3, #49	; 0x31
  406b50:	3201      	adds	r2, #1
  406b52:	9202      	str	r2, [sp, #8]
  406b54:	9a05      	ldr	r2, [sp, #20]
  406b56:	7013      	strb	r3, [r2, #0]
  406b58:	e5f5      	b.n	406746 <_dtoa_r+0x936>
  406b5a:	9a11      	ldr	r2, [sp, #68]	; 0x44
  406b5c:	2a00      	cmp	r2, #0
  406b5e:	d055      	beq.n	406c0c <_dtoa_r+0xdfc>
  406b60:	f203 4333 	addw	r3, r3, #1075	; 0x433
  406b64:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  406b66:	9d07      	ldr	r5, [sp, #28]
  406b68:	f7ff bba4 	b.w	4062b4 <_dtoa_r+0x4a4>
  406b6c:	9c03      	ldr	r4, [sp, #12]
  406b6e:	f7ff bb52 	b.w	406216 <_dtoa_r+0x406>
  406b72:	9b07      	ldr	r3, [sp, #28]
  406b74:	9a04      	ldr	r2, [sp, #16]
  406b76:	1a9d      	subs	r5, r3, r2
  406b78:	2300      	movs	r3, #0
  406b7a:	f7ff bb9b 	b.w	4062b4 <_dtoa_r+0x4a4>
  406b7e:	2b00      	cmp	r3, #0
  406b80:	9706      	str	r7, [sp, #24]
  406b82:	46e1      	mov	r9, ip
  406b84:	f8cd b020 	str.w	fp, [sp, #32]
  406b88:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  406b8a:	4665      	mov	r5, ip
  406b8c:	dd0f      	ble.n	406bae <_dtoa_r+0xd9e>
  406b8e:	9906      	ldr	r1, [sp, #24]
  406b90:	2201      	movs	r2, #1
  406b92:	4620      	mov	r0, r4
  406b94:	f001 fb24 	bl	4081e0 <__lshift>
  406b98:	4639      	mov	r1, r7
  406b9a:	9006      	str	r0, [sp, #24]
  406b9c:	f001 fb7a 	bl	408294 <__mcmp>
  406ba0:	2800      	cmp	r0, #0
  406ba2:	dd75      	ble.n	406c90 <_dtoa_r+0xe80>
  406ba4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
  406ba8:	d066      	beq.n	406c78 <_dtoa_r+0xe68>
  406baa:	f109 0501 	add.w	r5, r9, #1
  406bae:	f8dd a020 	ldr.w	sl, [sp, #32]
  406bb2:	f888 5000 	strb.w	r5, [r8]
  406bb6:	f108 0501 	add.w	r5, r8, #1
  406bba:	9608      	str	r6, [sp, #32]
  406bbc:	e5c3      	b.n	406746 <_dtoa_r+0x936>
  406bbe:	9c12      	ldr	r4, [sp, #72]	; 0x48
  406bc0:	e531      	b.n	406626 <_dtoa_r+0x816>
  406bc2:	d104      	bne.n	406bce <_dtoa_r+0xdbe>
  406bc4:	f019 0f01 	tst.w	r9, #1
  406bc8:	d001      	beq.n	406bce <_dtoa_r+0xdbe>
  406bca:	e5ac      	b.n	406726 <_dtoa_r+0x916>
  406bcc:	4615      	mov	r5, r2
  406bce:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  406bd2:	1e6a      	subs	r2, r5, #1
  406bd4:	2b30      	cmp	r3, #48	; 0x30
  406bd6:	d0f9      	beq.n	406bcc <_dtoa_r+0xdbc>
  406bd8:	e5b5      	b.n	406746 <_dtoa_r+0x936>
  406bda:	2700      	movs	r7, #0
  406bdc:	9708      	str	r7, [sp, #32]
  406bde:	f7ff ba4c 	b.w	40607a <_dtoa_r+0x26a>
  406be2:	9e08      	ldr	r6, [sp, #32]
  406be4:	4620      	mov	r0, r4
  406be6:	6871      	ldr	r1, [r6, #4]
  406be8:	f001 f936 	bl	407e58 <_Balloc>
  406bec:	6933      	ldr	r3, [r6, #16]
  406bee:	4605      	mov	r5, r0
  406bf0:	f106 010c 	add.w	r1, r6, #12
  406bf4:	1c9a      	adds	r2, r3, #2
  406bf6:	300c      	adds	r0, #12
  406bf8:	0092      	lsls	r2, r2, #2
  406bfa:	f001 f82d 	bl	407c58 <memcpy>
  406bfe:	4620      	mov	r0, r4
  406c00:	4629      	mov	r1, r5
  406c02:	2201      	movs	r2, #1
  406c04:	f001 faec 	bl	4081e0 <__lshift>
  406c08:	4606      	mov	r6, r0
  406c0a:	e6b8      	b.n	40697e <_dtoa_r+0xb6e>
  406c0c:	9b16      	ldr	r3, [sp, #88]	; 0x58
  406c0e:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  406c10:	9d07      	ldr	r5, [sp, #28]
  406c12:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
  406c16:	f7ff bb4d 	b.w	4062b4 <_dtoa_r+0x4a4>
  406c1a:	f1bc 0f39 	cmp.w	ip, #57	; 0x39
  406c1e:	9706      	str	r7, [sp, #24]
  406c20:	f8cd b020 	str.w	fp, [sp, #32]
  406c24:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  406c26:	d030      	beq.n	406c8a <_dtoa_r+0xe7a>
  406c28:	f10c 0901 	add.w	r9, ip, #1
  406c2c:	f8dd a020 	ldr.w	sl, [sp, #32]
  406c30:	f108 0501 	add.w	r5, r8, #1
  406c34:	9608      	str	r6, [sp, #32]
  406c36:	f888 9000 	strb.w	r9, [r8]
  406c3a:	e584      	b.n	406746 <_dtoa_r+0x936>
  406c3c:	9706      	str	r7, [sp, #24]
  406c3e:	46e1      	mov	r9, ip
  406c40:	46da      	mov	sl, fp
  406c42:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  406c44:	9608      	str	r6, [sp, #32]
  406c46:	e562      	b.n	40670e <_dtoa_r+0x8fe>
  406c48:	46b0      	mov	r8, r6
  406c4a:	e504      	b.n	406656 <_dtoa_r+0x846>
  406c4c:	f1bc 0f39 	cmp.w	ip, #57	; 0x39
  406c50:	9706      	str	r7, [sp, #24]
  406c52:	f8cd b020 	str.w	fp, [sp, #32]
  406c56:	4655      	mov	r5, sl
  406c58:	46cb      	mov	fp, r9
  406c5a:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  406c5c:	46e1      	mov	r9, ip
  406c5e:	d00b      	beq.n	406c78 <_dtoa_r+0xe68>
  406c60:	2d00      	cmp	r5, #0
  406c62:	dd01      	ble.n	406c68 <_dtoa_r+0xe58>
  406c64:	f10b 0931 	add.w	r9, fp, #49	; 0x31
  406c68:	f8dd a020 	ldr.w	sl, [sp, #32]
  406c6c:	f108 0501 	add.w	r5, r8, #1
  406c70:	f888 9000 	strb.w	r9, [r8]
  406c74:	9608      	str	r6, [sp, #32]
  406c76:	e566      	b.n	406746 <_dtoa_r+0x936>
  406c78:	f8dd a020 	ldr.w	sl, [sp, #32]
  406c7c:	9608      	str	r6, [sp, #32]
  406c7e:	2239      	movs	r2, #57	; 0x39
  406c80:	f108 0501 	add.w	r5, r8, #1
  406c84:	f888 2000 	strb.w	r2, [r8]
  406c88:	e54f      	b.n	40672a <_dtoa_r+0x91a>
  406c8a:	46da      	mov	sl, fp
  406c8c:	9608      	str	r6, [sp, #32]
  406c8e:	e7f6      	b.n	406c7e <_dtoa_r+0xe6e>
  406c90:	d18d      	bne.n	406bae <_dtoa_r+0xd9e>
  406c92:	f019 0f01 	tst.w	r9, #1
  406c96:	d08a      	beq.n	406bae <_dtoa_r+0xd9e>
  406c98:	e784      	b.n	406ba4 <_dtoa_r+0xd94>
  406c9a:	f04f 0802 	mov.w	r8, #2
  406c9e:	f7ff bb72 	b.w	406386 <_dtoa_r+0x576>
  406ca2:	9b10      	ldr	r3, [sp, #64]	; 0x40
  406ca4:	9304      	str	r3, [sp, #16]
  406ca6:	e50e      	b.n	4066c6 <_dtoa_r+0x8b6>
  406ca8:	f43f aa75 	beq.w	406196 <_dtoa_r+0x386>
  406cac:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
  406cb0:	f7ff ba6a 	b.w	406188 <_dtoa_r+0x378>
  406cb4:	2501      	movs	r5, #1
  406cb6:	f7ff b982 	b.w	405fbe <_dtoa_r+0x1ae>
  406cba:	2500      	movs	r5, #0
  406cbc:	4620      	mov	r0, r4
  406cbe:	6465      	str	r5, [r4, #68]	; 0x44
  406cc0:	4629      	mov	r1, r5
  406cc2:	f001 f8c9 	bl	407e58 <_Balloc>
  406cc6:	9a02      	ldr	r2, [sp, #8]
  406cc8:	9005      	str	r0, [sp, #20]
  406cca:	2a0e      	cmp	r2, #14
  406ccc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  406cce:	6420      	str	r0, [r4, #64]	; 0x40
  406cd0:	f73f aad7 	bgt.w	406282 <_dtoa_r+0x472>
  406cd4:	42ab      	cmp	r3, r5
  406cd6:	f6ff aad4 	blt.w	406282 <_dtoa_r+0x472>
  406cda:	f04f 33ff 	mov.w	r3, #4294967295
  406cde:	9523      	str	r5, [sp, #140]	; 0x8c
  406ce0:	9304      	str	r3, [sp, #16]
  406ce2:	f7ff b9a9 	b.w	406038 <_dtoa_r+0x228>
  406ce6:	2301      	movs	r3, #1
  406ce8:	930b      	str	r3, [sp, #44]	; 0x2c
  406cea:	f7ff bbfa 	b.w	4064e2 <_dtoa_r+0x6d2>
  406cee:	bf00      	nop
  406cf0:	40240000 	.word	0x40240000
  406cf4:	401c0000 	.word	0x401c0000

00406cf8 <__sflush_r>:
  406cf8:	898b      	ldrh	r3, [r1, #12]
  406cfa:	b29a      	uxth	r2, r3
  406cfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  406d00:	460d      	mov	r5, r1
  406d02:	0711      	lsls	r1, r2, #28
  406d04:	4680      	mov	r8, r0
  406d06:	d43c      	bmi.n	406d82 <__sflush_r+0x8a>
  406d08:	686a      	ldr	r2, [r5, #4]
  406d0a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  406d0e:	2a00      	cmp	r2, #0
  406d10:	81ab      	strh	r3, [r5, #12]
  406d12:	dd76      	ble.n	406e02 <__sflush_r+0x10a>
  406d14:	6aae      	ldr	r6, [r5, #40]	; 0x28
  406d16:	2e00      	cmp	r6, #0
  406d18:	d04b      	beq.n	406db2 <__sflush_r+0xba>
  406d1a:	b29b      	uxth	r3, r3
  406d1c:	2100      	movs	r1, #0
  406d1e:	f8d8 4000 	ldr.w	r4, [r8]
  406d22:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
  406d26:	f8c8 1000 	str.w	r1, [r8]
  406d2a:	b292      	uxth	r2, r2
  406d2c:	2a00      	cmp	r2, #0
  406d2e:	d06c      	beq.n	406e0a <__sflush_r+0x112>
  406d30:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  406d32:	075f      	lsls	r7, r3, #29
  406d34:	d505      	bpl.n	406d42 <__sflush_r+0x4a>
  406d36:	6869      	ldr	r1, [r5, #4]
  406d38:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  406d3a:	1a52      	subs	r2, r2, r1
  406d3c:	b10b      	cbz	r3, 406d42 <__sflush_r+0x4a>
  406d3e:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  406d40:	1ad2      	subs	r2, r2, r3
  406d42:	4640      	mov	r0, r8
  406d44:	69e9      	ldr	r1, [r5, #28]
  406d46:	2300      	movs	r3, #0
  406d48:	47b0      	blx	r6
  406d4a:	1c46      	adds	r6, r0, #1
  406d4c:	d03e      	beq.n	406dcc <__sflush_r+0xd4>
  406d4e:	89ab      	ldrh	r3, [r5, #12]
  406d50:	2100      	movs	r1, #0
  406d52:	692a      	ldr	r2, [r5, #16]
  406d54:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  406d58:	6069      	str	r1, [r5, #4]
  406d5a:	602a      	str	r2, [r5, #0]
  406d5c:	b29b      	uxth	r3, r3
  406d5e:	04da      	lsls	r2, r3, #19
  406d60:	81ab      	strh	r3, [r5, #12]
  406d62:	d44c      	bmi.n	406dfe <__sflush_r+0x106>
  406d64:	6b29      	ldr	r1, [r5, #48]	; 0x30
  406d66:	f8c8 4000 	str.w	r4, [r8]
  406d6a:	b311      	cbz	r1, 406db2 <__sflush_r+0xba>
  406d6c:	f105 0340 	add.w	r3, r5, #64	; 0x40
  406d70:	4299      	cmp	r1, r3
  406d72:	d002      	beq.n	406d7a <__sflush_r+0x82>
  406d74:	4640      	mov	r0, r8
  406d76:	f000 f96b 	bl	407050 <_free_r>
  406d7a:	2000      	movs	r0, #0
  406d7c:	6328      	str	r0, [r5, #48]	; 0x30
  406d7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  406d82:	692e      	ldr	r6, [r5, #16]
  406d84:	b1ae      	cbz	r6, 406db2 <__sflush_r+0xba>
  406d86:	682c      	ldr	r4, [r5, #0]
  406d88:	0791      	lsls	r1, r2, #30
  406d8a:	602e      	str	r6, [r5, #0]
  406d8c:	eba4 0406 	sub.w	r4, r4, r6
  406d90:	d11a      	bne.n	406dc8 <__sflush_r+0xd0>
  406d92:	696b      	ldr	r3, [r5, #20]
  406d94:	60ab      	str	r3, [r5, #8]
  406d96:	e00a      	b.n	406dae <__sflush_r+0xb6>
  406d98:	4632      	mov	r2, r6
  406d9a:	4623      	mov	r3, r4
  406d9c:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  406d9e:	4640      	mov	r0, r8
  406da0:	69e9      	ldr	r1, [r5, #28]
  406da2:	47b8      	blx	r7
  406da4:	2800      	cmp	r0, #0
  406da6:	eba4 0400 	sub.w	r4, r4, r0
  406daa:	4406      	add	r6, r0
  406dac:	dd04      	ble.n	406db8 <__sflush_r+0xc0>
  406dae:	2c00      	cmp	r4, #0
  406db0:	dcf2      	bgt.n	406d98 <__sflush_r+0xa0>
  406db2:	2000      	movs	r0, #0
  406db4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  406db8:	89ab      	ldrh	r3, [r5, #12]
  406dba:	f04f 30ff 	mov.w	r0, #4294967295
  406dbe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  406dc2:	81ab      	strh	r3, [r5, #12]
  406dc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  406dc8:	2300      	movs	r3, #0
  406dca:	e7e3      	b.n	406d94 <__sflush_r+0x9c>
  406dcc:	f8d8 3000 	ldr.w	r3, [r8]
  406dd0:	fab3 f283 	clz	r2, r3
  406dd4:	2b00      	cmp	r3, #0
  406dd6:	bf18      	it	ne
  406dd8:	2b1d      	cmpne	r3, #29
  406dda:	ea4f 1252 	mov.w	r2, r2, lsr #5
  406dde:	d001      	beq.n	406de4 <__sflush_r+0xec>
  406de0:	2b16      	cmp	r3, #22
  406de2:	d127      	bne.n	406e34 <__sflush_r+0x13c>
  406de4:	89ab      	ldrh	r3, [r5, #12]
  406de6:	2600      	movs	r6, #0
  406de8:	6929      	ldr	r1, [r5, #16]
  406dea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  406dee:	b29b      	uxth	r3, r3
  406df0:	81ab      	strh	r3, [r5, #12]
  406df2:	04db      	lsls	r3, r3, #19
  406df4:	e885 0042 	stmia.w	r5, {r1, r6}
  406df8:	d5b4      	bpl.n	406d64 <__sflush_r+0x6c>
  406dfa:	2a00      	cmp	r2, #0
  406dfc:	d0b2      	beq.n	406d64 <__sflush_r+0x6c>
  406dfe:	6528      	str	r0, [r5, #80]	; 0x50
  406e00:	e7b0      	b.n	406d64 <__sflush_r+0x6c>
  406e02:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  406e04:	2a00      	cmp	r2, #0
  406e06:	dc85      	bgt.n	406d14 <__sflush_r+0x1c>
  406e08:	e7d3      	b.n	406db2 <__sflush_r+0xba>
  406e0a:	2301      	movs	r3, #1
  406e0c:	4640      	mov	r0, r8
  406e0e:	69e9      	ldr	r1, [r5, #28]
  406e10:	47b0      	blx	r6
  406e12:	1c43      	adds	r3, r0, #1
  406e14:	4602      	mov	r2, r0
  406e16:	d002      	beq.n	406e1e <__sflush_r+0x126>
  406e18:	89ab      	ldrh	r3, [r5, #12]
  406e1a:	6aae      	ldr	r6, [r5, #40]	; 0x28
  406e1c:	e789      	b.n	406d32 <__sflush_r+0x3a>
  406e1e:	f8d8 3000 	ldr.w	r3, [r8]
  406e22:	2b00      	cmp	r3, #0
  406e24:	d0f8      	beq.n	406e18 <__sflush_r+0x120>
  406e26:	2b16      	cmp	r3, #22
  406e28:	d001      	beq.n	406e2e <__sflush_r+0x136>
  406e2a:	2b1d      	cmp	r3, #29
  406e2c:	d1c4      	bne.n	406db8 <__sflush_r+0xc0>
  406e2e:	f8c8 4000 	str.w	r4, [r8]
  406e32:	e7be      	b.n	406db2 <__sflush_r+0xba>
  406e34:	89ab      	ldrh	r3, [r5, #12]
  406e36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  406e3a:	81ab      	strh	r3, [r5, #12]
  406e3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00406e40 <_fflush_r>:
  406e40:	b510      	push	{r4, lr}
  406e42:	4604      	mov	r4, r0
  406e44:	b082      	sub	sp, #8
  406e46:	b108      	cbz	r0, 406e4c <_fflush_r+0xc>
  406e48:	6b83      	ldr	r3, [r0, #56]	; 0x38
  406e4a:	b153      	cbz	r3, 406e62 <_fflush_r+0x22>
  406e4c:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
  406e50:	b908      	cbnz	r0, 406e56 <_fflush_r+0x16>
  406e52:	b002      	add	sp, #8
  406e54:	bd10      	pop	{r4, pc}
  406e56:	4620      	mov	r0, r4
  406e58:	b002      	add	sp, #8
  406e5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  406e5e:	f7ff bf4b 	b.w	406cf8 <__sflush_r>
  406e62:	9101      	str	r1, [sp, #4]
  406e64:	f000 f886 	bl	406f74 <__sinit>
  406e68:	9901      	ldr	r1, [sp, #4]
  406e6a:	e7ef      	b.n	406e4c <_fflush_r+0xc>

00406e6c <_cleanup_r>:
  406e6c:	4901      	ldr	r1, [pc, #4]	; (406e74 <_cleanup_r+0x8>)
  406e6e:	f000 bb59 	b.w	407524 <_fwalk_reent>
  406e72:	bf00      	nop
  406e74:	00408bb5 	.word	0x00408bb5

00406e78 <__sinit.part.1>:
  406e78:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  406e7c:	4682      	mov	sl, r0
  406e7e:	2400      	movs	r4, #0
  406e80:	4837      	ldr	r0, [pc, #220]	; (406f60 <__sinit.part.1+0xe8>)
  406e82:	2103      	movs	r1, #3
  406e84:	f8da 5004 	ldr.w	r5, [sl, #4]
  406e88:	f50a 723b 	add.w	r2, sl, #748	; 0x2ec
  406e8c:	2604      	movs	r6, #4
  406e8e:	f8ca 003c 	str.w	r0, [sl, #60]	; 0x3c
  406e92:	f8ca 12e4 	str.w	r1, [sl, #740]	; 0x2e4
  406e96:	f105 005c 	add.w	r0, r5, #92	; 0x5c
  406e9a:	f8ca 22e8 	str.w	r2, [sl, #744]	; 0x2e8
  406e9e:	4621      	mov	r1, r4
  406ea0:	f8ca 42e0 	str.w	r4, [sl, #736]	; 0x2e0
  406ea4:	2208      	movs	r2, #8
  406ea6:	81ae      	strh	r6, [r5, #12]
  406ea8:	602c      	str	r4, [r5, #0]
  406eaa:	606c      	str	r4, [r5, #4]
  406eac:	60ac      	str	r4, [r5, #8]
  406eae:	666c      	str	r4, [r5, #100]	; 0x64
  406eb0:	81ec      	strh	r4, [r5, #14]
  406eb2:	612c      	str	r4, [r5, #16]
  406eb4:	616c      	str	r4, [r5, #20]
  406eb6:	61ac      	str	r4, [r5, #24]
  406eb8:	f7fd fa5a 	bl	404370 <memset>
  406ebc:	f8df b0a8 	ldr.w	fp, [pc, #168]	; 406f68 <__sinit.part.1+0xf0>
  406ec0:	f8da 6008 	ldr.w	r6, [sl, #8]
  406ec4:	f04f 0301 	mov.w	r3, #1
  406ec8:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 406f6c <__sinit.part.1+0xf4>
  406ecc:	f04f 0e09 	mov.w	lr, #9
  406ed0:	f8df 809c 	ldr.w	r8, [pc, #156]	; 406f70 <__sinit.part.1+0xf8>
  406ed4:	4621      	mov	r1, r4
  406ed6:	4f23      	ldr	r7, [pc, #140]	; (406f64 <__sinit.part.1+0xec>)
  406ed8:	2208      	movs	r2, #8
  406eda:	61ed      	str	r5, [r5, #28]
  406edc:	f106 005c 	add.w	r0, r6, #92	; 0x5c
  406ee0:	f8c5 b020 	str.w	fp, [r5, #32]
  406ee4:	f8c5 9024 	str.w	r9, [r5, #36]	; 0x24
  406ee8:	f8c5 8028 	str.w	r8, [r5, #40]	; 0x28
  406eec:	62ef      	str	r7, [r5, #44]	; 0x2c
  406eee:	81f3      	strh	r3, [r6, #14]
  406ef0:	f8a6 e00c 	strh.w	lr, [r6, #12]
  406ef4:	6034      	str	r4, [r6, #0]
  406ef6:	6074      	str	r4, [r6, #4]
  406ef8:	60b4      	str	r4, [r6, #8]
  406efa:	6674      	str	r4, [r6, #100]	; 0x64
  406efc:	6134      	str	r4, [r6, #16]
  406efe:	6174      	str	r4, [r6, #20]
  406f00:	61b4      	str	r4, [r6, #24]
  406f02:	f7fd fa35 	bl	404370 <memset>
  406f06:	f8da 500c 	ldr.w	r5, [sl, #12]
  406f0a:	f04f 0c12 	mov.w	ip, #18
  406f0e:	f04f 0e02 	mov.w	lr, #2
  406f12:	61f6      	str	r6, [r6, #28]
  406f14:	4621      	mov	r1, r4
  406f16:	f8c6 b020 	str.w	fp, [r6, #32]
  406f1a:	f105 005c 	add.w	r0, r5, #92	; 0x5c
  406f1e:	f8c6 9024 	str.w	r9, [r6, #36]	; 0x24
  406f22:	2208      	movs	r2, #8
  406f24:	f8c6 8028 	str.w	r8, [r6, #40]	; 0x28
  406f28:	62f7      	str	r7, [r6, #44]	; 0x2c
  406f2a:	602c      	str	r4, [r5, #0]
  406f2c:	606c      	str	r4, [r5, #4]
  406f2e:	60ac      	str	r4, [r5, #8]
  406f30:	666c      	str	r4, [r5, #100]	; 0x64
  406f32:	612c      	str	r4, [r5, #16]
  406f34:	616c      	str	r4, [r5, #20]
  406f36:	61ac      	str	r4, [r5, #24]
  406f38:	f8a5 c00c 	strh.w	ip, [r5, #12]
  406f3c:	f8a5 e00e 	strh.w	lr, [r5, #14]
  406f40:	f7fd fa16 	bl	404370 <memset>
  406f44:	2301      	movs	r3, #1
  406f46:	61ed      	str	r5, [r5, #28]
  406f48:	f8c5 b020 	str.w	fp, [r5, #32]
  406f4c:	f8c5 9024 	str.w	r9, [r5, #36]	; 0x24
  406f50:	f8c5 8028 	str.w	r8, [r5, #40]	; 0x28
  406f54:	62ef      	str	r7, [r5, #44]	; 0x2c
  406f56:	f8ca 3038 	str.w	r3, [sl, #56]	; 0x38
  406f5a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406f5e:	bf00      	nop
  406f60:	00406e6d 	.word	0x00406e6d
  406f64:	00408949 	.word	0x00408949
  406f68:	004088c9 	.word	0x004088c9
  406f6c:	004088ed 	.word	0x004088ed
  406f70:	00408925 	.word	0x00408925

00406f74 <__sinit>:
  406f74:	6b83      	ldr	r3, [r0, #56]	; 0x38
  406f76:	b103      	cbz	r3, 406f7a <__sinit+0x6>
  406f78:	4770      	bx	lr
  406f7a:	f7ff bf7d 	b.w	406e78 <__sinit.part.1>
  406f7e:	bf00      	nop

00406f80 <__sfp_lock_acquire>:
  406f80:	4770      	bx	lr
  406f82:	bf00      	nop

00406f84 <__sfp_lock_release>:
  406f84:	4770      	bx	lr
  406f86:	bf00      	nop

00406f88 <__libc_fini_array>:
  406f88:	b538      	push	{r3, r4, r5, lr}
  406f8a:	4b08      	ldr	r3, [pc, #32]	; (406fac <__libc_fini_array+0x24>)
  406f8c:	4d08      	ldr	r5, [pc, #32]	; (406fb0 <__libc_fini_array+0x28>)
  406f8e:	1aed      	subs	r5, r5, r3
  406f90:	10ac      	asrs	r4, r5, #2
  406f92:	bf18      	it	ne
  406f94:	18ed      	addne	r5, r5, r3
  406f96:	d005      	beq.n	406fa4 <__libc_fini_array+0x1c>
  406f98:	3c01      	subs	r4, #1
  406f9a:	f855 3d04 	ldr.w	r3, [r5, #-4]!
  406f9e:	4798      	blx	r3
  406fa0:	2c00      	cmp	r4, #0
  406fa2:	d1f9      	bne.n	406f98 <__libc_fini_array+0x10>
  406fa4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  406fa8:	f002 bf54 	b.w	409e54 <_fini>
  406fac:	00409e60 	.word	0x00409e60
  406fb0:	00409e64 	.word	0x00409e64

00406fb4 <_malloc_trim_r>:
  406fb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  406fb6:	4f22      	ldr	r7, [pc, #136]	; (407040 <_malloc_trim_r+0x8c>)
  406fb8:	460c      	mov	r4, r1
  406fba:	4606      	mov	r6, r0
  406fbc:	f000 ff48 	bl	407e50 <__malloc_lock>
  406fc0:	68ba      	ldr	r2, [r7, #8]
  406fc2:	4b20      	ldr	r3, [pc, #128]	; (407044 <_malloc_trim_r+0x90>)
  406fc4:	6855      	ldr	r5, [r2, #4]
  406fc6:	f025 0503 	bic.w	r5, r5, #3
  406fca:	1b2c      	subs	r4, r5, r4
  406fcc:	f604 74ef 	addw	r4, r4, #4079	; 0xfef
  406fd0:	4023      	ands	r3, r4
  406fd2:	f5a3 5480 	sub.w	r4, r3, #4096	; 0x1000
  406fd6:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  406fda:	db07      	blt.n	406fec <_malloc_trim_r+0x38>
  406fdc:	4630      	mov	r0, r6
  406fde:	2100      	movs	r1, #0
  406fe0:	f001 fc60 	bl	4088a4 <_sbrk_r>
  406fe4:	68bb      	ldr	r3, [r7, #8]
  406fe6:	442b      	add	r3, r5
  406fe8:	4298      	cmp	r0, r3
  406fea:	d004      	beq.n	406ff6 <_malloc_trim_r+0x42>
  406fec:	4630      	mov	r0, r6
  406fee:	f000 ff31 	bl	407e54 <__malloc_unlock>
  406ff2:	2000      	movs	r0, #0
  406ff4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  406ff6:	4630      	mov	r0, r6
  406ff8:	4261      	negs	r1, r4
  406ffa:	f001 fc53 	bl	4088a4 <_sbrk_r>
  406ffe:	3001      	adds	r0, #1
  407000:	d00d      	beq.n	40701e <_malloc_trim_r+0x6a>
  407002:	4a11      	ldr	r2, [pc, #68]	; (407048 <_malloc_trim_r+0x94>)
  407004:	1b2d      	subs	r5, r5, r4
  407006:	68b9      	ldr	r1, [r7, #8]
  407008:	4630      	mov	r0, r6
  40700a:	6813      	ldr	r3, [r2, #0]
  40700c:	f045 0501 	orr.w	r5, r5, #1
  407010:	1b1b      	subs	r3, r3, r4
  407012:	604d      	str	r5, [r1, #4]
  407014:	6013      	str	r3, [r2, #0]
  407016:	f000 ff1d 	bl	407e54 <__malloc_unlock>
  40701a:	2001      	movs	r0, #1
  40701c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40701e:	4630      	mov	r0, r6
  407020:	2100      	movs	r1, #0
  407022:	f001 fc3f 	bl	4088a4 <_sbrk_r>
  407026:	68ba      	ldr	r2, [r7, #8]
  407028:	1a83      	subs	r3, r0, r2
  40702a:	2b0f      	cmp	r3, #15
  40702c:	ddde      	ble.n	406fec <_malloc_trim_r+0x38>
  40702e:	4c07      	ldr	r4, [pc, #28]	; (40704c <_malloc_trim_r+0x98>)
  407030:	f043 0301 	orr.w	r3, r3, #1
  407034:	4904      	ldr	r1, [pc, #16]	; (407048 <_malloc_trim_r+0x94>)
  407036:	6824      	ldr	r4, [r4, #0]
  407038:	6053      	str	r3, [r2, #4]
  40703a:	1b00      	subs	r0, r0, r4
  40703c:	6008      	str	r0, [r1, #0]
  40703e:	e7d5      	b.n	406fec <_malloc_trim_r+0x38>
  407040:	204004ec 	.word	0x204004ec
  407044:	fffff000 	.word	0xfffff000
  407048:	204009d4 	.word	0x204009d4
  40704c:	204008f8 	.word	0x204008f8

00407050 <_free_r>:
  407050:	2900      	cmp	r1, #0
  407052:	d04d      	beq.n	4070f0 <_free_r+0xa0>
  407054:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  407058:	460c      	mov	r4, r1
  40705a:	4680      	mov	r8, r0
  40705c:	f000 fef8 	bl	407e50 <__malloc_lock>
  407060:	4963      	ldr	r1, [pc, #396]	; (4071f0 <_free_r+0x1a0>)
  407062:	f854 7c04 	ldr.w	r7, [r4, #-4]
  407066:	f1a4 0508 	sub.w	r5, r4, #8
  40706a:	688e      	ldr	r6, [r1, #8]
  40706c:	f027 0301 	bic.w	r3, r7, #1
  407070:	18ea      	adds	r2, r5, r3
  407072:	6850      	ldr	r0, [r2, #4]
  407074:	4296      	cmp	r6, r2
  407076:	f020 0003 	bic.w	r0, r0, #3
  40707a:	d059      	beq.n	407130 <_free_r+0xe0>
  40707c:	07fe      	lsls	r6, r7, #31
  40707e:	6050      	str	r0, [r2, #4]
  407080:	d40b      	bmi.n	40709a <_free_r+0x4a>
  407082:	f854 4c08 	ldr.w	r4, [r4, #-8]
  407086:	f101 0708 	add.w	r7, r1, #8
  40708a:	1b2d      	subs	r5, r5, r4
  40708c:	4423      	add	r3, r4
  40708e:	68ac      	ldr	r4, [r5, #8]
  407090:	42bc      	cmp	r4, r7
  407092:	d066      	beq.n	407162 <_free_r+0x112>
  407094:	68ef      	ldr	r7, [r5, #12]
  407096:	60e7      	str	r7, [r4, #12]
  407098:	60bc      	str	r4, [r7, #8]
  40709a:	1814      	adds	r4, r2, r0
  40709c:	6864      	ldr	r4, [r4, #4]
  40709e:	07e4      	lsls	r4, r4, #31
  4070a0:	d40c      	bmi.n	4070bc <_free_r+0x6c>
  4070a2:	4c54      	ldr	r4, [pc, #336]	; (4071f4 <_free_r+0x1a4>)
  4070a4:	4403      	add	r3, r0
  4070a6:	6890      	ldr	r0, [r2, #8]
  4070a8:	42a0      	cmp	r0, r4
  4070aa:	d07c      	beq.n	4071a6 <_free_r+0x156>
  4070ac:	68d4      	ldr	r4, [r2, #12]
  4070ae:	f043 0201 	orr.w	r2, r3, #1
  4070b2:	60c4      	str	r4, [r0, #12]
  4070b4:	60a0      	str	r0, [r4, #8]
  4070b6:	606a      	str	r2, [r5, #4]
  4070b8:	50eb      	str	r3, [r5, r3]
  4070ba:	e003      	b.n	4070c4 <_free_r+0x74>
  4070bc:	f043 0201 	orr.w	r2, r3, #1
  4070c0:	606a      	str	r2, [r5, #4]
  4070c2:	50eb      	str	r3, [r5, r3]
  4070c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  4070c8:	d213      	bcs.n	4070f2 <_free_r+0xa2>
  4070ca:	08db      	lsrs	r3, r3, #3
  4070cc:	2001      	movs	r0, #1
  4070ce:	684a      	ldr	r2, [r1, #4]
  4070d0:	109c      	asrs	r4, r3, #2
  4070d2:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
  4070d6:	40a0      	lsls	r0, r4
  4070d8:	689c      	ldr	r4, [r3, #8]
  4070da:	4302      	orrs	r2, r0
  4070dc:	60eb      	str	r3, [r5, #12]
  4070de:	60ac      	str	r4, [r5, #8]
  4070e0:	604a      	str	r2, [r1, #4]
  4070e2:	609d      	str	r5, [r3, #8]
  4070e4:	60e5      	str	r5, [r4, #12]
  4070e6:	4640      	mov	r0, r8
  4070e8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  4070ec:	f000 beb2 	b.w	407e54 <__malloc_unlock>
  4070f0:	4770      	bx	lr
  4070f2:	0a5a      	lsrs	r2, r3, #9
  4070f4:	2a04      	cmp	r2, #4
  4070f6:	d847      	bhi.n	407188 <_free_r+0x138>
  4070f8:	099a      	lsrs	r2, r3, #6
  4070fa:	f102 0438 	add.w	r4, r2, #56	; 0x38
  4070fe:	0060      	lsls	r0, r4, #1
  407100:	eb01 0080 	add.w	r0, r1, r0, lsl #2
  407104:	493a      	ldr	r1, [pc, #232]	; (4071f0 <_free_r+0x1a0>)
  407106:	6882      	ldr	r2, [r0, #8]
  407108:	4282      	cmp	r2, r0
  40710a:	d043      	beq.n	407194 <_free_r+0x144>
  40710c:	6851      	ldr	r1, [r2, #4]
  40710e:	f021 0103 	bic.w	r1, r1, #3
  407112:	4299      	cmp	r1, r3
  407114:	d902      	bls.n	40711c <_free_r+0xcc>
  407116:	6892      	ldr	r2, [r2, #8]
  407118:	4290      	cmp	r0, r2
  40711a:	d1f7      	bne.n	40710c <_free_r+0xbc>
  40711c:	68d3      	ldr	r3, [r2, #12]
  40711e:	60eb      	str	r3, [r5, #12]
  407120:	4640      	mov	r0, r8
  407122:	60aa      	str	r2, [r5, #8]
  407124:	609d      	str	r5, [r3, #8]
  407126:	60d5      	str	r5, [r2, #12]
  407128:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40712c:	f000 be92 	b.w	407e54 <__malloc_unlock>
  407130:	07ff      	lsls	r7, r7, #31
  407132:	4403      	add	r3, r0
  407134:	d407      	bmi.n	407146 <_free_r+0xf6>
  407136:	f854 2c08 	ldr.w	r2, [r4, #-8]
  40713a:	1aad      	subs	r5, r5, r2
  40713c:	4413      	add	r3, r2
  40713e:	68a8      	ldr	r0, [r5, #8]
  407140:	68ea      	ldr	r2, [r5, #12]
  407142:	60c2      	str	r2, [r0, #12]
  407144:	6090      	str	r0, [r2, #8]
  407146:	4a2c      	ldr	r2, [pc, #176]	; (4071f8 <_free_r+0x1a8>)
  407148:	f043 0001 	orr.w	r0, r3, #1
  40714c:	6812      	ldr	r2, [r2, #0]
  40714e:	6068      	str	r0, [r5, #4]
  407150:	4293      	cmp	r3, r2
  407152:	608d      	str	r5, [r1, #8]
  407154:	d3c7      	bcc.n	4070e6 <_free_r+0x96>
  407156:	4b29      	ldr	r3, [pc, #164]	; (4071fc <_free_r+0x1ac>)
  407158:	4640      	mov	r0, r8
  40715a:	6819      	ldr	r1, [r3, #0]
  40715c:	f7ff ff2a 	bl	406fb4 <_malloc_trim_r>
  407160:	e7c1      	b.n	4070e6 <_free_r+0x96>
  407162:	1811      	adds	r1, r2, r0
  407164:	6849      	ldr	r1, [r1, #4]
  407166:	07c9      	lsls	r1, r1, #31
  407168:	d409      	bmi.n	40717e <_free_r+0x12e>
  40716a:	4403      	add	r3, r0
  40716c:	68d1      	ldr	r1, [r2, #12]
  40716e:	6892      	ldr	r2, [r2, #8]
  407170:	f043 0001 	orr.w	r0, r3, #1
  407174:	60d1      	str	r1, [r2, #12]
  407176:	608a      	str	r2, [r1, #8]
  407178:	6068      	str	r0, [r5, #4]
  40717a:	50eb      	str	r3, [r5, r3]
  40717c:	e7b3      	b.n	4070e6 <_free_r+0x96>
  40717e:	f043 0201 	orr.w	r2, r3, #1
  407182:	606a      	str	r2, [r5, #4]
  407184:	50eb      	str	r3, [r5, r3]
  407186:	e7ae      	b.n	4070e6 <_free_r+0x96>
  407188:	2a14      	cmp	r2, #20
  40718a:	d815      	bhi.n	4071b8 <_free_r+0x168>
  40718c:	f102 045b 	add.w	r4, r2, #91	; 0x5b
  407190:	0060      	lsls	r0, r4, #1
  407192:	e7b5      	b.n	407100 <_free_r+0xb0>
  407194:	10a4      	asrs	r4, r4, #2
  407196:	2701      	movs	r7, #1
  407198:	6848      	ldr	r0, [r1, #4]
  40719a:	4613      	mov	r3, r2
  40719c:	fa07 f404 	lsl.w	r4, r7, r4
  4071a0:	4320      	orrs	r0, r4
  4071a2:	6048      	str	r0, [r1, #4]
  4071a4:	e7bb      	b.n	40711e <_free_r+0xce>
  4071a6:	f043 0201 	orr.w	r2, r3, #1
  4071aa:	614d      	str	r5, [r1, #20]
  4071ac:	610d      	str	r5, [r1, #16]
  4071ae:	60e8      	str	r0, [r5, #12]
  4071b0:	60a8      	str	r0, [r5, #8]
  4071b2:	606a      	str	r2, [r5, #4]
  4071b4:	50eb      	str	r3, [r5, r3]
  4071b6:	e796      	b.n	4070e6 <_free_r+0x96>
  4071b8:	2a54      	cmp	r2, #84	; 0x54
  4071ba:	d804      	bhi.n	4071c6 <_free_r+0x176>
  4071bc:	0b1a      	lsrs	r2, r3, #12
  4071be:	f102 046e 	add.w	r4, r2, #110	; 0x6e
  4071c2:	0060      	lsls	r0, r4, #1
  4071c4:	e79c      	b.n	407100 <_free_r+0xb0>
  4071c6:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  4071ca:	d804      	bhi.n	4071d6 <_free_r+0x186>
  4071cc:	0bda      	lsrs	r2, r3, #15
  4071ce:	f102 0477 	add.w	r4, r2, #119	; 0x77
  4071d2:	0060      	lsls	r0, r4, #1
  4071d4:	e794      	b.n	407100 <_free_r+0xb0>
  4071d6:	f240 5054 	movw	r0, #1364	; 0x554
  4071da:	4282      	cmp	r2, r0
  4071dc:	d804      	bhi.n	4071e8 <_free_r+0x198>
  4071de:	0c9a      	lsrs	r2, r3, #18
  4071e0:	f102 047c 	add.w	r4, r2, #124	; 0x7c
  4071e4:	0060      	lsls	r0, r4, #1
  4071e6:	e78b      	b.n	407100 <_free_r+0xb0>
  4071e8:	20fc      	movs	r0, #252	; 0xfc
  4071ea:	247e      	movs	r4, #126	; 0x7e
  4071ec:	e788      	b.n	407100 <_free_r+0xb0>
  4071ee:	bf00      	nop
  4071f0:	204004ec 	.word	0x204004ec
  4071f4:	204004f4 	.word	0x204004f4
  4071f8:	204008f4 	.word	0x204008f4
  4071fc:	204009d0 	.word	0x204009d0

00407200 <__sfvwrite_r>:
  407200:	6893      	ldr	r3, [r2, #8]
  407202:	2b00      	cmp	r3, #0
  407204:	d07a      	beq.n	4072fc <__sfvwrite_r+0xfc>
  407206:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40720a:	f8b1 e00c 	ldrh.w	lr, [r1, #12]
  40720e:	b083      	sub	sp, #12
  407210:	460c      	mov	r4, r1
  407212:	4681      	mov	r9, r0
  407214:	f01e 0f08 	tst.w	lr, #8
  407218:	4616      	mov	r6, r2
  40721a:	d026      	beq.n	40726a <__sfvwrite_r+0x6a>
  40721c:	690b      	ldr	r3, [r1, #16]
  40721e:	b323      	cbz	r3, 40726a <__sfvwrite_r+0x6a>
  407220:	f00e 0802 	and.w	r8, lr, #2
  407224:	6835      	ldr	r5, [r6, #0]
  407226:	fa1f f088 	uxth.w	r0, r8
  40722a:	b370      	cbz	r0, 40728a <__sfvwrite_r+0x8a>
  40722c:	f04f 0a00 	mov.w	sl, #0
  407230:	f8df b2ec 	ldr.w	fp, [pc, #748]	; 407520 <__sfvwrite_r+0x320>
  407234:	46d0      	mov	r8, sl
  407236:	45d8      	cmp	r8, fp
  407238:	4643      	mov	r3, r8
  40723a:	4652      	mov	r2, sl
  40723c:	4648      	mov	r0, r9
  40723e:	bf28      	it	cs
  407240:	465b      	movcs	r3, fp
  407242:	f1b8 0f00 	cmp.w	r8, #0
  407246:	d053      	beq.n	4072f0 <__sfvwrite_r+0xf0>
  407248:	69e1      	ldr	r1, [r4, #28]
  40724a:	6a67      	ldr	r7, [r4, #36]	; 0x24
  40724c:	47b8      	blx	r7
  40724e:	2800      	cmp	r0, #0
  407250:	dd73      	ble.n	40733a <__sfvwrite_r+0x13a>
  407252:	68b3      	ldr	r3, [r6, #8]
  407254:	4482      	add	sl, r0
  407256:	ebc0 0808 	rsb	r8, r0, r8
  40725a:	1a18      	subs	r0, r3, r0
  40725c:	60b0      	str	r0, [r6, #8]
  40725e:	2800      	cmp	r0, #0
  407260:	d1e9      	bne.n	407236 <__sfvwrite_r+0x36>
  407262:	2000      	movs	r0, #0
  407264:	b003      	add	sp, #12
  407266:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40726a:	4648      	mov	r0, r9
  40726c:	4621      	mov	r1, r4
  40726e:	f7fe fcbd 	bl	405bec <__swsetup_r>
  407272:	2800      	cmp	r0, #0
  407274:	f040 814c 	bne.w	407510 <__sfvwrite_r+0x310>
  407278:	f8b4 e00c 	ldrh.w	lr, [r4, #12]
  40727c:	6835      	ldr	r5, [r6, #0]
  40727e:	f00e 0802 	and.w	r8, lr, #2
  407282:	fa1f f088 	uxth.w	r0, r8
  407286:	2800      	cmp	r0, #0
  407288:	d1d0      	bne.n	40722c <__sfvwrite_r+0x2c>
  40728a:	f01e 0b01 	ands.w	fp, lr, #1
  40728e:	d15d      	bne.n	40734c <__sfvwrite_r+0x14c>
  407290:	46d8      	mov	r8, fp
  407292:	f1b8 0f00 	cmp.w	r8, #0
  407296:	d025      	beq.n	4072e4 <__sfvwrite_r+0xe4>
  407298:	f41e 7f00 	tst.w	lr, #512	; 0x200
  40729c:	68a7      	ldr	r7, [r4, #8]
  40729e:	d02f      	beq.n	407300 <__sfvwrite_r+0x100>
  4072a0:	45b8      	cmp	r8, r7
  4072a2:	46ba      	mov	sl, r7
  4072a4:	f0c0 80a8 	bcc.w	4073f8 <__sfvwrite_r+0x1f8>
  4072a8:	f41e 6f90 	tst.w	lr, #1152	; 0x480
  4072ac:	f040 80b5 	bne.w	40741a <__sfvwrite_r+0x21a>
  4072b0:	6820      	ldr	r0, [r4, #0]
  4072b2:	4659      	mov	r1, fp
  4072b4:	4652      	mov	r2, sl
  4072b6:	f000 fd69 	bl	407d8c <memmove>
  4072ba:	68a2      	ldr	r2, [r4, #8]
  4072bc:	6821      	ldr	r1, [r4, #0]
  4072be:	4640      	mov	r0, r8
  4072c0:	1bd7      	subs	r7, r2, r7
  4072c2:	eb01 030a 	add.w	r3, r1, sl
  4072c6:	60a7      	str	r7, [r4, #8]
  4072c8:	6023      	str	r3, [r4, #0]
  4072ca:	68b3      	ldr	r3, [r6, #8]
  4072cc:	4483      	add	fp, r0
  4072ce:	ebc0 0808 	rsb	r8, r0, r8
  4072d2:	1a18      	subs	r0, r3, r0
  4072d4:	60b0      	str	r0, [r6, #8]
  4072d6:	2800      	cmp	r0, #0
  4072d8:	d0c3      	beq.n	407262 <__sfvwrite_r+0x62>
  4072da:	f8b4 e00c 	ldrh.w	lr, [r4, #12]
  4072de:	f1b8 0f00 	cmp.w	r8, #0
  4072e2:	d1d9      	bne.n	407298 <__sfvwrite_r+0x98>
  4072e4:	f8d5 b000 	ldr.w	fp, [r5]
  4072e8:	3508      	adds	r5, #8
  4072ea:	f855 8c04 	ldr.w	r8, [r5, #-4]
  4072ee:	e7d0      	b.n	407292 <__sfvwrite_r+0x92>
  4072f0:	f8d5 a000 	ldr.w	sl, [r5]
  4072f4:	3508      	adds	r5, #8
  4072f6:	f855 8c04 	ldr.w	r8, [r5, #-4]
  4072fa:	e79c      	b.n	407236 <__sfvwrite_r+0x36>
  4072fc:	2000      	movs	r0, #0
  4072fe:	4770      	bx	lr
  407300:	6820      	ldr	r0, [r4, #0]
  407302:	6923      	ldr	r3, [r4, #16]
  407304:	4298      	cmp	r0, r3
  407306:	d803      	bhi.n	407310 <__sfvwrite_r+0x110>
  407308:	6963      	ldr	r3, [r4, #20]
  40730a:	4598      	cmp	r8, r3
  40730c:	f080 80bf 	bcs.w	40748e <__sfvwrite_r+0x28e>
  407310:	4547      	cmp	r7, r8
  407312:	4659      	mov	r1, fp
  407314:	bf28      	it	cs
  407316:	4647      	movcs	r7, r8
  407318:	463a      	mov	r2, r7
  40731a:	f000 fd37 	bl	407d8c <memmove>
  40731e:	68a3      	ldr	r3, [r4, #8]
  407320:	6822      	ldr	r2, [r4, #0]
  407322:	1bdb      	subs	r3, r3, r7
  407324:	443a      	add	r2, r7
  407326:	60a3      	str	r3, [r4, #8]
  407328:	6022      	str	r2, [r4, #0]
  40732a:	2b00      	cmp	r3, #0
  40732c:	d149      	bne.n	4073c2 <__sfvwrite_r+0x1c2>
  40732e:	4648      	mov	r0, r9
  407330:	4621      	mov	r1, r4
  407332:	f7ff fd85 	bl	406e40 <_fflush_r>
  407336:	2800      	cmp	r0, #0
  407338:	d043      	beq.n	4073c2 <__sfvwrite_r+0x1c2>
  40733a:	89a3      	ldrh	r3, [r4, #12]
  40733c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  407340:	f04f 30ff 	mov.w	r0, #4294967295
  407344:	81a3      	strh	r3, [r4, #12]
  407346:	b003      	add	sp, #12
  407348:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40734c:	4680      	mov	r8, r0
  40734e:	4683      	mov	fp, r0
  407350:	4682      	mov	sl, r0
  407352:	9000      	str	r0, [sp, #0]
  407354:	f1ba 0f00 	cmp.w	sl, #0
  407358:	d02b      	beq.n	4073b2 <__sfvwrite_r+0x1b2>
  40735a:	9b00      	ldr	r3, [sp, #0]
  40735c:	2b00      	cmp	r3, #0
  40735e:	d04f      	beq.n	407400 <__sfvwrite_r+0x200>
  407360:	45d0      	cmp	r8, sl
  407362:	6962      	ldr	r2, [r4, #20]
  407364:	68a1      	ldr	r1, [r4, #8]
  407366:	4643      	mov	r3, r8
  407368:	bf28      	it	cs
  40736a:	4653      	movcs	r3, sl
  40736c:	6820      	ldr	r0, [r4, #0]
  40736e:	eb02 0c01 	add.w	ip, r2, r1
  407372:	461f      	mov	r7, r3
  407374:	4563      	cmp	r3, ip
  407376:	dd03      	ble.n	407380 <__sfvwrite_r+0x180>
  407378:	6921      	ldr	r1, [r4, #16]
  40737a:	4288      	cmp	r0, r1
  40737c:	f200 8099 	bhi.w	4074b2 <__sfvwrite_r+0x2b2>
  407380:	4293      	cmp	r3, r2
  407382:	db20      	blt.n	4073c6 <__sfvwrite_r+0x1c6>
  407384:	4613      	mov	r3, r2
  407386:	6a67      	ldr	r7, [r4, #36]	; 0x24
  407388:	4648      	mov	r0, r9
  40738a:	69e1      	ldr	r1, [r4, #28]
  40738c:	465a      	mov	r2, fp
  40738e:	47b8      	blx	r7
  407390:	1e07      	subs	r7, r0, #0
  407392:	ddd2      	ble.n	40733a <__sfvwrite_r+0x13a>
  407394:	ebb8 0807 	subs.w	r8, r8, r7
  407398:	d025      	beq.n	4073e6 <__sfvwrite_r+0x1e6>
  40739a:	68b3      	ldr	r3, [r6, #8]
  40739c:	44bb      	add	fp, r7
  40739e:	ebc7 0a0a 	rsb	sl, r7, sl
  4073a2:	1bdf      	subs	r7, r3, r7
  4073a4:	60b7      	str	r7, [r6, #8]
  4073a6:	2f00      	cmp	r7, #0
  4073a8:	f43f af5b 	beq.w	407262 <__sfvwrite_r+0x62>
  4073ac:	f1ba 0f00 	cmp.w	sl, #0
  4073b0:	d1d3      	bne.n	40735a <__sfvwrite_r+0x15a>
  4073b2:	2300      	movs	r3, #0
  4073b4:	f8d5 b000 	ldr.w	fp, [r5]
  4073b8:	f8d5 a004 	ldr.w	sl, [r5, #4]
  4073bc:	3508      	adds	r5, #8
  4073be:	9300      	str	r3, [sp, #0]
  4073c0:	e7c8      	b.n	407354 <__sfvwrite_r+0x154>
  4073c2:	4638      	mov	r0, r7
  4073c4:	e781      	b.n	4072ca <__sfvwrite_r+0xca>
  4073c6:	461a      	mov	r2, r3
  4073c8:	4659      	mov	r1, fp
  4073ca:	9301      	str	r3, [sp, #4]
  4073cc:	f000 fcde 	bl	407d8c <memmove>
  4073d0:	68a2      	ldr	r2, [r4, #8]
  4073d2:	ebb8 0807 	subs.w	r8, r8, r7
  4073d6:	6821      	ldr	r1, [r4, #0]
  4073d8:	9b01      	ldr	r3, [sp, #4]
  4073da:	eba2 0203 	sub.w	r2, r2, r3
  4073de:	440b      	add	r3, r1
  4073e0:	60a2      	str	r2, [r4, #8]
  4073e2:	6023      	str	r3, [r4, #0]
  4073e4:	d1d9      	bne.n	40739a <__sfvwrite_r+0x19a>
  4073e6:	4648      	mov	r0, r9
  4073e8:	4621      	mov	r1, r4
  4073ea:	f7ff fd29 	bl	406e40 <_fflush_r>
  4073ee:	2800      	cmp	r0, #0
  4073f0:	d1a3      	bne.n	40733a <__sfvwrite_r+0x13a>
  4073f2:	f8cd 8000 	str.w	r8, [sp]
  4073f6:	e7d0      	b.n	40739a <__sfvwrite_r+0x19a>
  4073f8:	4647      	mov	r7, r8
  4073fa:	6820      	ldr	r0, [r4, #0]
  4073fc:	46c2      	mov	sl, r8
  4073fe:	e758      	b.n	4072b2 <__sfvwrite_r+0xb2>
  407400:	4658      	mov	r0, fp
  407402:	210a      	movs	r1, #10
  407404:	4652      	mov	r2, sl
  407406:	f000 fbdf 	bl	407bc8 <memchr>
  40740a:	2800      	cmp	r0, #0
  40740c:	d07b      	beq.n	407506 <__sfvwrite_r+0x306>
  40740e:	3001      	adds	r0, #1
  407410:	2301      	movs	r3, #1
  407412:	ebcb 0800 	rsb	r8, fp, r0
  407416:	9300      	str	r3, [sp, #0]
  407418:	e7a2      	b.n	407360 <__sfvwrite_r+0x160>
  40741a:	6963      	ldr	r3, [r4, #20]
  40741c:	6921      	ldr	r1, [r4, #16]
  40741e:	6827      	ldr	r7, [r4, #0]
  407420:	eb03 0c43 	add.w	ip, r3, r3, lsl #1
  407424:	1a7f      	subs	r7, r7, r1
  407426:	eb0c 7cdc 	add.w	ip, ip, ip, lsr #31
  40742a:	1c7b      	adds	r3, r7, #1
  40742c:	ea4f 0c6c 	mov.w	ip, ip, asr #1
  407430:	4443      	add	r3, r8
  407432:	4662      	mov	r2, ip
  407434:	459c      	cmp	ip, r3
  407436:	d201      	bcs.n	40743c <__sfvwrite_r+0x23c>
  407438:	469c      	mov	ip, r3
  40743a:	461a      	mov	r2, r3
  40743c:	f41e 6f80 	tst.w	lr, #1024	; 0x400
  407440:	f8cd c000 	str.w	ip, [sp]
  407444:	d04b      	beq.n	4074de <__sfvwrite_r+0x2de>
  407446:	4611      	mov	r1, r2
  407448:	4648      	mov	r0, r9
  40744a:	f000 f911 	bl	407670 <_malloc_r>
  40744e:	f8dd c000 	ldr.w	ip, [sp]
  407452:	4682      	mov	sl, r0
  407454:	2800      	cmp	r0, #0
  407456:	d05e      	beq.n	407516 <__sfvwrite_r+0x316>
  407458:	463a      	mov	r2, r7
  40745a:	6921      	ldr	r1, [r4, #16]
  40745c:	f8cd c000 	str.w	ip, [sp]
  407460:	f000 fbfa 	bl	407c58 <memcpy>
  407464:	89a2      	ldrh	r2, [r4, #12]
  407466:	f8dd c000 	ldr.w	ip, [sp]
  40746a:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
  40746e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  407472:	81a2      	strh	r2, [r4, #12]
  407474:	eb0a 0007 	add.w	r0, sl, r7
  407478:	ebc7 020c 	rsb	r2, r7, ip
  40747c:	f8c4 a010 	str.w	sl, [r4, #16]
  407480:	4647      	mov	r7, r8
  407482:	6020      	str	r0, [r4, #0]
  407484:	46c2      	mov	sl, r8
  407486:	60a2      	str	r2, [r4, #8]
  407488:	f8c4 c014 	str.w	ip, [r4, #20]
  40748c:	e711      	b.n	4072b2 <__sfvwrite_r+0xb2>
  40748e:	f06f 4e00 	mvn.w	lr, #2147483648	; 0x80000000
  407492:	6a67      	ldr	r7, [r4, #36]	; 0x24
  407494:	4648      	mov	r0, r9
  407496:	69e1      	ldr	r1, [r4, #28]
  407498:	45c6      	cmp	lr, r8
  40749a:	465a      	mov	r2, fp
  40749c:	bf28      	it	cs
  40749e:	46c6      	movcs	lr, r8
  4074a0:	fb9e fef3 	sdiv	lr, lr, r3
  4074a4:	fb0e f303 	mul.w	r3, lr, r3
  4074a8:	47b8      	blx	r7
  4074aa:	2800      	cmp	r0, #0
  4074ac:	f73f af0d 	bgt.w	4072ca <__sfvwrite_r+0xca>
  4074b0:	e743      	b.n	40733a <__sfvwrite_r+0x13a>
  4074b2:	4662      	mov	r2, ip
  4074b4:	4659      	mov	r1, fp
  4074b6:	f8cd c004 	str.w	ip, [sp, #4]
  4074ba:	f000 fc67 	bl	407d8c <memmove>
  4074be:	6823      	ldr	r3, [r4, #0]
  4074c0:	4648      	mov	r0, r9
  4074c2:	f8dd c004 	ldr.w	ip, [sp, #4]
  4074c6:	4621      	mov	r1, r4
  4074c8:	4463      	add	r3, ip
  4074ca:	6023      	str	r3, [r4, #0]
  4074cc:	f7ff fcb8 	bl	406e40 <_fflush_r>
  4074d0:	f8dd c004 	ldr.w	ip, [sp, #4]
  4074d4:	2800      	cmp	r0, #0
  4074d6:	f47f af30 	bne.w	40733a <__sfvwrite_r+0x13a>
  4074da:	4667      	mov	r7, ip
  4074dc:	e75a      	b.n	407394 <__sfvwrite_r+0x194>
  4074de:	4648      	mov	r0, r9
  4074e0:	f000 ffc6 	bl	408470 <_realloc_r>
  4074e4:	f8dd c000 	ldr.w	ip, [sp]
  4074e8:	4682      	mov	sl, r0
  4074ea:	2800      	cmp	r0, #0
  4074ec:	d1c2      	bne.n	407474 <__sfvwrite_r+0x274>
  4074ee:	4648      	mov	r0, r9
  4074f0:	6921      	ldr	r1, [r4, #16]
  4074f2:	f7ff fdad 	bl	407050 <_free_r>
  4074f6:	89a3      	ldrh	r3, [r4, #12]
  4074f8:	220c      	movs	r2, #12
  4074fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  4074fe:	f8c9 2000 	str.w	r2, [r9]
  407502:	b29b      	uxth	r3, r3
  407504:	e71a      	b.n	40733c <__sfvwrite_r+0x13c>
  407506:	2301      	movs	r3, #1
  407508:	f10a 0801 	add.w	r8, sl, #1
  40750c:	9300      	str	r3, [sp, #0]
  40750e:	e727      	b.n	407360 <__sfvwrite_r+0x160>
  407510:	f04f 30ff 	mov.w	r0, #4294967295
  407514:	e6a6      	b.n	407264 <__sfvwrite_r+0x64>
  407516:	220c      	movs	r2, #12
  407518:	89a3      	ldrh	r3, [r4, #12]
  40751a:	f8c9 2000 	str.w	r2, [r9]
  40751e:	e70d      	b.n	40733c <__sfvwrite_r+0x13c>
  407520:	7ffffc00 	.word	0x7ffffc00

00407524 <_fwalk_reent>:
  407524:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  407528:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  40752c:	d01e      	beq.n	40756c <_fwalk_reent+0x48>
  40752e:	4688      	mov	r8, r1
  407530:	4606      	mov	r6, r0
  407532:	f04f 0900 	mov.w	r9, #0
  407536:	687d      	ldr	r5, [r7, #4]
  407538:	68bc      	ldr	r4, [r7, #8]
  40753a:	3d01      	subs	r5, #1
  40753c:	d410      	bmi.n	407560 <_fwalk_reent+0x3c>
  40753e:	89a3      	ldrh	r3, [r4, #12]
  407540:	3d01      	subs	r5, #1
  407542:	2b01      	cmp	r3, #1
  407544:	d908      	bls.n	407558 <_fwalk_reent+0x34>
  407546:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  40754a:	4621      	mov	r1, r4
  40754c:	4630      	mov	r0, r6
  40754e:	3301      	adds	r3, #1
  407550:	d002      	beq.n	407558 <_fwalk_reent+0x34>
  407552:	47c0      	blx	r8
  407554:	ea49 0900 	orr.w	r9, r9, r0
  407558:	1c6b      	adds	r3, r5, #1
  40755a:	f104 0468 	add.w	r4, r4, #104	; 0x68
  40755e:	d1ee      	bne.n	40753e <_fwalk_reent+0x1a>
  407560:	683f      	ldr	r7, [r7, #0]
  407562:	2f00      	cmp	r7, #0
  407564:	d1e7      	bne.n	407536 <_fwalk_reent+0x12>
  407566:	4648      	mov	r0, r9
  407568:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40756c:	46b9      	mov	r9, r7
  40756e:	4648      	mov	r0, r9
  407570:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00407574 <_localeconv_r>:
  407574:	4800      	ldr	r0, [pc, #0]	; (407578 <_localeconv_r+0x4>)
  407576:	4770      	bx	lr
  407578:	204004b4 	.word	0x204004b4

0040757c <__smakebuf_r>:
  40757c:	898b      	ldrh	r3, [r1, #12]
  40757e:	b29a      	uxth	r2, r3
  407580:	f012 0f02 	tst.w	r2, #2
  407584:	d13d      	bne.n	407602 <__smakebuf_r+0x86>
  407586:	b5f0      	push	{r4, r5, r6, r7, lr}
  407588:	460c      	mov	r4, r1
  40758a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40758e:	b091      	sub	sp, #68	; 0x44
  407590:	4605      	mov	r5, r0
  407592:	2900      	cmp	r1, #0
  407594:	db19      	blt.n	4075ca <__smakebuf_r+0x4e>
  407596:	aa01      	add	r2, sp, #4
  407598:	f001 fb4e 	bl	408c38 <_fstat_r>
  40759c:	2800      	cmp	r0, #0
  40759e:	db12      	blt.n	4075c6 <__smakebuf_r+0x4a>
  4075a0:	9b02      	ldr	r3, [sp, #8]
  4075a2:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
  4075a6:	f5a3 5700 	sub.w	r7, r3, #8192	; 0x2000
  4075aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
  4075ae:	fab7 f787 	clz	r7, r7
  4075b2:	ea4f 1757 	mov.w	r7, r7, lsr #5
  4075b6:	d02b      	beq.n	407610 <__smakebuf_r+0x94>
  4075b8:	89a3      	ldrh	r3, [r4, #12]
  4075ba:	f44f 6680 	mov.w	r6, #1024	; 0x400
  4075be:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  4075c2:	81a3      	strh	r3, [r4, #12]
  4075c4:	e00c      	b.n	4075e0 <__smakebuf_r+0x64>
  4075c6:	89a3      	ldrh	r3, [r4, #12]
  4075c8:	b29a      	uxth	r2, r3
  4075ca:	f012 0f80 	tst.w	r2, #128	; 0x80
  4075ce:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  4075d2:	f04f 0700 	mov.w	r7, #0
  4075d6:	bf0c      	ite	eq
  4075d8:	f44f 6680 	moveq.w	r6, #1024	; 0x400
  4075dc:	2640      	movne	r6, #64	; 0x40
  4075de:	81a3      	strh	r3, [r4, #12]
  4075e0:	4628      	mov	r0, r5
  4075e2:	4631      	mov	r1, r6
  4075e4:	f000 f844 	bl	407670 <_malloc_r>
  4075e8:	89a3      	ldrh	r3, [r4, #12]
  4075ea:	b340      	cbz	r0, 40763e <__smakebuf_r+0xc2>
  4075ec:	4a1a      	ldr	r2, [pc, #104]	; (407658 <__smakebuf_r+0xdc>)
  4075ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4075f2:	63ea      	str	r2, [r5, #60]	; 0x3c
  4075f4:	81a3      	strh	r3, [r4, #12]
  4075f6:	6020      	str	r0, [r4, #0]
  4075f8:	6120      	str	r0, [r4, #16]
  4075fa:	6166      	str	r6, [r4, #20]
  4075fc:	b99f      	cbnz	r7, 407626 <__smakebuf_r+0xaa>
  4075fe:	b011      	add	sp, #68	; 0x44
  407600:	bdf0      	pop	{r4, r5, r6, r7, pc}
  407602:	f101 0343 	add.w	r3, r1, #67	; 0x43
  407606:	2201      	movs	r2, #1
  407608:	600b      	str	r3, [r1, #0]
  40760a:	610b      	str	r3, [r1, #16]
  40760c:	614a      	str	r2, [r1, #20]
  40760e:	4770      	bx	lr
  407610:	4b12      	ldr	r3, [pc, #72]	; (40765c <__smakebuf_r+0xe0>)
  407612:	6aa2      	ldr	r2, [r4, #40]	; 0x28
  407614:	429a      	cmp	r2, r3
  407616:	d1cf      	bne.n	4075b8 <__smakebuf_r+0x3c>
  407618:	89a3      	ldrh	r3, [r4, #12]
  40761a:	f44f 6680 	mov.w	r6, #1024	; 0x400
  40761e:	4333      	orrs	r3, r6
  407620:	64e6      	str	r6, [r4, #76]	; 0x4c
  407622:	81a3      	strh	r3, [r4, #12]
  407624:	e7dc      	b.n	4075e0 <__smakebuf_r+0x64>
  407626:	4628      	mov	r0, r5
  407628:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  40762c:	f001 fb18 	bl	408c60 <_isatty_r>
  407630:	2800      	cmp	r0, #0
  407632:	d0e4      	beq.n	4075fe <__smakebuf_r+0x82>
  407634:	89a3      	ldrh	r3, [r4, #12]
  407636:	f043 0301 	orr.w	r3, r3, #1
  40763a:	81a3      	strh	r3, [r4, #12]
  40763c:	e7df      	b.n	4075fe <__smakebuf_r+0x82>
  40763e:	059a      	lsls	r2, r3, #22
  407640:	d4dd      	bmi.n	4075fe <__smakebuf_r+0x82>
  407642:	f104 0243 	add.w	r2, r4, #67	; 0x43
  407646:	f043 0302 	orr.w	r3, r3, #2
  40764a:	2101      	movs	r1, #1
  40764c:	81a3      	strh	r3, [r4, #12]
  40764e:	6022      	str	r2, [r4, #0]
  407650:	6122      	str	r2, [r4, #16]
  407652:	6161      	str	r1, [r4, #20]
  407654:	e7d3      	b.n	4075fe <__smakebuf_r+0x82>
  407656:	bf00      	nop
  407658:	00406e6d 	.word	0x00406e6d
  40765c:	00408925 	.word	0x00408925

00407660 <malloc>:
  407660:	4b02      	ldr	r3, [pc, #8]	; (40766c <malloc+0xc>)
  407662:	4601      	mov	r1, r0
  407664:	6818      	ldr	r0, [r3, #0]
  407666:	f000 b803 	b.w	407670 <_malloc_r>
  40766a:	bf00      	nop
  40766c:	204004b0 	.word	0x204004b0

00407670 <_malloc_r>:
  407670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  407674:	f101 040b 	add.w	r4, r1, #11
  407678:	b083      	sub	sp, #12
  40767a:	4605      	mov	r5, r0
  40767c:	2c16      	cmp	r4, #22
  40767e:	d927      	bls.n	4076d0 <_malloc_r+0x60>
  407680:	f034 0407 	bics.w	r4, r4, #7
  407684:	d42a      	bmi.n	4076dc <_malloc_r+0x6c>
  407686:	42a1      	cmp	r1, r4
  407688:	d828      	bhi.n	4076dc <_malloc_r+0x6c>
  40768a:	f000 fbe1 	bl	407e50 <__malloc_lock>
  40768e:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
  407692:	d22b      	bcs.n	4076ec <_malloc_r+0x7c>
  407694:	ea4f 0cd4 	mov.w	ip, r4, lsr #3
  407698:	4ec0      	ldr	r6, [pc, #768]	; (40799c <_malloc_r+0x32c>)
  40769a:	eb06 02cc 	add.w	r2, r6, ip, lsl #3
  40769e:	68d3      	ldr	r3, [r2, #12]
  4076a0:	4293      	cmp	r3, r2
  4076a2:	f000 8171 	beq.w	407988 <_malloc_r+0x318>
  4076a6:	685a      	ldr	r2, [r3, #4]
  4076a8:	f103 0808 	add.w	r8, r3, #8
  4076ac:	68d9      	ldr	r1, [r3, #12]
  4076ae:	4628      	mov	r0, r5
  4076b0:	f022 0203 	bic.w	r2, r2, #3
  4076b4:	689c      	ldr	r4, [r3, #8]
  4076b6:	4413      	add	r3, r2
  4076b8:	60e1      	str	r1, [r4, #12]
  4076ba:	608c      	str	r4, [r1, #8]
  4076bc:	685a      	ldr	r2, [r3, #4]
  4076be:	f042 0201 	orr.w	r2, r2, #1
  4076c2:	605a      	str	r2, [r3, #4]
  4076c4:	f000 fbc6 	bl	407e54 <__malloc_unlock>
  4076c8:	4640      	mov	r0, r8
  4076ca:	b003      	add	sp, #12
  4076cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4076d0:	2910      	cmp	r1, #16
  4076d2:	d803      	bhi.n	4076dc <_malloc_r+0x6c>
  4076d4:	f000 fbbc 	bl	407e50 <__malloc_lock>
  4076d8:	2410      	movs	r4, #16
  4076da:	e7db      	b.n	407694 <_malloc_r+0x24>
  4076dc:	f04f 0800 	mov.w	r8, #0
  4076e0:	230c      	movs	r3, #12
  4076e2:	4640      	mov	r0, r8
  4076e4:	602b      	str	r3, [r5, #0]
  4076e6:	b003      	add	sp, #12
  4076e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4076ec:	ea5f 2c54 	movs.w	ip, r4, lsr #9
  4076f0:	f000 8089 	beq.w	407806 <_malloc_r+0x196>
  4076f4:	f1bc 0f04 	cmp.w	ip, #4
  4076f8:	f200 80c4 	bhi.w	407884 <_malloc_r+0x214>
  4076fc:	ea4f 1c94 	mov.w	ip, r4, lsr #6
  407700:	f10c 0c38 	add.w	ip, ip, #56	; 0x38
  407704:	ea4f 004c 	mov.w	r0, ip, lsl #1
  407708:	4ea4      	ldr	r6, [pc, #656]	; (40799c <_malloc_r+0x32c>)
  40770a:	eb06 0080 	add.w	r0, r6, r0, lsl #2
  40770e:	68c3      	ldr	r3, [r0, #12]
  407710:	4298      	cmp	r0, r3
  407712:	d105      	bne.n	407720 <_malloc_r+0xb0>
  407714:	e00c      	b.n	407730 <_malloc_r+0xc0>
  407716:	2900      	cmp	r1, #0
  407718:	da79      	bge.n	40780e <_malloc_r+0x19e>
  40771a:	68db      	ldr	r3, [r3, #12]
  40771c:	4298      	cmp	r0, r3
  40771e:	d007      	beq.n	407730 <_malloc_r+0xc0>
  407720:	685a      	ldr	r2, [r3, #4]
  407722:	f022 0203 	bic.w	r2, r2, #3
  407726:	1b11      	subs	r1, r2, r4
  407728:	290f      	cmp	r1, #15
  40772a:	ddf4      	ble.n	407716 <_malloc_r+0xa6>
  40772c:	f10c 3cff 	add.w	ip, ip, #4294967295
  407730:	f10c 0c01 	add.w	ip, ip, #1
  407734:	4f99      	ldr	r7, [pc, #612]	; (40799c <_malloc_r+0x32c>)
  407736:	6933      	ldr	r3, [r6, #16]
  407738:	f107 0e08 	add.w	lr, r7, #8
  40773c:	4573      	cmp	r3, lr
  40773e:	f000 8119 	beq.w	407974 <_malloc_r+0x304>
  407742:	685a      	ldr	r2, [r3, #4]
  407744:	f022 0203 	bic.w	r2, r2, #3
  407748:	1b11      	subs	r1, r2, r4
  40774a:	290f      	cmp	r1, #15
  40774c:	f300 80ca 	bgt.w	4078e4 <_malloc_r+0x274>
  407750:	2900      	cmp	r1, #0
  407752:	f8c7 e014 	str.w	lr, [r7, #20]
  407756:	f8c7 e010 	str.w	lr, [r7, #16]
  40775a:	da6a      	bge.n	407832 <_malloc_r+0x1c2>
  40775c:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  407760:	f080 809f 	bcs.w	4078a2 <_malloc_r+0x232>
  407764:	08d2      	lsrs	r2, r2, #3
  407766:	2001      	movs	r0, #1
  407768:	6879      	ldr	r1, [r7, #4]
  40776a:	ea4f 08a2 	mov.w	r8, r2, asr #2
  40776e:	eb07 02c2 	add.w	r2, r7, r2, lsl #3
  407772:	fa00 f008 	lsl.w	r0, r0, r8
  407776:	f8d2 8008 	ldr.w	r8, [r2, #8]
  40777a:	4308      	orrs	r0, r1
  40777c:	60da      	str	r2, [r3, #12]
  40777e:	f8c3 8008 	str.w	r8, [r3, #8]
  407782:	6078      	str	r0, [r7, #4]
  407784:	6093      	str	r3, [r2, #8]
  407786:	f8c8 300c 	str.w	r3, [r8, #12]
  40778a:	ea4f 03ac 	mov.w	r3, ip, asr #2
  40778e:	2101      	movs	r1, #1
  407790:	4099      	lsls	r1, r3
  407792:	4281      	cmp	r1, r0
  407794:	d85b      	bhi.n	40784e <_malloc_r+0x1de>
  407796:	4208      	tst	r0, r1
  407798:	d106      	bne.n	4077a8 <_malloc_r+0x138>
  40779a:	f02c 0c03 	bic.w	ip, ip, #3
  40779e:	0049      	lsls	r1, r1, #1
  4077a0:	f10c 0c04 	add.w	ip, ip, #4
  4077a4:	4208      	tst	r0, r1
  4077a6:	d0fa      	beq.n	40779e <_malloc_r+0x12e>
  4077a8:	eb06 08cc 	add.w	r8, r6, ip, lsl #3
  4077ac:	46e1      	mov	r9, ip
  4077ae:	4640      	mov	r0, r8
  4077b0:	68c7      	ldr	r7, [r0, #12]
  4077b2:	42b8      	cmp	r0, r7
  4077b4:	d107      	bne.n	4077c6 <_malloc_r+0x156>
  4077b6:	e0df      	b.n	407978 <_malloc_r+0x308>
  4077b8:	2a00      	cmp	r2, #0
  4077ba:	f280 80f7 	bge.w	4079ac <_malloc_r+0x33c>
  4077be:	68ff      	ldr	r7, [r7, #12]
  4077c0:	42b8      	cmp	r0, r7
  4077c2:	f000 80d9 	beq.w	407978 <_malloc_r+0x308>
  4077c6:	687b      	ldr	r3, [r7, #4]
  4077c8:	f023 0303 	bic.w	r3, r3, #3
  4077cc:	1b1a      	subs	r2, r3, r4
  4077ce:	2a0f      	cmp	r2, #15
  4077d0:	ddf2      	ble.n	4077b8 <_malloc_r+0x148>
  4077d2:	46b8      	mov	r8, r7
  4077d4:	68fb      	ldr	r3, [r7, #12]
  4077d6:	f044 0901 	orr.w	r9, r4, #1
  4077da:	f042 0c01 	orr.w	ip, r2, #1
  4077de:	f858 1f08 	ldr.w	r1, [r8, #8]!
  4077e2:	443c      	add	r4, r7
  4077e4:	f8c7 9004 	str.w	r9, [r7, #4]
  4077e8:	4628      	mov	r0, r5
  4077ea:	60cb      	str	r3, [r1, #12]
  4077ec:	6099      	str	r1, [r3, #8]
  4077ee:	6174      	str	r4, [r6, #20]
  4077f0:	6134      	str	r4, [r6, #16]
  4077f2:	f8c4 e00c 	str.w	lr, [r4, #12]
  4077f6:	f8c4 e008 	str.w	lr, [r4, #8]
  4077fa:	f8c4 c004 	str.w	ip, [r4, #4]
  4077fe:	50a2      	str	r2, [r4, r2]
  407800:	f000 fb28 	bl	407e54 <__malloc_unlock>
  407804:	e760      	b.n	4076c8 <_malloc_r+0x58>
  407806:	207e      	movs	r0, #126	; 0x7e
  407808:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
  40780c:	e77c      	b.n	407708 <_malloc_r+0x98>
  40780e:	441a      	add	r2, r3
  407810:	68dc      	ldr	r4, [r3, #12]
  407812:	689e      	ldr	r6, [r3, #8]
  407814:	f103 0808 	add.w	r8, r3, #8
  407818:	6851      	ldr	r1, [r2, #4]
  40781a:	4628      	mov	r0, r5
  40781c:	60f4      	str	r4, [r6, #12]
  40781e:	f041 0301 	orr.w	r3, r1, #1
  407822:	60a6      	str	r6, [r4, #8]
  407824:	6053      	str	r3, [r2, #4]
  407826:	f000 fb15 	bl	407e54 <__malloc_unlock>
  40782a:	4640      	mov	r0, r8
  40782c:	b003      	add	sp, #12
  40782e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407832:	441a      	add	r2, r3
  407834:	f103 0808 	add.w	r8, r3, #8
  407838:	4628      	mov	r0, r5
  40783a:	6853      	ldr	r3, [r2, #4]
  40783c:	f043 0301 	orr.w	r3, r3, #1
  407840:	6053      	str	r3, [r2, #4]
  407842:	f000 fb07 	bl	407e54 <__malloc_unlock>
  407846:	4640      	mov	r0, r8
  407848:	b003      	add	sp, #12
  40784a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40784e:	68b7      	ldr	r7, [r6, #8]
  407850:	687a      	ldr	r2, [r7, #4]
  407852:	f022 0803 	bic.w	r8, r2, #3
  407856:	ebc4 0208 	rsb	r2, r4, r8
  40785a:	2a0f      	cmp	r2, #15
  40785c:	dd56      	ble.n	40790c <_malloc_r+0x29c>
  40785e:	45a0      	cmp	r8, r4
  407860:	d354      	bcc.n	40790c <_malloc_r+0x29c>
  407862:	f044 0301 	orr.w	r3, r4, #1
  407866:	f042 0201 	orr.w	r2, r2, #1
  40786a:	443c      	add	r4, r7
  40786c:	f107 0808 	add.w	r8, r7, #8
  407870:	607b      	str	r3, [r7, #4]
  407872:	4628      	mov	r0, r5
  407874:	60b4      	str	r4, [r6, #8]
  407876:	6062      	str	r2, [r4, #4]
  407878:	f000 faec 	bl	407e54 <__malloc_unlock>
  40787c:	4640      	mov	r0, r8
  40787e:	b003      	add	sp, #12
  407880:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407884:	f1bc 0f14 	cmp.w	ip, #20
  407888:	f240 809f 	bls.w	4079ca <_malloc_r+0x35a>
  40788c:	f1bc 0f54 	cmp.w	ip, #84	; 0x54
  407890:	f200 8127 	bhi.w	407ae2 <_malloc_r+0x472>
  407894:	ea4f 3c14 	mov.w	ip, r4, lsr #12
  407898:	f10c 0c6e 	add.w	ip, ip, #110	; 0x6e
  40789c:	ea4f 004c 	mov.w	r0, ip, lsl #1
  4078a0:	e732      	b.n	407708 <_malloc_r+0x98>
  4078a2:	0a51      	lsrs	r1, r2, #9
  4078a4:	2904      	cmp	r1, #4
  4078a6:	f240 8095 	bls.w	4079d4 <_malloc_r+0x364>
  4078aa:	2914      	cmp	r1, #20
  4078ac:	f200 8142 	bhi.w	407b34 <_malloc_r+0x4c4>
  4078b0:	f101 075b 	add.w	r7, r1, #91	; 0x5b
  4078b4:	0078      	lsls	r0, r7, #1
  4078b6:	eb06 0080 	add.w	r0, r6, r0, lsl #2
  4078ba:	f8df 90e0 	ldr.w	r9, [pc, #224]	; 40799c <_malloc_r+0x32c>
  4078be:	6881      	ldr	r1, [r0, #8]
  4078c0:	4281      	cmp	r1, r0
  4078c2:	f000 811b 	beq.w	407afc <_malloc_r+0x48c>
  4078c6:	684f      	ldr	r7, [r1, #4]
  4078c8:	f027 0703 	bic.w	r7, r7, #3
  4078cc:	42ba      	cmp	r2, r7
  4078ce:	d202      	bcs.n	4078d6 <_malloc_r+0x266>
  4078d0:	6889      	ldr	r1, [r1, #8]
  4078d2:	4288      	cmp	r0, r1
  4078d4:	d1f7      	bne.n	4078c6 <_malloc_r+0x256>
  4078d6:	68ca      	ldr	r2, [r1, #12]
  4078d8:	6870      	ldr	r0, [r6, #4]
  4078da:	60da      	str	r2, [r3, #12]
  4078dc:	6099      	str	r1, [r3, #8]
  4078de:	6093      	str	r3, [r2, #8]
  4078e0:	60cb      	str	r3, [r1, #12]
  4078e2:	e752      	b.n	40778a <_malloc_r+0x11a>
  4078e4:	f044 0601 	orr.w	r6, r4, #1
  4078e8:	f041 0201 	orr.w	r2, r1, #1
  4078ec:	441c      	add	r4, r3
  4078ee:	4628      	mov	r0, r5
  4078f0:	605e      	str	r6, [r3, #4]
  4078f2:	f103 0808 	add.w	r8, r3, #8
  4078f6:	617c      	str	r4, [r7, #20]
  4078f8:	613c      	str	r4, [r7, #16]
  4078fa:	f8c4 e00c 	str.w	lr, [r4, #12]
  4078fe:	f8c4 e008 	str.w	lr, [r4, #8]
  407902:	6062      	str	r2, [r4, #4]
  407904:	5061      	str	r1, [r4, r1]
  407906:	f000 faa5 	bl	407e54 <__malloc_unlock>
  40790a:	e6dd      	b.n	4076c8 <_malloc_r+0x58>
  40790c:	4a24      	ldr	r2, [pc, #144]	; (4079a0 <_malloc_r+0x330>)
  40790e:	4b25      	ldr	r3, [pc, #148]	; (4079a4 <_malloc_r+0x334>)
  407910:	6811      	ldr	r1, [r2, #0]
  407912:	681b      	ldr	r3, [r3, #0]
  407914:	3101      	adds	r1, #1
  407916:	4423      	add	r3, r4
  407918:	f000 8109 	beq.w	407b2e <_malloc_r+0x4be>
  40791c:	f241 010f 	movw	r1, #4111	; 0x100f
  407920:	f8df 9084 	ldr.w	r9, [pc, #132]	; 4079a8 <_malloc_r+0x338>
  407924:	4419      	add	r1, r3
  407926:	ea01 0909 	and.w	r9, r1, r9
  40792a:	4628      	mov	r0, r5
  40792c:	4649      	mov	r1, r9
  40792e:	9201      	str	r2, [sp, #4]
  407930:	f000 ffb8 	bl	4088a4 <_sbrk_r>
  407934:	f1b0 3fff 	cmp.w	r0, #4294967295
  407938:	4682      	mov	sl, r0
  40793a:	9a01      	ldr	r2, [sp, #4]
  40793c:	f000 8101 	beq.w	407b42 <_malloc_r+0x4d2>
  407940:	1bbb      	subs	r3, r7, r6
  407942:	eb07 0108 	add.w	r1, r7, r8
  407946:	4815      	ldr	r0, [pc, #84]	; (40799c <_malloc_r+0x32c>)
  407948:	bf18      	it	ne
  40794a:	2301      	movne	r3, #1
  40794c:	4551      	cmp	r1, sl
  40794e:	d967      	bls.n	407a20 <_malloc_r+0x3b0>
  407950:	2b00      	cmp	r3, #0
  407952:	d065      	beq.n	407a20 <_malloc_r+0x3b0>
  407954:	6887      	ldr	r7, [r0, #8]
  407956:	687b      	ldr	r3, [r7, #4]
  407958:	f023 0303 	bic.w	r3, r3, #3
  40795c:	1b1a      	subs	r2, r3, r4
  40795e:	2a0f      	cmp	r2, #15
  407960:	dd02      	ble.n	407968 <_malloc_r+0x2f8>
  407962:	429c      	cmp	r4, r3
  407964:	f67f af7d 	bls.w	407862 <_malloc_r+0x1f2>
  407968:	4628      	mov	r0, r5
  40796a:	f04f 0800 	mov.w	r8, #0
  40796e:	f000 fa71 	bl	407e54 <__malloc_unlock>
  407972:	e6a9      	b.n	4076c8 <_malloc_r+0x58>
  407974:	6878      	ldr	r0, [r7, #4]
  407976:	e708      	b.n	40778a <_malloc_r+0x11a>
  407978:	f109 0901 	add.w	r9, r9, #1
  40797c:	3008      	adds	r0, #8
  40797e:	f019 0f03 	tst.w	r9, #3
  407982:	f47f af15 	bne.w	4077b0 <_malloc_r+0x140>
  407986:	e02f      	b.n	4079e8 <_malloc_r+0x378>
  407988:	f103 0208 	add.w	r2, r3, #8
  40798c:	695b      	ldr	r3, [r3, #20]
  40798e:	429a      	cmp	r2, r3
  407990:	bf08      	it	eq
  407992:	f10c 0c02 	addeq.w	ip, ip, #2
  407996:	f43f aecd 	beq.w	407734 <_malloc_r+0xc4>
  40799a:	e684      	b.n	4076a6 <_malloc_r+0x36>
  40799c:	204004ec 	.word	0x204004ec
  4079a0:	204008f8 	.word	0x204008f8
  4079a4:	204009d0 	.word	0x204009d0
  4079a8:	fffff000 	.word	0xfffff000
  4079ac:	18fa      	adds	r2, r7, r3
  4079ae:	46b8      	mov	r8, r7
  4079b0:	68f9      	ldr	r1, [r7, #12]
  4079b2:	4628      	mov	r0, r5
  4079b4:	6853      	ldr	r3, [r2, #4]
  4079b6:	f858 4f08 	ldr.w	r4, [r8, #8]!
  4079ba:	f043 0301 	orr.w	r3, r3, #1
  4079be:	6053      	str	r3, [r2, #4]
  4079c0:	60e1      	str	r1, [r4, #12]
  4079c2:	608c      	str	r4, [r1, #8]
  4079c4:	f000 fa46 	bl	407e54 <__malloc_unlock>
  4079c8:	e67e      	b.n	4076c8 <_malloc_r+0x58>
  4079ca:	f10c 0c5b 	add.w	ip, ip, #91	; 0x5b
  4079ce:	ea4f 004c 	mov.w	r0, ip, lsl #1
  4079d2:	e699      	b.n	407708 <_malloc_r+0x98>
  4079d4:	0991      	lsrs	r1, r2, #6
  4079d6:	f101 0738 	add.w	r7, r1, #56	; 0x38
  4079da:	0078      	lsls	r0, r7, #1
  4079dc:	e76b      	b.n	4078b6 <_malloc_r+0x246>
  4079de:	f8d8 8000 	ldr.w	r8, [r8]
  4079e2:	4598      	cmp	r8, r3
  4079e4:	f040 80e6 	bne.w	407bb4 <_malloc_r+0x544>
  4079e8:	f01c 0f03 	tst.w	ip, #3
  4079ec:	f1a8 0308 	sub.w	r3, r8, #8
  4079f0:	f10c 3cff 	add.w	ip, ip, #4294967295
  4079f4:	d1f3      	bne.n	4079de <_malloc_r+0x36e>
  4079f6:	6873      	ldr	r3, [r6, #4]
  4079f8:	ea23 0301 	bic.w	r3, r3, r1
  4079fc:	6073      	str	r3, [r6, #4]
  4079fe:	0049      	lsls	r1, r1, #1
  407a00:	4299      	cmp	r1, r3
  407a02:	f63f af24 	bhi.w	40784e <_malloc_r+0x1de>
  407a06:	2900      	cmp	r1, #0
  407a08:	f43f af21 	beq.w	40784e <_malloc_r+0x1de>
  407a0c:	420b      	tst	r3, r1
  407a0e:	46cc      	mov	ip, r9
  407a10:	f47f aeca 	bne.w	4077a8 <_malloc_r+0x138>
  407a14:	0049      	lsls	r1, r1, #1
  407a16:	f10c 0c04 	add.w	ip, ip, #4
  407a1a:	420b      	tst	r3, r1
  407a1c:	d0fa      	beq.n	407a14 <_malloc_r+0x3a4>
  407a1e:	e6c3      	b.n	4077a8 <_malloc_r+0x138>
  407a20:	f8df b19c 	ldr.w	fp, [pc, #412]	; 407bc0 <_malloc_r+0x550>
  407a24:	4551      	cmp	r1, sl
  407a26:	f8db 0000 	ldr.w	r0, [fp]
  407a2a:	4448      	add	r0, r9
  407a2c:	f8cb 0000 	str.w	r0, [fp]
  407a30:	f000 808c 	beq.w	407b4c <_malloc_r+0x4dc>
  407a34:	6812      	ldr	r2, [r2, #0]
  407a36:	f8df e18c 	ldr.w	lr, [pc, #396]	; 407bc4 <_malloc_r+0x554>
  407a3a:	3201      	adds	r2, #1
  407a3c:	f000 80a3 	beq.w	407b86 <_malloc_r+0x516>
  407a40:	ebc1 010a 	rsb	r1, r1, sl
  407a44:	4408      	add	r0, r1
  407a46:	f8cb 0000 	str.w	r0, [fp]
  407a4a:	f01a 0107 	ands.w	r1, sl, #7
  407a4e:	d052      	beq.n	407af6 <_malloc_r+0x486>
  407a50:	f1c1 0008 	rsb	r0, r1, #8
  407a54:	f241 0208 	movw	r2, #4104	; 0x1008
  407a58:	4482      	add	sl, r0
  407a5a:	1a52      	subs	r2, r2, r1
  407a5c:	eb0a 0109 	add.w	r1, sl, r9
  407a60:	4628      	mov	r0, r5
  407a62:	9301      	str	r3, [sp, #4]
  407a64:	f3c1 010b 	ubfx	r1, r1, #0, #12
  407a68:	ebc1 0902 	rsb	r9, r1, r2
  407a6c:	4649      	mov	r1, r9
  407a6e:	f000 ff19 	bl	4088a4 <_sbrk_r>
  407a72:	1c43      	adds	r3, r0, #1
  407a74:	9b01      	ldr	r3, [sp, #4]
  407a76:	d07a      	beq.n	407b6e <_malloc_r+0x4fe>
  407a78:	ebca 0200 	rsb	r2, sl, r0
  407a7c:	444a      	add	r2, r9
  407a7e:	f042 0201 	orr.w	r2, r2, #1
  407a82:	f8db 0000 	ldr.w	r0, [fp]
  407a86:	f8c6 a008 	str.w	sl, [r6, #8]
  407a8a:	4448      	add	r0, r9
  407a8c:	f8ca 2004 	str.w	r2, [sl, #4]
  407a90:	f8df 912c 	ldr.w	r9, [pc, #300]	; 407bc0 <_malloc_r+0x550>
  407a94:	f8cb 0000 	str.w	r0, [fp]
  407a98:	b1a3      	cbz	r3, 407ac4 <_malloc_r+0x454>
  407a9a:	f1b8 0f0f 	cmp.w	r8, #15
  407a9e:	d937      	bls.n	407b10 <_malloc_r+0x4a0>
  407aa0:	687b      	ldr	r3, [r7, #4]
  407aa2:	f1a8 020c 	sub.w	r2, r8, #12
  407aa6:	f04f 0e05 	mov.w	lr, #5
  407aaa:	f022 0207 	bic.w	r2, r2, #7
  407aae:	f003 0301 	and.w	r3, r3, #1
  407ab2:	18b9      	adds	r1, r7, r2
  407ab4:	4313      	orrs	r3, r2
  407ab6:	2a0f      	cmp	r2, #15
  407ab8:	607b      	str	r3, [r7, #4]
  407aba:	f8c1 e004 	str.w	lr, [r1, #4]
  407abe:	f8c1 e008 	str.w	lr, [r1, #8]
  407ac2:	d858      	bhi.n	407b76 <_malloc_r+0x506>
  407ac4:	4b3c      	ldr	r3, [pc, #240]	; (407bb8 <_malloc_r+0x548>)
  407ac6:	681a      	ldr	r2, [r3, #0]
  407ac8:	4290      	cmp	r0, r2
  407aca:	d900      	bls.n	407ace <_malloc_r+0x45e>
  407acc:	6018      	str	r0, [r3, #0]
  407ace:	4b3b      	ldr	r3, [pc, #236]	; (407bbc <_malloc_r+0x54c>)
  407ad0:	68b7      	ldr	r7, [r6, #8]
  407ad2:	681a      	ldr	r2, [r3, #0]
  407ad4:	4290      	cmp	r0, r2
  407ad6:	d900      	bls.n	407ada <_malloc_r+0x46a>
  407ad8:	6018      	str	r0, [r3, #0]
  407ada:	687b      	ldr	r3, [r7, #4]
  407adc:	f023 0303 	bic.w	r3, r3, #3
  407ae0:	e73c      	b.n	40795c <_malloc_r+0x2ec>
  407ae2:	f5bc 7faa 	cmp.w	ip, #340	; 0x154
  407ae6:	d817      	bhi.n	407b18 <_malloc_r+0x4a8>
  407ae8:	ea4f 3cd4 	mov.w	ip, r4, lsr #15
  407aec:	f10c 0c77 	add.w	ip, ip, #119	; 0x77
  407af0:	ea4f 004c 	mov.w	r0, ip, lsl #1
  407af4:	e608      	b.n	407708 <_malloc_r+0x98>
  407af6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  407afa:	e7af      	b.n	407a5c <_malloc_r+0x3ec>
  407afc:	10bf      	asrs	r7, r7, #2
  407afe:	2001      	movs	r0, #1
  407b00:	460a      	mov	r2, r1
  407b02:	40b8      	lsls	r0, r7
  407b04:	f8d9 7004 	ldr.w	r7, [r9, #4]
  407b08:	4338      	orrs	r0, r7
  407b0a:	f8c9 0004 	str.w	r0, [r9, #4]
  407b0e:	e6e4      	b.n	4078da <_malloc_r+0x26a>
  407b10:	2301      	movs	r3, #1
  407b12:	f8ca 3004 	str.w	r3, [sl, #4]
  407b16:	e727      	b.n	407968 <_malloc_r+0x2f8>
  407b18:	f240 5354 	movw	r3, #1364	; 0x554
  407b1c:	459c      	cmp	ip, r3
  407b1e:	d822      	bhi.n	407b66 <_malloc_r+0x4f6>
  407b20:	ea4f 4c94 	mov.w	ip, r4, lsr #18
  407b24:	f10c 0c7c 	add.w	ip, ip, #124	; 0x7c
  407b28:	ea4f 004c 	mov.w	r0, ip, lsl #1
  407b2c:	e5ec      	b.n	407708 <_malloc_r+0x98>
  407b2e:	f103 0910 	add.w	r9, r3, #16
  407b32:	e6fa      	b.n	40792a <_malloc_r+0x2ba>
  407b34:	2954      	cmp	r1, #84	; 0x54
  407b36:	d829      	bhi.n	407b8c <_malloc_r+0x51c>
  407b38:	0b11      	lsrs	r1, r2, #12
  407b3a:	f101 076e 	add.w	r7, r1, #110	; 0x6e
  407b3e:	0078      	lsls	r0, r7, #1
  407b40:	e6b9      	b.n	4078b6 <_malloc_r+0x246>
  407b42:	68b7      	ldr	r7, [r6, #8]
  407b44:	687b      	ldr	r3, [r7, #4]
  407b46:	f023 0303 	bic.w	r3, r3, #3
  407b4a:	e707      	b.n	40795c <_malloc_r+0x2ec>
  407b4c:	f3c1 0e0b 	ubfx	lr, r1, #0, #12
  407b50:	f1be 0f00 	cmp.w	lr, #0
  407b54:	f47f af6e 	bne.w	407a34 <_malloc_r+0x3c4>
  407b58:	eb09 0308 	add.w	r3, r9, r8
  407b5c:	68b2      	ldr	r2, [r6, #8]
  407b5e:	f043 0301 	orr.w	r3, r3, #1
  407b62:	6053      	str	r3, [r2, #4]
  407b64:	e7ae      	b.n	407ac4 <_malloc_r+0x454>
  407b66:	20fc      	movs	r0, #252	; 0xfc
  407b68:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
  407b6c:	e5cc      	b.n	407708 <_malloc_r+0x98>
  407b6e:	2201      	movs	r2, #1
  407b70:	f04f 0900 	mov.w	r9, #0
  407b74:	e785      	b.n	407a82 <_malloc_r+0x412>
  407b76:	4628      	mov	r0, r5
  407b78:	f107 0108 	add.w	r1, r7, #8
  407b7c:	f7ff fa68 	bl	407050 <_free_r>
  407b80:	f8d9 0000 	ldr.w	r0, [r9]
  407b84:	e79e      	b.n	407ac4 <_malloc_r+0x454>
  407b86:	f8ce a000 	str.w	sl, [lr]
  407b8a:	e75e      	b.n	407a4a <_malloc_r+0x3da>
  407b8c:	f5b1 7faa 	cmp.w	r1, #340	; 0x154
  407b90:	d804      	bhi.n	407b9c <_malloc_r+0x52c>
  407b92:	0bd1      	lsrs	r1, r2, #15
  407b94:	f101 0777 	add.w	r7, r1, #119	; 0x77
  407b98:	0078      	lsls	r0, r7, #1
  407b9a:	e68c      	b.n	4078b6 <_malloc_r+0x246>
  407b9c:	f240 5054 	movw	r0, #1364	; 0x554
  407ba0:	4281      	cmp	r1, r0
  407ba2:	d804      	bhi.n	407bae <_malloc_r+0x53e>
  407ba4:	0c91      	lsrs	r1, r2, #18
  407ba6:	f101 077c 	add.w	r7, r1, #124	; 0x7c
  407baa:	0078      	lsls	r0, r7, #1
  407bac:	e683      	b.n	4078b6 <_malloc_r+0x246>
  407bae:	20fc      	movs	r0, #252	; 0xfc
  407bb0:	277e      	movs	r7, #126	; 0x7e
  407bb2:	e680      	b.n	4078b6 <_malloc_r+0x246>
  407bb4:	6873      	ldr	r3, [r6, #4]
  407bb6:	e722      	b.n	4079fe <_malloc_r+0x38e>
  407bb8:	204009cc 	.word	0x204009cc
  407bbc:	204009c8 	.word	0x204009c8
  407bc0:	204009d4 	.word	0x204009d4
  407bc4:	204008f8 	.word	0x204008f8

00407bc8 <memchr>:
  407bc8:	0783      	lsls	r3, r0, #30
  407bca:	b2c9      	uxtb	r1, r1
  407bcc:	b470      	push	{r4, r5, r6}
  407bce:	d03f      	beq.n	407c50 <memchr+0x88>
  407bd0:	1e54      	subs	r4, r2, #1
  407bd2:	2a00      	cmp	r2, #0
  407bd4:	d03e      	beq.n	407c54 <memchr+0x8c>
  407bd6:	7803      	ldrb	r3, [r0, #0]
  407bd8:	428b      	cmp	r3, r1
  407bda:	bf18      	it	ne
  407bdc:	1c43      	addne	r3, r0, #1
  407bde:	d105      	bne.n	407bec <memchr+0x24>
  407be0:	e01c      	b.n	407c1c <memchr+0x54>
  407be2:	b1ec      	cbz	r4, 407c20 <memchr+0x58>
  407be4:	7802      	ldrb	r2, [r0, #0]
  407be6:	3c01      	subs	r4, #1
  407be8:	428a      	cmp	r2, r1
  407bea:	d017      	beq.n	407c1c <memchr+0x54>
  407bec:	f013 0f03 	tst.w	r3, #3
  407bf0:	4618      	mov	r0, r3
  407bf2:	f103 0301 	add.w	r3, r3, #1
  407bf6:	d1f4      	bne.n	407be2 <memchr+0x1a>
  407bf8:	2c03      	cmp	r4, #3
  407bfa:	d814      	bhi.n	407c26 <memchr+0x5e>
  407bfc:	b184      	cbz	r4, 407c20 <memchr+0x58>
  407bfe:	7803      	ldrb	r3, [r0, #0]
  407c00:	428b      	cmp	r3, r1
  407c02:	d00b      	beq.n	407c1c <memchr+0x54>
  407c04:	1905      	adds	r5, r0, r4
  407c06:	1c43      	adds	r3, r0, #1
  407c08:	e002      	b.n	407c10 <memchr+0x48>
  407c0a:	7802      	ldrb	r2, [r0, #0]
  407c0c:	428a      	cmp	r2, r1
  407c0e:	d005      	beq.n	407c1c <memchr+0x54>
  407c10:	42ab      	cmp	r3, r5
  407c12:	4618      	mov	r0, r3
  407c14:	f103 0301 	add.w	r3, r3, #1
  407c18:	d1f7      	bne.n	407c0a <memchr+0x42>
  407c1a:	2000      	movs	r0, #0
  407c1c:	bc70      	pop	{r4, r5, r6}
  407c1e:	4770      	bx	lr
  407c20:	4620      	mov	r0, r4
  407c22:	bc70      	pop	{r4, r5, r6}
  407c24:	4770      	bx	lr
  407c26:	ea41 2601 	orr.w	r6, r1, r1, lsl #8
  407c2a:	4602      	mov	r2, r0
  407c2c:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
  407c30:	4610      	mov	r0, r2
  407c32:	3204      	adds	r2, #4
  407c34:	6803      	ldr	r3, [r0, #0]
  407c36:	4073      	eors	r3, r6
  407c38:	f1a3 3501 	sub.w	r5, r3, #16843009	; 0x1010101
  407c3c:	ea25 0303 	bic.w	r3, r5, r3
  407c40:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
  407c44:	d1da      	bne.n	407bfc <memchr+0x34>
  407c46:	3c04      	subs	r4, #4
  407c48:	4610      	mov	r0, r2
  407c4a:	2c03      	cmp	r4, #3
  407c4c:	d8f0      	bhi.n	407c30 <memchr+0x68>
  407c4e:	e7d5      	b.n	407bfc <memchr+0x34>
  407c50:	4614      	mov	r4, r2
  407c52:	e7d1      	b.n	407bf8 <memchr+0x30>
  407c54:	4610      	mov	r0, r2
  407c56:	e7e1      	b.n	407c1c <memchr+0x54>

00407c58 <memcpy>:
  407c58:	4684      	mov	ip, r0
  407c5a:	ea41 0300 	orr.w	r3, r1, r0
  407c5e:	f013 0303 	ands.w	r3, r3, #3
  407c62:	d16d      	bne.n	407d40 <memcpy+0xe8>
  407c64:	3a40      	subs	r2, #64	; 0x40
  407c66:	d341      	bcc.n	407cec <memcpy+0x94>
  407c68:	f851 3b04 	ldr.w	r3, [r1], #4
  407c6c:	f840 3b04 	str.w	r3, [r0], #4
  407c70:	f851 3b04 	ldr.w	r3, [r1], #4
  407c74:	f840 3b04 	str.w	r3, [r0], #4
  407c78:	f851 3b04 	ldr.w	r3, [r1], #4
  407c7c:	f840 3b04 	str.w	r3, [r0], #4
  407c80:	f851 3b04 	ldr.w	r3, [r1], #4
  407c84:	f840 3b04 	str.w	r3, [r0], #4
  407c88:	f851 3b04 	ldr.w	r3, [r1], #4
  407c8c:	f840 3b04 	str.w	r3, [r0], #4
  407c90:	f851 3b04 	ldr.w	r3, [r1], #4
  407c94:	f840 3b04 	str.w	r3, [r0], #4
  407c98:	f851 3b04 	ldr.w	r3, [r1], #4
  407c9c:	f840 3b04 	str.w	r3, [r0], #4
  407ca0:	f851 3b04 	ldr.w	r3, [r1], #4
  407ca4:	f840 3b04 	str.w	r3, [r0], #4
  407ca8:	f851 3b04 	ldr.w	r3, [r1], #4
  407cac:	f840 3b04 	str.w	r3, [r0], #4
  407cb0:	f851 3b04 	ldr.w	r3, [r1], #4
  407cb4:	f840 3b04 	str.w	r3, [r0], #4
  407cb8:	f851 3b04 	ldr.w	r3, [r1], #4
  407cbc:	f840 3b04 	str.w	r3, [r0], #4
  407cc0:	f851 3b04 	ldr.w	r3, [r1], #4
  407cc4:	f840 3b04 	str.w	r3, [r0], #4
  407cc8:	f851 3b04 	ldr.w	r3, [r1], #4
  407ccc:	f840 3b04 	str.w	r3, [r0], #4
  407cd0:	f851 3b04 	ldr.w	r3, [r1], #4
  407cd4:	f840 3b04 	str.w	r3, [r0], #4
  407cd8:	f851 3b04 	ldr.w	r3, [r1], #4
  407cdc:	f840 3b04 	str.w	r3, [r0], #4
  407ce0:	f851 3b04 	ldr.w	r3, [r1], #4
  407ce4:	f840 3b04 	str.w	r3, [r0], #4
  407ce8:	3a40      	subs	r2, #64	; 0x40
  407cea:	d2bd      	bcs.n	407c68 <memcpy+0x10>
  407cec:	3230      	adds	r2, #48	; 0x30
  407cee:	d311      	bcc.n	407d14 <memcpy+0xbc>
  407cf0:	f851 3b04 	ldr.w	r3, [r1], #4
  407cf4:	f840 3b04 	str.w	r3, [r0], #4
  407cf8:	f851 3b04 	ldr.w	r3, [r1], #4
  407cfc:	f840 3b04 	str.w	r3, [r0], #4
  407d00:	f851 3b04 	ldr.w	r3, [r1], #4
  407d04:	f840 3b04 	str.w	r3, [r0], #4
  407d08:	f851 3b04 	ldr.w	r3, [r1], #4
  407d0c:	f840 3b04 	str.w	r3, [r0], #4
  407d10:	3a10      	subs	r2, #16
  407d12:	d2ed      	bcs.n	407cf0 <memcpy+0x98>
  407d14:	320c      	adds	r2, #12
  407d16:	d305      	bcc.n	407d24 <memcpy+0xcc>
  407d18:	f851 3b04 	ldr.w	r3, [r1], #4
  407d1c:	f840 3b04 	str.w	r3, [r0], #4
  407d20:	3a04      	subs	r2, #4
  407d22:	d2f9      	bcs.n	407d18 <memcpy+0xc0>
  407d24:	3204      	adds	r2, #4
  407d26:	d008      	beq.n	407d3a <memcpy+0xe2>
  407d28:	07d2      	lsls	r2, r2, #31
  407d2a:	bf1c      	itt	ne
  407d2c:	f811 3b01 	ldrbne.w	r3, [r1], #1
  407d30:	f800 3b01 	strbne.w	r3, [r0], #1
  407d34:	d301      	bcc.n	407d3a <memcpy+0xe2>
  407d36:	880b      	ldrh	r3, [r1, #0]
  407d38:	8003      	strh	r3, [r0, #0]
  407d3a:	4660      	mov	r0, ip
  407d3c:	4770      	bx	lr
  407d3e:	bf00      	nop
  407d40:	2a08      	cmp	r2, #8
  407d42:	d313      	bcc.n	407d6c <memcpy+0x114>
  407d44:	078b      	lsls	r3, r1, #30
  407d46:	d08d      	beq.n	407c64 <memcpy+0xc>
  407d48:	f010 0303 	ands.w	r3, r0, #3
  407d4c:	d08a      	beq.n	407c64 <memcpy+0xc>
  407d4e:	f1c3 0304 	rsb	r3, r3, #4
  407d52:	1ad2      	subs	r2, r2, r3
  407d54:	07db      	lsls	r3, r3, #31
  407d56:	bf1c      	itt	ne
  407d58:	f811 3b01 	ldrbne.w	r3, [r1], #1
  407d5c:	f800 3b01 	strbne.w	r3, [r0], #1
  407d60:	d380      	bcc.n	407c64 <memcpy+0xc>
  407d62:	f831 3b02 	ldrh.w	r3, [r1], #2
  407d66:	f820 3b02 	strh.w	r3, [r0], #2
  407d6a:	e77b      	b.n	407c64 <memcpy+0xc>
  407d6c:	3a04      	subs	r2, #4
  407d6e:	d3d9      	bcc.n	407d24 <memcpy+0xcc>
  407d70:	3a01      	subs	r2, #1
  407d72:	f811 3b01 	ldrb.w	r3, [r1], #1
  407d76:	f800 3b01 	strb.w	r3, [r0], #1
  407d7a:	d2f9      	bcs.n	407d70 <memcpy+0x118>
  407d7c:	780b      	ldrb	r3, [r1, #0]
  407d7e:	7003      	strb	r3, [r0, #0]
  407d80:	784b      	ldrb	r3, [r1, #1]
  407d82:	7043      	strb	r3, [r0, #1]
  407d84:	788b      	ldrb	r3, [r1, #2]
  407d86:	7083      	strb	r3, [r0, #2]
  407d88:	4660      	mov	r0, ip
  407d8a:	4770      	bx	lr

00407d8c <memmove>:
  407d8c:	4288      	cmp	r0, r1
  407d8e:	b5f0      	push	{r4, r5, r6, r7, lr}
  407d90:	d90d      	bls.n	407dae <memmove+0x22>
  407d92:	188b      	adds	r3, r1, r2
  407d94:	4298      	cmp	r0, r3
  407d96:	d20a      	bcs.n	407dae <memmove+0x22>
  407d98:	1881      	adds	r1, r0, r2
  407d9a:	2a00      	cmp	r2, #0
  407d9c:	d053      	beq.n	407e46 <memmove+0xba>
  407d9e:	1a9a      	subs	r2, r3, r2
  407da0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  407da4:	4293      	cmp	r3, r2
  407da6:	f801 4d01 	strb.w	r4, [r1, #-1]!
  407daa:	d1f9      	bne.n	407da0 <memmove+0x14>
  407dac:	bdf0      	pop	{r4, r5, r6, r7, pc}
  407dae:	2a0f      	cmp	r2, #15
  407db0:	d947      	bls.n	407e42 <memmove+0xb6>
  407db2:	ea40 0301 	orr.w	r3, r0, r1
  407db6:	079b      	lsls	r3, r3, #30
  407db8:	d146      	bne.n	407e48 <memmove+0xbc>
  407dba:	f100 0410 	add.w	r4, r0, #16
  407dbe:	f101 0310 	add.w	r3, r1, #16
  407dc2:	4615      	mov	r5, r2
  407dc4:	f853 6c10 	ldr.w	r6, [r3, #-16]
  407dc8:	3d10      	subs	r5, #16
  407dca:	3310      	adds	r3, #16
  407dcc:	3410      	adds	r4, #16
  407dce:	f844 6c20 	str.w	r6, [r4, #-32]
  407dd2:	2d0f      	cmp	r5, #15
  407dd4:	f853 6c1c 	ldr.w	r6, [r3, #-28]
  407dd8:	f844 6c1c 	str.w	r6, [r4, #-28]
  407ddc:	f853 6c18 	ldr.w	r6, [r3, #-24]
  407de0:	f844 6c18 	str.w	r6, [r4, #-24]
  407de4:	f853 6c14 	ldr.w	r6, [r3, #-20]
  407de8:	f844 6c14 	str.w	r6, [r4, #-20]
  407dec:	d8ea      	bhi.n	407dc4 <memmove+0x38>
  407dee:	f1a2 0310 	sub.w	r3, r2, #16
  407df2:	f002 0e0f 	and.w	lr, r2, #15
  407df6:	f023 030f 	bic.w	r3, r3, #15
  407dfa:	f1be 0f03 	cmp.w	lr, #3
  407dfe:	f103 0310 	add.w	r3, r3, #16
  407e02:	4419      	add	r1, r3
  407e04:	4403      	add	r3, r0
  407e06:	d921      	bls.n	407e4c <memmove+0xc0>
  407e08:	1f1e      	subs	r6, r3, #4
  407e0a:	460d      	mov	r5, r1
  407e0c:	4674      	mov	r4, lr
  407e0e:	3c04      	subs	r4, #4
  407e10:	f855 7b04 	ldr.w	r7, [r5], #4
  407e14:	2c03      	cmp	r4, #3
  407e16:	f846 7f04 	str.w	r7, [r6, #4]!
  407e1a:	d8f8      	bhi.n	407e0e <memmove+0x82>
  407e1c:	f1ae 0404 	sub.w	r4, lr, #4
  407e20:	f002 0203 	and.w	r2, r2, #3
  407e24:	f024 0403 	bic.w	r4, r4, #3
  407e28:	3404      	adds	r4, #4
  407e2a:	4423      	add	r3, r4
  407e2c:	4421      	add	r1, r4
  407e2e:	b152      	cbz	r2, 407e46 <memmove+0xba>
  407e30:	3b01      	subs	r3, #1
  407e32:	440a      	add	r2, r1
  407e34:	f811 4b01 	ldrb.w	r4, [r1], #1
  407e38:	4291      	cmp	r1, r2
  407e3a:	f803 4f01 	strb.w	r4, [r3, #1]!
  407e3e:	d1f9      	bne.n	407e34 <memmove+0xa8>
  407e40:	bdf0      	pop	{r4, r5, r6, r7, pc}
  407e42:	4603      	mov	r3, r0
  407e44:	e7f3      	b.n	407e2e <memmove+0xa2>
  407e46:	bdf0      	pop	{r4, r5, r6, r7, pc}
  407e48:	4603      	mov	r3, r0
  407e4a:	e7f1      	b.n	407e30 <memmove+0xa4>
  407e4c:	4672      	mov	r2, lr
  407e4e:	e7ee      	b.n	407e2e <memmove+0xa2>

00407e50 <__malloc_lock>:
  407e50:	4770      	bx	lr
  407e52:	bf00      	nop

00407e54 <__malloc_unlock>:
  407e54:	4770      	bx	lr
  407e56:	bf00      	nop

00407e58 <_Balloc>:
  407e58:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
  407e5a:	b538      	push	{r3, r4, r5, lr}
  407e5c:	4605      	mov	r5, r0
  407e5e:	460c      	mov	r4, r1
  407e60:	b152      	cbz	r2, 407e78 <_Balloc+0x20>
  407e62:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
  407e66:	b18b      	cbz	r3, 407e8c <_Balloc+0x34>
  407e68:	6819      	ldr	r1, [r3, #0]
  407e6a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
  407e6e:	2200      	movs	r2, #0
  407e70:	4618      	mov	r0, r3
  407e72:	611a      	str	r2, [r3, #16]
  407e74:	60da      	str	r2, [r3, #12]
  407e76:	bd38      	pop	{r3, r4, r5, pc}
  407e78:	2221      	movs	r2, #33	; 0x21
  407e7a:	2104      	movs	r1, #4
  407e7c:	f000 fe58 	bl	408b30 <_calloc_r>
  407e80:	64e8      	str	r0, [r5, #76]	; 0x4c
  407e82:	4602      	mov	r2, r0
  407e84:	2800      	cmp	r0, #0
  407e86:	d1ec      	bne.n	407e62 <_Balloc+0xa>
  407e88:	2000      	movs	r0, #0
  407e8a:	bd38      	pop	{r3, r4, r5, pc}
  407e8c:	2101      	movs	r1, #1
  407e8e:	4628      	mov	r0, r5
  407e90:	fa01 f504 	lsl.w	r5, r1, r4
  407e94:	1d6a      	adds	r2, r5, #5
  407e96:	0092      	lsls	r2, r2, #2
  407e98:	f000 fe4a 	bl	408b30 <_calloc_r>
  407e9c:	4603      	mov	r3, r0
  407e9e:	2800      	cmp	r0, #0
  407ea0:	d0f2      	beq.n	407e88 <_Balloc+0x30>
  407ea2:	6044      	str	r4, [r0, #4]
  407ea4:	6085      	str	r5, [r0, #8]
  407ea6:	e7e2      	b.n	407e6e <_Balloc+0x16>

00407ea8 <_Bfree>:
  407ea8:	b131      	cbz	r1, 407eb8 <_Bfree+0x10>
  407eaa:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  407eac:	684a      	ldr	r2, [r1, #4]
  407eae:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
  407eb2:	6008      	str	r0, [r1, #0]
  407eb4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  407eb8:	4770      	bx	lr
  407eba:	bf00      	nop

00407ebc <__multadd>:
  407ebc:	b5f0      	push	{r4, r5, r6, r7, lr}
  407ebe:	460c      	mov	r4, r1
  407ec0:	b083      	sub	sp, #12
  407ec2:	4605      	mov	r5, r0
  407ec4:	690e      	ldr	r6, [r1, #16]
  407ec6:	f101 0e14 	add.w	lr, r1, #20
  407eca:	2700      	movs	r7, #0
  407ecc:	f8de 1000 	ldr.w	r1, [lr]
  407ed0:	3701      	adds	r7, #1
  407ed2:	b288      	uxth	r0, r1
  407ed4:	42be      	cmp	r6, r7
  407ed6:	ea4f 4111 	mov.w	r1, r1, lsr #16
  407eda:	fb02 3300 	mla	r3, r2, r0, r3
  407ede:	fb02 f101 	mul.w	r1, r2, r1
  407ee2:	b298      	uxth	r0, r3
  407ee4:	eb01 4313 	add.w	r3, r1, r3, lsr #16
  407ee8:	eb00 4103 	add.w	r1, r0, r3, lsl #16
  407eec:	ea4f 4313 	mov.w	r3, r3, lsr #16
  407ef0:	f84e 1b04 	str.w	r1, [lr], #4
  407ef4:	dcea      	bgt.n	407ecc <__multadd+0x10>
  407ef6:	b13b      	cbz	r3, 407f08 <__multadd+0x4c>
  407ef8:	68a2      	ldr	r2, [r4, #8]
  407efa:	4296      	cmp	r6, r2
  407efc:	da07      	bge.n	407f0e <__multadd+0x52>
  407efe:	eb04 0286 	add.w	r2, r4, r6, lsl #2
  407f02:	3601      	adds	r6, #1
  407f04:	6153      	str	r3, [r2, #20]
  407f06:	6126      	str	r6, [r4, #16]
  407f08:	4620      	mov	r0, r4
  407f0a:	b003      	add	sp, #12
  407f0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  407f0e:	6861      	ldr	r1, [r4, #4]
  407f10:	4628      	mov	r0, r5
  407f12:	9301      	str	r3, [sp, #4]
  407f14:	3101      	adds	r1, #1
  407f16:	f7ff ff9f 	bl	407e58 <_Balloc>
  407f1a:	6922      	ldr	r2, [r4, #16]
  407f1c:	f104 010c 	add.w	r1, r4, #12
  407f20:	4607      	mov	r7, r0
  407f22:	3202      	adds	r2, #2
  407f24:	300c      	adds	r0, #12
  407f26:	0092      	lsls	r2, r2, #2
  407f28:	f7ff fe96 	bl	407c58 <memcpy>
  407f2c:	6cea      	ldr	r2, [r5, #76]	; 0x4c
  407f2e:	6861      	ldr	r1, [r4, #4]
  407f30:	9b01      	ldr	r3, [sp, #4]
  407f32:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
  407f36:	6020      	str	r0, [r4, #0]
  407f38:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
  407f3c:	463c      	mov	r4, r7
  407f3e:	e7de      	b.n	407efe <__multadd+0x42>

00407f40 <__hi0bits>:
  407f40:	4b0f      	ldr	r3, [pc, #60]	; (407f80 <__hi0bits+0x40>)
  407f42:	4003      	ands	r3, r0
  407f44:	b9b3      	cbnz	r3, 407f74 <__hi0bits+0x34>
  407f46:	0400      	lsls	r0, r0, #16
  407f48:	2310      	movs	r3, #16
  407f4a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
  407f4e:	d101      	bne.n	407f54 <__hi0bits+0x14>
  407f50:	3308      	adds	r3, #8
  407f52:	0200      	lsls	r0, r0, #8
  407f54:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
  407f58:	d101      	bne.n	407f5e <__hi0bits+0x1e>
  407f5a:	3304      	adds	r3, #4
  407f5c:	0100      	lsls	r0, r0, #4
  407f5e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
  407f62:	d101      	bne.n	407f68 <__hi0bits+0x28>
  407f64:	3302      	adds	r3, #2
  407f66:	0080      	lsls	r0, r0, #2
  407f68:	2800      	cmp	r0, #0
  407f6a:	db07      	blt.n	407f7c <__hi0bits+0x3c>
  407f6c:	0042      	lsls	r2, r0, #1
  407f6e:	d403      	bmi.n	407f78 <__hi0bits+0x38>
  407f70:	2020      	movs	r0, #32
  407f72:	4770      	bx	lr
  407f74:	2300      	movs	r3, #0
  407f76:	e7e8      	b.n	407f4a <__hi0bits+0xa>
  407f78:	1c58      	adds	r0, r3, #1
  407f7a:	4770      	bx	lr
  407f7c:	4618      	mov	r0, r3
  407f7e:	4770      	bx	lr
  407f80:	ffff0000 	.word	0xffff0000

00407f84 <__lo0bits>:
  407f84:	6803      	ldr	r3, [r0, #0]
  407f86:	f013 0207 	ands.w	r2, r3, #7
  407f8a:	d008      	beq.n	407f9e <__lo0bits+0x1a>
  407f8c:	07d9      	lsls	r1, r3, #31
  407f8e:	d422      	bmi.n	407fd6 <__lo0bits+0x52>
  407f90:	079a      	lsls	r2, r3, #30
  407f92:	d423      	bmi.n	407fdc <__lo0bits+0x58>
  407f94:	089b      	lsrs	r3, r3, #2
  407f96:	2202      	movs	r2, #2
  407f98:	6003      	str	r3, [r0, #0]
  407f9a:	4610      	mov	r0, r2
  407f9c:	4770      	bx	lr
  407f9e:	b299      	uxth	r1, r3
  407fa0:	b909      	cbnz	r1, 407fa6 <__lo0bits+0x22>
  407fa2:	0c1b      	lsrs	r3, r3, #16
  407fa4:	2210      	movs	r2, #16
  407fa6:	f013 0fff 	tst.w	r3, #255	; 0xff
  407faa:	d101      	bne.n	407fb0 <__lo0bits+0x2c>
  407fac:	3208      	adds	r2, #8
  407fae:	0a1b      	lsrs	r3, r3, #8
  407fb0:	0719      	lsls	r1, r3, #28
  407fb2:	d101      	bne.n	407fb8 <__lo0bits+0x34>
  407fb4:	3204      	adds	r2, #4
  407fb6:	091b      	lsrs	r3, r3, #4
  407fb8:	0799      	lsls	r1, r3, #30
  407fba:	d101      	bne.n	407fc0 <__lo0bits+0x3c>
  407fbc:	3202      	adds	r2, #2
  407fbe:	089b      	lsrs	r3, r3, #2
  407fc0:	07d9      	lsls	r1, r3, #31
  407fc2:	d405      	bmi.n	407fd0 <__lo0bits+0x4c>
  407fc4:	085b      	lsrs	r3, r3, #1
  407fc6:	d102      	bne.n	407fce <__lo0bits+0x4a>
  407fc8:	2220      	movs	r2, #32
  407fca:	4610      	mov	r0, r2
  407fcc:	4770      	bx	lr
  407fce:	3201      	adds	r2, #1
  407fd0:	6003      	str	r3, [r0, #0]
  407fd2:	4610      	mov	r0, r2
  407fd4:	4770      	bx	lr
  407fd6:	2200      	movs	r2, #0
  407fd8:	4610      	mov	r0, r2
  407fda:	4770      	bx	lr
  407fdc:	085b      	lsrs	r3, r3, #1
  407fde:	2201      	movs	r2, #1
  407fe0:	6003      	str	r3, [r0, #0]
  407fe2:	4610      	mov	r0, r2
  407fe4:	4770      	bx	lr
  407fe6:	bf00      	nop

00407fe8 <__i2b>:
  407fe8:	b510      	push	{r4, lr}
  407fea:	460c      	mov	r4, r1
  407fec:	2101      	movs	r1, #1
  407fee:	f7ff ff33 	bl	407e58 <_Balloc>
  407ff2:	2201      	movs	r2, #1
  407ff4:	6144      	str	r4, [r0, #20]
  407ff6:	6102      	str	r2, [r0, #16]
  407ff8:	bd10      	pop	{r4, pc}
  407ffa:	bf00      	nop

00407ffc <__multiply>:
  407ffc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  408000:	690e      	ldr	r6, [r1, #16]
  408002:	b085      	sub	sp, #20
  408004:	6915      	ldr	r5, [r2, #16]
  408006:	460c      	mov	r4, r1
  408008:	4691      	mov	r9, r2
  40800a:	42ae      	cmp	r6, r5
  40800c:	f2c0 8094 	blt.w	408138 <__multiply+0x13c>
  408010:	462b      	mov	r3, r5
  408012:	4635      	mov	r5, r6
  408014:	461e      	mov	r6, r3
  408016:	eb05 0806 	add.w	r8, r5, r6
  40801a:	68a3      	ldr	r3, [r4, #8]
  40801c:	6861      	ldr	r1, [r4, #4]
  40801e:	4598      	cmp	r8, r3
  408020:	dd00      	ble.n	408024 <__multiply+0x28>
  408022:	3101      	adds	r1, #1
  408024:	f7ff ff18 	bl	407e58 <_Balloc>
  408028:	f100 0a14 	add.w	sl, r0, #20
  40802c:	9001      	str	r0, [sp, #4]
  40802e:	eb0a 0b88 	add.w	fp, sl, r8, lsl #2
  408032:	45da      	cmp	sl, fp
  408034:	d205      	bcs.n	408042 <__multiply+0x46>
  408036:	4653      	mov	r3, sl
  408038:	2100      	movs	r1, #0
  40803a:	f843 1b04 	str.w	r1, [r3], #4
  40803e:	459b      	cmp	fp, r3
  408040:	d8fb      	bhi.n	40803a <__multiply+0x3e>
  408042:	f109 0914 	add.w	r9, r9, #20
  408046:	f104 0314 	add.w	r3, r4, #20
  40804a:	eb09 0286 	add.w	r2, r9, r6, lsl #2
  40804e:	eb03 0c85 	add.w	ip, r3, r5, lsl #2
  408052:	4591      	cmp	r9, r2
  408054:	d25b      	bcs.n	40810e <__multiply+0x112>
  408056:	f8cd b008 	str.w	fp, [sp, #8]
  40805a:	4693      	mov	fp, r2
  40805c:	f8cd 800c 	str.w	r8, [sp, #12]
  408060:	4698      	mov	r8, r3
  408062:	f859 6b04 	ldr.w	r6, [r9], #4
  408066:	fa1f fe86 	uxth.w	lr, r6
  40806a:	f1be 0f00 	cmp.w	lr, #0
  40806e:	d021      	beq.n	4080b4 <__multiply+0xb8>
  408070:	4647      	mov	r7, r8
  408072:	4656      	mov	r6, sl
  408074:	2100      	movs	r1, #0
  408076:	e000      	b.n	40807a <__multiply+0x7e>
  408078:	4626      	mov	r6, r4
  40807a:	f857 2b04 	ldr.w	r2, [r7], #4
  40807e:	4634      	mov	r4, r6
  408080:	6835      	ldr	r5, [r6, #0]
  408082:	b290      	uxth	r0, r2
  408084:	45bc      	cmp	ip, r7
  408086:	b2ab      	uxth	r3, r5
  408088:	ea4f 4212 	mov.w	r2, r2, lsr #16
  40808c:	fb0e 3000 	mla	r0, lr, r0, r3
  408090:	ea4f 4315 	mov.w	r3, r5, lsr #16
  408094:	4401      	add	r1, r0
  408096:	fb0e 3302 	mla	r3, lr, r2, r3
  40809a:	b28a      	uxth	r2, r1
  40809c:	eb03 4111 	add.w	r1, r3, r1, lsr #16
  4080a0:	ea42 4301 	orr.w	r3, r2, r1, lsl #16
  4080a4:	ea4f 4111 	mov.w	r1, r1, lsr #16
  4080a8:	f844 3b04 	str.w	r3, [r4], #4
  4080ac:	d8e4      	bhi.n	408078 <__multiply+0x7c>
  4080ae:	6071      	str	r1, [r6, #4]
  4080b0:	f859 6c04 	ldr.w	r6, [r9, #-4]
  4080b4:	0c36      	lsrs	r6, r6, #16
  4080b6:	d022      	beq.n	4080fe <__multiply+0x102>
  4080b8:	f8da 3000 	ldr.w	r3, [sl]
  4080bc:	2700      	movs	r7, #0
  4080be:	4655      	mov	r5, sl
  4080c0:	4640      	mov	r0, r8
  4080c2:	461a      	mov	r2, r3
  4080c4:	46be      	mov	lr, r7
  4080c6:	e000      	b.n	4080ca <__multiply+0xce>
  4080c8:	4625      	mov	r5, r4
  4080ca:	8807      	ldrh	r7, [r0, #0]
  4080cc:	0c12      	lsrs	r2, r2, #16
  4080ce:	b299      	uxth	r1, r3
  4080d0:	462c      	mov	r4, r5
  4080d2:	fb06 2207 	mla	r2, r6, r7, r2
  4080d6:	eb02 070e 	add.w	r7, r2, lr
  4080da:	ea41 4307 	orr.w	r3, r1, r7, lsl #16
  4080de:	f844 3b04 	str.w	r3, [r4], #4
  4080e2:	f850 1b04 	ldr.w	r1, [r0], #4
  4080e6:	686a      	ldr	r2, [r5, #4]
  4080e8:	0c09      	lsrs	r1, r1, #16
  4080ea:	4584      	cmp	ip, r0
  4080ec:	b293      	uxth	r3, r2
  4080ee:	fb06 3101 	mla	r1, r6, r1, r3
  4080f2:	eb01 4317 	add.w	r3, r1, r7, lsr #16
  4080f6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
  4080fa:	d8e5      	bhi.n	4080c8 <__multiply+0xcc>
  4080fc:	606b      	str	r3, [r5, #4]
  4080fe:	45cb      	cmp	fp, r9
  408100:	f10a 0a04 	add.w	sl, sl, #4
  408104:	d8ad      	bhi.n	408062 <__multiply+0x66>
  408106:	f8dd b008 	ldr.w	fp, [sp, #8]
  40810a:	f8dd 800c 	ldr.w	r8, [sp, #12]
  40810e:	f1b8 0f00 	cmp.w	r8, #0
  408112:	dd0b      	ble.n	40812c <__multiply+0x130>
  408114:	f85b 3c04 	ldr.w	r3, [fp, #-4]
  408118:	f1ab 0b04 	sub.w	fp, fp, #4
  40811c:	b11b      	cbz	r3, 408126 <__multiply+0x12a>
  40811e:	e005      	b.n	40812c <__multiply+0x130>
  408120:	f85b 3d04 	ldr.w	r3, [fp, #-4]!
  408124:	b913      	cbnz	r3, 40812c <__multiply+0x130>
  408126:	f1b8 0801 	subs.w	r8, r8, #1
  40812a:	d1f9      	bne.n	408120 <__multiply+0x124>
  40812c:	9801      	ldr	r0, [sp, #4]
  40812e:	f8c0 8010 	str.w	r8, [r0, #16]
  408132:	b005      	add	sp, #20
  408134:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408138:	4614      	mov	r4, r2
  40813a:	4689      	mov	r9, r1
  40813c:	e76b      	b.n	408016 <__multiply+0x1a>
  40813e:	bf00      	nop

00408140 <__pow5mult>:
  408140:	f012 0303 	ands.w	r3, r2, #3
  408144:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  408148:	4614      	mov	r4, r2
  40814a:	4607      	mov	r7, r0
  40814c:	460e      	mov	r6, r1
  40814e:	d12d      	bne.n	4081ac <__pow5mult+0x6c>
  408150:	10a4      	asrs	r4, r4, #2
  408152:	d01c      	beq.n	40818e <__pow5mult+0x4e>
  408154:	6cbd      	ldr	r5, [r7, #72]	; 0x48
  408156:	b395      	cbz	r5, 4081be <__pow5mult+0x7e>
  408158:	07e3      	lsls	r3, r4, #31
  40815a:	f04f 0800 	mov.w	r8, #0
  40815e:	d406      	bmi.n	40816e <__pow5mult+0x2e>
  408160:	1064      	asrs	r4, r4, #1
  408162:	d014      	beq.n	40818e <__pow5mult+0x4e>
  408164:	6828      	ldr	r0, [r5, #0]
  408166:	b1a8      	cbz	r0, 408194 <__pow5mult+0x54>
  408168:	4605      	mov	r5, r0
  40816a:	07e3      	lsls	r3, r4, #31
  40816c:	d5f8      	bpl.n	408160 <__pow5mult+0x20>
  40816e:	4638      	mov	r0, r7
  408170:	4631      	mov	r1, r6
  408172:	462a      	mov	r2, r5
  408174:	f7ff ff42 	bl	407ffc <__multiply>
  408178:	b1b6      	cbz	r6, 4081a8 <__pow5mult+0x68>
  40817a:	6872      	ldr	r2, [r6, #4]
  40817c:	1064      	asrs	r4, r4, #1
  40817e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  408180:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  408184:	6031      	str	r1, [r6, #0]
  408186:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
  40818a:	4606      	mov	r6, r0
  40818c:	d1ea      	bne.n	408164 <__pow5mult+0x24>
  40818e:	4630      	mov	r0, r6
  408190:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  408194:	4629      	mov	r1, r5
  408196:	462a      	mov	r2, r5
  408198:	4638      	mov	r0, r7
  40819a:	f7ff ff2f 	bl	407ffc <__multiply>
  40819e:	6028      	str	r0, [r5, #0]
  4081a0:	f8c0 8000 	str.w	r8, [r0]
  4081a4:	4605      	mov	r5, r0
  4081a6:	e7e0      	b.n	40816a <__pow5mult+0x2a>
  4081a8:	4606      	mov	r6, r0
  4081aa:	e7d9      	b.n	408160 <__pow5mult+0x20>
  4081ac:	1e5a      	subs	r2, r3, #1
  4081ae:	4d0b      	ldr	r5, [pc, #44]	; (4081dc <__pow5mult+0x9c>)
  4081b0:	2300      	movs	r3, #0
  4081b2:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
  4081b6:	f7ff fe81 	bl	407ebc <__multadd>
  4081ba:	4606      	mov	r6, r0
  4081bc:	e7c8      	b.n	408150 <__pow5mult+0x10>
  4081be:	2101      	movs	r1, #1
  4081c0:	4638      	mov	r0, r7
  4081c2:	f7ff fe49 	bl	407e58 <_Balloc>
  4081c6:	f240 2171 	movw	r1, #625	; 0x271
  4081ca:	2201      	movs	r2, #1
  4081cc:	2300      	movs	r3, #0
  4081ce:	6141      	str	r1, [r0, #20]
  4081d0:	4605      	mov	r5, r0
  4081d2:	6102      	str	r2, [r0, #16]
  4081d4:	64b8      	str	r0, [r7, #72]	; 0x48
  4081d6:	6003      	str	r3, [r0, #0]
  4081d8:	e7be      	b.n	408158 <__pow5mult+0x18>
  4081da:	bf00      	nop
  4081dc:	00409e08 	.word	0x00409e08

004081e0 <__lshift>:
  4081e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4081e4:	690e      	ldr	r6, [r1, #16]
  4081e6:	ea4f 1962 	mov.w	r9, r2, asr #5
  4081ea:	688b      	ldr	r3, [r1, #8]
  4081ec:	460d      	mov	r5, r1
  4081ee:	444e      	add	r6, r9
  4081f0:	4690      	mov	r8, r2
  4081f2:	4607      	mov	r7, r0
  4081f4:	6849      	ldr	r1, [r1, #4]
  4081f6:	1c74      	adds	r4, r6, #1
  4081f8:	429c      	cmp	r4, r3
  4081fa:	dd03      	ble.n	408204 <__lshift+0x24>
  4081fc:	005b      	lsls	r3, r3, #1
  4081fe:	3101      	adds	r1, #1
  408200:	429c      	cmp	r4, r3
  408202:	dcfb      	bgt.n	4081fc <__lshift+0x1c>
  408204:	4638      	mov	r0, r7
  408206:	f7ff fe27 	bl	407e58 <_Balloc>
  40820a:	f1b9 0f00 	cmp.w	r9, #0
  40820e:	4684      	mov	ip, r0
  408210:	f100 0114 	add.w	r1, r0, #20
  408214:	dd09      	ble.n	40822a <__lshift+0x4a>
  408216:	2300      	movs	r3, #0
  408218:	460a      	mov	r2, r1
  40821a:	4618      	mov	r0, r3
  40821c:	3301      	adds	r3, #1
  40821e:	f842 0b04 	str.w	r0, [r2], #4
  408222:	454b      	cmp	r3, r9
  408224:	d1fa      	bne.n	40821c <__lshift+0x3c>
  408226:	eb01 0183 	add.w	r1, r1, r3, lsl #2
  40822a:	692a      	ldr	r2, [r5, #16]
  40822c:	f105 0314 	add.w	r3, r5, #20
  408230:	eb03 0e82 	add.w	lr, r3, r2, lsl #2
  408234:	f018 021f 	ands.w	r2, r8, #31
  408238:	d023      	beq.n	408282 <__lshift+0xa2>
  40823a:	f1c2 0920 	rsb	r9, r2, #32
  40823e:	f04f 0a00 	mov.w	sl, #0
  408242:	6818      	ldr	r0, [r3, #0]
  408244:	4688      	mov	r8, r1
  408246:	4090      	lsls	r0, r2
  408248:	ea4a 0000 	orr.w	r0, sl, r0
  40824c:	f841 0b04 	str.w	r0, [r1], #4
  408250:	f853 0b04 	ldr.w	r0, [r3], #4
  408254:	459e      	cmp	lr, r3
  408256:	fa20 fa09 	lsr.w	sl, r0, r9
  40825a:	d8f2      	bhi.n	408242 <__lshift+0x62>
  40825c:	f8c8 a004 	str.w	sl, [r8, #4]
  408260:	f1ba 0f00 	cmp.w	sl, #0
  408264:	d000      	beq.n	408268 <__lshift+0x88>
  408266:	1cb4      	adds	r4, r6, #2
  408268:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  40826a:	3c01      	subs	r4, #1
  40826c:	686a      	ldr	r2, [r5, #4]
  40826e:	4660      	mov	r0, ip
  408270:	f8cc 4010 	str.w	r4, [ip, #16]
  408274:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  408278:	6029      	str	r1, [r5, #0]
  40827a:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
  40827e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  408282:	3904      	subs	r1, #4
  408284:	f853 2b04 	ldr.w	r2, [r3], #4
  408288:	459e      	cmp	lr, r3
  40828a:	f841 2f04 	str.w	r2, [r1, #4]!
  40828e:	d8f9      	bhi.n	408284 <__lshift+0xa4>
  408290:	e7ea      	b.n	408268 <__lshift+0x88>
  408292:	bf00      	nop

00408294 <__mcmp>:
  408294:	6902      	ldr	r2, [r0, #16]
  408296:	690b      	ldr	r3, [r1, #16]
  408298:	1ad2      	subs	r2, r2, r3
  40829a:	d113      	bne.n	4082c4 <__mcmp+0x30>
  40829c:	009a      	lsls	r2, r3, #2
  40829e:	3014      	adds	r0, #20
  4082a0:	3114      	adds	r1, #20
  4082a2:	1883      	adds	r3, r0, r2
  4082a4:	4411      	add	r1, r2
  4082a6:	b410      	push	{r4}
  4082a8:	e001      	b.n	4082ae <__mcmp+0x1a>
  4082aa:	4298      	cmp	r0, r3
  4082ac:	d20c      	bcs.n	4082c8 <__mcmp+0x34>
  4082ae:	f853 4d04 	ldr.w	r4, [r3, #-4]!
  4082b2:	f851 2d04 	ldr.w	r2, [r1, #-4]!
  4082b6:	4294      	cmp	r4, r2
  4082b8:	d0f7      	beq.n	4082aa <__mcmp+0x16>
  4082ba:	d309      	bcc.n	4082d0 <__mcmp+0x3c>
  4082bc:	2001      	movs	r0, #1
  4082be:	f85d 4b04 	ldr.w	r4, [sp], #4
  4082c2:	4770      	bx	lr
  4082c4:	4610      	mov	r0, r2
  4082c6:	4770      	bx	lr
  4082c8:	2000      	movs	r0, #0
  4082ca:	f85d 4b04 	ldr.w	r4, [sp], #4
  4082ce:	4770      	bx	lr
  4082d0:	f04f 30ff 	mov.w	r0, #4294967295
  4082d4:	f85d 4b04 	ldr.w	r4, [sp], #4
  4082d8:	4770      	bx	lr
  4082da:	bf00      	nop

004082dc <__mdiff>:
  4082dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4082e0:	460c      	mov	r4, r1
  4082e2:	4605      	mov	r5, r0
  4082e4:	4611      	mov	r1, r2
  4082e6:	4617      	mov	r7, r2
  4082e8:	4620      	mov	r0, r4
  4082ea:	f7ff ffd3 	bl	408294 <__mcmp>
  4082ee:	1e06      	subs	r6, r0, #0
  4082f0:	d05c      	beq.n	4083ac <__mdiff+0xd0>
  4082f2:	db55      	blt.n	4083a0 <__mdiff+0xc4>
  4082f4:	f04f 0800 	mov.w	r8, #0
  4082f8:	6861      	ldr	r1, [r4, #4]
  4082fa:	4628      	mov	r0, r5
  4082fc:	f7ff fdac 	bl	407e58 <_Balloc>
  408300:	f107 0514 	add.w	r5, r7, #20
  408304:	693b      	ldr	r3, [r7, #16]
  408306:	f104 0114 	add.w	r1, r4, #20
  40830a:	6926      	ldr	r6, [r4, #16]
  40830c:	4684      	mov	ip, r0
  40830e:	eb05 0e83 	add.w	lr, r5, r3, lsl #2
  408312:	f100 0414 	add.w	r4, r0, #20
  408316:	eb01 0786 	add.w	r7, r1, r6, lsl #2
  40831a:	2300      	movs	r3, #0
  40831c:	f8c0 800c 	str.w	r8, [r0, #12]
  408320:	f851 9b04 	ldr.w	r9, [r1], #4
  408324:	f855 2b04 	ldr.w	r2, [r5], #4
  408328:	fa13 f889 	uxtah	r8, r3, r9
  40832c:	4608      	mov	r0, r1
  40832e:	b293      	uxth	r3, r2
  408330:	45ae      	cmp	lr, r5
  408332:	ea4f 4212 	mov.w	r2, r2, lsr #16
  408336:	ebc3 0308 	rsb	r3, r3, r8
  40833a:	ebc2 4219 	rsb	r2, r2, r9, lsr #16
  40833e:	fa1f f883 	uxth.w	r8, r3
  408342:	eb02 4323 	add.w	r3, r2, r3, asr #16
  408346:	ea48 4203 	orr.w	r2, r8, r3, lsl #16
  40834a:	ea4f 4323 	mov.w	r3, r3, asr #16
  40834e:	f844 2b04 	str.w	r2, [r4], #4
  408352:	d8e5      	bhi.n	408320 <__mdiff+0x44>
  408354:	428f      	cmp	r7, r1
  408356:	4625      	mov	r5, r4
  408358:	d916      	bls.n	408388 <__mdiff+0xac>
  40835a:	f850 2b04 	ldr.w	r2, [r0], #4
  40835e:	fa13 f382 	uxtah	r3, r3, r2
  408362:	0c12      	lsrs	r2, r2, #16
  408364:	4287      	cmp	r7, r0
  408366:	fa1f fe83 	uxth.w	lr, r3
  40836a:	eb02 4323 	add.w	r3, r2, r3, asr #16
  40836e:	ea4e 4203 	orr.w	r2, lr, r3, lsl #16
  408372:	ea4f 4323 	mov.w	r3, r3, asr #16
  408376:	f844 2b04 	str.w	r2, [r4], #4
  40837a:	d8ee      	bhi.n	40835a <__mdiff+0x7e>
  40837c:	43c9      	mvns	r1, r1
  40837e:	4439      	add	r1, r7
  408380:	f021 0403 	bic.w	r4, r1, #3
  408384:	3404      	adds	r4, #4
  408386:	442c      	add	r4, r5
  408388:	3c04      	subs	r4, #4
  40838a:	b922      	cbnz	r2, 408396 <__mdiff+0xba>
  40838c:	f854 3d04 	ldr.w	r3, [r4, #-4]!
  408390:	3e01      	subs	r6, #1
  408392:	2b00      	cmp	r3, #0
  408394:	d0fa      	beq.n	40838c <__mdiff+0xb0>
  408396:	4660      	mov	r0, ip
  408398:	f8cc 6010 	str.w	r6, [ip, #16]
  40839c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4083a0:	4623      	mov	r3, r4
  4083a2:	f04f 0801 	mov.w	r8, #1
  4083a6:	463c      	mov	r4, r7
  4083a8:	461f      	mov	r7, r3
  4083aa:	e7a5      	b.n	4082f8 <__mdiff+0x1c>
  4083ac:	4628      	mov	r0, r5
  4083ae:	4631      	mov	r1, r6
  4083b0:	f7ff fd52 	bl	407e58 <_Balloc>
  4083b4:	2201      	movs	r2, #1
  4083b6:	4603      	mov	r3, r0
  4083b8:	6146      	str	r6, [r0, #20]
  4083ba:	611a      	str	r2, [r3, #16]
  4083bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

004083c0 <__d2b>:
  4083c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4083c4:	461c      	mov	r4, r3
  4083c6:	b082      	sub	sp, #8
  4083c8:	2101      	movs	r1, #1
  4083ca:	4616      	mov	r6, r2
  4083cc:	f3c4 550a 	ubfx	r5, r4, #20, #11
  4083d0:	f7ff fd42 	bl	407e58 <_Balloc>
  4083d4:	f3c4 0413 	ubfx	r4, r4, #0, #20
  4083d8:	4607      	mov	r7, r0
  4083da:	b10d      	cbz	r5, 4083e0 <__d2b+0x20>
  4083dc:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
  4083e0:	9401      	str	r4, [sp, #4]
  4083e2:	b30e      	cbz	r6, 408428 <__d2b+0x68>
  4083e4:	a802      	add	r0, sp, #8
  4083e6:	f840 6d08 	str.w	r6, [r0, #-8]!
  4083ea:	f7ff fdcb 	bl	407f84 <__lo0bits>
  4083ee:	2800      	cmp	r0, #0
  4083f0:	d132      	bne.n	408458 <__d2b+0x98>
  4083f2:	e89d 000c 	ldmia.w	sp, {r2, r3}
  4083f6:	617a      	str	r2, [r7, #20]
  4083f8:	2b00      	cmp	r3, #0
  4083fa:	61bb      	str	r3, [r7, #24]
  4083fc:	bf14      	ite	ne
  4083fe:	2402      	movne	r4, #2
  408400:	2401      	moveq	r4, #1
  408402:	613c      	str	r4, [r7, #16]
  408404:	b9dd      	cbnz	r5, 40843e <__d2b+0x7e>
  408406:	eb07 0384 	add.w	r3, r7, r4, lsl #2
  40840a:	9a08      	ldr	r2, [sp, #32]
  40840c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
  408410:	6010      	str	r0, [r2, #0]
  408412:	6918      	ldr	r0, [r3, #16]
  408414:	f7ff fd94 	bl	407f40 <__hi0bits>
  408418:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40841a:	ebc0 1044 	rsb	r0, r0, r4, lsl #5
  40841e:	6018      	str	r0, [r3, #0]
  408420:	4638      	mov	r0, r7
  408422:	b002      	add	sp, #8
  408424:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  408428:	a801      	add	r0, sp, #4
  40842a:	f7ff fdab 	bl	407f84 <__lo0bits>
  40842e:	2301      	movs	r3, #1
  408430:	9a01      	ldr	r2, [sp, #4]
  408432:	3020      	adds	r0, #32
  408434:	461c      	mov	r4, r3
  408436:	613b      	str	r3, [r7, #16]
  408438:	617a      	str	r2, [r7, #20]
  40843a:	2d00      	cmp	r5, #0
  40843c:	d0e3      	beq.n	408406 <__d2b+0x46>
  40843e:	f2a5 4833 	subw	r8, r5, #1075	; 0x433
  408442:	f1c0 0335 	rsb	r3, r0, #53	; 0x35
  408446:	9a08      	ldr	r2, [sp, #32]
  408448:	4440      	add	r0, r8
  40844a:	6010      	str	r0, [r2, #0]
  40844c:	4638      	mov	r0, r7
  40844e:	9a09      	ldr	r2, [sp, #36]	; 0x24
  408450:	6013      	str	r3, [r2, #0]
  408452:	b002      	add	sp, #8
  408454:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  408458:	9b01      	ldr	r3, [sp, #4]
  40845a:	f1c0 0120 	rsb	r1, r0, #32
  40845e:	9a00      	ldr	r2, [sp, #0]
  408460:	fa03 f101 	lsl.w	r1, r3, r1
  408464:	40c3      	lsrs	r3, r0
  408466:	430a      	orrs	r2, r1
  408468:	9301      	str	r3, [sp, #4]
  40846a:	617a      	str	r2, [r7, #20]
  40846c:	e7c4      	b.n	4083f8 <__d2b+0x38>
  40846e:	bf00      	nop

00408470 <_realloc_r>:
  408470:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  408474:	4617      	mov	r7, r2
  408476:	b083      	sub	sp, #12
  408478:	460e      	mov	r6, r1
  40847a:	2900      	cmp	r1, #0
  40847c:	f000 80e2 	beq.w	408644 <_realloc_r+0x1d4>
  408480:	f107 040b 	add.w	r4, r7, #11
  408484:	4681      	mov	r9, r0
  408486:	f7ff fce3 	bl	407e50 <__malloc_lock>
  40848a:	f856 3c04 	ldr.w	r3, [r6, #-4]
  40848e:	2c16      	cmp	r4, #22
  408490:	f1a6 0808 	sub.w	r8, r6, #8
  408494:	f023 0503 	bic.w	r5, r3, #3
  408498:	d850      	bhi.n	40853c <_realloc_r+0xcc>
  40849a:	2210      	movs	r2, #16
  40849c:	2100      	movs	r1, #0
  40849e:	4614      	mov	r4, r2
  4084a0:	42bc      	cmp	r4, r7
  4084a2:	f0c0 80dc 	bcc.w	40865e <_realloc_r+0x1ee>
  4084a6:	2900      	cmp	r1, #0
  4084a8:	f040 80d9 	bne.w	40865e <_realloc_r+0x1ee>
  4084ac:	4295      	cmp	r5, r2
  4084ae:	da4a      	bge.n	408546 <_realloc_r+0xd6>
  4084b0:	f8df b3a8 	ldr.w	fp, [pc, #936]	; 40885c <_realloc_r+0x3ec>
  4084b4:	eb08 0105 	add.w	r1, r8, r5
  4084b8:	f8db 0008 	ldr.w	r0, [fp, #8]
  4084bc:	4288      	cmp	r0, r1
  4084be:	f000 80d3 	beq.w	408668 <_realloc_r+0x1f8>
  4084c2:	6848      	ldr	r0, [r1, #4]
  4084c4:	f020 0e01 	bic.w	lr, r0, #1
  4084c8:	448e      	add	lr, r1
  4084ca:	f8de e004 	ldr.w	lr, [lr, #4]
  4084ce:	f01e 0f01 	tst.w	lr, #1
  4084d2:	d14e      	bne.n	408572 <_realloc_r+0x102>
  4084d4:	f020 0003 	bic.w	r0, r0, #3
  4084d8:	4428      	add	r0, r5
  4084da:	4290      	cmp	r0, r2
  4084dc:	f280 80b8 	bge.w	408650 <_realloc_r+0x1e0>
  4084e0:	07db      	lsls	r3, r3, #31
  4084e2:	f100 808b 	bmi.w	4085fc <_realloc_r+0x18c>
  4084e6:	f856 3c08 	ldr.w	r3, [r6, #-8]
  4084ea:	ebc3 0a08 	rsb	sl, r3, r8
  4084ee:	f8da 3004 	ldr.w	r3, [sl, #4]
  4084f2:	f023 0303 	bic.w	r3, r3, #3
  4084f6:	eb00 0e03 	add.w	lr, r0, r3
  4084fa:	4596      	cmp	lr, r2
  4084fc:	db43      	blt.n	408586 <_realloc_r+0x116>
  4084fe:	68cb      	ldr	r3, [r1, #12]
  408500:	4657      	mov	r7, sl
  408502:	6889      	ldr	r1, [r1, #8]
  408504:	1f2a      	subs	r2, r5, #4
  408506:	60cb      	str	r3, [r1, #12]
  408508:	2a24      	cmp	r2, #36	; 0x24
  40850a:	6099      	str	r1, [r3, #8]
  40850c:	f857 1f08 	ldr.w	r1, [r7, #8]!
  408510:	f8da 300c 	ldr.w	r3, [sl, #12]
  408514:	60cb      	str	r3, [r1, #12]
  408516:	6099      	str	r1, [r3, #8]
  408518:	f200 813c 	bhi.w	408794 <_realloc_r+0x324>
  40851c:	2a13      	cmp	r2, #19
  40851e:	f240 80fa 	bls.w	408716 <_realloc_r+0x2a6>
  408522:	6833      	ldr	r3, [r6, #0]
  408524:	2a1b      	cmp	r2, #27
  408526:	f8ca 3008 	str.w	r3, [sl, #8]
  40852a:	6873      	ldr	r3, [r6, #4]
  40852c:	f8ca 300c 	str.w	r3, [sl, #12]
  408530:	f200 813b 	bhi.w	4087aa <_realloc_r+0x33a>
  408534:	3608      	adds	r6, #8
  408536:	f10a 0310 	add.w	r3, sl, #16
  40853a:	e0ed      	b.n	408718 <_realloc_r+0x2a8>
  40853c:	f024 0407 	bic.w	r4, r4, #7
  408540:	4622      	mov	r2, r4
  408542:	0fe1      	lsrs	r1, r4, #31
  408544:	e7ac      	b.n	4084a0 <_realloc_r+0x30>
  408546:	4637      	mov	r7, r6
  408548:	1b2a      	subs	r2, r5, r4
  40854a:	f003 0301 	and.w	r3, r3, #1
  40854e:	2a0f      	cmp	r2, #15
  408550:	d841      	bhi.n	4085d6 <_realloc_r+0x166>
  408552:	eb08 0205 	add.w	r2, r8, r5
  408556:	431d      	orrs	r5, r3
  408558:	f8c8 5004 	str.w	r5, [r8, #4]
  40855c:	6853      	ldr	r3, [r2, #4]
  40855e:	f043 0301 	orr.w	r3, r3, #1
  408562:	6053      	str	r3, [r2, #4]
  408564:	4648      	mov	r0, r9
  408566:	f7ff fc75 	bl	407e54 <__malloc_unlock>
  40856a:	4638      	mov	r0, r7
  40856c:	b003      	add	sp, #12
  40856e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408572:	07d9      	lsls	r1, r3, #31
  408574:	d442      	bmi.n	4085fc <_realloc_r+0x18c>
  408576:	f856 3c08 	ldr.w	r3, [r6, #-8]
  40857a:	ebc3 0a08 	rsb	sl, r3, r8
  40857e:	f8da 3004 	ldr.w	r3, [sl, #4]
  408582:	f023 0303 	bic.w	r3, r3, #3
  408586:	442b      	add	r3, r5
  408588:	4293      	cmp	r3, r2
  40858a:	db37      	blt.n	4085fc <_realloc_r+0x18c>
  40858c:	4657      	mov	r7, sl
  40858e:	1f2a      	subs	r2, r5, #4
  408590:	f8da 100c 	ldr.w	r1, [sl, #12]
  408594:	f857 0f08 	ldr.w	r0, [r7, #8]!
  408598:	2a24      	cmp	r2, #36	; 0x24
  40859a:	60c1      	str	r1, [r0, #12]
  40859c:	6088      	str	r0, [r1, #8]
  40859e:	f200 80c6 	bhi.w	40872e <_realloc_r+0x2be>
  4085a2:	2a13      	cmp	r2, #19
  4085a4:	f240 80ff 	bls.w	4087a6 <_realloc_r+0x336>
  4085a8:	6831      	ldr	r1, [r6, #0]
  4085aa:	2a1b      	cmp	r2, #27
  4085ac:	f8ca 1008 	str.w	r1, [sl, #8]
  4085b0:	6871      	ldr	r1, [r6, #4]
  4085b2:	f8ca 100c 	str.w	r1, [sl, #12]
  4085b6:	f200 810d 	bhi.w	4087d4 <_realloc_r+0x364>
  4085ba:	3608      	adds	r6, #8
  4085bc:	f10a 0210 	add.w	r2, sl, #16
  4085c0:	6831      	ldr	r1, [r6, #0]
  4085c2:	461d      	mov	r5, r3
  4085c4:	46d0      	mov	r8, sl
  4085c6:	6011      	str	r1, [r2, #0]
  4085c8:	6873      	ldr	r3, [r6, #4]
  4085ca:	6053      	str	r3, [r2, #4]
  4085cc:	68b3      	ldr	r3, [r6, #8]
  4085ce:	6093      	str	r3, [r2, #8]
  4085d0:	f8da 3004 	ldr.w	r3, [sl, #4]
  4085d4:	e7b8      	b.n	408548 <_realloc_r+0xd8>
  4085d6:	eb08 0504 	add.w	r5, r8, r4
  4085da:	f042 0601 	orr.w	r6, r2, #1
  4085de:	431c      	orrs	r4, r3
  4085e0:	4648      	mov	r0, r9
  4085e2:	442a      	add	r2, r5
  4085e4:	f105 0108 	add.w	r1, r5, #8
  4085e8:	f8c8 4004 	str.w	r4, [r8, #4]
  4085ec:	606e      	str	r6, [r5, #4]
  4085ee:	6853      	ldr	r3, [r2, #4]
  4085f0:	f043 0301 	orr.w	r3, r3, #1
  4085f4:	6053      	str	r3, [r2, #4]
  4085f6:	f7fe fd2b 	bl	407050 <_free_r>
  4085fa:	e7b3      	b.n	408564 <_realloc_r+0xf4>
  4085fc:	4639      	mov	r1, r7
  4085fe:	4648      	mov	r0, r9
  408600:	f7ff f836 	bl	407670 <_malloc_r>
  408604:	4607      	mov	r7, r0
  408606:	2800      	cmp	r0, #0
  408608:	d0ac      	beq.n	408564 <_realloc_r+0xf4>
  40860a:	f856 3c04 	ldr.w	r3, [r6, #-4]
  40860e:	f1a0 0108 	sub.w	r1, r0, #8
  408612:	f023 0201 	bic.w	r2, r3, #1
  408616:	4442      	add	r2, r8
  408618:	4291      	cmp	r1, r2
  40861a:	f000 80b4 	beq.w	408786 <_realloc_r+0x316>
  40861e:	1f2a      	subs	r2, r5, #4
  408620:	2a24      	cmp	r2, #36	; 0x24
  408622:	f200 80a1 	bhi.w	408768 <_realloc_r+0x2f8>
  408626:	2a13      	cmp	r2, #19
  408628:	d86a      	bhi.n	408700 <_realloc_r+0x290>
  40862a:	4603      	mov	r3, r0
  40862c:	4632      	mov	r2, r6
  40862e:	6811      	ldr	r1, [r2, #0]
  408630:	6019      	str	r1, [r3, #0]
  408632:	6851      	ldr	r1, [r2, #4]
  408634:	6059      	str	r1, [r3, #4]
  408636:	6892      	ldr	r2, [r2, #8]
  408638:	609a      	str	r2, [r3, #8]
  40863a:	4631      	mov	r1, r6
  40863c:	4648      	mov	r0, r9
  40863e:	f7fe fd07 	bl	407050 <_free_r>
  408642:	e78f      	b.n	408564 <_realloc_r+0xf4>
  408644:	4611      	mov	r1, r2
  408646:	b003      	add	sp, #12
  408648:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40864c:	f7ff b810 	b.w	407670 <_malloc_r>
  408650:	68ca      	ldr	r2, [r1, #12]
  408652:	4637      	mov	r7, r6
  408654:	6889      	ldr	r1, [r1, #8]
  408656:	4605      	mov	r5, r0
  408658:	60ca      	str	r2, [r1, #12]
  40865a:	6091      	str	r1, [r2, #8]
  40865c:	e774      	b.n	408548 <_realloc_r+0xd8>
  40865e:	230c      	movs	r3, #12
  408660:	2000      	movs	r0, #0
  408662:	f8c9 3000 	str.w	r3, [r9]
  408666:	e781      	b.n	40856c <_realloc_r+0xfc>
  408668:	6841      	ldr	r1, [r0, #4]
  40866a:	f104 0010 	add.w	r0, r4, #16
  40866e:	f021 0103 	bic.w	r1, r1, #3
  408672:	4429      	add	r1, r5
  408674:	4281      	cmp	r1, r0
  408676:	da63      	bge.n	408740 <_realloc_r+0x2d0>
  408678:	07db      	lsls	r3, r3, #31
  40867a:	d4bf      	bmi.n	4085fc <_realloc_r+0x18c>
  40867c:	f856 3c08 	ldr.w	r3, [r6, #-8]
  408680:	ebc3 0a08 	rsb	sl, r3, r8
  408684:	f8da 3004 	ldr.w	r3, [sl, #4]
  408688:	f023 0303 	bic.w	r3, r3, #3
  40868c:	eb01 0c03 	add.w	ip, r1, r3
  408690:	4560      	cmp	r0, ip
  408692:	f73f af78 	bgt.w	408586 <_realloc_r+0x116>
  408696:	4657      	mov	r7, sl
  408698:	1f2a      	subs	r2, r5, #4
  40869a:	f8da 300c 	ldr.w	r3, [sl, #12]
  40869e:	f857 1f08 	ldr.w	r1, [r7, #8]!
  4086a2:	2a24      	cmp	r2, #36	; 0x24
  4086a4:	60cb      	str	r3, [r1, #12]
  4086a6:	6099      	str	r1, [r3, #8]
  4086a8:	f200 80b8 	bhi.w	40881c <_realloc_r+0x3ac>
  4086ac:	2a13      	cmp	r2, #19
  4086ae:	f240 80a8 	bls.w	408802 <_realloc_r+0x392>
  4086b2:	6833      	ldr	r3, [r6, #0]
  4086b4:	2a1b      	cmp	r2, #27
  4086b6:	f8ca 3008 	str.w	r3, [sl, #8]
  4086ba:	6873      	ldr	r3, [r6, #4]
  4086bc:	f8ca 300c 	str.w	r3, [sl, #12]
  4086c0:	f200 80b5 	bhi.w	40882e <_realloc_r+0x3be>
  4086c4:	3608      	adds	r6, #8
  4086c6:	f10a 0310 	add.w	r3, sl, #16
  4086ca:	6832      	ldr	r2, [r6, #0]
  4086cc:	601a      	str	r2, [r3, #0]
  4086ce:	6872      	ldr	r2, [r6, #4]
  4086d0:	605a      	str	r2, [r3, #4]
  4086d2:	68b2      	ldr	r2, [r6, #8]
  4086d4:	609a      	str	r2, [r3, #8]
  4086d6:	ebc4 030c 	rsb	r3, r4, ip
  4086da:	eb0a 0204 	add.w	r2, sl, r4
  4086de:	4648      	mov	r0, r9
  4086e0:	f043 0301 	orr.w	r3, r3, #1
  4086e4:	f8cb 2008 	str.w	r2, [fp, #8]
  4086e8:	6053      	str	r3, [r2, #4]
  4086ea:	f8da 3004 	ldr.w	r3, [sl, #4]
  4086ee:	f003 0301 	and.w	r3, r3, #1
  4086f2:	431c      	orrs	r4, r3
  4086f4:	f8ca 4004 	str.w	r4, [sl, #4]
  4086f8:	f7ff fbac 	bl	407e54 <__malloc_unlock>
  4086fc:	4638      	mov	r0, r7
  4086fe:	e735      	b.n	40856c <_realloc_r+0xfc>
  408700:	6833      	ldr	r3, [r6, #0]
  408702:	2a1b      	cmp	r2, #27
  408704:	6003      	str	r3, [r0, #0]
  408706:	6873      	ldr	r3, [r6, #4]
  408708:	6043      	str	r3, [r0, #4]
  40870a:	d831      	bhi.n	408770 <_realloc_r+0x300>
  40870c:	f100 0308 	add.w	r3, r0, #8
  408710:	f106 0208 	add.w	r2, r6, #8
  408714:	e78b      	b.n	40862e <_realloc_r+0x1be>
  408716:	463b      	mov	r3, r7
  408718:	6832      	ldr	r2, [r6, #0]
  40871a:	4675      	mov	r5, lr
  40871c:	46d0      	mov	r8, sl
  40871e:	601a      	str	r2, [r3, #0]
  408720:	6872      	ldr	r2, [r6, #4]
  408722:	605a      	str	r2, [r3, #4]
  408724:	68b2      	ldr	r2, [r6, #8]
  408726:	609a      	str	r2, [r3, #8]
  408728:	f8da 3004 	ldr.w	r3, [sl, #4]
  40872c:	e70c      	b.n	408548 <_realloc_r+0xd8>
  40872e:	4631      	mov	r1, r6
  408730:	4638      	mov	r0, r7
  408732:	461d      	mov	r5, r3
  408734:	46d0      	mov	r8, sl
  408736:	f7ff fb29 	bl	407d8c <memmove>
  40873a:	f8da 3004 	ldr.w	r3, [sl, #4]
  40873e:	e703      	b.n	408548 <_realloc_r+0xd8>
  408740:	1b0b      	subs	r3, r1, r4
  408742:	eb08 0204 	add.w	r2, r8, r4
  408746:	4648      	mov	r0, r9
  408748:	f043 0301 	orr.w	r3, r3, #1
  40874c:	f8cb 2008 	str.w	r2, [fp, #8]
  408750:	6053      	str	r3, [r2, #4]
  408752:	f856 3c04 	ldr.w	r3, [r6, #-4]
  408756:	f003 0301 	and.w	r3, r3, #1
  40875a:	431c      	orrs	r4, r3
  40875c:	f846 4c04 	str.w	r4, [r6, #-4]
  408760:	f7ff fb78 	bl	407e54 <__malloc_unlock>
  408764:	4630      	mov	r0, r6
  408766:	e701      	b.n	40856c <_realloc_r+0xfc>
  408768:	4631      	mov	r1, r6
  40876a:	f7ff fb0f 	bl	407d8c <memmove>
  40876e:	e764      	b.n	40863a <_realloc_r+0x1ca>
  408770:	68b3      	ldr	r3, [r6, #8]
  408772:	2a24      	cmp	r2, #36	; 0x24
  408774:	6083      	str	r3, [r0, #8]
  408776:	68f3      	ldr	r3, [r6, #12]
  408778:	60c3      	str	r3, [r0, #12]
  40877a:	d022      	beq.n	4087c2 <_realloc_r+0x352>
  40877c:	f100 0310 	add.w	r3, r0, #16
  408780:	f106 0210 	add.w	r2, r6, #16
  408784:	e753      	b.n	40862e <_realloc_r+0x1be>
  408786:	f850 2c04 	ldr.w	r2, [r0, #-4]
  40878a:	4637      	mov	r7, r6
  40878c:	f022 0203 	bic.w	r2, r2, #3
  408790:	4415      	add	r5, r2
  408792:	e6d9      	b.n	408548 <_realloc_r+0xd8>
  408794:	4631      	mov	r1, r6
  408796:	4638      	mov	r0, r7
  408798:	4675      	mov	r5, lr
  40879a:	46d0      	mov	r8, sl
  40879c:	f7ff faf6 	bl	407d8c <memmove>
  4087a0:	f8da 3004 	ldr.w	r3, [sl, #4]
  4087a4:	e6d0      	b.n	408548 <_realloc_r+0xd8>
  4087a6:	463a      	mov	r2, r7
  4087a8:	e70a      	b.n	4085c0 <_realloc_r+0x150>
  4087aa:	68b3      	ldr	r3, [r6, #8]
  4087ac:	2a24      	cmp	r2, #36	; 0x24
  4087ae:	f8ca 3010 	str.w	r3, [sl, #16]
  4087b2:	68f3      	ldr	r3, [r6, #12]
  4087b4:	f8ca 3014 	str.w	r3, [sl, #20]
  4087b8:	d018      	beq.n	4087ec <_realloc_r+0x37c>
  4087ba:	3610      	adds	r6, #16
  4087bc:	f10a 0318 	add.w	r3, sl, #24
  4087c0:	e7aa      	b.n	408718 <_realloc_r+0x2a8>
  4087c2:	6931      	ldr	r1, [r6, #16]
  4087c4:	f100 0318 	add.w	r3, r0, #24
  4087c8:	f106 0218 	add.w	r2, r6, #24
  4087cc:	6101      	str	r1, [r0, #16]
  4087ce:	6971      	ldr	r1, [r6, #20]
  4087d0:	6141      	str	r1, [r0, #20]
  4087d2:	e72c      	b.n	40862e <_realloc_r+0x1be>
  4087d4:	68b1      	ldr	r1, [r6, #8]
  4087d6:	2a24      	cmp	r2, #36	; 0x24
  4087d8:	f8ca 1010 	str.w	r1, [sl, #16]
  4087dc:	68f1      	ldr	r1, [r6, #12]
  4087de:	f8ca 1014 	str.w	r1, [sl, #20]
  4087e2:	d010      	beq.n	408806 <_realloc_r+0x396>
  4087e4:	3610      	adds	r6, #16
  4087e6:	f10a 0218 	add.w	r2, sl, #24
  4087ea:	e6e9      	b.n	4085c0 <_realloc_r+0x150>
  4087ec:	6932      	ldr	r2, [r6, #16]
  4087ee:	f10a 0320 	add.w	r3, sl, #32
  4087f2:	3618      	adds	r6, #24
  4087f4:	f8ca 2018 	str.w	r2, [sl, #24]
  4087f8:	f856 2c04 	ldr.w	r2, [r6, #-4]
  4087fc:	f8ca 201c 	str.w	r2, [sl, #28]
  408800:	e78a      	b.n	408718 <_realloc_r+0x2a8>
  408802:	463b      	mov	r3, r7
  408804:	e761      	b.n	4086ca <_realloc_r+0x25a>
  408806:	6931      	ldr	r1, [r6, #16]
  408808:	f10a 0220 	add.w	r2, sl, #32
  40880c:	3618      	adds	r6, #24
  40880e:	f8ca 1018 	str.w	r1, [sl, #24]
  408812:	f856 1c04 	ldr.w	r1, [r6, #-4]
  408816:	f8ca 101c 	str.w	r1, [sl, #28]
  40881a:	e6d1      	b.n	4085c0 <_realloc_r+0x150>
  40881c:	4631      	mov	r1, r6
  40881e:	4638      	mov	r0, r7
  408820:	f8cd c004 	str.w	ip, [sp, #4]
  408824:	f7ff fab2 	bl	407d8c <memmove>
  408828:	f8dd c004 	ldr.w	ip, [sp, #4]
  40882c:	e753      	b.n	4086d6 <_realloc_r+0x266>
  40882e:	68b3      	ldr	r3, [r6, #8]
  408830:	2a24      	cmp	r2, #36	; 0x24
  408832:	f8ca 3010 	str.w	r3, [sl, #16]
  408836:	68f3      	ldr	r3, [r6, #12]
  408838:	f8ca 3014 	str.w	r3, [sl, #20]
  40883c:	d003      	beq.n	408846 <_realloc_r+0x3d6>
  40883e:	3610      	adds	r6, #16
  408840:	f10a 0318 	add.w	r3, sl, #24
  408844:	e741      	b.n	4086ca <_realloc_r+0x25a>
  408846:	6932      	ldr	r2, [r6, #16]
  408848:	f10a 0320 	add.w	r3, sl, #32
  40884c:	3618      	adds	r6, #24
  40884e:	f8ca 2018 	str.w	r2, [sl, #24]
  408852:	f856 2c04 	ldr.w	r2, [r6, #-4]
  408856:	f8ca 201c 	str.w	r2, [sl, #28]
  40885a:	e736      	b.n	4086ca <_realloc_r+0x25a>
  40885c:	204004ec 	.word	0x204004ec

00408860 <__fpclassifyd>:
  408860:	fab0 f080 	clz	r0, r0
  408864:	f031 4100 	bics.w	r1, r1, #2147483648	; 0x80000000
  408868:	ea4f 1050 	mov.w	r0, r0, lsr #5
  40886c:	d102      	bne.n	408874 <__fpclassifyd+0x14>
  40886e:	b108      	cbz	r0, 408874 <__fpclassifyd+0x14>
  408870:	2002      	movs	r0, #2
  408872:	4770      	bx	lr
  408874:	f5a1 1280 	sub.w	r2, r1, #1048576	; 0x100000
  408878:	4b08      	ldr	r3, [pc, #32]	; (40889c <__fpclassifyd+0x3c>)
  40887a:	429a      	cmp	r2, r3
  40887c:	d801      	bhi.n	408882 <__fpclassifyd+0x22>
  40887e:	2004      	movs	r0, #4
  408880:	4770      	bx	lr
  408882:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  408886:	d201      	bcs.n	40888c <__fpclassifyd+0x2c>
  408888:	2003      	movs	r0, #3
  40888a:	4770      	bx	lr
  40888c:	4b04      	ldr	r3, [pc, #16]	; (4088a0 <__fpclassifyd+0x40>)
  40888e:	4299      	cmp	r1, r3
  408890:	bf14      	ite	ne
  408892:	2000      	movne	r0, #0
  408894:	f000 0001 	andeq.w	r0, r0, #1
  408898:	4770      	bx	lr
  40889a:	bf00      	nop
  40889c:	7fdfffff 	.word	0x7fdfffff
  4088a0:	7ff00000 	.word	0x7ff00000

004088a4 <_sbrk_r>:
  4088a4:	b538      	push	{r3, r4, r5, lr}
  4088a6:	2300      	movs	r3, #0
  4088a8:	4c06      	ldr	r4, [pc, #24]	; (4088c4 <_sbrk_r+0x20>)
  4088aa:	4605      	mov	r5, r0
  4088ac:	4608      	mov	r0, r1
  4088ae:	6023      	str	r3, [r4, #0]
  4088b0:	f7f9 fe74 	bl	40259c <_sbrk>
  4088b4:	1c43      	adds	r3, r0, #1
  4088b6:	d000      	beq.n	4088ba <_sbrk_r+0x16>
  4088b8:	bd38      	pop	{r3, r4, r5, pc}
  4088ba:	6823      	ldr	r3, [r4, #0]
  4088bc:	2b00      	cmp	r3, #0
  4088be:	d0fb      	beq.n	4088b8 <_sbrk_r+0x14>
  4088c0:	602b      	str	r3, [r5, #0]
  4088c2:	bd38      	pop	{r3, r4, r5, pc}
  4088c4:	204012d8 	.word	0x204012d8

004088c8 <__sread>:
  4088c8:	b510      	push	{r4, lr}
  4088ca:	460c      	mov	r4, r1
  4088cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4088d0:	f000 f9ec 	bl	408cac <_read_r>
  4088d4:	2800      	cmp	r0, #0
  4088d6:	db03      	blt.n	4088e0 <__sread+0x18>
  4088d8:	6d23      	ldr	r3, [r4, #80]	; 0x50
  4088da:	4403      	add	r3, r0
  4088dc:	6523      	str	r3, [r4, #80]	; 0x50
  4088de:	bd10      	pop	{r4, pc}
  4088e0:	89a3      	ldrh	r3, [r4, #12]
  4088e2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  4088e6:	81a3      	strh	r3, [r4, #12]
  4088e8:	bd10      	pop	{r4, pc}
  4088ea:	bf00      	nop

004088ec <__swrite>:
  4088ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4088f0:	461d      	mov	r5, r3
  4088f2:	898b      	ldrh	r3, [r1, #12]
  4088f4:	4616      	mov	r6, r2
  4088f6:	460c      	mov	r4, r1
  4088f8:	05da      	lsls	r2, r3, #23
  4088fa:	4607      	mov	r7, r0
  4088fc:	d506      	bpl.n	40890c <__swrite+0x20>
  4088fe:	2302      	movs	r3, #2
  408900:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  408904:	2200      	movs	r2, #0
  408906:	f000 f9bd 	bl	408c84 <_lseek_r>
  40890a:	89a3      	ldrh	r3, [r4, #12]
  40890c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  408910:	4638      	mov	r0, r7
  408912:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  408916:	4632      	mov	r2, r6
  408918:	81a3      	strh	r3, [r4, #12]
  40891a:	462b      	mov	r3, r5
  40891c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  408920:	f000 b89e 	b.w	408a60 <_write_r>

00408924 <__sseek>:
  408924:	b510      	push	{r4, lr}
  408926:	460c      	mov	r4, r1
  408928:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40892c:	f000 f9aa 	bl	408c84 <_lseek_r>
  408930:	1c42      	adds	r2, r0, #1
  408932:	89a3      	ldrh	r3, [r4, #12]
  408934:	d004      	beq.n	408940 <__sseek+0x1c>
  408936:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
  40893a:	6520      	str	r0, [r4, #80]	; 0x50
  40893c:	81a3      	strh	r3, [r4, #12]
  40893e:	bd10      	pop	{r4, pc}
  408940:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  408944:	81a3      	strh	r3, [r4, #12]
  408946:	bd10      	pop	{r4, pc}

00408948 <__sclose>:
  408948:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40894c:	f000 b920 	b.w	408b90 <_close_r>

00408950 <__ssprint_r>:
  408950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  408954:	6893      	ldr	r3, [r2, #8]
  408956:	b083      	sub	sp, #12
  408958:	4691      	mov	r9, r2
  40895a:	f8d2 8000 	ldr.w	r8, [r2]
  40895e:	9001      	str	r0, [sp, #4]
  408960:	2b00      	cmp	r3, #0
  408962:	d073      	beq.n	408a4c <__ssprint_r+0xfc>
  408964:	f04f 0b00 	mov.w	fp, #0
  408968:	460d      	mov	r5, r1
  40896a:	6808      	ldr	r0, [r1, #0]
  40896c:	688b      	ldr	r3, [r1, #8]
  40896e:	465c      	mov	r4, fp
  408970:	2c00      	cmp	r4, #0
  408972:	d046      	beq.n	408a02 <__ssprint_r+0xb2>
  408974:	429c      	cmp	r4, r3
  408976:	461e      	mov	r6, r3
  408978:	469a      	mov	sl, r3
  40897a:	d349      	bcc.n	408a10 <__ssprint_r+0xc0>
  40897c:	f8b5 e00c 	ldrh.w	lr, [r5, #12]
  408980:	f41e 6f90 	tst.w	lr, #1152	; 0x480
  408984:	d02d      	beq.n	4089e2 <__ssprint_r+0x92>
  408986:	696b      	ldr	r3, [r5, #20]
  408988:	1c62      	adds	r2, r4, #1
  40898a:	6929      	ldr	r1, [r5, #16]
  40898c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  408990:	1a46      	subs	r6, r0, r1
  408992:	4610      	mov	r0, r2
  408994:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
  408998:	4430      	add	r0, r6
  40899a:	105f      	asrs	r7, r3, #1
  40899c:	4287      	cmp	r7, r0
  40899e:	463a      	mov	r2, r7
  4089a0:	d201      	bcs.n	4089a6 <__ssprint_r+0x56>
  4089a2:	4607      	mov	r7, r0
  4089a4:	4602      	mov	r2, r0
  4089a6:	f41e 6f80 	tst.w	lr, #1024	; 0x400
  4089aa:	d034      	beq.n	408a16 <__ssprint_r+0xc6>
  4089ac:	4611      	mov	r1, r2
  4089ae:	9801      	ldr	r0, [sp, #4]
  4089b0:	f7fe fe5e 	bl	407670 <_malloc_r>
  4089b4:	4682      	mov	sl, r0
  4089b6:	2800      	cmp	r0, #0
  4089b8:	d04e      	beq.n	408a58 <__ssprint_r+0x108>
  4089ba:	4632      	mov	r2, r6
  4089bc:	6929      	ldr	r1, [r5, #16]
  4089be:	f7ff f94b 	bl	407c58 <memcpy>
  4089c2:	89aa      	ldrh	r2, [r5, #12]
  4089c4:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
  4089c8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  4089cc:	81aa      	strh	r2, [r5, #12]
  4089ce:	eb0a 0006 	add.w	r0, sl, r6
  4089d2:	1bba      	subs	r2, r7, r6
  4089d4:	f8c5 a010 	str.w	sl, [r5, #16]
  4089d8:	4626      	mov	r6, r4
  4089da:	46a2      	mov	sl, r4
  4089dc:	6028      	str	r0, [r5, #0]
  4089de:	60aa      	str	r2, [r5, #8]
  4089e0:	616f      	str	r7, [r5, #20]
  4089e2:	4652      	mov	r2, sl
  4089e4:	4659      	mov	r1, fp
  4089e6:	f7ff f9d1 	bl	407d8c <memmove>
  4089ea:	f8d9 2008 	ldr.w	r2, [r9, #8]
  4089ee:	68ab      	ldr	r3, [r5, #8]
  4089f0:	6828      	ldr	r0, [r5, #0]
  4089f2:	1b14      	subs	r4, r2, r4
  4089f4:	1b9b      	subs	r3, r3, r6
  4089f6:	4450      	add	r0, sl
  4089f8:	60ab      	str	r3, [r5, #8]
  4089fa:	6028      	str	r0, [r5, #0]
  4089fc:	f8c9 4008 	str.w	r4, [r9, #8]
  408a00:	b324      	cbz	r4, 408a4c <__ssprint_r+0xfc>
  408a02:	f8d8 b000 	ldr.w	fp, [r8]
  408a06:	f108 0808 	add.w	r8, r8, #8
  408a0a:	f858 4c04 	ldr.w	r4, [r8, #-4]
  408a0e:	e7af      	b.n	408970 <__ssprint_r+0x20>
  408a10:	4626      	mov	r6, r4
  408a12:	46a2      	mov	sl, r4
  408a14:	e7e5      	b.n	4089e2 <__ssprint_r+0x92>
  408a16:	9801      	ldr	r0, [sp, #4]
  408a18:	f7ff fd2a 	bl	408470 <_realloc_r>
  408a1c:	4682      	mov	sl, r0
  408a1e:	2800      	cmp	r0, #0
  408a20:	d1d5      	bne.n	4089ce <__ssprint_r+0x7e>
  408a22:	9c01      	ldr	r4, [sp, #4]
  408a24:	6929      	ldr	r1, [r5, #16]
  408a26:	4620      	mov	r0, r4
  408a28:	f7fe fb12 	bl	407050 <_free_r>
  408a2c:	230c      	movs	r3, #12
  408a2e:	6023      	str	r3, [r4, #0]
  408a30:	89ab      	ldrh	r3, [r5, #12]
  408a32:	2200      	movs	r2, #0
  408a34:	f04f 30ff 	mov.w	r0, #4294967295
  408a38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  408a3c:	81ab      	strh	r3, [r5, #12]
  408a3e:	f8c9 2008 	str.w	r2, [r9, #8]
  408a42:	f8c9 2004 	str.w	r2, [r9, #4]
  408a46:	b003      	add	sp, #12
  408a48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408a4c:	2000      	movs	r0, #0
  408a4e:	f8c9 0004 	str.w	r0, [r9, #4]
  408a52:	b003      	add	sp, #12
  408a54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408a58:	230c      	movs	r3, #12
  408a5a:	9a01      	ldr	r2, [sp, #4]
  408a5c:	6013      	str	r3, [r2, #0]
  408a5e:	e7e7      	b.n	408a30 <__ssprint_r+0xe0>

00408a60 <_write_r>:
  408a60:	b570      	push	{r4, r5, r6, lr}
  408a62:	4c08      	ldr	r4, [pc, #32]	; (408a84 <_write_r+0x24>)
  408a64:	2500      	movs	r5, #0
  408a66:	4606      	mov	r6, r0
  408a68:	4608      	mov	r0, r1
  408a6a:	4611      	mov	r1, r2
  408a6c:	461a      	mov	r2, r3
  408a6e:	6025      	str	r5, [r4, #0]
  408a70:	f7f7 fd78 	bl	400564 <_write>
  408a74:	1c43      	adds	r3, r0, #1
  408a76:	d000      	beq.n	408a7a <_write_r+0x1a>
  408a78:	bd70      	pop	{r4, r5, r6, pc}
  408a7a:	6823      	ldr	r3, [r4, #0]
  408a7c:	2b00      	cmp	r3, #0
  408a7e:	d0fb      	beq.n	408a78 <_write_r+0x18>
  408a80:	6033      	str	r3, [r6, #0]
  408a82:	bd70      	pop	{r4, r5, r6, pc}
  408a84:	204012d8 	.word	0x204012d8

00408a88 <__register_exitproc>:
  408a88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  408a8c:	4c26      	ldr	r4, [pc, #152]	; (408b28 <__register_exitproc+0xa0>)
  408a8e:	4606      	mov	r6, r0
  408a90:	4688      	mov	r8, r1
  408a92:	4691      	mov	r9, r2
  408a94:	6825      	ldr	r5, [r4, #0]
  408a96:	469a      	mov	sl, r3
  408a98:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
  408a9c:	2c00      	cmp	r4, #0
  408a9e:	d03a      	beq.n	408b16 <__register_exitproc+0x8e>
  408aa0:	6860      	ldr	r0, [r4, #4]
  408aa2:	281f      	cmp	r0, #31
  408aa4:	dc19      	bgt.n	408ada <__register_exitproc+0x52>
  408aa6:	1c41      	adds	r1, r0, #1
  408aa8:	b186      	cbz	r6, 408acc <__register_exitproc+0x44>
  408aaa:	eb04 0580 	add.w	r5, r4, r0, lsl #2
  408aae:	2201      	movs	r2, #1
  408ab0:	2e02      	cmp	r6, #2
  408ab2:	f8c5 9088 	str.w	r9, [r5, #136]	; 0x88
  408ab6:	fa02 f200 	lsl.w	r2, r2, r0
  408aba:	f8d4 3188 	ldr.w	r3, [r4, #392]	; 0x188
  408abe:	ea43 0302 	orr.w	r3, r3, r2
  408ac2:	f8c4 3188 	str.w	r3, [r4, #392]	; 0x188
  408ac6:	f8c5 a108 	str.w	sl, [r5, #264]	; 0x108
  408aca:	d01e      	beq.n	408b0a <__register_exitproc+0x82>
  408acc:	1c83      	adds	r3, r0, #2
  408ace:	6061      	str	r1, [r4, #4]
  408ad0:	2000      	movs	r0, #0
  408ad2:	f844 8023 	str.w	r8, [r4, r3, lsl #2]
  408ad6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  408ada:	4b14      	ldr	r3, [pc, #80]	; (408b2c <__register_exitproc+0xa4>)
  408adc:	b303      	cbz	r3, 408b20 <__register_exitproc+0x98>
  408ade:	f44f 70c8 	mov.w	r0, #400	; 0x190
  408ae2:	f7fe fdbd 	bl	407660 <malloc>
  408ae6:	4604      	mov	r4, r0
  408ae8:	b1d0      	cbz	r0, 408b20 <__register_exitproc+0x98>
  408aea:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
  408aee:	2700      	movs	r7, #0
  408af0:	2101      	movs	r1, #1
  408af2:	6003      	str	r3, [r0, #0]
  408af4:	4638      	mov	r0, r7
  408af6:	6067      	str	r7, [r4, #4]
  408af8:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  408afc:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
  408b00:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
  408b04:	2e00      	cmp	r6, #0
  408b06:	d0e1      	beq.n	408acc <__register_exitproc+0x44>
  408b08:	e7cf      	b.n	408aaa <__register_exitproc+0x22>
  408b0a:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
  408b0e:	431a      	orrs	r2, r3
  408b10:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
  408b14:	e7da      	b.n	408acc <__register_exitproc+0x44>
  408b16:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
  408b1a:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  408b1e:	e7bf      	b.n	408aa0 <__register_exitproc+0x18>
  408b20:	f04f 30ff 	mov.w	r0, #4294967295
  408b24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  408b28:	00409cb8 	.word	0x00409cb8
  408b2c:	00407661 	.word	0x00407661

00408b30 <_calloc_r>:
  408b30:	b510      	push	{r4, lr}
  408b32:	fb02 f101 	mul.w	r1, r2, r1
  408b36:	f7fe fd9b 	bl	407670 <_malloc_r>
  408b3a:	4604      	mov	r4, r0
  408b3c:	b168      	cbz	r0, 408b5a <_calloc_r+0x2a>
  408b3e:	f850 2c04 	ldr.w	r2, [r0, #-4]
  408b42:	f022 0203 	bic.w	r2, r2, #3
  408b46:	3a04      	subs	r2, #4
  408b48:	2a24      	cmp	r2, #36	; 0x24
  408b4a:	d814      	bhi.n	408b76 <_calloc_r+0x46>
  408b4c:	2a13      	cmp	r2, #19
  408b4e:	d806      	bhi.n	408b5e <_calloc_r+0x2e>
  408b50:	4603      	mov	r3, r0
  408b52:	2200      	movs	r2, #0
  408b54:	601a      	str	r2, [r3, #0]
  408b56:	605a      	str	r2, [r3, #4]
  408b58:	609a      	str	r2, [r3, #8]
  408b5a:	4620      	mov	r0, r4
  408b5c:	bd10      	pop	{r4, pc}
  408b5e:	2100      	movs	r1, #0
  408b60:	2a1b      	cmp	r2, #27
  408b62:	6001      	str	r1, [r0, #0]
  408b64:	6041      	str	r1, [r0, #4]
  408b66:	d90b      	bls.n	408b80 <_calloc_r+0x50>
  408b68:	2a24      	cmp	r2, #36	; 0x24
  408b6a:	6081      	str	r1, [r0, #8]
  408b6c:	60c1      	str	r1, [r0, #12]
  408b6e:	d00a      	beq.n	408b86 <_calloc_r+0x56>
  408b70:	f100 0310 	add.w	r3, r0, #16
  408b74:	e7ed      	b.n	408b52 <_calloc_r+0x22>
  408b76:	2100      	movs	r1, #0
  408b78:	f7fb fbfa 	bl	404370 <memset>
  408b7c:	4620      	mov	r0, r4
  408b7e:	bd10      	pop	{r4, pc}
  408b80:	f100 0308 	add.w	r3, r0, #8
  408b84:	e7e5      	b.n	408b52 <_calloc_r+0x22>
  408b86:	6101      	str	r1, [r0, #16]
  408b88:	f100 0318 	add.w	r3, r0, #24
  408b8c:	6141      	str	r1, [r0, #20]
  408b8e:	e7e0      	b.n	408b52 <_calloc_r+0x22>

00408b90 <_close_r>:
  408b90:	b538      	push	{r3, r4, r5, lr}
  408b92:	2300      	movs	r3, #0
  408b94:	4c06      	ldr	r4, [pc, #24]	; (408bb0 <_close_r+0x20>)
  408b96:	4605      	mov	r5, r0
  408b98:	4608      	mov	r0, r1
  408b9a:	6023      	str	r3, [r4, #0]
  408b9c:	f7f9 fd2a 	bl	4025f4 <_close>
  408ba0:	1c43      	adds	r3, r0, #1
  408ba2:	d000      	beq.n	408ba6 <_close_r+0x16>
  408ba4:	bd38      	pop	{r3, r4, r5, pc}
  408ba6:	6823      	ldr	r3, [r4, #0]
  408ba8:	2b00      	cmp	r3, #0
  408baa:	d0fb      	beq.n	408ba4 <_close_r+0x14>
  408bac:	602b      	str	r3, [r5, #0]
  408bae:	bd38      	pop	{r3, r4, r5, pc}
  408bb0:	204012d8 	.word	0x204012d8

00408bb4 <_fclose_r>:
  408bb4:	2900      	cmp	r1, #0
  408bb6:	d03d      	beq.n	408c34 <_fclose_r+0x80>
  408bb8:	b570      	push	{r4, r5, r6, lr}
  408bba:	4605      	mov	r5, r0
  408bbc:	460c      	mov	r4, r1
  408bbe:	b108      	cbz	r0, 408bc4 <_fclose_r+0x10>
  408bc0:	6b83      	ldr	r3, [r0, #56]	; 0x38
  408bc2:	b37b      	cbz	r3, 408c24 <_fclose_r+0x70>
  408bc4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  408bc8:	b90b      	cbnz	r3, 408bce <_fclose_r+0x1a>
  408bca:	2000      	movs	r0, #0
  408bcc:	bd70      	pop	{r4, r5, r6, pc}
  408bce:	4628      	mov	r0, r5
  408bd0:	4621      	mov	r1, r4
  408bd2:	f7fe f891 	bl	406cf8 <__sflush_r>
  408bd6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  408bd8:	4606      	mov	r6, r0
  408bda:	b133      	cbz	r3, 408bea <_fclose_r+0x36>
  408bdc:	4628      	mov	r0, r5
  408bde:	69e1      	ldr	r1, [r4, #28]
  408be0:	4798      	blx	r3
  408be2:	2800      	cmp	r0, #0
  408be4:	bfb8      	it	lt
  408be6:	f04f 36ff 	movlt.w	r6, #4294967295
  408bea:	89a3      	ldrh	r3, [r4, #12]
  408bec:	061b      	lsls	r3, r3, #24
  408bee:	d41c      	bmi.n	408c2a <_fclose_r+0x76>
  408bf0:	6b21      	ldr	r1, [r4, #48]	; 0x30
  408bf2:	b141      	cbz	r1, 408c06 <_fclose_r+0x52>
  408bf4:	f104 0340 	add.w	r3, r4, #64	; 0x40
  408bf8:	4299      	cmp	r1, r3
  408bfa:	d002      	beq.n	408c02 <_fclose_r+0x4e>
  408bfc:	4628      	mov	r0, r5
  408bfe:	f7fe fa27 	bl	407050 <_free_r>
  408c02:	2300      	movs	r3, #0
  408c04:	6323      	str	r3, [r4, #48]	; 0x30
  408c06:	6c61      	ldr	r1, [r4, #68]	; 0x44
  408c08:	b121      	cbz	r1, 408c14 <_fclose_r+0x60>
  408c0a:	4628      	mov	r0, r5
  408c0c:	f7fe fa20 	bl	407050 <_free_r>
  408c10:	2300      	movs	r3, #0
  408c12:	6463      	str	r3, [r4, #68]	; 0x44
  408c14:	f7fe f9b4 	bl	406f80 <__sfp_lock_acquire>
  408c18:	2300      	movs	r3, #0
  408c1a:	81a3      	strh	r3, [r4, #12]
  408c1c:	f7fe f9b2 	bl	406f84 <__sfp_lock_release>
  408c20:	4630      	mov	r0, r6
  408c22:	bd70      	pop	{r4, r5, r6, pc}
  408c24:	f7fe f9a6 	bl	406f74 <__sinit>
  408c28:	e7cc      	b.n	408bc4 <_fclose_r+0x10>
  408c2a:	4628      	mov	r0, r5
  408c2c:	6921      	ldr	r1, [r4, #16]
  408c2e:	f7fe fa0f 	bl	407050 <_free_r>
  408c32:	e7dd      	b.n	408bf0 <_fclose_r+0x3c>
  408c34:	2000      	movs	r0, #0
  408c36:	4770      	bx	lr

00408c38 <_fstat_r>:
  408c38:	b538      	push	{r3, r4, r5, lr}
  408c3a:	2300      	movs	r3, #0
  408c3c:	4c07      	ldr	r4, [pc, #28]	; (408c5c <_fstat_r+0x24>)
  408c3e:	4605      	mov	r5, r0
  408c40:	4608      	mov	r0, r1
  408c42:	4611      	mov	r1, r2
  408c44:	6023      	str	r3, [r4, #0]
  408c46:	f7f9 fce1 	bl	40260c <_fstat>
  408c4a:	1c43      	adds	r3, r0, #1
  408c4c:	d000      	beq.n	408c50 <_fstat_r+0x18>
  408c4e:	bd38      	pop	{r3, r4, r5, pc}
  408c50:	6823      	ldr	r3, [r4, #0]
  408c52:	2b00      	cmp	r3, #0
  408c54:	d0fb      	beq.n	408c4e <_fstat_r+0x16>
  408c56:	602b      	str	r3, [r5, #0]
  408c58:	bd38      	pop	{r3, r4, r5, pc}
  408c5a:	bf00      	nop
  408c5c:	204012d8 	.word	0x204012d8

00408c60 <_isatty_r>:
  408c60:	b538      	push	{r3, r4, r5, lr}
  408c62:	2300      	movs	r3, #0
  408c64:	4c06      	ldr	r4, [pc, #24]	; (408c80 <_isatty_r+0x20>)
  408c66:	4605      	mov	r5, r0
  408c68:	4608      	mov	r0, r1
  408c6a:	6023      	str	r3, [r4, #0]
  408c6c:	f7f9 fcde 	bl	40262c <_isatty>
  408c70:	1c43      	adds	r3, r0, #1
  408c72:	d000      	beq.n	408c76 <_isatty_r+0x16>
  408c74:	bd38      	pop	{r3, r4, r5, pc}
  408c76:	6823      	ldr	r3, [r4, #0]
  408c78:	2b00      	cmp	r3, #0
  408c7a:	d0fb      	beq.n	408c74 <_isatty_r+0x14>
  408c7c:	602b      	str	r3, [r5, #0]
  408c7e:	bd38      	pop	{r3, r4, r5, pc}
  408c80:	204012d8 	.word	0x204012d8

00408c84 <_lseek_r>:
  408c84:	b570      	push	{r4, r5, r6, lr}
  408c86:	4c08      	ldr	r4, [pc, #32]	; (408ca8 <_lseek_r+0x24>)
  408c88:	2500      	movs	r5, #0
  408c8a:	4606      	mov	r6, r0
  408c8c:	4608      	mov	r0, r1
  408c8e:	4611      	mov	r1, r2
  408c90:	461a      	mov	r2, r3
  408c92:	6025      	str	r5, [r4, #0]
  408c94:	f7f9 fcd6 	bl	402644 <_lseek>
  408c98:	1c43      	adds	r3, r0, #1
  408c9a:	d000      	beq.n	408c9e <_lseek_r+0x1a>
  408c9c:	bd70      	pop	{r4, r5, r6, pc}
  408c9e:	6823      	ldr	r3, [r4, #0]
  408ca0:	2b00      	cmp	r3, #0
  408ca2:	d0fb      	beq.n	408c9c <_lseek_r+0x18>
  408ca4:	6033      	str	r3, [r6, #0]
  408ca6:	bd70      	pop	{r4, r5, r6, pc}
  408ca8:	204012d8 	.word	0x204012d8

00408cac <_read_r>:
  408cac:	b570      	push	{r4, r5, r6, lr}
  408cae:	4c08      	ldr	r4, [pc, #32]	; (408cd0 <_read_r+0x24>)
  408cb0:	2500      	movs	r5, #0
  408cb2:	4606      	mov	r6, r0
  408cb4:	4608      	mov	r0, r1
  408cb6:	4611      	mov	r1, r2
  408cb8:	461a      	mov	r2, r3
  408cba:	6025      	str	r5, [r4, #0]
  408cbc:	f7f7 fc26 	bl	40050c <_read>
  408cc0:	1c43      	adds	r3, r0, #1
  408cc2:	d000      	beq.n	408cc6 <_read_r+0x1a>
  408cc4:	bd70      	pop	{r4, r5, r6, pc}
  408cc6:	6823      	ldr	r3, [r4, #0]
  408cc8:	2b00      	cmp	r3, #0
  408cca:	d0fb      	beq.n	408cc4 <_read_r+0x18>
  408ccc:	6033      	str	r3, [r6, #0]
  408cce:	bd70      	pop	{r4, r5, r6, pc}
  408cd0:	204012d8 	.word	0x204012d8

00408cd4 <__aeabi_drsub>:
  408cd4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  408cd8:	e002      	b.n	408ce0 <__adddf3>
  408cda:	bf00      	nop

00408cdc <__aeabi_dsub>:
  408cdc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00408ce0 <__adddf3>:
  408ce0:	b530      	push	{r4, r5, lr}
  408ce2:	ea4f 0441 	mov.w	r4, r1, lsl #1
  408ce6:	ea4f 0543 	mov.w	r5, r3, lsl #1
  408cea:	ea94 0f05 	teq	r4, r5
  408cee:	bf08      	it	eq
  408cf0:	ea90 0f02 	teqeq	r0, r2
  408cf4:	bf1f      	itttt	ne
  408cf6:	ea54 0c00 	orrsne.w	ip, r4, r0
  408cfa:	ea55 0c02 	orrsne.w	ip, r5, r2
  408cfe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  408d02:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  408d06:	f000 80e2 	beq.w	408ece <__adddf3+0x1ee>
  408d0a:	ea4f 5454 	mov.w	r4, r4, lsr #21
  408d0e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  408d12:	bfb8      	it	lt
  408d14:	426d      	neglt	r5, r5
  408d16:	dd0c      	ble.n	408d32 <__adddf3+0x52>
  408d18:	442c      	add	r4, r5
  408d1a:	ea80 0202 	eor.w	r2, r0, r2
  408d1e:	ea81 0303 	eor.w	r3, r1, r3
  408d22:	ea82 0000 	eor.w	r0, r2, r0
  408d26:	ea83 0101 	eor.w	r1, r3, r1
  408d2a:	ea80 0202 	eor.w	r2, r0, r2
  408d2e:	ea81 0303 	eor.w	r3, r1, r3
  408d32:	2d36      	cmp	r5, #54	; 0x36
  408d34:	bf88      	it	hi
  408d36:	bd30      	pophi	{r4, r5, pc}
  408d38:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  408d3c:	ea4f 3101 	mov.w	r1, r1, lsl #12
  408d40:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  408d44:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  408d48:	d002      	beq.n	408d50 <__adddf3+0x70>
  408d4a:	4240      	negs	r0, r0
  408d4c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  408d50:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  408d54:	ea4f 3303 	mov.w	r3, r3, lsl #12
  408d58:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  408d5c:	d002      	beq.n	408d64 <__adddf3+0x84>
  408d5e:	4252      	negs	r2, r2
  408d60:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  408d64:	ea94 0f05 	teq	r4, r5
  408d68:	f000 80a7 	beq.w	408eba <__adddf3+0x1da>
  408d6c:	f1a4 0401 	sub.w	r4, r4, #1
  408d70:	f1d5 0e20 	rsbs	lr, r5, #32
  408d74:	db0d      	blt.n	408d92 <__adddf3+0xb2>
  408d76:	fa02 fc0e 	lsl.w	ip, r2, lr
  408d7a:	fa22 f205 	lsr.w	r2, r2, r5
  408d7e:	1880      	adds	r0, r0, r2
  408d80:	f141 0100 	adc.w	r1, r1, #0
  408d84:	fa03 f20e 	lsl.w	r2, r3, lr
  408d88:	1880      	adds	r0, r0, r2
  408d8a:	fa43 f305 	asr.w	r3, r3, r5
  408d8e:	4159      	adcs	r1, r3
  408d90:	e00e      	b.n	408db0 <__adddf3+0xd0>
  408d92:	f1a5 0520 	sub.w	r5, r5, #32
  408d96:	f10e 0e20 	add.w	lr, lr, #32
  408d9a:	2a01      	cmp	r2, #1
  408d9c:	fa03 fc0e 	lsl.w	ip, r3, lr
  408da0:	bf28      	it	cs
  408da2:	f04c 0c02 	orrcs.w	ip, ip, #2
  408da6:	fa43 f305 	asr.w	r3, r3, r5
  408daa:	18c0      	adds	r0, r0, r3
  408dac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  408db0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  408db4:	d507      	bpl.n	408dc6 <__adddf3+0xe6>
  408db6:	f04f 0e00 	mov.w	lr, #0
  408dba:	f1dc 0c00 	rsbs	ip, ip, #0
  408dbe:	eb7e 0000 	sbcs.w	r0, lr, r0
  408dc2:	eb6e 0101 	sbc.w	r1, lr, r1
  408dc6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  408dca:	d31b      	bcc.n	408e04 <__adddf3+0x124>
  408dcc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  408dd0:	d30c      	bcc.n	408dec <__adddf3+0x10c>
  408dd2:	0849      	lsrs	r1, r1, #1
  408dd4:	ea5f 0030 	movs.w	r0, r0, rrx
  408dd8:	ea4f 0c3c 	mov.w	ip, ip, rrx
  408ddc:	f104 0401 	add.w	r4, r4, #1
  408de0:	ea4f 5244 	mov.w	r2, r4, lsl #21
  408de4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  408de8:	f080 809a 	bcs.w	408f20 <__adddf3+0x240>
  408dec:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  408df0:	bf08      	it	eq
  408df2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  408df6:	f150 0000 	adcs.w	r0, r0, #0
  408dfa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  408dfe:	ea41 0105 	orr.w	r1, r1, r5
  408e02:	bd30      	pop	{r4, r5, pc}
  408e04:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  408e08:	4140      	adcs	r0, r0
  408e0a:	eb41 0101 	adc.w	r1, r1, r1
  408e0e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  408e12:	f1a4 0401 	sub.w	r4, r4, #1
  408e16:	d1e9      	bne.n	408dec <__adddf3+0x10c>
  408e18:	f091 0f00 	teq	r1, #0
  408e1c:	bf04      	itt	eq
  408e1e:	4601      	moveq	r1, r0
  408e20:	2000      	moveq	r0, #0
  408e22:	fab1 f381 	clz	r3, r1
  408e26:	bf08      	it	eq
  408e28:	3320      	addeq	r3, #32
  408e2a:	f1a3 030b 	sub.w	r3, r3, #11
  408e2e:	f1b3 0220 	subs.w	r2, r3, #32
  408e32:	da0c      	bge.n	408e4e <__adddf3+0x16e>
  408e34:	320c      	adds	r2, #12
  408e36:	dd08      	ble.n	408e4a <__adddf3+0x16a>
  408e38:	f102 0c14 	add.w	ip, r2, #20
  408e3c:	f1c2 020c 	rsb	r2, r2, #12
  408e40:	fa01 f00c 	lsl.w	r0, r1, ip
  408e44:	fa21 f102 	lsr.w	r1, r1, r2
  408e48:	e00c      	b.n	408e64 <__adddf3+0x184>
  408e4a:	f102 0214 	add.w	r2, r2, #20
  408e4e:	bfd8      	it	le
  408e50:	f1c2 0c20 	rsble	ip, r2, #32
  408e54:	fa01 f102 	lsl.w	r1, r1, r2
  408e58:	fa20 fc0c 	lsr.w	ip, r0, ip
  408e5c:	bfdc      	itt	le
  408e5e:	ea41 010c 	orrle.w	r1, r1, ip
  408e62:	4090      	lslle	r0, r2
  408e64:	1ae4      	subs	r4, r4, r3
  408e66:	bfa2      	ittt	ge
  408e68:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  408e6c:	4329      	orrge	r1, r5
  408e6e:	bd30      	popge	{r4, r5, pc}
  408e70:	ea6f 0404 	mvn.w	r4, r4
  408e74:	3c1f      	subs	r4, #31
  408e76:	da1c      	bge.n	408eb2 <__adddf3+0x1d2>
  408e78:	340c      	adds	r4, #12
  408e7a:	dc0e      	bgt.n	408e9a <__adddf3+0x1ba>
  408e7c:	f104 0414 	add.w	r4, r4, #20
  408e80:	f1c4 0220 	rsb	r2, r4, #32
  408e84:	fa20 f004 	lsr.w	r0, r0, r4
  408e88:	fa01 f302 	lsl.w	r3, r1, r2
  408e8c:	ea40 0003 	orr.w	r0, r0, r3
  408e90:	fa21 f304 	lsr.w	r3, r1, r4
  408e94:	ea45 0103 	orr.w	r1, r5, r3
  408e98:	bd30      	pop	{r4, r5, pc}
  408e9a:	f1c4 040c 	rsb	r4, r4, #12
  408e9e:	f1c4 0220 	rsb	r2, r4, #32
  408ea2:	fa20 f002 	lsr.w	r0, r0, r2
  408ea6:	fa01 f304 	lsl.w	r3, r1, r4
  408eaa:	ea40 0003 	orr.w	r0, r0, r3
  408eae:	4629      	mov	r1, r5
  408eb0:	bd30      	pop	{r4, r5, pc}
  408eb2:	fa21 f004 	lsr.w	r0, r1, r4
  408eb6:	4629      	mov	r1, r5
  408eb8:	bd30      	pop	{r4, r5, pc}
  408eba:	f094 0f00 	teq	r4, #0
  408ebe:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  408ec2:	bf06      	itte	eq
  408ec4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  408ec8:	3401      	addeq	r4, #1
  408eca:	3d01      	subne	r5, #1
  408ecc:	e74e      	b.n	408d6c <__adddf3+0x8c>
  408ece:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  408ed2:	bf18      	it	ne
  408ed4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  408ed8:	d029      	beq.n	408f2e <__adddf3+0x24e>
  408eda:	ea94 0f05 	teq	r4, r5
  408ede:	bf08      	it	eq
  408ee0:	ea90 0f02 	teqeq	r0, r2
  408ee4:	d005      	beq.n	408ef2 <__adddf3+0x212>
  408ee6:	ea54 0c00 	orrs.w	ip, r4, r0
  408eea:	bf04      	itt	eq
  408eec:	4619      	moveq	r1, r3
  408eee:	4610      	moveq	r0, r2
  408ef0:	bd30      	pop	{r4, r5, pc}
  408ef2:	ea91 0f03 	teq	r1, r3
  408ef6:	bf1e      	ittt	ne
  408ef8:	2100      	movne	r1, #0
  408efa:	2000      	movne	r0, #0
  408efc:	bd30      	popne	{r4, r5, pc}
  408efe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  408f02:	d105      	bne.n	408f10 <__adddf3+0x230>
  408f04:	0040      	lsls	r0, r0, #1
  408f06:	4149      	adcs	r1, r1
  408f08:	bf28      	it	cs
  408f0a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  408f0e:	bd30      	pop	{r4, r5, pc}
  408f10:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  408f14:	bf3c      	itt	cc
  408f16:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  408f1a:	bd30      	popcc	{r4, r5, pc}
  408f1c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  408f20:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  408f24:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  408f28:	f04f 0000 	mov.w	r0, #0
  408f2c:	bd30      	pop	{r4, r5, pc}
  408f2e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  408f32:	bf1a      	itte	ne
  408f34:	4619      	movne	r1, r3
  408f36:	4610      	movne	r0, r2
  408f38:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  408f3c:	bf1c      	itt	ne
  408f3e:	460b      	movne	r3, r1
  408f40:	4602      	movne	r2, r0
  408f42:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  408f46:	bf06      	itte	eq
  408f48:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  408f4c:	ea91 0f03 	teqeq	r1, r3
  408f50:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  408f54:	bd30      	pop	{r4, r5, pc}
  408f56:	bf00      	nop

00408f58 <__aeabi_ui2d>:
  408f58:	f090 0f00 	teq	r0, #0
  408f5c:	bf04      	itt	eq
  408f5e:	2100      	moveq	r1, #0
  408f60:	4770      	bxeq	lr
  408f62:	b530      	push	{r4, r5, lr}
  408f64:	f44f 6480 	mov.w	r4, #1024	; 0x400
  408f68:	f104 0432 	add.w	r4, r4, #50	; 0x32
  408f6c:	f04f 0500 	mov.w	r5, #0
  408f70:	f04f 0100 	mov.w	r1, #0
  408f74:	e750      	b.n	408e18 <__adddf3+0x138>
  408f76:	bf00      	nop

00408f78 <__aeabi_i2d>:
  408f78:	f090 0f00 	teq	r0, #0
  408f7c:	bf04      	itt	eq
  408f7e:	2100      	moveq	r1, #0
  408f80:	4770      	bxeq	lr
  408f82:	b530      	push	{r4, r5, lr}
  408f84:	f44f 6480 	mov.w	r4, #1024	; 0x400
  408f88:	f104 0432 	add.w	r4, r4, #50	; 0x32
  408f8c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  408f90:	bf48      	it	mi
  408f92:	4240      	negmi	r0, r0
  408f94:	f04f 0100 	mov.w	r1, #0
  408f98:	e73e      	b.n	408e18 <__adddf3+0x138>
  408f9a:	bf00      	nop

00408f9c <__aeabi_f2d>:
  408f9c:	0042      	lsls	r2, r0, #1
  408f9e:	ea4f 01e2 	mov.w	r1, r2, asr #3
  408fa2:	ea4f 0131 	mov.w	r1, r1, rrx
  408fa6:	ea4f 7002 	mov.w	r0, r2, lsl #28
  408faa:	bf1f      	itttt	ne
  408fac:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  408fb0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  408fb4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  408fb8:	4770      	bxne	lr
  408fba:	f092 0f00 	teq	r2, #0
  408fbe:	bf14      	ite	ne
  408fc0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  408fc4:	4770      	bxeq	lr
  408fc6:	b530      	push	{r4, r5, lr}
  408fc8:	f44f 7460 	mov.w	r4, #896	; 0x380
  408fcc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  408fd0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  408fd4:	e720      	b.n	408e18 <__adddf3+0x138>
  408fd6:	bf00      	nop

00408fd8 <__aeabi_ul2d>:
  408fd8:	ea50 0201 	orrs.w	r2, r0, r1
  408fdc:	bf08      	it	eq
  408fde:	4770      	bxeq	lr
  408fe0:	b530      	push	{r4, r5, lr}
  408fe2:	f04f 0500 	mov.w	r5, #0
  408fe6:	e00a      	b.n	408ffe <__aeabi_l2d+0x16>

00408fe8 <__aeabi_l2d>:
  408fe8:	ea50 0201 	orrs.w	r2, r0, r1
  408fec:	bf08      	it	eq
  408fee:	4770      	bxeq	lr
  408ff0:	b530      	push	{r4, r5, lr}
  408ff2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  408ff6:	d502      	bpl.n	408ffe <__aeabi_l2d+0x16>
  408ff8:	4240      	negs	r0, r0
  408ffa:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  408ffe:	f44f 6480 	mov.w	r4, #1024	; 0x400
  409002:	f104 0432 	add.w	r4, r4, #50	; 0x32
  409006:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  40900a:	f43f aedc 	beq.w	408dc6 <__adddf3+0xe6>
  40900e:	f04f 0203 	mov.w	r2, #3
  409012:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  409016:	bf18      	it	ne
  409018:	3203      	addne	r2, #3
  40901a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  40901e:	bf18      	it	ne
  409020:	3203      	addne	r2, #3
  409022:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  409026:	f1c2 0320 	rsb	r3, r2, #32
  40902a:	fa00 fc03 	lsl.w	ip, r0, r3
  40902e:	fa20 f002 	lsr.w	r0, r0, r2
  409032:	fa01 fe03 	lsl.w	lr, r1, r3
  409036:	ea40 000e 	orr.w	r0, r0, lr
  40903a:	fa21 f102 	lsr.w	r1, r1, r2
  40903e:	4414      	add	r4, r2
  409040:	e6c1      	b.n	408dc6 <__adddf3+0xe6>
  409042:	bf00      	nop

00409044 <__aeabi_dmul>:
  409044:	b570      	push	{r4, r5, r6, lr}
  409046:	f04f 0cff 	mov.w	ip, #255	; 0xff
  40904a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  40904e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  409052:	bf1d      	ittte	ne
  409054:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  409058:	ea94 0f0c 	teqne	r4, ip
  40905c:	ea95 0f0c 	teqne	r5, ip
  409060:	f000 f8de 	bleq	409220 <__aeabi_dmul+0x1dc>
  409064:	442c      	add	r4, r5
  409066:	ea81 0603 	eor.w	r6, r1, r3
  40906a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  40906e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  409072:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  409076:	bf18      	it	ne
  409078:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  40907c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  409080:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  409084:	d038      	beq.n	4090f8 <__aeabi_dmul+0xb4>
  409086:	fba0 ce02 	umull	ip, lr, r0, r2
  40908a:	f04f 0500 	mov.w	r5, #0
  40908e:	fbe1 e502 	umlal	lr, r5, r1, r2
  409092:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  409096:	fbe0 e503 	umlal	lr, r5, r0, r3
  40909a:	f04f 0600 	mov.w	r6, #0
  40909e:	fbe1 5603 	umlal	r5, r6, r1, r3
  4090a2:	f09c 0f00 	teq	ip, #0
  4090a6:	bf18      	it	ne
  4090a8:	f04e 0e01 	orrne.w	lr, lr, #1
  4090ac:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  4090b0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  4090b4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  4090b8:	d204      	bcs.n	4090c4 <__aeabi_dmul+0x80>
  4090ba:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  4090be:	416d      	adcs	r5, r5
  4090c0:	eb46 0606 	adc.w	r6, r6, r6
  4090c4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  4090c8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  4090cc:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  4090d0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  4090d4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  4090d8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  4090dc:	bf88      	it	hi
  4090de:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  4090e2:	d81e      	bhi.n	409122 <__aeabi_dmul+0xde>
  4090e4:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  4090e8:	bf08      	it	eq
  4090ea:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  4090ee:	f150 0000 	adcs.w	r0, r0, #0
  4090f2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  4090f6:	bd70      	pop	{r4, r5, r6, pc}
  4090f8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  4090fc:	ea46 0101 	orr.w	r1, r6, r1
  409100:	ea40 0002 	orr.w	r0, r0, r2
  409104:	ea81 0103 	eor.w	r1, r1, r3
  409108:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  40910c:	bfc2      	ittt	gt
  40910e:	ebd4 050c 	rsbsgt	r5, r4, ip
  409112:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  409116:	bd70      	popgt	{r4, r5, r6, pc}
  409118:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  40911c:	f04f 0e00 	mov.w	lr, #0
  409120:	3c01      	subs	r4, #1
  409122:	f300 80ab 	bgt.w	40927c <__aeabi_dmul+0x238>
  409126:	f114 0f36 	cmn.w	r4, #54	; 0x36
  40912a:	bfde      	ittt	le
  40912c:	2000      	movle	r0, #0
  40912e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  409132:	bd70      	pople	{r4, r5, r6, pc}
  409134:	f1c4 0400 	rsb	r4, r4, #0
  409138:	3c20      	subs	r4, #32
  40913a:	da35      	bge.n	4091a8 <__aeabi_dmul+0x164>
  40913c:	340c      	adds	r4, #12
  40913e:	dc1b      	bgt.n	409178 <__aeabi_dmul+0x134>
  409140:	f104 0414 	add.w	r4, r4, #20
  409144:	f1c4 0520 	rsb	r5, r4, #32
  409148:	fa00 f305 	lsl.w	r3, r0, r5
  40914c:	fa20 f004 	lsr.w	r0, r0, r4
  409150:	fa01 f205 	lsl.w	r2, r1, r5
  409154:	ea40 0002 	orr.w	r0, r0, r2
  409158:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  40915c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  409160:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  409164:	fa21 f604 	lsr.w	r6, r1, r4
  409168:	eb42 0106 	adc.w	r1, r2, r6
  40916c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  409170:	bf08      	it	eq
  409172:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  409176:	bd70      	pop	{r4, r5, r6, pc}
  409178:	f1c4 040c 	rsb	r4, r4, #12
  40917c:	f1c4 0520 	rsb	r5, r4, #32
  409180:	fa00 f304 	lsl.w	r3, r0, r4
  409184:	fa20 f005 	lsr.w	r0, r0, r5
  409188:	fa01 f204 	lsl.w	r2, r1, r4
  40918c:	ea40 0002 	orr.w	r0, r0, r2
  409190:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  409194:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  409198:	f141 0100 	adc.w	r1, r1, #0
  40919c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  4091a0:	bf08      	it	eq
  4091a2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  4091a6:	bd70      	pop	{r4, r5, r6, pc}
  4091a8:	f1c4 0520 	rsb	r5, r4, #32
  4091ac:	fa00 f205 	lsl.w	r2, r0, r5
  4091b0:	ea4e 0e02 	orr.w	lr, lr, r2
  4091b4:	fa20 f304 	lsr.w	r3, r0, r4
  4091b8:	fa01 f205 	lsl.w	r2, r1, r5
  4091bc:	ea43 0302 	orr.w	r3, r3, r2
  4091c0:	fa21 f004 	lsr.w	r0, r1, r4
  4091c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  4091c8:	fa21 f204 	lsr.w	r2, r1, r4
  4091cc:	ea20 0002 	bic.w	r0, r0, r2
  4091d0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  4091d4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  4091d8:	bf08      	it	eq
  4091da:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  4091de:	bd70      	pop	{r4, r5, r6, pc}
  4091e0:	f094 0f00 	teq	r4, #0
  4091e4:	d10f      	bne.n	409206 <__aeabi_dmul+0x1c2>
  4091e6:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  4091ea:	0040      	lsls	r0, r0, #1
  4091ec:	eb41 0101 	adc.w	r1, r1, r1
  4091f0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  4091f4:	bf08      	it	eq
  4091f6:	3c01      	subeq	r4, #1
  4091f8:	d0f7      	beq.n	4091ea <__aeabi_dmul+0x1a6>
  4091fa:	ea41 0106 	orr.w	r1, r1, r6
  4091fe:	f095 0f00 	teq	r5, #0
  409202:	bf18      	it	ne
  409204:	4770      	bxne	lr
  409206:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  40920a:	0052      	lsls	r2, r2, #1
  40920c:	eb43 0303 	adc.w	r3, r3, r3
  409210:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  409214:	bf08      	it	eq
  409216:	3d01      	subeq	r5, #1
  409218:	d0f7      	beq.n	40920a <__aeabi_dmul+0x1c6>
  40921a:	ea43 0306 	orr.w	r3, r3, r6
  40921e:	4770      	bx	lr
  409220:	ea94 0f0c 	teq	r4, ip
  409224:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  409228:	bf18      	it	ne
  40922a:	ea95 0f0c 	teqne	r5, ip
  40922e:	d00c      	beq.n	40924a <__aeabi_dmul+0x206>
  409230:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  409234:	bf18      	it	ne
  409236:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  40923a:	d1d1      	bne.n	4091e0 <__aeabi_dmul+0x19c>
  40923c:	ea81 0103 	eor.w	r1, r1, r3
  409240:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  409244:	f04f 0000 	mov.w	r0, #0
  409248:	bd70      	pop	{r4, r5, r6, pc}
  40924a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  40924e:	bf06      	itte	eq
  409250:	4610      	moveq	r0, r2
  409252:	4619      	moveq	r1, r3
  409254:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  409258:	d019      	beq.n	40928e <__aeabi_dmul+0x24a>
  40925a:	ea94 0f0c 	teq	r4, ip
  40925e:	d102      	bne.n	409266 <__aeabi_dmul+0x222>
  409260:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  409264:	d113      	bne.n	40928e <__aeabi_dmul+0x24a>
  409266:	ea95 0f0c 	teq	r5, ip
  40926a:	d105      	bne.n	409278 <__aeabi_dmul+0x234>
  40926c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  409270:	bf1c      	itt	ne
  409272:	4610      	movne	r0, r2
  409274:	4619      	movne	r1, r3
  409276:	d10a      	bne.n	40928e <__aeabi_dmul+0x24a>
  409278:	ea81 0103 	eor.w	r1, r1, r3
  40927c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  409280:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  409284:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  409288:	f04f 0000 	mov.w	r0, #0
  40928c:	bd70      	pop	{r4, r5, r6, pc}
  40928e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  409292:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  409296:	bd70      	pop	{r4, r5, r6, pc}

00409298 <__aeabi_ddiv>:
  409298:	b570      	push	{r4, r5, r6, lr}
  40929a:	f04f 0cff 	mov.w	ip, #255	; 0xff
  40929e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  4092a2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  4092a6:	bf1d      	ittte	ne
  4092a8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  4092ac:	ea94 0f0c 	teqne	r4, ip
  4092b0:	ea95 0f0c 	teqne	r5, ip
  4092b4:	f000 f8a7 	bleq	409406 <__aeabi_ddiv+0x16e>
  4092b8:	eba4 0405 	sub.w	r4, r4, r5
  4092bc:	ea81 0e03 	eor.w	lr, r1, r3
  4092c0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  4092c4:	ea4f 3101 	mov.w	r1, r1, lsl #12
  4092c8:	f000 8088 	beq.w	4093dc <__aeabi_ddiv+0x144>
  4092cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
  4092d0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  4092d4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  4092d8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  4092dc:	ea4f 2202 	mov.w	r2, r2, lsl #8
  4092e0:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  4092e4:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  4092e8:	ea4f 2600 	mov.w	r6, r0, lsl #8
  4092ec:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  4092f0:	429d      	cmp	r5, r3
  4092f2:	bf08      	it	eq
  4092f4:	4296      	cmpeq	r6, r2
  4092f6:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  4092fa:	f504 7440 	add.w	r4, r4, #768	; 0x300
  4092fe:	d202      	bcs.n	409306 <__aeabi_ddiv+0x6e>
  409300:	085b      	lsrs	r3, r3, #1
  409302:	ea4f 0232 	mov.w	r2, r2, rrx
  409306:	1ab6      	subs	r6, r6, r2
  409308:	eb65 0503 	sbc.w	r5, r5, r3
  40930c:	085b      	lsrs	r3, r3, #1
  40930e:	ea4f 0232 	mov.w	r2, r2, rrx
  409312:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  409316:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  40931a:	ebb6 0e02 	subs.w	lr, r6, r2
  40931e:	eb75 0e03 	sbcs.w	lr, r5, r3
  409322:	bf22      	ittt	cs
  409324:	1ab6      	subcs	r6, r6, r2
  409326:	4675      	movcs	r5, lr
  409328:	ea40 000c 	orrcs.w	r0, r0, ip
  40932c:	085b      	lsrs	r3, r3, #1
  40932e:	ea4f 0232 	mov.w	r2, r2, rrx
  409332:	ebb6 0e02 	subs.w	lr, r6, r2
  409336:	eb75 0e03 	sbcs.w	lr, r5, r3
  40933a:	bf22      	ittt	cs
  40933c:	1ab6      	subcs	r6, r6, r2
  40933e:	4675      	movcs	r5, lr
  409340:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  409344:	085b      	lsrs	r3, r3, #1
  409346:	ea4f 0232 	mov.w	r2, r2, rrx
  40934a:	ebb6 0e02 	subs.w	lr, r6, r2
  40934e:	eb75 0e03 	sbcs.w	lr, r5, r3
  409352:	bf22      	ittt	cs
  409354:	1ab6      	subcs	r6, r6, r2
  409356:	4675      	movcs	r5, lr
  409358:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  40935c:	085b      	lsrs	r3, r3, #1
  40935e:	ea4f 0232 	mov.w	r2, r2, rrx
  409362:	ebb6 0e02 	subs.w	lr, r6, r2
  409366:	eb75 0e03 	sbcs.w	lr, r5, r3
  40936a:	bf22      	ittt	cs
  40936c:	1ab6      	subcs	r6, r6, r2
  40936e:	4675      	movcs	r5, lr
  409370:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  409374:	ea55 0e06 	orrs.w	lr, r5, r6
  409378:	d018      	beq.n	4093ac <__aeabi_ddiv+0x114>
  40937a:	ea4f 1505 	mov.w	r5, r5, lsl #4
  40937e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  409382:	ea4f 1606 	mov.w	r6, r6, lsl #4
  409386:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  40938a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  40938e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  409392:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  409396:	d1c0      	bne.n	40931a <__aeabi_ddiv+0x82>
  409398:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40939c:	d10b      	bne.n	4093b6 <__aeabi_ddiv+0x11e>
  40939e:	ea41 0100 	orr.w	r1, r1, r0
  4093a2:	f04f 0000 	mov.w	r0, #0
  4093a6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  4093aa:	e7b6      	b.n	40931a <__aeabi_ddiv+0x82>
  4093ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  4093b0:	bf04      	itt	eq
  4093b2:	4301      	orreq	r1, r0
  4093b4:	2000      	moveq	r0, #0
  4093b6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  4093ba:	bf88      	it	hi
  4093bc:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  4093c0:	f63f aeaf 	bhi.w	409122 <__aeabi_dmul+0xde>
  4093c4:	ebb5 0c03 	subs.w	ip, r5, r3
  4093c8:	bf04      	itt	eq
  4093ca:	ebb6 0c02 	subseq.w	ip, r6, r2
  4093ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  4093d2:	f150 0000 	adcs.w	r0, r0, #0
  4093d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  4093da:	bd70      	pop	{r4, r5, r6, pc}
  4093dc:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  4093e0:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  4093e4:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  4093e8:	bfc2      	ittt	gt
  4093ea:	ebd4 050c 	rsbsgt	r5, r4, ip
  4093ee:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  4093f2:	bd70      	popgt	{r4, r5, r6, pc}
  4093f4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  4093f8:	f04f 0e00 	mov.w	lr, #0
  4093fc:	3c01      	subs	r4, #1
  4093fe:	e690      	b.n	409122 <__aeabi_dmul+0xde>
  409400:	ea45 0e06 	orr.w	lr, r5, r6
  409404:	e68d      	b.n	409122 <__aeabi_dmul+0xde>
  409406:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  40940a:	ea94 0f0c 	teq	r4, ip
  40940e:	bf08      	it	eq
  409410:	ea95 0f0c 	teqeq	r5, ip
  409414:	f43f af3b 	beq.w	40928e <__aeabi_dmul+0x24a>
  409418:	ea94 0f0c 	teq	r4, ip
  40941c:	d10a      	bne.n	409434 <__aeabi_ddiv+0x19c>
  40941e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  409422:	f47f af34 	bne.w	40928e <__aeabi_dmul+0x24a>
  409426:	ea95 0f0c 	teq	r5, ip
  40942a:	f47f af25 	bne.w	409278 <__aeabi_dmul+0x234>
  40942e:	4610      	mov	r0, r2
  409430:	4619      	mov	r1, r3
  409432:	e72c      	b.n	40928e <__aeabi_dmul+0x24a>
  409434:	ea95 0f0c 	teq	r5, ip
  409438:	d106      	bne.n	409448 <__aeabi_ddiv+0x1b0>
  40943a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  40943e:	f43f aefd 	beq.w	40923c <__aeabi_dmul+0x1f8>
  409442:	4610      	mov	r0, r2
  409444:	4619      	mov	r1, r3
  409446:	e722      	b.n	40928e <__aeabi_dmul+0x24a>
  409448:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  40944c:	bf18      	it	ne
  40944e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  409452:	f47f aec5 	bne.w	4091e0 <__aeabi_dmul+0x19c>
  409456:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  40945a:	f47f af0d 	bne.w	409278 <__aeabi_dmul+0x234>
  40945e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  409462:	f47f aeeb 	bne.w	40923c <__aeabi_dmul+0x1f8>
  409466:	e712      	b.n	40928e <__aeabi_dmul+0x24a>

00409468 <__gedf2>:
  409468:	f04f 3cff 	mov.w	ip, #4294967295
  40946c:	e006      	b.n	40947c <__cmpdf2+0x4>
  40946e:	bf00      	nop

00409470 <__ledf2>:
  409470:	f04f 0c01 	mov.w	ip, #1
  409474:	e002      	b.n	40947c <__cmpdf2+0x4>
  409476:	bf00      	nop

00409478 <__cmpdf2>:
  409478:	f04f 0c01 	mov.w	ip, #1
  40947c:	f84d cd04 	str.w	ip, [sp, #-4]!
  409480:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  409484:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  409488:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  40948c:	bf18      	it	ne
  40948e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  409492:	d01b      	beq.n	4094cc <__cmpdf2+0x54>
  409494:	b001      	add	sp, #4
  409496:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  40949a:	bf0c      	ite	eq
  40949c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  4094a0:	ea91 0f03 	teqne	r1, r3
  4094a4:	bf02      	ittt	eq
  4094a6:	ea90 0f02 	teqeq	r0, r2
  4094aa:	2000      	moveq	r0, #0
  4094ac:	4770      	bxeq	lr
  4094ae:	f110 0f00 	cmn.w	r0, #0
  4094b2:	ea91 0f03 	teq	r1, r3
  4094b6:	bf58      	it	pl
  4094b8:	4299      	cmppl	r1, r3
  4094ba:	bf08      	it	eq
  4094bc:	4290      	cmpeq	r0, r2
  4094be:	bf2c      	ite	cs
  4094c0:	17d8      	asrcs	r0, r3, #31
  4094c2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  4094c6:	f040 0001 	orr.w	r0, r0, #1
  4094ca:	4770      	bx	lr
  4094cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  4094d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  4094d4:	d102      	bne.n	4094dc <__cmpdf2+0x64>
  4094d6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  4094da:	d107      	bne.n	4094ec <__cmpdf2+0x74>
  4094dc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  4094e0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  4094e4:	d1d6      	bne.n	409494 <__cmpdf2+0x1c>
  4094e6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  4094ea:	d0d3      	beq.n	409494 <__cmpdf2+0x1c>
  4094ec:	f85d 0b04 	ldr.w	r0, [sp], #4
  4094f0:	4770      	bx	lr
  4094f2:	bf00      	nop

004094f4 <__aeabi_cdrcmple>:
  4094f4:	4684      	mov	ip, r0
  4094f6:	4610      	mov	r0, r2
  4094f8:	4662      	mov	r2, ip
  4094fa:	468c      	mov	ip, r1
  4094fc:	4619      	mov	r1, r3
  4094fe:	4663      	mov	r3, ip
  409500:	e000      	b.n	409504 <__aeabi_cdcmpeq>
  409502:	bf00      	nop

00409504 <__aeabi_cdcmpeq>:
  409504:	b501      	push	{r0, lr}
  409506:	f7ff ffb7 	bl	409478 <__cmpdf2>
  40950a:	2800      	cmp	r0, #0
  40950c:	bf48      	it	mi
  40950e:	f110 0f00 	cmnmi.w	r0, #0
  409512:	bd01      	pop	{r0, pc}

00409514 <__aeabi_dcmpeq>:
  409514:	f84d ed08 	str.w	lr, [sp, #-8]!
  409518:	f7ff fff4 	bl	409504 <__aeabi_cdcmpeq>
  40951c:	bf0c      	ite	eq
  40951e:	2001      	moveq	r0, #1
  409520:	2000      	movne	r0, #0
  409522:	f85d fb08 	ldr.w	pc, [sp], #8
  409526:	bf00      	nop

00409528 <__aeabi_dcmplt>:
  409528:	f84d ed08 	str.w	lr, [sp, #-8]!
  40952c:	f7ff ffea 	bl	409504 <__aeabi_cdcmpeq>
  409530:	bf34      	ite	cc
  409532:	2001      	movcc	r0, #1
  409534:	2000      	movcs	r0, #0
  409536:	f85d fb08 	ldr.w	pc, [sp], #8
  40953a:	bf00      	nop

0040953c <__aeabi_dcmple>:
  40953c:	f84d ed08 	str.w	lr, [sp, #-8]!
  409540:	f7ff ffe0 	bl	409504 <__aeabi_cdcmpeq>
  409544:	bf94      	ite	ls
  409546:	2001      	movls	r0, #1
  409548:	2000      	movhi	r0, #0
  40954a:	f85d fb08 	ldr.w	pc, [sp], #8
  40954e:	bf00      	nop

00409550 <__aeabi_dcmpge>:
  409550:	f84d ed08 	str.w	lr, [sp, #-8]!
  409554:	f7ff ffce 	bl	4094f4 <__aeabi_cdrcmple>
  409558:	bf94      	ite	ls
  40955a:	2001      	movls	r0, #1
  40955c:	2000      	movhi	r0, #0
  40955e:	f85d fb08 	ldr.w	pc, [sp], #8
  409562:	bf00      	nop

00409564 <__aeabi_dcmpgt>:
  409564:	f84d ed08 	str.w	lr, [sp, #-8]!
  409568:	f7ff ffc4 	bl	4094f4 <__aeabi_cdrcmple>
  40956c:	bf34      	ite	cc
  40956e:	2001      	movcc	r0, #1
  409570:	2000      	movcs	r0, #0
  409572:	f85d fb08 	ldr.w	pc, [sp], #8
  409576:	bf00      	nop

00409578 <__aeabi_d2iz>:
  409578:	ea4f 0241 	mov.w	r2, r1, lsl #1
  40957c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  409580:	d215      	bcs.n	4095ae <__aeabi_d2iz+0x36>
  409582:	d511      	bpl.n	4095a8 <__aeabi_d2iz+0x30>
  409584:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  409588:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  40958c:	d912      	bls.n	4095b4 <__aeabi_d2iz+0x3c>
  40958e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  409592:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  409596:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  40959a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  40959e:	fa23 f002 	lsr.w	r0, r3, r2
  4095a2:	bf18      	it	ne
  4095a4:	4240      	negne	r0, r0
  4095a6:	4770      	bx	lr
  4095a8:	f04f 0000 	mov.w	r0, #0
  4095ac:	4770      	bx	lr
  4095ae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  4095b2:	d105      	bne.n	4095c0 <__aeabi_d2iz+0x48>
  4095b4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  4095b8:	bf08      	it	eq
  4095ba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  4095be:	4770      	bx	lr
  4095c0:	f04f 0000 	mov.w	r0, #0
  4095c4:	4770      	bx	lr
  4095c6:	bf00      	nop

004095c8 <__aeabi_uldivmod>:
  4095c8:	b953      	cbnz	r3, 4095e0 <__aeabi_uldivmod+0x18>
  4095ca:	b94a      	cbnz	r2, 4095e0 <__aeabi_uldivmod+0x18>
  4095cc:	2900      	cmp	r1, #0
  4095ce:	bf08      	it	eq
  4095d0:	2800      	cmpeq	r0, #0
  4095d2:	bf1c      	itt	ne
  4095d4:	f04f 31ff 	movne.w	r1, #4294967295
  4095d8:	f04f 30ff 	movne.w	r0, #4294967295
  4095dc:	f000 b83c 	b.w	409658 <__aeabi_idiv0>
  4095e0:	b082      	sub	sp, #8
  4095e2:	46ec      	mov	ip, sp
  4095e4:	e92d 5000 	stmdb	sp!, {ip, lr}
  4095e8:	f000 f81e 	bl	409628 <__gnu_uldivmod_helper>
  4095ec:	f8dd e004 	ldr.w	lr, [sp, #4]
  4095f0:	b002      	add	sp, #8
  4095f2:	bc0c      	pop	{r2, r3}
  4095f4:	4770      	bx	lr
  4095f6:	bf00      	nop

004095f8 <__gnu_ldivmod_helper>:
  4095f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4095fc:	4690      	mov	r8, r2
  4095fe:	4606      	mov	r6, r0
  409600:	460f      	mov	r7, r1
  409602:	461d      	mov	r5, r3
  409604:	9c06      	ldr	r4, [sp, #24]
  409606:	f000 f829 	bl	40965c <__divdi3>
  40960a:	fb08 fc01 	mul.w	ip, r8, r1
  40960e:	4686      	mov	lr, r0
  409610:	fba8 2300 	umull	r2, r3, r8, r0
  409614:	fb00 c505 	mla	r5, r0, r5, ip
  409618:	1ab2      	subs	r2, r6, r2
  40961a:	442b      	add	r3, r5
  40961c:	eb67 0303 	sbc.w	r3, r7, r3
  409620:	e9c4 2300 	strd	r2, r3, [r4]
  409624:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00409628 <__gnu_uldivmod_helper>:
  409628:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40962c:	461d      	mov	r5, r3
  40962e:	4617      	mov	r7, r2
  409630:	4680      	mov	r8, r0
  409632:	4689      	mov	r9, r1
  409634:	9e08      	ldr	r6, [sp, #32]
  409636:	f000 f953 	bl	4098e0 <__udivdi3>
  40963a:	fb00 f305 	mul.w	r3, r0, r5
  40963e:	fba0 4507 	umull	r4, r5, r0, r7
  409642:	fb07 3701 	mla	r7, r7, r1, r3
  409646:	ebb8 0404 	subs.w	r4, r8, r4
  40964a:	443d      	add	r5, r7
  40964c:	eb69 0505 	sbc.w	r5, r9, r5
  409650:	e9c6 4500 	strd	r4, r5, [r6]
  409654:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00409658 <__aeabi_idiv0>:
  409658:	4770      	bx	lr
  40965a:	bf00      	nop

0040965c <__divdi3>:
  40965c:	2900      	cmp	r1, #0
  40965e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  409662:	f2c0 80a2 	blt.w	4097aa <__divdi3+0x14e>
  409666:	2600      	movs	r6, #0
  409668:	2b00      	cmp	r3, #0
  40966a:	f2c0 8098 	blt.w	40979e <__divdi3+0x142>
  40966e:	468c      	mov	ip, r1
  409670:	4690      	mov	r8, r2
  409672:	469e      	mov	lr, r3
  409674:	4615      	mov	r5, r2
  409676:	4604      	mov	r4, r0
  409678:	460f      	mov	r7, r1
  40967a:	bbcb      	cbnz	r3, 4096f0 <__divdi3+0x94>
  40967c:	428a      	cmp	r2, r1
  40967e:	d956      	bls.n	40972e <__divdi3+0xd2>
  409680:	fab2 f382 	clz	r3, r2
  409684:	b13b      	cbz	r3, 409696 <__divdi3+0x3a>
  409686:	f1c3 0220 	rsb	r2, r3, #32
  40968a:	409f      	lsls	r7, r3
  40968c:	409d      	lsls	r5, r3
  40968e:	409c      	lsls	r4, r3
  409690:	fa20 f202 	lsr.w	r2, r0, r2
  409694:	4317      	orrs	r7, r2
  409696:	0c28      	lsrs	r0, r5, #16
  409698:	0c22      	lsrs	r2, r4, #16
  40969a:	fa1f fe85 	uxth.w	lr, r5
  40969e:	fbb7 f1f0 	udiv	r1, r7, r0
  4096a2:	fb00 7711 	mls	r7, r0, r1, r7
  4096a6:	fb0e f301 	mul.w	r3, lr, r1
  4096aa:	ea42 4707 	orr.w	r7, r2, r7, lsl #16
  4096ae:	42bb      	cmp	r3, r7
  4096b0:	d907      	bls.n	4096c2 <__divdi3+0x66>
  4096b2:	197f      	adds	r7, r7, r5
  4096b4:	f080 8101 	bcs.w	4098ba <__divdi3+0x25e>
  4096b8:	42bb      	cmp	r3, r7
  4096ba:	f240 80fe 	bls.w	4098ba <__divdi3+0x25e>
  4096be:	3902      	subs	r1, #2
  4096c0:	442f      	add	r7, r5
  4096c2:	1aff      	subs	r7, r7, r3
  4096c4:	b2a4      	uxth	r4, r4
  4096c6:	fbb7 f3f0 	udiv	r3, r7, r0
  4096ca:	fb00 7713 	mls	r7, r0, r3, r7
  4096ce:	fb0e fe03 	mul.w	lr, lr, r3
  4096d2:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
  4096d6:	45be      	cmp	lr, r7
  4096d8:	d906      	bls.n	4096e8 <__divdi3+0x8c>
  4096da:	197f      	adds	r7, r7, r5
  4096dc:	f080 80eb 	bcs.w	4098b6 <__divdi3+0x25a>
  4096e0:	45be      	cmp	lr, r7
  4096e2:	f240 80e8 	bls.w	4098b6 <__divdi3+0x25a>
  4096e6:	3b02      	subs	r3, #2
  4096e8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
  4096ec:	2200      	movs	r2, #0
  4096ee:	e003      	b.n	4096f8 <__divdi3+0x9c>
  4096f0:	428b      	cmp	r3, r1
  4096f2:	d90f      	bls.n	409714 <__divdi3+0xb8>
  4096f4:	2200      	movs	r2, #0
  4096f6:	4613      	mov	r3, r2
  4096f8:	1c34      	adds	r4, r6, #0
  4096fa:	f04f 0500 	mov.w	r5, #0
  4096fe:	bf18      	it	ne
  409700:	2401      	movne	r4, #1
  409702:	4260      	negs	r0, r4
  409704:	eb65 0145 	sbc.w	r1, r5, r5, lsl #1
  409708:	4058      	eors	r0, r3
  40970a:	4051      	eors	r1, r2
  40970c:	1900      	adds	r0, r0, r4
  40970e:	4169      	adcs	r1, r5
  409710:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  409714:	fab3 f283 	clz	r2, r3
  409718:	2a00      	cmp	r2, #0
  40971a:	f040 8083 	bne.w	409824 <__divdi3+0x1c8>
  40971e:	4580      	cmp	r8, r0
  409720:	f240 80cd 	bls.w	4098be <__divdi3+0x262>
  409724:	428b      	cmp	r3, r1
  409726:	f0c0 80ca 	bcc.w	4098be <__divdi3+0x262>
  40972a:	4613      	mov	r3, r2
  40972c:	e7e4      	b.n	4096f8 <__divdi3+0x9c>
  40972e:	b912      	cbnz	r2, 409736 <__divdi3+0xda>
  409730:	2301      	movs	r3, #1
  409732:	fbb3 f5f2 	udiv	r5, r3, r2
  409736:	fab5 f285 	clz	r2, r5
  40973a:	2a00      	cmp	r2, #0
  40973c:	d13b      	bne.n	4097b6 <__divdi3+0x15a>
  40973e:	1b78      	subs	r0, r7, r5
  409740:	ea4f 4e15 	mov.w	lr, r5, lsr #16
  409744:	fa1f fc85 	uxth.w	ip, r5
  409748:	2201      	movs	r2, #1
  40974a:	0c21      	lsrs	r1, r4, #16
  40974c:	fbb0 f8fe 	udiv	r8, r0, lr
  409750:	fb0e 0018 	mls	r0, lr, r8, r0
  409754:	fb0c f308 	mul.w	r3, ip, r8
  409758:	ea41 4700 	orr.w	r7, r1, r0, lsl #16
  40975c:	42bb      	cmp	r3, r7
  40975e:	d908      	bls.n	409772 <__divdi3+0x116>
  409760:	197f      	adds	r7, r7, r5
  409762:	f080 80b0 	bcs.w	4098c6 <__divdi3+0x26a>
  409766:	42bb      	cmp	r3, r7
  409768:	f240 80ad 	bls.w	4098c6 <__divdi3+0x26a>
  40976c:	f1a8 0802 	sub.w	r8, r8, #2
  409770:	442f      	add	r7, r5
  409772:	1aff      	subs	r7, r7, r3
  409774:	b2a4      	uxth	r4, r4
  409776:	fbb7 f3fe 	udiv	r3, r7, lr
  40977a:	fb0e 7713 	mls	r7, lr, r3, r7
  40977e:	fb0c fc03 	mul.w	ip, ip, r3
  409782:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
  409786:	45bc      	cmp	ip, r7
  409788:	d906      	bls.n	409798 <__divdi3+0x13c>
  40978a:	197f      	adds	r7, r7, r5
  40978c:	f080 8099 	bcs.w	4098c2 <__divdi3+0x266>
  409790:	45bc      	cmp	ip, r7
  409792:	f240 8096 	bls.w	4098c2 <__divdi3+0x266>
  409796:	3b02      	subs	r3, #2
  409798:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
  40979c:	e7ac      	b.n	4096f8 <__divdi3+0x9c>
  40979e:	4252      	negs	r2, r2
  4097a0:	ea6f 0606 	mvn.w	r6, r6
  4097a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  4097a8:	e761      	b.n	40966e <__divdi3+0x12>
  4097aa:	4240      	negs	r0, r0
  4097ac:	f04f 36ff 	mov.w	r6, #4294967295
  4097b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  4097b4:	e758      	b.n	409668 <__divdi3+0xc>
  4097b6:	4095      	lsls	r5, r2
  4097b8:	f1c2 0120 	rsb	r1, r2, #32
  4097bc:	fa07 f302 	lsl.w	r3, r7, r2
  4097c0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
  4097c4:	40cf      	lsrs	r7, r1
  4097c6:	fa24 f101 	lsr.w	r1, r4, r1
  4097ca:	4094      	lsls	r4, r2
  4097cc:	fa1f fc85 	uxth.w	ip, r5
  4097d0:	4319      	orrs	r1, r3
  4097d2:	fbb7 f2fe 	udiv	r2, r7, lr
  4097d6:	ea4f 4811 	mov.w	r8, r1, lsr #16
  4097da:	fb0e 7712 	mls	r7, lr, r2, r7
  4097de:	fb0c f302 	mul.w	r3, ip, r2
  4097e2:	ea48 4707 	orr.w	r7, r8, r7, lsl #16
  4097e6:	42bb      	cmp	r3, r7
  4097e8:	d905      	bls.n	4097f6 <__divdi3+0x19a>
  4097ea:	197f      	adds	r7, r7, r5
  4097ec:	d271      	bcs.n	4098d2 <__divdi3+0x276>
  4097ee:	42bb      	cmp	r3, r7
  4097f0:	d96f      	bls.n	4098d2 <__divdi3+0x276>
  4097f2:	3a02      	subs	r2, #2
  4097f4:	442f      	add	r7, r5
  4097f6:	1aff      	subs	r7, r7, r3
  4097f8:	b289      	uxth	r1, r1
  4097fa:	fbb7 f8fe 	udiv	r8, r7, lr
  4097fe:	fb0e 7718 	mls	r7, lr, r8, r7
  409802:	fb0c f008 	mul.w	r0, ip, r8
  409806:	ea41 4307 	orr.w	r3, r1, r7, lsl #16
  40980a:	4298      	cmp	r0, r3
  40980c:	d906      	bls.n	40981c <__divdi3+0x1c0>
  40980e:	195b      	adds	r3, r3, r5
  409810:	d261      	bcs.n	4098d6 <__divdi3+0x27a>
  409812:	4298      	cmp	r0, r3
  409814:	d95f      	bls.n	4098d6 <__divdi3+0x27a>
  409816:	f1a8 0802 	sub.w	r8, r8, #2
  40981a:	442b      	add	r3, r5
  40981c:	1a18      	subs	r0, r3, r0
  40981e:	ea48 4202 	orr.w	r2, r8, r2, lsl #16
  409822:	e792      	b.n	40974a <__divdi3+0xee>
  409824:	f1c2 0720 	rsb	r7, r2, #32
  409828:	fa03 fe02 	lsl.w	lr, r3, r2
  40982c:	fa08 f502 	lsl.w	r5, r8, r2
  409830:	4091      	lsls	r1, r2
  409832:	fa28 f307 	lsr.w	r3, r8, r7
  409836:	fa2c fc07 	lsr.w	ip, ip, r7
  40983a:	40f8      	lsrs	r0, r7
  40983c:	ea43 0e0e 	orr.w	lr, r3, lr
  409840:	4308      	orrs	r0, r1
  409842:	ea4f 481e 	mov.w	r8, lr, lsr #16
  409846:	0c07      	lsrs	r7, r0, #16
  409848:	fa1f fa8e 	uxth.w	sl, lr
  40984c:	fbbc f9f8 	udiv	r9, ip, r8
  409850:	fb08 cc19 	mls	ip, r8, r9, ip
  409854:	fb0a f109 	mul.w	r1, sl, r9
  409858:	ea47 4c0c 	orr.w	ip, r7, ip, lsl #16
  40985c:	4561      	cmp	r1, ip
  40985e:	d907      	bls.n	409870 <__divdi3+0x214>
  409860:	eb1c 0c0e 	adds.w	ip, ip, lr
  409864:	d232      	bcs.n	4098cc <__divdi3+0x270>
  409866:	4561      	cmp	r1, ip
  409868:	d930      	bls.n	4098cc <__divdi3+0x270>
  40986a:	f1a9 0902 	sub.w	r9, r9, #2
  40986e:	44f4      	add	ip, lr
  409870:	ebc1 0c0c 	rsb	ip, r1, ip
  409874:	b280      	uxth	r0, r0
  409876:	fbbc f3f8 	udiv	r3, ip, r8
  40987a:	fb08 cc13 	mls	ip, r8, r3, ip
  40987e:	fb0a fa03 	mul.w	sl, sl, r3
  409882:	ea40 410c 	orr.w	r1, r0, ip, lsl #16
  409886:	458a      	cmp	sl, r1
  409888:	d906      	bls.n	409898 <__divdi3+0x23c>
  40988a:	eb11 010e 	adds.w	r1, r1, lr
  40988e:	d225      	bcs.n	4098dc <__divdi3+0x280>
  409890:	458a      	cmp	sl, r1
  409892:	d923      	bls.n	4098dc <__divdi3+0x280>
  409894:	3b02      	subs	r3, #2
  409896:	4471      	add	r1, lr
  409898:	ea43 4309 	orr.w	r3, r3, r9, lsl #16
  40989c:	ebca 0101 	rsb	r1, sl, r1
  4098a0:	fba3 8905 	umull	r8, r9, r3, r5
  4098a4:	4549      	cmp	r1, r9
  4098a6:	d303      	bcc.n	4098b0 <__divdi3+0x254>
  4098a8:	d103      	bne.n	4098b2 <__divdi3+0x256>
  4098aa:	4094      	lsls	r4, r2
  4098ac:	4544      	cmp	r4, r8
  4098ae:	d200      	bcs.n	4098b2 <__divdi3+0x256>
  4098b0:	3b01      	subs	r3, #1
  4098b2:	2200      	movs	r2, #0
  4098b4:	e720      	b.n	4096f8 <__divdi3+0x9c>
  4098b6:	3b01      	subs	r3, #1
  4098b8:	e716      	b.n	4096e8 <__divdi3+0x8c>
  4098ba:	3901      	subs	r1, #1
  4098bc:	e701      	b.n	4096c2 <__divdi3+0x66>
  4098be:	2301      	movs	r3, #1
  4098c0:	e71a      	b.n	4096f8 <__divdi3+0x9c>
  4098c2:	3b01      	subs	r3, #1
  4098c4:	e768      	b.n	409798 <__divdi3+0x13c>
  4098c6:	f108 38ff 	add.w	r8, r8, #4294967295
  4098ca:	e752      	b.n	409772 <__divdi3+0x116>
  4098cc:	f109 39ff 	add.w	r9, r9, #4294967295
  4098d0:	e7ce      	b.n	409870 <__divdi3+0x214>
  4098d2:	3a01      	subs	r2, #1
  4098d4:	e78f      	b.n	4097f6 <__divdi3+0x19a>
  4098d6:	f108 38ff 	add.w	r8, r8, #4294967295
  4098da:	e79f      	b.n	40981c <__divdi3+0x1c0>
  4098dc:	3b01      	subs	r3, #1
  4098de:	e7db      	b.n	409898 <__divdi3+0x23c>

004098e0 <__udivdi3>:
  4098e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  4098e4:	2b00      	cmp	r3, #0
  4098e6:	d140      	bne.n	40996a <__udivdi3+0x8a>
  4098e8:	428a      	cmp	r2, r1
  4098ea:	4604      	mov	r4, r0
  4098ec:	4615      	mov	r5, r2
  4098ee:	d94a      	bls.n	409986 <__udivdi3+0xa6>
  4098f0:	fab2 f382 	clz	r3, r2
  4098f4:	460f      	mov	r7, r1
  4098f6:	b14b      	cbz	r3, 40990c <__udivdi3+0x2c>
  4098f8:	f1c3 0620 	rsb	r6, r3, #32
  4098fc:	4099      	lsls	r1, r3
  4098fe:	fa00 f403 	lsl.w	r4, r0, r3
  409902:	fa02 f503 	lsl.w	r5, r2, r3
  409906:	40f0      	lsrs	r0, r6
  409908:	ea40 0701 	orr.w	r7, r0, r1
  40990c:	0c29      	lsrs	r1, r5, #16
  40990e:	0c26      	lsrs	r6, r4, #16
  409910:	fa1f fe85 	uxth.w	lr, r5
  409914:	fbb7 f0f1 	udiv	r0, r7, r1
  409918:	fb01 7710 	mls	r7, r1, r0, r7
  40991c:	fb0e f200 	mul.w	r2, lr, r0
  409920:	ea46 4307 	orr.w	r3, r6, r7, lsl #16
  409924:	429a      	cmp	r2, r3
  409926:	d907      	bls.n	409938 <__udivdi3+0x58>
  409928:	195b      	adds	r3, r3, r5
  40992a:	f080 80ea 	bcs.w	409b02 <__udivdi3+0x222>
  40992e:	429a      	cmp	r2, r3
  409930:	f240 80e7 	bls.w	409b02 <__udivdi3+0x222>
  409934:	3802      	subs	r0, #2
  409936:	442b      	add	r3, r5
  409938:	1a9a      	subs	r2, r3, r2
  40993a:	b2a4      	uxth	r4, r4
  40993c:	fbb2 f3f1 	udiv	r3, r2, r1
  409940:	fb01 2213 	mls	r2, r1, r3, r2
  409944:	fb0e fe03 	mul.w	lr, lr, r3
  409948:	ea44 4202 	orr.w	r2, r4, r2, lsl #16
  40994c:	4596      	cmp	lr, r2
  40994e:	d906      	bls.n	40995e <__udivdi3+0x7e>
  409950:	1952      	adds	r2, r2, r5
  409952:	f080 80da 	bcs.w	409b0a <__udivdi3+0x22a>
  409956:	4596      	cmp	lr, r2
  409958:	f240 80d7 	bls.w	409b0a <__udivdi3+0x22a>
  40995c:	3b02      	subs	r3, #2
  40995e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
  409962:	2600      	movs	r6, #0
  409964:	4631      	mov	r1, r6
  409966:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40996a:	428b      	cmp	r3, r1
  40996c:	d844      	bhi.n	4099f8 <__udivdi3+0x118>
  40996e:	fab3 f683 	clz	r6, r3
  409972:	2e00      	cmp	r6, #0
  409974:	d145      	bne.n	409a02 <__udivdi3+0x122>
  409976:	4282      	cmp	r2, r0
  409978:	f240 80bf 	bls.w	409afa <__udivdi3+0x21a>
  40997c:	428b      	cmp	r3, r1
  40997e:	f0c0 80bc 	bcc.w	409afa <__udivdi3+0x21a>
  409982:	4630      	mov	r0, r6
  409984:	e7ee      	b.n	409964 <__udivdi3+0x84>
  409986:	b912      	cbnz	r2, 40998e <__udivdi3+0xae>
  409988:	2501      	movs	r5, #1
  40998a:	fbb5 f5f2 	udiv	r5, r5, r2
  40998e:	fab5 f285 	clz	r2, r5
  409992:	2a00      	cmp	r2, #0
  409994:	d17b      	bne.n	409a8e <__udivdi3+0x1ae>
  409996:	1b4a      	subs	r2, r1, r5
  409998:	0c2f      	lsrs	r7, r5, #16
  40999a:	fa1f fe85 	uxth.w	lr, r5
  40999e:	2601      	movs	r6, #1
  4099a0:	0c23      	lsrs	r3, r4, #16
  4099a2:	fbb2 f0f7 	udiv	r0, r2, r7
  4099a6:	fb07 2210 	mls	r2, r7, r0, r2
  4099aa:	fb0e fc00 	mul.w	ip, lr, r0
  4099ae:	ea43 4102 	orr.w	r1, r3, r2, lsl #16
  4099b2:	458c      	cmp	ip, r1
  4099b4:	d907      	bls.n	4099c6 <__udivdi3+0xe6>
  4099b6:	1949      	adds	r1, r1, r5
  4099b8:	f080 80a1 	bcs.w	409afe <__udivdi3+0x21e>
  4099bc:	458c      	cmp	ip, r1
  4099be:	f240 809e 	bls.w	409afe <__udivdi3+0x21e>
  4099c2:	3802      	subs	r0, #2
  4099c4:	4429      	add	r1, r5
  4099c6:	ebcc 0101 	rsb	r1, ip, r1
  4099ca:	b2a4      	uxth	r4, r4
  4099cc:	fbb1 f3f7 	udiv	r3, r1, r7
  4099d0:	fb07 1113 	mls	r1, r7, r3, r1
  4099d4:	fb0e fe03 	mul.w	lr, lr, r3
  4099d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
  4099dc:	45a6      	cmp	lr, r4
  4099de:	d906      	bls.n	4099ee <__udivdi3+0x10e>
  4099e0:	1964      	adds	r4, r4, r5
  4099e2:	f080 8090 	bcs.w	409b06 <__udivdi3+0x226>
  4099e6:	45a6      	cmp	lr, r4
  4099e8:	f240 808d 	bls.w	409b06 <__udivdi3+0x226>
  4099ec:	3b02      	subs	r3, #2
  4099ee:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
  4099f2:	4631      	mov	r1, r6
  4099f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4099f8:	2600      	movs	r6, #0
  4099fa:	4630      	mov	r0, r6
  4099fc:	4631      	mov	r1, r6
  4099fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  409a02:	f1c6 0520 	rsb	r5, r6, #32
  409a06:	40b3      	lsls	r3, r6
  409a08:	fa02 f706 	lsl.w	r7, r2, r6
  409a0c:	fa01 f406 	lsl.w	r4, r1, r6
  409a10:	40ea      	lsrs	r2, r5
  409a12:	40e9      	lsrs	r1, r5
  409a14:	fa20 f505 	lsr.w	r5, r0, r5
  409a18:	431a      	orrs	r2, r3
  409a1a:	4325      	orrs	r5, r4
  409a1c:	ea4f 4c12 	mov.w	ip, r2, lsr #16
  409a20:	ea4f 4e15 	mov.w	lr, r5, lsr #16
  409a24:	b293      	uxth	r3, r2
  409a26:	fbb1 f8fc 	udiv	r8, r1, ip
  409a2a:	fb0c 1118 	mls	r1, ip, r8, r1
  409a2e:	fb03 f408 	mul.w	r4, r3, r8
  409a32:	ea4e 4101 	orr.w	r1, lr, r1, lsl #16
  409a36:	428c      	cmp	r4, r1
  409a38:	d906      	bls.n	409a48 <__udivdi3+0x168>
  409a3a:	1889      	adds	r1, r1, r2
  409a3c:	d269      	bcs.n	409b12 <__udivdi3+0x232>
  409a3e:	428c      	cmp	r4, r1
  409a40:	d967      	bls.n	409b12 <__udivdi3+0x232>
  409a42:	f1a8 0802 	sub.w	r8, r8, #2
  409a46:	4411      	add	r1, r2
  409a48:	1b09      	subs	r1, r1, r4
  409a4a:	b2ad      	uxth	r5, r5
  409a4c:	fbb1 f4fc 	udiv	r4, r1, ip
  409a50:	fb0c 1114 	mls	r1, ip, r4, r1
  409a54:	fb03 fe04 	mul.w	lr, r3, r4
  409a58:	ea45 4301 	orr.w	r3, r5, r1, lsl #16
  409a5c:	459e      	cmp	lr, r3
  409a5e:	d905      	bls.n	409a6c <__udivdi3+0x18c>
  409a60:	189b      	adds	r3, r3, r2
  409a62:	d254      	bcs.n	409b0e <__udivdi3+0x22e>
  409a64:	459e      	cmp	lr, r3
  409a66:	d952      	bls.n	409b0e <__udivdi3+0x22e>
  409a68:	3c02      	subs	r4, #2
  409a6a:	4413      	add	r3, r2
  409a6c:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
  409a70:	ebce 0303 	rsb	r3, lr, r3
  409a74:	fba4 8907 	umull	r8, r9, r4, r7
  409a78:	454b      	cmp	r3, r9
  409a7a:	d303      	bcc.n	409a84 <__udivdi3+0x1a4>
  409a7c:	d151      	bne.n	409b22 <__udivdi3+0x242>
  409a7e:	40b0      	lsls	r0, r6
  409a80:	4540      	cmp	r0, r8
  409a82:	d24e      	bcs.n	409b22 <__udivdi3+0x242>
  409a84:	2600      	movs	r6, #0
  409a86:	1e60      	subs	r0, r4, #1
  409a88:	4631      	mov	r1, r6
  409a8a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  409a8e:	f1c2 0620 	rsb	r6, r2, #32
  409a92:	4095      	lsls	r5, r2
  409a94:	fa01 f302 	lsl.w	r3, r1, r2
  409a98:	fa00 f402 	lsl.w	r4, r0, r2
  409a9c:	0c2f      	lsrs	r7, r5, #16
  409a9e:	40f1      	lsrs	r1, r6
  409aa0:	40f0      	lsrs	r0, r6
  409aa2:	fa1f fe85 	uxth.w	lr, r5
  409aa6:	fbb1 f6f7 	udiv	r6, r1, r7
  409aaa:	4318      	orrs	r0, r3
  409aac:	fb07 1116 	mls	r1, r7, r6, r1
  409ab0:	fb0e f206 	mul.w	r2, lr, r6
  409ab4:	ea4f 4c10 	mov.w	ip, r0, lsr #16
  409ab8:	ea4c 4301 	orr.w	r3, ip, r1, lsl #16
  409abc:	429a      	cmp	r2, r3
  409abe:	d905      	bls.n	409acc <__udivdi3+0x1ec>
  409ac0:	195b      	adds	r3, r3, r5
  409ac2:	d229      	bcs.n	409b18 <__udivdi3+0x238>
  409ac4:	429a      	cmp	r2, r3
  409ac6:	d927      	bls.n	409b18 <__udivdi3+0x238>
  409ac8:	3e02      	subs	r6, #2
  409aca:	442b      	add	r3, r5
  409acc:	1a9b      	subs	r3, r3, r2
  409ace:	b280      	uxth	r0, r0
  409ad0:	fbb3 fcf7 	udiv	ip, r3, r7
  409ad4:	fb07 331c 	mls	r3, r7, ip, r3
  409ad8:	fb0e f10c 	mul.w	r1, lr, ip
  409adc:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
  409ae0:	4299      	cmp	r1, r3
  409ae2:	d906      	bls.n	409af2 <__udivdi3+0x212>
  409ae4:	195b      	adds	r3, r3, r5
  409ae6:	d219      	bcs.n	409b1c <__udivdi3+0x23c>
  409ae8:	4299      	cmp	r1, r3
  409aea:	d917      	bls.n	409b1c <__udivdi3+0x23c>
  409aec:	f1ac 0c02 	sub.w	ip, ip, #2
  409af0:	442b      	add	r3, r5
  409af2:	1a5a      	subs	r2, r3, r1
  409af4:	ea4c 4606 	orr.w	r6, ip, r6, lsl #16
  409af8:	e752      	b.n	4099a0 <__udivdi3+0xc0>
  409afa:	2001      	movs	r0, #1
  409afc:	e732      	b.n	409964 <__udivdi3+0x84>
  409afe:	3801      	subs	r0, #1
  409b00:	e761      	b.n	4099c6 <__udivdi3+0xe6>
  409b02:	3801      	subs	r0, #1
  409b04:	e718      	b.n	409938 <__udivdi3+0x58>
  409b06:	3b01      	subs	r3, #1
  409b08:	e771      	b.n	4099ee <__udivdi3+0x10e>
  409b0a:	3b01      	subs	r3, #1
  409b0c:	e727      	b.n	40995e <__udivdi3+0x7e>
  409b0e:	3c01      	subs	r4, #1
  409b10:	e7ac      	b.n	409a6c <__udivdi3+0x18c>
  409b12:	f108 38ff 	add.w	r8, r8, #4294967295
  409b16:	e797      	b.n	409a48 <__udivdi3+0x168>
  409b18:	3e01      	subs	r6, #1
  409b1a:	e7d7      	b.n	409acc <__udivdi3+0x1ec>
  409b1c:	f10c 3cff 	add.w	ip, ip, #4294967295
  409b20:	e7e7      	b.n	409af2 <__udivdi3+0x212>
  409b22:	4620      	mov	r0, r4
  409b24:	2600      	movs	r6, #0
  409b26:	e71d      	b.n	409964 <__udivdi3+0x84>
  409b28:	00000001 	.word	0x00000001
  409b2c:	00000002 	.word	0x00000002
  409b30:	00000004 	.word	0x00000004
  409b34:	00000008 	.word	0x00000008
  409b38:	00000010 	.word	0x00000010
  409b3c:	00000020 	.word	0x00000020
  409b40:	00000040 	.word	0x00000040
  409b44:	00000080 	.word	0x00000080
  409b48:	00000100 	.word	0x00000100
  409b4c:	00000200 	.word	0x00000200
  409b50:	00000400 	.word	0x00000400
  409b54:	39414350 	.word	0x39414350
  409b58:	3a323539 	.word	0x3a323539
  409b5c:	706d7420 	.word	0x706d7420
  409b60:	25203a31 	.word	0x25203a31
  409b64:	6d742078 	.word	0x6d742078
  409b68:	203a3270 	.word	0x203a3270
  409b6c:	74207825 	.word	0x74207825
  409b70:	3a33706d 	.word	0x3a33706d
  409b74:	20782520 	.word	0x20782520
  409b78:	34706d74 	.word	0x34706d74
  409b7c:	7825203a 	.word	0x7825203a
  409b80:	00000a0d 	.word	0x00000a0d
  409b84:	0001c200 	.word	0x0001c200
  409b88:	000000c0 	.word	0x000000c0
  409b8c:	00000800 	.word	0x00000800
	...
  409b9c:	202d462d 	.word	0x202d462d
  409ba0:	74737953 	.word	0x74737953
  409ba4:	206b6369 	.word	0x206b6369
  409ba8:	666e6f63 	.word	0x666e6f63
  409bac:	72756769 	.word	0x72756769
  409bb0:	6f697461 	.word	0x6f697461
  409bb4:	7265206e 	.word	0x7265206e
  409bb8:	0d726f72 	.word	0x0d726f72
  409bbc:	00000000 	.word	0x00000000
  409bc0:	00000960 	.word	0x00000960
  409bc4:	000000c0 	.word	0x000000c0
  409bc8:	00000800 	.word	0x00000800
  409bcc:	00000000 	.word	0x00000000
  409bd0:	00006325 	.word	0x00006325
  409bd4:	61766e49 	.word	0x61766e49
  409bd8:	2064696c 	.word	0x2064696c
  409bdc:	69726573 	.word	0x69726573
  409be0:	49206c61 	.word	0x49206c61
  409be4:	68632044 	.word	0x68632044
  409be8:	736b6365 	.word	0x736b6365
  409bec:	0d2e6d75 	.word	0x0d2e6d75
  409bf0:	0000000a 	.word	0x0000000a
  409bf4:	2044454c 	.word	0x2044454c
  409bf8:	72616f62 	.word	0x72616f62
  409bfc:	64252064 	.word	0x64252064
  409c00:	72657320 	.word	0x72657320
  409c04:	206c6169 	.word	0x206c6169
  409c08:	203a4449 	.word	0x203a4449
  409c0c:	78257825 	.word	0x78257825
  409c10:	78257825 	.word	0x78257825
  409c14:	78257825 	.word	0x78257825
  409c18:	00000a0d 	.word	0x00000a0d
  409c1c:	62206f6e 	.word	0x62206f6e
  409c20:	6472616f 	.word	0x6472616f
  409c24:	69687420 	.word	0x69687420
  409c28:	6c732073 	.word	0x6c732073
  409c2c:	0a0d746f 	.word	0x0a0d746f
  409c30:	00000000 	.word	0x00000000
  409c34:	64616552 	.word	0x64616552
  409c38:	000a0d79 	.word	0x000a0d79
  409c3c:	61656c43 	.word	0x61656c43
  409c40:	000a0d6e 	.word	0x000a0d6e
  409c44:	74726944 	.word	0x74726944
  409c48:	000a0d79 	.word	0x000a0d79
  409c4c:	6f727245 	.word	0x6f727245
  409c50:	000a0d72 	.word	0x000a0d72
  409c54:	6c656853 	.word	0x6c656853
  409c58:	0a0d3166 	.word	0x0a0d3166
  409c5c:	00000000 	.word	0x00000000
  409c60:	6c656853 	.word	0x6c656853
  409c64:	0a0d3266 	.word	0x0a0d3266
  409c68:	00000000 	.word	0x00000000
  409c6c:	6c656853 	.word	0x6c656853
  409c70:	0a0d3366 	.word	0x0a0d3366
  409c74:	00000000 	.word	0x00000000
  409c78:	6c656853 	.word	0x6c656853
  409c7c:	0a0d3466 	.word	0x0a0d3466
  409c80:	00000000 	.word	0x00000000
  409c84:	3a306863 	.word	0x3a306863
  409c88:	20782520 	.word	0x20782520
  409c8c:	3a316863 	.word	0x3a316863
  409c90:	20782520 	.word	0x20782520
  409c94:	3a326863 	.word	0x3a326863
  409c98:	20782520 	.word	0x20782520
  409c9c:	3a336863 	.word	0x3a336863
  409ca0:	0d782520 	.word	0x0d782520
  409ca4:	0000000a 	.word	0x0000000a
  409ca8:	61656c43 	.word	0x61656c43
  409cac:	676e696e 	.word	0x676e696e
  409cb0:	00000a0d 	.word	0x00000a0d
  409cb4:	00000043 	.word	0x00000043

00409cb8 <_global_impure_ptr>:
  409cb8:	20400088 0000000a                       ..@ ....

00409cc0 <zeroes.6911>:
  409cc0:	30303030 30303030 30303030 30303030     0000000000000000

00409cd0 <blanks.6910>:
  409cd0:	20202020 20202020 20202020 20202020                     
  409ce0:	00464e49 00666e69 004e414e 006e616e     INF.inf.NAN.nan.
  409cf0:	33323130 37363534 42413938 46454443     0123456789ABCDEF
  409d00:	00000000 33323130 37363534 62613938     ....0123456789ab
  409d10:	66656463 00000000 6c756e28 0000296c     cdef....(null)..
  409d20:	00000030 69666e49 7974696e 00000000     0...Infinity....
  409d30:	004e614e 49534f50 00000058 0000002e     NaN.POSIX.......

00409d40 <__mprec_tens>:
  409d40:	00000000 3ff00000 00000000 40240000     .......?......$@
  409d50:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
  409d60:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
  409d70:	00000000 412e8480 00000000 416312d0     .......A......cA
  409d80:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
  409d90:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
  409da0:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
  409db0:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
  409dc0:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
  409dd0:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
  409de0:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
  409df0:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
  409e00:	79d99db4 44ea7843                       ...yCx.D

00409e08 <p05.5302>:
  409e08:	00000005 00000019 0000007d 00000000     ........}.......

00409e18 <__mprec_bigtens>:
  409e18:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
  409e28:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
  409e38:	7f73bf3c 75154fdd                       <.s..O.u

00409e40 <_init>:
  409e40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  409e42:	bf00      	nop
  409e44:	bcf8      	pop	{r3, r4, r5, r6, r7}
  409e46:	bc08      	pop	{r3}
  409e48:	469e      	mov	lr, r3
  409e4a:	4770      	bx	lr

00409e4c <__init_array_start>:
  409e4c:	00405cb1 	.word	0x00405cb1

00409e50 <__frame_dummy_init_array_entry>:
  409e50:	00400165                                e.@.

00409e54 <_fini>:
  409e54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  409e56:	bf00      	nop
  409e58:	bcf8      	pop	{r3, r4, r5, r6, r7}
  409e5a:	bc08      	pop	{r3}
  409e5c:	469e      	mov	lr, r3
  409e5e:	4770      	bx	lr

00409e60 <__fini_array_start>:
  409e60:	00400141 	.word	0x00400141
