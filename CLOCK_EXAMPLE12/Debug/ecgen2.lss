
ecgen2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00008cdc  00400000  00400000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00408cdc  00408cdc  00010cdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000008f4  20400000  00408ce4  00018000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          000008e4  204008f4  004095d8  000188f4  2**2
                  ALLOC
  4 .stack        00002000  204011d8  00409ebc  000188f4  2**0
                  ALLOC
  5 .heap         00000200  204031d8  0040bebc  000188f4  2**0
                  ALLOC
  6 .ARM.attributes 00000033  00000000  00000000  000188f4  2**0
                  CONTENTS, READONLY
  7 .comment      0000005b  00000000  00000000  00018927  2**0
                  CONTENTS, READONLY
  8 .debug_info   0000d6bd  00000000  00000000  00018982  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00001d6f  00000000  00000000  0002603f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00008094  00000000  00000000  00027dae  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000d88  00000000  00000000  0002fe42  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000c88  00000000  00000000  00030bca  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0001e3d6  00000000  00000000  00031852  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000ba3f  00000000  00000000  0004fc28  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0008b3d2  00000000  00000000  0005b667  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000497c  00000000  00000000  000e6a3c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <_sfixed>:
  400000:	204031d8 	.word	0x204031d8
  400004:	004016e1 	.word	0x004016e1
  400008:	00401765 	.word	0x00401765
  40000c:	00401765 	.word	0x00401765
  400010:	00401765 	.word	0x00401765
  400014:	00401765 	.word	0x00401765
  400018:	00401765 	.word	0x00401765
	...
  40002c:	00401765 	.word	0x00401765
  400030:	00401765 	.word	0x00401765
  400034:	00000000 	.word	0x00000000
  400038:	00401765 	.word	0x00401765
  40003c:	00402a0d 	.word	0x00402a0d
  400040:	00401765 	.word	0x00401765
  400044:	00401765 	.word	0x00401765
  400048:	00401765 	.word	0x00401765
  40004c:	00401765 	.word	0x00401765
  400050:	00401765 	.word	0x00401765
  400054:	00401765 	.word	0x00401765
  400058:	00401765 	.word	0x00401765
  40005c:	00401765 	.word	0x00401765
  400060:	00401765 	.word	0x00401765
  400064:	00000000 	.word	0x00000000
  400068:	00400c05 	.word	0x00400c05
  40006c:	00400c1d 	.word	0x00400c1d
  400070:	00400c35 	.word	0x00400c35
  400074:	00402a35 	.word	0x00402a35
  400078:	00401765 	.word	0x00401765
  40007c:	00401765 	.word	0x00401765
  400080:	00400c4d 	.word	0x00400c4d
  400084:	00400c65 	.word	0x00400c65
  400088:	00401765 	.word	0x00401765
  40008c:	00401765 	.word	0x00401765
  400090:	00401765 	.word	0x00401765
  400094:	00401765 	.word	0x00401765
  400098:	00401765 	.word	0x00401765
  40009c:	00401765 	.word	0x00401765
  4000a0:	00401765 	.word	0x00401765
  4000a4:	00401765 	.word	0x00401765
  4000a8:	00401765 	.word	0x00401765
  4000ac:	00401765 	.word	0x00401765
  4000b0:	00401765 	.word	0x00401765
  4000b4:	00401765 	.word	0x00401765
  4000b8:	00401765 	.word	0x00401765
  4000bc:	00401765 	.word	0x00401765
  4000c0:	00401765 	.word	0x00401765
  4000c4:	00401765 	.word	0x00401765
  4000c8:	00401765 	.word	0x00401765
  4000cc:	00401765 	.word	0x00401765
  4000d0:	00000000 	.word	0x00000000
  4000d4:	00401765 	.word	0x00401765
  4000d8:	00000000 	.word	0x00000000
  4000dc:	00401765 	.word	0x00401765
  4000e0:	00401765 	.word	0x00401765
  4000e4:	00401765 	.word	0x00401765
  4000e8:	00401765 	.word	0x00401765
  4000ec:	00401765 	.word	0x00401765
  4000f0:	00401765 	.word	0x00401765
  4000f4:	00401765 	.word	0x00401765
  4000f8:	00401765 	.word	0x00401765
  4000fc:	00401765 	.word	0x00401765
  400100:	00401765 	.word	0x00401765
  400104:	00401765 	.word	0x00401765
  400108:	00401765 	.word	0x00401765
  40010c:	00401765 	.word	0x00401765
  400110:	00401765 	.word	0x00401765
	...
  400120:	00401765 	.word	0x00401765
  400124:	00401765 	.word	0x00401765
  400128:	00401765 	.word	0x00401765
  40012c:	00401765 	.word	0x00401765
  400130:	00401765 	.word	0x00401765
  400134:	00000000 	.word	0x00000000
  400138:	00401765 	.word	0x00401765
  40013c:	00401765 	.word	0x00401765

00400140 <__do_global_dtors_aux>:
  400140:	b510      	push	{r4, lr}
  400142:	4c05      	ldr	r4, [pc, #20]	; (400158 <__do_global_dtors_aux+0x18>)
  400144:	7823      	ldrb	r3, [r4, #0]
  400146:	b933      	cbnz	r3, 400156 <__do_global_dtors_aux+0x16>
  400148:	4b04      	ldr	r3, [pc, #16]	; (40015c <__do_global_dtors_aux+0x1c>)
  40014a:	b113      	cbz	r3, 400152 <__do_global_dtors_aux+0x12>
  40014c:	4804      	ldr	r0, [pc, #16]	; (400160 <__do_global_dtors_aux+0x20>)
  40014e:	f3af 8000 	nop.w
  400152:	2301      	movs	r3, #1
  400154:	7023      	strb	r3, [r4, #0]
  400156:	bd10      	pop	{r4, pc}
  400158:	204008f4 	.word	0x204008f4
  40015c:	00000000 	.word	0x00000000
  400160:	00408ce4 	.word	0x00408ce4

00400164 <frame_dummy>:
  400164:	4b08      	ldr	r3, [pc, #32]	; (400188 <frame_dummy+0x24>)
  400166:	b510      	push	{r4, lr}
  400168:	b11b      	cbz	r3, 400172 <frame_dummy+0xe>
  40016a:	4808      	ldr	r0, [pc, #32]	; (40018c <frame_dummy+0x28>)
  40016c:	4908      	ldr	r1, [pc, #32]	; (400190 <frame_dummy+0x2c>)
  40016e:	f3af 8000 	nop.w
  400172:	4808      	ldr	r0, [pc, #32]	; (400194 <frame_dummy+0x30>)
  400174:	6803      	ldr	r3, [r0, #0]
  400176:	b903      	cbnz	r3, 40017a <frame_dummy+0x16>
  400178:	bd10      	pop	{r4, pc}
  40017a:	4b07      	ldr	r3, [pc, #28]	; (400198 <frame_dummy+0x34>)
  40017c:	2b00      	cmp	r3, #0
  40017e:	d0fb      	beq.n	400178 <frame_dummy+0x14>
  400180:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400184:	4718      	bx	r3
  400186:	bf00      	nop
  400188:	00000000 	.word	0x00000000
  40018c:	00408ce4 	.word	0x00408ce4
  400190:	204008f8 	.word	0x204008f8
  400194:	00408ce4 	.word	0x00408ce4
  400198:	00000000 	.word	0x00000000

0040019c <osc_enable>:
#define OSC_MAINCK_XTAL_HZ      BOARD_FREQ_MAINCK_XTAL    //!< External crystal oscillator.
#define OSC_MAINCK_BYPASS_HZ    BOARD_FREQ_MAINCK_BYPASS  //!< External bypass oscillator.
//@}

static inline void osc_enable(uint32_t ul_id)
{
  40019c:	b580      	push	{r7, lr}
  40019e:	b082      	sub	sp, #8
  4001a0:	af00      	add	r7, sp, #0
  4001a2:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  4001a4:	687b      	ldr	r3, [r7, #4]
  4001a6:	2b07      	cmp	r3, #7
  4001a8:	d830      	bhi.n	40020c <osc_enable+0x70>
  4001aa:	a201      	add	r2, pc, #4	; (adr r2, 4001b0 <osc_enable+0x14>)
  4001ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4001b0:	0040020d 	.word	0x0040020d
  4001b4:	004001d1 	.word	0x004001d1
  4001b8:	004001d9 	.word	0x004001d9
  4001bc:	004001e1 	.word	0x004001e1
  4001c0:	004001e9 	.word	0x004001e9
  4001c4:	004001f1 	.word	0x004001f1
  4001c8:	004001f9 	.word	0x004001f9
  4001cc:	00400203 	.word	0x00400203
	case OSC_SLCK_32K_RC:
		break;

	case OSC_SLCK_32K_XTAL:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
  4001d0:	2000      	movs	r0, #0
  4001d2:	4b10      	ldr	r3, [pc, #64]	; (400214 <osc_enable+0x78>)
  4001d4:	4798      	blx	r3
		break;
  4001d6:	e019      	b.n	40020c <osc_enable+0x70>

	case OSC_SLCK_32K_BYPASS:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
  4001d8:	2001      	movs	r0, #1
  4001da:	4b0e      	ldr	r3, [pc, #56]	; (400214 <osc_enable+0x78>)
  4001dc:	4798      	blx	r3
		break;
  4001de:	e015      	b.n	40020c <osc_enable+0x70>


	case OSC_MAINCK_4M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
  4001e0:	2000      	movs	r0, #0
  4001e2:	4b0d      	ldr	r3, [pc, #52]	; (400218 <osc_enable+0x7c>)
  4001e4:	4798      	blx	r3
		break;
  4001e6:	e011      	b.n	40020c <osc_enable+0x70>

	case OSC_MAINCK_8M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
  4001e8:	2010      	movs	r0, #16
  4001ea:	4b0b      	ldr	r3, [pc, #44]	; (400218 <osc_enable+0x7c>)
  4001ec:	4798      	blx	r3
		break;
  4001ee:	e00d      	b.n	40020c <osc_enable+0x70>

	case OSC_MAINCK_12M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
  4001f0:	2020      	movs	r0, #32
  4001f2:	4b09      	ldr	r3, [pc, #36]	; (400218 <osc_enable+0x7c>)
  4001f4:	4798      	blx	r3
		break;
  4001f6:	e009      	b.n	40020c <osc_enable+0x70>


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  4001f8:	2000      	movs	r0, #0
  4001fa:	213e      	movs	r1, #62	; 0x3e
  4001fc:	4b07      	ldr	r3, [pc, #28]	; (40021c <osc_enable+0x80>)
  4001fe:	4798      	blx	r3
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
  400200:	e004      	b.n	40020c <osc_enable+0x70>

	case OSC_MAINCK_BYPASS:
		pmc_switch_mainck_to_xtal(PMC_OSC_BYPASS,
  400202:	2001      	movs	r0, #1
  400204:	213e      	movs	r1, #62	; 0x3e
  400206:	4b05      	ldr	r3, [pc, #20]	; (40021c <osc_enable+0x80>)
  400208:	4798      	blx	r3
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
  40020a:	bf00      	nop
	}
}
  40020c:	3708      	adds	r7, #8
  40020e:	46bd      	mov	sp, r7
  400210:	bd80      	pop	{r7, pc}
  400212:	bf00      	nop
  400214:	00400d79 	.word	0x00400d79
  400218:	00400de5 	.word	0x00400de5
  40021c:	00400e55 	.word	0x00400e55

00400220 <osc_is_ready>:
		break;
	}
}

static inline bool osc_is_ready(uint32_t ul_id)
{
  400220:	b580      	push	{r7, lr}
  400222:	b082      	sub	sp, #8
  400224:	af00      	add	r7, sp, #0
  400226:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  400228:	687b      	ldr	r3, [r7, #4]
  40022a:	2b07      	cmp	r3, #7
  40022c:	d826      	bhi.n	40027c <osc_is_ready+0x5c>
  40022e:	a201      	add	r2, pc, #4	; (adr r2, 400234 <osc_is_ready+0x14>)
  400230:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  400234:	00400255 	.word	0x00400255
  400238:	00400259 	.word	0x00400259
  40023c:	00400259 	.word	0x00400259
  400240:	0040026b 	.word	0x0040026b
  400244:	0040026b 	.word	0x0040026b
  400248:	0040026b 	.word	0x0040026b
  40024c:	0040026b 	.word	0x0040026b
  400250:	0040026b 	.word	0x0040026b
	case OSC_SLCK_32K_RC:
		return 1;
  400254:	2301      	movs	r3, #1
  400256:	e012      	b.n	40027e <osc_is_ready+0x5e>

	case OSC_SLCK_32K_XTAL:
	case OSC_SLCK_32K_BYPASS:
		return pmc_osc_is_ready_32kxtal();
  400258:	4b0b      	ldr	r3, [pc, #44]	; (400288 <osc_is_ready+0x68>)
  40025a:	4798      	blx	r3
  40025c:	4603      	mov	r3, r0
  40025e:	2b00      	cmp	r3, #0
  400260:	bf14      	ite	ne
  400262:	2301      	movne	r3, #1
  400264:	2300      	moveq	r3, #0
  400266:	b2db      	uxtb	r3, r3
  400268:	e009      	b.n	40027e <osc_is_ready+0x5e>
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  40026a:	4b08      	ldr	r3, [pc, #32]	; (40028c <osc_is_ready+0x6c>)
  40026c:	4798      	blx	r3
  40026e:	4603      	mov	r3, r0
  400270:	2b00      	cmp	r3, #0
  400272:	bf14      	ite	ne
  400274:	2301      	movne	r3, #1
  400276:	2300      	moveq	r3, #0
  400278:	b2db      	uxtb	r3, r3
  40027a:	e000      	b.n	40027e <osc_is_ready+0x5e>
	}

	return 0;
  40027c:	2300      	movs	r3, #0
}
  40027e:	4618      	mov	r0, r3
  400280:	3708      	adds	r7, #8
  400282:	46bd      	mov	sp, r7
  400284:	bd80      	pop	{r7, pc}
  400286:	bf00      	nop
  400288:	00400db1 	.word	0x00400db1
  40028c:	00400ecd 	.word	0x00400ecd

00400290 <osc_get_rate>:

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  400290:	b480      	push	{r7}
  400292:	b083      	sub	sp, #12
  400294:	af00      	add	r7, sp, #0
  400296:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  400298:	687b      	ldr	r3, [r7, #4]
  40029a:	2b07      	cmp	r3, #7
  40029c:	d825      	bhi.n	4002ea <osc_get_rate+0x5a>
  40029e:	a201      	add	r2, pc, #4	; (adr r2, 4002a4 <osc_get_rate+0x14>)
  4002a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4002a4:	004002c5 	.word	0x004002c5
  4002a8:	004002cb 	.word	0x004002cb
  4002ac:	004002d1 	.word	0x004002d1
  4002b0:	004002d7 	.word	0x004002d7
  4002b4:	004002db 	.word	0x004002db
  4002b8:	004002df 	.word	0x004002df
  4002bc:	004002e3 	.word	0x004002e3
  4002c0:	004002e7 	.word	0x004002e7
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  4002c4:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  4002c8:	e010      	b.n	4002ec <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  4002ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4002ce:	e00d      	b.n	4002ec <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  4002d0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4002d4:	e00a      	b.n	4002ec <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  4002d6:	4b08      	ldr	r3, [pc, #32]	; (4002f8 <osc_get_rate+0x68>)
  4002d8:	e008      	b.n	4002ec <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  4002da:	4b08      	ldr	r3, [pc, #32]	; (4002fc <osc_get_rate+0x6c>)
  4002dc:	e006      	b.n	4002ec <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  4002de:	4b08      	ldr	r3, [pc, #32]	; (400300 <osc_get_rate+0x70>)
  4002e0:	e004      	b.n	4002ec <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  4002e2:	4b08      	ldr	r3, [pc, #32]	; (400304 <osc_get_rate+0x74>)
  4002e4:	e002      	b.n	4002ec <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  4002e6:	4b06      	ldr	r3, [pc, #24]	; (400300 <osc_get_rate+0x70>)
  4002e8:	e000      	b.n	4002ec <osc_get_rate+0x5c>
	}

	return 0;
  4002ea:	2300      	movs	r3, #0
}
  4002ec:	4618      	mov	r0, r3
  4002ee:	370c      	adds	r7, #12
  4002f0:	46bd      	mov	sp, r7
  4002f2:	f85d 7b04 	ldr.w	r7, [sp], #4
  4002f6:	4770      	bx	lr
  4002f8:	003d0900 	.word	0x003d0900
  4002fc:	007a1200 	.word	0x007a1200
  400300:	00b71b00 	.word	0x00b71b00
  400304:	00f42400 	.word	0x00f42400

00400308 <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
  400308:	b580      	push	{r7, lr}
  40030a:	b082      	sub	sp, #8
  40030c:	af00      	add	r7, sp, #0
  40030e:	4603      	mov	r3, r0
  400310:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
  400312:	bf00      	nop
  400314:	79fb      	ldrb	r3, [r7, #7]
  400316:	4618      	mov	r0, r3
  400318:	4b05      	ldr	r3, [pc, #20]	; (400330 <osc_wait_ready+0x28>)
  40031a:	4798      	blx	r3
  40031c:	4603      	mov	r3, r0
  40031e:	f083 0301 	eor.w	r3, r3, #1
  400322:	b2db      	uxtb	r3, r3
  400324:	2b00      	cmp	r3, #0
  400326:	d1f5      	bne.n	400314 <osc_wait_ready+0xc>
		/* Do nothing */
	}
}
  400328:	3708      	adds	r7, #8
  40032a:	46bd      	mov	sp, r7
  40032c:	bd80      	pop	{r7, pc}
  40032e:	bf00      	nop
  400330:	00400221 	.word	0x00400221

00400334 <pll_config_init>:
 * hardware mul+1 is hidden in this implementation. Use mul as mul effective
 * value.
 */
static inline void pll_config_init(struct pll_config *p_cfg,
		enum pll_source e_src, uint32_t ul_div, uint32_t ul_mul)
{
  400334:	b580      	push	{r7, lr}
  400336:	b086      	sub	sp, #24
  400338:	af00      	add	r7, sp, #0
  40033a:	60f8      	str	r0, [r7, #12]
  40033c:	607a      	str	r2, [r7, #4]
  40033e:	603b      	str	r3, [r7, #0]
  400340:	460b      	mov	r3, r1
  400342:	72fb      	strb	r3, [r7, #11]
	uint32_t vco_hz;

	Assert(e_src < PLL_NR_SOURCES);

	if (ul_div == 0 && ul_mul == 0) { /* Must only be true for UTMI PLL */
  400344:	687b      	ldr	r3, [r7, #4]
  400346:	2b00      	cmp	r3, #0
  400348:	d107      	bne.n	40035a <pll_config_init+0x26>
  40034a:	683b      	ldr	r3, [r7, #0]
  40034c:	2b00      	cmp	r3, #0
  40034e:	d104      	bne.n	40035a <pll_config_init+0x26>
		p_cfg->ctrl = CKGR_UCKR_UPLLCOUNT(PLL_COUNT);
  400350:	68fb      	ldr	r3, [r7, #12]
  400352:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
  400356:	601a      	str	r2, [r3, #0]
  400358:	e019      	b.n	40038e <pll_config_init+0x5a>
	} else { /* PLLA */
	/* Calculate internal VCO frequency */
	vco_hz = osc_get_rate(e_src) / ul_div;
  40035a:	7afb      	ldrb	r3, [r7, #11]
  40035c:	4618      	mov	r0, r3
  40035e:	4b0d      	ldr	r3, [pc, #52]	; (400394 <pll_config_init+0x60>)
  400360:	4798      	blx	r3
  400362:	4602      	mov	r2, r0
  400364:	687b      	ldr	r3, [r7, #4]
  400366:	fbb2 f3f3 	udiv	r3, r2, r3
  40036a:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_INPUT_MIN_HZ);
	Assert(vco_hz <= PLL_INPUT_MAX_HZ);

	vco_hz *= ul_mul;
  40036c:	697b      	ldr	r3, [r7, #20]
  40036e:	683a      	ldr	r2, [r7, #0]
  400370:	fb02 f303 	mul.w	r3, r2, r3
  400374:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_OUTPUT_MIN_HZ);
	Assert(vco_hz <= PLL_OUTPUT_MAX_HZ);

	/* PMC hardware will automatically make it mul+1 */
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) | CKGR_PLLAR_DIVA(ul_div)  \
  400376:	683b      	ldr	r3, [r7, #0]
  400378:	3b01      	subs	r3, #1
  40037a:	041a      	lsls	r2, r3, #16
  40037c:	4b06      	ldr	r3, [pc, #24]	; (400398 <pll_config_init+0x64>)
  40037e:	4013      	ands	r3, r2
  400380:	687a      	ldr	r2, [r7, #4]
  400382:	b2d2      	uxtb	r2, r2
  400384:	4313      	orrs	r3, r2
		| CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
  400386:	f443 527c 	orr.w	r2, r3, #16128	; 0x3f00
	vco_hz *= ul_mul;
	Assert(vco_hz >= PLL_OUTPUT_MIN_HZ);
	Assert(vco_hz <= PLL_OUTPUT_MAX_HZ);

	/* PMC hardware will automatically make it mul+1 */
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) | CKGR_PLLAR_DIVA(ul_div)  \
  40038a:	68fb      	ldr	r3, [r7, #12]
  40038c:	601a      	str	r2, [r3, #0]
		| CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
	}
}
  40038e:	3718      	adds	r7, #24
  400390:	46bd      	mov	sp, r7
  400392:	bd80      	pop	{r7, pc}
  400394:	00400291 	.word	0x00400291
  400398:	07ff0000 	.word	0x07ff0000

0040039c <pll_enable>:
		PMC->CKGR_UCKR = p_cfg->ctrl;
	}
}

static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
  40039c:	b580      	push	{r7, lr}
  40039e:	b082      	sub	sp, #8
  4003a0:	af00      	add	r7, sp, #0
  4003a2:	6078      	str	r0, [r7, #4]
  4003a4:	6039      	str	r1, [r7, #0]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  4003a6:	683b      	ldr	r3, [r7, #0]
  4003a8:	2b00      	cmp	r3, #0
  4003aa:	d108      	bne.n	4003be <pll_enable+0x22>
		pmc_disable_pllack(); // Always stop PLL first!
  4003ac:	4b08      	ldr	r3, [pc, #32]	; (4003d0 <pll_enable+0x34>)
  4003ae:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  4003b0:	4a08      	ldr	r2, [pc, #32]	; (4003d4 <pll_enable+0x38>)
  4003b2:	687b      	ldr	r3, [r7, #4]
  4003b4:	681b      	ldr	r3, [r3, #0]
  4003b6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  4003ba:	6293      	str	r3, [r2, #40]	; 0x28
  4003bc:	e005      	b.n	4003ca <pll_enable+0x2e>
	} else {
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
  4003be:	4a05      	ldr	r2, [pc, #20]	; (4003d4 <pll_enable+0x38>)
  4003c0:	687b      	ldr	r3, [r7, #4]
  4003c2:	681b      	ldr	r3, [r3, #0]
  4003c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  4003c8:	61d3      	str	r3, [r2, #28]
	}
}
  4003ca:	3708      	adds	r7, #8
  4003cc:	46bd      	mov	sp, r7
  4003ce:	bd80      	pop	{r7, pc}
  4003d0:	00400ee9 	.word	0x00400ee9
  4003d4:	400e0600 	.word	0x400e0600

004003d8 <pll_is_locked>:
		PMC->CKGR_UCKR &= ~CKGR_UCKR_UPLLEN;
	}
}

static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
  4003d8:	b580      	push	{r7, lr}
  4003da:	b082      	sub	sp, #8
  4003dc:	af00      	add	r7, sp, #0
  4003de:	6078      	str	r0, [r7, #4]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  4003e0:	687b      	ldr	r3, [r7, #4]
  4003e2:	2b00      	cmp	r3, #0
  4003e4:	d103      	bne.n	4003ee <pll_is_locked+0x16>
	return pmc_is_locked_pllack();
  4003e6:	4b05      	ldr	r3, [pc, #20]	; (4003fc <pll_is_locked+0x24>)
  4003e8:	4798      	blx	r3
  4003ea:	4603      	mov	r3, r0
  4003ec:	e002      	b.n	4003f4 <pll_is_locked+0x1c>
	} else {
		return pmc_is_locked_upll();
  4003ee:	4b04      	ldr	r3, [pc, #16]	; (400400 <pll_is_locked+0x28>)
  4003f0:	4798      	blx	r3
  4003f2:	4603      	mov	r3, r0
	}
}
  4003f4:	4618      	mov	r0, r3
  4003f6:	3708      	adds	r7, #8
  4003f8:	46bd      	mov	sp, r7
  4003fa:	bd80      	pop	{r7, pc}
  4003fc:	00400f01 	.word	0x00400f01
  400400:	00400f1d 	.word	0x00400f1d

00400404 <pll_enable_source>:

static inline void pll_enable_source(enum pll_source e_src)
{
  400404:	b580      	push	{r7, lr}
  400406:	b082      	sub	sp, #8
  400408:	af00      	add	r7, sp, #0
  40040a:	4603      	mov	r3, r0
  40040c:	71fb      	strb	r3, [r7, #7]
	switch (e_src) {
  40040e:	79fb      	ldrb	r3, [r7, #7]
  400410:	3b03      	subs	r3, #3
  400412:	2b04      	cmp	r3, #4
  400414:	d808      	bhi.n	400428 <pll_enable_source+0x24>
	case PLL_SRC_MAINCK_4M_RC:
	case PLL_SRC_MAINCK_8M_RC:
	case PLL_SRC_MAINCK_12M_RC:
	case PLL_SRC_MAINCK_XTAL:
	case PLL_SRC_MAINCK_BYPASS:
		osc_enable(e_src);
  400416:	79fb      	ldrb	r3, [r7, #7]
  400418:	4618      	mov	r0, r3
  40041a:	4b05      	ldr	r3, [pc, #20]	; (400430 <pll_enable_source+0x2c>)
  40041c:	4798      	blx	r3
		osc_wait_ready(e_src);
  40041e:	79fb      	ldrb	r3, [r7, #7]
  400420:	4618      	mov	r0, r3
  400422:	4b04      	ldr	r3, [pc, #16]	; (400434 <pll_enable_source+0x30>)
  400424:	4798      	blx	r3
		break;
  400426:	e000      	b.n	40042a <pll_enable_source+0x26>

	default:
		Assert(false);
		break;
  400428:	bf00      	nop
	}
}
  40042a:	3708      	adds	r7, #8
  40042c:	46bd      	mov	sp, r7
  40042e:	bd80      	pop	{r7, pc}
  400430:	0040019d 	.word	0x0040019d
  400434:	00400309 	.word	0x00400309

00400438 <pll_wait_for_lock>:
 *
 * \retval STATUS_OK The PLL is now locked.
 * \retval ERR_TIMEOUT Timed out waiting for PLL to become locked.
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
  400438:	b580      	push	{r7, lr}
  40043a:	b082      	sub	sp, #8
  40043c:	af00      	add	r7, sp, #0
  40043e:	6078      	str	r0, [r7, #4]
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  400440:	bf00      	nop
  400442:	6878      	ldr	r0, [r7, #4]
  400444:	4b04      	ldr	r3, [pc, #16]	; (400458 <pll_wait_for_lock+0x20>)
  400446:	4798      	blx	r3
  400448:	4603      	mov	r3, r0
  40044a:	2b00      	cmp	r3, #0
  40044c:	d0f9      	beq.n	400442 <pll_wait_for_lock+0xa>
		/* Do nothing */
	}

	return 0;
  40044e:	2300      	movs	r3, #0
}
  400450:	4618      	mov	r0, r3
  400452:	3708      	adds	r7, #8
  400454:	46bd      	mov	sp, r7
  400456:	bd80      	pop	{r7, pc}
  400458:	004003d9 	.word	0x004003d9

0040045c <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  40045c:	b580      	push	{r7, lr}
  40045e:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  400460:	2006      	movs	r0, #6
  400462:	4b05      	ldr	r3, [pc, #20]	; (400478 <sysclk_get_main_hz+0x1c>)
  400464:	4798      	blx	r3
  400466:	4602      	mov	r2, r0
  400468:	4613      	mov	r3, r2
  40046a:	009b      	lsls	r3, r3, #2
  40046c:	4413      	add	r3, r2
  40046e:	009a      	lsls	r2, r3, #2
  400470:	4413      	add	r3, r2
  400472:	089b      	lsrs	r3, r3, #2
#endif
	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  400474:	4618      	mov	r0, r3
  400476:	bd80      	pop	{r7, pc}
  400478:	00400291 	.word	0x00400291

0040047c <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
  40047c:	b580      	push	{r7, lr}
  40047e:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  400480:	4b02      	ldr	r3, [pc, #8]	; (40048c <sysclk_get_cpu_hz+0x10>)
  400482:	4798      	blx	r3
  400484:	4603      	mov	r3, r0
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  400486:	4618      	mov	r0, r3
  400488:	bd80      	pop	{r7, pc}
  40048a:	bf00      	nop
  40048c:	0040045d 	.word	0x0040045d

00400490 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  400490:	b590      	push	{r4, r7, lr}
  400492:	b083      	sub	sp, #12
  400494:	af00      	add	r7, sp, #0
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  400496:	4813      	ldr	r0, [pc, #76]	; (4004e4 <sysclk_init+0x54>)
  400498:	4b13      	ldr	r3, [pc, #76]	; (4004e8 <sysclk_init+0x58>)
  40049a:	4798      	blx	r3
		pmc_switch_mck_to_mainck(CONFIG_SYSCLK_PRES);
	}

#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
  40049c:	2006      	movs	r0, #6
  40049e:	4b13      	ldr	r3, [pc, #76]	; (4004ec <sysclk_init+0x5c>)
  4004a0:	4798      	blx	r3
		pll_config_defaults(&pllcfg, 0);
  4004a2:	1d3b      	adds	r3, r7, #4
  4004a4:	4618      	mov	r0, r3
  4004a6:	2106      	movs	r1, #6
  4004a8:	2204      	movs	r2, #4
  4004aa:	2319      	movs	r3, #25
  4004ac:	4c10      	ldr	r4, [pc, #64]	; (4004f0 <sysclk_init+0x60>)
  4004ae:	47a0      	blx	r4
		pll_enable(&pllcfg, 0);
  4004b0:	1d3b      	adds	r3, r7, #4
  4004b2:	4618      	mov	r0, r3
  4004b4:	2100      	movs	r1, #0
  4004b6:	4b0f      	ldr	r3, [pc, #60]	; (4004f4 <sysclk_init+0x64>)
  4004b8:	4798      	blx	r3
		pll_wait_for_lock(0);
  4004ba:	2000      	movs	r0, #0
  4004bc:	4b0e      	ldr	r3, [pc, #56]	; (4004f8 <sysclk_init+0x68>)
  4004be:	4798      	blx	r3
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  4004c0:	2001      	movs	r0, #1
  4004c2:	4b0e      	ldr	r3, [pc, #56]	; (4004fc <sysclk_init+0x6c>)
  4004c4:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  4004c6:	2000      	movs	r0, #0
  4004c8:	4b0d      	ldr	r3, [pc, #52]	; (400500 <sysclk_init+0x70>)
  4004ca:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  4004cc:	4b0d      	ldr	r3, [pc, #52]	; (400504 <sysclk_init+0x74>)
  4004ce:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  4004d0:	4b0d      	ldr	r3, [pc, #52]	; (400508 <sysclk_init+0x78>)
  4004d2:	4798      	blx	r3
  4004d4:	4603      	mov	r3, r0
  4004d6:	4618      	mov	r0, r3
  4004d8:	4b03      	ldr	r3, [pc, #12]	; (4004e8 <sysclk_init+0x58>)
  4004da:	4798      	blx	r3

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
  4004dc:	370c      	adds	r7, #12
  4004de:	46bd      	mov	sp, r7
  4004e0:	bd90      	pop	{r4, r7, pc}
  4004e2:	bf00      	nop
  4004e4:	11e1a300 	.word	0x11e1a300
  4004e8:	004018d5 	.word	0x004018d5
  4004ec:	00400405 	.word	0x00400405
  4004f0:	00400335 	.word	0x00400335
  4004f4:	0040039d 	.word	0x0040039d
  4004f8:	00400439 	.word	0x00400439
  4004fc:	00400c7d 	.word	0x00400c7d
  400500:	00400cf5 	.word	0x00400cf5
  400504:	0040176d 	.word	0x0040176d
  400508:	0040047d 	.word	0x0040047d

0040050c <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  40050c:	b580      	push	{r7, lr}
  40050e:	b086      	sub	sp, #24
  400510:	af00      	add	r7, sp, #0
  400512:	60f8      	str	r0, [r7, #12]
  400514:	60b9      	str	r1, [r7, #8]
  400516:	607a      	str	r2, [r7, #4]
	int nChars = 0;
  400518:	2300      	movs	r3, #0
  40051a:	617b      	str	r3, [r7, #20]

	if (file != 0) {
  40051c:	68fb      	ldr	r3, [r7, #12]
  40051e:	2b00      	cmp	r3, #0
  400520:	d002      	beq.n	400528 <_read+0x1c>
		return -1;
  400522:	f04f 33ff 	mov.w	r3, #4294967295
  400526:	e014      	b.n	400552 <_read+0x46>
	}

	for (; len > 0; --len) {
  400528:	e00f      	b.n	40054a <_read+0x3e>
		ptr_get(stdio_base, ptr);
  40052a:	4b0c      	ldr	r3, [pc, #48]	; (40055c <_read+0x50>)
  40052c:	681b      	ldr	r3, [r3, #0]
  40052e:	4a0c      	ldr	r2, [pc, #48]	; (400560 <_read+0x54>)
  400530:	6812      	ldr	r2, [r2, #0]
  400532:	4610      	mov	r0, r2
  400534:	68b9      	ldr	r1, [r7, #8]
  400536:	4798      	blx	r3
		ptr++;
  400538:	68bb      	ldr	r3, [r7, #8]
  40053a:	3301      	adds	r3, #1
  40053c:	60bb      	str	r3, [r7, #8]
		nChars++;
  40053e:	697b      	ldr	r3, [r7, #20]
  400540:	3301      	adds	r3, #1
  400542:	617b      	str	r3, [r7, #20]

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
  400544:	687b      	ldr	r3, [r7, #4]
  400546:	3b01      	subs	r3, #1
  400548:	607b      	str	r3, [r7, #4]
  40054a:	687b      	ldr	r3, [r7, #4]
  40054c:	2b00      	cmp	r3, #0
  40054e:	dcec      	bgt.n	40052a <_read+0x1e>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
  400550:	697b      	ldr	r3, [r7, #20]
}
  400552:	4618      	mov	r0, r3
  400554:	3718      	adds	r7, #24
  400556:	46bd      	mov	sp, r7
  400558:	bd80      	pop	{r7, pc}
  40055a:	bf00      	nop
  40055c:	204009c8 	.word	0x204009c8
  400560:	204009d0 	.word	0x204009d0

00400564 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
  400564:	b580      	push	{r7, lr}
  400566:	b086      	sub	sp, #24
  400568:	af00      	add	r7, sp, #0
  40056a:	60f8      	str	r0, [r7, #12]
  40056c:	60b9      	str	r1, [r7, #8]
  40056e:	607a      	str	r2, [r7, #4]
	int nChars = 0;
  400570:	2300      	movs	r3, #0
  400572:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
  400574:	68fb      	ldr	r3, [r7, #12]
  400576:	2b01      	cmp	r3, #1
  400578:	d008      	beq.n	40058c <_write+0x28>
  40057a:	68fb      	ldr	r3, [r7, #12]
  40057c:	2b02      	cmp	r3, #2
  40057e:	d005      	beq.n	40058c <_write+0x28>
  400580:	68fb      	ldr	r3, [r7, #12]
  400582:	2b03      	cmp	r3, #3
  400584:	d002      	beq.n	40058c <_write+0x28>
		return -1;
  400586:	f04f 33ff 	mov.w	r3, #4294967295
  40058a:	e01a      	b.n	4005c2 <_write+0x5e>
	}

	for (; len != 0; --len) {
  40058c:	e015      	b.n	4005ba <_write+0x56>
		if (ptr_put(stdio_base, *ptr++) < 0) {
  40058e:	4b0f      	ldr	r3, [pc, #60]	; (4005cc <_write+0x68>)
  400590:	681a      	ldr	r2, [r3, #0]
  400592:	4b0f      	ldr	r3, [pc, #60]	; (4005d0 <_write+0x6c>)
  400594:	6818      	ldr	r0, [r3, #0]
  400596:	68bb      	ldr	r3, [r7, #8]
  400598:	1c59      	adds	r1, r3, #1
  40059a:	60b9      	str	r1, [r7, #8]
  40059c:	781b      	ldrb	r3, [r3, #0]
  40059e:	4619      	mov	r1, r3
  4005a0:	4790      	blx	r2
  4005a2:	4603      	mov	r3, r0
  4005a4:	2b00      	cmp	r3, #0
  4005a6:	da02      	bge.n	4005ae <_write+0x4a>
			return -1;
  4005a8:	f04f 33ff 	mov.w	r3, #4294967295
  4005ac:	e009      	b.n	4005c2 <_write+0x5e>
		}
		++nChars;
  4005ae:	697b      	ldr	r3, [r7, #20]
  4005b0:	3301      	adds	r3, #1
  4005b2:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
  4005b4:	687b      	ldr	r3, [r7, #4]
  4005b6:	3b01      	subs	r3, #1
  4005b8:	607b      	str	r3, [r7, #4]
  4005ba:	687b      	ldr	r3, [r7, #4]
  4005bc:	2b00      	cmp	r3, #0
  4005be:	d1e6      	bne.n	40058e <_write+0x2a>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
	}
	return nChars;
  4005c0:	697b      	ldr	r3, [r7, #20]
}
  4005c2:	4618      	mov	r0, r3
  4005c4:	3718      	adds	r7, #24
  4005c6:	46bd      	mov	sp, r7
  4005c8:	bd80      	pop	{r7, pc}
  4005ca:	bf00      	nop
  4005cc:	204009cc 	.word	0x204009cc
  4005d0:	204009d0 	.word	0x204009d0

004005d4 <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
  4005d4:	b580      	push	{r7, lr}
  4005d6:	b082      	sub	sp, #8
  4005d8:	af00      	add	r7, sp, #0
  4005da:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  4005dc:	6878      	ldr	r0, [r7, #4]
  4005de:	4b02      	ldr	r3, [pc, #8]	; (4005e8 <sysclk_enable_peripheral_clock+0x14>)
  4005e0:	4798      	blx	r3
}
  4005e2:	3708      	adds	r7, #8
  4005e4:	46bd      	mov	sp, r7
  4005e6:	bd80      	pop	{r7, pc}
  4005e8:	00400f39 	.word	0x00400f39

004005ec <ioport_init>:
 *
 * This function must be called before using any other functions in the IOPORT
 * service.
 */
static inline void ioport_init(void)
{
  4005ec:	b580      	push	{r7, lr}
  4005ee:	af00      	add	r7, sp, #0
}

__always_inline static void arch_ioport_init(void)
{
#ifdef ID_PIOA
	sysclk_enable_peripheral_clock(ID_PIOA);
  4005f0:	200a      	movs	r0, #10
  4005f2:	4b07      	ldr	r3, [pc, #28]	; (400610 <ioport_init+0x24>)
  4005f4:	4798      	blx	r3
#endif
#ifdef ID_PIOB
	sysclk_enable_peripheral_clock(ID_PIOB);
  4005f6:	200b      	movs	r0, #11
  4005f8:	4b05      	ldr	r3, [pc, #20]	; (400610 <ioport_init+0x24>)
  4005fa:	4798      	blx	r3
#endif
#ifdef ID_PIOC
	sysclk_enable_peripheral_clock(ID_PIOC);
  4005fc:	200c      	movs	r0, #12
  4005fe:	4b04      	ldr	r3, [pc, #16]	; (400610 <ioport_init+0x24>)
  400600:	4798      	blx	r3
#endif
#ifdef ID_PIOD
	sysclk_enable_peripheral_clock(ID_PIOD);
  400602:	2010      	movs	r0, #16
  400604:	4b02      	ldr	r3, [pc, #8]	; (400610 <ioport_init+0x24>)
  400606:	4798      	blx	r3
#endif
#ifdef ID_PIOE
	sysclk_enable_peripheral_clock(ID_PIOE);
  400608:	2011      	movs	r0, #17
  40060a:	4b01      	ldr	r3, [pc, #4]	; (400610 <ioport_init+0x24>)
  40060c:	4798      	blx	r3
	arch_ioport_init();
}
  40060e:	bd80      	pop	{r7, pc}
  400610:	004005d5 	.word	0x004005d5

00400614 <ioport_disable_pin>:
 *        IOPORT_CREATE_PIN().
 *
 * \param pin IOPORT pin to disable
 */
static inline void ioport_disable_pin(ioport_pin_t pin)
{
  400614:	b480      	push	{r7}
  400616:	b089      	sub	sp, #36	; 0x24
  400618:	af00      	add	r7, sp, #0
  40061a:	6078      	str	r0, [r7, #4]
  40061c:	687b      	ldr	r3, [r7, #4]
  40061e:	61fb      	str	r3, [r7, #28]
  400620:	69fb      	ldr	r3, [r7, #28]
  400622:	61bb      	str	r3, [r7, #24]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  400624:	69bb      	ldr	r3, [r7, #24]
  400626:	095a      	lsrs	r2, r3, #5
  400628:	69fb      	ldr	r3, [r7, #28]
  40062a:	617b      	str	r3, [r7, #20]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  40062c:	697b      	ldr	r3, [r7, #20]
  40062e:	f003 031f 	and.w	r3, r3, #31
  400632:	2101      	movs	r1, #1
  400634:	fa01 f303 	lsl.w	r3, r1, r3
  400638:	613a      	str	r2, [r7, #16]
  40063a:	60fb      	str	r3, [r7, #12]
  40063c:	693b      	ldr	r3, [r7, #16]
  40063e:	60bb      	str	r3, [r7, #8]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  400640:	68ba      	ldr	r2, [r7, #8]
  400642:	4b05      	ldr	r3, [pc, #20]	; (400658 <ioport_disable_pin+0x44>)
  400644:	4413      	add	r3, r2
  400646:	025b      	lsls	r3, r3, #9
  400648:	461a      	mov	r2, r3
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  40064a:	68fb      	ldr	r3, [r7, #12]
  40064c:	6053      	str	r3, [r2, #4]
	arch_ioport_disable_pin(pin);
}
  40064e:	3724      	adds	r7, #36	; 0x24
  400650:	46bd      	mov	sp, r7
  400652:	f85d 7b04 	ldr.w	r7, [sp], #4
  400656:	4770      	bx	lr
  400658:	00200707 	.word	0x00200707

0040065c <ioport_disable_port>:
 * \param port IOPORT port to disable
 * \param mask Pin mask of pins to disable
 */
static inline void ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
  40065c:	b480      	push	{r7}
  40065e:	b087      	sub	sp, #28
  400660:	af00      	add	r7, sp, #0
  400662:	6078      	str	r0, [r7, #4]
  400664:	6039      	str	r1, [r7, #0]
  400666:	687b      	ldr	r3, [r7, #4]
  400668:	617b      	str	r3, [r7, #20]
  40066a:	683b      	ldr	r3, [r7, #0]
  40066c:	613b      	str	r3, [r7, #16]
  40066e:	697b      	ldr	r3, [r7, #20]
  400670:	60fb      	str	r3, [r7, #12]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  400672:	68fa      	ldr	r2, [r7, #12]
  400674:	4b05      	ldr	r3, [pc, #20]	; (40068c <ioport_disable_port+0x30>)
  400676:	4413      	add	r3, r2
  400678:	025b      	lsls	r3, r3, #9
  40067a:	461a      	mov	r2, r3
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  40067c:	693b      	ldr	r3, [r7, #16]
  40067e:	6053      	str	r3, [r2, #4]
	arch_ioport_disable_port(port, mask);
}
  400680:	371c      	adds	r7, #28
  400682:	46bd      	mov	sp, r7
  400684:	f85d 7b04 	ldr.w	r7, [sp], #4
  400688:	4770      	bx	lr
  40068a:	bf00      	nop
  40068c:	00200707 	.word	0x00200707

00400690 <ioport_set_port_mode>:
 * \param mode Mode masks to configure for the specified pins (\ref
 * ioport_modes)
 */
static inline void ioport_set_port_mode(ioport_port_t port,
		ioport_port_mask_t mask, ioport_mode_t mode)
{
  400690:	b480      	push	{r7}
  400692:	b08b      	sub	sp, #44	; 0x2c
  400694:	af00      	add	r7, sp, #0
  400696:	60f8      	str	r0, [r7, #12]
  400698:	60b9      	str	r1, [r7, #8]
  40069a:	607a      	str	r2, [r7, #4]
  40069c:	68fb      	ldr	r3, [r7, #12]
  40069e:	627b      	str	r3, [r7, #36]	; 0x24
  4006a0:	68bb      	ldr	r3, [r7, #8]
  4006a2:	623b      	str	r3, [r7, #32]
  4006a4:	687b      	ldr	r3, [r7, #4]
  4006a6:	61fb      	str	r3, [r7, #28]
  4006a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4006aa:	61bb      	str	r3, [r7, #24]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  4006ac:	69ba      	ldr	r2, [r7, #24]
  4006ae:	4b37      	ldr	r3, [pc, #220]	; (40078c <ioport_set_port_mode+0xfc>)
  4006b0:	4413      	add	r3, r2
  4006b2:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_port_mode(ioport_port_t port,
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);
  4006b4:	617b      	str	r3, [r7, #20]

	if (mode & IOPORT_MODE_PULLUP) {
  4006b6:	69fb      	ldr	r3, [r7, #28]
  4006b8:	f003 0308 	and.w	r3, r3, #8
  4006bc:	2b00      	cmp	r3, #0
  4006be:	d003      	beq.n	4006c8 <ioport_set_port_mode+0x38>
		base->PIO_PUER = mask;
  4006c0:	697b      	ldr	r3, [r7, #20]
  4006c2:	6a3a      	ldr	r2, [r7, #32]
  4006c4:	665a      	str	r2, [r3, #100]	; 0x64
  4006c6:	e002      	b.n	4006ce <ioport_set_port_mode+0x3e>
	} else {
		base->PIO_PUDR = mask;
  4006c8:	697b      	ldr	r3, [r7, #20]
  4006ca:	6a3a      	ldr	r2, [r7, #32]
  4006cc:	661a      	str	r2, [r3, #96]	; 0x60
	}

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
  4006ce:	69fb      	ldr	r3, [r7, #28]
  4006d0:	f003 0310 	and.w	r3, r3, #16
  4006d4:	2b00      	cmp	r3, #0
  4006d6:	d004      	beq.n	4006e2 <ioport_set_port_mode+0x52>
		base->PIO_PPDER = mask;
  4006d8:	697b      	ldr	r3, [r7, #20]
  4006da:	6a3a      	ldr	r2, [r7, #32]
  4006dc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  4006e0:	e003      	b.n	4006ea <ioport_set_port_mode+0x5a>
	} else {
		base->PIO_PPDDR = mask;
  4006e2:	697b      	ldr	r3, [r7, #20]
  4006e4:	6a3a      	ldr	r2, [r7, #32]
  4006e6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	}
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
  4006ea:	69fb      	ldr	r3, [r7, #28]
  4006ec:	f003 0320 	and.w	r3, r3, #32
  4006f0:	2b00      	cmp	r3, #0
  4006f2:	d003      	beq.n	4006fc <ioport_set_port_mode+0x6c>
		base->PIO_MDER = mask;
  4006f4:	697b      	ldr	r3, [r7, #20]
  4006f6:	6a3a      	ldr	r2, [r7, #32]
  4006f8:	651a      	str	r2, [r3, #80]	; 0x50
  4006fa:	e002      	b.n	400702 <ioport_set_port_mode+0x72>
	} else {
		base->PIO_MDDR = mask;
  4006fc:	697b      	ldr	r3, [r7, #20]
  4006fe:	6a3a      	ldr	r2, [r7, #32]
  400700:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
  400702:	69fb      	ldr	r3, [r7, #28]
  400704:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
  400708:	2b00      	cmp	r3, #0
  40070a:	d003      	beq.n	400714 <ioport_set_port_mode+0x84>
		base->PIO_IFER = mask;
  40070c:	697b      	ldr	r3, [r7, #20]
  40070e:	6a3a      	ldr	r2, [r7, #32]
  400710:	621a      	str	r2, [r3, #32]
  400712:	e002      	b.n	40071a <ioport_set_port_mode+0x8a>
	} else {
		base->PIO_IFDR = mask;
  400714:	697b      	ldr	r3, [r7, #20]
  400716:	6a3a      	ldr	r2, [r7, #32]
  400718:	625a      	str	r2, [r3, #36]	; 0x24
	}

	if (mode & IOPORT_MODE_DEBOUNCE) {
  40071a:	69fb      	ldr	r3, [r7, #28]
  40071c:	f003 0380 	and.w	r3, r3, #128	; 0x80
  400720:	2b00      	cmp	r3, #0
  400722:	d004      	beq.n	40072e <ioport_set_port_mode+0x9e>
#if SAM3U || SAM3XA
		base->PIO_DIFSR = mask;
#else
		base->PIO_IFSCER = mask;
  400724:	697b      	ldr	r3, [r7, #20]
  400726:	6a3a      	ldr	r2, [r7, #32]
  400728:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  40072c:	e003      	b.n	400736 <ioport_set_port_mode+0xa6>
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  40072e:	697b      	ldr	r3, [r7, #20]
  400730:	6a3a      	ldr	r2, [r7, #32]
  400732:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABSR |= mask;
	} else {
		base->PIO_ABSR &= ~mask;
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
  400736:	69fb      	ldr	r3, [r7, #28]
  400738:	f003 0301 	and.w	r3, r3, #1
  40073c:	2b00      	cmp	r3, #0
  40073e:	d006      	beq.n	40074e <ioport_set_port_mode+0xbe>
		base->PIO_ABCDSR[0] |= mask;
  400740:	697b      	ldr	r3, [r7, #20]
  400742:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400744:	6a3b      	ldr	r3, [r7, #32]
  400746:	431a      	orrs	r2, r3
  400748:	697b      	ldr	r3, [r7, #20]
  40074a:	671a      	str	r2, [r3, #112]	; 0x70
  40074c:	e006      	b.n	40075c <ioport_set_port_mode+0xcc>
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  40074e:	697b      	ldr	r3, [r7, #20]
  400750:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400752:	6a3b      	ldr	r3, [r7, #32]
  400754:	43db      	mvns	r3, r3
  400756:	401a      	ands	r2, r3
  400758:	697b      	ldr	r3, [r7, #20]
  40075a:	671a      	str	r2, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
  40075c:	69fb      	ldr	r3, [r7, #28]
  40075e:	f003 0302 	and.w	r3, r3, #2
  400762:	2b00      	cmp	r3, #0
  400764:	d006      	beq.n	400774 <ioport_set_port_mode+0xe4>
		base->PIO_ABCDSR[1] |= mask;
  400766:	697b      	ldr	r3, [r7, #20]
  400768:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  40076a:	6a3b      	ldr	r3, [r7, #32]
  40076c:	431a      	orrs	r2, r3
  40076e:	697b      	ldr	r3, [r7, #20]
  400770:	675a      	str	r2, [r3, #116]	; 0x74
  400772:	e006      	b.n	400782 <ioport_set_port_mode+0xf2>
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  400774:	697b      	ldr	r3, [r7, #20]
  400776:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400778:	6a3b      	ldr	r3, [r7, #32]
  40077a:	43db      	mvns	r3, r3
  40077c:	401a      	ands	r2, r3
  40077e:	697b      	ldr	r3, [r7, #20]
  400780:	675a      	str	r2, [r3, #116]	; 0x74
	arch_ioport_set_port_mode(port, mask, mode);
}
  400782:	372c      	adds	r7, #44	; 0x2c
  400784:	46bd      	mov	sp, r7
  400786:	f85d 7b04 	ldr.w	r7, [sp], #4
  40078a:	4770      	bx	lr
  40078c:	00200707 	.word	0x00200707

00400790 <ioport_set_pin_mode>:
 *
 * \param pin IOPORT pin to configure
 * \param mode Mode masks to configure for the specified pin (\ref ioport_modes)
 */
static inline void ioport_set_pin_mode(ioport_pin_t pin, ioport_mode_t mode)
{
  400790:	b480      	push	{r7}
  400792:	b08d      	sub	sp, #52	; 0x34
  400794:	af00      	add	r7, sp, #0
  400796:	6078      	str	r0, [r7, #4]
  400798:	6039      	str	r1, [r7, #0]
  40079a:	687b      	ldr	r3, [r7, #4]
  40079c:	62fb      	str	r3, [r7, #44]	; 0x2c
  40079e:	683b      	ldr	r3, [r7, #0]
  4007a0:	62bb      	str	r3, [r7, #40]	; 0x28
  4007a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4007a4:	627b      	str	r3, [r7, #36]	; 0x24
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  4007a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4007a8:	095a      	lsrs	r2, r3, #5
  4007aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4007ac:	623b      	str	r3, [r7, #32]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  4007ae:	6a3b      	ldr	r3, [r7, #32]
  4007b0:	f003 031f 	and.w	r3, r3, #31
  4007b4:	2101      	movs	r1, #1
  4007b6:	fa01 f303 	lsl.w	r3, r1, r3
  4007ba:	61fa      	str	r2, [r7, #28]
  4007bc:	61bb      	str	r3, [r7, #24]
  4007be:	6abb      	ldr	r3, [r7, #40]	; 0x28
  4007c0:	617b      	str	r3, [r7, #20]
  4007c2:	69fb      	ldr	r3, [r7, #28]
  4007c4:	613b      	str	r3, [r7, #16]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  4007c6:	693a      	ldr	r2, [r7, #16]
  4007c8:	4b37      	ldr	r3, [pc, #220]	; (4008a8 <ioport_set_pin_mode+0x118>)
  4007ca:	4413      	add	r3, r2
  4007cc:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_port_mode(ioport_port_t port,
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);
  4007ce:	60fb      	str	r3, [r7, #12]

	if (mode & IOPORT_MODE_PULLUP) {
  4007d0:	697b      	ldr	r3, [r7, #20]
  4007d2:	f003 0308 	and.w	r3, r3, #8
  4007d6:	2b00      	cmp	r3, #0
  4007d8:	d003      	beq.n	4007e2 <ioport_set_pin_mode+0x52>
		base->PIO_PUER = mask;
  4007da:	68fb      	ldr	r3, [r7, #12]
  4007dc:	69ba      	ldr	r2, [r7, #24]
  4007de:	665a      	str	r2, [r3, #100]	; 0x64
  4007e0:	e002      	b.n	4007e8 <ioport_set_pin_mode+0x58>
	} else {
		base->PIO_PUDR = mask;
  4007e2:	68fb      	ldr	r3, [r7, #12]
  4007e4:	69ba      	ldr	r2, [r7, #24]
  4007e6:	661a      	str	r2, [r3, #96]	; 0x60
	}

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
  4007e8:	697b      	ldr	r3, [r7, #20]
  4007ea:	f003 0310 	and.w	r3, r3, #16
  4007ee:	2b00      	cmp	r3, #0
  4007f0:	d004      	beq.n	4007fc <ioport_set_pin_mode+0x6c>
		base->PIO_PPDER = mask;
  4007f2:	68fb      	ldr	r3, [r7, #12]
  4007f4:	69ba      	ldr	r2, [r7, #24]
  4007f6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  4007fa:	e003      	b.n	400804 <ioport_set_pin_mode+0x74>
	} else {
		base->PIO_PPDDR = mask;
  4007fc:	68fb      	ldr	r3, [r7, #12]
  4007fe:	69ba      	ldr	r2, [r7, #24]
  400800:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	}
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
  400804:	697b      	ldr	r3, [r7, #20]
  400806:	f003 0320 	and.w	r3, r3, #32
  40080a:	2b00      	cmp	r3, #0
  40080c:	d003      	beq.n	400816 <ioport_set_pin_mode+0x86>
		base->PIO_MDER = mask;
  40080e:	68fb      	ldr	r3, [r7, #12]
  400810:	69ba      	ldr	r2, [r7, #24]
  400812:	651a      	str	r2, [r3, #80]	; 0x50
  400814:	e002      	b.n	40081c <ioport_set_pin_mode+0x8c>
	} else {
		base->PIO_MDDR = mask;
  400816:	68fb      	ldr	r3, [r7, #12]
  400818:	69ba      	ldr	r2, [r7, #24]
  40081a:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
  40081c:	697b      	ldr	r3, [r7, #20]
  40081e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
  400822:	2b00      	cmp	r3, #0
  400824:	d003      	beq.n	40082e <ioport_set_pin_mode+0x9e>
		base->PIO_IFER = mask;
  400826:	68fb      	ldr	r3, [r7, #12]
  400828:	69ba      	ldr	r2, [r7, #24]
  40082a:	621a      	str	r2, [r3, #32]
  40082c:	e002      	b.n	400834 <ioport_set_pin_mode+0xa4>
	} else {
		base->PIO_IFDR = mask;
  40082e:	68fb      	ldr	r3, [r7, #12]
  400830:	69ba      	ldr	r2, [r7, #24]
  400832:	625a      	str	r2, [r3, #36]	; 0x24
	}

	if (mode & IOPORT_MODE_DEBOUNCE) {
  400834:	697b      	ldr	r3, [r7, #20]
  400836:	f003 0380 	and.w	r3, r3, #128	; 0x80
  40083a:	2b00      	cmp	r3, #0
  40083c:	d004      	beq.n	400848 <ioport_set_pin_mode+0xb8>
#if SAM3U || SAM3XA
		base->PIO_DIFSR = mask;
#else
		base->PIO_IFSCER = mask;
  40083e:	68fb      	ldr	r3, [r7, #12]
  400840:	69ba      	ldr	r2, [r7, #24]
  400842:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  400846:	e003      	b.n	400850 <ioport_set_pin_mode+0xc0>
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  400848:	68fb      	ldr	r3, [r7, #12]
  40084a:	69ba      	ldr	r2, [r7, #24]
  40084c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABSR |= mask;
	} else {
		base->PIO_ABSR &= ~mask;
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
  400850:	697b      	ldr	r3, [r7, #20]
  400852:	f003 0301 	and.w	r3, r3, #1
  400856:	2b00      	cmp	r3, #0
  400858:	d006      	beq.n	400868 <ioport_set_pin_mode+0xd8>
		base->PIO_ABCDSR[0] |= mask;
  40085a:	68fb      	ldr	r3, [r7, #12]
  40085c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  40085e:	69bb      	ldr	r3, [r7, #24]
  400860:	431a      	orrs	r2, r3
  400862:	68fb      	ldr	r3, [r7, #12]
  400864:	671a      	str	r2, [r3, #112]	; 0x70
  400866:	e006      	b.n	400876 <ioport_set_pin_mode+0xe6>
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  400868:	68fb      	ldr	r3, [r7, #12]
  40086a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  40086c:	69bb      	ldr	r3, [r7, #24]
  40086e:	43db      	mvns	r3, r3
  400870:	401a      	ands	r2, r3
  400872:	68fb      	ldr	r3, [r7, #12]
  400874:	671a      	str	r2, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
  400876:	697b      	ldr	r3, [r7, #20]
  400878:	f003 0302 	and.w	r3, r3, #2
  40087c:	2b00      	cmp	r3, #0
  40087e:	d006      	beq.n	40088e <ioport_set_pin_mode+0xfe>
		base->PIO_ABCDSR[1] |= mask;
  400880:	68fb      	ldr	r3, [r7, #12]
  400882:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400884:	69bb      	ldr	r3, [r7, #24]
  400886:	431a      	orrs	r2, r3
  400888:	68fb      	ldr	r3, [r7, #12]
  40088a:	675a      	str	r2, [r3, #116]	; 0x74
  40088c:	e006      	b.n	40089c <ioport_set_pin_mode+0x10c>
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  40088e:	68fb      	ldr	r3, [r7, #12]
  400890:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400892:	69bb      	ldr	r3, [r7, #24]
  400894:	43db      	mvns	r3, r3
  400896:	401a      	ands	r2, r3
  400898:	68fb      	ldr	r3, [r7, #12]
  40089a:	675a      	str	r2, [r3, #116]	; 0x74
	arch_ioport_set_pin_mode(pin, mode);
}
  40089c:	3734      	adds	r7, #52	; 0x34
  40089e:	46bd      	mov	sp, r7
  4008a0:	f85d 7b04 	ldr.w	r7, [sp], #4
  4008a4:	4770      	bx	lr
  4008a6:	bf00      	nop
  4008a8:	00200707 	.word	0x00200707

004008ac <ioport_set_pin_dir>:
 * \param pin IOPORT pin to configure
 * \param dir Direction to set for the specified pin (\ref ioport_direction)
 */
static inline void ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
  4008ac:	b480      	push	{r7}
  4008ae:	b08d      	sub	sp, #52	; 0x34
  4008b0:	af00      	add	r7, sp, #0
  4008b2:	6078      	str	r0, [r7, #4]
  4008b4:	460b      	mov	r3, r1
  4008b6:	70fb      	strb	r3, [r7, #3]
  4008b8:	687b      	ldr	r3, [r7, #4]
  4008ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  4008bc:	78fb      	ldrb	r3, [r7, #3]
  4008be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  4008c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4008c4:	627b      	str	r3, [r7, #36]	; 0x24
  4008c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4008c8:	623b      	str	r3, [r7, #32]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  4008ca:	6a3b      	ldr	r3, [r7, #32]
  4008cc:	095b      	lsrs	r3, r3, #5
  4008ce:	61fb      	str	r3, [r7, #28]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  4008d0:	69fa      	ldr	r2, [r7, #28]
  4008d2:	4b17      	ldr	r3, [pc, #92]	; (400930 <ioport_set_pin_dir+0x84>)
  4008d4:	4413      	add	r3, r2
  4008d6:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);
  4008d8:	61bb      	str	r3, [r7, #24]

	if (dir == IOPORT_DIR_OUTPUT) {
  4008da:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  4008de:	2b01      	cmp	r3, #1
  4008e0:	d109      	bne.n	4008f6 <ioport_set_pin_dir+0x4a>
  4008e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4008e4:	617b      	str	r3, [r7, #20]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  4008e6:	697b      	ldr	r3, [r7, #20]
  4008e8:	f003 031f 	and.w	r3, r3, #31
  4008ec:	2201      	movs	r2, #1
  4008ee:	409a      	lsls	r2, r3
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4008f0:	69bb      	ldr	r3, [r7, #24]
  4008f2:	611a      	str	r2, [r3, #16]
  4008f4:	e00c      	b.n	400910 <ioport_set_pin_dir+0x64>
	} else if (dir == IOPORT_DIR_INPUT) {
  4008f6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  4008fa:	2b00      	cmp	r3, #0
  4008fc:	d108      	bne.n	400910 <ioport_set_pin_dir+0x64>
  4008fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  400900:	613b      	str	r3, [r7, #16]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  400902:	693b      	ldr	r3, [r7, #16]
  400904:	f003 031f 	and.w	r3, r3, #31
  400908:	2201      	movs	r2, #1
  40090a:	409a      	lsls	r2, r3
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40090c:	69bb      	ldr	r3, [r7, #24]
  40090e:	615a      	str	r2, [r3, #20]
  400910:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  400912:	60fb      	str	r3, [r7, #12]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  400914:	68fb      	ldr	r3, [r7, #12]
  400916:	f003 031f 	and.w	r3, r3, #31
  40091a:	2201      	movs	r2, #1
  40091c:	409a      	lsls	r2, r3
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40091e:	69bb      	ldr	r3, [r7, #24]
  400920:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	arch_ioport_set_pin_dir(pin, dir);
}
  400924:	3734      	adds	r7, #52	; 0x34
  400926:	46bd      	mov	sp, r7
  400928:	f85d 7b04 	ldr.w	r7, [sp], #4
  40092c:	4770      	bx	lr
  40092e:	bf00      	nop
  400930:	00200707 	.word	0x00200707

00400934 <ioport_set_pin_level>:
 *
 * \param pin IOPORT pin to configure
 * \param level Logical value of the pin
 */
static inline void ioport_set_pin_level(ioport_pin_t pin, bool level)
{
  400934:	b480      	push	{r7}
  400936:	b08b      	sub	sp, #44	; 0x2c
  400938:	af00      	add	r7, sp, #0
  40093a:	6078      	str	r0, [r7, #4]
  40093c:	460b      	mov	r3, r1
  40093e:	70fb      	strb	r3, [r7, #3]
  400940:	687b      	ldr	r3, [r7, #4]
  400942:	627b      	str	r3, [r7, #36]	; 0x24
  400944:	78fb      	ldrb	r3, [r7, #3]
  400946:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  40094a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40094c:	61fb      	str	r3, [r7, #28]
  40094e:	69fb      	ldr	r3, [r7, #28]
  400950:	61bb      	str	r3, [r7, #24]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  400952:	69bb      	ldr	r3, [r7, #24]
  400954:	095b      	lsrs	r3, r3, #5
  400956:	617b      	str	r3, [r7, #20]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  400958:	697a      	ldr	r2, [r7, #20]
  40095a:	4b10      	ldr	r3, [pc, #64]	; (40099c <ioport_set_pin_level+0x68>)
  40095c:	4413      	add	r3, r2
  40095e:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);
  400960:	613b      	str	r3, [r7, #16]

	if (level) {
  400962:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
  400966:	2b00      	cmp	r3, #0
  400968:	d009      	beq.n	40097e <ioport_set_pin_level+0x4a>
  40096a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40096c:	60fb      	str	r3, [r7, #12]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  40096e:	68fb      	ldr	r3, [r7, #12]
  400970:	f003 031f 	and.w	r3, r3, #31
  400974:	2201      	movs	r2, #1
  400976:	409a      	lsls	r2, r3
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400978:	693b      	ldr	r3, [r7, #16]
  40097a:	631a      	str	r2, [r3, #48]	; 0x30
  40097c:	e008      	b.n	400990 <ioport_set_pin_level+0x5c>
  40097e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  400980:	60bb      	str	r3, [r7, #8]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  400982:	68bb      	ldr	r3, [r7, #8]
  400984:	f003 031f 	and.w	r3, r3, #31
  400988:	2201      	movs	r2, #1
  40098a:	409a      	lsls	r2, r3
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  40098c:	693b      	ldr	r3, [r7, #16]
  40098e:	635a      	str	r2, [r3, #52]	; 0x34
	arch_ioport_set_pin_level(pin, level);
}
  400990:	372c      	adds	r7, #44	; 0x2c
  400992:	46bd      	mov	sp, r7
  400994:	f85d 7b04 	ldr.w	r7, [sp], #4
  400998:	4770      	bx	lr
  40099a:	bf00      	nop
  40099c:	00200707 	.word	0x00200707

004009a0 <ioport_set_pin_sense_mode>:
 * \param pin IOPORT pin to configure
 * \param pin_sense Edge to sense for the pin (\ref ioport_sense)
 */
static inline void ioport_set_pin_sense_mode(ioport_pin_t pin,
		enum ioport_sense pin_sense)
{
  4009a0:	b480      	push	{r7}
  4009a2:	b08d      	sub	sp, #52	; 0x34
  4009a4:	af00      	add	r7, sp, #0
  4009a6:	6078      	str	r0, [r7, #4]
  4009a8:	460b      	mov	r3, r1
  4009aa:	70fb      	strb	r3, [r7, #3]
  4009ac:	687b      	ldr	r3, [r7, #4]
  4009ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  4009b0:	78fb      	ldrb	r3, [r7, #3]
  4009b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  4009b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4009b8:	627b      	str	r3, [r7, #36]	; 0x24
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  4009ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4009bc:	095a      	lsrs	r2, r3, #5
  4009be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4009c0:	623b      	str	r3, [r7, #32]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  4009c2:	6a3b      	ldr	r3, [r7, #32]
  4009c4:	f003 031f 	and.w	r3, r3, #31
  4009c8:	2101      	movs	r1, #1
  4009ca:	fa01 f303 	lsl.w	r3, r1, r3
  4009ce:	61fa      	str	r2, [r7, #28]
  4009d0:	61bb      	str	r3, [r7, #24]
  4009d2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  4009d6:	75fb      	strb	r3, [r7, #23]
  4009d8:	69fb      	ldr	r3, [r7, #28]
  4009da:	613b      	str	r3, [r7, #16]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  4009dc:	693a      	ldr	r2, [r7, #16]
  4009de:	4b22      	ldr	r3, [pc, #136]	; (400a68 <ioport_set_pin_sense_mode+0xc8>)
  4009e0:	4413      	add	r3, r2
  4009e2:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_port_sense_mode(ioport_port_t port,
		ioport_port_mask_t mask, enum ioport_sense pin_sense)
{
	Pio *base = arch_ioport_port_to_base(port);
  4009e4:	60fb      	str	r3, [r7, #12]
	 *       1       0         0    IOPORT_SENSE_FALLING
	 *       1       0         1    IOPORT_SENSE_RISING
	 *       1       1         0    IOPORT_SENSE_LEVEL_LOW
	 *       1       1         1    IOPORT_SENSE_LEVEL_HIGH
	 */
	switch(pin_sense) {
  4009e6:	7dfb      	ldrb	r3, [r7, #23]
  4009e8:	3b01      	subs	r3, #1
  4009ea:	2b03      	cmp	r3, #3
  4009ec:	d82e      	bhi.n	400a4c <ioport_set_pin_sense_mode+0xac>
  4009ee:	a201      	add	r2, pc, #4	; (adr r2, 4009f4 <ioport_set_pin_sense_mode+0x54>)
  4009f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4009f4:	00400a29 	.word	0x00400a29
  4009f8:	00400a3b 	.word	0x00400a3b
  4009fc:	00400a05 	.word	0x00400a05
  400a00:	00400a17 	.word	0x00400a17
	case IOPORT_SENSE_LEVEL_LOW:
		base->PIO_LSR = mask;
  400a04:	68fb      	ldr	r3, [r7, #12]
  400a06:	69ba      	ldr	r2, [r7, #24]
  400a08:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
		base->PIO_FELLSR = mask;
  400a0c:	68fb      	ldr	r3, [r7, #12]
  400a0e:	69ba      	ldr	r2, [r7, #24]
  400a10:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
  400a14:	e01f      	b.n	400a56 <ioport_set_pin_sense_mode+0xb6>
		break;
	case IOPORT_SENSE_LEVEL_HIGH:
		base->PIO_LSR = mask;
  400a16:	68fb      	ldr	r3, [r7, #12]
  400a18:	69ba      	ldr	r2, [r7, #24]
  400a1a:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
		base->PIO_REHLSR = mask;
  400a1e:	68fb      	ldr	r3, [r7, #12]
  400a20:	69ba      	ldr	r2, [r7, #24]
  400a22:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  400a26:	e016      	b.n	400a56 <ioport_set_pin_sense_mode+0xb6>
		break;
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
  400a28:	68fb      	ldr	r3, [r7, #12]
  400a2a:	69ba      	ldr	r2, [r7, #24]
  400a2c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_FELLSR = mask;
  400a30:	68fb      	ldr	r3, [r7, #12]
  400a32:	69ba      	ldr	r2, [r7, #24]
  400a34:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
  400a38:	e00d      	b.n	400a56 <ioport_set_pin_sense_mode+0xb6>
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  400a3a:	68fb      	ldr	r3, [r7, #12]
  400a3c:	69ba      	ldr	r2, [r7, #24]
  400a3e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  400a42:	68fb      	ldr	r3, [r7, #12]
  400a44:	69ba      	ldr	r2, [r7, #24]
  400a46:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  400a4a:	e004      	b.n	400a56 <ioport_set_pin_sense_mode+0xb6>
		break;
	default:
		base->PIO_AIMDR = mask;
  400a4c:	68fb      	ldr	r3, [r7, #12]
  400a4e:	69ba      	ldr	r2, [r7, #24]
  400a50:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
  400a54:	e003      	b.n	400a5e <ioport_set_pin_sense_mode+0xbe>
		return;
	}
	base->PIO_AIMER = mask;
  400a56:	68fb      	ldr	r3, [r7, #12]
  400a58:	69ba      	ldr	r2, [r7, #24]
  400a5a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	arch_ioport_set_pin_sense_mode(pin, pin_sense);
}
  400a5e:	3734      	adds	r7, #52	; 0x34
  400a60:	46bd      	mov	sp, r7
  400a62:	f85d 7b04 	ldr.w	r7, [sp], #4
  400a66:	4770      	bx	lr
  400a68:	00200707 	.word	0x00200707

00400a6c <board_init>:
	__ISB();
}
#endif

void board_init(void)
{
  400a6c:	b580      	push	{r7, lr}
  400a6e:	af00      	add	r7, sp, #0
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  400a70:	4b24      	ldr	r3, [pc, #144]	; (400b04 <board_init+0x98>)
  400a72:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  400a76:	605a      	str	r2, [r3, #4]
#endif

	/* Initialize IOPORTs */
	ioport_init();
  400a78:	4b23      	ldr	r3, [pc, #140]	; (400b08 <board_init+0x9c>)
  400a7a:	4798      	blx	r3

	/* Configure the pins connected to LED as output and set their
	 * default initial state to high (LED off).
	 */
	ioport_set_pin_dir(LED0_GPIO, IOPORT_DIR_OUTPUT);
  400a7c:	2050      	movs	r0, #80	; 0x50
  400a7e:	2101      	movs	r1, #1
  400a80:	4b22      	ldr	r3, [pc, #136]	; (400b0c <board_init+0xa0>)
  400a82:	4798      	blx	r3
	ioport_set_pin_level(LED0_GPIO, LED0_INACTIVE_LEVEL);
  400a84:	2050      	movs	r0, #80	; 0x50
  400a86:	2101      	movs	r1, #1
  400a88:	4b21      	ldr	r3, [pc, #132]	; (400b10 <board_init+0xa4>)
  400a8a:	4798      	blx	r3

	/* Configure Push Button pins */
	ioport_set_pin_input_mode(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS,
  400a8c:	200b      	movs	r0, #11
  400a8e:	2100      	movs	r1, #0
  400a90:	4b1e      	ldr	r3, [pc, #120]	; (400b0c <board_init+0xa0>)
  400a92:	4798      	blx	r3
  400a94:	200b      	movs	r0, #11
  400a96:	2188      	movs	r1, #136	; 0x88
  400a98:	4b1e      	ldr	r3, [pc, #120]	; (400b14 <board_init+0xa8>)
  400a9a:	4798      	blx	r3
  400a9c:	200b      	movs	r0, #11
  400a9e:	2102      	movs	r1, #2
  400aa0:	4b1d      	ldr	r3, [pc, #116]	; (400b18 <board_init+0xac>)
  400aa2:	4798      	blx	r3
//jsi 7feb16 following defines are from the DMA-UART example project for the SAM4E
#define PINS_UART0_PORT		IOPORT_PIOA
#define PINS_UART0			(PIO_PA9A_URXD0 | PIO_PA10A_UTXD0)
#define PINS_UART0_FLAGS	IOPORT_MODE_MUX_A

	ioport_set_port_peripheral_mode(PINS_UART0_PORT, PINS_UART0, PINS_UART0_FLAGS); //jsi 6feb16 was USART1
  400aa4:	2000      	movs	r0, #0
  400aa6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
  400aaa:	2200      	movs	r2, #0
  400aac:	4b1b      	ldr	r3, [pc, #108]	; (400b1c <board_init+0xb0>)
  400aae:	4798      	blx	r3
  400ab0:	2000      	movs	r0, #0
  400ab2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
  400ab6:	4b1a      	ldr	r3, [pc, #104]	; (400b20 <board_init+0xb4>)
  400ab8:	4798      	blx	r3

#endif

#define CONF_BOARD_TWIHS0 //jsi 7feb16
#ifdef CONF_BOARD_TWIHS0
	ioport_set_pin_peripheral_mode(TWIHS0_DATA_GPIO, TWIHS0_DATA_FLAGS);
  400aba:	2003      	movs	r0, #3
  400abc:	2100      	movs	r1, #0
  400abe:	4b15      	ldr	r3, [pc, #84]	; (400b14 <board_init+0xa8>)
  400ac0:	4798      	blx	r3
  400ac2:	2003      	movs	r0, #3
  400ac4:	4b17      	ldr	r3, [pc, #92]	; (400b24 <board_init+0xb8>)
  400ac6:	4798      	blx	r3
	ioport_set_pin_peripheral_mode(TWIHS0_CLK_GPIO, TWIHS0_CLK_FLAGS);
  400ac8:	2004      	movs	r0, #4
  400aca:	2100      	movs	r1, #0
  400acc:	4b11      	ldr	r3, [pc, #68]	; (400b14 <board_init+0xa8>)
  400ace:	4798      	blx	r3
  400ad0:	2004      	movs	r0, #4
  400ad2:	4b14      	ldr	r3, [pc, #80]	; (400b24 <board_init+0xb8>)
  400ad4:	4798      	blx	r3
#endif


#ifdef CONF_BOARD_USART_RXD
	/* Configure USART RXD pin */
	ioport_set_pin_peripheral_mode(USART0_RXD_GPIO, USART0_RXD_FLAGS);
  400ad6:	2020      	movs	r0, #32
  400ad8:	2102      	movs	r1, #2
  400ada:	4b0e      	ldr	r3, [pc, #56]	; (400b14 <board_init+0xa8>)
  400adc:	4798      	blx	r3
  400ade:	2020      	movs	r0, #32
  400ae0:	4b10      	ldr	r3, [pc, #64]	; (400b24 <board_init+0xb8>)
  400ae2:	4798      	blx	r3
#endif

#ifdef CONF_BOARD_USART_TXD
	/* Configure USART TXD pin */
	ioport_set_pin_peripheral_mode(USART0_TXD_GPIO, USART0_TXD_FLAGS);
  400ae4:	2021      	movs	r0, #33	; 0x21
  400ae6:	2102      	movs	r1, #2
  400ae8:	4b0a      	ldr	r3, [pc, #40]	; (400b14 <board_init+0xa8>)
  400aea:	4798      	blx	r3
  400aec:	2021      	movs	r0, #33	; 0x21
  400aee:	4b0d      	ldr	r3, [pc, #52]	; (400b24 <board_init+0xb8>)
  400af0:	4798      	blx	r3
	ioport_set_pin_peripheral_mode(PIN_USART0_CTS_IDX,PIN_USART0_CTS_FLAGS);
#endif

#ifdef CONF_BOARD_USART_RTS
	/* Configure USART RTS pin */
	ioport_set_pin_peripheral_mode(PIN_USART0_RTS_IDX, PIN_USART0_RTS_FLAGS);
  400af2:	2023      	movs	r0, #35	; 0x23
  400af4:	2102      	movs	r1, #2
  400af6:	4b07      	ldr	r3, [pc, #28]	; (400b14 <board_init+0xa8>)
  400af8:	4798      	blx	r3
  400afa:	2023      	movs	r0, #35	; 0x23
  400afc:	4b09      	ldr	r3, [pc, #36]	; (400b24 <board_init+0xb8>)
  400afe:	4798      	blx	r3
#endif

#ifdef CONF_BOARD_CONFIG_MPU_AT_INIT
	_setup_memory_region();
#endif
}
  400b00:	bd80      	pop	{r7, pc}
  400b02:	bf00      	nop
  400b04:	400e1850 	.word	0x400e1850
  400b08:	004005ed 	.word	0x004005ed
  400b0c:	004008ad 	.word	0x004008ad
  400b10:	00400935 	.word	0x00400935
  400b14:	00400791 	.word	0x00400791
  400b18:	004009a1 	.word	0x004009a1
  400b1c:	00400691 	.word	0x00400691
  400b20:	0040065d 	.word	0x0040065d
  400b24:	00400615 	.word	0x00400615

00400b28 <pio_get_interrupt_status>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
  400b28:	b480      	push	{r7}
  400b2a:	b083      	sub	sp, #12
  400b2c:	af00      	add	r7, sp, #0
  400b2e:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_ISR;
  400b30:	687b      	ldr	r3, [r7, #4]
  400b32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
  400b34:	4618      	mov	r0, r3
  400b36:	370c      	adds	r7, #12
  400b38:	46bd      	mov	sp, r7
  400b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
  400b3e:	4770      	bx	lr

00400b40 <pio_get_interrupt_mask>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
  400b40:	b480      	push	{r7}
  400b42:	b083      	sub	sp, #12
  400b44:	af00      	add	r7, sp, #0
  400b46:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_IMR;
  400b48:	687b      	ldr	r3, [r7, #4]
  400b4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
  400b4c:	4618      	mov	r0, r3
  400b4e:	370c      	adds	r7, #12
  400b50:	46bd      	mov	sp, r7
  400b52:	f85d 7b04 	ldr.w	r7, [sp], #4
  400b56:	4770      	bx	lr

00400b58 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  400b58:	b580      	push	{r7, lr}
  400b5a:	b084      	sub	sp, #16
  400b5c:	af00      	add	r7, sp, #0
  400b5e:	6078      	str	r0, [r7, #4]
  400b60:	6039      	str	r1, [r7, #0]
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  400b62:	6878      	ldr	r0, [r7, #4]
  400b64:	4b24      	ldr	r3, [pc, #144]	; (400bf8 <pio_handler_process+0xa0>)
  400b66:	4798      	blx	r3
  400b68:	60f8      	str	r0, [r7, #12]
	status &= pio_get_interrupt_mask(p_pio);
  400b6a:	6878      	ldr	r0, [r7, #4]
  400b6c:	4b23      	ldr	r3, [pc, #140]	; (400bfc <pio_handler_process+0xa4>)
  400b6e:	4798      	blx	r3
  400b70:	4602      	mov	r2, r0
  400b72:	68fb      	ldr	r3, [r7, #12]
  400b74:	4013      	ands	r3, r2
  400b76:	60fb      	str	r3, [r7, #12]

	/* Check pending events */
	if (status != 0) {
  400b78:	68fb      	ldr	r3, [r7, #12]
  400b7a:	2b00      	cmp	r3, #0
  400b7c:	d038      	beq.n	400bf0 <pio_handler_process+0x98>
		/* Find triggering source */
		i = 0;
  400b7e:	2300      	movs	r3, #0
  400b80:	60bb      	str	r3, [r7, #8]
		while (status != 0) {
  400b82:	e032      	b.n	400bea <pio_handler_process+0x92>
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  400b84:	4a1e      	ldr	r2, [pc, #120]	; (400c00 <pio_handler_process+0xa8>)
  400b86:	68bb      	ldr	r3, [r7, #8]
  400b88:	011b      	lsls	r3, r3, #4
  400b8a:	4413      	add	r3, r2
  400b8c:	681a      	ldr	r2, [r3, #0]
  400b8e:	683b      	ldr	r3, [r7, #0]
  400b90:	429a      	cmp	r2, r3
  400b92:	d123      	bne.n	400bdc <pio_handler_process+0x84>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  400b94:	4a1a      	ldr	r2, [pc, #104]	; (400c00 <pio_handler_process+0xa8>)
  400b96:	68bb      	ldr	r3, [r7, #8]
  400b98:	011b      	lsls	r3, r3, #4
  400b9a:	4413      	add	r3, r2
  400b9c:	685a      	ldr	r2, [r3, #4]
  400b9e:	68fb      	ldr	r3, [r7, #12]
  400ba0:	4013      	ands	r3, r2
  400ba2:	2b00      	cmp	r3, #0
  400ba4:	d01a      	beq.n	400bdc <pio_handler_process+0x84>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  400ba6:	4a16      	ldr	r2, [pc, #88]	; (400c00 <pio_handler_process+0xa8>)
  400ba8:	68bb      	ldr	r3, [r7, #8]
  400baa:	011b      	lsls	r3, r3, #4
  400bac:	4413      	add	r3, r2
  400bae:	3308      	adds	r3, #8
  400bb0:	685b      	ldr	r3, [r3, #4]
  400bb2:	4913      	ldr	r1, [pc, #76]	; (400c00 <pio_handler_process+0xa8>)
  400bb4:	68ba      	ldr	r2, [r7, #8]
  400bb6:	0112      	lsls	r2, r2, #4
  400bb8:	440a      	add	r2, r1
  400bba:	6810      	ldr	r0, [r2, #0]
  400bbc:	4910      	ldr	r1, [pc, #64]	; (400c00 <pio_handler_process+0xa8>)
  400bbe:	68ba      	ldr	r2, [r7, #8]
  400bc0:	0112      	lsls	r2, r2, #4
  400bc2:	440a      	add	r2, r1
  400bc4:	6852      	ldr	r2, [r2, #4]
  400bc6:	4611      	mov	r1, r2
  400bc8:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  400bca:	4a0d      	ldr	r2, [pc, #52]	; (400c00 <pio_handler_process+0xa8>)
  400bcc:	68bb      	ldr	r3, [r7, #8]
  400bce:	011b      	lsls	r3, r3, #4
  400bd0:	4413      	add	r3, r2
  400bd2:	685b      	ldr	r3, [r3, #4]
  400bd4:	43db      	mvns	r3, r3
  400bd6:	68fa      	ldr	r2, [r7, #12]
  400bd8:	4013      	ands	r3, r2
  400bda:	60fb      	str	r3, [r7, #12]
				}
			}
			i++;
  400bdc:	68bb      	ldr	r3, [r7, #8]
  400bde:	3301      	adds	r3, #1
  400be0:	60bb      	str	r3, [r7, #8]
			if (i >= MAX_INTERRUPT_SOURCES) {
  400be2:	68bb      	ldr	r3, [r7, #8]
  400be4:	2b06      	cmp	r3, #6
  400be6:	d900      	bls.n	400bea <pio_handler_process+0x92>
				break;
  400be8:	e002      	b.n	400bf0 <pio_handler_process+0x98>

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
  400bea:	68fb      	ldr	r3, [r7, #12]
  400bec:	2b00      	cmp	r3, #0
  400bee:	d1c9      	bne.n	400b84 <pio_handler_process+0x2c>
		if (pio_capture_handler) {
			pio_capture_handler(p_pio);
		}
	}
#endif
}
  400bf0:	3710      	adds	r7, #16
  400bf2:	46bd      	mov	sp, r7
  400bf4:	bd80      	pop	{r7, pc}
  400bf6:	bf00      	nop
  400bf8:	00400b29 	.word	0x00400b29
  400bfc:	00400b41 	.word	0x00400b41
  400c00:	20400910 	.word	0x20400910

00400c04 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  400c04:	b580      	push	{r7, lr}
  400c06:	af00      	add	r7, sp, #0
	pio_handler_process(PIOA, ID_PIOA);
  400c08:	4802      	ldr	r0, [pc, #8]	; (400c14 <PIOA_Handler+0x10>)
  400c0a:	210a      	movs	r1, #10
  400c0c:	4b02      	ldr	r3, [pc, #8]	; (400c18 <PIOA_Handler+0x14>)
  400c0e:	4798      	blx	r3
}
  400c10:	bd80      	pop	{r7, pc}
  400c12:	bf00      	nop
  400c14:	400e0e00 	.word	0x400e0e00
  400c18:	00400b59 	.word	0x00400b59

00400c1c <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  400c1c:	b580      	push	{r7, lr}
  400c1e:	af00      	add	r7, sp, #0
    pio_handler_process(PIOB, ID_PIOB);
  400c20:	4802      	ldr	r0, [pc, #8]	; (400c2c <PIOB_Handler+0x10>)
  400c22:	210b      	movs	r1, #11
  400c24:	4b02      	ldr	r3, [pc, #8]	; (400c30 <PIOB_Handler+0x14>)
  400c26:	4798      	blx	r3
}
  400c28:	bd80      	pop	{r7, pc}
  400c2a:	bf00      	nop
  400c2c:	400e1000 	.word	0x400e1000
  400c30:	00400b59 	.word	0x00400b59

00400c34 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  400c34:	b580      	push	{r7, lr}
  400c36:	af00      	add	r7, sp, #0
	pio_handler_process(PIOC, ID_PIOC);
  400c38:	4802      	ldr	r0, [pc, #8]	; (400c44 <PIOC_Handler+0x10>)
  400c3a:	210c      	movs	r1, #12
  400c3c:	4b02      	ldr	r3, [pc, #8]	; (400c48 <PIOC_Handler+0x14>)
  400c3e:	4798      	blx	r3
}
  400c40:	bd80      	pop	{r7, pc}
  400c42:	bf00      	nop
  400c44:	400e1200 	.word	0x400e1200
  400c48:	00400b59 	.word	0x00400b59

00400c4c <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  400c4c:	b580      	push	{r7, lr}
  400c4e:	af00      	add	r7, sp, #0
	pio_handler_process(PIOD, ID_PIOD);
  400c50:	4802      	ldr	r0, [pc, #8]	; (400c5c <PIOD_Handler+0x10>)
  400c52:	2110      	movs	r1, #16
  400c54:	4b02      	ldr	r3, [pc, #8]	; (400c60 <PIOD_Handler+0x14>)
  400c56:	4798      	blx	r3
}
  400c58:	bd80      	pop	{r7, pc}
  400c5a:	bf00      	nop
  400c5c:	400e1400 	.word	0x400e1400
  400c60:	00400b59 	.word	0x00400b59

00400c64 <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  400c64:	b580      	push	{r7, lr}
  400c66:	af00      	add	r7, sp, #0
	pio_handler_process(PIOE, ID_PIOE);
  400c68:	4802      	ldr	r0, [pc, #8]	; (400c74 <PIOE_Handler+0x10>)
  400c6a:	2111      	movs	r1, #17
  400c6c:	4b02      	ldr	r3, [pc, #8]	; (400c78 <PIOE_Handler+0x14>)
  400c6e:	4798      	blx	r3
}
  400c70:	bd80      	pop	{r7, pc}
  400c72:	bf00      	nop
  400c74:	400e1600 	.word	0x400e1600
  400c78:	00400b59 	.word	0x00400b59

00400c7c <pmc_mck_set_division>:
 * \brief Set the division of the MCK.
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
  400c7c:	b480      	push	{r7}
  400c7e:	b083      	sub	sp, #12
  400c80:	af00      	add	r7, sp, #0
  400c82:	6078      	str	r0, [r7, #4]
	switch (ul_div) {
  400c84:	687b      	ldr	r3, [r7, #4]
  400c86:	3b01      	subs	r3, #1
  400c88:	2b03      	cmp	r3, #3
  400c8a:	d81a      	bhi.n	400cc2 <pmc_mck_set_division+0x46>
  400c8c:	a201      	add	r2, pc, #4	; (adr r2, 400c94 <pmc_mck_set_division+0x18>)
  400c8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  400c92:	bf00      	nop
  400c94:	00400ca5 	.word	0x00400ca5
  400c98:	00400cab 	.word	0x00400cab
  400c9c:	00400cb3 	.word	0x00400cb3
  400ca0:	00400cbb 	.word	0x00400cbb
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  400ca4:	2300      	movs	r3, #0
  400ca6:	607b      	str	r3, [r7, #4]
			break;
  400ca8:	e00e      	b.n	400cc8 <pmc_mck_set_division+0x4c>
		case 2:
			ul_div = PMC_MCKR_MDIV_PCK_DIV2;
  400caa:	f44f 7380 	mov.w	r3, #256	; 0x100
  400cae:	607b      	str	r3, [r7, #4]
			break;
  400cb0:	e00a      	b.n	400cc8 <pmc_mck_set_division+0x4c>
		case 3:
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  400cb2:	f44f 7340 	mov.w	r3, #768	; 0x300
  400cb6:	607b      	str	r3, [r7, #4]
			break;
  400cb8:	e006      	b.n	400cc8 <pmc_mck_set_division+0x4c>
		case 4:
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  400cba:	f44f 7300 	mov.w	r3, #512	; 0x200
  400cbe:	607b      	str	r3, [r7, #4]
			break;
  400cc0:	e002      	b.n	400cc8 <pmc_mck_set_division+0x4c>
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  400cc2:	2300      	movs	r3, #0
  400cc4:	607b      	str	r3, [r7, #4]
			break;
  400cc6:	bf00      	nop
	}
	PMC->PMC_MCKR =
  400cc8:	4909      	ldr	r1, [pc, #36]	; (400cf0 <pmc_mck_set_division+0x74>)
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  400cca:	4b09      	ldr	r3, [pc, #36]	; (400cf0 <pmc_mck_set_division+0x74>)
  400ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400cce:	f423 7240 	bic.w	r2, r3, #768	; 0x300
  400cd2:	687b      	ldr	r3, [r7, #4]
  400cd4:	4313      	orrs	r3, r2
			break;
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
  400cd6:	630b      	str	r3, [r1, #48]	; 0x30
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  400cd8:	bf00      	nop
  400cda:	4b05      	ldr	r3, [pc, #20]	; (400cf0 <pmc_mck_set_division+0x74>)
  400cdc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400cde:	f003 0308 	and.w	r3, r3, #8
  400ce2:	2b00      	cmp	r3, #0
  400ce4:	d0f9      	beq.n	400cda <pmc_mck_set_division+0x5e>
}
  400ce6:	370c      	adds	r7, #12
  400ce8:	46bd      	mov	sp, r7
  400cea:	f85d 7b04 	ldr.w	r7, [sp], #4
  400cee:	4770      	bx	lr
  400cf0:	400e0600 	.word	0x400e0600

00400cf4 <pmc_switch_mck_to_pllack>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
  400cf4:	b480      	push	{r7}
  400cf6:	b085      	sub	sp, #20
  400cf8:	af00      	add	r7, sp, #0
  400cfa:	6078      	str	r0, [r7, #4]
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  400cfc:	491d      	ldr	r1, [pc, #116]	; (400d74 <pmc_switch_mck_to_pllack+0x80>)
  400cfe:	4b1d      	ldr	r3, [pc, #116]	; (400d74 <pmc_switch_mck_to_pllack+0x80>)
  400d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400d02:	f023 0270 	bic.w	r2, r3, #112	; 0x70
  400d06:	687b      	ldr	r3, [r7, #4]
  400d08:	4313      	orrs	r3, r2
  400d0a:	630b      	str	r3, [r1, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400d0c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  400d10:	60fb      	str	r3, [r7, #12]
  400d12:	e007      	b.n	400d24 <pmc_switch_mck_to_pllack+0x30>
			--ul_timeout) {
		if (ul_timeout == 0) {
  400d14:	68fb      	ldr	r3, [r7, #12]
  400d16:	2b00      	cmp	r3, #0
  400d18:	d101      	bne.n	400d1e <pmc_switch_mck_to_pllack+0x2a>
			return 1;
  400d1a:	2301      	movs	r3, #1
  400d1c:	e023      	b.n	400d66 <pmc_switch_mck_to_pllack+0x72>
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
  400d1e:	68fb      	ldr	r3, [r7, #12]
  400d20:	3b01      	subs	r3, #1
  400d22:	60fb      	str	r3, [r7, #12]
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400d24:	4b13      	ldr	r3, [pc, #76]	; (400d74 <pmc_switch_mck_to_pllack+0x80>)
  400d26:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400d28:	f003 0308 	and.w	r3, r3, #8
  400d2c:	2b00      	cmp	r3, #0
  400d2e:	d0f1      	beq.n	400d14 <pmc_switch_mck_to_pllack+0x20>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  400d30:	4a10      	ldr	r2, [pc, #64]	; (400d74 <pmc_switch_mck_to_pllack+0x80>)
  400d32:	4b10      	ldr	r3, [pc, #64]	; (400d74 <pmc_switch_mck_to_pllack+0x80>)
  400d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400d36:	f023 0303 	bic.w	r3, r3, #3
  400d3a:	f043 0302 	orr.w	r3, r3, #2
  400d3e:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400d40:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  400d44:	60fb      	str	r3, [r7, #12]
  400d46:	e007      	b.n	400d58 <pmc_switch_mck_to_pllack+0x64>
			--ul_timeout) {
		if (ul_timeout == 0) {
  400d48:	68fb      	ldr	r3, [r7, #12]
  400d4a:	2b00      	cmp	r3, #0
  400d4c:	d101      	bne.n	400d52 <pmc_switch_mck_to_pllack+0x5e>
			return 1;
  400d4e:	2301      	movs	r3, #1
  400d50:	e009      	b.n	400d66 <pmc_switch_mck_to_pllack+0x72>

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
  400d52:	68fb      	ldr	r3, [r7, #12]
  400d54:	3b01      	subs	r3, #1
  400d56:	60fb      	str	r3, [r7, #12]
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400d58:	4b06      	ldr	r3, [pc, #24]	; (400d74 <pmc_switch_mck_to_pllack+0x80>)
  400d5a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400d5c:	f003 0308 	and.w	r3, r3, #8
  400d60:	2b00      	cmp	r3, #0
  400d62:	d0f1      	beq.n	400d48 <pmc_switch_mck_to_pllack+0x54>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
  400d64:	2300      	movs	r3, #0
}
  400d66:	4618      	mov	r0, r3
  400d68:	3714      	adds	r7, #20
  400d6a:	46bd      	mov	sp, r7
  400d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
  400d70:	4770      	bx	lr
  400d72:	bf00      	nop
  400d74:	400e0600 	.word	0x400e0600

00400d78 <pmc_switch_sclk_to_32kxtal>:
 *       VDDIO power supply.
 *
 * \param ul_bypass 0 for Xtal, 1 for bypass.
 */
void pmc_switch_sclk_to_32kxtal(uint32_t ul_bypass)
{
  400d78:	b480      	push	{r7}
  400d7a:	b083      	sub	sp, #12
  400d7c:	af00      	add	r7, sp, #0
  400d7e:	6078      	str	r0, [r7, #4]
	/* Set Bypass mode if required */
	if (ul_bypass == 1) {
  400d80:	687b      	ldr	r3, [r7, #4]
  400d82:	2b01      	cmp	r3, #1
  400d84:	d105      	bne.n	400d92 <pmc_switch_sclk_to_32kxtal+0x1a>
		SUPC->SUPC_MR |= SUPC_MR_KEY_PASSWD |
  400d86:	4907      	ldr	r1, [pc, #28]	; (400da4 <pmc_switch_sclk_to_32kxtal+0x2c>)
  400d88:	4b06      	ldr	r3, [pc, #24]	; (400da4 <pmc_switch_sclk_to_32kxtal+0x2c>)
  400d8a:	689a      	ldr	r2, [r3, #8]
  400d8c:	4b06      	ldr	r3, [pc, #24]	; (400da8 <pmc_switch_sclk_to_32kxtal+0x30>)
  400d8e:	4313      	orrs	r3, r2
  400d90:	608b      	str	r3, [r1, #8]
			SUPC_MR_OSCBYPASS;
	}

	SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_XTALSEL;
  400d92:	4b04      	ldr	r3, [pc, #16]	; (400da4 <pmc_switch_sclk_to_32kxtal+0x2c>)
  400d94:	4a05      	ldr	r2, [pc, #20]	; (400dac <pmc_switch_sclk_to_32kxtal+0x34>)
  400d96:	601a      	str	r2, [r3, #0]
}
  400d98:	370c      	adds	r7, #12
  400d9a:	46bd      	mov	sp, r7
  400d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
  400da0:	4770      	bx	lr
  400da2:	bf00      	nop
  400da4:	400e1810 	.word	0x400e1810
  400da8:	a5100000 	.word	0xa5100000
  400dac:	a5000008 	.word	0xa5000008

00400db0 <pmc_osc_is_ready_32kxtal>:
 *
 * \retval 1 External 32k Xtal is ready.
 * \retval 0 External 32k Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_32kxtal(void)
{
  400db0:	b480      	push	{r7}
  400db2:	af00      	add	r7, sp, #0
	return ((SUPC->SUPC_SR & SUPC_SR_OSCSEL)
  400db4:	4b09      	ldr	r3, [pc, #36]	; (400ddc <pmc_osc_is_ready_32kxtal+0x2c>)
  400db6:	695b      	ldr	r3, [r3, #20]
  400db8:	f003 0380 	and.w	r3, r3, #128	; 0x80
			&& (PMC->PMC_SR & PMC_SR_OSCSELS));
  400dbc:	2b00      	cmp	r3, #0
  400dbe:	d007      	beq.n	400dd0 <pmc_osc_is_ready_32kxtal+0x20>
  400dc0:	4b07      	ldr	r3, [pc, #28]	; (400de0 <pmc_osc_is_ready_32kxtal+0x30>)
  400dc2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400dc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
  400dc8:	2b00      	cmp	r3, #0
  400dca:	d001      	beq.n	400dd0 <pmc_osc_is_ready_32kxtal+0x20>
  400dcc:	2301      	movs	r3, #1
  400dce:	e000      	b.n	400dd2 <pmc_osc_is_ready_32kxtal+0x22>
  400dd0:	2300      	movs	r3, #0
}
  400dd2:	4618      	mov	r0, r3
  400dd4:	46bd      	mov	sp, r7
  400dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
  400dda:	4770      	bx	lr
  400ddc:	400e1810 	.word	0x400e1810
  400de0:	400e0600 	.word	0x400e0600

00400de4 <pmc_switch_mainck_to_fastrc>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 * \retval 2 Invalid frequency.
 */
void pmc_switch_mainck_to_fastrc(uint32_t ul_moscrcf)
{
  400de4:	b480      	push	{r7}
  400de6:	b083      	sub	sp, #12
  400de8:	af00      	add	r7, sp, #0
  400dea:	6078      	str	r0, [r7, #4]
	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	PMC->CKGR_MOR |= (CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCRCEN);
  400dec:	4915      	ldr	r1, [pc, #84]	; (400e44 <pmc_switch_mainck_to_fastrc+0x60>)
  400dee:	4b15      	ldr	r3, [pc, #84]	; (400e44 <pmc_switch_mainck_to_fastrc+0x60>)
  400df0:	6a1a      	ldr	r2, [r3, #32]
  400df2:	4b15      	ldr	r3, [pc, #84]	; (400e48 <pmc_switch_mainck_to_fastrc+0x64>)
  400df4:	4313      	orrs	r3, r2
  400df6:	620b      	str	r3, [r1, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  400df8:	bf00      	nop
  400dfa:	4b12      	ldr	r3, [pc, #72]	; (400e44 <pmc_switch_mainck_to_fastrc+0x60>)
  400dfc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400dfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  400e02:	2b00      	cmp	r3, #0
  400e04:	d0f9      	beq.n	400dfa <pmc_switch_mainck_to_fastrc+0x16>

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  400e06:	490f      	ldr	r1, [pc, #60]	; (400e44 <pmc_switch_mainck_to_fastrc+0x60>)
  400e08:	4b0e      	ldr	r3, [pc, #56]	; (400e44 <pmc_switch_mainck_to_fastrc+0x60>)
  400e0a:	6a1a      	ldr	r2, [r3, #32]
  400e0c:	4b0f      	ldr	r3, [pc, #60]	; (400e4c <pmc_switch_mainck_to_fastrc+0x68>)
  400e0e:	4013      	ands	r3, r2
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;
  400e10:	687a      	ldr	r2, [r7, #4]
  400e12:	4313      	orrs	r3, r2
  400e14:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  400e18:	620b      	str	r3, [r1, #32]
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  400e1a:	bf00      	nop
  400e1c:	4b09      	ldr	r3, [pc, #36]	; (400e44 <pmc_switch_mainck_to_fastrc+0x60>)
  400e1e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400e20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  400e24:	2b00      	cmp	r3, #0
  400e26:	d0f9      	beq.n	400e1c <pmc_switch_mainck_to_fastrc+0x38>

	/* Switch to Fast RC */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
  400e28:	4906      	ldr	r1, [pc, #24]	; (400e44 <pmc_switch_mainck_to_fastrc+0x60>)
  400e2a:	4b06      	ldr	r3, [pc, #24]	; (400e44 <pmc_switch_mainck_to_fastrc+0x60>)
  400e2c:	6a1a      	ldr	r2, [r3, #32]
  400e2e:	4b08      	ldr	r3, [pc, #32]	; (400e50 <pmc_switch_mainck_to_fastrc+0x6c>)
  400e30:	4013      	ands	r3, r2
  400e32:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  400e36:	620b      	str	r3, [r1, #32]
			CKGR_MOR_KEY_PASSWD;
}
  400e38:	370c      	adds	r7, #12
  400e3a:	46bd      	mov	sp, r7
  400e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
  400e40:	4770      	bx	lr
  400e42:	bf00      	nop
  400e44:	400e0600 	.word	0x400e0600
  400e48:	00370008 	.word	0x00370008
  400e4c:	ffc8ff8f 	.word	0xffc8ff8f
  400e50:	fec8ffff 	.word	0xfec8ffff

00400e54 <pmc_switch_mainck_to_xtal>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
  400e54:	b480      	push	{r7}
  400e56:	b083      	sub	sp, #12
  400e58:	af00      	add	r7, sp, #0
  400e5a:	6078      	str	r0, [r7, #4]
  400e5c:	6039      	str	r1, [r7, #0]
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  400e5e:	687b      	ldr	r3, [r7, #4]
  400e60:	2b00      	cmp	r3, #0
  400e62:	d008      	beq.n	400e76 <pmc_switch_mainck_to_xtal+0x22>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400e64:	4913      	ldr	r1, [pc, #76]	; (400eb4 <pmc_switch_mainck_to_xtal+0x60>)
  400e66:	4b13      	ldr	r3, [pc, #76]	; (400eb4 <pmc_switch_mainck_to_xtal+0x60>)
  400e68:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  400e6a:	4a13      	ldr	r2, [pc, #76]	; (400eb8 <pmc_switch_mainck_to_xtal+0x64>)
  400e6c:	401a      	ands	r2, r3
  400e6e:	4b13      	ldr	r3, [pc, #76]	; (400ebc <pmc_switch_mainck_to_xtal+0x68>)
  400e70:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400e72:	620b      	str	r3, [r1, #32]
  400e74:	e018      	b.n	400ea8 <pmc_switch_mainck_to_xtal+0x54>
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400e76:	490f      	ldr	r1, [pc, #60]	; (400eb4 <pmc_switch_mainck_to_xtal+0x60>)
  400e78:	4b0e      	ldr	r3, [pc, #56]	; (400eb4 <pmc_switch_mainck_to_xtal+0x60>)
  400e7a:	6a1a      	ldr	r2, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  400e7c:	4b10      	ldr	r3, [pc, #64]	; (400ec0 <pmc_switch_mainck_to_xtal+0x6c>)
  400e7e:	4013      	ands	r3, r2
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  400e80:	683a      	ldr	r2, [r7, #0]
  400e82:	0212      	lsls	r2, r2, #8
  400e84:	b292      	uxth	r2, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  400e86:	431a      	orrs	r2, r3
  400e88:	4b0e      	ldr	r3, [pc, #56]	; (400ec4 <pmc_switch_mainck_to_xtal+0x70>)
  400e8a:	4313      	orrs	r3, r2
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400e8c:	620b      	str	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  400e8e:	bf00      	nop
  400e90:	4b08      	ldr	r3, [pc, #32]	; (400eb4 <pmc_switch_mainck_to_xtal+0x60>)
  400e92:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400e94:	f003 0301 	and.w	r3, r3, #1
  400e98:	2b00      	cmp	r3, #0
  400e9a:	d0f9      	beq.n	400e90 <pmc_switch_mainck_to_xtal+0x3c>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  400e9c:	4905      	ldr	r1, [pc, #20]	; (400eb4 <pmc_switch_mainck_to_xtal+0x60>)
  400e9e:	4b05      	ldr	r3, [pc, #20]	; (400eb4 <pmc_switch_mainck_to_xtal+0x60>)
  400ea0:	6a1a      	ldr	r2, [r3, #32]
  400ea2:	4b09      	ldr	r3, [pc, #36]	; (400ec8 <pmc_switch_mainck_to_xtal+0x74>)
  400ea4:	4313      	orrs	r3, r2
  400ea6:	620b      	str	r3, [r1, #32]
	}
}
  400ea8:	370c      	adds	r7, #12
  400eaa:	46bd      	mov	sp, r7
  400eac:	f85d 7b04 	ldr.w	r7, [sp], #4
  400eb0:	4770      	bx	lr
  400eb2:	bf00      	nop
  400eb4:	400e0600 	.word	0x400e0600
  400eb8:	fec8fffc 	.word	0xfec8fffc
  400ebc:	01370002 	.word	0x01370002
  400ec0:	ffc8fffc 	.word	0xffc8fffc
  400ec4:	00370001 	.word	0x00370001
  400ec8:	01370000 	.word	0x01370000

00400ecc <pmc_osc_is_ready_mainck>:
 *
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
  400ecc:	b480      	push	{r7}
  400ece:	af00      	add	r7, sp, #0
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  400ed0:	4b04      	ldr	r3, [pc, #16]	; (400ee4 <pmc_osc_is_ready_mainck+0x18>)
  400ed2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400ed4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
  400ed8:	4618      	mov	r0, r3
  400eda:	46bd      	mov	sp, r7
  400edc:	f85d 7b04 	ldr.w	r7, [sp], #4
  400ee0:	4770      	bx	lr
  400ee2:	bf00      	nop
  400ee4:	400e0600 	.word	0x400e0600

00400ee8 <pmc_disable_pllack>:

/**
 * \brief Disable PLLA clock.
 */
void pmc_disable_pllack(void)
{
  400ee8:	b480      	push	{r7}
  400eea:	af00      	add	r7, sp, #0
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  400eec:	4b03      	ldr	r3, [pc, #12]	; (400efc <pmc_disable_pllack+0x14>)
  400eee:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  400ef2:	629a      	str	r2, [r3, #40]	; 0x28
#endif
}
  400ef4:	46bd      	mov	sp, r7
  400ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
  400efa:	4770      	bx	lr
  400efc:	400e0600 	.word	0x400e0600

00400f00 <pmc_is_locked_pllack>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
  400f00:	b480      	push	{r7}
  400f02:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  400f04:	4b04      	ldr	r3, [pc, #16]	; (400f18 <pmc_is_locked_pllack+0x18>)
  400f06:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400f08:	f003 0302 	and.w	r3, r3, #2
}
  400f0c:	4618      	mov	r0, r3
  400f0e:	46bd      	mov	sp, r7
  400f10:	f85d 7b04 	ldr.w	r7, [sp], #4
  400f14:	4770      	bx	lr
  400f16:	bf00      	nop
  400f18:	400e0600 	.word	0x400e0600

00400f1c <pmc_is_locked_upll>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_upll(void)
{
  400f1c:	b480      	push	{r7}
  400f1e:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKU);
  400f20:	4b04      	ldr	r3, [pc, #16]	; (400f34 <pmc_is_locked_upll+0x18>)
  400f22:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400f24:	f003 0340 	and.w	r3, r3, #64	; 0x40
}
  400f28:	4618      	mov	r0, r3
  400f2a:	46bd      	mov	sp, r7
  400f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
  400f30:	4770      	bx	lr
  400f32:	bf00      	nop
  400f34:	400e0600 	.word	0x400e0600

00400f38 <pmc_enable_periph_clk>:
 *
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
  400f38:	b480      	push	{r7}
  400f3a:	b083      	sub	sp, #12
  400f3c:	af00      	add	r7, sp, #0
  400f3e:	6078      	str	r0, [r7, #4]
	if (ul_id > MAX_PERIPH_ID) {
  400f40:	687b      	ldr	r3, [r7, #4]
  400f42:	2b3f      	cmp	r3, #63	; 0x3f
  400f44:	d901      	bls.n	400f4a <pmc_enable_periph_clk+0x12>
		return 1;
  400f46:	2301      	movs	r3, #1
  400f48:	e02f      	b.n	400faa <pmc_enable_periph_clk+0x72>
	}

	if (ul_id < 32) {
  400f4a:	687b      	ldr	r3, [r7, #4]
  400f4c:	2b1f      	cmp	r3, #31
  400f4e:	d813      	bhi.n	400f78 <pmc_enable_periph_clk+0x40>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  400f50:	4b19      	ldr	r3, [pc, #100]	; (400fb8 <pmc_enable_periph_clk+0x80>)
  400f52:	699a      	ldr	r2, [r3, #24]
  400f54:	687b      	ldr	r3, [r7, #4]
  400f56:	2101      	movs	r1, #1
  400f58:	fa01 f303 	lsl.w	r3, r1, r3
  400f5c:	401a      	ands	r2, r3
  400f5e:	687b      	ldr	r3, [r7, #4]
  400f60:	2101      	movs	r1, #1
  400f62:	fa01 f303 	lsl.w	r3, r1, r3
  400f66:	429a      	cmp	r2, r3
  400f68:	d01e      	beq.n	400fa8 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER0 = 1 << ul_id;
  400f6a:	4a13      	ldr	r2, [pc, #76]	; (400fb8 <pmc_enable_periph_clk+0x80>)
  400f6c:	687b      	ldr	r3, [r7, #4]
  400f6e:	2101      	movs	r1, #1
  400f70:	fa01 f303 	lsl.w	r3, r1, r3
  400f74:	6113      	str	r3, [r2, #16]
  400f76:	e017      	b.n	400fa8 <pmc_enable_periph_clk+0x70>
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
  400f78:	687b      	ldr	r3, [r7, #4]
  400f7a:	3b20      	subs	r3, #32
  400f7c:	607b      	str	r3, [r7, #4]
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  400f7e:	4b0e      	ldr	r3, [pc, #56]	; (400fb8 <pmc_enable_periph_clk+0x80>)
  400f80:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  400f84:	687b      	ldr	r3, [r7, #4]
  400f86:	2101      	movs	r1, #1
  400f88:	fa01 f303 	lsl.w	r3, r1, r3
  400f8c:	401a      	ands	r2, r3
  400f8e:	687b      	ldr	r3, [r7, #4]
  400f90:	2101      	movs	r1, #1
  400f92:	fa01 f303 	lsl.w	r3, r1, r3
  400f96:	429a      	cmp	r2, r3
  400f98:	d006      	beq.n	400fa8 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER1 = 1 << ul_id;
  400f9a:	4a07      	ldr	r2, [pc, #28]	; (400fb8 <pmc_enable_periph_clk+0x80>)
  400f9c:	687b      	ldr	r3, [r7, #4]
  400f9e:	2101      	movs	r1, #1
  400fa0:	fa01 f303 	lsl.w	r3, r1, r3
  400fa4:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
		}
#endif
	}

	return 0;
  400fa8:	2300      	movs	r3, #0
}
  400faa:	4618      	mov	r0, r3
  400fac:	370c      	adds	r7, #12
  400fae:	46bd      	mov	sp, r7
  400fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
  400fb4:	4770      	bx	lr
  400fb6:	bf00      	nop
  400fb8:	400e0600 	.word	0x400e0600

00400fbc <twihs_enable_master_mode>:
 * \brief Enable TWIHS master mode.
 *
 * \param p_twihs Pointer to a TWIHS instance.
 */
void twihs_enable_master_mode(Twihs *p_twihs)
{
  400fbc:	b480      	push	{r7}
  400fbe:	b083      	sub	sp, #12
  400fc0:	af00      	add	r7, sp, #0
  400fc2:	6078      	str	r0, [r7, #4]
	/* Set Master Disable bit and Slave Disable bit */
	p_twihs->TWIHS_CR = TWIHS_CR_MSDIS;
  400fc4:	687b      	ldr	r3, [r7, #4]
  400fc6:	2208      	movs	r2, #8
  400fc8:	601a      	str	r2, [r3, #0]
	p_twihs->TWIHS_CR = TWIHS_CR_SVDIS;
  400fca:	687b      	ldr	r3, [r7, #4]
  400fcc:	2220      	movs	r2, #32
  400fce:	601a      	str	r2, [r3, #0]

	/* Set Master Enable bit */
	p_twihs->TWIHS_CR = TWIHS_CR_MSEN;
  400fd0:	687b      	ldr	r3, [r7, #4]
  400fd2:	2204      	movs	r2, #4
  400fd4:	601a      	str	r2, [r3, #0]
}
  400fd6:	370c      	adds	r7, #12
  400fd8:	46bd      	mov	sp, r7
  400fda:	f85d 7b04 	ldr.w	r7, [sp], #4
  400fde:	4770      	bx	lr

00400fe0 <twihs_master_init>:
 * \param p_opt Options for initializing the TWIHS module (see \ref twihs_options_t).
 *
 * \return TWIHS_SUCCESS if initialization is complete, error code otherwise.
 */
uint32_t twihs_master_init(Twihs *p_twihs, const twihs_options_t *p_opt)
{
  400fe0:	b580      	push	{r7, lr}
  400fe2:	b084      	sub	sp, #16
  400fe4:	af00      	add	r7, sp, #0
  400fe6:	6078      	str	r0, [r7, #4]
  400fe8:	6039      	str	r1, [r7, #0]
	uint32_t status = TWIHS_SUCCESS;
  400fea:	2300      	movs	r3, #0
  400fec:	60fb      	str	r3, [r7, #12]

	/* Disable TWIHS interrupts */
	p_twihs->TWIHS_IDR = ~0UL;
  400fee:	687b      	ldr	r3, [r7, #4]
  400ff0:	f04f 32ff 	mov.w	r2, #4294967295
  400ff4:	629a      	str	r2, [r3, #40]	; 0x28

	/* Dummy read in status register */
	p_twihs->TWIHS_SR;
  400ff6:	687b      	ldr	r3, [r7, #4]
  400ff8:	6a1b      	ldr	r3, [r3, #32]

	/* Reset TWIHS peripheral */
	twihs_reset(p_twihs);
  400ffa:	6878      	ldr	r0, [r7, #4]
  400ffc:	4b0b      	ldr	r3, [pc, #44]	; (40102c <twihs_master_init+0x4c>)
  400ffe:	4798      	blx	r3

	twihs_enable_master_mode(p_twihs);
  401000:	6878      	ldr	r0, [r7, #4]
  401002:	4b0b      	ldr	r3, [pc, #44]	; (401030 <twihs_master_init+0x50>)
  401004:	4798      	blx	r3

	/* Select the speed */
	if (twihs_set_speed(p_twihs, p_opt->speed, p_opt->master_clk) == FAIL) {
  401006:	683b      	ldr	r3, [r7, #0]
  401008:	685a      	ldr	r2, [r3, #4]
  40100a:	683b      	ldr	r3, [r7, #0]
  40100c:	681b      	ldr	r3, [r3, #0]
  40100e:	6878      	ldr	r0, [r7, #4]
  401010:	4611      	mov	r1, r2
  401012:	461a      	mov	r2, r3
  401014:	4b07      	ldr	r3, [pc, #28]	; (401034 <twihs_master_init+0x54>)
  401016:	4798      	blx	r3
  401018:	4603      	mov	r3, r0
  40101a:	2b01      	cmp	r3, #1
  40101c:	d101      	bne.n	401022 <twihs_master_init+0x42>
		/* The desired speed setting is rejected */
		status = TWIHS_INVALID_ARGUMENT;
  40101e:	2301      	movs	r3, #1
  401020:	60fb      	str	r3, [r7, #12]
	}

	return status;
  401022:	68fb      	ldr	r3, [r7, #12]
}
  401024:	4618      	mov	r0, r3
  401026:	3710      	adds	r7, #16
  401028:	46bd      	mov	sp, r7
  40102a:	bd80      	pop	{r7, pc}
  40102c:	004012c9 	.word	0x004012c9
  401030:	00400fbd 	.word	0x00400fbd
  401034:	00401039 	.word	0x00401039

00401038 <twihs_set_speed>:
 *
 * \retval PASS New speed setting is accepted.
 * \retval FAIL New speed setting is rejected.
 */
uint32_t twihs_set_speed(Twihs *p_twihs, uint32_t ul_speed, uint32_t ul_mck)
{
  401038:	b480      	push	{r7}
  40103a:	b087      	sub	sp, #28
  40103c:	af00      	add	r7, sp, #0
  40103e:	60f8      	str	r0, [r7, #12]
  401040:	60b9      	str	r1, [r7, #8]
  401042:	607a      	str	r2, [r7, #4]
	uint32_t ckdiv = 0;
  401044:	2300      	movs	r3, #0
  401046:	617b      	str	r3, [r7, #20]
	uint32_t c_lh_div;

	/* High-Speed can be only used in slave mode, 400k is the max speed allowed for master */
	if (ul_speed > I2C_FAST_MODE_SPEED) {
  401048:	68bb      	ldr	r3, [r7, #8]
  40104a:	4a16      	ldr	r2, [pc, #88]	; (4010a4 <twihs_set_speed+0x6c>)
  40104c:	4293      	cmp	r3, r2
  40104e:	d901      	bls.n	401054 <twihs_set_speed+0x1c>
		return FAIL;
  401050:	2301      	movs	r3, #1
  401052:	e021      	b.n	401098 <twihs_set_speed+0x60>
	}

	c_lh_div = ul_mck / (ul_speed * TWIHS_CLK_DIVIDER) - TWIHS_CLK_CALC_ARGU;
  401054:	68bb      	ldr	r3, [r7, #8]
  401056:	005b      	lsls	r3, r3, #1
  401058:	687a      	ldr	r2, [r7, #4]
  40105a:	fbb2 f3f3 	udiv	r3, r2, r3
  40105e:	3b04      	subs	r3, #4
  401060:	613b      	str	r3, [r7, #16]

	/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
	while ((c_lh_div > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  401062:	e005      	b.n	401070 <twihs_set_speed+0x38>
		/* Increase clock divider */
		ckdiv++;
  401064:	697b      	ldr	r3, [r7, #20]
  401066:	3301      	adds	r3, #1
  401068:	617b      	str	r3, [r7, #20]
		/* Divide cldiv value */
		c_lh_div /= TWIHS_CLK_DIVIDER;
  40106a:	693b      	ldr	r3, [r7, #16]
  40106c:	085b      	lsrs	r3, r3, #1
  40106e:	613b      	str	r3, [r7, #16]
	}

	c_lh_div = ul_mck / (ul_speed * TWIHS_CLK_DIVIDER) - TWIHS_CLK_CALC_ARGU;

	/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
	while ((c_lh_div > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  401070:	693b      	ldr	r3, [r7, #16]
  401072:	2bff      	cmp	r3, #255	; 0xff
  401074:	d902      	bls.n	40107c <twihs_set_speed+0x44>
  401076:	697b      	ldr	r3, [r7, #20]
  401078:	2b06      	cmp	r3, #6
  40107a:	d9f3      	bls.n	401064 <twihs_set_speed+0x2c>
		c_lh_div /= TWIHS_CLK_DIVIDER;
	}

	/* set clock waveform generator register */
	p_twihs->TWIHS_CWGR =
			TWIHS_CWGR_CLDIV(c_lh_div) | TWIHS_CWGR_CHDIV(c_lh_div) |
  40107c:	693b      	ldr	r3, [r7, #16]
  40107e:	b2da      	uxtb	r2, r3
  401080:	693b      	ldr	r3, [r7, #16]
  401082:	021b      	lsls	r3, r3, #8
  401084:	b29b      	uxth	r3, r3
  401086:	431a      	orrs	r2, r3
			TWIHS_CWGR_CKDIV(ckdiv);
  401088:	697b      	ldr	r3, [r7, #20]
  40108a:	041b      	lsls	r3, r3, #16
  40108c:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
		c_lh_div /= TWIHS_CLK_DIVIDER;
	}

	/* set clock waveform generator register */
	p_twihs->TWIHS_CWGR =
			TWIHS_CWGR_CLDIV(c_lh_div) | TWIHS_CWGR_CHDIV(c_lh_div) |
  401090:	431a      	orrs	r2, r3
		/* Divide cldiv value */
		c_lh_div /= TWIHS_CLK_DIVIDER;
	}

	/* set clock waveform generator register */
	p_twihs->TWIHS_CWGR =
  401092:	68fb      	ldr	r3, [r7, #12]
  401094:	611a      	str	r2, [r3, #16]
			TWIHS_CWGR_CLDIV(c_lh_div) | TWIHS_CWGR_CHDIV(c_lh_div) |
			TWIHS_CWGR_CKDIV(ckdiv);

	return PASS;
  401096:	2300      	movs	r3, #0
}
  401098:	4618      	mov	r0, r3
  40109a:	371c      	adds	r7, #28
  40109c:	46bd      	mov	sp, r7
  40109e:	f85d 7b04 	ldr.w	r7, [sp], #4
  4010a2:	4770      	bx	lr
  4010a4:	00061a80 	.word	0x00061a80

004010a8 <twihs_mk_addr>:
 * which byte is the MSB to start with.
 *
 * Please see the device datasheet for details on this.
 */
static uint32_t twihs_mk_addr(const uint8_t *addr, int len)
{
  4010a8:	b480      	push	{r7}
  4010aa:	b085      	sub	sp, #20
  4010ac:	af00      	add	r7, sp, #0
  4010ae:	6078      	str	r0, [r7, #4]
  4010b0:	6039      	str	r1, [r7, #0]
	uint32_t val;

	if (len == 0)
  4010b2:	683b      	ldr	r3, [r7, #0]
  4010b4:	2b00      	cmp	r3, #0
  4010b6:	d101      	bne.n	4010bc <twihs_mk_addr+0x14>
		return 0;
  4010b8:	2300      	movs	r3, #0
  4010ba:	e01d      	b.n	4010f8 <twihs_mk_addr+0x50>

	val = addr[0];
  4010bc:	687b      	ldr	r3, [r7, #4]
  4010be:	781b      	ldrb	r3, [r3, #0]
  4010c0:	60fb      	str	r3, [r7, #12]
	if (len > 1) {
  4010c2:	683b      	ldr	r3, [r7, #0]
  4010c4:	2b01      	cmp	r3, #1
  4010c6:	dd09      	ble.n	4010dc <twihs_mk_addr+0x34>
		val <<= 8;
  4010c8:	68fb      	ldr	r3, [r7, #12]
  4010ca:	021b      	lsls	r3, r3, #8
  4010cc:	60fb      	str	r3, [r7, #12]
		val |= addr[1];
  4010ce:	687b      	ldr	r3, [r7, #4]
  4010d0:	3301      	adds	r3, #1
  4010d2:	781b      	ldrb	r3, [r3, #0]
  4010d4:	461a      	mov	r2, r3
  4010d6:	68fb      	ldr	r3, [r7, #12]
  4010d8:	4313      	orrs	r3, r2
  4010da:	60fb      	str	r3, [r7, #12]
	}
	if (len > 2) {
  4010dc:	683b      	ldr	r3, [r7, #0]
  4010de:	2b02      	cmp	r3, #2
  4010e0:	dd09      	ble.n	4010f6 <twihs_mk_addr+0x4e>
		val <<= 8;
  4010e2:	68fb      	ldr	r3, [r7, #12]
  4010e4:	021b      	lsls	r3, r3, #8
  4010e6:	60fb      	str	r3, [r7, #12]
		val |= addr[2];
  4010e8:	687b      	ldr	r3, [r7, #4]
  4010ea:	3302      	adds	r3, #2
  4010ec:	781b      	ldrb	r3, [r3, #0]
  4010ee:	461a      	mov	r2, r3
  4010f0:	68fb      	ldr	r3, [r7, #12]
  4010f2:	4313      	orrs	r3, r2
  4010f4:	60fb      	str	r3, [r7, #12]
	}
	return val;
  4010f6:	68fb      	ldr	r3, [r7, #12]
}
  4010f8:	4618      	mov	r0, r3
  4010fa:	3714      	adds	r7, #20
  4010fc:	46bd      	mov	sp, r7
  4010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
  401102:	4770      	bx	lr

00401104 <twihs_master_read>:
 * \param p_packet Packet information and data (see \ref twihs_packet_t).
 *
 * \return TWIHS_SUCCESS if all bytes were read, error code otherwise.
 */
uint32_t twihs_master_read(Twihs *p_twihs, twihs_packet_t *p_packet)
{
  401104:	b580      	push	{r7, lr}
  401106:	b086      	sub	sp, #24
  401108:	af00      	add	r7, sp, #0
  40110a:	6078      	str	r0, [r7, #4]
  40110c:	6039      	str	r1, [r7, #0]
	uint32_t status, cnt = p_packet->length;
  40110e:	683b      	ldr	r3, [r7, #0]
  401110:	68db      	ldr	r3, [r3, #12]
  401112:	617b      	str	r3, [r7, #20]
	uint8_t *buffer = p_packet->buffer;
  401114:	683b      	ldr	r3, [r7, #0]
  401116:	689b      	ldr	r3, [r3, #8]
  401118:	613b      	str	r3, [r7, #16]
	uint32_t timeout = TWIHS_TIMEOUT;
  40111a:	f643 2398 	movw	r3, #15000	; 0x3a98
  40111e:	60fb      	str	r3, [r7, #12]

	/* Check argument */
	if (cnt == 0) {
  401120:	697b      	ldr	r3, [r7, #20]
  401122:	2b00      	cmp	r3, #0
  401124:	d101      	bne.n	40112a <twihs_master_read+0x26>
		return TWIHS_INVALID_ARGUMENT;
  401126:	2301      	movs	r3, #1
  401128:	e059      	b.n	4011de <twihs_master_read+0xda>
	}

	/* Set read mode, slave address and 3 internal address byte lengths */
	p_twihs->TWIHS_MMR = 0;
  40112a:	687b      	ldr	r3, [r7, #4]
  40112c:	2200      	movs	r2, #0
  40112e:	605a      	str	r2, [r3, #4]
	p_twihs->TWIHS_MMR = TWIHS_MMR_MREAD | TWIHS_MMR_DADR(p_packet->chip) |
  401130:	683b      	ldr	r3, [r7, #0]
  401132:	7c1b      	ldrb	r3, [r3, #16]
  401134:	041b      	lsls	r3, r3, #16
  401136:	f403 02fe 	and.w	r2, r3, #8323072	; 0x7f0000
			((p_packet->addr_length << TWIHS_MMR_IADRSZ_Pos) &
  40113a:	683b      	ldr	r3, [r7, #0]
  40113c:	685b      	ldr	r3, [r3, #4]
  40113e:	021b      	lsls	r3, r3, #8
  401140:	f403 7340 	and.w	r3, r3, #768	; 0x300
		return TWIHS_INVALID_ARGUMENT;
	}

	/* Set read mode, slave address and 3 internal address byte lengths */
	p_twihs->TWIHS_MMR = 0;
	p_twihs->TWIHS_MMR = TWIHS_MMR_MREAD | TWIHS_MMR_DADR(p_packet->chip) |
  401144:	4313      	orrs	r3, r2
  401146:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
  40114a:	687b      	ldr	r3, [r7, #4]
  40114c:	605a      	str	r2, [r3, #4]
			((p_packet->addr_length << TWIHS_MMR_IADRSZ_Pos) &
			TWIHS_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twihs->TWIHS_IADR = 0;
  40114e:	687b      	ldr	r3, [r7, #4]
  401150:	2200      	movs	r2, #0
  401152:	60da      	str	r2, [r3, #12]
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);
  401154:	683a      	ldr	r2, [r7, #0]
  401156:	683b      	ldr	r3, [r7, #0]
  401158:	685b      	ldr	r3, [r3, #4]
  40115a:	4610      	mov	r0, r2
  40115c:	4619      	mov	r1, r3
  40115e:	4b22      	ldr	r3, [pc, #136]	; (4011e8 <twihs_master_read+0xe4>)
  401160:	4798      	blx	r3
  401162:	4602      	mov	r2, r0
  401164:	687b      	ldr	r3, [r7, #4]
  401166:	60da      	str	r2, [r3, #12]

	/* Send a START Condition */
	p_twihs->TWIHS_CR = TWIHS_CR_START;
  401168:	687b      	ldr	r3, [r7, #4]
  40116a:	2201      	movs	r2, #1
  40116c:	601a      	str	r2, [r3, #0]

	while (cnt > 0) {
  40116e:	e029      	b.n	4011c4 <twihs_master_read+0xc0>
		status = p_twihs->TWIHS_SR;
  401170:	687b      	ldr	r3, [r7, #4]
  401172:	6a1b      	ldr	r3, [r3, #32]
  401174:	60bb      	str	r3, [r7, #8]
		if (status & TWIHS_SR_NACK) {
  401176:	68bb      	ldr	r3, [r7, #8]
  401178:	f403 7380 	and.w	r3, r3, #256	; 0x100
  40117c:	2b00      	cmp	r3, #0
  40117e:	d001      	beq.n	401184 <twihs_master_read+0x80>
			return TWIHS_RECEIVE_NACK;
  401180:	2305      	movs	r3, #5
  401182:	e02c      	b.n	4011de <twihs_master_read+0xda>
		}
		if (!timeout--) {
  401184:	68fb      	ldr	r3, [r7, #12]
  401186:	1e5a      	subs	r2, r3, #1
  401188:	60fa      	str	r2, [r7, #12]
  40118a:	2b00      	cmp	r3, #0
  40118c:	d101      	bne.n	401192 <twihs_master_read+0x8e>
			return TWIHS_ERROR_TIMEOUT;
  40118e:	2309      	movs	r3, #9
  401190:	e025      	b.n	4011de <twihs_master_read+0xda>
		}
		/* Last byte ? */
		if (cnt == 1) {
  401192:	697b      	ldr	r3, [r7, #20]
  401194:	2b01      	cmp	r3, #1
  401196:	d102      	bne.n	40119e <twihs_master_read+0x9a>
			p_twihs->TWIHS_CR = TWIHS_CR_STOP;
  401198:	687b      	ldr	r3, [r7, #4]
  40119a:	2202      	movs	r2, #2
  40119c:	601a      	str	r2, [r3, #0]
		}

		if (!(status & TWIHS_SR_RXRDY)) {
  40119e:	68bb      	ldr	r3, [r7, #8]
  4011a0:	f003 0302 	and.w	r3, r3, #2
  4011a4:	2b00      	cmp	r3, #0
  4011a6:	d100      	bne.n	4011aa <twihs_master_read+0xa6>
			continue;
  4011a8:	e00c      	b.n	4011c4 <twihs_master_read+0xc0>
		}
		*buffer++ = p_twihs->TWIHS_RHR;
  4011aa:	693b      	ldr	r3, [r7, #16]
  4011ac:	1c5a      	adds	r2, r3, #1
  4011ae:	613a      	str	r2, [r7, #16]
  4011b0:	687a      	ldr	r2, [r7, #4]
  4011b2:	6b12      	ldr	r2, [r2, #48]	; 0x30
  4011b4:	b2d2      	uxtb	r2, r2
  4011b6:	701a      	strb	r2, [r3, #0]

		cnt--;
  4011b8:	697b      	ldr	r3, [r7, #20]
  4011ba:	3b01      	subs	r3, #1
  4011bc:	617b      	str	r3, [r7, #20]
		timeout = TWIHS_TIMEOUT;
  4011be:	f643 2398 	movw	r3, #15000	; 0x3a98
  4011c2:	60fb      	str	r3, [r7, #12]
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);

	/* Send a START Condition */
	p_twihs->TWIHS_CR = TWIHS_CR_START;

	while (cnt > 0) {
  4011c4:	697b      	ldr	r3, [r7, #20]
  4011c6:	2b00      	cmp	r3, #0
  4011c8:	d1d2      	bne.n	401170 <twihs_master_read+0x6c>

		cnt--;
		timeout = TWIHS_TIMEOUT;
	}

	while (!(p_twihs->TWIHS_SR & TWIHS_SR_TXCOMP)) {
  4011ca:	bf00      	nop
  4011cc:	687b      	ldr	r3, [r7, #4]
  4011ce:	6a1b      	ldr	r3, [r3, #32]
  4011d0:	f003 0301 	and.w	r3, r3, #1
  4011d4:	2b00      	cmp	r3, #0
  4011d6:	d0f9      	beq.n	4011cc <twihs_master_read+0xc8>
	}

	p_twihs->TWIHS_SR;
  4011d8:	687b      	ldr	r3, [r7, #4]
  4011da:	6a1b      	ldr	r3, [r3, #32]

	return TWIHS_SUCCESS;
  4011dc:	2300      	movs	r3, #0
}
  4011de:	4618      	mov	r0, r3
  4011e0:	3718      	adds	r7, #24
  4011e2:	46bd      	mov	sp, r7
  4011e4:	bd80      	pop	{r7, pc}
  4011e6:	bf00      	nop
  4011e8:	004010a9 	.word	0x004010a9

004011ec <twihs_master_write>:
 * \param p_packet Packet information and data (see \ref twihs_packet_t).
 *
 * \return TWIHS_SUCCESS if all bytes were written, error code otherwise.
 */
uint32_t twihs_master_write(Twihs *p_twihs, twihs_packet_t *p_packet)
{
  4011ec:	b580      	push	{r7, lr}
  4011ee:	b086      	sub	sp, #24
  4011f0:	af00      	add	r7, sp, #0
  4011f2:	6078      	str	r0, [r7, #4]
  4011f4:	6039      	str	r1, [r7, #0]
	uint32_t status, cnt = p_packet->length;
  4011f6:	683b      	ldr	r3, [r7, #0]
  4011f8:	68db      	ldr	r3, [r3, #12]
  4011fa:	617b      	str	r3, [r7, #20]
	uint8_t *buffer = p_packet->buffer;
  4011fc:	683b      	ldr	r3, [r7, #0]
  4011fe:	689b      	ldr	r3, [r3, #8]
  401200:	613b      	str	r3, [r7, #16]

	/* Check argument */
	if (cnt == 0) {
  401202:	697b      	ldr	r3, [r7, #20]
  401204:	2b00      	cmp	r3, #0
  401206:	d101      	bne.n	40120c <twihs_master_write+0x20>
		return TWIHS_INVALID_ARGUMENT;
  401208:	2301      	movs	r3, #1
  40120a:	e056      	b.n	4012ba <twihs_master_write+0xce>
	}

	/* Set write mode, slave address and 3 internal address byte lengths */
	p_twihs->TWIHS_MMR = 0;
  40120c:	687b      	ldr	r3, [r7, #4]
  40120e:	2200      	movs	r2, #0
  401210:	605a      	str	r2, [r3, #4]
	p_twihs->TWIHS_MMR = TWIHS_MMR_DADR(p_packet->chip) |
  401212:	683b      	ldr	r3, [r7, #0]
  401214:	7c1b      	ldrb	r3, [r3, #16]
  401216:	041b      	lsls	r3, r3, #16
  401218:	f403 02fe 	and.w	r2, r3, #8323072	; 0x7f0000
			((p_packet->addr_length << TWIHS_MMR_IADRSZ_Pos) &
  40121c:	683b      	ldr	r3, [r7, #0]
  40121e:	685b      	ldr	r3, [r3, #4]
  401220:	021b      	lsls	r3, r3, #8
  401222:	f403 7340 	and.w	r3, r3, #768	; 0x300
		return TWIHS_INVALID_ARGUMENT;
	}

	/* Set write mode, slave address and 3 internal address byte lengths */
	p_twihs->TWIHS_MMR = 0;
	p_twihs->TWIHS_MMR = TWIHS_MMR_DADR(p_packet->chip) |
  401226:	431a      	orrs	r2, r3
  401228:	687b      	ldr	r3, [r7, #4]
  40122a:	605a      	str	r2, [r3, #4]
			((p_packet->addr_length << TWIHS_MMR_IADRSZ_Pos) &
			TWIHS_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twihs->TWIHS_IADR = 0;
  40122c:	687b      	ldr	r3, [r7, #4]
  40122e:	2200      	movs	r2, #0
  401230:	60da      	str	r2, [r3, #12]
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);
  401232:	683a      	ldr	r2, [r7, #0]
  401234:	683b      	ldr	r3, [r7, #0]
  401236:	685b      	ldr	r3, [r3, #4]
  401238:	4610      	mov	r0, r2
  40123a:	4619      	mov	r1, r3
  40123c:	4b21      	ldr	r3, [pc, #132]	; (4012c4 <twihs_master_write+0xd8>)
  40123e:	4798      	blx	r3
  401240:	4602      	mov	r2, r0
  401242:	687b      	ldr	r3, [r7, #4]
  401244:	60da      	str	r2, [r3, #12]

	/* Send all bytes */
	while (cnt > 0) {
  401246:	e019      	b.n	40127c <twihs_master_write+0x90>
		status = p_twihs->TWIHS_SR;
  401248:	687b      	ldr	r3, [r7, #4]
  40124a:	6a1b      	ldr	r3, [r3, #32]
  40124c:	60fb      	str	r3, [r7, #12]
		if (status & TWIHS_SR_NACK) {
  40124e:	68fb      	ldr	r3, [r7, #12]
  401250:	f403 7380 	and.w	r3, r3, #256	; 0x100
  401254:	2b00      	cmp	r3, #0
  401256:	d001      	beq.n	40125c <twihs_master_write+0x70>
			return TWIHS_RECEIVE_NACK;
  401258:	2305      	movs	r3, #5
  40125a:	e02e      	b.n	4012ba <twihs_master_write+0xce>
		}

		if (!(status & TWIHS_SR_TXRDY)) {
  40125c:	68fb      	ldr	r3, [r7, #12]
  40125e:	f003 0304 	and.w	r3, r3, #4
  401262:	2b00      	cmp	r3, #0
  401264:	d100      	bne.n	401268 <twihs_master_write+0x7c>
			continue;
  401266:	e009      	b.n	40127c <twihs_master_write+0x90>
		}
		p_twihs->TWIHS_THR = *buffer++;
  401268:	693b      	ldr	r3, [r7, #16]
  40126a:	1c5a      	adds	r2, r3, #1
  40126c:	613a      	str	r2, [r7, #16]
  40126e:	781b      	ldrb	r3, [r3, #0]
  401270:	461a      	mov	r2, r3
  401272:	687b      	ldr	r3, [r7, #4]
  401274:	635a      	str	r2, [r3, #52]	; 0x34

		cnt--;
  401276:	697b      	ldr	r3, [r7, #20]
  401278:	3b01      	subs	r3, #1
  40127a:	617b      	str	r3, [r7, #20]
	/* Set internal address for remote chip */
	p_twihs->TWIHS_IADR = 0;
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);

	/* Send all bytes */
	while (cnt > 0) {
  40127c:	697b      	ldr	r3, [r7, #20]
  40127e:	2b00      	cmp	r3, #0
  401280:	d1e2      	bne.n	401248 <twihs_master_write+0x5c>

		cnt--;
	}

	while (1) {
		status = p_twihs->TWIHS_SR;
  401282:	687b      	ldr	r3, [r7, #4]
  401284:	6a1b      	ldr	r3, [r3, #32]
  401286:	60fb      	str	r3, [r7, #12]
		if (status & TWIHS_SR_NACK) {
  401288:	68fb      	ldr	r3, [r7, #12]
  40128a:	f403 7380 	and.w	r3, r3, #256	; 0x100
  40128e:	2b00      	cmp	r3, #0
  401290:	d001      	beq.n	401296 <twihs_master_write+0xaa>
			return TWIHS_RECEIVE_NACK;
  401292:	2305      	movs	r3, #5
  401294:	e011      	b.n	4012ba <twihs_master_write+0xce>
		}

		if (status & TWIHS_SR_TXRDY) {
  401296:	68fb      	ldr	r3, [r7, #12]
  401298:	f003 0304 	and.w	r3, r3, #4
  40129c:	2b00      	cmp	r3, #0
  40129e:	d004      	beq.n	4012aa <twihs_master_write+0xbe>
			break;
  4012a0:	bf00      	nop
		}
	}

	p_twihs->TWIHS_CR = TWIHS_CR_STOP;
  4012a2:	687b      	ldr	r3, [r7, #4]
  4012a4:	2202      	movs	r2, #2
  4012a6:	601a      	str	r2, [r3, #0]

	while (!(p_twihs->TWIHS_SR & TWIHS_SR_TXCOMP)) {
  4012a8:	e000      	b.n	4012ac <twihs_master_write+0xc0>
		}

		if (status & TWIHS_SR_TXRDY) {
			break;
		}
	}
  4012aa:	e7ea      	b.n	401282 <twihs_master_write+0x96>

	p_twihs->TWIHS_CR = TWIHS_CR_STOP;

	while (!(p_twihs->TWIHS_SR & TWIHS_SR_TXCOMP)) {
  4012ac:	687b      	ldr	r3, [r7, #4]
  4012ae:	6a1b      	ldr	r3, [r3, #32]
  4012b0:	f003 0301 	and.w	r3, r3, #1
  4012b4:	2b00      	cmp	r3, #0
  4012b6:	d0f9      	beq.n	4012ac <twihs_master_write+0xc0>
	}

	return TWIHS_SUCCESS;
  4012b8:	2300      	movs	r3, #0
}
  4012ba:	4618      	mov	r0, r3
  4012bc:	3718      	adds	r7, #24
  4012be:	46bd      	mov	sp, r7
  4012c0:	bd80      	pop	{r7, pc}
  4012c2:	bf00      	nop
  4012c4:	004010a9 	.word	0x004010a9

004012c8 <twihs_reset>:
 * \brief Reset TWIHS.
 *
 * \param p_twihs Pointer to a TWIHS instance.
 */
void twihs_reset(Twihs *p_twihs)
{
  4012c8:	b480      	push	{r7}
  4012ca:	b083      	sub	sp, #12
  4012cc:	af00      	add	r7, sp, #0
  4012ce:	6078      	str	r0, [r7, #4]
	/* Set SWRST bit to reset TWIHS peripheral */
	p_twihs->TWIHS_CR = TWIHS_CR_SWRST;
  4012d0:	687b      	ldr	r3, [r7, #4]
  4012d2:	2280      	movs	r2, #128	; 0x80
  4012d4:	601a      	str	r2, [r3, #0]
	p_twihs->TWIHS_RHR;
  4012d6:	687b      	ldr	r3, [r7, #4]
  4012d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
  4012da:	370c      	adds	r7, #12
  4012dc:	46bd      	mov	sp, r7
  4012de:	f85d 7b04 	ldr.w	r7, [sp], #4
  4012e2:	4770      	bx	lr

004012e4 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
  4012e4:	b480      	push	{r7}
  4012e6:	b085      	sub	sp, #20
  4012e8:	af00      	add	r7, sp, #0
  4012ea:	6078      	str	r0, [r7, #4]
  4012ec:	6039      	str	r1, [r7, #0]
	uint32_t cd = 0;
  4012ee:	2300      	movs	r3, #0
  4012f0:	60fb      	str	r3, [r7, #12]

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
  4012f2:	687b      	ldr	r3, [r7, #4]
  4012f4:	22ac      	movs	r2, #172	; 0xac
  4012f6:	601a      	str	r2, [r3, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
  4012f8:	683b      	ldr	r3, [r7, #0]
  4012fa:	681a      	ldr	r2, [r3, #0]
  4012fc:	683b      	ldr	r3, [r7, #0]
  4012fe:	685b      	ldr	r3, [r3, #4]
  401300:	fbb2 f3f3 	udiv	r3, r2, r3
  401304:	091b      	lsrs	r3, r3, #4
  401306:	60fb      	str	r3, [r7, #12]
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
  401308:	68fb      	ldr	r3, [r7, #12]
  40130a:	2b00      	cmp	r3, #0
  40130c:	d003      	beq.n	401316 <uart_init+0x32>
  40130e:	68fb      	ldr	r3, [r7, #12]
  401310:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
  401314:	d301      	bcc.n	40131a <uart_init+0x36>
		return 1;
  401316:	2301      	movs	r3, #1
  401318:	e00a      	b.n	401330 <uart_init+0x4c>

	p_uart->UART_BRGR = cd;
  40131a:	687b      	ldr	r3, [r7, #4]
  40131c:	68fa      	ldr	r2, [r7, #12]
  40131e:	621a      	str	r2, [r3, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
  401320:	683b      	ldr	r3, [r7, #0]
  401322:	689a      	ldr	r2, [r3, #8]
  401324:	687b      	ldr	r3, [r7, #4]
  401326:	605a      	str	r2, [r3, #4]
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
  401328:	687b      	ldr	r3, [r7, #4]
  40132a:	2250      	movs	r2, #80	; 0x50
  40132c:	601a      	str	r2, [r3, #0]

	return 0;
  40132e:	2300      	movs	r3, #0
}
  401330:	4618      	mov	r0, r3
  401332:	3714      	adds	r7, #20
  401334:	46bd      	mov	sp, r7
  401336:	f85d 7b04 	ldr.w	r7, [sp], #4
  40133a:	4770      	bx	lr

0040133c <uart_write>:
 *
 * \retval 0 Success.
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
  40133c:	b480      	push	{r7}
  40133e:	b083      	sub	sp, #12
  401340:	af00      	add	r7, sp, #0
  401342:	6078      	str	r0, [r7, #4]
  401344:	460b      	mov	r3, r1
  401346:	70fb      	strb	r3, [r7, #3]
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  401348:	687b      	ldr	r3, [r7, #4]
  40134a:	695b      	ldr	r3, [r3, #20]
  40134c:	f003 0302 	and.w	r3, r3, #2
  401350:	2b00      	cmp	r3, #0
  401352:	d101      	bne.n	401358 <uart_write+0x1c>
		return 1;
  401354:	2301      	movs	r3, #1
  401356:	e003      	b.n	401360 <uart_write+0x24>

	/* Send character */
	p_uart->UART_THR = uc_data;
  401358:	78fa      	ldrb	r2, [r7, #3]
  40135a:	687b      	ldr	r3, [r7, #4]
  40135c:	61da      	str	r2, [r3, #28]
	return 0;
  40135e:	2300      	movs	r3, #0
}
  401360:	4618      	mov	r0, r3
  401362:	370c      	adds	r7, #12
  401364:	46bd      	mov	sp, r7
  401366:	f85d 7b04 	ldr.w	r7, [sp], #4
  40136a:	4770      	bx	lr

0040136c <uart_read>:
 *
 * \retval 0 Success.
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
  40136c:	b480      	push	{r7}
  40136e:	b083      	sub	sp, #12
  401370:	af00      	add	r7, sp, #0
  401372:	6078      	str	r0, [r7, #4]
  401374:	6039      	str	r1, [r7, #0]
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  401376:	687b      	ldr	r3, [r7, #4]
  401378:	695b      	ldr	r3, [r3, #20]
  40137a:	f003 0301 	and.w	r3, r3, #1
  40137e:	2b00      	cmp	r3, #0
  401380:	d101      	bne.n	401386 <uart_read+0x1a>
		return 1;
  401382:	2301      	movs	r3, #1
  401384:	e005      	b.n	401392 <uart_read+0x26>

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  401386:	687b      	ldr	r3, [r7, #4]
  401388:	699b      	ldr	r3, [r3, #24]
  40138a:	b2da      	uxtb	r2, r3
  40138c:	683b      	ldr	r3, [r7, #0]
  40138e:	701a      	strb	r2, [r3, #0]
	return 0;
  401390:	2300      	movs	r3, #0
}
  401392:	4618      	mov	r0, r3
  401394:	370c      	adds	r7, #12
  401396:	46bd      	mov	sp, r7
  401398:	f85d 7b04 	ldr.w	r7, [sp], #4
  40139c:	4770      	bx	lr
  40139e:	bf00      	nop

004013a0 <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  4013a0:	b480      	push	{r7}
  4013a2:	b089      	sub	sp, #36	; 0x24
  4013a4:	af00      	add	r7, sp, #0
  4013a6:	60f8      	str	r0, [r7, #12]
  4013a8:	60b9      	str	r1, [r7, #8]
  4013aa:	607a      	str	r2, [r7, #4]
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  4013ac:	68bb      	ldr	r3, [r7, #8]
  4013ae:	011a      	lsls	r2, r3, #4
  4013b0:	687b      	ldr	r3, [r7, #4]
  4013b2:	429a      	cmp	r2, r3
  4013b4:	d802      	bhi.n	4013bc <usart_set_async_baudrate+0x1c>
		over = HIGH_FRQ_SAMPLE_DIV;
  4013b6:	2310      	movs	r3, #16
  4013b8:	61fb      	str	r3, [r7, #28]
  4013ba:	e001      	b.n	4013c0 <usart_set_async_baudrate+0x20>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
  4013bc:	2308      	movs	r3, #8
  4013be:	61fb      	str	r3, [r7, #28]
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  4013c0:	687b      	ldr	r3, [r7, #4]
  4013c2:	00da      	lsls	r2, r3, #3
  4013c4:	69fb      	ldr	r3, [r7, #28]
  4013c6:	68b9      	ldr	r1, [r7, #8]
  4013c8:	fb01 f303 	mul.w	r3, r1, r3
  4013cc:	085b      	lsrs	r3, r3, #1
  4013ce:	441a      	add	r2, r3
  4013d0:	69fb      	ldr	r3, [r7, #28]
  4013d2:	68b9      	ldr	r1, [r7, #8]
  4013d4:	fb01 f303 	mul.w	r3, r1, r3
  4013d8:	fbb2 f3f3 	udiv	r3, r2, r3
  4013dc:	61bb      	str	r3, [r7, #24]
	cd = cd_fp >> 3;
  4013de:	69bb      	ldr	r3, [r7, #24]
  4013e0:	08db      	lsrs	r3, r3, #3
  4013e2:	617b      	str	r3, [r7, #20]
	fp = cd_fp & 0x07;
  4013e4:	69bb      	ldr	r3, [r7, #24]
  4013e6:	f003 0307 	and.w	r3, r3, #7
  4013ea:	613b      	str	r3, [r7, #16]
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  4013ec:	697b      	ldr	r3, [r7, #20]
  4013ee:	2b00      	cmp	r3, #0
  4013f0:	d003      	beq.n	4013fa <usart_set_async_baudrate+0x5a>
  4013f2:	697b      	ldr	r3, [r7, #20]
  4013f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
  4013f8:	d301      	bcc.n	4013fe <usart_set_async_baudrate+0x5e>
		return 1;
  4013fa:	2301      	movs	r3, #1
  4013fc:	e00f      	b.n	40141e <usart_set_async_baudrate+0x7e>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
  4013fe:	69fb      	ldr	r3, [r7, #28]
  401400:	2b08      	cmp	r3, #8
  401402:	d105      	bne.n	401410 <usart_set_async_baudrate+0x70>
		p_usart->US_MR |= US_MR_OVER;
  401404:	68fb      	ldr	r3, [r7, #12]
  401406:	685b      	ldr	r3, [r3, #4]
  401408:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
  40140c:	68fb      	ldr	r3, [r7, #12]
  40140e:	605a      	str	r2, [r3, #4]
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  401410:	693b      	ldr	r3, [r7, #16]
  401412:	041a      	lsls	r2, r3, #16
  401414:	697b      	ldr	r3, [r7, #20]
  401416:	431a      	orrs	r2, r3
  401418:	68fb      	ldr	r3, [r7, #12]
  40141a:	621a      	str	r2, [r3, #32]

	return 0;
  40141c:	2300      	movs	r3, #0
}
  40141e:	4618      	mov	r0, r3
  401420:	3724      	adds	r7, #36	; 0x24
  401422:	46bd      	mov	sp, r7
  401424:	f85d 7b04 	ldr.w	r7, [sp], #4
  401428:	4770      	bx	lr
  40142a:	bf00      	nop

0040142c <usart_reset>:
 * \brief Reset the USART and disable TX and RX.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset(Usart *p_usart)
{
  40142c:	b580      	push	{r7, lr}
  40142e:	b082      	sub	sp, #8
  401430:	af00      	add	r7, sp, #0
  401432:	6078      	str	r0, [r7, #4]
	/* Disable the Write Protect. */
	usart_disable_writeprotect(p_usart);
  401434:	6878      	ldr	r0, [r7, #4]
  401436:	4b0d      	ldr	r3, [pc, #52]	; (40146c <usart_reset+0x40>)
  401438:	4798      	blx	r3

	/* Reset registers that could cause unpredictable behavior after reset. */
	p_usart->US_MR = 0;
  40143a:	687b      	ldr	r3, [r7, #4]
  40143c:	2200      	movs	r2, #0
  40143e:	605a      	str	r2, [r3, #4]
	p_usart->US_RTOR = 0;
  401440:	687b      	ldr	r3, [r7, #4]
  401442:	2200      	movs	r2, #0
  401444:	625a      	str	r2, [r3, #36]	; 0x24
	p_usart->US_TTGR = 0;
  401446:	687b      	ldr	r3, [r7, #4]
  401448:	2200      	movs	r2, #0
  40144a:	629a      	str	r2, [r3, #40]	; 0x28

	/* Disable TX and RX. */
	usart_reset_tx(p_usart);
  40144c:	6878      	ldr	r0, [r7, #4]
  40144e:	4b08      	ldr	r3, [pc, #32]	; (401470 <usart_reset+0x44>)
  401450:	4798      	blx	r3
	usart_reset_rx(p_usart);
  401452:	6878      	ldr	r0, [r7, #4]
  401454:	4b07      	ldr	r3, [pc, #28]	; (401474 <usart_reset+0x48>)
  401456:	4798      	blx	r3
	/* Reset status bits. */
	usart_reset_status(p_usart);
  401458:	6878      	ldr	r0, [r7, #4]
  40145a:	4b07      	ldr	r3, [pc, #28]	; (401478 <usart_reset+0x4c>)
  40145c:	4798      	blx	r3
	/* Turn off RTS and DTR if exist. */
	usart_drive_RTS_pin_high(p_usart);
  40145e:	6878      	ldr	r0, [r7, #4]
  401460:	4b06      	ldr	r3, [pc, #24]	; (40147c <usart_reset+0x50>)
  401462:	4798      	blx	r3
#if (SAM3S || SAM4S || SAM3U || SAM4L || SAM4E)
	usart_drive_DTR_pin_high(p_usart);
#endif
}
  401464:	3708      	adds	r7, #8
  401466:	46bd      	mov	sp, r7
  401468:	bd80      	pop	{r7, pc}
  40146a:	bf00      	nop
  40146c:	004016c1 	.word	0x004016c1
  401470:	0040151d 	.word	0x0040151d
  401474:	00401569 	.word	0x00401569
  401478:	004015d1 	.word	0x004015d1
  40147c:	004015ed 	.word	0x004015ed

00401480 <usart_init_rs232>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_rs232(Usart *p_usart,
		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
{
  401480:	b580      	push	{r7, lr}
  401482:	b084      	sub	sp, #16
  401484:	af00      	add	r7, sp, #0
  401486:	60f8      	str	r0, [r7, #12]
  401488:	60b9      	str	r1, [r7, #8]
  40148a:	607a      	str	r2, [r7, #4]
	static uint32_t ul_reg_val;

	/* Reset the USART and shut down TX and RX. */
	usart_reset(p_usart);
  40148c:	68f8      	ldr	r0, [r7, #12]
  40148e:	4b1a      	ldr	r3, [pc, #104]	; (4014f8 <usart_init_rs232+0x78>)
  401490:	4798      	blx	r3

	ul_reg_val = 0;
  401492:	4b1a      	ldr	r3, [pc, #104]	; (4014fc <usart_init_rs232+0x7c>)
  401494:	2200      	movs	r2, #0
  401496:	601a      	str	r2, [r3, #0]
	/* Check whether the input values are legal. */
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  401498:	68bb      	ldr	r3, [r7, #8]
  40149a:	2b00      	cmp	r3, #0
  40149c:	d009      	beq.n	4014b2 <usart_init_rs232+0x32>
  40149e:	68bb      	ldr	r3, [r7, #8]
  4014a0:	681b      	ldr	r3, [r3, #0]
  4014a2:	68f8      	ldr	r0, [r7, #12]
  4014a4:	4619      	mov	r1, r3
  4014a6:	687a      	ldr	r2, [r7, #4]
  4014a8:	4b15      	ldr	r3, [pc, #84]	; (401500 <usart_init_rs232+0x80>)
  4014aa:	4798      	blx	r3
  4014ac:	4603      	mov	r3, r0
  4014ae:	2b00      	cmp	r3, #0
  4014b0:	d001      	beq.n	4014b6 <usart_init_rs232+0x36>
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
  4014b2:	2301      	movs	r3, #1
  4014b4:	e01b      	b.n	4014ee <usart_init_rs232+0x6e>
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  4014b6:	68bb      	ldr	r3, [r7, #8]
  4014b8:	685a      	ldr	r2, [r3, #4]
  4014ba:	68bb      	ldr	r3, [r7, #8]
  4014bc:	689b      	ldr	r3, [r3, #8]
  4014be:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  4014c0:	68bb      	ldr	r3, [r7, #8]
  4014c2:	691b      	ldr	r3, [r3, #16]
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  4014c4:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  4014c6:	68bb      	ldr	r3, [r7, #8]
  4014c8:	68db      	ldr	r3, [r3, #12]
  4014ca:	431a      	orrs	r2, r3
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  4014cc:	4b0b      	ldr	r3, [pc, #44]	; (4014fc <usart_init_rs232+0x7c>)
  4014ce:	681b      	ldr	r3, [r3, #0]
  4014d0:	4313      	orrs	r3, r2
  4014d2:	4a0a      	ldr	r2, [pc, #40]	; (4014fc <usart_init_rs232+0x7c>)
  4014d4:	6013      	str	r3, [r2, #0]
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;

	/* Configure the USART mode as normal mode. */
	ul_reg_val |= US_MR_USART_MODE_NORMAL;
  4014d6:	4b09      	ldr	r3, [pc, #36]	; (4014fc <usart_init_rs232+0x7c>)
  4014d8:	681b      	ldr	r3, [r3, #0]
  4014da:	4a08      	ldr	r2, [pc, #32]	; (4014fc <usart_init_rs232+0x7c>)
  4014dc:	6013      	str	r3, [r2, #0]

	p_usart->US_MR |= ul_reg_val;
  4014de:	68fb      	ldr	r3, [r7, #12]
  4014e0:	685a      	ldr	r2, [r3, #4]
  4014e2:	4b06      	ldr	r3, [pc, #24]	; (4014fc <usart_init_rs232+0x7c>)
  4014e4:	681b      	ldr	r3, [r3, #0]
  4014e6:	431a      	orrs	r2, r3
  4014e8:	68fb      	ldr	r3, [r7, #12]
  4014ea:	605a      	str	r2, [r3, #4]

	return 0;
  4014ec:	2300      	movs	r3, #0
}
  4014ee:	4618      	mov	r0, r3
  4014f0:	3710      	adds	r7, #16
  4014f2:	46bd      	mov	sp, r7
  4014f4:	bd80      	pop	{r7, pc}
  4014f6:	bf00      	nop
  4014f8:	0040142d 	.word	0x0040142d
  4014fc:	20400980 	.word	0x20400980
  401500:	004013a1 	.word	0x004013a1

00401504 <usart_enable_tx>:
 * \brief Enable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_tx(Usart *p_usart)
{
  401504:	b480      	push	{r7}
  401506:	b083      	sub	sp, #12
  401508:	af00      	add	r7, sp, #0
  40150a:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_TXEN;
  40150c:	687b      	ldr	r3, [r7, #4]
  40150e:	2240      	movs	r2, #64	; 0x40
  401510:	601a      	str	r2, [r3, #0]
}
  401512:	370c      	adds	r7, #12
  401514:	46bd      	mov	sp, r7
  401516:	f85d 7b04 	ldr.w	r7, [sp], #4
  40151a:	4770      	bx	lr

0040151c <usart_reset_tx>:
 * \brief Immediately stop and disable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_tx(Usart *p_usart)
{
  40151c:	b480      	push	{r7}
  40151e:	b083      	sub	sp, #12
  401520:	af00      	add	r7, sp, #0
  401522:	6078      	str	r0, [r7, #4]
	/* Reset transmitter */
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  401524:	687b      	ldr	r3, [r7, #4]
  401526:	2288      	movs	r2, #136	; 0x88
  401528:	601a      	str	r2, [r3, #0]
}
  40152a:	370c      	adds	r7, #12
  40152c:	46bd      	mov	sp, r7
  40152e:	f85d 7b04 	ldr.w	r7, [sp], #4
  401532:	4770      	bx	lr

00401534 <usart_set_tx_timeguard>:
 *
 * \param p_usart Pointer to a USART instance.
 * \param timeguard The value of transmit timeguard.
 */
void usart_set_tx_timeguard(Usart *p_usart, uint32_t timeguard)
{
  401534:	b480      	push	{r7}
  401536:	b083      	sub	sp, #12
  401538:	af00      	add	r7, sp, #0
  40153a:	6078      	str	r0, [r7, #4]
  40153c:	6039      	str	r1, [r7, #0]
	p_usart->US_TTGR = timeguard;
  40153e:	687b      	ldr	r3, [r7, #4]
  401540:	683a      	ldr	r2, [r7, #0]
  401542:	629a      	str	r2, [r3, #40]	; 0x28
}
  401544:	370c      	adds	r7, #12
  401546:	46bd      	mov	sp, r7
  401548:	f85d 7b04 	ldr.w	r7, [sp], #4
  40154c:	4770      	bx	lr
  40154e:	bf00      	nop

00401550 <usart_enable_rx>:
 * \brief Enable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_rx(Usart *p_usart)
{
  401550:	b480      	push	{r7}
  401552:	b083      	sub	sp, #12
  401554:	af00      	add	r7, sp, #0
  401556:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RXEN;
  401558:	687b      	ldr	r3, [r7, #4]
  40155a:	2210      	movs	r2, #16
  40155c:	601a      	str	r2, [r3, #0]
}
  40155e:	370c      	adds	r7, #12
  401560:	46bd      	mov	sp, r7
  401562:	f85d 7b04 	ldr.w	r7, [sp], #4
  401566:	4770      	bx	lr

00401568 <usart_reset_rx>:
 * \brief Immediately stop and disable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_rx(Usart *p_usart)
{
  401568:	b480      	push	{r7}
  40156a:	b083      	sub	sp, #12
  40156c:	af00      	add	r7, sp, #0
  40156e:	6078      	str	r0, [r7, #4]
	/* Reset Receiver */
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  401570:	687b      	ldr	r3, [r7, #4]
  401572:	2224      	movs	r2, #36	; 0x24
  401574:	601a      	str	r2, [r3, #0]
}
  401576:	370c      	adds	r7, #12
  401578:	46bd      	mov	sp, r7
  40157a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40157e:	4770      	bx	lr

00401580 <usart_enable_interrupt>:
 *
 * \param p_usart Pointer to a USART peripheral.
 * \param ul_sources Interrupt sources bit map.
 */
void usart_enable_interrupt(Usart *p_usart, uint32_t ul_sources)
{
  401580:	b480      	push	{r7}
  401582:	b083      	sub	sp, #12
  401584:	af00      	add	r7, sp, #0
  401586:	6078      	str	r0, [r7, #4]
  401588:	6039      	str	r1, [r7, #0]
	p_usart->US_IER = ul_sources;
  40158a:	687b      	ldr	r3, [r7, #4]
  40158c:	683a      	ldr	r2, [r7, #0]
  40158e:	609a      	str	r2, [r3, #8]
}
  401590:	370c      	adds	r7, #12
  401592:	46bd      	mov	sp, r7
  401594:	f85d 7b04 	ldr.w	r7, [sp], #4
  401598:	4770      	bx	lr
  40159a:	bf00      	nop

0040159c <usart_disable_interrupt>:
 *
 * \param p_usart Pointer to a USART peripheral.
 * \param ul_sources Interrupt sources bit map.
 */
void usart_disable_interrupt(Usart *p_usart, uint32_t ul_sources)
{
  40159c:	b480      	push	{r7}
  40159e:	b083      	sub	sp, #12
  4015a0:	af00      	add	r7, sp, #0
  4015a2:	6078      	str	r0, [r7, #4]
  4015a4:	6039      	str	r1, [r7, #0]
	p_usart->US_IDR = ul_sources;
  4015a6:	687b      	ldr	r3, [r7, #4]
  4015a8:	683a      	ldr	r2, [r7, #0]
  4015aa:	60da      	str	r2, [r3, #12]
}
  4015ac:	370c      	adds	r7, #12
  4015ae:	46bd      	mov	sp, r7
  4015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
  4015b4:	4770      	bx	lr
  4015b6:	bf00      	nop

004015b8 <usart_get_status>:
 * \param p_usart Pointer to a USART instance.
 *
 * \return The current USART status.
 */
uint32_t usart_get_status(Usart *p_usart)
{
  4015b8:	b480      	push	{r7}
  4015ba:	b083      	sub	sp, #12
  4015bc:	af00      	add	r7, sp, #0
  4015be:	6078      	str	r0, [r7, #4]
	return p_usart->US_CSR;
  4015c0:	687b      	ldr	r3, [r7, #4]
  4015c2:	695b      	ldr	r3, [r3, #20]
}
  4015c4:	4618      	mov	r0, r3
  4015c6:	370c      	adds	r7, #12
  4015c8:	46bd      	mov	sp, r7
  4015ca:	f85d 7b04 	ldr.w	r7, [sp], #4
  4015ce:	4770      	bx	lr

004015d0 <usart_reset_status>:
 * \brief Reset status bits (PARE, OVER, MANERR, UNRE and PXBRK in US_CSR).
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_status(Usart *p_usart)
{
  4015d0:	b480      	push	{r7}
  4015d2:	b083      	sub	sp, #12
  4015d4:	af00      	add	r7, sp, #0
  4015d6:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RSTSTA;
  4015d8:	687b      	ldr	r3, [r7, #4]
  4015da:	f44f 7280 	mov.w	r2, #256	; 0x100
  4015de:	601a      	str	r2, [r3, #0]
}
  4015e0:	370c      	adds	r7, #12
  4015e2:	46bd      	mov	sp, r7
  4015e4:	f85d 7b04 	ldr.w	r7, [sp], #4
  4015e8:	4770      	bx	lr
  4015ea:	bf00      	nop

004015ec <usart_drive_RTS_pin_high>:
 * \brief Drive the pin RTS to 1.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_RTS_pin_high(Usart *p_usart)
{
  4015ec:	b480      	push	{r7}
  4015ee:	b083      	sub	sp, #12
  4015f0:	af00      	add	r7, sp, #0
  4015f2:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RTSDIS;
  4015f4:	687b      	ldr	r3, [r7, #4]
  4015f6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  4015fa:	601a      	str	r2, [r3, #0]
}
  4015fc:	370c      	adds	r7, #12
  4015fe:	46bd      	mov	sp, r7
  401600:	f85d 7b04 	ldr.w	r7, [sp], #4
  401604:	4770      	bx	lr
  401606:	bf00      	nop

00401608 <usart_is_tx_empty>:
 *
 * \retval 1 Transmitter is empty.
 * \retval 0 Transmitter is not empty.
 */
uint32_t usart_is_tx_empty(Usart *p_usart)
{
  401608:	b480      	push	{r7}
  40160a:	b083      	sub	sp, #12
  40160c:	af00      	add	r7, sp, #0
  40160e:	6078      	str	r0, [r7, #4]
	return (p_usart->US_CSR & US_CSR_TXEMPTY) > 0;
  401610:	687b      	ldr	r3, [r7, #4]
  401612:	695b      	ldr	r3, [r3, #20]
  401614:	f403 7300 	and.w	r3, r3, #512	; 0x200
  401618:	2b00      	cmp	r3, #0
  40161a:	bf14      	ite	ne
  40161c:	2301      	movne	r3, #1
  40161e:	2300      	moveq	r3, #0
  401620:	b2db      	uxtb	r3, r3
}
  401622:	4618      	mov	r0, r3
  401624:	370c      	adds	r7, #12
  401626:	46bd      	mov	sp, r7
  401628:	f85d 7b04 	ldr.w	r7, [sp], #4
  40162c:	4770      	bx	lr
  40162e:	bf00      	nop

00401630 <usart_is_rx_ready>:
 *
 * \retval 1 Some data has been received.
 * \retval 0 No data has been received.
 */
uint32_t usart_is_rx_ready(Usart *p_usart)
{
  401630:	b480      	push	{r7}
  401632:	b083      	sub	sp, #12
  401634:	af00      	add	r7, sp, #0
  401636:	6078      	str	r0, [r7, #4]
	return (p_usart->US_CSR & US_CSR_RXRDY) > 0;
  401638:	687b      	ldr	r3, [r7, #4]
  40163a:	695b      	ldr	r3, [r3, #20]
  40163c:	f003 0301 	and.w	r3, r3, #1
  401640:	2b00      	cmp	r3, #0
  401642:	bf14      	ite	ne
  401644:	2301      	movne	r3, #1
  401646:	2300      	moveq	r3, #0
  401648:	b2db      	uxtb	r3, r3
}
  40164a:	4618      	mov	r0, r3
  40164c:	370c      	adds	r7, #12
  40164e:	46bd      	mov	sp, r7
  401650:	f85d 7b04 	ldr.w	r7, [sp], #4
  401654:	4770      	bx	lr
  401656:	bf00      	nop

00401658 <usart_write>:
 *
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
  401658:	b480      	push	{r7}
  40165a:	b083      	sub	sp, #12
  40165c:	af00      	add	r7, sp, #0
  40165e:	6078      	str	r0, [r7, #4]
  401660:	6039      	str	r1, [r7, #0]
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  401662:	687b      	ldr	r3, [r7, #4]
  401664:	695b      	ldr	r3, [r3, #20]
  401666:	f003 0302 	and.w	r3, r3, #2
  40166a:	2b00      	cmp	r3, #0
  40166c:	d101      	bne.n	401672 <usart_write+0x1a>
		return 1;
  40166e:	2301      	movs	r3, #1
  401670:	e005      	b.n	40167e <usart_write+0x26>
	}

	p_usart->US_THR = US_THR_TXCHR(c);
  401672:	683b      	ldr	r3, [r7, #0]
  401674:	f3c3 0208 	ubfx	r2, r3, #0, #9
  401678:	687b      	ldr	r3, [r7, #4]
  40167a:	61da      	str	r2, [r3, #28]
	return 0;
  40167c:	2300      	movs	r3, #0
}
  40167e:	4618      	mov	r0, r3
  401680:	370c      	adds	r7, #12
  401682:	46bd      	mov	sp, r7
  401684:	f85d 7b04 	ldr.w	r7, [sp], #4
  401688:	4770      	bx	lr
  40168a:	bf00      	nop

0040168c <usart_read>:
 *
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
  40168c:	b480      	push	{r7}
  40168e:	b083      	sub	sp, #12
  401690:	af00      	add	r7, sp, #0
  401692:	6078      	str	r0, [r7, #4]
  401694:	6039      	str	r1, [r7, #0]
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  401696:	687b      	ldr	r3, [r7, #4]
  401698:	695b      	ldr	r3, [r3, #20]
  40169a:	f003 0301 	and.w	r3, r3, #1
  40169e:	2b00      	cmp	r3, #0
  4016a0:	d101      	bne.n	4016a6 <usart_read+0x1a>
		return 1;
  4016a2:	2301      	movs	r3, #1
  4016a4:	e006      	b.n	4016b4 <usart_read+0x28>
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  4016a6:	687b      	ldr	r3, [r7, #4]
  4016a8:	699b      	ldr	r3, [r3, #24]
  4016aa:	f3c3 0208 	ubfx	r2, r3, #0, #9
  4016ae:	683b      	ldr	r3, [r7, #0]
  4016b0:	601a      	str	r2, [r3, #0]

	return 0;
  4016b2:	2300      	movs	r3, #0
}
  4016b4:	4618      	mov	r0, r3
  4016b6:	370c      	adds	r7, #12
  4016b8:	46bd      	mov	sp, r7
  4016ba:	f85d 7b04 	ldr.w	r7, [sp], #4
  4016be:	4770      	bx	lr

004016c0 <usart_disable_writeprotect>:
 * \brief Disable write protect of USART registers.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
  4016c0:	b480      	push	{r7}
  4016c2:	b083      	sub	sp, #12
  4016c4:	af00      	add	r7, sp, #0
  4016c6:	6078      	str	r0, [r7, #4]
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  4016c8:	687b      	ldr	r3, [r7, #4]
  4016ca:	4a04      	ldr	r2, [pc, #16]	; (4016dc <usart_disable_writeprotect+0x1c>)
  4016cc:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
}
  4016d0:	370c      	adds	r7, #12
  4016d2:	46bd      	mov	sp, r7
  4016d4:	f85d 7b04 	ldr.w	r7, [sp], #4
  4016d8:	4770      	bx	lr
  4016da:	bf00      	nop
  4016dc:	55534100 	.word	0x55534100

004016e0 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  4016e0:	b580      	push	{r7, lr}
  4016e2:	b082      	sub	sp, #8
  4016e4:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
  4016e6:	4b16      	ldr	r3, [pc, #88]	; (401740 <Reset_Handler+0x60>)
  4016e8:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
  4016ea:	4b16      	ldr	r3, [pc, #88]	; (401744 <Reset_Handler+0x64>)
  4016ec:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
  4016ee:	687a      	ldr	r2, [r7, #4]
  4016f0:	683b      	ldr	r3, [r7, #0]
  4016f2:	429a      	cmp	r2, r3
  4016f4:	d00c      	beq.n	401710 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
  4016f6:	e007      	b.n	401708 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
  4016f8:	683b      	ldr	r3, [r7, #0]
  4016fa:	1d1a      	adds	r2, r3, #4
  4016fc:	603a      	str	r2, [r7, #0]
  4016fe:	687a      	ldr	r2, [r7, #4]
  401700:	1d11      	adds	r1, r2, #4
  401702:	6079      	str	r1, [r7, #4]
  401704:	6812      	ldr	r2, [r2, #0]
  401706:	601a      	str	r2, [r3, #0]
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
  401708:	683b      	ldr	r3, [r7, #0]
  40170a:	4a0f      	ldr	r2, [pc, #60]	; (401748 <Reset_Handler+0x68>)
  40170c:	4293      	cmp	r3, r2
  40170e:	d3f3      	bcc.n	4016f8 <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
  401710:	4b0e      	ldr	r3, [pc, #56]	; (40174c <Reset_Handler+0x6c>)
  401712:	603b      	str	r3, [r7, #0]
  401714:	e004      	b.n	401720 <Reset_Handler+0x40>
                *pDest++ = 0;
  401716:	683b      	ldr	r3, [r7, #0]
  401718:	1d1a      	adds	r2, r3, #4
  40171a:	603a      	str	r2, [r7, #0]
  40171c:	2200      	movs	r2, #0
  40171e:	601a      	str	r2, [r3, #0]
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
  401720:	683b      	ldr	r3, [r7, #0]
  401722:	4a0b      	ldr	r2, [pc, #44]	; (401750 <Reset_Handler+0x70>)
  401724:	4293      	cmp	r3, r2
  401726:	d3f6      	bcc.n	401716 <Reset_Handler+0x36>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
  401728:	4b0a      	ldr	r3, [pc, #40]	; (401754 <Reset_Handler+0x74>)
  40172a:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  40172c:	4a0a      	ldr	r2, [pc, #40]	; (401758 <Reset_Handler+0x78>)
  40172e:	687b      	ldr	r3, [r7, #4]
  401730:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  401734:	6093      	str	r3, [r2, #8]

        /* Initialize the C library */
        __libc_init_array();
  401736:	4b09      	ldr	r3, [pc, #36]	; (40175c <Reset_Handler+0x7c>)
  401738:	4798      	blx	r3

        /* Branch to main function */
        main();
  40173a:	4b09      	ldr	r3, [pc, #36]	; (401760 <Reset_Handler+0x80>)
  40173c:	4798      	blx	r3

        /* Infinite loop */
        while (1);
  40173e:	e7fe      	b.n	40173e <Reset_Handler+0x5e>
  401740:	00408ce4 	.word	0x00408ce4
  401744:	20400000 	.word	0x20400000
  401748:	204008f4 	.word	0x204008f4
  40174c:	204008f4 	.word	0x204008f4
  401750:	204011d8 	.word	0x204011d8
  401754:	00400000 	.word	0x00400000
  401758:	e000ed00 	.word	0xe000ed00
  40175c:	004030f9 	.word	0x004030f9
  401760:	00402c69 	.word	0x00402c69

00401764 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  401764:	b480      	push	{r7}
  401766:	af00      	add	r7, sp, #0
        while (1) {
        }
  401768:	e7fe      	b.n	401768 <Dummy_Handler+0x4>
  40176a:	bf00      	nop

0040176c <SystemCoreClockUpdate>:

  SystemCoreClock = CHIP_FREQ_CPU_MAX;
}

void SystemCoreClockUpdate( void )
{
  40176c:	b480      	push	{r7}
  40176e:	af00      	add	r7, sp, #0
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  401770:	4b51      	ldr	r3, [pc, #324]	; (4018b8 <SystemCoreClockUpdate+0x14c>)
  401772:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401774:	f003 0303 	and.w	r3, r3, #3
  401778:	2b01      	cmp	r3, #1
  40177a:	d014      	beq.n	4017a6 <SystemCoreClockUpdate+0x3a>
  40177c:	2b01      	cmp	r3, #1
  40177e:	d302      	bcc.n	401786 <SystemCoreClockUpdate+0x1a>
  401780:	2b02      	cmp	r3, #2
  401782:	d038      	beq.n	4017f6 <SystemCoreClockUpdate+0x8a>
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
      }
    break;

    default:
    break;
  401784:	e07b      	b.n	40187e <SystemCoreClockUpdate+0x112>
{
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  {
    case PMC_MCKR_CSS_SLOW_CLK: /* Slow clock */
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  401786:	4b4d      	ldr	r3, [pc, #308]	; (4018bc <SystemCoreClockUpdate+0x150>)
  401788:	695b      	ldr	r3, [r3, #20]
  40178a:	f003 0380 	and.w	r3, r3, #128	; 0x80
  40178e:	2b00      	cmp	r3, #0
  401790:	d004      	beq.n	40179c <SystemCoreClockUpdate+0x30>
      {
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  401792:	4b4b      	ldr	r3, [pc, #300]	; (4018c0 <SystemCoreClockUpdate+0x154>)
  401794:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  401798:	601a      	str	r2, [r3, #0]
      }
      else
      {
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
      }
    break;
  40179a:	e070      	b.n	40187e <SystemCoreClockUpdate+0x112>
      {
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
      }
      else
      {
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  40179c:	4b48      	ldr	r3, [pc, #288]	; (4018c0 <SystemCoreClockUpdate+0x154>)
  40179e:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
  4017a2:	601a      	str	r2, [r3, #0]
      }
    break;
  4017a4:	e06b      	b.n	40187e <SystemCoreClockUpdate+0x112>

    case PMC_MCKR_CSS_MAIN_CLK: /* Main clock */
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  4017a6:	4b44      	ldr	r3, [pc, #272]	; (4018b8 <SystemCoreClockUpdate+0x14c>)
  4017a8:	6a1b      	ldr	r3, [r3, #32]
  4017aa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  4017ae:	2b00      	cmp	r3, #0
  4017b0:	d003      	beq.n	4017ba <SystemCoreClockUpdate+0x4e>
      {
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  4017b2:	4b43      	ldr	r3, [pc, #268]	; (4018c0 <SystemCoreClockUpdate+0x154>)
  4017b4:	4a43      	ldr	r2, [pc, #268]	; (4018c4 <SystemCoreClockUpdate+0x158>)
  4017b6:	601a      	str	r2, [r3, #0]
  4017b8:	e01c      	b.n	4017f4 <SystemCoreClockUpdate+0x88>
      }
      else
      {
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4017ba:	4b41      	ldr	r3, [pc, #260]	; (4018c0 <SystemCoreClockUpdate+0x154>)
  4017bc:	4a42      	ldr	r2, [pc, #264]	; (4018c8 <SystemCoreClockUpdate+0x15c>)
  4017be:	601a      	str	r2, [r3, #0]

        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  4017c0:	4b3d      	ldr	r3, [pc, #244]	; (4018b8 <SystemCoreClockUpdate+0x14c>)
  4017c2:	6a1b      	ldr	r3, [r3, #32]
  4017c4:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4017c8:	2b10      	cmp	r3, #16
  4017ca:	d004      	beq.n	4017d6 <SystemCoreClockUpdate+0x6a>
  4017cc:	2b20      	cmp	r3, #32
  4017ce:	d008      	beq.n	4017e2 <SystemCoreClockUpdate+0x76>
  4017d0:	2b00      	cmp	r3, #0
  4017d2:	d00e      	beq.n	4017f2 <SystemCoreClockUpdate+0x86>
          case CKGR_MOR_MOSCRCF_12_MHz:
            SystemCoreClock *= 3U;
          break;

          default:
          break;
  4017d4:	e00e      	b.n	4017f4 <SystemCoreClockUpdate+0x88>
        {
          case CKGR_MOR_MOSCRCF_4_MHz:
          break;

          case CKGR_MOR_MOSCRCF_8_MHz:
            SystemCoreClock *= 2U;
  4017d6:	4b3a      	ldr	r3, [pc, #232]	; (4018c0 <SystemCoreClockUpdate+0x154>)
  4017d8:	681b      	ldr	r3, [r3, #0]
  4017da:	005b      	lsls	r3, r3, #1
  4017dc:	4a38      	ldr	r2, [pc, #224]	; (4018c0 <SystemCoreClockUpdate+0x154>)
  4017de:	6013      	str	r3, [r2, #0]
          break;
  4017e0:	e008      	b.n	4017f4 <SystemCoreClockUpdate+0x88>

          case CKGR_MOR_MOSCRCF_12_MHz:
            SystemCoreClock *= 3U;
  4017e2:	4b37      	ldr	r3, [pc, #220]	; (4018c0 <SystemCoreClockUpdate+0x154>)
  4017e4:	681a      	ldr	r2, [r3, #0]
  4017e6:	4613      	mov	r3, r2
  4017e8:	005b      	lsls	r3, r3, #1
  4017ea:	4413      	add	r3, r2
  4017ec:	4a34      	ldr	r2, [pc, #208]	; (4018c0 <SystemCoreClockUpdate+0x154>)
  4017ee:	6013      	str	r3, [r2, #0]
          break;
  4017f0:	e000      	b.n	4017f4 <SystemCoreClockUpdate+0x88>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;

        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
        {
          case CKGR_MOR_MOSCRCF_4_MHz:
          break;
  4017f2:	bf00      	nop

          default:
          break;
        }
      }
    break;
  4017f4:	e043      	b.n	40187e <SystemCoreClockUpdate+0x112>

    case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  4017f6:	4b30      	ldr	r3, [pc, #192]	; (4018b8 <SystemCoreClockUpdate+0x14c>)
  4017f8:	6a1b      	ldr	r3, [r3, #32]
  4017fa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  4017fe:	2b00      	cmp	r3, #0
  401800:	d003      	beq.n	40180a <SystemCoreClockUpdate+0x9e>
      {
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  401802:	4b2f      	ldr	r3, [pc, #188]	; (4018c0 <SystemCoreClockUpdate+0x154>)
  401804:	4a2f      	ldr	r2, [pc, #188]	; (4018c4 <SystemCoreClockUpdate+0x158>)
  401806:	601a      	str	r2, [r3, #0]
  401808:	e01c      	b.n	401844 <SystemCoreClockUpdate+0xd8>
      }
      else
      {
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  40180a:	4b2d      	ldr	r3, [pc, #180]	; (4018c0 <SystemCoreClockUpdate+0x154>)
  40180c:	4a2e      	ldr	r2, [pc, #184]	; (4018c8 <SystemCoreClockUpdate+0x15c>)
  40180e:	601a      	str	r2, [r3, #0]

        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  401810:	4b29      	ldr	r3, [pc, #164]	; (4018b8 <SystemCoreClockUpdate+0x14c>)
  401812:	6a1b      	ldr	r3, [r3, #32]
  401814:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401818:	2b10      	cmp	r3, #16
  40181a:	d004      	beq.n	401826 <SystemCoreClockUpdate+0xba>
  40181c:	2b20      	cmp	r3, #32
  40181e:	d008      	beq.n	401832 <SystemCoreClockUpdate+0xc6>
  401820:	2b00      	cmp	r3, #0
  401822:	d00e      	beq.n	401842 <SystemCoreClockUpdate+0xd6>
          case CKGR_MOR_MOSCRCF_12_MHz:
            SystemCoreClock *= 3U;
          break;

          default:
          break;
  401824:	e00e      	b.n	401844 <SystemCoreClockUpdate+0xd8>
        {
          case CKGR_MOR_MOSCRCF_4_MHz:
          break;

          case CKGR_MOR_MOSCRCF_8_MHz:
            SystemCoreClock *= 2U;
  401826:	4b26      	ldr	r3, [pc, #152]	; (4018c0 <SystemCoreClockUpdate+0x154>)
  401828:	681b      	ldr	r3, [r3, #0]
  40182a:	005b      	lsls	r3, r3, #1
  40182c:	4a24      	ldr	r2, [pc, #144]	; (4018c0 <SystemCoreClockUpdate+0x154>)
  40182e:	6013      	str	r3, [r2, #0]
          break;
  401830:	e008      	b.n	401844 <SystemCoreClockUpdate+0xd8>

          case CKGR_MOR_MOSCRCF_12_MHz:
            SystemCoreClock *= 3U;
  401832:	4b23      	ldr	r3, [pc, #140]	; (4018c0 <SystemCoreClockUpdate+0x154>)
  401834:	681a      	ldr	r2, [r3, #0]
  401836:	4613      	mov	r3, r2
  401838:	005b      	lsls	r3, r3, #1
  40183a:	4413      	add	r3, r2
  40183c:	4a20      	ldr	r2, [pc, #128]	; (4018c0 <SystemCoreClockUpdate+0x154>)
  40183e:	6013      	str	r3, [r2, #0]
          break;
  401840:	e000      	b.n	401844 <SystemCoreClockUpdate+0xd8>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;

        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
        {
          case CKGR_MOR_MOSCRCF_4_MHz:
          break;
  401842:	bf00      	nop
          default:
          break;
        }
      }

      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  401844:	4b1c      	ldr	r3, [pc, #112]	; (4018b8 <SystemCoreClockUpdate+0x14c>)
  401846:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401848:	f003 0303 	and.w	r3, r3, #3
  40184c:	2b02      	cmp	r3, #2
  40184e:	d115      	bne.n	40187c <SystemCoreClockUpdate+0x110>
      {
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  401850:	4b19      	ldr	r3, [pc, #100]	; (4018b8 <SystemCoreClockUpdate+0x14c>)
  401852:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  401854:	4b1d      	ldr	r3, [pc, #116]	; (4018cc <SystemCoreClockUpdate+0x160>)
  401856:	4013      	ands	r3, r2
  401858:	0c1b      	lsrs	r3, r3, #16
  40185a:	3301      	adds	r3, #1
  40185c:	4a18      	ldr	r2, [pc, #96]	; (4018c0 <SystemCoreClockUpdate+0x154>)
  40185e:	6812      	ldr	r2, [r2, #0]
  401860:	fb02 f303 	mul.w	r3, r2, r3
  401864:	4a16      	ldr	r2, [pc, #88]	; (4018c0 <SystemCoreClockUpdate+0x154>)
  401866:	6013      	str	r3, [r2, #0]
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  401868:	4b13      	ldr	r3, [pc, #76]	; (4018b8 <SystemCoreClockUpdate+0x14c>)
  40186a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  40186c:	b2db      	uxtb	r3, r3
  40186e:	4a14      	ldr	r2, [pc, #80]	; (4018c0 <SystemCoreClockUpdate+0x154>)
  401870:	6812      	ldr	r2, [r2, #0]
  401872:	fbb2 f3f3 	udiv	r3, r2, r3
  401876:	4a12      	ldr	r2, [pc, #72]	; (4018c0 <SystemCoreClockUpdate+0x154>)
  401878:	6013      	str	r3, [r2, #0]
      }
    break;
  40187a:	e7ff      	b.n	40187c <SystemCoreClockUpdate+0x110>
  40187c:	bf00      	nop

    default:
    break;
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  40187e:	4b0e      	ldr	r3, [pc, #56]	; (4018b8 <SystemCoreClockUpdate+0x14c>)
  401880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401882:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401886:	2b70      	cmp	r3, #112	; 0x70
  401888:	d108      	bne.n	40189c <SystemCoreClockUpdate+0x130>
  {
    SystemCoreClock /= 3U;
  40188a:	4b0d      	ldr	r3, [pc, #52]	; (4018c0 <SystemCoreClockUpdate+0x154>)
  40188c:	681b      	ldr	r3, [r3, #0]
  40188e:	4a10      	ldr	r2, [pc, #64]	; (4018d0 <SystemCoreClockUpdate+0x164>)
  401890:	fba2 2303 	umull	r2, r3, r2, r3
  401894:	085b      	lsrs	r3, r3, #1
  401896:	4a0a      	ldr	r2, [pc, #40]	; (4018c0 <SystemCoreClockUpdate+0x154>)
  401898:	6013      	str	r3, [r2, #0]
  40189a:	e009      	b.n	4018b0 <SystemCoreClockUpdate+0x144>
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  40189c:	4b06      	ldr	r3, [pc, #24]	; (4018b8 <SystemCoreClockUpdate+0x14c>)
  40189e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4018a0:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4018a4:	091a      	lsrs	r2, r3, #4
  4018a6:	4b06      	ldr	r3, [pc, #24]	; (4018c0 <SystemCoreClockUpdate+0x154>)
  4018a8:	681b      	ldr	r3, [r3, #0]
  4018aa:	40d3      	lsrs	r3, r2
  4018ac:	4a04      	ldr	r2, [pc, #16]	; (4018c0 <SystemCoreClockUpdate+0x154>)
  4018ae:	6013      	str	r3, [r2, #0]
  }
}
  4018b0:	46bd      	mov	sp, r7
  4018b2:	f85d 7b04 	ldr.w	r7, [sp], #4
  4018b6:	4770      	bx	lr
  4018b8:	400e0600 	.word	0x400e0600
  4018bc:	400e1810 	.word	0x400e1810
  4018c0:	20400000 	.word	0x20400000
  4018c4:	00b71b00 	.word	0x00b71b00
  4018c8:	003d0900 	.word	0x003d0900
  4018cc:	07ff0000 	.word	0x07ff0000
  4018d0:	aaaaaaab 	.word	0xaaaaaaab

004018d4 <system_init_flash>:
/**
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  4018d4:	b480      	push	{r7}
  4018d6:	b083      	sub	sp, #12
  4018d8:	af00      	add	r7, sp, #0
  4018da:	6078      	str	r0, [r7, #4]
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  4018dc:	687b      	ldr	r3, [r7, #4]
  4018de:	4a18      	ldr	r2, [pc, #96]	; (401940 <system_init_flash+0x6c>)
  4018e0:	4293      	cmp	r3, r2
  4018e2:	d804      	bhi.n	4018ee <system_init_flash+0x1a>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  4018e4:	4b17      	ldr	r3, [pc, #92]	; (401944 <system_init_flash+0x70>)
  4018e6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  4018ea:	601a      	str	r2, [r3, #0]
  4018ec:	e023      	b.n	401936 <system_init_flash+0x62>
  }
  else
  {
    if (ul_clk < CHIP_FREQ_FWS_1)
  4018ee:	687b      	ldr	r3, [r7, #4]
  4018f0:	4a15      	ldr	r2, [pc, #84]	; (401948 <system_init_flash+0x74>)
  4018f2:	4293      	cmp	r3, r2
  4018f4:	d803      	bhi.n	4018fe <system_init_flash+0x2a>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  4018f6:	4b13      	ldr	r3, [pc, #76]	; (401944 <system_init_flash+0x70>)
  4018f8:	4a14      	ldr	r2, [pc, #80]	; (40194c <system_init_flash+0x78>)
  4018fa:	601a      	str	r2, [r3, #0]
  4018fc:	e01b      	b.n	401936 <system_init_flash+0x62>
    }
    else
    {
      if (ul_clk < CHIP_FREQ_FWS_2)
  4018fe:	687b      	ldr	r3, [r7, #4]
  401900:	4a13      	ldr	r2, [pc, #76]	; (401950 <system_init_flash+0x7c>)
  401902:	4293      	cmp	r3, r2
  401904:	d803      	bhi.n	40190e <system_init_flash+0x3a>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  401906:	4b0f      	ldr	r3, [pc, #60]	; (401944 <system_init_flash+0x70>)
  401908:	4a12      	ldr	r2, [pc, #72]	; (401954 <system_init_flash+0x80>)
  40190a:	601a      	str	r2, [r3, #0]
  40190c:	e013      	b.n	401936 <system_init_flash+0x62>
      }
      else
      {
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  40190e:	687b      	ldr	r3, [r7, #4]
  401910:	4a11      	ldr	r2, [pc, #68]	; (401958 <system_init_flash+0x84>)
  401912:	4293      	cmp	r3, r2
  401914:	d803      	bhi.n	40191e <system_init_flash+0x4a>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  401916:	4b0b      	ldr	r3, [pc, #44]	; (401944 <system_init_flash+0x70>)
  401918:	4a10      	ldr	r2, [pc, #64]	; (40195c <system_init_flash+0x88>)
  40191a:	601a      	str	r2, [r3, #0]
  40191c:	e00b      	b.n	401936 <system_init_flash+0x62>
        }
        else
        {
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  40191e:	687b      	ldr	r3, [r7, #4]
  401920:	4a0f      	ldr	r2, [pc, #60]	; (401960 <system_init_flash+0x8c>)
  401922:	4293      	cmp	r3, r2
  401924:	d804      	bhi.n	401930 <system_init_flash+0x5c>
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  401926:	4b07      	ldr	r3, [pc, #28]	; (401944 <system_init_flash+0x70>)
  401928:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  40192c:	601a      	str	r2, [r3, #0]
  40192e:	e002      	b.n	401936 <system_init_flash+0x62>
          }
          else
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  401930:	4b04      	ldr	r3, [pc, #16]	; (401944 <system_init_flash+0x70>)
  401932:	4a0c      	ldr	r2, [pc, #48]	; (401964 <system_init_flash+0x90>)
  401934:	601a      	str	r2, [r3, #0]
          }
        }
      }
    }
  }
}
  401936:	370c      	adds	r7, #12
  401938:	46bd      	mov	sp, r7
  40193a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40193e:	4770      	bx	lr
  401940:	01312cff 	.word	0x01312cff
  401944:	400e0c00 	.word	0x400e0c00
  401948:	026259ff 	.word	0x026259ff
  40194c:	04000100 	.word	0x04000100
  401950:	039386ff 	.word	0x039386ff
  401954:	04000200 	.word	0x04000200
  401958:	04c4b3ff 	.word	0x04c4b3ff
  40195c:	04000300 	.word	0x04000300
  401960:	05f5e0ff 	.word	0x05f5e0ff
  401964:	04000500 	.word	0x04000500

00401968 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
  401968:	b480      	push	{r7}
  40196a:	b085      	sub	sp, #20
  40196c:	af00      	add	r7, sp, #0
  40196e:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;
  401970:	4b10      	ldr	r3, [pc, #64]	; (4019b4 <_sbrk+0x4c>)
  401972:	60fb      	str	r3, [r7, #12]

	if (heap == NULL) {
  401974:	4b10      	ldr	r3, [pc, #64]	; (4019b8 <_sbrk+0x50>)
  401976:	681b      	ldr	r3, [r3, #0]
  401978:	2b00      	cmp	r3, #0
  40197a:	d102      	bne.n	401982 <_sbrk+0x1a>
		heap = (unsigned char *)&_end;
  40197c:	4b0e      	ldr	r3, [pc, #56]	; (4019b8 <_sbrk+0x50>)
  40197e:	4a0f      	ldr	r2, [pc, #60]	; (4019bc <_sbrk+0x54>)
  401980:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
  401982:	4b0d      	ldr	r3, [pc, #52]	; (4019b8 <_sbrk+0x50>)
  401984:	681b      	ldr	r3, [r3, #0]
  401986:	60bb      	str	r3, [r7, #8]

	if (((int)prev_heap + incr) > ramend) {
  401988:	68ba      	ldr	r2, [r7, #8]
  40198a:	687b      	ldr	r3, [r7, #4]
  40198c:	441a      	add	r2, r3
  40198e:	68fb      	ldr	r3, [r7, #12]
  401990:	429a      	cmp	r2, r3
  401992:	dd02      	ble.n	40199a <_sbrk+0x32>
		return (caddr_t) -1;	
  401994:	f04f 33ff 	mov.w	r3, #4294967295
  401998:	e006      	b.n	4019a8 <_sbrk+0x40>
	}

	heap += incr;
  40199a:	4b07      	ldr	r3, [pc, #28]	; (4019b8 <_sbrk+0x50>)
  40199c:	681a      	ldr	r2, [r3, #0]
  40199e:	687b      	ldr	r3, [r7, #4]
  4019a0:	4413      	add	r3, r2
  4019a2:	4a05      	ldr	r2, [pc, #20]	; (4019b8 <_sbrk+0x50>)
  4019a4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
  4019a6:	68bb      	ldr	r3, [r7, #8]
}
  4019a8:	4618      	mov	r0, r3
  4019aa:	3714      	adds	r7, #20
  4019ac:	46bd      	mov	sp, r7
  4019ae:	f85d 7b04 	ldr.w	r7, [sp], #4
  4019b2:	4770      	bx	lr
  4019b4:	2045fffc 	.word	0x2045fffc
  4019b8:	20400984 	.word	0x20400984
  4019bc:	204033d8 	.word	0x204033d8

004019c0 <_close>:
{
	return -1;
}

extern int _close(int file)
{
  4019c0:	b480      	push	{r7}
  4019c2:	b083      	sub	sp, #12
  4019c4:	af00      	add	r7, sp, #0
  4019c6:	6078      	str	r0, [r7, #4]
	return -1;
  4019c8:	f04f 33ff 	mov.w	r3, #4294967295
}
  4019cc:	4618      	mov	r0, r3
  4019ce:	370c      	adds	r7, #12
  4019d0:	46bd      	mov	sp, r7
  4019d2:	f85d 7b04 	ldr.w	r7, [sp], #4
  4019d6:	4770      	bx	lr

004019d8 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
  4019d8:	b480      	push	{r7}
  4019da:	b083      	sub	sp, #12
  4019dc:	af00      	add	r7, sp, #0
  4019de:	6078      	str	r0, [r7, #4]
  4019e0:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
  4019e2:	683b      	ldr	r3, [r7, #0]
  4019e4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  4019e8:	605a      	str	r2, [r3, #4]

	return 0;
  4019ea:	2300      	movs	r3, #0
}
  4019ec:	4618      	mov	r0, r3
  4019ee:	370c      	adds	r7, #12
  4019f0:	46bd      	mov	sp, r7
  4019f2:	f85d 7b04 	ldr.w	r7, [sp], #4
  4019f6:	4770      	bx	lr

004019f8 <_isatty>:

extern int _isatty(int file)
{
  4019f8:	b480      	push	{r7}
  4019fa:	b083      	sub	sp, #12
  4019fc:	af00      	add	r7, sp, #0
  4019fe:	6078      	str	r0, [r7, #4]
	return 1;
  401a00:	2301      	movs	r3, #1
}
  401a02:	4618      	mov	r0, r3
  401a04:	370c      	adds	r7, #12
  401a06:	46bd      	mov	sp, r7
  401a08:	f85d 7b04 	ldr.w	r7, [sp], #4
  401a0c:	4770      	bx	lr
  401a0e:	bf00      	nop

00401a10 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
  401a10:	b480      	push	{r7}
  401a12:	b085      	sub	sp, #20
  401a14:	af00      	add	r7, sp, #0
  401a16:	60f8      	str	r0, [r7, #12]
  401a18:	60b9      	str	r1, [r7, #8]
  401a1a:	607a      	str	r2, [r7, #4]
	return 0;
  401a1c:	2300      	movs	r3, #0
}
  401a1e:	4618      	mov	r0, r3
  401a20:	3714      	adds	r7, #20
  401a22:	46bd      	mov	sp, r7
  401a24:	f85d 7b04 	ldr.w	r7, [sp], #4
  401a28:	4770      	bx	lr
  401a2a:	bf00      	nop

00401a2c <PCA9952_write_reg>:
 *
 * \param reg_index Register address. Use macros as defined in the header file.
 * \param data Data that should be written to the device register.
 */
void PCA9952_write_reg(unsigned char topBotn, uint8_t reg_index, uint8_t data)
{
  401a2c:	b580      	push	{r7, lr}
  401a2e:	b088      	sub	sp, #32
  401a30:	af00      	add	r7, sp, #0
  401a32:	4603      	mov	r3, r0
  401a34:	71fb      	strb	r3, [r7, #7]
  401a36:	460b      	mov	r3, r1
  401a38:	71bb      	strb	r3, [r7, #6]
  401a3a:	4613      	mov	r3, r2
  401a3c:	717b      	strb	r3, [r7, #5]
	uint8_t pack[2];
	twihs_packet_t twi_package;

	pack[0] = reg_index;
  401a3e:	79bb      	ldrb	r3, [r7, #6]
  401a40:	773b      	strb	r3, [r7, #28]
	pack[1] = data;
  401a42:	797b      	ldrb	r3, [r7, #5]
  401a44:	777b      	strb	r3, [r7, #29]

//7apr15	twi_package.chip = PCA9952_TWI_ADDRESS;

	if (topBotn == LED_TOP)
  401a46:	79fb      	ldrb	r3, [r7, #7]
  401a48:	2b00      	cmp	r3, #0
  401a4a:	d102      	bne.n	401a52 <PCA9952_write_reg+0x26>
	{
		twi_package.chip = PCA9952_U7_TOPDRIVE_TWI_ADDRESS;
  401a4c:	2360      	movs	r3, #96	; 0x60
  401a4e:	763b      	strb	r3, [r7, #24]
  401a50:	e004      	b.n	401a5c <PCA9952_write_reg+0x30>
	}
	else if (topBotn == LED_BOTTOM)
  401a52:	79fb      	ldrb	r3, [r7, #7]
  401a54:	2b01      	cmp	r3, #1
  401a56:	d101      	bne.n	401a5c <PCA9952_write_reg+0x30>
	{
		twi_package.chip = PCA9952_U8_BOTDRIVE_TWI_ADDRESS;
  401a58:	2361      	movs	r3, #97	; 0x61
  401a5a:	763b      	strb	r3, [r7, #24]
	}

	twi_package.addr[0] = 0;		//is this right? 8feb16
  401a5c:	2300      	movs	r3, #0
  401a5e:	723b      	strb	r3, [r7, #8]
	twi_package.addr[1] = 0;		//is this right? 8feb16
  401a60:	2300      	movs	r3, #0
  401a62:	727b      	strb	r3, [r7, #9]
	twi_package.addr[2] = 0;		//is this right? 8feb16
  401a64:	2300      	movs	r3, #0
  401a66:	72bb      	strb	r3, [r7, #10]
	twi_package.addr_length = 0;
  401a68:	2300      	movs	r3, #0
  401a6a:	60fb      	str	r3, [r7, #12]
	twi_package.buffer = &pack;
  401a6c:	f107 031c 	add.w	r3, r7, #28
  401a70:	613b      	str	r3, [r7, #16]
	twi_package.length = sizeof(pack);
  401a72:	2302      	movs	r3, #2
  401a74:	617b      	str	r3, [r7, #20]

	while(twihs_master_write(PCA9952_TWI, &twi_package)!=TWIHS_SUCCESS);
  401a76:	bf00      	nop
  401a78:	f107 0308 	add.w	r3, r7, #8
  401a7c:	4805      	ldr	r0, [pc, #20]	; (401a94 <PCA9952_write_reg+0x68>)
  401a7e:	4619      	mov	r1, r3
  401a80:	4b05      	ldr	r3, [pc, #20]	; (401a98 <PCA9952_write_reg+0x6c>)
  401a82:	4798      	blx	r3
  401a84:	4603      	mov	r3, r0
  401a86:	2b00      	cmp	r3, #0
  401a88:	d1f6      	bne.n	401a78 <PCA9952_write_reg+0x4c>

	return;
  401a8a:	bf00      	nop
}
  401a8c:	3720      	adds	r7, #32
  401a8e:	46bd      	mov	sp, r7
  401a90:	bd80      	pop	{r7, pc}
  401a92:	bf00      	nop
  401a94:	40018000 	.word	0x40018000
  401a98:	004011ed 	.word	0x004011ed

00401a9c <PCA9952_read_reg>:
 *
 * \param reg_index Register address.
 * \returns Register content.
 */
uint8_t PCA9952_read_reg(unsigned char topBotn, uint8_t reg_index)
{
  401a9c:	b580      	push	{r7, lr}
  401a9e:	b088      	sub	sp, #32
  401aa0:	af00      	add	r7, sp, #0
  401aa2:	4603      	mov	r3, r0
  401aa4:	460a      	mov	r2, r1
  401aa6:	71fb      	strb	r3, [r7, #7]
  401aa8:	4613      	mov	r3, r2
  401aaa:	71bb      	strb	r3, [r7, #6]
	uint8_t data;
	twihs_packet_t twi_package;

//7apr15	twi_package.chip = PCA9952_TWI_ADDRESS;

	if (topBotn == LED_TOP)
  401aac:	79fb      	ldrb	r3, [r7, #7]
  401aae:	2b00      	cmp	r3, #0
  401ab0:	d102      	bne.n	401ab8 <PCA9952_read_reg+0x1c>
	{
		twi_package.chip = PCA9952_U7_TOPDRIVE_TWI_ADDRESS;
  401ab2:	2360      	movs	r3, #96	; 0x60
  401ab4:	763b      	strb	r3, [r7, #24]
  401ab6:	e004      	b.n	401ac2 <PCA9952_read_reg+0x26>
	}
	else if (topBotn == LED_BOTTOM)
  401ab8:	79fb      	ldrb	r3, [r7, #7]
  401aba:	2b01      	cmp	r3, #1
  401abc:	d101      	bne.n	401ac2 <PCA9952_read_reg+0x26>
	{
		twi_package.chip = PCA9952_U8_BOTDRIVE_TWI_ADDRESS;
  401abe:	2361      	movs	r3, #97	; 0x61
  401ac0:	763b      	strb	r3, [r7, #24]
	}

	twi_package.addr[0] = 0;		//is this right? 8feb16
  401ac2:	2300      	movs	r3, #0
  401ac4:	723b      	strb	r3, [r7, #8]
	twi_package.addr[1] = 0;		//is this right? 8feb16
  401ac6:	2300      	movs	r3, #0
  401ac8:	727b      	strb	r3, [r7, #9]
	twi_package.addr[2] = 0;		//is this right? 8feb16
  401aca:	2300      	movs	r3, #0
  401acc:	72bb      	strb	r3, [r7, #10]
	twi_package.addr_length = 0;
  401ace:	2300      	movs	r3, #0
  401ad0:	60fb      	str	r3, [r7, #12]
	twi_package.buffer = &reg_index;
  401ad2:	1dbb      	adds	r3, r7, #6
  401ad4:	613b      	str	r3, [r7, #16]
	twi_package.length = 1;
  401ad6:	2301      	movs	r3, #1
  401ad8:	617b      	str	r3, [r7, #20]
	while(twihs_master_write(PCA9952_TWI, &twi_package)!=TWIHS_SUCCESS);
  401ada:	bf00      	nop
  401adc:	f107 0308 	add.w	r3, r7, #8
  401ae0:	480f      	ldr	r0, [pc, #60]	; (401b20 <PCA9952_read_reg+0x84>)
  401ae2:	4619      	mov	r1, r3
  401ae4:	4b0f      	ldr	r3, [pc, #60]	; (401b24 <PCA9952_read_reg+0x88>)
  401ae6:	4798      	blx	r3
  401ae8:	4603      	mov	r3, r0
  401aea:	2b00      	cmp	r3, #0
  401aec:	d1f6      	bne.n	401adc <PCA9952_read_reg+0x40>
	* specified in the datasheet.
	* Also there seems to be a bug in the TWI module or the driver
	* since some delay here (code or real delay) adds about 500us
	* between the write and the next read cycle.
	*/
	mdelay(20);
  401aee:	2014      	movs	r0, #20
  401af0:	4b0d      	ldr	r3, [pc, #52]	; (401b28 <PCA9952_read_reg+0x8c>)
  401af2:	4798      	blx	r3

//7apr15 this was set above, no need to reassign	twi_package.chip = PCA9952_TWI_ADDRESS;
	twi_package.addr_length = 0;
  401af4:	2300      	movs	r3, #0
  401af6:	60fb      	str	r3, [r7, #12]
	twi_package.buffer = &data;
  401af8:	f107 031f 	add.w	r3, r7, #31
  401afc:	613b      	str	r3, [r7, #16]
	twi_package.length = 1;
  401afe:	2301      	movs	r3, #1
  401b00:	617b      	str	r3, [r7, #20]
	while(twihs_master_read(PCA9952_TWI, &twi_package)!=TWIHS_SUCCESS);
  401b02:	bf00      	nop
  401b04:	f107 0308 	add.w	r3, r7, #8
  401b08:	4805      	ldr	r0, [pc, #20]	; (401b20 <PCA9952_read_reg+0x84>)
  401b0a:	4619      	mov	r1, r3
  401b0c:	4b07      	ldr	r3, [pc, #28]	; (401b2c <PCA9952_read_reg+0x90>)
  401b0e:	4798      	blx	r3
  401b10:	4603      	mov	r3, r0
  401b12:	2b00      	cmp	r3, #0
  401b14:	d1f6      	bne.n	401b04 <PCA9952_read_reg+0x68>

	return data;
  401b16:	7ffb      	ldrb	r3, [r7, #31]
}
  401b18:	4618      	mov	r0, r3
  401b1a:	3720      	adds	r7, #32
  401b1c:	46bd      	mov	sp, r7
  401b1e:	bd80      	pop	{r7, pc}
  401b20:	40018000 	.word	0x40018000
  401b24:	004011ed 	.word	0x004011ed
  401b28:	004029e1 	.word	0x004029e1
  401b2c:	00401105 	.word	0x00401105

00401b30 <PCA9952_init>:

extern uint8_t func_transmit(const uint8_t *p_buff, uint32_t ulsize); //lazy, defined in another c file 10feb16 jsi

void PCA9952_init(void) //7apr15
{
  401b30:	b5b0      	push	{r4, r5, r7, lr}
  401b32:	b094      	sub	sp, #80	; 0x50
  401b34:	af02      	add	r7, sp, #8
	volatile uint8_t tmp1, tmp2, tmp3, tmp4;
	
	char printStr[64] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
  401b36:	1d3b      	adds	r3, r7, #4
  401b38:	2240      	movs	r2, #64	; 0x40
  401b3a:	4618      	mov	r0, r3
  401b3c:	2100      	movs	r1, #0
  401b3e:	4b45      	ldr	r3, [pc, #276]	; (401c54 <PCA9952_init+0x124>)
  401b40:	4798      	blx	r3
	/* Store cpu frequency locally*/
//7apr15	cpu_hz = fcpu;

	//Note output is off at the chip level before coming into this routine, LED_OEn set high before calling this function from main()

	PCA9952_write_reg(LED_TOP, PCA9952_MODE1, 0);		//No autoincrement, normal mode not sleep, does not respond to sub or allcall addresses
  401b42:	2000      	movs	r0, #0
  401b44:	2100      	movs	r1, #0
  401b46:	2200      	movs	r2, #0
  401b48:	4b43      	ldr	r3, [pc, #268]	; (401c58 <PCA9952_init+0x128>)
  401b4a:	4798      	blx	r3
	PCA9952_write_reg(LED_TOP, PCA9952_MODE2, 0);		//Dimming not blinking, change on stop not ack (don't really care but have to pick something)
  401b4c:	2000      	movs	r0, #0
  401b4e:	2101      	movs	r1, #1
  401b50:	2200      	movs	r2, #0
  401b52:	4b41      	ldr	r3, [pc, #260]	; (401c58 <PCA9952_init+0x128>)
  401b54:	4798      	blx	r3
	PCA9952_write_reg(LED_TOP, PCA9952_IREFALL, LED_DRIVER_CURRENT); //9apr15 drive at half current for now, power supply circuit needs modification
  401b56:	2000      	movs	r0, #0
  401b58:	2143      	movs	r1, #67	; 0x43
  401b5a:	22c8      	movs	r2, #200	; 0xc8
  401b5c:	4b3e      	ldr	r3, [pc, #248]	; (401c58 <PCA9952_init+0x128>)
  401b5e:	4798      	blx	r3
	PCA9952_write_reg(LED_TOP, PCA9952_LEDOUT0, 0);		//Setting all channels off for now
  401b60:	2000      	movs	r0, #0
  401b62:	2102      	movs	r1, #2
  401b64:	2200      	movs	r2, #0
  401b66:	4b3c      	ldr	r3, [pc, #240]	; (401c58 <PCA9952_init+0x128>)
  401b68:	4798      	blx	r3
	PCA9952_write_reg(LED_TOP, PCA9952_LEDOUT1, 0);
  401b6a:	2000      	movs	r0, #0
  401b6c:	2103      	movs	r1, #3
  401b6e:	2200      	movs	r2, #0
  401b70:	4b39      	ldr	r3, [pc, #228]	; (401c58 <PCA9952_init+0x128>)
  401b72:	4798      	blx	r3
	PCA9952_write_reg(LED_TOP, PCA9952_LEDOUT2, 0);
  401b74:	2000      	movs	r0, #0
  401b76:	2104      	movs	r1, #4
  401b78:	2200      	movs	r2, #0
  401b7a:	4b37      	ldr	r3, [pc, #220]	; (401c58 <PCA9952_init+0x128>)
  401b7c:	4798      	blx	r3
	PCA9952_write_reg(LED_TOP, PCA9952_LEDOUT3, 0);
  401b7e:	2000      	movs	r0, #0
  401b80:	2105      	movs	r1, #5
  401b82:	2200      	movs	r2, #0
  401b84:	4b34      	ldr	r3, [pc, #208]	; (401c58 <PCA9952_init+0x128>)
  401b86:	4798      	blx	r3

	tmp1 = PCA9952_read_reg(LED_TOP, PCA9952_EFLAG0);	//TODO: just see what we get, will need to weave error checking into this system later
  401b88:	2000      	movs	r0, #0
  401b8a:	2144      	movs	r1, #68	; 0x44
  401b8c:	4b33      	ldr	r3, [pc, #204]	; (401c5c <PCA9952_init+0x12c>)
  401b8e:	4798      	blx	r3
  401b90:	4603      	mov	r3, r0
  401b92:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	tmp2 = PCA9952_read_reg(LED_TOP, PCA9952_EFLAG1);
  401b96:	2000      	movs	r0, #0
  401b98:	2145      	movs	r1, #69	; 0x45
  401b9a:	4b30      	ldr	r3, [pc, #192]	; (401c5c <PCA9952_init+0x12c>)
  401b9c:	4798      	blx	r3
  401b9e:	4603      	mov	r3, r0
  401ba0:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46

	PCA9952_write_reg(LED_BOTTOM, PCA9952_MODE1, 0);		//No autoincrement, normal mode not sleep, does not respond to sub or allcall addresses
  401ba4:	2001      	movs	r0, #1
  401ba6:	2100      	movs	r1, #0
  401ba8:	2200      	movs	r2, #0
  401baa:	4b2b      	ldr	r3, [pc, #172]	; (401c58 <PCA9952_init+0x128>)
  401bac:	4798      	blx	r3
	PCA9952_write_reg(LED_BOTTOM, PCA9952_MODE2, 0);		//Dimming not blinking, change on stop not ack (don't really care but have to pick something)
  401bae:	2001      	movs	r0, #1
  401bb0:	2101      	movs	r1, #1
  401bb2:	2200      	movs	r2, #0
  401bb4:	4b28      	ldr	r3, [pc, #160]	; (401c58 <PCA9952_init+0x128>)
  401bb6:	4798      	blx	r3
	PCA9952_write_reg(LED_BOTTOM, PCA9952_IREFALL, LED_DRIVER_CURRENT); //9apr15 drive at half current for now, power supply circuit needs modification
  401bb8:	2001      	movs	r0, #1
  401bba:	2143      	movs	r1, #67	; 0x43
  401bbc:	22c8      	movs	r2, #200	; 0xc8
  401bbe:	4b26      	ldr	r3, [pc, #152]	; (401c58 <PCA9952_init+0x128>)
  401bc0:	4798      	blx	r3
	PCA9952_write_reg(LED_BOTTOM, PCA9952_LEDOUT0, 0);		//Setting all channels off for now
  401bc2:	2001      	movs	r0, #1
  401bc4:	2102      	movs	r1, #2
  401bc6:	2200      	movs	r2, #0
  401bc8:	4b23      	ldr	r3, [pc, #140]	; (401c58 <PCA9952_init+0x128>)
  401bca:	4798      	blx	r3
	PCA9952_write_reg(LED_BOTTOM, PCA9952_LEDOUT1, 0);
  401bcc:	2001      	movs	r0, #1
  401bce:	2103      	movs	r1, #3
  401bd0:	2200      	movs	r2, #0
  401bd2:	4b21      	ldr	r3, [pc, #132]	; (401c58 <PCA9952_init+0x128>)
  401bd4:	4798      	blx	r3
	PCA9952_write_reg(LED_BOTTOM, PCA9952_LEDOUT2, 0);
  401bd6:	2001      	movs	r0, #1
  401bd8:	2104      	movs	r1, #4
  401bda:	2200      	movs	r2, #0
  401bdc:	4b1e      	ldr	r3, [pc, #120]	; (401c58 <PCA9952_init+0x128>)
  401bde:	4798      	blx	r3
	PCA9952_write_reg(LED_BOTTOM, PCA9952_LEDOUT3, 0);
  401be0:	2001      	movs	r0, #1
  401be2:	2105      	movs	r1, #5
  401be4:	2200      	movs	r2, #0
  401be6:	4b1c      	ldr	r3, [pc, #112]	; (401c58 <PCA9952_init+0x128>)
  401be8:	4798      	blx	r3

	tmp3 = PCA9952_read_reg(LED_BOTTOM, PCA9952_EFLAG0);	//TODO: just see what we get, will need to weave error checking into this system later
  401bea:	2001      	movs	r0, #1
  401bec:	2144      	movs	r1, #68	; 0x44
  401bee:	4b1b      	ldr	r3, [pc, #108]	; (401c5c <PCA9952_init+0x12c>)
  401bf0:	4798      	blx	r3
  401bf2:	4603      	mov	r3, r0
  401bf4:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
	tmp4 = PCA9952_read_reg(LED_BOTTOM, PCA9952_EFLAG1);
  401bf8:	2001      	movs	r0, #1
  401bfa:	2145      	movs	r1, #69	; 0x45
  401bfc:	4b17      	ldr	r3, [pc, #92]	; (401c5c <PCA9952_init+0x12c>)
  401bfe:	4798      	blx	r3
  401c00:	4603      	mov	r3, r0
  401c02:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
	
	sprintf(printStr,"PCA9952: tmp1: %x tmp2: %x tmp3: %x tmp4: %x\r\n", tmp1, tmp2, tmp3, tmp4); //10feb16 just for debug jsi
  401c06:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
  401c0a:	b2db      	uxtb	r3, r3
  401c0c:	461d      	mov	r5, r3
  401c0e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
  401c12:	b2db      	uxtb	r3, r3
  401c14:	461c      	mov	r4, r3
  401c16:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
  401c1a:	b2db      	uxtb	r3, r3
  401c1c:	4619      	mov	r1, r3
  401c1e:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
  401c22:	b2db      	uxtb	r3, r3
  401c24:	461a      	mov	r2, r3
  401c26:	1d3b      	adds	r3, r7, #4
  401c28:	9100      	str	r1, [sp, #0]
  401c2a:	9201      	str	r2, [sp, #4]
  401c2c:	4618      	mov	r0, r3
  401c2e:	490c      	ldr	r1, [pc, #48]	; (401c60 <PCA9952_init+0x130>)
  401c30:	462a      	mov	r2, r5
  401c32:	4623      	mov	r3, r4
  401c34:	4c0b      	ldr	r4, [pc, #44]	; (401c64 <PCA9952_init+0x134>)
  401c36:	47a0      	blx	r4
	func_transmit(printStr, strlen(printStr));
  401c38:	1d3b      	adds	r3, r7, #4
  401c3a:	4618      	mov	r0, r3
  401c3c:	4b0a      	ldr	r3, [pc, #40]	; (401c68 <PCA9952_init+0x138>)
  401c3e:	4798      	blx	r3
  401c40:	4602      	mov	r2, r0
  401c42:	1d3b      	adds	r3, r7, #4
  401c44:	4618      	mov	r0, r3
  401c46:	4611      	mov	r1, r2
  401c48:	4b08      	ldr	r3, [pc, #32]	; (401c6c <PCA9952_init+0x13c>)
  401c4a:	4798      	blx	r3
	
	
}
  401c4c:	3748      	adds	r7, #72	; 0x48
  401c4e:	46bd      	mov	sp, r7
  401c50:	bdb0      	pop	{r4, r5, r7, pc}
  401c52:	bf00      	nop
  401c54:	00403149 	.word	0x00403149
  401c58:	00401a2d 	.word	0x00401a2d
  401c5c:	00401a9d 	.word	0x00401a9d
  401c60:	00408900 	.word	0x00408900
  401c64:	00403365 	.word	0x00403365
  401c68:	004033b1 	.word	0x004033b1
  401c6c:	00402bc1 	.word	0x00402bc1

00401c70 <ioport_set_pin_dir>:
 * \param pin IOPORT pin to configure
 * \param dir Direction to set for the specified pin (\ref ioport_direction)
 */
static inline void ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
  401c70:	b480      	push	{r7}
  401c72:	b08d      	sub	sp, #52	; 0x34
  401c74:	af00      	add	r7, sp, #0
  401c76:	6078      	str	r0, [r7, #4]
  401c78:	460b      	mov	r3, r1
  401c7a:	70fb      	strb	r3, [r7, #3]
  401c7c:	687b      	ldr	r3, [r7, #4]
  401c7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  401c80:	78fb      	ldrb	r3, [r7, #3]
  401c82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  401c86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  401c88:	627b      	str	r3, [r7, #36]	; 0x24
  401c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  401c8c:	623b      	str	r3, [r7, #32]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  401c8e:	6a3b      	ldr	r3, [r7, #32]
  401c90:	095b      	lsrs	r3, r3, #5
  401c92:	61fb      	str	r3, [r7, #28]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  401c94:	69fa      	ldr	r2, [r7, #28]
  401c96:	4b17      	ldr	r3, [pc, #92]	; (401cf4 <ioport_set_pin_dir+0x84>)
  401c98:	4413      	add	r3, r2
  401c9a:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);
  401c9c:	61bb      	str	r3, [r7, #24]

	if (dir == IOPORT_DIR_OUTPUT) {
  401c9e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  401ca2:	2b01      	cmp	r3, #1
  401ca4:	d109      	bne.n	401cba <ioport_set_pin_dir+0x4a>
  401ca6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  401ca8:	617b      	str	r3, [r7, #20]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  401caa:	697b      	ldr	r3, [r7, #20]
  401cac:	f003 031f 	and.w	r3, r3, #31
  401cb0:	2201      	movs	r2, #1
  401cb2:	409a      	lsls	r2, r3
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  401cb4:	69bb      	ldr	r3, [r7, #24]
  401cb6:	611a      	str	r2, [r3, #16]
  401cb8:	e00c      	b.n	401cd4 <ioport_set_pin_dir+0x64>
	} else if (dir == IOPORT_DIR_INPUT) {
  401cba:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  401cbe:	2b00      	cmp	r3, #0
  401cc0:	d108      	bne.n	401cd4 <ioport_set_pin_dir+0x64>
  401cc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  401cc4:	613b      	str	r3, [r7, #16]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  401cc6:	693b      	ldr	r3, [r7, #16]
  401cc8:	f003 031f 	and.w	r3, r3, #31
  401ccc:	2201      	movs	r2, #1
  401cce:	409a      	lsls	r2, r3
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  401cd0:	69bb      	ldr	r3, [r7, #24]
  401cd2:	615a      	str	r2, [r3, #20]
  401cd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  401cd6:	60fb      	str	r3, [r7, #12]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  401cd8:	68fb      	ldr	r3, [r7, #12]
  401cda:	f003 031f 	and.w	r3, r3, #31
  401cde:	2201      	movs	r2, #1
  401ce0:	409a      	lsls	r2, r3
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401ce2:	69bb      	ldr	r3, [r7, #24]
  401ce4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	arch_ioport_set_pin_dir(pin, dir);
}
  401ce8:	3734      	adds	r7, #52	; 0x34
  401cea:	46bd      	mov	sp, r7
  401cec:	f85d 7b04 	ldr.w	r7, [sp], #4
  401cf0:	4770      	bx	lr
  401cf2:	bf00      	nop
  401cf4:	00200707 	.word	0x00200707

00401cf8 <ioport_set_pin_level>:
 *
 * \param pin IOPORT pin to configure
 * \param level Logical value of the pin
 */
static inline void ioport_set_pin_level(ioport_pin_t pin, bool level)
{
  401cf8:	b480      	push	{r7}
  401cfa:	b08b      	sub	sp, #44	; 0x2c
  401cfc:	af00      	add	r7, sp, #0
  401cfe:	6078      	str	r0, [r7, #4]
  401d00:	460b      	mov	r3, r1
  401d02:	70fb      	strb	r3, [r7, #3]
  401d04:	687b      	ldr	r3, [r7, #4]
  401d06:	627b      	str	r3, [r7, #36]	; 0x24
  401d08:	78fb      	ldrb	r3, [r7, #3]
  401d0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  401d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  401d10:	61fb      	str	r3, [r7, #28]
  401d12:	69fb      	ldr	r3, [r7, #28]
  401d14:	61bb      	str	r3, [r7, #24]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  401d16:	69bb      	ldr	r3, [r7, #24]
  401d18:	095b      	lsrs	r3, r3, #5
  401d1a:	617b      	str	r3, [r7, #20]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  401d1c:	697a      	ldr	r2, [r7, #20]
  401d1e:	4b10      	ldr	r3, [pc, #64]	; (401d60 <ioport_set_pin_level+0x68>)
  401d20:	4413      	add	r3, r2
  401d22:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);
  401d24:	613b      	str	r3, [r7, #16]

	if (level) {
  401d26:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
  401d2a:	2b00      	cmp	r3, #0
  401d2c:	d009      	beq.n	401d42 <ioport_set_pin_level+0x4a>
  401d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  401d30:	60fb      	str	r3, [r7, #12]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  401d32:	68fb      	ldr	r3, [r7, #12]
  401d34:	f003 031f 	and.w	r3, r3, #31
  401d38:	2201      	movs	r2, #1
  401d3a:	409a      	lsls	r2, r3
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  401d3c:	693b      	ldr	r3, [r7, #16]
  401d3e:	631a      	str	r2, [r3, #48]	; 0x30
  401d40:	e008      	b.n	401d54 <ioport_set_pin_level+0x5c>
  401d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  401d44:	60bb      	str	r3, [r7, #8]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  401d46:	68bb      	ldr	r3, [r7, #8]
  401d48:	f003 031f 	and.w	r3, r3, #31
  401d4c:	2201      	movs	r2, #1
  401d4e:	409a      	lsls	r2, r3
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  401d50:	693b      	ldr	r3, [r7, #16]
  401d52:	635a      	str	r2, [r3, #52]	; 0x34
	arch_ioport_set_pin_level(pin, level);
}
  401d54:	372c      	adds	r7, #44	; 0x2c
  401d56:	46bd      	mov	sp, r7
  401d58:	f85d 7b04 	ldr.w	r7, [sp], #4
  401d5c:	4770      	bx	lr
  401d5e:	bf00      	nop
  401d60:	00200707 	.word	0x00200707

00401d64 <ioport_get_pin_level>:
 *
 * \param pin IOPORT pin to read
 * \return Current logical value of the specified pin
 */
static inline bool ioport_get_pin_level(ioport_pin_t pin)
{
  401d64:	b480      	push	{r7}
  401d66:	b089      	sub	sp, #36	; 0x24
  401d68:	af00      	add	r7, sp, #0
  401d6a:	6078      	str	r0, [r7, #4]
  401d6c:	687b      	ldr	r3, [r7, #4]
  401d6e:	61fb      	str	r3, [r7, #28]
  401d70:	69fb      	ldr	r3, [r7, #28]
  401d72:	61bb      	str	r3, [r7, #24]
  401d74:	69bb      	ldr	r3, [r7, #24]
  401d76:	617b      	str	r3, [r7, #20]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  401d78:	697b      	ldr	r3, [r7, #20]
  401d7a:	095b      	lsrs	r3, r3, #5
  401d7c:	613b      	str	r3, [r7, #16]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  401d7e:	693a      	ldr	r2, [r7, #16]
  401d80:	4b0b      	ldr	r3, [pc, #44]	; (401db0 <ioport_get_pin_level+0x4c>)
  401d82:	4413      	add	r3, r2
  401d84:	025b      	lsls	r3, r3, #9
	base->PIO_CODR = mask & ~level;
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  401d86:	6bda      	ldr	r2, [r3, #60]	; 0x3c
  401d88:	69fb      	ldr	r3, [r7, #28]
  401d8a:	60fb      	str	r3, [r7, #12]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  401d8c:	68fb      	ldr	r3, [r7, #12]
  401d8e:	f003 031f 	and.w	r3, r3, #31
  401d92:	2101      	movs	r1, #1
  401d94:	fa01 f303 	lsl.w	r3, r1, r3
	base->PIO_CODR = mask & ~level;
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  401d98:	4013      	ands	r3, r2
  401d9a:	2b00      	cmp	r3, #0
  401d9c:	bf14      	ite	ne
  401d9e:	2301      	movne	r3, #1
  401da0:	2300      	moveq	r3, #0
  401da2:	b2db      	uxtb	r3, r3
	return arch_ioport_get_pin_level(pin);
}
  401da4:	4618      	mov	r0, r3
  401da6:	3724      	adds	r7, #36	; 0x24
  401da8:	46bd      	mov	sp, r7
  401daa:	f85d 7b04 	ldr.w	r7, [sp], #4
  401dae:	4770      	bx	lr
  401db0:	00200707 	.word	0x00200707

00401db4 <udelay>:
/*
 * We have a 100MHz clock, so 100 NOPs should be about 1ns. 
 * Tried to do a 1ns tick but the chip can't seem to handle it.
 */
void udelay(uint32_t ul_dly_ticks)
{
  401db4:	b480      	push	{r7}
  401db6:	b085      	sub	sp, #20
  401db8:	af00      	add	r7, sp, #0
  401dba:	6078      	str	r0, [r7, #4]
	for (uint32_t i=0; i<ul_dly_ticks; i++)
  401dbc:	2300      	movs	r3, #0
  401dbe:	60fb      	str	r3, [r7, #12]
  401dc0:	e066      	b.n	401e90 <udelay+0xdc>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  401dc2:	bf00      	nop
  401dc4:	bf00      	nop
  401dc6:	bf00      	nop
  401dc8:	bf00      	nop
  401dca:	bf00      	nop
  401dcc:	bf00      	nop
  401dce:	bf00      	nop
  401dd0:	bf00      	nop
  401dd2:	bf00      	nop
  401dd4:	bf00      	nop
  401dd6:	bf00      	nop
  401dd8:	bf00      	nop
  401dda:	bf00      	nop
  401ddc:	bf00      	nop
  401dde:	bf00      	nop
  401de0:	bf00      	nop
  401de2:	bf00      	nop
  401de4:	bf00      	nop
  401de6:	bf00      	nop
  401de8:	bf00      	nop
  401dea:	bf00      	nop
  401dec:	bf00      	nop
  401dee:	bf00      	nop
  401df0:	bf00      	nop
  401df2:	bf00      	nop
  401df4:	bf00      	nop
  401df6:	bf00      	nop
  401df8:	bf00      	nop
  401dfa:	bf00      	nop
  401dfc:	bf00      	nop
  401dfe:	bf00      	nop
  401e00:	bf00      	nop
  401e02:	bf00      	nop
  401e04:	bf00      	nop
  401e06:	bf00      	nop
  401e08:	bf00      	nop
  401e0a:	bf00      	nop
  401e0c:	bf00      	nop
  401e0e:	bf00      	nop
  401e10:	bf00      	nop
  401e12:	bf00      	nop
  401e14:	bf00      	nop
  401e16:	bf00      	nop
  401e18:	bf00      	nop
  401e1a:	bf00      	nop
  401e1c:	bf00      	nop
  401e1e:	bf00      	nop
  401e20:	bf00      	nop
  401e22:	bf00      	nop
  401e24:	bf00      	nop
  401e26:	bf00      	nop
  401e28:	bf00      	nop
  401e2a:	bf00      	nop
  401e2c:	bf00      	nop
  401e2e:	bf00      	nop
  401e30:	bf00      	nop
  401e32:	bf00      	nop
  401e34:	bf00      	nop
  401e36:	bf00      	nop
  401e38:	bf00      	nop
  401e3a:	bf00      	nop
  401e3c:	bf00      	nop
  401e3e:	bf00      	nop
  401e40:	bf00      	nop
  401e42:	bf00      	nop
  401e44:	bf00      	nop
  401e46:	bf00      	nop
  401e48:	bf00      	nop
  401e4a:	bf00      	nop
  401e4c:	bf00      	nop
  401e4e:	bf00      	nop
  401e50:	bf00      	nop
  401e52:	bf00      	nop
  401e54:	bf00      	nop
  401e56:	bf00      	nop
  401e58:	bf00      	nop
  401e5a:	bf00      	nop
  401e5c:	bf00      	nop
  401e5e:	bf00      	nop
  401e60:	bf00      	nop
  401e62:	bf00      	nop
  401e64:	bf00      	nop
  401e66:	bf00      	nop
  401e68:	bf00      	nop
  401e6a:	bf00      	nop
  401e6c:	bf00      	nop
  401e6e:	bf00      	nop
  401e70:	bf00      	nop
  401e72:	bf00      	nop
  401e74:	bf00      	nop
  401e76:	bf00      	nop
  401e78:	bf00      	nop
  401e7a:	bf00      	nop
  401e7c:	bf00      	nop
  401e7e:	bf00      	nop
  401e80:	bf00      	nop
  401e82:	bf00      	nop
  401e84:	bf00      	nop
  401e86:	bf00      	nop
  401e88:	bf00      	nop
  401e8a:	68fb      	ldr	r3, [r7, #12]
  401e8c:	3301      	adds	r3, #1
  401e8e:	60fb      	str	r3, [r7, #12]
  401e90:	68fa      	ldr	r2, [r7, #12]
  401e92:	687b      	ldr	r3, [r7, #4]
  401e94:	429a      	cmp	r2, r3
  401e96:	d394      	bcc.n	401dc2 <udelay+0xe>
		__NOP(); __NOP(); __NOP(); __NOP(); __NOP(); __NOP(); __NOP(); __NOP(); __NOP(); __NOP();
		__NOP(); __NOP(); __NOP(); __NOP(); __NOP(); __NOP(); __NOP(); __NOP(); __NOP(); __NOP();
		__NOP(); __NOP(); __NOP(); __NOP(); __NOP(); __NOP(); __NOP(); __NOP(); __NOP(); __NOP();
		__NOP(); __NOP(); __NOP(); __NOP(); __NOP(); __NOP(); __NOP(); __NOP(); __NOP(); __NOP();
	}
}
  401e98:	3714      	adds	r7, #20
  401e9a:	46bd      	mov	sp, r7
  401e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
  401ea0:	4770      	bx	lr
  401ea2:	bf00      	nop

00401ea4 <io_pin>:

#define EC_ONE_MICROSECOND 8

unsigned char io_pin(unsigned char idx);
unsigned char io_pin(unsigned char idx)
{
  401ea4:	b480      	push	{r7}
  401ea6:	b083      	sub	sp, #12
  401ea8:	af00      	add	r7, sp, #0
  401eaa:	4603      	mov	r3, r0
  401eac:	71fb      	strb	r3, [r7, #7]
	switch (idx)
  401eae:	79fb      	ldrb	r3, [r7, #7]
  401eb0:	2b04      	cmp	r3, #4
  401eb2:	d817      	bhi.n	401ee4 <io_pin+0x40>
  401eb4:	a201      	add	r2, pc, #4	; (adr r2, 401ebc <io_pin+0x18>)
  401eb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  401eba:	bf00      	nop
  401ebc:	00401ed1 	.word	0x00401ed1
  401ec0:	00401ed5 	.word	0x00401ed5
  401ec4:	00401ed9 	.word	0x00401ed9
  401ec8:	00401edd 	.word	0x00401edd
  401ecc:	00401ee1 	.word	0x00401ee1
	{
		case 0:
			return ECLAVE_SERIAL_ID0;
  401ed0:	230f      	movs	r3, #15
  401ed2:	e008      	b.n	401ee6 <io_pin+0x42>
			break;
		case 1:
			return ECLAVE_SERIAL_ID1;
  401ed4:	2310      	movs	r3, #16
  401ed6:	e006      	b.n	401ee6 <io_pin+0x42>
			break;
		case 2:
			return ECLAVE_SERIAL_ID2;
  401ed8:	2311      	movs	r3, #17
  401eda:	e004      	b.n	401ee6 <io_pin+0x42>
			break;
		case 3:
			return ECLAVE_SERIAL_ID3;
  401edc:	2312      	movs	r3, #18
  401ede:	e002      	b.n	401ee6 <io_pin+0x42>
			break;
		case 4:
			return ECLAVE_SERIAL_ID4;
  401ee0:	2313      	movs	r3, #19
  401ee2:	e000      	b.n	401ee6 <io_pin+0x42>
			break;
		default: 
			return 0; //TODO: return a better error code here
  401ee4:	2300      	movs	r3, #0
			break;
	}
}
  401ee6:	4618      	mov	r0, r3
  401ee8:	370c      	adds	r7, #12
  401eea:	46bd      	mov	sp, r7
  401eec:	f85d 7b04 	ldr.w	r7, [sp], #4
  401ef0:	4770      	bx	lr
  401ef2:	bf00      	nop

00401ef4 <drive_DQ_low>:

void drive_DQ_low(unsigned char idx);
void drive_DQ_low(unsigned char idx)
{
  401ef4:	b580      	push	{r7, lr}
  401ef6:	b084      	sub	sp, #16
  401ef8:	af00      	add	r7, sp, #0
  401efa:	4603      	mov	r3, r0
  401efc:	71fb      	strb	r3, [r7, #7]
	unsigned char ioPin;
	int32_t ioFlags;
	
	ioPin = io_pin(idx);
  401efe:	79fb      	ldrb	r3, [r7, #7]
  401f00:	4618      	mov	r0, r3
  401f02:	4b08      	ldr	r3, [pc, #32]	; (401f24 <drive_DQ_low+0x30>)
  401f04:	4798      	blx	r3
  401f06:	4603      	mov	r3, r0
  401f08:	73fb      	strb	r3, [r7, #15]
	
	ioport_set_pin_dir(ioPin, IOPORT_DIR_OUTPUT);
  401f0a:	7bfb      	ldrb	r3, [r7, #15]
  401f0c:	4618      	mov	r0, r3
  401f0e:	2101      	movs	r1, #1
  401f10:	4b05      	ldr	r3, [pc, #20]	; (401f28 <drive_DQ_low+0x34>)
  401f12:	4798      	blx	r3
	ioport_set_pin_level(ioPin, IOPORT_PIN_LEVEL_LOW);
  401f14:	7bfb      	ldrb	r3, [r7, #15]
  401f16:	4618      	mov	r0, r3
  401f18:	2100      	movs	r1, #0
  401f1a:	4b04      	ldr	r3, [pc, #16]	; (401f2c <drive_DQ_low+0x38>)
  401f1c:	4798      	blx	r3

}
  401f1e:	3710      	adds	r7, #16
  401f20:	46bd      	mov	sp, r7
  401f22:	bd80      	pop	{r7, pc}
  401f24:	00401ea5 	.word	0x00401ea5
  401f28:	00401c71 	.word	0x00401c71
  401f2c:	00401cf9 	.word	0x00401cf9

00401f30 <release_the_bus>:

void release_the_bus(unsigned char idx);
void release_the_bus(unsigned char idx)
{
  401f30:	b580      	push	{r7, lr}
  401f32:	b084      	sub	sp, #16
  401f34:	af00      	add	r7, sp, #0
  401f36:	4603      	mov	r3, r0
  401f38:	71fb      	strb	r3, [r7, #7]
	unsigned char ioPin;
	int32_t ioFlags;
	
	ioPin = io_pin(idx);
  401f3a:	79fb      	ldrb	r3, [r7, #7]
  401f3c:	4618      	mov	r0, r3
  401f3e:	4b06      	ldr	r3, [pc, #24]	; (401f58 <release_the_bus+0x28>)
  401f40:	4798      	blx	r3
  401f42:	4603      	mov	r3, r0
  401f44:	73fb      	strb	r3, [r7, #15]
	
	ioport_set_pin_dir(ioPin, IOPORT_DIR_INPUT);
  401f46:	7bfb      	ldrb	r3, [r7, #15]
  401f48:	4618      	mov	r0, r3
  401f4a:	2100      	movs	r1, #0
  401f4c:	4b03      	ldr	r3, [pc, #12]	; (401f5c <release_the_bus+0x2c>)
  401f4e:	4798      	blx	r3
	

}
  401f50:	3710      	adds	r7, #16
  401f52:	46bd      	mov	sp, r7
  401f54:	bd80      	pop	{r7, pc}
  401f56:	bf00      	nop
  401f58:	00401ea5 	.word	0x00401ea5
  401f5c:	00401c71 	.word	0x00401c71

00401f60 <gpio_input>:

void gpio_input(unsigned char idx) //14may15 experiment
{
  401f60:	b580      	push	{r7, lr}
  401f62:	b084      	sub	sp, #16
  401f64:	af00      	add	r7, sp, #0
  401f66:	4603      	mov	r3, r0
  401f68:	71fb      	strb	r3, [r7, #7]
	uint32_t ioFlags;
	unsigned char ioPin;
		
	ioPin = io_pin(idx);
  401f6a:	79fb      	ldrb	r3, [r7, #7]
  401f6c:	4618      	mov	r0, r3
  401f6e:	4b06      	ldr	r3, [pc, #24]	; (401f88 <gpio_input+0x28>)
  401f70:	4798      	blx	r3
  401f72:	4603      	mov	r3, r0
  401f74:	73fb      	strb	r3, [r7, #15]
		
	ioport_set_pin_dir(ioPin, IOPORT_DIR_INPUT);
  401f76:	7bfb      	ldrb	r3, [r7, #15]
  401f78:	4618      	mov	r0, r3
  401f7a:	2100      	movs	r1, #0
  401f7c:	4b03      	ldr	r3, [pc, #12]	; (401f8c <gpio_input+0x2c>)
  401f7e:	4798      	blx	r3


}
  401f80:	3710      	adds	r7, #16
  401f82:	46bd      	mov	sp, r7
  401f84:	bd80      	pop	{r7, pc}
  401f86:	bf00      	nop
  401f88:	00401ea5 	.word	0x00401ea5
  401f8c:	00401c71 	.word	0x00401c71

00401f90 <sample_line>:

unsigned char sample_line(unsigned char idx);
unsigned char sample_line(unsigned char idx)
{
  401f90:	b580      	push	{r7, lr}
  401f92:	b084      	sub	sp, #16
  401f94:	af00      	add	r7, sp, #0
  401f96:	4603      	mov	r3, r0
  401f98:	71fb      	strb	r3, [r7, #7]
//14may15 experiment		uint32_t ioFlags;
		unsigned char retVal, ioPin;
		
		ioPin = io_pin(idx);
  401f9a:	79fb      	ldrb	r3, [r7, #7]
  401f9c:	4618      	mov	r0, r3
  401f9e:	4b07      	ldr	r3, [pc, #28]	; (401fbc <sample_line+0x2c>)
  401fa0:	4798      	blx	r3
  401fa2:	4603      	mov	r3, r0
  401fa4:	73fb      	strb	r3, [r7, #15]
		
//14may15 experiment		ioFlags = (GPIO_DIR_INPUT);
//14may15 experiment		gpio_configure_pin(ioPin, ioFlags);

		retVal = ioport_get_pin_level(ioPin);
  401fa6:	7bfb      	ldrb	r3, [r7, #15]
  401fa8:	4618      	mov	r0, r3
  401faa:	4b05      	ldr	r3, [pc, #20]	; (401fc0 <sample_line+0x30>)
  401fac:	4798      	blx	r3
  401fae:	4603      	mov	r3, r0
  401fb0:	73bb      	strb	r3, [r7, #14]

//14may15 experiment		ioFlags = (GPIO_DIR_OUTPUT);
//14may15 experiment		gpio_configure_pin(ioPin, ioFlags);

		return retVal;
  401fb2:	7bbb      	ldrb	r3, [r7, #14]
}
  401fb4:	4618      	mov	r0, r3
  401fb6:	3710      	adds	r7, #16
  401fb8:	46bd      	mov	sp, r7
  401fba:	bd80      	pop	{r7, pc}
  401fbc:	00401ea5 	.word	0x00401ea5
  401fc0:	00401d65 	.word	0x00401d65

00401fc4 <SetSpeed>:

//-----------------------------------------------------------------------------
// Set the 1-Wire timing to 'standard' (standard=1) or 'overdrive' (standard=0).
//
void SetSpeed(int standard)
{
  401fc4:	b480      	push	{r7}
  401fc6:	b083      	sub	sp, #12
  401fc8:	af00      	add	r7, sp, #0
  401fca:	6078      	str	r0, [r7, #4]
		J = 410;
	}
	
#endif

	if (standard) //experiment 16may15 cut everything in half, some issue with using the PLL? and fudge the tight numbers at the low end
  401fcc:	687b      	ldr	r3, [r7, #4]
  401fce:	2b00      	cmp	r3, #0
  401fd0:	d01e      	beq.n	402010 <SetSpeed+0x4c>
	{
		// Standard Speed
		A = 0; //6;
  401fd2:	4b21      	ldr	r3, [pc, #132]	; (402058 <SetSpeed+0x94>)
  401fd4:	2200      	movs	r2, #0
  401fd6:	601a      	str	r2, [r3, #0]
		B = 32; //64;
  401fd8:	4b20      	ldr	r3, [pc, #128]	; (40205c <SetSpeed+0x98>)
  401fda:	2220      	movs	r2, #32
  401fdc:	601a      	str	r2, [r3, #0]
		C = 30; //60;
  401fde:	4b20      	ldr	r3, [pc, #128]	; (402060 <SetSpeed+0x9c>)
  401fe0:	221e      	movs	r2, #30
  401fe2:	601a      	str	r2, [r3, #0]
		D = 2; //10;
  401fe4:	4b1f      	ldr	r3, [pc, #124]	; (402064 <SetSpeed+0xa0>)
  401fe6:	2202      	movs	r2, #2
  401fe8:	601a      	str	r2, [r3, #0]
		E = 2; //9;
  401fea:	4b1f      	ldr	r3, [pc, #124]	; (402068 <SetSpeed+0xa4>)
  401fec:	2202      	movs	r2, #2
  401fee:	601a      	str	r2, [r3, #0]
		F = 27; //55;
  401ff0:	4b1e      	ldr	r3, [pc, #120]	; (40206c <SetSpeed+0xa8>)
  401ff2:	221b      	movs	r2, #27
  401ff4:	601a      	str	r2, [r3, #0]
		G = 0; //0;
  401ff6:	4b1e      	ldr	r3, [pc, #120]	; (402070 <SetSpeed+0xac>)
  401ff8:	2200      	movs	r2, #0
  401ffa:	601a      	str	r2, [r3, #0]
		H = 240; //480;
  401ffc:	4b1d      	ldr	r3, [pc, #116]	; (402074 <SetSpeed+0xb0>)
  401ffe:	22f0      	movs	r2, #240	; 0xf0
  402000:	601a      	str	r2, [r3, #0]
		I = 35; //70;
  402002:	4b1d      	ldr	r3, [pc, #116]	; (402078 <SetSpeed+0xb4>)
  402004:	2223      	movs	r2, #35	; 0x23
  402006:	601a      	str	r2, [r3, #0]
		J = 205; //410;
  402008:	4b1c      	ldr	r3, [pc, #112]	; (40207c <SetSpeed+0xb8>)
  40200a:	22cd      	movs	r2, #205	; 0xcd
  40200c:	601a      	str	r2, [r3, #0]
  40200e:	e01d      	b.n	40204c <SetSpeed+0x88>


	else
	{
		// Overdrive Speed
		A = 1.5;
  402010:	4b11      	ldr	r3, [pc, #68]	; (402058 <SetSpeed+0x94>)
  402012:	2201      	movs	r2, #1
  402014:	601a      	str	r2, [r3, #0]
		B = 7.5;
  402016:	4b11      	ldr	r3, [pc, #68]	; (40205c <SetSpeed+0x98>)
  402018:	2207      	movs	r2, #7
  40201a:	601a      	str	r2, [r3, #0]
		C = 7.5;
  40201c:	4b10      	ldr	r3, [pc, #64]	; (402060 <SetSpeed+0x9c>)
  40201e:	2207      	movs	r2, #7
  402020:	601a      	str	r2, [r3, #0]
		D = 2.5;
  402022:	4b10      	ldr	r3, [pc, #64]	; (402064 <SetSpeed+0xa0>)
  402024:	2202      	movs	r2, #2
  402026:	601a      	str	r2, [r3, #0]
		E = 0.75;
  402028:	4b0f      	ldr	r3, [pc, #60]	; (402068 <SetSpeed+0xa4>)
  40202a:	2200      	movs	r2, #0
  40202c:	601a      	str	r2, [r3, #0]
		F = 7;
  40202e:	4b0f      	ldr	r3, [pc, #60]	; (40206c <SetSpeed+0xa8>)
  402030:	2207      	movs	r2, #7
  402032:	601a      	str	r2, [r3, #0]
		G = 2.5;
  402034:	4b0e      	ldr	r3, [pc, #56]	; (402070 <SetSpeed+0xac>)
  402036:	2202      	movs	r2, #2
  402038:	601a      	str	r2, [r3, #0]
		H = 70;
  40203a:	4b0e      	ldr	r3, [pc, #56]	; (402074 <SetSpeed+0xb0>)
  40203c:	2246      	movs	r2, #70	; 0x46
  40203e:	601a      	str	r2, [r3, #0]
		I = 8.5;
  402040:	4b0d      	ldr	r3, [pc, #52]	; (402078 <SetSpeed+0xb4>)
  402042:	2208      	movs	r2, #8
  402044:	601a      	str	r2, [r3, #0]
		J = 40;
  402046:	4b0d      	ldr	r3, [pc, #52]	; (40207c <SetSpeed+0xb8>)
  402048:	2228      	movs	r2, #40	; 0x28
  40204a:	601a      	str	r2, [r3, #0]
	}
}
  40204c:	370c      	adds	r7, #12
  40204e:	46bd      	mov	sp, r7
  402050:	f85d 7b04 	ldr.w	r7, [sp], #4
  402054:	4770      	bx	lr
  402056:	bf00      	nop
  402058:	204009d8 	.word	0x204009d8
  40205c:	204009dc 	.word	0x204009dc
  402060:	204009e4 	.word	0x204009e4
  402064:	204009d4 	.word	0x204009d4
  402068:	204009f0 	.word	0x204009f0
  40206c:	204009f8 	.word	0x204009f8
  402070:	204009e8 	.word	0x204009e8
  402074:	204009ec 	.word	0x204009ec
  402078:	204009f4 	.word	0x204009f4
  40207c:	204009e0 	.word	0x204009e0

00402080 <OWTouchReset>:
// Generate a 1-Wire reset, return 1 if no presence detect was found,
// return 0 otherwise.
// (NOTE: Does not handle alarm presence from DS2404/DS1994)
//
int OWTouchReset(unsigned char idx)
{
  402080:	b580      	push	{r7, lr}
  402082:	b084      	sub	sp, #16
  402084:	af00      	add	r7, sp, #0
  402086:	4603      	mov	r3, r0
  402088:	71fb      	strb	r3, [r7, #7]
	int result;

	udelay(A);
  40208a:	4b17      	ldr	r3, [pc, #92]	; (4020e8 <OWTouchReset+0x68>)
  40208c:	681b      	ldr	r3, [r3, #0]
  40208e:	4618      	mov	r0, r3
  402090:	4b16      	ldr	r3, [pc, #88]	; (4020ec <OWTouchReset+0x6c>)
  402092:	4798      	blx	r3
	drive_DQ_low(idx);
  402094:	79fb      	ldrb	r3, [r7, #7]
  402096:	4618      	mov	r0, r3
  402098:	4b15      	ldr	r3, [pc, #84]	; (4020f0 <OWTouchReset+0x70>)
  40209a:	4798      	blx	r3
	udelay(H);	//tRSTL (reset low) 480-640us
  40209c:	4b15      	ldr	r3, [pc, #84]	; (4020f4 <OWTouchReset+0x74>)
  40209e:	681b      	ldr	r3, [r3, #0]
  4020a0:	4618      	mov	r0, r3
  4020a2:	4b12      	ldr	r3, [pc, #72]	; (4020ec <OWTouchReset+0x6c>)
  4020a4:	4798      	blx	r3
	release_the_bus(idx);
  4020a6:	79fb      	ldrb	r3, [r7, #7]
  4020a8:	4618      	mov	r0, r3
  4020aa:	4b13      	ldr	r3, [pc, #76]	; (4020f8 <OWTouchReset+0x78>)
  4020ac:	4798      	blx	r3
	
	gpio_input(idx); //14may15 experiment
  4020ae:	79fb      	ldrb	r3, [r7, #7]
  4020b0:	4618      	mov	r0, r3
  4020b2:	4b12      	ldr	r3, [pc, #72]	; (4020fc <OWTouchReset+0x7c>)
  4020b4:	4798      	blx	r3

	
	udelay(I);	//tMSP (presence detect sample) 60-75us
  4020b6:	4b12      	ldr	r3, [pc, #72]	; (402100 <OWTouchReset+0x80>)
  4020b8:	681b      	ldr	r3, [r3, #0]
  4020ba:	4618      	mov	r0, r3
  4020bc:	4b0b      	ldr	r3, [pc, #44]	; (4020ec <OWTouchReset+0x6c>)
  4020be:	4798      	blx	r3
	result = sample_line(idx);
  4020c0:	79fb      	ldrb	r3, [r7, #7]
  4020c2:	4618      	mov	r0, r3
  4020c4:	4b0f      	ldr	r3, [pc, #60]	; (402104 <OWTouchReset+0x84>)
  4020c6:	4798      	blx	r3
  4020c8:	4603      	mov	r3, r0
  4020ca:	60fb      	str	r3, [r7, #12]
	
	gpio_input(idx); //14may15 experiment
  4020cc:	79fb      	ldrb	r3, [r7, #7]
  4020ce:	4618      	mov	r0, r3
  4020d0:	4b0a      	ldr	r3, [pc, #40]	; (4020fc <OWTouchReset+0x7c>)
  4020d2:	4798      	blx	r3

	udelay(J); // Complete the reset sequence recovery 5-??us (no max?)
  4020d4:	4b0c      	ldr	r3, [pc, #48]	; (402108 <OWTouchReset+0x88>)
  4020d6:	681b      	ldr	r3, [r3, #0]
  4020d8:	4618      	mov	r0, r3
  4020da:	4b04      	ldr	r3, [pc, #16]	; (4020ec <OWTouchReset+0x6c>)
  4020dc:	4798      	blx	r3
	return result; // Return sample presence pulse result
  4020de:	68fb      	ldr	r3, [r7, #12]
}
  4020e0:	4618      	mov	r0, r3
  4020e2:	3710      	adds	r7, #16
  4020e4:	46bd      	mov	sp, r7
  4020e6:	bd80      	pop	{r7, pc}
  4020e8:	204009d8 	.word	0x204009d8
  4020ec:	00401db5 	.word	0x00401db5
  4020f0:	00401ef5 	.word	0x00401ef5
  4020f4:	204009ec 	.word	0x204009ec
  4020f8:	00401f31 	.word	0x00401f31
  4020fc:	00401f61 	.word	0x00401f61
  402100:	204009f4 	.word	0x204009f4
  402104:	00401f91 	.word	0x00401f91
  402108:	204009e0 	.word	0x204009e0

0040210c <drive_DQ_low_and_release_the_bus>:

void drive_DQ_low_and_release_the_bus(unsigned char idx);
void drive_DQ_low_and_release_the_bus(unsigned char idx)
{
  40210c:	b580      	push	{r7, lr}
  40210e:	b084      	sub	sp, #16
  402110:	af00      	add	r7, sp, #0
  402112:	4603      	mov	r3, r0
  402114:	71fb      	strb	r3, [r7, #7]
	unsigned char ioPin;
	int32_t ioFlagsOutput, ioFlagsInput;
	
	ioPin = io_pin(idx);
  402116:	79fb      	ldrb	r3, [r7, #7]
  402118:	4618      	mov	r0, r3
  40211a:	4b0d      	ldr	r3, [pc, #52]	; (402150 <drive_DQ_low_and_release_the_bus+0x44>)
  40211c:	4798      	blx	r3
  40211e:	4603      	mov	r3, r0
  402120:	73fb      	strb	r3, [r7, #15]
	
	ioport_set_pin_dir(ioPin, IOPORT_DIR_OUTPUT);
  402122:	7bfb      	ldrb	r3, [r7, #15]
  402124:	4618      	mov	r0, r3
  402126:	2101      	movs	r1, #1
  402128:	4b0a      	ldr	r3, [pc, #40]	; (402154 <drive_DQ_low_and_release_the_bus+0x48>)
  40212a:	4798      	blx	r3
	ioport_set_pin_level(ioPin, IOPORT_PIN_LEVEL_LOW);
  40212c:	7bfb      	ldrb	r3, [r7, #15]
  40212e:	4618      	mov	r0, r3
  402130:	2100      	movs	r1, #0
  402132:	4b09      	ldr	r3, [pc, #36]	; (402158 <drive_DQ_low_and_release_the_bus+0x4c>)
  402134:	4798      	blx	r3

	udelay(A);	//tW1L 5-15us
  402136:	4b09      	ldr	r3, [pc, #36]	; (40215c <drive_DQ_low_and_release_the_bus+0x50>)
  402138:	681b      	ldr	r3, [r3, #0]
  40213a:	4618      	mov	r0, r3
  40213c:	4b08      	ldr	r3, [pc, #32]	; (402160 <drive_DQ_low_and_release_the_bus+0x54>)
  40213e:	4798      	blx	r3

	ioport_set_pin_dir(ioPin, IOPORT_DIR_INPUT);
  402140:	7bfb      	ldrb	r3, [r7, #15]
  402142:	4618      	mov	r0, r3
  402144:	2100      	movs	r1, #0
  402146:	4b03      	ldr	r3, [pc, #12]	; (402154 <drive_DQ_low_and_release_the_bus+0x48>)
  402148:	4798      	blx	r3
	
}
  40214a:	3710      	adds	r7, #16
  40214c:	46bd      	mov	sp, r7
  40214e:	bd80      	pop	{r7, pc}
  402150:	00401ea5 	.word	0x00401ea5
  402154:	00401c71 	.word	0x00401c71
  402158:	00401cf9 	.word	0x00401cf9
  40215c:	204009d8 	.word	0x204009d8
  402160:	00401db5 	.word	0x00401db5

00402164 <OWWriteBit>:
//-----------------------------------------------------------------------------
// Send a 1-Wire write bit. Provide 10us recovery time.
//
void OWWriteBit(unsigned char idx, int bit);
void OWWriteBit(unsigned char idx, int bit)
{
  402164:	b580      	push	{r7, lr}
  402166:	b082      	sub	sp, #8
  402168:	af00      	add	r7, sp, #0
  40216a:	4603      	mov	r3, r0
  40216c:	6039      	str	r1, [r7, #0]
  40216e:	71fb      	strb	r3, [r7, #7]
	if (bit)
  402170:	683b      	ldr	r3, [r7, #0]
  402172:	2b00      	cmp	r3, #0
  402174:	d009      	beq.n	40218a <OWWriteBit+0x26>
	{
		// Write '1' bit
		drive_DQ_low_and_release_the_bus(idx);
  402176:	79fb      	ldrb	r3, [r7, #7]
  402178:	4618      	mov	r0, r3
  40217a:	4b0e      	ldr	r3, [pc, #56]	; (4021b4 <OWWriteBit+0x50>)
  40217c:	4798      	blx	r3
#if 0
		drive_DQ_low(idx);
//14may15 take this out entirely, we can't seem to control this precisely enough		cpu_delay_us(A, EC_CPU_CLOCK_100MHZ	//tW1L 5-15us
		release_the_bus(idx);
#endif
		udelay(B);	// Complete the time slot and 10us recovery tSLOT 65-??us (no max)
  40217e:	4b0e      	ldr	r3, [pc, #56]	; (4021b8 <OWWriteBit+0x54>)
  402180:	681b      	ldr	r3, [r3, #0]
  402182:	4618      	mov	r0, r3
  402184:	4b0d      	ldr	r3, [pc, #52]	; (4021bc <OWWriteBit+0x58>)
  402186:	4798      	blx	r3
  402188:	e011      	b.n	4021ae <OWWriteBit+0x4a>
	}
	else
	{
		// Write '0' bit
		drive_DQ_low(idx);
  40218a:	79fb      	ldrb	r3, [r7, #7]
  40218c:	4618      	mov	r0, r3
  40218e:	4b0c      	ldr	r3, [pc, #48]	; (4021c0 <OWWriteBit+0x5c>)
  402190:	4798      	blx	r3
		udelay(C);	//tW0L 60-120us
  402192:	4b0c      	ldr	r3, [pc, #48]	; (4021c4 <OWWriteBit+0x60>)
  402194:	681b      	ldr	r3, [r3, #0]
  402196:	4618      	mov	r0, r3
  402198:	4b08      	ldr	r3, [pc, #32]	; (4021bc <OWWriteBit+0x58>)
  40219a:	4798      	blx	r3
		release_the_bus(idx);
  40219c:	79fb      	ldrb	r3, [r7, #7]
  40219e:	4618      	mov	r0, r3
  4021a0:	4b09      	ldr	r3, [pc, #36]	; (4021c8 <OWWriteBit+0x64>)
  4021a2:	4798      	blx	r3
		udelay(D);	//tREC 5-??us
  4021a4:	4b09      	ldr	r3, [pc, #36]	; (4021cc <OWWriteBit+0x68>)
  4021a6:	681b      	ldr	r3, [r3, #0]
  4021a8:	4618      	mov	r0, r3
  4021aa:	4b04      	ldr	r3, [pc, #16]	; (4021bc <OWWriteBit+0x58>)
  4021ac:	4798      	blx	r3
	}
}
  4021ae:	3708      	adds	r7, #8
  4021b0:	46bd      	mov	sp, r7
  4021b2:	bd80      	pop	{r7, pc}
  4021b4:	0040210d 	.word	0x0040210d
  4021b8:	204009dc 	.word	0x204009dc
  4021bc:	00401db5 	.word	0x00401db5
  4021c0:	00401ef5 	.word	0x00401ef5
  4021c4:	204009e4 	.word	0x204009e4
  4021c8:	00401f31 	.word	0x00401f31
  4021cc:	204009d4 	.word	0x204009d4

004021d0 <OWReadBit>:
//-----------------------------------------------------------------------------
// Read a bit from the 1-Wire bus and return it. Provide 10us recovery time.
//
int OWReadBit(unsigned char idx);
int OWReadBit(unsigned char idx)
{
  4021d0:	b580      	push	{r7, lr}
  4021d2:	b084      	sub	sp, #16
  4021d4:	af00      	add	r7, sp, #0
  4021d6:	4603      	mov	r3, r0
  4021d8:	71fb      	strb	r3, [r7, #7]
#if 0
	drive_DQ_low(idx);
//14may15 take this out entirely, we can't seem to control this precisely enough	cpu_delay_us(A, EC_CPU_CLOCK_100MHZ	//tRL 5-15us
	release_the_bus(idx);
#endif
	drive_DQ_low_and_release_the_bus(idx);
  4021da:	79fb      	ldrb	r3, [r7, #7]
  4021dc:	4618      	mov	r0, r3
  4021de:	4b0b      	ldr	r3, [pc, #44]	; (40220c <OWReadBit+0x3c>)
  4021e0:	4798      	blx	r3
	
	udelay(E);	//tMSR 5-15us
  4021e2:	4b0b      	ldr	r3, [pc, #44]	; (402210 <OWReadBit+0x40>)
  4021e4:	681b      	ldr	r3, [r3, #0]
  4021e6:	4618      	mov	r0, r3
  4021e8:	4b0a      	ldr	r3, [pc, #40]	; (402214 <OWReadBit+0x44>)
  4021ea:	4798      	blx	r3
	result = sample_line(idx);
  4021ec:	79fb      	ldrb	r3, [r7, #7]
  4021ee:	4618      	mov	r0, r3
  4021f0:	4b09      	ldr	r3, [pc, #36]	; (402218 <OWReadBit+0x48>)
  4021f2:	4798      	blx	r3
  4021f4:	4603      	mov	r3, r0
  4021f6:	60fb      	str	r3, [r7, #12]
	udelay(F); // Complete the time slot and 10us recovery tREC 5+us
  4021f8:	4b08      	ldr	r3, [pc, #32]	; (40221c <OWReadBit+0x4c>)
  4021fa:	681b      	ldr	r3, [r3, #0]
  4021fc:	4618      	mov	r0, r3
  4021fe:	4b05      	ldr	r3, [pc, #20]	; (402214 <OWReadBit+0x44>)
  402200:	4798      	blx	r3

	return result;
  402202:	68fb      	ldr	r3, [r7, #12]
}
  402204:	4618      	mov	r0, r3
  402206:	3710      	adds	r7, #16
  402208:	46bd      	mov	sp, r7
  40220a:	bd80      	pop	{r7, pc}
  40220c:	0040210d 	.word	0x0040210d
  402210:	204009f0 	.word	0x204009f0
  402214:	00401db5 	.word	0x00401db5
  402218:	00401f91 	.word	0x00401f91
  40221c:	204009f8 	.word	0x204009f8

00402220 <OWWriteByte>:

//-----------------------------------------------------------------------------
// Write 1-Wire data byte
//
void OWWriteByte(unsigned char idx, int data)
{
  402220:	b580      	push	{r7, lr}
  402222:	b084      	sub	sp, #16
  402224:	af00      	add	r7, sp, #0
  402226:	4603      	mov	r3, r0
  402228:	6039      	str	r1, [r7, #0]
  40222a:	71fb      	strb	r3, [r7, #7]
	int loop;

	// Loop to write each bit in the byte, LS-bit first
	for (loop = 0; loop < 8; loop++)
  40222c:	2300      	movs	r3, #0
  40222e:	60fb      	str	r3, [r7, #12]
  402230:	e00d      	b.n	40224e <OWWriteByte+0x2e>
	{
		OWWriteBit(idx, data & 0x01);
  402232:	683b      	ldr	r3, [r7, #0]
  402234:	f003 0301 	and.w	r3, r3, #1
  402238:	79fa      	ldrb	r2, [r7, #7]
  40223a:	4610      	mov	r0, r2
  40223c:	4619      	mov	r1, r3
  40223e:	4b07      	ldr	r3, [pc, #28]	; (40225c <OWWriteByte+0x3c>)
  402240:	4798      	blx	r3

		// shift the data byte for the next bit
		data >>= 1;
  402242:	683b      	ldr	r3, [r7, #0]
  402244:	105b      	asrs	r3, r3, #1
  402246:	603b      	str	r3, [r7, #0]
void OWWriteByte(unsigned char idx, int data)
{
	int loop;

	// Loop to write each bit in the byte, LS-bit first
	for (loop = 0; loop < 8; loop++)
  402248:	68fb      	ldr	r3, [r7, #12]
  40224a:	3301      	adds	r3, #1
  40224c:	60fb      	str	r3, [r7, #12]
  40224e:	68fb      	ldr	r3, [r7, #12]
  402250:	2b07      	cmp	r3, #7
  402252:	ddee      	ble.n	402232 <OWWriteByte+0x12>
		OWWriteBit(idx, data & 0x01);

		// shift the data byte for the next bit
		data >>= 1;
	}
}
  402254:	3710      	adds	r7, #16
  402256:	46bd      	mov	sp, r7
  402258:	bd80      	pop	{r7, pc}
  40225a:	bf00      	nop
  40225c:	00402165 	.word	0x00402165

00402260 <OWReadByte>:

//-----------------------------------------------------------------------------
// Read 1-Wire data byte and return it
//
int OWReadByte(unsigned char idx)
{
  402260:	b580      	push	{r7, lr}
  402262:	b084      	sub	sp, #16
  402264:	af00      	add	r7, sp, #0
  402266:	4603      	mov	r3, r0
  402268:	71fb      	strb	r3, [r7, #7]
	int loop, result=0;
  40226a:	2300      	movs	r3, #0
  40226c:	60bb      	str	r3, [r7, #8]

	for (loop = 0; loop < 8; loop++)
  40226e:	2300      	movs	r3, #0
  402270:	60fb      	str	r3, [r7, #12]
  402272:	e010      	b.n	402296 <OWReadByte+0x36>
	{
		// shift the result to get it ready for the next bit
		result >>= 1;
  402274:	68bb      	ldr	r3, [r7, #8]
  402276:	105b      	asrs	r3, r3, #1
  402278:	60bb      	str	r3, [r7, #8]

		// if result is one, then set MS bit
		if (OWReadBit(idx))
  40227a:	79fb      	ldrb	r3, [r7, #7]
  40227c:	4618      	mov	r0, r3
  40227e:	4b0a      	ldr	r3, [pc, #40]	; (4022a8 <OWReadByte+0x48>)
  402280:	4798      	blx	r3
  402282:	4603      	mov	r3, r0
  402284:	2b00      	cmp	r3, #0
  402286:	d003      	beq.n	402290 <OWReadByte+0x30>
		result |= 0x80;
  402288:	68bb      	ldr	r3, [r7, #8]
  40228a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  40228e:	60bb      	str	r3, [r7, #8]
//
int OWReadByte(unsigned char idx)
{
	int loop, result=0;

	for (loop = 0; loop < 8; loop++)
  402290:	68fb      	ldr	r3, [r7, #12]
  402292:	3301      	adds	r3, #1
  402294:	60fb      	str	r3, [r7, #12]
  402296:	68fb      	ldr	r3, [r7, #12]
  402298:	2b07      	cmp	r3, #7
  40229a:	ddeb      	ble.n	402274 <OWReadByte+0x14>

		// if result is one, then set MS bit
		if (OWReadBit(idx))
		result |= 0x80;
	}
	return result;
  40229c:	68bb      	ldr	r3, [r7, #8]
}
  40229e:	4618      	mov	r0, r3
  4022a0:	3710      	adds	r7, #16
  4022a2:	46bd      	mov	sp, r7
  4022a4:	bd80      	pop	{r7, pc}
  4022a6:	bf00      	nop
  4022a8:	004021d1 	.word	0x004021d1

004022ac <crc8_add>:
	return OWTouchReset(idx);
}

/* Polynomial ^8 + ^5 + ^4 + 1 */
unsigned char crc8_add(unsigned char acc, unsigned char byte)
{
  4022ac:	b480      	push	{r7}
  4022ae:	b085      	sub	sp, #20
  4022b0:	af00      	add	r7, sp, #0
  4022b2:	4603      	mov	r3, r0
  4022b4:	460a      	mov	r2, r1
  4022b6:	71fb      	strb	r3, [r7, #7]
  4022b8:	4613      	mov	r3, r2
  4022ba:	71bb      	strb	r3, [r7, #6]
   int i;
   acc ^= byte;
  4022bc:	79fa      	ldrb	r2, [r7, #7]
  4022be:	79bb      	ldrb	r3, [r7, #6]
  4022c0:	4053      	eors	r3, r2
  4022c2:	71fb      	strb	r3, [r7, #7]
   for(i = 0; i < 8; i++) 
  4022c4:	2300      	movs	r3, #0
  4022c6:	60fb      	str	r3, [r7, #12]
  4022c8:	e012      	b.n	4022f0 <crc8_add+0x44>
   {
		if(acc & 1) 
  4022ca:	79fb      	ldrb	r3, [r7, #7]
  4022cc:	f003 0301 	and.w	r3, r3, #1
  4022d0:	2b00      	cmp	r3, #0
  4022d2:	d007      	beq.n	4022e4 <crc8_add+0x38>
		{
			acc = (acc >> 1) ^ 0x8c;
  4022d4:	79fb      	ldrb	r3, [r7, #7]
  4022d6:	085b      	lsrs	r3, r3, #1
  4022d8:	b2da      	uxtb	r2, r3
  4022da:	f06f 0373 	mvn.w	r3, #115	; 0x73
  4022de:	4053      	eors	r3, r2
  4022e0:	71fb      	strb	r3, [r7, #7]
  4022e2:	e002      	b.n	4022ea <crc8_add+0x3e>
		} 
		else 
		{
			acc >>= 1;
  4022e4:	79fb      	ldrb	r3, [r7, #7]
  4022e6:	085b      	lsrs	r3, r3, #1
  4022e8:	71fb      	strb	r3, [r7, #7]
/* Polynomial ^8 + ^5 + ^4 + 1 */
unsigned char crc8_add(unsigned char acc, unsigned char byte)
{
   int i;
   acc ^= byte;
   for(i = 0; i < 8; i++) 
  4022ea:	68fb      	ldr	r3, [r7, #12]
  4022ec:	3301      	adds	r3, #1
  4022ee:	60fb      	str	r3, [r7, #12]
  4022f0:	68fb      	ldr	r3, [r7, #12]
  4022f2:	2b07      	cmp	r3, #7
  4022f4:	dde9      	ble.n	4022ca <crc8_add+0x1e>
		else 
		{
			acc >>= 1;
	    }
   }
   return acc;
  4022f6:	79fb      	ldrb	r3, [r7, #7]
}
  4022f8:	4618      	mov	r0, r3
  4022fa:	3714      	adds	r7, #20
  4022fc:	46bd      	mov	sp, r7
  4022fe:	f85d 7b04 	ldr.w	r7, [sp], #4
  402302:	4770      	bx	lr

00402304 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  402304:	b480      	push	{r7}
  402306:	b083      	sub	sp, #12
  402308:	af00      	add	r7, sp, #0
  40230a:	4603      	mov	r3, r0
  40230c:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  40230e:	4908      	ldr	r1, [pc, #32]	; (402330 <NVIC_EnableIRQ+0x2c>)
  402310:	f997 3007 	ldrsb.w	r3, [r7, #7]
  402314:	095b      	lsrs	r3, r3, #5
  402316:	79fa      	ldrb	r2, [r7, #7]
  402318:	f002 021f 	and.w	r2, r2, #31
  40231c:	2001      	movs	r0, #1
  40231e:	fa00 f202 	lsl.w	r2, r0, r2
  402322:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  402326:	370c      	adds	r7, #12
  402328:	46bd      	mov	sp, r7
  40232a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40232e:	4770      	bx	lr
  402330:	e000e100 	.word	0xe000e100

00402334 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  402334:	b480      	push	{r7}
  402336:	b083      	sub	sp, #12
  402338:	af00      	add	r7, sp, #0
  40233a:	4603      	mov	r3, r0
  40233c:	6039      	str	r1, [r7, #0]
  40233e:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
  402340:	f997 3007 	ldrsb.w	r3, [r7, #7]
  402344:	2b00      	cmp	r3, #0
  402346:	da0b      	bge.n	402360 <NVIC_SetPriority+0x2c>
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  402348:	490d      	ldr	r1, [pc, #52]	; (402380 <NVIC_SetPriority+0x4c>)
  40234a:	79fb      	ldrb	r3, [r7, #7]
  40234c:	f003 030f 	and.w	r3, r3, #15
  402350:	3b04      	subs	r3, #4
  402352:	683a      	ldr	r2, [r7, #0]
  402354:	b2d2      	uxtb	r2, r2
  402356:	0152      	lsls	r2, r2, #5
  402358:	b2d2      	uxtb	r2, r2
  40235a:	440b      	add	r3, r1
  40235c:	761a      	strb	r2, [r3, #24]
  40235e:	e009      	b.n	402374 <NVIC_SetPriority+0x40>
  else {
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  402360:	4908      	ldr	r1, [pc, #32]	; (402384 <NVIC_SetPriority+0x50>)
  402362:	f997 3007 	ldrsb.w	r3, [r7, #7]
  402366:	683a      	ldr	r2, [r7, #0]
  402368:	b2d2      	uxtb	r2, r2
  40236a:	0152      	lsls	r2, r2, #5
  40236c:	b2d2      	uxtb	r2, r2
  40236e:	440b      	add	r3, r1
  402370:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
  402374:	370c      	adds	r7, #12
  402376:	46bd      	mov	sp, r7
  402378:	f85d 7b04 	ldr.w	r7, [sp], #4
  40237c:	4770      	bx	lr
  40237e:	bf00      	nop
  402380:	e000ed00 	.word	0xe000ed00
  402384:	e000e100 	.word	0xe000e100

00402388 <SysTick_Config>:
    function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  402388:	b580      	push	{r7, lr}
  40238a:	b082      	sub	sp, #8
  40238c:	af00      	add	r7, sp, #0
  40238e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
  402390:	687b      	ldr	r3, [r7, #4]
  402392:	3b01      	subs	r3, #1
  402394:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
  402398:	d301      	bcc.n	40239e <SysTick_Config+0x16>
  40239a:	2301      	movs	r3, #1
  40239c:	e00f      	b.n	4023be <SysTick_Config+0x36>

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
  40239e:	4a0a      	ldr	r2, [pc, #40]	; (4023c8 <SysTick_Config+0x40>)
  4023a0:	687b      	ldr	r3, [r7, #4]
  4023a2:	3b01      	subs	r3, #1
  4023a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  4023a6:	f04f 30ff 	mov.w	r0, #4294967295
  4023aa:	2107      	movs	r1, #7
  4023ac:	4b07      	ldr	r3, [pc, #28]	; (4023cc <SysTick_Config+0x44>)
  4023ae:	4798      	blx	r3
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
  4023b0:	4b05      	ldr	r3, [pc, #20]	; (4023c8 <SysTick_Config+0x40>)
  4023b2:	2200      	movs	r2, #0
  4023b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
  4023b6:	4b04      	ldr	r3, [pc, #16]	; (4023c8 <SysTick_Config+0x40>)
  4023b8:	2207      	movs	r2, #7
  4023ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
  4023bc:	2300      	movs	r3, #0
}
  4023be:	4618      	mov	r0, r3
  4023c0:	3708      	adds	r7, #8
  4023c2:	46bd      	mov	sp, r7
  4023c4:	bd80      	pop	{r7, pc}
  4023c6:	bf00      	nop
  4023c8:	e000e010 	.word	0xe000e010
  4023cc:	00402335 	.word	0x00402335

004023d0 <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  4023d0:	b480      	push	{r7}
  4023d2:	b083      	sub	sp, #12
  4023d4:	af00      	add	r7, sp, #0
  4023d6:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  4023d8:	687b      	ldr	r3, [r7, #4]
  4023da:	2b07      	cmp	r3, #7
  4023dc:	d825      	bhi.n	40242a <osc_get_rate+0x5a>
  4023de:	a201      	add	r2, pc, #4	; (adr r2, 4023e4 <osc_get_rate+0x14>)
  4023e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4023e4:	00402405 	.word	0x00402405
  4023e8:	0040240b 	.word	0x0040240b
  4023ec:	00402411 	.word	0x00402411
  4023f0:	00402417 	.word	0x00402417
  4023f4:	0040241b 	.word	0x0040241b
  4023f8:	0040241f 	.word	0x0040241f
  4023fc:	00402423 	.word	0x00402423
  402400:	00402427 	.word	0x00402427
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  402404:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  402408:	e010      	b.n	40242c <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  40240a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  40240e:	e00d      	b.n	40242c <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  402410:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  402414:	e00a      	b.n	40242c <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  402416:	4b08      	ldr	r3, [pc, #32]	; (402438 <osc_get_rate+0x68>)
  402418:	e008      	b.n	40242c <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  40241a:	4b08      	ldr	r3, [pc, #32]	; (40243c <osc_get_rate+0x6c>)
  40241c:	e006      	b.n	40242c <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  40241e:	4b08      	ldr	r3, [pc, #32]	; (402440 <osc_get_rate+0x70>)
  402420:	e004      	b.n	40242c <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  402422:	4b08      	ldr	r3, [pc, #32]	; (402444 <osc_get_rate+0x74>)
  402424:	e002      	b.n	40242c <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  402426:	4b06      	ldr	r3, [pc, #24]	; (402440 <osc_get_rate+0x70>)
  402428:	e000      	b.n	40242c <osc_get_rate+0x5c>
	}

	return 0;
  40242a:	2300      	movs	r3, #0
}
  40242c:	4618      	mov	r0, r3
  40242e:	370c      	adds	r7, #12
  402430:	46bd      	mov	sp, r7
  402432:	f85d 7b04 	ldr.w	r7, [sp], #4
  402436:	4770      	bx	lr
  402438:	003d0900 	.word	0x003d0900
  40243c:	007a1200 	.word	0x007a1200
  402440:	00b71b00 	.word	0x00b71b00
  402444:	00f42400 	.word	0x00f42400

00402448 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  402448:	b580      	push	{r7, lr}
  40244a:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  40244c:	2006      	movs	r0, #6
  40244e:	4b05      	ldr	r3, [pc, #20]	; (402464 <sysclk_get_main_hz+0x1c>)
  402450:	4798      	blx	r3
  402452:	4602      	mov	r2, r0
  402454:	4613      	mov	r3, r2
  402456:	009b      	lsls	r3, r3, #2
  402458:	4413      	add	r3, r2
  40245a:	009a      	lsls	r2, r3, #2
  40245c:	4413      	add	r3, r2
  40245e:	089b      	lsrs	r3, r3, #2
#endif
	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  402460:	4618      	mov	r0, r3
  402462:	bd80      	pop	{r7, pc}
  402464:	004023d1 	.word	0x004023d1

00402468 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
  402468:	b580      	push	{r7, lr}
  40246a:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  40246c:	4b02      	ldr	r3, [pc, #8]	; (402478 <sysclk_get_cpu_hz+0x10>)
  40246e:	4798      	blx	r3
  402470:	4603      	mov	r3, r0
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  402472:	4618      	mov	r0, r3
  402474:	bd80      	pop	{r7, pc}
  402476:	bf00      	nop
  402478:	00402449 	.word	0x00402449

0040247c <sysclk_get_peripheral_hz>:
 * \brief Retrieves the current rate in Hz of the peripheral clocks.
 *
 * \return Frequency of the peripheral clocks, in Hz.
 */
static inline uint32_t sysclk_get_peripheral_hz(void)
{
  40247c:	b580      	push	{r7, lr}
  40247e:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  402480:	4b02      	ldr	r3, [pc, #8]	; (40248c <sysclk_get_peripheral_hz+0x10>)
  402482:	4798      	blx	r3
  402484:	4603      	mov	r3, r0
		(((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 : (1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos))) * CONFIG_SYSCLK_DIV);
}
  402486:	4618      	mov	r0, r3
  402488:	bd80      	pop	{r7, pc}
  40248a:	bf00      	nop
  40248c:	00402449 	.word	0x00402449

00402490 <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
  402490:	b580      	push	{r7, lr}
  402492:	b082      	sub	sp, #8
  402494:	af00      	add	r7, sp, #0
  402496:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  402498:	6878      	ldr	r0, [r7, #4]
  40249a:	4b02      	ldr	r3, [pc, #8]	; (4024a4 <sysclk_enable_peripheral_clock+0x14>)
  40249c:	4798      	blx	r3
}
  40249e:	3708      	adds	r7, #8
  4024a0:	46bd      	mov	sp, r7
  4024a2:	bd80      	pop	{r7, pc}
  4024a4:	00400f39 	.word	0x00400f39

004024a8 <ioport_set_pin_dir>:
 * \param pin IOPORT pin to configure
 * \param dir Direction to set for the specified pin (\ref ioport_direction)
 */
static inline void ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
  4024a8:	b480      	push	{r7}
  4024aa:	b08d      	sub	sp, #52	; 0x34
  4024ac:	af00      	add	r7, sp, #0
  4024ae:	6078      	str	r0, [r7, #4]
  4024b0:	460b      	mov	r3, r1
  4024b2:	70fb      	strb	r3, [r7, #3]
  4024b4:	687b      	ldr	r3, [r7, #4]
  4024b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  4024b8:	78fb      	ldrb	r3, [r7, #3]
  4024ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  4024be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4024c0:	627b      	str	r3, [r7, #36]	; 0x24
  4024c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4024c4:	623b      	str	r3, [r7, #32]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  4024c6:	6a3b      	ldr	r3, [r7, #32]
  4024c8:	095b      	lsrs	r3, r3, #5
  4024ca:	61fb      	str	r3, [r7, #28]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  4024cc:	69fa      	ldr	r2, [r7, #28]
  4024ce:	4b17      	ldr	r3, [pc, #92]	; (40252c <ioport_set_pin_dir+0x84>)
  4024d0:	4413      	add	r3, r2
  4024d2:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);
  4024d4:	61bb      	str	r3, [r7, #24]

	if (dir == IOPORT_DIR_OUTPUT) {
  4024d6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  4024da:	2b01      	cmp	r3, #1
  4024dc:	d109      	bne.n	4024f2 <ioport_set_pin_dir+0x4a>
  4024de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4024e0:	617b      	str	r3, [r7, #20]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  4024e2:	697b      	ldr	r3, [r7, #20]
  4024e4:	f003 031f 	and.w	r3, r3, #31
  4024e8:	2201      	movs	r2, #1
  4024ea:	409a      	lsls	r2, r3
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4024ec:	69bb      	ldr	r3, [r7, #24]
  4024ee:	611a      	str	r2, [r3, #16]
  4024f0:	e00c      	b.n	40250c <ioport_set_pin_dir+0x64>
	} else if (dir == IOPORT_DIR_INPUT) {
  4024f2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  4024f6:	2b00      	cmp	r3, #0
  4024f8:	d108      	bne.n	40250c <ioport_set_pin_dir+0x64>
  4024fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4024fc:	613b      	str	r3, [r7, #16]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  4024fe:	693b      	ldr	r3, [r7, #16]
  402500:	f003 031f 	and.w	r3, r3, #31
  402504:	2201      	movs	r2, #1
  402506:	409a      	lsls	r2, r3
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  402508:	69bb      	ldr	r3, [r7, #24]
  40250a:	615a      	str	r2, [r3, #20]
  40250c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  40250e:	60fb      	str	r3, [r7, #12]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  402510:	68fb      	ldr	r3, [r7, #12]
  402512:	f003 031f 	and.w	r3, r3, #31
  402516:	2201      	movs	r2, #1
  402518:	409a      	lsls	r2, r3
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40251a:	69bb      	ldr	r3, [r7, #24]
  40251c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	arch_ioport_set_pin_dir(pin, dir);
}
  402520:	3734      	adds	r7, #52	; 0x34
  402522:	46bd      	mov	sp, r7
  402524:	f85d 7b04 	ldr.w	r7, [sp], #4
  402528:	4770      	bx	lr
  40252a:	bf00      	nop
  40252c:	00200707 	.word	0x00200707

00402530 <ioport_set_pin_level>:
 *
 * \param pin IOPORT pin to configure
 * \param level Logical value of the pin
 */
static inline void ioport_set_pin_level(ioport_pin_t pin, bool level)
{
  402530:	b480      	push	{r7}
  402532:	b08b      	sub	sp, #44	; 0x2c
  402534:	af00      	add	r7, sp, #0
  402536:	6078      	str	r0, [r7, #4]
  402538:	460b      	mov	r3, r1
  40253a:	70fb      	strb	r3, [r7, #3]
  40253c:	687b      	ldr	r3, [r7, #4]
  40253e:	627b      	str	r3, [r7, #36]	; 0x24
  402540:	78fb      	ldrb	r3, [r7, #3]
  402542:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  402546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  402548:	61fb      	str	r3, [r7, #28]
  40254a:	69fb      	ldr	r3, [r7, #28]
  40254c:	61bb      	str	r3, [r7, #24]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  40254e:	69bb      	ldr	r3, [r7, #24]
  402550:	095b      	lsrs	r3, r3, #5
  402552:	617b      	str	r3, [r7, #20]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  402554:	697a      	ldr	r2, [r7, #20]
  402556:	4b10      	ldr	r3, [pc, #64]	; (402598 <ioport_set_pin_level+0x68>)
  402558:	4413      	add	r3, r2
  40255a:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);
  40255c:	613b      	str	r3, [r7, #16]

	if (level) {
  40255e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
  402562:	2b00      	cmp	r3, #0
  402564:	d009      	beq.n	40257a <ioport_set_pin_level+0x4a>
  402566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  402568:	60fb      	str	r3, [r7, #12]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  40256a:	68fb      	ldr	r3, [r7, #12]
  40256c:	f003 031f 	and.w	r3, r3, #31
  402570:	2201      	movs	r2, #1
  402572:	409a      	lsls	r2, r3
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  402574:	693b      	ldr	r3, [r7, #16]
  402576:	631a      	str	r2, [r3, #48]	; 0x30
  402578:	e008      	b.n	40258c <ioport_set_pin_level+0x5c>
  40257a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40257c:	60bb      	str	r3, [r7, #8]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  40257e:	68bb      	ldr	r3, [r7, #8]
  402580:	f003 031f 	and.w	r3, r3, #31
  402584:	2201      	movs	r2, #1
  402586:	409a      	lsls	r2, r3
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  402588:	693b      	ldr	r3, [r7, #16]
  40258a:	635a      	str	r2, [r3, #52]	; 0x34
	arch_ioport_set_pin_level(pin, level);
}
  40258c:	372c      	adds	r7, #44	; 0x2c
  40258e:	46bd      	mov	sp, r7
  402590:	f85d 7b04 	ldr.w	r7, [sp], #4
  402594:	4770      	bx	lr
  402596:	bf00      	nop
  402598:	00200707 	.word	0x00200707

0040259c <ioport_toggle_pin_level>:
 * an output.
 *
 * \param pin IOPORT pin to toggle
 */
static inline void ioport_toggle_pin_level(ioport_pin_t pin)
{
  40259c:	b480      	push	{r7}
  40259e:	b08b      	sub	sp, #44	; 0x2c
  4025a0:	af00      	add	r7, sp, #0
  4025a2:	6078      	str	r0, [r7, #4]
  4025a4:	687b      	ldr	r3, [r7, #4]
  4025a6:	627b      	str	r3, [r7, #36]	; 0x24
  4025a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4025aa:	623b      	str	r3, [r7, #32]
  4025ac:	6a3b      	ldr	r3, [r7, #32]
  4025ae:	61fb      	str	r3, [r7, #28]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  4025b0:	69fb      	ldr	r3, [r7, #28]
  4025b2:	095b      	lsrs	r3, r3, #5
  4025b4:	61bb      	str	r3, [r7, #24]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  4025b6:	69ba      	ldr	r2, [r7, #24]
  4025b8:	4b12      	ldr	r3, [pc, #72]	; (402604 <ioport_toggle_pin_level+0x68>)
  4025ba:	4413      	add	r3, r2
  4025bc:	025b      	lsls	r3, r3, #9
	return arch_ioport_port_to_base(port)->PIO_PDSR & mask;
}

__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	Pio *port = arch_ioport_pin_to_base(pin);
  4025be:	617b      	str	r3, [r7, #20]
  4025c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4025c2:	613b      	str	r3, [r7, #16]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  4025c4:	693b      	ldr	r3, [r7, #16]
  4025c6:	f003 031f 	and.w	r3, r3, #31
  4025ca:	2201      	movs	r2, #1
  4025cc:	fa02 f303 	lsl.w	r3, r2, r3
}

__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	Pio *port = arch_ioport_pin_to_base(pin);
	ioport_port_mask_t mask = arch_ioport_pin_to_mask(pin);
  4025d0:	60fb      	str	r3, [r7, #12]

	if (port->PIO_PDSR & arch_ioport_pin_to_mask(pin)) {
  4025d2:	697b      	ldr	r3, [r7, #20]
  4025d4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
  4025d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4025d8:	60bb      	str	r3, [r7, #8]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  4025da:	68bb      	ldr	r3, [r7, #8]
  4025dc:	f003 031f 	and.w	r3, r3, #31
  4025e0:	2101      	movs	r1, #1
  4025e2:	fa01 f303 	lsl.w	r3, r1, r3
__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	Pio *port = arch_ioport_pin_to_base(pin);
	ioport_port_mask_t mask = arch_ioport_pin_to_mask(pin);

	if (port->PIO_PDSR & arch_ioport_pin_to_mask(pin)) {
  4025e6:	4013      	ands	r3, r2
  4025e8:	2b00      	cmp	r3, #0
  4025ea:	d003      	beq.n	4025f4 <ioport_toggle_pin_level+0x58>
		port->PIO_CODR = mask;
  4025ec:	697b      	ldr	r3, [r7, #20]
  4025ee:	68fa      	ldr	r2, [r7, #12]
  4025f0:	635a      	str	r2, [r3, #52]	; 0x34
  4025f2:	e002      	b.n	4025fa <ioport_toggle_pin_level+0x5e>
	} else {
		port->PIO_SODR = mask;
  4025f4:	697b      	ldr	r3, [r7, #20]
  4025f6:	68fa      	ldr	r2, [r7, #12]
  4025f8:	631a      	str	r2, [r3, #48]	; 0x30
	arch_ioport_toggle_pin_level(pin);
}
  4025fa:	372c      	adds	r7, #44	; 0x2c
  4025fc:	46bd      	mov	sp, r7
  4025fe:	f85d 7b04 	ldr.w	r7, [sp], #4
  402602:	4770      	bx	lr
  402604:	00200707 	.word	0x00200707

00402608 <usart_serial_init>:
 * \param opt      Options needed to set up RS232 communication (see
 * \ref usart_options_t).
 */
static inline void usart_serial_init(usart_if p_usart,
		usart_serial_options_t *opt)
{
  402608:	b580      	push	{r7, lr}
  40260a:	b08c      	sub	sp, #48	; 0x30
  40260c:	af00      	add	r7, sp, #0
  40260e:	6078      	str	r0, [r7, #4]
  402610:	6039      	str	r1, [r7, #0]
#if ((!SAM4L) && (!SAMG55))
	sam_uart_opt_t uart_settings;
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
  402612:	4b48      	ldr	r3, [pc, #288]	; (402734 <usart_serial_init+0x12c>)
  402614:	4798      	blx	r3
  402616:	4603      	mov	r3, r0
  402618:	627b      	str	r3, [r7, #36]	; 0x24
	uart_settings.ul_baudrate = opt->baudrate;
  40261a:	683b      	ldr	r3, [r7, #0]
  40261c:	681b      	ldr	r3, [r3, #0]
  40261e:	62bb      	str	r3, [r7, #40]	; 0x28
	uart_settings.ul_mode = opt->paritytype;
  402620:	683b      	ldr	r3, [r7, #0]
  402622:	689b      	ldr	r3, [r3, #8]
  402624:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif

	sam_usart_opt_t usart_settings;
	usart_settings.baudrate = opt->baudrate;
  402626:	683b      	ldr	r3, [r7, #0]
  402628:	681b      	ldr	r3, [r3, #0]
  40262a:	60fb      	str	r3, [r7, #12]
	usart_settings.char_length = opt->charlength;
  40262c:	683b      	ldr	r3, [r7, #0]
  40262e:	685b      	ldr	r3, [r3, #4]
  402630:	613b      	str	r3, [r7, #16]
	usart_settings.parity_type = opt->paritytype;
  402632:	683b      	ldr	r3, [r7, #0]
  402634:	689b      	ldr	r3, [r3, #8]
  402636:	617b      	str	r3, [r7, #20]
	usart_settings.stop_bits= opt->stopbits;
  402638:	683b      	ldr	r3, [r7, #0]
  40263a:	68db      	ldr	r3, [r3, #12]
  40263c:	61bb      	str	r3, [r7, #24]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
  40263e:	2300      	movs	r3, #0
  402640:	61fb      	str	r3, [r7, #28]
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  402642:	687b      	ldr	r3, [r7, #4]
  402644:	4a3c      	ldr	r2, [pc, #240]	; (402738 <usart_serial_init+0x130>)
  402646:	4293      	cmp	r3, r2
  402648:	d108      	bne.n	40265c <usart_serial_init+0x54>
		sysclk_enable_peripheral_clock(ID_UART0);
  40264a:	2007      	movs	r0, #7
  40264c:	4b3b      	ldr	r3, [pc, #236]	; (40273c <usart_serial_init+0x134>)
  40264e:	4798      	blx	r3
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
  402650:	f107 0324 	add.w	r3, r7, #36	; 0x24
  402654:	6878      	ldr	r0, [r7, #4]
  402656:	4619      	mov	r1, r3
  402658:	4b39      	ldr	r3, [pc, #228]	; (402740 <usart_serial_init+0x138>)
  40265a:	4798      	blx	r3
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  40265c:	687b      	ldr	r3, [r7, #4]
  40265e:	4a39      	ldr	r2, [pc, #228]	; (402744 <usart_serial_init+0x13c>)
  402660:	4293      	cmp	r3, r2
  402662:	d108      	bne.n	402676 <usart_serial_init+0x6e>
		sysclk_enable_peripheral_clock(ID_UART1);
  402664:	2008      	movs	r0, #8
  402666:	4b35      	ldr	r3, [pc, #212]	; (40273c <usart_serial_init+0x134>)
  402668:	4798      	blx	r3
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
  40266a:	f107 0324 	add.w	r3, r7, #36	; 0x24
  40266e:	6878      	ldr	r0, [r7, #4]
  402670:	4619      	mov	r1, r3
  402672:	4b33      	ldr	r3, [pc, #204]	; (402740 <usart_serial_init+0x138>)
  402674:	4798      	blx	r3
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  402676:	687b      	ldr	r3, [r7, #4]
  402678:	4a33      	ldr	r2, [pc, #204]	; (402748 <usart_serial_init+0x140>)
  40267a:	4293      	cmp	r3, r2
  40267c:	d108      	bne.n	402690 <usart_serial_init+0x88>
		sysclk_enable_peripheral_clock(ID_UART2);
  40267e:	202c      	movs	r0, #44	; 0x2c
  402680:	4b2e      	ldr	r3, [pc, #184]	; (40273c <usart_serial_init+0x134>)
  402682:	4798      	blx	r3
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
  402684:	f107 0324 	add.w	r3, r7, #36	; 0x24
  402688:	6878      	ldr	r0, [r7, #4]
  40268a:	4619      	mov	r1, r3
  40268c:	4b2c      	ldr	r3, [pc, #176]	; (402740 <usart_serial_init+0x138>)
  40268e:	4798      	blx	r3
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  402690:	687b      	ldr	r3, [r7, #4]
  402692:	4a2e      	ldr	r2, [pc, #184]	; (40274c <usart_serial_init+0x144>)
  402694:	4293      	cmp	r3, r2
  402696:	d108      	bne.n	4026aa <usart_serial_init+0xa2>
		sysclk_enable_peripheral_clock(ID_UART3);
  402698:	202d      	movs	r0, #45	; 0x2d
  40269a:	4b28      	ldr	r3, [pc, #160]	; (40273c <usart_serial_init+0x134>)
  40269c:	4798      	blx	r3
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
  40269e:	f107 0324 	add.w	r3, r7, #36	; 0x24
  4026a2:	6878      	ldr	r0, [r7, #4]
  4026a4:	4619      	mov	r1, r3
  4026a6:	4b26      	ldr	r3, [pc, #152]	; (402740 <usart_serial_init+0x138>)
  4026a8:	4798      	blx	r3
		usart_enable_tx(p_usart);
		usart_enable_rx(p_usart);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  4026aa:	687b      	ldr	r3, [r7, #4]
  4026ac:	4a28      	ldr	r2, [pc, #160]	; (402750 <usart_serial_init+0x148>)
  4026ae:	4293      	cmp	r3, r2
  4026b0:	d111      	bne.n	4026d6 <usart_serial_init+0xce>
#if (!SAM4L)
#if (SAMG55)
		flexcom_enable(FLEXCOM0);
		flexcom_set_opmode(FLEXCOM0, FLEXCOM_USART);
#else
		sysclk_enable_peripheral_clock(ID_USART0);
  4026b2:	200d      	movs	r0, #13
  4026b4:	4b21      	ldr	r3, [pc, #132]	; (40273c <usart_serial_init+0x134>)
  4026b6:	4798      	blx	r3
#endif
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
  4026b8:	4b1e      	ldr	r3, [pc, #120]	; (402734 <usart_serial_init+0x12c>)
  4026ba:	4798      	blx	r3
  4026bc:	4602      	mov	r2, r0
  4026be:	f107 030c 	add.w	r3, r7, #12
  4026c2:	6878      	ldr	r0, [r7, #4]
  4026c4:	4619      	mov	r1, r3
  4026c6:	4b23      	ldr	r3, [pc, #140]	; (402754 <usart_serial_init+0x14c>)
  4026c8:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
  4026ca:	6878      	ldr	r0, [r7, #4]
  4026cc:	4b22      	ldr	r3, [pc, #136]	; (402758 <usart_serial_init+0x150>)
  4026ce:	4798      	blx	r3
		usart_enable_rx(p_usart);
  4026d0:	6878      	ldr	r0, [r7, #4]
  4026d2:	4b22      	ldr	r3, [pc, #136]	; (40275c <usart_serial_init+0x154>)
  4026d4:	4798      	blx	r3
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  4026d6:	687b      	ldr	r3, [r7, #4]
  4026d8:	4a21      	ldr	r2, [pc, #132]	; (402760 <usart_serial_init+0x158>)
  4026da:	4293      	cmp	r3, r2
  4026dc:	d111      	bne.n	402702 <usart_serial_init+0xfa>
#if (!SAM4L)
#if (SAMG55)
		flexcom_enable(FLEXCOM1);
		flexcom_set_opmode(FLEXCOM1, FLEXCOM_USART);
#else
		sysclk_enable_peripheral_clock(ID_USART1);
  4026de:	200e      	movs	r0, #14
  4026e0:	4b16      	ldr	r3, [pc, #88]	; (40273c <usart_serial_init+0x134>)
  4026e2:	4798      	blx	r3
#endif
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
  4026e4:	4b13      	ldr	r3, [pc, #76]	; (402734 <usart_serial_init+0x12c>)
  4026e6:	4798      	blx	r3
  4026e8:	4602      	mov	r2, r0
  4026ea:	f107 030c 	add.w	r3, r7, #12
  4026ee:	6878      	ldr	r0, [r7, #4]
  4026f0:	4619      	mov	r1, r3
  4026f2:	4b18      	ldr	r3, [pc, #96]	; (402754 <usart_serial_init+0x14c>)
  4026f4:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
  4026f6:	6878      	ldr	r0, [r7, #4]
  4026f8:	4b17      	ldr	r3, [pc, #92]	; (402758 <usart_serial_init+0x150>)
  4026fa:	4798      	blx	r3
		usart_enable_rx(p_usart);
  4026fc:	6878      	ldr	r0, [r7, #4]
  4026fe:	4b17      	ldr	r3, [pc, #92]	; (40275c <usart_serial_init+0x154>)
  402700:	4798      	blx	r3
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  402702:	687b      	ldr	r3, [r7, #4]
  402704:	4a17      	ldr	r2, [pc, #92]	; (402764 <usart_serial_init+0x15c>)
  402706:	4293      	cmp	r3, r2
  402708:	d111      	bne.n	40272e <usart_serial_init+0x126>
#if (!SAM4L)
#if (SAMG55)
		flexcom_enable(FLEXCOM2);
		flexcom_set_opmode(FLEXCOM2, FLEXCOM_USART);
#else
		sysclk_enable_peripheral_clock(ID_USART2);
  40270a:	200f      	movs	r0, #15
  40270c:	4b0b      	ldr	r3, [pc, #44]	; (40273c <usart_serial_init+0x134>)
  40270e:	4798      	blx	r3
#endif
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
  402710:	4b08      	ldr	r3, [pc, #32]	; (402734 <usart_serial_init+0x12c>)
  402712:	4798      	blx	r3
  402714:	4602      	mov	r2, r0
  402716:	f107 030c 	add.w	r3, r7, #12
  40271a:	6878      	ldr	r0, [r7, #4]
  40271c:	4619      	mov	r1, r3
  40271e:	4b0d      	ldr	r3, [pc, #52]	; (402754 <usart_serial_init+0x14c>)
  402720:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
  402722:	6878      	ldr	r0, [r7, #4]
  402724:	4b0c      	ldr	r3, [pc, #48]	; (402758 <usart_serial_init+0x150>)
  402726:	4798      	blx	r3
		usart_enable_rx(p_usart);
  402728:	6878      	ldr	r0, [r7, #4]
  40272a:	4b0c      	ldr	r3, [pc, #48]	; (40275c <usart_serial_init+0x154>)
  40272c:	4798      	blx	r3
	}
# endif

#endif /* ifdef USART */

}
  40272e:	3730      	adds	r7, #48	; 0x30
  402730:	46bd      	mov	sp, r7
  402732:	bd80      	pop	{r7, pc}
  402734:	0040247d 	.word	0x0040247d
  402738:	400e0800 	.word	0x400e0800
  40273c:	00402491 	.word	0x00402491
  402740:	004012e5 	.word	0x004012e5
  402744:	400e0a00 	.word	0x400e0a00
  402748:	400e1a00 	.word	0x400e1a00
  40274c:	400e1c00 	.word	0x400e1c00
  402750:	40024000 	.word	0x40024000
  402754:	00401481 	.word	0x00401481
  402758:	00401505 	.word	0x00401505
  40275c:	00401551 	.word	0x00401551
  402760:	40028000 	.word	0x40028000
  402764:	4002c000 	.word	0x4002c000

00402768 <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
  402768:	b580      	push	{r7, lr}
  40276a:	b082      	sub	sp, #8
  40276c:	af00      	add	r7, sp, #0
  40276e:	6078      	str	r0, [r7, #4]
  402770:	460b      	mov	r3, r1
  402772:	70fb      	strb	r3, [r7, #3]
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  402774:	687b      	ldr	r3, [r7, #4]
  402776:	4a36      	ldr	r2, [pc, #216]	; (402850 <usart_serial_putchar+0xe8>)
  402778:	4293      	cmp	r3, r2
  40277a:	d10a      	bne.n	402792 <usart_serial_putchar+0x2a>
		while (uart_write((Uart*)p_usart, c)!=0);
  40277c:	bf00      	nop
  40277e:	78fb      	ldrb	r3, [r7, #3]
  402780:	6878      	ldr	r0, [r7, #4]
  402782:	4619      	mov	r1, r3
  402784:	4b33      	ldr	r3, [pc, #204]	; (402854 <usart_serial_putchar+0xec>)
  402786:	4798      	blx	r3
  402788:	4603      	mov	r3, r0
  40278a:	2b00      	cmp	r3, #0
  40278c:	d1f7      	bne.n	40277e <usart_serial_putchar+0x16>
		return 1;
  40278e:	2301      	movs	r3, #1
  402790:	e05a      	b.n	402848 <usart_serial_putchar+0xe0>
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  402792:	687b      	ldr	r3, [r7, #4]
  402794:	4a30      	ldr	r2, [pc, #192]	; (402858 <usart_serial_putchar+0xf0>)
  402796:	4293      	cmp	r3, r2
  402798:	d10a      	bne.n	4027b0 <usart_serial_putchar+0x48>
		while (uart_write((Uart*)p_usart, c)!=0);
  40279a:	bf00      	nop
  40279c:	78fb      	ldrb	r3, [r7, #3]
  40279e:	6878      	ldr	r0, [r7, #4]
  4027a0:	4619      	mov	r1, r3
  4027a2:	4b2c      	ldr	r3, [pc, #176]	; (402854 <usart_serial_putchar+0xec>)
  4027a4:	4798      	blx	r3
  4027a6:	4603      	mov	r3, r0
  4027a8:	2b00      	cmp	r3, #0
  4027aa:	d1f7      	bne.n	40279c <usart_serial_putchar+0x34>
		return 1;
  4027ac:	2301      	movs	r3, #1
  4027ae:	e04b      	b.n	402848 <usart_serial_putchar+0xe0>
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  4027b0:	687b      	ldr	r3, [r7, #4]
  4027b2:	4a2a      	ldr	r2, [pc, #168]	; (40285c <usart_serial_putchar+0xf4>)
  4027b4:	4293      	cmp	r3, r2
  4027b6:	d10a      	bne.n	4027ce <usart_serial_putchar+0x66>
		while (uart_write((Uart*)p_usart, c)!=0);
  4027b8:	bf00      	nop
  4027ba:	78fb      	ldrb	r3, [r7, #3]
  4027bc:	6878      	ldr	r0, [r7, #4]
  4027be:	4619      	mov	r1, r3
  4027c0:	4b24      	ldr	r3, [pc, #144]	; (402854 <usart_serial_putchar+0xec>)
  4027c2:	4798      	blx	r3
  4027c4:	4603      	mov	r3, r0
  4027c6:	2b00      	cmp	r3, #0
  4027c8:	d1f7      	bne.n	4027ba <usart_serial_putchar+0x52>
		return 1;
  4027ca:	2301      	movs	r3, #1
  4027cc:	e03c      	b.n	402848 <usart_serial_putchar+0xe0>
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  4027ce:	687b      	ldr	r3, [r7, #4]
  4027d0:	4a23      	ldr	r2, [pc, #140]	; (402860 <usart_serial_putchar+0xf8>)
  4027d2:	4293      	cmp	r3, r2
  4027d4:	d10a      	bne.n	4027ec <usart_serial_putchar+0x84>
		while (uart_write((Uart*)p_usart, c)!=0);
  4027d6:	bf00      	nop
  4027d8:	78fb      	ldrb	r3, [r7, #3]
  4027da:	6878      	ldr	r0, [r7, #4]
  4027dc:	4619      	mov	r1, r3
  4027de:	4b1d      	ldr	r3, [pc, #116]	; (402854 <usart_serial_putchar+0xec>)
  4027e0:	4798      	blx	r3
  4027e2:	4603      	mov	r3, r0
  4027e4:	2b00      	cmp	r3, #0
  4027e6:	d1f7      	bne.n	4027d8 <usart_serial_putchar+0x70>
		return 1;
  4027e8:	2301      	movs	r3, #1
  4027ea:	e02d      	b.n	402848 <usart_serial_putchar+0xe0>
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  4027ec:	687b      	ldr	r3, [r7, #4]
  4027ee:	4a1d      	ldr	r2, [pc, #116]	; (402864 <usart_serial_putchar+0xfc>)
  4027f0:	4293      	cmp	r3, r2
  4027f2:	d10a      	bne.n	40280a <usart_serial_putchar+0xa2>
		while (usart_write(p_usart, c)!=0);
  4027f4:	bf00      	nop
  4027f6:	78fb      	ldrb	r3, [r7, #3]
  4027f8:	6878      	ldr	r0, [r7, #4]
  4027fa:	4619      	mov	r1, r3
  4027fc:	4b1a      	ldr	r3, [pc, #104]	; (402868 <usart_serial_putchar+0x100>)
  4027fe:	4798      	blx	r3
  402800:	4603      	mov	r3, r0
  402802:	2b00      	cmp	r3, #0
  402804:	d1f7      	bne.n	4027f6 <usart_serial_putchar+0x8e>
		return 1;
  402806:	2301      	movs	r3, #1
  402808:	e01e      	b.n	402848 <usart_serial_putchar+0xe0>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  40280a:	687b      	ldr	r3, [r7, #4]
  40280c:	4a17      	ldr	r2, [pc, #92]	; (40286c <usart_serial_putchar+0x104>)
  40280e:	4293      	cmp	r3, r2
  402810:	d10a      	bne.n	402828 <usart_serial_putchar+0xc0>
		while (usart_write(p_usart, c)!=0);
  402812:	bf00      	nop
  402814:	78fb      	ldrb	r3, [r7, #3]
  402816:	6878      	ldr	r0, [r7, #4]
  402818:	4619      	mov	r1, r3
  40281a:	4b13      	ldr	r3, [pc, #76]	; (402868 <usart_serial_putchar+0x100>)
  40281c:	4798      	blx	r3
  40281e:	4603      	mov	r3, r0
  402820:	2b00      	cmp	r3, #0
  402822:	d1f7      	bne.n	402814 <usart_serial_putchar+0xac>
		return 1;
  402824:	2301      	movs	r3, #1
  402826:	e00f      	b.n	402848 <usart_serial_putchar+0xe0>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  402828:	687b      	ldr	r3, [r7, #4]
  40282a:	4a11      	ldr	r2, [pc, #68]	; (402870 <usart_serial_putchar+0x108>)
  40282c:	4293      	cmp	r3, r2
  40282e:	d10a      	bne.n	402846 <usart_serial_putchar+0xde>
		while (usart_write(p_usart, c)!=0);
  402830:	bf00      	nop
  402832:	78fb      	ldrb	r3, [r7, #3]
  402834:	6878      	ldr	r0, [r7, #4]
  402836:	4619      	mov	r1, r3
  402838:	4b0b      	ldr	r3, [pc, #44]	; (402868 <usart_serial_putchar+0x100>)
  40283a:	4798      	blx	r3
  40283c:	4603      	mov	r3, r0
  40283e:	2b00      	cmp	r3, #0
  402840:	d1f7      	bne.n	402832 <usart_serial_putchar+0xca>
		return 1;
  402842:	2301      	movs	r3, #1
  402844:	e000      	b.n	402848 <usart_serial_putchar+0xe0>
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
  402846:	2300      	movs	r3, #0
}
  402848:	4618      	mov	r0, r3
  40284a:	3708      	adds	r7, #8
  40284c:	46bd      	mov	sp, r7
  40284e:	bd80      	pop	{r7, pc}
  402850:	400e0800 	.word	0x400e0800
  402854:	0040133d 	.word	0x0040133d
  402858:	400e0a00 	.word	0x400e0a00
  40285c:	400e1a00 	.word	0x400e1a00
  402860:	400e1c00 	.word	0x400e1c00
  402864:	40024000 	.word	0x40024000
  402868:	00401659 	.word	0x00401659
  40286c:	40028000 	.word	0x40028000
  402870:	4002c000 	.word	0x4002c000

00402874 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  402874:	b580      	push	{r7, lr}
  402876:	b084      	sub	sp, #16
  402878:	af00      	add	r7, sp, #0
  40287a:	6078      	str	r0, [r7, #4]
  40287c:	6039      	str	r1, [r7, #0]
	uint32_t val = 0;
  40287e:	2300      	movs	r3, #0
  402880:	60fb      	str	r3, [r7, #12]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  402882:	687b      	ldr	r3, [r7, #4]
  402884:	4a33      	ldr	r2, [pc, #204]	; (402954 <usart_serial_getchar+0xe0>)
  402886:	4293      	cmp	r3, r2
  402888:	d107      	bne.n	40289a <usart_serial_getchar+0x26>
		while (uart_read((Uart*)p_usart, data));
  40288a:	bf00      	nop
  40288c:	6878      	ldr	r0, [r7, #4]
  40288e:	6839      	ldr	r1, [r7, #0]
  402890:	4b31      	ldr	r3, [pc, #196]	; (402958 <usart_serial_getchar+0xe4>)
  402892:	4798      	blx	r3
  402894:	4603      	mov	r3, r0
  402896:	2b00      	cmp	r3, #0
  402898:	d1f8      	bne.n	40288c <usart_serial_getchar+0x18>
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  40289a:	687b      	ldr	r3, [r7, #4]
  40289c:	4a2f      	ldr	r2, [pc, #188]	; (40295c <usart_serial_getchar+0xe8>)
  40289e:	4293      	cmp	r3, r2
  4028a0:	d107      	bne.n	4028b2 <usart_serial_getchar+0x3e>
		while (uart_read((Uart*)p_usart, data));
  4028a2:	bf00      	nop
  4028a4:	6878      	ldr	r0, [r7, #4]
  4028a6:	6839      	ldr	r1, [r7, #0]
  4028a8:	4b2b      	ldr	r3, [pc, #172]	; (402958 <usart_serial_getchar+0xe4>)
  4028aa:	4798      	blx	r3
  4028ac:	4603      	mov	r3, r0
  4028ae:	2b00      	cmp	r3, #0
  4028b0:	d1f8      	bne.n	4028a4 <usart_serial_getchar+0x30>
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  4028b2:	687b      	ldr	r3, [r7, #4]
  4028b4:	4a2a      	ldr	r2, [pc, #168]	; (402960 <usart_serial_getchar+0xec>)
  4028b6:	4293      	cmp	r3, r2
  4028b8:	d107      	bne.n	4028ca <usart_serial_getchar+0x56>
		while (uart_read((Uart*)p_usart, data));
  4028ba:	bf00      	nop
  4028bc:	6878      	ldr	r0, [r7, #4]
  4028be:	6839      	ldr	r1, [r7, #0]
  4028c0:	4b25      	ldr	r3, [pc, #148]	; (402958 <usart_serial_getchar+0xe4>)
  4028c2:	4798      	blx	r3
  4028c4:	4603      	mov	r3, r0
  4028c6:	2b00      	cmp	r3, #0
  4028c8:	d1f8      	bne.n	4028bc <usart_serial_getchar+0x48>
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  4028ca:	687b      	ldr	r3, [r7, #4]
  4028cc:	4a25      	ldr	r2, [pc, #148]	; (402964 <usart_serial_getchar+0xf0>)
  4028ce:	4293      	cmp	r3, r2
  4028d0:	d107      	bne.n	4028e2 <usart_serial_getchar+0x6e>
		while (uart_read((Uart*)p_usart, data));
  4028d2:	bf00      	nop
  4028d4:	6878      	ldr	r0, [r7, #4]
  4028d6:	6839      	ldr	r1, [r7, #0]
  4028d8:	4b1f      	ldr	r3, [pc, #124]	; (402958 <usart_serial_getchar+0xe4>)
  4028da:	4798      	blx	r3
  4028dc:	4603      	mov	r3, r0
  4028de:	2b00      	cmp	r3, #0
  4028e0:	d1f8      	bne.n	4028d4 <usart_serial_getchar+0x60>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  4028e2:	687b      	ldr	r3, [r7, #4]
  4028e4:	4a20      	ldr	r2, [pc, #128]	; (402968 <usart_serial_getchar+0xf4>)
  4028e6:	4293      	cmp	r3, r2
  4028e8:	d10d      	bne.n	402906 <usart_serial_getchar+0x92>
		while (usart_read(p_usart, &val));
  4028ea:	bf00      	nop
  4028ec:	f107 030c 	add.w	r3, r7, #12
  4028f0:	6878      	ldr	r0, [r7, #4]
  4028f2:	4619      	mov	r1, r3
  4028f4:	4b1d      	ldr	r3, [pc, #116]	; (40296c <usart_serial_getchar+0xf8>)
  4028f6:	4798      	blx	r3
  4028f8:	4603      	mov	r3, r0
  4028fa:	2b00      	cmp	r3, #0
  4028fc:	d1f6      	bne.n	4028ec <usart_serial_getchar+0x78>
		*data = (uint8_t)(val & 0xFF);
  4028fe:	68fb      	ldr	r3, [r7, #12]
  402900:	b2da      	uxtb	r2, r3
  402902:	683b      	ldr	r3, [r7, #0]
  402904:	701a      	strb	r2, [r3, #0]
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  402906:	687b      	ldr	r3, [r7, #4]
  402908:	4a19      	ldr	r2, [pc, #100]	; (402970 <usart_serial_getchar+0xfc>)
  40290a:	4293      	cmp	r3, r2
  40290c:	d10d      	bne.n	40292a <usart_serial_getchar+0xb6>
		while (usart_read(p_usart, &val));
  40290e:	bf00      	nop
  402910:	f107 030c 	add.w	r3, r7, #12
  402914:	6878      	ldr	r0, [r7, #4]
  402916:	4619      	mov	r1, r3
  402918:	4b14      	ldr	r3, [pc, #80]	; (40296c <usart_serial_getchar+0xf8>)
  40291a:	4798      	blx	r3
  40291c:	4603      	mov	r3, r0
  40291e:	2b00      	cmp	r3, #0
  402920:	d1f6      	bne.n	402910 <usart_serial_getchar+0x9c>
		*data = (uint8_t)(val & 0xFF);
  402922:	68fb      	ldr	r3, [r7, #12]
  402924:	b2da      	uxtb	r2, r3
  402926:	683b      	ldr	r3, [r7, #0]
  402928:	701a      	strb	r2, [r3, #0]
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  40292a:	687b      	ldr	r3, [r7, #4]
  40292c:	4a11      	ldr	r2, [pc, #68]	; (402974 <usart_serial_getchar+0x100>)
  40292e:	4293      	cmp	r3, r2
  402930:	d10d      	bne.n	40294e <usart_serial_getchar+0xda>
		while (usart_read(p_usart, &val));
  402932:	bf00      	nop
  402934:	f107 030c 	add.w	r3, r7, #12
  402938:	6878      	ldr	r0, [r7, #4]
  40293a:	4619      	mov	r1, r3
  40293c:	4b0b      	ldr	r3, [pc, #44]	; (40296c <usart_serial_getchar+0xf8>)
  40293e:	4798      	blx	r3
  402940:	4603      	mov	r3, r0
  402942:	2b00      	cmp	r3, #0
  402944:	d1f6      	bne.n	402934 <usart_serial_getchar+0xc0>
		*data = (uint8_t)(val & 0xFF);
  402946:	68fb      	ldr	r3, [r7, #12]
  402948:	b2da      	uxtb	r2, r3
  40294a:	683b      	ldr	r3, [r7, #0]
  40294c:	701a      	strb	r2, [r3, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  40294e:	3710      	adds	r7, #16
  402950:	46bd      	mov	sp, r7
  402952:	bd80      	pop	{r7, pc}
  402954:	400e0800 	.word	0x400e0800
  402958:	0040136d 	.word	0x0040136d
  40295c:	400e0a00 	.word	0x400e0a00
  402960:	400e1a00 	.word	0x400e1a00
  402964:	400e1c00 	.word	0x400e1c00
  402968:	40024000 	.word	0x40024000
  40296c:	0040168d 	.word	0x0040168d
  402970:	40028000 	.word	0x40028000
  402974:	4002c000 	.word	0x4002c000

00402978 <stdio_serial_init>:
 * \param usart       Base address of the USART instance.
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
  402978:	b580      	push	{r7, lr}
  40297a:	b082      	sub	sp, #8
  40297c:	af00      	add	r7, sp, #0
  40297e:	6078      	str	r0, [r7, #4]
  402980:	6039      	str	r1, [r7, #0]
	stdio_base = (void *)usart;
  402982:	4a0f      	ldr	r2, [pc, #60]	; (4029c0 <stdio_serial_init+0x48>)
  402984:	687b      	ldr	r3, [r7, #4]
  402986:	6013      	str	r3, [r2, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  402988:	4b0e      	ldr	r3, [pc, #56]	; (4029c4 <stdio_serial_init+0x4c>)
  40298a:	4a0f      	ldr	r2, [pc, #60]	; (4029c8 <stdio_serial_init+0x50>)
  40298c:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  40298e:	4b0f      	ldr	r3, [pc, #60]	; (4029cc <stdio_serial_init+0x54>)
  402990:	4a0f      	ldr	r2, [pc, #60]	; (4029d0 <stdio_serial_init+0x58>)
  402992:	601a      	str	r2, [r3, #0]
# if (XMEGA || MEGA_RF)
	usart_serial_init((USART_t *)usart,opt);
# elif UC3
	usart_serial_init(usart,(usart_serial_options_t *)opt);
# elif SAM
	usart_serial_init((Usart *)usart,(usart_serial_options_t *)opt);
  402994:	6878      	ldr	r0, [r7, #4]
  402996:	6839      	ldr	r1, [r7, #0]
  402998:	4b0e      	ldr	r3, [pc, #56]	; (4029d4 <stdio_serial_init+0x5c>)
  40299a:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  40299c:	4b0e      	ldr	r3, [pc, #56]	; (4029d8 <stdio_serial_init+0x60>)
  40299e:	681b      	ldr	r3, [r3, #0]
  4029a0:	689b      	ldr	r3, [r3, #8]
  4029a2:	4618      	mov	r0, r3
  4029a4:	2100      	movs	r1, #0
  4029a6:	4b0d      	ldr	r3, [pc, #52]	; (4029dc <stdio_serial_init+0x64>)
  4029a8:	4798      	blx	r3
	setbuf(stdin, NULL);
  4029aa:	4b0b      	ldr	r3, [pc, #44]	; (4029d8 <stdio_serial_init+0x60>)
  4029ac:	681b      	ldr	r3, [r3, #0]
  4029ae:	685b      	ldr	r3, [r3, #4]
  4029b0:	4618      	mov	r0, r3
  4029b2:	2100      	movs	r1, #0
  4029b4:	4b09      	ldr	r3, [pc, #36]	; (4029dc <stdio_serial_init+0x64>)
  4029b6:	4798      	blx	r3
	// and AVR GCC library:
	// - printf() emits one character at a time.
	// - getchar() requests only 1 byte to exit.
#  endif
# endif
}
  4029b8:	3708      	adds	r7, #8
  4029ba:	46bd      	mov	sp, r7
  4029bc:	bd80      	pop	{r7, pc}
  4029be:	bf00      	nop
  4029c0:	204009d0 	.word	0x204009d0
  4029c4:	204009cc 	.word	0x204009cc
  4029c8:	00402769 	.word	0x00402769
  4029cc:	204009c8 	.word	0x204009c8
  4029d0:	00402875 	.word	0x00402875
  4029d4:	00402609 	.word	0x00402609
  4029d8:	204004a8 	.word	0x204004a8
  4029dc:	00403259 	.word	0x00403259

004029e0 <mdelay>:
 * by the SAM microcontroller system tick).
 *
 * \param ul_dly_ticks  Delay to wait for, in milliseconds.
 */
void mdelay(uint32_t ul_dly_ticks)
{
  4029e0:	b480      	push	{r7}
  4029e2:	b085      	sub	sp, #20
  4029e4:	af00      	add	r7, sp, #0
  4029e6:	6078      	str	r0, [r7, #4]
	uint32_t ul_cur_ticks;

	ul_cur_ticks = ul_ms_ticks;
  4029e8:	4b07      	ldr	r3, [pc, #28]	; (402a08 <mdelay+0x28>)
  4029ea:	681b      	ldr	r3, [r3, #0]
  4029ec:	60fb      	str	r3, [r7, #12]
	while ((ul_ms_ticks - ul_cur_ticks) < ul_dly_ticks) {
  4029ee:	bf00      	nop
  4029f0:	4b05      	ldr	r3, [pc, #20]	; (402a08 <mdelay+0x28>)
  4029f2:	681a      	ldr	r2, [r3, #0]
  4029f4:	68fb      	ldr	r3, [r7, #12]
  4029f6:	1ad2      	subs	r2, r2, r3
  4029f8:	687b      	ldr	r3, [r7, #4]
  4029fa:	429a      	cmp	r2, r3
  4029fc:	d3f8      	bcc.n	4029f0 <mdelay+0x10>
	}
}
  4029fe:	3714      	adds	r7, #20
  402a00:	46bd      	mov	sp, r7
  402a02:	f85d 7b04 	ldr.w	r7, [sp], #4
  402a06:	4770      	bx	lr
  402a08:	20400990 	.word	0x20400990

00402a0c <SysTick_Handler>:
 *
 *  Process System Tick Event.
 *  Increment the ul_ms_ticks counter.
 */
void SysTick_Handler(void)
{
  402a0c:	b480      	push	{r7}
  402a0e:	af00      	add	r7, sp, #0
	g_ul_tick_count++;
  402a10:	4b06      	ldr	r3, [pc, #24]	; (402a2c <SysTick_Handler+0x20>)
  402a12:	681b      	ldr	r3, [r3, #0]
  402a14:	3301      	adds	r3, #1
  402a16:	4a05      	ldr	r2, [pc, #20]	; (402a2c <SysTick_Handler+0x20>)
  402a18:	6013      	str	r3, [r2, #0]
	ul_ms_ticks++; //jsi 6feb16
  402a1a:	4b05      	ldr	r3, [pc, #20]	; (402a30 <SysTick_Handler+0x24>)
  402a1c:	681b      	ldr	r3, [r3, #0]
  402a1e:	3301      	adds	r3, #1
  402a20:	4a03      	ldr	r2, [pc, #12]	; (402a30 <SysTick_Handler+0x24>)
  402a22:	6013      	str	r3, [r2, #0]
}
  402a24:	46bd      	mov	sp, r7
  402a26:	f85d 7b04 	ldr.w	r7, [sp], #4
  402a2a:	4770      	bx	lr
  402a2c:	204009fc 	.word	0x204009fc
  402a30:	20400990 	.word	0x20400990

00402a34 <USART0_Handler>:
/**
 *  \brief Handler for USART interrupt.
 *
 */
void USART_Handler(void)
{
  402a34:	b580      	push	{r7, lr}
  402a36:	b082      	sub	sp, #8
  402a38:	af00      	add	r7, sp, #0
	uint32_t ul_status;
	uint8_t uc_char;

	/* Read USART status. */
	ul_status = usart_get_status(BOARD_USART);
  402a3a:	481b      	ldr	r0, [pc, #108]	; (402aa8 <USART0_Handler+0x74>)
  402a3c:	4b1b      	ldr	r3, [pc, #108]	; (402aac <USART0_Handler+0x78>)
  402a3e:	4798      	blx	r3
  402a40:	6078      	str	r0, [r7, #4]

	/*transmit interrupt rises*/
	if(ul_status & (US_IER_TXRDY | US_IER_TXEMPTY)) {
  402a42:	687a      	ldr	r2, [r7, #4]
  402a44:	f240 2302 	movw	r3, #514	; 0x202
  402a48:	4013      	ands	r3, r2
  402a4a:	2b00      	cmp	r3, #0
  402a4c:	d004      	beq.n	402a58 <USART0_Handler+0x24>
		usart_disable_interrupt(BOARD_USART, (US_IER_TXRDY | US_IER_TXEMPTY));
  402a4e:	4816      	ldr	r0, [pc, #88]	; (402aa8 <USART0_Handler+0x74>)
  402a50:	f240 2102 	movw	r1, #514	; 0x202
  402a54:	4b16      	ldr	r3, [pc, #88]	; (402ab0 <USART0_Handler+0x7c>)
  402a56:	4798      	blx	r3
	}

	/*receive interrupt rise, store character to receiver buffer*/
	if((g_state == RECEIVING) && (usart_read(BOARD_USART, (uint32_t *)&uc_char) == 0)) {
  402a58:	4b16      	ldr	r3, [pc, #88]	; (402ab4 <USART0_Handler+0x80>)
  402a5a:	781b      	ldrb	r3, [r3, #0]
  402a5c:	b2db      	uxtb	r3, r3
  402a5e:	2b02      	cmp	r3, #2
  402a60:	d11f      	bne.n	402aa2 <USART0_Handler+0x6e>
  402a62:	1cfb      	adds	r3, r7, #3
  402a64:	4810      	ldr	r0, [pc, #64]	; (402aa8 <USART0_Handler+0x74>)
  402a66:	4619      	mov	r1, r3
  402a68:	4b13      	ldr	r3, [pc, #76]	; (402ab8 <USART0_Handler+0x84>)
  402a6a:	4798      	blx	r3
  402a6c:	4603      	mov	r3, r0
  402a6e:	2b00      	cmp	r3, #0
  402a70:	d117      	bne.n	402aa2 <USART0_Handler+0x6e>
		*p_revdata++ = uc_char;
  402a72:	4b12      	ldr	r3, [pc, #72]	; (402abc <USART0_Handler+0x88>)
  402a74:	681b      	ldr	r3, [r3, #0]
  402a76:	1c5a      	adds	r2, r3, #1
  402a78:	4910      	ldr	r1, [pc, #64]	; (402abc <USART0_Handler+0x88>)
  402a7a:	600a      	str	r2, [r1, #0]
  402a7c:	78fa      	ldrb	r2, [r7, #3]
  402a7e:	701a      	strb	r2, [r3, #0]
		g_ulcount++;
  402a80:	4b0f      	ldr	r3, [pc, #60]	; (402ac0 <USART0_Handler+0x8c>)
  402a82:	681b      	ldr	r3, [r3, #0]
  402a84:	3301      	adds	r3, #1
  402a86:	4a0e      	ldr	r2, [pc, #56]	; (402ac0 <USART0_Handler+0x8c>)
  402a88:	6013      	str	r3, [r2, #0]
		if(g_ulcount >= BUFFER_SIZE) {
  402a8a:	4b0d      	ldr	r3, [pc, #52]	; (402ac0 <USART0_Handler+0x8c>)
  402a8c:	681b      	ldr	r3, [r3, #0]
  402a8e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
  402a92:	d306      	bcc.n	402aa2 <USART0_Handler+0x6e>
			g_state = RECEIVED;
  402a94:	4b07      	ldr	r3, [pc, #28]	; (402ab4 <USART0_Handler+0x80>)
  402a96:	2203      	movs	r2, #3
  402a98:	701a      	strb	r2, [r3, #0]
			usart_disable_interrupt(BOARD_USART, US_IER_RXRDY);
  402a9a:	4803      	ldr	r0, [pc, #12]	; (402aa8 <USART0_Handler+0x74>)
  402a9c:	2101      	movs	r1, #1
  402a9e:	4b04      	ldr	r3, [pc, #16]	; (402ab0 <USART0_Handler+0x7c>)
  402aa0:	4798      	blx	r3
		}
	}
}
  402aa2:	3708      	adds	r7, #8
  402aa4:	46bd      	mov	sp, r7
  402aa6:	bd80      	pop	{r7, pc}
  402aa8:	40024000 	.word	0x40024000
  402aac:	004015b9 	.word	0x004015b9
  402ab0:	0040159d 	.word	0x0040159d
  402ab4:	20400988 	.word	0x20400988
  402ab8:	0040168d 	.word	0x0040168d
  402abc:	20400004 	.word	0x20400004
  402ac0:	2040098c 	.word	0x2040098c

00402ac4 <configure_usart>:
 *
 *  Configure USART in RS485 mode, asynchronous, 8 bits, 1 stop bit,
 *  no parity, 256000 bauds and enable its transmitter and receiver.
 */
static void configure_usart(void)
{
  402ac4:	b5b0      	push	{r4, r5, r7, lr}
  402ac6:	b086      	sub	sp, #24
  402ac8:	af00      	add	r7, sp, #0
	const sam_usart_opt_t usart_console_settings = {
  402aca:	4b14      	ldr	r3, [pc, #80]	; (402b1c <configure_usart+0x58>)
  402acc:	463c      	mov	r4, r7
  402ace:	461d      	mov	r5, r3
  402ad0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  402ad2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  402ad4:	e895 0003 	ldmia.w	r5, {r0, r1}
  402ad8:	e884 0003 	stmia.w	r4, {r0, r1}
		/* This field is only used in IrDA mode. */
		0
	};

	/* Enable the peripheral clock in the PMC. */
	sysclk_enable_peripheral_clock(BOARD_ID_USART);
  402adc:	200d      	movs	r0, #13
  402ade:	4b10      	ldr	r3, [pc, #64]	; (402b20 <configure_usart+0x5c>)
  402ae0:	4798      	blx	r3

	/* Configure USART in RS485 mode. */
//jsi 7feb16 we want rs232 not rs485 for our application	usart_init_rs485(BOARD_USART, &usart_console_settings,
//jsi 7feb16 we want rs232 not rs485 for our application			sysclk_get_cpu_hz());
			
	usart_init_rs232(BOARD_USART, &usart_console_settings, sysclk_get_cpu_hz());
  402ae2:	4b10      	ldr	r3, [pc, #64]	; (402b24 <configure_usart+0x60>)
  402ae4:	4798      	blx	r3
  402ae6:	4602      	mov	r2, r0
  402ae8:	463b      	mov	r3, r7
  402aea:	480f      	ldr	r0, [pc, #60]	; (402b28 <configure_usart+0x64>)
  402aec:	4619      	mov	r1, r3
  402aee:	4b0f      	ldr	r3, [pc, #60]	; (402b2c <configure_usart+0x68>)
  402af0:	4798      	blx	r3

	/* enable transmitter timeguard, 4 bit period delay. */
	usart_set_tx_timeguard(BOARD_USART, 4);
  402af2:	480d      	ldr	r0, [pc, #52]	; (402b28 <configure_usart+0x64>)
  402af4:	2104      	movs	r1, #4
  402af6:	4b0e      	ldr	r3, [pc, #56]	; (402b30 <configure_usart+0x6c>)
  402af8:	4798      	blx	r3

	/* Disable all the interrupts. */
	usart_disable_interrupt(BOARD_USART, ALL_INTERRUPT_MASK);
  402afa:	480b      	ldr	r0, [pc, #44]	; (402b28 <configure_usart+0x64>)
  402afc:	f04f 31ff 	mov.w	r1, #4294967295
  402b00:	4b0c      	ldr	r3, [pc, #48]	; (402b34 <configure_usart+0x70>)
  402b02:	4798      	blx	r3

	/* Enable TX & RX function. */
	usart_enable_tx(BOARD_USART);
  402b04:	4808      	ldr	r0, [pc, #32]	; (402b28 <configure_usart+0x64>)
  402b06:	4b0c      	ldr	r3, [pc, #48]	; (402b38 <configure_usart+0x74>)
  402b08:	4798      	blx	r3
	usart_enable_rx(BOARD_USART);
  402b0a:	4807      	ldr	r0, [pc, #28]	; (402b28 <configure_usart+0x64>)
  402b0c:	4b0b      	ldr	r3, [pc, #44]	; (402b3c <configure_usart+0x78>)
  402b0e:	4798      	blx	r3

	/* Configure and enable interrupt of USART. */
	NVIC_EnableIRQ(USART_IRQn);
  402b10:	200d      	movs	r0, #13
  402b12:	4b0b      	ldr	r3, [pc, #44]	; (402b40 <configure_usart+0x7c>)
  402b14:	4798      	blx	r3
}
  402b16:	3718      	adds	r7, #24
  402b18:	46bd      	mov	sp, r7
  402b1a:	bdb0      	pop	{r4, r5, r7, pc}
  402b1c:	00408930 	.word	0x00408930
  402b20:	00402491 	.word	0x00402491
  402b24:	00402469 	.word	0x00402469
  402b28:	40024000 	.word	0x40024000
  402b2c:	00401481 	.word	0x00401481
  402b30:	00401535 	.word	0x00401535
  402b34:	0040159d 	.word	0x0040159d
  402b38:	00401505 	.word	0x00401505
  402b3c:	00401551 	.word	0x00401551
  402b40:	00402305 	.word	0x00402305

00402b44 <configure_systick>:

/**
 *  Configure system tick to generate an interrupt every 1us. Note that this was 1ms in the example code. jsi 11feb16
 */
static void configure_systick(void)
{
  402b44:	b580      	push	{r7, lr}
  402b46:	b082      	sub	sp, #8
  402b48:	af00      	add	r7, sp, #0
	uint32_t ul_flag;

	ul_flag = SysTick_Config(sysclk_get_cpu_hz()/SYS_TICK_FREQ);
  402b4a:	4b0a      	ldr	r3, [pc, #40]	; (402b74 <configure_systick+0x30>)
  402b4c:	4798      	blx	r3
  402b4e:	4602      	mov	r2, r0
  402b50:	4b09      	ldr	r3, [pc, #36]	; (402b78 <configure_systick+0x34>)
  402b52:	fba3 2302 	umull	r2, r3, r3, r2
  402b56:	099b      	lsrs	r3, r3, #6
  402b58:	4618      	mov	r0, r3
  402b5a:	4b08      	ldr	r3, [pc, #32]	; (402b7c <configure_systick+0x38>)
  402b5c:	4798      	blx	r3
  402b5e:	6078      	str	r0, [r7, #4]
	if (ul_flag) {
  402b60:	687b      	ldr	r3, [r7, #4]
  402b62:	2b00      	cmp	r3, #0
  402b64:	d003      	beq.n	402b6e <configure_systick+0x2a>
		puts("-F- Systick configuration error\r");
  402b66:	4806      	ldr	r0, [pc, #24]	; (402b80 <configure_systick+0x3c>)
  402b68:	4b06      	ldr	r3, [pc, #24]	; (402b84 <configure_systick+0x40>)
  402b6a:	4798      	blx	r3
		while (1) {
		}
  402b6c:	e7fe      	b.n	402b6c <configure_systick+0x28>
	}
}
  402b6e:	3708      	adds	r7, #8
  402b70:	46bd      	mov	sp, r7
  402b72:	bd80      	pop	{r7, pc}
  402b74:	00402469 	.word	0x00402469
  402b78:	10624dd3 	.word	0x10624dd3
  402b7c:	00402389 	.word	0x00402389
  402b80:	00408948 	.word	0x00408948
  402b84:	00403249 	.word	0x00403249

00402b88 <configure_console>:

/**
 *  Configure UART for debug message output.
 */
static void configure_console(void)
{
  402b88:	b590      	push	{r4, r7, lr}
  402b8a:	b085      	sub	sp, #20
  402b8c:	af00      	add	r7, sp, #0
	const usart_serial_options_t uart_serial_options = {
  402b8e:	4b08      	ldr	r3, [pc, #32]	; (402bb0 <configure_console+0x28>)
  402b90:	463c      	mov	r4, r7
  402b92:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  402b94:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		.stopbits = CONF_UART_STOP_BITS,
#endif
	};

	/* Configure console UART. */
	sysclk_enable_peripheral_clock(CONSOLE_UART_ID);
  402b98:	2007      	movs	r0, #7
  402b9a:	4b06      	ldr	r3, [pc, #24]	; (402bb4 <configure_console+0x2c>)
  402b9c:	4798      	blx	r3
	stdio_serial_init(CONF_UART, &uart_serial_options);
  402b9e:	463b      	mov	r3, r7
  402ba0:	4805      	ldr	r0, [pc, #20]	; (402bb8 <configure_console+0x30>)
  402ba2:	4619      	mov	r1, r3
  402ba4:	4b05      	ldr	r3, [pc, #20]	; (402bbc <configure_console+0x34>)
  402ba6:	4798      	blx	r3
}
  402ba8:	3714      	adds	r7, #20
  402baa:	46bd      	mov	sp, r7
  402bac:	bd90      	pop	{r4, r7, pc}
  402bae:	bf00      	nop
  402bb0:	0040896c 	.word	0x0040896c
  402bb4:	00402491 	.word	0x00402491
  402bb8:	400e0800 	.word	0x400e0800
  402bbc:	00402979 	.word	0x00402979

00402bc0 <func_transmit>:
* \param *p_buff  data to be transmitted
* \param ulsize size of all data.
*
*/
uint8_t func_transmit(const uint8_t *p_buff, uint32_t ulsize)
{
  402bc0:	b580      	push	{r7, lr}
  402bc2:	b082      	sub	sp, #8
  402bc4:	af00      	add	r7, sp, #0
  402bc6:	6078      	str	r0, [r7, #4]
  402bc8:	6039      	str	r1, [r7, #0]
	Assert(p_buff);

	while(ulsize > 0) {
  402bca:	e013      	b.n	402bf4 <func_transmit+0x34>
		if(0 == usart_write(BOARD_USART, *p_buff)){
  402bcc:	687b      	ldr	r3, [r7, #4]
  402bce:	781b      	ldrb	r3, [r3, #0]
  402bd0:	4810      	ldr	r0, [pc, #64]	; (402c14 <func_transmit+0x54>)
  402bd2:	4619      	mov	r1, r3
  402bd4:	4b10      	ldr	r3, [pc, #64]	; (402c18 <func_transmit+0x58>)
  402bd6:	4798      	blx	r3
  402bd8:	4603      	mov	r3, r0
  402bda:	2b00      	cmp	r3, #0
  402bdc:	d10a      	bne.n	402bf4 <func_transmit+0x34>
			usart_enable_interrupt(BOARD_USART, US_IER_TXRDY | US_IER_TXEMPTY);
  402bde:	480d      	ldr	r0, [pc, #52]	; (402c14 <func_transmit+0x54>)
  402be0:	f240 2102 	movw	r1, #514	; 0x202
  402be4:	4b0d      	ldr	r3, [pc, #52]	; (402c1c <func_transmit+0x5c>)
  402be6:	4798      	blx	r3
			ulsize--;
  402be8:	683b      	ldr	r3, [r7, #0]
  402bea:	3b01      	subs	r3, #1
  402bec:	603b      	str	r3, [r7, #0]
			p_buff++;
  402bee:	687b      	ldr	r3, [r7, #4]
  402bf0:	3301      	adds	r3, #1
  402bf2:	607b      	str	r3, [r7, #4]
*/
uint8_t func_transmit(const uint8_t *p_buff, uint32_t ulsize)
{
	Assert(p_buff);

	while(ulsize > 0) {
  402bf4:	683b      	ldr	r3, [r7, #0]
  402bf6:	2b00      	cmp	r3, #0
  402bf8:	d1e8      	bne.n	402bcc <func_transmit+0xc>
			ulsize--;
			p_buff++;
		}
	}

	while(!usart_is_tx_empty(BOARD_USART)) {
  402bfa:	bf00      	nop
  402bfc:	4805      	ldr	r0, [pc, #20]	; (402c14 <func_transmit+0x54>)
  402bfe:	4b08      	ldr	r3, [pc, #32]	; (402c20 <func_transmit+0x60>)
  402c00:	4798      	blx	r3
  402c02:	4603      	mov	r3, r0
  402c04:	2b00      	cmp	r3, #0
  402c06:	d0f9      	beq.n	402bfc <func_transmit+0x3c>
		;  /*waiting for transmit over*/
	}

	return 0;
  402c08:	2300      	movs	r3, #0
}
  402c0a:	4618      	mov	r0, r3
  402c0c:	3708      	adds	r7, #8
  402c0e:	46bd      	mov	sp, r7
  402c10:	bd80      	pop	{r7, pc}
  402c12:	bf00      	nop
  402c14:	40024000 	.word	0x40024000
  402c18:	00401659 	.word	0x00401659
  402c1c:	00401581 	.word	0x00401581
  402c20:	00401609 	.word	0x00401609

00402c24 <twi_init>:
	}
}

static void twi_init(void);
static void twi_init(void)
{
  402c24:	b580      	push	{r7, lr}
  402c26:	b084      	sub	sp, #16
  402c28:	af00      	add	r7, sp, #0
	twihs_options_t opt;

	/* Enable the peripheral clock for TWI */
	pmc_enable_periph_clk(ID_TWIHS0);
  402c2a:	2013      	movs	r0, #19
  402c2c:	4b09      	ldr	r3, [pc, #36]	; (402c54 <twi_init+0x30>)
  402c2e:	4798      	blx	r3

	/* Configure the options of TWI driver */
	opt.master_clk = sysclk_get_cpu_hz();
  402c30:	4b09      	ldr	r3, [pc, #36]	; (402c58 <twi_init+0x34>)
  402c32:	4798      	blx	r3
  402c34:	4603      	mov	r3, r0
  402c36:	607b      	str	r3, [r7, #4]
	opt.speed      = TWIHS_CLK; //400KHz
  402c38:	4b08      	ldr	r3, [pc, #32]	; (402c5c <twi_init+0x38>)
  402c3a:	60bb      	str	r3, [r7, #8]

	if (twihs_master_init(TWIHS0, &opt) != TWIHS_SUCCESS) {
  402c3c:	1d3b      	adds	r3, r7, #4
  402c3e:	4808      	ldr	r0, [pc, #32]	; (402c60 <twi_init+0x3c>)
  402c40:	4619      	mov	r1, r3
  402c42:	4b08      	ldr	r3, [pc, #32]	; (402c64 <twi_init+0x40>)
  402c44:	4798      	blx	r3
  402c46:	4603      	mov	r3, r0
  402c48:	2b00      	cmp	r3, #0
  402c4a:	d000      	beq.n	402c4e <twi_init+0x2a>
		while (1) {
			/* Capture error */
		}
  402c4c:	e7fe      	b.n	402c4c <twi_init+0x28>
	}
}
  402c4e:	3710      	adds	r7, #16
  402c50:	46bd      	mov	sp, r7
  402c52:	bd80      	pop	{r7, pc}
  402c54:	00400f39 	.word	0x00400f39
  402c58:	00402469 	.word	0x00402469
  402c5c:	00061a80 	.word	0x00061a80
  402c60:	40018000 	.word	0x40018000
  402c64:	00400fe1 	.word	0x00400fe1

00402c68 <main>:
 */

#  define EXAMPLE_LED_GPIO    LED0_GPIO

int main(void) //6feb16 this version of main has been hacked up for only exactly what we need
{
  402c68:	b5f0      	push	{r4, r5, r6, r7, lr}
  402c6a:	b0a3      	sub	sp, #140	; 0x8c
  402c6c:	af06      	add	r7, sp, #24
	char		txBuf[11] = {0,0,0,0,0,0,0,0,0,0,0}, rxByte;
  402c6e:	2300      	movs	r3, #0
  402c70:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  402c74:	2300      	movs	r3, #0
  402c76:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
  402c7a:	2300      	movs	r3, #0
  402c7c:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
  402c80:	2300      	movs	r3, #0
  402c82:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  402c86:	2300      	movs	r3, #0
  402c88:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  402c8c:	2300      	movs	r3, #0
  402c8e:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
  402c92:	2300      	movs	r3, #0
  402c94:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  402c98:	2300      	movs	r3, #0
  402c9a:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  402c9e:	2300      	movs	r3, #0
  402ca0:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  402ca4:	2300      	movs	r3, #0
  402ca6:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
  402caa:	2300      	movs	r3, #0
  402cac:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
	uint32_t	i;	
	uint32_t	time_elapsed = 0;
  402cb0:	2300      	movs	r3, #0
  402cb2:	65fb      	str	r3, [r7, #92]	; 0x5c
	uint32_t	ul_i;
	uint8_t		displayState = 0;
  402cb4:	2300      	movs	r3, #0
  402cb6:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
	uint8_t		charCount = 0;
  402cba:	2300      	movs	r3, #0
  402cbc:	f887 306a 	strb.w	r3, [r7, #106]	; 0x6a
	char		printStr[64];
	
	unsigned char idFamily, acc, id[6], idcsum; //10feb16 temp serial ID code, make more formal later

	/* Initialize the SAM system. */
	sysclk_init();
  402cc0:	4b9b      	ldr	r3, [pc, #620]	; (402f30 <main+0x2c8>)
  402cc2:	4798      	blx	r3
	board_init();
  402cc4:	4b9b      	ldr	r3, [pc, #620]	; (402f34 <main+0x2cc>)
  402cc6:	4798      	blx	r3

	/* Configure UART for blue scrolling display */
	configure_console();
  402cc8:	4b9b      	ldr	r3, [pc, #620]	; (402f38 <main+0x2d0>)
  402cca:	4798      	blx	r3

	/* Configure USART. */
	configure_usart();
  402ccc:	4b9b      	ldr	r3, [pc, #620]	; (402f3c <main+0x2d4>)
  402cce:	4798      	blx	r3

	/* 1ms tick. */
	configure_systick();
  402cd0:	4b9b      	ldr	r3, [pc, #620]	; (402f40 <main+0x2d8>)
  402cd2:	4798      	blx	r3

	/*
	 * Put into some kind of "init_io()" function at some point
	 */
	
	ioport_set_pin_dir(ECLAVE_SERIAL_ID0, IOPORT_DIR_OUTPUT);
  402cd4:	200f      	movs	r0, #15
  402cd6:	2101      	movs	r1, #1
  402cd8:	4b9a      	ldr	r3, [pc, #616]	; (402f44 <main+0x2dc>)
  402cda:	4798      	blx	r3
	ioport_set_pin_level(ECLAVE_SERIAL_ID0, IOPORT_PIN_LEVEL_HIGH);
  402cdc:	200f      	movs	r0, #15
  402cde:	2101      	movs	r1, #1
  402ce0:	4b99      	ldr	r3, [pc, #612]	; (402f48 <main+0x2e0>)
  402ce2:	4798      	blx	r3
	ioport_set_pin_dir(ECLAVE_SERIAL_ID1, IOPORT_DIR_OUTPUT);
  402ce4:	2010      	movs	r0, #16
  402ce6:	2101      	movs	r1, #1
  402ce8:	4b96      	ldr	r3, [pc, #600]	; (402f44 <main+0x2dc>)
  402cea:	4798      	blx	r3
	ioport_set_pin_level(ECLAVE_SERIAL_ID1, IOPORT_PIN_LEVEL_HIGH);
  402cec:	2010      	movs	r0, #16
  402cee:	2101      	movs	r1, #1
  402cf0:	4b95      	ldr	r3, [pc, #596]	; (402f48 <main+0x2e0>)
  402cf2:	4798      	blx	r3
	ioport_set_pin_dir(ECLAVE_SERIAL_ID2, IOPORT_DIR_OUTPUT);
  402cf4:	2011      	movs	r0, #17
  402cf6:	2101      	movs	r1, #1
  402cf8:	4b92      	ldr	r3, [pc, #584]	; (402f44 <main+0x2dc>)
  402cfa:	4798      	blx	r3
	ioport_set_pin_level(ECLAVE_SERIAL_ID2, IOPORT_PIN_LEVEL_HIGH);
  402cfc:	2011      	movs	r0, #17
  402cfe:	2101      	movs	r1, #1
  402d00:	4b91      	ldr	r3, [pc, #580]	; (402f48 <main+0x2e0>)
  402d02:	4798      	blx	r3
	ioport_set_pin_dir(ECLAVE_SERIAL_ID3, IOPORT_DIR_OUTPUT);
  402d04:	2012      	movs	r0, #18
  402d06:	2101      	movs	r1, #1
  402d08:	4b8e      	ldr	r3, [pc, #568]	; (402f44 <main+0x2dc>)
  402d0a:	4798      	blx	r3
	ioport_set_pin_level(ECLAVE_SERIAL_ID3, IOPORT_PIN_LEVEL_HIGH);
  402d0c:	2012      	movs	r0, #18
  402d0e:	2101      	movs	r1, #1
  402d10:	4b8d      	ldr	r3, [pc, #564]	; (402f48 <main+0x2e0>)
  402d12:	4798      	blx	r3
	ioport_set_pin_dir(ECLAVE_SERIAL_ID4, IOPORT_DIR_OUTPUT);
  402d14:	2013      	movs	r0, #19
  402d16:	2101      	movs	r1, #1
  402d18:	4b8a      	ldr	r3, [pc, #552]	; (402f44 <main+0x2dc>)
  402d1a:	4798      	blx	r3
	ioport_set_pin_level(ECLAVE_SERIAL_ID4, IOPORT_PIN_LEVEL_HIGH);
  402d1c:	2013      	movs	r0, #19
  402d1e:	2101      	movs	r1, #1
  402d20:	4b89      	ldr	r3, [pc, #548]	; (402f48 <main+0x2e0>)
  402d22:	4798      	blx	r3

	SetSpeed(1); //1==standard speed, not overdrive 
  402d24:	2001      	movs	r0, #1
  402d26:	4b89      	ldr	r3, [pc, #548]	; (402f4c <main+0x2e4>)
  402d28:	4798      	blx	r3
	
	for (int i=0; i<5; i++)
  402d2a:	2300      	movs	r3, #0
  402d2c:	667b      	str	r3, [r7, #100]	; 0x64
  402d2e:	e080      	b.n	402e32 <main+0x1ca>
	{
		if(!OWTouchReset(i)) //we think a board is present, try to read the serial ID
  402d30:	6e7b      	ldr	r3, [r7, #100]	; 0x64
  402d32:	b2db      	uxtb	r3, r3
  402d34:	4618      	mov	r0, r3
  402d36:	4b86      	ldr	r3, [pc, #536]	; (402f50 <main+0x2e8>)
  402d38:	4798      	blx	r3
  402d3a:	4603      	mov	r3, r0
  402d3c:	2b00      	cmp	r3, #0
  402d3e:	d171      	bne.n	402e24 <main+0x1bc>
		{
			OWWriteByte(i, 0x33); //Read ID command
  402d40:	6e7b      	ldr	r3, [r7, #100]	; 0x64
  402d42:	b2db      	uxtb	r3, r3
  402d44:	4618      	mov	r0, r3
  402d46:	2133      	movs	r1, #51	; 0x33
  402d48:	4b82      	ldr	r3, [pc, #520]	; (402f54 <main+0x2ec>)
  402d4a:	4798      	blx	r3
			
			idFamily = OWReadByte(i);
  402d4c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
  402d4e:	b2db      	uxtb	r3, r3
  402d50:	4618      	mov	r0, r3
  402d52:	4b81      	ldr	r3, [pc, #516]	; (402f58 <main+0x2f0>)
  402d54:	4798      	blx	r3
  402d56:	4603      	mov	r3, r0
  402d58:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
			
			acc = crc8_add(0x00, idFamily);
  402d5c:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
  402d60:	2000      	movs	r0, #0
  402d62:	4619      	mov	r1, r3
  402d64:	4b7d      	ldr	r3, [pc, #500]	; (402f5c <main+0x2f4>)
  402d66:	4798      	blx	r3
  402d68:	4603      	mov	r3, r0
  402d6a:	f887 3069 	strb.w	r3, [r7, #105]	; 0x69
			
			for (int j=0; j<6; j++)
  402d6e:	2300      	movs	r3, #0
  402d70:	663b      	str	r3, [r7, #96]	; 0x60
  402d72:	e01b      	b.n	402dac <main+0x144>
			{
				id[j] = OWReadByte(i);
  402d74:	6e7b      	ldr	r3, [r7, #100]	; 0x64
  402d76:	b2db      	uxtb	r3, r3
  402d78:	4618      	mov	r0, r3
  402d7a:	4b77      	ldr	r3, [pc, #476]	; (402f58 <main+0x2f0>)
  402d7c:	4798      	blx	r3
  402d7e:	4603      	mov	r3, r0
  402d80:	b2d9      	uxtb	r1, r3
  402d82:	463a      	mov	r2, r7
  402d84:	6e3b      	ldr	r3, [r7, #96]	; 0x60
  402d86:	4413      	add	r3, r2
  402d88:	460a      	mov	r2, r1
  402d8a:	701a      	strb	r2, [r3, #0]
				acc = crc8_add(acc, id[j]);
  402d8c:	463a      	mov	r2, r7
  402d8e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
  402d90:	4413      	add	r3, r2
  402d92:	781b      	ldrb	r3, [r3, #0]
  402d94:	f897 2069 	ldrb.w	r2, [r7, #105]	; 0x69
  402d98:	4610      	mov	r0, r2
  402d9a:	4619      	mov	r1, r3
  402d9c:	4b6f      	ldr	r3, [pc, #444]	; (402f5c <main+0x2f4>)
  402d9e:	4798      	blx	r3
  402da0:	4603      	mov	r3, r0
  402da2:	f887 3069 	strb.w	r3, [r7, #105]	; 0x69
			
			idFamily = OWReadByte(i);
			
			acc = crc8_add(0x00, idFamily);
			
			for (int j=0; j<6; j++)
  402da6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
  402da8:	3301      	adds	r3, #1
  402daa:	663b      	str	r3, [r7, #96]	; 0x60
  402dac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
  402dae:	2b05      	cmp	r3, #5
  402db0:	dde0      	ble.n	402d74 <main+0x10c>
			{
				id[j] = OWReadByte(i);
				acc = crc8_add(acc, id[j]);
			}
			
			idcsum = OWReadByte(i);
  402db2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
  402db4:	b2db      	uxtb	r3, r3
  402db6:	4618      	mov	r0, r3
  402db8:	4b67      	ldr	r3, [pc, #412]	; (402f58 <main+0x2f0>)
  402dba:	4798      	blx	r3
  402dbc:	4603      	mov	r3, r0
  402dbe:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a
			
			if (acc != idcsum)
  402dc2:	f897 2069 	ldrb.w	r2, [r7, #105]	; 0x69
  402dc6:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
  402dca:	429a      	cmp	r2, r3
  402dcc:	d004      	beq.n	402dd8 <main+0x170>
			{
				func_transmit("Invalid serial ID checksum.\r\n", strlen("Invalid serial ID checksum.\r\n"));
  402dce:	4864      	ldr	r0, [pc, #400]	; (402f60 <main+0x2f8>)
  402dd0:	211d      	movs	r1, #29
  402dd2:	4b64      	ldr	r3, [pc, #400]	; (402f64 <main+0x2fc>)
  402dd4:	4798      	blx	r3
  402dd6:	e029      	b.n	402e2c <main+0x1c4>
			}
			else
			{
				sprintf(printStr,"LED board %d serial ID: %x%x%x%x%x%x\r\n", i, id[0], id[1], id[2], id[3], id[4], id[5]);
  402dd8:	783b      	ldrb	r3, [r7, #0]
  402dda:	461e      	mov	r6, r3
  402ddc:	787b      	ldrb	r3, [r7, #1]
  402dde:	461d      	mov	r5, r3
  402de0:	78bb      	ldrb	r3, [r7, #2]
  402de2:	461c      	mov	r4, r3
  402de4:	78fb      	ldrb	r3, [r7, #3]
  402de6:	4618      	mov	r0, r3
  402de8:	793b      	ldrb	r3, [r7, #4]
  402dea:	4619      	mov	r1, r3
  402dec:	797b      	ldrb	r3, [r7, #5]
  402dee:	461a      	mov	r2, r3
  402df0:	f107 0308 	add.w	r3, r7, #8
  402df4:	9500      	str	r5, [sp, #0]
  402df6:	9401      	str	r4, [sp, #4]
  402df8:	9002      	str	r0, [sp, #8]
  402dfa:	9103      	str	r1, [sp, #12]
  402dfc:	9204      	str	r2, [sp, #16]
  402dfe:	4618      	mov	r0, r3
  402e00:	4959      	ldr	r1, [pc, #356]	; (402f68 <main+0x300>)
  402e02:	6e7a      	ldr	r2, [r7, #100]	; 0x64
  402e04:	4633      	mov	r3, r6
  402e06:	4c59      	ldr	r4, [pc, #356]	; (402f6c <main+0x304>)
  402e08:	47a0      	blx	r4
				func_transmit(printStr,strlen(printStr));
  402e0a:	f107 0308 	add.w	r3, r7, #8
  402e0e:	4618      	mov	r0, r3
  402e10:	4b57      	ldr	r3, [pc, #348]	; (402f70 <main+0x308>)
  402e12:	4798      	blx	r3
  402e14:	4602      	mov	r2, r0
  402e16:	f107 0308 	add.w	r3, r7, #8
  402e1a:	4618      	mov	r0, r3
  402e1c:	4611      	mov	r1, r2
  402e1e:	4b51      	ldr	r3, [pc, #324]	; (402f64 <main+0x2fc>)
  402e20:	4798      	blx	r3
  402e22:	e003      	b.n	402e2c <main+0x1c4>
			}
		}
		else
		{
			func_transmit("no board this slot\r\n", strlen("no board this slot\r\n"));
  402e24:	4853      	ldr	r0, [pc, #332]	; (402f74 <main+0x30c>)
  402e26:	2114      	movs	r1, #20
  402e28:	4b4e      	ldr	r3, [pc, #312]	; (402f64 <main+0x2fc>)
  402e2a:	4798      	blx	r3
	ioport_set_pin_dir(ECLAVE_SERIAL_ID4, IOPORT_DIR_OUTPUT);
	ioport_set_pin_level(ECLAVE_SERIAL_ID4, IOPORT_PIN_LEVEL_HIGH);

	SetSpeed(1); //1==standard speed, not overdrive 
	
	for (int i=0; i<5; i++)
  402e2c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
  402e2e:	3301      	adds	r3, #1
  402e30:	667b      	str	r3, [r7, #100]	; 0x64
  402e32:	6e7b      	ldr	r3, [r7, #100]	; 0x64
  402e34:	2b04      	cmp	r3, #4
  402e36:	f77f af7b 	ble.w	402d30 <main+0xc8>

	/*
	 * End of minimalist serial ID chip stuff
	 */

	twi_init();
  402e3a:	4b4f      	ldr	r3, [pc, #316]	; (402f78 <main+0x310>)
  402e3c:	4798      	blx	r3

//make this ecII jsi 7feb16	gpio_set_pin_high(ECLAVE_LED_OEn); //make sure outputs are disabled at the chip level

	PCA9952_init();
  402e3e:	4b4f      	ldr	r3, [pc, #316]	; (402f7c <main+0x314>)
  402e40:	4798      	blx	r3
	
	/*
	 * Enable transmitter here, and disable receiver first, to avoid receiving
	 * characters sent by itself. It's necessary for half duplex RS485.
	 */
	usart_enable_tx(BOARD_USART);
  402e42:	484f      	ldr	r0, [pc, #316]	; (402f80 <main+0x318>)
  402e44:	4b4f      	ldr	r3, [pc, #316]	; (402f84 <main+0x31c>)
  402e46:	4798      	blx	r3
	usart_enable_rx(BOARD_USART);
  402e48:	484d      	ldr	r0, [pc, #308]	; (402f80 <main+0x318>)
  402e4a:	4b4f      	ldr	r3, [pc, #316]	; (402f88 <main+0x320>)
  402e4c:	4798      	blx	r3

	while (1) {

		/* Test the debug LED */
		ioport_toggle_pin_level(EXAMPLE_LED_GPIO);
  402e4e:	2050      	movs	r0, #80	; 0x50
  402e50:	4b4e      	ldr	r3, [pc, #312]	; (402f8c <main+0x324>)
  402e52:	4798      	blx	r3


		/* Test the debug usart rx and tx */
		for (i=0; i<70; i++) //7 seconds
  402e54:	2300      	movs	r3, #0
  402e56:	66fb      	str	r3, [r7, #108]	; 0x6c
  402e58:	e017      	b.n	402e8a <main+0x222>
		{
			mdelay(100);
  402e5a:	2064      	movs	r0, #100	; 0x64
  402e5c:	4b4c      	ldr	r3, [pc, #304]	; (402f90 <main+0x328>)
  402e5e:	4798      	blx	r3
		
			if (usart_is_rx_ready(BOARD_USART)) {
  402e60:	4847      	ldr	r0, [pc, #284]	; (402f80 <main+0x318>)
  402e62:	4b4c      	ldr	r3, [pc, #304]	; (402f94 <main+0x32c>)
  402e64:	4798      	blx	r3
  402e66:	4603      	mov	r3, r0
  402e68:	2b00      	cmp	r3, #0
  402e6a:	d00b      	beq.n	402e84 <main+0x21c>
				usart_read(BOARD_USART, (uint32_t *)&rxByte);
  402e6c:	f107 034b 	add.w	r3, r7, #75	; 0x4b
  402e70:	4843      	ldr	r0, [pc, #268]	; (402f80 <main+0x318>)
  402e72:	4619      	mov	r1, r3
  402e74:	4b48      	ldr	r3, [pc, #288]	; (402f98 <main+0x330>)
  402e76:	4798      	blx	r3
				func_transmit(&rxByte, 1);
  402e78:	f107 034b 	add.w	r3, r7, #75	; 0x4b
  402e7c:	4618      	mov	r0, r3
  402e7e:	2101      	movs	r1, #1
  402e80:	4b38      	ldr	r3, [pc, #224]	; (402f64 <main+0x2fc>)
  402e82:	4798      	blx	r3
		/* Test the debug LED */
		ioport_toggle_pin_level(EXAMPLE_LED_GPIO);


		/* Test the debug usart rx and tx */
		for (i=0; i<70; i++) //7 seconds
  402e84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
  402e86:	3301      	adds	r3, #1
  402e88:	66fb      	str	r3, [r7, #108]	; 0x6c
  402e8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
  402e8c:	2b45      	cmp	r3, #69	; 0x45
  402e8e:	d9e4      	bls.n	402e5a <main+0x1f2>
				func_transmit(&rxByte, 1);
			}
		}

		/* Test the scrolling blue LED display */
		for (charCount = 0; charCount < 7; charCount++)
  402e90:	2300      	movs	r3, #0
  402e92:	f887 306a 	strb.w	r3, [r7, #106]	; 0x6a
  402e96:	e099      	b.n	402fcc <main+0x364>
		{
			unsigned char temp;
			temp = (*(cmdPtrArray[displayState]+charCount));
  402e98:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
  402e9c:	4a3f      	ldr	r2, [pc, #252]	; (402f9c <main+0x334>)
  402e9e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
  402ea2:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
  402ea6:	4413      	add	r3, r2
  402ea8:	781b      	ldrb	r3, [r3, #0]
  402eaa:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
			putchar(temp);
  402eae:	4b3c      	ldr	r3, [pc, #240]	; (402fa0 <main+0x338>)
  402eb0:	681b      	ldr	r3, [r3, #0]
  402eb2:	689b      	ldr	r3, [r3, #8]
  402eb4:	689a      	ldr	r2, [r3, #8]
  402eb6:	3a01      	subs	r2, #1
  402eb8:	609a      	str	r2, [r3, #8]
  402eba:	689b      	ldr	r3, [r3, #8]
  402ebc:	2b00      	cmp	r3, #0
  402ebe:	da73      	bge.n	402fa8 <main+0x340>
  402ec0:	4b37      	ldr	r3, [pc, #220]	; (402fa0 <main+0x338>)
  402ec2:	681b      	ldr	r3, [r3, #0]
  402ec4:	689b      	ldr	r3, [r3, #8]
  402ec6:	689a      	ldr	r2, [r3, #8]
  402ec8:	4b35      	ldr	r3, [pc, #212]	; (402fa0 <main+0x338>)
  402eca:	681b      	ldr	r3, [r3, #0]
  402ecc:	689b      	ldr	r3, [r3, #8]
  402ece:	699b      	ldr	r3, [r3, #24]
  402ed0:	429a      	cmp	r2, r3
  402ed2:	db1f      	blt.n	402f14 <main+0x2ac>
  402ed4:	4b32      	ldr	r3, [pc, #200]	; (402fa0 <main+0x338>)
  402ed6:	681b      	ldr	r3, [r3, #0]
  402ed8:	689b      	ldr	r3, [r3, #8]
  402eda:	681b      	ldr	r3, [r3, #0]
  402edc:	f897 2059 	ldrb.w	r2, [r7, #89]	; 0x59
  402ee0:	701a      	strb	r2, [r3, #0]
  402ee2:	4b2f      	ldr	r3, [pc, #188]	; (402fa0 <main+0x338>)
  402ee4:	681b      	ldr	r3, [r3, #0]
  402ee6:	689b      	ldr	r3, [r3, #8]
  402ee8:	681b      	ldr	r3, [r3, #0]
  402eea:	781b      	ldrb	r3, [r3, #0]
  402eec:	2b0a      	cmp	r3, #10
  402eee:	d006      	beq.n	402efe <main+0x296>
  402ef0:	4b2b      	ldr	r3, [pc, #172]	; (402fa0 <main+0x338>)
  402ef2:	681b      	ldr	r3, [r3, #0]
  402ef4:	689b      	ldr	r3, [r3, #8]
  402ef6:	681a      	ldr	r2, [r3, #0]
  402ef8:	3201      	adds	r2, #1
  402efa:	601a      	str	r2, [r3, #0]
  402efc:	e061      	b.n	402fc2 <main+0x35a>
  402efe:	4b28      	ldr	r3, [pc, #160]	; (402fa0 <main+0x338>)
  402f00:	681a      	ldr	r2, [r3, #0]
  402f02:	4b27      	ldr	r3, [pc, #156]	; (402fa0 <main+0x338>)
  402f04:	681b      	ldr	r3, [r3, #0]
  402f06:	689b      	ldr	r3, [r3, #8]
  402f08:	4610      	mov	r0, r2
  402f0a:	210a      	movs	r1, #10
  402f0c:	461a      	mov	r2, r3
  402f0e:	4b25      	ldr	r3, [pc, #148]	; (402fa4 <main+0x33c>)
  402f10:	4798      	blx	r3
  402f12:	e056      	b.n	402fc2 <main+0x35a>
  402f14:	4b22      	ldr	r3, [pc, #136]	; (402fa0 <main+0x338>)
  402f16:	6819      	ldr	r1, [r3, #0]
  402f18:	f897 2059 	ldrb.w	r2, [r7, #89]	; 0x59
  402f1c:	4b20      	ldr	r3, [pc, #128]	; (402fa0 <main+0x338>)
  402f1e:	681b      	ldr	r3, [r3, #0]
  402f20:	689b      	ldr	r3, [r3, #8]
  402f22:	4608      	mov	r0, r1
  402f24:	4611      	mov	r1, r2
  402f26:	461a      	mov	r2, r3
  402f28:	4b1e      	ldr	r3, [pc, #120]	; (402fa4 <main+0x33c>)
  402f2a:	4798      	blx	r3
  402f2c:	e049      	b.n	402fc2 <main+0x35a>
  402f2e:	bf00      	nop
  402f30:	00400491 	.word	0x00400491
  402f34:	00400a6d 	.word	0x00400a6d
  402f38:	00402b89 	.word	0x00402b89
  402f3c:	00402ac5 	.word	0x00402ac5
  402f40:	00402b45 	.word	0x00402b45
  402f44:	004024a9 	.word	0x004024a9
  402f48:	00402531 	.word	0x00402531
  402f4c:	00401fc5 	.word	0x00401fc5
  402f50:	00402081 	.word	0x00402081
  402f54:	00402221 	.word	0x00402221
  402f58:	00402261 	.word	0x00402261
  402f5c:	004022ad 	.word	0x004022ad
  402f60:	00408980 	.word	0x00408980
  402f64:	00402bc1 	.word	0x00402bc1
  402f68:	004089a0 	.word	0x004089a0
  402f6c:	00403365 	.word	0x00403365
  402f70:	004033b1 	.word	0x004033b1
  402f74:	004089c8 	.word	0x004089c8
  402f78:	00402c25 	.word	0x00402c25
  402f7c:	00401b31 	.word	0x00401b31
  402f80:	40024000 	.word	0x40024000
  402f84:	00401505 	.word	0x00401505
  402f88:	00401551 	.word	0x00401551
  402f8c:	0040259d 	.word	0x0040259d
  402f90:	004029e1 	.word	0x004029e1
  402f94:	00401631 	.word	0x00401631
  402f98:	0040168d 	.word	0x0040168d
  402f9c:	20400058 	.word	0x20400058
  402fa0:	204004a8 	.word	0x204004a8
  402fa4:	0040491d 	.word	0x0040491d
  402fa8:	4b47      	ldr	r3, [pc, #284]	; (4030c8 <main+0x460>)
  402faa:	681b      	ldr	r3, [r3, #0]
  402fac:	689b      	ldr	r3, [r3, #8]
  402fae:	681b      	ldr	r3, [r3, #0]
  402fb0:	f897 2059 	ldrb.w	r2, [r7, #89]	; 0x59
  402fb4:	701a      	strb	r2, [r3, #0]
  402fb6:	4b44      	ldr	r3, [pc, #272]	; (4030c8 <main+0x460>)
  402fb8:	681b      	ldr	r3, [r3, #0]
  402fba:	689b      	ldr	r3, [r3, #8]
  402fbc:	681a      	ldr	r2, [r3, #0]
  402fbe:	3201      	adds	r2, #1
  402fc0:	601a      	str	r2, [r3, #0]
				func_transmit(&rxByte, 1);
			}
		}

		/* Test the scrolling blue LED display */
		for (charCount = 0; charCount < 7; charCount++)
  402fc2:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
  402fc6:	3301      	adds	r3, #1
  402fc8:	f887 306a 	strb.w	r3, [r7, #106]	; 0x6a
  402fcc:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
  402fd0:	2b06      	cmp	r3, #6
  402fd2:	f67f af61 	bls.w	402e98 <main+0x230>
			putchar(temp);
		}
		
		/* Test the debug port */

		switch (displayState)
  402fd6:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
  402fda:	2b08      	cmp	r3, #8
  402fdc:	d85a      	bhi.n	403094 <main+0x42c>
  402fde:	a201      	add	r2, pc, #4	; (adr r2, 402fe4 <main+0x37c>)
  402fe0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  402fe4:	00403009 	.word	0x00403009
  402fe8:	00403019 	.word	0x00403019
  402fec:	00403029 	.word	0x00403029
  402ff0:	0040303d 	.word	0x0040303d
  402ff4:	0040304d 	.word	0x0040304d
  402ff8:	0040305d 	.word	0x0040305d
  402ffc:	0040306b 	.word	0x0040306b
  403000:	00403079 	.word	0x00403079
  403004:	00403087 	.word	0x00403087
		{
			case IDX_READY:
				sprintf(txBuf, "Ready\r\n");
  403008:	f107 034c 	add.w	r3, r7, #76	; 0x4c
  40300c:	4a2f      	ldr	r2, [pc, #188]	; (4030cc <main+0x464>)
  40300e:	e892 0003 	ldmia.w	r2, {r0, r1}
  403012:	e883 0003 	stmia.w	r3, {r0, r1}
				break;
  403016:	e03d      	b.n	403094 <main+0x42c>
			case IDX_CLEAN:
				sprintf(txBuf, "Clean\r\n");
  403018:	f107 034c 	add.w	r3, r7, #76	; 0x4c
  40301c:	4a2c      	ldr	r2, [pc, #176]	; (4030d0 <main+0x468>)
  40301e:	e892 0003 	ldmia.w	r2, {r0, r1}
  403022:	e883 0003 	stmia.w	r3, {r0, r1}
				break;
  403026:	e035      	b.n	403094 <main+0x42c>
			case IDX_CLEANING:
				sprintf(txBuf, "Cleaning\r\n");
  403028:	4a2a      	ldr	r2, [pc, #168]	; (4030d4 <main+0x46c>)
  40302a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
  40302e:	ca07      	ldmia	r2, {r0, r1, r2}
  403030:	c303      	stmia	r3!, {r0, r1}
  403032:	801a      	strh	r2, [r3, #0]
  403034:	3302      	adds	r3, #2
  403036:	0c12      	lsrs	r2, r2, #16
  403038:	701a      	strb	r2, [r3, #0]
				break;
  40303a:	e02b      	b.n	403094 <main+0x42c>
			case IDX_DIRTY:
				sprintf(txBuf, "Dirty\r\n");
  40303c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
  403040:	4a25      	ldr	r2, [pc, #148]	; (4030d8 <main+0x470>)
  403042:	e892 0003 	ldmia.w	r2, {r0, r1}
  403046:	e883 0003 	stmia.w	r3, {r0, r1}
				break;
  40304a:	e023      	b.n	403094 <main+0x42c>
			case IDX_ERROR:
				sprintf(txBuf, "Error\r\n");
  40304c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
  403050:	4a22      	ldr	r2, [pc, #136]	; (4030dc <main+0x474>)
  403052:	e892 0003 	ldmia.w	r2, {r0, r1}
  403056:	e883 0003 	stmia.w	r3, {r0, r1}
				break;
  40305a:	e01b      	b.n	403094 <main+0x42c>
			case IDX_SHELF1:
				sprintf(txBuf, "Shelf1\r\n");
  40305c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
  403060:	4a1f      	ldr	r2, [pc, #124]	; (4030e0 <main+0x478>)
  403062:	ca07      	ldmia	r2, {r0, r1, r2}
  403064:	c303      	stmia	r3!, {r0, r1}
  403066:	701a      	strb	r2, [r3, #0]
				break;
  403068:	e014      	b.n	403094 <main+0x42c>
			case IDX_SHELF2:
				sprintf(txBuf, "Shelf2\r\n");
  40306a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
  40306e:	4a1d      	ldr	r2, [pc, #116]	; (4030e4 <main+0x47c>)
  403070:	ca07      	ldmia	r2, {r0, r1, r2}
  403072:	c303      	stmia	r3!, {r0, r1}
  403074:	701a      	strb	r2, [r3, #0]
				break;
  403076:	e00d      	b.n	403094 <main+0x42c>
			case IDX_SHELF3:
				sprintf(txBuf, "Shelf3\r\n");
  403078:	f107 034c 	add.w	r3, r7, #76	; 0x4c
  40307c:	4a1a      	ldr	r2, [pc, #104]	; (4030e8 <main+0x480>)
  40307e:	ca07      	ldmia	r2, {r0, r1, r2}
  403080:	c303      	stmia	r3!, {r0, r1}
  403082:	701a      	strb	r2, [r3, #0]
				break;
  403084:	e006      	b.n	403094 <main+0x42c>
			case IDX_SHELF4:
				sprintf(txBuf, "Shelf4\r\n");
  403086:	f107 034c 	add.w	r3, r7, #76	; 0x4c
  40308a:	4a18      	ldr	r2, [pc, #96]	; (4030ec <main+0x484>)
  40308c:	ca07      	ldmia	r2, {r0, r1, r2}
  40308e:	c303      	stmia	r3!, {r0, r1}
  403090:	701a      	strb	r2, [r3, #0]
				break;
  403092:	bf00      	nop
		}
		
		func_transmit(txBuf, strlen(txBuf));
  403094:	f107 034c 	add.w	r3, r7, #76	; 0x4c
  403098:	4618      	mov	r0, r3
  40309a:	4b15      	ldr	r3, [pc, #84]	; (4030f0 <main+0x488>)
  40309c:	4798      	blx	r3
  40309e:	4602      	mov	r2, r0
  4030a0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
  4030a4:	4618      	mov	r0, r3
  4030a6:	4611      	mov	r1, r2
  4030a8:	4b12      	ldr	r3, [pc, #72]	; (4030f4 <main+0x48c>)
  4030aa:	4798      	blx	r3


		if ((++displayState) > 8)
  4030ac:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
  4030b0:	3301      	adds	r3, #1
  4030b2:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
  4030b6:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
  4030ba:	2b08      	cmp	r3, #8
  4030bc:	d902      	bls.n	4030c4 <main+0x45c>
		{
			displayState = 0;
  4030be:	2300      	movs	r3, #0
  4030c0:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
		}
		
		
	}
  4030c4:	e6c3      	b.n	402e4e <main+0x1e6>
  4030c6:	bf00      	nop
  4030c8:	204004a8 	.word	0x204004a8
  4030cc:	004089e0 	.word	0x004089e0
  4030d0:	004089e8 	.word	0x004089e8
  4030d4:	00408a30 	.word	0x00408a30
  4030d8:	004089f0 	.word	0x004089f0
  4030dc:	004089f8 	.word	0x004089f8
  4030e0:	00408a00 	.word	0x00408a00
  4030e4:	00408a0c 	.word	0x00408a0c
  4030e8:	00408a18 	.word	0x00408a18
  4030ec:	00408a24 	.word	0x00408a24
  4030f0:	004033b1 	.word	0x004033b1
  4030f4:	00402bc1 	.word	0x00402bc1

004030f8 <__libc_init_array>:
  4030f8:	b570      	push	{r4, r5, r6, lr}
  4030fa:	4e0f      	ldr	r6, [pc, #60]	; (403138 <__libc_init_array+0x40>)
  4030fc:	4d0f      	ldr	r5, [pc, #60]	; (40313c <__libc_init_array+0x44>)
  4030fe:	1b76      	subs	r6, r6, r5
  403100:	10b6      	asrs	r6, r6, #2
  403102:	bf18      	it	ne
  403104:	2400      	movne	r4, #0
  403106:	d005      	beq.n	403114 <__libc_init_array+0x1c>
  403108:	3401      	adds	r4, #1
  40310a:	f855 3b04 	ldr.w	r3, [r5], #4
  40310e:	4798      	blx	r3
  403110:	42a6      	cmp	r6, r4
  403112:	d1f9      	bne.n	403108 <__libc_init_array+0x10>
  403114:	4e0a      	ldr	r6, [pc, #40]	; (403140 <__libc_init_array+0x48>)
  403116:	f005 fdcf 	bl	408cb8 <_init>
  40311a:	4d0a      	ldr	r5, [pc, #40]	; (403144 <__libc_init_array+0x4c>)
  40311c:	1b76      	subs	r6, r6, r5
  40311e:	10b6      	asrs	r6, r6, #2
  403120:	bf18      	it	ne
  403122:	2400      	movne	r4, #0
  403124:	d006      	beq.n	403134 <__libc_init_array+0x3c>
  403126:	3401      	adds	r4, #1
  403128:	f855 3b04 	ldr.w	r3, [r5], #4
  40312c:	4798      	blx	r3
  40312e:	42a6      	cmp	r6, r4
  403130:	d1f9      	bne.n	403126 <__libc_init_array+0x2e>
  403132:	bd70      	pop	{r4, r5, r6, pc}
  403134:	bd70      	pop	{r4, r5, r6, pc}
  403136:	bf00      	nop
  403138:	00408cc4 	.word	0x00408cc4
  40313c:	00408cc4 	.word	0x00408cc4
  403140:	00408ccc 	.word	0x00408ccc
  403144:	00408cc4 	.word	0x00408cc4

00403148 <memset>:
  403148:	0783      	lsls	r3, r0, #30
  40314a:	b470      	push	{r4, r5, r6}
  40314c:	d049      	beq.n	4031e2 <memset+0x9a>
  40314e:	1e54      	subs	r4, r2, #1
  403150:	2a00      	cmp	r2, #0
  403152:	d044      	beq.n	4031de <memset+0x96>
  403154:	b2cd      	uxtb	r5, r1
  403156:	4603      	mov	r3, r0
  403158:	e002      	b.n	403160 <memset+0x18>
  40315a:	2c00      	cmp	r4, #0
  40315c:	d03f      	beq.n	4031de <memset+0x96>
  40315e:	4614      	mov	r4, r2
  403160:	f803 5b01 	strb.w	r5, [r3], #1
  403164:	f013 0f03 	tst.w	r3, #3
  403168:	f104 32ff 	add.w	r2, r4, #4294967295
  40316c:	d1f5      	bne.n	40315a <memset+0x12>
  40316e:	2c03      	cmp	r4, #3
  403170:	d92e      	bls.n	4031d0 <memset+0x88>
  403172:	b2cd      	uxtb	r5, r1
  403174:	2c0f      	cmp	r4, #15
  403176:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  40317a:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  40317e:	d919      	bls.n	4031b4 <memset+0x6c>
  403180:	f103 0210 	add.w	r2, r3, #16
  403184:	4626      	mov	r6, r4
  403186:	3e10      	subs	r6, #16
  403188:	f842 5c10 	str.w	r5, [r2, #-16]
  40318c:	f842 5c0c 	str.w	r5, [r2, #-12]
  403190:	3210      	adds	r2, #16
  403192:	2e0f      	cmp	r6, #15
  403194:	f842 5c18 	str.w	r5, [r2, #-24]
  403198:	f842 5c14 	str.w	r5, [r2, #-20]
  40319c:	d8f3      	bhi.n	403186 <memset+0x3e>
  40319e:	f1a4 0210 	sub.w	r2, r4, #16
  4031a2:	f004 040f 	and.w	r4, r4, #15
  4031a6:	f022 020f 	bic.w	r2, r2, #15
  4031aa:	2c03      	cmp	r4, #3
  4031ac:	f102 0210 	add.w	r2, r2, #16
  4031b0:	4413      	add	r3, r2
  4031b2:	d90d      	bls.n	4031d0 <memset+0x88>
  4031b4:	461e      	mov	r6, r3
  4031b6:	4622      	mov	r2, r4
  4031b8:	3a04      	subs	r2, #4
  4031ba:	f846 5b04 	str.w	r5, [r6], #4
  4031be:	2a03      	cmp	r2, #3
  4031c0:	d8fa      	bhi.n	4031b8 <memset+0x70>
  4031c2:	1f22      	subs	r2, r4, #4
  4031c4:	f004 0403 	and.w	r4, r4, #3
  4031c8:	f022 0203 	bic.w	r2, r2, #3
  4031cc:	3204      	adds	r2, #4
  4031ce:	4413      	add	r3, r2
  4031d0:	b12c      	cbz	r4, 4031de <memset+0x96>
  4031d2:	b2c9      	uxtb	r1, r1
  4031d4:	441c      	add	r4, r3
  4031d6:	f803 1b01 	strb.w	r1, [r3], #1
  4031da:	42a3      	cmp	r3, r4
  4031dc:	d1fb      	bne.n	4031d6 <memset+0x8e>
  4031de:	bc70      	pop	{r4, r5, r6}
  4031e0:	4770      	bx	lr
  4031e2:	4614      	mov	r4, r2
  4031e4:	4603      	mov	r3, r0
  4031e6:	e7c2      	b.n	40316e <memset+0x26>

004031e8 <_puts_r>:
  4031e8:	b5f0      	push	{r4, r5, r6, r7, lr}
  4031ea:	4604      	mov	r4, r0
  4031ec:	b089      	sub	sp, #36	; 0x24
  4031ee:	4608      	mov	r0, r1
  4031f0:	460d      	mov	r5, r1
  4031f2:	f000 f8dd 	bl	4033b0 <strlen>
  4031f6:	68a3      	ldr	r3, [r4, #8]
  4031f8:	2701      	movs	r7, #1
  4031fa:	2102      	movs	r1, #2
  4031fc:	899a      	ldrh	r2, [r3, #12]
  4031fe:	ae04      	add	r6, sp, #16
  403200:	eb00 0c07 	add.w	ip, r0, r7
  403204:	f8df e03c 	ldr.w	lr, [pc, #60]	; 403244 <_puts_r+0x5c>
  403208:	9102      	str	r1, [sp, #8]
  40320a:	0491      	lsls	r1, r2, #18
  40320c:	9504      	str	r5, [sp, #16]
  40320e:	9005      	str	r0, [sp, #20]
  403210:	f8cd c00c 	str.w	ip, [sp, #12]
  403214:	f8cd e018 	str.w	lr, [sp, #24]
  403218:	9707      	str	r7, [sp, #28]
  40321a:	9601      	str	r6, [sp, #4]
  40321c:	d406      	bmi.n	40322c <_puts_r+0x44>
  40321e:	6e59      	ldr	r1, [r3, #100]	; 0x64
  403220:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  403224:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  403228:	819a      	strh	r2, [r3, #12]
  40322a:	6659      	str	r1, [r3, #100]	; 0x64
  40322c:	4620      	mov	r0, r4
  40322e:	4619      	mov	r1, r3
  403230:	aa01      	add	r2, sp, #4
  403232:	f002 fed1 	bl	405fd8 <__sfvwrite_r>
  403236:	2800      	cmp	r0, #0
  403238:	bf14      	ite	ne
  40323a:	f04f 30ff 	movne.w	r0, #4294967295
  40323e:	200a      	moveq	r0, #10
  403240:	b009      	add	sp, #36	; 0x24
  403242:	bdf0      	pop	{r4, r5, r6, r7, pc}
  403244:	00408b30 	.word	0x00408b30

00403248 <puts>:
  403248:	4b02      	ldr	r3, [pc, #8]	; (403254 <puts+0xc>)
  40324a:	4601      	mov	r1, r0
  40324c:	6818      	ldr	r0, [r3, #0]
  40324e:	f7ff bfcb 	b.w	4031e8 <_puts_r>
  403252:	bf00      	nop
  403254:	204004a8 	.word	0x204004a8

00403258 <setbuf>:
  403258:	2900      	cmp	r1, #0
  40325a:	f44f 6380 	mov.w	r3, #1024	; 0x400
  40325e:	bf0c      	ite	eq
  403260:	2202      	moveq	r2, #2
  403262:	2200      	movne	r2, #0
  403264:	f000 b800 	b.w	403268 <setvbuf>

00403268 <setvbuf>:
  403268:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40326c:	4e3b      	ldr	r6, [pc, #236]	; (40335c <setvbuf+0xf4>)
  40326e:	4604      	mov	r4, r0
  403270:	460d      	mov	r5, r1
  403272:	4690      	mov	r8, r2
  403274:	6837      	ldr	r7, [r6, #0]
  403276:	461e      	mov	r6, r3
  403278:	b117      	cbz	r7, 403280 <setvbuf+0x18>
  40327a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
  40327c:	2b00      	cmp	r3, #0
  40327e:	d03f      	beq.n	403300 <setvbuf+0x98>
  403280:	f1b8 0f02 	cmp.w	r8, #2
  403284:	d832      	bhi.n	4032ec <setvbuf+0x84>
  403286:	ea5f 79d6 	movs.w	r9, r6, lsr #31
  40328a:	d12f      	bne.n	4032ec <setvbuf+0x84>
  40328c:	4621      	mov	r1, r4
  40328e:	4638      	mov	r0, r7
  403290:	f002 fcc2 	bl	405c18 <_fflush_r>
  403294:	89a1      	ldrh	r1, [r4, #12]
  403296:	f8c4 9004 	str.w	r9, [r4, #4]
  40329a:	060b      	lsls	r3, r1, #24
  40329c:	f8c4 9018 	str.w	r9, [r4, #24]
  4032a0:	d428      	bmi.n	4032f4 <setvbuf+0x8c>
  4032a2:	f021 0183 	bic.w	r1, r1, #131	; 0x83
  4032a6:	f1b8 0f02 	cmp.w	r8, #2
  4032aa:	b289      	uxth	r1, r1
  4032ac:	81a1      	strh	r1, [r4, #12]
  4032ae:	d02b      	beq.n	403308 <setvbuf+0xa0>
  4032b0:	2d00      	cmp	r5, #0
  4032b2:	d037      	beq.n	403324 <setvbuf+0xbc>
  4032b4:	f1b8 0f01 	cmp.w	r8, #1
  4032b8:	d012      	beq.n	4032e0 <setvbuf+0x78>
  4032ba:	b289      	uxth	r1, r1
  4032bc:	4b28      	ldr	r3, [pc, #160]	; (403360 <setvbuf+0xf8>)
  4032be:	f001 0008 	and.w	r0, r1, #8
  4032c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  4032c4:	6025      	str	r5, [r4, #0]
  4032c6:	b280      	uxth	r0, r0
  4032c8:	6125      	str	r5, [r4, #16]
  4032ca:	6166      	str	r6, [r4, #20]
  4032cc:	b180      	cbz	r0, 4032f0 <setvbuf+0x88>
  4032ce:	f011 0f03 	tst.w	r1, #3
  4032d2:	f04f 0000 	mov.w	r0, #0
  4032d6:	bf18      	it	ne
  4032d8:	4606      	movne	r6, r0
  4032da:	60a6      	str	r6, [r4, #8]
  4032dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4032e0:	f041 0101 	orr.w	r1, r1, #1
  4032e4:	4273      	negs	r3, r6
  4032e6:	81a1      	strh	r1, [r4, #12]
  4032e8:	61a3      	str	r3, [r4, #24]
  4032ea:	e7e6      	b.n	4032ba <setvbuf+0x52>
  4032ec:	f04f 30ff 	mov.w	r0, #4294967295
  4032f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4032f4:	6921      	ldr	r1, [r4, #16]
  4032f6:	4638      	mov	r0, r7
  4032f8:	f002 fd96 	bl	405e28 <_free_r>
  4032fc:	89a1      	ldrh	r1, [r4, #12]
  4032fe:	e7d0      	b.n	4032a2 <setvbuf+0x3a>
  403300:	4638      	mov	r0, r7
  403302:	f002 fd23 	bl	405d4c <__sinit>
  403306:	e7bb      	b.n	403280 <setvbuf+0x18>
  403308:	2000      	movs	r0, #0
  40330a:	f104 0343 	add.w	r3, r4, #67	; 0x43
  40330e:	f041 0102 	orr.w	r1, r1, #2
  403312:	2500      	movs	r5, #0
  403314:	2201      	movs	r2, #1
  403316:	81a1      	strh	r1, [r4, #12]
  403318:	60a5      	str	r5, [r4, #8]
  40331a:	6023      	str	r3, [r4, #0]
  40331c:	6123      	str	r3, [r4, #16]
  40331e:	6162      	str	r2, [r4, #20]
  403320:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  403324:	2e00      	cmp	r6, #0
  403326:	bf08      	it	eq
  403328:	f44f 6680 	moveq.w	r6, #1024	; 0x400
  40332c:	4630      	mov	r0, r6
  40332e:	f003 f883 	bl	406438 <malloc>
  403332:	4605      	mov	r5, r0
  403334:	b128      	cbz	r0, 403342 <setvbuf+0xda>
  403336:	89a1      	ldrh	r1, [r4, #12]
  403338:	f041 0180 	orr.w	r1, r1, #128	; 0x80
  40333c:	b289      	uxth	r1, r1
  40333e:	81a1      	strh	r1, [r4, #12]
  403340:	e7b8      	b.n	4032b4 <setvbuf+0x4c>
  403342:	f44f 6080 	mov.w	r0, #1024	; 0x400
  403346:	f003 f877 	bl	406438 <malloc>
  40334a:	4605      	mov	r5, r0
  40334c:	b918      	cbnz	r0, 403356 <setvbuf+0xee>
  40334e:	89a1      	ldrh	r1, [r4, #12]
  403350:	f04f 30ff 	mov.w	r0, #4294967295
  403354:	e7d9      	b.n	40330a <setvbuf+0xa2>
  403356:	f44f 6680 	mov.w	r6, #1024	; 0x400
  40335a:	e7ec      	b.n	403336 <setvbuf+0xce>
  40335c:	204004a8 	.word	0x204004a8
  403360:	00405c45 	.word	0x00405c45

00403364 <sprintf>:
  403364:	b40e      	push	{r1, r2, r3}
  403366:	b5f0      	push	{r4, r5, r6, r7, lr}
  403368:	b09c      	sub	sp, #112	; 0x70
  40336a:	4b10      	ldr	r3, [pc, #64]	; (4033ac <sprintf+0x48>)
  40336c:	4606      	mov	r6, r0
  40336e:	f44f 7e02 	mov.w	lr, #520	; 0x208
  403372:	ac21      	add	r4, sp, #132	; 0x84
  403374:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
  403378:	f64f 77ff 	movw	r7, #65535	; 0xffff
  40337c:	6818      	ldr	r0, [r3, #0]
  40337e:	f854 2b04 	ldr.w	r2, [r4], #4
  403382:	a902      	add	r1, sp, #8
  403384:	9602      	str	r6, [sp, #8]
  403386:	4623      	mov	r3, r4
  403388:	9606      	str	r6, [sp, #24]
  40338a:	9401      	str	r4, [sp, #4]
  40338c:	f8ad e014 	strh.w	lr, [sp, #20]
  403390:	9504      	str	r5, [sp, #16]
  403392:	9507      	str	r5, [sp, #28]
  403394:	f8ad 7016 	strh.w	r7, [sp, #22]
  403398:	f000 f838 	bl	40340c <_svfprintf_r>
  40339c:	9b02      	ldr	r3, [sp, #8]
  40339e:	2200      	movs	r2, #0
  4033a0:	701a      	strb	r2, [r3, #0]
  4033a2:	b01c      	add	sp, #112	; 0x70
  4033a4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  4033a8:	b003      	add	sp, #12
  4033aa:	4770      	bx	lr
  4033ac:	204004a8 	.word	0x204004a8

004033b0 <strlen>:
  4033b0:	f020 0103 	bic.w	r1, r0, #3
  4033b4:	f010 0003 	ands.w	r0, r0, #3
  4033b8:	f1c0 0000 	rsb	r0, r0, #0
  4033bc:	f851 3b04 	ldr.w	r3, [r1], #4
  4033c0:	f100 0c04 	add.w	ip, r0, #4
  4033c4:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
  4033c8:	f06f 0200 	mvn.w	r2, #0
  4033cc:	bf1c      	itt	ne
  4033ce:	fa22 f20c 	lsrne.w	r2, r2, ip
  4033d2:	4313      	orrne	r3, r2
  4033d4:	f04f 0c01 	mov.w	ip, #1
  4033d8:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
  4033dc:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
  4033e0:	eba3 020c 	sub.w	r2, r3, ip
  4033e4:	ea22 0203 	bic.w	r2, r2, r3
  4033e8:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
  4033ec:	bf04      	itt	eq
  4033ee:	f851 3b04 	ldreq.w	r3, [r1], #4
  4033f2:	3004      	addeq	r0, #4
  4033f4:	d0f4      	beq.n	4033e0 <strlen+0x30>
  4033f6:	f1c2 0100 	rsb	r1, r2, #0
  4033fa:	ea02 0201 	and.w	r2, r2, r1
  4033fe:	fab2 f282 	clz	r2, r2
  403402:	f1c2 021f 	rsb	r2, r2, #31
  403406:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  40340a:	4770      	bx	lr

0040340c <_svfprintf_r>:
  40340c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403410:	b0c1      	sub	sp, #260	; 0x104
  403412:	4689      	mov	r9, r1
  403414:	9208      	str	r2, [sp, #32]
  403416:	930c      	str	r3, [sp, #48]	; 0x30
  403418:	9009      	str	r0, [sp, #36]	; 0x24
  40341a:	f002 ff97 	bl	40634c <_localeconv_r>
  40341e:	6803      	ldr	r3, [r0, #0]
  403420:	4618      	mov	r0, r3
  403422:	9316      	str	r3, [sp, #88]	; 0x58
  403424:	f7ff ffc4 	bl	4033b0 <strlen>
  403428:	f8b9 300c 	ldrh.w	r3, [r9, #12]
  40342c:	9017      	str	r0, [sp, #92]	; 0x5c
  40342e:	061d      	lsls	r5, r3, #24
  403430:	d504      	bpl.n	40343c <_svfprintf_r+0x30>
  403432:	f8d9 3010 	ldr.w	r3, [r9, #16]
  403436:	2b00      	cmp	r3, #0
  403438:	f001 8080 	beq.w	40453c <_svfprintf_r+0x1130>
  40343c:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  403440:	2300      	movs	r3, #0
  403442:	46c3      	mov	fp, r8
  403444:	9313      	str	r3, [sp, #76]	; 0x4c
  403446:	9314      	str	r3, [sp, #80]	; 0x50
  403448:	9312      	str	r3, [sp, #72]	; 0x48
  40344a:	9315      	str	r3, [sp, #84]	; 0x54
  40344c:	9319      	str	r3, [sp, #100]	; 0x64
  40344e:	930a      	str	r3, [sp, #40]	; 0x28
  403450:	9325      	str	r3, [sp, #148]	; 0x94
  403452:	9324      	str	r3, [sp, #144]	; 0x90
  403454:	f8cd 808c 	str.w	r8, [sp, #140]	; 0x8c
  403458:	9a08      	ldr	r2, [sp, #32]
  40345a:	7813      	ldrb	r3, [r2, #0]
  40345c:	2b25      	cmp	r3, #37	; 0x25
  40345e:	f000 80a6 	beq.w	4035ae <_svfprintf_r+0x1a2>
  403462:	b90b      	cbnz	r3, 403468 <_svfprintf_r+0x5c>
  403464:	e0a3      	b.n	4035ae <_svfprintf_r+0x1a2>
  403466:	b11b      	cbz	r3, 403470 <_svfprintf_r+0x64>
  403468:	f812 3f01 	ldrb.w	r3, [r2, #1]!
  40346c:	2b25      	cmp	r3, #37	; 0x25
  40346e:	d1fa      	bne.n	403466 <_svfprintf_r+0x5a>
  403470:	9908      	ldr	r1, [sp, #32]
  403472:	4614      	mov	r4, r2
  403474:	1a55      	subs	r5, r2, r1
  403476:	d010      	beq.n	40349a <_svfprintf_r+0x8e>
  403478:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40347a:	9a25      	ldr	r2, [sp, #148]	; 0x94
  40347c:	3301      	adds	r3, #1
  40347e:	f8cb 1000 	str.w	r1, [fp]
  403482:	442a      	add	r2, r5
  403484:	f8cb 5004 	str.w	r5, [fp, #4]
  403488:	2b07      	cmp	r3, #7
  40348a:	9324      	str	r3, [sp, #144]	; 0x90
  40348c:	9225      	str	r2, [sp, #148]	; 0x94
  40348e:	dc73      	bgt.n	403578 <_svfprintf_r+0x16c>
  403490:	f10b 0b08 	add.w	fp, fp, #8
  403494:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  403496:	442b      	add	r3, r5
  403498:	930a      	str	r3, [sp, #40]	; 0x28
  40349a:	7823      	ldrb	r3, [r4, #0]
  40349c:	2b00      	cmp	r3, #0
  40349e:	d073      	beq.n	403588 <_svfprintf_r+0x17c>
  4034a0:	2300      	movs	r3, #0
  4034a2:	f04f 3cff 	mov.w	ip, #4294967295
  4034a6:	1c61      	adds	r1, r4, #1
  4034a8:	7866      	ldrb	r6, [r4, #1]
  4034aa:	461a      	mov	r2, r3
  4034ac:	4664      	mov	r4, ip
  4034ae:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  4034b2:	930b      	str	r3, [sp, #44]	; 0x2c
  4034b4:	9306      	str	r3, [sp, #24]
  4034b6:	1c4b      	adds	r3, r1, #1
  4034b8:	f1a6 0120 	sub.w	r1, r6, #32
  4034bc:	2958      	cmp	r1, #88	; 0x58
  4034be:	f200 83b2 	bhi.w	403c26 <_svfprintf_r+0x81a>
  4034c2:	e8df f011 	tbh	[pc, r1, lsl #1]
  4034c6:	0319      	.short	0x0319
  4034c8:	03b003b0 	.word	0x03b003b0
  4034cc:	03b00320 	.word	0x03b00320
  4034d0:	03b003b0 	.word	0x03b003b0
  4034d4:	03b003b0 	.word	0x03b003b0
  4034d8:	024003b0 	.word	0x024003b0
  4034dc:	03b001fb 	.word	0x03b001fb
  4034e0:	01ff01e2 	.word	0x01ff01e2
  4034e4:	032703b0 	.word	0x032703b0
  4034e8:	032e032e 	.word	0x032e032e
  4034ec:	032e032e 	.word	0x032e032e
  4034f0:	032e032e 	.word	0x032e032e
  4034f4:	032e032e 	.word	0x032e032e
  4034f8:	03b0032e 	.word	0x03b0032e
  4034fc:	03b003b0 	.word	0x03b003b0
  403500:	03b003b0 	.word	0x03b003b0
  403504:	03b003b0 	.word	0x03b003b0
  403508:	03b003b0 	.word	0x03b003b0
  40350c:	033d03b0 	.word	0x033d03b0
  403510:	03b00365 	.word	0x03b00365
  403514:	03b00365 	.word	0x03b00365
  403518:	03b003b0 	.word	0x03b003b0
  40351c:	02fe03b0 	.word	0x02fe03b0
  403520:	03b003b0 	.word	0x03b003b0
  403524:	03b00293 	.word	0x03b00293
  403528:	03b003b0 	.word	0x03b003b0
  40352c:	03b003b0 	.word	0x03b003b0
  403530:	03b002b0 	.word	0x03b002b0
  403534:	02c603b0 	.word	0x02c603b0
  403538:	03b003b0 	.word	0x03b003b0
  40353c:	03b003b0 	.word	0x03b003b0
  403540:	03b003b0 	.word	0x03b003b0
  403544:	03b003b0 	.word	0x03b003b0
  403548:	03b003b0 	.word	0x03b003b0
  40354c:	021802eb 	.word	0x021802eb
  403550:	03650365 	.word	0x03650365
  403554:	024e0365 	.word	0x024e0365
  403558:	03b00218 	.word	0x03b00218
  40355c:	023603b0 	.word	0x023603b0
  403560:	026003b0 	.word	0x026003b0
  403564:	039901e9 	.word	0x039901e9
  403568:	03b00259 	.word	0x03b00259
  40356c:	03b00272 	.word	0x03b00272
  403570:	03b00076 	.word	0x03b00076
  403574:	030503b0 	.word	0x030503b0
  403578:	9809      	ldr	r0, [sp, #36]	; 0x24
  40357a:	4649      	mov	r1, r9
  40357c:	aa23      	add	r2, sp, #140	; 0x8c
  40357e:	f004 f8d3 	bl	407728 <__ssprint_r>
  403582:	b940      	cbnz	r0, 403596 <_svfprintf_r+0x18a>
  403584:	46c3      	mov	fp, r8
  403586:	e785      	b.n	403494 <_svfprintf_r+0x88>
  403588:	9b25      	ldr	r3, [sp, #148]	; 0x94
  40358a:	b123      	cbz	r3, 403596 <_svfprintf_r+0x18a>
  40358c:	9809      	ldr	r0, [sp, #36]	; 0x24
  40358e:	4649      	mov	r1, r9
  403590:	aa23      	add	r2, sp, #140	; 0x8c
  403592:	f004 f8c9 	bl	407728 <__ssprint_r>
  403596:	f8b9 300c 	ldrh.w	r3, [r9, #12]
  40359a:	f013 0f40 	tst.w	r3, #64	; 0x40
  40359e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4035a0:	bf18      	it	ne
  4035a2:	f04f 33ff 	movne.w	r3, #4294967295
  4035a6:	4618      	mov	r0, r3
  4035a8:	b041      	add	sp, #260	; 0x104
  4035aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4035ae:	9c08      	ldr	r4, [sp, #32]
  4035b0:	e773      	b.n	40349a <_svfprintf_r+0x8e>
  4035b2:	9308      	str	r3, [sp, #32]
  4035b4:	46a4      	mov	ip, r4
  4035b6:	9b06      	ldr	r3, [sp, #24]
  4035b8:	0698      	lsls	r0, r3, #26
  4035ba:	f140 823e 	bpl.w	403a3a <_svfprintf_r+0x62e>
  4035be:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  4035c0:	2301      	movs	r3, #1
  4035c2:	3707      	adds	r7, #7
  4035c4:	f027 0207 	bic.w	r2, r7, #7
  4035c8:	f102 0108 	add.w	r1, r2, #8
  4035cc:	e9d2 4500 	ldrd	r4, r5, [r2]
  4035d0:	910c      	str	r1, [sp, #48]	; 0x30
  4035d2:	2200      	movs	r2, #0
  4035d4:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
  4035d8:	4617      	mov	r7, r2
  4035da:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
  4035de:	f1bc 0f00 	cmp.w	ip, #0
  4035e2:	db03      	blt.n	4035ec <_svfprintf_r+0x1e0>
  4035e4:	9a06      	ldr	r2, [sp, #24]
  4035e6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
  4035ea:	9206      	str	r2, [sp, #24]
  4035ec:	f1bc 0f00 	cmp.w	ip, #0
  4035f0:	f040 83ac 	bne.w	403d4c <_svfprintf_r+0x940>
  4035f4:	ea54 0205 	orrs.w	r2, r4, r5
  4035f8:	bf14      	ite	ne
  4035fa:	2201      	movne	r2, #1
  4035fc:	2200      	moveq	r2, #0
  4035fe:	2a00      	cmp	r2, #0
  403600:	f040 83a4 	bne.w	403d4c <_svfprintf_r+0x940>
  403604:	2b00      	cmp	r3, #0
  403606:	f040 8460 	bne.w	403eca <_svfprintf_r+0xabe>
  40360a:	9a06      	ldr	r2, [sp, #24]
  40360c:	07d2      	lsls	r2, r2, #31
  40360e:	f140 84fd 	bpl.w	40400c <_svfprintf_r+0xc00>
  403612:	f50d 7a80 	add.w	sl, sp, #256	; 0x100
  403616:	2330      	movs	r3, #48	; 0x30
  403618:	f80a 3d41 	strb.w	r3, [sl, #-65]!
  40361c:	ebca 0408 	rsb	r4, sl, r8
  403620:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
  403624:	45a4      	cmp	ip, r4
  403626:	4663      	mov	r3, ip
  403628:	bfb8      	it	lt
  40362a:	4623      	movlt	r3, r4
  40362c:	9307      	str	r3, [sp, #28]
  40362e:	2300      	movs	r3, #0
  403630:	9311      	str	r3, [sp, #68]	; 0x44
  403632:	b117      	cbz	r7, 40363a <_svfprintf_r+0x22e>
  403634:	9b07      	ldr	r3, [sp, #28]
  403636:	3301      	adds	r3, #1
  403638:	9307      	str	r3, [sp, #28]
  40363a:	9b06      	ldr	r3, [sp, #24]
  40363c:	f013 0302 	ands.w	r3, r3, #2
  403640:	930d      	str	r3, [sp, #52]	; 0x34
  403642:	d002      	beq.n	40364a <_svfprintf_r+0x23e>
  403644:	9b07      	ldr	r3, [sp, #28]
  403646:	3302      	adds	r3, #2
  403648:	9307      	str	r3, [sp, #28]
  40364a:	9b06      	ldr	r3, [sp, #24]
  40364c:	f013 0384 	ands.w	r3, r3, #132	; 0x84
  403650:	930e      	str	r3, [sp, #56]	; 0x38
  403652:	f040 8307 	bne.w	403c64 <_svfprintf_r+0x858>
  403656:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  403658:	9a07      	ldr	r2, [sp, #28]
  40365a:	ebc2 0a03 	rsb	sl, r2, r3
  40365e:	f1ba 0f00 	cmp.w	sl, #0
  403662:	f340 82ff 	ble.w	403c64 <_svfprintf_r+0x858>
  403666:	f1ba 0f10 	cmp.w	sl, #16
  40366a:	9925      	ldr	r1, [sp, #148]	; 0x94
  40366c:	f340 87dd 	ble.w	40462a <_svfprintf_r+0x121e>
  403670:	4fbf      	ldr	r7, [pc, #764]	; (403970 <_svfprintf_r+0x564>)
  403672:	2510      	movs	r5, #16
  403674:	9618      	str	r6, [sp, #96]	; 0x60
  403676:	9a24      	ldr	r2, [sp, #144]	; 0x90
  403678:	463e      	mov	r6, r7
  40367a:	4627      	mov	r7, r4
  40367c:	9c09      	ldr	r4, [sp, #36]	; 0x24
  40367e:	e004      	b.n	40368a <_svfprintf_r+0x27e>
  403680:	f1aa 0a10 	sub.w	sl, sl, #16
  403684:	f1ba 0f10 	cmp.w	sl, #16
  403688:	dd1b      	ble.n	4036c2 <_svfprintf_r+0x2b6>
  40368a:	3201      	adds	r2, #1
  40368c:	3110      	adds	r1, #16
  40368e:	f8cb 6000 	str.w	r6, [fp]
  403692:	f10b 0b08 	add.w	fp, fp, #8
  403696:	2a07      	cmp	r2, #7
  403698:	f84b 5c04 	str.w	r5, [fp, #-4]
  40369c:	9125      	str	r1, [sp, #148]	; 0x94
  40369e:	9224      	str	r2, [sp, #144]	; 0x90
  4036a0:	ddee      	ble.n	403680 <_svfprintf_r+0x274>
  4036a2:	4620      	mov	r0, r4
  4036a4:	4649      	mov	r1, r9
  4036a6:	aa23      	add	r2, sp, #140	; 0x8c
  4036a8:	46c3      	mov	fp, r8
  4036aa:	f004 f83d 	bl	407728 <__ssprint_r>
  4036ae:	2800      	cmp	r0, #0
  4036b0:	f47f af71 	bne.w	403596 <_svfprintf_r+0x18a>
  4036b4:	f1aa 0a10 	sub.w	sl, sl, #16
  4036b8:	9925      	ldr	r1, [sp, #148]	; 0x94
  4036ba:	9a24      	ldr	r2, [sp, #144]	; 0x90
  4036bc:	f1ba 0f10 	cmp.w	sl, #16
  4036c0:	dce3      	bgt.n	40368a <_svfprintf_r+0x27e>
  4036c2:	463c      	mov	r4, r7
  4036c4:	4637      	mov	r7, r6
  4036c6:	9e18      	ldr	r6, [sp, #96]	; 0x60
  4036c8:	3201      	adds	r2, #1
  4036ca:	eb0a 0c01 	add.w	ip, sl, r1
  4036ce:	f8cb 7000 	str.w	r7, [fp]
  4036d2:	2a07      	cmp	r2, #7
  4036d4:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
  4036d8:	9224      	str	r2, [sp, #144]	; 0x90
  4036da:	f8cb a004 	str.w	sl, [fp, #4]
  4036de:	f300 82b6 	bgt.w	403c4e <_svfprintf_r+0x842>
  4036e2:	f10b 0b08 	add.w	fp, fp, #8
  4036e6:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  4036ea:	b197      	cbz	r7, 403712 <_svfprintf_r+0x306>
  4036ec:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4036ee:	2201      	movs	r2, #1
  4036f0:	f10c 0c01 	add.w	ip, ip, #1
  4036f4:	f10d 016f 	add.w	r1, sp, #111	; 0x6f
  4036f8:	4413      	add	r3, r2
  4036fa:	f8cb 2004 	str.w	r2, [fp, #4]
  4036fe:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
  403702:	2b07      	cmp	r3, #7
  403704:	f8cb 1000 	str.w	r1, [fp]
  403708:	9324      	str	r3, [sp, #144]	; 0x90
  40370a:	f300 83fb 	bgt.w	403f04 <_svfprintf_r+0xaf8>
  40370e:	f10b 0b08 	add.w	fp, fp, #8
  403712:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  403714:	b18b      	cbz	r3, 40373a <_svfprintf_r+0x32e>
  403716:	9b24      	ldr	r3, [sp, #144]	; 0x90
  403718:	f10c 0c02 	add.w	ip, ip, #2
  40371c:	a91c      	add	r1, sp, #112	; 0x70
  40371e:	2202      	movs	r2, #2
  403720:	3301      	adds	r3, #1
  403722:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
  403726:	f8cb 1000 	str.w	r1, [fp]
  40372a:	2b07      	cmp	r3, #7
  40372c:	9324      	str	r3, [sp, #144]	; 0x90
  40372e:	f8cb 2004 	str.w	r2, [fp, #4]
  403732:	f300 83db 	bgt.w	403eec <_svfprintf_r+0xae0>
  403736:	f10b 0b08 	add.w	fp, fp, #8
  40373a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40373c:	2b80      	cmp	r3, #128	; 0x80
  40373e:	f000 8321 	beq.w	403d84 <_svfprintf_r+0x978>
  403742:	9b10      	ldr	r3, [sp, #64]	; 0x40
  403744:	1b1f      	subs	r7, r3, r4
  403746:	2f00      	cmp	r7, #0
  403748:	dd37      	ble.n	4037ba <_svfprintf_r+0x3ae>
  40374a:	2f10      	cmp	r7, #16
  40374c:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40374e:	f340 85ec 	ble.w	40432a <_svfprintf_r+0xf1e>
  403752:	940d      	str	r4, [sp, #52]	; 0x34
  403754:	f04f 0a10 	mov.w	sl, #16
  403758:	4d86      	ldr	r5, [pc, #536]	; (403974 <_svfprintf_r+0x568>)
  40375a:	4662      	mov	r2, ip
  40375c:	9c09      	ldr	r4, [sp, #36]	; 0x24
  40375e:	e002      	b.n	403766 <_svfprintf_r+0x35a>
  403760:	3f10      	subs	r7, #16
  403762:	2f10      	cmp	r7, #16
  403764:	dd19      	ble.n	40379a <_svfprintf_r+0x38e>
  403766:	3301      	adds	r3, #1
  403768:	3210      	adds	r2, #16
  40376a:	f8cb 5000 	str.w	r5, [fp]
  40376e:	f10b 0b08 	add.w	fp, fp, #8
  403772:	2b07      	cmp	r3, #7
  403774:	f84b ac04 	str.w	sl, [fp, #-4]
  403778:	9225      	str	r2, [sp, #148]	; 0x94
  40377a:	9324      	str	r3, [sp, #144]	; 0x90
  40377c:	ddf0      	ble.n	403760 <_svfprintf_r+0x354>
  40377e:	4620      	mov	r0, r4
  403780:	4649      	mov	r1, r9
  403782:	aa23      	add	r2, sp, #140	; 0x8c
  403784:	46c3      	mov	fp, r8
  403786:	f003 ffcf 	bl	407728 <__ssprint_r>
  40378a:	2800      	cmp	r0, #0
  40378c:	f47f af03 	bne.w	403596 <_svfprintf_r+0x18a>
  403790:	3f10      	subs	r7, #16
  403792:	9a25      	ldr	r2, [sp, #148]	; 0x94
  403794:	9b24      	ldr	r3, [sp, #144]	; 0x90
  403796:	2f10      	cmp	r7, #16
  403798:	dce5      	bgt.n	403766 <_svfprintf_r+0x35a>
  40379a:	9c0d      	ldr	r4, [sp, #52]	; 0x34
  40379c:	4694      	mov	ip, r2
  40379e:	3301      	adds	r3, #1
  4037a0:	44bc      	add	ip, r7
  4037a2:	f8cb 5000 	str.w	r5, [fp]
  4037a6:	2b07      	cmp	r3, #7
  4037a8:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
  4037ac:	9324      	str	r3, [sp, #144]	; 0x90
  4037ae:	f8cb 7004 	str.w	r7, [fp, #4]
  4037b2:	f300 838f 	bgt.w	403ed4 <_svfprintf_r+0xac8>
  4037b6:	f10b 0b08 	add.w	fp, fp, #8
  4037ba:	9b06      	ldr	r3, [sp, #24]
  4037bc:	05df      	lsls	r7, r3, #23
  4037be:	f100 8254 	bmi.w	403c6a <_svfprintf_r+0x85e>
  4037c2:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4037c4:	44a4      	add	ip, r4
  4037c6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4037c8:	3301      	adds	r3, #1
  4037ca:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
  4037ce:	f8cb 2000 	str.w	r2, [fp]
  4037d2:	2b07      	cmp	r3, #7
  4037d4:	f8cb 4004 	str.w	r4, [fp, #4]
  4037d8:	9324      	str	r3, [sp, #144]	; 0x90
  4037da:	f300 8360 	bgt.w	403e9e <_svfprintf_r+0xa92>
  4037de:	f10b 0b08 	add.w	fp, fp, #8
  4037e2:	9b06      	ldr	r3, [sp, #24]
  4037e4:	075a      	lsls	r2, r3, #29
  4037e6:	d540      	bpl.n	40386a <_svfprintf_r+0x45e>
  4037e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  4037ea:	9a07      	ldr	r2, [sp, #28]
  4037ec:	1a9c      	subs	r4, r3, r2
  4037ee:	2c00      	cmp	r4, #0
  4037f0:	dd3b      	ble.n	40386a <_svfprintf_r+0x45e>
  4037f2:	2c10      	cmp	r4, #16
  4037f4:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4037f6:	f340 876b 	ble.w	4046d0 <_svfprintf_r+0x12c4>
  4037fa:	2510      	movs	r5, #16
  4037fc:	4f5c      	ldr	r7, [pc, #368]	; (403970 <_svfprintf_r+0x564>)
  4037fe:	4662      	mov	r2, ip
  403800:	9e09      	ldr	r6, [sp, #36]	; 0x24
  403802:	e002      	b.n	40380a <_svfprintf_r+0x3fe>
  403804:	3c10      	subs	r4, #16
  403806:	2c10      	cmp	r4, #16
  403808:	dd19      	ble.n	40383e <_svfprintf_r+0x432>
  40380a:	3301      	adds	r3, #1
  40380c:	3210      	adds	r2, #16
  40380e:	f8cb 7000 	str.w	r7, [fp]
  403812:	f10b 0b08 	add.w	fp, fp, #8
  403816:	2b07      	cmp	r3, #7
  403818:	f84b 5c04 	str.w	r5, [fp, #-4]
  40381c:	9225      	str	r2, [sp, #148]	; 0x94
  40381e:	9324      	str	r3, [sp, #144]	; 0x90
  403820:	ddf0      	ble.n	403804 <_svfprintf_r+0x3f8>
  403822:	4630      	mov	r0, r6
  403824:	4649      	mov	r1, r9
  403826:	aa23      	add	r2, sp, #140	; 0x8c
  403828:	46c3      	mov	fp, r8
  40382a:	f003 ff7d 	bl	407728 <__ssprint_r>
  40382e:	2800      	cmp	r0, #0
  403830:	f47f aeb1 	bne.w	403596 <_svfprintf_r+0x18a>
  403834:	3c10      	subs	r4, #16
  403836:	9a25      	ldr	r2, [sp, #148]	; 0x94
  403838:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40383a:	2c10      	cmp	r4, #16
  40383c:	dce5      	bgt.n	40380a <_svfprintf_r+0x3fe>
  40383e:	4694      	mov	ip, r2
  403840:	3301      	adds	r3, #1
  403842:	44a4      	add	ip, r4
  403844:	f8cb 7000 	str.w	r7, [fp]
  403848:	2b07      	cmp	r3, #7
  40384a:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
  40384e:	9324      	str	r3, [sp, #144]	; 0x90
  403850:	f8cb 4004 	str.w	r4, [fp, #4]
  403854:	dd09      	ble.n	40386a <_svfprintf_r+0x45e>
  403856:	9809      	ldr	r0, [sp, #36]	; 0x24
  403858:	4649      	mov	r1, r9
  40385a:	aa23      	add	r2, sp, #140	; 0x8c
  40385c:	f003 ff64 	bl	407728 <__ssprint_r>
  403860:	2800      	cmp	r0, #0
  403862:	f47f ae98 	bne.w	403596 <_svfprintf_r+0x18a>
  403866:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
  40386a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40386c:	9a07      	ldr	r2, [sp, #28]
  40386e:	990b      	ldr	r1, [sp, #44]	; 0x2c
  403870:	428a      	cmp	r2, r1
  403872:	bfac      	ite	ge
  403874:	189b      	addge	r3, r3, r2
  403876:	185b      	addlt	r3, r3, r1
  403878:	930a      	str	r3, [sp, #40]	; 0x28
  40387a:	f1bc 0f00 	cmp.w	ip, #0
  40387e:	f040 831a 	bne.w	403eb6 <_svfprintf_r+0xaaa>
  403882:	2300      	movs	r3, #0
  403884:	46c3      	mov	fp, r8
  403886:	9324      	str	r3, [sp, #144]	; 0x90
  403888:	e5e6      	b.n	403458 <_svfprintf_r+0x4c>
  40388a:	4619      	mov	r1, r3
  40388c:	9806      	ldr	r0, [sp, #24]
  40388e:	781e      	ldrb	r6, [r3, #0]
  403890:	f040 0004 	orr.w	r0, r0, #4
  403894:	9006      	str	r0, [sp, #24]
  403896:	e60e      	b.n	4034b6 <_svfprintf_r+0xaa>
  403898:	9308      	str	r3, [sp, #32]
  40389a:	46a4      	mov	ip, r4
  40389c:	9b06      	ldr	r3, [sp, #24]
  40389e:	f013 0320 	ands.w	r3, r3, #32
  4038a2:	f000 80ae 	beq.w	403a02 <_svfprintf_r+0x5f6>
  4038a6:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  4038a8:	2300      	movs	r3, #0
  4038aa:	3707      	adds	r7, #7
  4038ac:	f027 0207 	bic.w	r2, r7, #7
  4038b0:	f102 0108 	add.w	r1, r2, #8
  4038b4:	e9d2 4500 	ldrd	r4, r5, [r2]
  4038b8:	910c      	str	r1, [sp, #48]	; 0x30
  4038ba:	e68a      	b.n	4035d2 <_svfprintf_r+0x1c6>
  4038bc:	781e      	ldrb	r6, [r3, #0]
  4038be:	4619      	mov	r1, r3
  4038c0:	222b      	movs	r2, #43	; 0x2b
  4038c2:	e5f8      	b.n	4034b6 <_svfprintf_r+0xaa>
  4038c4:	781e      	ldrb	r6, [r3, #0]
  4038c6:	1c59      	adds	r1, r3, #1
  4038c8:	2e2a      	cmp	r6, #42	; 0x2a
  4038ca:	f001 8006 	beq.w	4048da <_svfprintf_r+0x14ce>
  4038ce:	f1a6 0030 	sub.w	r0, r6, #48	; 0x30
  4038d2:	460b      	mov	r3, r1
  4038d4:	2400      	movs	r4, #0
  4038d6:	2809      	cmp	r0, #9
  4038d8:	f63f adee 	bhi.w	4034b8 <_svfprintf_r+0xac>
  4038dc:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  4038e0:	f813 6b01 	ldrb.w	r6, [r3], #1
  4038e4:	eb00 0444 	add.w	r4, r0, r4, lsl #1
  4038e8:	f1a6 0030 	sub.w	r0, r6, #48	; 0x30
  4038ec:	2809      	cmp	r0, #9
  4038ee:	d9f5      	bls.n	4038dc <_svfprintf_r+0x4d0>
  4038f0:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
  4038f4:	e5e0      	b.n	4034b8 <_svfprintf_r+0xac>
  4038f6:	9308      	str	r3, [sp, #32]
  4038f8:	46a4      	mov	ip, r4
  4038fa:	9b06      	ldr	r3, [sp, #24]
  4038fc:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
  403900:	069c      	lsls	r4, r3, #26
  403902:	f140 8129 	bpl.w	403b58 <_svfprintf_r+0x74c>
  403906:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  403908:	3707      	adds	r7, #7
  40390a:	f027 0707 	bic.w	r7, r7, #7
  40390e:	e9d7 2300 	ldrd	r2, r3, [r7]
  403912:	f107 0108 	add.w	r1, r7, #8
  403916:	4614      	mov	r4, r2
  403918:	461d      	mov	r5, r3
  40391a:	910c      	str	r1, [sp, #48]	; 0x30
  40391c:	2a00      	cmp	r2, #0
  40391e:	f173 0300 	sbcs.w	r3, r3, #0
  403922:	f2c0 812a 	blt.w	403b7a <_svfprintf_r+0x76e>
  403926:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  40392a:	2301      	movs	r3, #1
  40392c:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
  403930:	e655      	b.n	4035de <_svfprintf_r+0x1d2>
  403932:	781e      	ldrb	r6, [r3, #0]
  403934:	9906      	ldr	r1, [sp, #24]
  403936:	2e6c      	cmp	r6, #108	; 0x6c
  403938:	f000 8557 	beq.w	4043ea <_svfprintf_r+0xfde>
  40393c:	f041 0110 	orr.w	r1, r1, #16
  403940:	9106      	str	r1, [sp, #24]
  403942:	4619      	mov	r1, r3
  403944:	e5b7      	b.n	4034b6 <_svfprintf_r+0xaa>
  403946:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  403948:	6829      	ldr	r1, [r5, #0]
  40394a:	4608      	mov	r0, r1
  40394c:	910b      	str	r1, [sp, #44]	; 0x2c
  40394e:	4629      	mov	r1, r5
  403950:	2800      	cmp	r0, #0
  403952:	f101 0104 	add.w	r1, r1, #4
  403956:	f2c0 854f 	blt.w	4043f8 <_svfprintf_r+0xfec>
  40395a:	910c      	str	r1, [sp, #48]	; 0x30
  40395c:	4619      	mov	r1, r3
  40395e:	781e      	ldrb	r6, [r3, #0]
  403960:	e5a9      	b.n	4034b6 <_svfprintf_r+0xaa>
  403962:	9906      	ldr	r1, [sp, #24]
  403964:	f041 0140 	orr.w	r1, r1, #64	; 0x40
  403968:	9106      	str	r1, [sp, #24]
  40396a:	4619      	mov	r1, r3
  40396c:	781e      	ldrb	r6, [r3, #0]
  40396e:	e5a2      	b.n	4034b6 <_svfprintf_r+0xaa>
  403970:	00408b44 	.word	0x00408b44
  403974:	00408b34 	.word	0x00408b34
  403978:	9906      	ldr	r1, [sp, #24]
  40397a:	f041 0120 	orr.w	r1, r1, #32
  40397e:	9106      	str	r1, [sp, #24]
  403980:	4619      	mov	r1, r3
  403982:	781e      	ldrb	r6, [r3, #0]
  403984:	e597      	b.n	4034b6 <_svfprintf_r+0xaa>
  403986:	9308      	str	r3, [sp, #32]
  403988:	9b06      	ldr	r3, [sp, #24]
  40398a:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
  40398e:	069e      	lsls	r6, r3, #26
  403990:	f140 84a4 	bpl.w	4042dc <_svfprintf_r+0xed0>
  403994:	990a      	ldr	r1, [sp, #40]	; 0x28
  403996:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  403998:	17cd      	asrs	r5, r1, #31
  40399a:	4608      	mov	r0, r1
  40399c:	6813      	ldr	r3, [r2, #0]
  40399e:	3204      	adds	r2, #4
  4039a0:	4629      	mov	r1, r5
  4039a2:	920c      	str	r2, [sp, #48]	; 0x30
  4039a4:	e9c3 0100 	strd	r0, r1, [r3]
  4039a8:	e556      	b.n	403458 <_svfprintf_r+0x4c>
  4039aa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  4039ac:	2500      	movs	r5, #0
  4039ae:	9308      	str	r3, [sp, #32]
  4039b0:	6813      	ldr	r3, [r2, #0]
  4039b2:	1d17      	adds	r7, r2, #4
  4039b4:	f88d 506f 	strb.w	r5, [sp, #111]	; 0x6f
  4039b8:	930f      	str	r3, [sp, #60]	; 0x3c
  4039ba:	2b00      	cmp	r3, #0
  4039bc:	f000 867a 	beq.w	4046b4 <_svfprintf_r+0x12a8>
  4039c0:	2c00      	cmp	r4, #0
  4039c2:	980f      	ldr	r0, [sp, #60]	; 0x3c
  4039c4:	f2c0 8624 	blt.w	404610 <_svfprintf_r+0x1204>
  4039c8:	4629      	mov	r1, r5
  4039ca:	4622      	mov	r2, r4
  4039cc:	f002 ffe8 	bl	4069a0 <memchr>
  4039d0:	2800      	cmp	r0, #0
  4039d2:	f000 86df 	beq.w	404794 <_svfprintf_r+0x1388>
  4039d6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4039d8:	970c      	str	r7, [sp, #48]	; 0x30
  4039da:	1ac4      	subs	r4, r0, r3
  4039dc:	9510      	str	r5, [sp, #64]	; 0x40
  4039de:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  4039e2:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
  4039e6:	9511      	str	r5, [sp, #68]	; 0x44
  4039e8:	9307      	str	r3, [sp, #28]
  4039ea:	e622      	b.n	403632 <_svfprintf_r+0x226>
  4039ec:	9308      	str	r3, [sp, #32]
  4039ee:	46a4      	mov	ip, r4
  4039f0:	9b06      	ldr	r3, [sp, #24]
  4039f2:	f043 0310 	orr.w	r3, r3, #16
  4039f6:	9306      	str	r3, [sp, #24]
  4039f8:	9b06      	ldr	r3, [sp, #24]
  4039fa:	f013 0320 	ands.w	r3, r3, #32
  4039fe:	f47f af52 	bne.w	4038a6 <_svfprintf_r+0x49a>
  403a02:	9a06      	ldr	r2, [sp, #24]
  403a04:	f012 0210 	ands.w	r2, r2, #16
  403a08:	f040 8352 	bne.w	4040b0 <_svfprintf_r+0xca4>
  403a0c:	9b06      	ldr	r3, [sp, #24]
  403a0e:	f013 0340 	ands.w	r3, r3, #64	; 0x40
  403a12:	f000 834d 	beq.w	4040b0 <_svfprintf_r+0xca4>
  403a16:	990c      	ldr	r1, [sp, #48]	; 0x30
  403a18:	4613      	mov	r3, r2
  403a1a:	2500      	movs	r5, #0
  403a1c:	460a      	mov	r2, r1
  403a1e:	880c      	ldrh	r4, [r1, #0]
  403a20:	3204      	adds	r2, #4
  403a22:	920c      	str	r2, [sp, #48]	; 0x30
  403a24:	e5d5      	b.n	4035d2 <_svfprintf_r+0x1c6>
  403a26:	9308      	str	r3, [sp, #32]
  403a28:	46a4      	mov	ip, r4
  403a2a:	9b06      	ldr	r3, [sp, #24]
  403a2c:	f043 0310 	orr.w	r3, r3, #16
  403a30:	9306      	str	r3, [sp, #24]
  403a32:	9b06      	ldr	r3, [sp, #24]
  403a34:	0698      	lsls	r0, r3, #26
  403a36:	f53f adc2 	bmi.w	4035be <_svfprintf_r+0x1b2>
  403a3a:	9b06      	ldr	r3, [sp, #24]
  403a3c:	06d9      	lsls	r1, r3, #27
  403a3e:	f140 8432 	bpl.w	4042a6 <_svfprintf_r+0xe9a>
  403a42:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  403a44:	4613      	mov	r3, r2
  403a46:	3204      	adds	r2, #4
  403a48:	681c      	ldr	r4, [r3, #0]
  403a4a:	2500      	movs	r5, #0
  403a4c:	2301      	movs	r3, #1
  403a4e:	920c      	str	r2, [sp, #48]	; 0x30
  403a50:	e5bf      	b.n	4035d2 <_svfprintf_r+0x1c6>
  403a52:	9308      	str	r3, [sp, #32]
  403a54:	46a4      	mov	ip, r4
  403a56:	4bb7      	ldr	r3, [pc, #732]	; (403d34 <_svfprintf_r+0x928>)
  403a58:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
  403a5c:	9315      	str	r3, [sp, #84]	; 0x54
  403a5e:	9b06      	ldr	r3, [sp, #24]
  403a60:	069a      	lsls	r2, r3, #26
  403a62:	d53e      	bpl.n	403ae2 <_svfprintf_r+0x6d6>
  403a64:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  403a66:	3707      	adds	r7, #7
  403a68:	f027 0307 	bic.w	r3, r7, #7
  403a6c:	f103 0208 	add.w	r2, r3, #8
  403a70:	e9d3 4500 	ldrd	r4, r5, [r3]
  403a74:	920c      	str	r2, [sp, #48]	; 0x30
  403a76:	9b06      	ldr	r3, [sp, #24]
  403a78:	07df      	lsls	r7, r3, #31
  403a7a:	f140 8268 	bpl.w	403f4e <_svfprintf_r+0xb42>
  403a7e:	ea54 0305 	orrs.w	r3, r4, r5
  403a82:	f000 8264 	beq.w	403f4e <_svfprintf_r+0xb42>
  403a86:	9b06      	ldr	r3, [sp, #24]
  403a88:	2230      	movs	r2, #48	; 0x30
  403a8a:	f88d 6071 	strb.w	r6, [sp, #113]	; 0x71
  403a8e:	f043 0302 	orr.w	r3, r3, #2
  403a92:	f88d 2070 	strb.w	r2, [sp, #112]	; 0x70
  403a96:	9306      	str	r3, [sp, #24]
  403a98:	2302      	movs	r3, #2
  403a9a:	e59a      	b.n	4035d2 <_svfprintf_r+0x1c6>
  403a9c:	990c      	ldr	r1, [sp, #48]	; 0x30
  403a9e:	2001      	movs	r0, #1
  403aa0:	9308      	str	r3, [sp, #32]
  403aa2:	2300      	movs	r3, #0
  403aa4:	680a      	ldr	r2, [r1, #0]
  403aa6:	3104      	adds	r1, #4
  403aa8:	461f      	mov	r7, r3
  403aaa:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  403aae:	9310      	str	r3, [sp, #64]	; 0x40
  403ab0:	4604      	mov	r4, r0
  403ab2:	9311      	str	r3, [sp, #68]	; 0x44
  403ab4:	ab26      	add	r3, sp, #152	; 0x98
  403ab6:	9007      	str	r0, [sp, #28]
  403ab8:	910c      	str	r1, [sp, #48]	; 0x30
  403aba:	f88d 2098 	strb.w	r2, [sp, #152]	; 0x98
  403abe:	930f      	str	r3, [sp, #60]	; 0x3c
  403ac0:	e5bb      	b.n	40363a <_svfprintf_r+0x22e>
  403ac2:	9906      	ldr	r1, [sp, #24]
  403ac4:	f041 0108 	orr.w	r1, r1, #8
  403ac8:	9106      	str	r1, [sp, #24]
  403aca:	4619      	mov	r1, r3
  403acc:	781e      	ldrb	r6, [r3, #0]
  403ace:	e4f2      	b.n	4034b6 <_svfprintf_r+0xaa>
  403ad0:	9308      	str	r3, [sp, #32]
  403ad2:	46a4      	mov	ip, r4
  403ad4:	4b98      	ldr	r3, [pc, #608]	; (403d38 <_svfprintf_r+0x92c>)
  403ad6:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
  403ada:	9315      	str	r3, [sp, #84]	; 0x54
  403adc:	9b06      	ldr	r3, [sp, #24]
  403ade:	069a      	lsls	r2, r3, #26
  403ae0:	d4c0      	bmi.n	403a64 <_svfprintf_r+0x658>
  403ae2:	9b06      	ldr	r3, [sp, #24]
  403ae4:	06db      	lsls	r3, r3, #27
  403ae6:	f140 83ec 	bpl.w	4042c2 <_svfprintf_r+0xeb6>
  403aea:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  403aec:	2500      	movs	r5, #0
  403aee:	4613      	mov	r3, r2
  403af0:	6814      	ldr	r4, [r2, #0]
  403af2:	3304      	adds	r3, #4
  403af4:	930c      	str	r3, [sp, #48]	; 0x30
  403af6:	e7be      	b.n	403a76 <_svfprintf_r+0x66a>
  403af8:	781e      	ldrb	r6, [r3, #0]
  403afa:	4619      	mov	r1, r3
  403afc:	2a00      	cmp	r2, #0
  403afe:	f47f acda 	bne.w	4034b6 <_svfprintf_r+0xaa>
  403b02:	2220      	movs	r2, #32
  403b04:	e4d7      	b.n	4034b6 <_svfprintf_r+0xaa>
  403b06:	9906      	ldr	r1, [sp, #24]
  403b08:	f041 0101 	orr.w	r1, r1, #1
  403b0c:	9106      	str	r1, [sp, #24]
  403b0e:	4619      	mov	r1, r3
  403b10:	781e      	ldrb	r6, [r3, #0]
  403b12:	e4d0      	b.n	4034b6 <_svfprintf_r+0xaa>
  403b14:	9906      	ldr	r1, [sp, #24]
  403b16:	f041 0180 	orr.w	r1, r1, #128	; 0x80
  403b1a:	9106      	str	r1, [sp, #24]
  403b1c:	4619      	mov	r1, r3
  403b1e:	781e      	ldrb	r6, [r3, #0]
  403b20:	e4c9      	b.n	4034b6 <_svfprintf_r+0xaa>
  403b22:	f1a6 0030 	sub.w	r0, r6, #48	; 0x30
  403b26:	2100      	movs	r1, #0
  403b28:	eb01 0181 	add.w	r1, r1, r1, lsl #2
  403b2c:	f813 6b01 	ldrb.w	r6, [r3], #1
  403b30:	eb00 0141 	add.w	r1, r0, r1, lsl #1
  403b34:	f1a6 0030 	sub.w	r0, r6, #48	; 0x30
  403b38:	2809      	cmp	r0, #9
  403b3a:	d9f5      	bls.n	403b28 <_svfprintf_r+0x71c>
  403b3c:	910b      	str	r1, [sp, #44]	; 0x2c
  403b3e:	e4bb      	b.n	4034b8 <_svfprintf_r+0xac>
  403b40:	9308      	str	r3, [sp, #32]
  403b42:	46a4      	mov	ip, r4
  403b44:	9b06      	ldr	r3, [sp, #24]
  403b46:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
  403b4a:	f043 0310 	orr.w	r3, r3, #16
  403b4e:	9306      	str	r3, [sp, #24]
  403b50:	9b06      	ldr	r3, [sp, #24]
  403b52:	069c      	lsls	r4, r3, #26
  403b54:	f53f aed7 	bmi.w	403906 <_svfprintf_r+0x4fa>
  403b58:	9b06      	ldr	r3, [sp, #24]
  403b5a:	06d8      	lsls	r0, r3, #27
  403b5c:	f140 83d5 	bpl.w	40430a <_svfprintf_r+0xefe>
  403b60:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  403b62:	4613      	mov	r3, r2
  403b64:	681c      	ldr	r4, [r3, #0]
  403b66:	3304      	adds	r3, #4
  403b68:	17e5      	asrs	r5, r4, #31
  403b6a:	4622      	mov	r2, r4
  403b6c:	930c      	str	r3, [sp, #48]	; 0x30
  403b6e:	2a00      	cmp	r2, #0
  403b70:	462b      	mov	r3, r5
  403b72:	f173 0300 	sbcs.w	r3, r3, #0
  403b76:	f6bf aed6 	bge.w	403926 <_svfprintf_r+0x51a>
  403b7a:	272d      	movs	r7, #45	; 0x2d
  403b7c:	4264      	negs	r4, r4
  403b7e:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
  403b82:	f04f 0301 	mov.w	r3, #1
  403b86:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
  403b8a:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
  403b8e:	e526      	b.n	4035de <_svfprintf_r+0x1d2>
  403b90:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  403b92:	9308      	str	r3, [sp, #32]
  403b94:	3707      	adds	r7, #7
  403b96:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
  403b9a:	f027 0307 	bic.w	r3, r7, #7
  403b9e:	f103 0208 	add.w	r2, r3, #8
  403ba2:	920c      	str	r2, [sp, #48]	; 0x30
  403ba4:	681a      	ldr	r2, [r3, #0]
  403ba6:	9213      	str	r2, [sp, #76]	; 0x4c
  403ba8:	685b      	ldr	r3, [r3, #4]
  403baa:	9813      	ldr	r0, [sp, #76]	; 0x4c
  403bac:	9314      	str	r3, [sp, #80]	; 0x50
  403bae:	9914      	ldr	r1, [sp, #80]	; 0x50
  403bb0:	9407      	str	r4, [sp, #28]
  403bb2:	f003 fd41 	bl	407638 <__fpclassifyd>
  403bb6:	2801      	cmp	r0, #1
  403bb8:	f8dd c01c 	ldr.w	ip, [sp, #28]
  403bbc:	f040 8355 	bne.w	40426a <_svfprintf_r+0xe5e>
  403bc0:	9813      	ldr	r0, [sp, #76]	; 0x4c
  403bc2:	2200      	movs	r2, #0
  403bc4:	2300      	movs	r3, #0
  403bc6:	9914      	ldr	r1, [sp, #80]	; 0x50
  403bc8:	f004 fb9a 	bl	408300 <__aeabi_dcmplt>
  403bcc:	2800      	cmp	r0, #0
  403bce:	f040 8582 	bne.w	4046d6 <_svfprintf_r+0x12ca>
  403bd2:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  403bd6:	2303      	movs	r3, #3
  403bd8:	9806      	ldr	r0, [sp, #24]
  403bda:	4a58      	ldr	r2, [pc, #352]	; (403d3c <_svfprintf_r+0x930>)
  403bdc:	2100      	movs	r1, #0
  403bde:	461c      	mov	r4, r3
  403be0:	9307      	str	r3, [sp, #28]
  403be2:	4b57      	ldr	r3, [pc, #348]	; (403d40 <_svfprintf_r+0x934>)
  403be4:	f020 0080 	bic.w	r0, r0, #128	; 0x80
  403be8:	9110      	str	r1, [sp, #64]	; 0x40
  403bea:	2e47      	cmp	r6, #71	; 0x47
  403bec:	bfd8      	it	le
  403bee:	461a      	movle	r2, r3
  403bf0:	9006      	str	r0, [sp, #24]
  403bf2:	9111      	str	r1, [sp, #68]	; 0x44
  403bf4:	920f      	str	r2, [sp, #60]	; 0x3c
  403bf6:	e51c      	b.n	403632 <_svfprintf_r+0x226>
  403bf8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  403bfa:	2230      	movs	r2, #48	; 0x30
  403bfc:	9806      	ldr	r0, [sp, #24]
  403bfe:	46a4      	mov	ip, r4
  403c00:	4629      	mov	r1, r5
  403c02:	9308      	str	r3, [sp, #32]
  403c04:	2378      	movs	r3, #120	; 0x78
  403c06:	f040 0002 	orr.w	r0, r0, #2
  403c0a:	3104      	adds	r1, #4
  403c0c:	682c      	ldr	r4, [r5, #0]
  403c0e:	461e      	mov	r6, r3
  403c10:	f88d 3071 	strb.w	r3, [sp, #113]	; 0x71
  403c14:	4b48      	ldr	r3, [pc, #288]	; (403d38 <_svfprintf_r+0x92c>)
  403c16:	2500      	movs	r5, #0
  403c18:	9006      	str	r0, [sp, #24]
  403c1a:	9315      	str	r3, [sp, #84]	; 0x54
  403c1c:	2302      	movs	r3, #2
  403c1e:	910c      	str	r1, [sp, #48]	; 0x30
  403c20:	f88d 2070 	strb.w	r2, [sp, #112]	; 0x70
  403c24:	e4d5      	b.n	4035d2 <_svfprintf_r+0x1c6>
  403c26:	9308      	str	r3, [sp, #32]
  403c28:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
  403c2c:	2e00      	cmp	r6, #0
  403c2e:	f43f acab 	beq.w	403588 <_svfprintf_r+0x17c>
  403c32:	2300      	movs	r3, #0
  403c34:	2201      	movs	r2, #1
  403c36:	a926      	add	r1, sp, #152	; 0x98
  403c38:	f88d 6098 	strb.w	r6, [sp, #152]	; 0x98
  403c3c:	9207      	str	r2, [sp, #28]
  403c3e:	461f      	mov	r7, r3
  403c40:	910f      	str	r1, [sp, #60]	; 0x3c
  403c42:	4614      	mov	r4, r2
  403c44:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  403c48:	9310      	str	r3, [sp, #64]	; 0x40
  403c4a:	9311      	str	r3, [sp, #68]	; 0x44
  403c4c:	e4f5      	b.n	40363a <_svfprintf_r+0x22e>
  403c4e:	9809      	ldr	r0, [sp, #36]	; 0x24
  403c50:	4649      	mov	r1, r9
  403c52:	aa23      	add	r2, sp, #140	; 0x8c
  403c54:	f003 fd68 	bl	407728 <__ssprint_r>
  403c58:	2800      	cmp	r0, #0
  403c5a:	f47f ac9c 	bne.w	403596 <_svfprintf_r+0x18a>
  403c5e:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  403c62:	46c3      	mov	fp, r8
  403c64:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
  403c68:	e53f      	b.n	4036ea <_svfprintf_r+0x2de>
  403c6a:	2e65      	cmp	r6, #101	; 0x65
  403c6c:	f340 80c9 	ble.w	403e02 <_svfprintf_r+0x9f6>
  403c70:	9813      	ldr	r0, [sp, #76]	; 0x4c
  403c72:	2200      	movs	r2, #0
  403c74:	2300      	movs	r3, #0
  403c76:	9914      	ldr	r1, [sp, #80]	; 0x50
  403c78:	f8cd c034 	str.w	ip, [sp, #52]	; 0x34
  403c7c:	f004 fb36 	bl	4082ec <__aeabi_dcmpeq>
  403c80:	f8dd c034 	ldr.w	ip, [sp, #52]	; 0x34
  403c84:	2800      	cmp	r0, #0
  403c86:	f000 8165 	beq.w	403f54 <_svfprintf_r+0xb48>
  403c8a:	9b24      	ldr	r3, [sp, #144]	; 0x90
  403c8c:	2201      	movs	r2, #1
  403c8e:	f10c 0c01 	add.w	ip, ip, #1
  403c92:	492c      	ldr	r1, [pc, #176]	; (403d44 <_svfprintf_r+0x938>)
  403c94:	4413      	add	r3, r2
  403c96:	f8cb 2004 	str.w	r2, [fp, #4]
  403c9a:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
  403c9e:	2b07      	cmp	r3, #7
  403ca0:	f8cb 1000 	str.w	r1, [fp]
  403ca4:	9324      	str	r3, [sp, #144]	; 0x90
  403ca6:	f300 8343 	bgt.w	404330 <_svfprintf_r+0xf24>
  403caa:	f10b 0b08 	add.w	fp, fp, #8
  403cae:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  403cb0:	9a12      	ldr	r2, [sp, #72]	; 0x48
  403cb2:	4293      	cmp	r3, r2
  403cb4:	db03      	blt.n	403cbe <_svfprintf_r+0x8b2>
  403cb6:	9b06      	ldr	r3, [sp, #24]
  403cb8:	07de      	lsls	r6, r3, #31
  403cba:	f57f ad92 	bpl.w	4037e2 <_svfprintf_r+0x3d6>
  403cbe:	9b24      	ldr	r3, [sp, #144]	; 0x90
  403cc0:	9917      	ldr	r1, [sp, #92]	; 0x5c
  403cc2:	3301      	adds	r3, #1
  403cc4:	9a16      	ldr	r2, [sp, #88]	; 0x58
  403cc6:	448c      	add	ip, r1
  403cc8:	f8cb 1004 	str.w	r1, [fp, #4]
  403ccc:	2b07      	cmp	r3, #7
  403cce:	f8cb 2000 	str.w	r2, [fp]
  403cd2:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
  403cd6:	9324      	str	r3, [sp, #144]	; 0x90
  403cd8:	f300 841d 	bgt.w	404516 <_svfprintf_r+0x110a>
  403cdc:	f10b 0b08 	add.w	fp, fp, #8
  403ce0:	9b12      	ldr	r3, [sp, #72]	; 0x48
  403ce2:	1e5c      	subs	r4, r3, #1
  403ce4:	2c00      	cmp	r4, #0
  403ce6:	f77f ad7c 	ble.w	4037e2 <_svfprintf_r+0x3d6>
  403cea:	2c10      	cmp	r4, #16
  403cec:	9b24      	ldr	r3, [sp, #144]	; 0x90
  403cee:	f340 85bc 	ble.w	40486a <_svfprintf_r+0x145e>
  403cf2:	2610      	movs	r6, #16
  403cf4:	4d14      	ldr	r5, [pc, #80]	; (403d48 <_svfprintf_r+0x93c>)
  403cf6:	4662      	mov	r2, ip
  403cf8:	9f09      	ldr	r7, [sp, #36]	; 0x24
  403cfa:	e003      	b.n	403d04 <_svfprintf_r+0x8f8>
  403cfc:	3c10      	subs	r4, #16
  403cfe:	2c10      	cmp	r4, #16
  403d00:	f340 81c8 	ble.w	404094 <_svfprintf_r+0xc88>
  403d04:	3301      	adds	r3, #1
  403d06:	3210      	adds	r2, #16
  403d08:	f8cb 5000 	str.w	r5, [fp]
  403d0c:	f10b 0b08 	add.w	fp, fp, #8
  403d10:	2b07      	cmp	r3, #7
  403d12:	f84b 6c04 	str.w	r6, [fp, #-4]
  403d16:	9225      	str	r2, [sp, #148]	; 0x94
  403d18:	9324      	str	r3, [sp, #144]	; 0x90
  403d1a:	ddef      	ble.n	403cfc <_svfprintf_r+0x8f0>
  403d1c:	4638      	mov	r0, r7
  403d1e:	4649      	mov	r1, r9
  403d20:	aa23      	add	r2, sp, #140	; 0x8c
  403d22:	46c3      	mov	fp, r8
  403d24:	f003 fd00 	bl	407728 <__ssprint_r>
  403d28:	2800      	cmp	r0, #0
  403d2a:	f47f ac34 	bne.w	403596 <_svfprintf_r+0x18a>
  403d2e:	9a25      	ldr	r2, [sp, #148]	; 0x94
  403d30:	9b24      	ldr	r3, [sp, #144]	; 0x90
  403d32:	e7e3      	b.n	403cfc <_svfprintf_r+0x8f0>
  403d34:	00408b64 	.word	0x00408b64
  403d38:	00408b78 	.word	0x00408b78
  403d3c:	00408b58 	.word	0x00408b58
  403d40:	00408b54 	.word	0x00408b54
  403d44:	00408b94 	.word	0x00408b94
  403d48:	00408b34 	.word	0x00408b34
  403d4c:	2b01      	cmp	r3, #1
  403d4e:	f000 814d 	beq.w	403fec <_svfprintf_r+0xbe0>
  403d52:	2b02      	cmp	r3, #2
  403d54:	f040 80e3 	bne.w	403f1e <_svfprintf_r+0xb12>
  403d58:	46c2      	mov	sl, r8
  403d5a:	9815      	ldr	r0, [sp, #84]	; 0x54
  403d5c:	0923      	lsrs	r3, r4, #4
  403d5e:	f004 010f 	and.w	r1, r4, #15
  403d62:	092a      	lsrs	r2, r5, #4
  403d64:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
  403d68:	4615      	mov	r5, r2
  403d6a:	461c      	mov	r4, r3
  403d6c:	5c43      	ldrb	r3, [r0, r1]
  403d6e:	f80a 3d01 	strb.w	r3, [sl, #-1]!
  403d72:	ea54 0305 	orrs.w	r3, r4, r5
  403d76:	d1f1      	bne.n	403d5c <_svfprintf_r+0x950>
  403d78:	4653      	mov	r3, sl
  403d7a:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
  403d7e:	ebc3 0408 	rsb	r4, r3, r8
  403d82:	e44f      	b.n	403624 <_svfprintf_r+0x218>
  403d84:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  403d86:	9a07      	ldr	r2, [sp, #28]
  403d88:	1a9f      	subs	r7, r3, r2
  403d8a:	2f00      	cmp	r7, #0
  403d8c:	f77f acd9 	ble.w	403742 <_svfprintf_r+0x336>
  403d90:	2f10      	cmp	r7, #16
  403d92:	9b24      	ldr	r3, [sp, #144]	; 0x90
  403d94:	f340 84f9 	ble.w	40478a <_svfprintf_r+0x137e>
  403d98:	940d      	str	r4, [sp, #52]	; 0x34
  403d9a:	f04f 0a10 	mov.w	sl, #16
  403d9e:	4dc8      	ldr	r5, [pc, #800]	; (4040c0 <_svfprintf_r+0xcb4>)
  403da0:	4662      	mov	r2, ip
  403da2:	9c09      	ldr	r4, [sp, #36]	; 0x24
  403da4:	e002      	b.n	403dac <_svfprintf_r+0x9a0>
  403da6:	3f10      	subs	r7, #16
  403da8:	2f10      	cmp	r7, #16
  403daa:	dd19      	ble.n	403de0 <_svfprintf_r+0x9d4>
  403dac:	3301      	adds	r3, #1
  403dae:	3210      	adds	r2, #16
  403db0:	f8cb 5000 	str.w	r5, [fp]
  403db4:	f10b 0b08 	add.w	fp, fp, #8
  403db8:	2b07      	cmp	r3, #7
  403dba:	f84b ac04 	str.w	sl, [fp, #-4]
  403dbe:	9225      	str	r2, [sp, #148]	; 0x94
  403dc0:	9324      	str	r3, [sp, #144]	; 0x90
  403dc2:	ddf0      	ble.n	403da6 <_svfprintf_r+0x99a>
  403dc4:	4620      	mov	r0, r4
  403dc6:	4649      	mov	r1, r9
  403dc8:	aa23      	add	r2, sp, #140	; 0x8c
  403dca:	46c3      	mov	fp, r8
  403dcc:	f003 fcac 	bl	407728 <__ssprint_r>
  403dd0:	2800      	cmp	r0, #0
  403dd2:	f47f abe0 	bne.w	403596 <_svfprintf_r+0x18a>
  403dd6:	3f10      	subs	r7, #16
  403dd8:	9a25      	ldr	r2, [sp, #148]	; 0x94
  403dda:	9b24      	ldr	r3, [sp, #144]	; 0x90
  403ddc:	2f10      	cmp	r7, #16
  403dde:	dce5      	bgt.n	403dac <_svfprintf_r+0x9a0>
  403de0:	9c0d      	ldr	r4, [sp, #52]	; 0x34
  403de2:	4694      	mov	ip, r2
  403de4:	3301      	adds	r3, #1
  403de6:	44bc      	add	ip, r7
  403de8:	f8cb 5000 	str.w	r5, [fp]
  403dec:	2b07      	cmp	r3, #7
  403dee:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
  403df2:	9324      	str	r3, [sp, #144]	; 0x90
  403df4:	f8cb 7004 	str.w	r7, [fp, #4]
  403df8:	f300 81fc 	bgt.w	4041f4 <_svfprintf_r+0xde8>
  403dfc:	f10b 0b08 	add.w	fp, fp, #8
  403e00:	e49f      	b.n	403742 <_svfprintf_r+0x336>
  403e02:	9b12      	ldr	r3, [sp, #72]	; 0x48
  403e04:	f10c 0601 	add.w	r6, ip, #1
  403e08:	9c24      	ldr	r4, [sp, #144]	; 0x90
  403e0a:	2b01      	cmp	r3, #1
  403e0c:	f340 81c9 	ble.w	4041a2 <_svfprintf_r+0xd96>
  403e10:	2301      	movs	r3, #1
  403e12:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  403e14:	9625      	str	r6, [sp, #148]	; 0x94
  403e16:	441c      	add	r4, r3
  403e18:	f8cb 2000 	str.w	r2, [fp]
  403e1c:	f8cb 3004 	str.w	r3, [fp, #4]
  403e20:	2c07      	cmp	r4, #7
  403e22:	9424      	str	r4, [sp, #144]	; 0x90
  403e24:	f300 81da 	bgt.w	4041dc <_svfprintf_r+0xdd0>
  403e28:	f10b 0b08 	add.w	fp, fp, #8
  403e2c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
  403e2e:	3401      	adds	r4, #1
  403e30:	9b16      	ldr	r3, [sp, #88]	; 0x58
  403e32:	4416      	add	r6, r2
  403e34:	2c07      	cmp	r4, #7
  403e36:	f8cb 3000 	str.w	r3, [fp]
  403e3a:	9625      	str	r6, [sp, #148]	; 0x94
  403e3c:	9424      	str	r4, [sp, #144]	; 0x90
  403e3e:	f8cb 2004 	str.w	r2, [fp, #4]
  403e42:	f300 81bf 	bgt.w	4041c4 <_svfprintf_r+0xdb8>
  403e46:	f10b 0b08 	add.w	fp, fp, #8
  403e4a:	2300      	movs	r3, #0
  403e4c:	9813      	ldr	r0, [sp, #76]	; 0x4c
  403e4e:	2200      	movs	r2, #0
  403e50:	9914      	ldr	r1, [sp, #80]	; 0x50
  403e52:	f004 fa4b 	bl	4082ec <__aeabi_dcmpeq>
  403e56:	9b12      	ldr	r3, [sp, #72]	; 0x48
  403e58:	2800      	cmp	r0, #0
  403e5a:	f040 80dc 	bne.w	404016 <_svfprintf_r+0xc0a>
  403e5e:	3b01      	subs	r3, #1
  403e60:	3401      	adds	r4, #1
  403e62:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  403e64:	441e      	add	r6, r3
  403e66:	2c07      	cmp	r4, #7
  403e68:	f102 0201 	add.w	r2, r2, #1
  403e6c:	9424      	str	r4, [sp, #144]	; 0x90
  403e6e:	9625      	str	r6, [sp, #148]	; 0x94
  403e70:	f8cb 2000 	str.w	r2, [fp]
  403e74:	f8cb 3004 	str.w	r3, [fp, #4]
  403e78:	f300 8100 	bgt.w	40407c <_svfprintf_r+0xc70>
  403e7c:	f10b 0b08 	add.w	fp, fp, #8
  403e80:	9a19      	ldr	r2, [sp, #100]	; 0x64
  403e82:	3401      	adds	r4, #1
  403e84:	ab1f      	add	r3, sp, #124	; 0x7c
  403e86:	eb06 0c02 	add.w	ip, r6, r2
  403e8a:	2c07      	cmp	r4, #7
  403e8c:	f8cb 2004 	str.w	r2, [fp, #4]
  403e90:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
  403e94:	9424      	str	r4, [sp, #144]	; 0x90
  403e96:	f8cb 3000 	str.w	r3, [fp]
  403e9a:	f77f aca0 	ble.w	4037de <_svfprintf_r+0x3d2>
  403e9e:	9809      	ldr	r0, [sp, #36]	; 0x24
  403ea0:	4649      	mov	r1, r9
  403ea2:	aa23      	add	r2, sp, #140	; 0x8c
  403ea4:	f003 fc40 	bl	407728 <__ssprint_r>
  403ea8:	2800      	cmp	r0, #0
  403eaa:	f47f ab74 	bne.w	403596 <_svfprintf_r+0x18a>
  403eae:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
  403eb2:	46c3      	mov	fp, r8
  403eb4:	e495      	b.n	4037e2 <_svfprintf_r+0x3d6>
  403eb6:	9809      	ldr	r0, [sp, #36]	; 0x24
  403eb8:	4649      	mov	r1, r9
  403eba:	aa23      	add	r2, sp, #140	; 0x8c
  403ebc:	f003 fc34 	bl	407728 <__ssprint_r>
  403ec0:	2800      	cmp	r0, #0
  403ec2:	f43f acde 	beq.w	403882 <_svfprintf_r+0x476>
  403ec6:	f7ff bb66 	b.w	403596 <_svfprintf_r+0x18a>
  403eca:	4614      	mov	r4, r2
  403ecc:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
  403ed0:	f7ff bba8 	b.w	403624 <_svfprintf_r+0x218>
  403ed4:	9809      	ldr	r0, [sp, #36]	; 0x24
  403ed6:	4649      	mov	r1, r9
  403ed8:	aa23      	add	r2, sp, #140	; 0x8c
  403eda:	f003 fc25 	bl	407728 <__ssprint_r>
  403ede:	2800      	cmp	r0, #0
  403ee0:	f47f ab59 	bne.w	403596 <_svfprintf_r+0x18a>
  403ee4:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
  403ee8:	46c3      	mov	fp, r8
  403eea:	e466      	b.n	4037ba <_svfprintf_r+0x3ae>
  403eec:	9809      	ldr	r0, [sp, #36]	; 0x24
  403eee:	4649      	mov	r1, r9
  403ef0:	aa23      	add	r2, sp, #140	; 0x8c
  403ef2:	f003 fc19 	bl	407728 <__ssprint_r>
  403ef6:	2800      	cmp	r0, #0
  403ef8:	f47f ab4d 	bne.w	403596 <_svfprintf_r+0x18a>
  403efc:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
  403f00:	46c3      	mov	fp, r8
  403f02:	e41a      	b.n	40373a <_svfprintf_r+0x32e>
  403f04:	9809      	ldr	r0, [sp, #36]	; 0x24
  403f06:	4649      	mov	r1, r9
  403f08:	aa23      	add	r2, sp, #140	; 0x8c
  403f0a:	f003 fc0d 	bl	407728 <__ssprint_r>
  403f0e:	2800      	cmp	r0, #0
  403f10:	f47f ab41 	bne.w	403596 <_svfprintf_r+0x18a>
  403f14:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
  403f18:	46c3      	mov	fp, r8
  403f1a:	f7ff bbfa 	b.w	403712 <_svfprintf_r+0x306>
  403f1e:	4641      	mov	r1, r8
  403f20:	08e2      	lsrs	r2, r4, #3
  403f22:	f004 0307 	and.w	r3, r4, #7
  403f26:	08e8      	lsrs	r0, r5, #3
  403f28:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
  403f2c:	3330      	adds	r3, #48	; 0x30
  403f2e:	4605      	mov	r5, r0
  403f30:	4614      	mov	r4, r2
  403f32:	f801 3d01 	strb.w	r3, [r1, #-1]!
  403f36:	ea54 0205 	orrs.w	r2, r4, r5
  403f3a:	d1f1      	bne.n	403f20 <_svfprintf_r+0xb14>
  403f3c:	9a06      	ldr	r2, [sp, #24]
  403f3e:	910f      	str	r1, [sp, #60]	; 0x3c
  403f40:	07d0      	lsls	r0, r2, #31
  403f42:	f100 8164 	bmi.w	40420e <_svfprintf_r+0xe02>
  403f46:	ebc1 0408 	rsb	r4, r1, r8
  403f4a:	f7ff bb6b 	b.w	403624 <_svfprintf_r+0x218>
  403f4e:	2302      	movs	r3, #2
  403f50:	f7ff bb3f 	b.w	4035d2 <_svfprintf_r+0x1c6>
  403f54:	9c1d      	ldr	r4, [sp, #116]	; 0x74
  403f56:	2c00      	cmp	r4, #0
  403f58:	f340 81f6 	ble.w	404348 <_svfprintf_r+0xf3c>
  403f5c:	9a12      	ldr	r2, [sp, #72]	; 0x48
  403f5e:	9911      	ldr	r1, [sp, #68]	; 0x44
  403f60:	4613      	mov	r3, r2
  403f62:	428a      	cmp	r2, r1
  403f64:	bfa8      	it	ge
  403f66:	460b      	movge	r3, r1
  403f68:	990f      	ldr	r1, [sp, #60]	; 0x3c
  403f6a:	461c      	mov	r4, r3
  403f6c:	188f      	adds	r7, r1, r2
  403f6e:	2c00      	cmp	r4, #0
  403f70:	dd0e      	ble.n	403f90 <_svfprintf_r+0xb84>
  403f72:	9b24      	ldr	r3, [sp, #144]	; 0x90
  403f74:	44a4      	add	ip, r4
  403f76:	f8cb 1000 	str.w	r1, [fp]
  403f7a:	3301      	adds	r3, #1
  403f7c:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
  403f80:	f8cb 4004 	str.w	r4, [fp, #4]
  403f84:	2b07      	cmp	r3, #7
  403f86:	9324      	str	r3, [sp, #144]	; 0x90
  403f88:	f300 8353 	bgt.w	404632 <_svfprintf_r+0x1226>
  403f8c:	f10b 0b08 	add.w	fp, fp, #8
  403f90:	9b11      	ldr	r3, [sp, #68]	; 0x44
  403f92:	2c00      	cmp	r4, #0
  403f94:	bfa8      	it	ge
  403f96:	1b1b      	subge	r3, r3, r4
  403f98:	2b00      	cmp	r3, #0
  403f9a:	461c      	mov	r4, r3
  403f9c:	f340 80a1 	ble.w	4040e2 <_svfprintf_r+0xcd6>
  403fa0:	2c10      	cmp	r4, #16
  403fa2:	9b24      	ldr	r3, [sp, #144]	; 0x90
  403fa4:	f340 846c 	ble.w	404880 <_svfprintf_r+0x1474>
  403fa8:	2610      	movs	r6, #16
  403faa:	4d45      	ldr	r5, [pc, #276]	; (4040c0 <_svfprintf_r+0xcb4>)
  403fac:	4662      	mov	r2, ip
  403fae:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
  403fb2:	e003      	b.n	403fbc <_svfprintf_r+0xbb0>
  403fb4:	3c10      	subs	r4, #16
  403fb6:	2c10      	cmp	r4, #16
  403fb8:	f340 8084 	ble.w	4040c4 <_svfprintf_r+0xcb8>
  403fbc:	3301      	adds	r3, #1
  403fbe:	3210      	adds	r2, #16
  403fc0:	f8cb 5000 	str.w	r5, [fp]
  403fc4:	f10b 0b08 	add.w	fp, fp, #8
  403fc8:	2b07      	cmp	r3, #7
  403fca:	f84b 6c04 	str.w	r6, [fp, #-4]
  403fce:	9225      	str	r2, [sp, #148]	; 0x94
  403fd0:	9324      	str	r3, [sp, #144]	; 0x90
  403fd2:	ddef      	ble.n	403fb4 <_svfprintf_r+0xba8>
  403fd4:	4650      	mov	r0, sl
  403fd6:	4649      	mov	r1, r9
  403fd8:	aa23      	add	r2, sp, #140	; 0x8c
  403fda:	46c3      	mov	fp, r8
  403fdc:	f003 fba4 	bl	407728 <__ssprint_r>
  403fe0:	2800      	cmp	r0, #0
  403fe2:	f47f aad8 	bne.w	403596 <_svfprintf_r+0x18a>
  403fe6:	9a25      	ldr	r2, [sp, #148]	; 0x94
  403fe8:	9b24      	ldr	r3, [sp, #144]	; 0x90
  403fea:	e7e3      	b.n	403fb4 <_svfprintf_r+0xba8>
  403fec:	2d00      	cmp	r5, #0
  403fee:	bf08      	it	eq
  403ff0:	2c0a      	cmpeq	r4, #10
  403ff2:	f080 811a 	bcs.w	40422a <_svfprintf_r+0xe1e>
  403ff6:	f50d 7a80 	add.w	sl, sp, #256	; 0x100
  403ffa:	3430      	adds	r4, #48	; 0x30
  403ffc:	f80a 4d41 	strb.w	r4, [sl, #-65]!
  404000:	ebca 0408 	rsb	r4, sl, r8
  404004:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
  404008:	f7ff bb0c 	b.w	403624 <_svfprintf_r+0x218>
  40400c:	461c      	mov	r4, r3
  40400e:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
  404012:	f7ff bb07 	b.w	403624 <_svfprintf_r+0x218>
  404016:	1e5f      	subs	r7, r3, #1
  404018:	2f00      	cmp	r7, #0
  40401a:	f77f af31 	ble.w	403e80 <_svfprintf_r+0xa74>
  40401e:	2f10      	cmp	r7, #16
  404020:	4d27      	ldr	r5, [pc, #156]	; (4040c0 <_svfprintf_r+0xcb4>)
  404022:	bfc8      	it	gt
  404024:	f04f 0a10 	movgt.w	sl, #16
  404028:	dc03      	bgt.n	404032 <_svfprintf_r+0xc26>
  40402a:	e01c      	b.n	404066 <_svfprintf_r+0xc5a>
  40402c:	3f10      	subs	r7, #16
  40402e:	2f10      	cmp	r7, #16
  404030:	dd19      	ble.n	404066 <_svfprintf_r+0xc5a>
  404032:	3401      	adds	r4, #1
  404034:	3610      	adds	r6, #16
  404036:	f8cb 5000 	str.w	r5, [fp]
  40403a:	f10b 0b08 	add.w	fp, fp, #8
  40403e:	2c07      	cmp	r4, #7
  404040:	f84b ac04 	str.w	sl, [fp, #-4]
  404044:	9625      	str	r6, [sp, #148]	; 0x94
  404046:	9424      	str	r4, [sp, #144]	; 0x90
  404048:	ddf0      	ble.n	40402c <_svfprintf_r+0xc20>
  40404a:	9809      	ldr	r0, [sp, #36]	; 0x24
  40404c:	4649      	mov	r1, r9
  40404e:	aa23      	add	r2, sp, #140	; 0x8c
  404050:	46c3      	mov	fp, r8
  404052:	f003 fb69 	bl	407728 <__ssprint_r>
  404056:	2800      	cmp	r0, #0
  404058:	f47f aa9d 	bne.w	403596 <_svfprintf_r+0x18a>
  40405c:	3f10      	subs	r7, #16
  40405e:	9e25      	ldr	r6, [sp, #148]	; 0x94
  404060:	9c24      	ldr	r4, [sp, #144]	; 0x90
  404062:	2f10      	cmp	r7, #16
  404064:	dce5      	bgt.n	404032 <_svfprintf_r+0xc26>
  404066:	3401      	adds	r4, #1
  404068:	443e      	add	r6, r7
  40406a:	f8cb 5000 	str.w	r5, [fp]
  40406e:	2c07      	cmp	r4, #7
  404070:	9625      	str	r6, [sp, #148]	; 0x94
  404072:	9424      	str	r4, [sp, #144]	; 0x90
  404074:	f8cb 7004 	str.w	r7, [fp, #4]
  404078:	f77f af00 	ble.w	403e7c <_svfprintf_r+0xa70>
  40407c:	9809      	ldr	r0, [sp, #36]	; 0x24
  40407e:	4649      	mov	r1, r9
  404080:	aa23      	add	r2, sp, #140	; 0x8c
  404082:	f003 fb51 	bl	407728 <__ssprint_r>
  404086:	2800      	cmp	r0, #0
  404088:	f47f aa85 	bne.w	403596 <_svfprintf_r+0x18a>
  40408c:	9e25      	ldr	r6, [sp, #148]	; 0x94
  40408e:	46c3      	mov	fp, r8
  404090:	9c24      	ldr	r4, [sp, #144]	; 0x90
  404092:	e6f5      	b.n	403e80 <_svfprintf_r+0xa74>
  404094:	4694      	mov	ip, r2
  404096:	3301      	adds	r3, #1
  404098:	44a4      	add	ip, r4
  40409a:	f8cb 5000 	str.w	r5, [fp]
  40409e:	2b07      	cmp	r3, #7
  4040a0:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
  4040a4:	9324      	str	r3, [sp, #144]	; 0x90
  4040a6:	f8cb 4004 	str.w	r4, [fp, #4]
  4040aa:	f77f ab98 	ble.w	4037de <_svfprintf_r+0x3d2>
  4040ae:	e6f6      	b.n	403e9e <_svfprintf_r+0xa92>
  4040b0:	990c      	ldr	r1, [sp, #48]	; 0x30
  4040b2:	2500      	movs	r5, #0
  4040b4:	460a      	mov	r2, r1
  4040b6:	680c      	ldr	r4, [r1, #0]
  4040b8:	3204      	adds	r2, #4
  4040ba:	920c      	str	r2, [sp, #48]	; 0x30
  4040bc:	f7ff ba89 	b.w	4035d2 <_svfprintf_r+0x1c6>
  4040c0:	00408b34 	.word	0x00408b34
  4040c4:	4694      	mov	ip, r2
  4040c6:	3301      	adds	r3, #1
  4040c8:	44a4      	add	ip, r4
  4040ca:	f8cb 5000 	str.w	r5, [fp]
  4040ce:	2b07      	cmp	r3, #7
  4040d0:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
  4040d4:	9324      	str	r3, [sp, #144]	; 0x90
  4040d6:	f8cb 4004 	str.w	r4, [fp, #4]
  4040da:	f300 82df 	bgt.w	40469c <_svfprintf_r+0x1290>
  4040de:	f10b 0b08 	add.w	fp, fp, #8
  4040e2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4040e4:	9911      	ldr	r1, [sp, #68]	; 0x44
  4040e6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  4040e8:	440a      	add	r2, r1
  4040ea:	4616      	mov	r6, r2
  4040ec:	9a12      	ldr	r2, [sp, #72]	; 0x48
  4040ee:	4293      	cmp	r3, r2
  4040f0:	db45      	blt.n	40417e <_svfprintf_r+0xd72>
  4040f2:	9a06      	ldr	r2, [sp, #24]
  4040f4:	07d0      	lsls	r0, r2, #31
  4040f6:	d442      	bmi.n	40417e <_svfprintf_r+0xd72>
  4040f8:	9a12      	ldr	r2, [sp, #72]	; 0x48
  4040fa:	1bbc      	subs	r4, r7, r6
  4040fc:	1ad3      	subs	r3, r2, r3
  4040fe:	429c      	cmp	r4, r3
  404100:	bfa8      	it	ge
  404102:	461c      	movge	r4, r3
  404104:	2c00      	cmp	r4, #0
  404106:	4625      	mov	r5, r4
  404108:	dd0e      	ble.n	404128 <_svfprintf_r+0xd1c>
  40410a:	9a24      	ldr	r2, [sp, #144]	; 0x90
  40410c:	44a4      	add	ip, r4
  40410e:	f8cb 6000 	str.w	r6, [fp]
  404112:	3201      	adds	r2, #1
  404114:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
  404118:	f8cb 4004 	str.w	r4, [fp, #4]
  40411c:	2a07      	cmp	r2, #7
  40411e:	9224      	str	r2, [sp, #144]	; 0x90
  404120:	f300 82a0 	bgt.w	404664 <_svfprintf_r+0x1258>
  404124:	f10b 0b08 	add.w	fp, fp, #8
  404128:	2d00      	cmp	r5, #0
  40412a:	bfac      	ite	ge
  40412c:	1b5c      	subge	r4, r3, r5
  40412e:	461c      	movlt	r4, r3
  404130:	2c00      	cmp	r4, #0
  404132:	f77f ab56 	ble.w	4037e2 <_svfprintf_r+0x3d6>
  404136:	2c10      	cmp	r4, #16
  404138:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40413a:	f340 8396 	ble.w	40486a <_svfprintf_r+0x145e>
  40413e:	2610      	movs	r6, #16
  404140:	4db1      	ldr	r5, [pc, #708]	; (404408 <_svfprintf_r+0xffc>)
  404142:	4662      	mov	r2, ip
  404144:	9f09      	ldr	r7, [sp, #36]	; 0x24
  404146:	e002      	b.n	40414e <_svfprintf_r+0xd42>
  404148:	3c10      	subs	r4, #16
  40414a:	2c10      	cmp	r4, #16
  40414c:	dda2      	ble.n	404094 <_svfprintf_r+0xc88>
  40414e:	3301      	adds	r3, #1
  404150:	3210      	adds	r2, #16
  404152:	f8cb 5000 	str.w	r5, [fp]
  404156:	f10b 0b08 	add.w	fp, fp, #8
  40415a:	2b07      	cmp	r3, #7
  40415c:	f84b 6c04 	str.w	r6, [fp, #-4]
  404160:	9225      	str	r2, [sp, #148]	; 0x94
  404162:	9324      	str	r3, [sp, #144]	; 0x90
  404164:	ddf0      	ble.n	404148 <_svfprintf_r+0xd3c>
  404166:	4638      	mov	r0, r7
  404168:	4649      	mov	r1, r9
  40416a:	aa23      	add	r2, sp, #140	; 0x8c
  40416c:	46c3      	mov	fp, r8
  40416e:	f003 fadb 	bl	407728 <__ssprint_r>
  404172:	2800      	cmp	r0, #0
  404174:	f47f aa0f 	bne.w	403596 <_svfprintf_r+0x18a>
  404178:	9a25      	ldr	r2, [sp, #148]	; 0x94
  40417a:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40417c:	e7e4      	b.n	404148 <_svfprintf_r+0xd3c>
  40417e:	9a24      	ldr	r2, [sp, #144]	; 0x90
  404180:	9817      	ldr	r0, [sp, #92]	; 0x5c
  404182:	3201      	adds	r2, #1
  404184:	9916      	ldr	r1, [sp, #88]	; 0x58
  404186:	4484      	add	ip, r0
  404188:	f8cb 0004 	str.w	r0, [fp, #4]
  40418c:	2a07      	cmp	r2, #7
  40418e:	f8cb 1000 	str.w	r1, [fp]
  404192:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
  404196:	9224      	str	r2, [sp, #144]	; 0x90
  404198:	f300 8273 	bgt.w	404682 <_svfprintf_r+0x1276>
  40419c:	f10b 0b08 	add.w	fp, fp, #8
  4041a0:	e7aa      	b.n	4040f8 <_svfprintf_r+0xcec>
  4041a2:	9b06      	ldr	r3, [sp, #24]
  4041a4:	07d9      	lsls	r1, r3, #31
  4041a6:	f53f ae33 	bmi.w	403e10 <_svfprintf_r+0xa04>
  4041aa:	2301      	movs	r3, #1
  4041ac:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4041ae:	9625      	str	r6, [sp, #148]	; 0x94
  4041b0:	441c      	add	r4, r3
  4041b2:	f8cb 2000 	str.w	r2, [fp]
  4041b6:	f8cb 3004 	str.w	r3, [fp, #4]
  4041ba:	2c07      	cmp	r4, #7
  4041bc:	9424      	str	r4, [sp, #144]	; 0x90
  4041be:	f77f ae5d 	ble.w	403e7c <_svfprintf_r+0xa70>
  4041c2:	e75b      	b.n	40407c <_svfprintf_r+0xc70>
  4041c4:	9809      	ldr	r0, [sp, #36]	; 0x24
  4041c6:	4649      	mov	r1, r9
  4041c8:	aa23      	add	r2, sp, #140	; 0x8c
  4041ca:	f003 faad 	bl	407728 <__ssprint_r>
  4041ce:	2800      	cmp	r0, #0
  4041d0:	f47f a9e1 	bne.w	403596 <_svfprintf_r+0x18a>
  4041d4:	9e25      	ldr	r6, [sp, #148]	; 0x94
  4041d6:	46c3      	mov	fp, r8
  4041d8:	9c24      	ldr	r4, [sp, #144]	; 0x90
  4041da:	e636      	b.n	403e4a <_svfprintf_r+0xa3e>
  4041dc:	9809      	ldr	r0, [sp, #36]	; 0x24
  4041de:	4649      	mov	r1, r9
  4041e0:	aa23      	add	r2, sp, #140	; 0x8c
  4041e2:	f003 faa1 	bl	407728 <__ssprint_r>
  4041e6:	2800      	cmp	r0, #0
  4041e8:	f47f a9d5 	bne.w	403596 <_svfprintf_r+0x18a>
  4041ec:	9e25      	ldr	r6, [sp, #148]	; 0x94
  4041ee:	46c3      	mov	fp, r8
  4041f0:	9c24      	ldr	r4, [sp, #144]	; 0x90
  4041f2:	e61b      	b.n	403e2c <_svfprintf_r+0xa20>
  4041f4:	9809      	ldr	r0, [sp, #36]	; 0x24
  4041f6:	4649      	mov	r1, r9
  4041f8:	aa23      	add	r2, sp, #140	; 0x8c
  4041fa:	f003 fa95 	bl	407728 <__ssprint_r>
  4041fe:	2800      	cmp	r0, #0
  404200:	f47f a9c9 	bne.w	403596 <_svfprintf_r+0x18a>
  404204:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
  404208:	46c3      	mov	fp, r8
  40420a:	f7ff ba9a 	b.w	403742 <_svfprintf_r+0x336>
  40420e:	2b30      	cmp	r3, #48	; 0x30
  404210:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  404212:	f43f adb4 	beq.w	403d7e <_svfprintf_r+0x972>
  404216:	3b01      	subs	r3, #1
  404218:	461a      	mov	r2, r3
  40421a:	930f      	str	r3, [sp, #60]	; 0x3c
  40421c:	2330      	movs	r3, #48	; 0x30
  40421e:	ebc2 0408 	rsb	r4, r2, r8
  404222:	f801 3c01 	strb.w	r3, [r1, #-1]
  404226:	f7ff b9fd 	b.w	403624 <_svfprintf_r+0x218>
  40422a:	46c2      	mov	sl, r8
  40422c:	f8cd c01c 	str.w	ip, [sp, #28]
  404230:	4620      	mov	r0, r4
  404232:	4629      	mov	r1, r5
  404234:	220a      	movs	r2, #10
  404236:	2300      	movs	r3, #0
  404238:	f004 f8b2 	bl	4083a0 <__aeabi_uldivmod>
  40423c:	f102 0e30 	add.w	lr, r2, #48	; 0x30
  404240:	4620      	mov	r0, r4
  404242:	4629      	mov	r1, r5
  404244:	2300      	movs	r3, #0
  404246:	220a      	movs	r2, #10
  404248:	f80a ed01 	strb.w	lr, [sl, #-1]!
  40424c:	f004 f8a8 	bl	4083a0 <__aeabi_uldivmod>
  404250:	4604      	mov	r4, r0
  404252:	460d      	mov	r5, r1
  404254:	ea54 0305 	orrs.w	r3, r4, r5
  404258:	d1ea      	bne.n	404230 <_svfprintf_r+0xe24>
  40425a:	f8dd c01c 	ldr.w	ip, [sp, #28]
  40425e:	ebca 0408 	rsb	r4, sl, r8
  404262:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
  404266:	f7ff b9dd 	b.w	403624 <_svfprintf_r+0x218>
  40426a:	9813      	ldr	r0, [sp, #76]	; 0x4c
  40426c:	9914      	ldr	r1, [sp, #80]	; 0x50
  40426e:	f8cd c01c 	str.w	ip, [sp, #28]
  404272:	f003 f9e1 	bl	407638 <__fpclassifyd>
  404276:	f8dd c01c 	ldr.w	ip, [sp, #28]
  40427a:	2800      	cmp	r0, #0
  40427c:	f040 80cc 	bne.w	404418 <_svfprintf_r+0x100c>
  404280:	9c06      	ldr	r4, [sp, #24]
  404282:	2103      	movs	r1, #3
  404284:	4a61      	ldr	r2, [pc, #388]	; (40440c <_svfprintf_r+0x1000>)
  404286:	4b62      	ldr	r3, [pc, #392]	; (404410 <_svfprintf_r+0x1004>)
  404288:	f024 0480 	bic.w	r4, r4, #128	; 0x80
  40428c:	9010      	str	r0, [sp, #64]	; 0x40
  40428e:	2e47      	cmp	r6, #71	; 0x47
  404290:	bfd8      	it	le
  404292:	461a      	movle	r2, r3
  404294:	9406      	str	r4, [sp, #24]
  404296:	9107      	str	r1, [sp, #28]
  404298:	460c      	mov	r4, r1
  40429a:	9011      	str	r0, [sp, #68]	; 0x44
  40429c:	920f      	str	r2, [sp, #60]	; 0x3c
  40429e:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  4042a2:	f7ff b9c6 	b.w	403632 <_svfprintf_r+0x226>
  4042a6:	9b06      	ldr	r3, [sp, #24]
  4042a8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  4042aa:	f013 0f40 	tst.w	r3, #64	; 0x40
  4042ae:	4613      	mov	r3, r2
  4042b0:	f43f abc9 	beq.w	403a46 <_svfprintf_r+0x63a>
  4042b4:	8814      	ldrh	r4, [r2, #0]
  4042b6:	3204      	adds	r2, #4
  4042b8:	2500      	movs	r5, #0
  4042ba:	2301      	movs	r3, #1
  4042bc:	920c      	str	r2, [sp, #48]	; 0x30
  4042be:	f7ff b988 	b.w	4035d2 <_svfprintf_r+0x1c6>
  4042c2:	9b06      	ldr	r3, [sp, #24]
  4042c4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  4042c6:	f013 0f40 	tst.w	r3, #64	; 0x40
  4042ca:	4613      	mov	r3, r2
  4042cc:	f000 8130 	beq.w	404530 <_svfprintf_r+0x1124>
  4042d0:	3304      	adds	r3, #4
  4042d2:	8814      	ldrh	r4, [r2, #0]
  4042d4:	2500      	movs	r5, #0
  4042d6:	930c      	str	r3, [sp, #48]	; 0x30
  4042d8:	f7ff bbcd 	b.w	403a76 <_svfprintf_r+0x66a>
  4042dc:	9b06      	ldr	r3, [sp, #24]
  4042de:	06dd      	lsls	r5, r3, #27
  4042e0:	d40b      	bmi.n	4042fa <_svfprintf_r+0xeee>
  4042e2:	9b06      	ldr	r3, [sp, #24]
  4042e4:	065c      	lsls	r4, r3, #25
  4042e6:	d508      	bpl.n	4042fa <_svfprintf_r+0xeee>
  4042e8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  4042ea:	6813      	ldr	r3, [r2, #0]
  4042ec:	3204      	adds	r2, #4
  4042ee:	920c      	str	r2, [sp, #48]	; 0x30
  4042f0:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
  4042f4:	801a      	strh	r2, [r3, #0]
  4042f6:	f7ff b8af 	b.w	403458 <_svfprintf_r+0x4c>
  4042fa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  4042fc:	6813      	ldr	r3, [r2, #0]
  4042fe:	3204      	adds	r2, #4
  404300:	920c      	str	r2, [sp, #48]	; 0x30
  404302:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  404304:	601a      	str	r2, [r3, #0]
  404306:	f7ff b8a7 	b.w	403458 <_svfprintf_r+0x4c>
  40430a:	9b06      	ldr	r3, [sp, #24]
  40430c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  40430e:	f013 0f40 	tst.w	r3, #64	; 0x40
  404312:	4613      	mov	r3, r2
  404314:	f43f ac26 	beq.w	403b64 <_svfprintf_r+0x758>
  404318:	f9b2 4000 	ldrsh.w	r4, [r2]
  40431c:	3304      	adds	r3, #4
  40431e:	17e5      	asrs	r5, r4, #31
  404320:	930c      	str	r3, [sp, #48]	; 0x30
  404322:	4622      	mov	r2, r4
  404324:	462b      	mov	r3, r5
  404326:	f7ff baf9 	b.w	40391c <_svfprintf_r+0x510>
  40432a:	4d37      	ldr	r5, [pc, #220]	; (404408 <_svfprintf_r+0xffc>)
  40432c:	f7ff ba37 	b.w	40379e <_svfprintf_r+0x392>
  404330:	9809      	ldr	r0, [sp, #36]	; 0x24
  404332:	4649      	mov	r1, r9
  404334:	aa23      	add	r2, sp, #140	; 0x8c
  404336:	f003 f9f7 	bl	407728 <__ssprint_r>
  40433a:	2800      	cmp	r0, #0
  40433c:	f47f a92b 	bne.w	403596 <_svfprintf_r+0x18a>
  404340:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
  404344:	46c3      	mov	fp, r8
  404346:	e4b2      	b.n	403cae <_svfprintf_r+0x8a2>
  404348:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40434a:	2201      	movs	r2, #1
  40434c:	f10c 0c01 	add.w	ip, ip, #1
  404350:	4930      	ldr	r1, [pc, #192]	; (404414 <_svfprintf_r+0x1008>)
  404352:	4413      	add	r3, r2
  404354:	f8cb 2004 	str.w	r2, [fp, #4]
  404358:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
  40435c:	2b07      	cmp	r3, #7
  40435e:	f8cb 1000 	str.w	r1, [fp]
  404362:	9324      	str	r3, [sp, #144]	; 0x90
  404364:	f300 80fa 	bgt.w	40455c <_svfprintf_r+0x1150>
  404368:	f10b 0b08 	add.w	fp, fp, #8
  40436c:	b92c      	cbnz	r4, 40437a <_svfprintf_r+0xf6e>
  40436e:	9b12      	ldr	r3, [sp, #72]	; 0x48
  404370:	b91b      	cbnz	r3, 40437a <_svfprintf_r+0xf6e>
  404372:	9b06      	ldr	r3, [sp, #24]
  404374:	07dd      	lsls	r5, r3, #31
  404376:	f57f aa34 	bpl.w	4037e2 <_svfprintf_r+0x3d6>
  40437a:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40437c:	9917      	ldr	r1, [sp, #92]	; 0x5c
  40437e:	3301      	adds	r3, #1
  404380:	9816      	ldr	r0, [sp, #88]	; 0x58
  404382:	eb0c 0201 	add.w	r2, ip, r1
  404386:	f8cb 1004 	str.w	r1, [fp, #4]
  40438a:	2b07      	cmp	r3, #7
  40438c:	f8cb 0000 	str.w	r0, [fp]
  404390:	9225      	str	r2, [sp, #148]	; 0x94
  404392:	9324      	str	r3, [sp, #144]	; 0x90
  404394:	f300 824c 	bgt.w	404830 <_svfprintf_r+0x1424>
  404398:	f10b 0b08 	add.w	fp, fp, #8
  40439c:	4264      	negs	r4, r4
  40439e:	2c00      	cmp	r4, #0
  4043a0:	f340 8126 	ble.w	4045f0 <_svfprintf_r+0x11e4>
  4043a4:	2c10      	cmp	r4, #16
  4043a6:	4d18      	ldr	r5, [pc, #96]	; (404408 <_svfprintf_r+0xffc>)
  4043a8:	f340 814f 	ble.w	40464a <_svfprintf_r+0x123e>
  4043ac:	2610      	movs	r6, #16
  4043ae:	9f09      	ldr	r7, [sp, #36]	; 0x24
  4043b0:	e003      	b.n	4043ba <_svfprintf_r+0xfae>
  4043b2:	3c10      	subs	r4, #16
  4043b4:	2c10      	cmp	r4, #16
  4043b6:	f340 8148 	ble.w	40464a <_svfprintf_r+0x123e>
  4043ba:	3301      	adds	r3, #1
  4043bc:	3210      	adds	r2, #16
  4043be:	f8cb 5000 	str.w	r5, [fp]
  4043c2:	f10b 0b08 	add.w	fp, fp, #8
  4043c6:	2b07      	cmp	r3, #7
  4043c8:	f84b 6c04 	str.w	r6, [fp, #-4]
  4043cc:	9225      	str	r2, [sp, #148]	; 0x94
  4043ce:	9324      	str	r3, [sp, #144]	; 0x90
  4043d0:	ddef      	ble.n	4043b2 <_svfprintf_r+0xfa6>
  4043d2:	4638      	mov	r0, r7
  4043d4:	4649      	mov	r1, r9
  4043d6:	aa23      	add	r2, sp, #140	; 0x8c
  4043d8:	46c3      	mov	fp, r8
  4043da:	f003 f9a5 	bl	407728 <__ssprint_r>
  4043de:	2800      	cmp	r0, #0
  4043e0:	f47f a8d9 	bne.w	403596 <_svfprintf_r+0x18a>
  4043e4:	9a25      	ldr	r2, [sp, #148]	; 0x94
  4043e6:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4043e8:	e7e3      	b.n	4043b2 <_svfprintf_r+0xfa6>
  4043ea:	f041 0120 	orr.w	r1, r1, #32
  4043ee:	785e      	ldrb	r6, [r3, #1]
  4043f0:	9106      	str	r1, [sp, #24]
  4043f2:	1c59      	adds	r1, r3, #1
  4043f4:	f7ff b85f 	b.w	4034b6 <_svfprintf_r+0xaa>
  4043f8:	980b      	ldr	r0, [sp, #44]	; 0x2c
  4043fa:	910c      	str	r1, [sp, #48]	; 0x30
  4043fc:	4619      	mov	r1, r3
  4043fe:	4240      	negs	r0, r0
  404400:	900b      	str	r0, [sp, #44]	; 0x2c
  404402:	f7ff ba43 	b.w	40388c <_svfprintf_r+0x480>
  404406:	bf00      	nop
  404408:	00408b34 	.word	0x00408b34
  40440c:	00408b60 	.word	0x00408b60
  404410:	00408b5c 	.word	0x00408b5c
  404414:	00408b94 	.word	0x00408b94
  404418:	f1bc 3fff 	cmp.w	ip, #4294967295
  40441c:	f026 0a20 	bic.w	sl, r6, #32
  404420:	f000 80a9 	beq.w	404576 <_svfprintf_r+0x116a>
  404424:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
  404428:	f040 80a7 	bne.w	40457a <_svfprintf_r+0x116e>
  40442c:	f1bc 0f00 	cmp.w	ip, #0
  404430:	f040 80a3 	bne.w	40457a <_svfprintf_r+0x116e>
  404434:	9b06      	ldr	r3, [sp, #24]
  404436:	f04f 0a47 	mov.w	sl, #71	; 0x47
  40443a:	f04f 0c01 	mov.w	ip, #1
  40443e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  404442:	930e      	str	r3, [sp, #56]	; 0x38
  404444:	9b14      	ldr	r3, [sp, #80]	; 0x50
  404446:	2b00      	cmp	r3, #0
  404448:	f2c0 81ff 	blt.w	40484a <_svfprintf_r+0x143e>
  40444c:	461d      	mov	r5, r3
  40444e:	9f13      	ldr	r7, [sp, #76]	; 0x4c
  404450:	2300      	movs	r3, #0
  404452:	930d      	str	r3, [sp, #52]	; 0x34
  404454:	2002      	movs	r0, #2
  404456:	a91d      	add	r1, sp, #116	; 0x74
  404458:	f8cd c004 	str.w	ip, [sp, #4]
  40445c:	463a      	mov	r2, r7
  40445e:	9000      	str	r0, [sp, #0]
  404460:	a81e      	add	r0, sp, #120	; 0x78
  404462:	9102      	str	r1, [sp, #8]
  404464:	a921      	add	r1, sp, #132	; 0x84
  404466:	9003      	str	r0, [sp, #12]
  404468:	462b      	mov	r3, r5
  40446a:	9809      	ldr	r0, [sp, #36]	; 0x24
  40446c:	9104      	str	r1, [sp, #16]
  40446e:	f8cd c01c 	str.w	ip, [sp, #28]
  404472:	f000 fbb9 	bl	404be8 <_dtoa_r>
  404476:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
  40447a:	900f      	str	r0, [sp, #60]	; 0x3c
  40447c:	f8dd c01c 	ldr.w	ip, [sp, #28]
  404480:	f040 8242 	bne.w	404908 <_svfprintf_r+0x14fc>
  404484:	9b06      	ldr	r3, [sp, #24]
  404486:	07db      	lsls	r3, r3, #31
  404488:	f140 81f3 	bpl.w	404872 <_svfprintf_r+0x1466>
  40448c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40448e:	eb03 040c 	add.w	r4, r3, ip
  404492:	4638      	mov	r0, r7
  404494:	2200      	movs	r2, #0
  404496:	2300      	movs	r3, #0
  404498:	4629      	mov	r1, r5
  40449a:	f8cd c01c 	str.w	ip, [sp, #28]
  40449e:	f003 ff25 	bl	4082ec <__aeabi_dcmpeq>
  4044a2:	f8dd c01c 	ldr.w	ip, [sp, #28]
  4044a6:	2800      	cmp	r0, #0
  4044a8:	f040 8172 	bne.w	404790 <_svfprintf_r+0x1384>
  4044ac:	9b21      	ldr	r3, [sp, #132]	; 0x84
  4044ae:	429c      	cmp	r4, r3
  4044b0:	d906      	bls.n	4044c0 <_svfprintf_r+0x10b4>
  4044b2:	2130      	movs	r1, #48	; 0x30
  4044b4:	1c5a      	adds	r2, r3, #1
  4044b6:	9221      	str	r2, [sp, #132]	; 0x84
  4044b8:	7019      	strb	r1, [r3, #0]
  4044ba:	9b21      	ldr	r3, [sp, #132]	; 0x84
  4044bc:	429c      	cmp	r4, r3
  4044be:	d8f9      	bhi.n	4044b4 <_svfprintf_r+0x10a8>
  4044c0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4044c2:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
  4044c6:	eba3 0302 	sub.w	r3, r3, r2
  4044ca:	9312      	str	r3, [sp, #72]	; 0x48
  4044cc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  4044ce:	f040 8113 	bne.w	4046f8 <_svfprintf_r+0x12ec>
  4044d2:	459c      	cmp	ip, r3
  4044d4:	f2c0 8168 	blt.w	4047a8 <_svfprintf_r+0x139c>
  4044d8:	1cd9      	adds	r1, r3, #3
  4044da:	f2c0 8165 	blt.w	4047a8 <_svfprintf_r+0x139c>
  4044de:	2667      	movs	r6, #103	; 0x67
  4044e0:	9311      	str	r3, [sp, #68]	; 0x44
  4044e2:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4044e4:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4044e6:	4293      	cmp	r3, r2
  4044e8:	f300 81b6 	bgt.w	404858 <_svfprintf_r+0x144c>
  4044ec:	9b06      	ldr	r3, [sp, #24]
  4044ee:	07df      	lsls	r7, r3, #31
  4044f0:	f100 81c1 	bmi.w	404876 <_svfprintf_r+0x146a>
  4044f4:	4614      	mov	r4, r2
  4044f6:	ea22 7ce2 	bic.w	ip, r2, r2, asr #31
  4044fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4044fc:	2b00      	cmp	r3, #0
  4044fe:	f040 80f0 	bne.w	4046e2 <_svfprintf_r+0x12d6>
  404502:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  404504:	f8cd c01c 	str.w	ip, [sp, #28]
  404508:	9306      	str	r3, [sp, #24]
  40450a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40450c:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  404510:	9310      	str	r3, [sp, #64]	; 0x40
  404512:	f7ff b88e 	b.w	403632 <_svfprintf_r+0x226>
  404516:	9809      	ldr	r0, [sp, #36]	; 0x24
  404518:	4649      	mov	r1, r9
  40451a:	aa23      	add	r2, sp, #140	; 0x8c
  40451c:	f003 f904 	bl	407728 <__ssprint_r>
  404520:	2800      	cmp	r0, #0
  404522:	f47f a838 	bne.w	403596 <_svfprintf_r+0x18a>
  404526:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
  40452a:	46c3      	mov	fp, r8
  40452c:	f7ff bbd8 	b.w	403ce0 <_svfprintf_r+0x8d4>
  404530:	3304      	adds	r3, #4
  404532:	6814      	ldr	r4, [r2, #0]
  404534:	2500      	movs	r5, #0
  404536:	930c      	str	r3, [sp, #48]	; 0x30
  404538:	f7ff ba9d 	b.w	403a76 <_svfprintf_r+0x66a>
  40453c:	9809      	ldr	r0, [sp, #36]	; 0x24
  40453e:	2140      	movs	r1, #64	; 0x40
  404540:	f001 ff82 	bl	406448 <_malloc_r>
  404544:	f8c9 0000 	str.w	r0, [r9]
  404548:	f8c9 0010 	str.w	r0, [r9, #16]
  40454c:	2800      	cmp	r0, #0
  40454e:	f000 81d4 	beq.w	4048fa <_svfprintf_r+0x14ee>
  404552:	2340      	movs	r3, #64	; 0x40
  404554:	f8c9 3014 	str.w	r3, [r9, #20]
  404558:	f7fe bf70 	b.w	40343c <_svfprintf_r+0x30>
  40455c:	9809      	ldr	r0, [sp, #36]	; 0x24
  40455e:	4649      	mov	r1, r9
  404560:	aa23      	add	r2, sp, #140	; 0x8c
  404562:	f003 f8e1 	bl	407728 <__ssprint_r>
  404566:	2800      	cmp	r0, #0
  404568:	f47f a815 	bne.w	403596 <_svfprintf_r+0x18a>
  40456c:	9c1d      	ldr	r4, [sp, #116]	; 0x74
  40456e:	46c3      	mov	fp, r8
  404570:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
  404574:	e6fa      	b.n	40436c <_svfprintf_r+0xf60>
  404576:	f04f 0c06 	mov.w	ip, #6
  40457a:	9b06      	ldr	r3, [sp, #24]
  40457c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  404580:	930e      	str	r3, [sp, #56]	; 0x38
  404582:	9b14      	ldr	r3, [sp, #80]	; 0x50
  404584:	2b00      	cmp	r3, #0
  404586:	f2c0 8160 	blt.w	40484a <_svfprintf_r+0x143e>
  40458a:	461d      	mov	r5, r3
  40458c:	9f13      	ldr	r7, [sp, #76]	; 0x4c
  40458e:	2300      	movs	r3, #0
  404590:	930d      	str	r3, [sp, #52]	; 0x34
  404592:	f1ba 0f46 	cmp.w	sl, #70	; 0x46
  404596:	f000 80c4 	beq.w	404722 <_svfprintf_r+0x1316>
  40459a:	f1ba 0f45 	cmp.w	sl, #69	; 0x45
  40459e:	f47f af59 	bne.w	404454 <_svfprintf_r+0x1048>
  4045a2:	f10c 0401 	add.w	r4, ip, #1
  4045a6:	f8cd c01c 	str.w	ip, [sp, #28]
  4045aa:	f10d 0e74 	add.w	lr, sp, #116	; 0x74
  4045ae:	f10d 0c84 	add.w	ip, sp, #132	; 0x84
  4045b2:	a81e      	add	r0, sp, #120	; 0x78
  4045b4:	2102      	movs	r1, #2
  4045b6:	f8cd c010 	str.w	ip, [sp, #16]
  4045ba:	463a      	mov	r2, r7
  4045bc:	9003      	str	r0, [sp, #12]
  4045be:	462b      	mov	r3, r5
  4045c0:	9401      	str	r4, [sp, #4]
  4045c2:	9100      	str	r1, [sp, #0]
  4045c4:	f8cd e008 	str.w	lr, [sp, #8]
  4045c8:	9809      	ldr	r0, [sp, #36]	; 0x24
  4045ca:	f000 fb0d 	bl	404be8 <_dtoa_r>
  4045ce:	f8dd c01c 	ldr.w	ip, [sp, #28]
  4045d2:	900f      	str	r0, [sp, #60]	; 0x3c
  4045d4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4045d6:	441c      	add	r4, r3
  4045d8:	e75b      	b.n	404492 <_svfprintf_r+0x1086>
  4045da:	9809      	ldr	r0, [sp, #36]	; 0x24
  4045dc:	4649      	mov	r1, r9
  4045de:	aa23      	add	r2, sp, #140	; 0x8c
  4045e0:	f003 f8a2 	bl	407728 <__ssprint_r>
  4045e4:	2800      	cmp	r0, #0
  4045e6:	f47e afd6 	bne.w	403596 <_svfprintf_r+0x18a>
  4045ea:	9a25      	ldr	r2, [sp, #148]	; 0x94
  4045ec:	46c3      	mov	fp, r8
  4045ee:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4045f0:	9812      	ldr	r0, [sp, #72]	; 0x48
  4045f2:	3301      	adds	r3, #1
  4045f4:	eb02 0c00 	add.w	ip, r2, r0
  4045f8:	2b07      	cmp	r3, #7
  4045fa:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4045fc:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
  404600:	f8cb 2000 	str.w	r2, [fp]
  404604:	9324      	str	r3, [sp, #144]	; 0x90
  404606:	f8cb 0004 	str.w	r0, [fp, #4]
  40460a:	f77f a8e8 	ble.w	4037de <_svfprintf_r+0x3d2>
  40460e:	e446      	b.n	403e9e <_svfprintf_r+0xa92>
  404610:	9510      	str	r5, [sp, #64]	; 0x40
  404612:	f7fe fecd 	bl	4033b0 <strlen>
  404616:	ea20 73e0 	bic.w	r3, r0, r0, asr #31
  40461a:	970c      	str	r7, [sp, #48]	; 0x30
  40461c:	4604      	mov	r4, r0
  40461e:	9511      	str	r5, [sp, #68]	; 0x44
  404620:	9307      	str	r3, [sp, #28]
  404622:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  404626:	f7ff b804 	b.w	403632 <_svfprintf_r+0x226>
  40462a:	9a24      	ldr	r2, [sp, #144]	; 0x90
  40462c:	4fb7      	ldr	r7, [pc, #732]	; (40490c <_svfprintf_r+0x1500>)
  40462e:	f7ff b84b 	b.w	4036c8 <_svfprintf_r+0x2bc>
  404632:	9809      	ldr	r0, [sp, #36]	; 0x24
  404634:	4649      	mov	r1, r9
  404636:	aa23      	add	r2, sp, #140	; 0x8c
  404638:	f003 f876 	bl	407728 <__ssprint_r>
  40463c:	2800      	cmp	r0, #0
  40463e:	f47e afaa 	bne.w	403596 <_svfprintf_r+0x18a>
  404642:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
  404646:	46c3      	mov	fp, r8
  404648:	e4a2      	b.n	403f90 <_svfprintf_r+0xb84>
  40464a:	3301      	adds	r3, #1
  40464c:	4422      	add	r2, r4
  40464e:	f8cb 5000 	str.w	r5, [fp]
  404652:	2b07      	cmp	r3, #7
  404654:	9225      	str	r2, [sp, #148]	; 0x94
  404656:	9324      	str	r3, [sp, #144]	; 0x90
  404658:	f8cb 4004 	str.w	r4, [fp, #4]
  40465c:	dcbd      	bgt.n	4045da <_svfprintf_r+0x11ce>
  40465e:	f10b 0b08 	add.w	fp, fp, #8
  404662:	e7c5      	b.n	4045f0 <_svfprintf_r+0x11e4>
  404664:	9809      	ldr	r0, [sp, #36]	; 0x24
  404666:	4649      	mov	r1, r9
  404668:	aa23      	add	r2, sp, #140	; 0x8c
  40466a:	f003 f85d 	bl	407728 <__ssprint_r>
  40466e:	2800      	cmp	r0, #0
  404670:	f47e af91 	bne.w	403596 <_svfprintf_r+0x18a>
  404674:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  404676:	46c3      	mov	fp, r8
  404678:	9a12      	ldr	r2, [sp, #72]	; 0x48
  40467a:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
  40467e:	1ad3      	subs	r3, r2, r3
  404680:	e552      	b.n	404128 <_svfprintf_r+0xd1c>
  404682:	9809      	ldr	r0, [sp, #36]	; 0x24
  404684:	4649      	mov	r1, r9
  404686:	aa23      	add	r2, sp, #140	; 0x8c
  404688:	f003 f84e 	bl	407728 <__ssprint_r>
  40468c:	2800      	cmp	r0, #0
  40468e:	f47e af82 	bne.w	403596 <_svfprintf_r+0x18a>
  404692:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  404694:	46c3      	mov	fp, r8
  404696:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
  40469a:	e52d      	b.n	4040f8 <_svfprintf_r+0xcec>
  40469c:	9809      	ldr	r0, [sp, #36]	; 0x24
  40469e:	4649      	mov	r1, r9
  4046a0:	aa23      	add	r2, sp, #140	; 0x8c
  4046a2:	f003 f841 	bl	407728 <__ssprint_r>
  4046a6:	2800      	cmp	r0, #0
  4046a8:	f47e af75 	bne.w	403596 <_svfprintf_r+0x18a>
  4046ac:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
  4046b0:	46c3      	mov	fp, r8
  4046b2:	e516      	b.n	4040e2 <_svfprintf_r+0xcd6>
  4046b4:	2c06      	cmp	r4, #6
  4046b6:	970c      	str	r7, [sp, #48]	; 0x30
  4046b8:	9310      	str	r3, [sp, #64]	; 0x40
  4046ba:	461f      	mov	r7, r3
  4046bc:	bf28      	it	cs
  4046be:	2406      	movcs	r4, #6
  4046c0:	9711      	str	r7, [sp, #68]	; 0x44
  4046c2:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
  4046c6:	9307      	str	r3, [sp, #28]
  4046c8:	4b91      	ldr	r3, [pc, #580]	; (404910 <_svfprintf_r+0x1504>)
  4046ca:	930f      	str	r3, [sp, #60]	; 0x3c
  4046cc:	f7fe bfb1 	b.w	403632 <_svfprintf_r+0x226>
  4046d0:	4f8e      	ldr	r7, [pc, #568]	; (40490c <_svfprintf_r+0x1500>)
  4046d2:	f7ff b8b5 	b.w	403840 <_svfprintf_r+0x434>
  4046d6:	232d      	movs	r3, #45	; 0x2d
  4046d8:	461f      	mov	r7, r3
  4046da:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  4046de:	f7ff ba7a 	b.w	403bd6 <_svfprintf_r+0x7ca>
  4046e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4046e4:	272d      	movs	r7, #45	; 0x2d
  4046e6:	f8cd c01c 	str.w	ip, [sp, #28]
  4046ea:	9306      	str	r3, [sp, #24]
  4046ec:	2300      	movs	r3, #0
  4046ee:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
  4046f2:	9310      	str	r3, [sp, #64]	; 0x40
  4046f4:	f7fe bf9e 	b.w	403634 <_svfprintf_r+0x228>
  4046f8:	2e65      	cmp	r6, #101	; 0x65
  4046fa:	dd56      	ble.n	4047aa <_svfprintf_r+0x139e>
  4046fc:	2e66      	cmp	r6, #102	; 0x66
  4046fe:	9311      	str	r3, [sp, #68]	; 0x44
  404700:	f47f aeef 	bne.w	4044e2 <_svfprintf_r+0x10d6>
  404704:	2b00      	cmp	r3, #0
  404706:	f340 80d6 	ble.w	4048b6 <_svfprintf_r+0x14aa>
  40470a:	f1bc 0f00 	cmp.w	ip, #0
  40470e:	f040 80c1 	bne.w	404894 <_svfprintf_r+0x1488>
  404712:	9b06      	ldr	r3, [sp, #24]
  404714:	07da      	lsls	r2, r3, #31
  404716:	f100 80bd 	bmi.w	404894 <_svfprintf_r+0x1488>
  40471a:	9c11      	ldr	r4, [sp, #68]	; 0x44
  40471c:	ea24 7ce4 	bic.w	ip, r4, r4, asr #31
  404720:	e6eb      	b.n	4044fa <_svfprintf_r+0x10ee>
  404722:	2003      	movs	r0, #3
  404724:	a91d      	add	r1, sp, #116	; 0x74
  404726:	463a      	mov	r2, r7
  404728:	f8cd c004 	str.w	ip, [sp, #4]
  40472c:	9000      	str	r0, [sp, #0]
  40472e:	a81e      	add	r0, sp, #120	; 0x78
  404730:	9102      	str	r1, [sp, #8]
  404732:	a921      	add	r1, sp, #132	; 0x84
  404734:	462b      	mov	r3, r5
  404736:	9003      	str	r0, [sp, #12]
  404738:	9104      	str	r1, [sp, #16]
  40473a:	9809      	ldr	r0, [sp, #36]	; 0x24
  40473c:	f8cd c01c 	str.w	ip, [sp, #28]
  404740:	f000 fa52 	bl	404be8 <_dtoa_r>
  404744:	f8dd c01c 	ldr.w	ip, [sp, #28]
  404748:	4602      	mov	r2, r0
  40474a:	7803      	ldrb	r3, [r0, #0]
  40474c:	4462      	add	r2, ip
  40474e:	900f      	str	r0, [sp, #60]	; 0x3c
  404750:	2b30      	cmp	r3, #48	; 0x30
  404752:	9207      	str	r2, [sp, #28]
  404754:	f040 808b 	bne.w	40486e <_svfprintf_r+0x1462>
  404758:	4638      	mov	r0, r7
  40475a:	2200      	movs	r2, #0
  40475c:	2300      	movs	r3, #0
  40475e:	4629      	mov	r1, r5
  404760:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
  404764:	f04f 0401 	mov.w	r4, #1
  404768:	f003 fdc0 	bl	4082ec <__aeabi_dcmpeq>
  40476c:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
  404770:	b108      	cbz	r0, 404776 <_svfprintf_r+0x136a>
  404772:	f04f 0400 	mov.w	r4, #0
  404776:	f014 0fff 	tst.w	r4, #255	; 0xff
  40477a:	d078      	beq.n	40486e <_svfprintf_r+0x1462>
  40477c:	f1cc 0401 	rsb	r4, ip, #1
  404780:	941d      	str	r4, [sp, #116]	; 0x74
  404782:	9b07      	ldr	r3, [sp, #28]
  404784:	4423      	add	r3, r4
  404786:	461c      	mov	r4, r3
  404788:	e683      	b.n	404492 <_svfprintf_r+0x1086>
  40478a:	4d62      	ldr	r5, [pc, #392]	; (404914 <_svfprintf_r+0x1508>)
  40478c:	f7ff bb2a 	b.w	403de4 <_svfprintf_r+0x9d8>
  404790:	4623      	mov	r3, r4
  404792:	e695      	b.n	4044c0 <_svfprintf_r+0x10b4>
  404794:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
  404798:	970c      	str	r7, [sp, #48]	; 0x30
  40479a:	9010      	str	r0, [sp, #64]	; 0x40
  40479c:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  4047a0:	9307      	str	r3, [sp, #28]
  4047a2:	9011      	str	r0, [sp, #68]	; 0x44
  4047a4:	f7fe bf45 	b.w	403632 <_svfprintf_r+0x226>
  4047a8:	3e02      	subs	r6, #2
  4047aa:	3b01      	subs	r3, #1
  4047ac:	f88d 607c 	strb.w	r6, [sp, #124]	; 0x7c
  4047b0:	2b00      	cmp	r3, #0
  4047b2:	931d      	str	r3, [sp, #116]	; 0x74
  4047b4:	db75      	blt.n	4048a2 <_svfprintf_r+0x1496>
  4047b6:	222b      	movs	r2, #43	; 0x2b
  4047b8:	f88d 207d 	strb.w	r2, [sp, #125]	; 0x7d
  4047bc:	2b09      	cmp	r3, #9
  4047be:	dd61      	ble.n	404884 <_svfprintf_r+0x1478>
  4047c0:	f10d 008b 	add.w	r0, sp, #139	; 0x8b
  4047c4:	4601      	mov	r1, r0
  4047c6:	4a54      	ldr	r2, [pc, #336]	; (404918 <_svfprintf_r+0x150c>)
  4047c8:	fb82 2403 	smull	r2, r4, r2, r3
  4047cc:	17da      	asrs	r2, r3, #31
  4047ce:	ebc2 04a4 	rsb	r4, r2, r4, asr #2
  4047d2:	eb04 0284 	add.w	r2, r4, r4, lsl #2
  4047d6:	2c09      	cmp	r4, #9
  4047d8:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
  4047dc:	4623      	mov	r3, r4
  4047de:	f102 0230 	add.w	r2, r2, #48	; 0x30
  4047e2:	f801 2d01 	strb.w	r2, [r1, #-1]!
  4047e6:	dcee      	bgt.n	4047c6 <_svfprintf_r+0x13ba>
  4047e8:	3330      	adds	r3, #48	; 0x30
  4047ea:	460a      	mov	r2, r1
  4047ec:	b2db      	uxtb	r3, r3
  4047ee:	f802 3d01 	strb.w	r3, [r2, #-1]!
  4047f2:	4290      	cmp	r0, r2
  4047f4:	d97e      	bls.n	4048f4 <_svfprintf_r+0x14e8>
  4047f6:	460a      	mov	r2, r1
  4047f8:	f10d 047e 	add.w	r4, sp, #126	; 0x7e
  4047fc:	e001      	b.n	404802 <_svfprintf_r+0x13f6>
  4047fe:	f812 3b01 	ldrb.w	r3, [r2], #1
  404802:	4282      	cmp	r2, r0
  404804:	f804 3b01 	strb.w	r3, [r4], #1
  404808:	d1f9      	bne.n	4047fe <_svfprintf_r+0x13f2>
  40480a:	ab23      	add	r3, sp, #140	; 0x8c
  40480c:	f10d 027e 	add.w	r2, sp, #126	; 0x7e
  404810:	1a5b      	subs	r3, r3, r1
  404812:	4413      	add	r3, r2
  404814:	aa1f      	add	r2, sp, #124	; 0x7c
  404816:	1a9b      	subs	r3, r3, r2
  404818:	9a12      	ldr	r2, [sp, #72]	; 0x48
  40481a:	2a01      	cmp	r2, #1
  40481c:	9319      	str	r3, [sp, #100]	; 0x64
  40481e:	eb02 0403 	add.w	r4, r2, r3
  404822:	dd43      	ble.n	4048ac <_svfprintf_r+0x14a0>
  404824:	3401      	adds	r4, #1
  404826:	2300      	movs	r3, #0
  404828:	9311      	str	r3, [sp, #68]	; 0x44
  40482a:	ea24 7ce4 	bic.w	ip, r4, r4, asr #31
  40482e:	e664      	b.n	4044fa <_svfprintf_r+0x10ee>
  404830:	9809      	ldr	r0, [sp, #36]	; 0x24
  404832:	4649      	mov	r1, r9
  404834:	aa23      	add	r2, sp, #140	; 0x8c
  404836:	f002 ff77 	bl	407728 <__ssprint_r>
  40483a:	2800      	cmp	r0, #0
  40483c:	f47e aeab 	bne.w	403596 <_svfprintf_r+0x18a>
  404840:	9c1d      	ldr	r4, [sp, #116]	; 0x74
  404842:	46c3      	mov	fp, r8
  404844:	9a25      	ldr	r2, [sp, #148]	; 0x94
  404846:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404848:	e5a8      	b.n	40439c <_svfprintf_r+0xf90>
  40484a:	9b14      	ldr	r3, [sp, #80]	; 0x50
  40484c:	9f13      	ldr	r7, [sp, #76]	; 0x4c
  40484e:	f103 4500 	add.w	r5, r3, #2147483648	; 0x80000000
  404852:	232d      	movs	r3, #45	; 0x2d
  404854:	930d      	str	r3, [sp, #52]	; 0x34
  404856:	e69c      	b.n	404592 <_svfprintf_r+0x1186>
  404858:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40485a:	2b00      	cmp	r3, #0
  40485c:	dd35      	ble.n	4048ca <_svfprintf_r+0x14be>
  40485e:	2401      	movs	r4, #1
  404860:	9b12      	ldr	r3, [sp, #72]	; 0x48
  404862:	441c      	add	r4, r3
  404864:	ea24 7ce4 	bic.w	ip, r4, r4, asr #31
  404868:	e647      	b.n	4044fa <_svfprintf_r+0x10ee>
  40486a:	4d2a      	ldr	r5, [pc, #168]	; (404914 <_svfprintf_r+0x1508>)
  40486c:	e413      	b.n	404096 <_svfprintf_r+0xc8a>
  40486e:	9c1d      	ldr	r4, [sp, #116]	; 0x74
  404870:	e787      	b.n	404782 <_svfprintf_r+0x1376>
  404872:	9b21      	ldr	r3, [sp, #132]	; 0x84
  404874:	e624      	b.n	4044c0 <_svfprintf_r+0x10b4>
  404876:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404878:	1c5c      	adds	r4, r3, #1
  40487a:	ea24 7ce4 	bic.w	ip, r4, r4, asr #31
  40487e:	e63c      	b.n	4044fa <_svfprintf_r+0x10ee>
  404880:	4d24      	ldr	r5, [pc, #144]	; (404914 <_svfprintf_r+0x1508>)
  404882:	e420      	b.n	4040c6 <_svfprintf_r+0xcba>
  404884:	3330      	adds	r3, #48	; 0x30
  404886:	2230      	movs	r2, #48	; 0x30
  404888:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
  40488c:	ab20      	add	r3, sp, #128	; 0x80
  40488e:	f88d 207e 	strb.w	r2, [sp, #126]	; 0x7e
  404892:	e7bf      	b.n	404814 <_svfprintf_r+0x1408>
  404894:	f10c 0401 	add.w	r4, ip, #1
  404898:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40489a:	441c      	add	r4, r3
  40489c:	ea24 7ce4 	bic.w	ip, r4, r4, asr #31
  4048a0:	e62b      	b.n	4044fa <_svfprintf_r+0x10ee>
  4048a2:	222d      	movs	r2, #45	; 0x2d
  4048a4:	425b      	negs	r3, r3
  4048a6:	f88d 207d 	strb.w	r2, [sp, #125]	; 0x7d
  4048aa:	e787      	b.n	4047bc <_svfprintf_r+0x13b0>
  4048ac:	9b06      	ldr	r3, [sp, #24]
  4048ae:	f013 0301 	ands.w	r3, r3, #1
  4048b2:	d0b9      	beq.n	404828 <_svfprintf_r+0x141c>
  4048b4:	e7b6      	b.n	404824 <_svfprintf_r+0x1418>
  4048b6:	f1bc 0f00 	cmp.w	ip, #0
  4048ba:	d109      	bne.n	4048d0 <_svfprintf_r+0x14c4>
  4048bc:	9b06      	ldr	r3, [sp, #24]
  4048be:	07db      	lsls	r3, r3, #31
  4048c0:	d406      	bmi.n	4048d0 <_svfprintf_r+0x14c4>
  4048c2:	f04f 0c01 	mov.w	ip, #1
  4048c6:	4664      	mov	r4, ip
  4048c8:	e617      	b.n	4044fa <_svfprintf_r+0x10ee>
  4048ca:	f1c3 0402 	rsb	r4, r3, #2
  4048ce:	e7c7      	b.n	404860 <_svfprintf_r+0x1454>
  4048d0:	f10c 0402 	add.w	r4, ip, #2
  4048d4:	ea24 7ce4 	bic.w	ip, r4, r4, asr #31
  4048d8:	e60f      	b.n	4044fa <_svfprintf_r+0x10ee>
  4048da:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  4048dc:	785e      	ldrb	r6, [r3, #1]
  4048de:	4628      	mov	r0, r5
  4048e0:	682c      	ldr	r4, [r5, #0]
  4048e2:	3004      	adds	r0, #4
  4048e4:	2c00      	cmp	r4, #0
  4048e6:	900c      	str	r0, [sp, #48]	; 0x30
  4048e8:	f6be ade5 	bge.w	4034b6 <_svfprintf_r+0xaa>
  4048ec:	f04f 34ff 	mov.w	r4, #4294967295
  4048f0:	f7fe bde1 	b.w	4034b6 <_svfprintf_r+0xaa>
  4048f4:	f10d 037e 	add.w	r3, sp, #126	; 0x7e
  4048f8:	e78c      	b.n	404814 <_svfprintf_r+0x1408>
  4048fa:	230c      	movs	r3, #12
  4048fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
  4048fe:	f04f 30ff 	mov.w	r0, #4294967295
  404902:	6013      	str	r3, [r2, #0]
  404904:	f7fe be50 	b.w	4035a8 <_svfprintf_r+0x19c>
  404908:	4664      	mov	r4, ip
  40490a:	e663      	b.n	4045d4 <_svfprintf_r+0x11c8>
  40490c:	00408b44 	.word	0x00408b44
  404910:	00408b8c 	.word	0x00408b8c
  404914:	00408b34 	.word	0x00408b34
  404918:	66666667 	.word	0x66666667

0040491c <__swbuf_r>:
  40491c:	b570      	push	{r4, r5, r6, lr}
  40491e:	460d      	mov	r5, r1
  404920:	4614      	mov	r4, r2
  404922:	4606      	mov	r6, r0
  404924:	b110      	cbz	r0, 40492c <__swbuf_r+0x10>
  404926:	6b83      	ldr	r3, [r0, #56]	; 0x38
  404928:	2b00      	cmp	r3, #0
  40492a:	d048      	beq.n	4049be <__swbuf_r+0xa2>
  40492c:	89a2      	ldrh	r2, [r4, #12]
  40492e:	69a3      	ldr	r3, [r4, #24]
  404930:	b291      	uxth	r1, r2
  404932:	60a3      	str	r3, [r4, #8]
  404934:	0708      	lsls	r0, r1, #28
  404936:	d538      	bpl.n	4049aa <__swbuf_r+0x8e>
  404938:	6923      	ldr	r3, [r4, #16]
  40493a:	2b00      	cmp	r3, #0
  40493c:	d035      	beq.n	4049aa <__swbuf_r+0x8e>
  40493e:	0489      	lsls	r1, r1, #18
  404940:	b2ed      	uxtb	r5, r5
  404942:	d515      	bpl.n	404970 <__swbuf_r+0x54>
  404944:	6822      	ldr	r2, [r4, #0]
  404946:	6961      	ldr	r1, [r4, #20]
  404948:	1ad3      	subs	r3, r2, r3
  40494a:	428b      	cmp	r3, r1
  40494c:	da1c      	bge.n	404988 <__swbuf_r+0x6c>
  40494e:	3301      	adds	r3, #1
  404950:	68a1      	ldr	r1, [r4, #8]
  404952:	1c50      	adds	r0, r2, #1
  404954:	3901      	subs	r1, #1
  404956:	6020      	str	r0, [r4, #0]
  404958:	60a1      	str	r1, [r4, #8]
  40495a:	7015      	strb	r5, [r2, #0]
  40495c:	6962      	ldr	r2, [r4, #20]
  40495e:	429a      	cmp	r2, r3
  404960:	d01a      	beq.n	404998 <__swbuf_r+0x7c>
  404962:	2d0a      	cmp	r5, #10
  404964:	d102      	bne.n	40496c <__swbuf_r+0x50>
  404966:	7b23      	ldrb	r3, [r4, #12]
  404968:	07db      	lsls	r3, r3, #31
  40496a:	d415      	bmi.n	404998 <__swbuf_r+0x7c>
  40496c:	4628      	mov	r0, r5
  40496e:	bd70      	pop	{r4, r5, r6, pc}
  404970:	6e61      	ldr	r1, [r4, #100]	; 0x64
  404972:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  404976:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  40497a:	81a2      	strh	r2, [r4, #12]
  40497c:	6822      	ldr	r2, [r4, #0]
  40497e:	6661      	str	r1, [r4, #100]	; 0x64
  404980:	1ad3      	subs	r3, r2, r3
  404982:	6961      	ldr	r1, [r4, #20]
  404984:	428b      	cmp	r3, r1
  404986:	dbe2      	blt.n	40494e <__swbuf_r+0x32>
  404988:	4630      	mov	r0, r6
  40498a:	4621      	mov	r1, r4
  40498c:	f001 f944 	bl	405c18 <_fflush_r>
  404990:	b940      	cbnz	r0, 4049a4 <__swbuf_r+0x88>
  404992:	6822      	ldr	r2, [r4, #0]
  404994:	2301      	movs	r3, #1
  404996:	e7db      	b.n	404950 <__swbuf_r+0x34>
  404998:	4630      	mov	r0, r6
  40499a:	4621      	mov	r1, r4
  40499c:	f001 f93c 	bl	405c18 <_fflush_r>
  4049a0:	2800      	cmp	r0, #0
  4049a2:	d0e3      	beq.n	40496c <__swbuf_r+0x50>
  4049a4:	f04f 30ff 	mov.w	r0, #4294967295
  4049a8:	bd70      	pop	{r4, r5, r6, pc}
  4049aa:	4630      	mov	r0, r6
  4049ac:	4621      	mov	r1, r4
  4049ae:	f000 f809 	bl	4049c4 <__swsetup_r>
  4049b2:	2800      	cmp	r0, #0
  4049b4:	d1f6      	bne.n	4049a4 <__swbuf_r+0x88>
  4049b6:	89a2      	ldrh	r2, [r4, #12]
  4049b8:	6923      	ldr	r3, [r4, #16]
  4049ba:	b291      	uxth	r1, r2
  4049bc:	e7bf      	b.n	40493e <__swbuf_r+0x22>
  4049be:	f001 f9c5 	bl	405d4c <__sinit>
  4049c2:	e7b3      	b.n	40492c <__swbuf_r+0x10>

004049c4 <__swsetup_r>:
  4049c4:	b538      	push	{r3, r4, r5, lr}
  4049c6:	4b2f      	ldr	r3, [pc, #188]	; (404a84 <__swsetup_r+0xc0>)
  4049c8:	4605      	mov	r5, r0
  4049ca:	460c      	mov	r4, r1
  4049cc:	6818      	ldr	r0, [r3, #0]
  4049ce:	b110      	cbz	r0, 4049d6 <__swsetup_r+0x12>
  4049d0:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4049d2:	2b00      	cmp	r3, #0
  4049d4:	d036      	beq.n	404a44 <__swsetup_r+0x80>
  4049d6:	89a2      	ldrh	r2, [r4, #12]
  4049d8:	b293      	uxth	r3, r2
  4049da:	0718      	lsls	r0, r3, #28
  4049dc:	d50b      	bpl.n	4049f6 <__swsetup_r+0x32>
  4049de:	6920      	ldr	r0, [r4, #16]
  4049e0:	b1a0      	cbz	r0, 404a0c <__swsetup_r+0x48>
  4049e2:	f013 0201 	ands.w	r2, r3, #1
  4049e6:	d11d      	bne.n	404a24 <__swsetup_r+0x60>
  4049e8:	0799      	lsls	r1, r3, #30
  4049ea:	d400      	bmi.n	4049ee <__swsetup_r+0x2a>
  4049ec:	6962      	ldr	r2, [r4, #20]
  4049ee:	60a2      	str	r2, [r4, #8]
  4049f0:	b1f8      	cbz	r0, 404a32 <__swsetup_r+0x6e>
  4049f2:	2000      	movs	r0, #0
  4049f4:	bd38      	pop	{r3, r4, r5, pc}
  4049f6:	06d9      	lsls	r1, r3, #27
  4049f8:	d53b      	bpl.n	404a72 <__swsetup_r+0xae>
  4049fa:	0758      	lsls	r0, r3, #29
  4049fc:	d425      	bmi.n	404a4a <__swsetup_r+0x86>
  4049fe:	6920      	ldr	r0, [r4, #16]
  404a00:	f042 0208 	orr.w	r2, r2, #8
  404a04:	b293      	uxth	r3, r2
  404a06:	81a2      	strh	r2, [r4, #12]
  404a08:	2800      	cmp	r0, #0
  404a0a:	d1ea      	bne.n	4049e2 <__swsetup_r+0x1e>
  404a0c:	f403 7220 	and.w	r2, r3, #640	; 0x280
  404a10:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  404a14:	d0e5      	beq.n	4049e2 <__swsetup_r+0x1e>
  404a16:	4628      	mov	r0, r5
  404a18:	4621      	mov	r1, r4
  404a1a:	f001 fc9b 	bl	406354 <__smakebuf_r>
  404a1e:	89a3      	ldrh	r3, [r4, #12]
  404a20:	6920      	ldr	r0, [r4, #16]
  404a22:	e7de      	b.n	4049e2 <__swsetup_r+0x1e>
  404a24:	6963      	ldr	r3, [r4, #20]
  404a26:	2200      	movs	r2, #0
  404a28:	425b      	negs	r3, r3
  404a2a:	60a2      	str	r2, [r4, #8]
  404a2c:	61a3      	str	r3, [r4, #24]
  404a2e:	2800      	cmp	r0, #0
  404a30:	d1df      	bne.n	4049f2 <__swsetup_r+0x2e>
  404a32:	89a3      	ldrh	r3, [r4, #12]
  404a34:	061a      	lsls	r2, r3, #24
  404a36:	d5dd      	bpl.n	4049f4 <__swsetup_r+0x30>
  404a38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  404a3c:	f04f 30ff 	mov.w	r0, #4294967295
  404a40:	81a3      	strh	r3, [r4, #12]
  404a42:	bd38      	pop	{r3, r4, r5, pc}
  404a44:	f001 f982 	bl	405d4c <__sinit>
  404a48:	e7c5      	b.n	4049d6 <__swsetup_r+0x12>
  404a4a:	6b21      	ldr	r1, [r4, #48]	; 0x30
  404a4c:	b149      	cbz	r1, 404a62 <__swsetup_r+0x9e>
  404a4e:	f104 0340 	add.w	r3, r4, #64	; 0x40
  404a52:	4299      	cmp	r1, r3
  404a54:	d003      	beq.n	404a5e <__swsetup_r+0x9a>
  404a56:	4628      	mov	r0, r5
  404a58:	f001 f9e6 	bl	405e28 <_free_r>
  404a5c:	89a2      	ldrh	r2, [r4, #12]
  404a5e:	2300      	movs	r3, #0
  404a60:	6323      	str	r3, [r4, #48]	; 0x30
  404a62:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  404a66:	2300      	movs	r3, #0
  404a68:	6920      	ldr	r0, [r4, #16]
  404a6a:	b292      	uxth	r2, r2
  404a6c:	e884 0009 	stmia.w	r4, {r0, r3}
  404a70:	e7c6      	b.n	404a00 <__swsetup_r+0x3c>
  404a72:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  404a76:	2309      	movs	r3, #9
  404a78:	f04f 30ff 	mov.w	r0, #4294967295
  404a7c:	602b      	str	r3, [r5, #0]
  404a7e:	81a2      	strh	r2, [r4, #12]
  404a80:	bd38      	pop	{r3, r4, r5, pc}
  404a82:	bf00      	nop
  404a84:	204004a8 	.word	0x204004a8

00404a88 <register_fini>:
  404a88:	4b02      	ldr	r3, [pc, #8]	; (404a94 <register_fini+0xc>)
  404a8a:	b113      	cbz	r3, 404a92 <register_fini+0xa>
  404a8c:	4802      	ldr	r0, [pc, #8]	; (404a98 <register_fini+0x10>)
  404a8e:	f000 b805 	b.w	404a9c <atexit>
  404a92:	4770      	bx	lr
  404a94:	00000000 	.word	0x00000000
  404a98:	00405d61 	.word	0x00405d61

00404a9c <atexit>:
  404a9c:	4601      	mov	r1, r0
  404a9e:	2000      	movs	r0, #0
  404aa0:	4602      	mov	r2, r0
  404aa2:	4603      	mov	r3, r0
  404aa4:	f002 bedc 	b.w	407860 <__register_exitproc>

00404aa8 <quorem>:
  404aa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404aac:	6903      	ldr	r3, [r0, #16]
  404aae:	b083      	sub	sp, #12
  404ab0:	690f      	ldr	r7, [r1, #16]
  404ab2:	429f      	cmp	r7, r3
  404ab4:	f300 8093 	bgt.w	404bde <quorem+0x136>
  404ab8:	3f01      	subs	r7, #1
  404aba:	f101 0614 	add.w	r6, r1, #20
  404abe:	f100 0a14 	add.w	sl, r0, #20
  404ac2:	00bb      	lsls	r3, r7, #2
  404ac4:	f856 2027 	ldr.w	r2, [r6, r7, lsl #2]
  404ac8:	461d      	mov	r5, r3
  404aca:	9300      	str	r3, [sp, #0]
  404acc:	3201      	adds	r2, #1
  404ace:	f85a 3027 	ldr.w	r3, [sl, r7, lsl #2]
  404ad2:	eb0a 0405 	add.w	r4, sl, r5
  404ad6:	eb06 0905 	add.w	r9, r6, r5
  404ada:	fbb3 f8f2 	udiv	r8, r3, r2
  404ade:	9401      	str	r4, [sp, #4]
  404ae0:	f1b8 0f00 	cmp.w	r8, #0
  404ae4:	d040      	beq.n	404b68 <quorem+0xc0>
  404ae6:	2500      	movs	r5, #0
  404ae8:	46b4      	mov	ip, r6
  404aea:	46d6      	mov	lr, sl
  404aec:	462b      	mov	r3, r5
  404aee:	f85c bb04 	ldr.w	fp, [ip], #4
  404af2:	f8de 2000 	ldr.w	r2, [lr]
  404af6:	fa1f f48b 	uxth.w	r4, fp
  404afa:	45e1      	cmp	r9, ip
  404afc:	ea4f 4b1b 	mov.w	fp, fp, lsr #16
  404b00:	fb04 5508 	mla	r5, r4, r8, r5
  404b04:	fb0b fb08 	mul.w	fp, fp, r8
  404b08:	b2ac      	uxth	r4, r5
  404b0a:	eb0b 4515 	add.w	r5, fp, r5, lsr #16
  404b0e:	eba3 0304 	sub.w	r3, r3, r4
  404b12:	fa1f fb85 	uxth.w	fp, r5
  404b16:	fa13 f482 	uxtah	r4, r3, r2
  404b1a:	ea4f 4515 	mov.w	r5, r5, lsr #16
  404b1e:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
  404b22:	fa1f fb84 	uxth.w	fp, r4
  404b26:	eb02 4324 	add.w	r3, r2, r4, asr #16
  404b2a:	ea4b 4203 	orr.w	r2, fp, r3, lsl #16
  404b2e:	ea4f 4323 	mov.w	r3, r3, asr #16
  404b32:	f84e 2b04 	str.w	r2, [lr], #4
  404b36:	d2da      	bcs.n	404aee <quorem+0x46>
  404b38:	9b00      	ldr	r3, [sp, #0]
  404b3a:	f85a 3003 	ldr.w	r3, [sl, r3]
  404b3e:	b99b      	cbnz	r3, 404b68 <quorem+0xc0>
  404b40:	9c01      	ldr	r4, [sp, #4]
  404b42:	1f23      	subs	r3, r4, #4
  404b44:	459a      	cmp	sl, r3
  404b46:	d20e      	bcs.n	404b66 <quorem+0xbe>
  404b48:	f854 3c04 	ldr.w	r3, [r4, #-4]
  404b4c:	b95b      	cbnz	r3, 404b66 <quorem+0xbe>
  404b4e:	f1a4 0308 	sub.w	r3, r4, #8
  404b52:	e001      	b.n	404b58 <quorem+0xb0>
  404b54:	6812      	ldr	r2, [r2, #0]
  404b56:	b932      	cbnz	r2, 404b66 <quorem+0xbe>
  404b58:	459a      	cmp	sl, r3
  404b5a:	461a      	mov	r2, r3
  404b5c:	f107 37ff 	add.w	r7, r7, #4294967295
  404b60:	f1a3 0304 	sub.w	r3, r3, #4
  404b64:	d3f6      	bcc.n	404b54 <quorem+0xac>
  404b66:	6107      	str	r7, [r0, #16]
  404b68:	4604      	mov	r4, r0
  404b6a:	f002 fa7f 	bl	40706c <__mcmp>
  404b6e:	2800      	cmp	r0, #0
  404b70:	db31      	blt.n	404bd6 <quorem+0x12e>
  404b72:	f108 0801 	add.w	r8, r8, #1
  404b76:	4655      	mov	r5, sl
  404b78:	2000      	movs	r0, #0
  404b7a:	f856 1b04 	ldr.w	r1, [r6], #4
  404b7e:	682a      	ldr	r2, [r5, #0]
  404b80:	b28b      	uxth	r3, r1
  404b82:	45b1      	cmp	r9, r6
  404b84:	ea4f 4111 	mov.w	r1, r1, lsr #16
  404b88:	eba0 0303 	sub.w	r3, r0, r3
  404b8c:	ebc1 4112 	rsb	r1, r1, r2, lsr #16
  404b90:	fa13 f382 	uxtah	r3, r3, r2
  404b94:	eb01 4223 	add.w	r2, r1, r3, asr #16
  404b98:	b29b      	uxth	r3, r3
  404b9a:	ea4f 4022 	mov.w	r0, r2, asr #16
  404b9e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  404ba2:	f845 3b04 	str.w	r3, [r5], #4
  404ba6:	d2e8      	bcs.n	404b7a <quorem+0xd2>
  404ba8:	f85a 2027 	ldr.w	r2, [sl, r7, lsl #2]
  404bac:	eb0a 0387 	add.w	r3, sl, r7, lsl #2
  404bb0:	b98a      	cbnz	r2, 404bd6 <quorem+0x12e>
  404bb2:	1f1a      	subs	r2, r3, #4
  404bb4:	4592      	cmp	sl, r2
  404bb6:	d20d      	bcs.n	404bd4 <quorem+0x12c>
  404bb8:	f853 2c04 	ldr.w	r2, [r3, #-4]
  404bbc:	b952      	cbnz	r2, 404bd4 <quorem+0x12c>
  404bbe:	3b08      	subs	r3, #8
  404bc0:	e001      	b.n	404bc6 <quorem+0x11e>
  404bc2:	6812      	ldr	r2, [r2, #0]
  404bc4:	b932      	cbnz	r2, 404bd4 <quorem+0x12c>
  404bc6:	459a      	cmp	sl, r3
  404bc8:	461a      	mov	r2, r3
  404bca:	f107 37ff 	add.w	r7, r7, #4294967295
  404bce:	f1a3 0304 	sub.w	r3, r3, #4
  404bd2:	d3f6      	bcc.n	404bc2 <quorem+0x11a>
  404bd4:	6127      	str	r7, [r4, #16]
  404bd6:	4640      	mov	r0, r8
  404bd8:	b003      	add	sp, #12
  404bda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404bde:	2000      	movs	r0, #0
  404be0:	b003      	add	sp, #12
  404be2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404be6:	bf00      	nop

00404be8 <_dtoa_r>:
  404be8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404bec:	469b      	mov	fp, r3
  404bee:	b099      	sub	sp, #100	; 0x64
  404bf0:	6c03      	ldr	r3, [r0, #64]	; 0x40
  404bf2:	4604      	mov	r4, r0
  404bf4:	4692      	mov	sl, r2
  404bf6:	9d25      	ldr	r5, [sp, #148]	; 0x94
  404bf8:	b14b      	cbz	r3, 404c0e <_dtoa_r+0x26>
  404bfa:	6c46      	ldr	r6, [r0, #68]	; 0x44
  404bfc:	2201      	movs	r2, #1
  404bfe:	4619      	mov	r1, r3
  404c00:	40b2      	lsls	r2, r6
  404c02:	605e      	str	r6, [r3, #4]
  404c04:	609a      	str	r2, [r3, #8]
  404c06:	f002 f83b 	bl	406c80 <_Bfree>
  404c0a:	2300      	movs	r3, #0
  404c0c:	6423      	str	r3, [r4, #64]	; 0x40
  404c0e:	f1bb 0f00 	cmp.w	fp, #0
  404c12:	46d9      	mov	r9, fp
  404c14:	db33      	blt.n	404c7e <_dtoa_r+0x96>
  404c16:	2300      	movs	r3, #0
  404c18:	602b      	str	r3, [r5, #0]
  404c1a:	4b99      	ldr	r3, [pc, #612]	; (404e80 <_dtoa_r+0x298>)
  404c1c:	461a      	mov	r2, r3
  404c1e:	ea09 0303 	and.w	r3, r9, r3
  404c22:	4293      	cmp	r3, r2
  404c24:	d014      	beq.n	404c50 <_dtoa_r+0x68>
  404c26:	2200      	movs	r2, #0
  404c28:	2300      	movs	r3, #0
  404c2a:	4650      	mov	r0, sl
  404c2c:	4659      	mov	r1, fp
  404c2e:	f003 fb5d 	bl	4082ec <__aeabi_dcmpeq>
  404c32:	4680      	mov	r8, r0
  404c34:	b348      	cbz	r0, 404c8a <_dtoa_r+0xa2>
  404c36:	2301      	movs	r3, #1
  404c38:	9a24      	ldr	r2, [sp, #144]	; 0x90
  404c3a:	6013      	str	r3, [r2, #0]
  404c3c:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404c3e:	2b00      	cmp	r3, #0
  404c40:	f000 80cb 	beq.w	404dda <_dtoa_r+0x1f2>
  404c44:	488f      	ldr	r0, [pc, #572]	; (404e84 <_dtoa_r+0x29c>)
  404c46:	6018      	str	r0, [r3, #0]
  404c48:	3801      	subs	r0, #1
  404c4a:	b019      	add	sp, #100	; 0x64
  404c4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404c50:	f242 730f 	movw	r3, #9999	; 0x270f
  404c54:	9a24      	ldr	r2, [sp, #144]	; 0x90
  404c56:	6013      	str	r3, [r2, #0]
  404c58:	f1ba 0f00 	cmp.w	sl, #0
  404c5c:	f000 80a6 	beq.w	404dac <_dtoa_r+0x1c4>
  404c60:	4889      	ldr	r0, [pc, #548]	; (404e88 <_dtoa_r+0x2a0>)
  404c62:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404c64:	2b00      	cmp	r3, #0
  404c66:	d0f0      	beq.n	404c4a <_dtoa_r+0x62>
  404c68:	78c3      	ldrb	r3, [r0, #3]
  404c6a:	2b00      	cmp	r3, #0
  404c6c:	f000 80b7 	beq.w	404dde <_dtoa_r+0x1f6>
  404c70:	f100 0308 	add.w	r3, r0, #8
  404c74:	9a26      	ldr	r2, [sp, #152]	; 0x98
  404c76:	6013      	str	r3, [r2, #0]
  404c78:	b019      	add	sp, #100	; 0x64
  404c7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404c7e:	2301      	movs	r3, #1
  404c80:	f02b 4900 	bic.w	r9, fp, #2147483648	; 0x80000000
  404c84:	602b      	str	r3, [r5, #0]
  404c86:	46cb      	mov	fp, r9
  404c88:	e7c7      	b.n	404c1a <_dtoa_r+0x32>
  404c8a:	ad17      	add	r5, sp, #92	; 0x5c
  404c8c:	a916      	add	r1, sp, #88	; 0x58
  404c8e:	4620      	mov	r0, r4
  404c90:	4652      	mov	r2, sl
  404c92:	9500      	str	r5, [sp, #0]
  404c94:	465b      	mov	r3, fp
  404c96:	9101      	str	r1, [sp, #4]
  404c98:	f002 fa7e 	bl	407198 <__d2b>
  404c9c:	9006      	str	r0, [sp, #24]
  404c9e:	ea5f 5519 	movs.w	r5, r9, lsr #20
  404ca2:	f040 808c 	bne.w	404dbe <_dtoa_r+0x1d6>
  404ca6:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
  404caa:	f46f 6382 	mvn.w	r3, #1040	; 0x410
  404cae:	9d17      	ldr	r5, [sp, #92]	; 0x5c
  404cb0:	4445      	add	r5, r8
  404cb2:	429d      	cmp	r5, r3
  404cb4:	f2c0 81cc 	blt.w	405050 <_dtoa_r+0x468>
  404cb8:	331f      	adds	r3, #31
  404cba:	f205 4212 	addw	r2, r5, #1042	; 0x412
  404cbe:	1b5b      	subs	r3, r3, r5
  404cc0:	fa2a f002 	lsr.w	r0, sl, r2
  404cc4:	fa09 f903 	lsl.w	r9, r9, r3
  404cc8:	ea49 0000 	orr.w	r0, r9, r0
  404ccc:	f003 f830 	bl	407d30 <__aeabi_ui2d>
  404cd0:	3d01      	subs	r5, #1
  404cd2:	2301      	movs	r3, #1
  404cd4:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
  404cd8:	9311      	str	r3, [sp, #68]	; 0x44
  404cda:	2200      	movs	r2, #0
  404cdc:	4b6b      	ldr	r3, [pc, #428]	; (404e8c <_dtoa_r+0x2a4>)
  404cde:	f002 fee9 	bl	407ab4 <__aeabi_dsub>
  404ce2:	a361      	add	r3, pc, #388	; (adr r3, 404e68 <_dtoa_r+0x280>)
  404ce4:	e9d3 2300 	ldrd	r2, r3, [r3]
  404ce8:	f003 f898 	bl	407e1c <__aeabi_dmul>
  404cec:	a360      	add	r3, pc, #384	; (adr r3, 404e70 <_dtoa_r+0x288>)
  404cee:	e9d3 2300 	ldrd	r2, r3, [r3]
  404cf2:	f002 fee1 	bl	407ab8 <__adddf3>
  404cf6:	4606      	mov	r6, r0
  404cf8:	460f      	mov	r7, r1
  404cfa:	4628      	mov	r0, r5
  404cfc:	f003 f828 	bl	407d50 <__aeabi_i2d>
  404d00:	a35d      	add	r3, pc, #372	; (adr r3, 404e78 <_dtoa_r+0x290>)
  404d02:	e9d3 2300 	ldrd	r2, r3, [r3]
  404d06:	f003 f889 	bl	407e1c <__aeabi_dmul>
  404d0a:	4602      	mov	r2, r0
  404d0c:	460b      	mov	r3, r1
  404d0e:	4630      	mov	r0, r6
  404d10:	4639      	mov	r1, r7
  404d12:	f002 fed1 	bl	407ab8 <__adddf3>
  404d16:	4606      	mov	r6, r0
  404d18:	460f      	mov	r7, r1
  404d1a:	f003 fb19 	bl	408350 <__aeabi_d2iz>
  404d1e:	2200      	movs	r2, #0
  404d20:	9002      	str	r0, [sp, #8]
  404d22:	4639      	mov	r1, r7
  404d24:	4630      	mov	r0, r6
  404d26:	2300      	movs	r3, #0
  404d28:	f003 faea 	bl	408300 <__aeabi_dcmplt>
  404d2c:	2800      	cmp	r0, #0
  404d2e:	f040 8171 	bne.w	405014 <_dtoa_r+0x42c>
  404d32:	9b02      	ldr	r3, [sp, #8]
  404d34:	2b16      	cmp	r3, #22
  404d36:	f200 8091 	bhi.w	404e5c <_dtoa_r+0x274>
  404d3a:	9802      	ldr	r0, [sp, #8]
  404d3c:	4652      	mov	r2, sl
  404d3e:	4954      	ldr	r1, [pc, #336]	; (404e90 <_dtoa_r+0x2a8>)
  404d40:	465b      	mov	r3, fp
  404d42:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
  404d46:	e9d1 0100 	ldrd	r0, r1, [r1]
  404d4a:	f003 faf7 	bl	40833c <__aeabi_dcmpgt>
  404d4e:	2800      	cmp	r0, #0
  404d50:	f000 817c 	beq.w	40504c <_dtoa_r+0x464>
  404d54:	9b02      	ldr	r3, [sp, #8]
  404d56:	3b01      	subs	r3, #1
  404d58:	9302      	str	r3, [sp, #8]
  404d5a:	2300      	movs	r3, #0
  404d5c:	930d      	str	r3, [sp, #52]	; 0x34
  404d5e:	ebc5 0508 	rsb	r5, r5, r8
  404d62:	1e6b      	subs	r3, r5, #1
  404d64:	9303      	str	r3, [sp, #12]
  404d66:	f100 816c 	bmi.w	405042 <_dtoa_r+0x45a>
  404d6a:	2300      	movs	r3, #0
  404d6c:	9307      	str	r3, [sp, #28]
  404d6e:	9b02      	ldr	r3, [sp, #8]
  404d70:	2b00      	cmp	r3, #0
  404d72:	f2c0 815d 	blt.w	405030 <_dtoa_r+0x448>
  404d76:	9a03      	ldr	r2, [sp, #12]
  404d78:	930c      	str	r3, [sp, #48]	; 0x30
  404d7a:	4611      	mov	r1, r2
  404d7c:	4419      	add	r1, r3
  404d7e:	2300      	movs	r3, #0
  404d80:	9103      	str	r1, [sp, #12]
  404d82:	930a      	str	r3, [sp, #40]	; 0x28
  404d84:	9b22      	ldr	r3, [sp, #136]	; 0x88
  404d86:	2b09      	cmp	r3, #9
  404d88:	d82b      	bhi.n	404de2 <_dtoa_r+0x1fa>
  404d8a:	2b05      	cmp	r3, #5
  404d8c:	f340 867e 	ble.w	405a8c <_dtoa_r+0xea4>
  404d90:	3b04      	subs	r3, #4
  404d92:	2500      	movs	r5, #0
  404d94:	9322      	str	r3, [sp, #136]	; 0x88
  404d96:	9b22      	ldr	r3, [sp, #136]	; 0x88
  404d98:	3b02      	subs	r3, #2
  404d9a:	2b03      	cmp	r3, #3
  404d9c:	f200 8679 	bhi.w	405a92 <_dtoa_r+0xeaa>
  404da0:	e8df f013 	tbh	[pc, r3, lsl #1]
  404da4:	0289029b 	.word	0x0289029b
  404da8:	068d0180 	.word	0x068d0180
  404dac:	f3c9 0013 	ubfx	r0, r9, #0, #20
  404db0:	4b35      	ldr	r3, [pc, #212]	; (404e88 <_dtoa_r+0x2a0>)
  404db2:	4a38      	ldr	r2, [pc, #224]	; (404e94 <_dtoa_r+0x2ac>)
  404db4:	2800      	cmp	r0, #0
  404db6:	bf14      	ite	ne
  404db8:	4618      	movne	r0, r3
  404dba:	4610      	moveq	r0, r2
  404dbc:	e751      	b.n	404c62 <_dtoa_r+0x7a>
  404dbe:	f3cb 0313 	ubfx	r3, fp, #0, #20
  404dc2:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
  404dc6:	4650      	mov	r0, sl
  404dc8:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
  404dcc:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
  404dd0:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
  404dd4:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
  404dd8:	e77f      	b.n	404cda <_dtoa_r+0xf2>
  404dda:	482f      	ldr	r0, [pc, #188]	; (404e98 <_dtoa_r+0x2b0>)
  404ddc:	e735      	b.n	404c4a <_dtoa_r+0x62>
  404dde:	1cc3      	adds	r3, r0, #3
  404de0:	e748      	b.n	404c74 <_dtoa_r+0x8c>
  404de2:	f04f 33ff 	mov.w	r3, #4294967295
  404de6:	2100      	movs	r1, #0
  404de8:	4620      	mov	r0, r4
  404dea:	461d      	mov	r5, r3
  404dec:	9310      	str	r3, [sp, #64]	; 0x40
  404dee:	2301      	movs	r3, #1
  404df0:	6461      	str	r1, [r4, #68]	; 0x44
  404df2:	9123      	str	r1, [sp, #140]	; 0x8c
  404df4:	930b      	str	r3, [sp, #44]	; 0x2c
  404df6:	f001 ff1b 	bl	406c30 <_Balloc>
  404dfa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  404dfc:	9005      	str	r0, [sp, #20]
  404dfe:	9322      	str	r3, [sp, #136]	; 0x88
  404e00:	9504      	str	r5, [sp, #16]
  404e02:	6420      	str	r0, [r4, #64]	; 0x40
  404e04:	9a02      	ldr	r2, [sp, #8]
  404e06:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  404e08:	2a0e      	cmp	r2, #14
  404e0a:	dc49      	bgt.n	404ea0 <_dtoa_r+0x2b8>
  404e0c:	2b00      	cmp	r3, #0
  404e0e:	db47      	blt.n	404ea0 <_dtoa_r+0x2b8>
  404e10:	4b1f      	ldr	r3, [pc, #124]	; (404e90 <_dtoa_r+0x2a8>)
  404e12:	9a02      	ldr	r2, [sp, #8]
  404e14:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  404e18:	e9d3 8900 	ldrd	r8, r9, [r3]
  404e1c:	9b04      	ldr	r3, [sp, #16]
  404e1e:	2b00      	cmp	r3, #0
  404e20:	f300 825e 	bgt.w	4052e0 <_dtoa_r+0x6f8>
  404e24:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  404e26:	2b00      	cmp	r3, #0
  404e28:	f280 825a 	bge.w	4052e0 <_dtoa_r+0x6f8>
  404e2c:	9b04      	ldr	r3, [sp, #16]
  404e2e:	2b00      	cmp	r3, #0
  404e30:	f040 85bf 	bne.w	4059b2 <_dtoa_r+0xdca>
  404e34:	2200      	movs	r2, #0
  404e36:	4b19      	ldr	r3, [pc, #100]	; (404e9c <_dtoa_r+0x2b4>)
  404e38:	4640      	mov	r0, r8
  404e3a:	4649      	mov	r1, r9
  404e3c:	f002 ffee 	bl	407e1c <__aeabi_dmul>
  404e40:	4652      	mov	r2, sl
  404e42:	465b      	mov	r3, fp
  404e44:	f003 fa70 	bl	408328 <__aeabi_dcmpge>
  404e48:	9f04      	ldr	r7, [sp, #16]
  404e4a:	9708      	str	r7, [sp, #32]
  404e4c:	2800      	cmp	r0, #0
  404e4e:	f000 80bd 	beq.w	404fcc <_dtoa_r+0x3e4>
  404e52:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  404e54:	9d05      	ldr	r5, [sp, #20]
  404e56:	43db      	mvns	r3, r3
  404e58:	9302      	str	r3, [sp, #8]
  404e5a:	e0be      	b.n	404fda <_dtoa_r+0x3f2>
  404e5c:	2301      	movs	r3, #1
  404e5e:	930d      	str	r3, [sp, #52]	; 0x34
  404e60:	e77d      	b.n	404d5e <_dtoa_r+0x176>
  404e62:	bf00      	nop
  404e64:	f3af 8000 	nop.w
  404e68:	636f4361 	.word	0x636f4361
  404e6c:	3fd287a7 	.word	0x3fd287a7
  404e70:	8b60c8b3 	.word	0x8b60c8b3
  404e74:	3fc68a28 	.word	0x3fc68a28
  404e78:	509f79fb 	.word	0x509f79fb
  404e7c:	3fd34413 	.word	0x3fd34413
  404e80:	7ff00000 	.word	0x7ff00000
  404e84:	00408b95 	.word	0x00408b95
  404e88:	00408ba4 	.word	0x00408ba4
  404e8c:	3ff80000 	.word	0x3ff80000
  404e90:	00408bb8 	.word	0x00408bb8
  404e94:	00408b98 	.word	0x00408b98
  404e98:	00408b94 	.word	0x00408b94
  404e9c:	40140000 	.word	0x40140000
  404ea0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  404ea2:	2a00      	cmp	r2, #0
  404ea4:	f040 80e1 	bne.w	40506a <_dtoa_r+0x482>
  404ea8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  404eaa:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  404eac:	9d07      	ldr	r5, [sp, #28]
  404eae:	9308      	str	r3, [sp, #32]
  404eb0:	9903      	ldr	r1, [sp, #12]
  404eb2:	2900      	cmp	r1, #0
  404eb4:	460b      	mov	r3, r1
  404eb6:	dd0a      	ble.n	404ece <_dtoa_r+0x2e6>
  404eb8:	2d00      	cmp	r5, #0
  404eba:	dd08      	ble.n	404ece <_dtoa_r+0x2e6>
  404ebc:	42a9      	cmp	r1, r5
  404ebe:	9a07      	ldr	r2, [sp, #28]
  404ec0:	bfa8      	it	ge
  404ec2:	462b      	movge	r3, r5
  404ec4:	1ad2      	subs	r2, r2, r3
  404ec6:	1aed      	subs	r5, r5, r3
  404ec8:	1acb      	subs	r3, r1, r3
  404eca:	9207      	str	r2, [sp, #28]
  404ecc:	9303      	str	r3, [sp, #12]
  404ece:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404ed0:	2b00      	cmp	r3, #0
  404ed2:	dd1b      	ble.n	404f0c <_dtoa_r+0x324>
  404ed4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  404ed6:	2b00      	cmp	r3, #0
  404ed8:	f000 84ce 	beq.w	405878 <_dtoa_r+0xc90>
  404edc:	2e00      	cmp	r6, #0
  404ede:	dd11      	ble.n	404f04 <_dtoa_r+0x31c>
  404ee0:	9908      	ldr	r1, [sp, #32]
  404ee2:	4632      	mov	r2, r6
  404ee4:	4620      	mov	r0, r4
  404ee6:	f002 f817 	bl	406f18 <__pow5mult>
  404eea:	9f06      	ldr	r7, [sp, #24]
  404eec:	4601      	mov	r1, r0
  404eee:	9008      	str	r0, [sp, #32]
  404ef0:	463a      	mov	r2, r7
  404ef2:	4620      	mov	r0, r4
  404ef4:	f001 ff6e 	bl	406dd4 <__multiply>
  404ef8:	4603      	mov	r3, r0
  404efa:	4639      	mov	r1, r7
  404efc:	4620      	mov	r0, r4
  404efe:	9306      	str	r3, [sp, #24]
  404f00:	f001 febe 	bl	406c80 <_Bfree>
  404f04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404f06:	1b9a      	subs	r2, r3, r6
  404f08:	f040 84ff 	bne.w	40590a <_dtoa_r+0xd22>
  404f0c:	4620      	mov	r0, r4
  404f0e:	2101      	movs	r1, #1
  404f10:	f001 ff56 	bl	406dc0 <__i2b>
  404f14:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  404f16:	4607      	mov	r7, r0
  404f18:	2b00      	cmp	r3, #0
  404f1a:	f340 8282 	ble.w	405422 <_dtoa_r+0x83a>
  404f1e:	4601      	mov	r1, r0
  404f20:	461a      	mov	r2, r3
  404f22:	4620      	mov	r0, r4
  404f24:	f001 fff8 	bl	406f18 <__pow5mult>
  404f28:	9b22      	ldr	r3, [sp, #136]	; 0x88
  404f2a:	4607      	mov	r7, r0
  404f2c:	2b01      	cmp	r3, #1
  404f2e:	f340 84f3 	ble.w	405918 <_dtoa_r+0xd30>
  404f32:	f04f 0800 	mov.w	r8, #0
  404f36:	693b      	ldr	r3, [r7, #16]
  404f38:	eb07 0383 	add.w	r3, r7, r3, lsl #2
  404f3c:	6918      	ldr	r0, [r3, #16]
  404f3e:	f001 feeb 	bl	406d18 <__hi0bits>
  404f42:	f1c0 0020 	rsb	r0, r0, #32
  404f46:	9b03      	ldr	r3, [sp, #12]
  404f48:	4418      	add	r0, r3
  404f4a:	f010 001f 	ands.w	r0, r0, #31
  404f4e:	f000 82a0 	beq.w	405492 <_dtoa_r+0x8aa>
  404f52:	f1c0 0320 	rsb	r3, r0, #32
  404f56:	2b04      	cmp	r3, #4
  404f58:	f340 8592 	ble.w	405a80 <_dtoa_r+0xe98>
  404f5c:	f1c0 001c 	rsb	r0, r0, #28
  404f60:	9b07      	ldr	r3, [sp, #28]
  404f62:	4405      	add	r5, r0
  404f64:	4403      	add	r3, r0
  404f66:	9307      	str	r3, [sp, #28]
  404f68:	9b03      	ldr	r3, [sp, #12]
  404f6a:	4403      	add	r3, r0
  404f6c:	9303      	str	r3, [sp, #12]
  404f6e:	9b07      	ldr	r3, [sp, #28]
  404f70:	2b00      	cmp	r3, #0
  404f72:	dd05      	ble.n	404f80 <_dtoa_r+0x398>
  404f74:	9906      	ldr	r1, [sp, #24]
  404f76:	461a      	mov	r2, r3
  404f78:	4620      	mov	r0, r4
  404f7a:	f002 f81d 	bl	406fb8 <__lshift>
  404f7e:	9006      	str	r0, [sp, #24]
  404f80:	9b03      	ldr	r3, [sp, #12]
  404f82:	2b00      	cmp	r3, #0
  404f84:	dd05      	ble.n	404f92 <_dtoa_r+0x3aa>
  404f86:	4639      	mov	r1, r7
  404f88:	461a      	mov	r2, r3
  404f8a:	4620      	mov	r0, r4
  404f8c:	f002 f814 	bl	406fb8 <__lshift>
  404f90:	4607      	mov	r7, r0
  404f92:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  404f94:	2b00      	cmp	r3, #0
  404f96:	f040 838b 	bne.w	4056b0 <_dtoa_r+0xac8>
  404f9a:	9b22      	ldr	r3, [sp, #136]	; 0x88
  404f9c:	2b02      	cmp	r3, #2
  404f9e:	f340 827a 	ble.w	405496 <_dtoa_r+0x8ae>
  404fa2:	9b04      	ldr	r3, [sp, #16]
  404fa4:	2b00      	cmp	r3, #0
  404fa6:	f300 8276 	bgt.w	405496 <_dtoa_r+0x8ae>
  404faa:	9b04      	ldr	r3, [sp, #16]
  404fac:	2b00      	cmp	r3, #0
  404fae:	f47f af50 	bne.w	404e52 <_dtoa_r+0x26a>
  404fb2:	4639      	mov	r1, r7
  404fb4:	2205      	movs	r2, #5
  404fb6:	4620      	mov	r0, r4
  404fb8:	f001 fe6c 	bl	406c94 <__multadd>
  404fbc:	4607      	mov	r7, r0
  404fbe:	9806      	ldr	r0, [sp, #24]
  404fc0:	4639      	mov	r1, r7
  404fc2:	f002 f853 	bl	40706c <__mcmp>
  404fc6:	2800      	cmp	r0, #0
  404fc8:	f77f af43 	ble.w	404e52 <_dtoa_r+0x26a>
  404fcc:	9a02      	ldr	r2, [sp, #8]
  404fce:	2331      	movs	r3, #49	; 0x31
  404fd0:	3201      	adds	r2, #1
  404fd2:	9202      	str	r2, [sp, #8]
  404fd4:	9a05      	ldr	r2, [sp, #20]
  404fd6:	1c55      	adds	r5, r2, #1
  404fd8:	7013      	strb	r3, [r2, #0]
  404fda:	4639      	mov	r1, r7
  404fdc:	4620      	mov	r0, r4
  404fde:	f001 fe4f 	bl	406c80 <_Bfree>
  404fe2:	9b08      	ldr	r3, [sp, #32]
  404fe4:	b11b      	cbz	r3, 404fee <_dtoa_r+0x406>
  404fe6:	9908      	ldr	r1, [sp, #32]
  404fe8:	4620      	mov	r0, r4
  404fea:	f001 fe49 	bl	406c80 <_Bfree>
  404fee:	4620      	mov	r0, r4
  404ff0:	9906      	ldr	r1, [sp, #24]
  404ff2:	f001 fe45 	bl	406c80 <_Bfree>
  404ff6:	2200      	movs	r2, #0
  404ff8:	9b02      	ldr	r3, [sp, #8]
  404ffa:	702a      	strb	r2, [r5, #0]
  404ffc:	3301      	adds	r3, #1
  404ffe:	9a24      	ldr	r2, [sp, #144]	; 0x90
  405000:	6013      	str	r3, [r2, #0]
  405002:	9b26      	ldr	r3, [sp, #152]	; 0x98
  405004:	2b00      	cmp	r3, #0
  405006:	f000 82a3 	beq.w	405550 <_dtoa_r+0x968>
  40500a:	9805      	ldr	r0, [sp, #20]
  40500c:	601d      	str	r5, [r3, #0]
  40500e:	b019      	add	sp, #100	; 0x64
  405010:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405014:	9802      	ldr	r0, [sp, #8]
  405016:	f002 fe9b 	bl	407d50 <__aeabi_i2d>
  40501a:	4632      	mov	r2, r6
  40501c:	463b      	mov	r3, r7
  40501e:	f003 f965 	bl	4082ec <__aeabi_dcmpeq>
  405022:	2800      	cmp	r0, #0
  405024:	f47f ae85 	bne.w	404d32 <_dtoa_r+0x14a>
  405028:	9b02      	ldr	r3, [sp, #8]
  40502a:	3b01      	subs	r3, #1
  40502c:	9302      	str	r3, [sp, #8]
  40502e:	e680      	b.n	404d32 <_dtoa_r+0x14a>
  405030:	9a07      	ldr	r2, [sp, #28]
  405032:	9b02      	ldr	r3, [sp, #8]
  405034:	1ad2      	subs	r2, r2, r3
  405036:	425b      	negs	r3, r3
  405038:	930a      	str	r3, [sp, #40]	; 0x28
  40503a:	2300      	movs	r3, #0
  40503c:	9207      	str	r2, [sp, #28]
  40503e:	930c      	str	r3, [sp, #48]	; 0x30
  405040:	e6a0      	b.n	404d84 <_dtoa_r+0x19c>
  405042:	425b      	negs	r3, r3
  405044:	9307      	str	r3, [sp, #28]
  405046:	2300      	movs	r3, #0
  405048:	9303      	str	r3, [sp, #12]
  40504a:	e690      	b.n	404d6e <_dtoa_r+0x186>
  40504c:	900d      	str	r0, [sp, #52]	; 0x34
  40504e:	e686      	b.n	404d5e <_dtoa_r+0x176>
  405050:	4bbd      	ldr	r3, [pc, #756]	; (405348 <_dtoa_r+0x760>)
  405052:	1b5b      	subs	r3, r3, r5
  405054:	fa0a f003 	lsl.w	r0, sl, r3
  405058:	e638      	b.n	404ccc <_dtoa_r+0xe4>
  40505a:	2100      	movs	r1, #0
  40505c:	f04f 32ff 	mov.w	r2, #4294967295
  405060:	9123      	str	r1, [sp, #140]	; 0x8c
  405062:	2101      	movs	r1, #1
  405064:	9204      	str	r2, [sp, #16]
  405066:	910b      	str	r1, [sp, #44]	; 0x2c
  405068:	9210      	str	r2, [sp, #64]	; 0x40
  40506a:	9a22      	ldr	r2, [sp, #136]	; 0x88
  40506c:	2a01      	cmp	r2, #1
  40506e:	f340 8460 	ble.w	405932 <_dtoa_r+0xd4a>
  405072:	9b04      	ldr	r3, [sp, #16]
  405074:	1e5e      	subs	r6, r3, #1
  405076:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405078:	42b3      	cmp	r3, r6
  40507a:	f2c0 8405 	blt.w	405888 <_dtoa_r+0xca0>
  40507e:	1b9e      	subs	r6, r3, r6
  405080:	9b04      	ldr	r3, [sp, #16]
  405082:	2b00      	cmp	r3, #0
  405084:	f2c0 8461 	blt.w	40594a <_dtoa_r+0xd62>
  405088:	9d07      	ldr	r5, [sp, #28]
  40508a:	9b04      	ldr	r3, [sp, #16]
  40508c:	9a07      	ldr	r2, [sp, #28]
  40508e:	4620      	mov	r0, r4
  405090:	2101      	movs	r1, #1
  405092:	441a      	add	r2, r3
  405094:	9207      	str	r2, [sp, #28]
  405096:	9a03      	ldr	r2, [sp, #12]
  405098:	441a      	add	r2, r3
  40509a:	9203      	str	r2, [sp, #12]
  40509c:	f001 fe90 	bl	406dc0 <__i2b>
  4050a0:	9008      	str	r0, [sp, #32]
  4050a2:	e705      	b.n	404eb0 <_dtoa_r+0x2c8>
  4050a4:	2301      	movs	r3, #1
  4050a6:	930b      	str	r3, [sp, #44]	; 0x2c
  4050a8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  4050aa:	2b00      	cmp	r3, #0
  4050ac:	f340 83df 	ble.w	40586e <_dtoa_r+0xc86>
  4050b0:	2b0e      	cmp	r3, #14
  4050b2:	bf8c      	ite	hi
  4050b4:	2500      	movhi	r5, #0
  4050b6:	f005 0501 	andls.w	r5, r5, #1
  4050ba:	461e      	mov	r6, r3
  4050bc:	9310      	str	r3, [sp, #64]	; 0x40
  4050be:	9304      	str	r3, [sp, #16]
  4050c0:	2100      	movs	r1, #0
  4050c2:	2e17      	cmp	r6, #23
  4050c4:	6461      	str	r1, [r4, #68]	; 0x44
  4050c6:	d909      	bls.n	4050dc <_dtoa_r+0x4f4>
  4050c8:	2201      	movs	r2, #1
  4050ca:	2304      	movs	r3, #4
  4050cc:	005b      	lsls	r3, r3, #1
  4050ce:	4611      	mov	r1, r2
  4050d0:	3201      	adds	r2, #1
  4050d2:	f103 0014 	add.w	r0, r3, #20
  4050d6:	42b0      	cmp	r0, r6
  4050d8:	d9f8      	bls.n	4050cc <_dtoa_r+0x4e4>
  4050da:	6461      	str	r1, [r4, #68]	; 0x44
  4050dc:	4620      	mov	r0, r4
  4050de:	f001 fda7 	bl	406c30 <_Balloc>
  4050e2:	9005      	str	r0, [sp, #20]
  4050e4:	6420      	str	r0, [r4, #64]	; 0x40
  4050e6:	2d00      	cmp	r5, #0
  4050e8:	f43f ae8c 	beq.w	404e04 <_dtoa_r+0x21c>
  4050ec:	9802      	ldr	r0, [sp, #8]
  4050ee:	2800      	cmp	r0, #0
  4050f0:	e9cd ab0e 	strd	sl, fp, [sp, #56]	; 0x38
  4050f4:	f340 8233 	ble.w	40555e <_dtoa_r+0x976>
  4050f8:	4a94      	ldr	r2, [pc, #592]	; (40534c <_dtoa_r+0x764>)
  4050fa:	f000 030f 	and.w	r3, r0, #15
  4050fe:	1105      	asrs	r5, r0, #4
  405100:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
  405104:	06ea      	lsls	r2, r5, #27
  405106:	e9d3 6700 	ldrd	r6, r7, [r3]
  40510a:	f140 821c 	bpl.w	405546 <_dtoa_r+0x95e>
  40510e:	4b90      	ldr	r3, [pc, #576]	; (405350 <_dtoa_r+0x768>)
  405110:	4650      	mov	r0, sl
  405112:	4659      	mov	r1, fp
  405114:	f005 050f 	and.w	r5, r5, #15
  405118:	f04f 0803 	mov.w	r8, #3
  40511c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
  405120:	f002 ffa6 	bl	408070 <__aeabi_ddiv>
  405124:	4682      	mov	sl, r0
  405126:	468b      	mov	fp, r1
  405128:	b18d      	cbz	r5, 40514e <_dtoa_r+0x566>
  40512a:	f8df 9224 	ldr.w	r9, [pc, #548]	; 405350 <_dtoa_r+0x768>
  40512e:	07eb      	lsls	r3, r5, #31
  405130:	4630      	mov	r0, r6
  405132:	4639      	mov	r1, r7
  405134:	d507      	bpl.n	405146 <_dtoa_r+0x55e>
  405136:	f108 0801 	add.w	r8, r8, #1
  40513a:	e9d9 2300 	ldrd	r2, r3, [r9]
  40513e:	f002 fe6d 	bl	407e1c <__aeabi_dmul>
  405142:	4606      	mov	r6, r0
  405144:	460f      	mov	r7, r1
  405146:	106d      	asrs	r5, r5, #1
  405148:	f109 0908 	add.w	r9, r9, #8
  40514c:	d1ef      	bne.n	40512e <_dtoa_r+0x546>
  40514e:	4650      	mov	r0, sl
  405150:	4659      	mov	r1, fp
  405152:	4632      	mov	r2, r6
  405154:	463b      	mov	r3, r7
  405156:	f002 ff8b 	bl	408070 <__aeabi_ddiv>
  40515a:	e9cd 0108 	strd	r0, r1, [sp, #32]
  40515e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  405160:	b143      	cbz	r3, 405174 <_dtoa_r+0x58c>
  405162:	2200      	movs	r2, #0
  405164:	4b7b      	ldr	r3, [pc, #492]	; (405354 <_dtoa_r+0x76c>)
  405166:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  40516a:	f003 f8c9 	bl	408300 <__aeabi_dcmplt>
  40516e:	2800      	cmp	r0, #0
  405170:	f040 8393 	bne.w	40589a <_dtoa_r+0xcb2>
  405174:	4640      	mov	r0, r8
  405176:	f002 fdeb 	bl	407d50 <__aeabi_i2d>
  40517a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
  40517e:	f002 fe4d 	bl	407e1c <__aeabi_dmul>
  405182:	4b75      	ldr	r3, [pc, #468]	; (405358 <_dtoa_r+0x770>)
  405184:	2200      	movs	r2, #0
  405186:	f002 fc97 	bl	407ab8 <__adddf3>
  40518a:	9b04      	ldr	r3, [sp, #16]
  40518c:	4606      	mov	r6, r0
  40518e:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
  405192:	2b00      	cmp	r3, #0
  405194:	f000 8161 	beq.w	40545a <_dtoa_r+0x872>
  405198:	9b02      	ldr	r3, [sp, #8]
  40519a:	f8dd c010 	ldr.w	ip, [sp, #16]
  40519e:	9314      	str	r3, [sp, #80]	; 0x50
  4051a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  4051a2:	2b00      	cmp	r3, #0
  4051a4:	f000 820b 	beq.w	4055be <_dtoa_r+0x9d6>
  4051a8:	4b68      	ldr	r3, [pc, #416]	; (40534c <_dtoa_r+0x764>)
  4051aa:	2000      	movs	r0, #0
  4051ac:	9a05      	ldr	r2, [sp, #20]
  4051ae:	eb03 03cc 	add.w	r3, r3, ip, lsl #3
  4051b2:	496a      	ldr	r1, [pc, #424]	; (40535c <_dtoa_r+0x774>)
  4051b4:	1c55      	adds	r5, r2, #1
  4051b6:	f8cd c048 	str.w	ip, [sp, #72]	; 0x48
  4051ba:	e953 2302 	ldrd	r2, r3, [r3, #-8]
  4051be:	f002 ff57 	bl	408070 <__aeabi_ddiv>
  4051c2:	4632      	mov	r2, r6
  4051c4:	463b      	mov	r3, r7
  4051c6:	f002 fc75 	bl	407ab4 <__aeabi_dsub>
  4051ca:	4682      	mov	sl, r0
  4051cc:	468b      	mov	fp, r1
  4051ce:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
  4051d2:	4649      	mov	r1, r9
  4051d4:	4640      	mov	r0, r8
  4051d6:	f003 f8bb 	bl	408350 <__aeabi_d2iz>
  4051da:	4606      	mov	r6, r0
  4051dc:	f002 fdb8 	bl	407d50 <__aeabi_i2d>
  4051e0:	4602      	mov	r2, r0
  4051e2:	3630      	adds	r6, #48	; 0x30
  4051e4:	460b      	mov	r3, r1
  4051e6:	4640      	mov	r0, r8
  4051e8:	4649      	mov	r1, r9
  4051ea:	f002 fc63 	bl	407ab4 <__aeabi_dsub>
  4051ee:	9f05      	ldr	r7, [sp, #20]
  4051f0:	4680      	mov	r8, r0
  4051f2:	4689      	mov	r9, r1
  4051f4:	b2f6      	uxtb	r6, r6
  4051f6:	4650      	mov	r0, sl
  4051f8:	4659      	mov	r1, fp
  4051fa:	4642      	mov	r2, r8
  4051fc:	464b      	mov	r3, r9
  4051fe:	703e      	strb	r6, [r7, #0]
  405200:	f003 f89c 	bl	40833c <__aeabi_dcmpgt>
  405204:	2800      	cmp	r0, #0
  405206:	f040 8243 	bne.w	405690 <_dtoa_r+0xaa8>
  40520a:	4642      	mov	r2, r8
  40520c:	464b      	mov	r3, r9
  40520e:	2000      	movs	r0, #0
  405210:	4950      	ldr	r1, [pc, #320]	; (405354 <_dtoa_r+0x76c>)
  405212:	f002 fc4f 	bl	407ab4 <__aeabi_dsub>
  405216:	4602      	mov	r2, r0
  405218:	460b      	mov	r3, r1
  40521a:	4650      	mov	r0, sl
  40521c:	4659      	mov	r1, fp
  40521e:	f003 f88d 	bl	40833c <__aeabi_dcmpgt>
  405222:	2800      	cmp	r0, #0
  405224:	f040 80eb 	bne.w	4053fe <_dtoa_r+0x816>
  405228:	f8dd c048 	ldr.w	ip, [sp, #72]	; 0x48
  40522c:	f1bc 0f01 	cmp.w	ip, #1
  405230:	f340 8192 	ble.w	405558 <_dtoa_r+0x970>
  405234:	9f05      	ldr	r7, [sp, #20]
  405236:	9412      	str	r4, [sp, #72]	; 0x48
  405238:	4467      	add	r7, ip
  40523a:	9708      	str	r7, [sp, #32]
  40523c:	e00e      	b.n	40525c <_dtoa_r+0x674>
  40523e:	2000      	movs	r0, #0
  405240:	4944      	ldr	r1, [pc, #272]	; (405354 <_dtoa_r+0x76c>)
  405242:	f002 fc37 	bl	407ab4 <__aeabi_dsub>
  405246:	4652      	mov	r2, sl
  405248:	465b      	mov	r3, fp
  40524a:	f003 f859 	bl	408300 <__aeabi_dcmplt>
  40524e:	2800      	cmp	r0, #0
  405250:	f040 83a1 	bne.w	405996 <_dtoa_r+0xdae>
  405254:	9b08      	ldr	r3, [sp, #32]
  405256:	429d      	cmp	r5, r3
  405258:	f000 817d 	beq.w	405556 <_dtoa_r+0x96e>
  40525c:	4650      	mov	r0, sl
  40525e:	4659      	mov	r1, fp
  405260:	2200      	movs	r2, #0
  405262:	4b3f      	ldr	r3, [pc, #252]	; (405360 <_dtoa_r+0x778>)
  405264:	f002 fdda 	bl	407e1c <__aeabi_dmul>
  405268:	2200      	movs	r2, #0
  40526a:	4b3d      	ldr	r3, [pc, #244]	; (405360 <_dtoa_r+0x778>)
  40526c:	4682      	mov	sl, r0
  40526e:	468b      	mov	fp, r1
  405270:	4640      	mov	r0, r8
  405272:	4649      	mov	r1, r9
  405274:	f002 fdd2 	bl	407e1c <__aeabi_dmul>
  405278:	4606      	mov	r6, r0
  40527a:	460f      	mov	r7, r1
  40527c:	f003 f868 	bl	408350 <__aeabi_d2iz>
  405280:	4604      	mov	r4, r0
  405282:	f002 fd65 	bl	407d50 <__aeabi_i2d>
  405286:	4602      	mov	r2, r0
  405288:	460b      	mov	r3, r1
  40528a:	3430      	adds	r4, #48	; 0x30
  40528c:	4630      	mov	r0, r6
  40528e:	4639      	mov	r1, r7
  405290:	b2e6      	uxtb	r6, r4
  405292:	f002 fc0f 	bl	407ab4 <__aeabi_dsub>
  405296:	4680      	mov	r8, r0
  405298:	4689      	mov	r9, r1
  40529a:	4652      	mov	r2, sl
  40529c:	465b      	mov	r3, fp
  40529e:	f805 6b01 	strb.w	r6, [r5], #1
  4052a2:	f003 f82d 	bl	408300 <__aeabi_dcmplt>
  4052a6:	4642      	mov	r2, r8
  4052a8:	464b      	mov	r3, r9
  4052aa:	2800      	cmp	r0, #0
  4052ac:	d0c7      	beq.n	40523e <_dtoa_r+0x656>
  4052ae:	9b14      	ldr	r3, [sp, #80]	; 0x50
  4052b0:	9c12      	ldr	r4, [sp, #72]	; 0x48
  4052b2:	9302      	str	r3, [sp, #8]
  4052b4:	e69b      	b.n	404fee <_dtoa_r+0x406>
  4052b6:	2300      	movs	r3, #0
  4052b8:	930b      	str	r3, [sp, #44]	; 0x2c
  4052ba:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  4052bc:	9a02      	ldr	r2, [sp, #8]
  4052be:	4413      	add	r3, r2
  4052c0:	9310      	str	r3, [sp, #64]	; 0x40
  4052c2:	3301      	adds	r3, #1
  4052c4:	2b00      	cmp	r3, #0
  4052c6:	9304      	str	r3, [sp, #16]
  4052c8:	f340 82c9 	ble.w	40585e <_dtoa_r+0xc76>
  4052cc:	9e04      	ldr	r6, [sp, #16]
  4052ce:	2e0e      	cmp	r6, #14
  4052d0:	bf8c      	ite	hi
  4052d2:	2500      	movhi	r5, #0
  4052d4:	f005 0501 	andls.w	r5, r5, #1
  4052d8:	e6f2      	b.n	4050c0 <_dtoa_r+0x4d8>
  4052da:	2300      	movs	r3, #0
  4052dc:	930b      	str	r3, [sp, #44]	; 0x2c
  4052de:	e6e3      	b.n	4050a8 <_dtoa_r+0x4c0>
  4052e0:	9905      	ldr	r1, [sp, #20]
  4052e2:	4642      	mov	r2, r8
  4052e4:	464b      	mov	r3, r9
  4052e6:	4650      	mov	r0, sl
  4052e8:	1c4d      	adds	r5, r1, #1
  4052ea:	4659      	mov	r1, fp
  4052ec:	f002 fec0 	bl	408070 <__aeabi_ddiv>
  4052f0:	4656      	mov	r6, sl
  4052f2:	f003 f82d 	bl	408350 <__aeabi_d2iz>
  4052f6:	4682      	mov	sl, r0
  4052f8:	f002 fd2a 	bl	407d50 <__aeabi_i2d>
  4052fc:	4642      	mov	r2, r8
  4052fe:	464b      	mov	r3, r9
  405300:	f002 fd8c 	bl	407e1c <__aeabi_dmul>
  405304:	4602      	mov	r2, r0
  405306:	460b      	mov	r3, r1
  405308:	4630      	mov	r0, r6
  40530a:	4659      	mov	r1, fp
  40530c:	f002 fbd2 	bl	407ab4 <__aeabi_dsub>
  405310:	f10a 0330 	add.w	r3, sl, #48	; 0x30
  405314:	9a05      	ldr	r2, [sp, #20]
  405316:	4606      	mov	r6, r0
  405318:	460f      	mov	r7, r1
  40531a:	7013      	strb	r3, [r2, #0]
  40531c:	9b04      	ldr	r3, [sp, #16]
  40531e:	2b01      	cmp	r3, #1
  405320:	d04d      	beq.n	4053be <_dtoa_r+0x7d6>
  405322:	2200      	movs	r2, #0
  405324:	4b0e      	ldr	r3, [pc, #56]	; (405360 <_dtoa_r+0x778>)
  405326:	f002 fd79 	bl	407e1c <__aeabi_dmul>
  40532a:	2200      	movs	r2, #0
  40532c:	2300      	movs	r3, #0
  40532e:	4606      	mov	r6, r0
  405330:	460f      	mov	r7, r1
  405332:	f002 ffdb 	bl	4082ec <__aeabi_dcmpeq>
  405336:	2800      	cmp	r0, #0
  405338:	f47f ae59 	bne.w	404fee <_dtoa_r+0x406>
  40533c:	9403      	str	r4, [sp, #12]
  40533e:	f8dd b014 	ldr.w	fp, [sp, #20]
  405342:	9c04      	ldr	r4, [sp, #16]
  405344:	e019      	b.n	40537a <_dtoa_r+0x792>
  405346:	bf00      	nop
  405348:	fffffbee 	.word	0xfffffbee
  40534c:	00408bb8 	.word	0x00408bb8
  405350:	00408c90 	.word	0x00408c90
  405354:	3ff00000 	.word	0x3ff00000
  405358:	401c0000 	.word	0x401c0000
  40535c:	3fe00000 	.word	0x3fe00000
  405360:	40240000 	.word	0x40240000
  405364:	f002 fd5a 	bl	407e1c <__aeabi_dmul>
  405368:	2200      	movs	r2, #0
  40536a:	2300      	movs	r3, #0
  40536c:	4606      	mov	r6, r0
  40536e:	460f      	mov	r7, r1
  405370:	f002 ffbc 	bl	4082ec <__aeabi_dcmpeq>
  405374:	2800      	cmp	r0, #0
  405376:	f040 82e5 	bne.w	405944 <_dtoa_r+0xd5c>
  40537a:	4642      	mov	r2, r8
  40537c:	464b      	mov	r3, r9
  40537e:	4630      	mov	r0, r6
  405380:	4639      	mov	r1, r7
  405382:	f002 fe75 	bl	408070 <__aeabi_ddiv>
  405386:	f002 ffe3 	bl	408350 <__aeabi_d2iz>
  40538a:	4682      	mov	sl, r0
  40538c:	f002 fce0 	bl	407d50 <__aeabi_i2d>
  405390:	4642      	mov	r2, r8
  405392:	464b      	mov	r3, r9
  405394:	f002 fd42 	bl	407e1c <__aeabi_dmul>
  405398:	4602      	mov	r2, r0
  40539a:	460b      	mov	r3, r1
  40539c:	4630      	mov	r0, r6
  40539e:	4639      	mov	r1, r7
  4053a0:	f002 fb88 	bl	407ab4 <__aeabi_dsub>
  4053a4:	f10a 0e30 	add.w	lr, sl, #48	; 0x30
  4053a8:	4606      	mov	r6, r0
  4053aa:	460f      	mov	r7, r1
  4053ac:	f805 eb01 	strb.w	lr, [r5], #1
  4053b0:	ebcb 0e05 	rsb	lr, fp, r5
  4053b4:	2200      	movs	r2, #0
  4053b6:	4bb8      	ldr	r3, [pc, #736]	; (405698 <_dtoa_r+0xab0>)
  4053b8:	4574      	cmp	r4, lr
  4053ba:	d1d3      	bne.n	405364 <_dtoa_r+0x77c>
  4053bc:	9c03      	ldr	r4, [sp, #12]
  4053be:	4632      	mov	r2, r6
  4053c0:	463b      	mov	r3, r7
  4053c2:	4630      	mov	r0, r6
  4053c4:	4639      	mov	r1, r7
  4053c6:	f002 fb77 	bl	407ab8 <__adddf3>
  4053ca:	4606      	mov	r6, r0
  4053cc:	460f      	mov	r7, r1
  4053ce:	4640      	mov	r0, r8
  4053d0:	4649      	mov	r1, r9
  4053d2:	4632      	mov	r2, r6
  4053d4:	463b      	mov	r3, r7
  4053d6:	f002 ff93 	bl	408300 <__aeabi_dcmplt>
  4053da:	b960      	cbnz	r0, 4053f6 <_dtoa_r+0x80e>
  4053dc:	4640      	mov	r0, r8
  4053de:	4649      	mov	r1, r9
  4053e0:	4632      	mov	r2, r6
  4053e2:	463b      	mov	r3, r7
  4053e4:	f002 ff82 	bl	4082ec <__aeabi_dcmpeq>
  4053e8:	2800      	cmp	r0, #0
  4053ea:	f43f ae00 	beq.w	404fee <_dtoa_r+0x406>
  4053ee:	f01a 0f01 	tst.w	sl, #1
  4053f2:	f43f adfc 	beq.w	404fee <_dtoa_r+0x406>
  4053f6:	9b02      	ldr	r3, [sp, #8]
  4053f8:	9314      	str	r3, [sp, #80]	; 0x50
  4053fa:	f815 6c01 	ldrb.w	r6, [r5, #-1]
  4053fe:	1e6a      	subs	r2, r5, #1
  405400:	9b05      	ldr	r3, [sp, #20]
  405402:	e004      	b.n	40540e <_dtoa_r+0x826>
  405404:	429a      	cmp	r2, r3
  405406:	f000 8277 	beq.w	4058f8 <_dtoa_r+0xd10>
  40540a:	f812 6d01 	ldrb.w	r6, [r2, #-1]!
  40540e:	2e39      	cmp	r6, #57	; 0x39
  405410:	f102 0501 	add.w	r5, r2, #1
  405414:	d0f6      	beq.n	405404 <_dtoa_r+0x81c>
  405416:	1c73      	adds	r3, r6, #1
  405418:	9914      	ldr	r1, [sp, #80]	; 0x50
  40541a:	b2db      	uxtb	r3, r3
  40541c:	9102      	str	r1, [sp, #8]
  40541e:	7013      	strb	r3, [r2, #0]
  405420:	e5e5      	b.n	404fee <_dtoa_r+0x406>
  405422:	9b22      	ldr	r3, [sp, #136]	; 0x88
  405424:	2b01      	cmp	r3, #1
  405426:	f340 8161 	ble.w	4056ec <_dtoa_r+0xb04>
  40542a:	f04f 0800 	mov.w	r8, #0
  40542e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  405430:	2b00      	cmp	r3, #0
  405432:	f47f ad80 	bne.w	404f36 <_dtoa_r+0x34e>
  405436:	2001      	movs	r0, #1
  405438:	e585      	b.n	404f46 <_dtoa_r+0x35e>
  40543a:	4640      	mov	r0, r8
  40543c:	f002 fc88 	bl	407d50 <__aeabi_i2d>
  405440:	4602      	mov	r2, r0
  405442:	460b      	mov	r3, r1
  405444:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  405448:	f002 fce8 	bl	407e1c <__aeabi_dmul>
  40544c:	2200      	movs	r2, #0
  40544e:	4b93      	ldr	r3, [pc, #588]	; (40569c <_dtoa_r+0xab4>)
  405450:	f002 fb32 	bl	407ab8 <__adddf3>
  405454:	4606      	mov	r6, r0
  405456:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
  40545a:	2200      	movs	r2, #0
  40545c:	4b90      	ldr	r3, [pc, #576]	; (4056a0 <_dtoa_r+0xab8>)
  40545e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  405462:	f002 fb27 	bl	407ab4 <__aeabi_dsub>
  405466:	4632      	mov	r2, r6
  405468:	463b      	mov	r3, r7
  40546a:	4680      	mov	r8, r0
  40546c:	4689      	mov	r9, r1
  40546e:	f002 ff65 	bl	40833c <__aeabi_dcmpgt>
  405472:	4605      	mov	r5, r0
  405474:	2800      	cmp	r0, #0
  405476:	f040 809f 	bne.w	4055b8 <_dtoa_r+0x9d0>
  40547a:	4632      	mov	r2, r6
  40547c:	4640      	mov	r0, r8
  40547e:	4649      	mov	r1, r9
  405480:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
  405484:	f002 ff3c 	bl	408300 <__aeabi_dcmplt>
  405488:	2800      	cmp	r0, #0
  40548a:	d065      	beq.n	405558 <_dtoa_r+0x970>
  40548c:	462f      	mov	r7, r5
  40548e:	9508      	str	r5, [sp, #32]
  405490:	e4df      	b.n	404e52 <_dtoa_r+0x26a>
  405492:	201c      	movs	r0, #28
  405494:	e564      	b.n	404f60 <_dtoa_r+0x378>
  405496:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  405498:	2b00      	cmp	r3, #0
  40549a:	f040 814f 	bne.w	40573c <_dtoa_r+0xb54>
  40549e:	f8dd a014 	ldr.w	sl, [sp, #20]
  4054a2:	9e06      	ldr	r6, [sp, #24]
  4054a4:	4655      	mov	r5, sl
  4054a6:	f8dd 8010 	ldr.w	r8, [sp, #16]
  4054aa:	e002      	b.n	4054b2 <_dtoa_r+0x8ca>
  4054ac:	f001 fbf2 	bl	406c94 <__multadd>
  4054b0:	4606      	mov	r6, r0
  4054b2:	4639      	mov	r1, r7
  4054b4:	4630      	mov	r0, r6
  4054b6:	f7ff faf7 	bl	404aa8 <quorem>
  4054ba:	f100 0930 	add.w	r9, r0, #48	; 0x30
  4054be:	4631      	mov	r1, r6
  4054c0:	4620      	mov	r0, r4
  4054c2:	f805 9b01 	strb.w	r9, [r5], #1
  4054c6:	ebca 0e05 	rsb	lr, sl, r5
  4054ca:	220a      	movs	r2, #10
  4054cc:	2300      	movs	r3, #0
  4054ce:	45c6      	cmp	lr, r8
  4054d0:	dbec      	blt.n	4054ac <_dtoa_r+0x8c4>
  4054d2:	9b05      	ldr	r3, [sp, #20]
  4054d4:	f04f 0a00 	mov.w	sl, #0
  4054d8:	9a04      	ldr	r2, [sp, #16]
  4054da:	9606      	str	r6, [sp, #24]
  4054dc:	2a01      	cmp	r2, #1
  4054de:	bfac      	ite	ge
  4054e0:	189b      	addge	r3, r3, r2
  4054e2:	3301      	addlt	r3, #1
  4054e4:	461d      	mov	r5, r3
  4054e6:	9906      	ldr	r1, [sp, #24]
  4054e8:	2201      	movs	r2, #1
  4054ea:	4620      	mov	r0, r4
  4054ec:	f001 fd64 	bl	406fb8 <__lshift>
  4054f0:	4639      	mov	r1, r7
  4054f2:	9006      	str	r0, [sp, #24]
  4054f4:	f001 fdba 	bl	40706c <__mcmp>
  4054f8:	2800      	cmp	r0, #0
  4054fa:	f340 824e 	ble.w	40599a <_dtoa_r+0xdb2>
  4054fe:	f815 2c01 	ldrb.w	r2, [r5, #-1]
  405502:	1e6b      	subs	r3, r5, #1
  405504:	9905      	ldr	r1, [sp, #20]
  405506:	e004      	b.n	405512 <_dtoa_r+0x92a>
  405508:	428b      	cmp	r3, r1
  40550a:	f000 820b 	beq.w	405924 <_dtoa_r+0xd3c>
  40550e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
  405512:	2a39      	cmp	r2, #57	; 0x39
  405514:	f103 0501 	add.w	r5, r3, #1
  405518:	d0f6      	beq.n	405508 <_dtoa_r+0x920>
  40551a:	3201      	adds	r2, #1
  40551c:	701a      	strb	r2, [r3, #0]
  40551e:	4639      	mov	r1, r7
  405520:	4620      	mov	r0, r4
  405522:	f001 fbad 	bl	406c80 <_Bfree>
  405526:	9b08      	ldr	r3, [sp, #32]
  405528:	2b00      	cmp	r3, #0
  40552a:	f43f ad60 	beq.w	404fee <_dtoa_r+0x406>
  40552e:	459a      	cmp	sl, r3
  405530:	f43f ad59 	beq.w	404fe6 <_dtoa_r+0x3fe>
  405534:	f1ba 0f00 	cmp.w	sl, #0
  405538:	f43f ad55 	beq.w	404fe6 <_dtoa_r+0x3fe>
  40553c:	4651      	mov	r1, sl
  40553e:	4620      	mov	r0, r4
  405540:	f001 fb9e 	bl	406c80 <_Bfree>
  405544:	e54f      	b.n	404fe6 <_dtoa_r+0x3fe>
  405546:	e9dd ab0e 	ldrd	sl, fp, [sp, #56]	; 0x38
  40554a:	f04f 0802 	mov.w	r8, #2
  40554e:	e5eb      	b.n	405128 <_dtoa_r+0x540>
  405550:	9805      	ldr	r0, [sp, #20]
  405552:	f7ff bb7a 	b.w	404c4a <_dtoa_r+0x62>
  405556:	9c12      	ldr	r4, [sp, #72]	; 0x48
  405558:	e9dd ab0e 	ldrd	sl, fp, [sp, #56]	; 0x38
  40555c:	e452      	b.n	404e04 <_dtoa_r+0x21c>
  40555e:	9b02      	ldr	r3, [sp, #8]
  405560:	425d      	negs	r5, r3
  405562:	2d00      	cmp	r5, #0
  405564:	f000 81c1 	beq.w	4058ea <_dtoa_r+0xd02>
  405568:	f005 020f 	and.w	r2, r5, #15
  40556c:	4b4d      	ldr	r3, [pc, #308]	; (4056a4 <_dtoa_r+0xabc>)
  40556e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  405572:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
  405576:	e9d3 2300 	ldrd	r2, r3, [r3]
  40557a:	f002 fc4f 	bl	407e1c <__aeabi_dmul>
  40557e:	112d      	asrs	r5, r5, #4
  405580:	e9cd 0108 	strd	r0, r1, [sp, #32]
  405584:	f000 8275 	beq.w	405a72 <_dtoa_r+0xe8a>
  405588:	4e47      	ldr	r6, [pc, #284]	; (4056a8 <_dtoa_r+0xac0>)
  40558a:	f04f 0802 	mov.w	r8, #2
  40558e:	4602      	mov	r2, r0
  405590:	460b      	mov	r3, r1
  405592:	07ef      	lsls	r7, r5, #31
  405594:	4610      	mov	r0, r2
  405596:	4619      	mov	r1, r3
  405598:	d507      	bpl.n	4055aa <_dtoa_r+0x9c2>
  40559a:	f108 0801 	add.w	r8, r8, #1
  40559e:	e9d6 2300 	ldrd	r2, r3, [r6]
  4055a2:	f002 fc3b 	bl	407e1c <__aeabi_dmul>
  4055a6:	4602      	mov	r2, r0
  4055a8:	460b      	mov	r3, r1
  4055aa:	106d      	asrs	r5, r5, #1
  4055ac:	f106 0608 	add.w	r6, r6, #8
  4055b0:	d1ef      	bne.n	405592 <_dtoa_r+0x9aa>
  4055b2:	e9cd 2308 	strd	r2, r3, [sp, #32]
  4055b6:	e5d2      	b.n	40515e <_dtoa_r+0x576>
  4055b8:	2700      	movs	r7, #0
  4055ba:	9708      	str	r7, [sp, #32]
  4055bc:	e506      	b.n	404fcc <_dtoa_r+0x3e4>
  4055be:	f10c 3bff 	add.w	fp, ip, #4294967295
  4055c2:	4938      	ldr	r1, [pc, #224]	; (4056a4 <_dtoa_r+0xabc>)
  4055c4:	4632      	mov	r2, r6
  4055c6:	463b      	mov	r3, r7
  4055c8:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
  4055cc:	f8cd c054 	str.w	ip, [sp, #84]	; 0x54
  4055d0:	9f05      	ldr	r7, [sp, #20]
  4055d2:	e9d1 0100 	ldrd	r0, r1, [r1]
  4055d6:	f002 fc21 	bl	407e1c <__aeabi_dmul>
  4055da:	1c7d      	adds	r5, r7, #1
  4055dc:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
  4055e0:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
  4055e4:	4649      	mov	r1, r9
  4055e6:	4640      	mov	r0, r8
  4055e8:	f002 feb2 	bl	408350 <__aeabi_d2iz>
  4055ec:	4606      	mov	r6, r0
  4055ee:	f002 fbaf 	bl	407d50 <__aeabi_i2d>
  4055f2:	4602      	mov	r2, r0
  4055f4:	460b      	mov	r3, r1
  4055f6:	4640      	mov	r0, r8
  4055f8:	4649      	mov	r1, r9
  4055fa:	3630      	adds	r6, #48	; 0x30
  4055fc:	f002 fa5a 	bl	407ab4 <__aeabi_dsub>
  405600:	f8dd c054 	ldr.w	ip, [sp, #84]	; 0x54
  405604:	4680      	mov	r8, r0
  405606:	4689      	mov	r9, r1
  405608:	f1bc 0f01 	cmp.w	ip, #1
  40560c:	703e      	strb	r6, [r7, #0]
  40560e:	d020      	beq.n	405652 <_dtoa_r+0xa6a>
  405610:	9b05      	ldr	r3, [sp, #20]
  405612:	4640      	mov	r0, r8
  405614:	46aa      	mov	sl, r5
  405616:	46a8      	mov	r8, r5
  405618:	eb03 070c 	add.w	r7, r3, ip
  40561c:	46b9      	mov	r9, r7
  40561e:	2200      	movs	r2, #0
  405620:	4b1d      	ldr	r3, [pc, #116]	; (405698 <_dtoa_r+0xab0>)
  405622:	f002 fbfb 	bl	407e1c <__aeabi_dmul>
  405626:	460f      	mov	r7, r1
  405628:	4606      	mov	r6, r0
  40562a:	f002 fe91 	bl	408350 <__aeabi_d2iz>
  40562e:	4605      	mov	r5, r0
  405630:	f002 fb8e 	bl	407d50 <__aeabi_i2d>
  405634:	4602      	mov	r2, r0
  405636:	460b      	mov	r3, r1
  405638:	3530      	adds	r5, #48	; 0x30
  40563a:	4630      	mov	r0, r6
  40563c:	4639      	mov	r1, r7
  40563e:	f002 fa39 	bl	407ab4 <__aeabi_dsub>
  405642:	f80a 5b01 	strb.w	r5, [sl], #1
  405646:	45ca      	cmp	sl, r9
  405648:	d1e9      	bne.n	40561e <_dtoa_r+0xa36>
  40564a:	4645      	mov	r5, r8
  40564c:	4689      	mov	r9, r1
  40564e:	4680      	mov	r8, r0
  405650:	445d      	add	r5, fp
  405652:	2200      	movs	r2, #0
  405654:	4b15      	ldr	r3, [pc, #84]	; (4056ac <_dtoa_r+0xac4>)
  405656:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
  40565a:	f002 fa2d 	bl	407ab8 <__adddf3>
  40565e:	4642      	mov	r2, r8
  405660:	464b      	mov	r3, r9
  405662:	f002 fe4d 	bl	408300 <__aeabi_dcmplt>
  405666:	2800      	cmp	r0, #0
  405668:	f47f aec7 	bne.w	4053fa <_dtoa_r+0x812>
  40566c:	2000      	movs	r0, #0
  40566e:	490f      	ldr	r1, [pc, #60]	; (4056ac <_dtoa_r+0xac4>)
  405670:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
  405674:	f002 fa1e 	bl	407ab4 <__aeabi_dsub>
  405678:	4642      	mov	r2, r8
  40567a:	464b      	mov	r3, r9
  40567c:	f002 fe5e 	bl	40833c <__aeabi_dcmpgt>
  405680:	b908      	cbnz	r0, 405686 <_dtoa_r+0xa9e>
  405682:	e769      	b.n	405558 <_dtoa_r+0x970>
  405684:	4615      	mov	r5, r2
  405686:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  40568a:	1e6a      	subs	r2, r5, #1
  40568c:	2b30      	cmp	r3, #48	; 0x30
  40568e:	d0f9      	beq.n	405684 <_dtoa_r+0xa9c>
  405690:	9b14      	ldr	r3, [sp, #80]	; 0x50
  405692:	9302      	str	r3, [sp, #8]
  405694:	e4ab      	b.n	404fee <_dtoa_r+0x406>
  405696:	bf00      	nop
  405698:	40240000 	.word	0x40240000
  40569c:	401c0000 	.word	0x401c0000
  4056a0:	40140000 	.word	0x40140000
  4056a4:	00408bb8 	.word	0x00408bb8
  4056a8:	00408c90 	.word	0x00408c90
  4056ac:	3fe00000 	.word	0x3fe00000
  4056b0:	9806      	ldr	r0, [sp, #24]
  4056b2:	4639      	mov	r1, r7
  4056b4:	f001 fcda 	bl	40706c <__mcmp>
  4056b8:	2800      	cmp	r0, #0
  4056ba:	f6bf ac6e 	bge.w	404f9a <_dtoa_r+0x3b2>
  4056be:	9e02      	ldr	r6, [sp, #8]
  4056c0:	2300      	movs	r3, #0
  4056c2:	9906      	ldr	r1, [sp, #24]
  4056c4:	4620      	mov	r0, r4
  4056c6:	3e01      	subs	r6, #1
  4056c8:	220a      	movs	r2, #10
  4056ca:	9602      	str	r6, [sp, #8]
  4056cc:	f001 fae2 	bl	406c94 <__multadd>
  4056d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  4056d2:	9006      	str	r0, [sp, #24]
  4056d4:	bb1b      	cbnz	r3, 40571e <_dtoa_r+0xb36>
  4056d6:	9b22      	ldr	r3, [sp, #136]	; 0x88
  4056d8:	2b02      	cmp	r3, #2
  4056da:	f340 81ce 	ble.w	405a7a <_dtoa_r+0xe92>
  4056de:	9b10      	ldr	r3, [sp, #64]	; 0x40
  4056e0:	2b00      	cmp	r3, #0
  4056e2:	f300 81ca 	bgt.w	405a7a <_dtoa_r+0xe92>
  4056e6:	9b10      	ldr	r3, [sp, #64]	; 0x40
  4056e8:	9304      	str	r3, [sp, #16]
  4056ea:	e45e      	b.n	404faa <_dtoa_r+0x3c2>
  4056ec:	f1ba 0f00 	cmp.w	sl, #0
  4056f0:	f47f ae9b 	bne.w	40542a <_dtoa_r+0x842>
  4056f4:	f3cb 0313 	ubfx	r3, fp, #0, #20
  4056f8:	2b00      	cmp	r3, #0
  4056fa:	f47f ae96 	bne.w	40542a <_dtoa_r+0x842>
  4056fe:	f02b 4600 	bic.w	r6, fp, #2147483648	; 0x80000000
  405702:	0d36      	lsrs	r6, r6, #20
  405704:	0536      	lsls	r6, r6, #20
  405706:	2e00      	cmp	r6, #0
  405708:	f000 818a 	beq.w	405a20 <_dtoa_r+0xe38>
  40570c:	9b07      	ldr	r3, [sp, #28]
  40570e:	f04f 0801 	mov.w	r8, #1
  405712:	3301      	adds	r3, #1
  405714:	9307      	str	r3, [sp, #28]
  405716:	9b03      	ldr	r3, [sp, #12]
  405718:	3301      	adds	r3, #1
  40571a:	9303      	str	r3, [sp, #12]
  40571c:	e687      	b.n	40542e <_dtoa_r+0x846>
  40571e:	2300      	movs	r3, #0
  405720:	9908      	ldr	r1, [sp, #32]
  405722:	4620      	mov	r0, r4
  405724:	220a      	movs	r2, #10
  405726:	f001 fab5 	bl	406c94 <__multadd>
  40572a:	9b22      	ldr	r3, [sp, #136]	; 0x88
  40572c:	9008      	str	r0, [sp, #32]
  40572e:	2b02      	cmp	r3, #2
  405730:	dd02      	ble.n	405738 <_dtoa_r+0xb50>
  405732:	9b10      	ldr	r3, [sp, #64]	; 0x40
  405734:	2b00      	cmp	r3, #0
  405736:	ddd6      	ble.n	4056e6 <_dtoa_r+0xafe>
  405738:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40573a:	9304      	str	r3, [sp, #16]
  40573c:	2d00      	cmp	r5, #0
  40573e:	dd05      	ble.n	40574c <_dtoa_r+0xb64>
  405740:	9908      	ldr	r1, [sp, #32]
  405742:	462a      	mov	r2, r5
  405744:	4620      	mov	r0, r4
  405746:	f001 fc37 	bl	406fb8 <__lshift>
  40574a:	9008      	str	r0, [sp, #32]
  40574c:	f1b8 0f00 	cmp.w	r8, #0
  405750:	f040 8133 	bne.w	4059ba <_dtoa_r+0xdd2>
  405754:	9e08      	ldr	r6, [sp, #32]
  405756:	f00a 0101 	and.w	r1, sl, #1
  40575a:	9b04      	ldr	r3, [sp, #16]
  40575c:	9a22      	ldr	r2, [sp, #136]	; 0x88
  40575e:	3b01      	subs	r3, #1
  405760:	910b      	str	r1, [sp, #44]	; 0x2c
  405762:	9905      	ldr	r1, [sp, #20]
  405764:	fab2 f282 	clz	r2, r2
  405768:	970a      	str	r7, [sp, #40]	; 0x28
  40576a:	18cb      	adds	r3, r1, r3
  40576c:	4688      	mov	r8, r1
  40576e:	f8dd b020 	ldr.w	fp, [sp, #32]
  405772:	930c      	str	r3, [sp, #48]	; 0x30
  405774:	0953      	lsrs	r3, r2, #5
  405776:	9f06      	ldr	r7, [sp, #24]
  405778:	9303      	str	r3, [sp, #12]
  40577a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  40577c:	4638      	mov	r0, r7
  40577e:	4629      	mov	r1, r5
  405780:	f7ff f992 	bl	404aa8 <quorem>
  405784:	4659      	mov	r1, fp
  405786:	4681      	mov	r9, r0
  405788:	4638      	mov	r0, r7
  40578a:	f001 fc6f 	bl	40706c <__mcmp>
  40578e:	4629      	mov	r1, r5
  405790:	4632      	mov	r2, r6
  405792:	4682      	mov	sl, r0
  405794:	4620      	mov	r0, r4
  405796:	f001 fc8d 	bl	4070b4 <__mdiff>
  40579a:	68c2      	ldr	r2, [r0, #12]
  40579c:	4605      	mov	r5, r0
  40579e:	f109 0c30 	add.w	ip, r9, #48	; 0x30
  4057a2:	9207      	str	r2, [sp, #28]
  4057a4:	2a00      	cmp	r2, #0
  4057a6:	d150      	bne.n	40584a <_dtoa_r+0xc62>
  4057a8:	4629      	mov	r1, r5
  4057aa:	4638      	mov	r0, r7
  4057ac:	f8cd c018 	str.w	ip, [sp, #24]
  4057b0:	f001 fc5c 	bl	40706c <__mcmp>
  4057b4:	4629      	mov	r1, r5
  4057b6:	9004      	str	r0, [sp, #16]
  4057b8:	4620      	mov	r0, r4
  4057ba:	f001 fa61 	bl	406c80 <_Bfree>
  4057be:	9a03      	ldr	r2, [sp, #12]
  4057c0:	9b04      	ldr	r3, [sp, #16]
  4057c2:	f8dd c018 	ldr.w	ip, [sp, #24]
  4057c6:	b132      	cbz	r2, 4057d6 <_dtoa_r+0xbee>
  4057c8:	b92b      	cbnz	r3, 4057d6 <_dtoa_r+0xbee>
  4057ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  4057cc:	9a07      	ldr	r2, [sp, #28]
  4057ce:	2b00      	cmp	r3, #0
  4057d0:	f000 8128 	beq.w	405a24 <_dtoa_r+0xe3c>
  4057d4:	4613      	mov	r3, r2
  4057d6:	f1ba 0f00 	cmp.w	sl, #0
  4057da:	f2c0 80bc 	blt.w	405956 <_dtoa_r+0xd6e>
  4057de:	9a03      	ldr	r2, [sp, #12]
  4057e0:	b132      	cbz	r2, 4057f0 <_dtoa_r+0xc08>
  4057e2:	f1ba 0f00 	cmp.w	sl, #0
  4057e6:	d103      	bne.n	4057f0 <_dtoa_r+0xc08>
  4057e8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  4057ea:	2a00      	cmp	r2, #0
  4057ec:	f000 80b3 	beq.w	405956 <_dtoa_r+0xd6e>
  4057f0:	2b00      	cmp	r3, #0
  4057f2:	f300 80fe 	bgt.w	4059f2 <_dtoa_r+0xe0a>
  4057f6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  4057f8:	f108 0901 	add.w	r9, r8, #1
  4057fc:	f888 c000 	strb.w	ip, [r8]
  405800:	4598      	cmp	r8, r3
  405802:	464d      	mov	r5, r9
  405804:	f000 8106 	beq.w	405a14 <_dtoa_r+0xe2c>
  405808:	4639      	mov	r1, r7
  40580a:	220a      	movs	r2, #10
  40580c:	2300      	movs	r3, #0
  40580e:	4620      	mov	r0, r4
  405810:	f001 fa40 	bl	406c94 <__multadd>
  405814:	45b3      	cmp	fp, r6
  405816:	4607      	mov	r7, r0
  405818:	4659      	mov	r1, fp
  40581a:	4620      	mov	r0, r4
  40581c:	f04f 020a 	mov.w	r2, #10
  405820:	f04f 0300 	mov.w	r3, #0
  405824:	d00b      	beq.n	40583e <_dtoa_r+0xc56>
  405826:	f001 fa35 	bl	406c94 <__multadd>
  40582a:	4631      	mov	r1, r6
  40582c:	4683      	mov	fp, r0
  40582e:	220a      	movs	r2, #10
  405830:	4620      	mov	r0, r4
  405832:	2300      	movs	r3, #0
  405834:	f001 fa2e 	bl	406c94 <__multadd>
  405838:	46c8      	mov	r8, r9
  40583a:	4606      	mov	r6, r0
  40583c:	e79d      	b.n	40577a <_dtoa_r+0xb92>
  40583e:	f001 fa29 	bl	406c94 <__multadd>
  405842:	46c8      	mov	r8, r9
  405844:	4683      	mov	fp, r0
  405846:	4606      	mov	r6, r0
  405848:	e797      	b.n	40577a <_dtoa_r+0xb92>
  40584a:	4601      	mov	r1, r0
  40584c:	4620      	mov	r0, r4
  40584e:	f8cd c010 	str.w	ip, [sp, #16]
  405852:	f001 fa15 	bl	406c80 <_Bfree>
  405856:	2301      	movs	r3, #1
  405858:	f8dd c010 	ldr.w	ip, [sp, #16]
  40585c:	e7bb      	b.n	4057d6 <_dtoa_r+0xbee>
  40585e:	2b0e      	cmp	r3, #14
  405860:	bf8c      	ite	hi
  405862:	2300      	movhi	r3, #0
  405864:	2301      	movls	r3, #1
  405866:	2100      	movs	r1, #0
  405868:	401d      	ands	r5, r3
  40586a:	6461      	str	r1, [r4, #68]	; 0x44
  40586c:	e436      	b.n	4050dc <_dtoa_r+0x4f4>
  40586e:	2301      	movs	r3, #1
  405870:	9323      	str	r3, [sp, #140]	; 0x8c
  405872:	9310      	str	r3, [sp, #64]	; 0x40
  405874:	9304      	str	r3, [sp, #16]
  405876:	e7f6      	b.n	405866 <_dtoa_r+0xc7e>
  405878:	9906      	ldr	r1, [sp, #24]
  40587a:	4620      	mov	r0, r4
  40587c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40587e:	f001 fb4b 	bl	406f18 <__pow5mult>
  405882:	9006      	str	r0, [sp, #24]
  405884:	f7ff bb42 	b.w	404f0c <_dtoa_r+0x324>
  405888:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40588a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  40588c:	1af3      	subs	r3, r6, r3
  40588e:	960a      	str	r6, [sp, #40]	; 0x28
  405890:	2600      	movs	r6, #0
  405892:	441a      	add	r2, r3
  405894:	920c      	str	r2, [sp, #48]	; 0x30
  405896:	f7ff bbf3 	b.w	405080 <_dtoa_r+0x498>
  40589a:	9b04      	ldr	r3, [sp, #16]
  40589c:	2b00      	cmp	r3, #0
  40589e:	f43f adcc 	beq.w	40543a <_dtoa_r+0x852>
  4058a2:	9d10      	ldr	r5, [sp, #64]	; 0x40
  4058a4:	2d00      	cmp	r5, #0
  4058a6:	f77f ae57 	ble.w	405558 <_dtoa_r+0x970>
  4058aa:	2200      	movs	r2, #0
  4058ac:	4b86      	ldr	r3, [pc, #536]	; (405ac8 <_dtoa_r+0xee0>)
  4058ae:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  4058b2:	f002 fab3 	bl	407e1c <__aeabi_dmul>
  4058b6:	9b02      	ldr	r3, [sp, #8]
  4058b8:	4606      	mov	r6, r0
  4058ba:	460f      	mov	r7, r1
  4058bc:	3b01      	subs	r3, #1
  4058be:	f108 0001 	add.w	r0, r8, #1
  4058c2:	e9cd 6708 	strd	r6, r7, [sp, #32]
  4058c6:	9314      	str	r3, [sp, #80]	; 0x50
  4058c8:	f002 fa42 	bl	407d50 <__aeabi_i2d>
  4058cc:	4602      	mov	r2, r0
  4058ce:	460b      	mov	r3, r1
  4058d0:	4630      	mov	r0, r6
  4058d2:	4639      	mov	r1, r7
  4058d4:	f002 faa2 	bl	407e1c <__aeabi_dmul>
  4058d8:	2200      	movs	r2, #0
  4058da:	4b7c      	ldr	r3, [pc, #496]	; (405acc <_dtoa_r+0xee4>)
  4058dc:	f002 f8ec 	bl	407ab8 <__adddf3>
  4058e0:	46ac      	mov	ip, r5
  4058e2:	4606      	mov	r6, r0
  4058e4:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
  4058e8:	e45a      	b.n	4051a0 <_dtoa_r+0x5b8>
  4058ea:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
  4058ee:	f04f 0802 	mov.w	r8, #2
  4058f2:	e9cd 2308 	strd	r2, r3, [sp, #32]
  4058f6:	e432      	b.n	40515e <_dtoa_r+0x576>
  4058f8:	9b14      	ldr	r3, [sp, #80]	; 0x50
  4058fa:	2130      	movs	r1, #48	; 0x30
  4058fc:	3301      	adds	r3, #1
  4058fe:	7011      	strb	r1, [r2, #0]
  405900:	9302      	str	r3, [sp, #8]
  405902:	2331      	movs	r3, #49	; 0x31
  405904:	7013      	strb	r3, [r2, #0]
  405906:	f7ff bb72 	b.w	404fee <_dtoa_r+0x406>
  40590a:	9906      	ldr	r1, [sp, #24]
  40590c:	4620      	mov	r0, r4
  40590e:	f001 fb03 	bl	406f18 <__pow5mult>
  405912:	9006      	str	r0, [sp, #24]
  405914:	f7ff bafa 	b.w	404f0c <_dtoa_r+0x324>
  405918:	f1ba 0f00 	cmp.w	sl, #0
  40591c:	f43f aeea 	beq.w	4056f4 <_dtoa_r+0xb0c>
  405920:	f7ff bb07 	b.w	404f32 <_dtoa_r+0x34a>
  405924:	9a02      	ldr	r2, [sp, #8]
  405926:	2331      	movs	r3, #49	; 0x31
  405928:	3201      	adds	r2, #1
  40592a:	9202      	str	r2, [sp, #8]
  40592c:	9a05      	ldr	r2, [sp, #20]
  40592e:	7013      	strb	r3, [r2, #0]
  405930:	e5f5      	b.n	40551e <_dtoa_r+0x936>
  405932:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405934:	2a00      	cmp	r2, #0
  405936:	d055      	beq.n	4059e4 <_dtoa_r+0xdfc>
  405938:	f203 4333 	addw	r3, r3, #1075	; 0x433
  40593c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  40593e:	9d07      	ldr	r5, [sp, #28]
  405940:	f7ff bba4 	b.w	40508c <_dtoa_r+0x4a4>
  405944:	9c03      	ldr	r4, [sp, #12]
  405946:	f7ff bb52 	b.w	404fee <_dtoa_r+0x406>
  40594a:	9b07      	ldr	r3, [sp, #28]
  40594c:	9a04      	ldr	r2, [sp, #16]
  40594e:	1a9d      	subs	r5, r3, r2
  405950:	2300      	movs	r3, #0
  405952:	f7ff bb9b 	b.w	40508c <_dtoa_r+0x4a4>
  405956:	2b00      	cmp	r3, #0
  405958:	9706      	str	r7, [sp, #24]
  40595a:	46e1      	mov	r9, ip
  40595c:	f8cd b020 	str.w	fp, [sp, #32]
  405960:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  405962:	4665      	mov	r5, ip
  405964:	dd0f      	ble.n	405986 <_dtoa_r+0xd9e>
  405966:	9906      	ldr	r1, [sp, #24]
  405968:	2201      	movs	r2, #1
  40596a:	4620      	mov	r0, r4
  40596c:	f001 fb24 	bl	406fb8 <__lshift>
  405970:	4639      	mov	r1, r7
  405972:	9006      	str	r0, [sp, #24]
  405974:	f001 fb7a 	bl	40706c <__mcmp>
  405978:	2800      	cmp	r0, #0
  40597a:	dd75      	ble.n	405a68 <_dtoa_r+0xe80>
  40597c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
  405980:	d066      	beq.n	405a50 <_dtoa_r+0xe68>
  405982:	f109 0501 	add.w	r5, r9, #1
  405986:	f8dd a020 	ldr.w	sl, [sp, #32]
  40598a:	f888 5000 	strb.w	r5, [r8]
  40598e:	f108 0501 	add.w	r5, r8, #1
  405992:	9608      	str	r6, [sp, #32]
  405994:	e5c3      	b.n	40551e <_dtoa_r+0x936>
  405996:	9c12      	ldr	r4, [sp, #72]	; 0x48
  405998:	e531      	b.n	4053fe <_dtoa_r+0x816>
  40599a:	d104      	bne.n	4059a6 <_dtoa_r+0xdbe>
  40599c:	f019 0f01 	tst.w	r9, #1
  4059a0:	d001      	beq.n	4059a6 <_dtoa_r+0xdbe>
  4059a2:	e5ac      	b.n	4054fe <_dtoa_r+0x916>
  4059a4:	4615      	mov	r5, r2
  4059a6:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  4059aa:	1e6a      	subs	r2, r5, #1
  4059ac:	2b30      	cmp	r3, #48	; 0x30
  4059ae:	d0f9      	beq.n	4059a4 <_dtoa_r+0xdbc>
  4059b0:	e5b5      	b.n	40551e <_dtoa_r+0x936>
  4059b2:	2700      	movs	r7, #0
  4059b4:	9708      	str	r7, [sp, #32]
  4059b6:	f7ff ba4c 	b.w	404e52 <_dtoa_r+0x26a>
  4059ba:	9e08      	ldr	r6, [sp, #32]
  4059bc:	4620      	mov	r0, r4
  4059be:	6871      	ldr	r1, [r6, #4]
  4059c0:	f001 f936 	bl	406c30 <_Balloc>
  4059c4:	6933      	ldr	r3, [r6, #16]
  4059c6:	4605      	mov	r5, r0
  4059c8:	f106 010c 	add.w	r1, r6, #12
  4059cc:	1c9a      	adds	r2, r3, #2
  4059ce:	300c      	adds	r0, #12
  4059d0:	0092      	lsls	r2, r2, #2
  4059d2:	f001 f82d 	bl	406a30 <memcpy>
  4059d6:	4620      	mov	r0, r4
  4059d8:	4629      	mov	r1, r5
  4059da:	2201      	movs	r2, #1
  4059dc:	f001 faec 	bl	406fb8 <__lshift>
  4059e0:	4606      	mov	r6, r0
  4059e2:	e6b8      	b.n	405756 <_dtoa_r+0xb6e>
  4059e4:	9b16      	ldr	r3, [sp, #88]	; 0x58
  4059e6:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  4059e8:	9d07      	ldr	r5, [sp, #28]
  4059ea:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
  4059ee:	f7ff bb4d 	b.w	40508c <_dtoa_r+0x4a4>
  4059f2:	f1bc 0f39 	cmp.w	ip, #57	; 0x39
  4059f6:	9706      	str	r7, [sp, #24]
  4059f8:	f8cd b020 	str.w	fp, [sp, #32]
  4059fc:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  4059fe:	d030      	beq.n	405a62 <_dtoa_r+0xe7a>
  405a00:	f10c 0901 	add.w	r9, ip, #1
  405a04:	f8dd a020 	ldr.w	sl, [sp, #32]
  405a08:	f108 0501 	add.w	r5, r8, #1
  405a0c:	9608      	str	r6, [sp, #32]
  405a0e:	f888 9000 	strb.w	r9, [r8]
  405a12:	e584      	b.n	40551e <_dtoa_r+0x936>
  405a14:	9706      	str	r7, [sp, #24]
  405a16:	46e1      	mov	r9, ip
  405a18:	46da      	mov	sl, fp
  405a1a:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  405a1c:	9608      	str	r6, [sp, #32]
  405a1e:	e562      	b.n	4054e6 <_dtoa_r+0x8fe>
  405a20:	46b0      	mov	r8, r6
  405a22:	e504      	b.n	40542e <_dtoa_r+0x846>
  405a24:	f1bc 0f39 	cmp.w	ip, #57	; 0x39
  405a28:	9706      	str	r7, [sp, #24]
  405a2a:	f8cd b020 	str.w	fp, [sp, #32]
  405a2e:	4655      	mov	r5, sl
  405a30:	46cb      	mov	fp, r9
  405a32:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  405a34:	46e1      	mov	r9, ip
  405a36:	d00b      	beq.n	405a50 <_dtoa_r+0xe68>
  405a38:	2d00      	cmp	r5, #0
  405a3a:	dd01      	ble.n	405a40 <_dtoa_r+0xe58>
  405a3c:	f10b 0931 	add.w	r9, fp, #49	; 0x31
  405a40:	f8dd a020 	ldr.w	sl, [sp, #32]
  405a44:	f108 0501 	add.w	r5, r8, #1
  405a48:	f888 9000 	strb.w	r9, [r8]
  405a4c:	9608      	str	r6, [sp, #32]
  405a4e:	e566      	b.n	40551e <_dtoa_r+0x936>
  405a50:	f8dd a020 	ldr.w	sl, [sp, #32]
  405a54:	9608      	str	r6, [sp, #32]
  405a56:	2239      	movs	r2, #57	; 0x39
  405a58:	f108 0501 	add.w	r5, r8, #1
  405a5c:	f888 2000 	strb.w	r2, [r8]
  405a60:	e54f      	b.n	405502 <_dtoa_r+0x91a>
  405a62:	46da      	mov	sl, fp
  405a64:	9608      	str	r6, [sp, #32]
  405a66:	e7f6      	b.n	405a56 <_dtoa_r+0xe6e>
  405a68:	d18d      	bne.n	405986 <_dtoa_r+0xd9e>
  405a6a:	f019 0f01 	tst.w	r9, #1
  405a6e:	d08a      	beq.n	405986 <_dtoa_r+0xd9e>
  405a70:	e784      	b.n	40597c <_dtoa_r+0xd94>
  405a72:	f04f 0802 	mov.w	r8, #2
  405a76:	f7ff bb72 	b.w	40515e <_dtoa_r+0x576>
  405a7a:	9b10      	ldr	r3, [sp, #64]	; 0x40
  405a7c:	9304      	str	r3, [sp, #16]
  405a7e:	e50e      	b.n	40549e <_dtoa_r+0x8b6>
  405a80:	f43f aa75 	beq.w	404f6e <_dtoa_r+0x386>
  405a84:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
  405a88:	f7ff ba6a 	b.w	404f60 <_dtoa_r+0x378>
  405a8c:	2501      	movs	r5, #1
  405a8e:	f7ff b982 	b.w	404d96 <_dtoa_r+0x1ae>
  405a92:	2500      	movs	r5, #0
  405a94:	4620      	mov	r0, r4
  405a96:	6465      	str	r5, [r4, #68]	; 0x44
  405a98:	4629      	mov	r1, r5
  405a9a:	f001 f8c9 	bl	406c30 <_Balloc>
  405a9e:	9a02      	ldr	r2, [sp, #8]
  405aa0:	9005      	str	r0, [sp, #20]
  405aa2:	2a0e      	cmp	r2, #14
  405aa4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  405aa6:	6420      	str	r0, [r4, #64]	; 0x40
  405aa8:	f73f aad7 	bgt.w	40505a <_dtoa_r+0x472>
  405aac:	42ab      	cmp	r3, r5
  405aae:	f6ff aad4 	blt.w	40505a <_dtoa_r+0x472>
  405ab2:	f04f 33ff 	mov.w	r3, #4294967295
  405ab6:	9523      	str	r5, [sp, #140]	; 0x8c
  405ab8:	9304      	str	r3, [sp, #16]
  405aba:	f7ff b9a9 	b.w	404e10 <_dtoa_r+0x228>
  405abe:	2301      	movs	r3, #1
  405ac0:	930b      	str	r3, [sp, #44]	; 0x2c
  405ac2:	f7ff bbfa 	b.w	4052ba <_dtoa_r+0x6d2>
  405ac6:	bf00      	nop
  405ac8:	40240000 	.word	0x40240000
  405acc:	401c0000 	.word	0x401c0000

00405ad0 <__sflush_r>:
  405ad0:	898b      	ldrh	r3, [r1, #12]
  405ad2:	b29a      	uxth	r2, r3
  405ad4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  405ad8:	460d      	mov	r5, r1
  405ada:	0711      	lsls	r1, r2, #28
  405adc:	4680      	mov	r8, r0
  405ade:	d43c      	bmi.n	405b5a <__sflush_r+0x8a>
  405ae0:	686a      	ldr	r2, [r5, #4]
  405ae2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  405ae6:	2a00      	cmp	r2, #0
  405ae8:	81ab      	strh	r3, [r5, #12]
  405aea:	dd76      	ble.n	405bda <__sflush_r+0x10a>
  405aec:	6aae      	ldr	r6, [r5, #40]	; 0x28
  405aee:	2e00      	cmp	r6, #0
  405af0:	d04b      	beq.n	405b8a <__sflush_r+0xba>
  405af2:	b29b      	uxth	r3, r3
  405af4:	2100      	movs	r1, #0
  405af6:	f8d8 4000 	ldr.w	r4, [r8]
  405afa:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
  405afe:	f8c8 1000 	str.w	r1, [r8]
  405b02:	b292      	uxth	r2, r2
  405b04:	2a00      	cmp	r2, #0
  405b06:	d06c      	beq.n	405be2 <__sflush_r+0x112>
  405b08:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  405b0a:	075f      	lsls	r7, r3, #29
  405b0c:	d505      	bpl.n	405b1a <__sflush_r+0x4a>
  405b0e:	6869      	ldr	r1, [r5, #4]
  405b10:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  405b12:	1a52      	subs	r2, r2, r1
  405b14:	b10b      	cbz	r3, 405b1a <__sflush_r+0x4a>
  405b16:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  405b18:	1ad2      	subs	r2, r2, r3
  405b1a:	4640      	mov	r0, r8
  405b1c:	69e9      	ldr	r1, [r5, #28]
  405b1e:	2300      	movs	r3, #0
  405b20:	47b0      	blx	r6
  405b22:	1c46      	adds	r6, r0, #1
  405b24:	d03e      	beq.n	405ba4 <__sflush_r+0xd4>
  405b26:	89ab      	ldrh	r3, [r5, #12]
  405b28:	2100      	movs	r1, #0
  405b2a:	692a      	ldr	r2, [r5, #16]
  405b2c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  405b30:	6069      	str	r1, [r5, #4]
  405b32:	602a      	str	r2, [r5, #0]
  405b34:	b29b      	uxth	r3, r3
  405b36:	04da      	lsls	r2, r3, #19
  405b38:	81ab      	strh	r3, [r5, #12]
  405b3a:	d44c      	bmi.n	405bd6 <__sflush_r+0x106>
  405b3c:	6b29      	ldr	r1, [r5, #48]	; 0x30
  405b3e:	f8c8 4000 	str.w	r4, [r8]
  405b42:	b311      	cbz	r1, 405b8a <__sflush_r+0xba>
  405b44:	f105 0340 	add.w	r3, r5, #64	; 0x40
  405b48:	4299      	cmp	r1, r3
  405b4a:	d002      	beq.n	405b52 <__sflush_r+0x82>
  405b4c:	4640      	mov	r0, r8
  405b4e:	f000 f96b 	bl	405e28 <_free_r>
  405b52:	2000      	movs	r0, #0
  405b54:	6328      	str	r0, [r5, #48]	; 0x30
  405b56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405b5a:	692e      	ldr	r6, [r5, #16]
  405b5c:	b1ae      	cbz	r6, 405b8a <__sflush_r+0xba>
  405b5e:	682c      	ldr	r4, [r5, #0]
  405b60:	0791      	lsls	r1, r2, #30
  405b62:	602e      	str	r6, [r5, #0]
  405b64:	eba4 0406 	sub.w	r4, r4, r6
  405b68:	d11a      	bne.n	405ba0 <__sflush_r+0xd0>
  405b6a:	696b      	ldr	r3, [r5, #20]
  405b6c:	60ab      	str	r3, [r5, #8]
  405b6e:	e00a      	b.n	405b86 <__sflush_r+0xb6>
  405b70:	4632      	mov	r2, r6
  405b72:	4623      	mov	r3, r4
  405b74:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  405b76:	4640      	mov	r0, r8
  405b78:	69e9      	ldr	r1, [r5, #28]
  405b7a:	47b8      	blx	r7
  405b7c:	2800      	cmp	r0, #0
  405b7e:	eba4 0400 	sub.w	r4, r4, r0
  405b82:	4406      	add	r6, r0
  405b84:	dd04      	ble.n	405b90 <__sflush_r+0xc0>
  405b86:	2c00      	cmp	r4, #0
  405b88:	dcf2      	bgt.n	405b70 <__sflush_r+0xa0>
  405b8a:	2000      	movs	r0, #0
  405b8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405b90:	89ab      	ldrh	r3, [r5, #12]
  405b92:	f04f 30ff 	mov.w	r0, #4294967295
  405b96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  405b9a:	81ab      	strh	r3, [r5, #12]
  405b9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405ba0:	2300      	movs	r3, #0
  405ba2:	e7e3      	b.n	405b6c <__sflush_r+0x9c>
  405ba4:	f8d8 3000 	ldr.w	r3, [r8]
  405ba8:	fab3 f283 	clz	r2, r3
  405bac:	2b00      	cmp	r3, #0
  405bae:	bf18      	it	ne
  405bb0:	2b1d      	cmpne	r3, #29
  405bb2:	ea4f 1252 	mov.w	r2, r2, lsr #5
  405bb6:	d001      	beq.n	405bbc <__sflush_r+0xec>
  405bb8:	2b16      	cmp	r3, #22
  405bba:	d127      	bne.n	405c0c <__sflush_r+0x13c>
  405bbc:	89ab      	ldrh	r3, [r5, #12]
  405bbe:	2600      	movs	r6, #0
  405bc0:	6929      	ldr	r1, [r5, #16]
  405bc2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  405bc6:	b29b      	uxth	r3, r3
  405bc8:	81ab      	strh	r3, [r5, #12]
  405bca:	04db      	lsls	r3, r3, #19
  405bcc:	e885 0042 	stmia.w	r5, {r1, r6}
  405bd0:	d5b4      	bpl.n	405b3c <__sflush_r+0x6c>
  405bd2:	2a00      	cmp	r2, #0
  405bd4:	d0b2      	beq.n	405b3c <__sflush_r+0x6c>
  405bd6:	6528      	str	r0, [r5, #80]	; 0x50
  405bd8:	e7b0      	b.n	405b3c <__sflush_r+0x6c>
  405bda:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  405bdc:	2a00      	cmp	r2, #0
  405bde:	dc85      	bgt.n	405aec <__sflush_r+0x1c>
  405be0:	e7d3      	b.n	405b8a <__sflush_r+0xba>
  405be2:	2301      	movs	r3, #1
  405be4:	4640      	mov	r0, r8
  405be6:	69e9      	ldr	r1, [r5, #28]
  405be8:	47b0      	blx	r6
  405bea:	1c43      	adds	r3, r0, #1
  405bec:	4602      	mov	r2, r0
  405bee:	d002      	beq.n	405bf6 <__sflush_r+0x126>
  405bf0:	89ab      	ldrh	r3, [r5, #12]
  405bf2:	6aae      	ldr	r6, [r5, #40]	; 0x28
  405bf4:	e789      	b.n	405b0a <__sflush_r+0x3a>
  405bf6:	f8d8 3000 	ldr.w	r3, [r8]
  405bfa:	2b00      	cmp	r3, #0
  405bfc:	d0f8      	beq.n	405bf0 <__sflush_r+0x120>
  405bfe:	2b16      	cmp	r3, #22
  405c00:	d001      	beq.n	405c06 <__sflush_r+0x136>
  405c02:	2b1d      	cmp	r3, #29
  405c04:	d1c4      	bne.n	405b90 <__sflush_r+0xc0>
  405c06:	f8c8 4000 	str.w	r4, [r8]
  405c0a:	e7be      	b.n	405b8a <__sflush_r+0xba>
  405c0c:	89ab      	ldrh	r3, [r5, #12]
  405c0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  405c12:	81ab      	strh	r3, [r5, #12]
  405c14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00405c18 <_fflush_r>:
  405c18:	b510      	push	{r4, lr}
  405c1a:	4604      	mov	r4, r0
  405c1c:	b082      	sub	sp, #8
  405c1e:	b108      	cbz	r0, 405c24 <_fflush_r+0xc>
  405c20:	6b83      	ldr	r3, [r0, #56]	; 0x38
  405c22:	b153      	cbz	r3, 405c3a <_fflush_r+0x22>
  405c24:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
  405c28:	b908      	cbnz	r0, 405c2e <_fflush_r+0x16>
  405c2a:	b002      	add	sp, #8
  405c2c:	bd10      	pop	{r4, pc}
  405c2e:	4620      	mov	r0, r4
  405c30:	b002      	add	sp, #8
  405c32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  405c36:	f7ff bf4b 	b.w	405ad0 <__sflush_r>
  405c3a:	9101      	str	r1, [sp, #4]
  405c3c:	f000 f886 	bl	405d4c <__sinit>
  405c40:	9901      	ldr	r1, [sp, #4]
  405c42:	e7ef      	b.n	405c24 <_fflush_r+0xc>

00405c44 <_cleanup_r>:
  405c44:	4901      	ldr	r1, [pc, #4]	; (405c4c <_cleanup_r+0x8>)
  405c46:	f000 bb59 	b.w	4062fc <_fwalk_reent>
  405c4a:	bf00      	nop
  405c4c:	0040798d 	.word	0x0040798d

00405c50 <__sinit.part.1>:
  405c50:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405c54:	4682      	mov	sl, r0
  405c56:	2400      	movs	r4, #0
  405c58:	4837      	ldr	r0, [pc, #220]	; (405d38 <__sinit.part.1+0xe8>)
  405c5a:	2103      	movs	r1, #3
  405c5c:	f8da 5004 	ldr.w	r5, [sl, #4]
  405c60:	f50a 723b 	add.w	r2, sl, #748	; 0x2ec
  405c64:	2604      	movs	r6, #4
  405c66:	f8ca 003c 	str.w	r0, [sl, #60]	; 0x3c
  405c6a:	f8ca 12e4 	str.w	r1, [sl, #740]	; 0x2e4
  405c6e:	f105 005c 	add.w	r0, r5, #92	; 0x5c
  405c72:	f8ca 22e8 	str.w	r2, [sl, #744]	; 0x2e8
  405c76:	4621      	mov	r1, r4
  405c78:	f8ca 42e0 	str.w	r4, [sl, #736]	; 0x2e0
  405c7c:	2208      	movs	r2, #8
  405c7e:	81ae      	strh	r6, [r5, #12]
  405c80:	602c      	str	r4, [r5, #0]
  405c82:	606c      	str	r4, [r5, #4]
  405c84:	60ac      	str	r4, [r5, #8]
  405c86:	666c      	str	r4, [r5, #100]	; 0x64
  405c88:	81ec      	strh	r4, [r5, #14]
  405c8a:	612c      	str	r4, [r5, #16]
  405c8c:	616c      	str	r4, [r5, #20]
  405c8e:	61ac      	str	r4, [r5, #24]
  405c90:	f7fd fa5a 	bl	403148 <memset>
  405c94:	f8df b0a8 	ldr.w	fp, [pc, #168]	; 405d40 <__sinit.part.1+0xf0>
  405c98:	f8da 6008 	ldr.w	r6, [sl, #8]
  405c9c:	f04f 0301 	mov.w	r3, #1
  405ca0:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 405d44 <__sinit.part.1+0xf4>
  405ca4:	f04f 0e09 	mov.w	lr, #9
  405ca8:	f8df 809c 	ldr.w	r8, [pc, #156]	; 405d48 <__sinit.part.1+0xf8>
  405cac:	4621      	mov	r1, r4
  405cae:	4f23      	ldr	r7, [pc, #140]	; (405d3c <__sinit.part.1+0xec>)
  405cb0:	2208      	movs	r2, #8
  405cb2:	61ed      	str	r5, [r5, #28]
  405cb4:	f106 005c 	add.w	r0, r6, #92	; 0x5c
  405cb8:	f8c5 b020 	str.w	fp, [r5, #32]
  405cbc:	f8c5 9024 	str.w	r9, [r5, #36]	; 0x24
  405cc0:	f8c5 8028 	str.w	r8, [r5, #40]	; 0x28
  405cc4:	62ef      	str	r7, [r5, #44]	; 0x2c
  405cc6:	81f3      	strh	r3, [r6, #14]
  405cc8:	f8a6 e00c 	strh.w	lr, [r6, #12]
  405ccc:	6034      	str	r4, [r6, #0]
  405cce:	6074      	str	r4, [r6, #4]
  405cd0:	60b4      	str	r4, [r6, #8]
  405cd2:	6674      	str	r4, [r6, #100]	; 0x64
  405cd4:	6134      	str	r4, [r6, #16]
  405cd6:	6174      	str	r4, [r6, #20]
  405cd8:	61b4      	str	r4, [r6, #24]
  405cda:	f7fd fa35 	bl	403148 <memset>
  405cde:	f8da 500c 	ldr.w	r5, [sl, #12]
  405ce2:	f04f 0c12 	mov.w	ip, #18
  405ce6:	f04f 0e02 	mov.w	lr, #2
  405cea:	61f6      	str	r6, [r6, #28]
  405cec:	4621      	mov	r1, r4
  405cee:	f8c6 b020 	str.w	fp, [r6, #32]
  405cf2:	f105 005c 	add.w	r0, r5, #92	; 0x5c
  405cf6:	f8c6 9024 	str.w	r9, [r6, #36]	; 0x24
  405cfa:	2208      	movs	r2, #8
  405cfc:	f8c6 8028 	str.w	r8, [r6, #40]	; 0x28
  405d00:	62f7      	str	r7, [r6, #44]	; 0x2c
  405d02:	602c      	str	r4, [r5, #0]
  405d04:	606c      	str	r4, [r5, #4]
  405d06:	60ac      	str	r4, [r5, #8]
  405d08:	666c      	str	r4, [r5, #100]	; 0x64
  405d0a:	612c      	str	r4, [r5, #16]
  405d0c:	616c      	str	r4, [r5, #20]
  405d0e:	61ac      	str	r4, [r5, #24]
  405d10:	f8a5 c00c 	strh.w	ip, [r5, #12]
  405d14:	f8a5 e00e 	strh.w	lr, [r5, #14]
  405d18:	f7fd fa16 	bl	403148 <memset>
  405d1c:	2301      	movs	r3, #1
  405d1e:	61ed      	str	r5, [r5, #28]
  405d20:	f8c5 b020 	str.w	fp, [r5, #32]
  405d24:	f8c5 9024 	str.w	r9, [r5, #36]	; 0x24
  405d28:	f8c5 8028 	str.w	r8, [r5, #40]	; 0x28
  405d2c:	62ef      	str	r7, [r5, #44]	; 0x2c
  405d2e:	f8ca 3038 	str.w	r3, [sl, #56]	; 0x38
  405d32:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405d36:	bf00      	nop
  405d38:	00405c45 	.word	0x00405c45
  405d3c:	00407721 	.word	0x00407721
  405d40:	004076a1 	.word	0x004076a1
  405d44:	004076c5 	.word	0x004076c5
  405d48:	004076fd 	.word	0x004076fd

00405d4c <__sinit>:
  405d4c:	6b83      	ldr	r3, [r0, #56]	; 0x38
  405d4e:	b103      	cbz	r3, 405d52 <__sinit+0x6>
  405d50:	4770      	bx	lr
  405d52:	f7ff bf7d 	b.w	405c50 <__sinit.part.1>
  405d56:	bf00      	nop

00405d58 <__sfp_lock_acquire>:
  405d58:	4770      	bx	lr
  405d5a:	bf00      	nop

00405d5c <__sfp_lock_release>:
  405d5c:	4770      	bx	lr
  405d5e:	bf00      	nop

00405d60 <__libc_fini_array>:
  405d60:	b538      	push	{r3, r4, r5, lr}
  405d62:	4b08      	ldr	r3, [pc, #32]	; (405d84 <__libc_fini_array+0x24>)
  405d64:	4d08      	ldr	r5, [pc, #32]	; (405d88 <__libc_fini_array+0x28>)
  405d66:	1aed      	subs	r5, r5, r3
  405d68:	10ac      	asrs	r4, r5, #2
  405d6a:	bf18      	it	ne
  405d6c:	18ed      	addne	r5, r5, r3
  405d6e:	d005      	beq.n	405d7c <__libc_fini_array+0x1c>
  405d70:	3c01      	subs	r4, #1
  405d72:	f855 3d04 	ldr.w	r3, [r5, #-4]!
  405d76:	4798      	blx	r3
  405d78:	2c00      	cmp	r4, #0
  405d7a:	d1f9      	bne.n	405d70 <__libc_fini_array+0x10>
  405d7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  405d80:	f002 bfa4 	b.w	408ccc <_fini>
  405d84:	00408cd8 	.word	0x00408cd8
  405d88:	00408cdc 	.word	0x00408cdc

00405d8c <_malloc_trim_r>:
  405d8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  405d8e:	4f22      	ldr	r7, [pc, #136]	; (405e18 <_malloc_trim_r+0x8c>)
  405d90:	460c      	mov	r4, r1
  405d92:	4606      	mov	r6, r0
  405d94:	f000 ff48 	bl	406c28 <__malloc_lock>
  405d98:	68ba      	ldr	r2, [r7, #8]
  405d9a:	4b20      	ldr	r3, [pc, #128]	; (405e1c <_malloc_trim_r+0x90>)
  405d9c:	6855      	ldr	r5, [r2, #4]
  405d9e:	f025 0503 	bic.w	r5, r5, #3
  405da2:	1b2c      	subs	r4, r5, r4
  405da4:	f604 74ef 	addw	r4, r4, #4079	; 0xfef
  405da8:	4023      	ands	r3, r4
  405daa:	f5a3 5480 	sub.w	r4, r3, #4096	; 0x1000
  405dae:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  405db2:	db07      	blt.n	405dc4 <_malloc_trim_r+0x38>
  405db4:	4630      	mov	r0, r6
  405db6:	2100      	movs	r1, #0
  405db8:	f001 fc60 	bl	40767c <_sbrk_r>
  405dbc:	68bb      	ldr	r3, [r7, #8]
  405dbe:	442b      	add	r3, r5
  405dc0:	4298      	cmp	r0, r3
  405dc2:	d004      	beq.n	405dce <_malloc_trim_r+0x42>
  405dc4:	4630      	mov	r0, r6
  405dc6:	f000 ff31 	bl	406c2c <__malloc_unlock>
  405dca:	2000      	movs	r0, #0
  405dcc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  405dce:	4630      	mov	r0, r6
  405dd0:	4261      	negs	r1, r4
  405dd2:	f001 fc53 	bl	40767c <_sbrk_r>
  405dd6:	3001      	adds	r0, #1
  405dd8:	d00d      	beq.n	405df6 <_malloc_trim_r+0x6a>
  405dda:	4a11      	ldr	r2, [pc, #68]	; (405e20 <_malloc_trim_r+0x94>)
  405ddc:	1b2d      	subs	r5, r5, r4
  405dde:	68b9      	ldr	r1, [r7, #8]
  405de0:	4630      	mov	r0, r6
  405de2:	6813      	ldr	r3, [r2, #0]
  405de4:	f045 0501 	orr.w	r5, r5, #1
  405de8:	1b1b      	subs	r3, r3, r4
  405dea:	604d      	str	r5, [r1, #4]
  405dec:	6013      	str	r3, [r2, #0]
  405dee:	f000 ff1d 	bl	406c2c <__malloc_unlock>
  405df2:	2001      	movs	r0, #1
  405df4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  405df6:	4630      	mov	r0, r6
  405df8:	2100      	movs	r1, #0
  405dfa:	f001 fc3f 	bl	40767c <_sbrk_r>
  405dfe:	68ba      	ldr	r2, [r7, #8]
  405e00:	1a83      	subs	r3, r0, r2
  405e02:	2b0f      	cmp	r3, #15
  405e04:	ddde      	ble.n	405dc4 <_malloc_trim_r+0x38>
  405e06:	4c07      	ldr	r4, [pc, #28]	; (405e24 <_malloc_trim_r+0x98>)
  405e08:	f043 0301 	orr.w	r3, r3, #1
  405e0c:	4904      	ldr	r1, [pc, #16]	; (405e20 <_malloc_trim_r+0x94>)
  405e0e:	6824      	ldr	r4, [r4, #0]
  405e10:	6053      	str	r3, [r2, #4]
  405e12:	1b00      	subs	r0, r0, r4
  405e14:	6008      	str	r0, [r1, #0]
  405e16:	e7d5      	b.n	405dc4 <_malloc_trim_r+0x38>
  405e18:	204004e4 	.word	0x204004e4
  405e1c:	fffff000 	.word	0xfffff000
  405e20:	204009a0 	.word	0x204009a0
  405e24:	204008f0 	.word	0x204008f0

00405e28 <_free_r>:
  405e28:	2900      	cmp	r1, #0
  405e2a:	d04d      	beq.n	405ec8 <_free_r+0xa0>
  405e2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  405e30:	460c      	mov	r4, r1
  405e32:	4680      	mov	r8, r0
  405e34:	f000 fef8 	bl	406c28 <__malloc_lock>
  405e38:	4963      	ldr	r1, [pc, #396]	; (405fc8 <_free_r+0x1a0>)
  405e3a:	f854 7c04 	ldr.w	r7, [r4, #-4]
  405e3e:	f1a4 0508 	sub.w	r5, r4, #8
  405e42:	688e      	ldr	r6, [r1, #8]
  405e44:	f027 0301 	bic.w	r3, r7, #1
  405e48:	18ea      	adds	r2, r5, r3
  405e4a:	6850      	ldr	r0, [r2, #4]
  405e4c:	4296      	cmp	r6, r2
  405e4e:	f020 0003 	bic.w	r0, r0, #3
  405e52:	d059      	beq.n	405f08 <_free_r+0xe0>
  405e54:	07fe      	lsls	r6, r7, #31
  405e56:	6050      	str	r0, [r2, #4]
  405e58:	d40b      	bmi.n	405e72 <_free_r+0x4a>
  405e5a:	f854 4c08 	ldr.w	r4, [r4, #-8]
  405e5e:	f101 0708 	add.w	r7, r1, #8
  405e62:	1b2d      	subs	r5, r5, r4
  405e64:	4423      	add	r3, r4
  405e66:	68ac      	ldr	r4, [r5, #8]
  405e68:	42bc      	cmp	r4, r7
  405e6a:	d066      	beq.n	405f3a <_free_r+0x112>
  405e6c:	68ef      	ldr	r7, [r5, #12]
  405e6e:	60e7      	str	r7, [r4, #12]
  405e70:	60bc      	str	r4, [r7, #8]
  405e72:	1814      	adds	r4, r2, r0
  405e74:	6864      	ldr	r4, [r4, #4]
  405e76:	07e4      	lsls	r4, r4, #31
  405e78:	d40c      	bmi.n	405e94 <_free_r+0x6c>
  405e7a:	4c54      	ldr	r4, [pc, #336]	; (405fcc <_free_r+0x1a4>)
  405e7c:	4403      	add	r3, r0
  405e7e:	6890      	ldr	r0, [r2, #8]
  405e80:	42a0      	cmp	r0, r4
  405e82:	d07c      	beq.n	405f7e <_free_r+0x156>
  405e84:	68d4      	ldr	r4, [r2, #12]
  405e86:	f043 0201 	orr.w	r2, r3, #1
  405e8a:	60c4      	str	r4, [r0, #12]
  405e8c:	60a0      	str	r0, [r4, #8]
  405e8e:	606a      	str	r2, [r5, #4]
  405e90:	50eb      	str	r3, [r5, r3]
  405e92:	e003      	b.n	405e9c <_free_r+0x74>
  405e94:	f043 0201 	orr.w	r2, r3, #1
  405e98:	606a      	str	r2, [r5, #4]
  405e9a:	50eb      	str	r3, [r5, r3]
  405e9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  405ea0:	d213      	bcs.n	405eca <_free_r+0xa2>
  405ea2:	08db      	lsrs	r3, r3, #3
  405ea4:	2001      	movs	r0, #1
  405ea6:	684a      	ldr	r2, [r1, #4]
  405ea8:	109c      	asrs	r4, r3, #2
  405eaa:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
  405eae:	40a0      	lsls	r0, r4
  405eb0:	689c      	ldr	r4, [r3, #8]
  405eb2:	4302      	orrs	r2, r0
  405eb4:	60eb      	str	r3, [r5, #12]
  405eb6:	60ac      	str	r4, [r5, #8]
  405eb8:	604a      	str	r2, [r1, #4]
  405eba:	609d      	str	r5, [r3, #8]
  405ebc:	60e5      	str	r5, [r4, #12]
  405ebe:	4640      	mov	r0, r8
  405ec0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  405ec4:	f000 beb2 	b.w	406c2c <__malloc_unlock>
  405ec8:	4770      	bx	lr
  405eca:	0a5a      	lsrs	r2, r3, #9
  405ecc:	2a04      	cmp	r2, #4
  405ece:	d847      	bhi.n	405f60 <_free_r+0x138>
  405ed0:	099a      	lsrs	r2, r3, #6
  405ed2:	f102 0438 	add.w	r4, r2, #56	; 0x38
  405ed6:	0060      	lsls	r0, r4, #1
  405ed8:	eb01 0080 	add.w	r0, r1, r0, lsl #2
  405edc:	493a      	ldr	r1, [pc, #232]	; (405fc8 <_free_r+0x1a0>)
  405ede:	6882      	ldr	r2, [r0, #8]
  405ee0:	4282      	cmp	r2, r0
  405ee2:	d043      	beq.n	405f6c <_free_r+0x144>
  405ee4:	6851      	ldr	r1, [r2, #4]
  405ee6:	f021 0103 	bic.w	r1, r1, #3
  405eea:	4299      	cmp	r1, r3
  405eec:	d902      	bls.n	405ef4 <_free_r+0xcc>
  405eee:	6892      	ldr	r2, [r2, #8]
  405ef0:	4290      	cmp	r0, r2
  405ef2:	d1f7      	bne.n	405ee4 <_free_r+0xbc>
  405ef4:	68d3      	ldr	r3, [r2, #12]
  405ef6:	60eb      	str	r3, [r5, #12]
  405ef8:	4640      	mov	r0, r8
  405efa:	60aa      	str	r2, [r5, #8]
  405efc:	609d      	str	r5, [r3, #8]
  405efe:	60d5      	str	r5, [r2, #12]
  405f00:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  405f04:	f000 be92 	b.w	406c2c <__malloc_unlock>
  405f08:	07ff      	lsls	r7, r7, #31
  405f0a:	4403      	add	r3, r0
  405f0c:	d407      	bmi.n	405f1e <_free_r+0xf6>
  405f0e:	f854 2c08 	ldr.w	r2, [r4, #-8]
  405f12:	1aad      	subs	r5, r5, r2
  405f14:	4413      	add	r3, r2
  405f16:	68a8      	ldr	r0, [r5, #8]
  405f18:	68ea      	ldr	r2, [r5, #12]
  405f1a:	60c2      	str	r2, [r0, #12]
  405f1c:	6090      	str	r0, [r2, #8]
  405f1e:	4a2c      	ldr	r2, [pc, #176]	; (405fd0 <_free_r+0x1a8>)
  405f20:	f043 0001 	orr.w	r0, r3, #1
  405f24:	6812      	ldr	r2, [r2, #0]
  405f26:	6068      	str	r0, [r5, #4]
  405f28:	4293      	cmp	r3, r2
  405f2a:	608d      	str	r5, [r1, #8]
  405f2c:	d3c7      	bcc.n	405ebe <_free_r+0x96>
  405f2e:	4b29      	ldr	r3, [pc, #164]	; (405fd4 <_free_r+0x1ac>)
  405f30:	4640      	mov	r0, r8
  405f32:	6819      	ldr	r1, [r3, #0]
  405f34:	f7ff ff2a 	bl	405d8c <_malloc_trim_r>
  405f38:	e7c1      	b.n	405ebe <_free_r+0x96>
  405f3a:	1811      	adds	r1, r2, r0
  405f3c:	6849      	ldr	r1, [r1, #4]
  405f3e:	07c9      	lsls	r1, r1, #31
  405f40:	d409      	bmi.n	405f56 <_free_r+0x12e>
  405f42:	4403      	add	r3, r0
  405f44:	68d1      	ldr	r1, [r2, #12]
  405f46:	6892      	ldr	r2, [r2, #8]
  405f48:	f043 0001 	orr.w	r0, r3, #1
  405f4c:	60d1      	str	r1, [r2, #12]
  405f4e:	608a      	str	r2, [r1, #8]
  405f50:	6068      	str	r0, [r5, #4]
  405f52:	50eb      	str	r3, [r5, r3]
  405f54:	e7b3      	b.n	405ebe <_free_r+0x96>
  405f56:	f043 0201 	orr.w	r2, r3, #1
  405f5a:	606a      	str	r2, [r5, #4]
  405f5c:	50eb      	str	r3, [r5, r3]
  405f5e:	e7ae      	b.n	405ebe <_free_r+0x96>
  405f60:	2a14      	cmp	r2, #20
  405f62:	d815      	bhi.n	405f90 <_free_r+0x168>
  405f64:	f102 045b 	add.w	r4, r2, #91	; 0x5b
  405f68:	0060      	lsls	r0, r4, #1
  405f6a:	e7b5      	b.n	405ed8 <_free_r+0xb0>
  405f6c:	10a4      	asrs	r4, r4, #2
  405f6e:	2701      	movs	r7, #1
  405f70:	6848      	ldr	r0, [r1, #4]
  405f72:	4613      	mov	r3, r2
  405f74:	fa07 f404 	lsl.w	r4, r7, r4
  405f78:	4320      	orrs	r0, r4
  405f7a:	6048      	str	r0, [r1, #4]
  405f7c:	e7bb      	b.n	405ef6 <_free_r+0xce>
  405f7e:	f043 0201 	orr.w	r2, r3, #1
  405f82:	614d      	str	r5, [r1, #20]
  405f84:	610d      	str	r5, [r1, #16]
  405f86:	60e8      	str	r0, [r5, #12]
  405f88:	60a8      	str	r0, [r5, #8]
  405f8a:	606a      	str	r2, [r5, #4]
  405f8c:	50eb      	str	r3, [r5, r3]
  405f8e:	e796      	b.n	405ebe <_free_r+0x96>
  405f90:	2a54      	cmp	r2, #84	; 0x54
  405f92:	d804      	bhi.n	405f9e <_free_r+0x176>
  405f94:	0b1a      	lsrs	r2, r3, #12
  405f96:	f102 046e 	add.w	r4, r2, #110	; 0x6e
  405f9a:	0060      	lsls	r0, r4, #1
  405f9c:	e79c      	b.n	405ed8 <_free_r+0xb0>
  405f9e:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  405fa2:	d804      	bhi.n	405fae <_free_r+0x186>
  405fa4:	0bda      	lsrs	r2, r3, #15
  405fa6:	f102 0477 	add.w	r4, r2, #119	; 0x77
  405faa:	0060      	lsls	r0, r4, #1
  405fac:	e794      	b.n	405ed8 <_free_r+0xb0>
  405fae:	f240 5054 	movw	r0, #1364	; 0x554
  405fb2:	4282      	cmp	r2, r0
  405fb4:	d804      	bhi.n	405fc0 <_free_r+0x198>
  405fb6:	0c9a      	lsrs	r2, r3, #18
  405fb8:	f102 047c 	add.w	r4, r2, #124	; 0x7c
  405fbc:	0060      	lsls	r0, r4, #1
  405fbe:	e78b      	b.n	405ed8 <_free_r+0xb0>
  405fc0:	20fc      	movs	r0, #252	; 0xfc
  405fc2:	247e      	movs	r4, #126	; 0x7e
  405fc4:	e788      	b.n	405ed8 <_free_r+0xb0>
  405fc6:	bf00      	nop
  405fc8:	204004e4 	.word	0x204004e4
  405fcc:	204004ec 	.word	0x204004ec
  405fd0:	204008ec 	.word	0x204008ec
  405fd4:	2040099c 	.word	0x2040099c

00405fd8 <__sfvwrite_r>:
  405fd8:	6893      	ldr	r3, [r2, #8]
  405fda:	2b00      	cmp	r3, #0
  405fdc:	d07a      	beq.n	4060d4 <__sfvwrite_r+0xfc>
  405fde:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405fe2:	f8b1 e00c 	ldrh.w	lr, [r1, #12]
  405fe6:	b083      	sub	sp, #12
  405fe8:	460c      	mov	r4, r1
  405fea:	4681      	mov	r9, r0
  405fec:	f01e 0f08 	tst.w	lr, #8
  405ff0:	4616      	mov	r6, r2
  405ff2:	d026      	beq.n	406042 <__sfvwrite_r+0x6a>
  405ff4:	690b      	ldr	r3, [r1, #16]
  405ff6:	b323      	cbz	r3, 406042 <__sfvwrite_r+0x6a>
  405ff8:	f00e 0802 	and.w	r8, lr, #2
  405ffc:	6835      	ldr	r5, [r6, #0]
  405ffe:	fa1f f088 	uxth.w	r0, r8
  406002:	b370      	cbz	r0, 406062 <__sfvwrite_r+0x8a>
  406004:	f04f 0a00 	mov.w	sl, #0
  406008:	f8df b2ec 	ldr.w	fp, [pc, #748]	; 4062f8 <__sfvwrite_r+0x320>
  40600c:	46d0      	mov	r8, sl
  40600e:	45d8      	cmp	r8, fp
  406010:	4643      	mov	r3, r8
  406012:	4652      	mov	r2, sl
  406014:	4648      	mov	r0, r9
  406016:	bf28      	it	cs
  406018:	465b      	movcs	r3, fp
  40601a:	f1b8 0f00 	cmp.w	r8, #0
  40601e:	d053      	beq.n	4060c8 <__sfvwrite_r+0xf0>
  406020:	69e1      	ldr	r1, [r4, #28]
  406022:	6a67      	ldr	r7, [r4, #36]	; 0x24
  406024:	47b8      	blx	r7
  406026:	2800      	cmp	r0, #0
  406028:	dd73      	ble.n	406112 <__sfvwrite_r+0x13a>
  40602a:	68b3      	ldr	r3, [r6, #8]
  40602c:	4482      	add	sl, r0
  40602e:	ebc0 0808 	rsb	r8, r0, r8
  406032:	1a18      	subs	r0, r3, r0
  406034:	60b0      	str	r0, [r6, #8]
  406036:	2800      	cmp	r0, #0
  406038:	d1e9      	bne.n	40600e <__sfvwrite_r+0x36>
  40603a:	2000      	movs	r0, #0
  40603c:	b003      	add	sp, #12
  40603e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406042:	4648      	mov	r0, r9
  406044:	4621      	mov	r1, r4
  406046:	f7fe fcbd 	bl	4049c4 <__swsetup_r>
  40604a:	2800      	cmp	r0, #0
  40604c:	f040 814c 	bne.w	4062e8 <__sfvwrite_r+0x310>
  406050:	f8b4 e00c 	ldrh.w	lr, [r4, #12]
  406054:	6835      	ldr	r5, [r6, #0]
  406056:	f00e 0802 	and.w	r8, lr, #2
  40605a:	fa1f f088 	uxth.w	r0, r8
  40605e:	2800      	cmp	r0, #0
  406060:	d1d0      	bne.n	406004 <__sfvwrite_r+0x2c>
  406062:	f01e 0b01 	ands.w	fp, lr, #1
  406066:	d15d      	bne.n	406124 <__sfvwrite_r+0x14c>
  406068:	46d8      	mov	r8, fp
  40606a:	f1b8 0f00 	cmp.w	r8, #0
  40606e:	d025      	beq.n	4060bc <__sfvwrite_r+0xe4>
  406070:	f41e 7f00 	tst.w	lr, #512	; 0x200
  406074:	68a7      	ldr	r7, [r4, #8]
  406076:	d02f      	beq.n	4060d8 <__sfvwrite_r+0x100>
  406078:	45b8      	cmp	r8, r7
  40607a:	46ba      	mov	sl, r7
  40607c:	f0c0 80a8 	bcc.w	4061d0 <__sfvwrite_r+0x1f8>
  406080:	f41e 6f90 	tst.w	lr, #1152	; 0x480
  406084:	f040 80b5 	bne.w	4061f2 <__sfvwrite_r+0x21a>
  406088:	6820      	ldr	r0, [r4, #0]
  40608a:	4659      	mov	r1, fp
  40608c:	4652      	mov	r2, sl
  40608e:	f000 fd69 	bl	406b64 <memmove>
  406092:	68a2      	ldr	r2, [r4, #8]
  406094:	6821      	ldr	r1, [r4, #0]
  406096:	4640      	mov	r0, r8
  406098:	1bd7      	subs	r7, r2, r7
  40609a:	eb01 030a 	add.w	r3, r1, sl
  40609e:	60a7      	str	r7, [r4, #8]
  4060a0:	6023      	str	r3, [r4, #0]
  4060a2:	68b3      	ldr	r3, [r6, #8]
  4060a4:	4483      	add	fp, r0
  4060a6:	ebc0 0808 	rsb	r8, r0, r8
  4060aa:	1a18      	subs	r0, r3, r0
  4060ac:	60b0      	str	r0, [r6, #8]
  4060ae:	2800      	cmp	r0, #0
  4060b0:	d0c3      	beq.n	40603a <__sfvwrite_r+0x62>
  4060b2:	f8b4 e00c 	ldrh.w	lr, [r4, #12]
  4060b6:	f1b8 0f00 	cmp.w	r8, #0
  4060ba:	d1d9      	bne.n	406070 <__sfvwrite_r+0x98>
  4060bc:	f8d5 b000 	ldr.w	fp, [r5]
  4060c0:	3508      	adds	r5, #8
  4060c2:	f855 8c04 	ldr.w	r8, [r5, #-4]
  4060c6:	e7d0      	b.n	40606a <__sfvwrite_r+0x92>
  4060c8:	f8d5 a000 	ldr.w	sl, [r5]
  4060cc:	3508      	adds	r5, #8
  4060ce:	f855 8c04 	ldr.w	r8, [r5, #-4]
  4060d2:	e79c      	b.n	40600e <__sfvwrite_r+0x36>
  4060d4:	2000      	movs	r0, #0
  4060d6:	4770      	bx	lr
  4060d8:	6820      	ldr	r0, [r4, #0]
  4060da:	6923      	ldr	r3, [r4, #16]
  4060dc:	4298      	cmp	r0, r3
  4060de:	d803      	bhi.n	4060e8 <__sfvwrite_r+0x110>
  4060e0:	6963      	ldr	r3, [r4, #20]
  4060e2:	4598      	cmp	r8, r3
  4060e4:	f080 80bf 	bcs.w	406266 <__sfvwrite_r+0x28e>
  4060e8:	4547      	cmp	r7, r8
  4060ea:	4659      	mov	r1, fp
  4060ec:	bf28      	it	cs
  4060ee:	4647      	movcs	r7, r8
  4060f0:	463a      	mov	r2, r7
  4060f2:	f000 fd37 	bl	406b64 <memmove>
  4060f6:	68a3      	ldr	r3, [r4, #8]
  4060f8:	6822      	ldr	r2, [r4, #0]
  4060fa:	1bdb      	subs	r3, r3, r7
  4060fc:	443a      	add	r2, r7
  4060fe:	60a3      	str	r3, [r4, #8]
  406100:	6022      	str	r2, [r4, #0]
  406102:	2b00      	cmp	r3, #0
  406104:	d149      	bne.n	40619a <__sfvwrite_r+0x1c2>
  406106:	4648      	mov	r0, r9
  406108:	4621      	mov	r1, r4
  40610a:	f7ff fd85 	bl	405c18 <_fflush_r>
  40610e:	2800      	cmp	r0, #0
  406110:	d043      	beq.n	40619a <__sfvwrite_r+0x1c2>
  406112:	89a3      	ldrh	r3, [r4, #12]
  406114:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  406118:	f04f 30ff 	mov.w	r0, #4294967295
  40611c:	81a3      	strh	r3, [r4, #12]
  40611e:	b003      	add	sp, #12
  406120:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406124:	4680      	mov	r8, r0
  406126:	4683      	mov	fp, r0
  406128:	4682      	mov	sl, r0
  40612a:	9000      	str	r0, [sp, #0]
  40612c:	f1ba 0f00 	cmp.w	sl, #0
  406130:	d02b      	beq.n	40618a <__sfvwrite_r+0x1b2>
  406132:	9b00      	ldr	r3, [sp, #0]
  406134:	2b00      	cmp	r3, #0
  406136:	d04f      	beq.n	4061d8 <__sfvwrite_r+0x200>
  406138:	45d0      	cmp	r8, sl
  40613a:	6962      	ldr	r2, [r4, #20]
  40613c:	68a1      	ldr	r1, [r4, #8]
  40613e:	4643      	mov	r3, r8
  406140:	bf28      	it	cs
  406142:	4653      	movcs	r3, sl
  406144:	6820      	ldr	r0, [r4, #0]
  406146:	eb02 0c01 	add.w	ip, r2, r1
  40614a:	461f      	mov	r7, r3
  40614c:	4563      	cmp	r3, ip
  40614e:	dd03      	ble.n	406158 <__sfvwrite_r+0x180>
  406150:	6921      	ldr	r1, [r4, #16]
  406152:	4288      	cmp	r0, r1
  406154:	f200 8099 	bhi.w	40628a <__sfvwrite_r+0x2b2>
  406158:	4293      	cmp	r3, r2
  40615a:	db20      	blt.n	40619e <__sfvwrite_r+0x1c6>
  40615c:	4613      	mov	r3, r2
  40615e:	6a67      	ldr	r7, [r4, #36]	; 0x24
  406160:	4648      	mov	r0, r9
  406162:	69e1      	ldr	r1, [r4, #28]
  406164:	465a      	mov	r2, fp
  406166:	47b8      	blx	r7
  406168:	1e07      	subs	r7, r0, #0
  40616a:	ddd2      	ble.n	406112 <__sfvwrite_r+0x13a>
  40616c:	ebb8 0807 	subs.w	r8, r8, r7
  406170:	d025      	beq.n	4061be <__sfvwrite_r+0x1e6>
  406172:	68b3      	ldr	r3, [r6, #8]
  406174:	44bb      	add	fp, r7
  406176:	ebc7 0a0a 	rsb	sl, r7, sl
  40617a:	1bdf      	subs	r7, r3, r7
  40617c:	60b7      	str	r7, [r6, #8]
  40617e:	2f00      	cmp	r7, #0
  406180:	f43f af5b 	beq.w	40603a <__sfvwrite_r+0x62>
  406184:	f1ba 0f00 	cmp.w	sl, #0
  406188:	d1d3      	bne.n	406132 <__sfvwrite_r+0x15a>
  40618a:	2300      	movs	r3, #0
  40618c:	f8d5 b000 	ldr.w	fp, [r5]
  406190:	f8d5 a004 	ldr.w	sl, [r5, #4]
  406194:	3508      	adds	r5, #8
  406196:	9300      	str	r3, [sp, #0]
  406198:	e7c8      	b.n	40612c <__sfvwrite_r+0x154>
  40619a:	4638      	mov	r0, r7
  40619c:	e781      	b.n	4060a2 <__sfvwrite_r+0xca>
  40619e:	461a      	mov	r2, r3
  4061a0:	4659      	mov	r1, fp
  4061a2:	9301      	str	r3, [sp, #4]
  4061a4:	f000 fcde 	bl	406b64 <memmove>
  4061a8:	68a2      	ldr	r2, [r4, #8]
  4061aa:	ebb8 0807 	subs.w	r8, r8, r7
  4061ae:	6821      	ldr	r1, [r4, #0]
  4061b0:	9b01      	ldr	r3, [sp, #4]
  4061b2:	eba2 0203 	sub.w	r2, r2, r3
  4061b6:	440b      	add	r3, r1
  4061b8:	60a2      	str	r2, [r4, #8]
  4061ba:	6023      	str	r3, [r4, #0]
  4061bc:	d1d9      	bne.n	406172 <__sfvwrite_r+0x19a>
  4061be:	4648      	mov	r0, r9
  4061c0:	4621      	mov	r1, r4
  4061c2:	f7ff fd29 	bl	405c18 <_fflush_r>
  4061c6:	2800      	cmp	r0, #0
  4061c8:	d1a3      	bne.n	406112 <__sfvwrite_r+0x13a>
  4061ca:	f8cd 8000 	str.w	r8, [sp]
  4061ce:	e7d0      	b.n	406172 <__sfvwrite_r+0x19a>
  4061d0:	4647      	mov	r7, r8
  4061d2:	6820      	ldr	r0, [r4, #0]
  4061d4:	46c2      	mov	sl, r8
  4061d6:	e758      	b.n	40608a <__sfvwrite_r+0xb2>
  4061d8:	4658      	mov	r0, fp
  4061da:	210a      	movs	r1, #10
  4061dc:	4652      	mov	r2, sl
  4061de:	f000 fbdf 	bl	4069a0 <memchr>
  4061e2:	2800      	cmp	r0, #0
  4061e4:	d07b      	beq.n	4062de <__sfvwrite_r+0x306>
  4061e6:	3001      	adds	r0, #1
  4061e8:	2301      	movs	r3, #1
  4061ea:	ebcb 0800 	rsb	r8, fp, r0
  4061ee:	9300      	str	r3, [sp, #0]
  4061f0:	e7a2      	b.n	406138 <__sfvwrite_r+0x160>
  4061f2:	6963      	ldr	r3, [r4, #20]
  4061f4:	6921      	ldr	r1, [r4, #16]
  4061f6:	6827      	ldr	r7, [r4, #0]
  4061f8:	eb03 0c43 	add.w	ip, r3, r3, lsl #1
  4061fc:	1a7f      	subs	r7, r7, r1
  4061fe:	eb0c 7cdc 	add.w	ip, ip, ip, lsr #31
  406202:	1c7b      	adds	r3, r7, #1
  406204:	ea4f 0c6c 	mov.w	ip, ip, asr #1
  406208:	4443      	add	r3, r8
  40620a:	4662      	mov	r2, ip
  40620c:	459c      	cmp	ip, r3
  40620e:	d201      	bcs.n	406214 <__sfvwrite_r+0x23c>
  406210:	469c      	mov	ip, r3
  406212:	461a      	mov	r2, r3
  406214:	f41e 6f80 	tst.w	lr, #1024	; 0x400
  406218:	f8cd c000 	str.w	ip, [sp]
  40621c:	d04b      	beq.n	4062b6 <__sfvwrite_r+0x2de>
  40621e:	4611      	mov	r1, r2
  406220:	4648      	mov	r0, r9
  406222:	f000 f911 	bl	406448 <_malloc_r>
  406226:	f8dd c000 	ldr.w	ip, [sp]
  40622a:	4682      	mov	sl, r0
  40622c:	2800      	cmp	r0, #0
  40622e:	d05e      	beq.n	4062ee <__sfvwrite_r+0x316>
  406230:	463a      	mov	r2, r7
  406232:	6921      	ldr	r1, [r4, #16]
  406234:	f8cd c000 	str.w	ip, [sp]
  406238:	f000 fbfa 	bl	406a30 <memcpy>
  40623c:	89a2      	ldrh	r2, [r4, #12]
  40623e:	f8dd c000 	ldr.w	ip, [sp]
  406242:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
  406246:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  40624a:	81a2      	strh	r2, [r4, #12]
  40624c:	eb0a 0007 	add.w	r0, sl, r7
  406250:	ebc7 020c 	rsb	r2, r7, ip
  406254:	f8c4 a010 	str.w	sl, [r4, #16]
  406258:	4647      	mov	r7, r8
  40625a:	6020      	str	r0, [r4, #0]
  40625c:	46c2      	mov	sl, r8
  40625e:	60a2      	str	r2, [r4, #8]
  406260:	f8c4 c014 	str.w	ip, [r4, #20]
  406264:	e711      	b.n	40608a <__sfvwrite_r+0xb2>
  406266:	f06f 4e00 	mvn.w	lr, #2147483648	; 0x80000000
  40626a:	6a67      	ldr	r7, [r4, #36]	; 0x24
  40626c:	4648      	mov	r0, r9
  40626e:	69e1      	ldr	r1, [r4, #28]
  406270:	45c6      	cmp	lr, r8
  406272:	465a      	mov	r2, fp
  406274:	bf28      	it	cs
  406276:	46c6      	movcs	lr, r8
  406278:	fb9e fef3 	sdiv	lr, lr, r3
  40627c:	fb0e f303 	mul.w	r3, lr, r3
  406280:	47b8      	blx	r7
  406282:	2800      	cmp	r0, #0
  406284:	f73f af0d 	bgt.w	4060a2 <__sfvwrite_r+0xca>
  406288:	e743      	b.n	406112 <__sfvwrite_r+0x13a>
  40628a:	4662      	mov	r2, ip
  40628c:	4659      	mov	r1, fp
  40628e:	f8cd c004 	str.w	ip, [sp, #4]
  406292:	f000 fc67 	bl	406b64 <memmove>
  406296:	6823      	ldr	r3, [r4, #0]
  406298:	4648      	mov	r0, r9
  40629a:	f8dd c004 	ldr.w	ip, [sp, #4]
  40629e:	4621      	mov	r1, r4
  4062a0:	4463      	add	r3, ip
  4062a2:	6023      	str	r3, [r4, #0]
  4062a4:	f7ff fcb8 	bl	405c18 <_fflush_r>
  4062a8:	f8dd c004 	ldr.w	ip, [sp, #4]
  4062ac:	2800      	cmp	r0, #0
  4062ae:	f47f af30 	bne.w	406112 <__sfvwrite_r+0x13a>
  4062b2:	4667      	mov	r7, ip
  4062b4:	e75a      	b.n	40616c <__sfvwrite_r+0x194>
  4062b6:	4648      	mov	r0, r9
  4062b8:	f000 ffc6 	bl	407248 <_realloc_r>
  4062bc:	f8dd c000 	ldr.w	ip, [sp]
  4062c0:	4682      	mov	sl, r0
  4062c2:	2800      	cmp	r0, #0
  4062c4:	d1c2      	bne.n	40624c <__sfvwrite_r+0x274>
  4062c6:	4648      	mov	r0, r9
  4062c8:	6921      	ldr	r1, [r4, #16]
  4062ca:	f7ff fdad 	bl	405e28 <_free_r>
  4062ce:	89a3      	ldrh	r3, [r4, #12]
  4062d0:	220c      	movs	r2, #12
  4062d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  4062d6:	f8c9 2000 	str.w	r2, [r9]
  4062da:	b29b      	uxth	r3, r3
  4062dc:	e71a      	b.n	406114 <__sfvwrite_r+0x13c>
  4062de:	2301      	movs	r3, #1
  4062e0:	f10a 0801 	add.w	r8, sl, #1
  4062e4:	9300      	str	r3, [sp, #0]
  4062e6:	e727      	b.n	406138 <__sfvwrite_r+0x160>
  4062e8:	f04f 30ff 	mov.w	r0, #4294967295
  4062ec:	e6a6      	b.n	40603c <__sfvwrite_r+0x64>
  4062ee:	220c      	movs	r2, #12
  4062f0:	89a3      	ldrh	r3, [r4, #12]
  4062f2:	f8c9 2000 	str.w	r2, [r9]
  4062f6:	e70d      	b.n	406114 <__sfvwrite_r+0x13c>
  4062f8:	7ffffc00 	.word	0x7ffffc00

004062fc <_fwalk_reent>:
  4062fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  406300:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  406304:	d01e      	beq.n	406344 <_fwalk_reent+0x48>
  406306:	4688      	mov	r8, r1
  406308:	4606      	mov	r6, r0
  40630a:	f04f 0900 	mov.w	r9, #0
  40630e:	687d      	ldr	r5, [r7, #4]
  406310:	68bc      	ldr	r4, [r7, #8]
  406312:	3d01      	subs	r5, #1
  406314:	d410      	bmi.n	406338 <_fwalk_reent+0x3c>
  406316:	89a3      	ldrh	r3, [r4, #12]
  406318:	3d01      	subs	r5, #1
  40631a:	2b01      	cmp	r3, #1
  40631c:	d908      	bls.n	406330 <_fwalk_reent+0x34>
  40631e:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  406322:	4621      	mov	r1, r4
  406324:	4630      	mov	r0, r6
  406326:	3301      	adds	r3, #1
  406328:	d002      	beq.n	406330 <_fwalk_reent+0x34>
  40632a:	47c0      	blx	r8
  40632c:	ea49 0900 	orr.w	r9, r9, r0
  406330:	1c6b      	adds	r3, r5, #1
  406332:	f104 0468 	add.w	r4, r4, #104	; 0x68
  406336:	d1ee      	bne.n	406316 <_fwalk_reent+0x1a>
  406338:	683f      	ldr	r7, [r7, #0]
  40633a:	2f00      	cmp	r7, #0
  40633c:	d1e7      	bne.n	40630e <_fwalk_reent+0x12>
  40633e:	4648      	mov	r0, r9
  406340:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  406344:	46b9      	mov	r9, r7
  406346:	4648      	mov	r0, r9
  406348:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0040634c <_localeconv_r>:
  40634c:	4800      	ldr	r0, [pc, #0]	; (406350 <_localeconv_r+0x4>)
  40634e:	4770      	bx	lr
  406350:	204004ac 	.word	0x204004ac

00406354 <__smakebuf_r>:
  406354:	898b      	ldrh	r3, [r1, #12]
  406356:	b29a      	uxth	r2, r3
  406358:	f012 0f02 	tst.w	r2, #2
  40635c:	d13d      	bne.n	4063da <__smakebuf_r+0x86>
  40635e:	b5f0      	push	{r4, r5, r6, r7, lr}
  406360:	460c      	mov	r4, r1
  406362:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  406366:	b091      	sub	sp, #68	; 0x44
  406368:	4605      	mov	r5, r0
  40636a:	2900      	cmp	r1, #0
  40636c:	db19      	blt.n	4063a2 <__smakebuf_r+0x4e>
  40636e:	aa01      	add	r2, sp, #4
  406370:	f001 fb4e 	bl	407a10 <_fstat_r>
  406374:	2800      	cmp	r0, #0
  406376:	db12      	blt.n	40639e <__smakebuf_r+0x4a>
  406378:	9b02      	ldr	r3, [sp, #8]
  40637a:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
  40637e:	f5a3 5700 	sub.w	r7, r3, #8192	; 0x2000
  406382:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
  406386:	fab7 f787 	clz	r7, r7
  40638a:	ea4f 1757 	mov.w	r7, r7, lsr #5
  40638e:	d02b      	beq.n	4063e8 <__smakebuf_r+0x94>
  406390:	89a3      	ldrh	r3, [r4, #12]
  406392:	f44f 6680 	mov.w	r6, #1024	; 0x400
  406396:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  40639a:	81a3      	strh	r3, [r4, #12]
  40639c:	e00c      	b.n	4063b8 <__smakebuf_r+0x64>
  40639e:	89a3      	ldrh	r3, [r4, #12]
  4063a0:	b29a      	uxth	r2, r3
  4063a2:	f012 0f80 	tst.w	r2, #128	; 0x80
  4063a6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  4063aa:	f04f 0700 	mov.w	r7, #0
  4063ae:	bf0c      	ite	eq
  4063b0:	f44f 6680 	moveq.w	r6, #1024	; 0x400
  4063b4:	2640      	movne	r6, #64	; 0x40
  4063b6:	81a3      	strh	r3, [r4, #12]
  4063b8:	4628      	mov	r0, r5
  4063ba:	4631      	mov	r1, r6
  4063bc:	f000 f844 	bl	406448 <_malloc_r>
  4063c0:	89a3      	ldrh	r3, [r4, #12]
  4063c2:	b340      	cbz	r0, 406416 <__smakebuf_r+0xc2>
  4063c4:	4a1a      	ldr	r2, [pc, #104]	; (406430 <__smakebuf_r+0xdc>)
  4063c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4063ca:	63ea      	str	r2, [r5, #60]	; 0x3c
  4063cc:	81a3      	strh	r3, [r4, #12]
  4063ce:	6020      	str	r0, [r4, #0]
  4063d0:	6120      	str	r0, [r4, #16]
  4063d2:	6166      	str	r6, [r4, #20]
  4063d4:	b99f      	cbnz	r7, 4063fe <__smakebuf_r+0xaa>
  4063d6:	b011      	add	sp, #68	; 0x44
  4063d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4063da:	f101 0343 	add.w	r3, r1, #67	; 0x43
  4063de:	2201      	movs	r2, #1
  4063e0:	600b      	str	r3, [r1, #0]
  4063e2:	610b      	str	r3, [r1, #16]
  4063e4:	614a      	str	r2, [r1, #20]
  4063e6:	4770      	bx	lr
  4063e8:	4b12      	ldr	r3, [pc, #72]	; (406434 <__smakebuf_r+0xe0>)
  4063ea:	6aa2      	ldr	r2, [r4, #40]	; 0x28
  4063ec:	429a      	cmp	r2, r3
  4063ee:	d1cf      	bne.n	406390 <__smakebuf_r+0x3c>
  4063f0:	89a3      	ldrh	r3, [r4, #12]
  4063f2:	f44f 6680 	mov.w	r6, #1024	; 0x400
  4063f6:	4333      	orrs	r3, r6
  4063f8:	64e6      	str	r6, [r4, #76]	; 0x4c
  4063fa:	81a3      	strh	r3, [r4, #12]
  4063fc:	e7dc      	b.n	4063b8 <__smakebuf_r+0x64>
  4063fe:	4628      	mov	r0, r5
  406400:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  406404:	f001 fb18 	bl	407a38 <_isatty_r>
  406408:	2800      	cmp	r0, #0
  40640a:	d0e4      	beq.n	4063d6 <__smakebuf_r+0x82>
  40640c:	89a3      	ldrh	r3, [r4, #12]
  40640e:	f043 0301 	orr.w	r3, r3, #1
  406412:	81a3      	strh	r3, [r4, #12]
  406414:	e7df      	b.n	4063d6 <__smakebuf_r+0x82>
  406416:	059a      	lsls	r2, r3, #22
  406418:	d4dd      	bmi.n	4063d6 <__smakebuf_r+0x82>
  40641a:	f104 0243 	add.w	r2, r4, #67	; 0x43
  40641e:	f043 0302 	orr.w	r3, r3, #2
  406422:	2101      	movs	r1, #1
  406424:	81a3      	strh	r3, [r4, #12]
  406426:	6022      	str	r2, [r4, #0]
  406428:	6122      	str	r2, [r4, #16]
  40642a:	6161      	str	r1, [r4, #20]
  40642c:	e7d3      	b.n	4063d6 <__smakebuf_r+0x82>
  40642e:	bf00      	nop
  406430:	00405c45 	.word	0x00405c45
  406434:	004076fd 	.word	0x004076fd

00406438 <malloc>:
  406438:	4b02      	ldr	r3, [pc, #8]	; (406444 <malloc+0xc>)
  40643a:	4601      	mov	r1, r0
  40643c:	6818      	ldr	r0, [r3, #0]
  40643e:	f000 b803 	b.w	406448 <_malloc_r>
  406442:	bf00      	nop
  406444:	204004a8 	.word	0x204004a8

00406448 <_malloc_r>:
  406448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40644c:	f101 040b 	add.w	r4, r1, #11
  406450:	b083      	sub	sp, #12
  406452:	4605      	mov	r5, r0
  406454:	2c16      	cmp	r4, #22
  406456:	d927      	bls.n	4064a8 <_malloc_r+0x60>
  406458:	f034 0407 	bics.w	r4, r4, #7
  40645c:	d42a      	bmi.n	4064b4 <_malloc_r+0x6c>
  40645e:	42a1      	cmp	r1, r4
  406460:	d828      	bhi.n	4064b4 <_malloc_r+0x6c>
  406462:	f000 fbe1 	bl	406c28 <__malloc_lock>
  406466:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
  40646a:	d22b      	bcs.n	4064c4 <_malloc_r+0x7c>
  40646c:	ea4f 0cd4 	mov.w	ip, r4, lsr #3
  406470:	4ec0      	ldr	r6, [pc, #768]	; (406774 <_malloc_r+0x32c>)
  406472:	eb06 02cc 	add.w	r2, r6, ip, lsl #3
  406476:	68d3      	ldr	r3, [r2, #12]
  406478:	4293      	cmp	r3, r2
  40647a:	f000 8171 	beq.w	406760 <_malloc_r+0x318>
  40647e:	685a      	ldr	r2, [r3, #4]
  406480:	f103 0808 	add.w	r8, r3, #8
  406484:	68d9      	ldr	r1, [r3, #12]
  406486:	4628      	mov	r0, r5
  406488:	f022 0203 	bic.w	r2, r2, #3
  40648c:	689c      	ldr	r4, [r3, #8]
  40648e:	4413      	add	r3, r2
  406490:	60e1      	str	r1, [r4, #12]
  406492:	608c      	str	r4, [r1, #8]
  406494:	685a      	ldr	r2, [r3, #4]
  406496:	f042 0201 	orr.w	r2, r2, #1
  40649a:	605a      	str	r2, [r3, #4]
  40649c:	f000 fbc6 	bl	406c2c <__malloc_unlock>
  4064a0:	4640      	mov	r0, r8
  4064a2:	b003      	add	sp, #12
  4064a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4064a8:	2910      	cmp	r1, #16
  4064aa:	d803      	bhi.n	4064b4 <_malloc_r+0x6c>
  4064ac:	f000 fbbc 	bl	406c28 <__malloc_lock>
  4064b0:	2410      	movs	r4, #16
  4064b2:	e7db      	b.n	40646c <_malloc_r+0x24>
  4064b4:	f04f 0800 	mov.w	r8, #0
  4064b8:	230c      	movs	r3, #12
  4064ba:	4640      	mov	r0, r8
  4064bc:	602b      	str	r3, [r5, #0]
  4064be:	b003      	add	sp, #12
  4064c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4064c4:	ea5f 2c54 	movs.w	ip, r4, lsr #9
  4064c8:	f000 8089 	beq.w	4065de <_malloc_r+0x196>
  4064cc:	f1bc 0f04 	cmp.w	ip, #4
  4064d0:	f200 80c4 	bhi.w	40665c <_malloc_r+0x214>
  4064d4:	ea4f 1c94 	mov.w	ip, r4, lsr #6
  4064d8:	f10c 0c38 	add.w	ip, ip, #56	; 0x38
  4064dc:	ea4f 004c 	mov.w	r0, ip, lsl #1
  4064e0:	4ea4      	ldr	r6, [pc, #656]	; (406774 <_malloc_r+0x32c>)
  4064e2:	eb06 0080 	add.w	r0, r6, r0, lsl #2
  4064e6:	68c3      	ldr	r3, [r0, #12]
  4064e8:	4298      	cmp	r0, r3
  4064ea:	d105      	bne.n	4064f8 <_malloc_r+0xb0>
  4064ec:	e00c      	b.n	406508 <_malloc_r+0xc0>
  4064ee:	2900      	cmp	r1, #0
  4064f0:	da79      	bge.n	4065e6 <_malloc_r+0x19e>
  4064f2:	68db      	ldr	r3, [r3, #12]
  4064f4:	4298      	cmp	r0, r3
  4064f6:	d007      	beq.n	406508 <_malloc_r+0xc0>
  4064f8:	685a      	ldr	r2, [r3, #4]
  4064fa:	f022 0203 	bic.w	r2, r2, #3
  4064fe:	1b11      	subs	r1, r2, r4
  406500:	290f      	cmp	r1, #15
  406502:	ddf4      	ble.n	4064ee <_malloc_r+0xa6>
  406504:	f10c 3cff 	add.w	ip, ip, #4294967295
  406508:	f10c 0c01 	add.w	ip, ip, #1
  40650c:	4f99      	ldr	r7, [pc, #612]	; (406774 <_malloc_r+0x32c>)
  40650e:	6933      	ldr	r3, [r6, #16]
  406510:	f107 0e08 	add.w	lr, r7, #8
  406514:	4573      	cmp	r3, lr
  406516:	f000 8119 	beq.w	40674c <_malloc_r+0x304>
  40651a:	685a      	ldr	r2, [r3, #4]
  40651c:	f022 0203 	bic.w	r2, r2, #3
  406520:	1b11      	subs	r1, r2, r4
  406522:	290f      	cmp	r1, #15
  406524:	f300 80ca 	bgt.w	4066bc <_malloc_r+0x274>
  406528:	2900      	cmp	r1, #0
  40652a:	f8c7 e014 	str.w	lr, [r7, #20]
  40652e:	f8c7 e010 	str.w	lr, [r7, #16]
  406532:	da6a      	bge.n	40660a <_malloc_r+0x1c2>
  406534:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  406538:	f080 809f 	bcs.w	40667a <_malloc_r+0x232>
  40653c:	08d2      	lsrs	r2, r2, #3
  40653e:	2001      	movs	r0, #1
  406540:	6879      	ldr	r1, [r7, #4]
  406542:	ea4f 08a2 	mov.w	r8, r2, asr #2
  406546:	eb07 02c2 	add.w	r2, r7, r2, lsl #3
  40654a:	fa00 f008 	lsl.w	r0, r0, r8
  40654e:	f8d2 8008 	ldr.w	r8, [r2, #8]
  406552:	4308      	orrs	r0, r1
  406554:	60da      	str	r2, [r3, #12]
  406556:	f8c3 8008 	str.w	r8, [r3, #8]
  40655a:	6078      	str	r0, [r7, #4]
  40655c:	6093      	str	r3, [r2, #8]
  40655e:	f8c8 300c 	str.w	r3, [r8, #12]
  406562:	ea4f 03ac 	mov.w	r3, ip, asr #2
  406566:	2101      	movs	r1, #1
  406568:	4099      	lsls	r1, r3
  40656a:	4281      	cmp	r1, r0
  40656c:	d85b      	bhi.n	406626 <_malloc_r+0x1de>
  40656e:	4208      	tst	r0, r1
  406570:	d106      	bne.n	406580 <_malloc_r+0x138>
  406572:	f02c 0c03 	bic.w	ip, ip, #3
  406576:	0049      	lsls	r1, r1, #1
  406578:	f10c 0c04 	add.w	ip, ip, #4
  40657c:	4208      	tst	r0, r1
  40657e:	d0fa      	beq.n	406576 <_malloc_r+0x12e>
  406580:	eb06 08cc 	add.w	r8, r6, ip, lsl #3
  406584:	46e1      	mov	r9, ip
  406586:	4640      	mov	r0, r8
  406588:	68c7      	ldr	r7, [r0, #12]
  40658a:	42b8      	cmp	r0, r7
  40658c:	d107      	bne.n	40659e <_malloc_r+0x156>
  40658e:	e0df      	b.n	406750 <_malloc_r+0x308>
  406590:	2a00      	cmp	r2, #0
  406592:	f280 80f7 	bge.w	406784 <_malloc_r+0x33c>
  406596:	68ff      	ldr	r7, [r7, #12]
  406598:	42b8      	cmp	r0, r7
  40659a:	f000 80d9 	beq.w	406750 <_malloc_r+0x308>
  40659e:	687b      	ldr	r3, [r7, #4]
  4065a0:	f023 0303 	bic.w	r3, r3, #3
  4065a4:	1b1a      	subs	r2, r3, r4
  4065a6:	2a0f      	cmp	r2, #15
  4065a8:	ddf2      	ble.n	406590 <_malloc_r+0x148>
  4065aa:	46b8      	mov	r8, r7
  4065ac:	68fb      	ldr	r3, [r7, #12]
  4065ae:	f044 0901 	orr.w	r9, r4, #1
  4065b2:	f042 0c01 	orr.w	ip, r2, #1
  4065b6:	f858 1f08 	ldr.w	r1, [r8, #8]!
  4065ba:	443c      	add	r4, r7
  4065bc:	f8c7 9004 	str.w	r9, [r7, #4]
  4065c0:	4628      	mov	r0, r5
  4065c2:	60cb      	str	r3, [r1, #12]
  4065c4:	6099      	str	r1, [r3, #8]
  4065c6:	6174      	str	r4, [r6, #20]
  4065c8:	6134      	str	r4, [r6, #16]
  4065ca:	f8c4 e00c 	str.w	lr, [r4, #12]
  4065ce:	f8c4 e008 	str.w	lr, [r4, #8]
  4065d2:	f8c4 c004 	str.w	ip, [r4, #4]
  4065d6:	50a2      	str	r2, [r4, r2]
  4065d8:	f000 fb28 	bl	406c2c <__malloc_unlock>
  4065dc:	e760      	b.n	4064a0 <_malloc_r+0x58>
  4065de:	207e      	movs	r0, #126	; 0x7e
  4065e0:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
  4065e4:	e77c      	b.n	4064e0 <_malloc_r+0x98>
  4065e6:	441a      	add	r2, r3
  4065e8:	68dc      	ldr	r4, [r3, #12]
  4065ea:	689e      	ldr	r6, [r3, #8]
  4065ec:	f103 0808 	add.w	r8, r3, #8
  4065f0:	6851      	ldr	r1, [r2, #4]
  4065f2:	4628      	mov	r0, r5
  4065f4:	60f4      	str	r4, [r6, #12]
  4065f6:	f041 0301 	orr.w	r3, r1, #1
  4065fa:	60a6      	str	r6, [r4, #8]
  4065fc:	6053      	str	r3, [r2, #4]
  4065fe:	f000 fb15 	bl	406c2c <__malloc_unlock>
  406602:	4640      	mov	r0, r8
  406604:	b003      	add	sp, #12
  406606:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40660a:	441a      	add	r2, r3
  40660c:	f103 0808 	add.w	r8, r3, #8
  406610:	4628      	mov	r0, r5
  406612:	6853      	ldr	r3, [r2, #4]
  406614:	f043 0301 	orr.w	r3, r3, #1
  406618:	6053      	str	r3, [r2, #4]
  40661a:	f000 fb07 	bl	406c2c <__malloc_unlock>
  40661e:	4640      	mov	r0, r8
  406620:	b003      	add	sp, #12
  406622:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406626:	68b7      	ldr	r7, [r6, #8]
  406628:	687a      	ldr	r2, [r7, #4]
  40662a:	f022 0803 	bic.w	r8, r2, #3
  40662e:	ebc4 0208 	rsb	r2, r4, r8
  406632:	2a0f      	cmp	r2, #15
  406634:	dd56      	ble.n	4066e4 <_malloc_r+0x29c>
  406636:	45a0      	cmp	r8, r4
  406638:	d354      	bcc.n	4066e4 <_malloc_r+0x29c>
  40663a:	f044 0301 	orr.w	r3, r4, #1
  40663e:	f042 0201 	orr.w	r2, r2, #1
  406642:	443c      	add	r4, r7
  406644:	f107 0808 	add.w	r8, r7, #8
  406648:	607b      	str	r3, [r7, #4]
  40664a:	4628      	mov	r0, r5
  40664c:	60b4      	str	r4, [r6, #8]
  40664e:	6062      	str	r2, [r4, #4]
  406650:	f000 faec 	bl	406c2c <__malloc_unlock>
  406654:	4640      	mov	r0, r8
  406656:	b003      	add	sp, #12
  406658:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40665c:	f1bc 0f14 	cmp.w	ip, #20
  406660:	f240 809f 	bls.w	4067a2 <_malloc_r+0x35a>
  406664:	f1bc 0f54 	cmp.w	ip, #84	; 0x54
  406668:	f200 8127 	bhi.w	4068ba <_malloc_r+0x472>
  40666c:	ea4f 3c14 	mov.w	ip, r4, lsr #12
  406670:	f10c 0c6e 	add.w	ip, ip, #110	; 0x6e
  406674:	ea4f 004c 	mov.w	r0, ip, lsl #1
  406678:	e732      	b.n	4064e0 <_malloc_r+0x98>
  40667a:	0a51      	lsrs	r1, r2, #9
  40667c:	2904      	cmp	r1, #4
  40667e:	f240 8095 	bls.w	4067ac <_malloc_r+0x364>
  406682:	2914      	cmp	r1, #20
  406684:	f200 8142 	bhi.w	40690c <_malloc_r+0x4c4>
  406688:	f101 075b 	add.w	r7, r1, #91	; 0x5b
  40668c:	0078      	lsls	r0, r7, #1
  40668e:	eb06 0080 	add.w	r0, r6, r0, lsl #2
  406692:	f8df 90e0 	ldr.w	r9, [pc, #224]	; 406774 <_malloc_r+0x32c>
  406696:	6881      	ldr	r1, [r0, #8]
  406698:	4281      	cmp	r1, r0
  40669a:	f000 811b 	beq.w	4068d4 <_malloc_r+0x48c>
  40669e:	684f      	ldr	r7, [r1, #4]
  4066a0:	f027 0703 	bic.w	r7, r7, #3
  4066a4:	42ba      	cmp	r2, r7
  4066a6:	d202      	bcs.n	4066ae <_malloc_r+0x266>
  4066a8:	6889      	ldr	r1, [r1, #8]
  4066aa:	4288      	cmp	r0, r1
  4066ac:	d1f7      	bne.n	40669e <_malloc_r+0x256>
  4066ae:	68ca      	ldr	r2, [r1, #12]
  4066b0:	6870      	ldr	r0, [r6, #4]
  4066b2:	60da      	str	r2, [r3, #12]
  4066b4:	6099      	str	r1, [r3, #8]
  4066b6:	6093      	str	r3, [r2, #8]
  4066b8:	60cb      	str	r3, [r1, #12]
  4066ba:	e752      	b.n	406562 <_malloc_r+0x11a>
  4066bc:	f044 0601 	orr.w	r6, r4, #1
  4066c0:	f041 0201 	orr.w	r2, r1, #1
  4066c4:	441c      	add	r4, r3
  4066c6:	4628      	mov	r0, r5
  4066c8:	605e      	str	r6, [r3, #4]
  4066ca:	f103 0808 	add.w	r8, r3, #8
  4066ce:	617c      	str	r4, [r7, #20]
  4066d0:	613c      	str	r4, [r7, #16]
  4066d2:	f8c4 e00c 	str.w	lr, [r4, #12]
  4066d6:	f8c4 e008 	str.w	lr, [r4, #8]
  4066da:	6062      	str	r2, [r4, #4]
  4066dc:	5061      	str	r1, [r4, r1]
  4066de:	f000 faa5 	bl	406c2c <__malloc_unlock>
  4066e2:	e6dd      	b.n	4064a0 <_malloc_r+0x58>
  4066e4:	4a24      	ldr	r2, [pc, #144]	; (406778 <_malloc_r+0x330>)
  4066e6:	4b25      	ldr	r3, [pc, #148]	; (40677c <_malloc_r+0x334>)
  4066e8:	6811      	ldr	r1, [r2, #0]
  4066ea:	681b      	ldr	r3, [r3, #0]
  4066ec:	3101      	adds	r1, #1
  4066ee:	4423      	add	r3, r4
  4066f0:	f000 8109 	beq.w	406906 <_malloc_r+0x4be>
  4066f4:	f241 010f 	movw	r1, #4111	; 0x100f
  4066f8:	f8df 9084 	ldr.w	r9, [pc, #132]	; 406780 <_malloc_r+0x338>
  4066fc:	4419      	add	r1, r3
  4066fe:	ea01 0909 	and.w	r9, r1, r9
  406702:	4628      	mov	r0, r5
  406704:	4649      	mov	r1, r9
  406706:	9201      	str	r2, [sp, #4]
  406708:	f000 ffb8 	bl	40767c <_sbrk_r>
  40670c:	f1b0 3fff 	cmp.w	r0, #4294967295
  406710:	4682      	mov	sl, r0
  406712:	9a01      	ldr	r2, [sp, #4]
  406714:	f000 8101 	beq.w	40691a <_malloc_r+0x4d2>
  406718:	1bbb      	subs	r3, r7, r6
  40671a:	eb07 0108 	add.w	r1, r7, r8
  40671e:	4815      	ldr	r0, [pc, #84]	; (406774 <_malloc_r+0x32c>)
  406720:	bf18      	it	ne
  406722:	2301      	movne	r3, #1
  406724:	4551      	cmp	r1, sl
  406726:	d967      	bls.n	4067f8 <_malloc_r+0x3b0>
  406728:	2b00      	cmp	r3, #0
  40672a:	d065      	beq.n	4067f8 <_malloc_r+0x3b0>
  40672c:	6887      	ldr	r7, [r0, #8]
  40672e:	687b      	ldr	r3, [r7, #4]
  406730:	f023 0303 	bic.w	r3, r3, #3
  406734:	1b1a      	subs	r2, r3, r4
  406736:	2a0f      	cmp	r2, #15
  406738:	dd02      	ble.n	406740 <_malloc_r+0x2f8>
  40673a:	429c      	cmp	r4, r3
  40673c:	f67f af7d 	bls.w	40663a <_malloc_r+0x1f2>
  406740:	4628      	mov	r0, r5
  406742:	f04f 0800 	mov.w	r8, #0
  406746:	f000 fa71 	bl	406c2c <__malloc_unlock>
  40674a:	e6a9      	b.n	4064a0 <_malloc_r+0x58>
  40674c:	6878      	ldr	r0, [r7, #4]
  40674e:	e708      	b.n	406562 <_malloc_r+0x11a>
  406750:	f109 0901 	add.w	r9, r9, #1
  406754:	3008      	adds	r0, #8
  406756:	f019 0f03 	tst.w	r9, #3
  40675a:	f47f af15 	bne.w	406588 <_malloc_r+0x140>
  40675e:	e02f      	b.n	4067c0 <_malloc_r+0x378>
  406760:	f103 0208 	add.w	r2, r3, #8
  406764:	695b      	ldr	r3, [r3, #20]
  406766:	429a      	cmp	r2, r3
  406768:	bf08      	it	eq
  40676a:	f10c 0c02 	addeq.w	ip, ip, #2
  40676e:	f43f aecd 	beq.w	40650c <_malloc_r+0xc4>
  406772:	e684      	b.n	40647e <_malloc_r+0x36>
  406774:	204004e4 	.word	0x204004e4
  406778:	204008f0 	.word	0x204008f0
  40677c:	2040099c 	.word	0x2040099c
  406780:	fffff000 	.word	0xfffff000
  406784:	18fa      	adds	r2, r7, r3
  406786:	46b8      	mov	r8, r7
  406788:	68f9      	ldr	r1, [r7, #12]
  40678a:	4628      	mov	r0, r5
  40678c:	6853      	ldr	r3, [r2, #4]
  40678e:	f858 4f08 	ldr.w	r4, [r8, #8]!
  406792:	f043 0301 	orr.w	r3, r3, #1
  406796:	6053      	str	r3, [r2, #4]
  406798:	60e1      	str	r1, [r4, #12]
  40679a:	608c      	str	r4, [r1, #8]
  40679c:	f000 fa46 	bl	406c2c <__malloc_unlock>
  4067a0:	e67e      	b.n	4064a0 <_malloc_r+0x58>
  4067a2:	f10c 0c5b 	add.w	ip, ip, #91	; 0x5b
  4067a6:	ea4f 004c 	mov.w	r0, ip, lsl #1
  4067aa:	e699      	b.n	4064e0 <_malloc_r+0x98>
  4067ac:	0991      	lsrs	r1, r2, #6
  4067ae:	f101 0738 	add.w	r7, r1, #56	; 0x38
  4067b2:	0078      	lsls	r0, r7, #1
  4067b4:	e76b      	b.n	40668e <_malloc_r+0x246>
  4067b6:	f8d8 8000 	ldr.w	r8, [r8]
  4067ba:	4598      	cmp	r8, r3
  4067bc:	f040 80e6 	bne.w	40698c <_malloc_r+0x544>
  4067c0:	f01c 0f03 	tst.w	ip, #3
  4067c4:	f1a8 0308 	sub.w	r3, r8, #8
  4067c8:	f10c 3cff 	add.w	ip, ip, #4294967295
  4067cc:	d1f3      	bne.n	4067b6 <_malloc_r+0x36e>
  4067ce:	6873      	ldr	r3, [r6, #4]
  4067d0:	ea23 0301 	bic.w	r3, r3, r1
  4067d4:	6073      	str	r3, [r6, #4]
  4067d6:	0049      	lsls	r1, r1, #1
  4067d8:	4299      	cmp	r1, r3
  4067da:	f63f af24 	bhi.w	406626 <_malloc_r+0x1de>
  4067de:	2900      	cmp	r1, #0
  4067e0:	f43f af21 	beq.w	406626 <_malloc_r+0x1de>
  4067e4:	420b      	tst	r3, r1
  4067e6:	46cc      	mov	ip, r9
  4067e8:	f47f aeca 	bne.w	406580 <_malloc_r+0x138>
  4067ec:	0049      	lsls	r1, r1, #1
  4067ee:	f10c 0c04 	add.w	ip, ip, #4
  4067f2:	420b      	tst	r3, r1
  4067f4:	d0fa      	beq.n	4067ec <_malloc_r+0x3a4>
  4067f6:	e6c3      	b.n	406580 <_malloc_r+0x138>
  4067f8:	f8df b19c 	ldr.w	fp, [pc, #412]	; 406998 <_malloc_r+0x550>
  4067fc:	4551      	cmp	r1, sl
  4067fe:	f8db 0000 	ldr.w	r0, [fp]
  406802:	4448      	add	r0, r9
  406804:	f8cb 0000 	str.w	r0, [fp]
  406808:	f000 808c 	beq.w	406924 <_malloc_r+0x4dc>
  40680c:	6812      	ldr	r2, [r2, #0]
  40680e:	f8df e18c 	ldr.w	lr, [pc, #396]	; 40699c <_malloc_r+0x554>
  406812:	3201      	adds	r2, #1
  406814:	f000 80a3 	beq.w	40695e <_malloc_r+0x516>
  406818:	ebc1 010a 	rsb	r1, r1, sl
  40681c:	4408      	add	r0, r1
  40681e:	f8cb 0000 	str.w	r0, [fp]
  406822:	f01a 0107 	ands.w	r1, sl, #7
  406826:	d052      	beq.n	4068ce <_malloc_r+0x486>
  406828:	f1c1 0008 	rsb	r0, r1, #8
  40682c:	f241 0208 	movw	r2, #4104	; 0x1008
  406830:	4482      	add	sl, r0
  406832:	1a52      	subs	r2, r2, r1
  406834:	eb0a 0109 	add.w	r1, sl, r9
  406838:	4628      	mov	r0, r5
  40683a:	9301      	str	r3, [sp, #4]
  40683c:	f3c1 010b 	ubfx	r1, r1, #0, #12
  406840:	ebc1 0902 	rsb	r9, r1, r2
  406844:	4649      	mov	r1, r9
  406846:	f000 ff19 	bl	40767c <_sbrk_r>
  40684a:	1c43      	adds	r3, r0, #1
  40684c:	9b01      	ldr	r3, [sp, #4]
  40684e:	d07a      	beq.n	406946 <_malloc_r+0x4fe>
  406850:	ebca 0200 	rsb	r2, sl, r0
  406854:	444a      	add	r2, r9
  406856:	f042 0201 	orr.w	r2, r2, #1
  40685a:	f8db 0000 	ldr.w	r0, [fp]
  40685e:	f8c6 a008 	str.w	sl, [r6, #8]
  406862:	4448      	add	r0, r9
  406864:	f8ca 2004 	str.w	r2, [sl, #4]
  406868:	f8df 912c 	ldr.w	r9, [pc, #300]	; 406998 <_malloc_r+0x550>
  40686c:	f8cb 0000 	str.w	r0, [fp]
  406870:	b1a3      	cbz	r3, 40689c <_malloc_r+0x454>
  406872:	f1b8 0f0f 	cmp.w	r8, #15
  406876:	d937      	bls.n	4068e8 <_malloc_r+0x4a0>
  406878:	687b      	ldr	r3, [r7, #4]
  40687a:	f1a8 020c 	sub.w	r2, r8, #12
  40687e:	f04f 0e05 	mov.w	lr, #5
  406882:	f022 0207 	bic.w	r2, r2, #7
  406886:	f003 0301 	and.w	r3, r3, #1
  40688a:	18b9      	adds	r1, r7, r2
  40688c:	4313      	orrs	r3, r2
  40688e:	2a0f      	cmp	r2, #15
  406890:	607b      	str	r3, [r7, #4]
  406892:	f8c1 e004 	str.w	lr, [r1, #4]
  406896:	f8c1 e008 	str.w	lr, [r1, #8]
  40689a:	d858      	bhi.n	40694e <_malloc_r+0x506>
  40689c:	4b3c      	ldr	r3, [pc, #240]	; (406990 <_malloc_r+0x548>)
  40689e:	681a      	ldr	r2, [r3, #0]
  4068a0:	4290      	cmp	r0, r2
  4068a2:	d900      	bls.n	4068a6 <_malloc_r+0x45e>
  4068a4:	6018      	str	r0, [r3, #0]
  4068a6:	4b3b      	ldr	r3, [pc, #236]	; (406994 <_malloc_r+0x54c>)
  4068a8:	68b7      	ldr	r7, [r6, #8]
  4068aa:	681a      	ldr	r2, [r3, #0]
  4068ac:	4290      	cmp	r0, r2
  4068ae:	d900      	bls.n	4068b2 <_malloc_r+0x46a>
  4068b0:	6018      	str	r0, [r3, #0]
  4068b2:	687b      	ldr	r3, [r7, #4]
  4068b4:	f023 0303 	bic.w	r3, r3, #3
  4068b8:	e73c      	b.n	406734 <_malloc_r+0x2ec>
  4068ba:	f5bc 7faa 	cmp.w	ip, #340	; 0x154
  4068be:	d817      	bhi.n	4068f0 <_malloc_r+0x4a8>
  4068c0:	ea4f 3cd4 	mov.w	ip, r4, lsr #15
  4068c4:	f10c 0c77 	add.w	ip, ip, #119	; 0x77
  4068c8:	ea4f 004c 	mov.w	r0, ip, lsl #1
  4068cc:	e608      	b.n	4064e0 <_malloc_r+0x98>
  4068ce:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  4068d2:	e7af      	b.n	406834 <_malloc_r+0x3ec>
  4068d4:	10bf      	asrs	r7, r7, #2
  4068d6:	2001      	movs	r0, #1
  4068d8:	460a      	mov	r2, r1
  4068da:	40b8      	lsls	r0, r7
  4068dc:	f8d9 7004 	ldr.w	r7, [r9, #4]
  4068e0:	4338      	orrs	r0, r7
  4068e2:	f8c9 0004 	str.w	r0, [r9, #4]
  4068e6:	e6e4      	b.n	4066b2 <_malloc_r+0x26a>
  4068e8:	2301      	movs	r3, #1
  4068ea:	f8ca 3004 	str.w	r3, [sl, #4]
  4068ee:	e727      	b.n	406740 <_malloc_r+0x2f8>
  4068f0:	f240 5354 	movw	r3, #1364	; 0x554
  4068f4:	459c      	cmp	ip, r3
  4068f6:	d822      	bhi.n	40693e <_malloc_r+0x4f6>
  4068f8:	ea4f 4c94 	mov.w	ip, r4, lsr #18
  4068fc:	f10c 0c7c 	add.w	ip, ip, #124	; 0x7c
  406900:	ea4f 004c 	mov.w	r0, ip, lsl #1
  406904:	e5ec      	b.n	4064e0 <_malloc_r+0x98>
  406906:	f103 0910 	add.w	r9, r3, #16
  40690a:	e6fa      	b.n	406702 <_malloc_r+0x2ba>
  40690c:	2954      	cmp	r1, #84	; 0x54
  40690e:	d829      	bhi.n	406964 <_malloc_r+0x51c>
  406910:	0b11      	lsrs	r1, r2, #12
  406912:	f101 076e 	add.w	r7, r1, #110	; 0x6e
  406916:	0078      	lsls	r0, r7, #1
  406918:	e6b9      	b.n	40668e <_malloc_r+0x246>
  40691a:	68b7      	ldr	r7, [r6, #8]
  40691c:	687b      	ldr	r3, [r7, #4]
  40691e:	f023 0303 	bic.w	r3, r3, #3
  406922:	e707      	b.n	406734 <_malloc_r+0x2ec>
  406924:	f3c1 0e0b 	ubfx	lr, r1, #0, #12
  406928:	f1be 0f00 	cmp.w	lr, #0
  40692c:	f47f af6e 	bne.w	40680c <_malloc_r+0x3c4>
  406930:	eb09 0308 	add.w	r3, r9, r8
  406934:	68b2      	ldr	r2, [r6, #8]
  406936:	f043 0301 	orr.w	r3, r3, #1
  40693a:	6053      	str	r3, [r2, #4]
  40693c:	e7ae      	b.n	40689c <_malloc_r+0x454>
  40693e:	20fc      	movs	r0, #252	; 0xfc
  406940:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
  406944:	e5cc      	b.n	4064e0 <_malloc_r+0x98>
  406946:	2201      	movs	r2, #1
  406948:	f04f 0900 	mov.w	r9, #0
  40694c:	e785      	b.n	40685a <_malloc_r+0x412>
  40694e:	4628      	mov	r0, r5
  406950:	f107 0108 	add.w	r1, r7, #8
  406954:	f7ff fa68 	bl	405e28 <_free_r>
  406958:	f8d9 0000 	ldr.w	r0, [r9]
  40695c:	e79e      	b.n	40689c <_malloc_r+0x454>
  40695e:	f8ce a000 	str.w	sl, [lr]
  406962:	e75e      	b.n	406822 <_malloc_r+0x3da>
  406964:	f5b1 7faa 	cmp.w	r1, #340	; 0x154
  406968:	d804      	bhi.n	406974 <_malloc_r+0x52c>
  40696a:	0bd1      	lsrs	r1, r2, #15
  40696c:	f101 0777 	add.w	r7, r1, #119	; 0x77
  406970:	0078      	lsls	r0, r7, #1
  406972:	e68c      	b.n	40668e <_malloc_r+0x246>
  406974:	f240 5054 	movw	r0, #1364	; 0x554
  406978:	4281      	cmp	r1, r0
  40697a:	d804      	bhi.n	406986 <_malloc_r+0x53e>
  40697c:	0c91      	lsrs	r1, r2, #18
  40697e:	f101 077c 	add.w	r7, r1, #124	; 0x7c
  406982:	0078      	lsls	r0, r7, #1
  406984:	e683      	b.n	40668e <_malloc_r+0x246>
  406986:	20fc      	movs	r0, #252	; 0xfc
  406988:	277e      	movs	r7, #126	; 0x7e
  40698a:	e680      	b.n	40668e <_malloc_r+0x246>
  40698c:	6873      	ldr	r3, [r6, #4]
  40698e:	e722      	b.n	4067d6 <_malloc_r+0x38e>
  406990:	20400998 	.word	0x20400998
  406994:	20400994 	.word	0x20400994
  406998:	204009a0 	.word	0x204009a0
  40699c:	204008f0 	.word	0x204008f0

004069a0 <memchr>:
  4069a0:	0783      	lsls	r3, r0, #30
  4069a2:	b2c9      	uxtb	r1, r1
  4069a4:	b470      	push	{r4, r5, r6}
  4069a6:	d03f      	beq.n	406a28 <memchr+0x88>
  4069a8:	1e54      	subs	r4, r2, #1
  4069aa:	2a00      	cmp	r2, #0
  4069ac:	d03e      	beq.n	406a2c <memchr+0x8c>
  4069ae:	7803      	ldrb	r3, [r0, #0]
  4069b0:	428b      	cmp	r3, r1
  4069b2:	bf18      	it	ne
  4069b4:	1c43      	addne	r3, r0, #1
  4069b6:	d105      	bne.n	4069c4 <memchr+0x24>
  4069b8:	e01c      	b.n	4069f4 <memchr+0x54>
  4069ba:	b1ec      	cbz	r4, 4069f8 <memchr+0x58>
  4069bc:	7802      	ldrb	r2, [r0, #0]
  4069be:	3c01      	subs	r4, #1
  4069c0:	428a      	cmp	r2, r1
  4069c2:	d017      	beq.n	4069f4 <memchr+0x54>
  4069c4:	f013 0f03 	tst.w	r3, #3
  4069c8:	4618      	mov	r0, r3
  4069ca:	f103 0301 	add.w	r3, r3, #1
  4069ce:	d1f4      	bne.n	4069ba <memchr+0x1a>
  4069d0:	2c03      	cmp	r4, #3
  4069d2:	d814      	bhi.n	4069fe <memchr+0x5e>
  4069d4:	b184      	cbz	r4, 4069f8 <memchr+0x58>
  4069d6:	7803      	ldrb	r3, [r0, #0]
  4069d8:	428b      	cmp	r3, r1
  4069da:	d00b      	beq.n	4069f4 <memchr+0x54>
  4069dc:	1905      	adds	r5, r0, r4
  4069de:	1c43      	adds	r3, r0, #1
  4069e0:	e002      	b.n	4069e8 <memchr+0x48>
  4069e2:	7802      	ldrb	r2, [r0, #0]
  4069e4:	428a      	cmp	r2, r1
  4069e6:	d005      	beq.n	4069f4 <memchr+0x54>
  4069e8:	42ab      	cmp	r3, r5
  4069ea:	4618      	mov	r0, r3
  4069ec:	f103 0301 	add.w	r3, r3, #1
  4069f0:	d1f7      	bne.n	4069e2 <memchr+0x42>
  4069f2:	2000      	movs	r0, #0
  4069f4:	bc70      	pop	{r4, r5, r6}
  4069f6:	4770      	bx	lr
  4069f8:	4620      	mov	r0, r4
  4069fa:	bc70      	pop	{r4, r5, r6}
  4069fc:	4770      	bx	lr
  4069fe:	ea41 2601 	orr.w	r6, r1, r1, lsl #8
  406a02:	4602      	mov	r2, r0
  406a04:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
  406a08:	4610      	mov	r0, r2
  406a0a:	3204      	adds	r2, #4
  406a0c:	6803      	ldr	r3, [r0, #0]
  406a0e:	4073      	eors	r3, r6
  406a10:	f1a3 3501 	sub.w	r5, r3, #16843009	; 0x1010101
  406a14:	ea25 0303 	bic.w	r3, r5, r3
  406a18:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
  406a1c:	d1da      	bne.n	4069d4 <memchr+0x34>
  406a1e:	3c04      	subs	r4, #4
  406a20:	4610      	mov	r0, r2
  406a22:	2c03      	cmp	r4, #3
  406a24:	d8f0      	bhi.n	406a08 <memchr+0x68>
  406a26:	e7d5      	b.n	4069d4 <memchr+0x34>
  406a28:	4614      	mov	r4, r2
  406a2a:	e7d1      	b.n	4069d0 <memchr+0x30>
  406a2c:	4610      	mov	r0, r2
  406a2e:	e7e1      	b.n	4069f4 <memchr+0x54>

00406a30 <memcpy>:
  406a30:	4684      	mov	ip, r0
  406a32:	ea41 0300 	orr.w	r3, r1, r0
  406a36:	f013 0303 	ands.w	r3, r3, #3
  406a3a:	d16d      	bne.n	406b18 <memcpy+0xe8>
  406a3c:	3a40      	subs	r2, #64	; 0x40
  406a3e:	d341      	bcc.n	406ac4 <memcpy+0x94>
  406a40:	f851 3b04 	ldr.w	r3, [r1], #4
  406a44:	f840 3b04 	str.w	r3, [r0], #4
  406a48:	f851 3b04 	ldr.w	r3, [r1], #4
  406a4c:	f840 3b04 	str.w	r3, [r0], #4
  406a50:	f851 3b04 	ldr.w	r3, [r1], #4
  406a54:	f840 3b04 	str.w	r3, [r0], #4
  406a58:	f851 3b04 	ldr.w	r3, [r1], #4
  406a5c:	f840 3b04 	str.w	r3, [r0], #4
  406a60:	f851 3b04 	ldr.w	r3, [r1], #4
  406a64:	f840 3b04 	str.w	r3, [r0], #4
  406a68:	f851 3b04 	ldr.w	r3, [r1], #4
  406a6c:	f840 3b04 	str.w	r3, [r0], #4
  406a70:	f851 3b04 	ldr.w	r3, [r1], #4
  406a74:	f840 3b04 	str.w	r3, [r0], #4
  406a78:	f851 3b04 	ldr.w	r3, [r1], #4
  406a7c:	f840 3b04 	str.w	r3, [r0], #4
  406a80:	f851 3b04 	ldr.w	r3, [r1], #4
  406a84:	f840 3b04 	str.w	r3, [r0], #4
  406a88:	f851 3b04 	ldr.w	r3, [r1], #4
  406a8c:	f840 3b04 	str.w	r3, [r0], #4
  406a90:	f851 3b04 	ldr.w	r3, [r1], #4
  406a94:	f840 3b04 	str.w	r3, [r0], #4
  406a98:	f851 3b04 	ldr.w	r3, [r1], #4
  406a9c:	f840 3b04 	str.w	r3, [r0], #4
  406aa0:	f851 3b04 	ldr.w	r3, [r1], #4
  406aa4:	f840 3b04 	str.w	r3, [r0], #4
  406aa8:	f851 3b04 	ldr.w	r3, [r1], #4
  406aac:	f840 3b04 	str.w	r3, [r0], #4
  406ab0:	f851 3b04 	ldr.w	r3, [r1], #4
  406ab4:	f840 3b04 	str.w	r3, [r0], #4
  406ab8:	f851 3b04 	ldr.w	r3, [r1], #4
  406abc:	f840 3b04 	str.w	r3, [r0], #4
  406ac0:	3a40      	subs	r2, #64	; 0x40
  406ac2:	d2bd      	bcs.n	406a40 <memcpy+0x10>
  406ac4:	3230      	adds	r2, #48	; 0x30
  406ac6:	d311      	bcc.n	406aec <memcpy+0xbc>
  406ac8:	f851 3b04 	ldr.w	r3, [r1], #4
  406acc:	f840 3b04 	str.w	r3, [r0], #4
  406ad0:	f851 3b04 	ldr.w	r3, [r1], #4
  406ad4:	f840 3b04 	str.w	r3, [r0], #4
  406ad8:	f851 3b04 	ldr.w	r3, [r1], #4
  406adc:	f840 3b04 	str.w	r3, [r0], #4
  406ae0:	f851 3b04 	ldr.w	r3, [r1], #4
  406ae4:	f840 3b04 	str.w	r3, [r0], #4
  406ae8:	3a10      	subs	r2, #16
  406aea:	d2ed      	bcs.n	406ac8 <memcpy+0x98>
  406aec:	320c      	adds	r2, #12
  406aee:	d305      	bcc.n	406afc <memcpy+0xcc>
  406af0:	f851 3b04 	ldr.w	r3, [r1], #4
  406af4:	f840 3b04 	str.w	r3, [r0], #4
  406af8:	3a04      	subs	r2, #4
  406afa:	d2f9      	bcs.n	406af0 <memcpy+0xc0>
  406afc:	3204      	adds	r2, #4
  406afe:	d008      	beq.n	406b12 <memcpy+0xe2>
  406b00:	07d2      	lsls	r2, r2, #31
  406b02:	bf1c      	itt	ne
  406b04:	f811 3b01 	ldrbne.w	r3, [r1], #1
  406b08:	f800 3b01 	strbne.w	r3, [r0], #1
  406b0c:	d301      	bcc.n	406b12 <memcpy+0xe2>
  406b0e:	880b      	ldrh	r3, [r1, #0]
  406b10:	8003      	strh	r3, [r0, #0]
  406b12:	4660      	mov	r0, ip
  406b14:	4770      	bx	lr
  406b16:	bf00      	nop
  406b18:	2a08      	cmp	r2, #8
  406b1a:	d313      	bcc.n	406b44 <memcpy+0x114>
  406b1c:	078b      	lsls	r3, r1, #30
  406b1e:	d08d      	beq.n	406a3c <memcpy+0xc>
  406b20:	f010 0303 	ands.w	r3, r0, #3
  406b24:	d08a      	beq.n	406a3c <memcpy+0xc>
  406b26:	f1c3 0304 	rsb	r3, r3, #4
  406b2a:	1ad2      	subs	r2, r2, r3
  406b2c:	07db      	lsls	r3, r3, #31
  406b2e:	bf1c      	itt	ne
  406b30:	f811 3b01 	ldrbne.w	r3, [r1], #1
  406b34:	f800 3b01 	strbne.w	r3, [r0], #1
  406b38:	d380      	bcc.n	406a3c <memcpy+0xc>
  406b3a:	f831 3b02 	ldrh.w	r3, [r1], #2
  406b3e:	f820 3b02 	strh.w	r3, [r0], #2
  406b42:	e77b      	b.n	406a3c <memcpy+0xc>
  406b44:	3a04      	subs	r2, #4
  406b46:	d3d9      	bcc.n	406afc <memcpy+0xcc>
  406b48:	3a01      	subs	r2, #1
  406b4a:	f811 3b01 	ldrb.w	r3, [r1], #1
  406b4e:	f800 3b01 	strb.w	r3, [r0], #1
  406b52:	d2f9      	bcs.n	406b48 <memcpy+0x118>
  406b54:	780b      	ldrb	r3, [r1, #0]
  406b56:	7003      	strb	r3, [r0, #0]
  406b58:	784b      	ldrb	r3, [r1, #1]
  406b5a:	7043      	strb	r3, [r0, #1]
  406b5c:	788b      	ldrb	r3, [r1, #2]
  406b5e:	7083      	strb	r3, [r0, #2]
  406b60:	4660      	mov	r0, ip
  406b62:	4770      	bx	lr

00406b64 <memmove>:
  406b64:	4288      	cmp	r0, r1
  406b66:	b5f0      	push	{r4, r5, r6, r7, lr}
  406b68:	d90d      	bls.n	406b86 <memmove+0x22>
  406b6a:	188b      	adds	r3, r1, r2
  406b6c:	4298      	cmp	r0, r3
  406b6e:	d20a      	bcs.n	406b86 <memmove+0x22>
  406b70:	1881      	adds	r1, r0, r2
  406b72:	2a00      	cmp	r2, #0
  406b74:	d053      	beq.n	406c1e <memmove+0xba>
  406b76:	1a9a      	subs	r2, r3, r2
  406b78:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  406b7c:	4293      	cmp	r3, r2
  406b7e:	f801 4d01 	strb.w	r4, [r1, #-1]!
  406b82:	d1f9      	bne.n	406b78 <memmove+0x14>
  406b84:	bdf0      	pop	{r4, r5, r6, r7, pc}
  406b86:	2a0f      	cmp	r2, #15
  406b88:	d947      	bls.n	406c1a <memmove+0xb6>
  406b8a:	ea40 0301 	orr.w	r3, r0, r1
  406b8e:	079b      	lsls	r3, r3, #30
  406b90:	d146      	bne.n	406c20 <memmove+0xbc>
  406b92:	f100 0410 	add.w	r4, r0, #16
  406b96:	f101 0310 	add.w	r3, r1, #16
  406b9a:	4615      	mov	r5, r2
  406b9c:	f853 6c10 	ldr.w	r6, [r3, #-16]
  406ba0:	3d10      	subs	r5, #16
  406ba2:	3310      	adds	r3, #16
  406ba4:	3410      	adds	r4, #16
  406ba6:	f844 6c20 	str.w	r6, [r4, #-32]
  406baa:	2d0f      	cmp	r5, #15
  406bac:	f853 6c1c 	ldr.w	r6, [r3, #-28]
  406bb0:	f844 6c1c 	str.w	r6, [r4, #-28]
  406bb4:	f853 6c18 	ldr.w	r6, [r3, #-24]
  406bb8:	f844 6c18 	str.w	r6, [r4, #-24]
  406bbc:	f853 6c14 	ldr.w	r6, [r3, #-20]
  406bc0:	f844 6c14 	str.w	r6, [r4, #-20]
  406bc4:	d8ea      	bhi.n	406b9c <memmove+0x38>
  406bc6:	f1a2 0310 	sub.w	r3, r2, #16
  406bca:	f002 0e0f 	and.w	lr, r2, #15
  406bce:	f023 030f 	bic.w	r3, r3, #15
  406bd2:	f1be 0f03 	cmp.w	lr, #3
  406bd6:	f103 0310 	add.w	r3, r3, #16
  406bda:	4419      	add	r1, r3
  406bdc:	4403      	add	r3, r0
  406bde:	d921      	bls.n	406c24 <memmove+0xc0>
  406be0:	1f1e      	subs	r6, r3, #4
  406be2:	460d      	mov	r5, r1
  406be4:	4674      	mov	r4, lr
  406be6:	3c04      	subs	r4, #4
  406be8:	f855 7b04 	ldr.w	r7, [r5], #4
  406bec:	2c03      	cmp	r4, #3
  406bee:	f846 7f04 	str.w	r7, [r6, #4]!
  406bf2:	d8f8      	bhi.n	406be6 <memmove+0x82>
  406bf4:	f1ae 0404 	sub.w	r4, lr, #4
  406bf8:	f002 0203 	and.w	r2, r2, #3
  406bfc:	f024 0403 	bic.w	r4, r4, #3
  406c00:	3404      	adds	r4, #4
  406c02:	4423      	add	r3, r4
  406c04:	4421      	add	r1, r4
  406c06:	b152      	cbz	r2, 406c1e <memmove+0xba>
  406c08:	3b01      	subs	r3, #1
  406c0a:	440a      	add	r2, r1
  406c0c:	f811 4b01 	ldrb.w	r4, [r1], #1
  406c10:	4291      	cmp	r1, r2
  406c12:	f803 4f01 	strb.w	r4, [r3, #1]!
  406c16:	d1f9      	bne.n	406c0c <memmove+0xa8>
  406c18:	bdf0      	pop	{r4, r5, r6, r7, pc}
  406c1a:	4603      	mov	r3, r0
  406c1c:	e7f3      	b.n	406c06 <memmove+0xa2>
  406c1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  406c20:	4603      	mov	r3, r0
  406c22:	e7f1      	b.n	406c08 <memmove+0xa4>
  406c24:	4672      	mov	r2, lr
  406c26:	e7ee      	b.n	406c06 <memmove+0xa2>

00406c28 <__malloc_lock>:
  406c28:	4770      	bx	lr
  406c2a:	bf00      	nop

00406c2c <__malloc_unlock>:
  406c2c:	4770      	bx	lr
  406c2e:	bf00      	nop

00406c30 <_Balloc>:
  406c30:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
  406c32:	b538      	push	{r3, r4, r5, lr}
  406c34:	4605      	mov	r5, r0
  406c36:	460c      	mov	r4, r1
  406c38:	b152      	cbz	r2, 406c50 <_Balloc+0x20>
  406c3a:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
  406c3e:	b18b      	cbz	r3, 406c64 <_Balloc+0x34>
  406c40:	6819      	ldr	r1, [r3, #0]
  406c42:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
  406c46:	2200      	movs	r2, #0
  406c48:	4618      	mov	r0, r3
  406c4a:	611a      	str	r2, [r3, #16]
  406c4c:	60da      	str	r2, [r3, #12]
  406c4e:	bd38      	pop	{r3, r4, r5, pc}
  406c50:	2221      	movs	r2, #33	; 0x21
  406c52:	2104      	movs	r1, #4
  406c54:	f000 fe58 	bl	407908 <_calloc_r>
  406c58:	64e8      	str	r0, [r5, #76]	; 0x4c
  406c5a:	4602      	mov	r2, r0
  406c5c:	2800      	cmp	r0, #0
  406c5e:	d1ec      	bne.n	406c3a <_Balloc+0xa>
  406c60:	2000      	movs	r0, #0
  406c62:	bd38      	pop	{r3, r4, r5, pc}
  406c64:	2101      	movs	r1, #1
  406c66:	4628      	mov	r0, r5
  406c68:	fa01 f504 	lsl.w	r5, r1, r4
  406c6c:	1d6a      	adds	r2, r5, #5
  406c6e:	0092      	lsls	r2, r2, #2
  406c70:	f000 fe4a 	bl	407908 <_calloc_r>
  406c74:	4603      	mov	r3, r0
  406c76:	2800      	cmp	r0, #0
  406c78:	d0f2      	beq.n	406c60 <_Balloc+0x30>
  406c7a:	6044      	str	r4, [r0, #4]
  406c7c:	6085      	str	r5, [r0, #8]
  406c7e:	e7e2      	b.n	406c46 <_Balloc+0x16>

00406c80 <_Bfree>:
  406c80:	b131      	cbz	r1, 406c90 <_Bfree+0x10>
  406c82:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  406c84:	684a      	ldr	r2, [r1, #4]
  406c86:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
  406c8a:	6008      	str	r0, [r1, #0]
  406c8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  406c90:	4770      	bx	lr
  406c92:	bf00      	nop

00406c94 <__multadd>:
  406c94:	b5f0      	push	{r4, r5, r6, r7, lr}
  406c96:	460c      	mov	r4, r1
  406c98:	b083      	sub	sp, #12
  406c9a:	4605      	mov	r5, r0
  406c9c:	690e      	ldr	r6, [r1, #16]
  406c9e:	f101 0e14 	add.w	lr, r1, #20
  406ca2:	2700      	movs	r7, #0
  406ca4:	f8de 1000 	ldr.w	r1, [lr]
  406ca8:	3701      	adds	r7, #1
  406caa:	b288      	uxth	r0, r1
  406cac:	42be      	cmp	r6, r7
  406cae:	ea4f 4111 	mov.w	r1, r1, lsr #16
  406cb2:	fb02 3300 	mla	r3, r2, r0, r3
  406cb6:	fb02 f101 	mul.w	r1, r2, r1
  406cba:	b298      	uxth	r0, r3
  406cbc:	eb01 4313 	add.w	r3, r1, r3, lsr #16
  406cc0:	eb00 4103 	add.w	r1, r0, r3, lsl #16
  406cc4:	ea4f 4313 	mov.w	r3, r3, lsr #16
  406cc8:	f84e 1b04 	str.w	r1, [lr], #4
  406ccc:	dcea      	bgt.n	406ca4 <__multadd+0x10>
  406cce:	b13b      	cbz	r3, 406ce0 <__multadd+0x4c>
  406cd0:	68a2      	ldr	r2, [r4, #8]
  406cd2:	4296      	cmp	r6, r2
  406cd4:	da07      	bge.n	406ce6 <__multadd+0x52>
  406cd6:	eb04 0286 	add.w	r2, r4, r6, lsl #2
  406cda:	3601      	adds	r6, #1
  406cdc:	6153      	str	r3, [r2, #20]
  406cde:	6126      	str	r6, [r4, #16]
  406ce0:	4620      	mov	r0, r4
  406ce2:	b003      	add	sp, #12
  406ce4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  406ce6:	6861      	ldr	r1, [r4, #4]
  406ce8:	4628      	mov	r0, r5
  406cea:	9301      	str	r3, [sp, #4]
  406cec:	3101      	adds	r1, #1
  406cee:	f7ff ff9f 	bl	406c30 <_Balloc>
  406cf2:	6922      	ldr	r2, [r4, #16]
  406cf4:	f104 010c 	add.w	r1, r4, #12
  406cf8:	4607      	mov	r7, r0
  406cfa:	3202      	adds	r2, #2
  406cfc:	300c      	adds	r0, #12
  406cfe:	0092      	lsls	r2, r2, #2
  406d00:	f7ff fe96 	bl	406a30 <memcpy>
  406d04:	6cea      	ldr	r2, [r5, #76]	; 0x4c
  406d06:	6861      	ldr	r1, [r4, #4]
  406d08:	9b01      	ldr	r3, [sp, #4]
  406d0a:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
  406d0e:	6020      	str	r0, [r4, #0]
  406d10:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
  406d14:	463c      	mov	r4, r7
  406d16:	e7de      	b.n	406cd6 <__multadd+0x42>

00406d18 <__hi0bits>:
  406d18:	4b0f      	ldr	r3, [pc, #60]	; (406d58 <__hi0bits+0x40>)
  406d1a:	4003      	ands	r3, r0
  406d1c:	b9b3      	cbnz	r3, 406d4c <__hi0bits+0x34>
  406d1e:	0400      	lsls	r0, r0, #16
  406d20:	2310      	movs	r3, #16
  406d22:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
  406d26:	d101      	bne.n	406d2c <__hi0bits+0x14>
  406d28:	3308      	adds	r3, #8
  406d2a:	0200      	lsls	r0, r0, #8
  406d2c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
  406d30:	d101      	bne.n	406d36 <__hi0bits+0x1e>
  406d32:	3304      	adds	r3, #4
  406d34:	0100      	lsls	r0, r0, #4
  406d36:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
  406d3a:	d101      	bne.n	406d40 <__hi0bits+0x28>
  406d3c:	3302      	adds	r3, #2
  406d3e:	0080      	lsls	r0, r0, #2
  406d40:	2800      	cmp	r0, #0
  406d42:	db07      	blt.n	406d54 <__hi0bits+0x3c>
  406d44:	0042      	lsls	r2, r0, #1
  406d46:	d403      	bmi.n	406d50 <__hi0bits+0x38>
  406d48:	2020      	movs	r0, #32
  406d4a:	4770      	bx	lr
  406d4c:	2300      	movs	r3, #0
  406d4e:	e7e8      	b.n	406d22 <__hi0bits+0xa>
  406d50:	1c58      	adds	r0, r3, #1
  406d52:	4770      	bx	lr
  406d54:	4618      	mov	r0, r3
  406d56:	4770      	bx	lr
  406d58:	ffff0000 	.word	0xffff0000

00406d5c <__lo0bits>:
  406d5c:	6803      	ldr	r3, [r0, #0]
  406d5e:	f013 0207 	ands.w	r2, r3, #7
  406d62:	d008      	beq.n	406d76 <__lo0bits+0x1a>
  406d64:	07d9      	lsls	r1, r3, #31
  406d66:	d422      	bmi.n	406dae <__lo0bits+0x52>
  406d68:	079a      	lsls	r2, r3, #30
  406d6a:	d423      	bmi.n	406db4 <__lo0bits+0x58>
  406d6c:	089b      	lsrs	r3, r3, #2
  406d6e:	2202      	movs	r2, #2
  406d70:	6003      	str	r3, [r0, #0]
  406d72:	4610      	mov	r0, r2
  406d74:	4770      	bx	lr
  406d76:	b299      	uxth	r1, r3
  406d78:	b909      	cbnz	r1, 406d7e <__lo0bits+0x22>
  406d7a:	0c1b      	lsrs	r3, r3, #16
  406d7c:	2210      	movs	r2, #16
  406d7e:	f013 0fff 	tst.w	r3, #255	; 0xff
  406d82:	d101      	bne.n	406d88 <__lo0bits+0x2c>
  406d84:	3208      	adds	r2, #8
  406d86:	0a1b      	lsrs	r3, r3, #8
  406d88:	0719      	lsls	r1, r3, #28
  406d8a:	d101      	bne.n	406d90 <__lo0bits+0x34>
  406d8c:	3204      	adds	r2, #4
  406d8e:	091b      	lsrs	r3, r3, #4
  406d90:	0799      	lsls	r1, r3, #30
  406d92:	d101      	bne.n	406d98 <__lo0bits+0x3c>
  406d94:	3202      	adds	r2, #2
  406d96:	089b      	lsrs	r3, r3, #2
  406d98:	07d9      	lsls	r1, r3, #31
  406d9a:	d405      	bmi.n	406da8 <__lo0bits+0x4c>
  406d9c:	085b      	lsrs	r3, r3, #1
  406d9e:	d102      	bne.n	406da6 <__lo0bits+0x4a>
  406da0:	2220      	movs	r2, #32
  406da2:	4610      	mov	r0, r2
  406da4:	4770      	bx	lr
  406da6:	3201      	adds	r2, #1
  406da8:	6003      	str	r3, [r0, #0]
  406daa:	4610      	mov	r0, r2
  406dac:	4770      	bx	lr
  406dae:	2200      	movs	r2, #0
  406db0:	4610      	mov	r0, r2
  406db2:	4770      	bx	lr
  406db4:	085b      	lsrs	r3, r3, #1
  406db6:	2201      	movs	r2, #1
  406db8:	6003      	str	r3, [r0, #0]
  406dba:	4610      	mov	r0, r2
  406dbc:	4770      	bx	lr
  406dbe:	bf00      	nop

00406dc0 <__i2b>:
  406dc0:	b510      	push	{r4, lr}
  406dc2:	460c      	mov	r4, r1
  406dc4:	2101      	movs	r1, #1
  406dc6:	f7ff ff33 	bl	406c30 <_Balloc>
  406dca:	2201      	movs	r2, #1
  406dcc:	6144      	str	r4, [r0, #20]
  406dce:	6102      	str	r2, [r0, #16]
  406dd0:	bd10      	pop	{r4, pc}
  406dd2:	bf00      	nop

00406dd4 <__multiply>:
  406dd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  406dd8:	690e      	ldr	r6, [r1, #16]
  406dda:	b085      	sub	sp, #20
  406ddc:	6915      	ldr	r5, [r2, #16]
  406dde:	460c      	mov	r4, r1
  406de0:	4691      	mov	r9, r2
  406de2:	42ae      	cmp	r6, r5
  406de4:	f2c0 8094 	blt.w	406f10 <__multiply+0x13c>
  406de8:	462b      	mov	r3, r5
  406dea:	4635      	mov	r5, r6
  406dec:	461e      	mov	r6, r3
  406dee:	eb05 0806 	add.w	r8, r5, r6
  406df2:	68a3      	ldr	r3, [r4, #8]
  406df4:	6861      	ldr	r1, [r4, #4]
  406df6:	4598      	cmp	r8, r3
  406df8:	dd00      	ble.n	406dfc <__multiply+0x28>
  406dfa:	3101      	adds	r1, #1
  406dfc:	f7ff ff18 	bl	406c30 <_Balloc>
  406e00:	f100 0a14 	add.w	sl, r0, #20
  406e04:	9001      	str	r0, [sp, #4]
  406e06:	eb0a 0b88 	add.w	fp, sl, r8, lsl #2
  406e0a:	45da      	cmp	sl, fp
  406e0c:	d205      	bcs.n	406e1a <__multiply+0x46>
  406e0e:	4653      	mov	r3, sl
  406e10:	2100      	movs	r1, #0
  406e12:	f843 1b04 	str.w	r1, [r3], #4
  406e16:	459b      	cmp	fp, r3
  406e18:	d8fb      	bhi.n	406e12 <__multiply+0x3e>
  406e1a:	f109 0914 	add.w	r9, r9, #20
  406e1e:	f104 0314 	add.w	r3, r4, #20
  406e22:	eb09 0286 	add.w	r2, r9, r6, lsl #2
  406e26:	eb03 0c85 	add.w	ip, r3, r5, lsl #2
  406e2a:	4591      	cmp	r9, r2
  406e2c:	d25b      	bcs.n	406ee6 <__multiply+0x112>
  406e2e:	f8cd b008 	str.w	fp, [sp, #8]
  406e32:	4693      	mov	fp, r2
  406e34:	f8cd 800c 	str.w	r8, [sp, #12]
  406e38:	4698      	mov	r8, r3
  406e3a:	f859 6b04 	ldr.w	r6, [r9], #4
  406e3e:	fa1f fe86 	uxth.w	lr, r6
  406e42:	f1be 0f00 	cmp.w	lr, #0
  406e46:	d021      	beq.n	406e8c <__multiply+0xb8>
  406e48:	4647      	mov	r7, r8
  406e4a:	4656      	mov	r6, sl
  406e4c:	2100      	movs	r1, #0
  406e4e:	e000      	b.n	406e52 <__multiply+0x7e>
  406e50:	4626      	mov	r6, r4
  406e52:	f857 2b04 	ldr.w	r2, [r7], #4
  406e56:	4634      	mov	r4, r6
  406e58:	6835      	ldr	r5, [r6, #0]
  406e5a:	b290      	uxth	r0, r2
  406e5c:	45bc      	cmp	ip, r7
  406e5e:	b2ab      	uxth	r3, r5
  406e60:	ea4f 4212 	mov.w	r2, r2, lsr #16
  406e64:	fb0e 3000 	mla	r0, lr, r0, r3
  406e68:	ea4f 4315 	mov.w	r3, r5, lsr #16
  406e6c:	4401      	add	r1, r0
  406e6e:	fb0e 3302 	mla	r3, lr, r2, r3
  406e72:	b28a      	uxth	r2, r1
  406e74:	eb03 4111 	add.w	r1, r3, r1, lsr #16
  406e78:	ea42 4301 	orr.w	r3, r2, r1, lsl #16
  406e7c:	ea4f 4111 	mov.w	r1, r1, lsr #16
  406e80:	f844 3b04 	str.w	r3, [r4], #4
  406e84:	d8e4      	bhi.n	406e50 <__multiply+0x7c>
  406e86:	6071      	str	r1, [r6, #4]
  406e88:	f859 6c04 	ldr.w	r6, [r9, #-4]
  406e8c:	0c36      	lsrs	r6, r6, #16
  406e8e:	d022      	beq.n	406ed6 <__multiply+0x102>
  406e90:	f8da 3000 	ldr.w	r3, [sl]
  406e94:	2700      	movs	r7, #0
  406e96:	4655      	mov	r5, sl
  406e98:	4640      	mov	r0, r8
  406e9a:	461a      	mov	r2, r3
  406e9c:	46be      	mov	lr, r7
  406e9e:	e000      	b.n	406ea2 <__multiply+0xce>
  406ea0:	4625      	mov	r5, r4
  406ea2:	8807      	ldrh	r7, [r0, #0]
  406ea4:	0c12      	lsrs	r2, r2, #16
  406ea6:	b299      	uxth	r1, r3
  406ea8:	462c      	mov	r4, r5
  406eaa:	fb06 2207 	mla	r2, r6, r7, r2
  406eae:	eb02 070e 	add.w	r7, r2, lr
  406eb2:	ea41 4307 	orr.w	r3, r1, r7, lsl #16
  406eb6:	f844 3b04 	str.w	r3, [r4], #4
  406eba:	f850 1b04 	ldr.w	r1, [r0], #4
  406ebe:	686a      	ldr	r2, [r5, #4]
  406ec0:	0c09      	lsrs	r1, r1, #16
  406ec2:	4584      	cmp	ip, r0
  406ec4:	b293      	uxth	r3, r2
  406ec6:	fb06 3101 	mla	r1, r6, r1, r3
  406eca:	eb01 4317 	add.w	r3, r1, r7, lsr #16
  406ece:	ea4f 4e13 	mov.w	lr, r3, lsr #16
  406ed2:	d8e5      	bhi.n	406ea0 <__multiply+0xcc>
  406ed4:	606b      	str	r3, [r5, #4]
  406ed6:	45cb      	cmp	fp, r9
  406ed8:	f10a 0a04 	add.w	sl, sl, #4
  406edc:	d8ad      	bhi.n	406e3a <__multiply+0x66>
  406ede:	f8dd b008 	ldr.w	fp, [sp, #8]
  406ee2:	f8dd 800c 	ldr.w	r8, [sp, #12]
  406ee6:	f1b8 0f00 	cmp.w	r8, #0
  406eea:	dd0b      	ble.n	406f04 <__multiply+0x130>
  406eec:	f85b 3c04 	ldr.w	r3, [fp, #-4]
  406ef0:	f1ab 0b04 	sub.w	fp, fp, #4
  406ef4:	b11b      	cbz	r3, 406efe <__multiply+0x12a>
  406ef6:	e005      	b.n	406f04 <__multiply+0x130>
  406ef8:	f85b 3d04 	ldr.w	r3, [fp, #-4]!
  406efc:	b913      	cbnz	r3, 406f04 <__multiply+0x130>
  406efe:	f1b8 0801 	subs.w	r8, r8, #1
  406f02:	d1f9      	bne.n	406ef8 <__multiply+0x124>
  406f04:	9801      	ldr	r0, [sp, #4]
  406f06:	f8c0 8010 	str.w	r8, [r0, #16]
  406f0a:	b005      	add	sp, #20
  406f0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406f10:	4614      	mov	r4, r2
  406f12:	4689      	mov	r9, r1
  406f14:	e76b      	b.n	406dee <__multiply+0x1a>
  406f16:	bf00      	nop

00406f18 <__pow5mult>:
  406f18:	f012 0303 	ands.w	r3, r2, #3
  406f1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  406f20:	4614      	mov	r4, r2
  406f22:	4607      	mov	r7, r0
  406f24:	460e      	mov	r6, r1
  406f26:	d12d      	bne.n	406f84 <__pow5mult+0x6c>
  406f28:	10a4      	asrs	r4, r4, #2
  406f2a:	d01c      	beq.n	406f66 <__pow5mult+0x4e>
  406f2c:	6cbd      	ldr	r5, [r7, #72]	; 0x48
  406f2e:	b395      	cbz	r5, 406f96 <__pow5mult+0x7e>
  406f30:	07e3      	lsls	r3, r4, #31
  406f32:	f04f 0800 	mov.w	r8, #0
  406f36:	d406      	bmi.n	406f46 <__pow5mult+0x2e>
  406f38:	1064      	asrs	r4, r4, #1
  406f3a:	d014      	beq.n	406f66 <__pow5mult+0x4e>
  406f3c:	6828      	ldr	r0, [r5, #0]
  406f3e:	b1a8      	cbz	r0, 406f6c <__pow5mult+0x54>
  406f40:	4605      	mov	r5, r0
  406f42:	07e3      	lsls	r3, r4, #31
  406f44:	d5f8      	bpl.n	406f38 <__pow5mult+0x20>
  406f46:	4638      	mov	r0, r7
  406f48:	4631      	mov	r1, r6
  406f4a:	462a      	mov	r2, r5
  406f4c:	f7ff ff42 	bl	406dd4 <__multiply>
  406f50:	b1b6      	cbz	r6, 406f80 <__pow5mult+0x68>
  406f52:	6872      	ldr	r2, [r6, #4]
  406f54:	1064      	asrs	r4, r4, #1
  406f56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  406f58:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  406f5c:	6031      	str	r1, [r6, #0]
  406f5e:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
  406f62:	4606      	mov	r6, r0
  406f64:	d1ea      	bne.n	406f3c <__pow5mult+0x24>
  406f66:	4630      	mov	r0, r6
  406f68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  406f6c:	4629      	mov	r1, r5
  406f6e:	462a      	mov	r2, r5
  406f70:	4638      	mov	r0, r7
  406f72:	f7ff ff2f 	bl	406dd4 <__multiply>
  406f76:	6028      	str	r0, [r5, #0]
  406f78:	f8c0 8000 	str.w	r8, [r0]
  406f7c:	4605      	mov	r5, r0
  406f7e:	e7e0      	b.n	406f42 <__pow5mult+0x2a>
  406f80:	4606      	mov	r6, r0
  406f82:	e7d9      	b.n	406f38 <__pow5mult+0x20>
  406f84:	1e5a      	subs	r2, r3, #1
  406f86:	4d0b      	ldr	r5, [pc, #44]	; (406fb4 <__pow5mult+0x9c>)
  406f88:	2300      	movs	r3, #0
  406f8a:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
  406f8e:	f7ff fe81 	bl	406c94 <__multadd>
  406f92:	4606      	mov	r6, r0
  406f94:	e7c8      	b.n	406f28 <__pow5mult+0x10>
  406f96:	2101      	movs	r1, #1
  406f98:	4638      	mov	r0, r7
  406f9a:	f7ff fe49 	bl	406c30 <_Balloc>
  406f9e:	f240 2171 	movw	r1, #625	; 0x271
  406fa2:	2201      	movs	r2, #1
  406fa4:	2300      	movs	r3, #0
  406fa6:	6141      	str	r1, [r0, #20]
  406fa8:	4605      	mov	r5, r0
  406faa:	6102      	str	r2, [r0, #16]
  406fac:	64b8      	str	r0, [r7, #72]	; 0x48
  406fae:	6003      	str	r3, [r0, #0]
  406fb0:	e7be      	b.n	406f30 <__pow5mult+0x18>
  406fb2:	bf00      	nop
  406fb4:	00408c80 	.word	0x00408c80

00406fb8 <__lshift>:
  406fb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  406fbc:	690e      	ldr	r6, [r1, #16]
  406fbe:	ea4f 1962 	mov.w	r9, r2, asr #5
  406fc2:	688b      	ldr	r3, [r1, #8]
  406fc4:	460d      	mov	r5, r1
  406fc6:	444e      	add	r6, r9
  406fc8:	4690      	mov	r8, r2
  406fca:	4607      	mov	r7, r0
  406fcc:	6849      	ldr	r1, [r1, #4]
  406fce:	1c74      	adds	r4, r6, #1
  406fd0:	429c      	cmp	r4, r3
  406fd2:	dd03      	ble.n	406fdc <__lshift+0x24>
  406fd4:	005b      	lsls	r3, r3, #1
  406fd6:	3101      	adds	r1, #1
  406fd8:	429c      	cmp	r4, r3
  406fda:	dcfb      	bgt.n	406fd4 <__lshift+0x1c>
  406fdc:	4638      	mov	r0, r7
  406fde:	f7ff fe27 	bl	406c30 <_Balloc>
  406fe2:	f1b9 0f00 	cmp.w	r9, #0
  406fe6:	4684      	mov	ip, r0
  406fe8:	f100 0114 	add.w	r1, r0, #20
  406fec:	dd09      	ble.n	407002 <__lshift+0x4a>
  406fee:	2300      	movs	r3, #0
  406ff0:	460a      	mov	r2, r1
  406ff2:	4618      	mov	r0, r3
  406ff4:	3301      	adds	r3, #1
  406ff6:	f842 0b04 	str.w	r0, [r2], #4
  406ffa:	454b      	cmp	r3, r9
  406ffc:	d1fa      	bne.n	406ff4 <__lshift+0x3c>
  406ffe:	eb01 0183 	add.w	r1, r1, r3, lsl #2
  407002:	692a      	ldr	r2, [r5, #16]
  407004:	f105 0314 	add.w	r3, r5, #20
  407008:	eb03 0e82 	add.w	lr, r3, r2, lsl #2
  40700c:	f018 021f 	ands.w	r2, r8, #31
  407010:	d023      	beq.n	40705a <__lshift+0xa2>
  407012:	f1c2 0920 	rsb	r9, r2, #32
  407016:	f04f 0a00 	mov.w	sl, #0
  40701a:	6818      	ldr	r0, [r3, #0]
  40701c:	4688      	mov	r8, r1
  40701e:	4090      	lsls	r0, r2
  407020:	ea4a 0000 	orr.w	r0, sl, r0
  407024:	f841 0b04 	str.w	r0, [r1], #4
  407028:	f853 0b04 	ldr.w	r0, [r3], #4
  40702c:	459e      	cmp	lr, r3
  40702e:	fa20 fa09 	lsr.w	sl, r0, r9
  407032:	d8f2      	bhi.n	40701a <__lshift+0x62>
  407034:	f8c8 a004 	str.w	sl, [r8, #4]
  407038:	f1ba 0f00 	cmp.w	sl, #0
  40703c:	d000      	beq.n	407040 <__lshift+0x88>
  40703e:	1cb4      	adds	r4, r6, #2
  407040:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  407042:	3c01      	subs	r4, #1
  407044:	686a      	ldr	r2, [r5, #4]
  407046:	4660      	mov	r0, ip
  407048:	f8cc 4010 	str.w	r4, [ip, #16]
  40704c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  407050:	6029      	str	r1, [r5, #0]
  407052:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
  407056:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40705a:	3904      	subs	r1, #4
  40705c:	f853 2b04 	ldr.w	r2, [r3], #4
  407060:	459e      	cmp	lr, r3
  407062:	f841 2f04 	str.w	r2, [r1, #4]!
  407066:	d8f9      	bhi.n	40705c <__lshift+0xa4>
  407068:	e7ea      	b.n	407040 <__lshift+0x88>
  40706a:	bf00      	nop

0040706c <__mcmp>:
  40706c:	6902      	ldr	r2, [r0, #16]
  40706e:	690b      	ldr	r3, [r1, #16]
  407070:	1ad2      	subs	r2, r2, r3
  407072:	d113      	bne.n	40709c <__mcmp+0x30>
  407074:	009a      	lsls	r2, r3, #2
  407076:	3014      	adds	r0, #20
  407078:	3114      	adds	r1, #20
  40707a:	1883      	adds	r3, r0, r2
  40707c:	4411      	add	r1, r2
  40707e:	b410      	push	{r4}
  407080:	e001      	b.n	407086 <__mcmp+0x1a>
  407082:	4298      	cmp	r0, r3
  407084:	d20c      	bcs.n	4070a0 <__mcmp+0x34>
  407086:	f853 4d04 	ldr.w	r4, [r3, #-4]!
  40708a:	f851 2d04 	ldr.w	r2, [r1, #-4]!
  40708e:	4294      	cmp	r4, r2
  407090:	d0f7      	beq.n	407082 <__mcmp+0x16>
  407092:	d309      	bcc.n	4070a8 <__mcmp+0x3c>
  407094:	2001      	movs	r0, #1
  407096:	f85d 4b04 	ldr.w	r4, [sp], #4
  40709a:	4770      	bx	lr
  40709c:	4610      	mov	r0, r2
  40709e:	4770      	bx	lr
  4070a0:	2000      	movs	r0, #0
  4070a2:	f85d 4b04 	ldr.w	r4, [sp], #4
  4070a6:	4770      	bx	lr
  4070a8:	f04f 30ff 	mov.w	r0, #4294967295
  4070ac:	f85d 4b04 	ldr.w	r4, [sp], #4
  4070b0:	4770      	bx	lr
  4070b2:	bf00      	nop

004070b4 <__mdiff>:
  4070b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4070b8:	460c      	mov	r4, r1
  4070ba:	4605      	mov	r5, r0
  4070bc:	4611      	mov	r1, r2
  4070be:	4617      	mov	r7, r2
  4070c0:	4620      	mov	r0, r4
  4070c2:	f7ff ffd3 	bl	40706c <__mcmp>
  4070c6:	1e06      	subs	r6, r0, #0
  4070c8:	d05c      	beq.n	407184 <__mdiff+0xd0>
  4070ca:	db55      	blt.n	407178 <__mdiff+0xc4>
  4070cc:	f04f 0800 	mov.w	r8, #0
  4070d0:	6861      	ldr	r1, [r4, #4]
  4070d2:	4628      	mov	r0, r5
  4070d4:	f7ff fdac 	bl	406c30 <_Balloc>
  4070d8:	f107 0514 	add.w	r5, r7, #20
  4070dc:	693b      	ldr	r3, [r7, #16]
  4070de:	f104 0114 	add.w	r1, r4, #20
  4070e2:	6926      	ldr	r6, [r4, #16]
  4070e4:	4684      	mov	ip, r0
  4070e6:	eb05 0e83 	add.w	lr, r5, r3, lsl #2
  4070ea:	f100 0414 	add.w	r4, r0, #20
  4070ee:	eb01 0786 	add.w	r7, r1, r6, lsl #2
  4070f2:	2300      	movs	r3, #0
  4070f4:	f8c0 800c 	str.w	r8, [r0, #12]
  4070f8:	f851 9b04 	ldr.w	r9, [r1], #4
  4070fc:	f855 2b04 	ldr.w	r2, [r5], #4
  407100:	fa13 f889 	uxtah	r8, r3, r9
  407104:	4608      	mov	r0, r1
  407106:	b293      	uxth	r3, r2
  407108:	45ae      	cmp	lr, r5
  40710a:	ea4f 4212 	mov.w	r2, r2, lsr #16
  40710e:	ebc3 0308 	rsb	r3, r3, r8
  407112:	ebc2 4219 	rsb	r2, r2, r9, lsr #16
  407116:	fa1f f883 	uxth.w	r8, r3
  40711a:	eb02 4323 	add.w	r3, r2, r3, asr #16
  40711e:	ea48 4203 	orr.w	r2, r8, r3, lsl #16
  407122:	ea4f 4323 	mov.w	r3, r3, asr #16
  407126:	f844 2b04 	str.w	r2, [r4], #4
  40712a:	d8e5      	bhi.n	4070f8 <__mdiff+0x44>
  40712c:	428f      	cmp	r7, r1
  40712e:	4625      	mov	r5, r4
  407130:	d916      	bls.n	407160 <__mdiff+0xac>
  407132:	f850 2b04 	ldr.w	r2, [r0], #4
  407136:	fa13 f382 	uxtah	r3, r3, r2
  40713a:	0c12      	lsrs	r2, r2, #16
  40713c:	4287      	cmp	r7, r0
  40713e:	fa1f fe83 	uxth.w	lr, r3
  407142:	eb02 4323 	add.w	r3, r2, r3, asr #16
  407146:	ea4e 4203 	orr.w	r2, lr, r3, lsl #16
  40714a:	ea4f 4323 	mov.w	r3, r3, asr #16
  40714e:	f844 2b04 	str.w	r2, [r4], #4
  407152:	d8ee      	bhi.n	407132 <__mdiff+0x7e>
  407154:	43c9      	mvns	r1, r1
  407156:	4439      	add	r1, r7
  407158:	f021 0403 	bic.w	r4, r1, #3
  40715c:	3404      	adds	r4, #4
  40715e:	442c      	add	r4, r5
  407160:	3c04      	subs	r4, #4
  407162:	b922      	cbnz	r2, 40716e <__mdiff+0xba>
  407164:	f854 3d04 	ldr.w	r3, [r4, #-4]!
  407168:	3e01      	subs	r6, #1
  40716a:	2b00      	cmp	r3, #0
  40716c:	d0fa      	beq.n	407164 <__mdiff+0xb0>
  40716e:	4660      	mov	r0, ip
  407170:	f8cc 6010 	str.w	r6, [ip, #16]
  407174:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  407178:	4623      	mov	r3, r4
  40717a:	f04f 0801 	mov.w	r8, #1
  40717e:	463c      	mov	r4, r7
  407180:	461f      	mov	r7, r3
  407182:	e7a5      	b.n	4070d0 <__mdiff+0x1c>
  407184:	4628      	mov	r0, r5
  407186:	4631      	mov	r1, r6
  407188:	f7ff fd52 	bl	406c30 <_Balloc>
  40718c:	2201      	movs	r2, #1
  40718e:	4603      	mov	r3, r0
  407190:	6146      	str	r6, [r0, #20]
  407192:	611a      	str	r2, [r3, #16]
  407194:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00407198 <__d2b>:
  407198:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40719c:	461c      	mov	r4, r3
  40719e:	b082      	sub	sp, #8
  4071a0:	2101      	movs	r1, #1
  4071a2:	4616      	mov	r6, r2
  4071a4:	f3c4 550a 	ubfx	r5, r4, #20, #11
  4071a8:	f7ff fd42 	bl	406c30 <_Balloc>
  4071ac:	f3c4 0413 	ubfx	r4, r4, #0, #20
  4071b0:	4607      	mov	r7, r0
  4071b2:	b10d      	cbz	r5, 4071b8 <__d2b+0x20>
  4071b4:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
  4071b8:	9401      	str	r4, [sp, #4]
  4071ba:	b30e      	cbz	r6, 407200 <__d2b+0x68>
  4071bc:	a802      	add	r0, sp, #8
  4071be:	f840 6d08 	str.w	r6, [r0, #-8]!
  4071c2:	f7ff fdcb 	bl	406d5c <__lo0bits>
  4071c6:	2800      	cmp	r0, #0
  4071c8:	d132      	bne.n	407230 <__d2b+0x98>
  4071ca:	e89d 000c 	ldmia.w	sp, {r2, r3}
  4071ce:	617a      	str	r2, [r7, #20]
  4071d0:	2b00      	cmp	r3, #0
  4071d2:	61bb      	str	r3, [r7, #24]
  4071d4:	bf14      	ite	ne
  4071d6:	2402      	movne	r4, #2
  4071d8:	2401      	moveq	r4, #1
  4071da:	613c      	str	r4, [r7, #16]
  4071dc:	b9dd      	cbnz	r5, 407216 <__d2b+0x7e>
  4071de:	eb07 0384 	add.w	r3, r7, r4, lsl #2
  4071e2:	9a08      	ldr	r2, [sp, #32]
  4071e4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
  4071e8:	6010      	str	r0, [r2, #0]
  4071ea:	6918      	ldr	r0, [r3, #16]
  4071ec:	f7ff fd94 	bl	406d18 <__hi0bits>
  4071f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4071f2:	ebc0 1044 	rsb	r0, r0, r4, lsl #5
  4071f6:	6018      	str	r0, [r3, #0]
  4071f8:	4638      	mov	r0, r7
  4071fa:	b002      	add	sp, #8
  4071fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  407200:	a801      	add	r0, sp, #4
  407202:	f7ff fdab 	bl	406d5c <__lo0bits>
  407206:	2301      	movs	r3, #1
  407208:	9a01      	ldr	r2, [sp, #4]
  40720a:	3020      	adds	r0, #32
  40720c:	461c      	mov	r4, r3
  40720e:	613b      	str	r3, [r7, #16]
  407210:	617a      	str	r2, [r7, #20]
  407212:	2d00      	cmp	r5, #0
  407214:	d0e3      	beq.n	4071de <__d2b+0x46>
  407216:	f2a5 4833 	subw	r8, r5, #1075	; 0x433
  40721a:	f1c0 0335 	rsb	r3, r0, #53	; 0x35
  40721e:	9a08      	ldr	r2, [sp, #32]
  407220:	4440      	add	r0, r8
  407222:	6010      	str	r0, [r2, #0]
  407224:	4638      	mov	r0, r7
  407226:	9a09      	ldr	r2, [sp, #36]	; 0x24
  407228:	6013      	str	r3, [r2, #0]
  40722a:	b002      	add	sp, #8
  40722c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  407230:	9b01      	ldr	r3, [sp, #4]
  407232:	f1c0 0120 	rsb	r1, r0, #32
  407236:	9a00      	ldr	r2, [sp, #0]
  407238:	fa03 f101 	lsl.w	r1, r3, r1
  40723c:	40c3      	lsrs	r3, r0
  40723e:	430a      	orrs	r2, r1
  407240:	9301      	str	r3, [sp, #4]
  407242:	617a      	str	r2, [r7, #20]
  407244:	e7c4      	b.n	4071d0 <__d2b+0x38>
  407246:	bf00      	nop

00407248 <_realloc_r>:
  407248:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40724c:	4617      	mov	r7, r2
  40724e:	b083      	sub	sp, #12
  407250:	460e      	mov	r6, r1
  407252:	2900      	cmp	r1, #0
  407254:	f000 80e2 	beq.w	40741c <_realloc_r+0x1d4>
  407258:	f107 040b 	add.w	r4, r7, #11
  40725c:	4681      	mov	r9, r0
  40725e:	f7ff fce3 	bl	406c28 <__malloc_lock>
  407262:	f856 3c04 	ldr.w	r3, [r6, #-4]
  407266:	2c16      	cmp	r4, #22
  407268:	f1a6 0808 	sub.w	r8, r6, #8
  40726c:	f023 0503 	bic.w	r5, r3, #3
  407270:	d850      	bhi.n	407314 <_realloc_r+0xcc>
  407272:	2210      	movs	r2, #16
  407274:	2100      	movs	r1, #0
  407276:	4614      	mov	r4, r2
  407278:	42bc      	cmp	r4, r7
  40727a:	f0c0 80dc 	bcc.w	407436 <_realloc_r+0x1ee>
  40727e:	2900      	cmp	r1, #0
  407280:	f040 80d9 	bne.w	407436 <_realloc_r+0x1ee>
  407284:	4295      	cmp	r5, r2
  407286:	da4a      	bge.n	40731e <_realloc_r+0xd6>
  407288:	f8df b3a8 	ldr.w	fp, [pc, #936]	; 407634 <_realloc_r+0x3ec>
  40728c:	eb08 0105 	add.w	r1, r8, r5
  407290:	f8db 0008 	ldr.w	r0, [fp, #8]
  407294:	4288      	cmp	r0, r1
  407296:	f000 80d3 	beq.w	407440 <_realloc_r+0x1f8>
  40729a:	6848      	ldr	r0, [r1, #4]
  40729c:	f020 0e01 	bic.w	lr, r0, #1
  4072a0:	448e      	add	lr, r1
  4072a2:	f8de e004 	ldr.w	lr, [lr, #4]
  4072a6:	f01e 0f01 	tst.w	lr, #1
  4072aa:	d14e      	bne.n	40734a <_realloc_r+0x102>
  4072ac:	f020 0003 	bic.w	r0, r0, #3
  4072b0:	4428      	add	r0, r5
  4072b2:	4290      	cmp	r0, r2
  4072b4:	f280 80b8 	bge.w	407428 <_realloc_r+0x1e0>
  4072b8:	07db      	lsls	r3, r3, #31
  4072ba:	f100 808b 	bmi.w	4073d4 <_realloc_r+0x18c>
  4072be:	f856 3c08 	ldr.w	r3, [r6, #-8]
  4072c2:	ebc3 0a08 	rsb	sl, r3, r8
  4072c6:	f8da 3004 	ldr.w	r3, [sl, #4]
  4072ca:	f023 0303 	bic.w	r3, r3, #3
  4072ce:	eb00 0e03 	add.w	lr, r0, r3
  4072d2:	4596      	cmp	lr, r2
  4072d4:	db43      	blt.n	40735e <_realloc_r+0x116>
  4072d6:	68cb      	ldr	r3, [r1, #12]
  4072d8:	4657      	mov	r7, sl
  4072da:	6889      	ldr	r1, [r1, #8]
  4072dc:	1f2a      	subs	r2, r5, #4
  4072de:	60cb      	str	r3, [r1, #12]
  4072e0:	2a24      	cmp	r2, #36	; 0x24
  4072e2:	6099      	str	r1, [r3, #8]
  4072e4:	f857 1f08 	ldr.w	r1, [r7, #8]!
  4072e8:	f8da 300c 	ldr.w	r3, [sl, #12]
  4072ec:	60cb      	str	r3, [r1, #12]
  4072ee:	6099      	str	r1, [r3, #8]
  4072f0:	f200 813c 	bhi.w	40756c <_realloc_r+0x324>
  4072f4:	2a13      	cmp	r2, #19
  4072f6:	f240 80fa 	bls.w	4074ee <_realloc_r+0x2a6>
  4072fa:	6833      	ldr	r3, [r6, #0]
  4072fc:	2a1b      	cmp	r2, #27
  4072fe:	f8ca 3008 	str.w	r3, [sl, #8]
  407302:	6873      	ldr	r3, [r6, #4]
  407304:	f8ca 300c 	str.w	r3, [sl, #12]
  407308:	f200 813b 	bhi.w	407582 <_realloc_r+0x33a>
  40730c:	3608      	adds	r6, #8
  40730e:	f10a 0310 	add.w	r3, sl, #16
  407312:	e0ed      	b.n	4074f0 <_realloc_r+0x2a8>
  407314:	f024 0407 	bic.w	r4, r4, #7
  407318:	4622      	mov	r2, r4
  40731a:	0fe1      	lsrs	r1, r4, #31
  40731c:	e7ac      	b.n	407278 <_realloc_r+0x30>
  40731e:	4637      	mov	r7, r6
  407320:	1b2a      	subs	r2, r5, r4
  407322:	f003 0301 	and.w	r3, r3, #1
  407326:	2a0f      	cmp	r2, #15
  407328:	d841      	bhi.n	4073ae <_realloc_r+0x166>
  40732a:	eb08 0205 	add.w	r2, r8, r5
  40732e:	431d      	orrs	r5, r3
  407330:	f8c8 5004 	str.w	r5, [r8, #4]
  407334:	6853      	ldr	r3, [r2, #4]
  407336:	f043 0301 	orr.w	r3, r3, #1
  40733a:	6053      	str	r3, [r2, #4]
  40733c:	4648      	mov	r0, r9
  40733e:	f7ff fc75 	bl	406c2c <__malloc_unlock>
  407342:	4638      	mov	r0, r7
  407344:	b003      	add	sp, #12
  407346:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40734a:	07d9      	lsls	r1, r3, #31
  40734c:	d442      	bmi.n	4073d4 <_realloc_r+0x18c>
  40734e:	f856 3c08 	ldr.w	r3, [r6, #-8]
  407352:	ebc3 0a08 	rsb	sl, r3, r8
  407356:	f8da 3004 	ldr.w	r3, [sl, #4]
  40735a:	f023 0303 	bic.w	r3, r3, #3
  40735e:	442b      	add	r3, r5
  407360:	4293      	cmp	r3, r2
  407362:	db37      	blt.n	4073d4 <_realloc_r+0x18c>
  407364:	4657      	mov	r7, sl
  407366:	1f2a      	subs	r2, r5, #4
  407368:	f8da 100c 	ldr.w	r1, [sl, #12]
  40736c:	f857 0f08 	ldr.w	r0, [r7, #8]!
  407370:	2a24      	cmp	r2, #36	; 0x24
  407372:	60c1      	str	r1, [r0, #12]
  407374:	6088      	str	r0, [r1, #8]
  407376:	f200 80c6 	bhi.w	407506 <_realloc_r+0x2be>
  40737a:	2a13      	cmp	r2, #19
  40737c:	f240 80ff 	bls.w	40757e <_realloc_r+0x336>
  407380:	6831      	ldr	r1, [r6, #0]
  407382:	2a1b      	cmp	r2, #27
  407384:	f8ca 1008 	str.w	r1, [sl, #8]
  407388:	6871      	ldr	r1, [r6, #4]
  40738a:	f8ca 100c 	str.w	r1, [sl, #12]
  40738e:	f200 810d 	bhi.w	4075ac <_realloc_r+0x364>
  407392:	3608      	adds	r6, #8
  407394:	f10a 0210 	add.w	r2, sl, #16
  407398:	6831      	ldr	r1, [r6, #0]
  40739a:	461d      	mov	r5, r3
  40739c:	46d0      	mov	r8, sl
  40739e:	6011      	str	r1, [r2, #0]
  4073a0:	6873      	ldr	r3, [r6, #4]
  4073a2:	6053      	str	r3, [r2, #4]
  4073a4:	68b3      	ldr	r3, [r6, #8]
  4073a6:	6093      	str	r3, [r2, #8]
  4073a8:	f8da 3004 	ldr.w	r3, [sl, #4]
  4073ac:	e7b8      	b.n	407320 <_realloc_r+0xd8>
  4073ae:	eb08 0504 	add.w	r5, r8, r4
  4073b2:	f042 0601 	orr.w	r6, r2, #1
  4073b6:	431c      	orrs	r4, r3
  4073b8:	4648      	mov	r0, r9
  4073ba:	442a      	add	r2, r5
  4073bc:	f105 0108 	add.w	r1, r5, #8
  4073c0:	f8c8 4004 	str.w	r4, [r8, #4]
  4073c4:	606e      	str	r6, [r5, #4]
  4073c6:	6853      	ldr	r3, [r2, #4]
  4073c8:	f043 0301 	orr.w	r3, r3, #1
  4073cc:	6053      	str	r3, [r2, #4]
  4073ce:	f7fe fd2b 	bl	405e28 <_free_r>
  4073d2:	e7b3      	b.n	40733c <_realloc_r+0xf4>
  4073d4:	4639      	mov	r1, r7
  4073d6:	4648      	mov	r0, r9
  4073d8:	f7ff f836 	bl	406448 <_malloc_r>
  4073dc:	4607      	mov	r7, r0
  4073de:	2800      	cmp	r0, #0
  4073e0:	d0ac      	beq.n	40733c <_realloc_r+0xf4>
  4073e2:	f856 3c04 	ldr.w	r3, [r6, #-4]
  4073e6:	f1a0 0108 	sub.w	r1, r0, #8
  4073ea:	f023 0201 	bic.w	r2, r3, #1
  4073ee:	4442      	add	r2, r8
  4073f0:	4291      	cmp	r1, r2
  4073f2:	f000 80b4 	beq.w	40755e <_realloc_r+0x316>
  4073f6:	1f2a      	subs	r2, r5, #4
  4073f8:	2a24      	cmp	r2, #36	; 0x24
  4073fa:	f200 80a1 	bhi.w	407540 <_realloc_r+0x2f8>
  4073fe:	2a13      	cmp	r2, #19
  407400:	d86a      	bhi.n	4074d8 <_realloc_r+0x290>
  407402:	4603      	mov	r3, r0
  407404:	4632      	mov	r2, r6
  407406:	6811      	ldr	r1, [r2, #0]
  407408:	6019      	str	r1, [r3, #0]
  40740a:	6851      	ldr	r1, [r2, #4]
  40740c:	6059      	str	r1, [r3, #4]
  40740e:	6892      	ldr	r2, [r2, #8]
  407410:	609a      	str	r2, [r3, #8]
  407412:	4631      	mov	r1, r6
  407414:	4648      	mov	r0, r9
  407416:	f7fe fd07 	bl	405e28 <_free_r>
  40741a:	e78f      	b.n	40733c <_realloc_r+0xf4>
  40741c:	4611      	mov	r1, r2
  40741e:	b003      	add	sp, #12
  407420:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  407424:	f7ff b810 	b.w	406448 <_malloc_r>
  407428:	68ca      	ldr	r2, [r1, #12]
  40742a:	4637      	mov	r7, r6
  40742c:	6889      	ldr	r1, [r1, #8]
  40742e:	4605      	mov	r5, r0
  407430:	60ca      	str	r2, [r1, #12]
  407432:	6091      	str	r1, [r2, #8]
  407434:	e774      	b.n	407320 <_realloc_r+0xd8>
  407436:	230c      	movs	r3, #12
  407438:	2000      	movs	r0, #0
  40743a:	f8c9 3000 	str.w	r3, [r9]
  40743e:	e781      	b.n	407344 <_realloc_r+0xfc>
  407440:	6841      	ldr	r1, [r0, #4]
  407442:	f104 0010 	add.w	r0, r4, #16
  407446:	f021 0103 	bic.w	r1, r1, #3
  40744a:	4429      	add	r1, r5
  40744c:	4281      	cmp	r1, r0
  40744e:	da63      	bge.n	407518 <_realloc_r+0x2d0>
  407450:	07db      	lsls	r3, r3, #31
  407452:	d4bf      	bmi.n	4073d4 <_realloc_r+0x18c>
  407454:	f856 3c08 	ldr.w	r3, [r6, #-8]
  407458:	ebc3 0a08 	rsb	sl, r3, r8
  40745c:	f8da 3004 	ldr.w	r3, [sl, #4]
  407460:	f023 0303 	bic.w	r3, r3, #3
  407464:	eb01 0c03 	add.w	ip, r1, r3
  407468:	4560      	cmp	r0, ip
  40746a:	f73f af78 	bgt.w	40735e <_realloc_r+0x116>
  40746e:	4657      	mov	r7, sl
  407470:	1f2a      	subs	r2, r5, #4
  407472:	f8da 300c 	ldr.w	r3, [sl, #12]
  407476:	f857 1f08 	ldr.w	r1, [r7, #8]!
  40747a:	2a24      	cmp	r2, #36	; 0x24
  40747c:	60cb      	str	r3, [r1, #12]
  40747e:	6099      	str	r1, [r3, #8]
  407480:	f200 80b8 	bhi.w	4075f4 <_realloc_r+0x3ac>
  407484:	2a13      	cmp	r2, #19
  407486:	f240 80a8 	bls.w	4075da <_realloc_r+0x392>
  40748a:	6833      	ldr	r3, [r6, #0]
  40748c:	2a1b      	cmp	r2, #27
  40748e:	f8ca 3008 	str.w	r3, [sl, #8]
  407492:	6873      	ldr	r3, [r6, #4]
  407494:	f8ca 300c 	str.w	r3, [sl, #12]
  407498:	f200 80b5 	bhi.w	407606 <_realloc_r+0x3be>
  40749c:	3608      	adds	r6, #8
  40749e:	f10a 0310 	add.w	r3, sl, #16
  4074a2:	6832      	ldr	r2, [r6, #0]
  4074a4:	601a      	str	r2, [r3, #0]
  4074a6:	6872      	ldr	r2, [r6, #4]
  4074a8:	605a      	str	r2, [r3, #4]
  4074aa:	68b2      	ldr	r2, [r6, #8]
  4074ac:	609a      	str	r2, [r3, #8]
  4074ae:	ebc4 030c 	rsb	r3, r4, ip
  4074b2:	eb0a 0204 	add.w	r2, sl, r4
  4074b6:	4648      	mov	r0, r9
  4074b8:	f043 0301 	orr.w	r3, r3, #1
  4074bc:	f8cb 2008 	str.w	r2, [fp, #8]
  4074c0:	6053      	str	r3, [r2, #4]
  4074c2:	f8da 3004 	ldr.w	r3, [sl, #4]
  4074c6:	f003 0301 	and.w	r3, r3, #1
  4074ca:	431c      	orrs	r4, r3
  4074cc:	f8ca 4004 	str.w	r4, [sl, #4]
  4074d0:	f7ff fbac 	bl	406c2c <__malloc_unlock>
  4074d4:	4638      	mov	r0, r7
  4074d6:	e735      	b.n	407344 <_realloc_r+0xfc>
  4074d8:	6833      	ldr	r3, [r6, #0]
  4074da:	2a1b      	cmp	r2, #27
  4074dc:	6003      	str	r3, [r0, #0]
  4074de:	6873      	ldr	r3, [r6, #4]
  4074e0:	6043      	str	r3, [r0, #4]
  4074e2:	d831      	bhi.n	407548 <_realloc_r+0x300>
  4074e4:	f100 0308 	add.w	r3, r0, #8
  4074e8:	f106 0208 	add.w	r2, r6, #8
  4074ec:	e78b      	b.n	407406 <_realloc_r+0x1be>
  4074ee:	463b      	mov	r3, r7
  4074f0:	6832      	ldr	r2, [r6, #0]
  4074f2:	4675      	mov	r5, lr
  4074f4:	46d0      	mov	r8, sl
  4074f6:	601a      	str	r2, [r3, #0]
  4074f8:	6872      	ldr	r2, [r6, #4]
  4074fa:	605a      	str	r2, [r3, #4]
  4074fc:	68b2      	ldr	r2, [r6, #8]
  4074fe:	609a      	str	r2, [r3, #8]
  407500:	f8da 3004 	ldr.w	r3, [sl, #4]
  407504:	e70c      	b.n	407320 <_realloc_r+0xd8>
  407506:	4631      	mov	r1, r6
  407508:	4638      	mov	r0, r7
  40750a:	461d      	mov	r5, r3
  40750c:	46d0      	mov	r8, sl
  40750e:	f7ff fb29 	bl	406b64 <memmove>
  407512:	f8da 3004 	ldr.w	r3, [sl, #4]
  407516:	e703      	b.n	407320 <_realloc_r+0xd8>
  407518:	1b0b      	subs	r3, r1, r4
  40751a:	eb08 0204 	add.w	r2, r8, r4
  40751e:	4648      	mov	r0, r9
  407520:	f043 0301 	orr.w	r3, r3, #1
  407524:	f8cb 2008 	str.w	r2, [fp, #8]
  407528:	6053      	str	r3, [r2, #4]
  40752a:	f856 3c04 	ldr.w	r3, [r6, #-4]
  40752e:	f003 0301 	and.w	r3, r3, #1
  407532:	431c      	orrs	r4, r3
  407534:	f846 4c04 	str.w	r4, [r6, #-4]
  407538:	f7ff fb78 	bl	406c2c <__malloc_unlock>
  40753c:	4630      	mov	r0, r6
  40753e:	e701      	b.n	407344 <_realloc_r+0xfc>
  407540:	4631      	mov	r1, r6
  407542:	f7ff fb0f 	bl	406b64 <memmove>
  407546:	e764      	b.n	407412 <_realloc_r+0x1ca>
  407548:	68b3      	ldr	r3, [r6, #8]
  40754a:	2a24      	cmp	r2, #36	; 0x24
  40754c:	6083      	str	r3, [r0, #8]
  40754e:	68f3      	ldr	r3, [r6, #12]
  407550:	60c3      	str	r3, [r0, #12]
  407552:	d022      	beq.n	40759a <_realloc_r+0x352>
  407554:	f100 0310 	add.w	r3, r0, #16
  407558:	f106 0210 	add.w	r2, r6, #16
  40755c:	e753      	b.n	407406 <_realloc_r+0x1be>
  40755e:	f850 2c04 	ldr.w	r2, [r0, #-4]
  407562:	4637      	mov	r7, r6
  407564:	f022 0203 	bic.w	r2, r2, #3
  407568:	4415      	add	r5, r2
  40756a:	e6d9      	b.n	407320 <_realloc_r+0xd8>
  40756c:	4631      	mov	r1, r6
  40756e:	4638      	mov	r0, r7
  407570:	4675      	mov	r5, lr
  407572:	46d0      	mov	r8, sl
  407574:	f7ff faf6 	bl	406b64 <memmove>
  407578:	f8da 3004 	ldr.w	r3, [sl, #4]
  40757c:	e6d0      	b.n	407320 <_realloc_r+0xd8>
  40757e:	463a      	mov	r2, r7
  407580:	e70a      	b.n	407398 <_realloc_r+0x150>
  407582:	68b3      	ldr	r3, [r6, #8]
  407584:	2a24      	cmp	r2, #36	; 0x24
  407586:	f8ca 3010 	str.w	r3, [sl, #16]
  40758a:	68f3      	ldr	r3, [r6, #12]
  40758c:	f8ca 3014 	str.w	r3, [sl, #20]
  407590:	d018      	beq.n	4075c4 <_realloc_r+0x37c>
  407592:	3610      	adds	r6, #16
  407594:	f10a 0318 	add.w	r3, sl, #24
  407598:	e7aa      	b.n	4074f0 <_realloc_r+0x2a8>
  40759a:	6931      	ldr	r1, [r6, #16]
  40759c:	f100 0318 	add.w	r3, r0, #24
  4075a0:	f106 0218 	add.w	r2, r6, #24
  4075a4:	6101      	str	r1, [r0, #16]
  4075a6:	6971      	ldr	r1, [r6, #20]
  4075a8:	6141      	str	r1, [r0, #20]
  4075aa:	e72c      	b.n	407406 <_realloc_r+0x1be>
  4075ac:	68b1      	ldr	r1, [r6, #8]
  4075ae:	2a24      	cmp	r2, #36	; 0x24
  4075b0:	f8ca 1010 	str.w	r1, [sl, #16]
  4075b4:	68f1      	ldr	r1, [r6, #12]
  4075b6:	f8ca 1014 	str.w	r1, [sl, #20]
  4075ba:	d010      	beq.n	4075de <_realloc_r+0x396>
  4075bc:	3610      	adds	r6, #16
  4075be:	f10a 0218 	add.w	r2, sl, #24
  4075c2:	e6e9      	b.n	407398 <_realloc_r+0x150>
  4075c4:	6932      	ldr	r2, [r6, #16]
  4075c6:	f10a 0320 	add.w	r3, sl, #32
  4075ca:	3618      	adds	r6, #24
  4075cc:	f8ca 2018 	str.w	r2, [sl, #24]
  4075d0:	f856 2c04 	ldr.w	r2, [r6, #-4]
  4075d4:	f8ca 201c 	str.w	r2, [sl, #28]
  4075d8:	e78a      	b.n	4074f0 <_realloc_r+0x2a8>
  4075da:	463b      	mov	r3, r7
  4075dc:	e761      	b.n	4074a2 <_realloc_r+0x25a>
  4075de:	6931      	ldr	r1, [r6, #16]
  4075e0:	f10a 0220 	add.w	r2, sl, #32
  4075e4:	3618      	adds	r6, #24
  4075e6:	f8ca 1018 	str.w	r1, [sl, #24]
  4075ea:	f856 1c04 	ldr.w	r1, [r6, #-4]
  4075ee:	f8ca 101c 	str.w	r1, [sl, #28]
  4075f2:	e6d1      	b.n	407398 <_realloc_r+0x150>
  4075f4:	4631      	mov	r1, r6
  4075f6:	4638      	mov	r0, r7
  4075f8:	f8cd c004 	str.w	ip, [sp, #4]
  4075fc:	f7ff fab2 	bl	406b64 <memmove>
  407600:	f8dd c004 	ldr.w	ip, [sp, #4]
  407604:	e753      	b.n	4074ae <_realloc_r+0x266>
  407606:	68b3      	ldr	r3, [r6, #8]
  407608:	2a24      	cmp	r2, #36	; 0x24
  40760a:	f8ca 3010 	str.w	r3, [sl, #16]
  40760e:	68f3      	ldr	r3, [r6, #12]
  407610:	f8ca 3014 	str.w	r3, [sl, #20]
  407614:	d003      	beq.n	40761e <_realloc_r+0x3d6>
  407616:	3610      	adds	r6, #16
  407618:	f10a 0318 	add.w	r3, sl, #24
  40761c:	e741      	b.n	4074a2 <_realloc_r+0x25a>
  40761e:	6932      	ldr	r2, [r6, #16]
  407620:	f10a 0320 	add.w	r3, sl, #32
  407624:	3618      	adds	r6, #24
  407626:	f8ca 2018 	str.w	r2, [sl, #24]
  40762a:	f856 2c04 	ldr.w	r2, [r6, #-4]
  40762e:	f8ca 201c 	str.w	r2, [sl, #28]
  407632:	e736      	b.n	4074a2 <_realloc_r+0x25a>
  407634:	204004e4 	.word	0x204004e4

00407638 <__fpclassifyd>:
  407638:	fab0 f080 	clz	r0, r0
  40763c:	f031 4100 	bics.w	r1, r1, #2147483648	; 0x80000000
  407640:	ea4f 1050 	mov.w	r0, r0, lsr #5
  407644:	d102      	bne.n	40764c <__fpclassifyd+0x14>
  407646:	b108      	cbz	r0, 40764c <__fpclassifyd+0x14>
  407648:	2002      	movs	r0, #2
  40764a:	4770      	bx	lr
  40764c:	f5a1 1280 	sub.w	r2, r1, #1048576	; 0x100000
  407650:	4b08      	ldr	r3, [pc, #32]	; (407674 <__fpclassifyd+0x3c>)
  407652:	429a      	cmp	r2, r3
  407654:	d801      	bhi.n	40765a <__fpclassifyd+0x22>
  407656:	2004      	movs	r0, #4
  407658:	4770      	bx	lr
  40765a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  40765e:	d201      	bcs.n	407664 <__fpclassifyd+0x2c>
  407660:	2003      	movs	r0, #3
  407662:	4770      	bx	lr
  407664:	4b04      	ldr	r3, [pc, #16]	; (407678 <__fpclassifyd+0x40>)
  407666:	4299      	cmp	r1, r3
  407668:	bf14      	ite	ne
  40766a:	2000      	movne	r0, #0
  40766c:	f000 0001 	andeq.w	r0, r0, #1
  407670:	4770      	bx	lr
  407672:	bf00      	nop
  407674:	7fdfffff 	.word	0x7fdfffff
  407678:	7ff00000 	.word	0x7ff00000

0040767c <_sbrk_r>:
  40767c:	b538      	push	{r3, r4, r5, lr}
  40767e:	2300      	movs	r3, #0
  407680:	4c06      	ldr	r4, [pc, #24]	; (40769c <_sbrk_r+0x20>)
  407682:	4605      	mov	r5, r0
  407684:	4608      	mov	r0, r1
  407686:	6023      	str	r3, [r4, #0]
  407688:	f7fa f96e 	bl	401968 <_sbrk>
  40768c:	1c43      	adds	r3, r0, #1
  40768e:	d000      	beq.n	407692 <_sbrk_r+0x16>
  407690:	bd38      	pop	{r3, r4, r5, pc}
  407692:	6823      	ldr	r3, [r4, #0]
  407694:	2b00      	cmp	r3, #0
  407696:	d0fb      	beq.n	407690 <_sbrk_r+0x14>
  407698:	602b      	str	r3, [r5, #0]
  40769a:	bd38      	pop	{r3, r4, r5, pc}
  40769c:	204011d4 	.word	0x204011d4

004076a0 <__sread>:
  4076a0:	b510      	push	{r4, lr}
  4076a2:	460c      	mov	r4, r1
  4076a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4076a8:	f000 f9ec 	bl	407a84 <_read_r>
  4076ac:	2800      	cmp	r0, #0
  4076ae:	db03      	blt.n	4076b8 <__sread+0x18>
  4076b0:	6d23      	ldr	r3, [r4, #80]	; 0x50
  4076b2:	4403      	add	r3, r0
  4076b4:	6523      	str	r3, [r4, #80]	; 0x50
  4076b6:	bd10      	pop	{r4, pc}
  4076b8:	89a3      	ldrh	r3, [r4, #12]
  4076ba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  4076be:	81a3      	strh	r3, [r4, #12]
  4076c0:	bd10      	pop	{r4, pc}
  4076c2:	bf00      	nop

004076c4 <__swrite>:
  4076c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4076c8:	461d      	mov	r5, r3
  4076ca:	898b      	ldrh	r3, [r1, #12]
  4076cc:	4616      	mov	r6, r2
  4076ce:	460c      	mov	r4, r1
  4076d0:	05da      	lsls	r2, r3, #23
  4076d2:	4607      	mov	r7, r0
  4076d4:	d506      	bpl.n	4076e4 <__swrite+0x20>
  4076d6:	2302      	movs	r3, #2
  4076d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4076dc:	2200      	movs	r2, #0
  4076de:	f000 f9bd 	bl	407a5c <_lseek_r>
  4076e2:	89a3      	ldrh	r3, [r4, #12]
  4076e4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  4076e8:	4638      	mov	r0, r7
  4076ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  4076ee:	4632      	mov	r2, r6
  4076f0:	81a3      	strh	r3, [r4, #12]
  4076f2:	462b      	mov	r3, r5
  4076f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  4076f8:	f000 b89e 	b.w	407838 <_write_r>

004076fc <__sseek>:
  4076fc:	b510      	push	{r4, lr}
  4076fe:	460c      	mov	r4, r1
  407700:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  407704:	f000 f9aa 	bl	407a5c <_lseek_r>
  407708:	1c42      	adds	r2, r0, #1
  40770a:	89a3      	ldrh	r3, [r4, #12]
  40770c:	d004      	beq.n	407718 <__sseek+0x1c>
  40770e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
  407712:	6520      	str	r0, [r4, #80]	; 0x50
  407714:	81a3      	strh	r3, [r4, #12]
  407716:	bd10      	pop	{r4, pc}
  407718:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  40771c:	81a3      	strh	r3, [r4, #12]
  40771e:	bd10      	pop	{r4, pc}

00407720 <__sclose>:
  407720:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  407724:	f000 b920 	b.w	407968 <_close_r>

00407728 <__ssprint_r>:
  407728:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40772c:	6893      	ldr	r3, [r2, #8]
  40772e:	b083      	sub	sp, #12
  407730:	4691      	mov	r9, r2
  407732:	f8d2 8000 	ldr.w	r8, [r2]
  407736:	9001      	str	r0, [sp, #4]
  407738:	2b00      	cmp	r3, #0
  40773a:	d073      	beq.n	407824 <__ssprint_r+0xfc>
  40773c:	f04f 0b00 	mov.w	fp, #0
  407740:	460d      	mov	r5, r1
  407742:	6808      	ldr	r0, [r1, #0]
  407744:	688b      	ldr	r3, [r1, #8]
  407746:	465c      	mov	r4, fp
  407748:	2c00      	cmp	r4, #0
  40774a:	d046      	beq.n	4077da <__ssprint_r+0xb2>
  40774c:	429c      	cmp	r4, r3
  40774e:	461e      	mov	r6, r3
  407750:	469a      	mov	sl, r3
  407752:	d349      	bcc.n	4077e8 <__ssprint_r+0xc0>
  407754:	f8b5 e00c 	ldrh.w	lr, [r5, #12]
  407758:	f41e 6f90 	tst.w	lr, #1152	; 0x480
  40775c:	d02d      	beq.n	4077ba <__ssprint_r+0x92>
  40775e:	696b      	ldr	r3, [r5, #20]
  407760:	1c62      	adds	r2, r4, #1
  407762:	6929      	ldr	r1, [r5, #16]
  407764:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  407768:	1a46      	subs	r6, r0, r1
  40776a:	4610      	mov	r0, r2
  40776c:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
  407770:	4430      	add	r0, r6
  407772:	105f      	asrs	r7, r3, #1
  407774:	4287      	cmp	r7, r0
  407776:	463a      	mov	r2, r7
  407778:	d201      	bcs.n	40777e <__ssprint_r+0x56>
  40777a:	4607      	mov	r7, r0
  40777c:	4602      	mov	r2, r0
  40777e:	f41e 6f80 	tst.w	lr, #1024	; 0x400
  407782:	d034      	beq.n	4077ee <__ssprint_r+0xc6>
  407784:	4611      	mov	r1, r2
  407786:	9801      	ldr	r0, [sp, #4]
  407788:	f7fe fe5e 	bl	406448 <_malloc_r>
  40778c:	4682      	mov	sl, r0
  40778e:	2800      	cmp	r0, #0
  407790:	d04e      	beq.n	407830 <__ssprint_r+0x108>
  407792:	4632      	mov	r2, r6
  407794:	6929      	ldr	r1, [r5, #16]
  407796:	f7ff f94b 	bl	406a30 <memcpy>
  40779a:	89aa      	ldrh	r2, [r5, #12]
  40779c:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
  4077a0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  4077a4:	81aa      	strh	r2, [r5, #12]
  4077a6:	eb0a 0006 	add.w	r0, sl, r6
  4077aa:	1bba      	subs	r2, r7, r6
  4077ac:	f8c5 a010 	str.w	sl, [r5, #16]
  4077b0:	4626      	mov	r6, r4
  4077b2:	46a2      	mov	sl, r4
  4077b4:	6028      	str	r0, [r5, #0]
  4077b6:	60aa      	str	r2, [r5, #8]
  4077b8:	616f      	str	r7, [r5, #20]
  4077ba:	4652      	mov	r2, sl
  4077bc:	4659      	mov	r1, fp
  4077be:	f7ff f9d1 	bl	406b64 <memmove>
  4077c2:	f8d9 2008 	ldr.w	r2, [r9, #8]
  4077c6:	68ab      	ldr	r3, [r5, #8]
  4077c8:	6828      	ldr	r0, [r5, #0]
  4077ca:	1b14      	subs	r4, r2, r4
  4077cc:	1b9b      	subs	r3, r3, r6
  4077ce:	4450      	add	r0, sl
  4077d0:	60ab      	str	r3, [r5, #8]
  4077d2:	6028      	str	r0, [r5, #0]
  4077d4:	f8c9 4008 	str.w	r4, [r9, #8]
  4077d8:	b324      	cbz	r4, 407824 <__ssprint_r+0xfc>
  4077da:	f8d8 b000 	ldr.w	fp, [r8]
  4077de:	f108 0808 	add.w	r8, r8, #8
  4077e2:	f858 4c04 	ldr.w	r4, [r8, #-4]
  4077e6:	e7af      	b.n	407748 <__ssprint_r+0x20>
  4077e8:	4626      	mov	r6, r4
  4077ea:	46a2      	mov	sl, r4
  4077ec:	e7e5      	b.n	4077ba <__ssprint_r+0x92>
  4077ee:	9801      	ldr	r0, [sp, #4]
  4077f0:	f7ff fd2a 	bl	407248 <_realloc_r>
  4077f4:	4682      	mov	sl, r0
  4077f6:	2800      	cmp	r0, #0
  4077f8:	d1d5      	bne.n	4077a6 <__ssprint_r+0x7e>
  4077fa:	9c01      	ldr	r4, [sp, #4]
  4077fc:	6929      	ldr	r1, [r5, #16]
  4077fe:	4620      	mov	r0, r4
  407800:	f7fe fb12 	bl	405e28 <_free_r>
  407804:	230c      	movs	r3, #12
  407806:	6023      	str	r3, [r4, #0]
  407808:	89ab      	ldrh	r3, [r5, #12]
  40780a:	2200      	movs	r2, #0
  40780c:	f04f 30ff 	mov.w	r0, #4294967295
  407810:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  407814:	81ab      	strh	r3, [r5, #12]
  407816:	f8c9 2008 	str.w	r2, [r9, #8]
  40781a:	f8c9 2004 	str.w	r2, [r9, #4]
  40781e:	b003      	add	sp, #12
  407820:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407824:	2000      	movs	r0, #0
  407826:	f8c9 0004 	str.w	r0, [r9, #4]
  40782a:	b003      	add	sp, #12
  40782c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407830:	230c      	movs	r3, #12
  407832:	9a01      	ldr	r2, [sp, #4]
  407834:	6013      	str	r3, [r2, #0]
  407836:	e7e7      	b.n	407808 <__ssprint_r+0xe0>

00407838 <_write_r>:
  407838:	b570      	push	{r4, r5, r6, lr}
  40783a:	4c08      	ldr	r4, [pc, #32]	; (40785c <_write_r+0x24>)
  40783c:	2500      	movs	r5, #0
  40783e:	4606      	mov	r6, r0
  407840:	4608      	mov	r0, r1
  407842:	4611      	mov	r1, r2
  407844:	461a      	mov	r2, r3
  407846:	6025      	str	r5, [r4, #0]
  407848:	f7f8 fe8c 	bl	400564 <_write>
  40784c:	1c43      	adds	r3, r0, #1
  40784e:	d000      	beq.n	407852 <_write_r+0x1a>
  407850:	bd70      	pop	{r4, r5, r6, pc}
  407852:	6823      	ldr	r3, [r4, #0]
  407854:	2b00      	cmp	r3, #0
  407856:	d0fb      	beq.n	407850 <_write_r+0x18>
  407858:	6033      	str	r3, [r6, #0]
  40785a:	bd70      	pop	{r4, r5, r6, pc}
  40785c:	204011d4 	.word	0x204011d4

00407860 <__register_exitproc>:
  407860:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  407864:	4c26      	ldr	r4, [pc, #152]	; (407900 <__register_exitproc+0xa0>)
  407866:	4606      	mov	r6, r0
  407868:	4688      	mov	r8, r1
  40786a:	4691      	mov	r9, r2
  40786c:	6825      	ldr	r5, [r4, #0]
  40786e:	469a      	mov	sl, r3
  407870:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
  407874:	2c00      	cmp	r4, #0
  407876:	d03a      	beq.n	4078ee <__register_exitproc+0x8e>
  407878:	6860      	ldr	r0, [r4, #4]
  40787a:	281f      	cmp	r0, #31
  40787c:	dc19      	bgt.n	4078b2 <__register_exitproc+0x52>
  40787e:	1c41      	adds	r1, r0, #1
  407880:	b186      	cbz	r6, 4078a4 <__register_exitproc+0x44>
  407882:	eb04 0580 	add.w	r5, r4, r0, lsl #2
  407886:	2201      	movs	r2, #1
  407888:	2e02      	cmp	r6, #2
  40788a:	f8c5 9088 	str.w	r9, [r5, #136]	; 0x88
  40788e:	fa02 f200 	lsl.w	r2, r2, r0
  407892:	f8d4 3188 	ldr.w	r3, [r4, #392]	; 0x188
  407896:	ea43 0302 	orr.w	r3, r3, r2
  40789a:	f8c4 3188 	str.w	r3, [r4, #392]	; 0x188
  40789e:	f8c5 a108 	str.w	sl, [r5, #264]	; 0x108
  4078a2:	d01e      	beq.n	4078e2 <__register_exitproc+0x82>
  4078a4:	1c83      	adds	r3, r0, #2
  4078a6:	6061      	str	r1, [r4, #4]
  4078a8:	2000      	movs	r0, #0
  4078aa:	f844 8023 	str.w	r8, [r4, r3, lsl #2]
  4078ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4078b2:	4b14      	ldr	r3, [pc, #80]	; (407904 <__register_exitproc+0xa4>)
  4078b4:	b303      	cbz	r3, 4078f8 <__register_exitproc+0x98>
  4078b6:	f44f 70c8 	mov.w	r0, #400	; 0x190
  4078ba:	f7fe fdbd 	bl	406438 <malloc>
  4078be:	4604      	mov	r4, r0
  4078c0:	b1d0      	cbz	r0, 4078f8 <__register_exitproc+0x98>
  4078c2:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
  4078c6:	2700      	movs	r7, #0
  4078c8:	2101      	movs	r1, #1
  4078ca:	6003      	str	r3, [r0, #0]
  4078cc:	4638      	mov	r0, r7
  4078ce:	6067      	str	r7, [r4, #4]
  4078d0:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  4078d4:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
  4078d8:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
  4078dc:	2e00      	cmp	r6, #0
  4078de:	d0e1      	beq.n	4078a4 <__register_exitproc+0x44>
  4078e0:	e7cf      	b.n	407882 <__register_exitproc+0x22>
  4078e2:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
  4078e6:	431a      	orrs	r2, r3
  4078e8:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
  4078ec:	e7da      	b.n	4078a4 <__register_exitproc+0x44>
  4078ee:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
  4078f2:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  4078f6:	e7bf      	b.n	407878 <__register_exitproc+0x18>
  4078f8:	f04f 30ff 	mov.w	r0, #4294967295
  4078fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  407900:	00408b2c 	.word	0x00408b2c
  407904:	00406439 	.word	0x00406439

00407908 <_calloc_r>:
  407908:	b510      	push	{r4, lr}
  40790a:	fb02 f101 	mul.w	r1, r2, r1
  40790e:	f7fe fd9b 	bl	406448 <_malloc_r>
  407912:	4604      	mov	r4, r0
  407914:	b168      	cbz	r0, 407932 <_calloc_r+0x2a>
  407916:	f850 2c04 	ldr.w	r2, [r0, #-4]
  40791a:	f022 0203 	bic.w	r2, r2, #3
  40791e:	3a04      	subs	r2, #4
  407920:	2a24      	cmp	r2, #36	; 0x24
  407922:	d814      	bhi.n	40794e <_calloc_r+0x46>
  407924:	2a13      	cmp	r2, #19
  407926:	d806      	bhi.n	407936 <_calloc_r+0x2e>
  407928:	4603      	mov	r3, r0
  40792a:	2200      	movs	r2, #0
  40792c:	601a      	str	r2, [r3, #0]
  40792e:	605a      	str	r2, [r3, #4]
  407930:	609a      	str	r2, [r3, #8]
  407932:	4620      	mov	r0, r4
  407934:	bd10      	pop	{r4, pc}
  407936:	2100      	movs	r1, #0
  407938:	2a1b      	cmp	r2, #27
  40793a:	6001      	str	r1, [r0, #0]
  40793c:	6041      	str	r1, [r0, #4]
  40793e:	d90b      	bls.n	407958 <_calloc_r+0x50>
  407940:	2a24      	cmp	r2, #36	; 0x24
  407942:	6081      	str	r1, [r0, #8]
  407944:	60c1      	str	r1, [r0, #12]
  407946:	d00a      	beq.n	40795e <_calloc_r+0x56>
  407948:	f100 0310 	add.w	r3, r0, #16
  40794c:	e7ed      	b.n	40792a <_calloc_r+0x22>
  40794e:	2100      	movs	r1, #0
  407950:	f7fb fbfa 	bl	403148 <memset>
  407954:	4620      	mov	r0, r4
  407956:	bd10      	pop	{r4, pc}
  407958:	f100 0308 	add.w	r3, r0, #8
  40795c:	e7e5      	b.n	40792a <_calloc_r+0x22>
  40795e:	6101      	str	r1, [r0, #16]
  407960:	f100 0318 	add.w	r3, r0, #24
  407964:	6141      	str	r1, [r0, #20]
  407966:	e7e0      	b.n	40792a <_calloc_r+0x22>

00407968 <_close_r>:
  407968:	b538      	push	{r3, r4, r5, lr}
  40796a:	2300      	movs	r3, #0
  40796c:	4c06      	ldr	r4, [pc, #24]	; (407988 <_close_r+0x20>)
  40796e:	4605      	mov	r5, r0
  407970:	4608      	mov	r0, r1
  407972:	6023      	str	r3, [r4, #0]
  407974:	f7fa f824 	bl	4019c0 <_close>
  407978:	1c43      	adds	r3, r0, #1
  40797a:	d000      	beq.n	40797e <_close_r+0x16>
  40797c:	bd38      	pop	{r3, r4, r5, pc}
  40797e:	6823      	ldr	r3, [r4, #0]
  407980:	2b00      	cmp	r3, #0
  407982:	d0fb      	beq.n	40797c <_close_r+0x14>
  407984:	602b      	str	r3, [r5, #0]
  407986:	bd38      	pop	{r3, r4, r5, pc}
  407988:	204011d4 	.word	0x204011d4

0040798c <_fclose_r>:
  40798c:	2900      	cmp	r1, #0
  40798e:	d03d      	beq.n	407a0c <_fclose_r+0x80>
  407990:	b570      	push	{r4, r5, r6, lr}
  407992:	4605      	mov	r5, r0
  407994:	460c      	mov	r4, r1
  407996:	b108      	cbz	r0, 40799c <_fclose_r+0x10>
  407998:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40799a:	b37b      	cbz	r3, 4079fc <_fclose_r+0x70>
  40799c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4079a0:	b90b      	cbnz	r3, 4079a6 <_fclose_r+0x1a>
  4079a2:	2000      	movs	r0, #0
  4079a4:	bd70      	pop	{r4, r5, r6, pc}
  4079a6:	4628      	mov	r0, r5
  4079a8:	4621      	mov	r1, r4
  4079aa:	f7fe f891 	bl	405ad0 <__sflush_r>
  4079ae:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  4079b0:	4606      	mov	r6, r0
  4079b2:	b133      	cbz	r3, 4079c2 <_fclose_r+0x36>
  4079b4:	4628      	mov	r0, r5
  4079b6:	69e1      	ldr	r1, [r4, #28]
  4079b8:	4798      	blx	r3
  4079ba:	2800      	cmp	r0, #0
  4079bc:	bfb8      	it	lt
  4079be:	f04f 36ff 	movlt.w	r6, #4294967295
  4079c2:	89a3      	ldrh	r3, [r4, #12]
  4079c4:	061b      	lsls	r3, r3, #24
  4079c6:	d41c      	bmi.n	407a02 <_fclose_r+0x76>
  4079c8:	6b21      	ldr	r1, [r4, #48]	; 0x30
  4079ca:	b141      	cbz	r1, 4079de <_fclose_r+0x52>
  4079cc:	f104 0340 	add.w	r3, r4, #64	; 0x40
  4079d0:	4299      	cmp	r1, r3
  4079d2:	d002      	beq.n	4079da <_fclose_r+0x4e>
  4079d4:	4628      	mov	r0, r5
  4079d6:	f7fe fa27 	bl	405e28 <_free_r>
  4079da:	2300      	movs	r3, #0
  4079dc:	6323      	str	r3, [r4, #48]	; 0x30
  4079de:	6c61      	ldr	r1, [r4, #68]	; 0x44
  4079e0:	b121      	cbz	r1, 4079ec <_fclose_r+0x60>
  4079e2:	4628      	mov	r0, r5
  4079e4:	f7fe fa20 	bl	405e28 <_free_r>
  4079e8:	2300      	movs	r3, #0
  4079ea:	6463      	str	r3, [r4, #68]	; 0x44
  4079ec:	f7fe f9b4 	bl	405d58 <__sfp_lock_acquire>
  4079f0:	2300      	movs	r3, #0
  4079f2:	81a3      	strh	r3, [r4, #12]
  4079f4:	f7fe f9b2 	bl	405d5c <__sfp_lock_release>
  4079f8:	4630      	mov	r0, r6
  4079fa:	bd70      	pop	{r4, r5, r6, pc}
  4079fc:	f7fe f9a6 	bl	405d4c <__sinit>
  407a00:	e7cc      	b.n	40799c <_fclose_r+0x10>
  407a02:	4628      	mov	r0, r5
  407a04:	6921      	ldr	r1, [r4, #16]
  407a06:	f7fe fa0f 	bl	405e28 <_free_r>
  407a0a:	e7dd      	b.n	4079c8 <_fclose_r+0x3c>
  407a0c:	2000      	movs	r0, #0
  407a0e:	4770      	bx	lr

00407a10 <_fstat_r>:
  407a10:	b538      	push	{r3, r4, r5, lr}
  407a12:	2300      	movs	r3, #0
  407a14:	4c07      	ldr	r4, [pc, #28]	; (407a34 <_fstat_r+0x24>)
  407a16:	4605      	mov	r5, r0
  407a18:	4608      	mov	r0, r1
  407a1a:	4611      	mov	r1, r2
  407a1c:	6023      	str	r3, [r4, #0]
  407a1e:	f7f9 ffdb 	bl	4019d8 <_fstat>
  407a22:	1c43      	adds	r3, r0, #1
  407a24:	d000      	beq.n	407a28 <_fstat_r+0x18>
  407a26:	bd38      	pop	{r3, r4, r5, pc}
  407a28:	6823      	ldr	r3, [r4, #0]
  407a2a:	2b00      	cmp	r3, #0
  407a2c:	d0fb      	beq.n	407a26 <_fstat_r+0x16>
  407a2e:	602b      	str	r3, [r5, #0]
  407a30:	bd38      	pop	{r3, r4, r5, pc}
  407a32:	bf00      	nop
  407a34:	204011d4 	.word	0x204011d4

00407a38 <_isatty_r>:
  407a38:	b538      	push	{r3, r4, r5, lr}
  407a3a:	2300      	movs	r3, #0
  407a3c:	4c06      	ldr	r4, [pc, #24]	; (407a58 <_isatty_r+0x20>)
  407a3e:	4605      	mov	r5, r0
  407a40:	4608      	mov	r0, r1
  407a42:	6023      	str	r3, [r4, #0]
  407a44:	f7f9 ffd8 	bl	4019f8 <_isatty>
  407a48:	1c43      	adds	r3, r0, #1
  407a4a:	d000      	beq.n	407a4e <_isatty_r+0x16>
  407a4c:	bd38      	pop	{r3, r4, r5, pc}
  407a4e:	6823      	ldr	r3, [r4, #0]
  407a50:	2b00      	cmp	r3, #0
  407a52:	d0fb      	beq.n	407a4c <_isatty_r+0x14>
  407a54:	602b      	str	r3, [r5, #0]
  407a56:	bd38      	pop	{r3, r4, r5, pc}
  407a58:	204011d4 	.word	0x204011d4

00407a5c <_lseek_r>:
  407a5c:	b570      	push	{r4, r5, r6, lr}
  407a5e:	4c08      	ldr	r4, [pc, #32]	; (407a80 <_lseek_r+0x24>)
  407a60:	2500      	movs	r5, #0
  407a62:	4606      	mov	r6, r0
  407a64:	4608      	mov	r0, r1
  407a66:	4611      	mov	r1, r2
  407a68:	461a      	mov	r2, r3
  407a6a:	6025      	str	r5, [r4, #0]
  407a6c:	f7f9 ffd0 	bl	401a10 <_lseek>
  407a70:	1c43      	adds	r3, r0, #1
  407a72:	d000      	beq.n	407a76 <_lseek_r+0x1a>
  407a74:	bd70      	pop	{r4, r5, r6, pc}
  407a76:	6823      	ldr	r3, [r4, #0]
  407a78:	2b00      	cmp	r3, #0
  407a7a:	d0fb      	beq.n	407a74 <_lseek_r+0x18>
  407a7c:	6033      	str	r3, [r6, #0]
  407a7e:	bd70      	pop	{r4, r5, r6, pc}
  407a80:	204011d4 	.word	0x204011d4

00407a84 <_read_r>:
  407a84:	b570      	push	{r4, r5, r6, lr}
  407a86:	4c08      	ldr	r4, [pc, #32]	; (407aa8 <_read_r+0x24>)
  407a88:	2500      	movs	r5, #0
  407a8a:	4606      	mov	r6, r0
  407a8c:	4608      	mov	r0, r1
  407a8e:	4611      	mov	r1, r2
  407a90:	461a      	mov	r2, r3
  407a92:	6025      	str	r5, [r4, #0]
  407a94:	f7f8 fd3a 	bl	40050c <_read>
  407a98:	1c43      	adds	r3, r0, #1
  407a9a:	d000      	beq.n	407a9e <_read_r+0x1a>
  407a9c:	bd70      	pop	{r4, r5, r6, pc}
  407a9e:	6823      	ldr	r3, [r4, #0]
  407aa0:	2b00      	cmp	r3, #0
  407aa2:	d0fb      	beq.n	407a9c <_read_r+0x18>
  407aa4:	6033      	str	r3, [r6, #0]
  407aa6:	bd70      	pop	{r4, r5, r6, pc}
  407aa8:	204011d4 	.word	0x204011d4

00407aac <__aeabi_drsub>:
  407aac:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  407ab0:	e002      	b.n	407ab8 <__adddf3>
  407ab2:	bf00      	nop

00407ab4 <__aeabi_dsub>:
  407ab4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00407ab8 <__adddf3>:
  407ab8:	b530      	push	{r4, r5, lr}
  407aba:	ea4f 0441 	mov.w	r4, r1, lsl #1
  407abe:	ea4f 0543 	mov.w	r5, r3, lsl #1
  407ac2:	ea94 0f05 	teq	r4, r5
  407ac6:	bf08      	it	eq
  407ac8:	ea90 0f02 	teqeq	r0, r2
  407acc:	bf1f      	itttt	ne
  407ace:	ea54 0c00 	orrsne.w	ip, r4, r0
  407ad2:	ea55 0c02 	orrsne.w	ip, r5, r2
  407ad6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  407ada:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  407ade:	f000 80e2 	beq.w	407ca6 <__adddf3+0x1ee>
  407ae2:	ea4f 5454 	mov.w	r4, r4, lsr #21
  407ae6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  407aea:	bfb8      	it	lt
  407aec:	426d      	neglt	r5, r5
  407aee:	dd0c      	ble.n	407b0a <__adddf3+0x52>
  407af0:	442c      	add	r4, r5
  407af2:	ea80 0202 	eor.w	r2, r0, r2
  407af6:	ea81 0303 	eor.w	r3, r1, r3
  407afa:	ea82 0000 	eor.w	r0, r2, r0
  407afe:	ea83 0101 	eor.w	r1, r3, r1
  407b02:	ea80 0202 	eor.w	r2, r0, r2
  407b06:	ea81 0303 	eor.w	r3, r1, r3
  407b0a:	2d36      	cmp	r5, #54	; 0x36
  407b0c:	bf88      	it	hi
  407b0e:	bd30      	pophi	{r4, r5, pc}
  407b10:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  407b14:	ea4f 3101 	mov.w	r1, r1, lsl #12
  407b18:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  407b1c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  407b20:	d002      	beq.n	407b28 <__adddf3+0x70>
  407b22:	4240      	negs	r0, r0
  407b24:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  407b28:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  407b2c:	ea4f 3303 	mov.w	r3, r3, lsl #12
  407b30:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  407b34:	d002      	beq.n	407b3c <__adddf3+0x84>
  407b36:	4252      	negs	r2, r2
  407b38:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  407b3c:	ea94 0f05 	teq	r4, r5
  407b40:	f000 80a7 	beq.w	407c92 <__adddf3+0x1da>
  407b44:	f1a4 0401 	sub.w	r4, r4, #1
  407b48:	f1d5 0e20 	rsbs	lr, r5, #32
  407b4c:	db0d      	blt.n	407b6a <__adddf3+0xb2>
  407b4e:	fa02 fc0e 	lsl.w	ip, r2, lr
  407b52:	fa22 f205 	lsr.w	r2, r2, r5
  407b56:	1880      	adds	r0, r0, r2
  407b58:	f141 0100 	adc.w	r1, r1, #0
  407b5c:	fa03 f20e 	lsl.w	r2, r3, lr
  407b60:	1880      	adds	r0, r0, r2
  407b62:	fa43 f305 	asr.w	r3, r3, r5
  407b66:	4159      	adcs	r1, r3
  407b68:	e00e      	b.n	407b88 <__adddf3+0xd0>
  407b6a:	f1a5 0520 	sub.w	r5, r5, #32
  407b6e:	f10e 0e20 	add.w	lr, lr, #32
  407b72:	2a01      	cmp	r2, #1
  407b74:	fa03 fc0e 	lsl.w	ip, r3, lr
  407b78:	bf28      	it	cs
  407b7a:	f04c 0c02 	orrcs.w	ip, ip, #2
  407b7e:	fa43 f305 	asr.w	r3, r3, r5
  407b82:	18c0      	adds	r0, r0, r3
  407b84:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  407b88:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  407b8c:	d507      	bpl.n	407b9e <__adddf3+0xe6>
  407b8e:	f04f 0e00 	mov.w	lr, #0
  407b92:	f1dc 0c00 	rsbs	ip, ip, #0
  407b96:	eb7e 0000 	sbcs.w	r0, lr, r0
  407b9a:	eb6e 0101 	sbc.w	r1, lr, r1
  407b9e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  407ba2:	d31b      	bcc.n	407bdc <__adddf3+0x124>
  407ba4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  407ba8:	d30c      	bcc.n	407bc4 <__adddf3+0x10c>
  407baa:	0849      	lsrs	r1, r1, #1
  407bac:	ea5f 0030 	movs.w	r0, r0, rrx
  407bb0:	ea4f 0c3c 	mov.w	ip, ip, rrx
  407bb4:	f104 0401 	add.w	r4, r4, #1
  407bb8:	ea4f 5244 	mov.w	r2, r4, lsl #21
  407bbc:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  407bc0:	f080 809a 	bcs.w	407cf8 <__adddf3+0x240>
  407bc4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  407bc8:	bf08      	it	eq
  407bca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  407bce:	f150 0000 	adcs.w	r0, r0, #0
  407bd2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  407bd6:	ea41 0105 	orr.w	r1, r1, r5
  407bda:	bd30      	pop	{r4, r5, pc}
  407bdc:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  407be0:	4140      	adcs	r0, r0
  407be2:	eb41 0101 	adc.w	r1, r1, r1
  407be6:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  407bea:	f1a4 0401 	sub.w	r4, r4, #1
  407bee:	d1e9      	bne.n	407bc4 <__adddf3+0x10c>
  407bf0:	f091 0f00 	teq	r1, #0
  407bf4:	bf04      	itt	eq
  407bf6:	4601      	moveq	r1, r0
  407bf8:	2000      	moveq	r0, #0
  407bfa:	fab1 f381 	clz	r3, r1
  407bfe:	bf08      	it	eq
  407c00:	3320      	addeq	r3, #32
  407c02:	f1a3 030b 	sub.w	r3, r3, #11
  407c06:	f1b3 0220 	subs.w	r2, r3, #32
  407c0a:	da0c      	bge.n	407c26 <__adddf3+0x16e>
  407c0c:	320c      	adds	r2, #12
  407c0e:	dd08      	ble.n	407c22 <__adddf3+0x16a>
  407c10:	f102 0c14 	add.w	ip, r2, #20
  407c14:	f1c2 020c 	rsb	r2, r2, #12
  407c18:	fa01 f00c 	lsl.w	r0, r1, ip
  407c1c:	fa21 f102 	lsr.w	r1, r1, r2
  407c20:	e00c      	b.n	407c3c <__adddf3+0x184>
  407c22:	f102 0214 	add.w	r2, r2, #20
  407c26:	bfd8      	it	le
  407c28:	f1c2 0c20 	rsble	ip, r2, #32
  407c2c:	fa01 f102 	lsl.w	r1, r1, r2
  407c30:	fa20 fc0c 	lsr.w	ip, r0, ip
  407c34:	bfdc      	itt	le
  407c36:	ea41 010c 	orrle.w	r1, r1, ip
  407c3a:	4090      	lslle	r0, r2
  407c3c:	1ae4      	subs	r4, r4, r3
  407c3e:	bfa2      	ittt	ge
  407c40:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  407c44:	4329      	orrge	r1, r5
  407c46:	bd30      	popge	{r4, r5, pc}
  407c48:	ea6f 0404 	mvn.w	r4, r4
  407c4c:	3c1f      	subs	r4, #31
  407c4e:	da1c      	bge.n	407c8a <__adddf3+0x1d2>
  407c50:	340c      	adds	r4, #12
  407c52:	dc0e      	bgt.n	407c72 <__adddf3+0x1ba>
  407c54:	f104 0414 	add.w	r4, r4, #20
  407c58:	f1c4 0220 	rsb	r2, r4, #32
  407c5c:	fa20 f004 	lsr.w	r0, r0, r4
  407c60:	fa01 f302 	lsl.w	r3, r1, r2
  407c64:	ea40 0003 	orr.w	r0, r0, r3
  407c68:	fa21 f304 	lsr.w	r3, r1, r4
  407c6c:	ea45 0103 	orr.w	r1, r5, r3
  407c70:	bd30      	pop	{r4, r5, pc}
  407c72:	f1c4 040c 	rsb	r4, r4, #12
  407c76:	f1c4 0220 	rsb	r2, r4, #32
  407c7a:	fa20 f002 	lsr.w	r0, r0, r2
  407c7e:	fa01 f304 	lsl.w	r3, r1, r4
  407c82:	ea40 0003 	orr.w	r0, r0, r3
  407c86:	4629      	mov	r1, r5
  407c88:	bd30      	pop	{r4, r5, pc}
  407c8a:	fa21 f004 	lsr.w	r0, r1, r4
  407c8e:	4629      	mov	r1, r5
  407c90:	bd30      	pop	{r4, r5, pc}
  407c92:	f094 0f00 	teq	r4, #0
  407c96:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  407c9a:	bf06      	itte	eq
  407c9c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  407ca0:	3401      	addeq	r4, #1
  407ca2:	3d01      	subne	r5, #1
  407ca4:	e74e      	b.n	407b44 <__adddf3+0x8c>
  407ca6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  407caa:	bf18      	it	ne
  407cac:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  407cb0:	d029      	beq.n	407d06 <__adddf3+0x24e>
  407cb2:	ea94 0f05 	teq	r4, r5
  407cb6:	bf08      	it	eq
  407cb8:	ea90 0f02 	teqeq	r0, r2
  407cbc:	d005      	beq.n	407cca <__adddf3+0x212>
  407cbe:	ea54 0c00 	orrs.w	ip, r4, r0
  407cc2:	bf04      	itt	eq
  407cc4:	4619      	moveq	r1, r3
  407cc6:	4610      	moveq	r0, r2
  407cc8:	bd30      	pop	{r4, r5, pc}
  407cca:	ea91 0f03 	teq	r1, r3
  407cce:	bf1e      	ittt	ne
  407cd0:	2100      	movne	r1, #0
  407cd2:	2000      	movne	r0, #0
  407cd4:	bd30      	popne	{r4, r5, pc}
  407cd6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  407cda:	d105      	bne.n	407ce8 <__adddf3+0x230>
  407cdc:	0040      	lsls	r0, r0, #1
  407cde:	4149      	adcs	r1, r1
  407ce0:	bf28      	it	cs
  407ce2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  407ce6:	bd30      	pop	{r4, r5, pc}
  407ce8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  407cec:	bf3c      	itt	cc
  407cee:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  407cf2:	bd30      	popcc	{r4, r5, pc}
  407cf4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  407cf8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  407cfc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  407d00:	f04f 0000 	mov.w	r0, #0
  407d04:	bd30      	pop	{r4, r5, pc}
  407d06:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  407d0a:	bf1a      	itte	ne
  407d0c:	4619      	movne	r1, r3
  407d0e:	4610      	movne	r0, r2
  407d10:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  407d14:	bf1c      	itt	ne
  407d16:	460b      	movne	r3, r1
  407d18:	4602      	movne	r2, r0
  407d1a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  407d1e:	bf06      	itte	eq
  407d20:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  407d24:	ea91 0f03 	teqeq	r1, r3
  407d28:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  407d2c:	bd30      	pop	{r4, r5, pc}
  407d2e:	bf00      	nop

00407d30 <__aeabi_ui2d>:
  407d30:	f090 0f00 	teq	r0, #0
  407d34:	bf04      	itt	eq
  407d36:	2100      	moveq	r1, #0
  407d38:	4770      	bxeq	lr
  407d3a:	b530      	push	{r4, r5, lr}
  407d3c:	f44f 6480 	mov.w	r4, #1024	; 0x400
  407d40:	f104 0432 	add.w	r4, r4, #50	; 0x32
  407d44:	f04f 0500 	mov.w	r5, #0
  407d48:	f04f 0100 	mov.w	r1, #0
  407d4c:	e750      	b.n	407bf0 <__adddf3+0x138>
  407d4e:	bf00      	nop

00407d50 <__aeabi_i2d>:
  407d50:	f090 0f00 	teq	r0, #0
  407d54:	bf04      	itt	eq
  407d56:	2100      	moveq	r1, #0
  407d58:	4770      	bxeq	lr
  407d5a:	b530      	push	{r4, r5, lr}
  407d5c:	f44f 6480 	mov.w	r4, #1024	; 0x400
  407d60:	f104 0432 	add.w	r4, r4, #50	; 0x32
  407d64:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  407d68:	bf48      	it	mi
  407d6a:	4240      	negmi	r0, r0
  407d6c:	f04f 0100 	mov.w	r1, #0
  407d70:	e73e      	b.n	407bf0 <__adddf3+0x138>
  407d72:	bf00      	nop

00407d74 <__aeabi_f2d>:
  407d74:	0042      	lsls	r2, r0, #1
  407d76:	ea4f 01e2 	mov.w	r1, r2, asr #3
  407d7a:	ea4f 0131 	mov.w	r1, r1, rrx
  407d7e:	ea4f 7002 	mov.w	r0, r2, lsl #28
  407d82:	bf1f      	itttt	ne
  407d84:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  407d88:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  407d8c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  407d90:	4770      	bxne	lr
  407d92:	f092 0f00 	teq	r2, #0
  407d96:	bf14      	ite	ne
  407d98:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  407d9c:	4770      	bxeq	lr
  407d9e:	b530      	push	{r4, r5, lr}
  407da0:	f44f 7460 	mov.w	r4, #896	; 0x380
  407da4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  407da8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  407dac:	e720      	b.n	407bf0 <__adddf3+0x138>
  407dae:	bf00      	nop

00407db0 <__aeabi_ul2d>:
  407db0:	ea50 0201 	orrs.w	r2, r0, r1
  407db4:	bf08      	it	eq
  407db6:	4770      	bxeq	lr
  407db8:	b530      	push	{r4, r5, lr}
  407dba:	f04f 0500 	mov.w	r5, #0
  407dbe:	e00a      	b.n	407dd6 <__aeabi_l2d+0x16>

00407dc0 <__aeabi_l2d>:
  407dc0:	ea50 0201 	orrs.w	r2, r0, r1
  407dc4:	bf08      	it	eq
  407dc6:	4770      	bxeq	lr
  407dc8:	b530      	push	{r4, r5, lr}
  407dca:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  407dce:	d502      	bpl.n	407dd6 <__aeabi_l2d+0x16>
  407dd0:	4240      	negs	r0, r0
  407dd2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  407dd6:	f44f 6480 	mov.w	r4, #1024	; 0x400
  407dda:	f104 0432 	add.w	r4, r4, #50	; 0x32
  407dde:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  407de2:	f43f aedc 	beq.w	407b9e <__adddf3+0xe6>
  407de6:	f04f 0203 	mov.w	r2, #3
  407dea:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  407dee:	bf18      	it	ne
  407df0:	3203      	addne	r2, #3
  407df2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  407df6:	bf18      	it	ne
  407df8:	3203      	addne	r2, #3
  407dfa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  407dfe:	f1c2 0320 	rsb	r3, r2, #32
  407e02:	fa00 fc03 	lsl.w	ip, r0, r3
  407e06:	fa20 f002 	lsr.w	r0, r0, r2
  407e0a:	fa01 fe03 	lsl.w	lr, r1, r3
  407e0e:	ea40 000e 	orr.w	r0, r0, lr
  407e12:	fa21 f102 	lsr.w	r1, r1, r2
  407e16:	4414      	add	r4, r2
  407e18:	e6c1      	b.n	407b9e <__adddf3+0xe6>
  407e1a:	bf00      	nop

00407e1c <__aeabi_dmul>:
  407e1c:	b570      	push	{r4, r5, r6, lr}
  407e1e:	f04f 0cff 	mov.w	ip, #255	; 0xff
  407e22:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  407e26:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  407e2a:	bf1d      	ittte	ne
  407e2c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  407e30:	ea94 0f0c 	teqne	r4, ip
  407e34:	ea95 0f0c 	teqne	r5, ip
  407e38:	f000 f8de 	bleq	407ff8 <__aeabi_dmul+0x1dc>
  407e3c:	442c      	add	r4, r5
  407e3e:	ea81 0603 	eor.w	r6, r1, r3
  407e42:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  407e46:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  407e4a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  407e4e:	bf18      	it	ne
  407e50:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  407e54:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  407e58:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  407e5c:	d038      	beq.n	407ed0 <__aeabi_dmul+0xb4>
  407e5e:	fba0 ce02 	umull	ip, lr, r0, r2
  407e62:	f04f 0500 	mov.w	r5, #0
  407e66:	fbe1 e502 	umlal	lr, r5, r1, r2
  407e6a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  407e6e:	fbe0 e503 	umlal	lr, r5, r0, r3
  407e72:	f04f 0600 	mov.w	r6, #0
  407e76:	fbe1 5603 	umlal	r5, r6, r1, r3
  407e7a:	f09c 0f00 	teq	ip, #0
  407e7e:	bf18      	it	ne
  407e80:	f04e 0e01 	orrne.w	lr, lr, #1
  407e84:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  407e88:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  407e8c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  407e90:	d204      	bcs.n	407e9c <__aeabi_dmul+0x80>
  407e92:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  407e96:	416d      	adcs	r5, r5
  407e98:	eb46 0606 	adc.w	r6, r6, r6
  407e9c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  407ea0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  407ea4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  407ea8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  407eac:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  407eb0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  407eb4:	bf88      	it	hi
  407eb6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  407eba:	d81e      	bhi.n	407efa <__aeabi_dmul+0xde>
  407ebc:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  407ec0:	bf08      	it	eq
  407ec2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  407ec6:	f150 0000 	adcs.w	r0, r0, #0
  407eca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  407ece:	bd70      	pop	{r4, r5, r6, pc}
  407ed0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  407ed4:	ea46 0101 	orr.w	r1, r6, r1
  407ed8:	ea40 0002 	orr.w	r0, r0, r2
  407edc:	ea81 0103 	eor.w	r1, r1, r3
  407ee0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  407ee4:	bfc2      	ittt	gt
  407ee6:	ebd4 050c 	rsbsgt	r5, r4, ip
  407eea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  407eee:	bd70      	popgt	{r4, r5, r6, pc}
  407ef0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  407ef4:	f04f 0e00 	mov.w	lr, #0
  407ef8:	3c01      	subs	r4, #1
  407efa:	f300 80ab 	bgt.w	408054 <__aeabi_dmul+0x238>
  407efe:	f114 0f36 	cmn.w	r4, #54	; 0x36
  407f02:	bfde      	ittt	le
  407f04:	2000      	movle	r0, #0
  407f06:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  407f0a:	bd70      	pople	{r4, r5, r6, pc}
  407f0c:	f1c4 0400 	rsb	r4, r4, #0
  407f10:	3c20      	subs	r4, #32
  407f12:	da35      	bge.n	407f80 <__aeabi_dmul+0x164>
  407f14:	340c      	adds	r4, #12
  407f16:	dc1b      	bgt.n	407f50 <__aeabi_dmul+0x134>
  407f18:	f104 0414 	add.w	r4, r4, #20
  407f1c:	f1c4 0520 	rsb	r5, r4, #32
  407f20:	fa00 f305 	lsl.w	r3, r0, r5
  407f24:	fa20 f004 	lsr.w	r0, r0, r4
  407f28:	fa01 f205 	lsl.w	r2, r1, r5
  407f2c:	ea40 0002 	orr.w	r0, r0, r2
  407f30:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  407f34:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  407f38:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  407f3c:	fa21 f604 	lsr.w	r6, r1, r4
  407f40:	eb42 0106 	adc.w	r1, r2, r6
  407f44:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  407f48:	bf08      	it	eq
  407f4a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  407f4e:	bd70      	pop	{r4, r5, r6, pc}
  407f50:	f1c4 040c 	rsb	r4, r4, #12
  407f54:	f1c4 0520 	rsb	r5, r4, #32
  407f58:	fa00 f304 	lsl.w	r3, r0, r4
  407f5c:	fa20 f005 	lsr.w	r0, r0, r5
  407f60:	fa01 f204 	lsl.w	r2, r1, r4
  407f64:	ea40 0002 	orr.w	r0, r0, r2
  407f68:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  407f6c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  407f70:	f141 0100 	adc.w	r1, r1, #0
  407f74:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  407f78:	bf08      	it	eq
  407f7a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  407f7e:	bd70      	pop	{r4, r5, r6, pc}
  407f80:	f1c4 0520 	rsb	r5, r4, #32
  407f84:	fa00 f205 	lsl.w	r2, r0, r5
  407f88:	ea4e 0e02 	orr.w	lr, lr, r2
  407f8c:	fa20 f304 	lsr.w	r3, r0, r4
  407f90:	fa01 f205 	lsl.w	r2, r1, r5
  407f94:	ea43 0302 	orr.w	r3, r3, r2
  407f98:	fa21 f004 	lsr.w	r0, r1, r4
  407f9c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  407fa0:	fa21 f204 	lsr.w	r2, r1, r4
  407fa4:	ea20 0002 	bic.w	r0, r0, r2
  407fa8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  407fac:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  407fb0:	bf08      	it	eq
  407fb2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  407fb6:	bd70      	pop	{r4, r5, r6, pc}
  407fb8:	f094 0f00 	teq	r4, #0
  407fbc:	d10f      	bne.n	407fde <__aeabi_dmul+0x1c2>
  407fbe:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  407fc2:	0040      	lsls	r0, r0, #1
  407fc4:	eb41 0101 	adc.w	r1, r1, r1
  407fc8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  407fcc:	bf08      	it	eq
  407fce:	3c01      	subeq	r4, #1
  407fd0:	d0f7      	beq.n	407fc2 <__aeabi_dmul+0x1a6>
  407fd2:	ea41 0106 	orr.w	r1, r1, r6
  407fd6:	f095 0f00 	teq	r5, #0
  407fda:	bf18      	it	ne
  407fdc:	4770      	bxne	lr
  407fde:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  407fe2:	0052      	lsls	r2, r2, #1
  407fe4:	eb43 0303 	adc.w	r3, r3, r3
  407fe8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  407fec:	bf08      	it	eq
  407fee:	3d01      	subeq	r5, #1
  407ff0:	d0f7      	beq.n	407fe2 <__aeabi_dmul+0x1c6>
  407ff2:	ea43 0306 	orr.w	r3, r3, r6
  407ff6:	4770      	bx	lr
  407ff8:	ea94 0f0c 	teq	r4, ip
  407ffc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  408000:	bf18      	it	ne
  408002:	ea95 0f0c 	teqne	r5, ip
  408006:	d00c      	beq.n	408022 <__aeabi_dmul+0x206>
  408008:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  40800c:	bf18      	it	ne
  40800e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  408012:	d1d1      	bne.n	407fb8 <__aeabi_dmul+0x19c>
  408014:	ea81 0103 	eor.w	r1, r1, r3
  408018:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40801c:	f04f 0000 	mov.w	r0, #0
  408020:	bd70      	pop	{r4, r5, r6, pc}
  408022:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  408026:	bf06      	itte	eq
  408028:	4610      	moveq	r0, r2
  40802a:	4619      	moveq	r1, r3
  40802c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  408030:	d019      	beq.n	408066 <__aeabi_dmul+0x24a>
  408032:	ea94 0f0c 	teq	r4, ip
  408036:	d102      	bne.n	40803e <__aeabi_dmul+0x222>
  408038:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  40803c:	d113      	bne.n	408066 <__aeabi_dmul+0x24a>
  40803e:	ea95 0f0c 	teq	r5, ip
  408042:	d105      	bne.n	408050 <__aeabi_dmul+0x234>
  408044:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  408048:	bf1c      	itt	ne
  40804a:	4610      	movne	r0, r2
  40804c:	4619      	movne	r1, r3
  40804e:	d10a      	bne.n	408066 <__aeabi_dmul+0x24a>
  408050:	ea81 0103 	eor.w	r1, r1, r3
  408054:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  408058:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  40805c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  408060:	f04f 0000 	mov.w	r0, #0
  408064:	bd70      	pop	{r4, r5, r6, pc}
  408066:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  40806a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  40806e:	bd70      	pop	{r4, r5, r6, pc}

00408070 <__aeabi_ddiv>:
  408070:	b570      	push	{r4, r5, r6, lr}
  408072:	f04f 0cff 	mov.w	ip, #255	; 0xff
  408076:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  40807a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  40807e:	bf1d      	ittte	ne
  408080:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  408084:	ea94 0f0c 	teqne	r4, ip
  408088:	ea95 0f0c 	teqne	r5, ip
  40808c:	f000 f8a7 	bleq	4081de <__aeabi_ddiv+0x16e>
  408090:	eba4 0405 	sub.w	r4, r4, r5
  408094:	ea81 0e03 	eor.w	lr, r1, r3
  408098:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  40809c:	ea4f 3101 	mov.w	r1, r1, lsl #12
  4080a0:	f000 8088 	beq.w	4081b4 <__aeabi_ddiv+0x144>
  4080a4:	ea4f 3303 	mov.w	r3, r3, lsl #12
  4080a8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  4080ac:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  4080b0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  4080b4:	ea4f 2202 	mov.w	r2, r2, lsl #8
  4080b8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  4080bc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  4080c0:	ea4f 2600 	mov.w	r6, r0, lsl #8
  4080c4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  4080c8:	429d      	cmp	r5, r3
  4080ca:	bf08      	it	eq
  4080cc:	4296      	cmpeq	r6, r2
  4080ce:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  4080d2:	f504 7440 	add.w	r4, r4, #768	; 0x300
  4080d6:	d202      	bcs.n	4080de <__aeabi_ddiv+0x6e>
  4080d8:	085b      	lsrs	r3, r3, #1
  4080da:	ea4f 0232 	mov.w	r2, r2, rrx
  4080de:	1ab6      	subs	r6, r6, r2
  4080e0:	eb65 0503 	sbc.w	r5, r5, r3
  4080e4:	085b      	lsrs	r3, r3, #1
  4080e6:	ea4f 0232 	mov.w	r2, r2, rrx
  4080ea:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  4080ee:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  4080f2:	ebb6 0e02 	subs.w	lr, r6, r2
  4080f6:	eb75 0e03 	sbcs.w	lr, r5, r3
  4080fa:	bf22      	ittt	cs
  4080fc:	1ab6      	subcs	r6, r6, r2
  4080fe:	4675      	movcs	r5, lr
  408100:	ea40 000c 	orrcs.w	r0, r0, ip
  408104:	085b      	lsrs	r3, r3, #1
  408106:	ea4f 0232 	mov.w	r2, r2, rrx
  40810a:	ebb6 0e02 	subs.w	lr, r6, r2
  40810e:	eb75 0e03 	sbcs.w	lr, r5, r3
  408112:	bf22      	ittt	cs
  408114:	1ab6      	subcs	r6, r6, r2
  408116:	4675      	movcs	r5, lr
  408118:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  40811c:	085b      	lsrs	r3, r3, #1
  40811e:	ea4f 0232 	mov.w	r2, r2, rrx
  408122:	ebb6 0e02 	subs.w	lr, r6, r2
  408126:	eb75 0e03 	sbcs.w	lr, r5, r3
  40812a:	bf22      	ittt	cs
  40812c:	1ab6      	subcs	r6, r6, r2
  40812e:	4675      	movcs	r5, lr
  408130:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  408134:	085b      	lsrs	r3, r3, #1
  408136:	ea4f 0232 	mov.w	r2, r2, rrx
  40813a:	ebb6 0e02 	subs.w	lr, r6, r2
  40813e:	eb75 0e03 	sbcs.w	lr, r5, r3
  408142:	bf22      	ittt	cs
  408144:	1ab6      	subcs	r6, r6, r2
  408146:	4675      	movcs	r5, lr
  408148:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  40814c:	ea55 0e06 	orrs.w	lr, r5, r6
  408150:	d018      	beq.n	408184 <__aeabi_ddiv+0x114>
  408152:	ea4f 1505 	mov.w	r5, r5, lsl #4
  408156:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  40815a:	ea4f 1606 	mov.w	r6, r6, lsl #4
  40815e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  408162:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  408166:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  40816a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  40816e:	d1c0      	bne.n	4080f2 <__aeabi_ddiv+0x82>
  408170:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  408174:	d10b      	bne.n	40818e <__aeabi_ddiv+0x11e>
  408176:	ea41 0100 	orr.w	r1, r1, r0
  40817a:	f04f 0000 	mov.w	r0, #0
  40817e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  408182:	e7b6      	b.n	4080f2 <__aeabi_ddiv+0x82>
  408184:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  408188:	bf04      	itt	eq
  40818a:	4301      	orreq	r1, r0
  40818c:	2000      	moveq	r0, #0
  40818e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  408192:	bf88      	it	hi
  408194:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  408198:	f63f aeaf 	bhi.w	407efa <__aeabi_dmul+0xde>
  40819c:	ebb5 0c03 	subs.w	ip, r5, r3
  4081a0:	bf04      	itt	eq
  4081a2:	ebb6 0c02 	subseq.w	ip, r6, r2
  4081a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  4081aa:	f150 0000 	adcs.w	r0, r0, #0
  4081ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  4081b2:	bd70      	pop	{r4, r5, r6, pc}
  4081b4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  4081b8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  4081bc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  4081c0:	bfc2      	ittt	gt
  4081c2:	ebd4 050c 	rsbsgt	r5, r4, ip
  4081c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  4081ca:	bd70      	popgt	{r4, r5, r6, pc}
  4081cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  4081d0:	f04f 0e00 	mov.w	lr, #0
  4081d4:	3c01      	subs	r4, #1
  4081d6:	e690      	b.n	407efa <__aeabi_dmul+0xde>
  4081d8:	ea45 0e06 	orr.w	lr, r5, r6
  4081dc:	e68d      	b.n	407efa <__aeabi_dmul+0xde>
  4081de:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  4081e2:	ea94 0f0c 	teq	r4, ip
  4081e6:	bf08      	it	eq
  4081e8:	ea95 0f0c 	teqeq	r5, ip
  4081ec:	f43f af3b 	beq.w	408066 <__aeabi_dmul+0x24a>
  4081f0:	ea94 0f0c 	teq	r4, ip
  4081f4:	d10a      	bne.n	40820c <__aeabi_ddiv+0x19c>
  4081f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  4081fa:	f47f af34 	bne.w	408066 <__aeabi_dmul+0x24a>
  4081fe:	ea95 0f0c 	teq	r5, ip
  408202:	f47f af25 	bne.w	408050 <__aeabi_dmul+0x234>
  408206:	4610      	mov	r0, r2
  408208:	4619      	mov	r1, r3
  40820a:	e72c      	b.n	408066 <__aeabi_dmul+0x24a>
  40820c:	ea95 0f0c 	teq	r5, ip
  408210:	d106      	bne.n	408220 <__aeabi_ddiv+0x1b0>
  408212:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  408216:	f43f aefd 	beq.w	408014 <__aeabi_dmul+0x1f8>
  40821a:	4610      	mov	r0, r2
  40821c:	4619      	mov	r1, r3
  40821e:	e722      	b.n	408066 <__aeabi_dmul+0x24a>
  408220:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  408224:	bf18      	it	ne
  408226:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  40822a:	f47f aec5 	bne.w	407fb8 <__aeabi_dmul+0x19c>
  40822e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  408232:	f47f af0d 	bne.w	408050 <__aeabi_dmul+0x234>
  408236:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  40823a:	f47f aeeb 	bne.w	408014 <__aeabi_dmul+0x1f8>
  40823e:	e712      	b.n	408066 <__aeabi_dmul+0x24a>

00408240 <__gedf2>:
  408240:	f04f 3cff 	mov.w	ip, #4294967295
  408244:	e006      	b.n	408254 <__cmpdf2+0x4>
  408246:	bf00      	nop

00408248 <__ledf2>:
  408248:	f04f 0c01 	mov.w	ip, #1
  40824c:	e002      	b.n	408254 <__cmpdf2+0x4>
  40824e:	bf00      	nop

00408250 <__cmpdf2>:
  408250:	f04f 0c01 	mov.w	ip, #1
  408254:	f84d cd04 	str.w	ip, [sp, #-4]!
  408258:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  40825c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  408260:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  408264:	bf18      	it	ne
  408266:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  40826a:	d01b      	beq.n	4082a4 <__cmpdf2+0x54>
  40826c:	b001      	add	sp, #4
  40826e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  408272:	bf0c      	ite	eq
  408274:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  408278:	ea91 0f03 	teqne	r1, r3
  40827c:	bf02      	ittt	eq
  40827e:	ea90 0f02 	teqeq	r0, r2
  408282:	2000      	moveq	r0, #0
  408284:	4770      	bxeq	lr
  408286:	f110 0f00 	cmn.w	r0, #0
  40828a:	ea91 0f03 	teq	r1, r3
  40828e:	bf58      	it	pl
  408290:	4299      	cmppl	r1, r3
  408292:	bf08      	it	eq
  408294:	4290      	cmpeq	r0, r2
  408296:	bf2c      	ite	cs
  408298:	17d8      	asrcs	r0, r3, #31
  40829a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  40829e:	f040 0001 	orr.w	r0, r0, #1
  4082a2:	4770      	bx	lr
  4082a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  4082a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  4082ac:	d102      	bne.n	4082b4 <__cmpdf2+0x64>
  4082ae:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  4082b2:	d107      	bne.n	4082c4 <__cmpdf2+0x74>
  4082b4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  4082b8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  4082bc:	d1d6      	bne.n	40826c <__cmpdf2+0x1c>
  4082be:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  4082c2:	d0d3      	beq.n	40826c <__cmpdf2+0x1c>
  4082c4:	f85d 0b04 	ldr.w	r0, [sp], #4
  4082c8:	4770      	bx	lr
  4082ca:	bf00      	nop

004082cc <__aeabi_cdrcmple>:
  4082cc:	4684      	mov	ip, r0
  4082ce:	4610      	mov	r0, r2
  4082d0:	4662      	mov	r2, ip
  4082d2:	468c      	mov	ip, r1
  4082d4:	4619      	mov	r1, r3
  4082d6:	4663      	mov	r3, ip
  4082d8:	e000      	b.n	4082dc <__aeabi_cdcmpeq>
  4082da:	bf00      	nop

004082dc <__aeabi_cdcmpeq>:
  4082dc:	b501      	push	{r0, lr}
  4082de:	f7ff ffb7 	bl	408250 <__cmpdf2>
  4082e2:	2800      	cmp	r0, #0
  4082e4:	bf48      	it	mi
  4082e6:	f110 0f00 	cmnmi.w	r0, #0
  4082ea:	bd01      	pop	{r0, pc}

004082ec <__aeabi_dcmpeq>:
  4082ec:	f84d ed08 	str.w	lr, [sp, #-8]!
  4082f0:	f7ff fff4 	bl	4082dc <__aeabi_cdcmpeq>
  4082f4:	bf0c      	ite	eq
  4082f6:	2001      	moveq	r0, #1
  4082f8:	2000      	movne	r0, #0
  4082fa:	f85d fb08 	ldr.w	pc, [sp], #8
  4082fe:	bf00      	nop

00408300 <__aeabi_dcmplt>:
  408300:	f84d ed08 	str.w	lr, [sp, #-8]!
  408304:	f7ff ffea 	bl	4082dc <__aeabi_cdcmpeq>
  408308:	bf34      	ite	cc
  40830a:	2001      	movcc	r0, #1
  40830c:	2000      	movcs	r0, #0
  40830e:	f85d fb08 	ldr.w	pc, [sp], #8
  408312:	bf00      	nop

00408314 <__aeabi_dcmple>:
  408314:	f84d ed08 	str.w	lr, [sp, #-8]!
  408318:	f7ff ffe0 	bl	4082dc <__aeabi_cdcmpeq>
  40831c:	bf94      	ite	ls
  40831e:	2001      	movls	r0, #1
  408320:	2000      	movhi	r0, #0
  408322:	f85d fb08 	ldr.w	pc, [sp], #8
  408326:	bf00      	nop

00408328 <__aeabi_dcmpge>:
  408328:	f84d ed08 	str.w	lr, [sp, #-8]!
  40832c:	f7ff ffce 	bl	4082cc <__aeabi_cdrcmple>
  408330:	bf94      	ite	ls
  408332:	2001      	movls	r0, #1
  408334:	2000      	movhi	r0, #0
  408336:	f85d fb08 	ldr.w	pc, [sp], #8
  40833a:	bf00      	nop

0040833c <__aeabi_dcmpgt>:
  40833c:	f84d ed08 	str.w	lr, [sp, #-8]!
  408340:	f7ff ffc4 	bl	4082cc <__aeabi_cdrcmple>
  408344:	bf34      	ite	cc
  408346:	2001      	movcc	r0, #1
  408348:	2000      	movcs	r0, #0
  40834a:	f85d fb08 	ldr.w	pc, [sp], #8
  40834e:	bf00      	nop

00408350 <__aeabi_d2iz>:
  408350:	ea4f 0241 	mov.w	r2, r1, lsl #1
  408354:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  408358:	d215      	bcs.n	408386 <__aeabi_d2iz+0x36>
  40835a:	d511      	bpl.n	408380 <__aeabi_d2iz+0x30>
  40835c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  408360:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  408364:	d912      	bls.n	40838c <__aeabi_d2iz+0x3c>
  408366:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  40836a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  40836e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  408372:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  408376:	fa23 f002 	lsr.w	r0, r3, r2
  40837a:	bf18      	it	ne
  40837c:	4240      	negne	r0, r0
  40837e:	4770      	bx	lr
  408380:	f04f 0000 	mov.w	r0, #0
  408384:	4770      	bx	lr
  408386:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  40838a:	d105      	bne.n	408398 <__aeabi_d2iz+0x48>
  40838c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  408390:	bf08      	it	eq
  408392:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  408396:	4770      	bx	lr
  408398:	f04f 0000 	mov.w	r0, #0
  40839c:	4770      	bx	lr
  40839e:	bf00      	nop

004083a0 <__aeabi_uldivmod>:
  4083a0:	b953      	cbnz	r3, 4083b8 <__aeabi_uldivmod+0x18>
  4083a2:	b94a      	cbnz	r2, 4083b8 <__aeabi_uldivmod+0x18>
  4083a4:	2900      	cmp	r1, #0
  4083a6:	bf08      	it	eq
  4083a8:	2800      	cmpeq	r0, #0
  4083aa:	bf1c      	itt	ne
  4083ac:	f04f 31ff 	movne.w	r1, #4294967295
  4083b0:	f04f 30ff 	movne.w	r0, #4294967295
  4083b4:	f000 b83c 	b.w	408430 <__aeabi_idiv0>
  4083b8:	b082      	sub	sp, #8
  4083ba:	46ec      	mov	ip, sp
  4083bc:	e92d 5000 	stmdb	sp!, {ip, lr}
  4083c0:	f000 f81e 	bl	408400 <__gnu_uldivmod_helper>
  4083c4:	f8dd e004 	ldr.w	lr, [sp, #4]
  4083c8:	b002      	add	sp, #8
  4083ca:	bc0c      	pop	{r2, r3}
  4083cc:	4770      	bx	lr
  4083ce:	bf00      	nop

004083d0 <__gnu_ldivmod_helper>:
  4083d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4083d4:	4690      	mov	r8, r2
  4083d6:	4606      	mov	r6, r0
  4083d8:	460f      	mov	r7, r1
  4083da:	461d      	mov	r5, r3
  4083dc:	9c06      	ldr	r4, [sp, #24]
  4083de:	f000 f829 	bl	408434 <__divdi3>
  4083e2:	fb08 fc01 	mul.w	ip, r8, r1
  4083e6:	4686      	mov	lr, r0
  4083e8:	fba8 2300 	umull	r2, r3, r8, r0
  4083ec:	fb00 c505 	mla	r5, r0, r5, ip
  4083f0:	1ab2      	subs	r2, r6, r2
  4083f2:	442b      	add	r3, r5
  4083f4:	eb67 0303 	sbc.w	r3, r7, r3
  4083f8:	e9c4 2300 	strd	r2, r3, [r4]
  4083fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00408400 <__gnu_uldivmod_helper>:
  408400:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  408404:	461d      	mov	r5, r3
  408406:	4617      	mov	r7, r2
  408408:	4680      	mov	r8, r0
  40840a:	4689      	mov	r9, r1
  40840c:	9e08      	ldr	r6, [sp, #32]
  40840e:	f000 f953 	bl	4086b8 <__udivdi3>
  408412:	fb00 f305 	mul.w	r3, r0, r5
  408416:	fba0 4507 	umull	r4, r5, r0, r7
  40841a:	fb07 3701 	mla	r7, r7, r1, r3
  40841e:	ebb8 0404 	subs.w	r4, r8, r4
  408422:	443d      	add	r5, r7
  408424:	eb69 0505 	sbc.w	r5, r9, r5
  408428:	e9c6 4500 	strd	r4, r5, [r6]
  40842c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00408430 <__aeabi_idiv0>:
  408430:	4770      	bx	lr
  408432:	bf00      	nop

00408434 <__divdi3>:
  408434:	2900      	cmp	r1, #0
  408436:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40843a:	f2c0 80a2 	blt.w	408582 <__divdi3+0x14e>
  40843e:	2600      	movs	r6, #0
  408440:	2b00      	cmp	r3, #0
  408442:	f2c0 8098 	blt.w	408576 <__divdi3+0x142>
  408446:	468c      	mov	ip, r1
  408448:	4690      	mov	r8, r2
  40844a:	469e      	mov	lr, r3
  40844c:	4615      	mov	r5, r2
  40844e:	4604      	mov	r4, r0
  408450:	460f      	mov	r7, r1
  408452:	bbcb      	cbnz	r3, 4084c8 <__divdi3+0x94>
  408454:	428a      	cmp	r2, r1
  408456:	d956      	bls.n	408506 <__divdi3+0xd2>
  408458:	fab2 f382 	clz	r3, r2
  40845c:	b13b      	cbz	r3, 40846e <__divdi3+0x3a>
  40845e:	f1c3 0220 	rsb	r2, r3, #32
  408462:	409f      	lsls	r7, r3
  408464:	409d      	lsls	r5, r3
  408466:	409c      	lsls	r4, r3
  408468:	fa20 f202 	lsr.w	r2, r0, r2
  40846c:	4317      	orrs	r7, r2
  40846e:	0c28      	lsrs	r0, r5, #16
  408470:	0c22      	lsrs	r2, r4, #16
  408472:	fa1f fe85 	uxth.w	lr, r5
  408476:	fbb7 f1f0 	udiv	r1, r7, r0
  40847a:	fb00 7711 	mls	r7, r0, r1, r7
  40847e:	fb0e f301 	mul.w	r3, lr, r1
  408482:	ea42 4707 	orr.w	r7, r2, r7, lsl #16
  408486:	42bb      	cmp	r3, r7
  408488:	d907      	bls.n	40849a <__divdi3+0x66>
  40848a:	197f      	adds	r7, r7, r5
  40848c:	f080 8101 	bcs.w	408692 <__divdi3+0x25e>
  408490:	42bb      	cmp	r3, r7
  408492:	f240 80fe 	bls.w	408692 <__divdi3+0x25e>
  408496:	3902      	subs	r1, #2
  408498:	442f      	add	r7, r5
  40849a:	1aff      	subs	r7, r7, r3
  40849c:	b2a4      	uxth	r4, r4
  40849e:	fbb7 f3f0 	udiv	r3, r7, r0
  4084a2:	fb00 7713 	mls	r7, r0, r3, r7
  4084a6:	fb0e fe03 	mul.w	lr, lr, r3
  4084aa:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
  4084ae:	45be      	cmp	lr, r7
  4084b0:	d906      	bls.n	4084c0 <__divdi3+0x8c>
  4084b2:	197f      	adds	r7, r7, r5
  4084b4:	f080 80eb 	bcs.w	40868e <__divdi3+0x25a>
  4084b8:	45be      	cmp	lr, r7
  4084ba:	f240 80e8 	bls.w	40868e <__divdi3+0x25a>
  4084be:	3b02      	subs	r3, #2
  4084c0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
  4084c4:	2200      	movs	r2, #0
  4084c6:	e003      	b.n	4084d0 <__divdi3+0x9c>
  4084c8:	428b      	cmp	r3, r1
  4084ca:	d90f      	bls.n	4084ec <__divdi3+0xb8>
  4084cc:	2200      	movs	r2, #0
  4084ce:	4613      	mov	r3, r2
  4084d0:	1c34      	adds	r4, r6, #0
  4084d2:	f04f 0500 	mov.w	r5, #0
  4084d6:	bf18      	it	ne
  4084d8:	2401      	movne	r4, #1
  4084da:	4260      	negs	r0, r4
  4084dc:	eb65 0145 	sbc.w	r1, r5, r5, lsl #1
  4084e0:	4058      	eors	r0, r3
  4084e2:	4051      	eors	r1, r2
  4084e4:	1900      	adds	r0, r0, r4
  4084e6:	4169      	adcs	r1, r5
  4084e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4084ec:	fab3 f283 	clz	r2, r3
  4084f0:	2a00      	cmp	r2, #0
  4084f2:	f040 8083 	bne.w	4085fc <__divdi3+0x1c8>
  4084f6:	4580      	cmp	r8, r0
  4084f8:	f240 80cd 	bls.w	408696 <__divdi3+0x262>
  4084fc:	428b      	cmp	r3, r1
  4084fe:	f0c0 80ca 	bcc.w	408696 <__divdi3+0x262>
  408502:	4613      	mov	r3, r2
  408504:	e7e4      	b.n	4084d0 <__divdi3+0x9c>
  408506:	b912      	cbnz	r2, 40850e <__divdi3+0xda>
  408508:	2301      	movs	r3, #1
  40850a:	fbb3 f5f2 	udiv	r5, r3, r2
  40850e:	fab5 f285 	clz	r2, r5
  408512:	2a00      	cmp	r2, #0
  408514:	d13b      	bne.n	40858e <__divdi3+0x15a>
  408516:	1b78      	subs	r0, r7, r5
  408518:	ea4f 4e15 	mov.w	lr, r5, lsr #16
  40851c:	fa1f fc85 	uxth.w	ip, r5
  408520:	2201      	movs	r2, #1
  408522:	0c21      	lsrs	r1, r4, #16
  408524:	fbb0 f8fe 	udiv	r8, r0, lr
  408528:	fb0e 0018 	mls	r0, lr, r8, r0
  40852c:	fb0c f308 	mul.w	r3, ip, r8
  408530:	ea41 4700 	orr.w	r7, r1, r0, lsl #16
  408534:	42bb      	cmp	r3, r7
  408536:	d908      	bls.n	40854a <__divdi3+0x116>
  408538:	197f      	adds	r7, r7, r5
  40853a:	f080 80b0 	bcs.w	40869e <__divdi3+0x26a>
  40853e:	42bb      	cmp	r3, r7
  408540:	f240 80ad 	bls.w	40869e <__divdi3+0x26a>
  408544:	f1a8 0802 	sub.w	r8, r8, #2
  408548:	442f      	add	r7, r5
  40854a:	1aff      	subs	r7, r7, r3
  40854c:	b2a4      	uxth	r4, r4
  40854e:	fbb7 f3fe 	udiv	r3, r7, lr
  408552:	fb0e 7713 	mls	r7, lr, r3, r7
  408556:	fb0c fc03 	mul.w	ip, ip, r3
  40855a:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
  40855e:	45bc      	cmp	ip, r7
  408560:	d906      	bls.n	408570 <__divdi3+0x13c>
  408562:	197f      	adds	r7, r7, r5
  408564:	f080 8099 	bcs.w	40869a <__divdi3+0x266>
  408568:	45bc      	cmp	ip, r7
  40856a:	f240 8096 	bls.w	40869a <__divdi3+0x266>
  40856e:	3b02      	subs	r3, #2
  408570:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
  408574:	e7ac      	b.n	4084d0 <__divdi3+0x9c>
  408576:	4252      	negs	r2, r2
  408578:	ea6f 0606 	mvn.w	r6, r6
  40857c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  408580:	e761      	b.n	408446 <__divdi3+0x12>
  408582:	4240      	negs	r0, r0
  408584:	f04f 36ff 	mov.w	r6, #4294967295
  408588:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  40858c:	e758      	b.n	408440 <__divdi3+0xc>
  40858e:	4095      	lsls	r5, r2
  408590:	f1c2 0120 	rsb	r1, r2, #32
  408594:	fa07 f302 	lsl.w	r3, r7, r2
  408598:	ea4f 4e15 	mov.w	lr, r5, lsr #16
  40859c:	40cf      	lsrs	r7, r1
  40859e:	fa24 f101 	lsr.w	r1, r4, r1
  4085a2:	4094      	lsls	r4, r2
  4085a4:	fa1f fc85 	uxth.w	ip, r5
  4085a8:	4319      	orrs	r1, r3
  4085aa:	fbb7 f2fe 	udiv	r2, r7, lr
  4085ae:	ea4f 4811 	mov.w	r8, r1, lsr #16
  4085b2:	fb0e 7712 	mls	r7, lr, r2, r7
  4085b6:	fb0c f302 	mul.w	r3, ip, r2
  4085ba:	ea48 4707 	orr.w	r7, r8, r7, lsl #16
  4085be:	42bb      	cmp	r3, r7
  4085c0:	d905      	bls.n	4085ce <__divdi3+0x19a>
  4085c2:	197f      	adds	r7, r7, r5
  4085c4:	d271      	bcs.n	4086aa <__divdi3+0x276>
  4085c6:	42bb      	cmp	r3, r7
  4085c8:	d96f      	bls.n	4086aa <__divdi3+0x276>
  4085ca:	3a02      	subs	r2, #2
  4085cc:	442f      	add	r7, r5
  4085ce:	1aff      	subs	r7, r7, r3
  4085d0:	b289      	uxth	r1, r1
  4085d2:	fbb7 f8fe 	udiv	r8, r7, lr
  4085d6:	fb0e 7718 	mls	r7, lr, r8, r7
  4085da:	fb0c f008 	mul.w	r0, ip, r8
  4085de:	ea41 4307 	orr.w	r3, r1, r7, lsl #16
  4085e2:	4298      	cmp	r0, r3
  4085e4:	d906      	bls.n	4085f4 <__divdi3+0x1c0>
  4085e6:	195b      	adds	r3, r3, r5
  4085e8:	d261      	bcs.n	4086ae <__divdi3+0x27a>
  4085ea:	4298      	cmp	r0, r3
  4085ec:	d95f      	bls.n	4086ae <__divdi3+0x27a>
  4085ee:	f1a8 0802 	sub.w	r8, r8, #2
  4085f2:	442b      	add	r3, r5
  4085f4:	1a18      	subs	r0, r3, r0
  4085f6:	ea48 4202 	orr.w	r2, r8, r2, lsl #16
  4085fa:	e792      	b.n	408522 <__divdi3+0xee>
  4085fc:	f1c2 0720 	rsb	r7, r2, #32
  408600:	fa03 fe02 	lsl.w	lr, r3, r2
  408604:	fa08 f502 	lsl.w	r5, r8, r2
  408608:	4091      	lsls	r1, r2
  40860a:	fa28 f307 	lsr.w	r3, r8, r7
  40860e:	fa2c fc07 	lsr.w	ip, ip, r7
  408612:	40f8      	lsrs	r0, r7
  408614:	ea43 0e0e 	orr.w	lr, r3, lr
  408618:	4308      	orrs	r0, r1
  40861a:	ea4f 481e 	mov.w	r8, lr, lsr #16
  40861e:	0c07      	lsrs	r7, r0, #16
  408620:	fa1f fa8e 	uxth.w	sl, lr
  408624:	fbbc f9f8 	udiv	r9, ip, r8
  408628:	fb08 cc19 	mls	ip, r8, r9, ip
  40862c:	fb0a f109 	mul.w	r1, sl, r9
  408630:	ea47 4c0c 	orr.w	ip, r7, ip, lsl #16
  408634:	4561      	cmp	r1, ip
  408636:	d907      	bls.n	408648 <__divdi3+0x214>
  408638:	eb1c 0c0e 	adds.w	ip, ip, lr
  40863c:	d232      	bcs.n	4086a4 <__divdi3+0x270>
  40863e:	4561      	cmp	r1, ip
  408640:	d930      	bls.n	4086a4 <__divdi3+0x270>
  408642:	f1a9 0902 	sub.w	r9, r9, #2
  408646:	44f4      	add	ip, lr
  408648:	ebc1 0c0c 	rsb	ip, r1, ip
  40864c:	b280      	uxth	r0, r0
  40864e:	fbbc f3f8 	udiv	r3, ip, r8
  408652:	fb08 cc13 	mls	ip, r8, r3, ip
  408656:	fb0a fa03 	mul.w	sl, sl, r3
  40865a:	ea40 410c 	orr.w	r1, r0, ip, lsl #16
  40865e:	458a      	cmp	sl, r1
  408660:	d906      	bls.n	408670 <__divdi3+0x23c>
  408662:	eb11 010e 	adds.w	r1, r1, lr
  408666:	d225      	bcs.n	4086b4 <__divdi3+0x280>
  408668:	458a      	cmp	sl, r1
  40866a:	d923      	bls.n	4086b4 <__divdi3+0x280>
  40866c:	3b02      	subs	r3, #2
  40866e:	4471      	add	r1, lr
  408670:	ea43 4309 	orr.w	r3, r3, r9, lsl #16
  408674:	ebca 0101 	rsb	r1, sl, r1
  408678:	fba3 8905 	umull	r8, r9, r3, r5
  40867c:	4549      	cmp	r1, r9
  40867e:	d303      	bcc.n	408688 <__divdi3+0x254>
  408680:	d103      	bne.n	40868a <__divdi3+0x256>
  408682:	4094      	lsls	r4, r2
  408684:	4544      	cmp	r4, r8
  408686:	d200      	bcs.n	40868a <__divdi3+0x256>
  408688:	3b01      	subs	r3, #1
  40868a:	2200      	movs	r2, #0
  40868c:	e720      	b.n	4084d0 <__divdi3+0x9c>
  40868e:	3b01      	subs	r3, #1
  408690:	e716      	b.n	4084c0 <__divdi3+0x8c>
  408692:	3901      	subs	r1, #1
  408694:	e701      	b.n	40849a <__divdi3+0x66>
  408696:	2301      	movs	r3, #1
  408698:	e71a      	b.n	4084d0 <__divdi3+0x9c>
  40869a:	3b01      	subs	r3, #1
  40869c:	e768      	b.n	408570 <__divdi3+0x13c>
  40869e:	f108 38ff 	add.w	r8, r8, #4294967295
  4086a2:	e752      	b.n	40854a <__divdi3+0x116>
  4086a4:	f109 39ff 	add.w	r9, r9, #4294967295
  4086a8:	e7ce      	b.n	408648 <__divdi3+0x214>
  4086aa:	3a01      	subs	r2, #1
  4086ac:	e78f      	b.n	4085ce <__divdi3+0x19a>
  4086ae:	f108 38ff 	add.w	r8, r8, #4294967295
  4086b2:	e79f      	b.n	4085f4 <__divdi3+0x1c0>
  4086b4:	3b01      	subs	r3, #1
  4086b6:	e7db      	b.n	408670 <__divdi3+0x23c>

004086b8 <__udivdi3>:
  4086b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  4086bc:	2b00      	cmp	r3, #0
  4086be:	d140      	bne.n	408742 <__udivdi3+0x8a>
  4086c0:	428a      	cmp	r2, r1
  4086c2:	4604      	mov	r4, r0
  4086c4:	4615      	mov	r5, r2
  4086c6:	d94a      	bls.n	40875e <__udivdi3+0xa6>
  4086c8:	fab2 f382 	clz	r3, r2
  4086cc:	460f      	mov	r7, r1
  4086ce:	b14b      	cbz	r3, 4086e4 <__udivdi3+0x2c>
  4086d0:	f1c3 0620 	rsb	r6, r3, #32
  4086d4:	4099      	lsls	r1, r3
  4086d6:	fa00 f403 	lsl.w	r4, r0, r3
  4086da:	fa02 f503 	lsl.w	r5, r2, r3
  4086de:	40f0      	lsrs	r0, r6
  4086e0:	ea40 0701 	orr.w	r7, r0, r1
  4086e4:	0c29      	lsrs	r1, r5, #16
  4086e6:	0c26      	lsrs	r6, r4, #16
  4086e8:	fa1f fe85 	uxth.w	lr, r5
  4086ec:	fbb7 f0f1 	udiv	r0, r7, r1
  4086f0:	fb01 7710 	mls	r7, r1, r0, r7
  4086f4:	fb0e f200 	mul.w	r2, lr, r0
  4086f8:	ea46 4307 	orr.w	r3, r6, r7, lsl #16
  4086fc:	429a      	cmp	r2, r3
  4086fe:	d907      	bls.n	408710 <__udivdi3+0x58>
  408700:	195b      	adds	r3, r3, r5
  408702:	f080 80ea 	bcs.w	4088da <__udivdi3+0x222>
  408706:	429a      	cmp	r2, r3
  408708:	f240 80e7 	bls.w	4088da <__udivdi3+0x222>
  40870c:	3802      	subs	r0, #2
  40870e:	442b      	add	r3, r5
  408710:	1a9a      	subs	r2, r3, r2
  408712:	b2a4      	uxth	r4, r4
  408714:	fbb2 f3f1 	udiv	r3, r2, r1
  408718:	fb01 2213 	mls	r2, r1, r3, r2
  40871c:	fb0e fe03 	mul.w	lr, lr, r3
  408720:	ea44 4202 	orr.w	r2, r4, r2, lsl #16
  408724:	4596      	cmp	lr, r2
  408726:	d906      	bls.n	408736 <__udivdi3+0x7e>
  408728:	1952      	adds	r2, r2, r5
  40872a:	f080 80da 	bcs.w	4088e2 <__udivdi3+0x22a>
  40872e:	4596      	cmp	lr, r2
  408730:	f240 80d7 	bls.w	4088e2 <__udivdi3+0x22a>
  408734:	3b02      	subs	r3, #2
  408736:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
  40873a:	2600      	movs	r6, #0
  40873c:	4631      	mov	r1, r6
  40873e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  408742:	428b      	cmp	r3, r1
  408744:	d844      	bhi.n	4087d0 <__udivdi3+0x118>
  408746:	fab3 f683 	clz	r6, r3
  40874a:	2e00      	cmp	r6, #0
  40874c:	d145      	bne.n	4087da <__udivdi3+0x122>
  40874e:	4282      	cmp	r2, r0
  408750:	f240 80bf 	bls.w	4088d2 <__udivdi3+0x21a>
  408754:	428b      	cmp	r3, r1
  408756:	f0c0 80bc 	bcc.w	4088d2 <__udivdi3+0x21a>
  40875a:	4630      	mov	r0, r6
  40875c:	e7ee      	b.n	40873c <__udivdi3+0x84>
  40875e:	b912      	cbnz	r2, 408766 <__udivdi3+0xae>
  408760:	2501      	movs	r5, #1
  408762:	fbb5 f5f2 	udiv	r5, r5, r2
  408766:	fab5 f285 	clz	r2, r5
  40876a:	2a00      	cmp	r2, #0
  40876c:	d17b      	bne.n	408866 <__udivdi3+0x1ae>
  40876e:	1b4a      	subs	r2, r1, r5
  408770:	0c2f      	lsrs	r7, r5, #16
  408772:	fa1f fe85 	uxth.w	lr, r5
  408776:	2601      	movs	r6, #1
  408778:	0c23      	lsrs	r3, r4, #16
  40877a:	fbb2 f0f7 	udiv	r0, r2, r7
  40877e:	fb07 2210 	mls	r2, r7, r0, r2
  408782:	fb0e fc00 	mul.w	ip, lr, r0
  408786:	ea43 4102 	orr.w	r1, r3, r2, lsl #16
  40878a:	458c      	cmp	ip, r1
  40878c:	d907      	bls.n	40879e <__udivdi3+0xe6>
  40878e:	1949      	adds	r1, r1, r5
  408790:	f080 80a1 	bcs.w	4088d6 <__udivdi3+0x21e>
  408794:	458c      	cmp	ip, r1
  408796:	f240 809e 	bls.w	4088d6 <__udivdi3+0x21e>
  40879a:	3802      	subs	r0, #2
  40879c:	4429      	add	r1, r5
  40879e:	ebcc 0101 	rsb	r1, ip, r1
  4087a2:	b2a4      	uxth	r4, r4
  4087a4:	fbb1 f3f7 	udiv	r3, r1, r7
  4087a8:	fb07 1113 	mls	r1, r7, r3, r1
  4087ac:	fb0e fe03 	mul.w	lr, lr, r3
  4087b0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
  4087b4:	45a6      	cmp	lr, r4
  4087b6:	d906      	bls.n	4087c6 <__udivdi3+0x10e>
  4087b8:	1964      	adds	r4, r4, r5
  4087ba:	f080 8090 	bcs.w	4088de <__udivdi3+0x226>
  4087be:	45a6      	cmp	lr, r4
  4087c0:	f240 808d 	bls.w	4088de <__udivdi3+0x226>
  4087c4:	3b02      	subs	r3, #2
  4087c6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
  4087ca:	4631      	mov	r1, r6
  4087cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4087d0:	2600      	movs	r6, #0
  4087d2:	4630      	mov	r0, r6
  4087d4:	4631      	mov	r1, r6
  4087d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4087da:	f1c6 0520 	rsb	r5, r6, #32
  4087de:	40b3      	lsls	r3, r6
  4087e0:	fa02 f706 	lsl.w	r7, r2, r6
  4087e4:	fa01 f406 	lsl.w	r4, r1, r6
  4087e8:	40ea      	lsrs	r2, r5
  4087ea:	40e9      	lsrs	r1, r5
  4087ec:	fa20 f505 	lsr.w	r5, r0, r5
  4087f0:	431a      	orrs	r2, r3
  4087f2:	4325      	orrs	r5, r4
  4087f4:	ea4f 4c12 	mov.w	ip, r2, lsr #16
  4087f8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
  4087fc:	b293      	uxth	r3, r2
  4087fe:	fbb1 f8fc 	udiv	r8, r1, ip
  408802:	fb0c 1118 	mls	r1, ip, r8, r1
  408806:	fb03 f408 	mul.w	r4, r3, r8
  40880a:	ea4e 4101 	orr.w	r1, lr, r1, lsl #16
  40880e:	428c      	cmp	r4, r1
  408810:	d906      	bls.n	408820 <__udivdi3+0x168>
  408812:	1889      	adds	r1, r1, r2
  408814:	d269      	bcs.n	4088ea <__udivdi3+0x232>
  408816:	428c      	cmp	r4, r1
  408818:	d967      	bls.n	4088ea <__udivdi3+0x232>
  40881a:	f1a8 0802 	sub.w	r8, r8, #2
  40881e:	4411      	add	r1, r2
  408820:	1b09      	subs	r1, r1, r4
  408822:	b2ad      	uxth	r5, r5
  408824:	fbb1 f4fc 	udiv	r4, r1, ip
  408828:	fb0c 1114 	mls	r1, ip, r4, r1
  40882c:	fb03 fe04 	mul.w	lr, r3, r4
  408830:	ea45 4301 	orr.w	r3, r5, r1, lsl #16
  408834:	459e      	cmp	lr, r3
  408836:	d905      	bls.n	408844 <__udivdi3+0x18c>
  408838:	189b      	adds	r3, r3, r2
  40883a:	d254      	bcs.n	4088e6 <__udivdi3+0x22e>
  40883c:	459e      	cmp	lr, r3
  40883e:	d952      	bls.n	4088e6 <__udivdi3+0x22e>
  408840:	3c02      	subs	r4, #2
  408842:	4413      	add	r3, r2
  408844:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
  408848:	ebce 0303 	rsb	r3, lr, r3
  40884c:	fba4 8907 	umull	r8, r9, r4, r7
  408850:	454b      	cmp	r3, r9
  408852:	d303      	bcc.n	40885c <__udivdi3+0x1a4>
  408854:	d151      	bne.n	4088fa <__udivdi3+0x242>
  408856:	40b0      	lsls	r0, r6
  408858:	4540      	cmp	r0, r8
  40885a:	d24e      	bcs.n	4088fa <__udivdi3+0x242>
  40885c:	2600      	movs	r6, #0
  40885e:	1e60      	subs	r0, r4, #1
  408860:	4631      	mov	r1, r6
  408862:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  408866:	f1c2 0620 	rsb	r6, r2, #32
  40886a:	4095      	lsls	r5, r2
  40886c:	fa01 f302 	lsl.w	r3, r1, r2
  408870:	fa00 f402 	lsl.w	r4, r0, r2
  408874:	0c2f      	lsrs	r7, r5, #16
  408876:	40f1      	lsrs	r1, r6
  408878:	40f0      	lsrs	r0, r6
  40887a:	fa1f fe85 	uxth.w	lr, r5
  40887e:	fbb1 f6f7 	udiv	r6, r1, r7
  408882:	4318      	orrs	r0, r3
  408884:	fb07 1116 	mls	r1, r7, r6, r1
  408888:	fb0e f206 	mul.w	r2, lr, r6
  40888c:	ea4f 4c10 	mov.w	ip, r0, lsr #16
  408890:	ea4c 4301 	orr.w	r3, ip, r1, lsl #16
  408894:	429a      	cmp	r2, r3
  408896:	d905      	bls.n	4088a4 <__udivdi3+0x1ec>
  408898:	195b      	adds	r3, r3, r5
  40889a:	d229      	bcs.n	4088f0 <__udivdi3+0x238>
  40889c:	429a      	cmp	r2, r3
  40889e:	d927      	bls.n	4088f0 <__udivdi3+0x238>
  4088a0:	3e02      	subs	r6, #2
  4088a2:	442b      	add	r3, r5
  4088a4:	1a9b      	subs	r3, r3, r2
  4088a6:	b280      	uxth	r0, r0
  4088a8:	fbb3 fcf7 	udiv	ip, r3, r7
  4088ac:	fb07 331c 	mls	r3, r7, ip, r3
  4088b0:	fb0e f10c 	mul.w	r1, lr, ip
  4088b4:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
  4088b8:	4299      	cmp	r1, r3
  4088ba:	d906      	bls.n	4088ca <__udivdi3+0x212>
  4088bc:	195b      	adds	r3, r3, r5
  4088be:	d219      	bcs.n	4088f4 <__udivdi3+0x23c>
  4088c0:	4299      	cmp	r1, r3
  4088c2:	d917      	bls.n	4088f4 <__udivdi3+0x23c>
  4088c4:	f1ac 0c02 	sub.w	ip, ip, #2
  4088c8:	442b      	add	r3, r5
  4088ca:	1a5a      	subs	r2, r3, r1
  4088cc:	ea4c 4606 	orr.w	r6, ip, r6, lsl #16
  4088d0:	e752      	b.n	408778 <__udivdi3+0xc0>
  4088d2:	2001      	movs	r0, #1
  4088d4:	e732      	b.n	40873c <__udivdi3+0x84>
  4088d6:	3801      	subs	r0, #1
  4088d8:	e761      	b.n	40879e <__udivdi3+0xe6>
  4088da:	3801      	subs	r0, #1
  4088dc:	e718      	b.n	408710 <__udivdi3+0x58>
  4088de:	3b01      	subs	r3, #1
  4088e0:	e771      	b.n	4087c6 <__udivdi3+0x10e>
  4088e2:	3b01      	subs	r3, #1
  4088e4:	e727      	b.n	408736 <__udivdi3+0x7e>
  4088e6:	3c01      	subs	r4, #1
  4088e8:	e7ac      	b.n	408844 <__udivdi3+0x18c>
  4088ea:	f108 38ff 	add.w	r8, r8, #4294967295
  4088ee:	e797      	b.n	408820 <__udivdi3+0x168>
  4088f0:	3e01      	subs	r6, #1
  4088f2:	e7d7      	b.n	4088a4 <__udivdi3+0x1ec>
  4088f4:	f10c 3cff 	add.w	ip, ip, #4294967295
  4088f8:	e7e7      	b.n	4088ca <__udivdi3+0x212>
  4088fa:	4620      	mov	r0, r4
  4088fc:	2600      	movs	r6, #0
  4088fe:	e71d      	b.n	40873c <__udivdi3+0x84>
  408900:	39414350 	.word	0x39414350
  408904:	3a323539 	.word	0x3a323539
  408908:	706d7420 	.word	0x706d7420
  40890c:	25203a31 	.word	0x25203a31
  408910:	6d742078 	.word	0x6d742078
  408914:	203a3270 	.word	0x203a3270
  408918:	74207825 	.word	0x74207825
  40891c:	3a33706d 	.word	0x3a33706d
  408920:	20782520 	.word	0x20782520
  408924:	34706d74 	.word	0x34706d74
  408928:	7825203a 	.word	0x7825203a
  40892c:	00000a0d 	.word	0x00000a0d
  408930:	0001c200 	.word	0x0001c200
  408934:	000000c0 	.word	0x000000c0
  408938:	00000800 	.word	0x00000800
	...
  408948:	202d462d 	.word	0x202d462d
  40894c:	74737953 	.word	0x74737953
  408950:	206b6369 	.word	0x206b6369
  408954:	666e6f63 	.word	0x666e6f63
  408958:	72756769 	.word	0x72756769
  40895c:	6f697461 	.word	0x6f697461
  408960:	7265206e 	.word	0x7265206e
  408964:	0d726f72 	.word	0x0d726f72
  408968:	00000000 	.word	0x00000000
  40896c:	00000960 	.word	0x00000960
  408970:	000000c0 	.word	0x000000c0
  408974:	00000800 	.word	0x00000800
  408978:	00000000 	.word	0x00000000
  40897c:	00006325 	.word	0x00006325
  408980:	61766e49 	.word	0x61766e49
  408984:	2064696c 	.word	0x2064696c
  408988:	69726573 	.word	0x69726573
  40898c:	49206c61 	.word	0x49206c61
  408990:	68632044 	.word	0x68632044
  408994:	736b6365 	.word	0x736b6365
  408998:	0d2e6d75 	.word	0x0d2e6d75
  40899c:	0000000a 	.word	0x0000000a
  4089a0:	2044454c 	.word	0x2044454c
  4089a4:	72616f62 	.word	0x72616f62
  4089a8:	64252064 	.word	0x64252064
  4089ac:	72657320 	.word	0x72657320
  4089b0:	206c6169 	.word	0x206c6169
  4089b4:	203a4449 	.word	0x203a4449
  4089b8:	78257825 	.word	0x78257825
  4089bc:	78257825 	.word	0x78257825
  4089c0:	78257825 	.word	0x78257825
  4089c4:	00000a0d 	.word	0x00000a0d
  4089c8:	62206f6e 	.word	0x62206f6e
  4089cc:	6472616f 	.word	0x6472616f
  4089d0:	69687420 	.word	0x69687420
  4089d4:	6c732073 	.word	0x6c732073
  4089d8:	0a0d746f 	.word	0x0a0d746f
  4089dc:	00000000 	.word	0x00000000
  4089e0:	64616552 	.word	0x64616552
  4089e4:	000a0d79 	.word	0x000a0d79
  4089e8:	61656c43 	.word	0x61656c43
  4089ec:	000a0d6e 	.word	0x000a0d6e
  4089f0:	74726944 	.word	0x74726944
  4089f4:	000a0d79 	.word	0x000a0d79
  4089f8:	6f727245 	.word	0x6f727245
  4089fc:	000a0d72 	.word	0x000a0d72
  408a00:	6c656853 	.word	0x6c656853
  408a04:	0a0d3166 	.word	0x0a0d3166
  408a08:	00000000 	.word	0x00000000
  408a0c:	6c656853 	.word	0x6c656853
  408a10:	0a0d3266 	.word	0x0a0d3266
  408a14:	00000000 	.word	0x00000000
  408a18:	6c656853 	.word	0x6c656853
  408a1c:	0a0d3366 	.word	0x0a0d3366
  408a20:	00000000 	.word	0x00000000
  408a24:	6c656853 	.word	0x6c656853
  408a28:	0a0d3466 	.word	0x0a0d3466
  408a2c:	00000000 	.word	0x00000000
  408a30:	61656c43 	.word	0x61656c43
  408a34:	676e696e 	.word	0x676e696e
  408a38:	00000a0d 	.word	0x00000a0d
  408a3c:	55202d2d 	.word	0x55202d2d
  408a40:	54524153 	.word	0x54524153
  408a44:	34535220 	.word	0x34535220
  408a48:	45203538 	.word	0x45203538
  408a4c:	706d6178 	.word	0x706d6178
  408a50:	2d20656c 	.word	0x2d20656c
  408a54:	2d0a0d2d 	.word	0x2d0a0d2d
  408a58:	4153202d 	.word	0x4153202d
  408a5c:	3037454d 	.word	0x3037454d
  408a60:	4c50582d 	.word	0x4c50582d
  408a64:	2d2d2044 	.word	0x2d2d2044
  408a68:	2d2d0a0d 	.word	0x2d2d0a0d
  408a6c:	6d6f4320 	.word	0x6d6f4320
  408a70:	656c6970 	.word	0x656c6970
  408a74:	46203a64 	.word	0x46203a64
  408a78:	31206265 	.word	0x31206265
  408a7c:	30322031 	.word	0x30322031
  408a80:	32203631 	.word	0x32203631
  408a84:	39303a31 	.word	0x39303a31
  408a88:	2031353a 	.word	0x2031353a
  408a8c:	000d2d2d 	.word	0x000d2d2d
  408a90:	202d492d 	.word	0x202d492d
  408a94:	72617453 	.word	0x72617453
  408a98:	72742074 	.word	0x72742074
  408a9c:	6d736e61 	.word	0x6d736e61
  408aa0:	69747469 	.word	0x69747469
  408aa4:	0d21676e 	.word	0x0d21676e
  408aa8:	00000000 	.word	0x00000000
  408aac:	202d492d 	.word	0x202d492d
  408ab0:	65636552 	.word	0x65636552
  408ab4:	6e697669 	.word	0x6e697669
  408ab8:	79732067 	.word	0x79732067
  408abc:	6320636e 	.word	0x6320636e
  408ac0:	61726168 	.word	0x61726168
  408ac4:	72657463 	.word	0x72657463
  408ac8:	00000d2e 	.word	0x00000d2e
  408acc:	202d492d 	.word	0x202d492d
  408ad0:	72617453 	.word	0x72617453
  408ad4:	65722074 	.word	0x65722074
  408ad8:	76696563 	.word	0x76696563
  408adc:	21676e69 	.word	0x21676e69
  408ae0:	0000000d 	.word	0x0000000d
  408ae4:	202d452d 	.word	0x202d452d
  408ae8:	6f727245 	.word	0x6f727245
  408aec:	636f2072 	.word	0x636f2072
  408af0:	72727563 	.word	0x72727563
  408af4:	77206465 	.word	0x77206465
  408af8:	656c6968 	.word	0x656c6968
  408afc:	63657220 	.word	0x63657220
  408b00:	69766965 	.word	0x69766965
  408b04:	0d21676e 	.word	0x0d21676e
  408b08:	00000000 	.word	0x00000000
  408b0c:	202d492d 	.word	0x202d492d
  408b10:	65636552 	.word	0x65636552
  408b14:	64657669 	.word	0x64657669
  408b18:	63757320 	.word	0x63757320
  408b1c:	73736563 	.word	0x73736563
  408b20:	6c6c7566 	.word	0x6c6c7566
  408b24:	000d2179 	.word	0x000d2179
  408b28:	00000043 	.word	0x00000043

00408b2c <_global_impure_ptr>:
  408b2c:	20400080 0000000a                       ..@ ....

00408b34 <zeroes.6911>:
  408b34:	30303030 30303030 30303030 30303030     0000000000000000

00408b44 <blanks.6910>:
  408b44:	20202020 20202020 20202020 20202020                     
  408b54:	00464e49 00666e69 004e414e 006e616e     INF.inf.NAN.nan.
  408b64:	33323130 37363534 42413938 46454443     0123456789ABCDEF
  408b74:	00000000 33323130 37363534 62613938     ....0123456789ab
  408b84:	66656463 00000000 6c756e28 0000296c     cdef....(null)..
  408b94:	00000030 69666e49 7974696e 00000000     0...Infinity....
  408ba4:	004e614e 49534f50 00000058 0000002e     NaN.POSIX.......
  408bb4:	00000000                                ....

00408bb8 <__mprec_tens>:
  408bb8:	00000000 3ff00000 00000000 40240000     .......?......$@
  408bc8:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
  408bd8:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
  408be8:	00000000 412e8480 00000000 416312d0     .......A......cA
  408bf8:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
  408c08:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
  408c18:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
  408c28:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
  408c38:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
  408c48:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
  408c58:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
  408c68:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
  408c78:	79d99db4 44ea7843                       ...yCx.D

00408c80 <p05.5302>:
  408c80:	00000005 00000019 0000007d 00000000     ........}.......

00408c90 <__mprec_bigtens>:
  408c90:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
  408ca0:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
  408cb0:	7f73bf3c 75154fdd                       <.s..O.u

00408cb8 <_init>:
  408cb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  408cba:	bf00      	nop
  408cbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
  408cbe:	bc08      	pop	{r3}
  408cc0:	469e      	mov	lr, r3
  408cc2:	4770      	bx	lr

00408cc4 <__init_array_start>:
  408cc4:	00404a89 	.word	0x00404a89

00408cc8 <__frame_dummy_init_array_entry>:
  408cc8:	00400165                                e.@.

00408ccc <_fini>:
  408ccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  408cce:	bf00      	nop
  408cd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
  408cd2:	bc08      	pop	{r3}
  408cd4:	469e      	mov	lr, r3
  408cd6:	4770      	bx	lr

00408cd8 <__fini_array_start>:
  408cd8:	00400141 	.word	0x00400141
