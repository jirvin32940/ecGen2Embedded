
ecgen2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004220  00400000  00400000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000008bc  20400000  00404220  00010000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000008bc  204008bc  00404adc  000108bc  2**2
                  ALLOC
  3 .stack        00002000  20401178  00405398  000108bc  2**0
                  ALLOC
  4 .heap         00000200  20403178  00407398  000108bc  2**0
                  ALLOC
  5 .ARM.attributes 00000033  00000000  00000000  000108bc  2**0
                  CONTENTS, READONLY
  6 .comment      0000005b  00000000  00000000  000108ef  2**0
                  CONTENTS, READONLY
  7 .debug_info   0000b7a0  00000000  00000000  0001094a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000019af  00000000  00000000  0001c0ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000772c  00000000  00000000  0001da99  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000c88  00000000  00000000  000251c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000b98  00000000  00000000  00025e4d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0001dcea  00000000  00000000  000269e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000ab1d  00000000  00000000  000446cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0008b119  00000000  00000000  0004f1ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00003f24  00000000  00000000  000da308  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <_sfixed>:
  400000:	20403178 	.word	0x20403178
  400004:	00401441 	.word	0x00401441
  400008:	004014c5 	.word	0x004014c5
  40000c:	004014c5 	.word	0x004014c5
  400010:	004014c5 	.word	0x004014c5
  400014:	004014c5 	.word	0x004014c5
  400018:	004014c5 	.word	0x004014c5
	...
  40002c:	004014c5 	.word	0x004014c5
  400030:	004014c5 	.word	0x004014c5
  400034:	00000000 	.word	0x00000000
  400038:	004014c5 	.word	0x004014c5
  40003c:	00401ef1 	.word	0x00401ef1
  400040:	004014c5 	.word	0x004014c5
  400044:	004014c5 	.word	0x004014c5
  400048:	004014c5 	.word	0x004014c5
  40004c:	004014c5 	.word	0x004014c5
  400050:	004014c5 	.word	0x004014c5
  400054:	004014c5 	.word	0x004014c5
  400058:	004014c5 	.word	0x004014c5
  40005c:	004014c5 	.word	0x004014c5
  400060:	004014c5 	.word	0x004014c5
  400064:	00000000 	.word	0x00000000
  400068:	00400a2d 	.word	0x00400a2d
  40006c:	00400a45 	.word	0x00400a45
  400070:	00400a5d 	.word	0x00400a5d
  400074:	00401f19 	.word	0x00401f19
  400078:	004014c5 	.word	0x004014c5
  40007c:	004014c5 	.word	0x004014c5
  400080:	00400a75 	.word	0x00400a75
  400084:	00400a8d 	.word	0x00400a8d
  400088:	004014c5 	.word	0x004014c5
  40008c:	004014c5 	.word	0x004014c5
  400090:	004014c5 	.word	0x004014c5
  400094:	004014c5 	.word	0x004014c5
  400098:	004014c5 	.word	0x004014c5
  40009c:	004014c5 	.word	0x004014c5
  4000a0:	004014c5 	.word	0x004014c5
  4000a4:	004014c5 	.word	0x004014c5
  4000a8:	004014c5 	.word	0x004014c5
  4000ac:	004014c5 	.word	0x004014c5
  4000b0:	004014c5 	.word	0x004014c5
  4000b4:	004014c5 	.word	0x004014c5
  4000b8:	004014c5 	.word	0x004014c5
  4000bc:	004014c5 	.word	0x004014c5
  4000c0:	004014c5 	.word	0x004014c5
  4000c4:	004014c5 	.word	0x004014c5
  4000c8:	004014c5 	.word	0x004014c5
  4000cc:	004014c5 	.word	0x004014c5
  4000d0:	00000000 	.word	0x00000000
  4000d4:	004014c5 	.word	0x004014c5
  4000d8:	00000000 	.word	0x00000000
  4000dc:	004014c5 	.word	0x004014c5
  4000e0:	004014c5 	.word	0x004014c5
  4000e4:	004014c5 	.word	0x004014c5
  4000e8:	004014c5 	.word	0x004014c5
  4000ec:	004014c5 	.word	0x004014c5
  4000f0:	004014c5 	.word	0x004014c5
  4000f4:	004014c5 	.word	0x004014c5
  4000f8:	004014c5 	.word	0x004014c5
  4000fc:	004014c5 	.word	0x004014c5
  400100:	004014c5 	.word	0x004014c5
  400104:	004014c5 	.word	0x004014c5
  400108:	004014c5 	.word	0x004014c5
  40010c:	004014c5 	.word	0x004014c5
  400110:	004014c5 	.word	0x004014c5
	...
  400120:	004014c5 	.word	0x004014c5
  400124:	004014c5 	.word	0x004014c5
  400128:	004014c5 	.word	0x004014c5
  40012c:	004014c5 	.word	0x004014c5
  400130:	004014c5 	.word	0x004014c5
  400134:	00000000 	.word	0x00000000
  400138:	004014c5 	.word	0x004014c5
  40013c:	004014c5 	.word	0x004014c5

00400140 <__do_global_dtors_aux>:
  400140:	b510      	push	{r4, lr}
  400142:	4c05      	ldr	r4, [pc, #20]	; (400158 <__do_global_dtors_aux+0x18>)
  400144:	7823      	ldrb	r3, [r4, #0]
  400146:	b933      	cbnz	r3, 400156 <__do_global_dtors_aux+0x16>
  400148:	4b04      	ldr	r3, [pc, #16]	; (40015c <__do_global_dtors_aux+0x1c>)
  40014a:	b113      	cbz	r3, 400152 <__do_global_dtors_aux+0x12>
  40014c:	4804      	ldr	r0, [pc, #16]	; (400160 <__do_global_dtors_aux+0x20>)
  40014e:	f3af 8000 	nop.w
  400152:	2301      	movs	r3, #1
  400154:	7023      	strb	r3, [r4, #0]
  400156:	bd10      	pop	{r4, pc}
  400158:	204008bc 	.word	0x204008bc
  40015c:	00000000 	.word	0x00000000
  400160:	00404220 	.word	0x00404220

00400164 <frame_dummy>:
  400164:	4b08      	ldr	r3, [pc, #32]	; (400188 <frame_dummy+0x24>)
  400166:	b510      	push	{r4, lr}
  400168:	b11b      	cbz	r3, 400172 <frame_dummy+0xe>
  40016a:	4808      	ldr	r0, [pc, #32]	; (40018c <frame_dummy+0x28>)
  40016c:	4908      	ldr	r1, [pc, #32]	; (400190 <frame_dummy+0x2c>)
  40016e:	f3af 8000 	nop.w
  400172:	4808      	ldr	r0, [pc, #32]	; (400194 <frame_dummy+0x30>)
  400174:	6803      	ldr	r3, [r0, #0]
  400176:	b903      	cbnz	r3, 40017a <frame_dummy+0x16>
  400178:	bd10      	pop	{r4, pc}
  40017a:	4b07      	ldr	r3, [pc, #28]	; (400198 <frame_dummy+0x34>)
  40017c:	2b00      	cmp	r3, #0
  40017e:	d0fb      	beq.n	400178 <frame_dummy+0x14>
  400180:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400184:	4718      	bx	r3
  400186:	bf00      	nop
  400188:	00000000 	.word	0x00000000
  40018c:	00404220 	.word	0x00404220
  400190:	204008c0 	.word	0x204008c0
  400194:	00404220 	.word	0x00404220
  400198:	00000000 	.word	0x00000000

0040019c <osc_enable>:
#define OSC_MAINCK_XTAL_HZ      BOARD_FREQ_MAINCK_XTAL    //!< External crystal oscillator.
#define OSC_MAINCK_BYPASS_HZ    BOARD_FREQ_MAINCK_BYPASS  //!< External bypass oscillator.
//@}

static inline void osc_enable(uint32_t ul_id)
{
  40019c:	b580      	push	{r7, lr}
  40019e:	b082      	sub	sp, #8
  4001a0:	af00      	add	r7, sp, #0
  4001a2:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  4001a4:	687b      	ldr	r3, [r7, #4]
  4001a6:	2b07      	cmp	r3, #7
  4001a8:	d830      	bhi.n	40020c <osc_enable+0x70>
  4001aa:	a201      	add	r2, pc, #4	; (adr r2, 4001b0 <osc_enable+0x14>)
  4001ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4001b0:	0040020d 	.word	0x0040020d
  4001b4:	004001d1 	.word	0x004001d1
  4001b8:	004001d9 	.word	0x004001d9
  4001bc:	004001e1 	.word	0x004001e1
  4001c0:	004001e9 	.word	0x004001e9
  4001c4:	004001f1 	.word	0x004001f1
  4001c8:	004001f9 	.word	0x004001f9
  4001cc:	00400203 	.word	0x00400203
	case OSC_SLCK_32K_RC:
		break;

	case OSC_SLCK_32K_XTAL:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
  4001d0:	2000      	movs	r0, #0
  4001d2:	4b10      	ldr	r3, [pc, #64]	; (400214 <osc_enable+0x78>)
  4001d4:	4798      	blx	r3
		break;
  4001d6:	e019      	b.n	40020c <osc_enable+0x70>

	case OSC_SLCK_32K_BYPASS:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
  4001d8:	2001      	movs	r0, #1
  4001da:	4b0e      	ldr	r3, [pc, #56]	; (400214 <osc_enable+0x78>)
  4001dc:	4798      	blx	r3
		break;
  4001de:	e015      	b.n	40020c <osc_enable+0x70>


	case OSC_MAINCK_4M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
  4001e0:	2000      	movs	r0, #0
  4001e2:	4b0d      	ldr	r3, [pc, #52]	; (400218 <osc_enable+0x7c>)
  4001e4:	4798      	blx	r3
		break;
  4001e6:	e011      	b.n	40020c <osc_enable+0x70>

	case OSC_MAINCK_8M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
  4001e8:	2010      	movs	r0, #16
  4001ea:	4b0b      	ldr	r3, [pc, #44]	; (400218 <osc_enable+0x7c>)
  4001ec:	4798      	blx	r3
		break;
  4001ee:	e00d      	b.n	40020c <osc_enable+0x70>

	case OSC_MAINCK_12M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
  4001f0:	2020      	movs	r0, #32
  4001f2:	4b09      	ldr	r3, [pc, #36]	; (400218 <osc_enable+0x7c>)
  4001f4:	4798      	blx	r3
		break;
  4001f6:	e009      	b.n	40020c <osc_enable+0x70>


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  4001f8:	2000      	movs	r0, #0
  4001fa:	213e      	movs	r1, #62	; 0x3e
  4001fc:	4b07      	ldr	r3, [pc, #28]	; (40021c <osc_enable+0x80>)
  4001fe:	4798      	blx	r3
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
  400200:	e004      	b.n	40020c <osc_enable+0x70>

	case OSC_MAINCK_BYPASS:
		pmc_switch_mainck_to_xtal(PMC_OSC_BYPASS,
  400202:	2001      	movs	r0, #1
  400204:	213e      	movs	r1, #62	; 0x3e
  400206:	4b05      	ldr	r3, [pc, #20]	; (40021c <osc_enable+0x80>)
  400208:	4798      	blx	r3
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
  40020a:	bf00      	nop
	}
}
  40020c:	3708      	adds	r7, #8
  40020e:	46bd      	mov	sp, r7
  400210:	bd80      	pop	{r7, pc}
  400212:	bf00      	nop
  400214:	00400b29 	.word	0x00400b29
  400218:	00400b95 	.word	0x00400b95
  40021c:	00400c05 	.word	0x00400c05

00400220 <osc_is_ready>:
		break;
	}
}

static inline bool osc_is_ready(uint32_t ul_id)
{
  400220:	b580      	push	{r7, lr}
  400222:	b082      	sub	sp, #8
  400224:	af00      	add	r7, sp, #0
  400226:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  400228:	687b      	ldr	r3, [r7, #4]
  40022a:	2b07      	cmp	r3, #7
  40022c:	d826      	bhi.n	40027c <osc_is_ready+0x5c>
  40022e:	a201      	add	r2, pc, #4	; (adr r2, 400234 <osc_is_ready+0x14>)
  400230:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  400234:	00400255 	.word	0x00400255
  400238:	00400259 	.word	0x00400259
  40023c:	00400259 	.word	0x00400259
  400240:	0040026b 	.word	0x0040026b
  400244:	0040026b 	.word	0x0040026b
  400248:	0040026b 	.word	0x0040026b
  40024c:	0040026b 	.word	0x0040026b
  400250:	0040026b 	.word	0x0040026b
	case OSC_SLCK_32K_RC:
		return 1;
  400254:	2301      	movs	r3, #1
  400256:	e012      	b.n	40027e <osc_is_ready+0x5e>

	case OSC_SLCK_32K_XTAL:
	case OSC_SLCK_32K_BYPASS:
		return pmc_osc_is_ready_32kxtal();
  400258:	4b0b      	ldr	r3, [pc, #44]	; (400288 <osc_is_ready+0x68>)
  40025a:	4798      	blx	r3
  40025c:	4603      	mov	r3, r0
  40025e:	2b00      	cmp	r3, #0
  400260:	bf14      	ite	ne
  400262:	2301      	movne	r3, #1
  400264:	2300      	moveq	r3, #0
  400266:	b2db      	uxtb	r3, r3
  400268:	e009      	b.n	40027e <osc_is_ready+0x5e>
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  40026a:	4b08      	ldr	r3, [pc, #32]	; (40028c <osc_is_ready+0x6c>)
  40026c:	4798      	blx	r3
  40026e:	4603      	mov	r3, r0
  400270:	2b00      	cmp	r3, #0
  400272:	bf14      	ite	ne
  400274:	2301      	movne	r3, #1
  400276:	2300      	moveq	r3, #0
  400278:	b2db      	uxtb	r3, r3
  40027a:	e000      	b.n	40027e <osc_is_ready+0x5e>
	}

	return 0;
  40027c:	2300      	movs	r3, #0
}
  40027e:	4618      	mov	r0, r3
  400280:	3708      	adds	r7, #8
  400282:	46bd      	mov	sp, r7
  400284:	bd80      	pop	{r7, pc}
  400286:	bf00      	nop
  400288:	00400b61 	.word	0x00400b61
  40028c:	00400c7d 	.word	0x00400c7d

00400290 <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
  400290:	b580      	push	{r7, lr}
  400292:	b082      	sub	sp, #8
  400294:	af00      	add	r7, sp, #0
  400296:	4603      	mov	r3, r0
  400298:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
  40029a:	bf00      	nop
  40029c:	79fb      	ldrb	r3, [r7, #7]
  40029e:	4618      	mov	r0, r3
  4002a0:	4b05      	ldr	r3, [pc, #20]	; (4002b8 <osc_wait_ready+0x28>)
  4002a2:	4798      	blx	r3
  4002a4:	4603      	mov	r3, r0
  4002a6:	f083 0301 	eor.w	r3, r3, #1
  4002aa:	b2db      	uxtb	r3, r3
  4002ac:	2b00      	cmp	r3, #0
  4002ae:	d1f5      	bne.n	40029c <osc_wait_ready+0xc>
		/* Do nothing */
	}
}
  4002b0:	3708      	adds	r7, #8
  4002b2:	46bd      	mov	sp, r7
  4002b4:	bd80      	pop	{r7, pc}
  4002b6:	bf00      	nop
  4002b8:	00400221 	.word	0x00400221

004002bc <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  4002bc:	b480      	push	{r7}
  4002be:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_4M_RC) {
		return OSC_MAINCK_4M_RC_HZ;
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_8M_RC) {
		return OSC_MAINCK_8M_RC_HZ;
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_12M_RC) {
		return OSC_MAINCK_12M_RC_HZ;
  4002c0:	4b02      	ldr	r3, [pc, #8]	; (4002cc <sysclk_get_main_hz+0x10>)
#endif
	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  4002c2:	4618      	mov	r0, r3
  4002c4:	46bd      	mov	sp, r7
  4002c6:	f85d 7b04 	ldr.w	r7, [sp], #4
  4002ca:	4770      	bx	lr
  4002cc:	00b71b00 	.word	0x00b71b00

004002d0 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
  4002d0:	b580      	push	{r7, lr}
  4002d2:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  4002d4:	4b02      	ldr	r3, [pc, #8]	; (4002e0 <sysclk_get_cpu_hz+0x10>)
  4002d6:	4798      	blx	r3
  4002d8:	4603      	mov	r3, r0
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  4002da:	4618      	mov	r0, r3
  4002dc:	bd80      	pop	{r7, pc}
  4002de:	bf00      	nop
  4002e0:	004002bd 	.word	0x004002bd

004002e4 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  4002e4:	b580      	push	{r7, lr}
  4002e6:	b082      	sub	sp, #8
  4002e8:	af00      	add	r7, sp, #0
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  4002ea:	480b      	ldr	r0, [pc, #44]	; (400318 <sysclk_init+0x34>)
  4002ec:	4b0b      	ldr	r3, [pc, #44]	; (40031c <sysclk_init+0x38>)
  4002ee:	4798      	blx	r3
		osc_wait_ready(OSC_MAINCK_8M_RC);
		pmc_switch_mck_to_mainck(CONFIG_SYSCLK_PRES);
	}

	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_12M_RC) {
		osc_enable(OSC_MAINCK_12M_RC);
  4002f0:	2005      	movs	r0, #5
  4002f2:	4b0b      	ldr	r3, [pc, #44]	; (400320 <sysclk_init+0x3c>)
  4002f4:	4798      	blx	r3
		osc_wait_ready(OSC_MAINCK_12M_RC);
  4002f6:	2005      	movs	r0, #5
  4002f8:	4b0a      	ldr	r3, [pc, #40]	; (400324 <sysclk_init+0x40>)
  4002fa:	4798      	blx	r3
		pmc_switch_mck_to_mainck(CONFIG_SYSCLK_PRES);
  4002fc:	2000      	movs	r0, #0
  4002fe:	4b0a      	ldr	r3, [pc, #40]	; (400328 <sysclk_init+0x44>)
  400300:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  400302:	4b0a      	ldr	r3, [pc, #40]	; (40032c <sysclk_init+0x48>)
  400304:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  400306:	4b0a      	ldr	r3, [pc, #40]	; (400330 <sysclk_init+0x4c>)
  400308:	4798      	blx	r3
  40030a:	4603      	mov	r3, r0
  40030c:	4618      	mov	r0, r3
  40030e:	4b03      	ldr	r3, [pc, #12]	; (40031c <sysclk_init+0x38>)
  400310:	4798      	blx	r3

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
  400312:	3708      	adds	r7, #8
  400314:	46bd      	mov	sp, r7
  400316:	bd80      	pop	{r7, pc}
  400318:	11e1a300 	.word	0x11e1a300
  40031c:	00401635 	.word	0x00401635
  400320:	0040019d 	.word	0x0040019d
  400324:	00400291 	.word	0x00400291
  400328:	00400aa5 	.word	0x00400aa5
  40032c:	004014cd 	.word	0x004014cd
  400330:	004002d1 	.word	0x004002d1

00400334 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  400334:	b580      	push	{r7, lr}
  400336:	b086      	sub	sp, #24
  400338:	af00      	add	r7, sp, #0
  40033a:	60f8      	str	r0, [r7, #12]
  40033c:	60b9      	str	r1, [r7, #8]
  40033e:	607a      	str	r2, [r7, #4]
	int nChars = 0;
  400340:	2300      	movs	r3, #0
  400342:	617b      	str	r3, [r7, #20]

	if (file != 0) {
  400344:	68fb      	ldr	r3, [r7, #12]
  400346:	2b00      	cmp	r3, #0
  400348:	d002      	beq.n	400350 <_read+0x1c>
		return -1;
  40034a:	f04f 33ff 	mov.w	r3, #4294967295
  40034e:	e014      	b.n	40037a <_read+0x46>
	}

	for (; len > 0; --len) {
  400350:	e00f      	b.n	400372 <_read+0x3e>
		ptr_get(stdio_base, ptr);
  400352:	4b0c      	ldr	r3, [pc, #48]	; (400384 <_read+0x50>)
  400354:	681b      	ldr	r3, [r3, #0]
  400356:	4a0c      	ldr	r2, [pc, #48]	; (400388 <_read+0x54>)
  400358:	6812      	ldr	r2, [r2, #0]
  40035a:	4610      	mov	r0, r2
  40035c:	68b9      	ldr	r1, [r7, #8]
  40035e:	4798      	blx	r3
		ptr++;
  400360:	68bb      	ldr	r3, [r7, #8]
  400362:	3301      	adds	r3, #1
  400364:	60bb      	str	r3, [r7, #8]
		nChars++;
  400366:	697b      	ldr	r3, [r7, #20]
  400368:	3301      	adds	r3, #1
  40036a:	617b      	str	r3, [r7, #20]

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
  40036c:	687b      	ldr	r3, [r7, #4]
  40036e:	3b01      	subs	r3, #1
  400370:	607b      	str	r3, [r7, #4]
  400372:	687b      	ldr	r3, [r7, #4]
  400374:	2b00      	cmp	r3, #0
  400376:	dcec      	bgt.n	400352 <_read+0x1e>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
  400378:	697b      	ldr	r3, [r7, #20]
}
  40037a:	4618      	mov	r0, r3
  40037c:	3718      	adds	r7, #24
  40037e:	46bd      	mov	sp, r7
  400380:	bd80      	pop	{r7, pc}
  400382:	bf00      	nop
  400384:	20400990 	.word	0x20400990
  400388:	20400998 	.word	0x20400998

0040038c <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
  40038c:	b580      	push	{r7, lr}
  40038e:	b086      	sub	sp, #24
  400390:	af00      	add	r7, sp, #0
  400392:	60f8      	str	r0, [r7, #12]
  400394:	60b9      	str	r1, [r7, #8]
  400396:	607a      	str	r2, [r7, #4]
	int nChars = 0;
  400398:	2300      	movs	r3, #0
  40039a:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
  40039c:	68fb      	ldr	r3, [r7, #12]
  40039e:	2b01      	cmp	r3, #1
  4003a0:	d008      	beq.n	4003b4 <_write+0x28>
  4003a2:	68fb      	ldr	r3, [r7, #12]
  4003a4:	2b02      	cmp	r3, #2
  4003a6:	d005      	beq.n	4003b4 <_write+0x28>
  4003a8:	68fb      	ldr	r3, [r7, #12]
  4003aa:	2b03      	cmp	r3, #3
  4003ac:	d002      	beq.n	4003b4 <_write+0x28>
		return -1;
  4003ae:	f04f 33ff 	mov.w	r3, #4294967295
  4003b2:	e01a      	b.n	4003ea <_write+0x5e>
	}

	for (; len != 0; --len) {
  4003b4:	e015      	b.n	4003e2 <_write+0x56>
		if (ptr_put(stdio_base, *ptr++) < 0) {
  4003b6:	4b0f      	ldr	r3, [pc, #60]	; (4003f4 <_write+0x68>)
  4003b8:	681a      	ldr	r2, [r3, #0]
  4003ba:	4b0f      	ldr	r3, [pc, #60]	; (4003f8 <_write+0x6c>)
  4003bc:	6818      	ldr	r0, [r3, #0]
  4003be:	68bb      	ldr	r3, [r7, #8]
  4003c0:	1c59      	adds	r1, r3, #1
  4003c2:	60b9      	str	r1, [r7, #8]
  4003c4:	781b      	ldrb	r3, [r3, #0]
  4003c6:	4619      	mov	r1, r3
  4003c8:	4790      	blx	r2
  4003ca:	4603      	mov	r3, r0
  4003cc:	2b00      	cmp	r3, #0
  4003ce:	da02      	bge.n	4003d6 <_write+0x4a>
			return -1;
  4003d0:	f04f 33ff 	mov.w	r3, #4294967295
  4003d4:	e009      	b.n	4003ea <_write+0x5e>
		}
		++nChars;
  4003d6:	697b      	ldr	r3, [r7, #20]
  4003d8:	3301      	adds	r3, #1
  4003da:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
  4003dc:	687b      	ldr	r3, [r7, #4]
  4003de:	3b01      	subs	r3, #1
  4003e0:	607b      	str	r3, [r7, #4]
  4003e2:	687b      	ldr	r3, [r7, #4]
  4003e4:	2b00      	cmp	r3, #0
  4003e6:	d1e6      	bne.n	4003b6 <_write+0x2a>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
	}
	return nChars;
  4003e8:	697b      	ldr	r3, [r7, #20]
}
  4003ea:	4618      	mov	r0, r3
  4003ec:	3718      	adds	r7, #24
  4003ee:	46bd      	mov	sp, r7
  4003f0:	bd80      	pop	{r7, pc}
  4003f2:	bf00      	nop
  4003f4:	20400994 	.word	0x20400994
  4003f8:	20400998 	.word	0x20400998

004003fc <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
  4003fc:	b580      	push	{r7, lr}
  4003fe:	b082      	sub	sp, #8
  400400:	af00      	add	r7, sp, #0
  400402:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  400404:	6878      	ldr	r0, [r7, #4]
  400406:	4b02      	ldr	r3, [pc, #8]	; (400410 <sysclk_enable_peripheral_clock+0x14>)
  400408:	4798      	blx	r3
}
  40040a:	3708      	adds	r7, #8
  40040c:	46bd      	mov	sp, r7
  40040e:	bd80      	pop	{r7, pc}
  400410:	00400c99 	.word	0x00400c99

00400414 <ioport_init>:
 *
 * This function must be called before using any other functions in the IOPORT
 * service.
 */
static inline void ioport_init(void)
{
  400414:	b580      	push	{r7, lr}
  400416:	af00      	add	r7, sp, #0
}

__always_inline static void arch_ioport_init(void)
{
#ifdef ID_PIOA
	sysclk_enable_peripheral_clock(ID_PIOA);
  400418:	200a      	movs	r0, #10
  40041a:	4b07      	ldr	r3, [pc, #28]	; (400438 <ioport_init+0x24>)
  40041c:	4798      	blx	r3
#endif
#ifdef ID_PIOB
	sysclk_enable_peripheral_clock(ID_PIOB);
  40041e:	200b      	movs	r0, #11
  400420:	4b05      	ldr	r3, [pc, #20]	; (400438 <ioport_init+0x24>)
  400422:	4798      	blx	r3
#endif
#ifdef ID_PIOC
	sysclk_enable_peripheral_clock(ID_PIOC);
  400424:	200c      	movs	r0, #12
  400426:	4b04      	ldr	r3, [pc, #16]	; (400438 <ioport_init+0x24>)
  400428:	4798      	blx	r3
#endif
#ifdef ID_PIOD
	sysclk_enable_peripheral_clock(ID_PIOD);
  40042a:	2010      	movs	r0, #16
  40042c:	4b02      	ldr	r3, [pc, #8]	; (400438 <ioport_init+0x24>)
  40042e:	4798      	blx	r3
#endif
#ifdef ID_PIOE
	sysclk_enable_peripheral_clock(ID_PIOE);
  400430:	2011      	movs	r0, #17
  400432:	4b01      	ldr	r3, [pc, #4]	; (400438 <ioport_init+0x24>)
  400434:	4798      	blx	r3
	arch_ioport_init();
}
  400436:	bd80      	pop	{r7, pc}
  400438:	004003fd 	.word	0x004003fd

0040043c <ioport_disable_pin>:
 *        IOPORT_CREATE_PIN().
 *
 * \param pin IOPORT pin to disable
 */
static inline void ioport_disable_pin(ioport_pin_t pin)
{
  40043c:	b480      	push	{r7}
  40043e:	b089      	sub	sp, #36	; 0x24
  400440:	af00      	add	r7, sp, #0
  400442:	6078      	str	r0, [r7, #4]
  400444:	687b      	ldr	r3, [r7, #4]
  400446:	61fb      	str	r3, [r7, #28]
  400448:	69fb      	ldr	r3, [r7, #28]
  40044a:	61bb      	str	r3, [r7, #24]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  40044c:	69bb      	ldr	r3, [r7, #24]
  40044e:	095a      	lsrs	r2, r3, #5
  400450:	69fb      	ldr	r3, [r7, #28]
  400452:	617b      	str	r3, [r7, #20]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  400454:	697b      	ldr	r3, [r7, #20]
  400456:	f003 031f 	and.w	r3, r3, #31
  40045a:	2101      	movs	r1, #1
  40045c:	fa01 f303 	lsl.w	r3, r1, r3
  400460:	613a      	str	r2, [r7, #16]
  400462:	60fb      	str	r3, [r7, #12]
  400464:	693b      	ldr	r3, [r7, #16]
  400466:	60bb      	str	r3, [r7, #8]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  400468:	68ba      	ldr	r2, [r7, #8]
  40046a:	4b05      	ldr	r3, [pc, #20]	; (400480 <ioport_disable_pin+0x44>)
  40046c:	4413      	add	r3, r2
  40046e:	025b      	lsls	r3, r3, #9
  400470:	461a      	mov	r2, r3
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400472:	68fb      	ldr	r3, [r7, #12]
  400474:	6053      	str	r3, [r2, #4]
	arch_ioport_disable_pin(pin);
}
  400476:	3724      	adds	r7, #36	; 0x24
  400478:	46bd      	mov	sp, r7
  40047a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40047e:	4770      	bx	lr
  400480:	00200707 	.word	0x00200707

00400484 <ioport_disable_port>:
 * \param port IOPORT port to disable
 * \param mask Pin mask of pins to disable
 */
static inline void ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
  400484:	b480      	push	{r7}
  400486:	b087      	sub	sp, #28
  400488:	af00      	add	r7, sp, #0
  40048a:	6078      	str	r0, [r7, #4]
  40048c:	6039      	str	r1, [r7, #0]
  40048e:	687b      	ldr	r3, [r7, #4]
  400490:	617b      	str	r3, [r7, #20]
  400492:	683b      	ldr	r3, [r7, #0]
  400494:	613b      	str	r3, [r7, #16]
  400496:	697b      	ldr	r3, [r7, #20]
  400498:	60fb      	str	r3, [r7, #12]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  40049a:	68fa      	ldr	r2, [r7, #12]
  40049c:	4b05      	ldr	r3, [pc, #20]	; (4004b4 <ioport_disable_port+0x30>)
  40049e:	4413      	add	r3, r2
  4004a0:	025b      	lsls	r3, r3, #9
  4004a2:	461a      	mov	r2, r3
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4004a4:	693b      	ldr	r3, [r7, #16]
  4004a6:	6053      	str	r3, [r2, #4]
	arch_ioport_disable_port(port, mask);
}
  4004a8:	371c      	adds	r7, #28
  4004aa:	46bd      	mov	sp, r7
  4004ac:	f85d 7b04 	ldr.w	r7, [sp], #4
  4004b0:	4770      	bx	lr
  4004b2:	bf00      	nop
  4004b4:	00200707 	.word	0x00200707

004004b8 <ioport_set_port_mode>:
 * \param mode Mode masks to configure for the specified pins (\ref
 * ioport_modes)
 */
static inline void ioport_set_port_mode(ioport_port_t port,
		ioport_port_mask_t mask, ioport_mode_t mode)
{
  4004b8:	b480      	push	{r7}
  4004ba:	b08b      	sub	sp, #44	; 0x2c
  4004bc:	af00      	add	r7, sp, #0
  4004be:	60f8      	str	r0, [r7, #12]
  4004c0:	60b9      	str	r1, [r7, #8]
  4004c2:	607a      	str	r2, [r7, #4]
  4004c4:	68fb      	ldr	r3, [r7, #12]
  4004c6:	627b      	str	r3, [r7, #36]	; 0x24
  4004c8:	68bb      	ldr	r3, [r7, #8]
  4004ca:	623b      	str	r3, [r7, #32]
  4004cc:	687b      	ldr	r3, [r7, #4]
  4004ce:	61fb      	str	r3, [r7, #28]
  4004d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4004d2:	61bb      	str	r3, [r7, #24]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  4004d4:	69ba      	ldr	r2, [r7, #24]
  4004d6:	4b37      	ldr	r3, [pc, #220]	; (4005b4 <ioport_set_port_mode+0xfc>)
  4004d8:	4413      	add	r3, r2
  4004da:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_port_mode(ioport_port_t port,
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);
  4004dc:	617b      	str	r3, [r7, #20]

	if (mode & IOPORT_MODE_PULLUP) {
  4004de:	69fb      	ldr	r3, [r7, #28]
  4004e0:	f003 0308 	and.w	r3, r3, #8
  4004e4:	2b00      	cmp	r3, #0
  4004e6:	d003      	beq.n	4004f0 <ioport_set_port_mode+0x38>
		base->PIO_PUER = mask;
  4004e8:	697b      	ldr	r3, [r7, #20]
  4004ea:	6a3a      	ldr	r2, [r7, #32]
  4004ec:	665a      	str	r2, [r3, #100]	; 0x64
  4004ee:	e002      	b.n	4004f6 <ioport_set_port_mode+0x3e>
	} else {
		base->PIO_PUDR = mask;
  4004f0:	697b      	ldr	r3, [r7, #20]
  4004f2:	6a3a      	ldr	r2, [r7, #32]
  4004f4:	661a      	str	r2, [r3, #96]	; 0x60
	}

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
  4004f6:	69fb      	ldr	r3, [r7, #28]
  4004f8:	f003 0310 	and.w	r3, r3, #16
  4004fc:	2b00      	cmp	r3, #0
  4004fe:	d004      	beq.n	40050a <ioport_set_port_mode+0x52>
		base->PIO_PPDER = mask;
  400500:	697b      	ldr	r3, [r7, #20]
  400502:	6a3a      	ldr	r2, [r7, #32]
  400504:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  400508:	e003      	b.n	400512 <ioport_set_port_mode+0x5a>
	} else {
		base->PIO_PPDDR = mask;
  40050a:	697b      	ldr	r3, [r7, #20]
  40050c:	6a3a      	ldr	r2, [r7, #32]
  40050e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	}
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
  400512:	69fb      	ldr	r3, [r7, #28]
  400514:	f003 0320 	and.w	r3, r3, #32
  400518:	2b00      	cmp	r3, #0
  40051a:	d003      	beq.n	400524 <ioport_set_port_mode+0x6c>
		base->PIO_MDER = mask;
  40051c:	697b      	ldr	r3, [r7, #20]
  40051e:	6a3a      	ldr	r2, [r7, #32]
  400520:	651a      	str	r2, [r3, #80]	; 0x50
  400522:	e002      	b.n	40052a <ioport_set_port_mode+0x72>
	} else {
		base->PIO_MDDR = mask;
  400524:	697b      	ldr	r3, [r7, #20]
  400526:	6a3a      	ldr	r2, [r7, #32]
  400528:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
  40052a:	69fb      	ldr	r3, [r7, #28]
  40052c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
  400530:	2b00      	cmp	r3, #0
  400532:	d003      	beq.n	40053c <ioport_set_port_mode+0x84>
		base->PIO_IFER = mask;
  400534:	697b      	ldr	r3, [r7, #20]
  400536:	6a3a      	ldr	r2, [r7, #32]
  400538:	621a      	str	r2, [r3, #32]
  40053a:	e002      	b.n	400542 <ioport_set_port_mode+0x8a>
	} else {
		base->PIO_IFDR = mask;
  40053c:	697b      	ldr	r3, [r7, #20]
  40053e:	6a3a      	ldr	r2, [r7, #32]
  400540:	625a      	str	r2, [r3, #36]	; 0x24
	}

	if (mode & IOPORT_MODE_DEBOUNCE) {
  400542:	69fb      	ldr	r3, [r7, #28]
  400544:	f003 0380 	and.w	r3, r3, #128	; 0x80
  400548:	2b00      	cmp	r3, #0
  40054a:	d004      	beq.n	400556 <ioport_set_port_mode+0x9e>
#if SAM3U || SAM3XA
		base->PIO_DIFSR = mask;
#else
		base->PIO_IFSCER = mask;
  40054c:	697b      	ldr	r3, [r7, #20]
  40054e:	6a3a      	ldr	r2, [r7, #32]
  400550:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  400554:	e003      	b.n	40055e <ioport_set_port_mode+0xa6>
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  400556:	697b      	ldr	r3, [r7, #20]
  400558:	6a3a      	ldr	r2, [r7, #32]
  40055a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABSR |= mask;
	} else {
		base->PIO_ABSR &= ~mask;
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
  40055e:	69fb      	ldr	r3, [r7, #28]
  400560:	f003 0301 	and.w	r3, r3, #1
  400564:	2b00      	cmp	r3, #0
  400566:	d006      	beq.n	400576 <ioport_set_port_mode+0xbe>
		base->PIO_ABCDSR[0] |= mask;
  400568:	697b      	ldr	r3, [r7, #20]
  40056a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  40056c:	6a3b      	ldr	r3, [r7, #32]
  40056e:	431a      	orrs	r2, r3
  400570:	697b      	ldr	r3, [r7, #20]
  400572:	671a      	str	r2, [r3, #112]	; 0x70
  400574:	e006      	b.n	400584 <ioport_set_port_mode+0xcc>
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  400576:	697b      	ldr	r3, [r7, #20]
  400578:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  40057a:	6a3b      	ldr	r3, [r7, #32]
  40057c:	43db      	mvns	r3, r3
  40057e:	401a      	ands	r2, r3
  400580:	697b      	ldr	r3, [r7, #20]
  400582:	671a      	str	r2, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
  400584:	69fb      	ldr	r3, [r7, #28]
  400586:	f003 0302 	and.w	r3, r3, #2
  40058a:	2b00      	cmp	r3, #0
  40058c:	d006      	beq.n	40059c <ioport_set_port_mode+0xe4>
		base->PIO_ABCDSR[1] |= mask;
  40058e:	697b      	ldr	r3, [r7, #20]
  400590:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400592:	6a3b      	ldr	r3, [r7, #32]
  400594:	431a      	orrs	r2, r3
  400596:	697b      	ldr	r3, [r7, #20]
  400598:	675a      	str	r2, [r3, #116]	; 0x74
  40059a:	e006      	b.n	4005aa <ioport_set_port_mode+0xf2>
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  40059c:	697b      	ldr	r3, [r7, #20]
  40059e:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4005a0:	6a3b      	ldr	r3, [r7, #32]
  4005a2:	43db      	mvns	r3, r3
  4005a4:	401a      	ands	r2, r3
  4005a6:	697b      	ldr	r3, [r7, #20]
  4005a8:	675a      	str	r2, [r3, #116]	; 0x74
	arch_ioport_set_port_mode(port, mask, mode);
}
  4005aa:	372c      	adds	r7, #44	; 0x2c
  4005ac:	46bd      	mov	sp, r7
  4005ae:	f85d 7b04 	ldr.w	r7, [sp], #4
  4005b2:	4770      	bx	lr
  4005b4:	00200707 	.word	0x00200707

004005b8 <ioport_set_pin_mode>:
 *
 * \param pin IOPORT pin to configure
 * \param mode Mode masks to configure for the specified pin (\ref ioport_modes)
 */
static inline void ioport_set_pin_mode(ioport_pin_t pin, ioport_mode_t mode)
{
  4005b8:	b480      	push	{r7}
  4005ba:	b08d      	sub	sp, #52	; 0x34
  4005bc:	af00      	add	r7, sp, #0
  4005be:	6078      	str	r0, [r7, #4]
  4005c0:	6039      	str	r1, [r7, #0]
  4005c2:	687b      	ldr	r3, [r7, #4]
  4005c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  4005c6:	683b      	ldr	r3, [r7, #0]
  4005c8:	62bb      	str	r3, [r7, #40]	; 0x28
  4005ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4005cc:	627b      	str	r3, [r7, #36]	; 0x24
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  4005ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4005d0:	095a      	lsrs	r2, r3, #5
  4005d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4005d4:	623b      	str	r3, [r7, #32]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  4005d6:	6a3b      	ldr	r3, [r7, #32]
  4005d8:	f003 031f 	and.w	r3, r3, #31
  4005dc:	2101      	movs	r1, #1
  4005de:	fa01 f303 	lsl.w	r3, r1, r3
  4005e2:	61fa      	str	r2, [r7, #28]
  4005e4:	61bb      	str	r3, [r7, #24]
  4005e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
  4005e8:	617b      	str	r3, [r7, #20]
  4005ea:	69fb      	ldr	r3, [r7, #28]
  4005ec:	613b      	str	r3, [r7, #16]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  4005ee:	693a      	ldr	r2, [r7, #16]
  4005f0:	4b37      	ldr	r3, [pc, #220]	; (4006d0 <ioport_set_pin_mode+0x118>)
  4005f2:	4413      	add	r3, r2
  4005f4:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_port_mode(ioport_port_t port,
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);
  4005f6:	60fb      	str	r3, [r7, #12]

	if (mode & IOPORT_MODE_PULLUP) {
  4005f8:	697b      	ldr	r3, [r7, #20]
  4005fa:	f003 0308 	and.w	r3, r3, #8
  4005fe:	2b00      	cmp	r3, #0
  400600:	d003      	beq.n	40060a <ioport_set_pin_mode+0x52>
		base->PIO_PUER = mask;
  400602:	68fb      	ldr	r3, [r7, #12]
  400604:	69ba      	ldr	r2, [r7, #24]
  400606:	665a      	str	r2, [r3, #100]	; 0x64
  400608:	e002      	b.n	400610 <ioport_set_pin_mode+0x58>
	} else {
		base->PIO_PUDR = mask;
  40060a:	68fb      	ldr	r3, [r7, #12]
  40060c:	69ba      	ldr	r2, [r7, #24]
  40060e:	661a      	str	r2, [r3, #96]	; 0x60
	}

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
  400610:	697b      	ldr	r3, [r7, #20]
  400612:	f003 0310 	and.w	r3, r3, #16
  400616:	2b00      	cmp	r3, #0
  400618:	d004      	beq.n	400624 <ioport_set_pin_mode+0x6c>
		base->PIO_PPDER = mask;
  40061a:	68fb      	ldr	r3, [r7, #12]
  40061c:	69ba      	ldr	r2, [r7, #24]
  40061e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  400622:	e003      	b.n	40062c <ioport_set_pin_mode+0x74>
	} else {
		base->PIO_PPDDR = mask;
  400624:	68fb      	ldr	r3, [r7, #12]
  400626:	69ba      	ldr	r2, [r7, #24]
  400628:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	}
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
  40062c:	697b      	ldr	r3, [r7, #20]
  40062e:	f003 0320 	and.w	r3, r3, #32
  400632:	2b00      	cmp	r3, #0
  400634:	d003      	beq.n	40063e <ioport_set_pin_mode+0x86>
		base->PIO_MDER = mask;
  400636:	68fb      	ldr	r3, [r7, #12]
  400638:	69ba      	ldr	r2, [r7, #24]
  40063a:	651a      	str	r2, [r3, #80]	; 0x50
  40063c:	e002      	b.n	400644 <ioport_set_pin_mode+0x8c>
	} else {
		base->PIO_MDDR = mask;
  40063e:	68fb      	ldr	r3, [r7, #12]
  400640:	69ba      	ldr	r2, [r7, #24]
  400642:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
  400644:	697b      	ldr	r3, [r7, #20]
  400646:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
  40064a:	2b00      	cmp	r3, #0
  40064c:	d003      	beq.n	400656 <ioport_set_pin_mode+0x9e>
		base->PIO_IFER = mask;
  40064e:	68fb      	ldr	r3, [r7, #12]
  400650:	69ba      	ldr	r2, [r7, #24]
  400652:	621a      	str	r2, [r3, #32]
  400654:	e002      	b.n	40065c <ioport_set_pin_mode+0xa4>
	} else {
		base->PIO_IFDR = mask;
  400656:	68fb      	ldr	r3, [r7, #12]
  400658:	69ba      	ldr	r2, [r7, #24]
  40065a:	625a      	str	r2, [r3, #36]	; 0x24
	}

	if (mode & IOPORT_MODE_DEBOUNCE) {
  40065c:	697b      	ldr	r3, [r7, #20]
  40065e:	f003 0380 	and.w	r3, r3, #128	; 0x80
  400662:	2b00      	cmp	r3, #0
  400664:	d004      	beq.n	400670 <ioport_set_pin_mode+0xb8>
#if SAM3U || SAM3XA
		base->PIO_DIFSR = mask;
#else
		base->PIO_IFSCER = mask;
  400666:	68fb      	ldr	r3, [r7, #12]
  400668:	69ba      	ldr	r2, [r7, #24]
  40066a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  40066e:	e003      	b.n	400678 <ioport_set_pin_mode+0xc0>
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  400670:	68fb      	ldr	r3, [r7, #12]
  400672:	69ba      	ldr	r2, [r7, #24]
  400674:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABSR |= mask;
	} else {
		base->PIO_ABSR &= ~mask;
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
  400678:	697b      	ldr	r3, [r7, #20]
  40067a:	f003 0301 	and.w	r3, r3, #1
  40067e:	2b00      	cmp	r3, #0
  400680:	d006      	beq.n	400690 <ioport_set_pin_mode+0xd8>
		base->PIO_ABCDSR[0] |= mask;
  400682:	68fb      	ldr	r3, [r7, #12]
  400684:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400686:	69bb      	ldr	r3, [r7, #24]
  400688:	431a      	orrs	r2, r3
  40068a:	68fb      	ldr	r3, [r7, #12]
  40068c:	671a      	str	r2, [r3, #112]	; 0x70
  40068e:	e006      	b.n	40069e <ioport_set_pin_mode+0xe6>
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  400690:	68fb      	ldr	r3, [r7, #12]
  400692:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400694:	69bb      	ldr	r3, [r7, #24]
  400696:	43db      	mvns	r3, r3
  400698:	401a      	ands	r2, r3
  40069a:	68fb      	ldr	r3, [r7, #12]
  40069c:	671a      	str	r2, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
  40069e:	697b      	ldr	r3, [r7, #20]
  4006a0:	f003 0302 	and.w	r3, r3, #2
  4006a4:	2b00      	cmp	r3, #0
  4006a6:	d006      	beq.n	4006b6 <ioport_set_pin_mode+0xfe>
		base->PIO_ABCDSR[1] |= mask;
  4006a8:	68fb      	ldr	r3, [r7, #12]
  4006aa:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4006ac:	69bb      	ldr	r3, [r7, #24]
  4006ae:	431a      	orrs	r2, r3
  4006b0:	68fb      	ldr	r3, [r7, #12]
  4006b2:	675a      	str	r2, [r3, #116]	; 0x74
  4006b4:	e006      	b.n	4006c4 <ioport_set_pin_mode+0x10c>
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  4006b6:	68fb      	ldr	r3, [r7, #12]
  4006b8:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4006ba:	69bb      	ldr	r3, [r7, #24]
  4006bc:	43db      	mvns	r3, r3
  4006be:	401a      	ands	r2, r3
  4006c0:	68fb      	ldr	r3, [r7, #12]
  4006c2:	675a      	str	r2, [r3, #116]	; 0x74
	arch_ioport_set_pin_mode(pin, mode);
}
  4006c4:	3734      	adds	r7, #52	; 0x34
  4006c6:	46bd      	mov	sp, r7
  4006c8:	f85d 7b04 	ldr.w	r7, [sp], #4
  4006cc:	4770      	bx	lr
  4006ce:	bf00      	nop
  4006d0:	00200707 	.word	0x00200707

004006d4 <ioport_set_pin_dir>:
 * \param pin IOPORT pin to configure
 * \param dir Direction to set for the specified pin (\ref ioport_direction)
 */
static inline void ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
  4006d4:	b480      	push	{r7}
  4006d6:	b08d      	sub	sp, #52	; 0x34
  4006d8:	af00      	add	r7, sp, #0
  4006da:	6078      	str	r0, [r7, #4]
  4006dc:	460b      	mov	r3, r1
  4006de:	70fb      	strb	r3, [r7, #3]
  4006e0:	687b      	ldr	r3, [r7, #4]
  4006e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  4006e4:	78fb      	ldrb	r3, [r7, #3]
  4006e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  4006ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4006ec:	627b      	str	r3, [r7, #36]	; 0x24
  4006ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4006f0:	623b      	str	r3, [r7, #32]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  4006f2:	6a3b      	ldr	r3, [r7, #32]
  4006f4:	095b      	lsrs	r3, r3, #5
  4006f6:	61fb      	str	r3, [r7, #28]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  4006f8:	69fa      	ldr	r2, [r7, #28]
  4006fa:	4b17      	ldr	r3, [pc, #92]	; (400758 <ioport_set_pin_dir+0x84>)
  4006fc:	4413      	add	r3, r2
  4006fe:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);
  400700:	61bb      	str	r3, [r7, #24]

	if (dir == IOPORT_DIR_OUTPUT) {
  400702:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  400706:	2b01      	cmp	r3, #1
  400708:	d109      	bne.n	40071e <ioport_set_pin_dir+0x4a>
  40070a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  40070c:	617b      	str	r3, [r7, #20]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  40070e:	697b      	ldr	r3, [r7, #20]
  400710:	f003 031f 	and.w	r3, r3, #31
  400714:	2201      	movs	r2, #1
  400716:	409a      	lsls	r2, r3
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400718:	69bb      	ldr	r3, [r7, #24]
  40071a:	611a      	str	r2, [r3, #16]
  40071c:	e00c      	b.n	400738 <ioport_set_pin_dir+0x64>
	} else if (dir == IOPORT_DIR_INPUT) {
  40071e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  400722:	2b00      	cmp	r3, #0
  400724:	d108      	bne.n	400738 <ioport_set_pin_dir+0x64>
  400726:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  400728:	613b      	str	r3, [r7, #16]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  40072a:	693b      	ldr	r3, [r7, #16]
  40072c:	f003 031f 	and.w	r3, r3, #31
  400730:	2201      	movs	r2, #1
  400732:	409a      	lsls	r2, r3
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  400734:	69bb      	ldr	r3, [r7, #24]
  400736:	615a      	str	r2, [r3, #20]
  400738:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  40073a:	60fb      	str	r3, [r7, #12]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  40073c:	68fb      	ldr	r3, [r7, #12]
  40073e:	f003 031f 	and.w	r3, r3, #31
  400742:	2201      	movs	r2, #1
  400744:	409a      	lsls	r2, r3
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400746:	69bb      	ldr	r3, [r7, #24]
  400748:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	arch_ioport_set_pin_dir(pin, dir);
}
  40074c:	3734      	adds	r7, #52	; 0x34
  40074e:	46bd      	mov	sp, r7
  400750:	f85d 7b04 	ldr.w	r7, [sp], #4
  400754:	4770      	bx	lr
  400756:	bf00      	nop
  400758:	00200707 	.word	0x00200707

0040075c <ioport_set_pin_level>:
 *
 * \param pin IOPORT pin to configure
 * \param level Logical value of the pin
 */
static inline void ioport_set_pin_level(ioport_pin_t pin, bool level)
{
  40075c:	b480      	push	{r7}
  40075e:	b08b      	sub	sp, #44	; 0x2c
  400760:	af00      	add	r7, sp, #0
  400762:	6078      	str	r0, [r7, #4]
  400764:	460b      	mov	r3, r1
  400766:	70fb      	strb	r3, [r7, #3]
  400768:	687b      	ldr	r3, [r7, #4]
  40076a:	627b      	str	r3, [r7, #36]	; 0x24
  40076c:	78fb      	ldrb	r3, [r7, #3]
  40076e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  400772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  400774:	61fb      	str	r3, [r7, #28]
  400776:	69fb      	ldr	r3, [r7, #28]
  400778:	61bb      	str	r3, [r7, #24]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  40077a:	69bb      	ldr	r3, [r7, #24]
  40077c:	095b      	lsrs	r3, r3, #5
  40077e:	617b      	str	r3, [r7, #20]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  400780:	697a      	ldr	r2, [r7, #20]
  400782:	4b10      	ldr	r3, [pc, #64]	; (4007c4 <ioport_set_pin_level+0x68>)
  400784:	4413      	add	r3, r2
  400786:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);
  400788:	613b      	str	r3, [r7, #16]

	if (level) {
  40078a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
  40078e:	2b00      	cmp	r3, #0
  400790:	d009      	beq.n	4007a6 <ioport_set_pin_level+0x4a>
  400792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  400794:	60fb      	str	r3, [r7, #12]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  400796:	68fb      	ldr	r3, [r7, #12]
  400798:	f003 031f 	and.w	r3, r3, #31
  40079c:	2201      	movs	r2, #1
  40079e:	409a      	lsls	r2, r3
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4007a0:	693b      	ldr	r3, [r7, #16]
  4007a2:	631a      	str	r2, [r3, #48]	; 0x30
  4007a4:	e008      	b.n	4007b8 <ioport_set_pin_level+0x5c>
  4007a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4007a8:	60bb      	str	r3, [r7, #8]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  4007aa:	68bb      	ldr	r3, [r7, #8]
  4007ac:	f003 031f 	and.w	r3, r3, #31
  4007b0:	2201      	movs	r2, #1
  4007b2:	409a      	lsls	r2, r3
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  4007b4:	693b      	ldr	r3, [r7, #16]
  4007b6:	635a      	str	r2, [r3, #52]	; 0x34
	arch_ioport_set_pin_level(pin, level);
}
  4007b8:	372c      	adds	r7, #44	; 0x2c
  4007ba:	46bd      	mov	sp, r7
  4007bc:	f85d 7b04 	ldr.w	r7, [sp], #4
  4007c0:	4770      	bx	lr
  4007c2:	bf00      	nop
  4007c4:	00200707 	.word	0x00200707

004007c8 <ioport_set_pin_sense_mode>:
 * \param pin IOPORT pin to configure
 * \param pin_sense Edge to sense for the pin (\ref ioport_sense)
 */
static inline void ioport_set_pin_sense_mode(ioport_pin_t pin,
		enum ioport_sense pin_sense)
{
  4007c8:	b480      	push	{r7}
  4007ca:	b08d      	sub	sp, #52	; 0x34
  4007cc:	af00      	add	r7, sp, #0
  4007ce:	6078      	str	r0, [r7, #4]
  4007d0:	460b      	mov	r3, r1
  4007d2:	70fb      	strb	r3, [r7, #3]
  4007d4:	687b      	ldr	r3, [r7, #4]
  4007d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  4007d8:	78fb      	ldrb	r3, [r7, #3]
  4007da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  4007de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4007e0:	627b      	str	r3, [r7, #36]	; 0x24
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  4007e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4007e4:	095a      	lsrs	r2, r3, #5
  4007e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4007e8:	623b      	str	r3, [r7, #32]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  4007ea:	6a3b      	ldr	r3, [r7, #32]
  4007ec:	f003 031f 	and.w	r3, r3, #31
  4007f0:	2101      	movs	r1, #1
  4007f2:	fa01 f303 	lsl.w	r3, r1, r3
  4007f6:	61fa      	str	r2, [r7, #28]
  4007f8:	61bb      	str	r3, [r7, #24]
  4007fa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  4007fe:	75fb      	strb	r3, [r7, #23]
  400800:	69fb      	ldr	r3, [r7, #28]
  400802:	613b      	str	r3, [r7, #16]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  400804:	693a      	ldr	r2, [r7, #16]
  400806:	4b22      	ldr	r3, [pc, #136]	; (400890 <ioport_set_pin_sense_mode+0xc8>)
  400808:	4413      	add	r3, r2
  40080a:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_port_sense_mode(ioport_port_t port,
		ioport_port_mask_t mask, enum ioport_sense pin_sense)
{
	Pio *base = arch_ioport_port_to_base(port);
  40080c:	60fb      	str	r3, [r7, #12]
	 *       1       0         0    IOPORT_SENSE_FALLING
	 *       1       0         1    IOPORT_SENSE_RISING
	 *       1       1         0    IOPORT_SENSE_LEVEL_LOW
	 *       1       1         1    IOPORT_SENSE_LEVEL_HIGH
	 */
	switch(pin_sense) {
  40080e:	7dfb      	ldrb	r3, [r7, #23]
  400810:	3b01      	subs	r3, #1
  400812:	2b03      	cmp	r3, #3
  400814:	d82e      	bhi.n	400874 <ioport_set_pin_sense_mode+0xac>
  400816:	a201      	add	r2, pc, #4	; (adr r2, 40081c <ioport_set_pin_sense_mode+0x54>)
  400818:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  40081c:	00400851 	.word	0x00400851
  400820:	00400863 	.word	0x00400863
  400824:	0040082d 	.word	0x0040082d
  400828:	0040083f 	.word	0x0040083f
	case IOPORT_SENSE_LEVEL_LOW:
		base->PIO_LSR = mask;
  40082c:	68fb      	ldr	r3, [r7, #12]
  40082e:	69ba      	ldr	r2, [r7, #24]
  400830:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
		base->PIO_FELLSR = mask;
  400834:	68fb      	ldr	r3, [r7, #12]
  400836:	69ba      	ldr	r2, [r7, #24]
  400838:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
  40083c:	e01f      	b.n	40087e <ioport_set_pin_sense_mode+0xb6>
		break;
	case IOPORT_SENSE_LEVEL_HIGH:
		base->PIO_LSR = mask;
  40083e:	68fb      	ldr	r3, [r7, #12]
  400840:	69ba      	ldr	r2, [r7, #24]
  400842:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
		base->PIO_REHLSR = mask;
  400846:	68fb      	ldr	r3, [r7, #12]
  400848:	69ba      	ldr	r2, [r7, #24]
  40084a:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  40084e:	e016      	b.n	40087e <ioport_set_pin_sense_mode+0xb6>
		break;
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
  400850:	68fb      	ldr	r3, [r7, #12]
  400852:	69ba      	ldr	r2, [r7, #24]
  400854:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_FELLSR = mask;
  400858:	68fb      	ldr	r3, [r7, #12]
  40085a:	69ba      	ldr	r2, [r7, #24]
  40085c:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
  400860:	e00d      	b.n	40087e <ioport_set_pin_sense_mode+0xb6>
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  400862:	68fb      	ldr	r3, [r7, #12]
  400864:	69ba      	ldr	r2, [r7, #24]
  400866:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  40086a:	68fb      	ldr	r3, [r7, #12]
  40086c:	69ba      	ldr	r2, [r7, #24]
  40086e:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  400872:	e004      	b.n	40087e <ioport_set_pin_sense_mode+0xb6>
		break;
	default:
		base->PIO_AIMDR = mask;
  400874:	68fb      	ldr	r3, [r7, #12]
  400876:	69ba      	ldr	r2, [r7, #24]
  400878:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
  40087c:	e003      	b.n	400886 <ioport_set_pin_sense_mode+0xbe>
		return;
	}
	base->PIO_AIMER = mask;
  40087e:	68fb      	ldr	r3, [r7, #12]
  400880:	69ba      	ldr	r2, [r7, #24]
  400882:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	arch_ioport_set_pin_sense_mode(pin, pin_sense);
}
  400886:	3734      	adds	r7, #52	; 0x34
  400888:	46bd      	mov	sp, r7
  40088a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40088e:	4770      	bx	lr
  400890:	00200707 	.word	0x00200707

00400894 <board_init>:
	__ISB();
}
#endif

void board_init(void)
{
  400894:	b580      	push	{r7, lr}
  400896:	af00      	add	r7, sp, #0
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  400898:	4b24      	ldr	r3, [pc, #144]	; (40092c <board_init+0x98>)
  40089a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  40089e:	605a      	str	r2, [r3, #4]
#endif

	/* Initialize IOPORTs */
	ioport_init();
  4008a0:	4b23      	ldr	r3, [pc, #140]	; (400930 <board_init+0x9c>)
  4008a2:	4798      	blx	r3

	/* Configure the pins connected to LED as output and set their
	 * default initial state to high (LED off).
	 */
	ioport_set_pin_dir(LED0_GPIO, IOPORT_DIR_OUTPUT);
  4008a4:	2050      	movs	r0, #80	; 0x50
  4008a6:	2101      	movs	r1, #1
  4008a8:	4b22      	ldr	r3, [pc, #136]	; (400934 <board_init+0xa0>)
  4008aa:	4798      	blx	r3
	ioport_set_pin_level(LED0_GPIO, LED0_INACTIVE_LEVEL);
  4008ac:	2050      	movs	r0, #80	; 0x50
  4008ae:	2101      	movs	r1, #1
  4008b0:	4b21      	ldr	r3, [pc, #132]	; (400938 <board_init+0xa4>)
  4008b2:	4798      	blx	r3

	/* Configure Push Button pins */
	ioport_set_pin_input_mode(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS,
  4008b4:	200b      	movs	r0, #11
  4008b6:	2100      	movs	r1, #0
  4008b8:	4b1e      	ldr	r3, [pc, #120]	; (400934 <board_init+0xa0>)
  4008ba:	4798      	blx	r3
  4008bc:	200b      	movs	r0, #11
  4008be:	2188      	movs	r1, #136	; 0x88
  4008c0:	4b1e      	ldr	r3, [pc, #120]	; (40093c <board_init+0xa8>)
  4008c2:	4798      	blx	r3
  4008c4:	200b      	movs	r0, #11
  4008c6:	2102      	movs	r1, #2
  4008c8:	4b1d      	ldr	r3, [pc, #116]	; (400940 <board_init+0xac>)
  4008ca:	4798      	blx	r3
//jsi 7feb16 following defines are from the DMA-UART example project for the SAM4E
#define PINS_UART0_PORT		IOPORT_PIOA
#define PINS_UART0			(PIO_PA9A_URXD0 | PIO_PA10A_UTXD0)
#define PINS_UART0_FLAGS	IOPORT_MODE_MUX_A

	ioport_set_port_peripheral_mode(PINS_UART0_PORT, PINS_UART0, PINS_UART0_FLAGS); //jsi 6feb16 was USART1
  4008cc:	2000      	movs	r0, #0
  4008ce:	f44f 61c0 	mov.w	r1, #1536	; 0x600
  4008d2:	2200      	movs	r2, #0
  4008d4:	4b1b      	ldr	r3, [pc, #108]	; (400944 <board_init+0xb0>)
  4008d6:	4798      	blx	r3
  4008d8:	2000      	movs	r0, #0
  4008da:	f44f 61c0 	mov.w	r1, #1536	; 0x600
  4008de:	4b1a      	ldr	r3, [pc, #104]	; (400948 <board_init+0xb4>)
  4008e0:	4798      	blx	r3

#endif

#define CONF_BOARD_TWIHS0 //jsi 7feb16
#ifdef CONF_BOARD_TWIHS0
	ioport_set_pin_peripheral_mode(TWIHS0_DATA_GPIO, TWIHS0_DATA_FLAGS);
  4008e2:	2003      	movs	r0, #3
  4008e4:	2100      	movs	r1, #0
  4008e6:	4b15      	ldr	r3, [pc, #84]	; (40093c <board_init+0xa8>)
  4008e8:	4798      	blx	r3
  4008ea:	2003      	movs	r0, #3
  4008ec:	4b17      	ldr	r3, [pc, #92]	; (40094c <board_init+0xb8>)
  4008ee:	4798      	blx	r3
	ioport_set_pin_peripheral_mode(TWIHS0_CLK_GPIO, TWIHS0_CLK_FLAGS);
  4008f0:	2004      	movs	r0, #4
  4008f2:	2100      	movs	r1, #0
  4008f4:	4b11      	ldr	r3, [pc, #68]	; (40093c <board_init+0xa8>)
  4008f6:	4798      	blx	r3
  4008f8:	2004      	movs	r0, #4
  4008fa:	4b14      	ldr	r3, [pc, #80]	; (40094c <board_init+0xb8>)
  4008fc:	4798      	blx	r3
#endif


#ifdef CONF_BOARD_USART_RXD
	/* Configure USART RXD pin */
	ioport_set_pin_peripheral_mode(USART0_RXD_GPIO, USART0_RXD_FLAGS);
  4008fe:	2020      	movs	r0, #32
  400900:	2102      	movs	r1, #2
  400902:	4b0e      	ldr	r3, [pc, #56]	; (40093c <board_init+0xa8>)
  400904:	4798      	blx	r3
  400906:	2020      	movs	r0, #32
  400908:	4b10      	ldr	r3, [pc, #64]	; (40094c <board_init+0xb8>)
  40090a:	4798      	blx	r3
#endif

#ifdef CONF_BOARD_USART_TXD
	/* Configure USART TXD pin */
	ioport_set_pin_peripheral_mode(USART0_TXD_GPIO, USART0_TXD_FLAGS);
  40090c:	2021      	movs	r0, #33	; 0x21
  40090e:	2102      	movs	r1, #2
  400910:	4b0a      	ldr	r3, [pc, #40]	; (40093c <board_init+0xa8>)
  400912:	4798      	blx	r3
  400914:	2021      	movs	r0, #33	; 0x21
  400916:	4b0d      	ldr	r3, [pc, #52]	; (40094c <board_init+0xb8>)
  400918:	4798      	blx	r3
	ioport_set_pin_peripheral_mode(PIN_USART0_CTS_IDX,PIN_USART0_CTS_FLAGS);
#endif

#ifdef CONF_BOARD_USART_RTS
	/* Configure USART RTS pin */
	ioport_set_pin_peripheral_mode(PIN_USART0_RTS_IDX, PIN_USART0_RTS_FLAGS);
  40091a:	2023      	movs	r0, #35	; 0x23
  40091c:	2102      	movs	r1, #2
  40091e:	4b07      	ldr	r3, [pc, #28]	; (40093c <board_init+0xa8>)
  400920:	4798      	blx	r3
  400922:	2023      	movs	r0, #35	; 0x23
  400924:	4b09      	ldr	r3, [pc, #36]	; (40094c <board_init+0xb8>)
  400926:	4798      	blx	r3
#endif

#ifdef CONF_BOARD_CONFIG_MPU_AT_INIT
	_setup_memory_region();
#endif
}
  400928:	bd80      	pop	{r7, pc}
  40092a:	bf00      	nop
  40092c:	400e1850 	.word	0x400e1850
  400930:	00400415 	.word	0x00400415
  400934:	004006d5 	.word	0x004006d5
  400938:	0040075d 	.word	0x0040075d
  40093c:	004005b9 	.word	0x004005b9
  400940:	004007c9 	.word	0x004007c9
  400944:	004004b9 	.word	0x004004b9
  400948:	00400485 	.word	0x00400485
  40094c:	0040043d 	.word	0x0040043d

00400950 <pio_get_interrupt_status>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
  400950:	b480      	push	{r7}
  400952:	b083      	sub	sp, #12
  400954:	af00      	add	r7, sp, #0
  400956:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_ISR;
  400958:	687b      	ldr	r3, [r7, #4]
  40095a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
  40095c:	4618      	mov	r0, r3
  40095e:	370c      	adds	r7, #12
  400960:	46bd      	mov	sp, r7
  400962:	f85d 7b04 	ldr.w	r7, [sp], #4
  400966:	4770      	bx	lr

00400968 <pio_get_interrupt_mask>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
  400968:	b480      	push	{r7}
  40096a:	b083      	sub	sp, #12
  40096c:	af00      	add	r7, sp, #0
  40096e:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_IMR;
  400970:	687b      	ldr	r3, [r7, #4]
  400972:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
  400974:	4618      	mov	r0, r3
  400976:	370c      	adds	r7, #12
  400978:	46bd      	mov	sp, r7
  40097a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40097e:	4770      	bx	lr

00400980 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  400980:	b580      	push	{r7, lr}
  400982:	b084      	sub	sp, #16
  400984:	af00      	add	r7, sp, #0
  400986:	6078      	str	r0, [r7, #4]
  400988:	6039      	str	r1, [r7, #0]
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  40098a:	6878      	ldr	r0, [r7, #4]
  40098c:	4b24      	ldr	r3, [pc, #144]	; (400a20 <pio_handler_process+0xa0>)
  40098e:	4798      	blx	r3
  400990:	60f8      	str	r0, [r7, #12]
	status &= pio_get_interrupt_mask(p_pio);
  400992:	6878      	ldr	r0, [r7, #4]
  400994:	4b23      	ldr	r3, [pc, #140]	; (400a24 <pio_handler_process+0xa4>)
  400996:	4798      	blx	r3
  400998:	4602      	mov	r2, r0
  40099a:	68fb      	ldr	r3, [r7, #12]
  40099c:	4013      	ands	r3, r2
  40099e:	60fb      	str	r3, [r7, #12]

	/* Check pending events */
	if (status != 0) {
  4009a0:	68fb      	ldr	r3, [r7, #12]
  4009a2:	2b00      	cmp	r3, #0
  4009a4:	d038      	beq.n	400a18 <pio_handler_process+0x98>
		/* Find triggering source */
		i = 0;
  4009a6:	2300      	movs	r3, #0
  4009a8:	60bb      	str	r3, [r7, #8]
		while (status != 0) {
  4009aa:	e032      	b.n	400a12 <pio_handler_process+0x92>
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  4009ac:	4a1e      	ldr	r2, [pc, #120]	; (400a28 <pio_handler_process+0xa8>)
  4009ae:	68bb      	ldr	r3, [r7, #8]
  4009b0:	011b      	lsls	r3, r3, #4
  4009b2:	4413      	add	r3, r2
  4009b4:	681a      	ldr	r2, [r3, #0]
  4009b6:	683b      	ldr	r3, [r7, #0]
  4009b8:	429a      	cmp	r2, r3
  4009ba:	d123      	bne.n	400a04 <pio_handler_process+0x84>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  4009bc:	4a1a      	ldr	r2, [pc, #104]	; (400a28 <pio_handler_process+0xa8>)
  4009be:	68bb      	ldr	r3, [r7, #8]
  4009c0:	011b      	lsls	r3, r3, #4
  4009c2:	4413      	add	r3, r2
  4009c4:	685a      	ldr	r2, [r3, #4]
  4009c6:	68fb      	ldr	r3, [r7, #12]
  4009c8:	4013      	ands	r3, r2
  4009ca:	2b00      	cmp	r3, #0
  4009cc:	d01a      	beq.n	400a04 <pio_handler_process+0x84>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  4009ce:	4a16      	ldr	r2, [pc, #88]	; (400a28 <pio_handler_process+0xa8>)
  4009d0:	68bb      	ldr	r3, [r7, #8]
  4009d2:	011b      	lsls	r3, r3, #4
  4009d4:	4413      	add	r3, r2
  4009d6:	3308      	adds	r3, #8
  4009d8:	685b      	ldr	r3, [r3, #4]
  4009da:	4913      	ldr	r1, [pc, #76]	; (400a28 <pio_handler_process+0xa8>)
  4009dc:	68ba      	ldr	r2, [r7, #8]
  4009de:	0112      	lsls	r2, r2, #4
  4009e0:	440a      	add	r2, r1
  4009e2:	6810      	ldr	r0, [r2, #0]
  4009e4:	4910      	ldr	r1, [pc, #64]	; (400a28 <pio_handler_process+0xa8>)
  4009e6:	68ba      	ldr	r2, [r7, #8]
  4009e8:	0112      	lsls	r2, r2, #4
  4009ea:	440a      	add	r2, r1
  4009ec:	6852      	ldr	r2, [r2, #4]
  4009ee:	4611      	mov	r1, r2
  4009f0:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  4009f2:	4a0d      	ldr	r2, [pc, #52]	; (400a28 <pio_handler_process+0xa8>)
  4009f4:	68bb      	ldr	r3, [r7, #8]
  4009f6:	011b      	lsls	r3, r3, #4
  4009f8:	4413      	add	r3, r2
  4009fa:	685b      	ldr	r3, [r3, #4]
  4009fc:	43db      	mvns	r3, r3
  4009fe:	68fa      	ldr	r2, [r7, #12]
  400a00:	4013      	ands	r3, r2
  400a02:	60fb      	str	r3, [r7, #12]
				}
			}
			i++;
  400a04:	68bb      	ldr	r3, [r7, #8]
  400a06:	3301      	adds	r3, #1
  400a08:	60bb      	str	r3, [r7, #8]
			if (i >= MAX_INTERRUPT_SOURCES) {
  400a0a:	68bb      	ldr	r3, [r7, #8]
  400a0c:	2b06      	cmp	r3, #6
  400a0e:	d900      	bls.n	400a12 <pio_handler_process+0x92>
				break;
  400a10:	e002      	b.n	400a18 <pio_handler_process+0x98>

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
  400a12:	68fb      	ldr	r3, [r7, #12]
  400a14:	2b00      	cmp	r3, #0
  400a16:	d1c9      	bne.n	4009ac <pio_handler_process+0x2c>
		if (pio_capture_handler) {
			pio_capture_handler(p_pio);
		}
	}
#endif
}
  400a18:	3710      	adds	r7, #16
  400a1a:	46bd      	mov	sp, r7
  400a1c:	bd80      	pop	{r7, pc}
  400a1e:	bf00      	nop
  400a20:	00400951 	.word	0x00400951
  400a24:	00400969 	.word	0x00400969
  400a28:	204008d8 	.word	0x204008d8

00400a2c <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  400a2c:	b580      	push	{r7, lr}
  400a2e:	af00      	add	r7, sp, #0
	pio_handler_process(PIOA, ID_PIOA);
  400a30:	4802      	ldr	r0, [pc, #8]	; (400a3c <PIOA_Handler+0x10>)
  400a32:	210a      	movs	r1, #10
  400a34:	4b02      	ldr	r3, [pc, #8]	; (400a40 <PIOA_Handler+0x14>)
  400a36:	4798      	blx	r3
}
  400a38:	bd80      	pop	{r7, pc}
  400a3a:	bf00      	nop
  400a3c:	400e0e00 	.word	0x400e0e00
  400a40:	00400981 	.word	0x00400981

00400a44 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  400a44:	b580      	push	{r7, lr}
  400a46:	af00      	add	r7, sp, #0
    pio_handler_process(PIOB, ID_PIOB);
  400a48:	4802      	ldr	r0, [pc, #8]	; (400a54 <PIOB_Handler+0x10>)
  400a4a:	210b      	movs	r1, #11
  400a4c:	4b02      	ldr	r3, [pc, #8]	; (400a58 <PIOB_Handler+0x14>)
  400a4e:	4798      	blx	r3
}
  400a50:	bd80      	pop	{r7, pc}
  400a52:	bf00      	nop
  400a54:	400e1000 	.word	0x400e1000
  400a58:	00400981 	.word	0x00400981

00400a5c <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  400a5c:	b580      	push	{r7, lr}
  400a5e:	af00      	add	r7, sp, #0
	pio_handler_process(PIOC, ID_PIOC);
  400a60:	4802      	ldr	r0, [pc, #8]	; (400a6c <PIOC_Handler+0x10>)
  400a62:	210c      	movs	r1, #12
  400a64:	4b02      	ldr	r3, [pc, #8]	; (400a70 <PIOC_Handler+0x14>)
  400a66:	4798      	blx	r3
}
  400a68:	bd80      	pop	{r7, pc}
  400a6a:	bf00      	nop
  400a6c:	400e1200 	.word	0x400e1200
  400a70:	00400981 	.word	0x00400981

00400a74 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  400a74:	b580      	push	{r7, lr}
  400a76:	af00      	add	r7, sp, #0
	pio_handler_process(PIOD, ID_PIOD);
  400a78:	4802      	ldr	r0, [pc, #8]	; (400a84 <PIOD_Handler+0x10>)
  400a7a:	2110      	movs	r1, #16
  400a7c:	4b02      	ldr	r3, [pc, #8]	; (400a88 <PIOD_Handler+0x14>)
  400a7e:	4798      	blx	r3
}
  400a80:	bd80      	pop	{r7, pc}
  400a82:	bf00      	nop
  400a84:	400e1400 	.word	0x400e1400
  400a88:	00400981 	.word	0x00400981

00400a8c <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  400a8c:	b580      	push	{r7, lr}
  400a8e:	af00      	add	r7, sp, #0
	pio_handler_process(PIOE, ID_PIOE);
  400a90:	4802      	ldr	r0, [pc, #8]	; (400a9c <PIOE_Handler+0x10>)
  400a92:	2111      	movs	r1, #17
  400a94:	4b02      	ldr	r3, [pc, #8]	; (400aa0 <PIOE_Handler+0x14>)
  400a96:	4798      	blx	r3
}
  400a98:	bd80      	pop	{r7, pc}
  400a9a:	bf00      	nop
  400a9c:	400e1600 	.word	0x400e1600
  400aa0:	00400981 	.word	0x00400981

00400aa4 <pmc_switch_mck_to_mainck>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
uint32_t pmc_switch_mck_to_mainck(uint32_t ul_pres)
{
  400aa4:	b480      	push	{r7}
  400aa6:	b085      	sub	sp, #20
  400aa8:	af00      	add	r7, sp, #0
  400aaa:	6078      	str	r0, [r7, #4]
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  400aac:	4a1d      	ldr	r2, [pc, #116]	; (400b24 <pmc_switch_mck_to_mainck+0x80>)
  400aae:	4b1d      	ldr	r3, [pc, #116]	; (400b24 <pmc_switch_mck_to_mainck+0x80>)
  400ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400ab2:	f023 0303 	bic.w	r3, r3, #3
  400ab6:	f043 0301 	orr.w	r3, r3, #1
  400aba:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_MAIN_CLK;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400abc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  400ac0:	60fb      	str	r3, [r7, #12]
  400ac2:	e007      	b.n	400ad4 <pmc_switch_mck_to_mainck+0x30>
			--ul_timeout) {
		if (ul_timeout == 0) {
  400ac4:	68fb      	ldr	r3, [r7, #12]
  400ac6:	2b00      	cmp	r3, #0
  400ac8:	d101      	bne.n	400ace <pmc_switch_mck_to_mainck+0x2a>
			return 1;
  400aca:	2301      	movs	r3, #1
  400acc:	e023      	b.n	400b16 <pmc_switch_mck_to_mainck+0x72>
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_MAIN_CLK;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
  400ace:	68fb      	ldr	r3, [r7, #12]
  400ad0:	3b01      	subs	r3, #1
  400ad2:	60fb      	str	r3, [r7, #12]
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_MAIN_CLK;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400ad4:	4b13      	ldr	r3, [pc, #76]	; (400b24 <pmc_switch_mck_to_mainck+0x80>)
  400ad6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400ad8:	f003 0308 	and.w	r3, r3, #8
  400adc:	2b00      	cmp	r3, #0
  400ade:	d0f1      	beq.n	400ac4 <pmc_switch_mck_to_mainck+0x20>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  400ae0:	4910      	ldr	r1, [pc, #64]	; (400b24 <pmc_switch_mck_to_mainck+0x80>)
  400ae2:	4b10      	ldr	r3, [pc, #64]	; (400b24 <pmc_switch_mck_to_mainck+0x80>)
  400ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400ae6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
  400aea:	687b      	ldr	r3, [r7, #4]
  400aec:	4313      	orrs	r3, r2
  400aee:	630b      	str	r3, [r1, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400af0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  400af4:	60fb      	str	r3, [r7, #12]
  400af6:	e007      	b.n	400b08 <pmc_switch_mck_to_mainck+0x64>
			--ul_timeout) {
		if (ul_timeout == 0) {
  400af8:	68fb      	ldr	r3, [r7, #12]
  400afa:	2b00      	cmp	r3, #0
  400afc:	d101      	bne.n	400b02 <pmc_switch_mck_to_mainck+0x5e>
			return 1;
  400afe:	2301      	movs	r3, #1
  400b00:	e009      	b.n	400b16 <pmc_switch_mck_to_mainck+0x72>
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
  400b02:	68fb      	ldr	r3, [r7, #12]
  400b04:	3b01      	subs	r3, #1
  400b06:	60fb      	str	r3, [r7, #12]
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400b08:	4b06      	ldr	r3, [pc, #24]	; (400b24 <pmc_switch_mck_to_mainck+0x80>)
  400b0a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400b0c:	f003 0308 	and.w	r3, r3, #8
  400b10:	2b00      	cmp	r3, #0
  400b12:	d0f1      	beq.n	400af8 <pmc_switch_mck_to_mainck+0x54>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
  400b14:	2300      	movs	r3, #0
}
  400b16:	4618      	mov	r0, r3
  400b18:	3714      	adds	r7, #20
  400b1a:	46bd      	mov	sp, r7
  400b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
  400b20:	4770      	bx	lr
  400b22:	bf00      	nop
  400b24:	400e0600 	.word	0x400e0600

00400b28 <pmc_switch_sclk_to_32kxtal>:
 *       VDDIO power supply.
 *
 * \param ul_bypass 0 for Xtal, 1 for bypass.
 */
void pmc_switch_sclk_to_32kxtal(uint32_t ul_bypass)
{
  400b28:	b480      	push	{r7}
  400b2a:	b083      	sub	sp, #12
  400b2c:	af00      	add	r7, sp, #0
  400b2e:	6078      	str	r0, [r7, #4]
	/* Set Bypass mode if required */
	if (ul_bypass == 1) {
  400b30:	687b      	ldr	r3, [r7, #4]
  400b32:	2b01      	cmp	r3, #1
  400b34:	d105      	bne.n	400b42 <pmc_switch_sclk_to_32kxtal+0x1a>
		SUPC->SUPC_MR |= SUPC_MR_KEY_PASSWD |
  400b36:	4907      	ldr	r1, [pc, #28]	; (400b54 <pmc_switch_sclk_to_32kxtal+0x2c>)
  400b38:	4b06      	ldr	r3, [pc, #24]	; (400b54 <pmc_switch_sclk_to_32kxtal+0x2c>)
  400b3a:	689a      	ldr	r2, [r3, #8]
  400b3c:	4b06      	ldr	r3, [pc, #24]	; (400b58 <pmc_switch_sclk_to_32kxtal+0x30>)
  400b3e:	4313      	orrs	r3, r2
  400b40:	608b      	str	r3, [r1, #8]
			SUPC_MR_OSCBYPASS;
	}

	SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_XTALSEL;
  400b42:	4b04      	ldr	r3, [pc, #16]	; (400b54 <pmc_switch_sclk_to_32kxtal+0x2c>)
  400b44:	4a05      	ldr	r2, [pc, #20]	; (400b5c <pmc_switch_sclk_to_32kxtal+0x34>)
  400b46:	601a      	str	r2, [r3, #0]
}
  400b48:	370c      	adds	r7, #12
  400b4a:	46bd      	mov	sp, r7
  400b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
  400b50:	4770      	bx	lr
  400b52:	bf00      	nop
  400b54:	400e1810 	.word	0x400e1810
  400b58:	a5100000 	.word	0xa5100000
  400b5c:	a5000008 	.word	0xa5000008

00400b60 <pmc_osc_is_ready_32kxtal>:
 *
 * \retval 1 External 32k Xtal is ready.
 * \retval 0 External 32k Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_32kxtal(void)
{
  400b60:	b480      	push	{r7}
  400b62:	af00      	add	r7, sp, #0
	return ((SUPC->SUPC_SR & SUPC_SR_OSCSEL)
  400b64:	4b09      	ldr	r3, [pc, #36]	; (400b8c <pmc_osc_is_ready_32kxtal+0x2c>)
  400b66:	695b      	ldr	r3, [r3, #20]
  400b68:	f003 0380 	and.w	r3, r3, #128	; 0x80
			&& (PMC->PMC_SR & PMC_SR_OSCSELS));
  400b6c:	2b00      	cmp	r3, #0
  400b6e:	d007      	beq.n	400b80 <pmc_osc_is_ready_32kxtal+0x20>
  400b70:	4b07      	ldr	r3, [pc, #28]	; (400b90 <pmc_osc_is_ready_32kxtal+0x30>)
  400b72:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400b74:	f003 0380 	and.w	r3, r3, #128	; 0x80
  400b78:	2b00      	cmp	r3, #0
  400b7a:	d001      	beq.n	400b80 <pmc_osc_is_ready_32kxtal+0x20>
  400b7c:	2301      	movs	r3, #1
  400b7e:	e000      	b.n	400b82 <pmc_osc_is_ready_32kxtal+0x22>
  400b80:	2300      	movs	r3, #0
}
  400b82:	4618      	mov	r0, r3
  400b84:	46bd      	mov	sp, r7
  400b86:	f85d 7b04 	ldr.w	r7, [sp], #4
  400b8a:	4770      	bx	lr
  400b8c:	400e1810 	.word	0x400e1810
  400b90:	400e0600 	.word	0x400e0600

00400b94 <pmc_switch_mainck_to_fastrc>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 * \retval 2 Invalid frequency.
 */
void pmc_switch_mainck_to_fastrc(uint32_t ul_moscrcf)
{
  400b94:	b480      	push	{r7}
  400b96:	b083      	sub	sp, #12
  400b98:	af00      	add	r7, sp, #0
  400b9a:	6078      	str	r0, [r7, #4]
	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	PMC->CKGR_MOR |= (CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCRCEN);
  400b9c:	4915      	ldr	r1, [pc, #84]	; (400bf4 <pmc_switch_mainck_to_fastrc+0x60>)
  400b9e:	4b15      	ldr	r3, [pc, #84]	; (400bf4 <pmc_switch_mainck_to_fastrc+0x60>)
  400ba0:	6a1a      	ldr	r2, [r3, #32]
  400ba2:	4b15      	ldr	r3, [pc, #84]	; (400bf8 <pmc_switch_mainck_to_fastrc+0x64>)
  400ba4:	4313      	orrs	r3, r2
  400ba6:	620b      	str	r3, [r1, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  400ba8:	bf00      	nop
  400baa:	4b12      	ldr	r3, [pc, #72]	; (400bf4 <pmc_switch_mainck_to_fastrc+0x60>)
  400bac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400bae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  400bb2:	2b00      	cmp	r3, #0
  400bb4:	d0f9      	beq.n	400baa <pmc_switch_mainck_to_fastrc+0x16>

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  400bb6:	490f      	ldr	r1, [pc, #60]	; (400bf4 <pmc_switch_mainck_to_fastrc+0x60>)
  400bb8:	4b0e      	ldr	r3, [pc, #56]	; (400bf4 <pmc_switch_mainck_to_fastrc+0x60>)
  400bba:	6a1a      	ldr	r2, [r3, #32]
  400bbc:	4b0f      	ldr	r3, [pc, #60]	; (400bfc <pmc_switch_mainck_to_fastrc+0x68>)
  400bbe:	4013      	ands	r3, r2
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;
  400bc0:	687a      	ldr	r2, [r7, #4]
  400bc2:	4313      	orrs	r3, r2
  400bc4:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  400bc8:	620b      	str	r3, [r1, #32]
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  400bca:	bf00      	nop
  400bcc:	4b09      	ldr	r3, [pc, #36]	; (400bf4 <pmc_switch_mainck_to_fastrc+0x60>)
  400bce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400bd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  400bd4:	2b00      	cmp	r3, #0
  400bd6:	d0f9      	beq.n	400bcc <pmc_switch_mainck_to_fastrc+0x38>

	/* Switch to Fast RC */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
  400bd8:	4906      	ldr	r1, [pc, #24]	; (400bf4 <pmc_switch_mainck_to_fastrc+0x60>)
  400bda:	4b06      	ldr	r3, [pc, #24]	; (400bf4 <pmc_switch_mainck_to_fastrc+0x60>)
  400bdc:	6a1a      	ldr	r2, [r3, #32]
  400bde:	4b08      	ldr	r3, [pc, #32]	; (400c00 <pmc_switch_mainck_to_fastrc+0x6c>)
  400be0:	4013      	ands	r3, r2
  400be2:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  400be6:	620b      	str	r3, [r1, #32]
			CKGR_MOR_KEY_PASSWD;
}
  400be8:	370c      	adds	r7, #12
  400bea:	46bd      	mov	sp, r7
  400bec:	f85d 7b04 	ldr.w	r7, [sp], #4
  400bf0:	4770      	bx	lr
  400bf2:	bf00      	nop
  400bf4:	400e0600 	.word	0x400e0600
  400bf8:	00370008 	.word	0x00370008
  400bfc:	ffc8ff8f 	.word	0xffc8ff8f
  400c00:	fec8ffff 	.word	0xfec8ffff

00400c04 <pmc_switch_mainck_to_xtal>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
  400c04:	b480      	push	{r7}
  400c06:	b083      	sub	sp, #12
  400c08:	af00      	add	r7, sp, #0
  400c0a:	6078      	str	r0, [r7, #4]
  400c0c:	6039      	str	r1, [r7, #0]
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  400c0e:	687b      	ldr	r3, [r7, #4]
  400c10:	2b00      	cmp	r3, #0
  400c12:	d008      	beq.n	400c26 <pmc_switch_mainck_to_xtal+0x22>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400c14:	4913      	ldr	r1, [pc, #76]	; (400c64 <pmc_switch_mainck_to_xtal+0x60>)
  400c16:	4b13      	ldr	r3, [pc, #76]	; (400c64 <pmc_switch_mainck_to_xtal+0x60>)
  400c18:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  400c1a:	4a13      	ldr	r2, [pc, #76]	; (400c68 <pmc_switch_mainck_to_xtal+0x64>)
  400c1c:	401a      	ands	r2, r3
  400c1e:	4b13      	ldr	r3, [pc, #76]	; (400c6c <pmc_switch_mainck_to_xtal+0x68>)
  400c20:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400c22:	620b      	str	r3, [r1, #32]
  400c24:	e018      	b.n	400c58 <pmc_switch_mainck_to_xtal+0x54>
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400c26:	490f      	ldr	r1, [pc, #60]	; (400c64 <pmc_switch_mainck_to_xtal+0x60>)
  400c28:	4b0e      	ldr	r3, [pc, #56]	; (400c64 <pmc_switch_mainck_to_xtal+0x60>)
  400c2a:	6a1a      	ldr	r2, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  400c2c:	4b10      	ldr	r3, [pc, #64]	; (400c70 <pmc_switch_mainck_to_xtal+0x6c>)
  400c2e:	4013      	ands	r3, r2
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  400c30:	683a      	ldr	r2, [r7, #0]
  400c32:	0212      	lsls	r2, r2, #8
  400c34:	b292      	uxth	r2, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  400c36:	431a      	orrs	r2, r3
  400c38:	4b0e      	ldr	r3, [pc, #56]	; (400c74 <pmc_switch_mainck_to_xtal+0x70>)
  400c3a:	4313      	orrs	r3, r2
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400c3c:	620b      	str	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  400c3e:	bf00      	nop
  400c40:	4b08      	ldr	r3, [pc, #32]	; (400c64 <pmc_switch_mainck_to_xtal+0x60>)
  400c42:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400c44:	f003 0301 	and.w	r3, r3, #1
  400c48:	2b00      	cmp	r3, #0
  400c4a:	d0f9      	beq.n	400c40 <pmc_switch_mainck_to_xtal+0x3c>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  400c4c:	4905      	ldr	r1, [pc, #20]	; (400c64 <pmc_switch_mainck_to_xtal+0x60>)
  400c4e:	4b05      	ldr	r3, [pc, #20]	; (400c64 <pmc_switch_mainck_to_xtal+0x60>)
  400c50:	6a1a      	ldr	r2, [r3, #32]
  400c52:	4b09      	ldr	r3, [pc, #36]	; (400c78 <pmc_switch_mainck_to_xtal+0x74>)
  400c54:	4313      	orrs	r3, r2
  400c56:	620b      	str	r3, [r1, #32]
	}
}
  400c58:	370c      	adds	r7, #12
  400c5a:	46bd      	mov	sp, r7
  400c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
  400c60:	4770      	bx	lr
  400c62:	bf00      	nop
  400c64:	400e0600 	.word	0x400e0600
  400c68:	fec8fffc 	.word	0xfec8fffc
  400c6c:	01370002 	.word	0x01370002
  400c70:	ffc8fffc 	.word	0xffc8fffc
  400c74:	00370001 	.word	0x00370001
  400c78:	01370000 	.word	0x01370000

00400c7c <pmc_osc_is_ready_mainck>:
 *
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
  400c7c:	b480      	push	{r7}
  400c7e:	af00      	add	r7, sp, #0
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  400c80:	4b04      	ldr	r3, [pc, #16]	; (400c94 <pmc_osc_is_ready_mainck+0x18>)
  400c82:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400c84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
  400c88:	4618      	mov	r0, r3
  400c8a:	46bd      	mov	sp, r7
  400c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
  400c90:	4770      	bx	lr
  400c92:	bf00      	nop
  400c94:	400e0600 	.word	0x400e0600

00400c98 <pmc_enable_periph_clk>:
 *
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
  400c98:	b480      	push	{r7}
  400c9a:	b083      	sub	sp, #12
  400c9c:	af00      	add	r7, sp, #0
  400c9e:	6078      	str	r0, [r7, #4]
	if (ul_id > MAX_PERIPH_ID) {
  400ca0:	687b      	ldr	r3, [r7, #4]
  400ca2:	2b3f      	cmp	r3, #63	; 0x3f
  400ca4:	d901      	bls.n	400caa <pmc_enable_periph_clk+0x12>
		return 1;
  400ca6:	2301      	movs	r3, #1
  400ca8:	e02f      	b.n	400d0a <pmc_enable_periph_clk+0x72>
	}

	if (ul_id < 32) {
  400caa:	687b      	ldr	r3, [r7, #4]
  400cac:	2b1f      	cmp	r3, #31
  400cae:	d813      	bhi.n	400cd8 <pmc_enable_periph_clk+0x40>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  400cb0:	4b19      	ldr	r3, [pc, #100]	; (400d18 <pmc_enable_periph_clk+0x80>)
  400cb2:	699a      	ldr	r2, [r3, #24]
  400cb4:	687b      	ldr	r3, [r7, #4]
  400cb6:	2101      	movs	r1, #1
  400cb8:	fa01 f303 	lsl.w	r3, r1, r3
  400cbc:	401a      	ands	r2, r3
  400cbe:	687b      	ldr	r3, [r7, #4]
  400cc0:	2101      	movs	r1, #1
  400cc2:	fa01 f303 	lsl.w	r3, r1, r3
  400cc6:	429a      	cmp	r2, r3
  400cc8:	d01e      	beq.n	400d08 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER0 = 1 << ul_id;
  400cca:	4a13      	ldr	r2, [pc, #76]	; (400d18 <pmc_enable_periph_clk+0x80>)
  400ccc:	687b      	ldr	r3, [r7, #4]
  400cce:	2101      	movs	r1, #1
  400cd0:	fa01 f303 	lsl.w	r3, r1, r3
  400cd4:	6113      	str	r3, [r2, #16]
  400cd6:	e017      	b.n	400d08 <pmc_enable_periph_clk+0x70>
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
  400cd8:	687b      	ldr	r3, [r7, #4]
  400cda:	3b20      	subs	r3, #32
  400cdc:	607b      	str	r3, [r7, #4]
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  400cde:	4b0e      	ldr	r3, [pc, #56]	; (400d18 <pmc_enable_periph_clk+0x80>)
  400ce0:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  400ce4:	687b      	ldr	r3, [r7, #4]
  400ce6:	2101      	movs	r1, #1
  400ce8:	fa01 f303 	lsl.w	r3, r1, r3
  400cec:	401a      	ands	r2, r3
  400cee:	687b      	ldr	r3, [r7, #4]
  400cf0:	2101      	movs	r1, #1
  400cf2:	fa01 f303 	lsl.w	r3, r1, r3
  400cf6:	429a      	cmp	r2, r3
  400cf8:	d006      	beq.n	400d08 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER1 = 1 << ul_id;
  400cfa:	4a07      	ldr	r2, [pc, #28]	; (400d18 <pmc_enable_periph_clk+0x80>)
  400cfc:	687b      	ldr	r3, [r7, #4]
  400cfe:	2101      	movs	r1, #1
  400d00:	fa01 f303 	lsl.w	r3, r1, r3
  400d04:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
		}
#endif
	}

	return 0;
  400d08:	2300      	movs	r3, #0
}
  400d0a:	4618      	mov	r0, r3
  400d0c:	370c      	adds	r7, #12
  400d0e:	46bd      	mov	sp, r7
  400d10:	f85d 7b04 	ldr.w	r7, [sp], #4
  400d14:	4770      	bx	lr
  400d16:	bf00      	nop
  400d18:	400e0600 	.word	0x400e0600

00400d1c <twihs_enable_master_mode>:
 * \brief Enable TWIHS master mode.
 *
 * \param p_twihs Pointer to a TWIHS instance.
 */
void twihs_enable_master_mode(Twihs *p_twihs)
{
  400d1c:	b480      	push	{r7}
  400d1e:	b083      	sub	sp, #12
  400d20:	af00      	add	r7, sp, #0
  400d22:	6078      	str	r0, [r7, #4]
	/* Set Master Disable bit and Slave Disable bit */
	p_twihs->TWIHS_CR = TWIHS_CR_MSDIS;
  400d24:	687b      	ldr	r3, [r7, #4]
  400d26:	2208      	movs	r2, #8
  400d28:	601a      	str	r2, [r3, #0]
	p_twihs->TWIHS_CR = TWIHS_CR_SVDIS;
  400d2a:	687b      	ldr	r3, [r7, #4]
  400d2c:	2220      	movs	r2, #32
  400d2e:	601a      	str	r2, [r3, #0]

	/* Set Master Enable bit */
	p_twihs->TWIHS_CR = TWIHS_CR_MSEN;
  400d30:	687b      	ldr	r3, [r7, #4]
  400d32:	2204      	movs	r2, #4
  400d34:	601a      	str	r2, [r3, #0]
}
  400d36:	370c      	adds	r7, #12
  400d38:	46bd      	mov	sp, r7
  400d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
  400d3e:	4770      	bx	lr

00400d40 <twihs_master_init>:
 * \param p_opt Options for initializing the TWIHS module (see \ref twihs_options_t).
 *
 * \return TWIHS_SUCCESS if initialization is complete, error code otherwise.
 */
uint32_t twihs_master_init(Twihs *p_twihs, const twihs_options_t *p_opt)
{
  400d40:	b580      	push	{r7, lr}
  400d42:	b084      	sub	sp, #16
  400d44:	af00      	add	r7, sp, #0
  400d46:	6078      	str	r0, [r7, #4]
  400d48:	6039      	str	r1, [r7, #0]
	uint32_t status = TWIHS_SUCCESS;
  400d4a:	2300      	movs	r3, #0
  400d4c:	60fb      	str	r3, [r7, #12]

	/* Disable TWIHS interrupts */
	p_twihs->TWIHS_IDR = ~0UL;
  400d4e:	687b      	ldr	r3, [r7, #4]
  400d50:	f04f 32ff 	mov.w	r2, #4294967295
  400d54:	629a      	str	r2, [r3, #40]	; 0x28

	/* Dummy read in status register */
	p_twihs->TWIHS_SR;
  400d56:	687b      	ldr	r3, [r7, #4]
  400d58:	6a1b      	ldr	r3, [r3, #32]

	/* Reset TWIHS peripheral */
	twihs_reset(p_twihs);
  400d5a:	6878      	ldr	r0, [r7, #4]
  400d5c:	4b0b      	ldr	r3, [pc, #44]	; (400d8c <twihs_master_init+0x4c>)
  400d5e:	4798      	blx	r3

	twihs_enable_master_mode(p_twihs);
  400d60:	6878      	ldr	r0, [r7, #4]
  400d62:	4b0b      	ldr	r3, [pc, #44]	; (400d90 <twihs_master_init+0x50>)
  400d64:	4798      	blx	r3

	/* Select the speed */
	if (twihs_set_speed(p_twihs, p_opt->speed, p_opt->master_clk) == FAIL) {
  400d66:	683b      	ldr	r3, [r7, #0]
  400d68:	685a      	ldr	r2, [r3, #4]
  400d6a:	683b      	ldr	r3, [r7, #0]
  400d6c:	681b      	ldr	r3, [r3, #0]
  400d6e:	6878      	ldr	r0, [r7, #4]
  400d70:	4611      	mov	r1, r2
  400d72:	461a      	mov	r2, r3
  400d74:	4b07      	ldr	r3, [pc, #28]	; (400d94 <twihs_master_init+0x54>)
  400d76:	4798      	blx	r3
  400d78:	4603      	mov	r3, r0
  400d7a:	2b01      	cmp	r3, #1
  400d7c:	d101      	bne.n	400d82 <twihs_master_init+0x42>
		/* The desired speed setting is rejected */
		status = TWIHS_INVALID_ARGUMENT;
  400d7e:	2301      	movs	r3, #1
  400d80:	60fb      	str	r3, [r7, #12]
	}

	return status;
  400d82:	68fb      	ldr	r3, [r7, #12]
}
  400d84:	4618      	mov	r0, r3
  400d86:	3710      	adds	r7, #16
  400d88:	46bd      	mov	sp, r7
  400d8a:	bd80      	pop	{r7, pc}
  400d8c:	00401029 	.word	0x00401029
  400d90:	00400d1d 	.word	0x00400d1d
  400d94:	00400d99 	.word	0x00400d99

00400d98 <twihs_set_speed>:
 *
 * \retval PASS New speed setting is accepted.
 * \retval FAIL New speed setting is rejected.
 */
uint32_t twihs_set_speed(Twihs *p_twihs, uint32_t ul_speed, uint32_t ul_mck)
{
  400d98:	b480      	push	{r7}
  400d9a:	b087      	sub	sp, #28
  400d9c:	af00      	add	r7, sp, #0
  400d9e:	60f8      	str	r0, [r7, #12]
  400da0:	60b9      	str	r1, [r7, #8]
  400da2:	607a      	str	r2, [r7, #4]
	uint32_t ckdiv = 0;
  400da4:	2300      	movs	r3, #0
  400da6:	617b      	str	r3, [r7, #20]
	uint32_t c_lh_div;

	/* High-Speed can be only used in slave mode, 400k is the max speed allowed for master */
	if (ul_speed > I2C_FAST_MODE_SPEED) {
  400da8:	68bb      	ldr	r3, [r7, #8]
  400daa:	4a16      	ldr	r2, [pc, #88]	; (400e04 <twihs_set_speed+0x6c>)
  400dac:	4293      	cmp	r3, r2
  400dae:	d901      	bls.n	400db4 <twihs_set_speed+0x1c>
		return FAIL;
  400db0:	2301      	movs	r3, #1
  400db2:	e021      	b.n	400df8 <twihs_set_speed+0x60>
	}

	c_lh_div = ul_mck / (ul_speed * TWIHS_CLK_DIVIDER) - TWIHS_CLK_CALC_ARGU;
  400db4:	68bb      	ldr	r3, [r7, #8]
  400db6:	005b      	lsls	r3, r3, #1
  400db8:	687a      	ldr	r2, [r7, #4]
  400dba:	fbb2 f3f3 	udiv	r3, r2, r3
  400dbe:	3b04      	subs	r3, #4
  400dc0:	613b      	str	r3, [r7, #16]

	/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
	while ((c_lh_div > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  400dc2:	e005      	b.n	400dd0 <twihs_set_speed+0x38>
		/* Increase clock divider */
		ckdiv++;
  400dc4:	697b      	ldr	r3, [r7, #20]
  400dc6:	3301      	adds	r3, #1
  400dc8:	617b      	str	r3, [r7, #20]
		/* Divide cldiv value */
		c_lh_div /= TWIHS_CLK_DIVIDER;
  400dca:	693b      	ldr	r3, [r7, #16]
  400dcc:	085b      	lsrs	r3, r3, #1
  400dce:	613b      	str	r3, [r7, #16]
	}

	c_lh_div = ul_mck / (ul_speed * TWIHS_CLK_DIVIDER) - TWIHS_CLK_CALC_ARGU;

	/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
	while ((c_lh_div > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  400dd0:	693b      	ldr	r3, [r7, #16]
  400dd2:	2bff      	cmp	r3, #255	; 0xff
  400dd4:	d902      	bls.n	400ddc <twihs_set_speed+0x44>
  400dd6:	697b      	ldr	r3, [r7, #20]
  400dd8:	2b06      	cmp	r3, #6
  400dda:	d9f3      	bls.n	400dc4 <twihs_set_speed+0x2c>
		c_lh_div /= TWIHS_CLK_DIVIDER;
	}

	/* set clock waveform generator register */
	p_twihs->TWIHS_CWGR =
			TWIHS_CWGR_CLDIV(c_lh_div) | TWIHS_CWGR_CHDIV(c_lh_div) |
  400ddc:	693b      	ldr	r3, [r7, #16]
  400dde:	b2da      	uxtb	r2, r3
  400de0:	693b      	ldr	r3, [r7, #16]
  400de2:	021b      	lsls	r3, r3, #8
  400de4:	b29b      	uxth	r3, r3
  400de6:	431a      	orrs	r2, r3
			TWIHS_CWGR_CKDIV(ckdiv);
  400de8:	697b      	ldr	r3, [r7, #20]
  400dea:	041b      	lsls	r3, r3, #16
  400dec:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
		c_lh_div /= TWIHS_CLK_DIVIDER;
	}

	/* set clock waveform generator register */
	p_twihs->TWIHS_CWGR =
			TWIHS_CWGR_CLDIV(c_lh_div) | TWIHS_CWGR_CHDIV(c_lh_div) |
  400df0:	431a      	orrs	r2, r3
		/* Divide cldiv value */
		c_lh_div /= TWIHS_CLK_DIVIDER;
	}

	/* set clock waveform generator register */
	p_twihs->TWIHS_CWGR =
  400df2:	68fb      	ldr	r3, [r7, #12]
  400df4:	611a      	str	r2, [r3, #16]
			TWIHS_CWGR_CLDIV(c_lh_div) | TWIHS_CWGR_CHDIV(c_lh_div) |
			TWIHS_CWGR_CKDIV(ckdiv);

	return PASS;
  400df6:	2300      	movs	r3, #0
}
  400df8:	4618      	mov	r0, r3
  400dfa:	371c      	adds	r7, #28
  400dfc:	46bd      	mov	sp, r7
  400dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
  400e02:	4770      	bx	lr
  400e04:	00061a80 	.word	0x00061a80

00400e08 <twihs_mk_addr>:
 * which byte is the MSB to start with.
 *
 * Please see the device datasheet for details on this.
 */
static uint32_t twihs_mk_addr(const uint8_t *addr, int len)
{
  400e08:	b480      	push	{r7}
  400e0a:	b085      	sub	sp, #20
  400e0c:	af00      	add	r7, sp, #0
  400e0e:	6078      	str	r0, [r7, #4]
  400e10:	6039      	str	r1, [r7, #0]
	uint32_t val;

	if (len == 0)
  400e12:	683b      	ldr	r3, [r7, #0]
  400e14:	2b00      	cmp	r3, #0
  400e16:	d101      	bne.n	400e1c <twihs_mk_addr+0x14>
		return 0;
  400e18:	2300      	movs	r3, #0
  400e1a:	e01d      	b.n	400e58 <twihs_mk_addr+0x50>

	val = addr[0];
  400e1c:	687b      	ldr	r3, [r7, #4]
  400e1e:	781b      	ldrb	r3, [r3, #0]
  400e20:	60fb      	str	r3, [r7, #12]
	if (len > 1) {
  400e22:	683b      	ldr	r3, [r7, #0]
  400e24:	2b01      	cmp	r3, #1
  400e26:	dd09      	ble.n	400e3c <twihs_mk_addr+0x34>
		val <<= 8;
  400e28:	68fb      	ldr	r3, [r7, #12]
  400e2a:	021b      	lsls	r3, r3, #8
  400e2c:	60fb      	str	r3, [r7, #12]
		val |= addr[1];
  400e2e:	687b      	ldr	r3, [r7, #4]
  400e30:	3301      	adds	r3, #1
  400e32:	781b      	ldrb	r3, [r3, #0]
  400e34:	461a      	mov	r2, r3
  400e36:	68fb      	ldr	r3, [r7, #12]
  400e38:	4313      	orrs	r3, r2
  400e3a:	60fb      	str	r3, [r7, #12]
	}
	if (len > 2) {
  400e3c:	683b      	ldr	r3, [r7, #0]
  400e3e:	2b02      	cmp	r3, #2
  400e40:	dd09      	ble.n	400e56 <twihs_mk_addr+0x4e>
		val <<= 8;
  400e42:	68fb      	ldr	r3, [r7, #12]
  400e44:	021b      	lsls	r3, r3, #8
  400e46:	60fb      	str	r3, [r7, #12]
		val |= addr[2];
  400e48:	687b      	ldr	r3, [r7, #4]
  400e4a:	3302      	adds	r3, #2
  400e4c:	781b      	ldrb	r3, [r3, #0]
  400e4e:	461a      	mov	r2, r3
  400e50:	68fb      	ldr	r3, [r7, #12]
  400e52:	4313      	orrs	r3, r2
  400e54:	60fb      	str	r3, [r7, #12]
	}
	return val;
  400e56:	68fb      	ldr	r3, [r7, #12]
}
  400e58:	4618      	mov	r0, r3
  400e5a:	3714      	adds	r7, #20
  400e5c:	46bd      	mov	sp, r7
  400e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
  400e62:	4770      	bx	lr

00400e64 <twihs_master_read>:
 * \param p_packet Packet information and data (see \ref twihs_packet_t).
 *
 * \return TWIHS_SUCCESS if all bytes were read, error code otherwise.
 */
uint32_t twihs_master_read(Twihs *p_twihs, twihs_packet_t *p_packet)
{
  400e64:	b580      	push	{r7, lr}
  400e66:	b086      	sub	sp, #24
  400e68:	af00      	add	r7, sp, #0
  400e6a:	6078      	str	r0, [r7, #4]
  400e6c:	6039      	str	r1, [r7, #0]
	uint32_t status, cnt = p_packet->length;
  400e6e:	683b      	ldr	r3, [r7, #0]
  400e70:	68db      	ldr	r3, [r3, #12]
  400e72:	617b      	str	r3, [r7, #20]
	uint8_t *buffer = p_packet->buffer;
  400e74:	683b      	ldr	r3, [r7, #0]
  400e76:	689b      	ldr	r3, [r3, #8]
  400e78:	613b      	str	r3, [r7, #16]
	uint32_t timeout = TWIHS_TIMEOUT;
  400e7a:	f643 2398 	movw	r3, #15000	; 0x3a98
  400e7e:	60fb      	str	r3, [r7, #12]

	/* Check argument */
	if (cnt == 0) {
  400e80:	697b      	ldr	r3, [r7, #20]
  400e82:	2b00      	cmp	r3, #0
  400e84:	d101      	bne.n	400e8a <twihs_master_read+0x26>
		return TWIHS_INVALID_ARGUMENT;
  400e86:	2301      	movs	r3, #1
  400e88:	e059      	b.n	400f3e <twihs_master_read+0xda>
	}

	/* Set read mode, slave address and 3 internal address byte lengths */
	p_twihs->TWIHS_MMR = 0;
  400e8a:	687b      	ldr	r3, [r7, #4]
  400e8c:	2200      	movs	r2, #0
  400e8e:	605a      	str	r2, [r3, #4]
	p_twihs->TWIHS_MMR = TWIHS_MMR_MREAD | TWIHS_MMR_DADR(p_packet->chip) |
  400e90:	683b      	ldr	r3, [r7, #0]
  400e92:	7c1b      	ldrb	r3, [r3, #16]
  400e94:	041b      	lsls	r3, r3, #16
  400e96:	f403 02fe 	and.w	r2, r3, #8323072	; 0x7f0000
			((p_packet->addr_length << TWIHS_MMR_IADRSZ_Pos) &
  400e9a:	683b      	ldr	r3, [r7, #0]
  400e9c:	685b      	ldr	r3, [r3, #4]
  400e9e:	021b      	lsls	r3, r3, #8
  400ea0:	f403 7340 	and.w	r3, r3, #768	; 0x300
		return TWIHS_INVALID_ARGUMENT;
	}

	/* Set read mode, slave address and 3 internal address byte lengths */
	p_twihs->TWIHS_MMR = 0;
	p_twihs->TWIHS_MMR = TWIHS_MMR_MREAD | TWIHS_MMR_DADR(p_packet->chip) |
  400ea4:	4313      	orrs	r3, r2
  400ea6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
  400eaa:	687b      	ldr	r3, [r7, #4]
  400eac:	605a      	str	r2, [r3, #4]
			((p_packet->addr_length << TWIHS_MMR_IADRSZ_Pos) &
			TWIHS_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twihs->TWIHS_IADR = 0;
  400eae:	687b      	ldr	r3, [r7, #4]
  400eb0:	2200      	movs	r2, #0
  400eb2:	60da      	str	r2, [r3, #12]
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);
  400eb4:	683a      	ldr	r2, [r7, #0]
  400eb6:	683b      	ldr	r3, [r7, #0]
  400eb8:	685b      	ldr	r3, [r3, #4]
  400eba:	4610      	mov	r0, r2
  400ebc:	4619      	mov	r1, r3
  400ebe:	4b22      	ldr	r3, [pc, #136]	; (400f48 <twihs_master_read+0xe4>)
  400ec0:	4798      	blx	r3
  400ec2:	4602      	mov	r2, r0
  400ec4:	687b      	ldr	r3, [r7, #4]
  400ec6:	60da      	str	r2, [r3, #12]

	/* Send a START Condition */
	p_twihs->TWIHS_CR = TWIHS_CR_START;
  400ec8:	687b      	ldr	r3, [r7, #4]
  400eca:	2201      	movs	r2, #1
  400ecc:	601a      	str	r2, [r3, #0]

	while (cnt > 0) {
  400ece:	e029      	b.n	400f24 <twihs_master_read+0xc0>
		status = p_twihs->TWIHS_SR;
  400ed0:	687b      	ldr	r3, [r7, #4]
  400ed2:	6a1b      	ldr	r3, [r3, #32]
  400ed4:	60bb      	str	r3, [r7, #8]
		if (status & TWIHS_SR_NACK) {
  400ed6:	68bb      	ldr	r3, [r7, #8]
  400ed8:	f403 7380 	and.w	r3, r3, #256	; 0x100
  400edc:	2b00      	cmp	r3, #0
  400ede:	d001      	beq.n	400ee4 <twihs_master_read+0x80>
			return TWIHS_RECEIVE_NACK;
  400ee0:	2305      	movs	r3, #5
  400ee2:	e02c      	b.n	400f3e <twihs_master_read+0xda>
		}
		if (!timeout--) {
  400ee4:	68fb      	ldr	r3, [r7, #12]
  400ee6:	1e5a      	subs	r2, r3, #1
  400ee8:	60fa      	str	r2, [r7, #12]
  400eea:	2b00      	cmp	r3, #0
  400eec:	d101      	bne.n	400ef2 <twihs_master_read+0x8e>
			return TWIHS_ERROR_TIMEOUT;
  400eee:	2309      	movs	r3, #9
  400ef0:	e025      	b.n	400f3e <twihs_master_read+0xda>
		}
		/* Last byte ? */
		if (cnt == 1) {
  400ef2:	697b      	ldr	r3, [r7, #20]
  400ef4:	2b01      	cmp	r3, #1
  400ef6:	d102      	bne.n	400efe <twihs_master_read+0x9a>
			p_twihs->TWIHS_CR = TWIHS_CR_STOP;
  400ef8:	687b      	ldr	r3, [r7, #4]
  400efa:	2202      	movs	r2, #2
  400efc:	601a      	str	r2, [r3, #0]
		}

		if (!(status & TWIHS_SR_RXRDY)) {
  400efe:	68bb      	ldr	r3, [r7, #8]
  400f00:	f003 0302 	and.w	r3, r3, #2
  400f04:	2b00      	cmp	r3, #0
  400f06:	d100      	bne.n	400f0a <twihs_master_read+0xa6>
			continue;
  400f08:	e00c      	b.n	400f24 <twihs_master_read+0xc0>
		}
		*buffer++ = p_twihs->TWIHS_RHR;
  400f0a:	693b      	ldr	r3, [r7, #16]
  400f0c:	1c5a      	adds	r2, r3, #1
  400f0e:	613a      	str	r2, [r7, #16]
  400f10:	687a      	ldr	r2, [r7, #4]
  400f12:	6b12      	ldr	r2, [r2, #48]	; 0x30
  400f14:	b2d2      	uxtb	r2, r2
  400f16:	701a      	strb	r2, [r3, #0]

		cnt--;
  400f18:	697b      	ldr	r3, [r7, #20]
  400f1a:	3b01      	subs	r3, #1
  400f1c:	617b      	str	r3, [r7, #20]
		timeout = TWIHS_TIMEOUT;
  400f1e:	f643 2398 	movw	r3, #15000	; 0x3a98
  400f22:	60fb      	str	r3, [r7, #12]
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);

	/* Send a START Condition */
	p_twihs->TWIHS_CR = TWIHS_CR_START;

	while (cnt > 0) {
  400f24:	697b      	ldr	r3, [r7, #20]
  400f26:	2b00      	cmp	r3, #0
  400f28:	d1d2      	bne.n	400ed0 <twihs_master_read+0x6c>

		cnt--;
		timeout = TWIHS_TIMEOUT;
	}

	while (!(p_twihs->TWIHS_SR & TWIHS_SR_TXCOMP)) {
  400f2a:	bf00      	nop
  400f2c:	687b      	ldr	r3, [r7, #4]
  400f2e:	6a1b      	ldr	r3, [r3, #32]
  400f30:	f003 0301 	and.w	r3, r3, #1
  400f34:	2b00      	cmp	r3, #0
  400f36:	d0f9      	beq.n	400f2c <twihs_master_read+0xc8>
	}

	p_twihs->TWIHS_SR;
  400f38:	687b      	ldr	r3, [r7, #4]
  400f3a:	6a1b      	ldr	r3, [r3, #32]

	return TWIHS_SUCCESS;
  400f3c:	2300      	movs	r3, #0
}
  400f3e:	4618      	mov	r0, r3
  400f40:	3718      	adds	r7, #24
  400f42:	46bd      	mov	sp, r7
  400f44:	bd80      	pop	{r7, pc}
  400f46:	bf00      	nop
  400f48:	00400e09 	.word	0x00400e09

00400f4c <twihs_master_write>:
 * \param p_packet Packet information and data (see \ref twihs_packet_t).
 *
 * \return TWIHS_SUCCESS if all bytes were written, error code otherwise.
 */
uint32_t twihs_master_write(Twihs *p_twihs, twihs_packet_t *p_packet)
{
  400f4c:	b580      	push	{r7, lr}
  400f4e:	b086      	sub	sp, #24
  400f50:	af00      	add	r7, sp, #0
  400f52:	6078      	str	r0, [r7, #4]
  400f54:	6039      	str	r1, [r7, #0]
	uint32_t status, cnt = p_packet->length;
  400f56:	683b      	ldr	r3, [r7, #0]
  400f58:	68db      	ldr	r3, [r3, #12]
  400f5a:	617b      	str	r3, [r7, #20]
	uint8_t *buffer = p_packet->buffer;
  400f5c:	683b      	ldr	r3, [r7, #0]
  400f5e:	689b      	ldr	r3, [r3, #8]
  400f60:	613b      	str	r3, [r7, #16]

	/* Check argument */
	if (cnt == 0) {
  400f62:	697b      	ldr	r3, [r7, #20]
  400f64:	2b00      	cmp	r3, #0
  400f66:	d101      	bne.n	400f6c <twihs_master_write+0x20>
		return TWIHS_INVALID_ARGUMENT;
  400f68:	2301      	movs	r3, #1
  400f6a:	e056      	b.n	40101a <twihs_master_write+0xce>
	}

	/* Set write mode, slave address and 3 internal address byte lengths */
	p_twihs->TWIHS_MMR = 0;
  400f6c:	687b      	ldr	r3, [r7, #4]
  400f6e:	2200      	movs	r2, #0
  400f70:	605a      	str	r2, [r3, #4]
	p_twihs->TWIHS_MMR = TWIHS_MMR_DADR(p_packet->chip) |
  400f72:	683b      	ldr	r3, [r7, #0]
  400f74:	7c1b      	ldrb	r3, [r3, #16]
  400f76:	041b      	lsls	r3, r3, #16
  400f78:	f403 02fe 	and.w	r2, r3, #8323072	; 0x7f0000
			((p_packet->addr_length << TWIHS_MMR_IADRSZ_Pos) &
  400f7c:	683b      	ldr	r3, [r7, #0]
  400f7e:	685b      	ldr	r3, [r3, #4]
  400f80:	021b      	lsls	r3, r3, #8
  400f82:	f403 7340 	and.w	r3, r3, #768	; 0x300
		return TWIHS_INVALID_ARGUMENT;
	}

	/* Set write mode, slave address and 3 internal address byte lengths */
	p_twihs->TWIHS_MMR = 0;
	p_twihs->TWIHS_MMR = TWIHS_MMR_DADR(p_packet->chip) |
  400f86:	431a      	orrs	r2, r3
  400f88:	687b      	ldr	r3, [r7, #4]
  400f8a:	605a      	str	r2, [r3, #4]
			((p_packet->addr_length << TWIHS_MMR_IADRSZ_Pos) &
			TWIHS_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twihs->TWIHS_IADR = 0;
  400f8c:	687b      	ldr	r3, [r7, #4]
  400f8e:	2200      	movs	r2, #0
  400f90:	60da      	str	r2, [r3, #12]
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);
  400f92:	683a      	ldr	r2, [r7, #0]
  400f94:	683b      	ldr	r3, [r7, #0]
  400f96:	685b      	ldr	r3, [r3, #4]
  400f98:	4610      	mov	r0, r2
  400f9a:	4619      	mov	r1, r3
  400f9c:	4b21      	ldr	r3, [pc, #132]	; (401024 <twihs_master_write+0xd8>)
  400f9e:	4798      	blx	r3
  400fa0:	4602      	mov	r2, r0
  400fa2:	687b      	ldr	r3, [r7, #4]
  400fa4:	60da      	str	r2, [r3, #12]

	/* Send all bytes */
	while (cnt > 0) {
  400fa6:	e019      	b.n	400fdc <twihs_master_write+0x90>
		status = p_twihs->TWIHS_SR;
  400fa8:	687b      	ldr	r3, [r7, #4]
  400faa:	6a1b      	ldr	r3, [r3, #32]
  400fac:	60fb      	str	r3, [r7, #12]
		if (status & TWIHS_SR_NACK) {
  400fae:	68fb      	ldr	r3, [r7, #12]
  400fb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
  400fb4:	2b00      	cmp	r3, #0
  400fb6:	d001      	beq.n	400fbc <twihs_master_write+0x70>
			return TWIHS_RECEIVE_NACK;
  400fb8:	2305      	movs	r3, #5
  400fba:	e02e      	b.n	40101a <twihs_master_write+0xce>
		}

		if (!(status & TWIHS_SR_TXRDY)) {
  400fbc:	68fb      	ldr	r3, [r7, #12]
  400fbe:	f003 0304 	and.w	r3, r3, #4
  400fc2:	2b00      	cmp	r3, #0
  400fc4:	d100      	bne.n	400fc8 <twihs_master_write+0x7c>
			continue;
  400fc6:	e009      	b.n	400fdc <twihs_master_write+0x90>
		}
		p_twihs->TWIHS_THR = *buffer++;
  400fc8:	693b      	ldr	r3, [r7, #16]
  400fca:	1c5a      	adds	r2, r3, #1
  400fcc:	613a      	str	r2, [r7, #16]
  400fce:	781b      	ldrb	r3, [r3, #0]
  400fd0:	461a      	mov	r2, r3
  400fd2:	687b      	ldr	r3, [r7, #4]
  400fd4:	635a      	str	r2, [r3, #52]	; 0x34

		cnt--;
  400fd6:	697b      	ldr	r3, [r7, #20]
  400fd8:	3b01      	subs	r3, #1
  400fda:	617b      	str	r3, [r7, #20]
	/* Set internal address for remote chip */
	p_twihs->TWIHS_IADR = 0;
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);

	/* Send all bytes */
	while (cnt > 0) {
  400fdc:	697b      	ldr	r3, [r7, #20]
  400fde:	2b00      	cmp	r3, #0
  400fe0:	d1e2      	bne.n	400fa8 <twihs_master_write+0x5c>

		cnt--;
	}

	while (1) {
		status = p_twihs->TWIHS_SR;
  400fe2:	687b      	ldr	r3, [r7, #4]
  400fe4:	6a1b      	ldr	r3, [r3, #32]
  400fe6:	60fb      	str	r3, [r7, #12]
		if (status & TWIHS_SR_NACK) {
  400fe8:	68fb      	ldr	r3, [r7, #12]
  400fea:	f403 7380 	and.w	r3, r3, #256	; 0x100
  400fee:	2b00      	cmp	r3, #0
  400ff0:	d001      	beq.n	400ff6 <twihs_master_write+0xaa>
			return TWIHS_RECEIVE_NACK;
  400ff2:	2305      	movs	r3, #5
  400ff4:	e011      	b.n	40101a <twihs_master_write+0xce>
		}

		if (status & TWIHS_SR_TXRDY) {
  400ff6:	68fb      	ldr	r3, [r7, #12]
  400ff8:	f003 0304 	and.w	r3, r3, #4
  400ffc:	2b00      	cmp	r3, #0
  400ffe:	d004      	beq.n	40100a <twihs_master_write+0xbe>
			break;
  401000:	bf00      	nop
		}
	}

	p_twihs->TWIHS_CR = TWIHS_CR_STOP;
  401002:	687b      	ldr	r3, [r7, #4]
  401004:	2202      	movs	r2, #2
  401006:	601a      	str	r2, [r3, #0]

	while (!(p_twihs->TWIHS_SR & TWIHS_SR_TXCOMP)) {
  401008:	e000      	b.n	40100c <twihs_master_write+0xc0>
		}

		if (status & TWIHS_SR_TXRDY) {
			break;
		}
	}
  40100a:	e7ea      	b.n	400fe2 <twihs_master_write+0x96>

	p_twihs->TWIHS_CR = TWIHS_CR_STOP;

	while (!(p_twihs->TWIHS_SR & TWIHS_SR_TXCOMP)) {
  40100c:	687b      	ldr	r3, [r7, #4]
  40100e:	6a1b      	ldr	r3, [r3, #32]
  401010:	f003 0301 	and.w	r3, r3, #1
  401014:	2b00      	cmp	r3, #0
  401016:	d0f9      	beq.n	40100c <twihs_master_write+0xc0>
	}

	return TWIHS_SUCCESS;
  401018:	2300      	movs	r3, #0
}
  40101a:	4618      	mov	r0, r3
  40101c:	3718      	adds	r7, #24
  40101e:	46bd      	mov	sp, r7
  401020:	bd80      	pop	{r7, pc}
  401022:	bf00      	nop
  401024:	00400e09 	.word	0x00400e09

00401028 <twihs_reset>:
 * \brief Reset TWIHS.
 *
 * \param p_twihs Pointer to a TWIHS instance.
 */
void twihs_reset(Twihs *p_twihs)
{
  401028:	b480      	push	{r7}
  40102a:	b083      	sub	sp, #12
  40102c:	af00      	add	r7, sp, #0
  40102e:	6078      	str	r0, [r7, #4]
	/* Set SWRST bit to reset TWIHS peripheral */
	p_twihs->TWIHS_CR = TWIHS_CR_SWRST;
  401030:	687b      	ldr	r3, [r7, #4]
  401032:	2280      	movs	r2, #128	; 0x80
  401034:	601a      	str	r2, [r3, #0]
	p_twihs->TWIHS_RHR;
  401036:	687b      	ldr	r3, [r7, #4]
  401038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
  40103a:	370c      	adds	r7, #12
  40103c:	46bd      	mov	sp, r7
  40103e:	f85d 7b04 	ldr.w	r7, [sp], #4
  401042:	4770      	bx	lr

00401044 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
  401044:	b480      	push	{r7}
  401046:	b085      	sub	sp, #20
  401048:	af00      	add	r7, sp, #0
  40104a:	6078      	str	r0, [r7, #4]
  40104c:	6039      	str	r1, [r7, #0]
	uint32_t cd = 0;
  40104e:	2300      	movs	r3, #0
  401050:	60fb      	str	r3, [r7, #12]

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
  401052:	687b      	ldr	r3, [r7, #4]
  401054:	22ac      	movs	r2, #172	; 0xac
  401056:	601a      	str	r2, [r3, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
  401058:	683b      	ldr	r3, [r7, #0]
  40105a:	681a      	ldr	r2, [r3, #0]
  40105c:	683b      	ldr	r3, [r7, #0]
  40105e:	685b      	ldr	r3, [r3, #4]
  401060:	fbb2 f3f3 	udiv	r3, r2, r3
  401064:	091b      	lsrs	r3, r3, #4
  401066:	60fb      	str	r3, [r7, #12]
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
  401068:	68fb      	ldr	r3, [r7, #12]
  40106a:	2b00      	cmp	r3, #0
  40106c:	d003      	beq.n	401076 <uart_init+0x32>
  40106e:	68fb      	ldr	r3, [r7, #12]
  401070:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
  401074:	d301      	bcc.n	40107a <uart_init+0x36>
		return 1;
  401076:	2301      	movs	r3, #1
  401078:	e00a      	b.n	401090 <uart_init+0x4c>

	p_uart->UART_BRGR = cd;
  40107a:	687b      	ldr	r3, [r7, #4]
  40107c:	68fa      	ldr	r2, [r7, #12]
  40107e:	621a      	str	r2, [r3, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
  401080:	683b      	ldr	r3, [r7, #0]
  401082:	689a      	ldr	r2, [r3, #8]
  401084:	687b      	ldr	r3, [r7, #4]
  401086:	605a      	str	r2, [r3, #4]
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
  401088:	687b      	ldr	r3, [r7, #4]
  40108a:	2250      	movs	r2, #80	; 0x50
  40108c:	601a      	str	r2, [r3, #0]

	return 0;
  40108e:	2300      	movs	r3, #0
}
  401090:	4618      	mov	r0, r3
  401092:	3714      	adds	r7, #20
  401094:	46bd      	mov	sp, r7
  401096:	f85d 7b04 	ldr.w	r7, [sp], #4
  40109a:	4770      	bx	lr

0040109c <uart_write>:
 *
 * \retval 0 Success.
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
  40109c:	b480      	push	{r7}
  40109e:	b083      	sub	sp, #12
  4010a0:	af00      	add	r7, sp, #0
  4010a2:	6078      	str	r0, [r7, #4]
  4010a4:	460b      	mov	r3, r1
  4010a6:	70fb      	strb	r3, [r7, #3]
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  4010a8:	687b      	ldr	r3, [r7, #4]
  4010aa:	695b      	ldr	r3, [r3, #20]
  4010ac:	f003 0302 	and.w	r3, r3, #2
  4010b0:	2b00      	cmp	r3, #0
  4010b2:	d101      	bne.n	4010b8 <uart_write+0x1c>
		return 1;
  4010b4:	2301      	movs	r3, #1
  4010b6:	e003      	b.n	4010c0 <uart_write+0x24>

	/* Send character */
	p_uart->UART_THR = uc_data;
  4010b8:	78fa      	ldrb	r2, [r7, #3]
  4010ba:	687b      	ldr	r3, [r7, #4]
  4010bc:	61da      	str	r2, [r3, #28]
	return 0;
  4010be:	2300      	movs	r3, #0
}
  4010c0:	4618      	mov	r0, r3
  4010c2:	370c      	adds	r7, #12
  4010c4:	46bd      	mov	sp, r7
  4010c6:	f85d 7b04 	ldr.w	r7, [sp], #4
  4010ca:	4770      	bx	lr

004010cc <uart_read>:
 *
 * \retval 0 Success.
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
  4010cc:	b480      	push	{r7}
  4010ce:	b083      	sub	sp, #12
  4010d0:	af00      	add	r7, sp, #0
  4010d2:	6078      	str	r0, [r7, #4]
  4010d4:	6039      	str	r1, [r7, #0]
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  4010d6:	687b      	ldr	r3, [r7, #4]
  4010d8:	695b      	ldr	r3, [r3, #20]
  4010da:	f003 0301 	and.w	r3, r3, #1
  4010de:	2b00      	cmp	r3, #0
  4010e0:	d101      	bne.n	4010e6 <uart_read+0x1a>
		return 1;
  4010e2:	2301      	movs	r3, #1
  4010e4:	e005      	b.n	4010f2 <uart_read+0x26>

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  4010e6:	687b      	ldr	r3, [r7, #4]
  4010e8:	699b      	ldr	r3, [r3, #24]
  4010ea:	b2da      	uxtb	r2, r3
  4010ec:	683b      	ldr	r3, [r7, #0]
  4010ee:	701a      	strb	r2, [r3, #0]
	return 0;
  4010f0:	2300      	movs	r3, #0
}
  4010f2:	4618      	mov	r0, r3
  4010f4:	370c      	adds	r7, #12
  4010f6:	46bd      	mov	sp, r7
  4010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
  4010fc:	4770      	bx	lr
  4010fe:	bf00      	nop

00401100 <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  401100:	b480      	push	{r7}
  401102:	b089      	sub	sp, #36	; 0x24
  401104:	af00      	add	r7, sp, #0
  401106:	60f8      	str	r0, [r7, #12]
  401108:	60b9      	str	r1, [r7, #8]
  40110a:	607a      	str	r2, [r7, #4]
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  40110c:	68bb      	ldr	r3, [r7, #8]
  40110e:	011a      	lsls	r2, r3, #4
  401110:	687b      	ldr	r3, [r7, #4]
  401112:	429a      	cmp	r2, r3
  401114:	d802      	bhi.n	40111c <usart_set_async_baudrate+0x1c>
		over = HIGH_FRQ_SAMPLE_DIV;
  401116:	2310      	movs	r3, #16
  401118:	61fb      	str	r3, [r7, #28]
  40111a:	e001      	b.n	401120 <usart_set_async_baudrate+0x20>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
  40111c:	2308      	movs	r3, #8
  40111e:	61fb      	str	r3, [r7, #28]
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  401120:	687b      	ldr	r3, [r7, #4]
  401122:	00da      	lsls	r2, r3, #3
  401124:	69fb      	ldr	r3, [r7, #28]
  401126:	68b9      	ldr	r1, [r7, #8]
  401128:	fb01 f303 	mul.w	r3, r1, r3
  40112c:	085b      	lsrs	r3, r3, #1
  40112e:	441a      	add	r2, r3
  401130:	69fb      	ldr	r3, [r7, #28]
  401132:	68b9      	ldr	r1, [r7, #8]
  401134:	fb01 f303 	mul.w	r3, r1, r3
  401138:	fbb2 f3f3 	udiv	r3, r2, r3
  40113c:	61bb      	str	r3, [r7, #24]
	cd = cd_fp >> 3;
  40113e:	69bb      	ldr	r3, [r7, #24]
  401140:	08db      	lsrs	r3, r3, #3
  401142:	617b      	str	r3, [r7, #20]
	fp = cd_fp & 0x07;
  401144:	69bb      	ldr	r3, [r7, #24]
  401146:	f003 0307 	and.w	r3, r3, #7
  40114a:	613b      	str	r3, [r7, #16]
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  40114c:	697b      	ldr	r3, [r7, #20]
  40114e:	2b00      	cmp	r3, #0
  401150:	d003      	beq.n	40115a <usart_set_async_baudrate+0x5a>
  401152:	697b      	ldr	r3, [r7, #20]
  401154:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
  401158:	d301      	bcc.n	40115e <usart_set_async_baudrate+0x5e>
		return 1;
  40115a:	2301      	movs	r3, #1
  40115c:	e00f      	b.n	40117e <usart_set_async_baudrate+0x7e>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
  40115e:	69fb      	ldr	r3, [r7, #28]
  401160:	2b08      	cmp	r3, #8
  401162:	d105      	bne.n	401170 <usart_set_async_baudrate+0x70>
		p_usart->US_MR |= US_MR_OVER;
  401164:	68fb      	ldr	r3, [r7, #12]
  401166:	685b      	ldr	r3, [r3, #4]
  401168:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
  40116c:	68fb      	ldr	r3, [r7, #12]
  40116e:	605a      	str	r2, [r3, #4]
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  401170:	693b      	ldr	r3, [r7, #16]
  401172:	041a      	lsls	r2, r3, #16
  401174:	697b      	ldr	r3, [r7, #20]
  401176:	431a      	orrs	r2, r3
  401178:	68fb      	ldr	r3, [r7, #12]
  40117a:	621a      	str	r2, [r3, #32]

	return 0;
  40117c:	2300      	movs	r3, #0
}
  40117e:	4618      	mov	r0, r3
  401180:	3724      	adds	r7, #36	; 0x24
  401182:	46bd      	mov	sp, r7
  401184:	f85d 7b04 	ldr.w	r7, [sp], #4
  401188:	4770      	bx	lr
  40118a:	bf00      	nop

0040118c <usart_reset>:
 * \brief Reset the USART and disable TX and RX.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset(Usart *p_usart)
{
  40118c:	b580      	push	{r7, lr}
  40118e:	b082      	sub	sp, #8
  401190:	af00      	add	r7, sp, #0
  401192:	6078      	str	r0, [r7, #4]
	/* Disable the Write Protect. */
	usart_disable_writeprotect(p_usart);
  401194:	6878      	ldr	r0, [r7, #4]
  401196:	4b0d      	ldr	r3, [pc, #52]	; (4011cc <usart_reset+0x40>)
  401198:	4798      	blx	r3

	/* Reset registers that could cause unpredictable behavior after reset. */
	p_usart->US_MR = 0;
  40119a:	687b      	ldr	r3, [r7, #4]
  40119c:	2200      	movs	r2, #0
  40119e:	605a      	str	r2, [r3, #4]
	p_usart->US_RTOR = 0;
  4011a0:	687b      	ldr	r3, [r7, #4]
  4011a2:	2200      	movs	r2, #0
  4011a4:	625a      	str	r2, [r3, #36]	; 0x24
	p_usart->US_TTGR = 0;
  4011a6:	687b      	ldr	r3, [r7, #4]
  4011a8:	2200      	movs	r2, #0
  4011aa:	629a      	str	r2, [r3, #40]	; 0x28

	/* Disable TX and RX. */
	usart_reset_tx(p_usart);
  4011ac:	6878      	ldr	r0, [r7, #4]
  4011ae:	4b08      	ldr	r3, [pc, #32]	; (4011d0 <usart_reset+0x44>)
  4011b0:	4798      	blx	r3
	usart_reset_rx(p_usart);
  4011b2:	6878      	ldr	r0, [r7, #4]
  4011b4:	4b07      	ldr	r3, [pc, #28]	; (4011d4 <usart_reset+0x48>)
  4011b6:	4798      	blx	r3
	/* Reset status bits. */
	usart_reset_status(p_usart);
  4011b8:	6878      	ldr	r0, [r7, #4]
  4011ba:	4b07      	ldr	r3, [pc, #28]	; (4011d8 <usart_reset+0x4c>)
  4011bc:	4798      	blx	r3
	/* Turn off RTS and DTR if exist. */
	usart_drive_RTS_pin_high(p_usart);
  4011be:	6878      	ldr	r0, [r7, #4]
  4011c0:	4b06      	ldr	r3, [pc, #24]	; (4011dc <usart_reset+0x50>)
  4011c2:	4798      	blx	r3
#if (SAM3S || SAM4S || SAM3U || SAM4L || SAM4E)
	usart_drive_DTR_pin_high(p_usart);
#endif
}
  4011c4:	3708      	adds	r7, #8
  4011c6:	46bd      	mov	sp, r7
  4011c8:	bd80      	pop	{r7, pc}
  4011ca:	bf00      	nop
  4011cc:	00401421 	.word	0x00401421
  4011d0:	0040127d 	.word	0x0040127d
  4011d4:	004012c9 	.word	0x004012c9
  4011d8:	00401331 	.word	0x00401331
  4011dc:	0040134d 	.word	0x0040134d

004011e0 <usart_init_rs232>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_rs232(Usart *p_usart,
		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
{
  4011e0:	b580      	push	{r7, lr}
  4011e2:	b084      	sub	sp, #16
  4011e4:	af00      	add	r7, sp, #0
  4011e6:	60f8      	str	r0, [r7, #12]
  4011e8:	60b9      	str	r1, [r7, #8]
  4011ea:	607a      	str	r2, [r7, #4]
	static uint32_t ul_reg_val;

	/* Reset the USART and shut down TX and RX. */
	usart_reset(p_usart);
  4011ec:	68f8      	ldr	r0, [r7, #12]
  4011ee:	4b1a      	ldr	r3, [pc, #104]	; (401258 <usart_init_rs232+0x78>)
  4011f0:	4798      	blx	r3

	ul_reg_val = 0;
  4011f2:	4b1a      	ldr	r3, [pc, #104]	; (40125c <usart_init_rs232+0x7c>)
  4011f4:	2200      	movs	r2, #0
  4011f6:	601a      	str	r2, [r3, #0]
	/* Check whether the input values are legal. */
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  4011f8:	68bb      	ldr	r3, [r7, #8]
  4011fa:	2b00      	cmp	r3, #0
  4011fc:	d009      	beq.n	401212 <usart_init_rs232+0x32>
  4011fe:	68bb      	ldr	r3, [r7, #8]
  401200:	681b      	ldr	r3, [r3, #0]
  401202:	68f8      	ldr	r0, [r7, #12]
  401204:	4619      	mov	r1, r3
  401206:	687a      	ldr	r2, [r7, #4]
  401208:	4b15      	ldr	r3, [pc, #84]	; (401260 <usart_init_rs232+0x80>)
  40120a:	4798      	blx	r3
  40120c:	4603      	mov	r3, r0
  40120e:	2b00      	cmp	r3, #0
  401210:	d001      	beq.n	401216 <usart_init_rs232+0x36>
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
  401212:	2301      	movs	r3, #1
  401214:	e01b      	b.n	40124e <usart_init_rs232+0x6e>
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  401216:	68bb      	ldr	r3, [r7, #8]
  401218:	685a      	ldr	r2, [r3, #4]
  40121a:	68bb      	ldr	r3, [r7, #8]
  40121c:	689b      	ldr	r3, [r3, #8]
  40121e:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  401220:	68bb      	ldr	r3, [r7, #8]
  401222:	691b      	ldr	r3, [r3, #16]
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  401224:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  401226:	68bb      	ldr	r3, [r7, #8]
  401228:	68db      	ldr	r3, [r3, #12]
  40122a:	431a      	orrs	r2, r3
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  40122c:	4b0b      	ldr	r3, [pc, #44]	; (40125c <usart_init_rs232+0x7c>)
  40122e:	681b      	ldr	r3, [r3, #0]
  401230:	4313      	orrs	r3, r2
  401232:	4a0a      	ldr	r2, [pc, #40]	; (40125c <usart_init_rs232+0x7c>)
  401234:	6013      	str	r3, [r2, #0]
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;

	/* Configure the USART mode as normal mode. */
	ul_reg_val |= US_MR_USART_MODE_NORMAL;
  401236:	4b09      	ldr	r3, [pc, #36]	; (40125c <usart_init_rs232+0x7c>)
  401238:	681b      	ldr	r3, [r3, #0]
  40123a:	4a08      	ldr	r2, [pc, #32]	; (40125c <usart_init_rs232+0x7c>)
  40123c:	6013      	str	r3, [r2, #0]

	p_usart->US_MR |= ul_reg_val;
  40123e:	68fb      	ldr	r3, [r7, #12]
  401240:	685a      	ldr	r2, [r3, #4]
  401242:	4b06      	ldr	r3, [pc, #24]	; (40125c <usart_init_rs232+0x7c>)
  401244:	681b      	ldr	r3, [r3, #0]
  401246:	431a      	orrs	r2, r3
  401248:	68fb      	ldr	r3, [r7, #12]
  40124a:	605a      	str	r2, [r3, #4]

	return 0;
  40124c:	2300      	movs	r3, #0
}
  40124e:	4618      	mov	r0, r3
  401250:	3710      	adds	r7, #16
  401252:	46bd      	mov	sp, r7
  401254:	bd80      	pop	{r7, pc}
  401256:	bf00      	nop
  401258:	0040118d 	.word	0x0040118d
  40125c:	20400948 	.word	0x20400948
  401260:	00401101 	.word	0x00401101

00401264 <usart_enable_tx>:
 * \brief Enable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_tx(Usart *p_usart)
{
  401264:	b480      	push	{r7}
  401266:	b083      	sub	sp, #12
  401268:	af00      	add	r7, sp, #0
  40126a:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_TXEN;
  40126c:	687b      	ldr	r3, [r7, #4]
  40126e:	2240      	movs	r2, #64	; 0x40
  401270:	601a      	str	r2, [r3, #0]
}
  401272:	370c      	adds	r7, #12
  401274:	46bd      	mov	sp, r7
  401276:	f85d 7b04 	ldr.w	r7, [sp], #4
  40127a:	4770      	bx	lr

0040127c <usart_reset_tx>:
 * \brief Immediately stop and disable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_tx(Usart *p_usart)
{
  40127c:	b480      	push	{r7}
  40127e:	b083      	sub	sp, #12
  401280:	af00      	add	r7, sp, #0
  401282:	6078      	str	r0, [r7, #4]
	/* Reset transmitter */
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  401284:	687b      	ldr	r3, [r7, #4]
  401286:	2288      	movs	r2, #136	; 0x88
  401288:	601a      	str	r2, [r3, #0]
}
  40128a:	370c      	adds	r7, #12
  40128c:	46bd      	mov	sp, r7
  40128e:	f85d 7b04 	ldr.w	r7, [sp], #4
  401292:	4770      	bx	lr

00401294 <usart_set_tx_timeguard>:
 *
 * \param p_usart Pointer to a USART instance.
 * \param timeguard The value of transmit timeguard.
 */
void usart_set_tx_timeguard(Usart *p_usart, uint32_t timeguard)
{
  401294:	b480      	push	{r7}
  401296:	b083      	sub	sp, #12
  401298:	af00      	add	r7, sp, #0
  40129a:	6078      	str	r0, [r7, #4]
  40129c:	6039      	str	r1, [r7, #0]
	p_usart->US_TTGR = timeguard;
  40129e:	687b      	ldr	r3, [r7, #4]
  4012a0:	683a      	ldr	r2, [r7, #0]
  4012a2:	629a      	str	r2, [r3, #40]	; 0x28
}
  4012a4:	370c      	adds	r7, #12
  4012a6:	46bd      	mov	sp, r7
  4012a8:	f85d 7b04 	ldr.w	r7, [sp], #4
  4012ac:	4770      	bx	lr
  4012ae:	bf00      	nop

004012b0 <usart_enable_rx>:
 * \brief Enable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_rx(Usart *p_usart)
{
  4012b0:	b480      	push	{r7}
  4012b2:	b083      	sub	sp, #12
  4012b4:	af00      	add	r7, sp, #0
  4012b6:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RXEN;
  4012b8:	687b      	ldr	r3, [r7, #4]
  4012ba:	2210      	movs	r2, #16
  4012bc:	601a      	str	r2, [r3, #0]
}
  4012be:	370c      	adds	r7, #12
  4012c0:	46bd      	mov	sp, r7
  4012c2:	f85d 7b04 	ldr.w	r7, [sp], #4
  4012c6:	4770      	bx	lr

004012c8 <usart_reset_rx>:
 * \brief Immediately stop and disable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_rx(Usart *p_usart)
{
  4012c8:	b480      	push	{r7}
  4012ca:	b083      	sub	sp, #12
  4012cc:	af00      	add	r7, sp, #0
  4012ce:	6078      	str	r0, [r7, #4]
	/* Reset Receiver */
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  4012d0:	687b      	ldr	r3, [r7, #4]
  4012d2:	2224      	movs	r2, #36	; 0x24
  4012d4:	601a      	str	r2, [r3, #0]
}
  4012d6:	370c      	adds	r7, #12
  4012d8:	46bd      	mov	sp, r7
  4012da:	f85d 7b04 	ldr.w	r7, [sp], #4
  4012de:	4770      	bx	lr

004012e0 <usart_enable_interrupt>:
 *
 * \param p_usart Pointer to a USART peripheral.
 * \param ul_sources Interrupt sources bit map.
 */
void usart_enable_interrupt(Usart *p_usart, uint32_t ul_sources)
{
  4012e0:	b480      	push	{r7}
  4012e2:	b083      	sub	sp, #12
  4012e4:	af00      	add	r7, sp, #0
  4012e6:	6078      	str	r0, [r7, #4]
  4012e8:	6039      	str	r1, [r7, #0]
	p_usart->US_IER = ul_sources;
  4012ea:	687b      	ldr	r3, [r7, #4]
  4012ec:	683a      	ldr	r2, [r7, #0]
  4012ee:	609a      	str	r2, [r3, #8]
}
  4012f0:	370c      	adds	r7, #12
  4012f2:	46bd      	mov	sp, r7
  4012f4:	f85d 7b04 	ldr.w	r7, [sp], #4
  4012f8:	4770      	bx	lr
  4012fa:	bf00      	nop

004012fc <usart_disable_interrupt>:
 *
 * \param p_usart Pointer to a USART peripheral.
 * \param ul_sources Interrupt sources bit map.
 */
void usart_disable_interrupt(Usart *p_usart, uint32_t ul_sources)
{
  4012fc:	b480      	push	{r7}
  4012fe:	b083      	sub	sp, #12
  401300:	af00      	add	r7, sp, #0
  401302:	6078      	str	r0, [r7, #4]
  401304:	6039      	str	r1, [r7, #0]
	p_usart->US_IDR = ul_sources;
  401306:	687b      	ldr	r3, [r7, #4]
  401308:	683a      	ldr	r2, [r7, #0]
  40130a:	60da      	str	r2, [r3, #12]
}
  40130c:	370c      	adds	r7, #12
  40130e:	46bd      	mov	sp, r7
  401310:	f85d 7b04 	ldr.w	r7, [sp], #4
  401314:	4770      	bx	lr
  401316:	bf00      	nop

00401318 <usart_get_status>:
 * \param p_usart Pointer to a USART instance.
 *
 * \return The current USART status.
 */
uint32_t usart_get_status(Usart *p_usart)
{
  401318:	b480      	push	{r7}
  40131a:	b083      	sub	sp, #12
  40131c:	af00      	add	r7, sp, #0
  40131e:	6078      	str	r0, [r7, #4]
	return p_usart->US_CSR;
  401320:	687b      	ldr	r3, [r7, #4]
  401322:	695b      	ldr	r3, [r3, #20]
}
  401324:	4618      	mov	r0, r3
  401326:	370c      	adds	r7, #12
  401328:	46bd      	mov	sp, r7
  40132a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40132e:	4770      	bx	lr

00401330 <usart_reset_status>:
 * \brief Reset status bits (PARE, OVER, MANERR, UNRE and PXBRK in US_CSR).
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_status(Usart *p_usart)
{
  401330:	b480      	push	{r7}
  401332:	b083      	sub	sp, #12
  401334:	af00      	add	r7, sp, #0
  401336:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RSTSTA;
  401338:	687b      	ldr	r3, [r7, #4]
  40133a:	f44f 7280 	mov.w	r2, #256	; 0x100
  40133e:	601a      	str	r2, [r3, #0]
}
  401340:	370c      	adds	r7, #12
  401342:	46bd      	mov	sp, r7
  401344:	f85d 7b04 	ldr.w	r7, [sp], #4
  401348:	4770      	bx	lr
  40134a:	bf00      	nop

0040134c <usart_drive_RTS_pin_high>:
 * \brief Drive the pin RTS to 1.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_RTS_pin_high(Usart *p_usart)
{
  40134c:	b480      	push	{r7}
  40134e:	b083      	sub	sp, #12
  401350:	af00      	add	r7, sp, #0
  401352:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RTSDIS;
  401354:	687b      	ldr	r3, [r7, #4]
  401356:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  40135a:	601a      	str	r2, [r3, #0]
}
  40135c:	370c      	adds	r7, #12
  40135e:	46bd      	mov	sp, r7
  401360:	f85d 7b04 	ldr.w	r7, [sp], #4
  401364:	4770      	bx	lr
  401366:	bf00      	nop

00401368 <usart_is_tx_empty>:
 *
 * \retval 1 Transmitter is empty.
 * \retval 0 Transmitter is not empty.
 */
uint32_t usart_is_tx_empty(Usart *p_usart)
{
  401368:	b480      	push	{r7}
  40136a:	b083      	sub	sp, #12
  40136c:	af00      	add	r7, sp, #0
  40136e:	6078      	str	r0, [r7, #4]
	return (p_usart->US_CSR & US_CSR_TXEMPTY) > 0;
  401370:	687b      	ldr	r3, [r7, #4]
  401372:	695b      	ldr	r3, [r3, #20]
  401374:	f403 7300 	and.w	r3, r3, #512	; 0x200
  401378:	2b00      	cmp	r3, #0
  40137a:	bf14      	ite	ne
  40137c:	2301      	movne	r3, #1
  40137e:	2300      	moveq	r3, #0
  401380:	b2db      	uxtb	r3, r3
}
  401382:	4618      	mov	r0, r3
  401384:	370c      	adds	r7, #12
  401386:	46bd      	mov	sp, r7
  401388:	f85d 7b04 	ldr.w	r7, [sp], #4
  40138c:	4770      	bx	lr
  40138e:	bf00      	nop

00401390 <usart_is_rx_ready>:
 *
 * \retval 1 Some data has been received.
 * \retval 0 No data has been received.
 */
uint32_t usart_is_rx_ready(Usart *p_usart)
{
  401390:	b480      	push	{r7}
  401392:	b083      	sub	sp, #12
  401394:	af00      	add	r7, sp, #0
  401396:	6078      	str	r0, [r7, #4]
	return (p_usart->US_CSR & US_CSR_RXRDY) > 0;
  401398:	687b      	ldr	r3, [r7, #4]
  40139a:	695b      	ldr	r3, [r3, #20]
  40139c:	f003 0301 	and.w	r3, r3, #1
  4013a0:	2b00      	cmp	r3, #0
  4013a2:	bf14      	ite	ne
  4013a4:	2301      	movne	r3, #1
  4013a6:	2300      	moveq	r3, #0
  4013a8:	b2db      	uxtb	r3, r3
}
  4013aa:	4618      	mov	r0, r3
  4013ac:	370c      	adds	r7, #12
  4013ae:	46bd      	mov	sp, r7
  4013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
  4013b4:	4770      	bx	lr
  4013b6:	bf00      	nop

004013b8 <usart_write>:
 *
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
  4013b8:	b480      	push	{r7}
  4013ba:	b083      	sub	sp, #12
  4013bc:	af00      	add	r7, sp, #0
  4013be:	6078      	str	r0, [r7, #4]
  4013c0:	6039      	str	r1, [r7, #0]
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  4013c2:	687b      	ldr	r3, [r7, #4]
  4013c4:	695b      	ldr	r3, [r3, #20]
  4013c6:	f003 0302 	and.w	r3, r3, #2
  4013ca:	2b00      	cmp	r3, #0
  4013cc:	d101      	bne.n	4013d2 <usart_write+0x1a>
		return 1;
  4013ce:	2301      	movs	r3, #1
  4013d0:	e005      	b.n	4013de <usart_write+0x26>
	}

	p_usart->US_THR = US_THR_TXCHR(c);
  4013d2:	683b      	ldr	r3, [r7, #0]
  4013d4:	f3c3 0208 	ubfx	r2, r3, #0, #9
  4013d8:	687b      	ldr	r3, [r7, #4]
  4013da:	61da      	str	r2, [r3, #28]
	return 0;
  4013dc:	2300      	movs	r3, #0
}
  4013de:	4618      	mov	r0, r3
  4013e0:	370c      	adds	r7, #12
  4013e2:	46bd      	mov	sp, r7
  4013e4:	f85d 7b04 	ldr.w	r7, [sp], #4
  4013e8:	4770      	bx	lr
  4013ea:	bf00      	nop

004013ec <usart_read>:
 *
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
  4013ec:	b480      	push	{r7}
  4013ee:	b083      	sub	sp, #12
  4013f0:	af00      	add	r7, sp, #0
  4013f2:	6078      	str	r0, [r7, #4]
  4013f4:	6039      	str	r1, [r7, #0]
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  4013f6:	687b      	ldr	r3, [r7, #4]
  4013f8:	695b      	ldr	r3, [r3, #20]
  4013fa:	f003 0301 	and.w	r3, r3, #1
  4013fe:	2b00      	cmp	r3, #0
  401400:	d101      	bne.n	401406 <usart_read+0x1a>
		return 1;
  401402:	2301      	movs	r3, #1
  401404:	e006      	b.n	401414 <usart_read+0x28>
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  401406:	687b      	ldr	r3, [r7, #4]
  401408:	699b      	ldr	r3, [r3, #24]
  40140a:	f3c3 0208 	ubfx	r2, r3, #0, #9
  40140e:	683b      	ldr	r3, [r7, #0]
  401410:	601a      	str	r2, [r3, #0]

	return 0;
  401412:	2300      	movs	r3, #0
}
  401414:	4618      	mov	r0, r3
  401416:	370c      	adds	r7, #12
  401418:	46bd      	mov	sp, r7
  40141a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40141e:	4770      	bx	lr

00401420 <usart_disable_writeprotect>:
 * \brief Disable write protect of USART registers.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
  401420:	b480      	push	{r7}
  401422:	b083      	sub	sp, #12
  401424:	af00      	add	r7, sp, #0
  401426:	6078      	str	r0, [r7, #4]
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  401428:	687b      	ldr	r3, [r7, #4]
  40142a:	4a04      	ldr	r2, [pc, #16]	; (40143c <usart_disable_writeprotect+0x1c>)
  40142c:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
}
  401430:	370c      	adds	r7, #12
  401432:	46bd      	mov	sp, r7
  401434:	f85d 7b04 	ldr.w	r7, [sp], #4
  401438:	4770      	bx	lr
  40143a:	bf00      	nop
  40143c:	55534100 	.word	0x55534100

00401440 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  401440:	b580      	push	{r7, lr}
  401442:	b082      	sub	sp, #8
  401444:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
  401446:	4b16      	ldr	r3, [pc, #88]	; (4014a0 <Reset_Handler+0x60>)
  401448:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
  40144a:	4b16      	ldr	r3, [pc, #88]	; (4014a4 <Reset_Handler+0x64>)
  40144c:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
  40144e:	687a      	ldr	r2, [r7, #4]
  401450:	683b      	ldr	r3, [r7, #0]
  401452:	429a      	cmp	r2, r3
  401454:	d00c      	beq.n	401470 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
  401456:	e007      	b.n	401468 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
  401458:	683b      	ldr	r3, [r7, #0]
  40145a:	1d1a      	adds	r2, r3, #4
  40145c:	603a      	str	r2, [r7, #0]
  40145e:	687a      	ldr	r2, [r7, #4]
  401460:	1d11      	adds	r1, r2, #4
  401462:	6079      	str	r1, [r7, #4]
  401464:	6812      	ldr	r2, [r2, #0]
  401466:	601a      	str	r2, [r3, #0]
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
  401468:	683b      	ldr	r3, [r7, #0]
  40146a:	4a0f      	ldr	r2, [pc, #60]	; (4014a8 <Reset_Handler+0x68>)
  40146c:	4293      	cmp	r3, r2
  40146e:	d3f3      	bcc.n	401458 <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
  401470:	4b0e      	ldr	r3, [pc, #56]	; (4014ac <Reset_Handler+0x6c>)
  401472:	603b      	str	r3, [r7, #0]
  401474:	e004      	b.n	401480 <Reset_Handler+0x40>
                *pDest++ = 0;
  401476:	683b      	ldr	r3, [r7, #0]
  401478:	1d1a      	adds	r2, r3, #4
  40147a:	603a      	str	r2, [r7, #0]
  40147c:	2200      	movs	r2, #0
  40147e:	601a      	str	r2, [r3, #0]
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
  401480:	683b      	ldr	r3, [r7, #0]
  401482:	4a0b      	ldr	r2, [pc, #44]	; (4014b0 <Reset_Handler+0x70>)
  401484:	4293      	cmp	r3, r2
  401486:	d3f6      	bcc.n	401476 <Reset_Handler+0x36>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
  401488:	4b0a      	ldr	r3, [pc, #40]	; (4014b4 <Reset_Handler+0x74>)
  40148a:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  40148c:	4a0a      	ldr	r2, [pc, #40]	; (4014b8 <Reset_Handler+0x78>)
  40148e:	687b      	ldr	r3, [r7, #4]
  401490:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  401494:	6093      	str	r3, [r2, #8]

        /* Initialize the C library */
        __libc_init_array();
  401496:	4b09      	ldr	r3, [pc, #36]	; (4014bc <Reset_Handler+0x7c>)
  401498:	4798      	blx	r3

        /* Branch to main function */
        main();
  40149a:	4b09      	ldr	r3, [pc, #36]	; (4014c0 <Reset_Handler+0x80>)
  40149c:	4798      	blx	r3

        /* Infinite loop */
        while (1);
  40149e:	e7fe      	b.n	40149e <Reset_Handler+0x5e>
  4014a0:	00404220 	.word	0x00404220
  4014a4:	20400000 	.word	0x20400000
  4014a8:	204008bc 	.word	0x204008bc
  4014ac:	204008bc 	.word	0x204008bc
  4014b0:	20401178 	.word	0x20401178
  4014b4:	00400000 	.word	0x00400000
  4014b8:	e000ed00 	.word	0xe000ed00
  4014bc:	004023fd 	.word	0x004023fd
  4014c0:	00402149 	.word	0x00402149

004014c4 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  4014c4:	b480      	push	{r7}
  4014c6:	af00      	add	r7, sp, #0
        while (1) {
        }
  4014c8:	e7fe      	b.n	4014c8 <Dummy_Handler+0x4>
  4014ca:	bf00      	nop

004014cc <SystemCoreClockUpdate>:

  SystemCoreClock = CHIP_FREQ_CPU_MAX;
}

void SystemCoreClockUpdate( void )
{
  4014cc:	b480      	push	{r7}
  4014ce:	af00      	add	r7, sp, #0
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  4014d0:	4b51      	ldr	r3, [pc, #324]	; (401618 <SystemCoreClockUpdate+0x14c>)
  4014d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4014d4:	f003 0303 	and.w	r3, r3, #3
  4014d8:	2b01      	cmp	r3, #1
  4014da:	d014      	beq.n	401506 <SystemCoreClockUpdate+0x3a>
  4014dc:	2b01      	cmp	r3, #1
  4014de:	d302      	bcc.n	4014e6 <SystemCoreClockUpdate+0x1a>
  4014e0:	2b02      	cmp	r3, #2
  4014e2:	d038      	beq.n	401556 <SystemCoreClockUpdate+0x8a>
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
      }
    break;

    default:
    break;
  4014e4:	e07b      	b.n	4015de <SystemCoreClockUpdate+0x112>
{
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  {
    case PMC_MCKR_CSS_SLOW_CLK: /* Slow clock */
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  4014e6:	4b4d      	ldr	r3, [pc, #308]	; (40161c <SystemCoreClockUpdate+0x150>)
  4014e8:	695b      	ldr	r3, [r3, #20]
  4014ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
  4014ee:	2b00      	cmp	r3, #0
  4014f0:	d004      	beq.n	4014fc <SystemCoreClockUpdate+0x30>
      {
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  4014f2:	4b4b      	ldr	r3, [pc, #300]	; (401620 <SystemCoreClockUpdate+0x154>)
  4014f4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  4014f8:	601a      	str	r2, [r3, #0]
      }
      else
      {
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
      }
    break;
  4014fa:	e070      	b.n	4015de <SystemCoreClockUpdate+0x112>
      {
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
      }
      else
      {
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  4014fc:	4b48      	ldr	r3, [pc, #288]	; (401620 <SystemCoreClockUpdate+0x154>)
  4014fe:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
  401502:	601a      	str	r2, [r3, #0]
      }
    break;
  401504:	e06b      	b.n	4015de <SystemCoreClockUpdate+0x112>

    case PMC_MCKR_CSS_MAIN_CLK: /* Main clock */
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  401506:	4b44      	ldr	r3, [pc, #272]	; (401618 <SystemCoreClockUpdate+0x14c>)
  401508:	6a1b      	ldr	r3, [r3, #32]
  40150a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  40150e:	2b00      	cmp	r3, #0
  401510:	d003      	beq.n	40151a <SystemCoreClockUpdate+0x4e>
      {
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  401512:	4b43      	ldr	r3, [pc, #268]	; (401620 <SystemCoreClockUpdate+0x154>)
  401514:	4a43      	ldr	r2, [pc, #268]	; (401624 <SystemCoreClockUpdate+0x158>)
  401516:	601a      	str	r2, [r3, #0]
  401518:	e01c      	b.n	401554 <SystemCoreClockUpdate+0x88>
      }
      else
      {
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  40151a:	4b41      	ldr	r3, [pc, #260]	; (401620 <SystemCoreClockUpdate+0x154>)
  40151c:	4a42      	ldr	r2, [pc, #264]	; (401628 <SystemCoreClockUpdate+0x15c>)
  40151e:	601a      	str	r2, [r3, #0]

        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  401520:	4b3d      	ldr	r3, [pc, #244]	; (401618 <SystemCoreClockUpdate+0x14c>)
  401522:	6a1b      	ldr	r3, [r3, #32]
  401524:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401528:	2b10      	cmp	r3, #16
  40152a:	d004      	beq.n	401536 <SystemCoreClockUpdate+0x6a>
  40152c:	2b20      	cmp	r3, #32
  40152e:	d008      	beq.n	401542 <SystemCoreClockUpdate+0x76>
  401530:	2b00      	cmp	r3, #0
  401532:	d00e      	beq.n	401552 <SystemCoreClockUpdate+0x86>
          case CKGR_MOR_MOSCRCF_12_MHz:
            SystemCoreClock *= 3U;
          break;

          default:
          break;
  401534:	e00e      	b.n	401554 <SystemCoreClockUpdate+0x88>
        {
          case CKGR_MOR_MOSCRCF_4_MHz:
          break;

          case CKGR_MOR_MOSCRCF_8_MHz:
            SystemCoreClock *= 2U;
  401536:	4b3a      	ldr	r3, [pc, #232]	; (401620 <SystemCoreClockUpdate+0x154>)
  401538:	681b      	ldr	r3, [r3, #0]
  40153a:	005b      	lsls	r3, r3, #1
  40153c:	4a38      	ldr	r2, [pc, #224]	; (401620 <SystemCoreClockUpdate+0x154>)
  40153e:	6013      	str	r3, [r2, #0]
          break;
  401540:	e008      	b.n	401554 <SystemCoreClockUpdate+0x88>

          case CKGR_MOR_MOSCRCF_12_MHz:
            SystemCoreClock *= 3U;
  401542:	4b37      	ldr	r3, [pc, #220]	; (401620 <SystemCoreClockUpdate+0x154>)
  401544:	681a      	ldr	r2, [r3, #0]
  401546:	4613      	mov	r3, r2
  401548:	005b      	lsls	r3, r3, #1
  40154a:	4413      	add	r3, r2
  40154c:	4a34      	ldr	r2, [pc, #208]	; (401620 <SystemCoreClockUpdate+0x154>)
  40154e:	6013      	str	r3, [r2, #0]
          break;
  401550:	e000      	b.n	401554 <SystemCoreClockUpdate+0x88>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;

        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
        {
          case CKGR_MOR_MOSCRCF_4_MHz:
          break;
  401552:	bf00      	nop

          default:
          break;
        }
      }
    break;
  401554:	e043      	b.n	4015de <SystemCoreClockUpdate+0x112>

    case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  401556:	4b30      	ldr	r3, [pc, #192]	; (401618 <SystemCoreClockUpdate+0x14c>)
  401558:	6a1b      	ldr	r3, [r3, #32]
  40155a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  40155e:	2b00      	cmp	r3, #0
  401560:	d003      	beq.n	40156a <SystemCoreClockUpdate+0x9e>
      {
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  401562:	4b2f      	ldr	r3, [pc, #188]	; (401620 <SystemCoreClockUpdate+0x154>)
  401564:	4a2f      	ldr	r2, [pc, #188]	; (401624 <SystemCoreClockUpdate+0x158>)
  401566:	601a      	str	r2, [r3, #0]
  401568:	e01c      	b.n	4015a4 <SystemCoreClockUpdate+0xd8>
      }
      else
      {
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  40156a:	4b2d      	ldr	r3, [pc, #180]	; (401620 <SystemCoreClockUpdate+0x154>)
  40156c:	4a2e      	ldr	r2, [pc, #184]	; (401628 <SystemCoreClockUpdate+0x15c>)
  40156e:	601a      	str	r2, [r3, #0]

        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  401570:	4b29      	ldr	r3, [pc, #164]	; (401618 <SystemCoreClockUpdate+0x14c>)
  401572:	6a1b      	ldr	r3, [r3, #32]
  401574:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401578:	2b10      	cmp	r3, #16
  40157a:	d004      	beq.n	401586 <SystemCoreClockUpdate+0xba>
  40157c:	2b20      	cmp	r3, #32
  40157e:	d008      	beq.n	401592 <SystemCoreClockUpdate+0xc6>
  401580:	2b00      	cmp	r3, #0
  401582:	d00e      	beq.n	4015a2 <SystemCoreClockUpdate+0xd6>
          case CKGR_MOR_MOSCRCF_12_MHz:
            SystemCoreClock *= 3U;
          break;

          default:
          break;
  401584:	e00e      	b.n	4015a4 <SystemCoreClockUpdate+0xd8>
        {
          case CKGR_MOR_MOSCRCF_4_MHz:
          break;

          case CKGR_MOR_MOSCRCF_8_MHz:
            SystemCoreClock *= 2U;
  401586:	4b26      	ldr	r3, [pc, #152]	; (401620 <SystemCoreClockUpdate+0x154>)
  401588:	681b      	ldr	r3, [r3, #0]
  40158a:	005b      	lsls	r3, r3, #1
  40158c:	4a24      	ldr	r2, [pc, #144]	; (401620 <SystemCoreClockUpdate+0x154>)
  40158e:	6013      	str	r3, [r2, #0]
          break;
  401590:	e008      	b.n	4015a4 <SystemCoreClockUpdate+0xd8>

          case CKGR_MOR_MOSCRCF_12_MHz:
            SystemCoreClock *= 3U;
  401592:	4b23      	ldr	r3, [pc, #140]	; (401620 <SystemCoreClockUpdate+0x154>)
  401594:	681a      	ldr	r2, [r3, #0]
  401596:	4613      	mov	r3, r2
  401598:	005b      	lsls	r3, r3, #1
  40159a:	4413      	add	r3, r2
  40159c:	4a20      	ldr	r2, [pc, #128]	; (401620 <SystemCoreClockUpdate+0x154>)
  40159e:	6013      	str	r3, [r2, #0]
          break;
  4015a0:	e000      	b.n	4015a4 <SystemCoreClockUpdate+0xd8>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;

        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
        {
          case CKGR_MOR_MOSCRCF_4_MHz:
          break;
  4015a2:	bf00      	nop
          default:
          break;
        }
      }

      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  4015a4:	4b1c      	ldr	r3, [pc, #112]	; (401618 <SystemCoreClockUpdate+0x14c>)
  4015a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4015a8:	f003 0303 	and.w	r3, r3, #3
  4015ac:	2b02      	cmp	r3, #2
  4015ae:	d115      	bne.n	4015dc <SystemCoreClockUpdate+0x110>
      {
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  4015b0:	4b19      	ldr	r3, [pc, #100]	; (401618 <SystemCoreClockUpdate+0x14c>)
  4015b2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  4015b4:	4b1d      	ldr	r3, [pc, #116]	; (40162c <SystemCoreClockUpdate+0x160>)
  4015b6:	4013      	ands	r3, r2
  4015b8:	0c1b      	lsrs	r3, r3, #16
  4015ba:	3301      	adds	r3, #1
  4015bc:	4a18      	ldr	r2, [pc, #96]	; (401620 <SystemCoreClockUpdate+0x154>)
  4015be:	6812      	ldr	r2, [r2, #0]
  4015c0:	fb02 f303 	mul.w	r3, r2, r3
  4015c4:	4a16      	ldr	r2, [pc, #88]	; (401620 <SystemCoreClockUpdate+0x154>)
  4015c6:	6013      	str	r3, [r2, #0]
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  4015c8:	4b13      	ldr	r3, [pc, #76]	; (401618 <SystemCoreClockUpdate+0x14c>)
  4015ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  4015cc:	b2db      	uxtb	r3, r3
  4015ce:	4a14      	ldr	r2, [pc, #80]	; (401620 <SystemCoreClockUpdate+0x154>)
  4015d0:	6812      	ldr	r2, [r2, #0]
  4015d2:	fbb2 f3f3 	udiv	r3, r2, r3
  4015d6:	4a12      	ldr	r2, [pc, #72]	; (401620 <SystemCoreClockUpdate+0x154>)
  4015d8:	6013      	str	r3, [r2, #0]
      }
    break;
  4015da:	e7ff      	b.n	4015dc <SystemCoreClockUpdate+0x110>
  4015dc:	bf00      	nop

    default:
    break;
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  4015de:	4b0e      	ldr	r3, [pc, #56]	; (401618 <SystemCoreClockUpdate+0x14c>)
  4015e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4015e2:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4015e6:	2b70      	cmp	r3, #112	; 0x70
  4015e8:	d108      	bne.n	4015fc <SystemCoreClockUpdate+0x130>
  {
    SystemCoreClock /= 3U;
  4015ea:	4b0d      	ldr	r3, [pc, #52]	; (401620 <SystemCoreClockUpdate+0x154>)
  4015ec:	681b      	ldr	r3, [r3, #0]
  4015ee:	4a10      	ldr	r2, [pc, #64]	; (401630 <SystemCoreClockUpdate+0x164>)
  4015f0:	fba2 2303 	umull	r2, r3, r2, r3
  4015f4:	085b      	lsrs	r3, r3, #1
  4015f6:	4a0a      	ldr	r2, [pc, #40]	; (401620 <SystemCoreClockUpdate+0x154>)
  4015f8:	6013      	str	r3, [r2, #0]
  4015fa:	e009      	b.n	401610 <SystemCoreClockUpdate+0x144>
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  4015fc:	4b06      	ldr	r3, [pc, #24]	; (401618 <SystemCoreClockUpdate+0x14c>)
  4015fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401600:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401604:	091a      	lsrs	r2, r3, #4
  401606:	4b06      	ldr	r3, [pc, #24]	; (401620 <SystemCoreClockUpdate+0x154>)
  401608:	681b      	ldr	r3, [r3, #0]
  40160a:	40d3      	lsrs	r3, r2
  40160c:	4a04      	ldr	r2, [pc, #16]	; (401620 <SystemCoreClockUpdate+0x154>)
  40160e:	6013      	str	r3, [r2, #0]
  }
}
  401610:	46bd      	mov	sp, r7
  401612:	f85d 7b04 	ldr.w	r7, [sp], #4
  401616:	4770      	bx	lr
  401618:	400e0600 	.word	0x400e0600
  40161c:	400e1810 	.word	0x400e1810
  401620:	20400000 	.word	0x20400000
  401624:	00b71b00 	.word	0x00b71b00
  401628:	003d0900 	.word	0x003d0900
  40162c:	07ff0000 	.word	0x07ff0000
  401630:	aaaaaaab 	.word	0xaaaaaaab

00401634 <system_init_flash>:
/**
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  401634:	b480      	push	{r7}
  401636:	b083      	sub	sp, #12
  401638:	af00      	add	r7, sp, #0
  40163a:	6078      	str	r0, [r7, #4]
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  40163c:	687b      	ldr	r3, [r7, #4]
  40163e:	4a18      	ldr	r2, [pc, #96]	; (4016a0 <system_init_flash+0x6c>)
  401640:	4293      	cmp	r3, r2
  401642:	d804      	bhi.n	40164e <system_init_flash+0x1a>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  401644:	4b17      	ldr	r3, [pc, #92]	; (4016a4 <system_init_flash+0x70>)
  401646:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  40164a:	601a      	str	r2, [r3, #0]
  40164c:	e023      	b.n	401696 <system_init_flash+0x62>
  }
  else
  {
    if (ul_clk < CHIP_FREQ_FWS_1)
  40164e:	687b      	ldr	r3, [r7, #4]
  401650:	4a15      	ldr	r2, [pc, #84]	; (4016a8 <system_init_flash+0x74>)
  401652:	4293      	cmp	r3, r2
  401654:	d803      	bhi.n	40165e <system_init_flash+0x2a>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  401656:	4b13      	ldr	r3, [pc, #76]	; (4016a4 <system_init_flash+0x70>)
  401658:	4a14      	ldr	r2, [pc, #80]	; (4016ac <system_init_flash+0x78>)
  40165a:	601a      	str	r2, [r3, #0]
  40165c:	e01b      	b.n	401696 <system_init_flash+0x62>
    }
    else
    {
      if (ul_clk < CHIP_FREQ_FWS_2)
  40165e:	687b      	ldr	r3, [r7, #4]
  401660:	4a13      	ldr	r2, [pc, #76]	; (4016b0 <system_init_flash+0x7c>)
  401662:	4293      	cmp	r3, r2
  401664:	d803      	bhi.n	40166e <system_init_flash+0x3a>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  401666:	4b0f      	ldr	r3, [pc, #60]	; (4016a4 <system_init_flash+0x70>)
  401668:	4a12      	ldr	r2, [pc, #72]	; (4016b4 <system_init_flash+0x80>)
  40166a:	601a      	str	r2, [r3, #0]
  40166c:	e013      	b.n	401696 <system_init_flash+0x62>
      }
      else
      {
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  40166e:	687b      	ldr	r3, [r7, #4]
  401670:	4a11      	ldr	r2, [pc, #68]	; (4016b8 <system_init_flash+0x84>)
  401672:	4293      	cmp	r3, r2
  401674:	d803      	bhi.n	40167e <system_init_flash+0x4a>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  401676:	4b0b      	ldr	r3, [pc, #44]	; (4016a4 <system_init_flash+0x70>)
  401678:	4a10      	ldr	r2, [pc, #64]	; (4016bc <system_init_flash+0x88>)
  40167a:	601a      	str	r2, [r3, #0]
  40167c:	e00b      	b.n	401696 <system_init_flash+0x62>
        }
        else
        {
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  40167e:	687b      	ldr	r3, [r7, #4]
  401680:	4a0f      	ldr	r2, [pc, #60]	; (4016c0 <system_init_flash+0x8c>)
  401682:	4293      	cmp	r3, r2
  401684:	d804      	bhi.n	401690 <system_init_flash+0x5c>
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  401686:	4b07      	ldr	r3, [pc, #28]	; (4016a4 <system_init_flash+0x70>)
  401688:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  40168c:	601a      	str	r2, [r3, #0]
  40168e:	e002      	b.n	401696 <system_init_flash+0x62>
          }
          else
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  401690:	4b04      	ldr	r3, [pc, #16]	; (4016a4 <system_init_flash+0x70>)
  401692:	4a0c      	ldr	r2, [pc, #48]	; (4016c4 <system_init_flash+0x90>)
  401694:	601a      	str	r2, [r3, #0]
          }
        }
      }
    }
  }
}
  401696:	370c      	adds	r7, #12
  401698:	46bd      	mov	sp, r7
  40169a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40169e:	4770      	bx	lr
  4016a0:	01312cff 	.word	0x01312cff
  4016a4:	400e0c00 	.word	0x400e0c00
  4016a8:	026259ff 	.word	0x026259ff
  4016ac:	04000100 	.word	0x04000100
  4016b0:	039386ff 	.word	0x039386ff
  4016b4:	04000200 	.word	0x04000200
  4016b8:	04c4b3ff 	.word	0x04c4b3ff
  4016bc:	04000300 	.word	0x04000300
  4016c0:	05f5e0ff 	.word	0x05f5e0ff
  4016c4:	04000500 	.word	0x04000500

004016c8 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
  4016c8:	b480      	push	{r7}
  4016ca:	b085      	sub	sp, #20
  4016cc:	af00      	add	r7, sp, #0
  4016ce:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;
  4016d0:	4b10      	ldr	r3, [pc, #64]	; (401714 <_sbrk+0x4c>)
  4016d2:	60fb      	str	r3, [r7, #12]

	if (heap == NULL) {
  4016d4:	4b10      	ldr	r3, [pc, #64]	; (401718 <_sbrk+0x50>)
  4016d6:	681b      	ldr	r3, [r3, #0]
  4016d8:	2b00      	cmp	r3, #0
  4016da:	d102      	bne.n	4016e2 <_sbrk+0x1a>
		heap = (unsigned char *)&_end;
  4016dc:	4b0e      	ldr	r3, [pc, #56]	; (401718 <_sbrk+0x50>)
  4016de:	4a0f      	ldr	r2, [pc, #60]	; (40171c <_sbrk+0x54>)
  4016e0:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
  4016e2:	4b0d      	ldr	r3, [pc, #52]	; (401718 <_sbrk+0x50>)
  4016e4:	681b      	ldr	r3, [r3, #0]
  4016e6:	60bb      	str	r3, [r7, #8]

	if (((int)prev_heap + incr) > ramend) {
  4016e8:	68ba      	ldr	r2, [r7, #8]
  4016ea:	687b      	ldr	r3, [r7, #4]
  4016ec:	441a      	add	r2, r3
  4016ee:	68fb      	ldr	r3, [r7, #12]
  4016f0:	429a      	cmp	r2, r3
  4016f2:	dd02      	ble.n	4016fa <_sbrk+0x32>
		return (caddr_t) -1;	
  4016f4:	f04f 33ff 	mov.w	r3, #4294967295
  4016f8:	e006      	b.n	401708 <_sbrk+0x40>
	}

	heap += incr;
  4016fa:	4b07      	ldr	r3, [pc, #28]	; (401718 <_sbrk+0x50>)
  4016fc:	681a      	ldr	r2, [r3, #0]
  4016fe:	687b      	ldr	r3, [r7, #4]
  401700:	4413      	add	r3, r2
  401702:	4a05      	ldr	r2, [pc, #20]	; (401718 <_sbrk+0x50>)
  401704:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
  401706:	68bb      	ldr	r3, [r7, #8]
}
  401708:	4618      	mov	r0, r3
  40170a:	3714      	adds	r7, #20
  40170c:	46bd      	mov	sp, r7
  40170e:	f85d 7b04 	ldr.w	r7, [sp], #4
  401712:	4770      	bx	lr
  401714:	2045fffc 	.word	0x2045fffc
  401718:	2040094c 	.word	0x2040094c
  40171c:	20403378 	.word	0x20403378

00401720 <_close>:
{
	return -1;
}

extern int _close(int file)
{
  401720:	b480      	push	{r7}
  401722:	b083      	sub	sp, #12
  401724:	af00      	add	r7, sp, #0
  401726:	6078      	str	r0, [r7, #4]
	return -1;
  401728:	f04f 33ff 	mov.w	r3, #4294967295
}
  40172c:	4618      	mov	r0, r3
  40172e:	370c      	adds	r7, #12
  401730:	46bd      	mov	sp, r7
  401732:	f85d 7b04 	ldr.w	r7, [sp], #4
  401736:	4770      	bx	lr

00401738 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
  401738:	b480      	push	{r7}
  40173a:	b083      	sub	sp, #12
  40173c:	af00      	add	r7, sp, #0
  40173e:	6078      	str	r0, [r7, #4]
  401740:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
  401742:	683b      	ldr	r3, [r7, #0]
  401744:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  401748:	605a      	str	r2, [r3, #4]

	return 0;
  40174a:	2300      	movs	r3, #0
}
  40174c:	4618      	mov	r0, r3
  40174e:	370c      	adds	r7, #12
  401750:	46bd      	mov	sp, r7
  401752:	f85d 7b04 	ldr.w	r7, [sp], #4
  401756:	4770      	bx	lr

00401758 <_isatty>:

extern int _isatty(int file)
{
  401758:	b480      	push	{r7}
  40175a:	b083      	sub	sp, #12
  40175c:	af00      	add	r7, sp, #0
  40175e:	6078      	str	r0, [r7, #4]
	return 1;
  401760:	2301      	movs	r3, #1
}
  401762:	4618      	mov	r0, r3
  401764:	370c      	adds	r7, #12
  401766:	46bd      	mov	sp, r7
  401768:	f85d 7b04 	ldr.w	r7, [sp], #4
  40176c:	4770      	bx	lr
  40176e:	bf00      	nop

00401770 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
  401770:	b480      	push	{r7}
  401772:	b085      	sub	sp, #20
  401774:	af00      	add	r7, sp, #0
  401776:	60f8      	str	r0, [r7, #12]
  401778:	60b9      	str	r1, [r7, #8]
  40177a:	607a      	str	r2, [r7, #4]
	return 0;
  40177c:	2300      	movs	r3, #0
}
  40177e:	4618      	mov	r0, r3
  401780:	3714      	adds	r7, #20
  401782:	46bd      	mov	sp, r7
  401784:	f85d 7b04 	ldr.w	r7, [sp], #4
  401788:	4770      	bx	lr
  40178a:	bf00      	nop

0040178c <PCA9952_write_reg>:
 *
 * \param reg_index Register address. Use macros as defined in the header file.
 * \param data Data that should be written to the device register.
 */
void PCA9952_write_reg(unsigned char topBotn, uint8_t reg_index, uint8_t data)
{
  40178c:	b580      	push	{r7, lr}
  40178e:	b088      	sub	sp, #32
  401790:	af00      	add	r7, sp, #0
  401792:	4603      	mov	r3, r0
  401794:	71fb      	strb	r3, [r7, #7]
  401796:	460b      	mov	r3, r1
  401798:	71bb      	strb	r3, [r7, #6]
  40179a:	4613      	mov	r3, r2
  40179c:	717b      	strb	r3, [r7, #5]
	uint8_t pack[2];
	twihs_packet_t twi_package;

	pack[0] = reg_index;
  40179e:	79bb      	ldrb	r3, [r7, #6]
  4017a0:	773b      	strb	r3, [r7, #28]
	pack[1] = data;
  4017a2:	797b      	ldrb	r3, [r7, #5]
  4017a4:	777b      	strb	r3, [r7, #29]

//7apr15	twi_package.chip = PCA9952_TWI_ADDRESS;

	if (topBotn == LED_TOP)
  4017a6:	79fb      	ldrb	r3, [r7, #7]
  4017a8:	2b00      	cmp	r3, #0
  4017aa:	d102      	bne.n	4017b2 <PCA9952_write_reg+0x26>
	{
		twi_package.chip = PCA9952_U7_TOPDRIVE_TWI_ADDRESS;
  4017ac:	2360      	movs	r3, #96	; 0x60
  4017ae:	763b      	strb	r3, [r7, #24]
  4017b0:	e004      	b.n	4017bc <PCA9952_write_reg+0x30>
	}
	else if (topBotn == LED_BOTTOM)
  4017b2:	79fb      	ldrb	r3, [r7, #7]
  4017b4:	2b01      	cmp	r3, #1
  4017b6:	d101      	bne.n	4017bc <PCA9952_write_reg+0x30>
	{
		twi_package.chip = PCA9952_U8_BOTDRIVE_TWI_ADDRESS;
  4017b8:	2361      	movs	r3, #97	; 0x61
  4017ba:	763b      	strb	r3, [r7, #24]
	}

	twi_package.addr_length = 0;
  4017bc:	2300      	movs	r3, #0
  4017be:	60fb      	str	r3, [r7, #12]
	twi_package.addr[0] = 0;		//is this right? 8feb16
  4017c0:	2300      	movs	r3, #0
  4017c2:	723b      	strb	r3, [r7, #8]
	twi_package.addr[1] = 0;		//is this right? 8feb16
  4017c4:	2300      	movs	r3, #0
  4017c6:	727b      	strb	r3, [r7, #9]
	twi_package.addr_length = 2;	//is this right? 8feb16
  4017c8:	2302      	movs	r3, #2
  4017ca:	60fb      	str	r3, [r7, #12]
	twi_package.buffer = &pack;
  4017cc:	f107 031c 	add.w	r3, r7, #28
  4017d0:	613b      	str	r3, [r7, #16]
	twi_package.length = sizeof(pack);
  4017d2:	2302      	movs	r3, #2
  4017d4:	617b      	str	r3, [r7, #20]

	while(twihs_master_write(PCA9952_TWI, &twi_package)!=TWIHS_SUCCESS);
  4017d6:	bf00      	nop
  4017d8:	f107 0308 	add.w	r3, r7, #8
  4017dc:	4805      	ldr	r0, [pc, #20]	; (4017f4 <PCA9952_write_reg+0x68>)
  4017de:	4619      	mov	r1, r3
  4017e0:	4b05      	ldr	r3, [pc, #20]	; (4017f8 <PCA9952_write_reg+0x6c>)
  4017e2:	4798      	blx	r3
  4017e4:	4603      	mov	r3, r0
  4017e6:	2b00      	cmp	r3, #0
  4017e8:	d1f6      	bne.n	4017d8 <PCA9952_write_reg+0x4c>

	return;
  4017ea:	bf00      	nop
}
  4017ec:	3720      	adds	r7, #32
  4017ee:	46bd      	mov	sp, r7
  4017f0:	bd80      	pop	{r7, pc}
  4017f2:	bf00      	nop
  4017f4:	40018000 	.word	0x40018000
  4017f8:	00400f4d 	.word	0x00400f4d

004017fc <PCA9952_read_reg>:
 *
 * \param reg_index Register address.
 * \returns Register content.
 */
uint8_t PCA9952_read_reg(unsigned char topBotn, uint8_t reg_index)
{
  4017fc:	b580      	push	{r7, lr}
  4017fe:	b088      	sub	sp, #32
  401800:	af00      	add	r7, sp, #0
  401802:	4603      	mov	r3, r0
  401804:	460a      	mov	r2, r1
  401806:	71fb      	strb	r3, [r7, #7]
  401808:	4613      	mov	r3, r2
  40180a:	71bb      	strb	r3, [r7, #6]
	uint8_t data;
	twihs_packet_t twi_package;

//7apr15	twi_package.chip = PCA9952_TWI_ADDRESS;

	if (topBotn == LED_TOP)
  40180c:	79fb      	ldrb	r3, [r7, #7]
  40180e:	2b00      	cmp	r3, #0
  401810:	d102      	bne.n	401818 <PCA9952_read_reg+0x1c>
	{
		twi_package.chip = PCA9952_U7_TOPDRIVE_TWI_ADDRESS;
  401812:	2360      	movs	r3, #96	; 0x60
  401814:	763b      	strb	r3, [r7, #24]
  401816:	e004      	b.n	401822 <PCA9952_read_reg+0x26>
	}
	else if (topBotn == LED_BOTTOM)
  401818:	79fb      	ldrb	r3, [r7, #7]
  40181a:	2b01      	cmp	r3, #1
  40181c:	d101      	bne.n	401822 <PCA9952_read_reg+0x26>
	{
		twi_package.chip = PCA9952_U8_BOTDRIVE_TWI_ADDRESS;
  40181e:	2361      	movs	r3, #97	; 0x61
  401820:	763b      	strb	r3, [r7, #24]
	}

	twi_package.addr[0] = 0;		//is this right? 8feb16
  401822:	2300      	movs	r3, #0
  401824:	723b      	strb	r3, [r7, #8]
	twi_package.addr[1] = 0;		//is this right? 8feb16
  401826:	2300      	movs	r3, #0
  401828:	727b      	strb	r3, [r7, #9]
	twi_package.addr_length = 2;	//is this right? 8feb16
  40182a:	2302      	movs	r3, #2
  40182c:	60fb      	str	r3, [r7, #12]
	twi_package.addr_length = 0;
  40182e:	2300      	movs	r3, #0
  401830:	60fb      	str	r3, [r7, #12]
	twi_package.buffer = &reg_index;
  401832:	1dbb      	adds	r3, r7, #6
  401834:	613b      	str	r3, [r7, #16]
	twi_package.length = 1;
  401836:	2301      	movs	r3, #1
  401838:	617b      	str	r3, [r7, #20]
	while(twihs_master_write(PCA9952_TWI, &twi_package)!=TWIHS_SUCCESS);
  40183a:	bf00      	nop
  40183c:	f107 0308 	add.w	r3, r7, #8
  401840:	480f      	ldr	r0, [pc, #60]	; (401880 <PCA9952_read_reg+0x84>)
  401842:	4619      	mov	r1, r3
  401844:	4b0f      	ldr	r3, [pc, #60]	; (401884 <PCA9952_read_reg+0x88>)
  401846:	4798      	blx	r3
  401848:	4603      	mov	r3, r0
  40184a:	2b00      	cmp	r3, #0
  40184c:	d1f6      	bne.n	40183c <PCA9952_read_reg+0x40>
	* specified in the datasheet.
	* Also there seems to be a bug in the TWI module or the driver
	* since some delay here (code or real delay) adds about 500us
	* between the write and the next read cycle.
	*/
	mdelay(20);
  40184e:	2014      	movs	r0, #20
  401850:	4b0d      	ldr	r3, [pc, #52]	; (401888 <PCA9952_read_reg+0x8c>)
  401852:	4798      	blx	r3

//7apr15 this was set above, no need to reassign	twi_package.chip = PCA9952_TWI_ADDRESS;
	twi_package.addr_length = 0;
  401854:	2300      	movs	r3, #0
  401856:	60fb      	str	r3, [r7, #12]
	twi_package.buffer = &data;
  401858:	f107 031f 	add.w	r3, r7, #31
  40185c:	613b      	str	r3, [r7, #16]
	twi_package.length = 1;
  40185e:	2301      	movs	r3, #1
  401860:	617b      	str	r3, [r7, #20]
	while(twihs_master_read(PCA9952_TWI, &twi_package)!=TWIHS_SUCCESS);
  401862:	bf00      	nop
  401864:	f107 0308 	add.w	r3, r7, #8
  401868:	4805      	ldr	r0, [pc, #20]	; (401880 <PCA9952_read_reg+0x84>)
  40186a:	4619      	mov	r1, r3
  40186c:	4b07      	ldr	r3, [pc, #28]	; (40188c <PCA9952_read_reg+0x90>)
  40186e:	4798      	blx	r3
  401870:	4603      	mov	r3, r0
  401872:	2b00      	cmp	r3, #0
  401874:	d1f6      	bne.n	401864 <PCA9952_read_reg+0x68>

	return data;
  401876:	7ffb      	ldrb	r3, [r7, #31]
}
  401878:	4618      	mov	r0, r3
  40187a:	3720      	adds	r7, #32
  40187c:	46bd      	mov	sp, r7
  40187e:	bd80      	pop	{r7, pc}
  401880:	40018000 	.word	0x40018000
  401884:	00400f4d 	.word	0x00400f4d
  401888:	00401ec5 	.word	0x00401ec5
  40188c:	00400e65 	.word	0x00400e65

00401890 <PCA9952_init>:


void PCA9952_init(void) //7apr15
{
  401890:	b580      	push	{r7, lr}
  401892:	b082      	sub	sp, #8
  401894:	af00      	add	r7, sp, #0
	/* Store cpu frequency locally*/
//7apr15	cpu_hz = fcpu;

	//Note output is off at the chip level before coming into this routine, LED_OEn set high before calling this function from main()

	PCA9952_write_reg(LED_TOP, PCA9952_MODE1, 0);		//No autoincrement, normal mode not sleep, does not respond to sub or allcall addresses
  401896:	2000      	movs	r0, #0
  401898:	2100      	movs	r1, #0
  40189a:	2200      	movs	r2, #0
  40189c:	4b2e      	ldr	r3, [pc, #184]	; (401958 <PCA9952_init+0xc8>)
  40189e:	4798      	blx	r3
	PCA9952_write_reg(LED_TOP, PCA9952_MODE2, 0);		//Dimming not blinking, change on stop not ack (don't really care but have to pick something)
  4018a0:	2000      	movs	r0, #0
  4018a2:	2101      	movs	r1, #1
  4018a4:	2200      	movs	r2, #0
  4018a6:	4b2c      	ldr	r3, [pc, #176]	; (401958 <PCA9952_init+0xc8>)
  4018a8:	4798      	blx	r3
	PCA9952_write_reg(LED_TOP, PCA9952_IREFALL, LED_DRIVER_CURRENT); //9apr15 drive at half current for now, power supply circuit needs modification
  4018aa:	2000      	movs	r0, #0
  4018ac:	2143      	movs	r1, #67	; 0x43
  4018ae:	22c8      	movs	r2, #200	; 0xc8
  4018b0:	4b29      	ldr	r3, [pc, #164]	; (401958 <PCA9952_init+0xc8>)
  4018b2:	4798      	blx	r3
	PCA9952_write_reg(LED_TOP, PCA9952_LEDOUT0, 0);		//Setting all channels off for now
  4018b4:	2000      	movs	r0, #0
  4018b6:	2102      	movs	r1, #2
  4018b8:	2200      	movs	r2, #0
  4018ba:	4b27      	ldr	r3, [pc, #156]	; (401958 <PCA9952_init+0xc8>)
  4018bc:	4798      	blx	r3
	PCA9952_write_reg(LED_TOP, PCA9952_LEDOUT1, 0);
  4018be:	2000      	movs	r0, #0
  4018c0:	2103      	movs	r1, #3
  4018c2:	2200      	movs	r2, #0
  4018c4:	4b24      	ldr	r3, [pc, #144]	; (401958 <PCA9952_init+0xc8>)
  4018c6:	4798      	blx	r3
	PCA9952_write_reg(LED_TOP, PCA9952_LEDOUT2, 0);
  4018c8:	2000      	movs	r0, #0
  4018ca:	2104      	movs	r1, #4
  4018cc:	2200      	movs	r2, #0
  4018ce:	4b22      	ldr	r3, [pc, #136]	; (401958 <PCA9952_init+0xc8>)
  4018d0:	4798      	blx	r3
	PCA9952_write_reg(LED_TOP, PCA9952_LEDOUT3, 0);
  4018d2:	2000      	movs	r0, #0
  4018d4:	2105      	movs	r1, #5
  4018d6:	2200      	movs	r2, #0
  4018d8:	4b1f      	ldr	r3, [pc, #124]	; (401958 <PCA9952_init+0xc8>)
  4018da:	4798      	blx	r3

	tmp1 = PCA9952_read_reg(LED_TOP, PCA9952_EFLAG0);	//TODO: just see what we get, will need to weave error checking into this system later
  4018dc:	2000      	movs	r0, #0
  4018de:	2144      	movs	r1, #68	; 0x44
  4018e0:	4b1e      	ldr	r3, [pc, #120]	; (40195c <PCA9952_init+0xcc>)
  4018e2:	4798      	blx	r3
  4018e4:	4603      	mov	r3, r0
  4018e6:	71fb      	strb	r3, [r7, #7]
	tmp2 = PCA9952_read_reg(LED_TOP, PCA9952_EFLAG1);
  4018e8:	2000      	movs	r0, #0
  4018ea:	2145      	movs	r1, #69	; 0x45
  4018ec:	4b1b      	ldr	r3, [pc, #108]	; (40195c <PCA9952_init+0xcc>)
  4018ee:	4798      	blx	r3
  4018f0:	4603      	mov	r3, r0
  4018f2:	71bb      	strb	r3, [r7, #6]

	PCA9952_write_reg(LED_BOTTOM, PCA9952_MODE1, 0);		//No autoincrement, normal mode not sleep, does not respond to sub or allcall addresses
  4018f4:	2001      	movs	r0, #1
  4018f6:	2100      	movs	r1, #0
  4018f8:	2200      	movs	r2, #0
  4018fa:	4b17      	ldr	r3, [pc, #92]	; (401958 <PCA9952_init+0xc8>)
  4018fc:	4798      	blx	r3
	PCA9952_write_reg(LED_BOTTOM, PCA9952_MODE2, 0);		//Dimming not blinking, change on stop not ack (don't really care but have to pick something)
  4018fe:	2001      	movs	r0, #1
  401900:	2101      	movs	r1, #1
  401902:	2200      	movs	r2, #0
  401904:	4b14      	ldr	r3, [pc, #80]	; (401958 <PCA9952_init+0xc8>)
  401906:	4798      	blx	r3
	PCA9952_write_reg(LED_BOTTOM, PCA9952_IREFALL, LED_DRIVER_CURRENT); //9apr15 drive at half current for now, power supply circuit needs modification
  401908:	2001      	movs	r0, #1
  40190a:	2143      	movs	r1, #67	; 0x43
  40190c:	22c8      	movs	r2, #200	; 0xc8
  40190e:	4b12      	ldr	r3, [pc, #72]	; (401958 <PCA9952_init+0xc8>)
  401910:	4798      	blx	r3
	PCA9952_write_reg(LED_BOTTOM, PCA9952_LEDOUT0, 0);		//Setting all channels off for now
  401912:	2001      	movs	r0, #1
  401914:	2102      	movs	r1, #2
  401916:	2200      	movs	r2, #0
  401918:	4b0f      	ldr	r3, [pc, #60]	; (401958 <PCA9952_init+0xc8>)
  40191a:	4798      	blx	r3
	PCA9952_write_reg(LED_BOTTOM, PCA9952_LEDOUT1, 0);
  40191c:	2001      	movs	r0, #1
  40191e:	2103      	movs	r1, #3
  401920:	2200      	movs	r2, #0
  401922:	4b0d      	ldr	r3, [pc, #52]	; (401958 <PCA9952_init+0xc8>)
  401924:	4798      	blx	r3
	PCA9952_write_reg(LED_BOTTOM, PCA9952_LEDOUT2, 0);
  401926:	2001      	movs	r0, #1
  401928:	2104      	movs	r1, #4
  40192a:	2200      	movs	r2, #0
  40192c:	4b0a      	ldr	r3, [pc, #40]	; (401958 <PCA9952_init+0xc8>)
  40192e:	4798      	blx	r3
	PCA9952_write_reg(LED_BOTTOM, PCA9952_LEDOUT3, 0);
  401930:	2001      	movs	r0, #1
  401932:	2105      	movs	r1, #5
  401934:	2200      	movs	r2, #0
  401936:	4b08      	ldr	r3, [pc, #32]	; (401958 <PCA9952_init+0xc8>)
  401938:	4798      	blx	r3

	tmp3 = PCA9952_read_reg(LED_BOTTOM, PCA9952_EFLAG0);	//TODO: just see what we get, will need to weave error checking into this system later
  40193a:	2001      	movs	r0, #1
  40193c:	2144      	movs	r1, #68	; 0x44
  40193e:	4b07      	ldr	r3, [pc, #28]	; (40195c <PCA9952_init+0xcc>)
  401940:	4798      	blx	r3
  401942:	4603      	mov	r3, r0
  401944:	717b      	strb	r3, [r7, #5]
	tmp4 = PCA9952_read_reg(LED_BOTTOM, PCA9952_EFLAG1);
  401946:	2001      	movs	r0, #1
  401948:	2145      	movs	r1, #69	; 0x45
  40194a:	4b04      	ldr	r3, [pc, #16]	; (40195c <PCA9952_init+0xcc>)
  40194c:	4798      	blx	r3
  40194e:	4603      	mov	r3, r0
  401950:	713b      	strb	r3, [r7, #4]

}
  401952:	3708      	adds	r7, #8
  401954:	46bd      	mov	sp, r7
  401956:	bd80      	pop	{r7, pc}
  401958:	0040178d 	.word	0x0040178d
  40195c:	004017fd 	.word	0x004017fd

00401960 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  401960:	b480      	push	{r7}
  401962:	b083      	sub	sp, #12
  401964:	af00      	add	r7, sp, #0
  401966:	4603      	mov	r3, r0
  401968:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  40196a:	4908      	ldr	r1, [pc, #32]	; (40198c <NVIC_EnableIRQ+0x2c>)
  40196c:	f997 3007 	ldrsb.w	r3, [r7, #7]
  401970:	095b      	lsrs	r3, r3, #5
  401972:	79fa      	ldrb	r2, [r7, #7]
  401974:	f002 021f 	and.w	r2, r2, #31
  401978:	2001      	movs	r0, #1
  40197a:	fa00 f202 	lsl.w	r2, r0, r2
  40197e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  401982:	370c      	adds	r7, #12
  401984:	46bd      	mov	sp, r7
  401986:	f85d 7b04 	ldr.w	r7, [sp], #4
  40198a:	4770      	bx	lr
  40198c:	e000e100 	.word	0xe000e100

00401990 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  401990:	b480      	push	{r7}
  401992:	b083      	sub	sp, #12
  401994:	af00      	add	r7, sp, #0
  401996:	4603      	mov	r3, r0
  401998:	6039      	str	r1, [r7, #0]
  40199a:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
  40199c:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4019a0:	2b00      	cmp	r3, #0
  4019a2:	da0b      	bge.n	4019bc <NVIC_SetPriority+0x2c>
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  4019a4:	490d      	ldr	r1, [pc, #52]	; (4019dc <NVIC_SetPriority+0x4c>)
  4019a6:	79fb      	ldrb	r3, [r7, #7]
  4019a8:	f003 030f 	and.w	r3, r3, #15
  4019ac:	3b04      	subs	r3, #4
  4019ae:	683a      	ldr	r2, [r7, #0]
  4019b0:	b2d2      	uxtb	r2, r2
  4019b2:	0152      	lsls	r2, r2, #5
  4019b4:	b2d2      	uxtb	r2, r2
  4019b6:	440b      	add	r3, r1
  4019b8:	761a      	strb	r2, [r3, #24]
  4019ba:	e009      	b.n	4019d0 <NVIC_SetPriority+0x40>
  else {
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  4019bc:	4908      	ldr	r1, [pc, #32]	; (4019e0 <NVIC_SetPriority+0x50>)
  4019be:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4019c2:	683a      	ldr	r2, [r7, #0]
  4019c4:	b2d2      	uxtb	r2, r2
  4019c6:	0152      	lsls	r2, r2, #5
  4019c8:	b2d2      	uxtb	r2, r2
  4019ca:	440b      	add	r3, r1
  4019cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
  4019d0:	370c      	adds	r7, #12
  4019d2:	46bd      	mov	sp, r7
  4019d4:	f85d 7b04 	ldr.w	r7, [sp], #4
  4019d8:	4770      	bx	lr
  4019da:	bf00      	nop
  4019dc:	e000ed00 	.word	0xe000ed00
  4019e0:	e000e100 	.word	0xe000e100

004019e4 <SysTick_Config>:
    function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  4019e4:	b580      	push	{r7, lr}
  4019e6:	b082      	sub	sp, #8
  4019e8:	af00      	add	r7, sp, #0
  4019ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
  4019ec:	687b      	ldr	r3, [r7, #4]
  4019ee:	3b01      	subs	r3, #1
  4019f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
  4019f4:	d301      	bcc.n	4019fa <SysTick_Config+0x16>
  4019f6:	2301      	movs	r3, #1
  4019f8:	e00f      	b.n	401a1a <SysTick_Config+0x36>

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
  4019fa:	4a0a      	ldr	r2, [pc, #40]	; (401a24 <SysTick_Config+0x40>)
  4019fc:	687b      	ldr	r3, [r7, #4]
  4019fe:	3b01      	subs	r3, #1
  401a00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  401a02:	f04f 30ff 	mov.w	r0, #4294967295
  401a06:	2107      	movs	r1, #7
  401a08:	4b07      	ldr	r3, [pc, #28]	; (401a28 <SysTick_Config+0x44>)
  401a0a:	4798      	blx	r3
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
  401a0c:	4b05      	ldr	r3, [pc, #20]	; (401a24 <SysTick_Config+0x40>)
  401a0e:	2200      	movs	r2, #0
  401a10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
  401a12:	4b04      	ldr	r3, [pc, #16]	; (401a24 <SysTick_Config+0x40>)
  401a14:	2207      	movs	r2, #7
  401a16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
  401a18:	2300      	movs	r3, #0
}
  401a1a:	4618      	mov	r0, r3
  401a1c:	3708      	adds	r7, #8
  401a1e:	46bd      	mov	sp, r7
  401a20:	bd80      	pop	{r7, pc}
  401a22:	bf00      	nop
  401a24:	e000e010 	.word	0xe000e010
  401a28:	00401991 	.word	0x00401991

00401a2c <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  401a2c:	b480      	push	{r7}
  401a2e:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_4M_RC) {
		return OSC_MAINCK_4M_RC_HZ;
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_8M_RC) {
		return OSC_MAINCK_8M_RC_HZ;
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_12M_RC) {
		return OSC_MAINCK_12M_RC_HZ;
  401a30:	4b02      	ldr	r3, [pc, #8]	; (401a3c <sysclk_get_main_hz+0x10>)
#endif
	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  401a32:	4618      	mov	r0, r3
  401a34:	46bd      	mov	sp, r7
  401a36:	f85d 7b04 	ldr.w	r7, [sp], #4
  401a3a:	4770      	bx	lr
  401a3c:	00b71b00 	.word	0x00b71b00

00401a40 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
  401a40:	b580      	push	{r7, lr}
  401a42:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  401a44:	4b02      	ldr	r3, [pc, #8]	; (401a50 <sysclk_get_cpu_hz+0x10>)
  401a46:	4798      	blx	r3
  401a48:	4603      	mov	r3, r0
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  401a4a:	4618      	mov	r0, r3
  401a4c:	bd80      	pop	{r7, pc}
  401a4e:	bf00      	nop
  401a50:	00401a2d 	.word	0x00401a2d

00401a54 <sysclk_get_peripheral_hz>:
 * \brief Retrieves the current rate in Hz of the peripheral clocks.
 *
 * \return Frequency of the peripheral clocks, in Hz.
 */
static inline uint32_t sysclk_get_peripheral_hz(void)
{
  401a54:	b580      	push	{r7, lr}
  401a56:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  401a58:	4b02      	ldr	r3, [pc, #8]	; (401a64 <sysclk_get_peripheral_hz+0x10>)
  401a5a:	4798      	blx	r3
  401a5c:	4603      	mov	r3, r0
		(((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 : (1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos))) * CONFIG_SYSCLK_DIV);
}
  401a5e:	4618      	mov	r0, r3
  401a60:	bd80      	pop	{r7, pc}
  401a62:	bf00      	nop
  401a64:	00401a2d 	.word	0x00401a2d

00401a68 <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
  401a68:	b580      	push	{r7, lr}
  401a6a:	b082      	sub	sp, #8
  401a6c:	af00      	add	r7, sp, #0
  401a6e:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  401a70:	6878      	ldr	r0, [r7, #4]
  401a72:	4b02      	ldr	r3, [pc, #8]	; (401a7c <sysclk_enable_peripheral_clock+0x14>)
  401a74:	4798      	blx	r3
}
  401a76:	3708      	adds	r7, #8
  401a78:	46bd      	mov	sp, r7
  401a7a:	bd80      	pop	{r7, pc}
  401a7c:	00400c99 	.word	0x00400c99

00401a80 <ioport_toggle_pin_level>:
 * an output.
 *
 * \param pin IOPORT pin to toggle
 */
static inline void ioport_toggle_pin_level(ioport_pin_t pin)
{
  401a80:	b480      	push	{r7}
  401a82:	b08b      	sub	sp, #44	; 0x2c
  401a84:	af00      	add	r7, sp, #0
  401a86:	6078      	str	r0, [r7, #4]
  401a88:	687b      	ldr	r3, [r7, #4]
  401a8a:	627b      	str	r3, [r7, #36]	; 0x24
  401a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  401a8e:	623b      	str	r3, [r7, #32]
  401a90:	6a3b      	ldr	r3, [r7, #32]
  401a92:	61fb      	str	r3, [r7, #28]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  401a94:	69fb      	ldr	r3, [r7, #28]
  401a96:	095b      	lsrs	r3, r3, #5
  401a98:	61bb      	str	r3, [r7, #24]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  401a9a:	69ba      	ldr	r2, [r7, #24]
  401a9c:	4b12      	ldr	r3, [pc, #72]	; (401ae8 <ioport_toggle_pin_level+0x68>)
  401a9e:	4413      	add	r3, r2
  401aa0:	025b      	lsls	r3, r3, #9
	return arch_ioport_port_to_base(port)->PIO_PDSR & mask;
}

__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	Pio *port = arch_ioport_pin_to_base(pin);
  401aa2:	617b      	str	r3, [r7, #20]
  401aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  401aa6:	613b      	str	r3, [r7, #16]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  401aa8:	693b      	ldr	r3, [r7, #16]
  401aaa:	f003 031f 	and.w	r3, r3, #31
  401aae:	2201      	movs	r2, #1
  401ab0:	fa02 f303 	lsl.w	r3, r2, r3
}

__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	Pio *port = arch_ioport_pin_to_base(pin);
	ioport_port_mask_t mask = arch_ioport_pin_to_mask(pin);
  401ab4:	60fb      	str	r3, [r7, #12]

	if (port->PIO_PDSR & arch_ioport_pin_to_mask(pin)) {
  401ab6:	697b      	ldr	r3, [r7, #20]
  401ab8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
  401aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  401abc:	60bb      	str	r3, [r7, #8]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  401abe:	68bb      	ldr	r3, [r7, #8]
  401ac0:	f003 031f 	and.w	r3, r3, #31
  401ac4:	2101      	movs	r1, #1
  401ac6:	fa01 f303 	lsl.w	r3, r1, r3
__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	Pio *port = arch_ioport_pin_to_base(pin);
	ioport_port_mask_t mask = arch_ioport_pin_to_mask(pin);

	if (port->PIO_PDSR & arch_ioport_pin_to_mask(pin)) {
  401aca:	4013      	ands	r3, r2
  401acc:	2b00      	cmp	r3, #0
  401ace:	d003      	beq.n	401ad8 <ioport_toggle_pin_level+0x58>
		port->PIO_CODR = mask;
  401ad0:	697b      	ldr	r3, [r7, #20]
  401ad2:	68fa      	ldr	r2, [r7, #12]
  401ad4:	635a      	str	r2, [r3, #52]	; 0x34
  401ad6:	e002      	b.n	401ade <ioport_toggle_pin_level+0x5e>
	} else {
		port->PIO_SODR = mask;
  401ad8:	697b      	ldr	r3, [r7, #20]
  401ada:	68fa      	ldr	r2, [r7, #12]
  401adc:	631a      	str	r2, [r3, #48]	; 0x30
	arch_ioport_toggle_pin_level(pin);
}
  401ade:	372c      	adds	r7, #44	; 0x2c
  401ae0:	46bd      	mov	sp, r7
  401ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
  401ae6:	4770      	bx	lr
  401ae8:	00200707 	.word	0x00200707

00401aec <usart_serial_init>:
 * \param opt      Options needed to set up RS232 communication (see
 * \ref usart_options_t).
 */
static inline void usart_serial_init(usart_if p_usart,
		usart_serial_options_t *opt)
{
  401aec:	b580      	push	{r7, lr}
  401aee:	b08c      	sub	sp, #48	; 0x30
  401af0:	af00      	add	r7, sp, #0
  401af2:	6078      	str	r0, [r7, #4]
  401af4:	6039      	str	r1, [r7, #0]
#if ((!SAM4L) && (!SAMG55))
	sam_uart_opt_t uart_settings;
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
  401af6:	4b48      	ldr	r3, [pc, #288]	; (401c18 <usart_serial_init+0x12c>)
  401af8:	4798      	blx	r3
  401afa:	4603      	mov	r3, r0
  401afc:	627b      	str	r3, [r7, #36]	; 0x24
	uart_settings.ul_baudrate = opt->baudrate;
  401afe:	683b      	ldr	r3, [r7, #0]
  401b00:	681b      	ldr	r3, [r3, #0]
  401b02:	62bb      	str	r3, [r7, #40]	; 0x28
	uart_settings.ul_mode = opt->paritytype;
  401b04:	683b      	ldr	r3, [r7, #0]
  401b06:	689b      	ldr	r3, [r3, #8]
  401b08:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif

	sam_usart_opt_t usart_settings;
	usart_settings.baudrate = opt->baudrate;
  401b0a:	683b      	ldr	r3, [r7, #0]
  401b0c:	681b      	ldr	r3, [r3, #0]
  401b0e:	60fb      	str	r3, [r7, #12]
	usart_settings.char_length = opt->charlength;
  401b10:	683b      	ldr	r3, [r7, #0]
  401b12:	685b      	ldr	r3, [r3, #4]
  401b14:	613b      	str	r3, [r7, #16]
	usart_settings.parity_type = opt->paritytype;
  401b16:	683b      	ldr	r3, [r7, #0]
  401b18:	689b      	ldr	r3, [r3, #8]
  401b1a:	617b      	str	r3, [r7, #20]
	usart_settings.stop_bits= opt->stopbits;
  401b1c:	683b      	ldr	r3, [r7, #0]
  401b1e:	68db      	ldr	r3, [r3, #12]
  401b20:	61bb      	str	r3, [r7, #24]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
  401b22:	2300      	movs	r3, #0
  401b24:	61fb      	str	r3, [r7, #28]
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  401b26:	687b      	ldr	r3, [r7, #4]
  401b28:	4a3c      	ldr	r2, [pc, #240]	; (401c1c <usart_serial_init+0x130>)
  401b2a:	4293      	cmp	r3, r2
  401b2c:	d108      	bne.n	401b40 <usart_serial_init+0x54>
		sysclk_enable_peripheral_clock(ID_UART0);
  401b2e:	2007      	movs	r0, #7
  401b30:	4b3b      	ldr	r3, [pc, #236]	; (401c20 <usart_serial_init+0x134>)
  401b32:	4798      	blx	r3
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
  401b34:	f107 0324 	add.w	r3, r7, #36	; 0x24
  401b38:	6878      	ldr	r0, [r7, #4]
  401b3a:	4619      	mov	r1, r3
  401b3c:	4b39      	ldr	r3, [pc, #228]	; (401c24 <usart_serial_init+0x138>)
  401b3e:	4798      	blx	r3
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  401b40:	687b      	ldr	r3, [r7, #4]
  401b42:	4a39      	ldr	r2, [pc, #228]	; (401c28 <usart_serial_init+0x13c>)
  401b44:	4293      	cmp	r3, r2
  401b46:	d108      	bne.n	401b5a <usart_serial_init+0x6e>
		sysclk_enable_peripheral_clock(ID_UART1);
  401b48:	2008      	movs	r0, #8
  401b4a:	4b35      	ldr	r3, [pc, #212]	; (401c20 <usart_serial_init+0x134>)
  401b4c:	4798      	blx	r3
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
  401b4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
  401b52:	6878      	ldr	r0, [r7, #4]
  401b54:	4619      	mov	r1, r3
  401b56:	4b33      	ldr	r3, [pc, #204]	; (401c24 <usart_serial_init+0x138>)
  401b58:	4798      	blx	r3
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  401b5a:	687b      	ldr	r3, [r7, #4]
  401b5c:	4a33      	ldr	r2, [pc, #204]	; (401c2c <usart_serial_init+0x140>)
  401b5e:	4293      	cmp	r3, r2
  401b60:	d108      	bne.n	401b74 <usart_serial_init+0x88>
		sysclk_enable_peripheral_clock(ID_UART2);
  401b62:	202c      	movs	r0, #44	; 0x2c
  401b64:	4b2e      	ldr	r3, [pc, #184]	; (401c20 <usart_serial_init+0x134>)
  401b66:	4798      	blx	r3
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
  401b68:	f107 0324 	add.w	r3, r7, #36	; 0x24
  401b6c:	6878      	ldr	r0, [r7, #4]
  401b6e:	4619      	mov	r1, r3
  401b70:	4b2c      	ldr	r3, [pc, #176]	; (401c24 <usart_serial_init+0x138>)
  401b72:	4798      	blx	r3
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  401b74:	687b      	ldr	r3, [r7, #4]
  401b76:	4a2e      	ldr	r2, [pc, #184]	; (401c30 <usart_serial_init+0x144>)
  401b78:	4293      	cmp	r3, r2
  401b7a:	d108      	bne.n	401b8e <usart_serial_init+0xa2>
		sysclk_enable_peripheral_clock(ID_UART3);
  401b7c:	202d      	movs	r0, #45	; 0x2d
  401b7e:	4b28      	ldr	r3, [pc, #160]	; (401c20 <usart_serial_init+0x134>)
  401b80:	4798      	blx	r3
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
  401b82:	f107 0324 	add.w	r3, r7, #36	; 0x24
  401b86:	6878      	ldr	r0, [r7, #4]
  401b88:	4619      	mov	r1, r3
  401b8a:	4b26      	ldr	r3, [pc, #152]	; (401c24 <usart_serial_init+0x138>)
  401b8c:	4798      	blx	r3
		usart_enable_tx(p_usart);
		usart_enable_rx(p_usart);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  401b8e:	687b      	ldr	r3, [r7, #4]
  401b90:	4a28      	ldr	r2, [pc, #160]	; (401c34 <usart_serial_init+0x148>)
  401b92:	4293      	cmp	r3, r2
  401b94:	d111      	bne.n	401bba <usart_serial_init+0xce>
#if (!SAM4L)
#if (SAMG55)
		flexcom_enable(FLEXCOM0);
		flexcom_set_opmode(FLEXCOM0, FLEXCOM_USART);
#else
		sysclk_enable_peripheral_clock(ID_USART0);
  401b96:	200d      	movs	r0, #13
  401b98:	4b21      	ldr	r3, [pc, #132]	; (401c20 <usart_serial_init+0x134>)
  401b9a:	4798      	blx	r3
#endif
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
  401b9c:	4b1e      	ldr	r3, [pc, #120]	; (401c18 <usart_serial_init+0x12c>)
  401b9e:	4798      	blx	r3
  401ba0:	4602      	mov	r2, r0
  401ba2:	f107 030c 	add.w	r3, r7, #12
  401ba6:	6878      	ldr	r0, [r7, #4]
  401ba8:	4619      	mov	r1, r3
  401baa:	4b23      	ldr	r3, [pc, #140]	; (401c38 <usart_serial_init+0x14c>)
  401bac:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
  401bae:	6878      	ldr	r0, [r7, #4]
  401bb0:	4b22      	ldr	r3, [pc, #136]	; (401c3c <usart_serial_init+0x150>)
  401bb2:	4798      	blx	r3
		usart_enable_rx(p_usart);
  401bb4:	6878      	ldr	r0, [r7, #4]
  401bb6:	4b22      	ldr	r3, [pc, #136]	; (401c40 <usart_serial_init+0x154>)
  401bb8:	4798      	blx	r3
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  401bba:	687b      	ldr	r3, [r7, #4]
  401bbc:	4a21      	ldr	r2, [pc, #132]	; (401c44 <usart_serial_init+0x158>)
  401bbe:	4293      	cmp	r3, r2
  401bc0:	d111      	bne.n	401be6 <usart_serial_init+0xfa>
#if (!SAM4L)
#if (SAMG55)
		flexcom_enable(FLEXCOM1);
		flexcom_set_opmode(FLEXCOM1, FLEXCOM_USART);
#else
		sysclk_enable_peripheral_clock(ID_USART1);
  401bc2:	200e      	movs	r0, #14
  401bc4:	4b16      	ldr	r3, [pc, #88]	; (401c20 <usart_serial_init+0x134>)
  401bc6:	4798      	blx	r3
#endif
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
  401bc8:	4b13      	ldr	r3, [pc, #76]	; (401c18 <usart_serial_init+0x12c>)
  401bca:	4798      	blx	r3
  401bcc:	4602      	mov	r2, r0
  401bce:	f107 030c 	add.w	r3, r7, #12
  401bd2:	6878      	ldr	r0, [r7, #4]
  401bd4:	4619      	mov	r1, r3
  401bd6:	4b18      	ldr	r3, [pc, #96]	; (401c38 <usart_serial_init+0x14c>)
  401bd8:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
  401bda:	6878      	ldr	r0, [r7, #4]
  401bdc:	4b17      	ldr	r3, [pc, #92]	; (401c3c <usart_serial_init+0x150>)
  401bde:	4798      	blx	r3
		usart_enable_rx(p_usart);
  401be0:	6878      	ldr	r0, [r7, #4]
  401be2:	4b17      	ldr	r3, [pc, #92]	; (401c40 <usart_serial_init+0x154>)
  401be4:	4798      	blx	r3
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  401be6:	687b      	ldr	r3, [r7, #4]
  401be8:	4a17      	ldr	r2, [pc, #92]	; (401c48 <usart_serial_init+0x15c>)
  401bea:	4293      	cmp	r3, r2
  401bec:	d111      	bne.n	401c12 <usart_serial_init+0x126>
#if (!SAM4L)
#if (SAMG55)
		flexcom_enable(FLEXCOM2);
		flexcom_set_opmode(FLEXCOM2, FLEXCOM_USART);
#else
		sysclk_enable_peripheral_clock(ID_USART2);
  401bee:	200f      	movs	r0, #15
  401bf0:	4b0b      	ldr	r3, [pc, #44]	; (401c20 <usart_serial_init+0x134>)
  401bf2:	4798      	blx	r3
#endif
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
  401bf4:	4b08      	ldr	r3, [pc, #32]	; (401c18 <usart_serial_init+0x12c>)
  401bf6:	4798      	blx	r3
  401bf8:	4602      	mov	r2, r0
  401bfa:	f107 030c 	add.w	r3, r7, #12
  401bfe:	6878      	ldr	r0, [r7, #4]
  401c00:	4619      	mov	r1, r3
  401c02:	4b0d      	ldr	r3, [pc, #52]	; (401c38 <usart_serial_init+0x14c>)
  401c04:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
  401c06:	6878      	ldr	r0, [r7, #4]
  401c08:	4b0c      	ldr	r3, [pc, #48]	; (401c3c <usart_serial_init+0x150>)
  401c0a:	4798      	blx	r3
		usart_enable_rx(p_usart);
  401c0c:	6878      	ldr	r0, [r7, #4]
  401c0e:	4b0c      	ldr	r3, [pc, #48]	; (401c40 <usart_serial_init+0x154>)
  401c10:	4798      	blx	r3
	}
# endif

#endif /* ifdef USART */

}
  401c12:	3730      	adds	r7, #48	; 0x30
  401c14:	46bd      	mov	sp, r7
  401c16:	bd80      	pop	{r7, pc}
  401c18:	00401a55 	.word	0x00401a55
  401c1c:	400e0800 	.word	0x400e0800
  401c20:	00401a69 	.word	0x00401a69
  401c24:	00401045 	.word	0x00401045
  401c28:	400e0a00 	.word	0x400e0a00
  401c2c:	400e1a00 	.word	0x400e1a00
  401c30:	400e1c00 	.word	0x400e1c00
  401c34:	40024000 	.word	0x40024000
  401c38:	004011e1 	.word	0x004011e1
  401c3c:	00401265 	.word	0x00401265
  401c40:	004012b1 	.word	0x004012b1
  401c44:	40028000 	.word	0x40028000
  401c48:	4002c000 	.word	0x4002c000

00401c4c <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
  401c4c:	b580      	push	{r7, lr}
  401c4e:	b082      	sub	sp, #8
  401c50:	af00      	add	r7, sp, #0
  401c52:	6078      	str	r0, [r7, #4]
  401c54:	460b      	mov	r3, r1
  401c56:	70fb      	strb	r3, [r7, #3]
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  401c58:	687b      	ldr	r3, [r7, #4]
  401c5a:	4a36      	ldr	r2, [pc, #216]	; (401d34 <usart_serial_putchar+0xe8>)
  401c5c:	4293      	cmp	r3, r2
  401c5e:	d10a      	bne.n	401c76 <usart_serial_putchar+0x2a>
		while (uart_write((Uart*)p_usart, c)!=0);
  401c60:	bf00      	nop
  401c62:	78fb      	ldrb	r3, [r7, #3]
  401c64:	6878      	ldr	r0, [r7, #4]
  401c66:	4619      	mov	r1, r3
  401c68:	4b33      	ldr	r3, [pc, #204]	; (401d38 <usart_serial_putchar+0xec>)
  401c6a:	4798      	blx	r3
  401c6c:	4603      	mov	r3, r0
  401c6e:	2b00      	cmp	r3, #0
  401c70:	d1f7      	bne.n	401c62 <usart_serial_putchar+0x16>
		return 1;
  401c72:	2301      	movs	r3, #1
  401c74:	e05a      	b.n	401d2c <usart_serial_putchar+0xe0>
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  401c76:	687b      	ldr	r3, [r7, #4]
  401c78:	4a30      	ldr	r2, [pc, #192]	; (401d3c <usart_serial_putchar+0xf0>)
  401c7a:	4293      	cmp	r3, r2
  401c7c:	d10a      	bne.n	401c94 <usart_serial_putchar+0x48>
		while (uart_write((Uart*)p_usart, c)!=0);
  401c7e:	bf00      	nop
  401c80:	78fb      	ldrb	r3, [r7, #3]
  401c82:	6878      	ldr	r0, [r7, #4]
  401c84:	4619      	mov	r1, r3
  401c86:	4b2c      	ldr	r3, [pc, #176]	; (401d38 <usart_serial_putchar+0xec>)
  401c88:	4798      	blx	r3
  401c8a:	4603      	mov	r3, r0
  401c8c:	2b00      	cmp	r3, #0
  401c8e:	d1f7      	bne.n	401c80 <usart_serial_putchar+0x34>
		return 1;
  401c90:	2301      	movs	r3, #1
  401c92:	e04b      	b.n	401d2c <usart_serial_putchar+0xe0>
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  401c94:	687b      	ldr	r3, [r7, #4]
  401c96:	4a2a      	ldr	r2, [pc, #168]	; (401d40 <usart_serial_putchar+0xf4>)
  401c98:	4293      	cmp	r3, r2
  401c9a:	d10a      	bne.n	401cb2 <usart_serial_putchar+0x66>
		while (uart_write((Uart*)p_usart, c)!=0);
  401c9c:	bf00      	nop
  401c9e:	78fb      	ldrb	r3, [r7, #3]
  401ca0:	6878      	ldr	r0, [r7, #4]
  401ca2:	4619      	mov	r1, r3
  401ca4:	4b24      	ldr	r3, [pc, #144]	; (401d38 <usart_serial_putchar+0xec>)
  401ca6:	4798      	blx	r3
  401ca8:	4603      	mov	r3, r0
  401caa:	2b00      	cmp	r3, #0
  401cac:	d1f7      	bne.n	401c9e <usart_serial_putchar+0x52>
		return 1;
  401cae:	2301      	movs	r3, #1
  401cb0:	e03c      	b.n	401d2c <usart_serial_putchar+0xe0>
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  401cb2:	687b      	ldr	r3, [r7, #4]
  401cb4:	4a23      	ldr	r2, [pc, #140]	; (401d44 <usart_serial_putchar+0xf8>)
  401cb6:	4293      	cmp	r3, r2
  401cb8:	d10a      	bne.n	401cd0 <usart_serial_putchar+0x84>
		while (uart_write((Uart*)p_usart, c)!=0);
  401cba:	bf00      	nop
  401cbc:	78fb      	ldrb	r3, [r7, #3]
  401cbe:	6878      	ldr	r0, [r7, #4]
  401cc0:	4619      	mov	r1, r3
  401cc2:	4b1d      	ldr	r3, [pc, #116]	; (401d38 <usart_serial_putchar+0xec>)
  401cc4:	4798      	blx	r3
  401cc6:	4603      	mov	r3, r0
  401cc8:	2b00      	cmp	r3, #0
  401cca:	d1f7      	bne.n	401cbc <usart_serial_putchar+0x70>
		return 1;
  401ccc:	2301      	movs	r3, #1
  401cce:	e02d      	b.n	401d2c <usart_serial_putchar+0xe0>
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  401cd0:	687b      	ldr	r3, [r7, #4]
  401cd2:	4a1d      	ldr	r2, [pc, #116]	; (401d48 <usart_serial_putchar+0xfc>)
  401cd4:	4293      	cmp	r3, r2
  401cd6:	d10a      	bne.n	401cee <usart_serial_putchar+0xa2>
		while (usart_write(p_usart, c)!=0);
  401cd8:	bf00      	nop
  401cda:	78fb      	ldrb	r3, [r7, #3]
  401cdc:	6878      	ldr	r0, [r7, #4]
  401cde:	4619      	mov	r1, r3
  401ce0:	4b1a      	ldr	r3, [pc, #104]	; (401d4c <usart_serial_putchar+0x100>)
  401ce2:	4798      	blx	r3
  401ce4:	4603      	mov	r3, r0
  401ce6:	2b00      	cmp	r3, #0
  401ce8:	d1f7      	bne.n	401cda <usart_serial_putchar+0x8e>
		return 1;
  401cea:	2301      	movs	r3, #1
  401cec:	e01e      	b.n	401d2c <usart_serial_putchar+0xe0>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  401cee:	687b      	ldr	r3, [r7, #4]
  401cf0:	4a17      	ldr	r2, [pc, #92]	; (401d50 <usart_serial_putchar+0x104>)
  401cf2:	4293      	cmp	r3, r2
  401cf4:	d10a      	bne.n	401d0c <usart_serial_putchar+0xc0>
		while (usart_write(p_usart, c)!=0);
  401cf6:	bf00      	nop
  401cf8:	78fb      	ldrb	r3, [r7, #3]
  401cfa:	6878      	ldr	r0, [r7, #4]
  401cfc:	4619      	mov	r1, r3
  401cfe:	4b13      	ldr	r3, [pc, #76]	; (401d4c <usart_serial_putchar+0x100>)
  401d00:	4798      	blx	r3
  401d02:	4603      	mov	r3, r0
  401d04:	2b00      	cmp	r3, #0
  401d06:	d1f7      	bne.n	401cf8 <usart_serial_putchar+0xac>
		return 1;
  401d08:	2301      	movs	r3, #1
  401d0a:	e00f      	b.n	401d2c <usart_serial_putchar+0xe0>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  401d0c:	687b      	ldr	r3, [r7, #4]
  401d0e:	4a11      	ldr	r2, [pc, #68]	; (401d54 <usart_serial_putchar+0x108>)
  401d10:	4293      	cmp	r3, r2
  401d12:	d10a      	bne.n	401d2a <usart_serial_putchar+0xde>
		while (usart_write(p_usart, c)!=0);
  401d14:	bf00      	nop
  401d16:	78fb      	ldrb	r3, [r7, #3]
  401d18:	6878      	ldr	r0, [r7, #4]
  401d1a:	4619      	mov	r1, r3
  401d1c:	4b0b      	ldr	r3, [pc, #44]	; (401d4c <usart_serial_putchar+0x100>)
  401d1e:	4798      	blx	r3
  401d20:	4603      	mov	r3, r0
  401d22:	2b00      	cmp	r3, #0
  401d24:	d1f7      	bne.n	401d16 <usart_serial_putchar+0xca>
		return 1;
  401d26:	2301      	movs	r3, #1
  401d28:	e000      	b.n	401d2c <usart_serial_putchar+0xe0>
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
  401d2a:	2300      	movs	r3, #0
}
  401d2c:	4618      	mov	r0, r3
  401d2e:	3708      	adds	r7, #8
  401d30:	46bd      	mov	sp, r7
  401d32:	bd80      	pop	{r7, pc}
  401d34:	400e0800 	.word	0x400e0800
  401d38:	0040109d 	.word	0x0040109d
  401d3c:	400e0a00 	.word	0x400e0a00
  401d40:	400e1a00 	.word	0x400e1a00
  401d44:	400e1c00 	.word	0x400e1c00
  401d48:	40024000 	.word	0x40024000
  401d4c:	004013b9 	.word	0x004013b9
  401d50:	40028000 	.word	0x40028000
  401d54:	4002c000 	.word	0x4002c000

00401d58 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  401d58:	b580      	push	{r7, lr}
  401d5a:	b084      	sub	sp, #16
  401d5c:	af00      	add	r7, sp, #0
  401d5e:	6078      	str	r0, [r7, #4]
  401d60:	6039      	str	r1, [r7, #0]
	uint32_t val = 0;
  401d62:	2300      	movs	r3, #0
  401d64:	60fb      	str	r3, [r7, #12]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  401d66:	687b      	ldr	r3, [r7, #4]
  401d68:	4a33      	ldr	r2, [pc, #204]	; (401e38 <usart_serial_getchar+0xe0>)
  401d6a:	4293      	cmp	r3, r2
  401d6c:	d107      	bne.n	401d7e <usart_serial_getchar+0x26>
		while (uart_read((Uart*)p_usart, data));
  401d6e:	bf00      	nop
  401d70:	6878      	ldr	r0, [r7, #4]
  401d72:	6839      	ldr	r1, [r7, #0]
  401d74:	4b31      	ldr	r3, [pc, #196]	; (401e3c <usart_serial_getchar+0xe4>)
  401d76:	4798      	blx	r3
  401d78:	4603      	mov	r3, r0
  401d7a:	2b00      	cmp	r3, #0
  401d7c:	d1f8      	bne.n	401d70 <usart_serial_getchar+0x18>
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  401d7e:	687b      	ldr	r3, [r7, #4]
  401d80:	4a2f      	ldr	r2, [pc, #188]	; (401e40 <usart_serial_getchar+0xe8>)
  401d82:	4293      	cmp	r3, r2
  401d84:	d107      	bne.n	401d96 <usart_serial_getchar+0x3e>
		while (uart_read((Uart*)p_usart, data));
  401d86:	bf00      	nop
  401d88:	6878      	ldr	r0, [r7, #4]
  401d8a:	6839      	ldr	r1, [r7, #0]
  401d8c:	4b2b      	ldr	r3, [pc, #172]	; (401e3c <usart_serial_getchar+0xe4>)
  401d8e:	4798      	blx	r3
  401d90:	4603      	mov	r3, r0
  401d92:	2b00      	cmp	r3, #0
  401d94:	d1f8      	bne.n	401d88 <usart_serial_getchar+0x30>
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  401d96:	687b      	ldr	r3, [r7, #4]
  401d98:	4a2a      	ldr	r2, [pc, #168]	; (401e44 <usart_serial_getchar+0xec>)
  401d9a:	4293      	cmp	r3, r2
  401d9c:	d107      	bne.n	401dae <usart_serial_getchar+0x56>
		while (uart_read((Uart*)p_usart, data));
  401d9e:	bf00      	nop
  401da0:	6878      	ldr	r0, [r7, #4]
  401da2:	6839      	ldr	r1, [r7, #0]
  401da4:	4b25      	ldr	r3, [pc, #148]	; (401e3c <usart_serial_getchar+0xe4>)
  401da6:	4798      	blx	r3
  401da8:	4603      	mov	r3, r0
  401daa:	2b00      	cmp	r3, #0
  401dac:	d1f8      	bne.n	401da0 <usart_serial_getchar+0x48>
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  401dae:	687b      	ldr	r3, [r7, #4]
  401db0:	4a25      	ldr	r2, [pc, #148]	; (401e48 <usart_serial_getchar+0xf0>)
  401db2:	4293      	cmp	r3, r2
  401db4:	d107      	bne.n	401dc6 <usart_serial_getchar+0x6e>
		while (uart_read((Uart*)p_usart, data));
  401db6:	bf00      	nop
  401db8:	6878      	ldr	r0, [r7, #4]
  401dba:	6839      	ldr	r1, [r7, #0]
  401dbc:	4b1f      	ldr	r3, [pc, #124]	; (401e3c <usart_serial_getchar+0xe4>)
  401dbe:	4798      	blx	r3
  401dc0:	4603      	mov	r3, r0
  401dc2:	2b00      	cmp	r3, #0
  401dc4:	d1f8      	bne.n	401db8 <usart_serial_getchar+0x60>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  401dc6:	687b      	ldr	r3, [r7, #4]
  401dc8:	4a20      	ldr	r2, [pc, #128]	; (401e4c <usart_serial_getchar+0xf4>)
  401dca:	4293      	cmp	r3, r2
  401dcc:	d10d      	bne.n	401dea <usart_serial_getchar+0x92>
		while (usart_read(p_usart, &val));
  401dce:	bf00      	nop
  401dd0:	f107 030c 	add.w	r3, r7, #12
  401dd4:	6878      	ldr	r0, [r7, #4]
  401dd6:	4619      	mov	r1, r3
  401dd8:	4b1d      	ldr	r3, [pc, #116]	; (401e50 <usart_serial_getchar+0xf8>)
  401dda:	4798      	blx	r3
  401ddc:	4603      	mov	r3, r0
  401dde:	2b00      	cmp	r3, #0
  401de0:	d1f6      	bne.n	401dd0 <usart_serial_getchar+0x78>
		*data = (uint8_t)(val & 0xFF);
  401de2:	68fb      	ldr	r3, [r7, #12]
  401de4:	b2da      	uxtb	r2, r3
  401de6:	683b      	ldr	r3, [r7, #0]
  401de8:	701a      	strb	r2, [r3, #0]
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  401dea:	687b      	ldr	r3, [r7, #4]
  401dec:	4a19      	ldr	r2, [pc, #100]	; (401e54 <usart_serial_getchar+0xfc>)
  401dee:	4293      	cmp	r3, r2
  401df0:	d10d      	bne.n	401e0e <usart_serial_getchar+0xb6>
		while (usart_read(p_usart, &val));
  401df2:	bf00      	nop
  401df4:	f107 030c 	add.w	r3, r7, #12
  401df8:	6878      	ldr	r0, [r7, #4]
  401dfa:	4619      	mov	r1, r3
  401dfc:	4b14      	ldr	r3, [pc, #80]	; (401e50 <usart_serial_getchar+0xf8>)
  401dfe:	4798      	blx	r3
  401e00:	4603      	mov	r3, r0
  401e02:	2b00      	cmp	r3, #0
  401e04:	d1f6      	bne.n	401df4 <usart_serial_getchar+0x9c>
		*data = (uint8_t)(val & 0xFF);
  401e06:	68fb      	ldr	r3, [r7, #12]
  401e08:	b2da      	uxtb	r2, r3
  401e0a:	683b      	ldr	r3, [r7, #0]
  401e0c:	701a      	strb	r2, [r3, #0]
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  401e0e:	687b      	ldr	r3, [r7, #4]
  401e10:	4a11      	ldr	r2, [pc, #68]	; (401e58 <usart_serial_getchar+0x100>)
  401e12:	4293      	cmp	r3, r2
  401e14:	d10d      	bne.n	401e32 <usart_serial_getchar+0xda>
		while (usart_read(p_usart, &val));
  401e16:	bf00      	nop
  401e18:	f107 030c 	add.w	r3, r7, #12
  401e1c:	6878      	ldr	r0, [r7, #4]
  401e1e:	4619      	mov	r1, r3
  401e20:	4b0b      	ldr	r3, [pc, #44]	; (401e50 <usart_serial_getchar+0xf8>)
  401e22:	4798      	blx	r3
  401e24:	4603      	mov	r3, r0
  401e26:	2b00      	cmp	r3, #0
  401e28:	d1f6      	bne.n	401e18 <usart_serial_getchar+0xc0>
		*data = (uint8_t)(val & 0xFF);
  401e2a:	68fb      	ldr	r3, [r7, #12]
  401e2c:	b2da      	uxtb	r2, r3
  401e2e:	683b      	ldr	r3, [r7, #0]
  401e30:	701a      	strb	r2, [r3, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  401e32:	3710      	adds	r7, #16
  401e34:	46bd      	mov	sp, r7
  401e36:	bd80      	pop	{r7, pc}
  401e38:	400e0800 	.word	0x400e0800
  401e3c:	004010cd 	.word	0x004010cd
  401e40:	400e0a00 	.word	0x400e0a00
  401e44:	400e1a00 	.word	0x400e1a00
  401e48:	400e1c00 	.word	0x400e1c00
  401e4c:	40024000 	.word	0x40024000
  401e50:	004013ed 	.word	0x004013ed
  401e54:	40028000 	.word	0x40028000
  401e58:	4002c000 	.word	0x4002c000

00401e5c <stdio_serial_init>:
 * \param usart       Base address of the USART instance.
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
  401e5c:	b580      	push	{r7, lr}
  401e5e:	b082      	sub	sp, #8
  401e60:	af00      	add	r7, sp, #0
  401e62:	6078      	str	r0, [r7, #4]
  401e64:	6039      	str	r1, [r7, #0]
	stdio_base = (void *)usart;
  401e66:	4a0f      	ldr	r2, [pc, #60]	; (401ea4 <stdio_serial_init+0x48>)
  401e68:	687b      	ldr	r3, [r7, #4]
  401e6a:	6013      	str	r3, [r2, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  401e6c:	4b0e      	ldr	r3, [pc, #56]	; (401ea8 <stdio_serial_init+0x4c>)
  401e6e:	4a0f      	ldr	r2, [pc, #60]	; (401eac <stdio_serial_init+0x50>)
  401e70:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  401e72:	4b0f      	ldr	r3, [pc, #60]	; (401eb0 <stdio_serial_init+0x54>)
  401e74:	4a0f      	ldr	r2, [pc, #60]	; (401eb4 <stdio_serial_init+0x58>)
  401e76:	601a      	str	r2, [r3, #0]
# if (XMEGA || MEGA_RF)
	usart_serial_init((USART_t *)usart,opt);
# elif UC3
	usart_serial_init(usart,(usart_serial_options_t *)opt);
# elif SAM
	usart_serial_init((Usart *)usart,(usart_serial_options_t *)opt);
  401e78:	6878      	ldr	r0, [r7, #4]
  401e7a:	6839      	ldr	r1, [r7, #0]
  401e7c:	4b0e      	ldr	r3, [pc, #56]	; (401eb8 <stdio_serial_init+0x5c>)
  401e7e:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  401e80:	4b0e      	ldr	r3, [pc, #56]	; (401ebc <stdio_serial_init+0x60>)
  401e82:	681b      	ldr	r3, [r3, #0]
  401e84:	689b      	ldr	r3, [r3, #8]
  401e86:	4618      	mov	r0, r3
  401e88:	2100      	movs	r1, #0
  401e8a:	4b0d      	ldr	r3, [pc, #52]	; (401ec0 <stdio_serial_init+0x64>)
  401e8c:	4798      	blx	r3
	setbuf(stdin, NULL);
  401e8e:	4b0b      	ldr	r3, [pc, #44]	; (401ebc <stdio_serial_init+0x60>)
  401e90:	681b      	ldr	r3, [r3, #0]
  401e92:	685b      	ldr	r3, [r3, #4]
  401e94:	4618      	mov	r0, r3
  401e96:	2100      	movs	r1, #0
  401e98:	4b09      	ldr	r3, [pc, #36]	; (401ec0 <stdio_serial_init+0x64>)
  401e9a:	4798      	blx	r3
	// and AVR GCC library:
	// - printf() emits one character at a time.
	// - getchar() requests only 1 byte to exit.
#  endif
# endif
}
  401e9c:	3708      	adds	r7, #8
  401e9e:	46bd      	mov	sp, r7
  401ea0:	bd80      	pop	{r7, pc}
  401ea2:	bf00      	nop
  401ea4:	20400998 	.word	0x20400998
  401ea8:	20400994 	.word	0x20400994
  401eac:	00401c4d 	.word	0x00401c4d
  401eb0:	20400990 	.word	0x20400990
  401eb4:	00401d59 	.word	0x00401d59
  401eb8:	00401aed 	.word	0x00401aed
  401ebc:	204004a8 	.word	0x204004a8
  401ec0:	0040255d 	.word	0x0040255d

00401ec4 <mdelay>:
 * by the SAM microcontroller system tick).
 *
 * \param ul_dly_ticks  Delay to wait for, in milliseconds.
 */
void mdelay(uint32_t ul_dly_ticks)
{
  401ec4:	b480      	push	{r7}
  401ec6:	b085      	sub	sp, #20
  401ec8:	af00      	add	r7, sp, #0
  401eca:	6078      	str	r0, [r7, #4]
	uint32_t ul_cur_ticks;

	ul_cur_ticks = ul_ms_ticks;
  401ecc:	4b07      	ldr	r3, [pc, #28]	; (401eec <mdelay+0x28>)
  401ece:	681b      	ldr	r3, [r3, #0]
  401ed0:	60fb      	str	r3, [r7, #12]
	while ((ul_ms_ticks - ul_cur_ticks) < ul_dly_ticks) {
  401ed2:	bf00      	nop
  401ed4:	4b05      	ldr	r3, [pc, #20]	; (401eec <mdelay+0x28>)
  401ed6:	681a      	ldr	r2, [r3, #0]
  401ed8:	68fb      	ldr	r3, [r7, #12]
  401eda:	1ad2      	subs	r2, r2, r3
  401edc:	687b      	ldr	r3, [r7, #4]
  401ede:	429a      	cmp	r2, r3
  401ee0:	d3f8      	bcc.n	401ed4 <mdelay+0x10>
	}
}
  401ee2:	3714      	adds	r7, #20
  401ee4:	46bd      	mov	sp, r7
  401ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
  401eea:	4770      	bx	lr
  401eec:	20400958 	.word	0x20400958

00401ef0 <SysTick_Handler>:
 *
 *  Process System Tick Event.
 *  Increment the ul_ms_ticks counter.
 */
void SysTick_Handler(void)
{
  401ef0:	b480      	push	{r7}
  401ef2:	af00      	add	r7, sp, #0
	g_ul_tick_count++;
  401ef4:	4b06      	ldr	r3, [pc, #24]	; (401f10 <SysTick_Handler+0x20>)
  401ef6:	681b      	ldr	r3, [r3, #0]
  401ef8:	3301      	adds	r3, #1
  401efa:	4a05      	ldr	r2, [pc, #20]	; (401f10 <SysTick_Handler+0x20>)
  401efc:	6013      	str	r3, [r2, #0]
	ul_ms_ticks++; //jsi 6feb16
  401efe:	4b05      	ldr	r3, [pc, #20]	; (401f14 <SysTick_Handler+0x24>)
  401f00:	681b      	ldr	r3, [r3, #0]
  401f02:	3301      	adds	r3, #1
  401f04:	4a03      	ldr	r2, [pc, #12]	; (401f14 <SysTick_Handler+0x24>)
  401f06:	6013      	str	r3, [r2, #0]
}
  401f08:	46bd      	mov	sp, r7
  401f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
  401f0e:	4770      	bx	lr
  401f10:	2040099c 	.word	0x2040099c
  401f14:	20400958 	.word	0x20400958

00401f18 <USART0_Handler>:
/**
 *  \brief Handler for USART interrupt.
 *
 */
void USART_Handler(void)
{
  401f18:	b580      	push	{r7, lr}
  401f1a:	b082      	sub	sp, #8
  401f1c:	af00      	add	r7, sp, #0
	uint32_t ul_status;
	uint8_t uc_char;

	/* Read USART status. */
	ul_status = usart_get_status(BOARD_USART);
  401f1e:	481b      	ldr	r0, [pc, #108]	; (401f8c <USART0_Handler+0x74>)
  401f20:	4b1b      	ldr	r3, [pc, #108]	; (401f90 <USART0_Handler+0x78>)
  401f22:	4798      	blx	r3
  401f24:	6078      	str	r0, [r7, #4]

	/*transmit interrupt rises*/
	if(ul_status & (US_IER_TXRDY | US_IER_TXEMPTY)) {
  401f26:	687a      	ldr	r2, [r7, #4]
  401f28:	f240 2302 	movw	r3, #514	; 0x202
  401f2c:	4013      	ands	r3, r2
  401f2e:	2b00      	cmp	r3, #0
  401f30:	d004      	beq.n	401f3c <USART0_Handler+0x24>
		usart_disable_interrupt(BOARD_USART, (US_IER_TXRDY | US_IER_TXEMPTY));
  401f32:	4816      	ldr	r0, [pc, #88]	; (401f8c <USART0_Handler+0x74>)
  401f34:	f240 2102 	movw	r1, #514	; 0x202
  401f38:	4b16      	ldr	r3, [pc, #88]	; (401f94 <USART0_Handler+0x7c>)
  401f3a:	4798      	blx	r3
	}

	/*receive interrupt rise, store character to receiver buffer*/
	if((g_state == RECEIVING) && (usart_read(BOARD_USART, (uint32_t *)&uc_char) == 0)) {
  401f3c:	4b16      	ldr	r3, [pc, #88]	; (401f98 <USART0_Handler+0x80>)
  401f3e:	781b      	ldrb	r3, [r3, #0]
  401f40:	b2db      	uxtb	r3, r3
  401f42:	2b02      	cmp	r3, #2
  401f44:	d11f      	bne.n	401f86 <USART0_Handler+0x6e>
  401f46:	1cfb      	adds	r3, r7, #3
  401f48:	4810      	ldr	r0, [pc, #64]	; (401f8c <USART0_Handler+0x74>)
  401f4a:	4619      	mov	r1, r3
  401f4c:	4b13      	ldr	r3, [pc, #76]	; (401f9c <USART0_Handler+0x84>)
  401f4e:	4798      	blx	r3
  401f50:	4603      	mov	r3, r0
  401f52:	2b00      	cmp	r3, #0
  401f54:	d117      	bne.n	401f86 <USART0_Handler+0x6e>
		*p_revdata++ = uc_char;
  401f56:	4b12      	ldr	r3, [pc, #72]	; (401fa0 <USART0_Handler+0x88>)
  401f58:	681b      	ldr	r3, [r3, #0]
  401f5a:	1c5a      	adds	r2, r3, #1
  401f5c:	4910      	ldr	r1, [pc, #64]	; (401fa0 <USART0_Handler+0x88>)
  401f5e:	600a      	str	r2, [r1, #0]
  401f60:	78fa      	ldrb	r2, [r7, #3]
  401f62:	701a      	strb	r2, [r3, #0]
		g_ulcount++;
  401f64:	4b0f      	ldr	r3, [pc, #60]	; (401fa4 <USART0_Handler+0x8c>)
  401f66:	681b      	ldr	r3, [r3, #0]
  401f68:	3301      	adds	r3, #1
  401f6a:	4a0e      	ldr	r2, [pc, #56]	; (401fa4 <USART0_Handler+0x8c>)
  401f6c:	6013      	str	r3, [r2, #0]
		if(g_ulcount >= BUFFER_SIZE) {
  401f6e:	4b0d      	ldr	r3, [pc, #52]	; (401fa4 <USART0_Handler+0x8c>)
  401f70:	681b      	ldr	r3, [r3, #0]
  401f72:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
  401f76:	d306      	bcc.n	401f86 <USART0_Handler+0x6e>
			g_state = RECEIVED;
  401f78:	4b07      	ldr	r3, [pc, #28]	; (401f98 <USART0_Handler+0x80>)
  401f7a:	2203      	movs	r2, #3
  401f7c:	701a      	strb	r2, [r3, #0]
			usart_disable_interrupt(BOARD_USART, US_IER_RXRDY);
  401f7e:	4803      	ldr	r0, [pc, #12]	; (401f8c <USART0_Handler+0x74>)
  401f80:	2101      	movs	r1, #1
  401f82:	4b04      	ldr	r3, [pc, #16]	; (401f94 <USART0_Handler+0x7c>)
  401f84:	4798      	blx	r3
		}
	}
}
  401f86:	3708      	adds	r7, #8
  401f88:	46bd      	mov	sp, r7
  401f8a:	bd80      	pop	{r7, pc}
  401f8c:	40024000 	.word	0x40024000
  401f90:	00401319 	.word	0x00401319
  401f94:	004012fd 	.word	0x004012fd
  401f98:	20400950 	.word	0x20400950
  401f9c:	004013ed 	.word	0x004013ed
  401fa0:	20400004 	.word	0x20400004
  401fa4:	20400954 	.word	0x20400954

00401fa8 <configure_usart>:
 *
 *  Configure USART in RS485 mode, asynchronous, 8 bits, 1 stop bit,
 *  no parity, 256000 bauds and enable its transmitter and receiver.
 */
static void configure_usart(void)
{
  401fa8:	b5b0      	push	{r4, r5, r7, lr}
  401faa:	b086      	sub	sp, #24
  401fac:	af00      	add	r7, sp, #0
	const sam_usart_opt_t usart_console_settings = {
  401fae:	4b14      	ldr	r3, [pc, #80]	; (402000 <configure_usart+0x58>)
  401fb0:	463c      	mov	r4, r7
  401fb2:	461d      	mov	r5, r3
  401fb4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  401fb6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  401fb8:	e895 0003 	ldmia.w	r5, {r0, r1}
  401fbc:	e884 0003 	stmia.w	r4, {r0, r1}
		/* This field is only used in IrDA mode. */
		0
	};

	/* Enable the peripheral clock in the PMC. */
	sysclk_enable_peripheral_clock(BOARD_ID_USART);
  401fc0:	200d      	movs	r0, #13
  401fc2:	4b10      	ldr	r3, [pc, #64]	; (402004 <configure_usart+0x5c>)
  401fc4:	4798      	blx	r3

	/* Configure USART in RS485 mode. */
//jsi 7feb16 we want rs232 not rs485 for our application	usart_init_rs485(BOARD_USART, &usart_console_settings,
//jsi 7feb16 we want rs232 not rs485 for our application			sysclk_get_cpu_hz());
			
	usart_init_rs232(BOARD_USART, &usart_console_settings, sysclk_get_cpu_hz());
  401fc6:	4b10      	ldr	r3, [pc, #64]	; (402008 <configure_usart+0x60>)
  401fc8:	4798      	blx	r3
  401fca:	4602      	mov	r2, r0
  401fcc:	463b      	mov	r3, r7
  401fce:	480f      	ldr	r0, [pc, #60]	; (40200c <configure_usart+0x64>)
  401fd0:	4619      	mov	r1, r3
  401fd2:	4b0f      	ldr	r3, [pc, #60]	; (402010 <configure_usart+0x68>)
  401fd4:	4798      	blx	r3

	/* enable transmitter timeguard, 4 bit period delay. */
	usart_set_tx_timeguard(BOARD_USART, 4);
  401fd6:	480d      	ldr	r0, [pc, #52]	; (40200c <configure_usart+0x64>)
  401fd8:	2104      	movs	r1, #4
  401fda:	4b0e      	ldr	r3, [pc, #56]	; (402014 <configure_usart+0x6c>)
  401fdc:	4798      	blx	r3

	/* Disable all the interrupts. */
	usart_disable_interrupt(BOARD_USART, ALL_INTERRUPT_MASK);
  401fde:	480b      	ldr	r0, [pc, #44]	; (40200c <configure_usart+0x64>)
  401fe0:	f04f 31ff 	mov.w	r1, #4294967295
  401fe4:	4b0c      	ldr	r3, [pc, #48]	; (402018 <configure_usart+0x70>)
  401fe6:	4798      	blx	r3

	/* Enable TX & RX function. */
	usart_enable_tx(BOARD_USART);
  401fe8:	4808      	ldr	r0, [pc, #32]	; (40200c <configure_usart+0x64>)
  401fea:	4b0c      	ldr	r3, [pc, #48]	; (40201c <configure_usart+0x74>)
  401fec:	4798      	blx	r3
	usart_enable_rx(BOARD_USART);
  401fee:	4807      	ldr	r0, [pc, #28]	; (40200c <configure_usart+0x64>)
  401ff0:	4b0b      	ldr	r3, [pc, #44]	; (402020 <configure_usart+0x78>)
  401ff2:	4798      	blx	r3

	/* Configure and enable interrupt of USART. */
	NVIC_EnableIRQ(USART_IRQn);
  401ff4:	200d      	movs	r0, #13
  401ff6:	4b0b      	ldr	r3, [pc, #44]	; (402024 <configure_usart+0x7c>)
  401ff8:	4798      	blx	r3
}
  401ffa:	3718      	adds	r7, #24
  401ffc:	46bd      	mov	sp, r7
  401ffe:	bdb0      	pop	{r4, r5, r7, pc}
  402000:	00404058 	.word	0x00404058
  402004:	00401a69 	.word	0x00401a69
  402008:	00401a41 	.word	0x00401a41
  40200c:	40024000 	.word	0x40024000
  402010:	004011e1 	.word	0x004011e1
  402014:	00401295 	.word	0x00401295
  402018:	004012fd 	.word	0x004012fd
  40201c:	00401265 	.word	0x00401265
  402020:	004012b1 	.word	0x004012b1
  402024:	00401961 	.word	0x00401961

00402028 <configure_systick>:

/**
 *  Configure system tick to generate an interrupt every 1ms.
 */
static void configure_systick(void)
{
  402028:	b580      	push	{r7, lr}
  40202a:	b082      	sub	sp, #8
  40202c:	af00      	add	r7, sp, #0
	uint32_t ul_flag;

	ul_flag = SysTick_Config(sysclk_get_cpu_hz() / SYS_TICK_FREQ);
  40202e:	4b0a      	ldr	r3, [pc, #40]	; (402058 <configure_systick+0x30>)
  402030:	4798      	blx	r3
  402032:	4602      	mov	r2, r0
  402034:	4b09      	ldr	r3, [pc, #36]	; (40205c <configure_systick+0x34>)
  402036:	fba3 2302 	umull	r2, r3, r3, r2
  40203a:	099b      	lsrs	r3, r3, #6
  40203c:	4618      	mov	r0, r3
  40203e:	4b08      	ldr	r3, [pc, #32]	; (402060 <configure_systick+0x38>)
  402040:	4798      	blx	r3
  402042:	6078      	str	r0, [r7, #4]
	if (ul_flag) {
  402044:	687b      	ldr	r3, [r7, #4]
  402046:	2b00      	cmp	r3, #0
  402048:	d003      	beq.n	402052 <configure_systick+0x2a>
		puts("-F- Systick configuration error\r");
  40204a:	4806      	ldr	r0, [pc, #24]	; (402064 <configure_systick+0x3c>)
  40204c:	4b06      	ldr	r3, [pc, #24]	; (402068 <configure_systick+0x40>)
  40204e:	4798      	blx	r3
		while (1) {
		}
  402050:	e7fe      	b.n	402050 <configure_systick+0x28>
	}
}
  402052:	3708      	adds	r7, #8
  402054:	46bd      	mov	sp, r7
  402056:	bd80      	pop	{r7, pc}
  402058:	00401a41 	.word	0x00401a41
  40205c:	10624dd3 	.word	0x10624dd3
  402060:	004019e5 	.word	0x004019e5
  402064:	00404070 	.word	0x00404070
  402068:	0040254d 	.word	0x0040254d

0040206c <configure_console>:

/**
 *  Configure UART for debug message output.
 */
static void configure_console(void)
{
  40206c:	b590      	push	{r4, r7, lr}
  40206e:	b085      	sub	sp, #20
  402070:	af00      	add	r7, sp, #0
	const usart_serial_options_t uart_serial_options = {
  402072:	4b08      	ldr	r3, [pc, #32]	; (402094 <configure_console+0x28>)
  402074:	463c      	mov	r4, r7
  402076:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  402078:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		.stopbits = CONF_UART_STOP_BITS,
#endif
	};

	/* Configure console UART. */
	sysclk_enable_peripheral_clock(CONSOLE_UART_ID);
  40207c:	2007      	movs	r0, #7
  40207e:	4b06      	ldr	r3, [pc, #24]	; (402098 <configure_console+0x2c>)
  402080:	4798      	blx	r3
	stdio_serial_init(CONF_UART, &uart_serial_options);
  402082:	463b      	mov	r3, r7
  402084:	4805      	ldr	r0, [pc, #20]	; (40209c <configure_console+0x30>)
  402086:	4619      	mov	r1, r3
  402088:	4b05      	ldr	r3, [pc, #20]	; (4020a0 <configure_console+0x34>)
  40208a:	4798      	blx	r3
}
  40208c:	3714      	adds	r7, #20
  40208e:	46bd      	mov	sp, r7
  402090:	bd90      	pop	{r4, r7, pc}
  402092:	bf00      	nop
  402094:	00404094 	.word	0x00404094
  402098:	00401a69 	.word	0x00401a69
  40209c:	400e0800 	.word	0x400e0800
  4020a0:	00401e5d 	.word	0x00401e5d

004020a4 <func_transmit>:
* \param *p_buff  data to be transmitted
* \param ulsize size of all data.
*
*/
static uint8_t func_transmit(const uint8_t *p_buff, uint32_t ulsize)
{
  4020a4:	b580      	push	{r7, lr}
  4020a6:	b082      	sub	sp, #8
  4020a8:	af00      	add	r7, sp, #0
  4020aa:	6078      	str	r0, [r7, #4]
  4020ac:	6039      	str	r1, [r7, #0]
	Assert(p_buff);

	while(ulsize > 0) {
  4020ae:	e013      	b.n	4020d8 <func_transmit+0x34>
		if(0 == usart_write(BOARD_USART, *p_buff)){
  4020b0:	687b      	ldr	r3, [r7, #4]
  4020b2:	781b      	ldrb	r3, [r3, #0]
  4020b4:	4810      	ldr	r0, [pc, #64]	; (4020f8 <func_transmit+0x54>)
  4020b6:	4619      	mov	r1, r3
  4020b8:	4b10      	ldr	r3, [pc, #64]	; (4020fc <func_transmit+0x58>)
  4020ba:	4798      	blx	r3
  4020bc:	4603      	mov	r3, r0
  4020be:	2b00      	cmp	r3, #0
  4020c0:	d10a      	bne.n	4020d8 <func_transmit+0x34>
			usart_enable_interrupt(BOARD_USART, US_IER_TXRDY | US_IER_TXEMPTY);
  4020c2:	480d      	ldr	r0, [pc, #52]	; (4020f8 <func_transmit+0x54>)
  4020c4:	f240 2102 	movw	r1, #514	; 0x202
  4020c8:	4b0d      	ldr	r3, [pc, #52]	; (402100 <func_transmit+0x5c>)
  4020ca:	4798      	blx	r3
			ulsize--;
  4020cc:	683b      	ldr	r3, [r7, #0]
  4020ce:	3b01      	subs	r3, #1
  4020d0:	603b      	str	r3, [r7, #0]
			p_buff++;
  4020d2:	687b      	ldr	r3, [r7, #4]
  4020d4:	3301      	adds	r3, #1
  4020d6:	607b      	str	r3, [r7, #4]
*/
static uint8_t func_transmit(const uint8_t *p_buff, uint32_t ulsize)
{
	Assert(p_buff);

	while(ulsize > 0) {
  4020d8:	683b      	ldr	r3, [r7, #0]
  4020da:	2b00      	cmp	r3, #0
  4020dc:	d1e8      	bne.n	4020b0 <func_transmit+0xc>
			ulsize--;
			p_buff++;
		}
	}

	while(!usart_is_tx_empty(BOARD_USART)) {
  4020de:	bf00      	nop
  4020e0:	4805      	ldr	r0, [pc, #20]	; (4020f8 <func_transmit+0x54>)
  4020e2:	4b08      	ldr	r3, [pc, #32]	; (402104 <func_transmit+0x60>)
  4020e4:	4798      	blx	r3
  4020e6:	4603      	mov	r3, r0
  4020e8:	2b00      	cmp	r3, #0
  4020ea:	d0f9      	beq.n	4020e0 <func_transmit+0x3c>
		;  /*waiting for transmit over*/
	}

	return 0;
  4020ec:	2300      	movs	r3, #0
}
  4020ee:	4618      	mov	r0, r3
  4020f0:	3708      	adds	r7, #8
  4020f2:	46bd      	mov	sp, r7
  4020f4:	bd80      	pop	{r7, pc}
  4020f6:	bf00      	nop
  4020f8:	40024000 	.word	0x40024000
  4020fc:	004013b9 	.word	0x004013b9
  402100:	004012e1 	.word	0x004012e1
  402104:	00401369 	.word	0x00401369

00402108 <twi_init>:
	}
}

static void twi_init(void);
static void twi_init(void)
{
  402108:	b580      	push	{r7, lr}
  40210a:	b084      	sub	sp, #16
  40210c:	af00      	add	r7, sp, #0
	twihs_options_t opt;

	/* Enable the peripheral clock for TWI */
	pmc_enable_periph_clk(ID_TWIHS0);
  40210e:	2013      	movs	r0, #19
  402110:	4b09      	ldr	r3, [pc, #36]	; (402138 <twi_init+0x30>)
  402112:	4798      	blx	r3

	/* Configure the options of TWI driver */
	opt.master_clk = sysclk_get_cpu_hz();
  402114:	4b09      	ldr	r3, [pc, #36]	; (40213c <twi_init+0x34>)
  402116:	4798      	blx	r3
  402118:	4603      	mov	r3, r0
  40211a:	607b      	str	r3, [r7, #4]
	opt.speed      = TWIHS_CLK; //400KHz
  40211c:	4b08      	ldr	r3, [pc, #32]	; (402140 <twi_init+0x38>)
  40211e:	60bb      	str	r3, [r7, #8]

	if (twihs_master_init(ID_TWIHS0, &opt) != TWIHS_SUCCESS) {
  402120:	1d3b      	adds	r3, r7, #4
  402122:	2013      	movs	r0, #19
  402124:	4619      	mov	r1, r3
  402126:	4b07      	ldr	r3, [pc, #28]	; (402144 <twi_init+0x3c>)
  402128:	4798      	blx	r3
  40212a:	4603      	mov	r3, r0
  40212c:	2b00      	cmp	r3, #0
  40212e:	d000      	beq.n	402132 <twi_init+0x2a>
		while (1) {
			/* Capture error */
		}
  402130:	e7fe      	b.n	402130 <twi_init+0x28>
	}
}
  402132:	3710      	adds	r7, #16
  402134:	46bd      	mov	sp, r7
  402136:	bd80      	pop	{r7, pc}
  402138:	00400c99 	.word	0x00400c99
  40213c:	00401a41 	.word	0x00401a41
  402140:	00061a80 	.word	0x00061a80
  402144:	00400d41 	.word	0x00400d41

00402148 <main>:
 */

#  define EXAMPLE_LED_GPIO    LED0_GPIO

int main(void) //6feb16 this version of main has been hacked up for only exactly what we need
{
  402148:	b580      	push	{r7, lr}
  40214a:	b088      	sub	sp, #32
  40214c:	af00      	add	r7, sp, #0
	char		txBuf[11] = {0,0,0,0,0,0,0,0,0,0,0}, rxByte;
  40214e:	2300      	movs	r3, #0
  402150:	723b      	strb	r3, [r7, #8]
  402152:	2300      	movs	r3, #0
  402154:	727b      	strb	r3, [r7, #9]
  402156:	2300      	movs	r3, #0
  402158:	72bb      	strb	r3, [r7, #10]
  40215a:	2300      	movs	r3, #0
  40215c:	72fb      	strb	r3, [r7, #11]
  40215e:	2300      	movs	r3, #0
  402160:	733b      	strb	r3, [r7, #12]
  402162:	2300      	movs	r3, #0
  402164:	737b      	strb	r3, [r7, #13]
  402166:	2300      	movs	r3, #0
  402168:	73bb      	strb	r3, [r7, #14]
  40216a:	2300      	movs	r3, #0
  40216c:	73fb      	strb	r3, [r7, #15]
  40216e:	2300      	movs	r3, #0
  402170:	743b      	strb	r3, [r7, #16]
  402172:	2300      	movs	r3, #0
  402174:	747b      	strb	r3, [r7, #17]
  402176:	2300      	movs	r3, #0
  402178:	74bb      	strb	r3, [r7, #18]
	uint32_t	i;	
	uint32_t	time_elapsed = 0;
  40217a:	2300      	movs	r3, #0
  40217c:	617b      	str	r3, [r7, #20]
	uint32_t	ul_i;
	uint8_t		displayState = 0;
  40217e:	2300      	movs	r3, #0
  402180:	76fb      	strb	r3, [r7, #27]
	uint8_t		charCount = 0;
  402182:	2300      	movs	r3, #0
  402184:	76bb      	strb	r3, [r7, #26]

	/* Initialize the SAM system. */
	sysclk_init();
  402186:	4b81      	ldr	r3, [pc, #516]	; (40238c <main+0x244>)
  402188:	4798      	blx	r3
	board_init();
  40218a:	4b81      	ldr	r3, [pc, #516]	; (402390 <main+0x248>)
  40218c:	4798      	blx	r3

	/* Configure UART for blue scrolling display */
	configure_console();
  40218e:	4b81      	ldr	r3, [pc, #516]	; (402394 <main+0x24c>)
  402190:	4798      	blx	r3

	/* Configure USART. */
	configure_usart();
  402192:	4b81      	ldr	r3, [pc, #516]	; (402398 <main+0x250>)
  402194:	4798      	blx	r3

	/* 1ms tick. */
	configure_systick();
  402196:	4b81      	ldr	r3, [pc, #516]	; (40239c <main+0x254>)
  402198:	4798      	blx	r3


	twi_init();
  40219a:	4b81      	ldr	r3, [pc, #516]	; (4023a0 <main+0x258>)
  40219c:	4798      	blx	r3

//make this ecII jsi 7feb16	gpio_set_pin_high(ECLAVE_LED_OEn); //make sure outputs are disabled at the chip level

	PCA9952_init();
  40219e:	4b81      	ldr	r3, [pc, #516]	; (4023a4 <main+0x25c>)
  4021a0:	4798      	blx	r3
	
	/*
	 * Enable transmitter here, and disable receiver first, to avoid receiving
	 * characters sent by itself. It's necessary for half duplex RS485.
	 */
	usart_enable_tx(BOARD_USART);
  4021a2:	4881      	ldr	r0, [pc, #516]	; (4023a8 <main+0x260>)
  4021a4:	4b81      	ldr	r3, [pc, #516]	; (4023ac <main+0x264>)
  4021a6:	4798      	blx	r3
	usart_enable_rx(BOARD_USART);
  4021a8:	487f      	ldr	r0, [pc, #508]	; (4023a8 <main+0x260>)
  4021aa:	4b81      	ldr	r3, [pc, #516]	; (4023b0 <main+0x268>)
  4021ac:	4798      	blx	r3

	while (1) {

		/* Test the debug LED */
		ioport_toggle_pin_level(EXAMPLE_LED_GPIO);
  4021ae:	2050      	movs	r0, #80	; 0x50
  4021b0:	4b80      	ldr	r3, [pc, #512]	; (4023b4 <main+0x26c>)
  4021b2:	4798      	blx	r3


		/* Test the debug usart rx and tx */
		for (i=0; i<70; i++) //7 seconds
  4021b4:	2300      	movs	r3, #0
  4021b6:	61fb      	str	r3, [r7, #28]
  4021b8:	e015      	b.n	4021e6 <main+0x9e>
		{
			mdelay(100);
  4021ba:	2064      	movs	r0, #100	; 0x64
  4021bc:	4b7e      	ldr	r3, [pc, #504]	; (4023b8 <main+0x270>)
  4021be:	4798      	blx	r3
		
			if (usart_is_rx_ready(BOARD_USART)) {
  4021c0:	4879      	ldr	r0, [pc, #484]	; (4023a8 <main+0x260>)
  4021c2:	4b7e      	ldr	r3, [pc, #504]	; (4023bc <main+0x274>)
  4021c4:	4798      	blx	r3
  4021c6:	4603      	mov	r3, r0
  4021c8:	2b00      	cmp	r3, #0
  4021ca:	d009      	beq.n	4021e0 <main+0x98>
				usart_read(BOARD_USART, (uint32_t *)&rxByte);
  4021cc:	1dfb      	adds	r3, r7, #7
  4021ce:	4876      	ldr	r0, [pc, #472]	; (4023a8 <main+0x260>)
  4021d0:	4619      	mov	r1, r3
  4021d2:	4b7b      	ldr	r3, [pc, #492]	; (4023c0 <main+0x278>)
  4021d4:	4798      	blx	r3
				func_transmit(&rxByte, 1);
  4021d6:	1dfb      	adds	r3, r7, #7
  4021d8:	4618      	mov	r0, r3
  4021da:	2101      	movs	r1, #1
  4021dc:	4b79      	ldr	r3, [pc, #484]	; (4023c4 <main+0x27c>)
  4021de:	4798      	blx	r3
		/* Test the debug LED */
		ioport_toggle_pin_level(EXAMPLE_LED_GPIO);


		/* Test the debug usart rx and tx */
		for (i=0; i<70; i++) //7 seconds
  4021e0:	69fb      	ldr	r3, [r7, #28]
  4021e2:	3301      	adds	r3, #1
  4021e4:	61fb      	str	r3, [r7, #28]
  4021e6:	69fb      	ldr	r3, [r7, #28]
  4021e8:	2b45      	cmp	r3, #69	; 0x45
  4021ea:	d9e6      	bls.n	4021ba <main+0x72>
				func_transmit(&rxByte, 1);
			}
		}

		/* Test the scrolling blue LED display */
		for (charCount = 0; charCount < 7; charCount++)
  4021ec:	2300      	movs	r3, #0
  4021ee:	76bb      	strb	r3, [r7, #26]
  4021f0:	e054      	b.n	40229c <main+0x154>
		{
			unsigned char temp;
			temp = (*(cmdPtrArray[displayState]+charCount));
  4021f2:	7efb      	ldrb	r3, [r7, #27]
  4021f4:	4a74      	ldr	r2, [pc, #464]	; (4023c8 <main+0x280>)
  4021f6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
  4021fa:	7ebb      	ldrb	r3, [r7, #26]
  4021fc:	4413      	add	r3, r2
  4021fe:	781b      	ldrb	r3, [r3, #0]
  402200:	74fb      	strb	r3, [r7, #19]
			putchar(temp);
  402202:	4b72      	ldr	r3, [pc, #456]	; (4023cc <main+0x284>)
  402204:	681b      	ldr	r3, [r3, #0]
  402206:	689b      	ldr	r3, [r3, #8]
  402208:	689a      	ldr	r2, [r3, #8]
  40220a:	3a01      	subs	r2, #1
  40220c:	609a      	str	r2, [r3, #8]
  40220e:	689b      	ldr	r3, [r3, #8]
  402210:	2b00      	cmp	r3, #0
  402212:	da34      	bge.n	40227e <main+0x136>
  402214:	4b6d      	ldr	r3, [pc, #436]	; (4023cc <main+0x284>)
  402216:	681b      	ldr	r3, [r3, #0]
  402218:	689b      	ldr	r3, [r3, #8]
  40221a:	689a      	ldr	r2, [r3, #8]
  40221c:	4b6b      	ldr	r3, [pc, #428]	; (4023cc <main+0x284>)
  40221e:	681b      	ldr	r3, [r3, #0]
  402220:	689b      	ldr	r3, [r3, #8]
  402222:	699b      	ldr	r3, [r3, #24]
  402224:	429a      	cmp	r2, r3
  402226:	db1e      	blt.n	402266 <main+0x11e>
  402228:	4b68      	ldr	r3, [pc, #416]	; (4023cc <main+0x284>)
  40222a:	681b      	ldr	r3, [r3, #0]
  40222c:	689b      	ldr	r3, [r3, #8]
  40222e:	681b      	ldr	r3, [r3, #0]
  402230:	7cfa      	ldrb	r2, [r7, #19]
  402232:	701a      	strb	r2, [r3, #0]
  402234:	4b65      	ldr	r3, [pc, #404]	; (4023cc <main+0x284>)
  402236:	681b      	ldr	r3, [r3, #0]
  402238:	689b      	ldr	r3, [r3, #8]
  40223a:	681b      	ldr	r3, [r3, #0]
  40223c:	781b      	ldrb	r3, [r3, #0]
  40223e:	2b0a      	cmp	r3, #10
  402240:	d006      	beq.n	402250 <main+0x108>
  402242:	4b62      	ldr	r3, [pc, #392]	; (4023cc <main+0x284>)
  402244:	681b      	ldr	r3, [r3, #0]
  402246:	689b      	ldr	r3, [r3, #8]
  402248:	681a      	ldr	r2, [r3, #0]
  40224a:	3201      	adds	r2, #1
  40224c:	601a      	str	r2, [r3, #0]
  40224e:	e022      	b.n	402296 <main+0x14e>
  402250:	4b5e      	ldr	r3, [pc, #376]	; (4023cc <main+0x284>)
  402252:	681a      	ldr	r2, [r3, #0]
  402254:	4b5d      	ldr	r3, [pc, #372]	; (4023cc <main+0x284>)
  402256:	681b      	ldr	r3, [r3, #0]
  402258:	689b      	ldr	r3, [r3, #8]
  40225a:	4610      	mov	r0, r2
  40225c:	210a      	movs	r1, #10
  40225e:	461a      	mov	r2, r3
  402260:	4b5b      	ldr	r3, [pc, #364]	; (4023d0 <main+0x288>)
  402262:	4798      	blx	r3
  402264:	e017      	b.n	402296 <main+0x14e>
  402266:	4b59      	ldr	r3, [pc, #356]	; (4023cc <main+0x284>)
  402268:	6819      	ldr	r1, [r3, #0]
  40226a:	7cfa      	ldrb	r2, [r7, #19]
  40226c:	4b57      	ldr	r3, [pc, #348]	; (4023cc <main+0x284>)
  40226e:	681b      	ldr	r3, [r3, #0]
  402270:	689b      	ldr	r3, [r3, #8]
  402272:	4608      	mov	r0, r1
  402274:	4611      	mov	r1, r2
  402276:	461a      	mov	r2, r3
  402278:	4b55      	ldr	r3, [pc, #340]	; (4023d0 <main+0x288>)
  40227a:	4798      	blx	r3
  40227c:	e00b      	b.n	402296 <main+0x14e>
  40227e:	4b53      	ldr	r3, [pc, #332]	; (4023cc <main+0x284>)
  402280:	681b      	ldr	r3, [r3, #0]
  402282:	689b      	ldr	r3, [r3, #8]
  402284:	681b      	ldr	r3, [r3, #0]
  402286:	7cfa      	ldrb	r2, [r7, #19]
  402288:	701a      	strb	r2, [r3, #0]
  40228a:	4b50      	ldr	r3, [pc, #320]	; (4023cc <main+0x284>)
  40228c:	681b      	ldr	r3, [r3, #0]
  40228e:	689b      	ldr	r3, [r3, #8]
  402290:	681a      	ldr	r2, [r3, #0]
  402292:	3201      	adds	r2, #1
  402294:	601a      	str	r2, [r3, #0]
				func_transmit(&rxByte, 1);
			}
		}

		/* Test the scrolling blue LED display */
		for (charCount = 0; charCount < 7; charCount++)
  402296:	7ebb      	ldrb	r3, [r7, #26]
  402298:	3301      	adds	r3, #1
  40229a:	76bb      	strb	r3, [r7, #26]
  40229c:	7ebb      	ldrb	r3, [r7, #26]
  40229e:	2b06      	cmp	r3, #6
  4022a0:	d9a7      	bls.n	4021f2 <main+0xaa>
			putchar(temp);
		}
		
		/* Test the debug port */

		switch (displayState)
  4022a2:	7efb      	ldrb	r3, [r7, #27]
  4022a4:	2b08      	cmp	r3, #8
  4022a6:	d85b      	bhi.n	402360 <main+0x218>
  4022a8:	a201      	add	r2, pc, #4	; (adr r2, 4022b0 <main+0x168>)
  4022aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4022ae:	bf00      	nop
  4022b0:	004022d5 	.word	0x004022d5
  4022b4:	004022e5 	.word	0x004022e5
  4022b8:	004022f5 	.word	0x004022f5
  4022bc:	00402309 	.word	0x00402309
  4022c0:	00402319 	.word	0x00402319
  4022c4:	00402329 	.word	0x00402329
  4022c8:	00402337 	.word	0x00402337
  4022cc:	00402345 	.word	0x00402345
  4022d0:	00402353 	.word	0x00402353
		{
			case IDX_READY:
				sprintf(txBuf, "Ready\r\n");
  4022d4:	f107 0308 	add.w	r3, r7, #8
  4022d8:	4a3e      	ldr	r2, [pc, #248]	; (4023d4 <main+0x28c>)
  4022da:	e892 0003 	ldmia.w	r2, {r0, r1}
  4022de:	e883 0003 	stmia.w	r3, {r0, r1}
				break;
  4022e2:	e03d      	b.n	402360 <main+0x218>
			case IDX_CLEAN:
				sprintf(txBuf, "Clean\r\n");
  4022e4:	f107 0308 	add.w	r3, r7, #8
  4022e8:	4a3b      	ldr	r2, [pc, #236]	; (4023d8 <main+0x290>)
  4022ea:	e892 0003 	ldmia.w	r2, {r0, r1}
  4022ee:	e883 0003 	stmia.w	r3, {r0, r1}
				break;
  4022f2:	e035      	b.n	402360 <main+0x218>
			case IDX_CLEANING:
				sprintf(txBuf, "Cleaning\r\n");
  4022f4:	4a39      	ldr	r2, [pc, #228]	; (4023dc <main+0x294>)
  4022f6:	f107 0308 	add.w	r3, r7, #8
  4022fa:	ca07      	ldmia	r2, {r0, r1, r2}
  4022fc:	c303      	stmia	r3!, {r0, r1}
  4022fe:	801a      	strh	r2, [r3, #0]
  402300:	3302      	adds	r3, #2
  402302:	0c12      	lsrs	r2, r2, #16
  402304:	701a      	strb	r2, [r3, #0]
				break;
  402306:	e02b      	b.n	402360 <main+0x218>
			case IDX_DIRTY:
				sprintf(txBuf, "Dirty\r\n");
  402308:	f107 0308 	add.w	r3, r7, #8
  40230c:	4a34      	ldr	r2, [pc, #208]	; (4023e0 <main+0x298>)
  40230e:	e892 0003 	ldmia.w	r2, {r0, r1}
  402312:	e883 0003 	stmia.w	r3, {r0, r1}
				break;
  402316:	e023      	b.n	402360 <main+0x218>
			case IDX_ERROR:
				sprintf(txBuf, "Error\r\n");
  402318:	f107 0308 	add.w	r3, r7, #8
  40231c:	4a31      	ldr	r2, [pc, #196]	; (4023e4 <main+0x29c>)
  40231e:	e892 0003 	ldmia.w	r2, {r0, r1}
  402322:	e883 0003 	stmia.w	r3, {r0, r1}
				break;
  402326:	e01b      	b.n	402360 <main+0x218>
			case IDX_SHELF1:
				sprintf(txBuf, "Shelf1\r\n");
  402328:	f107 0308 	add.w	r3, r7, #8
  40232c:	4a2e      	ldr	r2, [pc, #184]	; (4023e8 <main+0x2a0>)
  40232e:	ca07      	ldmia	r2, {r0, r1, r2}
  402330:	c303      	stmia	r3!, {r0, r1}
  402332:	701a      	strb	r2, [r3, #0]
				break;
  402334:	e014      	b.n	402360 <main+0x218>
			case IDX_SHELF2:
				sprintf(txBuf, "Shelf2\r\n");
  402336:	f107 0308 	add.w	r3, r7, #8
  40233a:	4a2c      	ldr	r2, [pc, #176]	; (4023ec <main+0x2a4>)
  40233c:	ca07      	ldmia	r2, {r0, r1, r2}
  40233e:	c303      	stmia	r3!, {r0, r1}
  402340:	701a      	strb	r2, [r3, #0]
				break;
  402342:	e00d      	b.n	402360 <main+0x218>
			case IDX_SHELF3:
				sprintf(txBuf, "Shelf3\r\n");
  402344:	f107 0308 	add.w	r3, r7, #8
  402348:	4a29      	ldr	r2, [pc, #164]	; (4023f0 <main+0x2a8>)
  40234a:	ca07      	ldmia	r2, {r0, r1, r2}
  40234c:	c303      	stmia	r3!, {r0, r1}
  40234e:	701a      	strb	r2, [r3, #0]
				break;
  402350:	e006      	b.n	402360 <main+0x218>
			case IDX_SHELF4:
				sprintf(txBuf, "Shelf4\r\n");
  402352:	f107 0308 	add.w	r3, r7, #8
  402356:	4a27      	ldr	r2, [pc, #156]	; (4023f4 <main+0x2ac>)
  402358:	ca07      	ldmia	r2, {r0, r1, r2}
  40235a:	c303      	stmia	r3!, {r0, r1}
  40235c:	701a      	strb	r2, [r3, #0]
				break;
  40235e:	bf00      	nop
		}
		
		func_transmit(txBuf, strlen(txBuf));
  402360:	f107 0308 	add.w	r3, r7, #8
  402364:	4618      	mov	r0, r3
  402366:	4b24      	ldr	r3, [pc, #144]	; (4023f8 <main+0x2b0>)
  402368:	4798      	blx	r3
  40236a:	4602      	mov	r2, r0
  40236c:	f107 0308 	add.w	r3, r7, #8
  402370:	4618      	mov	r0, r3
  402372:	4611      	mov	r1, r2
  402374:	4b13      	ldr	r3, [pc, #76]	; (4023c4 <main+0x27c>)
  402376:	4798      	blx	r3


		if ((++displayState) > 8)
  402378:	7efb      	ldrb	r3, [r7, #27]
  40237a:	3301      	adds	r3, #1
  40237c:	76fb      	strb	r3, [r7, #27]
  40237e:	7efb      	ldrb	r3, [r7, #27]
  402380:	2b08      	cmp	r3, #8
  402382:	d901      	bls.n	402388 <main+0x240>
		{
			displayState = 0;
  402384:	2300      	movs	r3, #0
  402386:	76fb      	strb	r3, [r7, #27]
		}
		
		
	}
  402388:	e711      	b.n	4021ae <main+0x66>
  40238a:	bf00      	nop
  40238c:	004002e5 	.word	0x004002e5
  402390:	00400895 	.word	0x00400895
  402394:	0040206d 	.word	0x0040206d
  402398:	00401fa9 	.word	0x00401fa9
  40239c:	00402029 	.word	0x00402029
  4023a0:	00402109 	.word	0x00402109
  4023a4:	00401891 	.word	0x00401891
  4023a8:	40024000 	.word	0x40024000
  4023ac:	00401265 	.word	0x00401265
  4023b0:	004012b1 	.word	0x004012b1
  4023b4:	00401a81 	.word	0x00401a81
  4023b8:	00401ec5 	.word	0x00401ec5
  4023bc:	00401391 	.word	0x00401391
  4023c0:	004013ed 	.word	0x004013ed
  4023c4:	004020a5 	.word	0x004020a5
  4023c8:	20400058 	.word	0x20400058
  4023cc:	204004a8 	.word	0x204004a8
  4023d0:	004026c5 	.word	0x004026c5
  4023d4:	004040a8 	.word	0x004040a8
  4023d8:	004040b0 	.word	0x004040b0
  4023dc:	004040f8 	.word	0x004040f8
  4023e0:	004040b8 	.word	0x004040b8
  4023e4:	004040c0 	.word	0x004040c0
  4023e8:	004040c8 	.word	0x004040c8
  4023ec:	004040d4 	.word	0x004040d4
  4023f0:	004040e0 	.word	0x004040e0
  4023f4:	004040ec 	.word	0x004040ec
  4023f8:	00402669 	.word	0x00402669

004023fc <__libc_init_array>:
  4023fc:	b570      	push	{r4, r5, r6, lr}
  4023fe:	4e0f      	ldr	r6, [pc, #60]	; (40243c <__libc_init_array+0x40>)
  402400:	4d0f      	ldr	r5, [pc, #60]	; (402440 <__libc_init_array+0x44>)
  402402:	1b76      	subs	r6, r6, r5
  402404:	10b6      	asrs	r6, r6, #2
  402406:	bf18      	it	ne
  402408:	2400      	movne	r4, #0
  40240a:	d005      	beq.n	402418 <__libc_init_array+0x1c>
  40240c:	3401      	adds	r4, #1
  40240e:	f855 3b04 	ldr.w	r3, [r5], #4
  402412:	4798      	blx	r3
  402414:	42a6      	cmp	r6, r4
  402416:	d1f9      	bne.n	40240c <__libc_init_array+0x10>
  402418:	4e0a      	ldr	r6, [pc, #40]	; (402444 <__libc_init_array+0x48>)
  40241a:	f001 feef 	bl	4041fc <_init>
  40241e:	4d0a      	ldr	r5, [pc, #40]	; (402448 <__libc_init_array+0x4c>)
  402420:	1b76      	subs	r6, r6, r5
  402422:	10b6      	asrs	r6, r6, #2
  402424:	bf18      	it	ne
  402426:	2400      	movne	r4, #0
  402428:	d006      	beq.n	402438 <__libc_init_array+0x3c>
  40242a:	3401      	adds	r4, #1
  40242c:	f855 3b04 	ldr.w	r3, [r5], #4
  402430:	4798      	blx	r3
  402432:	42a6      	cmp	r6, r4
  402434:	d1f9      	bne.n	40242a <__libc_init_array+0x2e>
  402436:	bd70      	pop	{r4, r5, r6, pc}
  402438:	bd70      	pop	{r4, r5, r6, pc}
  40243a:	bf00      	nop
  40243c:	00404208 	.word	0x00404208
  402440:	00404208 	.word	0x00404208
  402444:	00404210 	.word	0x00404210
  402448:	00404208 	.word	0x00404208

0040244c <memset>:
  40244c:	0783      	lsls	r3, r0, #30
  40244e:	b470      	push	{r4, r5, r6}
  402450:	d049      	beq.n	4024e6 <memset+0x9a>
  402452:	1e54      	subs	r4, r2, #1
  402454:	2a00      	cmp	r2, #0
  402456:	d044      	beq.n	4024e2 <memset+0x96>
  402458:	b2cd      	uxtb	r5, r1
  40245a:	4603      	mov	r3, r0
  40245c:	e002      	b.n	402464 <memset+0x18>
  40245e:	2c00      	cmp	r4, #0
  402460:	d03f      	beq.n	4024e2 <memset+0x96>
  402462:	4614      	mov	r4, r2
  402464:	f803 5b01 	strb.w	r5, [r3], #1
  402468:	f013 0f03 	tst.w	r3, #3
  40246c:	f104 32ff 	add.w	r2, r4, #4294967295
  402470:	d1f5      	bne.n	40245e <memset+0x12>
  402472:	2c03      	cmp	r4, #3
  402474:	d92e      	bls.n	4024d4 <memset+0x88>
  402476:	b2cd      	uxtb	r5, r1
  402478:	2c0f      	cmp	r4, #15
  40247a:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  40247e:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  402482:	d919      	bls.n	4024b8 <memset+0x6c>
  402484:	f103 0210 	add.w	r2, r3, #16
  402488:	4626      	mov	r6, r4
  40248a:	3e10      	subs	r6, #16
  40248c:	f842 5c10 	str.w	r5, [r2, #-16]
  402490:	f842 5c0c 	str.w	r5, [r2, #-12]
  402494:	3210      	adds	r2, #16
  402496:	2e0f      	cmp	r6, #15
  402498:	f842 5c18 	str.w	r5, [r2, #-24]
  40249c:	f842 5c14 	str.w	r5, [r2, #-20]
  4024a0:	d8f3      	bhi.n	40248a <memset+0x3e>
  4024a2:	f1a4 0210 	sub.w	r2, r4, #16
  4024a6:	f004 040f 	and.w	r4, r4, #15
  4024aa:	f022 020f 	bic.w	r2, r2, #15
  4024ae:	2c03      	cmp	r4, #3
  4024b0:	f102 0210 	add.w	r2, r2, #16
  4024b4:	4413      	add	r3, r2
  4024b6:	d90d      	bls.n	4024d4 <memset+0x88>
  4024b8:	461e      	mov	r6, r3
  4024ba:	4622      	mov	r2, r4
  4024bc:	3a04      	subs	r2, #4
  4024be:	f846 5b04 	str.w	r5, [r6], #4
  4024c2:	2a03      	cmp	r2, #3
  4024c4:	d8fa      	bhi.n	4024bc <memset+0x70>
  4024c6:	1f22      	subs	r2, r4, #4
  4024c8:	f004 0403 	and.w	r4, r4, #3
  4024cc:	f022 0203 	bic.w	r2, r2, #3
  4024d0:	3204      	adds	r2, #4
  4024d2:	4413      	add	r3, r2
  4024d4:	b12c      	cbz	r4, 4024e2 <memset+0x96>
  4024d6:	b2c9      	uxtb	r1, r1
  4024d8:	441c      	add	r4, r3
  4024da:	f803 1b01 	strb.w	r1, [r3], #1
  4024de:	42a3      	cmp	r3, r4
  4024e0:	d1fb      	bne.n	4024da <memset+0x8e>
  4024e2:	bc70      	pop	{r4, r5, r6}
  4024e4:	4770      	bx	lr
  4024e6:	4614      	mov	r4, r2
  4024e8:	4603      	mov	r3, r0
  4024ea:	e7c2      	b.n	402472 <memset+0x26>

004024ec <_puts_r>:
  4024ec:	b5f0      	push	{r4, r5, r6, r7, lr}
  4024ee:	4604      	mov	r4, r0
  4024f0:	b089      	sub	sp, #36	; 0x24
  4024f2:	4608      	mov	r0, r1
  4024f4:	460d      	mov	r5, r1
  4024f6:	f000 f8b7 	bl	402668 <strlen>
  4024fa:	68a3      	ldr	r3, [r4, #8]
  4024fc:	2701      	movs	r7, #1
  4024fe:	2102      	movs	r1, #2
  402500:	899a      	ldrh	r2, [r3, #12]
  402502:	ae04      	add	r6, sp, #16
  402504:	eb00 0c07 	add.w	ip, r0, r7
  402508:	f8df e03c 	ldr.w	lr, [pc, #60]	; 402548 <_puts_r+0x5c>
  40250c:	9102      	str	r1, [sp, #8]
  40250e:	0491      	lsls	r1, r2, #18
  402510:	9504      	str	r5, [sp, #16]
  402512:	9005      	str	r0, [sp, #20]
  402514:	f8cd c00c 	str.w	ip, [sp, #12]
  402518:	f8cd e018 	str.w	lr, [sp, #24]
  40251c:	9707      	str	r7, [sp, #28]
  40251e:	9601      	str	r6, [sp, #4]
  402520:	d406      	bmi.n	402530 <_puts_r+0x44>
  402522:	6e59      	ldr	r1, [r3, #100]	; 0x64
  402524:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  402528:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  40252c:	819a      	strh	r2, [r3, #12]
  40252e:	6659      	str	r1, [r3, #100]	; 0x64
  402530:	4620      	mov	r0, r4
  402532:	4619      	mov	r1, r3
  402534:	aa01      	add	r2, sp, #4
  402536:	f000 fc0f 	bl	402d58 <__sfvwrite_r>
  40253a:	2800      	cmp	r0, #0
  40253c:	bf14      	ite	ne
  40253e:	f04f 30ff 	movne.w	r0, #4294967295
  402542:	200a      	moveq	r0, #10
  402544:	b009      	add	sp, #36	; 0x24
  402546:	bdf0      	pop	{r4, r5, r6, r7, pc}
  402548:	004041f8 	.word	0x004041f8

0040254c <puts>:
  40254c:	4b02      	ldr	r3, [pc, #8]	; (402558 <puts+0xc>)
  40254e:	4601      	mov	r1, r0
  402550:	6818      	ldr	r0, [r3, #0]
  402552:	f7ff bfcb 	b.w	4024ec <_puts_r>
  402556:	bf00      	nop
  402558:	204004a8 	.word	0x204004a8

0040255c <setbuf>:
  40255c:	2900      	cmp	r1, #0
  40255e:	f44f 6380 	mov.w	r3, #1024	; 0x400
  402562:	bf0c      	ite	eq
  402564:	2202      	moveq	r2, #2
  402566:	2200      	movne	r2, #0
  402568:	f000 b800 	b.w	40256c <setvbuf>

0040256c <setvbuf>:
  40256c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  402570:	4e3b      	ldr	r6, [pc, #236]	; (402660 <setvbuf+0xf4>)
  402572:	4604      	mov	r4, r0
  402574:	460d      	mov	r5, r1
  402576:	4690      	mov	r8, r2
  402578:	6837      	ldr	r7, [r6, #0]
  40257a:	461e      	mov	r6, r3
  40257c:	b117      	cbz	r7, 402584 <setvbuf+0x18>
  40257e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
  402580:	2b00      	cmp	r3, #0
  402582:	d03f      	beq.n	402604 <setvbuf+0x98>
  402584:	f1b8 0f02 	cmp.w	r8, #2
  402588:	d832      	bhi.n	4025f0 <setvbuf+0x84>
  40258a:	ea5f 79d6 	movs.w	r9, r6, lsr #31
  40258e:	d12f      	bne.n	4025f0 <setvbuf+0x84>
  402590:	4621      	mov	r1, r4
  402592:	4638      	mov	r0, r7
  402594:	f000 fa00 	bl	402998 <_fflush_r>
  402598:	89a1      	ldrh	r1, [r4, #12]
  40259a:	f8c4 9004 	str.w	r9, [r4, #4]
  40259e:	060b      	lsls	r3, r1, #24
  4025a0:	f8c4 9018 	str.w	r9, [r4, #24]
  4025a4:	d428      	bmi.n	4025f8 <setvbuf+0x8c>
  4025a6:	f021 0183 	bic.w	r1, r1, #131	; 0x83
  4025aa:	f1b8 0f02 	cmp.w	r8, #2
  4025ae:	b289      	uxth	r1, r1
  4025b0:	81a1      	strh	r1, [r4, #12]
  4025b2:	d02b      	beq.n	40260c <setvbuf+0xa0>
  4025b4:	2d00      	cmp	r5, #0
  4025b6:	d037      	beq.n	402628 <setvbuf+0xbc>
  4025b8:	f1b8 0f01 	cmp.w	r8, #1
  4025bc:	d012      	beq.n	4025e4 <setvbuf+0x78>
  4025be:	b289      	uxth	r1, r1
  4025c0:	4b28      	ldr	r3, [pc, #160]	; (402664 <setvbuf+0xf8>)
  4025c2:	f001 0008 	and.w	r0, r1, #8
  4025c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  4025c8:	6025      	str	r5, [r4, #0]
  4025ca:	b280      	uxth	r0, r0
  4025cc:	6125      	str	r5, [r4, #16]
  4025ce:	6166      	str	r6, [r4, #20]
  4025d0:	b180      	cbz	r0, 4025f4 <setvbuf+0x88>
  4025d2:	f011 0f03 	tst.w	r1, #3
  4025d6:	f04f 0000 	mov.w	r0, #0
  4025da:	bf18      	it	ne
  4025dc:	4606      	movne	r6, r0
  4025de:	60a6      	str	r6, [r4, #8]
  4025e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4025e4:	f041 0101 	orr.w	r1, r1, #1
  4025e8:	4273      	negs	r3, r6
  4025ea:	81a1      	strh	r1, [r4, #12]
  4025ec:	61a3      	str	r3, [r4, #24]
  4025ee:	e7e6      	b.n	4025be <setvbuf+0x52>
  4025f0:	f04f 30ff 	mov.w	r0, #4294967295
  4025f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4025f8:	6921      	ldr	r1, [r4, #16]
  4025fa:	4638      	mov	r0, r7
  4025fc:	f000 fad4 	bl	402ba8 <_free_r>
  402600:	89a1      	ldrh	r1, [r4, #12]
  402602:	e7d0      	b.n	4025a6 <setvbuf+0x3a>
  402604:	4638      	mov	r0, r7
  402606:	f000 fa61 	bl	402acc <__sinit>
  40260a:	e7bb      	b.n	402584 <setvbuf+0x18>
  40260c:	2000      	movs	r0, #0
  40260e:	f104 0343 	add.w	r3, r4, #67	; 0x43
  402612:	f041 0102 	orr.w	r1, r1, #2
  402616:	2500      	movs	r5, #0
  402618:	2201      	movs	r2, #1
  40261a:	81a1      	strh	r1, [r4, #12]
  40261c:	60a5      	str	r5, [r4, #8]
  40261e:	6023      	str	r3, [r4, #0]
  402620:	6123      	str	r3, [r4, #16]
  402622:	6162      	str	r2, [r4, #20]
  402624:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  402628:	2e00      	cmp	r6, #0
  40262a:	bf08      	it	eq
  40262c:	f44f 6680 	moveq.w	r6, #1024	; 0x400
  402630:	4630      	mov	r0, r6
  402632:	f000 fdbd 	bl	4031b0 <malloc>
  402636:	4605      	mov	r5, r0
  402638:	b128      	cbz	r0, 402646 <setvbuf+0xda>
  40263a:	89a1      	ldrh	r1, [r4, #12]
  40263c:	f041 0180 	orr.w	r1, r1, #128	; 0x80
  402640:	b289      	uxth	r1, r1
  402642:	81a1      	strh	r1, [r4, #12]
  402644:	e7b8      	b.n	4025b8 <setvbuf+0x4c>
  402646:	f44f 6080 	mov.w	r0, #1024	; 0x400
  40264a:	f000 fdb1 	bl	4031b0 <malloc>
  40264e:	4605      	mov	r5, r0
  402650:	b918      	cbnz	r0, 40265a <setvbuf+0xee>
  402652:	89a1      	ldrh	r1, [r4, #12]
  402654:	f04f 30ff 	mov.w	r0, #4294967295
  402658:	e7d9      	b.n	40260e <setvbuf+0xa2>
  40265a:	f44f 6680 	mov.w	r6, #1024	; 0x400
  40265e:	e7ec      	b.n	40263a <setvbuf+0xce>
  402660:	204004a8 	.word	0x204004a8
  402664:	004029c5 	.word	0x004029c5

00402668 <strlen>:
  402668:	f020 0103 	bic.w	r1, r0, #3
  40266c:	f010 0003 	ands.w	r0, r0, #3
  402670:	f1c0 0000 	rsb	r0, r0, #0
  402674:	f851 3b04 	ldr.w	r3, [r1], #4
  402678:	f100 0c04 	add.w	ip, r0, #4
  40267c:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
  402680:	f06f 0200 	mvn.w	r2, #0
  402684:	bf1c      	itt	ne
  402686:	fa22 f20c 	lsrne.w	r2, r2, ip
  40268a:	4313      	orrne	r3, r2
  40268c:	f04f 0c01 	mov.w	ip, #1
  402690:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
  402694:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
  402698:	eba3 020c 	sub.w	r2, r3, ip
  40269c:	ea22 0203 	bic.w	r2, r2, r3
  4026a0:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
  4026a4:	bf04      	itt	eq
  4026a6:	f851 3b04 	ldreq.w	r3, [r1], #4
  4026aa:	3004      	addeq	r0, #4
  4026ac:	d0f4      	beq.n	402698 <strlen+0x30>
  4026ae:	f1c2 0100 	rsb	r1, r2, #0
  4026b2:	ea02 0201 	and.w	r2, r2, r1
  4026b6:	fab2 f282 	clz	r2, r2
  4026ba:	f1c2 021f 	rsb	r2, r2, #31
  4026be:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  4026c2:	4770      	bx	lr

004026c4 <__swbuf_r>:
  4026c4:	b570      	push	{r4, r5, r6, lr}
  4026c6:	460d      	mov	r5, r1
  4026c8:	4614      	mov	r4, r2
  4026ca:	4606      	mov	r6, r0
  4026cc:	b110      	cbz	r0, 4026d4 <__swbuf_r+0x10>
  4026ce:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4026d0:	2b00      	cmp	r3, #0
  4026d2:	d048      	beq.n	402766 <__swbuf_r+0xa2>
  4026d4:	89a2      	ldrh	r2, [r4, #12]
  4026d6:	69a3      	ldr	r3, [r4, #24]
  4026d8:	b291      	uxth	r1, r2
  4026da:	60a3      	str	r3, [r4, #8]
  4026dc:	0708      	lsls	r0, r1, #28
  4026de:	d538      	bpl.n	402752 <__swbuf_r+0x8e>
  4026e0:	6923      	ldr	r3, [r4, #16]
  4026e2:	2b00      	cmp	r3, #0
  4026e4:	d035      	beq.n	402752 <__swbuf_r+0x8e>
  4026e6:	0489      	lsls	r1, r1, #18
  4026e8:	b2ed      	uxtb	r5, r5
  4026ea:	d515      	bpl.n	402718 <__swbuf_r+0x54>
  4026ec:	6822      	ldr	r2, [r4, #0]
  4026ee:	6961      	ldr	r1, [r4, #20]
  4026f0:	1ad3      	subs	r3, r2, r3
  4026f2:	428b      	cmp	r3, r1
  4026f4:	da1c      	bge.n	402730 <__swbuf_r+0x6c>
  4026f6:	3301      	adds	r3, #1
  4026f8:	68a1      	ldr	r1, [r4, #8]
  4026fa:	1c50      	adds	r0, r2, #1
  4026fc:	3901      	subs	r1, #1
  4026fe:	6020      	str	r0, [r4, #0]
  402700:	60a1      	str	r1, [r4, #8]
  402702:	7015      	strb	r5, [r2, #0]
  402704:	6962      	ldr	r2, [r4, #20]
  402706:	429a      	cmp	r2, r3
  402708:	d01a      	beq.n	402740 <__swbuf_r+0x7c>
  40270a:	2d0a      	cmp	r5, #10
  40270c:	d102      	bne.n	402714 <__swbuf_r+0x50>
  40270e:	7b23      	ldrb	r3, [r4, #12]
  402710:	07db      	lsls	r3, r3, #31
  402712:	d415      	bmi.n	402740 <__swbuf_r+0x7c>
  402714:	4628      	mov	r0, r5
  402716:	bd70      	pop	{r4, r5, r6, pc}
  402718:	6e61      	ldr	r1, [r4, #100]	; 0x64
  40271a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  40271e:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  402722:	81a2      	strh	r2, [r4, #12]
  402724:	6822      	ldr	r2, [r4, #0]
  402726:	6661      	str	r1, [r4, #100]	; 0x64
  402728:	1ad3      	subs	r3, r2, r3
  40272a:	6961      	ldr	r1, [r4, #20]
  40272c:	428b      	cmp	r3, r1
  40272e:	dbe2      	blt.n	4026f6 <__swbuf_r+0x32>
  402730:	4630      	mov	r0, r6
  402732:	4621      	mov	r1, r4
  402734:	f000 f930 	bl	402998 <_fflush_r>
  402738:	b940      	cbnz	r0, 40274c <__swbuf_r+0x88>
  40273a:	6822      	ldr	r2, [r4, #0]
  40273c:	2301      	movs	r3, #1
  40273e:	e7db      	b.n	4026f8 <__swbuf_r+0x34>
  402740:	4630      	mov	r0, r6
  402742:	4621      	mov	r1, r4
  402744:	f000 f928 	bl	402998 <_fflush_r>
  402748:	2800      	cmp	r0, #0
  40274a:	d0e3      	beq.n	402714 <__swbuf_r+0x50>
  40274c:	f04f 30ff 	mov.w	r0, #4294967295
  402750:	bd70      	pop	{r4, r5, r6, pc}
  402752:	4630      	mov	r0, r6
  402754:	4621      	mov	r1, r4
  402756:	f000 f809 	bl	40276c <__swsetup_r>
  40275a:	2800      	cmp	r0, #0
  40275c:	d1f6      	bne.n	40274c <__swbuf_r+0x88>
  40275e:	89a2      	ldrh	r2, [r4, #12]
  402760:	6923      	ldr	r3, [r4, #16]
  402762:	b291      	uxth	r1, r2
  402764:	e7bf      	b.n	4026e6 <__swbuf_r+0x22>
  402766:	f000 f9b1 	bl	402acc <__sinit>
  40276a:	e7b3      	b.n	4026d4 <__swbuf_r+0x10>

0040276c <__swsetup_r>:
  40276c:	b538      	push	{r3, r4, r5, lr}
  40276e:	4b2f      	ldr	r3, [pc, #188]	; (40282c <__swsetup_r+0xc0>)
  402770:	4605      	mov	r5, r0
  402772:	460c      	mov	r4, r1
  402774:	6818      	ldr	r0, [r3, #0]
  402776:	b110      	cbz	r0, 40277e <__swsetup_r+0x12>
  402778:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40277a:	2b00      	cmp	r3, #0
  40277c:	d036      	beq.n	4027ec <__swsetup_r+0x80>
  40277e:	89a2      	ldrh	r2, [r4, #12]
  402780:	b293      	uxth	r3, r2
  402782:	0718      	lsls	r0, r3, #28
  402784:	d50b      	bpl.n	40279e <__swsetup_r+0x32>
  402786:	6920      	ldr	r0, [r4, #16]
  402788:	b1a0      	cbz	r0, 4027b4 <__swsetup_r+0x48>
  40278a:	f013 0201 	ands.w	r2, r3, #1
  40278e:	d11d      	bne.n	4027cc <__swsetup_r+0x60>
  402790:	0799      	lsls	r1, r3, #30
  402792:	d400      	bmi.n	402796 <__swsetup_r+0x2a>
  402794:	6962      	ldr	r2, [r4, #20]
  402796:	60a2      	str	r2, [r4, #8]
  402798:	b1f8      	cbz	r0, 4027da <__swsetup_r+0x6e>
  40279a:	2000      	movs	r0, #0
  40279c:	bd38      	pop	{r3, r4, r5, pc}
  40279e:	06d9      	lsls	r1, r3, #27
  4027a0:	d53b      	bpl.n	40281a <__swsetup_r+0xae>
  4027a2:	0758      	lsls	r0, r3, #29
  4027a4:	d425      	bmi.n	4027f2 <__swsetup_r+0x86>
  4027a6:	6920      	ldr	r0, [r4, #16]
  4027a8:	f042 0208 	orr.w	r2, r2, #8
  4027ac:	b293      	uxth	r3, r2
  4027ae:	81a2      	strh	r2, [r4, #12]
  4027b0:	2800      	cmp	r0, #0
  4027b2:	d1ea      	bne.n	40278a <__swsetup_r+0x1e>
  4027b4:	f403 7220 	and.w	r2, r3, #640	; 0x280
  4027b8:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  4027bc:	d0e5      	beq.n	40278a <__swsetup_r+0x1e>
  4027be:	4628      	mov	r0, r5
  4027c0:	4621      	mov	r1, r4
  4027c2:	f000 fc83 	bl	4030cc <__smakebuf_r>
  4027c6:	89a3      	ldrh	r3, [r4, #12]
  4027c8:	6920      	ldr	r0, [r4, #16]
  4027ca:	e7de      	b.n	40278a <__swsetup_r+0x1e>
  4027cc:	6963      	ldr	r3, [r4, #20]
  4027ce:	2200      	movs	r2, #0
  4027d0:	425b      	negs	r3, r3
  4027d2:	60a2      	str	r2, [r4, #8]
  4027d4:	61a3      	str	r3, [r4, #24]
  4027d6:	2800      	cmp	r0, #0
  4027d8:	d1df      	bne.n	40279a <__swsetup_r+0x2e>
  4027da:	89a3      	ldrh	r3, [r4, #12]
  4027dc:	061a      	lsls	r2, r3, #24
  4027de:	d5dd      	bpl.n	40279c <__swsetup_r+0x30>
  4027e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4027e4:	f04f 30ff 	mov.w	r0, #4294967295
  4027e8:	81a3      	strh	r3, [r4, #12]
  4027ea:	bd38      	pop	{r3, r4, r5, pc}
  4027ec:	f000 f96e 	bl	402acc <__sinit>
  4027f0:	e7c5      	b.n	40277e <__swsetup_r+0x12>
  4027f2:	6b21      	ldr	r1, [r4, #48]	; 0x30
  4027f4:	b149      	cbz	r1, 40280a <__swsetup_r+0x9e>
  4027f6:	f104 0340 	add.w	r3, r4, #64	; 0x40
  4027fa:	4299      	cmp	r1, r3
  4027fc:	d003      	beq.n	402806 <__swsetup_r+0x9a>
  4027fe:	4628      	mov	r0, r5
  402800:	f000 f9d2 	bl	402ba8 <_free_r>
  402804:	89a2      	ldrh	r2, [r4, #12]
  402806:	2300      	movs	r3, #0
  402808:	6323      	str	r3, [r4, #48]	; 0x30
  40280a:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  40280e:	2300      	movs	r3, #0
  402810:	6920      	ldr	r0, [r4, #16]
  402812:	b292      	uxth	r2, r2
  402814:	e884 0009 	stmia.w	r4, {r0, r3}
  402818:	e7c6      	b.n	4027a8 <__swsetup_r+0x3c>
  40281a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  40281e:	2309      	movs	r3, #9
  402820:	f04f 30ff 	mov.w	r0, #4294967295
  402824:	602b      	str	r3, [r5, #0]
  402826:	81a2      	strh	r2, [r4, #12]
  402828:	bd38      	pop	{r3, r4, r5, pc}
  40282a:	bf00      	nop
  40282c:	204004a8 	.word	0x204004a8

00402830 <register_fini>:
  402830:	4b02      	ldr	r3, [pc, #8]	; (40283c <register_fini+0xc>)
  402832:	b113      	cbz	r3, 40283a <register_fini+0xa>
  402834:	4802      	ldr	r0, [pc, #8]	; (402840 <register_fini+0x10>)
  402836:	f000 b805 	b.w	402844 <atexit>
  40283a:	4770      	bx	lr
  40283c:	00000000 	.word	0x00000000
  402840:	00402ae1 	.word	0x00402ae1

00402844 <atexit>:
  402844:	4601      	mov	r1, r0
  402846:	2000      	movs	r0, #0
  402848:	4602      	mov	r2, r0
  40284a:	4603      	mov	r3, r0
  40284c:	f001 bb0e 	b.w	403e6c <__register_exitproc>

00402850 <__sflush_r>:
  402850:	898b      	ldrh	r3, [r1, #12]
  402852:	b29a      	uxth	r2, r3
  402854:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  402858:	460d      	mov	r5, r1
  40285a:	0711      	lsls	r1, r2, #28
  40285c:	4680      	mov	r8, r0
  40285e:	d43c      	bmi.n	4028da <__sflush_r+0x8a>
  402860:	686a      	ldr	r2, [r5, #4]
  402862:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  402866:	2a00      	cmp	r2, #0
  402868:	81ab      	strh	r3, [r5, #12]
  40286a:	dd76      	ble.n	40295a <__sflush_r+0x10a>
  40286c:	6aae      	ldr	r6, [r5, #40]	; 0x28
  40286e:	2e00      	cmp	r6, #0
  402870:	d04b      	beq.n	40290a <__sflush_r+0xba>
  402872:	b29b      	uxth	r3, r3
  402874:	2100      	movs	r1, #0
  402876:	f8d8 4000 	ldr.w	r4, [r8]
  40287a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
  40287e:	f8c8 1000 	str.w	r1, [r8]
  402882:	b292      	uxth	r2, r2
  402884:	2a00      	cmp	r2, #0
  402886:	d06c      	beq.n	402962 <__sflush_r+0x112>
  402888:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  40288a:	075f      	lsls	r7, r3, #29
  40288c:	d505      	bpl.n	40289a <__sflush_r+0x4a>
  40288e:	6869      	ldr	r1, [r5, #4]
  402890:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  402892:	1a52      	subs	r2, r2, r1
  402894:	b10b      	cbz	r3, 40289a <__sflush_r+0x4a>
  402896:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  402898:	1ad2      	subs	r2, r2, r3
  40289a:	4640      	mov	r0, r8
  40289c:	69e9      	ldr	r1, [r5, #28]
  40289e:	2300      	movs	r3, #0
  4028a0:	47b0      	blx	r6
  4028a2:	1c46      	adds	r6, r0, #1
  4028a4:	d03e      	beq.n	402924 <__sflush_r+0xd4>
  4028a6:	89ab      	ldrh	r3, [r5, #12]
  4028a8:	2100      	movs	r1, #0
  4028aa:	692a      	ldr	r2, [r5, #16]
  4028ac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  4028b0:	6069      	str	r1, [r5, #4]
  4028b2:	602a      	str	r2, [r5, #0]
  4028b4:	b29b      	uxth	r3, r3
  4028b6:	04da      	lsls	r2, r3, #19
  4028b8:	81ab      	strh	r3, [r5, #12]
  4028ba:	d44c      	bmi.n	402956 <__sflush_r+0x106>
  4028bc:	6b29      	ldr	r1, [r5, #48]	; 0x30
  4028be:	f8c8 4000 	str.w	r4, [r8]
  4028c2:	b311      	cbz	r1, 40290a <__sflush_r+0xba>
  4028c4:	f105 0340 	add.w	r3, r5, #64	; 0x40
  4028c8:	4299      	cmp	r1, r3
  4028ca:	d002      	beq.n	4028d2 <__sflush_r+0x82>
  4028cc:	4640      	mov	r0, r8
  4028ce:	f000 f96b 	bl	402ba8 <_free_r>
  4028d2:	2000      	movs	r0, #0
  4028d4:	6328      	str	r0, [r5, #48]	; 0x30
  4028d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4028da:	692e      	ldr	r6, [r5, #16]
  4028dc:	b1ae      	cbz	r6, 40290a <__sflush_r+0xba>
  4028de:	682c      	ldr	r4, [r5, #0]
  4028e0:	0791      	lsls	r1, r2, #30
  4028e2:	602e      	str	r6, [r5, #0]
  4028e4:	eba4 0406 	sub.w	r4, r4, r6
  4028e8:	d11a      	bne.n	402920 <__sflush_r+0xd0>
  4028ea:	696b      	ldr	r3, [r5, #20]
  4028ec:	60ab      	str	r3, [r5, #8]
  4028ee:	e00a      	b.n	402906 <__sflush_r+0xb6>
  4028f0:	4632      	mov	r2, r6
  4028f2:	4623      	mov	r3, r4
  4028f4:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  4028f6:	4640      	mov	r0, r8
  4028f8:	69e9      	ldr	r1, [r5, #28]
  4028fa:	47b8      	blx	r7
  4028fc:	2800      	cmp	r0, #0
  4028fe:	eba4 0400 	sub.w	r4, r4, r0
  402902:	4406      	add	r6, r0
  402904:	dd04      	ble.n	402910 <__sflush_r+0xc0>
  402906:	2c00      	cmp	r4, #0
  402908:	dcf2      	bgt.n	4028f0 <__sflush_r+0xa0>
  40290a:	2000      	movs	r0, #0
  40290c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402910:	89ab      	ldrh	r3, [r5, #12]
  402912:	f04f 30ff 	mov.w	r0, #4294967295
  402916:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40291a:	81ab      	strh	r3, [r5, #12]
  40291c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402920:	2300      	movs	r3, #0
  402922:	e7e3      	b.n	4028ec <__sflush_r+0x9c>
  402924:	f8d8 3000 	ldr.w	r3, [r8]
  402928:	fab3 f283 	clz	r2, r3
  40292c:	2b00      	cmp	r3, #0
  40292e:	bf18      	it	ne
  402930:	2b1d      	cmpne	r3, #29
  402932:	ea4f 1252 	mov.w	r2, r2, lsr #5
  402936:	d001      	beq.n	40293c <__sflush_r+0xec>
  402938:	2b16      	cmp	r3, #22
  40293a:	d127      	bne.n	40298c <__sflush_r+0x13c>
  40293c:	89ab      	ldrh	r3, [r5, #12]
  40293e:	2600      	movs	r6, #0
  402940:	6929      	ldr	r1, [r5, #16]
  402942:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  402946:	b29b      	uxth	r3, r3
  402948:	81ab      	strh	r3, [r5, #12]
  40294a:	04db      	lsls	r3, r3, #19
  40294c:	e885 0042 	stmia.w	r5, {r1, r6}
  402950:	d5b4      	bpl.n	4028bc <__sflush_r+0x6c>
  402952:	2a00      	cmp	r2, #0
  402954:	d0b2      	beq.n	4028bc <__sflush_r+0x6c>
  402956:	6528      	str	r0, [r5, #80]	; 0x50
  402958:	e7b0      	b.n	4028bc <__sflush_r+0x6c>
  40295a:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  40295c:	2a00      	cmp	r2, #0
  40295e:	dc85      	bgt.n	40286c <__sflush_r+0x1c>
  402960:	e7d3      	b.n	40290a <__sflush_r+0xba>
  402962:	2301      	movs	r3, #1
  402964:	4640      	mov	r0, r8
  402966:	69e9      	ldr	r1, [r5, #28]
  402968:	47b0      	blx	r6
  40296a:	1c43      	adds	r3, r0, #1
  40296c:	4602      	mov	r2, r0
  40296e:	d002      	beq.n	402976 <__sflush_r+0x126>
  402970:	89ab      	ldrh	r3, [r5, #12]
  402972:	6aae      	ldr	r6, [r5, #40]	; 0x28
  402974:	e789      	b.n	40288a <__sflush_r+0x3a>
  402976:	f8d8 3000 	ldr.w	r3, [r8]
  40297a:	2b00      	cmp	r3, #0
  40297c:	d0f8      	beq.n	402970 <__sflush_r+0x120>
  40297e:	2b16      	cmp	r3, #22
  402980:	d001      	beq.n	402986 <__sflush_r+0x136>
  402982:	2b1d      	cmp	r3, #29
  402984:	d1c4      	bne.n	402910 <__sflush_r+0xc0>
  402986:	f8c8 4000 	str.w	r4, [r8]
  40298a:	e7be      	b.n	40290a <__sflush_r+0xba>
  40298c:	89ab      	ldrh	r3, [r5, #12]
  40298e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  402992:	81ab      	strh	r3, [r5, #12]
  402994:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00402998 <_fflush_r>:
  402998:	b510      	push	{r4, lr}
  40299a:	4604      	mov	r4, r0
  40299c:	b082      	sub	sp, #8
  40299e:	b108      	cbz	r0, 4029a4 <_fflush_r+0xc>
  4029a0:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4029a2:	b153      	cbz	r3, 4029ba <_fflush_r+0x22>
  4029a4:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
  4029a8:	b908      	cbnz	r0, 4029ae <_fflush_r+0x16>
  4029aa:	b002      	add	sp, #8
  4029ac:	bd10      	pop	{r4, pc}
  4029ae:	4620      	mov	r0, r4
  4029b0:	b002      	add	sp, #8
  4029b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4029b6:	f7ff bf4b 	b.w	402850 <__sflush_r>
  4029ba:	9101      	str	r1, [sp, #4]
  4029bc:	f000 f886 	bl	402acc <__sinit>
  4029c0:	9901      	ldr	r1, [sp, #4]
  4029c2:	e7ef      	b.n	4029a4 <_fflush_r+0xc>

004029c4 <_cleanup_r>:
  4029c4:	4901      	ldr	r1, [pc, #4]	; (4029cc <_cleanup_r+0x8>)
  4029c6:	f000 bb59 	b.w	40307c <_fwalk_reent>
  4029ca:	bf00      	nop
  4029cc:	00403f39 	.word	0x00403f39

004029d0 <__sinit.part.1>:
  4029d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4029d4:	4682      	mov	sl, r0
  4029d6:	2400      	movs	r4, #0
  4029d8:	4837      	ldr	r0, [pc, #220]	; (402ab8 <__sinit.part.1+0xe8>)
  4029da:	2103      	movs	r1, #3
  4029dc:	f8da 5004 	ldr.w	r5, [sl, #4]
  4029e0:	f50a 723b 	add.w	r2, sl, #748	; 0x2ec
  4029e4:	2604      	movs	r6, #4
  4029e6:	f8ca 003c 	str.w	r0, [sl, #60]	; 0x3c
  4029ea:	f8ca 12e4 	str.w	r1, [sl, #740]	; 0x2e4
  4029ee:	f105 005c 	add.w	r0, r5, #92	; 0x5c
  4029f2:	f8ca 22e8 	str.w	r2, [sl, #744]	; 0x2e8
  4029f6:	4621      	mov	r1, r4
  4029f8:	f8ca 42e0 	str.w	r4, [sl, #736]	; 0x2e0
  4029fc:	2208      	movs	r2, #8
  4029fe:	81ae      	strh	r6, [r5, #12]
  402a00:	602c      	str	r4, [r5, #0]
  402a02:	606c      	str	r4, [r5, #4]
  402a04:	60ac      	str	r4, [r5, #8]
  402a06:	666c      	str	r4, [r5, #100]	; 0x64
  402a08:	81ec      	strh	r4, [r5, #14]
  402a0a:	612c      	str	r4, [r5, #16]
  402a0c:	616c      	str	r4, [r5, #20]
  402a0e:	61ac      	str	r4, [r5, #24]
  402a10:	f7ff fd1c 	bl	40244c <memset>
  402a14:	f8df b0a8 	ldr.w	fp, [pc, #168]	; 402ac0 <__sinit.part.1+0xf0>
  402a18:	f8da 6008 	ldr.w	r6, [sl, #8]
  402a1c:	f04f 0301 	mov.w	r3, #1
  402a20:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 402ac4 <__sinit.part.1+0xf4>
  402a24:	f04f 0e09 	mov.w	lr, #9
  402a28:	f8df 809c 	ldr.w	r8, [pc, #156]	; 402ac8 <__sinit.part.1+0xf8>
  402a2c:	4621      	mov	r1, r4
  402a2e:	4f23      	ldr	r7, [pc, #140]	; (402abc <__sinit.part.1+0xec>)
  402a30:	2208      	movs	r2, #8
  402a32:	61ed      	str	r5, [r5, #28]
  402a34:	f106 005c 	add.w	r0, r6, #92	; 0x5c
  402a38:	f8c5 b020 	str.w	fp, [r5, #32]
  402a3c:	f8c5 9024 	str.w	r9, [r5, #36]	; 0x24
  402a40:	f8c5 8028 	str.w	r8, [r5, #40]	; 0x28
  402a44:	62ef      	str	r7, [r5, #44]	; 0x2c
  402a46:	81f3      	strh	r3, [r6, #14]
  402a48:	f8a6 e00c 	strh.w	lr, [r6, #12]
  402a4c:	6034      	str	r4, [r6, #0]
  402a4e:	6074      	str	r4, [r6, #4]
  402a50:	60b4      	str	r4, [r6, #8]
  402a52:	6674      	str	r4, [r6, #100]	; 0x64
  402a54:	6134      	str	r4, [r6, #16]
  402a56:	6174      	str	r4, [r6, #20]
  402a58:	61b4      	str	r4, [r6, #24]
  402a5a:	f7ff fcf7 	bl	40244c <memset>
  402a5e:	f8da 500c 	ldr.w	r5, [sl, #12]
  402a62:	f04f 0c12 	mov.w	ip, #18
  402a66:	f04f 0e02 	mov.w	lr, #2
  402a6a:	61f6      	str	r6, [r6, #28]
  402a6c:	4621      	mov	r1, r4
  402a6e:	f8c6 b020 	str.w	fp, [r6, #32]
  402a72:	f105 005c 	add.w	r0, r5, #92	; 0x5c
  402a76:	f8c6 9024 	str.w	r9, [r6, #36]	; 0x24
  402a7a:	2208      	movs	r2, #8
  402a7c:	f8c6 8028 	str.w	r8, [r6, #40]	; 0x28
  402a80:	62f7      	str	r7, [r6, #44]	; 0x2c
  402a82:	602c      	str	r4, [r5, #0]
  402a84:	606c      	str	r4, [r5, #4]
  402a86:	60ac      	str	r4, [r5, #8]
  402a88:	666c      	str	r4, [r5, #100]	; 0x64
  402a8a:	612c      	str	r4, [r5, #16]
  402a8c:	616c      	str	r4, [r5, #20]
  402a8e:	61ac      	str	r4, [r5, #24]
  402a90:	f8a5 c00c 	strh.w	ip, [r5, #12]
  402a94:	f8a5 e00e 	strh.w	lr, [r5, #14]
  402a98:	f7ff fcd8 	bl	40244c <memset>
  402a9c:	2301      	movs	r3, #1
  402a9e:	61ed      	str	r5, [r5, #28]
  402aa0:	f8c5 b020 	str.w	fp, [r5, #32]
  402aa4:	f8c5 9024 	str.w	r9, [r5, #36]	; 0x24
  402aa8:	f8c5 8028 	str.w	r8, [r5, #40]	; 0x28
  402aac:	62ef      	str	r7, [r5, #44]	; 0x2c
  402aae:	f8ca 3038 	str.w	r3, [sl, #56]	; 0x38
  402ab2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402ab6:	bf00      	nop
  402ab8:	004029c5 	.word	0x004029c5
  402abc:	00403e3d 	.word	0x00403e3d
  402ac0:	00403dbd 	.word	0x00403dbd
  402ac4:	00403de1 	.word	0x00403de1
  402ac8:	00403e19 	.word	0x00403e19

00402acc <__sinit>:
  402acc:	6b83      	ldr	r3, [r0, #56]	; 0x38
  402ace:	b103      	cbz	r3, 402ad2 <__sinit+0x6>
  402ad0:	4770      	bx	lr
  402ad2:	f7ff bf7d 	b.w	4029d0 <__sinit.part.1>
  402ad6:	bf00      	nop

00402ad8 <__sfp_lock_acquire>:
  402ad8:	4770      	bx	lr
  402ada:	bf00      	nop

00402adc <__sfp_lock_release>:
  402adc:	4770      	bx	lr
  402ade:	bf00      	nop

00402ae0 <__libc_fini_array>:
  402ae0:	b538      	push	{r3, r4, r5, lr}
  402ae2:	4b08      	ldr	r3, [pc, #32]	; (402b04 <__libc_fini_array+0x24>)
  402ae4:	4d08      	ldr	r5, [pc, #32]	; (402b08 <__libc_fini_array+0x28>)
  402ae6:	1aed      	subs	r5, r5, r3
  402ae8:	10ac      	asrs	r4, r5, #2
  402aea:	bf18      	it	ne
  402aec:	18ed      	addne	r5, r5, r3
  402aee:	d005      	beq.n	402afc <__libc_fini_array+0x1c>
  402af0:	3c01      	subs	r4, #1
  402af2:	f855 3d04 	ldr.w	r3, [r5, #-4]!
  402af6:	4798      	blx	r3
  402af8:	2c00      	cmp	r4, #0
  402afa:	d1f9      	bne.n	402af0 <__libc_fini_array+0x10>
  402afc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  402b00:	f001 bb86 	b.w	404210 <_fini>
  402b04:	0040421c 	.word	0x0040421c
  402b08:	00404220 	.word	0x00404220

00402b0c <_malloc_trim_r>:
  402b0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  402b0e:	4f22      	ldr	r7, [pc, #136]	; (402b98 <_malloc_trim_r+0x8c>)
  402b10:	460c      	mov	r4, r1
  402b12:	4606      	mov	r6, r0
  402b14:	f000 ff44 	bl	4039a0 <__malloc_lock>
  402b18:	68ba      	ldr	r2, [r7, #8]
  402b1a:	4b20      	ldr	r3, [pc, #128]	; (402b9c <_malloc_trim_r+0x90>)
  402b1c:	6855      	ldr	r5, [r2, #4]
  402b1e:	f025 0503 	bic.w	r5, r5, #3
  402b22:	1b2c      	subs	r4, r5, r4
  402b24:	f604 74ef 	addw	r4, r4, #4079	; 0xfef
  402b28:	4023      	ands	r3, r4
  402b2a:	f5a3 5480 	sub.w	r4, r3, #4096	; 0x1000
  402b2e:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  402b32:	db07      	blt.n	402b44 <_malloc_trim_r+0x38>
  402b34:	4630      	mov	r0, r6
  402b36:	2100      	movs	r1, #0
  402b38:	f001 f92e 	bl	403d98 <_sbrk_r>
  402b3c:	68bb      	ldr	r3, [r7, #8]
  402b3e:	442b      	add	r3, r5
  402b40:	4298      	cmp	r0, r3
  402b42:	d004      	beq.n	402b4e <_malloc_trim_r+0x42>
  402b44:	4630      	mov	r0, r6
  402b46:	f000 ff2d 	bl	4039a4 <__malloc_unlock>
  402b4a:	2000      	movs	r0, #0
  402b4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402b4e:	4630      	mov	r0, r6
  402b50:	4261      	negs	r1, r4
  402b52:	f001 f921 	bl	403d98 <_sbrk_r>
  402b56:	3001      	adds	r0, #1
  402b58:	d00d      	beq.n	402b76 <_malloc_trim_r+0x6a>
  402b5a:	4a11      	ldr	r2, [pc, #68]	; (402ba0 <_malloc_trim_r+0x94>)
  402b5c:	1b2d      	subs	r5, r5, r4
  402b5e:	68b9      	ldr	r1, [r7, #8]
  402b60:	4630      	mov	r0, r6
  402b62:	6813      	ldr	r3, [r2, #0]
  402b64:	f045 0501 	orr.w	r5, r5, #1
  402b68:	1b1b      	subs	r3, r3, r4
  402b6a:	604d      	str	r5, [r1, #4]
  402b6c:	6013      	str	r3, [r2, #0]
  402b6e:	f000 ff19 	bl	4039a4 <__malloc_unlock>
  402b72:	2001      	movs	r0, #1
  402b74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402b76:	4630      	mov	r0, r6
  402b78:	2100      	movs	r1, #0
  402b7a:	f001 f90d 	bl	403d98 <_sbrk_r>
  402b7e:	68ba      	ldr	r2, [r7, #8]
  402b80:	1a83      	subs	r3, r0, r2
  402b82:	2b0f      	cmp	r3, #15
  402b84:	ddde      	ble.n	402b44 <_malloc_trim_r+0x38>
  402b86:	4c07      	ldr	r4, [pc, #28]	; (402ba4 <_malloc_trim_r+0x98>)
  402b88:	f043 0301 	orr.w	r3, r3, #1
  402b8c:	4904      	ldr	r1, [pc, #16]	; (402ba0 <_malloc_trim_r+0x94>)
  402b8e:	6824      	ldr	r4, [r4, #0]
  402b90:	6053      	str	r3, [r2, #4]
  402b92:	1b00      	subs	r0, r0, r4
  402b94:	6008      	str	r0, [r1, #0]
  402b96:	e7d5      	b.n	402b44 <_malloc_trim_r+0x38>
  402b98:	204004ac 	.word	0x204004ac
  402b9c:	fffff000 	.word	0xfffff000
  402ba0:	20400968 	.word	0x20400968
  402ba4:	204008b8 	.word	0x204008b8

00402ba8 <_free_r>:
  402ba8:	2900      	cmp	r1, #0
  402baa:	d04d      	beq.n	402c48 <_free_r+0xa0>
  402bac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  402bb0:	460c      	mov	r4, r1
  402bb2:	4680      	mov	r8, r0
  402bb4:	f000 fef4 	bl	4039a0 <__malloc_lock>
  402bb8:	4963      	ldr	r1, [pc, #396]	; (402d48 <_free_r+0x1a0>)
  402bba:	f854 7c04 	ldr.w	r7, [r4, #-4]
  402bbe:	f1a4 0508 	sub.w	r5, r4, #8
  402bc2:	688e      	ldr	r6, [r1, #8]
  402bc4:	f027 0301 	bic.w	r3, r7, #1
  402bc8:	18ea      	adds	r2, r5, r3
  402bca:	6850      	ldr	r0, [r2, #4]
  402bcc:	4296      	cmp	r6, r2
  402bce:	f020 0003 	bic.w	r0, r0, #3
  402bd2:	d059      	beq.n	402c88 <_free_r+0xe0>
  402bd4:	07fe      	lsls	r6, r7, #31
  402bd6:	6050      	str	r0, [r2, #4]
  402bd8:	d40b      	bmi.n	402bf2 <_free_r+0x4a>
  402bda:	f854 4c08 	ldr.w	r4, [r4, #-8]
  402bde:	f101 0708 	add.w	r7, r1, #8
  402be2:	1b2d      	subs	r5, r5, r4
  402be4:	4423      	add	r3, r4
  402be6:	68ac      	ldr	r4, [r5, #8]
  402be8:	42bc      	cmp	r4, r7
  402bea:	d066      	beq.n	402cba <_free_r+0x112>
  402bec:	68ef      	ldr	r7, [r5, #12]
  402bee:	60e7      	str	r7, [r4, #12]
  402bf0:	60bc      	str	r4, [r7, #8]
  402bf2:	1814      	adds	r4, r2, r0
  402bf4:	6864      	ldr	r4, [r4, #4]
  402bf6:	07e4      	lsls	r4, r4, #31
  402bf8:	d40c      	bmi.n	402c14 <_free_r+0x6c>
  402bfa:	4c54      	ldr	r4, [pc, #336]	; (402d4c <_free_r+0x1a4>)
  402bfc:	4403      	add	r3, r0
  402bfe:	6890      	ldr	r0, [r2, #8]
  402c00:	42a0      	cmp	r0, r4
  402c02:	d07c      	beq.n	402cfe <_free_r+0x156>
  402c04:	68d4      	ldr	r4, [r2, #12]
  402c06:	f043 0201 	orr.w	r2, r3, #1
  402c0a:	60c4      	str	r4, [r0, #12]
  402c0c:	60a0      	str	r0, [r4, #8]
  402c0e:	606a      	str	r2, [r5, #4]
  402c10:	50eb      	str	r3, [r5, r3]
  402c12:	e003      	b.n	402c1c <_free_r+0x74>
  402c14:	f043 0201 	orr.w	r2, r3, #1
  402c18:	606a      	str	r2, [r5, #4]
  402c1a:	50eb      	str	r3, [r5, r3]
  402c1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  402c20:	d213      	bcs.n	402c4a <_free_r+0xa2>
  402c22:	08db      	lsrs	r3, r3, #3
  402c24:	2001      	movs	r0, #1
  402c26:	684a      	ldr	r2, [r1, #4]
  402c28:	109c      	asrs	r4, r3, #2
  402c2a:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
  402c2e:	40a0      	lsls	r0, r4
  402c30:	689c      	ldr	r4, [r3, #8]
  402c32:	4302      	orrs	r2, r0
  402c34:	60eb      	str	r3, [r5, #12]
  402c36:	60ac      	str	r4, [r5, #8]
  402c38:	604a      	str	r2, [r1, #4]
  402c3a:	609d      	str	r5, [r3, #8]
  402c3c:	60e5      	str	r5, [r4, #12]
  402c3e:	4640      	mov	r0, r8
  402c40:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  402c44:	f000 beae 	b.w	4039a4 <__malloc_unlock>
  402c48:	4770      	bx	lr
  402c4a:	0a5a      	lsrs	r2, r3, #9
  402c4c:	2a04      	cmp	r2, #4
  402c4e:	d847      	bhi.n	402ce0 <_free_r+0x138>
  402c50:	099a      	lsrs	r2, r3, #6
  402c52:	f102 0438 	add.w	r4, r2, #56	; 0x38
  402c56:	0060      	lsls	r0, r4, #1
  402c58:	eb01 0080 	add.w	r0, r1, r0, lsl #2
  402c5c:	493a      	ldr	r1, [pc, #232]	; (402d48 <_free_r+0x1a0>)
  402c5e:	6882      	ldr	r2, [r0, #8]
  402c60:	4282      	cmp	r2, r0
  402c62:	d043      	beq.n	402cec <_free_r+0x144>
  402c64:	6851      	ldr	r1, [r2, #4]
  402c66:	f021 0103 	bic.w	r1, r1, #3
  402c6a:	4299      	cmp	r1, r3
  402c6c:	d902      	bls.n	402c74 <_free_r+0xcc>
  402c6e:	6892      	ldr	r2, [r2, #8]
  402c70:	4290      	cmp	r0, r2
  402c72:	d1f7      	bne.n	402c64 <_free_r+0xbc>
  402c74:	68d3      	ldr	r3, [r2, #12]
  402c76:	60eb      	str	r3, [r5, #12]
  402c78:	4640      	mov	r0, r8
  402c7a:	60aa      	str	r2, [r5, #8]
  402c7c:	609d      	str	r5, [r3, #8]
  402c7e:	60d5      	str	r5, [r2, #12]
  402c80:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  402c84:	f000 be8e 	b.w	4039a4 <__malloc_unlock>
  402c88:	07ff      	lsls	r7, r7, #31
  402c8a:	4403      	add	r3, r0
  402c8c:	d407      	bmi.n	402c9e <_free_r+0xf6>
  402c8e:	f854 2c08 	ldr.w	r2, [r4, #-8]
  402c92:	1aad      	subs	r5, r5, r2
  402c94:	4413      	add	r3, r2
  402c96:	68a8      	ldr	r0, [r5, #8]
  402c98:	68ea      	ldr	r2, [r5, #12]
  402c9a:	60c2      	str	r2, [r0, #12]
  402c9c:	6090      	str	r0, [r2, #8]
  402c9e:	4a2c      	ldr	r2, [pc, #176]	; (402d50 <_free_r+0x1a8>)
  402ca0:	f043 0001 	orr.w	r0, r3, #1
  402ca4:	6812      	ldr	r2, [r2, #0]
  402ca6:	6068      	str	r0, [r5, #4]
  402ca8:	4293      	cmp	r3, r2
  402caa:	608d      	str	r5, [r1, #8]
  402cac:	d3c7      	bcc.n	402c3e <_free_r+0x96>
  402cae:	4b29      	ldr	r3, [pc, #164]	; (402d54 <_free_r+0x1ac>)
  402cb0:	4640      	mov	r0, r8
  402cb2:	6819      	ldr	r1, [r3, #0]
  402cb4:	f7ff ff2a 	bl	402b0c <_malloc_trim_r>
  402cb8:	e7c1      	b.n	402c3e <_free_r+0x96>
  402cba:	1811      	adds	r1, r2, r0
  402cbc:	6849      	ldr	r1, [r1, #4]
  402cbe:	07c9      	lsls	r1, r1, #31
  402cc0:	d409      	bmi.n	402cd6 <_free_r+0x12e>
  402cc2:	4403      	add	r3, r0
  402cc4:	68d1      	ldr	r1, [r2, #12]
  402cc6:	6892      	ldr	r2, [r2, #8]
  402cc8:	f043 0001 	orr.w	r0, r3, #1
  402ccc:	60d1      	str	r1, [r2, #12]
  402cce:	608a      	str	r2, [r1, #8]
  402cd0:	6068      	str	r0, [r5, #4]
  402cd2:	50eb      	str	r3, [r5, r3]
  402cd4:	e7b3      	b.n	402c3e <_free_r+0x96>
  402cd6:	f043 0201 	orr.w	r2, r3, #1
  402cda:	606a      	str	r2, [r5, #4]
  402cdc:	50eb      	str	r3, [r5, r3]
  402cde:	e7ae      	b.n	402c3e <_free_r+0x96>
  402ce0:	2a14      	cmp	r2, #20
  402ce2:	d815      	bhi.n	402d10 <_free_r+0x168>
  402ce4:	f102 045b 	add.w	r4, r2, #91	; 0x5b
  402ce8:	0060      	lsls	r0, r4, #1
  402cea:	e7b5      	b.n	402c58 <_free_r+0xb0>
  402cec:	10a4      	asrs	r4, r4, #2
  402cee:	2701      	movs	r7, #1
  402cf0:	6848      	ldr	r0, [r1, #4]
  402cf2:	4613      	mov	r3, r2
  402cf4:	fa07 f404 	lsl.w	r4, r7, r4
  402cf8:	4320      	orrs	r0, r4
  402cfa:	6048      	str	r0, [r1, #4]
  402cfc:	e7bb      	b.n	402c76 <_free_r+0xce>
  402cfe:	f043 0201 	orr.w	r2, r3, #1
  402d02:	614d      	str	r5, [r1, #20]
  402d04:	610d      	str	r5, [r1, #16]
  402d06:	60e8      	str	r0, [r5, #12]
  402d08:	60a8      	str	r0, [r5, #8]
  402d0a:	606a      	str	r2, [r5, #4]
  402d0c:	50eb      	str	r3, [r5, r3]
  402d0e:	e796      	b.n	402c3e <_free_r+0x96>
  402d10:	2a54      	cmp	r2, #84	; 0x54
  402d12:	d804      	bhi.n	402d1e <_free_r+0x176>
  402d14:	0b1a      	lsrs	r2, r3, #12
  402d16:	f102 046e 	add.w	r4, r2, #110	; 0x6e
  402d1a:	0060      	lsls	r0, r4, #1
  402d1c:	e79c      	b.n	402c58 <_free_r+0xb0>
  402d1e:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  402d22:	d804      	bhi.n	402d2e <_free_r+0x186>
  402d24:	0bda      	lsrs	r2, r3, #15
  402d26:	f102 0477 	add.w	r4, r2, #119	; 0x77
  402d2a:	0060      	lsls	r0, r4, #1
  402d2c:	e794      	b.n	402c58 <_free_r+0xb0>
  402d2e:	f240 5054 	movw	r0, #1364	; 0x554
  402d32:	4282      	cmp	r2, r0
  402d34:	d804      	bhi.n	402d40 <_free_r+0x198>
  402d36:	0c9a      	lsrs	r2, r3, #18
  402d38:	f102 047c 	add.w	r4, r2, #124	; 0x7c
  402d3c:	0060      	lsls	r0, r4, #1
  402d3e:	e78b      	b.n	402c58 <_free_r+0xb0>
  402d40:	20fc      	movs	r0, #252	; 0xfc
  402d42:	247e      	movs	r4, #126	; 0x7e
  402d44:	e788      	b.n	402c58 <_free_r+0xb0>
  402d46:	bf00      	nop
  402d48:	204004ac 	.word	0x204004ac
  402d4c:	204004b4 	.word	0x204004b4
  402d50:	204008b4 	.word	0x204008b4
  402d54:	20400964 	.word	0x20400964

00402d58 <__sfvwrite_r>:
  402d58:	6893      	ldr	r3, [r2, #8]
  402d5a:	2b00      	cmp	r3, #0
  402d5c:	d07a      	beq.n	402e54 <__sfvwrite_r+0xfc>
  402d5e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402d62:	f8b1 e00c 	ldrh.w	lr, [r1, #12]
  402d66:	b083      	sub	sp, #12
  402d68:	460c      	mov	r4, r1
  402d6a:	4681      	mov	r9, r0
  402d6c:	f01e 0f08 	tst.w	lr, #8
  402d70:	4616      	mov	r6, r2
  402d72:	d026      	beq.n	402dc2 <__sfvwrite_r+0x6a>
  402d74:	690b      	ldr	r3, [r1, #16]
  402d76:	b323      	cbz	r3, 402dc2 <__sfvwrite_r+0x6a>
  402d78:	f00e 0802 	and.w	r8, lr, #2
  402d7c:	6835      	ldr	r5, [r6, #0]
  402d7e:	fa1f f088 	uxth.w	r0, r8
  402d82:	b370      	cbz	r0, 402de2 <__sfvwrite_r+0x8a>
  402d84:	f04f 0a00 	mov.w	sl, #0
  402d88:	f8df b2ec 	ldr.w	fp, [pc, #748]	; 403078 <__sfvwrite_r+0x320>
  402d8c:	46d0      	mov	r8, sl
  402d8e:	45d8      	cmp	r8, fp
  402d90:	4643      	mov	r3, r8
  402d92:	4652      	mov	r2, sl
  402d94:	4648      	mov	r0, r9
  402d96:	bf28      	it	cs
  402d98:	465b      	movcs	r3, fp
  402d9a:	f1b8 0f00 	cmp.w	r8, #0
  402d9e:	d053      	beq.n	402e48 <__sfvwrite_r+0xf0>
  402da0:	69e1      	ldr	r1, [r4, #28]
  402da2:	6a67      	ldr	r7, [r4, #36]	; 0x24
  402da4:	47b8      	blx	r7
  402da6:	2800      	cmp	r0, #0
  402da8:	dd73      	ble.n	402e92 <__sfvwrite_r+0x13a>
  402daa:	68b3      	ldr	r3, [r6, #8]
  402dac:	4482      	add	sl, r0
  402dae:	ebc0 0808 	rsb	r8, r0, r8
  402db2:	1a18      	subs	r0, r3, r0
  402db4:	60b0      	str	r0, [r6, #8]
  402db6:	2800      	cmp	r0, #0
  402db8:	d1e9      	bne.n	402d8e <__sfvwrite_r+0x36>
  402dba:	2000      	movs	r0, #0
  402dbc:	b003      	add	sp, #12
  402dbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402dc2:	4648      	mov	r0, r9
  402dc4:	4621      	mov	r1, r4
  402dc6:	f7ff fcd1 	bl	40276c <__swsetup_r>
  402dca:	2800      	cmp	r0, #0
  402dcc:	f040 814c 	bne.w	403068 <__sfvwrite_r+0x310>
  402dd0:	f8b4 e00c 	ldrh.w	lr, [r4, #12]
  402dd4:	6835      	ldr	r5, [r6, #0]
  402dd6:	f00e 0802 	and.w	r8, lr, #2
  402dda:	fa1f f088 	uxth.w	r0, r8
  402dde:	2800      	cmp	r0, #0
  402de0:	d1d0      	bne.n	402d84 <__sfvwrite_r+0x2c>
  402de2:	f01e 0b01 	ands.w	fp, lr, #1
  402de6:	d15d      	bne.n	402ea4 <__sfvwrite_r+0x14c>
  402de8:	46d8      	mov	r8, fp
  402dea:	f1b8 0f00 	cmp.w	r8, #0
  402dee:	d025      	beq.n	402e3c <__sfvwrite_r+0xe4>
  402df0:	f41e 7f00 	tst.w	lr, #512	; 0x200
  402df4:	68a7      	ldr	r7, [r4, #8]
  402df6:	d02f      	beq.n	402e58 <__sfvwrite_r+0x100>
  402df8:	45b8      	cmp	r8, r7
  402dfa:	46ba      	mov	sl, r7
  402dfc:	f0c0 80a8 	bcc.w	402f50 <__sfvwrite_r+0x1f8>
  402e00:	f41e 6f90 	tst.w	lr, #1152	; 0x480
  402e04:	f040 80b5 	bne.w	402f72 <__sfvwrite_r+0x21a>
  402e08:	6820      	ldr	r0, [r4, #0]
  402e0a:	4659      	mov	r1, fp
  402e0c:	4652      	mov	r2, sl
  402e0e:	f000 fd65 	bl	4038dc <memmove>
  402e12:	68a2      	ldr	r2, [r4, #8]
  402e14:	6821      	ldr	r1, [r4, #0]
  402e16:	4640      	mov	r0, r8
  402e18:	1bd7      	subs	r7, r2, r7
  402e1a:	eb01 030a 	add.w	r3, r1, sl
  402e1e:	60a7      	str	r7, [r4, #8]
  402e20:	6023      	str	r3, [r4, #0]
  402e22:	68b3      	ldr	r3, [r6, #8]
  402e24:	4483      	add	fp, r0
  402e26:	ebc0 0808 	rsb	r8, r0, r8
  402e2a:	1a18      	subs	r0, r3, r0
  402e2c:	60b0      	str	r0, [r6, #8]
  402e2e:	2800      	cmp	r0, #0
  402e30:	d0c3      	beq.n	402dba <__sfvwrite_r+0x62>
  402e32:	f8b4 e00c 	ldrh.w	lr, [r4, #12]
  402e36:	f1b8 0f00 	cmp.w	r8, #0
  402e3a:	d1d9      	bne.n	402df0 <__sfvwrite_r+0x98>
  402e3c:	f8d5 b000 	ldr.w	fp, [r5]
  402e40:	3508      	adds	r5, #8
  402e42:	f855 8c04 	ldr.w	r8, [r5, #-4]
  402e46:	e7d0      	b.n	402dea <__sfvwrite_r+0x92>
  402e48:	f8d5 a000 	ldr.w	sl, [r5]
  402e4c:	3508      	adds	r5, #8
  402e4e:	f855 8c04 	ldr.w	r8, [r5, #-4]
  402e52:	e79c      	b.n	402d8e <__sfvwrite_r+0x36>
  402e54:	2000      	movs	r0, #0
  402e56:	4770      	bx	lr
  402e58:	6820      	ldr	r0, [r4, #0]
  402e5a:	6923      	ldr	r3, [r4, #16]
  402e5c:	4298      	cmp	r0, r3
  402e5e:	d803      	bhi.n	402e68 <__sfvwrite_r+0x110>
  402e60:	6963      	ldr	r3, [r4, #20]
  402e62:	4598      	cmp	r8, r3
  402e64:	f080 80bf 	bcs.w	402fe6 <__sfvwrite_r+0x28e>
  402e68:	4547      	cmp	r7, r8
  402e6a:	4659      	mov	r1, fp
  402e6c:	bf28      	it	cs
  402e6e:	4647      	movcs	r7, r8
  402e70:	463a      	mov	r2, r7
  402e72:	f000 fd33 	bl	4038dc <memmove>
  402e76:	68a3      	ldr	r3, [r4, #8]
  402e78:	6822      	ldr	r2, [r4, #0]
  402e7a:	1bdb      	subs	r3, r3, r7
  402e7c:	443a      	add	r2, r7
  402e7e:	60a3      	str	r3, [r4, #8]
  402e80:	6022      	str	r2, [r4, #0]
  402e82:	2b00      	cmp	r3, #0
  402e84:	d149      	bne.n	402f1a <__sfvwrite_r+0x1c2>
  402e86:	4648      	mov	r0, r9
  402e88:	4621      	mov	r1, r4
  402e8a:	f7ff fd85 	bl	402998 <_fflush_r>
  402e8e:	2800      	cmp	r0, #0
  402e90:	d043      	beq.n	402f1a <__sfvwrite_r+0x1c2>
  402e92:	89a3      	ldrh	r3, [r4, #12]
  402e94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  402e98:	f04f 30ff 	mov.w	r0, #4294967295
  402e9c:	81a3      	strh	r3, [r4, #12]
  402e9e:	b003      	add	sp, #12
  402ea0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402ea4:	4680      	mov	r8, r0
  402ea6:	4683      	mov	fp, r0
  402ea8:	4682      	mov	sl, r0
  402eaa:	9000      	str	r0, [sp, #0]
  402eac:	f1ba 0f00 	cmp.w	sl, #0
  402eb0:	d02b      	beq.n	402f0a <__sfvwrite_r+0x1b2>
  402eb2:	9b00      	ldr	r3, [sp, #0]
  402eb4:	2b00      	cmp	r3, #0
  402eb6:	d04f      	beq.n	402f58 <__sfvwrite_r+0x200>
  402eb8:	45d0      	cmp	r8, sl
  402eba:	6962      	ldr	r2, [r4, #20]
  402ebc:	68a1      	ldr	r1, [r4, #8]
  402ebe:	4643      	mov	r3, r8
  402ec0:	bf28      	it	cs
  402ec2:	4653      	movcs	r3, sl
  402ec4:	6820      	ldr	r0, [r4, #0]
  402ec6:	eb02 0c01 	add.w	ip, r2, r1
  402eca:	461f      	mov	r7, r3
  402ecc:	4563      	cmp	r3, ip
  402ece:	dd03      	ble.n	402ed8 <__sfvwrite_r+0x180>
  402ed0:	6921      	ldr	r1, [r4, #16]
  402ed2:	4288      	cmp	r0, r1
  402ed4:	f200 8099 	bhi.w	40300a <__sfvwrite_r+0x2b2>
  402ed8:	4293      	cmp	r3, r2
  402eda:	db20      	blt.n	402f1e <__sfvwrite_r+0x1c6>
  402edc:	4613      	mov	r3, r2
  402ede:	6a67      	ldr	r7, [r4, #36]	; 0x24
  402ee0:	4648      	mov	r0, r9
  402ee2:	69e1      	ldr	r1, [r4, #28]
  402ee4:	465a      	mov	r2, fp
  402ee6:	47b8      	blx	r7
  402ee8:	1e07      	subs	r7, r0, #0
  402eea:	ddd2      	ble.n	402e92 <__sfvwrite_r+0x13a>
  402eec:	ebb8 0807 	subs.w	r8, r8, r7
  402ef0:	d025      	beq.n	402f3e <__sfvwrite_r+0x1e6>
  402ef2:	68b3      	ldr	r3, [r6, #8]
  402ef4:	44bb      	add	fp, r7
  402ef6:	ebc7 0a0a 	rsb	sl, r7, sl
  402efa:	1bdf      	subs	r7, r3, r7
  402efc:	60b7      	str	r7, [r6, #8]
  402efe:	2f00      	cmp	r7, #0
  402f00:	f43f af5b 	beq.w	402dba <__sfvwrite_r+0x62>
  402f04:	f1ba 0f00 	cmp.w	sl, #0
  402f08:	d1d3      	bne.n	402eb2 <__sfvwrite_r+0x15a>
  402f0a:	2300      	movs	r3, #0
  402f0c:	f8d5 b000 	ldr.w	fp, [r5]
  402f10:	f8d5 a004 	ldr.w	sl, [r5, #4]
  402f14:	3508      	adds	r5, #8
  402f16:	9300      	str	r3, [sp, #0]
  402f18:	e7c8      	b.n	402eac <__sfvwrite_r+0x154>
  402f1a:	4638      	mov	r0, r7
  402f1c:	e781      	b.n	402e22 <__sfvwrite_r+0xca>
  402f1e:	461a      	mov	r2, r3
  402f20:	4659      	mov	r1, fp
  402f22:	9301      	str	r3, [sp, #4]
  402f24:	f000 fcda 	bl	4038dc <memmove>
  402f28:	68a2      	ldr	r2, [r4, #8]
  402f2a:	ebb8 0807 	subs.w	r8, r8, r7
  402f2e:	6821      	ldr	r1, [r4, #0]
  402f30:	9b01      	ldr	r3, [sp, #4]
  402f32:	eba2 0203 	sub.w	r2, r2, r3
  402f36:	440b      	add	r3, r1
  402f38:	60a2      	str	r2, [r4, #8]
  402f3a:	6023      	str	r3, [r4, #0]
  402f3c:	d1d9      	bne.n	402ef2 <__sfvwrite_r+0x19a>
  402f3e:	4648      	mov	r0, r9
  402f40:	4621      	mov	r1, r4
  402f42:	f7ff fd29 	bl	402998 <_fflush_r>
  402f46:	2800      	cmp	r0, #0
  402f48:	d1a3      	bne.n	402e92 <__sfvwrite_r+0x13a>
  402f4a:	f8cd 8000 	str.w	r8, [sp]
  402f4e:	e7d0      	b.n	402ef2 <__sfvwrite_r+0x19a>
  402f50:	4647      	mov	r7, r8
  402f52:	6820      	ldr	r0, [r4, #0]
  402f54:	46c2      	mov	sl, r8
  402f56:	e758      	b.n	402e0a <__sfvwrite_r+0xb2>
  402f58:	4658      	mov	r0, fp
  402f5a:	210a      	movs	r1, #10
  402f5c:	4652      	mov	r2, sl
  402f5e:	f000 fbdb 	bl	403718 <memchr>
  402f62:	2800      	cmp	r0, #0
  402f64:	d07b      	beq.n	40305e <__sfvwrite_r+0x306>
  402f66:	3001      	adds	r0, #1
  402f68:	2301      	movs	r3, #1
  402f6a:	ebcb 0800 	rsb	r8, fp, r0
  402f6e:	9300      	str	r3, [sp, #0]
  402f70:	e7a2      	b.n	402eb8 <__sfvwrite_r+0x160>
  402f72:	6963      	ldr	r3, [r4, #20]
  402f74:	6921      	ldr	r1, [r4, #16]
  402f76:	6827      	ldr	r7, [r4, #0]
  402f78:	eb03 0c43 	add.w	ip, r3, r3, lsl #1
  402f7c:	1a7f      	subs	r7, r7, r1
  402f7e:	eb0c 7cdc 	add.w	ip, ip, ip, lsr #31
  402f82:	1c7b      	adds	r3, r7, #1
  402f84:	ea4f 0c6c 	mov.w	ip, ip, asr #1
  402f88:	4443      	add	r3, r8
  402f8a:	4662      	mov	r2, ip
  402f8c:	459c      	cmp	ip, r3
  402f8e:	d201      	bcs.n	402f94 <__sfvwrite_r+0x23c>
  402f90:	469c      	mov	ip, r3
  402f92:	461a      	mov	r2, r3
  402f94:	f41e 6f80 	tst.w	lr, #1024	; 0x400
  402f98:	f8cd c000 	str.w	ip, [sp]
  402f9c:	d04b      	beq.n	403036 <__sfvwrite_r+0x2de>
  402f9e:	4611      	mov	r1, r2
  402fa0:	4648      	mov	r0, r9
  402fa2:	f000 f90d 	bl	4031c0 <_malloc_r>
  402fa6:	f8dd c000 	ldr.w	ip, [sp]
  402faa:	4682      	mov	sl, r0
  402fac:	2800      	cmp	r0, #0
  402fae:	d05e      	beq.n	40306e <__sfvwrite_r+0x316>
  402fb0:	463a      	mov	r2, r7
  402fb2:	6921      	ldr	r1, [r4, #16]
  402fb4:	f8cd c000 	str.w	ip, [sp]
  402fb8:	f000 fbf6 	bl	4037a8 <memcpy>
  402fbc:	89a2      	ldrh	r2, [r4, #12]
  402fbe:	f8dd c000 	ldr.w	ip, [sp]
  402fc2:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
  402fc6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  402fca:	81a2      	strh	r2, [r4, #12]
  402fcc:	eb0a 0007 	add.w	r0, sl, r7
  402fd0:	ebc7 020c 	rsb	r2, r7, ip
  402fd4:	f8c4 a010 	str.w	sl, [r4, #16]
  402fd8:	4647      	mov	r7, r8
  402fda:	6020      	str	r0, [r4, #0]
  402fdc:	46c2      	mov	sl, r8
  402fde:	60a2      	str	r2, [r4, #8]
  402fe0:	f8c4 c014 	str.w	ip, [r4, #20]
  402fe4:	e711      	b.n	402e0a <__sfvwrite_r+0xb2>
  402fe6:	f06f 4e00 	mvn.w	lr, #2147483648	; 0x80000000
  402fea:	6a67      	ldr	r7, [r4, #36]	; 0x24
  402fec:	4648      	mov	r0, r9
  402fee:	69e1      	ldr	r1, [r4, #28]
  402ff0:	45c6      	cmp	lr, r8
  402ff2:	465a      	mov	r2, fp
  402ff4:	bf28      	it	cs
  402ff6:	46c6      	movcs	lr, r8
  402ff8:	fb9e fef3 	sdiv	lr, lr, r3
  402ffc:	fb0e f303 	mul.w	r3, lr, r3
  403000:	47b8      	blx	r7
  403002:	2800      	cmp	r0, #0
  403004:	f73f af0d 	bgt.w	402e22 <__sfvwrite_r+0xca>
  403008:	e743      	b.n	402e92 <__sfvwrite_r+0x13a>
  40300a:	4662      	mov	r2, ip
  40300c:	4659      	mov	r1, fp
  40300e:	f8cd c004 	str.w	ip, [sp, #4]
  403012:	f000 fc63 	bl	4038dc <memmove>
  403016:	6823      	ldr	r3, [r4, #0]
  403018:	4648      	mov	r0, r9
  40301a:	f8dd c004 	ldr.w	ip, [sp, #4]
  40301e:	4621      	mov	r1, r4
  403020:	4463      	add	r3, ip
  403022:	6023      	str	r3, [r4, #0]
  403024:	f7ff fcb8 	bl	402998 <_fflush_r>
  403028:	f8dd c004 	ldr.w	ip, [sp, #4]
  40302c:	2800      	cmp	r0, #0
  40302e:	f47f af30 	bne.w	402e92 <__sfvwrite_r+0x13a>
  403032:	4667      	mov	r7, ip
  403034:	e75a      	b.n	402eec <__sfvwrite_r+0x194>
  403036:	4648      	mov	r0, r9
  403038:	f000 fcb6 	bl	4039a8 <_realloc_r>
  40303c:	f8dd c000 	ldr.w	ip, [sp]
  403040:	4682      	mov	sl, r0
  403042:	2800      	cmp	r0, #0
  403044:	d1c2      	bne.n	402fcc <__sfvwrite_r+0x274>
  403046:	4648      	mov	r0, r9
  403048:	6921      	ldr	r1, [r4, #16]
  40304a:	f7ff fdad 	bl	402ba8 <_free_r>
  40304e:	89a3      	ldrh	r3, [r4, #12]
  403050:	220c      	movs	r2, #12
  403052:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  403056:	f8c9 2000 	str.w	r2, [r9]
  40305a:	b29b      	uxth	r3, r3
  40305c:	e71a      	b.n	402e94 <__sfvwrite_r+0x13c>
  40305e:	2301      	movs	r3, #1
  403060:	f10a 0801 	add.w	r8, sl, #1
  403064:	9300      	str	r3, [sp, #0]
  403066:	e727      	b.n	402eb8 <__sfvwrite_r+0x160>
  403068:	f04f 30ff 	mov.w	r0, #4294967295
  40306c:	e6a6      	b.n	402dbc <__sfvwrite_r+0x64>
  40306e:	220c      	movs	r2, #12
  403070:	89a3      	ldrh	r3, [r4, #12]
  403072:	f8c9 2000 	str.w	r2, [r9]
  403076:	e70d      	b.n	402e94 <__sfvwrite_r+0x13c>
  403078:	7ffffc00 	.word	0x7ffffc00

0040307c <_fwalk_reent>:
  40307c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  403080:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  403084:	d01e      	beq.n	4030c4 <_fwalk_reent+0x48>
  403086:	4688      	mov	r8, r1
  403088:	4606      	mov	r6, r0
  40308a:	f04f 0900 	mov.w	r9, #0
  40308e:	687d      	ldr	r5, [r7, #4]
  403090:	68bc      	ldr	r4, [r7, #8]
  403092:	3d01      	subs	r5, #1
  403094:	d410      	bmi.n	4030b8 <_fwalk_reent+0x3c>
  403096:	89a3      	ldrh	r3, [r4, #12]
  403098:	3d01      	subs	r5, #1
  40309a:	2b01      	cmp	r3, #1
  40309c:	d908      	bls.n	4030b0 <_fwalk_reent+0x34>
  40309e:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  4030a2:	4621      	mov	r1, r4
  4030a4:	4630      	mov	r0, r6
  4030a6:	3301      	adds	r3, #1
  4030a8:	d002      	beq.n	4030b0 <_fwalk_reent+0x34>
  4030aa:	47c0      	blx	r8
  4030ac:	ea49 0900 	orr.w	r9, r9, r0
  4030b0:	1c6b      	adds	r3, r5, #1
  4030b2:	f104 0468 	add.w	r4, r4, #104	; 0x68
  4030b6:	d1ee      	bne.n	403096 <_fwalk_reent+0x1a>
  4030b8:	683f      	ldr	r7, [r7, #0]
  4030ba:	2f00      	cmp	r7, #0
  4030bc:	d1e7      	bne.n	40308e <_fwalk_reent+0x12>
  4030be:	4648      	mov	r0, r9
  4030c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4030c4:	46b9      	mov	r9, r7
  4030c6:	4648      	mov	r0, r9
  4030c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

004030cc <__smakebuf_r>:
  4030cc:	898b      	ldrh	r3, [r1, #12]
  4030ce:	b29a      	uxth	r2, r3
  4030d0:	f012 0f02 	tst.w	r2, #2
  4030d4:	d13d      	bne.n	403152 <__smakebuf_r+0x86>
  4030d6:	b5f0      	push	{r4, r5, r6, r7, lr}
  4030d8:	460c      	mov	r4, r1
  4030da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4030de:	b091      	sub	sp, #68	; 0x44
  4030e0:	4605      	mov	r5, r0
  4030e2:	2900      	cmp	r1, #0
  4030e4:	db19      	blt.n	40311a <__smakebuf_r+0x4e>
  4030e6:	aa01      	add	r2, sp, #4
  4030e8:	f000 ff68 	bl	403fbc <_fstat_r>
  4030ec:	2800      	cmp	r0, #0
  4030ee:	db12      	blt.n	403116 <__smakebuf_r+0x4a>
  4030f0:	9b02      	ldr	r3, [sp, #8]
  4030f2:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
  4030f6:	f5a3 5700 	sub.w	r7, r3, #8192	; 0x2000
  4030fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
  4030fe:	fab7 f787 	clz	r7, r7
  403102:	ea4f 1757 	mov.w	r7, r7, lsr #5
  403106:	d02b      	beq.n	403160 <__smakebuf_r+0x94>
  403108:	89a3      	ldrh	r3, [r4, #12]
  40310a:	f44f 6680 	mov.w	r6, #1024	; 0x400
  40310e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  403112:	81a3      	strh	r3, [r4, #12]
  403114:	e00c      	b.n	403130 <__smakebuf_r+0x64>
  403116:	89a3      	ldrh	r3, [r4, #12]
  403118:	b29a      	uxth	r2, r3
  40311a:	f012 0f80 	tst.w	r2, #128	; 0x80
  40311e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  403122:	f04f 0700 	mov.w	r7, #0
  403126:	bf0c      	ite	eq
  403128:	f44f 6680 	moveq.w	r6, #1024	; 0x400
  40312c:	2640      	movne	r6, #64	; 0x40
  40312e:	81a3      	strh	r3, [r4, #12]
  403130:	4628      	mov	r0, r5
  403132:	4631      	mov	r1, r6
  403134:	f000 f844 	bl	4031c0 <_malloc_r>
  403138:	89a3      	ldrh	r3, [r4, #12]
  40313a:	b340      	cbz	r0, 40318e <__smakebuf_r+0xc2>
  40313c:	4a1a      	ldr	r2, [pc, #104]	; (4031a8 <__smakebuf_r+0xdc>)
  40313e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  403142:	63ea      	str	r2, [r5, #60]	; 0x3c
  403144:	81a3      	strh	r3, [r4, #12]
  403146:	6020      	str	r0, [r4, #0]
  403148:	6120      	str	r0, [r4, #16]
  40314a:	6166      	str	r6, [r4, #20]
  40314c:	b99f      	cbnz	r7, 403176 <__smakebuf_r+0xaa>
  40314e:	b011      	add	sp, #68	; 0x44
  403150:	bdf0      	pop	{r4, r5, r6, r7, pc}
  403152:	f101 0343 	add.w	r3, r1, #67	; 0x43
  403156:	2201      	movs	r2, #1
  403158:	600b      	str	r3, [r1, #0]
  40315a:	610b      	str	r3, [r1, #16]
  40315c:	614a      	str	r2, [r1, #20]
  40315e:	4770      	bx	lr
  403160:	4b12      	ldr	r3, [pc, #72]	; (4031ac <__smakebuf_r+0xe0>)
  403162:	6aa2      	ldr	r2, [r4, #40]	; 0x28
  403164:	429a      	cmp	r2, r3
  403166:	d1cf      	bne.n	403108 <__smakebuf_r+0x3c>
  403168:	89a3      	ldrh	r3, [r4, #12]
  40316a:	f44f 6680 	mov.w	r6, #1024	; 0x400
  40316e:	4333      	orrs	r3, r6
  403170:	64e6      	str	r6, [r4, #76]	; 0x4c
  403172:	81a3      	strh	r3, [r4, #12]
  403174:	e7dc      	b.n	403130 <__smakebuf_r+0x64>
  403176:	4628      	mov	r0, r5
  403178:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  40317c:	f000 ff32 	bl	403fe4 <_isatty_r>
  403180:	2800      	cmp	r0, #0
  403182:	d0e4      	beq.n	40314e <__smakebuf_r+0x82>
  403184:	89a3      	ldrh	r3, [r4, #12]
  403186:	f043 0301 	orr.w	r3, r3, #1
  40318a:	81a3      	strh	r3, [r4, #12]
  40318c:	e7df      	b.n	40314e <__smakebuf_r+0x82>
  40318e:	059a      	lsls	r2, r3, #22
  403190:	d4dd      	bmi.n	40314e <__smakebuf_r+0x82>
  403192:	f104 0243 	add.w	r2, r4, #67	; 0x43
  403196:	f043 0302 	orr.w	r3, r3, #2
  40319a:	2101      	movs	r1, #1
  40319c:	81a3      	strh	r3, [r4, #12]
  40319e:	6022      	str	r2, [r4, #0]
  4031a0:	6122      	str	r2, [r4, #16]
  4031a2:	6161      	str	r1, [r4, #20]
  4031a4:	e7d3      	b.n	40314e <__smakebuf_r+0x82>
  4031a6:	bf00      	nop
  4031a8:	004029c5 	.word	0x004029c5
  4031ac:	00403e19 	.word	0x00403e19

004031b0 <malloc>:
  4031b0:	4b02      	ldr	r3, [pc, #8]	; (4031bc <malloc+0xc>)
  4031b2:	4601      	mov	r1, r0
  4031b4:	6818      	ldr	r0, [r3, #0]
  4031b6:	f000 b803 	b.w	4031c0 <_malloc_r>
  4031ba:	bf00      	nop
  4031bc:	204004a8 	.word	0x204004a8

004031c0 <_malloc_r>:
  4031c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4031c4:	f101 040b 	add.w	r4, r1, #11
  4031c8:	b083      	sub	sp, #12
  4031ca:	4605      	mov	r5, r0
  4031cc:	2c16      	cmp	r4, #22
  4031ce:	d927      	bls.n	403220 <_malloc_r+0x60>
  4031d0:	f034 0407 	bics.w	r4, r4, #7
  4031d4:	d42a      	bmi.n	40322c <_malloc_r+0x6c>
  4031d6:	42a1      	cmp	r1, r4
  4031d8:	d828      	bhi.n	40322c <_malloc_r+0x6c>
  4031da:	f000 fbe1 	bl	4039a0 <__malloc_lock>
  4031de:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
  4031e2:	d22b      	bcs.n	40323c <_malloc_r+0x7c>
  4031e4:	ea4f 0cd4 	mov.w	ip, r4, lsr #3
  4031e8:	4ec0      	ldr	r6, [pc, #768]	; (4034ec <_malloc_r+0x32c>)
  4031ea:	eb06 02cc 	add.w	r2, r6, ip, lsl #3
  4031ee:	68d3      	ldr	r3, [r2, #12]
  4031f0:	4293      	cmp	r3, r2
  4031f2:	f000 8171 	beq.w	4034d8 <_malloc_r+0x318>
  4031f6:	685a      	ldr	r2, [r3, #4]
  4031f8:	f103 0808 	add.w	r8, r3, #8
  4031fc:	68d9      	ldr	r1, [r3, #12]
  4031fe:	4628      	mov	r0, r5
  403200:	f022 0203 	bic.w	r2, r2, #3
  403204:	689c      	ldr	r4, [r3, #8]
  403206:	4413      	add	r3, r2
  403208:	60e1      	str	r1, [r4, #12]
  40320a:	608c      	str	r4, [r1, #8]
  40320c:	685a      	ldr	r2, [r3, #4]
  40320e:	f042 0201 	orr.w	r2, r2, #1
  403212:	605a      	str	r2, [r3, #4]
  403214:	f000 fbc6 	bl	4039a4 <__malloc_unlock>
  403218:	4640      	mov	r0, r8
  40321a:	b003      	add	sp, #12
  40321c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403220:	2910      	cmp	r1, #16
  403222:	d803      	bhi.n	40322c <_malloc_r+0x6c>
  403224:	f000 fbbc 	bl	4039a0 <__malloc_lock>
  403228:	2410      	movs	r4, #16
  40322a:	e7db      	b.n	4031e4 <_malloc_r+0x24>
  40322c:	f04f 0800 	mov.w	r8, #0
  403230:	230c      	movs	r3, #12
  403232:	4640      	mov	r0, r8
  403234:	602b      	str	r3, [r5, #0]
  403236:	b003      	add	sp, #12
  403238:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40323c:	ea5f 2c54 	movs.w	ip, r4, lsr #9
  403240:	f000 8089 	beq.w	403356 <_malloc_r+0x196>
  403244:	f1bc 0f04 	cmp.w	ip, #4
  403248:	f200 80c4 	bhi.w	4033d4 <_malloc_r+0x214>
  40324c:	ea4f 1c94 	mov.w	ip, r4, lsr #6
  403250:	f10c 0c38 	add.w	ip, ip, #56	; 0x38
  403254:	ea4f 004c 	mov.w	r0, ip, lsl #1
  403258:	4ea4      	ldr	r6, [pc, #656]	; (4034ec <_malloc_r+0x32c>)
  40325a:	eb06 0080 	add.w	r0, r6, r0, lsl #2
  40325e:	68c3      	ldr	r3, [r0, #12]
  403260:	4298      	cmp	r0, r3
  403262:	d105      	bne.n	403270 <_malloc_r+0xb0>
  403264:	e00c      	b.n	403280 <_malloc_r+0xc0>
  403266:	2900      	cmp	r1, #0
  403268:	da79      	bge.n	40335e <_malloc_r+0x19e>
  40326a:	68db      	ldr	r3, [r3, #12]
  40326c:	4298      	cmp	r0, r3
  40326e:	d007      	beq.n	403280 <_malloc_r+0xc0>
  403270:	685a      	ldr	r2, [r3, #4]
  403272:	f022 0203 	bic.w	r2, r2, #3
  403276:	1b11      	subs	r1, r2, r4
  403278:	290f      	cmp	r1, #15
  40327a:	ddf4      	ble.n	403266 <_malloc_r+0xa6>
  40327c:	f10c 3cff 	add.w	ip, ip, #4294967295
  403280:	f10c 0c01 	add.w	ip, ip, #1
  403284:	4f99      	ldr	r7, [pc, #612]	; (4034ec <_malloc_r+0x32c>)
  403286:	6933      	ldr	r3, [r6, #16]
  403288:	f107 0e08 	add.w	lr, r7, #8
  40328c:	4573      	cmp	r3, lr
  40328e:	f000 8119 	beq.w	4034c4 <_malloc_r+0x304>
  403292:	685a      	ldr	r2, [r3, #4]
  403294:	f022 0203 	bic.w	r2, r2, #3
  403298:	1b11      	subs	r1, r2, r4
  40329a:	290f      	cmp	r1, #15
  40329c:	f300 80ca 	bgt.w	403434 <_malloc_r+0x274>
  4032a0:	2900      	cmp	r1, #0
  4032a2:	f8c7 e014 	str.w	lr, [r7, #20]
  4032a6:	f8c7 e010 	str.w	lr, [r7, #16]
  4032aa:	da6a      	bge.n	403382 <_malloc_r+0x1c2>
  4032ac:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  4032b0:	f080 809f 	bcs.w	4033f2 <_malloc_r+0x232>
  4032b4:	08d2      	lsrs	r2, r2, #3
  4032b6:	2001      	movs	r0, #1
  4032b8:	6879      	ldr	r1, [r7, #4]
  4032ba:	ea4f 08a2 	mov.w	r8, r2, asr #2
  4032be:	eb07 02c2 	add.w	r2, r7, r2, lsl #3
  4032c2:	fa00 f008 	lsl.w	r0, r0, r8
  4032c6:	f8d2 8008 	ldr.w	r8, [r2, #8]
  4032ca:	4308      	orrs	r0, r1
  4032cc:	60da      	str	r2, [r3, #12]
  4032ce:	f8c3 8008 	str.w	r8, [r3, #8]
  4032d2:	6078      	str	r0, [r7, #4]
  4032d4:	6093      	str	r3, [r2, #8]
  4032d6:	f8c8 300c 	str.w	r3, [r8, #12]
  4032da:	ea4f 03ac 	mov.w	r3, ip, asr #2
  4032de:	2101      	movs	r1, #1
  4032e0:	4099      	lsls	r1, r3
  4032e2:	4281      	cmp	r1, r0
  4032e4:	d85b      	bhi.n	40339e <_malloc_r+0x1de>
  4032e6:	4208      	tst	r0, r1
  4032e8:	d106      	bne.n	4032f8 <_malloc_r+0x138>
  4032ea:	f02c 0c03 	bic.w	ip, ip, #3
  4032ee:	0049      	lsls	r1, r1, #1
  4032f0:	f10c 0c04 	add.w	ip, ip, #4
  4032f4:	4208      	tst	r0, r1
  4032f6:	d0fa      	beq.n	4032ee <_malloc_r+0x12e>
  4032f8:	eb06 08cc 	add.w	r8, r6, ip, lsl #3
  4032fc:	46e1      	mov	r9, ip
  4032fe:	4640      	mov	r0, r8
  403300:	68c7      	ldr	r7, [r0, #12]
  403302:	42b8      	cmp	r0, r7
  403304:	d107      	bne.n	403316 <_malloc_r+0x156>
  403306:	e0df      	b.n	4034c8 <_malloc_r+0x308>
  403308:	2a00      	cmp	r2, #0
  40330a:	f280 80f7 	bge.w	4034fc <_malloc_r+0x33c>
  40330e:	68ff      	ldr	r7, [r7, #12]
  403310:	42b8      	cmp	r0, r7
  403312:	f000 80d9 	beq.w	4034c8 <_malloc_r+0x308>
  403316:	687b      	ldr	r3, [r7, #4]
  403318:	f023 0303 	bic.w	r3, r3, #3
  40331c:	1b1a      	subs	r2, r3, r4
  40331e:	2a0f      	cmp	r2, #15
  403320:	ddf2      	ble.n	403308 <_malloc_r+0x148>
  403322:	46b8      	mov	r8, r7
  403324:	68fb      	ldr	r3, [r7, #12]
  403326:	f044 0901 	orr.w	r9, r4, #1
  40332a:	f042 0c01 	orr.w	ip, r2, #1
  40332e:	f858 1f08 	ldr.w	r1, [r8, #8]!
  403332:	443c      	add	r4, r7
  403334:	f8c7 9004 	str.w	r9, [r7, #4]
  403338:	4628      	mov	r0, r5
  40333a:	60cb      	str	r3, [r1, #12]
  40333c:	6099      	str	r1, [r3, #8]
  40333e:	6174      	str	r4, [r6, #20]
  403340:	6134      	str	r4, [r6, #16]
  403342:	f8c4 e00c 	str.w	lr, [r4, #12]
  403346:	f8c4 e008 	str.w	lr, [r4, #8]
  40334a:	f8c4 c004 	str.w	ip, [r4, #4]
  40334e:	50a2      	str	r2, [r4, r2]
  403350:	f000 fb28 	bl	4039a4 <__malloc_unlock>
  403354:	e760      	b.n	403218 <_malloc_r+0x58>
  403356:	207e      	movs	r0, #126	; 0x7e
  403358:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
  40335c:	e77c      	b.n	403258 <_malloc_r+0x98>
  40335e:	441a      	add	r2, r3
  403360:	68dc      	ldr	r4, [r3, #12]
  403362:	689e      	ldr	r6, [r3, #8]
  403364:	f103 0808 	add.w	r8, r3, #8
  403368:	6851      	ldr	r1, [r2, #4]
  40336a:	4628      	mov	r0, r5
  40336c:	60f4      	str	r4, [r6, #12]
  40336e:	f041 0301 	orr.w	r3, r1, #1
  403372:	60a6      	str	r6, [r4, #8]
  403374:	6053      	str	r3, [r2, #4]
  403376:	f000 fb15 	bl	4039a4 <__malloc_unlock>
  40337a:	4640      	mov	r0, r8
  40337c:	b003      	add	sp, #12
  40337e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403382:	441a      	add	r2, r3
  403384:	f103 0808 	add.w	r8, r3, #8
  403388:	4628      	mov	r0, r5
  40338a:	6853      	ldr	r3, [r2, #4]
  40338c:	f043 0301 	orr.w	r3, r3, #1
  403390:	6053      	str	r3, [r2, #4]
  403392:	f000 fb07 	bl	4039a4 <__malloc_unlock>
  403396:	4640      	mov	r0, r8
  403398:	b003      	add	sp, #12
  40339a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40339e:	68b7      	ldr	r7, [r6, #8]
  4033a0:	687a      	ldr	r2, [r7, #4]
  4033a2:	f022 0803 	bic.w	r8, r2, #3
  4033a6:	ebc4 0208 	rsb	r2, r4, r8
  4033aa:	2a0f      	cmp	r2, #15
  4033ac:	dd56      	ble.n	40345c <_malloc_r+0x29c>
  4033ae:	45a0      	cmp	r8, r4
  4033b0:	d354      	bcc.n	40345c <_malloc_r+0x29c>
  4033b2:	f044 0301 	orr.w	r3, r4, #1
  4033b6:	f042 0201 	orr.w	r2, r2, #1
  4033ba:	443c      	add	r4, r7
  4033bc:	f107 0808 	add.w	r8, r7, #8
  4033c0:	607b      	str	r3, [r7, #4]
  4033c2:	4628      	mov	r0, r5
  4033c4:	60b4      	str	r4, [r6, #8]
  4033c6:	6062      	str	r2, [r4, #4]
  4033c8:	f000 faec 	bl	4039a4 <__malloc_unlock>
  4033cc:	4640      	mov	r0, r8
  4033ce:	b003      	add	sp, #12
  4033d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4033d4:	f1bc 0f14 	cmp.w	ip, #20
  4033d8:	f240 809f 	bls.w	40351a <_malloc_r+0x35a>
  4033dc:	f1bc 0f54 	cmp.w	ip, #84	; 0x54
  4033e0:	f200 8127 	bhi.w	403632 <_malloc_r+0x472>
  4033e4:	ea4f 3c14 	mov.w	ip, r4, lsr #12
  4033e8:	f10c 0c6e 	add.w	ip, ip, #110	; 0x6e
  4033ec:	ea4f 004c 	mov.w	r0, ip, lsl #1
  4033f0:	e732      	b.n	403258 <_malloc_r+0x98>
  4033f2:	0a51      	lsrs	r1, r2, #9
  4033f4:	2904      	cmp	r1, #4
  4033f6:	f240 8095 	bls.w	403524 <_malloc_r+0x364>
  4033fa:	2914      	cmp	r1, #20
  4033fc:	f200 8142 	bhi.w	403684 <_malloc_r+0x4c4>
  403400:	f101 075b 	add.w	r7, r1, #91	; 0x5b
  403404:	0078      	lsls	r0, r7, #1
  403406:	eb06 0080 	add.w	r0, r6, r0, lsl #2
  40340a:	f8df 90e0 	ldr.w	r9, [pc, #224]	; 4034ec <_malloc_r+0x32c>
  40340e:	6881      	ldr	r1, [r0, #8]
  403410:	4281      	cmp	r1, r0
  403412:	f000 811b 	beq.w	40364c <_malloc_r+0x48c>
  403416:	684f      	ldr	r7, [r1, #4]
  403418:	f027 0703 	bic.w	r7, r7, #3
  40341c:	42ba      	cmp	r2, r7
  40341e:	d202      	bcs.n	403426 <_malloc_r+0x266>
  403420:	6889      	ldr	r1, [r1, #8]
  403422:	4288      	cmp	r0, r1
  403424:	d1f7      	bne.n	403416 <_malloc_r+0x256>
  403426:	68ca      	ldr	r2, [r1, #12]
  403428:	6870      	ldr	r0, [r6, #4]
  40342a:	60da      	str	r2, [r3, #12]
  40342c:	6099      	str	r1, [r3, #8]
  40342e:	6093      	str	r3, [r2, #8]
  403430:	60cb      	str	r3, [r1, #12]
  403432:	e752      	b.n	4032da <_malloc_r+0x11a>
  403434:	f044 0601 	orr.w	r6, r4, #1
  403438:	f041 0201 	orr.w	r2, r1, #1
  40343c:	441c      	add	r4, r3
  40343e:	4628      	mov	r0, r5
  403440:	605e      	str	r6, [r3, #4]
  403442:	f103 0808 	add.w	r8, r3, #8
  403446:	617c      	str	r4, [r7, #20]
  403448:	613c      	str	r4, [r7, #16]
  40344a:	f8c4 e00c 	str.w	lr, [r4, #12]
  40344e:	f8c4 e008 	str.w	lr, [r4, #8]
  403452:	6062      	str	r2, [r4, #4]
  403454:	5061      	str	r1, [r4, r1]
  403456:	f000 faa5 	bl	4039a4 <__malloc_unlock>
  40345a:	e6dd      	b.n	403218 <_malloc_r+0x58>
  40345c:	4a24      	ldr	r2, [pc, #144]	; (4034f0 <_malloc_r+0x330>)
  40345e:	4b25      	ldr	r3, [pc, #148]	; (4034f4 <_malloc_r+0x334>)
  403460:	6811      	ldr	r1, [r2, #0]
  403462:	681b      	ldr	r3, [r3, #0]
  403464:	3101      	adds	r1, #1
  403466:	4423      	add	r3, r4
  403468:	f000 8109 	beq.w	40367e <_malloc_r+0x4be>
  40346c:	f241 010f 	movw	r1, #4111	; 0x100f
  403470:	f8df 9084 	ldr.w	r9, [pc, #132]	; 4034f8 <_malloc_r+0x338>
  403474:	4419      	add	r1, r3
  403476:	ea01 0909 	and.w	r9, r1, r9
  40347a:	4628      	mov	r0, r5
  40347c:	4649      	mov	r1, r9
  40347e:	9201      	str	r2, [sp, #4]
  403480:	f000 fc8a 	bl	403d98 <_sbrk_r>
  403484:	f1b0 3fff 	cmp.w	r0, #4294967295
  403488:	4682      	mov	sl, r0
  40348a:	9a01      	ldr	r2, [sp, #4]
  40348c:	f000 8101 	beq.w	403692 <_malloc_r+0x4d2>
  403490:	1bbb      	subs	r3, r7, r6
  403492:	eb07 0108 	add.w	r1, r7, r8
  403496:	4815      	ldr	r0, [pc, #84]	; (4034ec <_malloc_r+0x32c>)
  403498:	bf18      	it	ne
  40349a:	2301      	movne	r3, #1
  40349c:	4551      	cmp	r1, sl
  40349e:	d967      	bls.n	403570 <_malloc_r+0x3b0>
  4034a0:	2b00      	cmp	r3, #0
  4034a2:	d065      	beq.n	403570 <_malloc_r+0x3b0>
  4034a4:	6887      	ldr	r7, [r0, #8]
  4034a6:	687b      	ldr	r3, [r7, #4]
  4034a8:	f023 0303 	bic.w	r3, r3, #3
  4034ac:	1b1a      	subs	r2, r3, r4
  4034ae:	2a0f      	cmp	r2, #15
  4034b0:	dd02      	ble.n	4034b8 <_malloc_r+0x2f8>
  4034b2:	429c      	cmp	r4, r3
  4034b4:	f67f af7d 	bls.w	4033b2 <_malloc_r+0x1f2>
  4034b8:	4628      	mov	r0, r5
  4034ba:	f04f 0800 	mov.w	r8, #0
  4034be:	f000 fa71 	bl	4039a4 <__malloc_unlock>
  4034c2:	e6a9      	b.n	403218 <_malloc_r+0x58>
  4034c4:	6878      	ldr	r0, [r7, #4]
  4034c6:	e708      	b.n	4032da <_malloc_r+0x11a>
  4034c8:	f109 0901 	add.w	r9, r9, #1
  4034cc:	3008      	adds	r0, #8
  4034ce:	f019 0f03 	tst.w	r9, #3
  4034d2:	f47f af15 	bne.w	403300 <_malloc_r+0x140>
  4034d6:	e02f      	b.n	403538 <_malloc_r+0x378>
  4034d8:	f103 0208 	add.w	r2, r3, #8
  4034dc:	695b      	ldr	r3, [r3, #20]
  4034de:	429a      	cmp	r2, r3
  4034e0:	bf08      	it	eq
  4034e2:	f10c 0c02 	addeq.w	ip, ip, #2
  4034e6:	f43f aecd 	beq.w	403284 <_malloc_r+0xc4>
  4034ea:	e684      	b.n	4031f6 <_malloc_r+0x36>
  4034ec:	204004ac 	.word	0x204004ac
  4034f0:	204008b8 	.word	0x204008b8
  4034f4:	20400964 	.word	0x20400964
  4034f8:	fffff000 	.word	0xfffff000
  4034fc:	18fa      	adds	r2, r7, r3
  4034fe:	46b8      	mov	r8, r7
  403500:	68f9      	ldr	r1, [r7, #12]
  403502:	4628      	mov	r0, r5
  403504:	6853      	ldr	r3, [r2, #4]
  403506:	f858 4f08 	ldr.w	r4, [r8, #8]!
  40350a:	f043 0301 	orr.w	r3, r3, #1
  40350e:	6053      	str	r3, [r2, #4]
  403510:	60e1      	str	r1, [r4, #12]
  403512:	608c      	str	r4, [r1, #8]
  403514:	f000 fa46 	bl	4039a4 <__malloc_unlock>
  403518:	e67e      	b.n	403218 <_malloc_r+0x58>
  40351a:	f10c 0c5b 	add.w	ip, ip, #91	; 0x5b
  40351e:	ea4f 004c 	mov.w	r0, ip, lsl #1
  403522:	e699      	b.n	403258 <_malloc_r+0x98>
  403524:	0991      	lsrs	r1, r2, #6
  403526:	f101 0738 	add.w	r7, r1, #56	; 0x38
  40352a:	0078      	lsls	r0, r7, #1
  40352c:	e76b      	b.n	403406 <_malloc_r+0x246>
  40352e:	f8d8 8000 	ldr.w	r8, [r8]
  403532:	4598      	cmp	r8, r3
  403534:	f040 80e6 	bne.w	403704 <_malloc_r+0x544>
  403538:	f01c 0f03 	tst.w	ip, #3
  40353c:	f1a8 0308 	sub.w	r3, r8, #8
  403540:	f10c 3cff 	add.w	ip, ip, #4294967295
  403544:	d1f3      	bne.n	40352e <_malloc_r+0x36e>
  403546:	6873      	ldr	r3, [r6, #4]
  403548:	ea23 0301 	bic.w	r3, r3, r1
  40354c:	6073      	str	r3, [r6, #4]
  40354e:	0049      	lsls	r1, r1, #1
  403550:	4299      	cmp	r1, r3
  403552:	f63f af24 	bhi.w	40339e <_malloc_r+0x1de>
  403556:	2900      	cmp	r1, #0
  403558:	f43f af21 	beq.w	40339e <_malloc_r+0x1de>
  40355c:	420b      	tst	r3, r1
  40355e:	46cc      	mov	ip, r9
  403560:	f47f aeca 	bne.w	4032f8 <_malloc_r+0x138>
  403564:	0049      	lsls	r1, r1, #1
  403566:	f10c 0c04 	add.w	ip, ip, #4
  40356a:	420b      	tst	r3, r1
  40356c:	d0fa      	beq.n	403564 <_malloc_r+0x3a4>
  40356e:	e6c3      	b.n	4032f8 <_malloc_r+0x138>
  403570:	f8df b19c 	ldr.w	fp, [pc, #412]	; 403710 <_malloc_r+0x550>
  403574:	4551      	cmp	r1, sl
  403576:	f8db 0000 	ldr.w	r0, [fp]
  40357a:	4448      	add	r0, r9
  40357c:	f8cb 0000 	str.w	r0, [fp]
  403580:	f000 808c 	beq.w	40369c <_malloc_r+0x4dc>
  403584:	6812      	ldr	r2, [r2, #0]
  403586:	f8df e18c 	ldr.w	lr, [pc, #396]	; 403714 <_malloc_r+0x554>
  40358a:	3201      	adds	r2, #1
  40358c:	f000 80a3 	beq.w	4036d6 <_malloc_r+0x516>
  403590:	ebc1 010a 	rsb	r1, r1, sl
  403594:	4408      	add	r0, r1
  403596:	f8cb 0000 	str.w	r0, [fp]
  40359a:	f01a 0107 	ands.w	r1, sl, #7
  40359e:	d052      	beq.n	403646 <_malloc_r+0x486>
  4035a0:	f1c1 0008 	rsb	r0, r1, #8
  4035a4:	f241 0208 	movw	r2, #4104	; 0x1008
  4035a8:	4482      	add	sl, r0
  4035aa:	1a52      	subs	r2, r2, r1
  4035ac:	eb0a 0109 	add.w	r1, sl, r9
  4035b0:	4628      	mov	r0, r5
  4035b2:	9301      	str	r3, [sp, #4]
  4035b4:	f3c1 010b 	ubfx	r1, r1, #0, #12
  4035b8:	ebc1 0902 	rsb	r9, r1, r2
  4035bc:	4649      	mov	r1, r9
  4035be:	f000 fbeb 	bl	403d98 <_sbrk_r>
  4035c2:	1c43      	adds	r3, r0, #1
  4035c4:	9b01      	ldr	r3, [sp, #4]
  4035c6:	d07a      	beq.n	4036be <_malloc_r+0x4fe>
  4035c8:	ebca 0200 	rsb	r2, sl, r0
  4035cc:	444a      	add	r2, r9
  4035ce:	f042 0201 	orr.w	r2, r2, #1
  4035d2:	f8db 0000 	ldr.w	r0, [fp]
  4035d6:	f8c6 a008 	str.w	sl, [r6, #8]
  4035da:	4448      	add	r0, r9
  4035dc:	f8ca 2004 	str.w	r2, [sl, #4]
  4035e0:	f8df 912c 	ldr.w	r9, [pc, #300]	; 403710 <_malloc_r+0x550>
  4035e4:	f8cb 0000 	str.w	r0, [fp]
  4035e8:	b1a3      	cbz	r3, 403614 <_malloc_r+0x454>
  4035ea:	f1b8 0f0f 	cmp.w	r8, #15
  4035ee:	d937      	bls.n	403660 <_malloc_r+0x4a0>
  4035f0:	687b      	ldr	r3, [r7, #4]
  4035f2:	f1a8 020c 	sub.w	r2, r8, #12
  4035f6:	f04f 0e05 	mov.w	lr, #5
  4035fa:	f022 0207 	bic.w	r2, r2, #7
  4035fe:	f003 0301 	and.w	r3, r3, #1
  403602:	18b9      	adds	r1, r7, r2
  403604:	4313      	orrs	r3, r2
  403606:	2a0f      	cmp	r2, #15
  403608:	607b      	str	r3, [r7, #4]
  40360a:	f8c1 e004 	str.w	lr, [r1, #4]
  40360e:	f8c1 e008 	str.w	lr, [r1, #8]
  403612:	d858      	bhi.n	4036c6 <_malloc_r+0x506>
  403614:	4b3c      	ldr	r3, [pc, #240]	; (403708 <_malloc_r+0x548>)
  403616:	681a      	ldr	r2, [r3, #0]
  403618:	4290      	cmp	r0, r2
  40361a:	d900      	bls.n	40361e <_malloc_r+0x45e>
  40361c:	6018      	str	r0, [r3, #0]
  40361e:	4b3b      	ldr	r3, [pc, #236]	; (40370c <_malloc_r+0x54c>)
  403620:	68b7      	ldr	r7, [r6, #8]
  403622:	681a      	ldr	r2, [r3, #0]
  403624:	4290      	cmp	r0, r2
  403626:	d900      	bls.n	40362a <_malloc_r+0x46a>
  403628:	6018      	str	r0, [r3, #0]
  40362a:	687b      	ldr	r3, [r7, #4]
  40362c:	f023 0303 	bic.w	r3, r3, #3
  403630:	e73c      	b.n	4034ac <_malloc_r+0x2ec>
  403632:	f5bc 7faa 	cmp.w	ip, #340	; 0x154
  403636:	d817      	bhi.n	403668 <_malloc_r+0x4a8>
  403638:	ea4f 3cd4 	mov.w	ip, r4, lsr #15
  40363c:	f10c 0c77 	add.w	ip, ip, #119	; 0x77
  403640:	ea4f 004c 	mov.w	r0, ip, lsl #1
  403644:	e608      	b.n	403258 <_malloc_r+0x98>
  403646:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  40364a:	e7af      	b.n	4035ac <_malloc_r+0x3ec>
  40364c:	10bf      	asrs	r7, r7, #2
  40364e:	2001      	movs	r0, #1
  403650:	460a      	mov	r2, r1
  403652:	40b8      	lsls	r0, r7
  403654:	f8d9 7004 	ldr.w	r7, [r9, #4]
  403658:	4338      	orrs	r0, r7
  40365a:	f8c9 0004 	str.w	r0, [r9, #4]
  40365e:	e6e4      	b.n	40342a <_malloc_r+0x26a>
  403660:	2301      	movs	r3, #1
  403662:	f8ca 3004 	str.w	r3, [sl, #4]
  403666:	e727      	b.n	4034b8 <_malloc_r+0x2f8>
  403668:	f240 5354 	movw	r3, #1364	; 0x554
  40366c:	459c      	cmp	ip, r3
  40366e:	d822      	bhi.n	4036b6 <_malloc_r+0x4f6>
  403670:	ea4f 4c94 	mov.w	ip, r4, lsr #18
  403674:	f10c 0c7c 	add.w	ip, ip, #124	; 0x7c
  403678:	ea4f 004c 	mov.w	r0, ip, lsl #1
  40367c:	e5ec      	b.n	403258 <_malloc_r+0x98>
  40367e:	f103 0910 	add.w	r9, r3, #16
  403682:	e6fa      	b.n	40347a <_malloc_r+0x2ba>
  403684:	2954      	cmp	r1, #84	; 0x54
  403686:	d829      	bhi.n	4036dc <_malloc_r+0x51c>
  403688:	0b11      	lsrs	r1, r2, #12
  40368a:	f101 076e 	add.w	r7, r1, #110	; 0x6e
  40368e:	0078      	lsls	r0, r7, #1
  403690:	e6b9      	b.n	403406 <_malloc_r+0x246>
  403692:	68b7      	ldr	r7, [r6, #8]
  403694:	687b      	ldr	r3, [r7, #4]
  403696:	f023 0303 	bic.w	r3, r3, #3
  40369a:	e707      	b.n	4034ac <_malloc_r+0x2ec>
  40369c:	f3c1 0e0b 	ubfx	lr, r1, #0, #12
  4036a0:	f1be 0f00 	cmp.w	lr, #0
  4036a4:	f47f af6e 	bne.w	403584 <_malloc_r+0x3c4>
  4036a8:	eb09 0308 	add.w	r3, r9, r8
  4036ac:	68b2      	ldr	r2, [r6, #8]
  4036ae:	f043 0301 	orr.w	r3, r3, #1
  4036b2:	6053      	str	r3, [r2, #4]
  4036b4:	e7ae      	b.n	403614 <_malloc_r+0x454>
  4036b6:	20fc      	movs	r0, #252	; 0xfc
  4036b8:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
  4036bc:	e5cc      	b.n	403258 <_malloc_r+0x98>
  4036be:	2201      	movs	r2, #1
  4036c0:	f04f 0900 	mov.w	r9, #0
  4036c4:	e785      	b.n	4035d2 <_malloc_r+0x412>
  4036c6:	4628      	mov	r0, r5
  4036c8:	f107 0108 	add.w	r1, r7, #8
  4036cc:	f7ff fa6c 	bl	402ba8 <_free_r>
  4036d0:	f8d9 0000 	ldr.w	r0, [r9]
  4036d4:	e79e      	b.n	403614 <_malloc_r+0x454>
  4036d6:	f8ce a000 	str.w	sl, [lr]
  4036da:	e75e      	b.n	40359a <_malloc_r+0x3da>
  4036dc:	f5b1 7faa 	cmp.w	r1, #340	; 0x154
  4036e0:	d804      	bhi.n	4036ec <_malloc_r+0x52c>
  4036e2:	0bd1      	lsrs	r1, r2, #15
  4036e4:	f101 0777 	add.w	r7, r1, #119	; 0x77
  4036e8:	0078      	lsls	r0, r7, #1
  4036ea:	e68c      	b.n	403406 <_malloc_r+0x246>
  4036ec:	f240 5054 	movw	r0, #1364	; 0x554
  4036f0:	4281      	cmp	r1, r0
  4036f2:	d804      	bhi.n	4036fe <_malloc_r+0x53e>
  4036f4:	0c91      	lsrs	r1, r2, #18
  4036f6:	f101 077c 	add.w	r7, r1, #124	; 0x7c
  4036fa:	0078      	lsls	r0, r7, #1
  4036fc:	e683      	b.n	403406 <_malloc_r+0x246>
  4036fe:	20fc      	movs	r0, #252	; 0xfc
  403700:	277e      	movs	r7, #126	; 0x7e
  403702:	e680      	b.n	403406 <_malloc_r+0x246>
  403704:	6873      	ldr	r3, [r6, #4]
  403706:	e722      	b.n	40354e <_malloc_r+0x38e>
  403708:	20400960 	.word	0x20400960
  40370c:	2040095c 	.word	0x2040095c
  403710:	20400968 	.word	0x20400968
  403714:	204008b8 	.word	0x204008b8

00403718 <memchr>:
  403718:	0783      	lsls	r3, r0, #30
  40371a:	b2c9      	uxtb	r1, r1
  40371c:	b470      	push	{r4, r5, r6}
  40371e:	d03f      	beq.n	4037a0 <memchr+0x88>
  403720:	1e54      	subs	r4, r2, #1
  403722:	2a00      	cmp	r2, #0
  403724:	d03e      	beq.n	4037a4 <memchr+0x8c>
  403726:	7803      	ldrb	r3, [r0, #0]
  403728:	428b      	cmp	r3, r1
  40372a:	bf18      	it	ne
  40372c:	1c43      	addne	r3, r0, #1
  40372e:	d105      	bne.n	40373c <memchr+0x24>
  403730:	e01c      	b.n	40376c <memchr+0x54>
  403732:	b1ec      	cbz	r4, 403770 <memchr+0x58>
  403734:	7802      	ldrb	r2, [r0, #0]
  403736:	3c01      	subs	r4, #1
  403738:	428a      	cmp	r2, r1
  40373a:	d017      	beq.n	40376c <memchr+0x54>
  40373c:	f013 0f03 	tst.w	r3, #3
  403740:	4618      	mov	r0, r3
  403742:	f103 0301 	add.w	r3, r3, #1
  403746:	d1f4      	bne.n	403732 <memchr+0x1a>
  403748:	2c03      	cmp	r4, #3
  40374a:	d814      	bhi.n	403776 <memchr+0x5e>
  40374c:	b184      	cbz	r4, 403770 <memchr+0x58>
  40374e:	7803      	ldrb	r3, [r0, #0]
  403750:	428b      	cmp	r3, r1
  403752:	d00b      	beq.n	40376c <memchr+0x54>
  403754:	1905      	adds	r5, r0, r4
  403756:	1c43      	adds	r3, r0, #1
  403758:	e002      	b.n	403760 <memchr+0x48>
  40375a:	7802      	ldrb	r2, [r0, #0]
  40375c:	428a      	cmp	r2, r1
  40375e:	d005      	beq.n	40376c <memchr+0x54>
  403760:	42ab      	cmp	r3, r5
  403762:	4618      	mov	r0, r3
  403764:	f103 0301 	add.w	r3, r3, #1
  403768:	d1f7      	bne.n	40375a <memchr+0x42>
  40376a:	2000      	movs	r0, #0
  40376c:	bc70      	pop	{r4, r5, r6}
  40376e:	4770      	bx	lr
  403770:	4620      	mov	r0, r4
  403772:	bc70      	pop	{r4, r5, r6}
  403774:	4770      	bx	lr
  403776:	ea41 2601 	orr.w	r6, r1, r1, lsl #8
  40377a:	4602      	mov	r2, r0
  40377c:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
  403780:	4610      	mov	r0, r2
  403782:	3204      	adds	r2, #4
  403784:	6803      	ldr	r3, [r0, #0]
  403786:	4073      	eors	r3, r6
  403788:	f1a3 3501 	sub.w	r5, r3, #16843009	; 0x1010101
  40378c:	ea25 0303 	bic.w	r3, r5, r3
  403790:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
  403794:	d1da      	bne.n	40374c <memchr+0x34>
  403796:	3c04      	subs	r4, #4
  403798:	4610      	mov	r0, r2
  40379a:	2c03      	cmp	r4, #3
  40379c:	d8f0      	bhi.n	403780 <memchr+0x68>
  40379e:	e7d5      	b.n	40374c <memchr+0x34>
  4037a0:	4614      	mov	r4, r2
  4037a2:	e7d1      	b.n	403748 <memchr+0x30>
  4037a4:	4610      	mov	r0, r2
  4037a6:	e7e1      	b.n	40376c <memchr+0x54>

004037a8 <memcpy>:
  4037a8:	4684      	mov	ip, r0
  4037aa:	ea41 0300 	orr.w	r3, r1, r0
  4037ae:	f013 0303 	ands.w	r3, r3, #3
  4037b2:	d16d      	bne.n	403890 <memcpy+0xe8>
  4037b4:	3a40      	subs	r2, #64	; 0x40
  4037b6:	d341      	bcc.n	40383c <memcpy+0x94>
  4037b8:	f851 3b04 	ldr.w	r3, [r1], #4
  4037bc:	f840 3b04 	str.w	r3, [r0], #4
  4037c0:	f851 3b04 	ldr.w	r3, [r1], #4
  4037c4:	f840 3b04 	str.w	r3, [r0], #4
  4037c8:	f851 3b04 	ldr.w	r3, [r1], #4
  4037cc:	f840 3b04 	str.w	r3, [r0], #4
  4037d0:	f851 3b04 	ldr.w	r3, [r1], #4
  4037d4:	f840 3b04 	str.w	r3, [r0], #4
  4037d8:	f851 3b04 	ldr.w	r3, [r1], #4
  4037dc:	f840 3b04 	str.w	r3, [r0], #4
  4037e0:	f851 3b04 	ldr.w	r3, [r1], #4
  4037e4:	f840 3b04 	str.w	r3, [r0], #4
  4037e8:	f851 3b04 	ldr.w	r3, [r1], #4
  4037ec:	f840 3b04 	str.w	r3, [r0], #4
  4037f0:	f851 3b04 	ldr.w	r3, [r1], #4
  4037f4:	f840 3b04 	str.w	r3, [r0], #4
  4037f8:	f851 3b04 	ldr.w	r3, [r1], #4
  4037fc:	f840 3b04 	str.w	r3, [r0], #4
  403800:	f851 3b04 	ldr.w	r3, [r1], #4
  403804:	f840 3b04 	str.w	r3, [r0], #4
  403808:	f851 3b04 	ldr.w	r3, [r1], #4
  40380c:	f840 3b04 	str.w	r3, [r0], #4
  403810:	f851 3b04 	ldr.w	r3, [r1], #4
  403814:	f840 3b04 	str.w	r3, [r0], #4
  403818:	f851 3b04 	ldr.w	r3, [r1], #4
  40381c:	f840 3b04 	str.w	r3, [r0], #4
  403820:	f851 3b04 	ldr.w	r3, [r1], #4
  403824:	f840 3b04 	str.w	r3, [r0], #4
  403828:	f851 3b04 	ldr.w	r3, [r1], #4
  40382c:	f840 3b04 	str.w	r3, [r0], #4
  403830:	f851 3b04 	ldr.w	r3, [r1], #4
  403834:	f840 3b04 	str.w	r3, [r0], #4
  403838:	3a40      	subs	r2, #64	; 0x40
  40383a:	d2bd      	bcs.n	4037b8 <memcpy+0x10>
  40383c:	3230      	adds	r2, #48	; 0x30
  40383e:	d311      	bcc.n	403864 <memcpy+0xbc>
  403840:	f851 3b04 	ldr.w	r3, [r1], #4
  403844:	f840 3b04 	str.w	r3, [r0], #4
  403848:	f851 3b04 	ldr.w	r3, [r1], #4
  40384c:	f840 3b04 	str.w	r3, [r0], #4
  403850:	f851 3b04 	ldr.w	r3, [r1], #4
  403854:	f840 3b04 	str.w	r3, [r0], #4
  403858:	f851 3b04 	ldr.w	r3, [r1], #4
  40385c:	f840 3b04 	str.w	r3, [r0], #4
  403860:	3a10      	subs	r2, #16
  403862:	d2ed      	bcs.n	403840 <memcpy+0x98>
  403864:	320c      	adds	r2, #12
  403866:	d305      	bcc.n	403874 <memcpy+0xcc>
  403868:	f851 3b04 	ldr.w	r3, [r1], #4
  40386c:	f840 3b04 	str.w	r3, [r0], #4
  403870:	3a04      	subs	r2, #4
  403872:	d2f9      	bcs.n	403868 <memcpy+0xc0>
  403874:	3204      	adds	r2, #4
  403876:	d008      	beq.n	40388a <memcpy+0xe2>
  403878:	07d2      	lsls	r2, r2, #31
  40387a:	bf1c      	itt	ne
  40387c:	f811 3b01 	ldrbne.w	r3, [r1], #1
  403880:	f800 3b01 	strbne.w	r3, [r0], #1
  403884:	d301      	bcc.n	40388a <memcpy+0xe2>
  403886:	880b      	ldrh	r3, [r1, #0]
  403888:	8003      	strh	r3, [r0, #0]
  40388a:	4660      	mov	r0, ip
  40388c:	4770      	bx	lr
  40388e:	bf00      	nop
  403890:	2a08      	cmp	r2, #8
  403892:	d313      	bcc.n	4038bc <memcpy+0x114>
  403894:	078b      	lsls	r3, r1, #30
  403896:	d08d      	beq.n	4037b4 <memcpy+0xc>
  403898:	f010 0303 	ands.w	r3, r0, #3
  40389c:	d08a      	beq.n	4037b4 <memcpy+0xc>
  40389e:	f1c3 0304 	rsb	r3, r3, #4
  4038a2:	1ad2      	subs	r2, r2, r3
  4038a4:	07db      	lsls	r3, r3, #31
  4038a6:	bf1c      	itt	ne
  4038a8:	f811 3b01 	ldrbne.w	r3, [r1], #1
  4038ac:	f800 3b01 	strbne.w	r3, [r0], #1
  4038b0:	d380      	bcc.n	4037b4 <memcpy+0xc>
  4038b2:	f831 3b02 	ldrh.w	r3, [r1], #2
  4038b6:	f820 3b02 	strh.w	r3, [r0], #2
  4038ba:	e77b      	b.n	4037b4 <memcpy+0xc>
  4038bc:	3a04      	subs	r2, #4
  4038be:	d3d9      	bcc.n	403874 <memcpy+0xcc>
  4038c0:	3a01      	subs	r2, #1
  4038c2:	f811 3b01 	ldrb.w	r3, [r1], #1
  4038c6:	f800 3b01 	strb.w	r3, [r0], #1
  4038ca:	d2f9      	bcs.n	4038c0 <memcpy+0x118>
  4038cc:	780b      	ldrb	r3, [r1, #0]
  4038ce:	7003      	strb	r3, [r0, #0]
  4038d0:	784b      	ldrb	r3, [r1, #1]
  4038d2:	7043      	strb	r3, [r0, #1]
  4038d4:	788b      	ldrb	r3, [r1, #2]
  4038d6:	7083      	strb	r3, [r0, #2]
  4038d8:	4660      	mov	r0, ip
  4038da:	4770      	bx	lr

004038dc <memmove>:
  4038dc:	4288      	cmp	r0, r1
  4038de:	b5f0      	push	{r4, r5, r6, r7, lr}
  4038e0:	d90d      	bls.n	4038fe <memmove+0x22>
  4038e2:	188b      	adds	r3, r1, r2
  4038e4:	4298      	cmp	r0, r3
  4038e6:	d20a      	bcs.n	4038fe <memmove+0x22>
  4038e8:	1881      	adds	r1, r0, r2
  4038ea:	2a00      	cmp	r2, #0
  4038ec:	d053      	beq.n	403996 <memmove+0xba>
  4038ee:	1a9a      	subs	r2, r3, r2
  4038f0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  4038f4:	4293      	cmp	r3, r2
  4038f6:	f801 4d01 	strb.w	r4, [r1, #-1]!
  4038fa:	d1f9      	bne.n	4038f0 <memmove+0x14>
  4038fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4038fe:	2a0f      	cmp	r2, #15
  403900:	d947      	bls.n	403992 <memmove+0xb6>
  403902:	ea40 0301 	orr.w	r3, r0, r1
  403906:	079b      	lsls	r3, r3, #30
  403908:	d146      	bne.n	403998 <memmove+0xbc>
  40390a:	f100 0410 	add.w	r4, r0, #16
  40390e:	f101 0310 	add.w	r3, r1, #16
  403912:	4615      	mov	r5, r2
  403914:	f853 6c10 	ldr.w	r6, [r3, #-16]
  403918:	3d10      	subs	r5, #16
  40391a:	3310      	adds	r3, #16
  40391c:	3410      	adds	r4, #16
  40391e:	f844 6c20 	str.w	r6, [r4, #-32]
  403922:	2d0f      	cmp	r5, #15
  403924:	f853 6c1c 	ldr.w	r6, [r3, #-28]
  403928:	f844 6c1c 	str.w	r6, [r4, #-28]
  40392c:	f853 6c18 	ldr.w	r6, [r3, #-24]
  403930:	f844 6c18 	str.w	r6, [r4, #-24]
  403934:	f853 6c14 	ldr.w	r6, [r3, #-20]
  403938:	f844 6c14 	str.w	r6, [r4, #-20]
  40393c:	d8ea      	bhi.n	403914 <memmove+0x38>
  40393e:	f1a2 0310 	sub.w	r3, r2, #16
  403942:	f002 0e0f 	and.w	lr, r2, #15
  403946:	f023 030f 	bic.w	r3, r3, #15
  40394a:	f1be 0f03 	cmp.w	lr, #3
  40394e:	f103 0310 	add.w	r3, r3, #16
  403952:	4419      	add	r1, r3
  403954:	4403      	add	r3, r0
  403956:	d921      	bls.n	40399c <memmove+0xc0>
  403958:	1f1e      	subs	r6, r3, #4
  40395a:	460d      	mov	r5, r1
  40395c:	4674      	mov	r4, lr
  40395e:	3c04      	subs	r4, #4
  403960:	f855 7b04 	ldr.w	r7, [r5], #4
  403964:	2c03      	cmp	r4, #3
  403966:	f846 7f04 	str.w	r7, [r6, #4]!
  40396a:	d8f8      	bhi.n	40395e <memmove+0x82>
  40396c:	f1ae 0404 	sub.w	r4, lr, #4
  403970:	f002 0203 	and.w	r2, r2, #3
  403974:	f024 0403 	bic.w	r4, r4, #3
  403978:	3404      	adds	r4, #4
  40397a:	4423      	add	r3, r4
  40397c:	4421      	add	r1, r4
  40397e:	b152      	cbz	r2, 403996 <memmove+0xba>
  403980:	3b01      	subs	r3, #1
  403982:	440a      	add	r2, r1
  403984:	f811 4b01 	ldrb.w	r4, [r1], #1
  403988:	4291      	cmp	r1, r2
  40398a:	f803 4f01 	strb.w	r4, [r3, #1]!
  40398e:	d1f9      	bne.n	403984 <memmove+0xa8>
  403990:	bdf0      	pop	{r4, r5, r6, r7, pc}
  403992:	4603      	mov	r3, r0
  403994:	e7f3      	b.n	40397e <memmove+0xa2>
  403996:	bdf0      	pop	{r4, r5, r6, r7, pc}
  403998:	4603      	mov	r3, r0
  40399a:	e7f1      	b.n	403980 <memmove+0xa4>
  40399c:	4672      	mov	r2, lr
  40399e:	e7ee      	b.n	40397e <memmove+0xa2>

004039a0 <__malloc_lock>:
  4039a0:	4770      	bx	lr
  4039a2:	bf00      	nop

004039a4 <__malloc_unlock>:
  4039a4:	4770      	bx	lr
  4039a6:	bf00      	nop

004039a8 <_realloc_r>:
  4039a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4039ac:	4617      	mov	r7, r2
  4039ae:	b083      	sub	sp, #12
  4039b0:	460e      	mov	r6, r1
  4039b2:	2900      	cmp	r1, #0
  4039b4:	f000 80e2 	beq.w	403b7c <_realloc_r+0x1d4>
  4039b8:	f107 040b 	add.w	r4, r7, #11
  4039bc:	4681      	mov	r9, r0
  4039be:	f7ff ffef 	bl	4039a0 <__malloc_lock>
  4039c2:	f856 3c04 	ldr.w	r3, [r6, #-4]
  4039c6:	2c16      	cmp	r4, #22
  4039c8:	f1a6 0808 	sub.w	r8, r6, #8
  4039cc:	f023 0503 	bic.w	r5, r3, #3
  4039d0:	d850      	bhi.n	403a74 <_realloc_r+0xcc>
  4039d2:	2210      	movs	r2, #16
  4039d4:	2100      	movs	r1, #0
  4039d6:	4614      	mov	r4, r2
  4039d8:	42bc      	cmp	r4, r7
  4039da:	f0c0 80dc 	bcc.w	403b96 <_realloc_r+0x1ee>
  4039de:	2900      	cmp	r1, #0
  4039e0:	f040 80d9 	bne.w	403b96 <_realloc_r+0x1ee>
  4039e4:	4295      	cmp	r5, r2
  4039e6:	da4a      	bge.n	403a7e <_realloc_r+0xd6>
  4039e8:	f8df b3a8 	ldr.w	fp, [pc, #936]	; 403d94 <_realloc_r+0x3ec>
  4039ec:	eb08 0105 	add.w	r1, r8, r5
  4039f0:	f8db 0008 	ldr.w	r0, [fp, #8]
  4039f4:	4288      	cmp	r0, r1
  4039f6:	f000 80d3 	beq.w	403ba0 <_realloc_r+0x1f8>
  4039fa:	6848      	ldr	r0, [r1, #4]
  4039fc:	f020 0e01 	bic.w	lr, r0, #1
  403a00:	448e      	add	lr, r1
  403a02:	f8de e004 	ldr.w	lr, [lr, #4]
  403a06:	f01e 0f01 	tst.w	lr, #1
  403a0a:	d14e      	bne.n	403aaa <_realloc_r+0x102>
  403a0c:	f020 0003 	bic.w	r0, r0, #3
  403a10:	4428      	add	r0, r5
  403a12:	4290      	cmp	r0, r2
  403a14:	f280 80b8 	bge.w	403b88 <_realloc_r+0x1e0>
  403a18:	07db      	lsls	r3, r3, #31
  403a1a:	f100 808b 	bmi.w	403b34 <_realloc_r+0x18c>
  403a1e:	f856 3c08 	ldr.w	r3, [r6, #-8]
  403a22:	ebc3 0a08 	rsb	sl, r3, r8
  403a26:	f8da 3004 	ldr.w	r3, [sl, #4]
  403a2a:	f023 0303 	bic.w	r3, r3, #3
  403a2e:	eb00 0e03 	add.w	lr, r0, r3
  403a32:	4596      	cmp	lr, r2
  403a34:	db43      	blt.n	403abe <_realloc_r+0x116>
  403a36:	68cb      	ldr	r3, [r1, #12]
  403a38:	4657      	mov	r7, sl
  403a3a:	6889      	ldr	r1, [r1, #8]
  403a3c:	1f2a      	subs	r2, r5, #4
  403a3e:	60cb      	str	r3, [r1, #12]
  403a40:	2a24      	cmp	r2, #36	; 0x24
  403a42:	6099      	str	r1, [r3, #8]
  403a44:	f857 1f08 	ldr.w	r1, [r7, #8]!
  403a48:	f8da 300c 	ldr.w	r3, [sl, #12]
  403a4c:	60cb      	str	r3, [r1, #12]
  403a4e:	6099      	str	r1, [r3, #8]
  403a50:	f200 813c 	bhi.w	403ccc <_realloc_r+0x324>
  403a54:	2a13      	cmp	r2, #19
  403a56:	f240 80fa 	bls.w	403c4e <_realloc_r+0x2a6>
  403a5a:	6833      	ldr	r3, [r6, #0]
  403a5c:	2a1b      	cmp	r2, #27
  403a5e:	f8ca 3008 	str.w	r3, [sl, #8]
  403a62:	6873      	ldr	r3, [r6, #4]
  403a64:	f8ca 300c 	str.w	r3, [sl, #12]
  403a68:	f200 813b 	bhi.w	403ce2 <_realloc_r+0x33a>
  403a6c:	3608      	adds	r6, #8
  403a6e:	f10a 0310 	add.w	r3, sl, #16
  403a72:	e0ed      	b.n	403c50 <_realloc_r+0x2a8>
  403a74:	f024 0407 	bic.w	r4, r4, #7
  403a78:	4622      	mov	r2, r4
  403a7a:	0fe1      	lsrs	r1, r4, #31
  403a7c:	e7ac      	b.n	4039d8 <_realloc_r+0x30>
  403a7e:	4637      	mov	r7, r6
  403a80:	1b2a      	subs	r2, r5, r4
  403a82:	f003 0301 	and.w	r3, r3, #1
  403a86:	2a0f      	cmp	r2, #15
  403a88:	d841      	bhi.n	403b0e <_realloc_r+0x166>
  403a8a:	eb08 0205 	add.w	r2, r8, r5
  403a8e:	431d      	orrs	r5, r3
  403a90:	f8c8 5004 	str.w	r5, [r8, #4]
  403a94:	6853      	ldr	r3, [r2, #4]
  403a96:	f043 0301 	orr.w	r3, r3, #1
  403a9a:	6053      	str	r3, [r2, #4]
  403a9c:	4648      	mov	r0, r9
  403a9e:	f7ff ff81 	bl	4039a4 <__malloc_unlock>
  403aa2:	4638      	mov	r0, r7
  403aa4:	b003      	add	sp, #12
  403aa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403aaa:	07d9      	lsls	r1, r3, #31
  403aac:	d442      	bmi.n	403b34 <_realloc_r+0x18c>
  403aae:	f856 3c08 	ldr.w	r3, [r6, #-8]
  403ab2:	ebc3 0a08 	rsb	sl, r3, r8
  403ab6:	f8da 3004 	ldr.w	r3, [sl, #4]
  403aba:	f023 0303 	bic.w	r3, r3, #3
  403abe:	442b      	add	r3, r5
  403ac0:	4293      	cmp	r3, r2
  403ac2:	db37      	blt.n	403b34 <_realloc_r+0x18c>
  403ac4:	4657      	mov	r7, sl
  403ac6:	1f2a      	subs	r2, r5, #4
  403ac8:	f8da 100c 	ldr.w	r1, [sl, #12]
  403acc:	f857 0f08 	ldr.w	r0, [r7, #8]!
  403ad0:	2a24      	cmp	r2, #36	; 0x24
  403ad2:	60c1      	str	r1, [r0, #12]
  403ad4:	6088      	str	r0, [r1, #8]
  403ad6:	f200 80c6 	bhi.w	403c66 <_realloc_r+0x2be>
  403ada:	2a13      	cmp	r2, #19
  403adc:	f240 80ff 	bls.w	403cde <_realloc_r+0x336>
  403ae0:	6831      	ldr	r1, [r6, #0]
  403ae2:	2a1b      	cmp	r2, #27
  403ae4:	f8ca 1008 	str.w	r1, [sl, #8]
  403ae8:	6871      	ldr	r1, [r6, #4]
  403aea:	f8ca 100c 	str.w	r1, [sl, #12]
  403aee:	f200 810d 	bhi.w	403d0c <_realloc_r+0x364>
  403af2:	3608      	adds	r6, #8
  403af4:	f10a 0210 	add.w	r2, sl, #16
  403af8:	6831      	ldr	r1, [r6, #0]
  403afa:	461d      	mov	r5, r3
  403afc:	46d0      	mov	r8, sl
  403afe:	6011      	str	r1, [r2, #0]
  403b00:	6873      	ldr	r3, [r6, #4]
  403b02:	6053      	str	r3, [r2, #4]
  403b04:	68b3      	ldr	r3, [r6, #8]
  403b06:	6093      	str	r3, [r2, #8]
  403b08:	f8da 3004 	ldr.w	r3, [sl, #4]
  403b0c:	e7b8      	b.n	403a80 <_realloc_r+0xd8>
  403b0e:	eb08 0504 	add.w	r5, r8, r4
  403b12:	f042 0601 	orr.w	r6, r2, #1
  403b16:	431c      	orrs	r4, r3
  403b18:	4648      	mov	r0, r9
  403b1a:	442a      	add	r2, r5
  403b1c:	f105 0108 	add.w	r1, r5, #8
  403b20:	f8c8 4004 	str.w	r4, [r8, #4]
  403b24:	606e      	str	r6, [r5, #4]
  403b26:	6853      	ldr	r3, [r2, #4]
  403b28:	f043 0301 	orr.w	r3, r3, #1
  403b2c:	6053      	str	r3, [r2, #4]
  403b2e:	f7ff f83b 	bl	402ba8 <_free_r>
  403b32:	e7b3      	b.n	403a9c <_realloc_r+0xf4>
  403b34:	4639      	mov	r1, r7
  403b36:	4648      	mov	r0, r9
  403b38:	f7ff fb42 	bl	4031c0 <_malloc_r>
  403b3c:	4607      	mov	r7, r0
  403b3e:	2800      	cmp	r0, #0
  403b40:	d0ac      	beq.n	403a9c <_realloc_r+0xf4>
  403b42:	f856 3c04 	ldr.w	r3, [r6, #-4]
  403b46:	f1a0 0108 	sub.w	r1, r0, #8
  403b4a:	f023 0201 	bic.w	r2, r3, #1
  403b4e:	4442      	add	r2, r8
  403b50:	4291      	cmp	r1, r2
  403b52:	f000 80b4 	beq.w	403cbe <_realloc_r+0x316>
  403b56:	1f2a      	subs	r2, r5, #4
  403b58:	2a24      	cmp	r2, #36	; 0x24
  403b5a:	f200 80a1 	bhi.w	403ca0 <_realloc_r+0x2f8>
  403b5e:	2a13      	cmp	r2, #19
  403b60:	d86a      	bhi.n	403c38 <_realloc_r+0x290>
  403b62:	4603      	mov	r3, r0
  403b64:	4632      	mov	r2, r6
  403b66:	6811      	ldr	r1, [r2, #0]
  403b68:	6019      	str	r1, [r3, #0]
  403b6a:	6851      	ldr	r1, [r2, #4]
  403b6c:	6059      	str	r1, [r3, #4]
  403b6e:	6892      	ldr	r2, [r2, #8]
  403b70:	609a      	str	r2, [r3, #8]
  403b72:	4631      	mov	r1, r6
  403b74:	4648      	mov	r0, r9
  403b76:	f7ff f817 	bl	402ba8 <_free_r>
  403b7a:	e78f      	b.n	403a9c <_realloc_r+0xf4>
  403b7c:	4611      	mov	r1, r2
  403b7e:	b003      	add	sp, #12
  403b80:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403b84:	f7ff bb1c 	b.w	4031c0 <_malloc_r>
  403b88:	68ca      	ldr	r2, [r1, #12]
  403b8a:	4637      	mov	r7, r6
  403b8c:	6889      	ldr	r1, [r1, #8]
  403b8e:	4605      	mov	r5, r0
  403b90:	60ca      	str	r2, [r1, #12]
  403b92:	6091      	str	r1, [r2, #8]
  403b94:	e774      	b.n	403a80 <_realloc_r+0xd8>
  403b96:	230c      	movs	r3, #12
  403b98:	2000      	movs	r0, #0
  403b9a:	f8c9 3000 	str.w	r3, [r9]
  403b9e:	e781      	b.n	403aa4 <_realloc_r+0xfc>
  403ba0:	6841      	ldr	r1, [r0, #4]
  403ba2:	f104 0010 	add.w	r0, r4, #16
  403ba6:	f021 0103 	bic.w	r1, r1, #3
  403baa:	4429      	add	r1, r5
  403bac:	4281      	cmp	r1, r0
  403bae:	da63      	bge.n	403c78 <_realloc_r+0x2d0>
  403bb0:	07db      	lsls	r3, r3, #31
  403bb2:	d4bf      	bmi.n	403b34 <_realloc_r+0x18c>
  403bb4:	f856 3c08 	ldr.w	r3, [r6, #-8]
  403bb8:	ebc3 0a08 	rsb	sl, r3, r8
  403bbc:	f8da 3004 	ldr.w	r3, [sl, #4]
  403bc0:	f023 0303 	bic.w	r3, r3, #3
  403bc4:	eb01 0c03 	add.w	ip, r1, r3
  403bc8:	4560      	cmp	r0, ip
  403bca:	f73f af78 	bgt.w	403abe <_realloc_r+0x116>
  403bce:	4657      	mov	r7, sl
  403bd0:	1f2a      	subs	r2, r5, #4
  403bd2:	f8da 300c 	ldr.w	r3, [sl, #12]
  403bd6:	f857 1f08 	ldr.w	r1, [r7, #8]!
  403bda:	2a24      	cmp	r2, #36	; 0x24
  403bdc:	60cb      	str	r3, [r1, #12]
  403bde:	6099      	str	r1, [r3, #8]
  403be0:	f200 80b8 	bhi.w	403d54 <_realloc_r+0x3ac>
  403be4:	2a13      	cmp	r2, #19
  403be6:	f240 80a8 	bls.w	403d3a <_realloc_r+0x392>
  403bea:	6833      	ldr	r3, [r6, #0]
  403bec:	2a1b      	cmp	r2, #27
  403bee:	f8ca 3008 	str.w	r3, [sl, #8]
  403bf2:	6873      	ldr	r3, [r6, #4]
  403bf4:	f8ca 300c 	str.w	r3, [sl, #12]
  403bf8:	f200 80b5 	bhi.w	403d66 <_realloc_r+0x3be>
  403bfc:	3608      	adds	r6, #8
  403bfe:	f10a 0310 	add.w	r3, sl, #16
  403c02:	6832      	ldr	r2, [r6, #0]
  403c04:	601a      	str	r2, [r3, #0]
  403c06:	6872      	ldr	r2, [r6, #4]
  403c08:	605a      	str	r2, [r3, #4]
  403c0a:	68b2      	ldr	r2, [r6, #8]
  403c0c:	609a      	str	r2, [r3, #8]
  403c0e:	ebc4 030c 	rsb	r3, r4, ip
  403c12:	eb0a 0204 	add.w	r2, sl, r4
  403c16:	4648      	mov	r0, r9
  403c18:	f043 0301 	orr.w	r3, r3, #1
  403c1c:	f8cb 2008 	str.w	r2, [fp, #8]
  403c20:	6053      	str	r3, [r2, #4]
  403c22:	f8da 3004 	ldr.w	r3, [sl, #4]
  403c26:	f003 0301 	and.w	r3, r3, #1
  403c2a:	431c      	orrs	r4, r3
  403c2c:	f8ca 4004 	str.w	r4, [sl, #4]
  403c30:	f7ff feb8 	bl	4039a4 <__malloc_unlock>
  403c34:	4638      	mov	r0, r7
  403c36:	e735      	b.n	403aa4 <_realloc_r+0xfc>
  403c38:	6833      	ldr	r3, [r6, #0]
  403c3a:	2a1b      	cmp	r2, #27
  403c3c:	6003      	str	r3, [r0, #0]
  403c3e:	6873      	ldr	r3, [r6, #4]
  403c40:	6043      	str	r3, [r0, #4]
  403c42:	d831      	bhi.n	403ca8 <_realloc_r+0x300>
  403c44:	f100 0308 	add.w	r3, r0, #8
  403c48:	f106 0208 	add.w	r2, r6, #8
  403c4c:	e78b      	b.n	403b66 <_realloc_r+0x1be>
  403c4e:	463b      	mov	r3, r7
  403c50:	6832      	ldr	r2, [r6, #0]
  403c52:	4675      	mov	r5, lr
  403c54:	46d0      	mov	r8, sl
  403c56:	601a      	str	r2, [r3, #0]
  403c58:	6872      	ldr	r2, [r6, #4]
  403c5a:	605a      	str	r2, [r3, #4]
  403c5c:	68b2      	ldr	r2, [r6, #8]
  403c5e:	609a      	str	r2, [r3, #8]
  403c60:	f8da 3004 	ldr.w	r3, [sl, #4]
  403c64:	e70c      	b.n	403a80 <_realloc_r+0xd8>
  403c66:	4631      	mov	r1, r6
  403c68:	4638      	mov	r0, r7
  403c6a:	461d      	mov	r5, r3
  403c6c:	46d0      	mov	r8, sl
  403c6e:	f7ff fe35 	bl	4038dc <memmove>
  403c72:	f8da 3004 	ldr.w	r3, [sl, #4]
  403c76:	e703      	b.n	403a80 <_realloc_r+0xd8>
  403c78:	1b0b      	subs	r3, r1, r4
  403c7a:	eb08 0204 	add.w	r2, r8, r4
  403c7e:	4648      	mov	r0, r9
  403c80:	f043 0301 	orr.w	r3, r3, #1
  403c84:	f8cb 2008 	str.w	r2, [fp, #8]
  403c88:	6053      	str	r3, [r2, #4]
  403c8a:	f856 3c04 	ldr.w	r3, [r6, #-4]
  403c8e:	f003 0301 	and.w	r3, r3, #1
  403c92:	431c      	orrs	r4, r3
  403c94:	f846 4c04 	str.w	r4, [r6, #-4]
  403c98:	f7ff fe84 	bl	4039a4 <__malloc_unlock>
  403c9c:	4630      	mov	r0, r6
  403c9e:	e701      	b.n	403aa4 <_realloc_r+0xfc>
  403ca0:	4631      	mov	r1, r6
  403ca2:	f7ff fe1b 	bl	4038dc <memmove>
  403ca6:	e764      	b.n	403b72 <_realloc_r+0x1ca>
  403ca8:	68b3      	ldr	r3, [r6, #8]
  403caa:	2a24      	cmp	r2, #36	; 0x24
  403cac:	6083      	str	r3, [r0, #8]
  403cae:	68f3      	ldr	r3, [r6, #12]
  403cb0:	60c3      	str	r3, [r0, #12]
  403cb2:	d022      	beq.n	403cfa <_realloc_r+0x352>
  403cb4:	f100 0310 	add.w	r3, r0, #16
  403cb8:	f106 0210 	add.w	r2, r6, #16
  403cbc:	e753      	b.n	403b66 <_realloc_r+0x1be>
  403cbe:	f850 2c04 	ldr.w	r2, [r0, #-4]
  403cc2:	4637      	mov	r7, r6
  403cc4:	f022 0203 	bic.w	r2, r2, #3
  403cc8:	4415      	add	r5, r2
  403cca:	e6d9      	b.n	403a80 <_realloc_r+0xd8>
  403ccc:	4631      	mov	r1, r6
  403cce:	4638      	mov	r0, r7
  403cd0:	4675      	mov	r5, lr
  403cd2:	46d0      	mov	r8, sl
  403cd4:	f7ff fe02 	bl	4038dc <memmove>
  403cd8:	f8da 3004 	ldr.w	r3, [sl, #4]
  403cdc:	e6d0      	b.n	403a80 <_realloc_r+0xd8>
  403cde:	463a      	mov	r2, r7
  403ce0:	e70a      	b.n	403af8 <_realloc_r+0x150>
  403ce2:	68b3      	ldr	r3, [r6, #8]
  403ce4:	2a24      	cmp	r2, #36	; 0x24
  403ce6:	f8ca 3010 	str.w	r3, [sl, #16]
  403cea:	68f3      	ldr	r3, [r6, #12]
  403cec:	f8ca 3014 	str.w	r3, [sl, #20]
  403cf0:	d018      	beq.n	403d24 <_realloc_r+0x37c>
  403cf2:	3610      	adds	r6, #16
  403cf4:	f10a 0318 	add.w	r3, sl, #24
  403cf8:	e7aa      	b.n	403c50 <_realloc_r+0x2a8>
  403cfa:	6931      	ldr	r1, [r6, #16]
  403cfc:	f100 0318 	add.w	r3, r0, #24
  403d00:	f106 0218 	add.w	r2, r6, #24
  403d04:	6101      	str	r1, [r0, #16]
  403d06:	6971      	ldr	r1, [r6, #20]
  403d08:	6141      	str	r1, [r0, #20]
  403d0a:	e72c      	b.n	403b66 <_realloc_r+0x1be>
  403d0c:	68b1      	ldr	r1, [r6, #8]
  403d0e:	2a24      	cmp	r2, #36	; 0x24
  403d10:	f8ca 1010 	str.w	r1, [sl, #16]
  403d14:	68f1      	ldr	r1, [r6, #12]
  403d16:	f8ca 1014 	str.w	r1, [sl, #20]
  403d1a:	d010      	beq.n	403d3e <_realloc_r+0x396>
  403d1c:	3610      	adds	r6, #16
  403d1e:	f10a 0218 	add.w	r2, sl, #24
  403d22:	e6e9      	b.n	403af8 <_realloc_r+0x150>
  403d24:	6932      	ldr	r2, [r6, #16]
  403d26:	f10a 0320 	add.w	r3, sl, #32
  403d2a:	3618      	adds	r6, #24
  403d2c:	f8ca 2018 	str.w	r2, [sl, #24]
  403d30:	f856 2c04 	ldr.w	r2, [r6, #-4]
  403d34:	f8ca 201c 	str.w	r2, [sl, #28]
  403d38:	e78a      	b.n	403c50 <_realloc_r+0x2a8>
  403d3a:	463b      	mov	r3, r7
  403d3c:	e761      	b.n	403c02 <_realloc_r+0x25a>
  403d3e:	6931      	ldr	r1, [r6, #16]
  403d40:	f10a 0220 	add.w	r2, sl, #32
  403d44:	3618      	adds	r6, #24
  403d46:	f8ca 1018 	str.w	r1, [sl, #24]
  403d4a:	f856 1c04 	ldr.w	r1, [r6, #-4]
  403d4e:	f8ca 101c 	str.w	r1, [sl, #28]
  403d52:	e6d1      	b.n	403af8 <_realloc_r+0x150>
  403d54:	4631      	mov	r1, r6
  403d56:	4638      	mov	r0, r7
  403d58:	f8cd c004 	str.w	ip, [sp, #4]
  403d5c:	f7ff fdbe 	bl	4038dc <memmove>
  403d60:	f8dd c004 	ldr.w	ip, [sp, #4]
  403d64:	e753      	b.n	403c0e <_realloc_r+0x266>
  403d66:	68b3      	ldr	r3, [r6, #8]
  403d68:	2a24      	cmp	r2, #36	; 0x24
  403d6a:	f8ca 3010 	str.w	r3, [sl, #16]
  403d6e:	68f3      	ldr	r3, [r6, #12]
  403d70:	f8ca 3014 	str.w	r3, [sl, #20]
  403d74:	d003      	beq.n	403d7e <_realloc_r+0x3d6>
  403d76:	3610      	adds	r6, #16
  403d78:	f10a 0318 	add.w	r3, sl, #24
  403d7c:	e741      	b.n	403c02 <_realloc_r+0x25a>
  403d7e:	6932      	ldr	r2, [r6, #16]
  403d80:	f10a 0320 	add.w	r3, sl, #32
  403d84:	3618      	adds	r6, #24
  403d86:	f8ca 2018 	str.w	r2, [sl, #24]
  403d8a:	f856 2c04 	ldr.w	r2, [r6, #-4]
  403d8e:	f8ca 201c 	str.w	r2, [sl, #28]
  403d92:	e736      	b.n	403c02 <_realloc_r+0x25a>
  403d94:	204004ac 	.word	0x204004ac

00403d98 <_sbrk_r>:
  403d98:	b538      	push	{r3, r4, r5, lr}
  403d9a:	2300      	movs	r3, #0
  403d9c:	4c06      	ldr	r4, [pc, #24]	; (403db8 <_sbrk_r+0x20>)
  403d9e:	4605      	mov	r5, r0
  403da0:	4608      	mov	r0, r1
  403da2:	6023      	str	r3, [r4, #0]
  403da4:	f7fd fc90 	bl	4016c8 <_sbrk>
  403da8:	1c43      	adds	r3, r0, #1
  403daa:	d000      	beq.n	403dae <_sbrk_r+0x16>
  403dac:	bd38      	pop	{r3, r4, r5, pc}
  403dae:	6823      	ldr	r3, [r4, #0]
  403db0:	2b00      	cmp	r3, #0
  403db2:	d0fb      	beq.n	403dac <_sbrk_r+0x14>
  403db4:	602b      	str	r3, [r5, #0]
  403db6:	bd38      	pop	{r3, r4, r5, pc}
  403db8:	20401174 	.word	0x20401174

00403dbc <__sread>:
  403dbc:	b510      	push	{r4, lr}
  403dbe:	460c      	mov	r4, r1
  403dc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  403dc4:	f000 f934 	bl	404030 <_read_r>
  403dc8:	2800      	cmp	r0, #0
  403dca:	db03      	blt.n	403dd4 <__sread+0x18>
  403dcc:	6d23      	ldr	r3, [r4, #80]	; 0x50
  403dce:	4403      	add	r3, r0
  403dd0:	6523      	str	r3, [r4, #80]	; 0x50
  403dd2:	bd10      	pop	{r4, pc}
  403dd4:	89a3      	ldrh	r3, [r4, #12]
  403dd6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  403dda:	81a3      	strh	r3, [r4, #12]
  403ddc:	bd10      	pop	{r4, pc}
  403dde:	bf00      	nop

00403de0 <__swrite>:
  403de0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  403de4:	461d      	mov	r5, r3
  403de6:	898b      	ldrh	r3, [r1, #12]
  403de8:	4616      	mov	r6, r2
  403dea:	460c      	mov	r4, r1
  403dec:	05da      	lsls	r2, r3, #23
  403dee:	4607      	mov	r7, r0
  403df0:	d506      	bpl.n	403e00 <__swrite+0x20>
  403df2:	2302      	movs	r3, #2
  403df4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  403df8:	2200      	movs	r2, #0
  403dfa:	f000 f905 	bl	404008 <_lseek_r>
  403dfe:	89a3      	ldrh	r3, [r4, #12]
  403e00:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  403e04:	4638      	mov	r0, r7
  403e06:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  403e0a:	4632      	mov	r2, r6
  403e0c:	81a3      	strh	r3, [r4, #12]
  403e0e:	462b      	mov	r3, r5
  403e10:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  403e14:	f000 b816 	b.w	403e44 <_write_r>

00403e18 <__sseek>:
  403e18:	b510      	push	{r4, lr}
  403e1a:	460c      	mov	r4, r1
  403e1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  403e20:	f000 f8f2 	bl	404008 <_lseek_r>
  403e24:	1c42      	adds	r2, r0, #1
  403e26:	89a3      	ldrh	r3, [r4, #12]
  403e28:	d004      	beq.n	403e34 <__sseek+0x1c>
  403e2a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
  403e2e:	6520      	str	r0, [r4, #80]	; 0x50
  403e30:	81a3      	strh	r3, [r4, #12]
  403e32:	bd10      	pop	{r4, pc}
  403e34:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  403e38:	81a3      	strh	r3, [r4, #12]
  403e3a:	bd10      	pop	{r4, pc}

00403e3c <__sclose>:
  403e3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  403e40:	f000 b868 	b.w	403f14 <_close_r>

00403e44 <_write_r>:
  403e44:	b570      	push	{r4, r5, r6, lr}
  403e46:	4c08      	ldr	r4, [pc, #32]	; (403e68 <_write_r+0x24>)
  403e48:	2500      	movs	r5, #0
  403e4a:	4606      	mov	r6, r0
  403e4c:	4608      	mov	r0, r1
  403e4e:	4611      	mov	r1, r2
  403e50:	461a      	mov	r2, r3
  403e52:	6025      	str	r5, [r4, #0]
  403e54:	f7fc fa9a 	bl	40038c <_write>
  403e58:	1c43      	adds	r3, r0, #1
  403e5a:	d000      	beq.n	403e5e <_write_r+0x1a>
  403e5c:	bd70      	pop	{r4, r5, r6, pc}
  403e5e:	6823      	ldr	r3, [r4, #0]
  403e60:	2b00      	cmp	r3, #0
  403e62:	d0fb      	beq.n	403e5c <_write_r+0x18>
  403e64:	6033      	str	r3, [r6, #0]
  403e66:	bd70      	pop	{r4, r5, r6, pc}
  403e68:	20401174 	.word	0x20401174

00403e6c <__register_exitproc>:
  403e6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  403e70:	4c26      	ldr	r4, [pc, #152]	; (403f0c <__register_exitproc+0xa0>)
  403e72:	4606      	mov	r6, r0
  403e74:	4688      	mov	r8, r1
  403e76:	4691      	mov	r9, r2
  403e78:	6825      	ldr	r5, [r4, #0]
  403e7a:	469a      	mov	sl, r3
  403e7c:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
  403e80:	2c00      	cmp	r4, #0
  403e82:	d03a      	beq.n	403efa <__register_exitproc+0x8e>
  403e84:	6860      	ldr	r0, [r4, #4]
  403e86:	281f      	cmp	r0, #31
  403e88:	dc19      	bgt.n	403ebe <__register_exitproc+0x52>
  403e8a:	1c41      	adds	r1, r0, #1
  403e8c:	b186      	cbz	r6, 403eb0 <__register_exitproc+0x44>
  403e8e:	eb04 0580 	add.w	r5, r4, r0, lsl #2
  403e92:	2201      	movs	r2, #1
  403e94:	2e02      	cmp	r6, #2
  403e96:	f8c5 9088 	str.w	r9, [r5, #136]	; 0x88
  403e9a:	fa02 f200 	lsl.w	r2, r2, r0
  403e9e:	f8d4 3188 	ldr.w	r3, [r4, #392]	; 0x188
  403ea2:	ea43 0302 	orr.w	r3, r3, r2
  403ea6:	f8c4 3188 	str.w	r3, [r4, #392]	; 0x188
  403eaa:	f8c5 a108 	str.w	sl, [r5, #264]	; 0x108
  403eae:	d01e      	beq.n	403eee <__register_exitproc+0x82>
  403eb0:	1c83      	adds	r3, r0, #2
  403eb2:	6061      	str	r1, [r4, #4]
  403eb4:	2000      	movs	r0, #0
  403eb6:	f844 8023 	str.w	r8, [r4, r3, lsl #2]
  403eba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403ebe:	4b14      	ldr	r3, [pc, #80]	; (403f10 <__register_exitproc+0xa4>)
  403ec0:	b303      	cbz	r3, 403f04 <__register_exitproc+0x98>
  403ec2:	f44f 70c8 	mov.w	r0, #400	; 0x190
  403ec6:	f7ff f973 	bl	4031b0 <malloc>
  403eca:	4604      	mov	r4, r0
  403ecc:	b1d0      	cbz	r0, 403f04 <__register_exitproc+0x98>
  403ece:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
  403ed2:	2700      	movs	r7, #0
  403ed4:	2101      	movs	r1, #1
  403ed6:	6003      	str	r3, [r0, #0]
  403ed8:	4638      	mov	r0, r7
  403eda:	6067      	str	r7, [r4, #4]
  403edc:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  403ee0:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
  403ee4:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
  403ee8:	2e00      	cmp	r6, #0
  403eea:	d0e1      	beq.n	403eb0 <__register_exitproc+0x44>
  403eec:	e7cf      	b.n	403e8e <__register_exitproc+0x22>
  403eee:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
  403ef2:	431a      	orrs	r2, r3
  403ef4:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
  403ef8:	e7da      	b.n	403eb0 <__register_exitproc+0x44>
  403efa:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
  403efe:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  403f02:	e7bf      	b.n	403e84 <__register_exitproc+0x18>
  403f04:	f04f 30ff 	mov.w	r0, #4294967295
  403f08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403f0c:	004041f4 	.word	0x004041f4
  403f10:	004031b1 	.word	0x004031b1

00403f14 <_close_r>:
  403f14:	b538      	push	{r3, r4, r5, lr}
  403f16:	2300      	movs	r3, #0
  403f18:	4c06      	ldr	r4, [pc, #24]	; (403f34 <_close_r+0x20>)
  403f1a:	4605      	mov	r5, r0
  403f1c:	4608      	mov	r0, r1
  403f1e:	6023      	str	r3, [r4, #0]
  403f20:	f7fd fbfe 	bl	401720 <_close>
  403f24:	1c43      	adds	r3, r0, #1
  403f26:	d000      	beq.n	403f2a <_close_r+0x16>
  403f28:	bd38      	pop	{r3, r4, r5, pc}
  403f2a:	6823      	ldr	r3, [r4, #0]
  403f2c:	2b00      	cmp	r3, #0
  403f2e:	d0fb      	beq.n	403f28 <_close_r+0x14>
  403f30:	602b      	str	r3, [r5, #0]
  403f32:	bd38      	pop	{r3, r4, r5, pc}
  403f34:	20401174 	.word	0x20401174

00403f38 <_fclose_r>:
  403f38:	2900      	cmp	r1, #0
  403f3a:	d03d      	beq.n	403fb8 <_fclose_r+0x80>
  403f3c:	b570      	push	{r4, r5, r6, lr}
  403f3e:	4605      	mov	r5, r0
  403f40:	460c      	mov	r4, r1
  403f42:	b108      	cbz	r0, 403f48 <_fclose_r+0x10>
  403f44:	6b83      	ldr	r3, [r0, #56]	; 0x38
  403f46:	b37b      	cbz	r3, 403fa8 <_fclose_r+0x70>
  403f48:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  403f4c:	b90b      	cbnz	r3, 403f52 <_fclose_r+0x1a>
  403f4e:	2000      	movs	r0, #0
  403f50:	bd70      	pop	{r4, r5, r6, pc}
  403f52:	4628      	mov	r0, r5
  403f54:	4621      	mov	r1, r4
  403f56:	f7fe fc7b 	bl	402850 <__sflush_r>
  403f5a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  403f5c:	4606      	mov	r6, r0
  403f5e:	b133      	cbz	r3, 403f6e <_fclose_r+0x36>
  403f60:	4628      	mov	r0, r5
  403f62:	69e1      	ldr	r1, [r4, #28]
  403f64:	4798      	blx	r3
  403f66:	2800      	cmp	r0, #0
  403f68:	bfb8      	it	lt
  403f6a:	f04f 36ff 	movlt.w	r6, #4294967295
  403f6e:	89a3      	ldrh	r3, [r4, #12]
  403f70:	061b      	lsls	r3, r3, #24
  403f72:	d41c      	bmi.n	403fae <_fclose_r+0x76>
  403f74:	6b21      	ldr	r1, [r4, #48]	; 0x30
  403f76:	b141      	cbz	r1, 403f8a <_fclose_r+0x52>
  403f78:	f104 0340 	add.w	r3, r4, #64	; 0x40
  403f7c:	4299      	cmp	r1, r3
  403f7e:	d002      	beq.n	403f86 <_fclose_r+0x4e>
  403f80:	4628      	mov	r0, r5
  403f82:	f7fe fe11 	bl	402ba8 <_free_r>
  403f86:	2300      	movs	r3, #0
  403f88:	6323      	str	r3, [r4, #48]	; 0x30
  403f8a:	6c61      	ldr	r1, [r4, #68]	; 0x44
  403f8c:	b121      	cbz	r1, 403f98 <_fclose_r+0x60>
  403f8e:	4628      	mov	r0, r5
  403f90:	f7fe fe0a 	bl	402ba8 <_free_r>
  403f94:	2300      	movs	r3, #0
  403f96:	6463      	str	r3, [r4, #68]	; 0x44
  403f98:	f7fe fd9e 	bl	402ad8 <__sfp_lock_acquire>
  403f9c:	2300      	movs	r3, #0
  403f9e:	81a3      	strh	r3, [r4, #12]
  403fa0:	f7fe fd9c 	bl	402adc <__sfp_lock_release>
  403fa4:	4630      	mov	r0, r6
  403fa6:	bd70      	pop	{r4, r5, r6, pc}
  403fa8:	f7fe fd90 	bl	402acc <__sinit>
  403fac:	e7cc      	b.n	403f48 <_fclose_r+0x10>
  403fae:	4628      	mov	r0, r5
  403fb0:	6921      	ldr	r1, [r4, #16]
  403fb2:	f7fe fdf9 	bl	402ba8 <_free_r>
  403fb6:	e7dd      	b.n	403f74 <_fclose_r+0x3c>
  403fb8:	2000      	movs	r0, #0
  403fba:	4770      	bx	lr

00403fbc <_fstat_r>:
  403fbc:	b538      	push	{r3, r4, r5, lr}
  403fbe:	2300      	movs	r3, #0
  403fc0:	4c07      	ldr	r4, [pc, #28]	; (403fe0 <_fstat_r+0x24>)
  403fc2:	4605      	mov	r5, r0
  403fc4:	4608      	mov	r0, r1
  403fc6:	4611      	mov	r1, r2
  403fc8:	6023      	str	r3, [r4, #0]
  403fca:	f7fd fbb5 	bl	401738 <_fstat>
  403fce:	1c43      	adds	r3, r0, #1
  403fd0:	d000      	beq.n	403fd4 <_fstat_r+0x18>
  403fd2:	bd38      	pop	{r3, r4, r5, pc}
  403fd4:	6823      	ldr	r3, [r4, #0]
  403fd6:	2b00      	cmp	r3, #0
  403fd8:	d0fb      	beq.n	403fd2 <_fstat_r+0x16>
  403fda:	602b      	str	r3, [r5, #0]
  403fdc:	bd38      	pop	{r3, r4, r5, pc}
  403fde:	bf00      	nop
  403fe0:	20401174 	.word	0x20401174

00403fe4 <_isatty_r>:
  403fe4:	b538      	push	{r3, r4, r5, lr}
  403fe6:	2300      	movs	r3, #0
  403fe8:	4c06      	ldr	r4, [pc, #24]	; (404004 <_isatty_r+0x20>)
  403fea:	4605      	mov	r5, r0
  403fec:	4608      	mov	r0, r1
  403fee:	6023      	str	r3, [r4, #0]
  403ff0:	f7fd fbb2 	bl	401758 <_isatty>
  403ff4:	1c43      	adds	r3, r0, #1
  403ff6:	d000      	beq.n	403ffa <_isatty_r+0x16>
  403ff8:	bd38      	pop	{r3, r4, r5, pc}
  403ffa:	6823      	ldr	r3, [r4, #0]
  403ffc:	2b00      	cmp	r3, #0
  403ffe:	d0fb      	beq.n	403ff8 <_isatty_r+0x14>
  404000:	602b      	str	r3, [r5, #0]
  404002:	bd38      	pop	{r3, r4, r5, pc}
  404004:	20401174 	.word	0x20401174

00404008 <_lseek_r>:
  404008:	b570      	push	{r4, r5, r6, lr}
  40400a:	4c08      	ldr	r4, [pc, #32]	; (40402c <_lseek_r+0x24>)
  40400c:	2500      	movs	r5, #0
  40400e:	4606      	mov	r6, r0
  404010:	4608      	mov	r0, r1
  404012:	4611      	mov	r1, r2
  404014:	461a      	mov	r2, r3
  404016:	6025      	str	r5, [r4, #0]
  404018:	f7fd fbaa 	bl	401770 <_lseek>
  40401c:	1c43      	adds	r3, r0, #1
  40401e:	d000      	beq.n	404022 <_lseek_r+0x1a>
  404020:	bd70      	pop	{r4, r5, r6, pc}
  404022:	6823      	ldr	r3, [r4, #0]
  404024:	2b00      	cmp	r3, #0
  404026:	d0fb      	beq.n	404020 <_lseek_r+0x18>
  404028:	6033      	str	r3, [r6, #0]
  40402a:	bd70      	pop	{r4, r5, r6, pc}
  40402c:	20401174 	.word	0x20401174

00404030 <_read_r>:
  404030:	b570      	push	{r4, r5, r6, lr}
  404032:	4c08      	ldr	r4, [pc, #32]	; (404054 <_read_r+0x24>)
  404034:	2500      	movs	r5, #0
  404036:	4606      	mov	r6, r0
  404038:	4608      	mov	r0, r1
  40403a:	4611      	mov	r1, r2
  40403c:	461a      	mov	r2, r3
  40403e:	6025      	str	r5, [r4, #0]
  404040:	f7fc f978 	bl	400334 <_read>
  404044:	1c43      	adds	r3, r0, #1
  404046:	d000      	beq.n	40404a <_read_r+0x1a>
  404048:	bd70      	pop	{r4, r5, r6, pc}
  40404a:	6823      	ldr	r3, [r4, #0]
  40404c:	2b00      	cmp	r3, #0
  40404e:	d0fb      	beq.n	404048 <_read_r+0x18>
  404050:	6033      	str	r3, [r6, #0]
  404052:	bd70      	pop	{r4, r5, r6, pc}
  404054:	20401174 	.word	0x20401174
  404058:	0001c200 	.word	0x0001c200
  40405c:	000000c0 	.word	0x000000c0
  404060:	00000800 	.word	0x00000800
	...
  404070:	202d462d 	.word	0x202d462d
  404074:	74737953 	.word	0x74737953
  404078:	206b6369 	.word	0x206b6369
  40407c:	666e6f63 	.word	0x666e6f63
  404080:	72756769 	.word	0x72756769
  404084:	6f697461 	.word	0x6f697461
  404088:	7265206e 	.word	0x7265206e
  40408c:	0d726f72 	.word	0x0d726f72
  404090:	00000000 	.word	0x00000000
  404094:	00000960 	.word	0x00000960
  404098:	000000c0 	.word	0x000000c0
  40409c:	00000800 	.word	0x00000800
  4040a0:	00000000 	.word	0x00000000
  4040a4:	00006325 	.word	0x00006325
  4040a8:	64616552 	.word	0x64616552
  4040ac:	000a0d79 	.word	0x000a0d79
  4040b0:	61656c43 	.word	0x61656c43
  4040b4:	000a0d6e 	.word	0x000a0d6e
  4040b8:	74726944 	.word	0x74726944
  4040bc:	000a0d79 	.word	0x000a0d79
  4040c0:	6f727245 	.word	0x6f727245
  4040c4:	000a0d72 	.word	0x000a0d72
  4040c8:	6c656853 	.word	0x6c656853
  4040cc:	0a0d3166 	.word	0x0a0d3166
  4040d0:	00000000 	.word	0x00000000
  4040d4:	6c656853 	.word	0x6c656853
  4040d8:	0a0d3266 	.word	0x0a0d3266
  4040dc:	00000000 	.word	0x00000000
  4040e0:	6c656853 	.word	0x6c656853
  4040e4:	0a0d3366 	.word	0x0a0d3366
  4040e8:	00000000 	.word	0x00000000
  4040ec:	6c656853 	.word	0x6c656853
  4040f0:	0a0d3466 	.word	0x0a0d3466
  4040f4:	00000000 	.word	0x00000000
  4040f8:	61656c43 	.word	0x61656c43
  4040fc:	676e696e 	.word	0x676e696e
  404100:	00000a0d 	.word	0x00000a0d
  404104:	55202d2d 	.word	0x55202d2d
  404108:	54524153 	.word	0x54524153
  40410c:	34535220 	.word	0x34535220
  404110:	45203538 	.word	0x45203538
  404114:	706d6178 	.word	0x706d6178
  404118:	2d20656c 	.word	0x2d20656c
  40411c:	2d0a0d2d 	.word	0x2d0a0d2d
  404120:	4153202d 	.word	0x4153202d
  404124:	3037454d 	.word	0x3037454d
  404128:	4c50582d 	.word	0x4c50582d
  40412c:	2d2d2044 	.word	0x2d2d2044
  404130:	2d2d0a0d 	.word	0x2d2d0a0d
  404134:	6d6f4320 	.word	0x6d6f4320
  404138:	656c6970 	.word	0x656c6970
  40413c:	46203a64 	.word	0x46203a64
  404140:	20206265 	.word	0x20206265
  404144:	30322038 	.word	0x30322038
  404148:	32203631 	.word	0x32203631
  40414c:	36313a31 	.word	0x36313a31
  404150:	2035323a 	.word	0x2035323a
  404154:	000d2d2d 	.word	0x000d2d2d
  404158:	202d492d 	.word	0x202d492d
  40415c:	72617453 	.word	0x72617453
  404160:	72742074 	.word	0x72742074
  404164:	6d736e61 	.word	0x6d736e61
  404168:	69747469 	.word	0x69747469
  40416c:	0d21676e 	.word	0x0d21676e
  404170:	00000000 	.word	0x00000000
  404174:	202d492d 	.word	0x202d492d
  404178:	65636552 	.word	0x65636552
  40417c:	6e697669 	.word	0x6e697669
  404180:	79732067 	.word	0x79732067
  404184:	6320636e 	.word	0x6320636e
  404188:	61726168 	.word	0x61726168
  40418c:	72657463 	.word	0x72657463
  404190:	00000d2e 	.word	0x00000d2e
  404194:	202d492d 	.word	0x202d492d
  404198:	72617453 	.word	0x72617453
  40419c:	65722074 	.word	0x65722074
  4041a0:	76696563 	.word	0x76696563
  4041a4:	21676e69 	.word	0x21676e69
  4041a8:	0000000d 	.word	0x0000000d
  4041ac:	202d452d 	.word	0x202d452d
  4041b0:	6f727245 	.word	0x6f727245
  4041b4:	636f2072 	.word	0x636f2072
  4041b8:	72727563 	.word	0x72727563
  4041bc:	77206465 	.word	0x77206465
  4041c0:	656c6968 	.word	0x656c6968
  4041c4:	63657220 	.word	0x63657220
  4041c8:	69766965 	.word	0x69766965
  4041cc:	0d21676e 	.word	0x0d21676e
  4041d0:	00000000 	.word	0x00000000
  4041d4:	202d492d 	.word	0x202d492d
  4041d8:	65636552 	.word	0x65636552
  4041dc:	64657669 	.word	0x64657669
  4041e0:	63757320 	.word	0x63757320
  4041e4:	73736563 	.word	0x73736563
  4041e8:	6c6c7566 	.word	0x6c6c7566
  4041ec:	000d2179 	.word	0x000d2179
  4041f0:	00000043 	.word	0x00000043

004041f4 <_global_impure_ptr>:
  4041f4:	20400080 0000000a                       ..@ ....

004041fc <_init>:
  4041fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4041fe:	bf00      	nop
  404200:	bcf8      	pop	{r3, r4, r5, r6, r7}
  404202:	bc08      	pop	{r3}
  404204:	469e      	mov	lr, r3
  404206:	4770      	bx	lr

00404208 <__init_array_start>:
  404208:	00402831 	.word	0x00402831

0040420c <__frame_dummy_init_array_entry>:
  40420c:	00400165                                e.@.

00404210 <_fini>:
  404210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  404212:	bf00      	nop
  404214:	bcf8      	pop	{r3, r4, r5, r6, r7}
  404216:	bc08      	pop	{r3}
  404218:	469e      	mov	lr, r3
  40421a:	4770      	bx	lr

0040421c <__fini_array_start>:
  40421c:	00400141 	.word	0x00400141
