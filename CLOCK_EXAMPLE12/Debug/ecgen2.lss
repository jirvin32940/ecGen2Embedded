
ecgen2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00009624  00400000  00400000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00409624  00409624  00011624  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000008fc  20400000  0040962c  00018000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000980  204008fc  00409f28  000188fc  2**2
                  ALLOC
  4 .stack        00002004  2040127c  0040a8a8  000188fc  2**0
                  ALLOC
  5 .heap         00000200  20403280  0040c8ac  000188fc  2**0
                  ALLOC
  6 .ARM.attributes 00000033  00000000  00000000  000188fc  2**0
                  CONTENTS, READONLY
  7 .comment      0000005b  00000000  00000000  0001892f  2**0
                  CONTENTS, READONLY
  8 .debug_info   0000f6b4  00000000  00000000  0001898a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00002102  00000000  00000000  0002803e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00008f64  00000000  00000000  0002a140  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000f20  00000000  00000000  000330a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000e10  00000000  00000000  00033fc4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0001ead1  00000000  00000000  00034dd4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000cc00  00000000  00000000  000538a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0008c38d  00000000  00000000  000604a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00005068  00000000  00000000  000ec834  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <_sfixed>:
  400000:	20403280 	.word	0x20403280
  400004:	00401ce9 	.word	0x00401ce9
  400008:	00401d6d 	.word	0x00401d6d
  40000c:	00401d6d 	.word	0x00401d6d
  400010:	00401d6d 	.word	0x00401d6d
  400014:	00401d6d 	.word	0x00401d6d
  400018:	00401d6d 	.word	0x00401d6d
	...
  40002c:	00401d6d 	.word	0x00401d6d
  400030:	00401d6d 	.word	0x00401d6d
  400034:	00000000 	.word	0x00000000
  400038:	00401d6d 	.word	0x00401d6d
  40003c:	004030d1 	.word	0x004030d1
  400040:	00401d6d 	.word	0x00401d6d
  400044:	00401d6d 	.word	0x00401d6d
  400048:	00401d6d 	.word	0x00401d6d
  40004c:	00401d6d 	.word	0x00401d6d
  400050:	00401d6d 	.word	0x00401d6d
  400054:	00401d6d 	.word	0x00401d6d
  400058:	00401d6d 	.word	0x00401d6d
  40005c:	00401d6d 	.word	0x00401d6d
  400060:	00401d6d 	.word	0x00401d6d
  400064:	00000000 	.word	0x00000000
  400068:	0040120d 	.word	0x0040120d
  40006c:	00401225 	.word	0x00401225
  400070:	0040123d 	.word	0x0040123d
  400074:	004030f9 	.word	0x004030f9
  400078:	00401d6d 	.word	0x00401d6d
  40007c:	00401d6d 	.word	0x00401d6d
  400080:	00401255 	.word	0x00401255
  400084:	0040126d 	.word	0x0040126d
  400088:	00401d6d 	.word	0x00401d6d
  40008c:	00401d6d 	.word	0x00401d6d
  400090:	00401d6d 	.word	0x00401d6d
  400094:	00401d6d 	.word	0x00401d6d
  400098:	00401d6d 	.word	0x00401d6d
  40009c:	00401d6d 	.word	0x00401d6d
  4000a0:	00401d6d 	.word	0x00401d6d
  4000a4:	00401d6d 	.word	0x00401d6d
  4000a8:	00401d6d 	.word	0x00401d6d
  4000ac:	00401d6d 	.word	0x00401d6d
  4000b0:	00401d6d 	.word	0x00401d6d
  4000b4:	00401109 	.word	0x00401109
  4000b8:	00401d6d 	.word	0x00401d6d
  4000bc:	00401d6d 	.word	0x00401d6d
  4000c0:	00401d6d 	.word	0x00401d6d
  4000c4:	00401d6d 	.word	0x00401d6d
  4000c8:	00401d6d 	.word	0x00401d6d
  4000cc:	00401d6d 	.word	0x00401d6d
  4000d0:	00000000 	.word	0x00000000
  4000d4:	00401d6d 	.word	0x00401d6d
  4000d8:	00000000 	.word	0x00000000
  4000dc:	00401d6d 	.word	0x00401d6d
  4000e0:	0040111d 	.word	0x0040111d
  4000e4:	00401d6d 	.word	0x00401d6d
  4000e8:	00401d6d 	.word	0x00401d6d
  4000ec:	00401d6d 	.word	0x00401d6d
  4000f0:	00401d6d 	.word	0x00401d6d
  4000f4:	00401d6d 	.word	0x00401d6d
  4000f8:	00401d6d 	.word	0x00401d6d
  4000fc:	00401d6d 	.word	0x00401d6d
  400100:	00401d6d 	.word	0x00401d6d
  400104:	00401d6d 	.word	0x00401d6d
  400108:	00401d6d 	.word	0x00401d6d
  40010c:	00401d6d 	.word	0x00401d6d
  400110:	00401d6d 	.word	0x00401d6d
	...
  400120:	00401d6d 	.word	0x00401d6d
  400124:	00401d6d 	.word	0x00401d6d
  400128:	00401d6d 	.word	0x00401d6d
  40012c:	00401d6d 	.word	0x00401d6d
  400130:	00401d6d 	.word	0x00401d6d
  400134:	00000000 	.word	0x00000000
  400138:	00401d6d 	.word	0x00401d6d
  40013c:	00401d6d 	.word	0x00401d6d

00400140 <__do_global_dtors_aux>:
  400140:	b510      	push	{r4, lr}
  400142:	4c05      	ldr	r4, [pc, #20]	; (400158 <__do_global_dtors_aux+0x18>)
  400144:	7823      	ldrb	r3, [r4, #0]
  400146:	b933      	cbnz	r3, 400156 <__do_global_dtors_aux+0x16>
  400148:	4b04      	ldr	r3, [pc, #16]	; (40015c <__do_global_dtors_aux+0x1c>)
  40014a:	b113      	cbz	r3, 400152 <__do_global_dtors_aux+0x12>
  40014c:	4804      	ldr	r0, [pc, #16]	; (400160 <__do_global_dtors_aux+0x20>)
  40014e:	f3af 8000 	nop.w
  400152:	2301      	movs	r3, #1
  400154:	7023      	strb	r3, [r4, #0]
  400156:	bd10      	pop	{r4, pc}
  400158:	204008fc 	.word	0x204008fc
  40015c:	00000000 	.word	0x00000000
  400160:	0040962c 	.word	0x0040962c

00400164 <frame_dummy>:
  400164:	4b08      	ldr	r3, [pc, #32]	; (400188 <frame_dummy+0x24>)
  400166:	b510      	push	{r4, lr}
  400168:	b11b      	cbz	r3, 400172 <frame_dummy+0xe>
  40016a:	4808      	ldr	r0, [pc, #32]	; (40018c <frame_dummy+0x28>)
  40016c:	4908      	ldr	r1, [pc, #32]	; (400190 <frame_dummy+0x2c>)
  40016e:	f3af 8000 	nop.w
  400172:	4808      	ldr	r0, [pc, #32]	; (400194 <frame_dummy+0x30>)
  400174:	6803      	ldr	r3, [r0, #0]
  400176:	b903      	cbnz	r3, 40017a <frame_dummy+0x16>
  400178:	bd10      	pop	{r4, pc}
  40017a:	4b07      	ldr	r3, [pc, #28]	; (400198 <frame_dummy+0x34>)
  40017c:	2b00      	cmp	r3, #0
  40017e:	d0fb      	beq.n	400178 <frame_dummy+0x14>
  400180:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400184:	4718      	bx	r3
  400186:	bf00      	nop
  400188:	00000000 	.word	0x00000000
  40018c:	0040962c 	.word	0x0040962c
  400190:	20400900 	.word	0x20400900
  400194:	0040962c 	.word	0x0040962c
  400198:	00000000 	.word	0x00000000

0040019c <osc_enable>:
#define OSC_MAINCK_XTAL_HZ      BOARD_FREQ_MAINCK_XTAL    //!< External crystal oscillator.
#define OSC_MAINCK_BYPASS_HZ    BOARD_FREQ_MAINCK_BYPASS  //!< External bypass oscillator.
//@}

static inline void osc_enable(uint32_t ul_id)
{
  40019c:	b580      	push	{r7, lr}
  40019e:	b082      	sub	sp, #8
  4001a0:	af00      	add	r7, sp, #0
  4001a2:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  4001a4:	687b      	ldr	r3, [r7, #4]
  4001a6:	2b07      	cmp	r3, #7
  4001a8:	d830      	bhi.n	40020c <osc_enable+0x70>
  4001aa:	a201      	add	r2, pc, #4	; (adr r2, 4001b0 <osc_enable+0x14>)
  4001ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4001b0:	0040020d 	.word	0x0040020d
  4001b4:	004001d1 	.word	0x004001d1
  4001b8:	004001d9 	.word	0x004001d9
  4001bc:	004001e1 	.word	0x004001e1
  4001c0:	004001e9 	.word	0x004001e9
  4001c4:	004001f1 	.word	0x004001f1
  4001c8:	004001f9 	.word	0x004001f9
  4001cc:	00400203 	.word	0x00400203
	case OSC_SLCK_32K_RC:
		break;

	case OSC_SLCK_32K_XTAL:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
  4001d0:	2000      	movs	r0, #0
  4001d2:	4b10      	ldr	r3, [pc, #64]	; (400214 <osc_enable+0x78>)
  4001d4:	4798      	blx	r3
		break;
  4001d6:	e019      	b.n	40020c <osc_enable+0x70>

	case OSC_SLCK_32K_BYPASS:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
  4001d8:	2001      	movs	r0, #1
  4001da:	4b0e      	ldr	r3, [pc, #56]	; (400214 <osc_enable+0x78>)
  4001dc:	4798      	blx	r3
		break;
  4001de:	e015      	b.n	40020c <osc_enable+0x70>


	case OSC_MAINCK_4M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
  4001e0:	2000      	movs	r0, #0
  4001e2:	4b0d      	ldr	r3, [pc, #52]	; (400218 <osc_enable+0x7c>)
  4001e4:	4798      	blx	r3
		break;
  4001e6:	e011      	b.n	40020c <osc_enable+0x70>

	case OSC_MAINCK_8M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
  4001e8:	2010      	movs	r0, #16
  4001ea:	4b0b      	ldr	r3, [pc, #44]	; (400218 <osc_enable+0x7c>)
  4001ec:	4798      	blx	r3
		break;
  4001ee:	e00d      	b.n	40020c <osc_enable+0x70>

	case OSC_MAINCK_12M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
  4001f0:	2020      	movs	r0, #32
  4001f2:	4b09      	ldr	r3, [pc, #36]	; (400218 <osc_enable+0x7c>)
  4001f4:	4798      	blx	r3
		break;
  4001f6:	e009      	b.n	40020c <osc_enable+0x70>


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  4001f8:	2000      	movs	r0, #0
  4001fa:	213e      	movs	r1, #62	; 0x3e
  4001fc:	4b07      	ldr	r3, [pc, #28]	; (40021c <osc_enable+0x80>)
  4001fe:	4798      	blx	r3
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
  400200:	e004      	b.n	40020c <osc_enable+0x70>

	case OSC_MAINCK_BYPASS:
		pmc_switch_mainck_to_xtal(PMC_OSC_BYPASS,
  400202:	2001      	movs	r0, #1
  400204:	213e      	movs	r1, #62	; 0x3e
  400206:	4b05      	ldr	r3, [pc, #20]	; (40021c <osc_enable+0x80>)
  400208:	4798      	blx	r3
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
  40020a:	bf00      	nop
	}
}
  40020c:	3708      	adds	r7, #8
  40020e:	46bd      	mov	sp, r7
  400210:	bd80      	pop	{r7, pc}
  400212:	bf00      	nop
  400214:	00401381 	.word	0x00401381
  400218:	004013ed 	.word	0x004013ed
  40021c:	0040145d 	.word	0x0040145d

00400220 <osc_is_ready>:
		break;
	}
}

static inline bool osc_is_ready(uint32_t ul_id)
{
  400220:	b580      	push	{r7, lr}
  400222:	b082      	sub	sp, #8
  400224:	af00      	add	r7, sp, #0
  400226:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  400228:	687b      	ldr	r3, [r7, #4]
  40022a:	2b07      	cmp	r3, #7
  40022c:	d826      	bhi.n	40027c <osc_is_ready+0x5c>
  40022e:	a201      	add	r2, pc, #4	; (adr r2, 400234 <osc_is_ready+0x14>)
  400230:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  400234:	00400255 	.word	0x00400255
  400238:	00400259 	.word	0x00400259
  40023c:	00400259 	.word	0x00400259
  400240:	0040026b 	.word	0x0040026b
  400244:	0040026b 	.word	0x0040026b
  400248:	0040026b 	.word	0x0040026b
  40024c:	0040026b 	.word	0x0040026b
  400250:	0040026b 	.word	0x0040026b
	case OSC_SLCK_32K_RC:
		return 1;
  400254:	2301      	movs	r3, #1
  400256:	e012      	b.n	40027e <osc_is_ready+0x5e>

	case OSC_SLCK_32K_XTAL:
	case OSC_SLCK_32K_BYPASS:
		return pmc_osc_is_ready_32kxtal();
  400258:	4b0b      	ldr	r3, [pc, #44]	; (400288 <osc_is_ready+0x68>)
  40025a:	4798      	blx	r3
  40025c:	4603      	mov	r3, r0
  40025e:	2b00      	cmp	r3, #0
  400260:	bf14      	ite	ne
  400262:	2301      	movne	r3, #1
  400264:	2300      	moveq	r3, #0
  400266:	b2db      	uxtb	r3, r3
  400268:	e009      	b.n	40027e <osc_is_ready+0x5e>
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  40026a:	4b08      	ldr	r3, [pc, #32]	; (40028c <osc_is_ready+0x6c>)
  40026c:	4798      	blx	r3
  40026e:	4603      	mov	r3, r0
  400270:	2b00      	cmp	r3, #0
  400272:	bf14      	ite	ne
  400274:	2301      	movne	r3, #1
  400276:	2300      	moveq	r3, #0
  400278:	b2db      	uxtb	r3, r3
  40027a:	e000      	b.n	40027e <osc_is_ready+0x5e>
	}

	return 0;
  40027c:	2300      	movs	r3, #0
}
  40027e:	4618      	mov	r0, r3
  400280:	3708      	adds	r7, #8
  400282:	46bd      	mov	sp, r7
  400284:	bd80      	pop	{r7, pc}
  400286:	bf00      	nop
  400288:	004013b9 	.word	0x004013b9
  40028c:	004014d5 	.word	0x004014d5

00400290 <osc_get_rate>:

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  400290:	b480      	push	{r7}
  400292:	b083      	sub	sp, #12
  400294:	af00      	add	r7, sp, #0
  400296:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  400298:	687b      	ldr	r3, [r7, #4]
  40029a:	2b07      	cmp	r3, #7
  40029c:	d825      	bhi.n	4002ea <osc_get_rate+0x5a>
  40029e:	a201      	add	r2, pc, #4	; (adr r2, 4002a4 <osc_get_rate+0x14>)
  4002a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4002a4:	004002c5 	.word	0x004002c5
  4002a8:	004002cb 	.word	0x004002cb
  4002ac:	004002d1 	.word	0x004002d1
  4002b0:	004002d7 	.word	0x004002d7
  4002b4:	004002db 	.word	0x004002db
  4002b8:	004002df 	.word	0x004002df
  4002bc:	004002e3 	.word	0x004002e3
  4002c0:	004002e7 	.word	0x004002e7
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  4002c4:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  4002c8:	e010      	b.n	4002ec <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  4002ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4002ce:	e00d      	b.n	4002ec <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  4002d0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4002d4:	e00a      	b.n	4002ec <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  4002d6:	4b08      	ldr	r3, [pc, #32]	; (4002f8 <osc_get_rate+0x68>)
  4002d8:	e008      	b.n	4002ec <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  4002da:	4b08      	ldr	r3, [pc, #32]	; (4002fc <osc_get_rate+0x6c>)
  4002dc:	e006      	b.n	4002ec <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  4002de:	4b08      	ldr	r3, [pc, #32]	; (400300 <osc_get_rate+0x70>)
  4002e0:	e004      	b.n	4002ec <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  4002e2:	4b08      	ldr	r3, [pc, #32]	; (400304 <osc_get_rate+0x74>)
  4002e4:	e002      	b.n	4002ec <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  4002e6:	4b06      	ldr	r3, [pc, #24]	; (400300 <osc_get_rate+0x70>)
  4002e8:	e000      	b.n	4002ec <osc_get_rate+0x5c>
	}

	return 0;
  4002ea:	2300      	movs	r3, #0
}
  4002ec:	4618      	mov	r0, r3
  4002ee:	370c      	adds	r7, #12
  4002f0:	46bd      	mov	sp, r7
  4002f2:	f85d 7b04 	ldr.w	r7, [sp], #4
  4002f6:	4770      	bx	lr
  4002f8:	003d0900 	.word	0x003d0900
  4002fc:	007a1200 	.word	0x007a1200
  400300:	00b71b00 	.word	0x00b71b00
  400304:	00f42400 	.word	0x00f42400

00400308 <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
  400308:	b580      	push	{r7, lr}
  40030a:	b082      	sub	sp, #8
  40030c:	af00      	add	r7, sp, #0
  40030e:	4603      	mov	r3, r0
  400310:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
  400312:	bf00      	nop
  400314:	79fb      	ldrb	r3, [r7, #7]
  400316:	4618      	mov	r0, r3
  400318:	4b05      	ldr	r3, [pc, #20]	; (400330 <osc_wait_ready+0x28>)
  40031a:	4798      	blx	r3
  40031c:	4603      	mov	r3, r0
  40031e:	f083 0301 	eor.w	r3, r3, #1
  400322:	b2db      	uxtb	r3, r3
  400324:	2b00      	cmp	r3, #0
  400326:	d1f5      	bne.n	400314 <osc_wait_ready+0xc>
		/* Do nothing */
	}
}
  400328:	3708      	adds	r7, #8
  40032a:	46bd      	mov	sp, r7
  40032c:	bd80      	pop	{r7, pc}
  40032e:	bf00      	nop
  400330:	00400221 	.word	0x00400221

00400334 <pll_config_init>:
 * hardware mul+1 is hidden in this implementation. Use mul as mul effective
 * value.
 */
static inline void pll_config_init(struct pll_config *p_cfg,
		enum pll_source e_src, uint32_t ul_div, uint32_t ul_mul)
{
  400334:	b580      	push	{r7, lr}
  400336:	b086      	sub	sp, #24
  400338:	af00      	add	r7, sp, #0
  40033a:	60f8      	str	r0, [r7, #12]
  40033c:	607a      	str	r2, [r7, #4]
  40033e:	603b      	str	r3, [r7, #0]
  400340:	460b      	mov	r3, r1
  400342:	72fb      	strb	r3, [r7, #11]
	uint32_t vco_hz;

	Assert(e_src < PLL_NR_SOURCES);

	if (ul_div == 0 && ul_mul == 0) { /* Must only be true for UTMI PLL */
  400344:	687b      	ldr	r3, [r7, #4]
  400346:	2b00      	cmp	r3, #0
  400348:	d107      	bne.n	40035a <pll_config_init+0x26>
  40034a:	683b      	ldr	r3, [r7, #0]
  40034c:	2b00      	cmp	r3, #0
  40034e:	d104      	bne.n	40035a <pll_config_init+0x26>
		p_cfg->ctrl = CKGR_UCKR_UPLLCOUNT(PLL_COUNT);
  400350:	68fb      	ldr	r3, [r7, #12]
  400352:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
  400356:	601a      	str	r2, [r3, #0]
  400358:	e019      	b.n	40038e <pll_config_init+0x5a>
	} else { /* PLLA */
	/* Calculate internal VCO frequency */
	vco_hz = osc_get_rate(e_src) / ul_div;
  40035a:	7afb      	ldrb	r3, [r7, #11]
  40035c:	4618      	mov	r0, r3
  40035e:	4b0d      	ldr	r3, [pc, #52]	; (400394 <pll_config_init+0x60>)
  400360:	4798      	blx	r3
  400362:	4602      	mov	r2, r0
  400364:	687b      	ldr	r3, [r7, #4]
  400366:	fbb2 f3f3 	udiv	r3, r2, r3
  40036a:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_INPUT_MIN_HZ);
	Assert(vco_hz <= PLL_INPUT_MAX_HZ);

	vco_hz *= ul_mul;
  40036c:	697b      	ldr	r3, [r7, #20]
  40036e:	683a      	ldr	r2, [r7, #0]
  400370:	fb02 f303 	mul.w	r3, r2, r3
  400374:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_OUTPUT_MIN_HZ);
	Assert(vco_hz <= PLL_OUTPUT_MAX_HZ);

	/* PMC hardware will automatically make it mul+1 */
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) | CKGR_PLLAR_DIVA(ul_div)  \
  400376:	683b      	ldr	r3, [r7, #0]
  400378:	3b01      	subs	r3, #1
  40037a:	041a      	lsls	r2, r3, #16
  40037c:	4b06      	ldr	r3, [pc, #24]	; (400398 <pll_config_init+0x64>)
  40037e:	4013      	ands	r3, r2
  400380:	687a      	ldr	r2, [r7, #4]
  400382:	b2d2      	uxtb	r2, r2
  400384:	4313      	orrs	r3, r2
		| CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
  400386:	f443 527c 	orr.w	r2, r3, #16128	; 0x3f00
	vco_hz *= ul_mul;
	Assert(vco_hz >= PLL_OUTPUT_MIN_HZ);
	Assert(vco_hz <= PLL_OUTPUT_MAX_HZ);

	/* PMC hardware will automatically make it mul+1 */
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) | CKGR_PLLAR_DIVA(ul_div)  \
  40038a:	68fb      	ldr	r3, [r7, #12]
  40038c:	601a      	str	r2, [r3, #0]
		| CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
	}
}
  40038e:	3718      	adds	r7, #24
  400390:	46bd      	mov	sp, r7
  400392:	bd80      	pop	{r7, pc}
  400394:	00400291 	.word	0x00400291
  400398:	07ff0000 	.word	0x07ff0000

0040039c <pll_enable>:
		PMC->CKGR_UCKR = p_cfg->ctrl;
	}
}

static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
  40039c:	b580      	push	{r7, lr}
  40039e:	b082      	sub	sp, #8
  4003a0:	af00      	add	r7, sp, #0
  4003a2:	6078      	str	r0, [r7, #4]
  4003a4:	6039      	str	r1, [r7, #0]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  4003a6:	683b      	ldr	r3, [r7, #0]
  4003a8:	2b00      	cmp	r3, #0
  4003aa:	d108      	bne.n	4003be <pll_enable+0x22>
		pmc_disable_pllack(); // Always stop PLL first!
  4003ac:	4b08      	ldr	r3, [pc, #32]	; (4003d0 <pll_enable+0x34>)
  4003ae:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  4003b0:	4a08      	ldr	r2, [pc, #32]	; (4003d4 <pll_enable+0x38>)
  4003b2:	687b      	ldr	r3, [r7, #4]
  4003b4:	681b      	ldr	r3, [r3, #0]
  4003b6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  4003ba:	6293      	str	r3, [r2, #40]	; 0x28
  4003bc:	e005      	b.n	4003ca <pll_enable+0x2e>
	} else {
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
  4003be:	4a05      	ldr	r2, [pc, #20]	; (4003d4 <pll_enable+0x38>)
  4003c0:	687b      	ldr	r3, [r7, #4]
  4003c2:	681b      	ldr	r3, [r3, #0]
  4003c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  4003c8:	61d3      	str	r3, [r2, #28]
	}
}
  4003ca:	3708      	adds	r7, #8
  4003cc:	46bd      	mov	sp, r7
  4003ce:	bd80      	pop	{r7, pc}
  4003d0:	004014f1 	.word	0x004014f1
  4003d4:	400e0600 	.word	0x400e0600

004003d8 <pll_is_locked>:
		PMC->CKGR_UCKR &= ~CKGR_UCKR_UPLLEN;
	}
}

static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
  4003d8:	b580      	push	{r7, lr}
  4003da:	b082      	sub	sp, #8
  4003dc:	af00      	add	r7, sp, #0
  4003de:	6078      	str	r0, [r7, #4]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  4003e0:	687b      	ldr	r3, [r7, #4]
  4003e2:	2b00      	cmp	r3, #0
  4003e4:	d103      	bne.n	4003ee <pll_is_locked+0x16>
	return pmc_is_locked_pllack();
  4003e6:	4b05      	ldr	r3, [pc, #20]	; (4003fc <pll_is_locked+0x24>)
  4003e8:	4798      	blx	r3
  4003ea:	4603      	mov	r3, r0
  4003ec:	e002      	b.n	4003f4 <pll_is_locked+0x1c>
	} else {
		return pmc_is_locked_upll();
  4003ee:	4b04      	ldr	r3, [pc, #16]	; (400400 <pll_is_locked+0x28>)
  4003f0:	4798      	blx	r3
  4003f2:	4603      	mov	r3, r0
	}
}
  4003f4:	4618      	mov	r0, r3
  4003f6:	3708      	adds	r7, #8
  4003f8:	46bd      	mov	sp, r7
  4003fa:	bd80      	pop	{r7, pc}
  4003fc:	00401509 	.word	0x00401509
  400400:	00401525 	.word	0x00401525

00400404 <pll_enable_source>:

static inline void pll_enable_source(enum pll_source e_src)
{
  400404:	b580      	push	{r7, lr}
  400406:	b082      	sub	sp, #8
  400408:	af00      	add	r7, sp, #0
  40040a:	4603      	mov	r3, r0
  40040c:	71fb      	strb	r3, [r7, #7]
	switch (e_src) {
  40040e:	79fb      	ldrb	r3, [r7, #7]
  400410:	3b03      	subs	r3, #3
  400412:	2b04      	cmp	r3, #4
  400414:	d808      	bhi.n	400428 <pll_enable_source+0x24>
	case PLL_SRC_MAINCK_4M_RC:
	case PLL_SRC_MAINCK_8M_RC:
	case PLL_SRC_MAINCK_12M_RC:
	case PLL_SRC_MAINCK_XTAL:
	case PLL_SRC_MAINCK_BYPASS:
		osc_enable(e_src);
  400416:	79fb      	ldrb	r3, [r7, #7]
  400418:	4618      	mov	r0, r3
  40041a:	4b05      	ldr	r3, [pc, #20]	; (400430 <pll_enable_source+0x2c>)
  40041c:	4798      	blx	r3
		osc_wait_ready(e_src);
  40041e:	79fb      	ldrb	r3, [r7, #7]
  400420:	4618      	mov	r0, r3
  400422:	4b04      	ldr	r3, [pc, #16]	; (400434 <pll_enable_source+0x30>)
  400424:	4798      	blx	r3
		break;
  400426:	e000      	b.n	40042a <pll_enable_source+0x26>

	default:
		Assert(false);
		break;
  400428:	bf00      	nop
	}
}
  40042a:	3708      	adds	r7, #8
  40042c:	46bd      	mov	sp, r7
  40042e:	bd80      	pop	{r7, pc}
  400430:	0040019d 	.word	0x0040019d
  400434:	00400309 	.word	0x00400309

00400438 <pll_wait_for_lock>:
 *
 * \retval STATUS_OK The PLL is now locked.
 * \retval ERR_TIMEOUT Timed out waiting for PLL to become locked.
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
  400438:	b580      	push	{r7, lr}
  40043a:	b082      	sub	sp, #8
  40043c:	af00      	add	r7, sp, #0
  40043e:	6078      	str	r0, [r7, #4]
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  400440:	bf00      	nop
  400442:	6878      	ldr	r0, [r7, #4]
  400444:	4b04      	ldr	r3, [pc, #16]	; (400458 <pll_wait_for_lock+0x20>)
  400446:	4798      	blx	r3
  400448:	4603      	mov	r3, r0
  40044a:	2b00      	cmp	r3, #0
  40044c:	d0f9      	beq.n	400442 <pll_wait_for_lock+0xa>
		/* Do nothing */
	}

	return 0;
  40044e:	2300      	movs	r3, #0
}
  400450:	4618      	mov	r0, r3
  400452:	3708      	adds	r7, #8
  400454:	46bd      	mov	sp, r7
  400456:	bd80      	pop	{r7, pc}
  400458:	004003d9 	.word	0x004003d9

0040045c <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  40045c:	b580      	push	{r7, lr}
  40045e:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  400460:	2006      	movs	r0, #6
  400462:	4b05      	ldr	r3, [pc, #20]	; (400478 <sysclk_get_main_hz+0x1c>)
  400464:	4798      	blx	r3
  400466:	4602      	mov	r2, r0
  400468:	4613      	mov	r3, r2
  40046a:	009b      	lsls	r3, r3, #2
  40046c:	4413      	add	r3, r2
  40046e:	009a      	lsls	r2, r3, #2
  400470:	4413      	add	r3, r2
  400472:	089b      	lsrs	r3, r3, #2
#endif
	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  400474:	4618      	mov	r0, r3
  400476:	bd80      	pop	{r7, pc}
  400478:	00400291 	.word	0x00400291

0040047c <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
  40047c:	b580      	push	{r7, lr}
  40047e:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  400480:	4b02      	ldr	r3, [pc, #8]	; (40048c <sysclk_get_cpu_hz+0x10>)
  400482:	4798      	blx	r3
  400484:	4603      	mov	r3, r0
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  400486:	4618      	mov	r0, r3
  400488:	bd80      	pop	{r7, pc}
  40048a:	bf00      	nop
  40048c:	0040045d 	.word	0x0040045d

00400490 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  400490:	b590      	push	{r4, r7, lr}
  400492:	b083      	sub	sp, #12
  400494:	af00      	add	r7, sp, #0
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  400496:	4813      	ldr	r0, [pc, #76]	; (4004e4 <sysclk_init+0x54>)
  400498:	4b13      	ldr	r3, [pc, #76]	; (4004e8 <sysclk_init+0x58>)
  40049a:	4798      	blx	r3
		pmc_switch_mck_to_mainck(CONFIG_SYSCLK_PRES);
	}

#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
  40049c:	2006      	movs	r0, #6
  40049e:	4b13      	ldr	r3, [pc, #76]	; (4004ec <sysclk_init+0x5c>)
  4004a0:	4798      	blx	r3
		pll_config_defaults(&pllcfg, 0);
  4004a2:	1d3b      	adds	r3, r7, #4
  4004a4:	4618      	mov	r0, r3
  4004a6:	2106      	movs	r1, #6
  4004a8:	2204      	movs	r2, #4
  4004aa:	2319      	movs	r3, #25
  4004ac:	4c10      	ldr	r4, [pc, #64]	; (4004f0 <sysclk_init+0x60>)
  4004ae:	47a0      	blx	r4
		pll_enable(&pllcfg, 0);
  4004b0:	1d3b      	adds	r3, r7, #4
  4004b2:	4618      	mov	r0, r3
  4004b4:	2100      	movs	r1, #0
  4004b6:	4b0f      	ldr	r3, [pc, #60]	; (4004f4 <sysclk_init+0x64>)
  4004b8:	4798      	blx	r3
		pll_wait_for_lock(0);
  4004ba:	2000      	movs	r0, #0
  4004bc:	4b0e      	ldr	r3, [pc, #56]	; (4004f8 <sysclk_init+0x68>)
  4004be:	4798      	blx	r3
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  4004c0:	2001      	movs	r0, #1
  4004c2:	4b0e      	ldr	r3, [pc, #56]	; (4004fc <sysclk_init+0x6c>)
  4004c4:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  4004c6:	2000      	movs	r0, #0
  4004c8:	4b0d      	ldr	r3, [pc, #52]	; (400500 <sysclk_init+0x70>)
  4004ca:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  4004cc:	4b0d      	ldr	r3, [pc, #52]	; (400504 <sysclk_init+0x74>)
  4004ce:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  4004d0:	4b0d      	ldr	r3, [pc, #52]	; (400508 <sysclk_init+0x78>)
  4004d2:	4798      	blx	r3
  4004d4:	4603      	mov	r3, r0
  4004d6:	4618      	mov	r0, r3
  4004d8:	4b03      	ldr	r3, [pc, #12]	; (4004e8 <sysclk_init+0x58>)
  4004da:	4798      	blx	r3

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
  4004dc:	370c      	adds	r7, #12
  4004de:	46bd      	mov	sp, r7
  4004e0:	bd90      	pop	{r4, r7, pc}
  4004e2:	bf00      	nop
  4004e4:	11e1a300 	.word	0x11e1a300
  4004e8:	00401edd 	.word	0x00401edd
  4004ec:	00400405 	.word	0x00400405
  4004f0:	00400335 	.word	0x00400335
  4004f4:	0040039d 	.word	0x0040039d
  4004f8:	00400439 	.word	0x00400439
  4004fc:	00401285 	.word	0x00401285
  400500:	004012fd 	.word	0x004012fd
  400504:	00401d75 	.word	0x00401d75
  400508:	0040047d 	.word	0x0040047d

0040050c <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  40050c:	b580      	push	{r7, lr}
  40050e:	b086      	sub	sp, #24
  400510:	af00      	add	r7, sp, #0
  400512:	60f8      	str	r0, [r7, #12]
  400514:	60b9      	str	r1, [r7, #8]
  400516:	607a      	str	r2, [r7, #4]
	int nChars = 0;
  400518:	2300      	movs	r3, #0
  40051a:	617b      	str	r3, [r7, #20]

	if (file != 0) {
  40051c:	68fb      	ldr	r3, [r7, #12]
  40051e:	2b00      	cmp	r3, #0
  400520:	d002      	beq.n	400528 <_read+0x1c>
		return -1;
  400522:	f04f 33ff 	mov.w	r3, #4294967295
  400526:	e014      	b.n	400552 <_read+0x46>
	}

	for (; len > 0; --len) {
  400528:	e00f      	b.n	40054a <_read+0x3e>
		ptr_get(stdio_base, ptr);
  40052a:	4b0c      	ldr	r3, [pc, #48]	; (40055c <_read+0x50>)
  40052c:	681b      	ldr	r3, [r3, #0]
  40052e:	4a0c      	ldr	r2, [pc, #48]	; (400560 <_read+0x54>)
  400530:	6812      	ldr	r2, [r2, #0]
  400532:	4610      	mov	r0, r2
  400534:	68b9      	ldr	r1, [r7, #8]
  400536:	4798      	blx	r3
		ptr++;
  400538:	68bb      	ldr	r3, [r7, #8]
  40053a:	3301      	adds	r3, #1
  40053c:	60bb      	str	r3, [r7, #8]
		nChars++;
  40053e:	697b      	ldr	r3, [r7, #20]
  400540:	3301      	adds	r3, #1
  400542:	617b      	str	r3, [r7, #20]

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
  400544:	687b      	ldr	r3, [r7, #4]
  400546:	3b01      	subs	r3, #1
  400548:	607b      	str	r3, [r7, #4]
  40054a:	687b      	ldr	r3, [r7, #4]
  40054c:	2b00      	cmp	r3, #0
  40054e:	dcec      	bgt.n	40052a <_read+0x1e>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
  400550:	697b      	ldr	r3, [r7, #20]
}
  400552:	4618      	mov	r0, r3
  400554:	3718      	adds	r7, #24
  400556:	46bd      	mov	sp, r7
  400558:	bd80      	pop	{r7, pc}
  40055a:	bf00      	nop
  40055c:	204009e8 	.word	0x204009e8
  400560:	204009f0 	.word	0x204009f0

00400564 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
  400564:	b580      	push	{r7, lr}
  400566:	b086      	sub	sp, #24
  400568:	af00      	add	r7, sp, #0
  40056a:	60f8      	str	r0, [r7, #12]
  40056c:	60b9      	str	r1, [r7, #8]
  40056e:	607a      	str	r2, [r7, #4]
	int nChars = 0;
  400570:	2300      	movs	r3, #0
  400572:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
  400574:	68fb      	ldr	r3, [r7, #12]
  400576:	2b01      	cmp	r3, #1
  400578:	d008      	beq.n	40058c <_write+0x28>
  40057a:	68fb      	ldr	r3, [r7, #12]
  40057c:	2b02      	cmp	r3, #2
  40057e:	d005      	beq.n	40058c <_write+0x28>
  400580:	68fb      	ldr	r3, [r7, #12]
  400582:	2b03      	cmp	r3, #3
  400584:	d002      	beq.n	40058c <_write+0x28>
		return -1;
  400586:	f04f 33ff 	mov.w	r3, #4294967295
  40058a:	e01a      	b.n	4005c2 <_write+0x5e>
	}

	for (; len != 0; --len) {
  40058c:	e015      	b.n	4005ba <_write+0x56>
		if (ptr_put(stdio_base, *ptr++) < 0) {
  40058e:	4b0f      	ldr	r3, [pc, #60]	; (4005cc <_write+0x68>)
  400590:	681a      	ldr	r2, [r3, #0]
  400592:	4b0f      	ldr	r3, [pc, #60]	; (4005d0 <_write+0x6c>)
  400594:	6818      	ldr	r0, [r3, #0]
  400596:	68bb      	ldr	r3, [r7, #8]
  400598:	1c59      	adds	r1, r3, #1
  40059a:	60b9      	str	r1, [r7, #8]
  40059c:	781b      	ldrb	r3, [r3, #0]
  40059e:	4619      	mov	r1, r3
  4005a0:	4790      	blx	r2
  4005a2:	4603      	mov	r3, r0
  4005a4:	2b00      	cmp	r3, #0
  4005a6:	da02      	bge.n	4005ae <_write+0x4a>
			return -1;
  4005a8:	f04f 33ff 	mov.w	r3, #4294967295
  4005ac:	e009      	b.n	4005c2 <_write+0x5e>
		}
		++nChars;
  4005ae:	697b      	ldr	r3, [r7, #20]
  4005b0:	3301      	adds	r3, #1
  4005b2:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
  4005b4:	687b      	ldr	r3, [r7, #4]
  4005b6:	3b01      	subs	r3, #1
  4005b8:	607b      	str	r3, [r7, #4]
  4005ba:	687b      	ldr	r3, [r7, #4]
  4005bc:	2b00      	cmp	r3, #0
  4005be:	d1e6      	bne.n	40058e <_write+0x2a>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
	}
	return nChars;
  4005c0:	697b      	ldr	r3, [r7, #20]
}
  4005c2:	4618      	mov	r0, r3
  4005c4:	3718      	adds	r7, #24
  4005c6:	46bd      	mov	sp, r7
  4005c8:	bd80      	pop	{r7, pc}
  4005ca:	bf00      	nop
  4005cc:	204009ec 	.word	0x204009ec
  4005d0:	204009f0 	.word	0x204009f0

004005d4 <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
  4005d4:	b580      	push	{r7, lr}
  4005d6:	b082      	sub	sp, #8
  4005d8:	af00      	add	r7, sp, #0
  4005da:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  4005dc:	6878      	ldr	r0, [r7, #4]
  4005de:	4b02      	ldr	r3, [pc, #8]	; (4005e8 <sysclk_enable_peripheral_clock+0x14>)
  4005e0:	4798      	blx	r3
}
  4005e2:	3708      	adds	r7, #8
  4005e4:	46bd      	mov	sp, r7
  4005e6:	bd80      	pop	{r7, pc}
  4005e8:	00401541 	.word	0x00401541

004005ec <ioport_init>:
 *
 * This function must be called before using any other functions in the IOPORT
 * service.
 */
static inline void ioport_init(void)
{
  4005ec:	b580      	push	{r7, lr}
  4005ee:	af00      	add	r7, sp, #0
}

__always_inline static void arch_ioport_init(void)
{
#ifdef ID_PIOA
	sysclk_enable_peripheral_clock(ID_PIOA);
  4005f0:	200a      	movs	r0, #10
  4005f2:	4b07      	ldr	r3, [pc, #28]	; (400610 <ioport_init+0x24>)
  4005f4:	4798      	blx	r3
#endif
#ifdef ID_PIOB
	sysclk_enable_peripheral_clock(ID_PIOB);
  4005f6:	200b      	movs	r0, #11
  4005f8:	4b05      	ldr	r3, [pc, #20]	; (400610 <ioport_init+0x24>)
  4005fa:	4798      	blx	r3
#endif
#ifdef ID_PIOC
	sysclk_enable_peripheral_clock(ID_PIOC);
  4005fc:	200c      	movs	r0, #12
  4005fe:	4b04      	ldr	r3, [pc, #16]	; (400610 <ioport_init+0x24>)
  400600:	4798      	blx	r3
#endif
#ifdef ID_PIOD
	sysclk_enable_peripheral_clock(ID_PIOD);
  400602:	2010      	movs	r0, #16
  400604:	4b02      	ldr	r3, [pc, #8]	; (400610 <ioport_init+0x24>)
  400606:	4798      	blx	r3
#endif
#ifdef ID_PIOE
	sysclk_enable_peripheral_clock(ID_PIOE);
  400608:	2011      	movs	r0, #17
  40060a:	4b01      	ldr	r3, [pc, #4]	; (400610 <ioport_init+0x24>)
  40060c:	4798      	blx	r3
	arch_ioport_init();
}
  40060e:	bd80      	pop	{r7, pc}
  400610:	004005d5 	.word	0x004005d5

00400614 <ioport_disable_pin>:
 *        IOPORT_CREATE_PIN().
 *
 * \param pin IOPORT pin to disable
 */
static inline void ioport_disable_pin(ioport_pin_t pin)
{
  400614:	b480      	push	{r7}
  400616:	b089      	sub	sp, #36	; 0x24
  400618:	af00      	add	r7, sp, #0
  40061a:	6078      	str	r0, [r7, #4]
  40061c:	687b      	ldr	r3, [r7, #4]
  40061e:	61fb      	str	r3, [r7, #28]
  400620:	69fb      	ldr	r3, [r7, #28]
  400622:	61bb      	str	r3, [r7, #24]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  400624:	69bb      	ldr	r3, [r7, #24]
  400626:	095a      	lsrs	r2, r3, #5
  400628:	69fb      	ldr	r3, [r7, #28]
  40062a:	617b      	str	r3, [r7, #20]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  40062c:	697b      	ldr	r3, [r7, #20]
  40062e:	f003 031f 	and.w	r3, r3, #31
  400632:	2101      	movs	r1, #1
  400634:	fa01 f303 	lsl.w	r3, r1, r3
  400638:	613a      	str	r2, [r7, #16]
  40063a:	60fb      	str	r3, [r7, #12]
  40063c:	693b      	ldr	r3, [r7, #16]
  40063e:	60bb      	str	r3, [r7, #8]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  400640:	68ba      	ldr	r2, [r7, #8]
  400642:	4b05      	ldr	r3, [pc, #20]	; (400658 <ioport_disable_pin+0x44>)
  400644:	4413      	add	r3, r2
  400646:	025b      	lsls	r3, r3, #9
  400648:	461a      	mov	r2, r3
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  40064a:	68fb      	ldr	r3, [r7, #12]
  40064c:	6053      	str	r3, [r2, #4]
	arch_ioport_disable_pin(pin);
}
  40064e:	3724      	adds	r7, #36	; 0x24
  400650:	46bd      	mov	sp, r7
  400652:	f85d 7b04 	ldr.w	r7, [sp], #4
  400656:	4770      	bx	lr
  400658:	00200707 	.word	0x00200707

0040065c <ioport_disable_port>:
 * \param port IOPORT port to disable
 * \param mask Pin mask of pins to disable
 */
static inline void ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
  40065c:	b480      	push	{r7}
  40065e:	b087      	sub	sp, #28
  400660:	af00      	add	r7, sp, #0
  400662:	6078      	str	r0, [r7, #4]
  400664:	6039      	str	r1, [r7, #0]
  400666:	687b      	ldr	r3, [r7, #4]
  400668:	617b      	str	r3, [r7, #20]
  40066a:	683b      	ldr	r3, [r7, #0]
  40066c:	613b      	str	r3, [r7, #16]
  40066e:	697b      	ldr	r3, [r7, #20]
  400670:	60fb      	str	r3, [r7, #12]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  400672:	68fa      	ldr	r2, [r7, #12]
  400674:	4b05      	ldr	r3, [pc, #20]	; (40068c <ioport_disable_port+0x30>)
  400676:	4413      	add	r3, r2
  400678:	025b      	lsls	r3, r3, #9
  40067a:	461a      	mov	r2, r3
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  40067c:	693b      	ldr	r3, [r7, #16]
  40067e:	6053      	str	r3, [r2, #4]
	arch_ioport_disable_port(port, mask);
}
  400680:	371c      	adds	r7, #28
  400682:	46bd      	mov	sp, r7
  400684:	f85d 7b04 	ldr.w	r7, [sp], #4
  400688:	4770      	bx	lr
  40068a:	bf00      	nop
  40068c:	00200707 	.word	0x00200707

00400690 <ioport_set_port_mode>:
 * \param mode Mode masks to configure for the specified pins (\ref
 * ioport_modes)
 */
static inline void ioport_set_port_mode(ioport_port_t port,
		ioport_port_mask_t mask, ioport_mode_t mode)
{
  400690:	b480      	push	{r7}
  400692:	b08b      	sub	sp, #44	; 0x2c
  400694:	af00      	add	r7, sp, #0
  400696:	60f8      	str	r0, [r7, #12]
  400698:	60b9      	str	r1, [r7, #8]
  40069a:	607a      	str	r2, [r7, #4]
  40069c:	68fb      	ldr	r3, [r7, #12]
  40069e:	627b      	str	r3, [r7, #36]	; 0x24
  4006a0:	68bb      	ldr	r3, [r7, #8]
  4006a2:	623b      	str	r3, [r7, #32]
  4006a4:	687b      	ldr	r3, [r7, #4]
  4006a6:	61fb      	str	r3, [r7, #28]
  4006a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4006aa:	61bb      	str	r3, [r7, #24]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  4006ac:	69ba      	ldr	r2, [r7, #24]
  4006ae:	4b37      	ldr	r3, [pc, #220]	; (40078c <ioport_set_port_mode+0xfc>)
  4006b0:	4413      	add	r3, r2
  4006b2:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_port_mode(ioport_port_t port,
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);
  4006b4:	617b      	str	r3, [r7, #20]

	if (mode & IOPORT_MODE_PULLUP) {
  4006b6:	69fb      	ldr	r3, [r7, #28]
  4006b8:	f003 0308 	and.w	r3, r3, #8
  4006bc:	2b00      	cmp	r3, #0
  4006be:	d003      	beq.n	4006c8 <ioport_set_port_mode+0x38>
		base->PIO_PUER = mask;
  4006c0:	697b      	ldr	r3, [r7, #20]
  4006c2:	6a3a      	ldr	r2, [r7, #32]
  4006c4:	665a      	str	r2, [r3, #100]	; 0x64
  4006c6:	e002      	b.n	4006ce <ioport_set_port_mode+0x3e>
	} else {
		base->PIO_PUDR = mask;
  4006c8:	697b      	ldr	r3, [r7, #20]
  4006ca:	6a3a      	ldr	r2, [r7, #32]
  4006cc:	661a      	str	r2, [r3, #96]	; 0x60
	}

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
  4006ce:	69fb      	ldr	r3, [r7, #28]
  4006d0:	f003 0310 	and.w	r3, r3, #16
  4006d4:	2b00      	cmp	r3, #0
  4006d6:	d004      	beq.n	4006e2 <ioport_set_port_mode+0x52>
		base->PIO_PPDER = mask;
  4006d8:	697b      	ldr	r3, [r7, #20]
  4006da:	6a3a      	ldr	r2, [r7, #32]
  4006dc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  4006e0:	e003      	b.n	4006ea <ioport_set_port_mode+0x5a>
	} else {
		base->PIO_PPDDR = mask;
  4006e2:	697b      	ldr	r3, [r7, #20]
  4006e4:	6a3a      	ldr	r2, [r7, #32]
  4006e6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	}
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
  4006ea:	69fb      	ldr	r3, [r7, #28]
  4006ec:	f003 0320 	and.w	r3, r3, #32
  4006f0:	2b00      	cmp	r3, #0
  4006f2:	d003      	beq.n	4006fc <ioport_set_port_mode+0x6c>
		base->PIO_MDER = mask;
  4006f4:	697b      	ldr	r3, [r7, #20]
  4006f6:	6a3a      	ldr	r2, [r7, #32]
  4006f8:	651a      	str	r2, [r3, #80]	; 0x50
  4006fa:	e002      	b.n	400702 <ioport_set_port_mode+0x72>
	} else {
		base->PIO_MDDR = mask;
  4006fc:	697b      	ldr	r3, [r7, #20]
  4006fe:	6a3a      	ldr	r2, [r7, #32]
  400700:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
  400702:	69fb      	ldr	r3, [r7, #28]
  400704:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
  400708:	2b00      	cmp	r3, #0
  40070a:	d003      	beq.n	400714 <ioport_set_port_mode+0x84>
		base->PIO_IFER = mask;
  40070c:	697b      	ldr	r3, [r7, #20]
  40070e:	6a3a      	ldr	r2, [r7, #32]
  400710:	621a      	str	r2, [r3, #32]
  400712:	e002      	b.n	40071a <ioport_set_port_mode+0x8a>
	} else {
		base->PIO_IFDR = mask;
  400714:	697b      	ldr	r3, [r7, #20]
  400716:	6a3a      	ldr	r2, [r7, #32]
  400718:	625a      	str	r2, [r3, #36]	; 0x24
	}

	if (mode & IOPORT_MODE_DEBOUNCE) {
  40071a:	69fb      	ldr	r3, [r7, #28]
  40071c:	f003 0380 	and.w	r3, r3, #128	; 0x80
  400720:	2b00      	cmp	r3, #0
  400722:	d004      	beq.n	40072e <ioport_set_port_mode+0x9e>
#if SAM3U || SAM3XA
		base->PIO_DIFSR = mask;
#else
		base->PIO_IFSCER = mask;
  400724:	697b      	ldr	r3, [r7, #20]
  400726:	6a3a      	ldr	r2, [r7, #32]
  400728:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  40072c:	e003      	b.n	400736 <ioport_set_port_mode+0xa6>
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  40072e:	697b      	ldr	r3, [r7, #20]
  400730:	6a3a      	ldr	r2, [r7, #32]
  400732:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABSR |= mask;
	} else {
		base->PIO_ABSR &= ~mask;
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
  400736:	69fb      	ldr	r3, [r7, #28]
  400738:	f003 0301 	and.w	r3, r3, #1
  40073c:	2b00      	cmp	r3, #0
  40073e:	d006      	beq.n	40074e <ioport_set_port_mode+0xbe>
		base->PIO_ABCDSR[0] |= mask;
  400740:	697b      	ldr	r3, [r7, #20]
  400742:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400744:	6a3b      	ldr	r3, [r7, #32]
  400746:	431a      	orrs	r2, r3
  400748:	697b      	ldr	r3, [r7, #20]
  40074a:	671a      	str	r2, [r3, #112]	; 0x70
  40074c:	e006      	b.n	40075c <ioport_set_port_mode+0xcc>
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  40074e:	697b      	ldr	r3, [r7, #20]
  400750:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400752:	6a3b      	ldr	r3, [r7, #32]
  400754:	43db      	mvns	r3, r3
  400756:	401a      	ands	r2, r3
  400758:	697b      	ldr	r3, [r7, #20]
  40075a:	671a      	str	r2, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
  40075c:	69fb      	ldr	r3, [r7, #28]
  40075e:	f003 0302 	and.w	r3, r3, #2
  400762:	2b00      	cmp	r3, #0
  400764:	d006      	beq.n	400774 <ioport_set_port_mode+0xe4>
		base->PIO_ABCDSR[1] |= mask;
  400766:	697b      	ldr	r3, [r7, #20]
  400768:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  40076a:	6a3b      	ldr	r3, [r7, #32]
  40076c:	431a      	orrs	r2, r3
  40076e:	697b      	ldr	r3, [r7, #20]
  400770:	675a      	str	r2, [r3, #116]	; 0x74
  400772:	e006      	b.n	400782 <ioport_set_port_mode+0xf2>
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  400774:	697b      	ldr	r3, [r7, #20]
  400776:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400778:	6a3b      	ldr	r3, [r7, #32]
  40077a:	43db      	mvns	r3, r3
  40077c:	401a      	ands	r2, r3
  40077e:	697b      	ldr	r3, [r7, #20]
  400780:	675a      	str	r2, [r3, #116]	; 0x74
	arch_ioport_set_port_mode(port, mask, mode);
}
  400782:	372c      	adds	r7, #44	; 0x2c
  400784:	46bd      	mov	sp, r7
  400786:	f85d 7b04 	ldr.w	r7, [sp], #4
  40078a:	4770      	bx	lr
  40078c:	00200707 	.word	0x00200707

00400790 <ioport_set_pin_mode>:
 *
 * \param pin IOPORT pin to configure
 * \param mode Mode masks to configure for the specified pin (\ref ioport_modes)
 */
static inline void ioport_set_pin_mode(ioport_pin_t pin, ioport_mode_t mode)
{
  400790:	b480      	push	{r7}
  400792:	b08d      	sub	sp, #52	; 0x34
  400794:	af00      	add	r7, sp, #0
  400796:	6078      	str	r0, [r7, #4]
  400798:	6039      	str	r1, [r7, #0]
  40079a:	687b      	ldr	r3, [r7, #4]
  40079c:	62fb      	str	r3, [r7, #44]	; 0x2c
  40079e:	683b      	ldr	r3, [r7, #0]
  4007a0:	62bb      	str	r3, [r7, #40]	; 0x28
  4007a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4007a4:	627b      	str	r3, [r7, #36]	; 0x24
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  4007a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4007a8:	095a      	lsrs	r2, r3, #5
  4007aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4007ac:	623b      	str	r3, [r7, #32]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  4007ae:	6a3b      	ldr	r3, [r7, #32]
  4007b0:	f003 031f 	and.w	r3, r3, #31
  4007b4:	2101      	movs	r1, #1
  4007b6:	fa01 f303 	lsl.w	r3, r1, r3
  4007ba:	61fa      	str	r2, [r7, #28]
  4007bc:	61bb      	str	r3, [r7, #24]
  4007be:	6abb      	ldr	r3, [r7, #40]	; 0x28
  4007c0:	617b      	str	r3, [r7, #20]
  4007c2:	69fb      	ldr	r3, [r7, #28]
  4007c4:	613b      	str	r3, [r7, #16]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  4007c6:	693a      	ldr	r2, [r7, #16]
  4007c8:	4b37      	ldr	r3, [pc, #220]	; (4008a8 <ioport_set_pin_mode+0x118>)
  4007ca:	4413      	add	r3, r2
  4007cc:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_port_mode(ioport_port_t port,
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);
  4007ce:	60fb      	str	r3, [r7, #12]

	if (mode & IOPORT_MODE_PULLUP) {
  4007d0:	697b      	ldr	r3, [r7, #20]
  4007d2:	f003 0308 	and.w	r3, r3, #8
  4007d6:	2b00      	cmp	r3, #0
  4007d8:	d003      	beq.n	4007e2 <ioport_set_pin_mode+0x52>
		base->PIO_PUER = mask;
  4007da:	68fb      	ldr	r3, [r7, #12]
  4007dc:	69ba      	ldr	r2, [r7, #24]
  4007de:	665a      	str	r2, [r3, #100]	; 0x64
  4007e0:	e002      	b.n	4007e8 <ioport_set_pin_mode+0x58>
	} else {
		base->PIO_PUDR = mask;
  4007e2:	68fb      	ldr	r3, [r7, #12]
  4007e4:	69ba      	ldr	r2, [r7, #24]
  4007e6:	661a      	str	r2, [r3, #96]	; 0x60
	}

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
  4007e8:	697b      	ldr	r3, [r7, #20]
  4007ea:	f003 0310 	and.w	r3, r3, #16
  4007ee:	2b00      	cmp	r3, #0
  4007f0:	d004      	beq.n	4007fc <ioport_set_pin_mode+0x6c>
		base->PIO_PPDER = mask;
  4007f2:	68fb      	ldr	r3, [r7, #12]
  4007f4:	69ba      	ldr	r2, [r7, #24]
  4007f6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  4007fa:	e003      	b.n	400804 <ioport_set_pin_mode+0x74>
	} else {
		base->PIO_PPDDR = mask;
  4007fc:	68fb      	ldr	r3, [r7, #12]
  4007fe:	69ba      	ldr	r2, [r7, #24]
  400800:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	}
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
  400804:	697b      	ldr	r3, [r7, #20]
  400806:	f003 0320 	and.w	r3, r3, #32
  40080a:	2b00      	cmp	r3, #0
  40080c:	d003      	beq.n	400816 <ioport_set_pin_mode+0x86>
		base->PIO_MDER = mask;
  40080e:	68fb      	ldr	r3, [r7, #12]
  400810:	69ba      	ldr	r2, [r7, #24]
  400812:	651a      	str	r2, [r3, #80]	; 0x50
  400814:	e002      	b.n	40081c <ioport_set_pin_mode+0x8c>
	} else {
		base->PIO_MDDR = mask;
  400816:	68fb      	ldr	r3, [r7, #12]
  400818:	69ba      	ldr	r2, [r7, #24]
  40081a:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
  40081c:	697b      	ldr	r3, [r7, #20]
  40081e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
  400822:	2b00      	cmp	r3, #0
  400824:	d003      	beq.n	40082e <ioport_set_pin_mode+0x9e>
		base->PIO_IFER = mask;
  400826:	68fb      	ldr	r3, [r7, #12]
  400828:	69ba      	ldr	r2, [r7, #24]
  40082a:	621a      	str	r2, [r3, #32]
  40082c:	e002      	b.n	400834 <ioport_set_pin_mode+0xa4>
	} else {
		base->PIO_IFDR = mask;
  40082e:	68fb      	ldr	r3, [r7, #12]
  400830:	69ba      	ldr	r2, [r7, #24]
  400832:	625a      	str	r2, [r3, #36]	; 0x24
	}

	if (mode & IOPORT_MODE_DEBOUNCE) {
  400834:	697b      	ldr	r3, [r7, #20]
  400836:	f003 0380 	and.w	r3, r3, #128	; 0x80
  40083a:	2b00      	cmp	r3, #0
  40083c:	d004      	beq.n	400848 <ioport_set_pin_mode+0xb8>
#if SAM3U || SAM3XA
		base->PIO_DIFSR = mask;
#else
		base->PIO_IFSCER = mask;
  40083e:	68fb      	ldr	r3, [r7, #12]
  400840:	69ba      	ldr	r2, [r7, #24]
  400842:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  400846:	e003      	b.n	400850 <ioport_set_pin_mode+0xc0>
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  400848:	68fb      	ldr	r3, [r7, #12]
  40084a:	69ba      	ldr	r2, [r7, #24]
  40084c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABSR |= mask;
	} else {
		base->PIO_ABSR &= ~mask;
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
  400850:	697b      	ldr	r3, [r7, #20]
  400852:	f003 0301 	and.w	r3, r3, #1
  400856:	2b00      	cmp	r3, #0
  400858:	d006      	beq.n	400868 <ioport_set_pin_mode+0xd8>
		base->PIO_ABCDSR[0] |= mask;
  40085a:	68fb      	ldr	r3, [r7, #12]
  40085c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  40085e:	69bb      	ldr	r3, [r7, #24]
  400860:	431a      	orrs	r2, r3
  400862:	68fb      	ldr	r3, [r7, #12]
  400864:	671a      	str	r2, [r3, #112]	; 0x70
  400866:	e006      	b.n	400876 <ioport_set_pin_mode+0xe6>
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  400868:	68fb      	ldr	r3, [r7, #12]
  40086a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  40086c:	69bb      	ldr	r3, [r7, #24]
  40086e:	43db      	mvns	r3, r3
  400870:	401a      	ands	r2, r3
  400872:	68fb      	ldr	r3, [r7, #12]
  400874:	671a      	str	r2, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
  400876:	697b      	ldr	r3, [r7, #20]
  400878:	f003 0302 	and.w	r3, r3, #2
  40087c:	2b00      	cmp	r3, #0
  40087e:	d006      	beq.n	40088e <ioport_set_pin_mode+0xfe>
		base->PIO_ABCDSR[1] |= mask;
  400880:	68fb      	ldr	r3, [r7, #12]
  400882:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400884:	69bb      	ldr	r3, [r7, #24]
  400886:	431a      	orrs	r2, r3
  400888:	68fb      	ldr	r3, [r7, #12]
  40088a:	675a      	str	r2, [r3, #116]	; 0x74
  40088c:	e006      	b.n	40089c <ioport_set_pin_mode+0x10c>
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  40088e:	68fb      	ldr	r3, [r7, #12]
  400890:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400892:	69bb      	ldr	r3, [r7, #24]
  400894:	43db      	mvns	r3, r3
  400896:	401a      	ands	r2, r3
  400898:	68fb      	ldr	r3, [r7, #12]
  40089a:	675a      	str	r2, [r3, #116]	; 0x74
	arch_ioport_set_pin_mode(pin, mode);
}
  40089c:	3734      	adds	r7, #52	; 0x34
  40089e:	46bd      	mov	sp, r7
  4008a0:	f85d 7b04 	ldr.w	r7, [sp], #4
  4008a4:	4770      	bx	lr
  4008a6:	bf00      	nop
  4008a8:	00200707 	.word	0x00200707

004008ac <ioport_set_pin_dir>:
 * \param pin IOPORT pin to configure
 * \param dir Direction to set for the specified pin (\ref ioport_direction)
 */
static inline void ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
  4008ac:	b480      	push	{r7}
  4008ae:	b08d      	sub	sp, #52	; 0x34
  4008b0:	af00      	add	r7, sp, #0
  4008b2:	6078      	str	r0, [r7, #4]
  4008b4:	460b      	mov	r3, r1
  4008b6:	70fb      	strb	r3, [r7, #3]
  4008b8:	687b      	ldr	r3, [r7, #4]
  4008ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  4008bc:	78fb      	ldrb	r3, [r7, #3]
  4008be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  4008c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4008c4:	627b      	str	r3, [r7, #36]	; 0x24
  4008c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4008c8:	623b      	str	r3, [r7, #32]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  4008ca:	6a3b      	ldr	r3, [r7, #32]
  4008cc:	095b      	lsrs	r3, r3, #5
  4008ce:	61fb      	str	r3, [r7, #28]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  4008d0:	69fa      	ldr	r2, [r7, #28]
  4008d2:	4b17      	ldr	r3, [pc, #92]	; (400930 <ioport_set_pin_dir+0x84>)
  4008d4:	4413      	add	r3, r2
  4008d6:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);
  4008d8:	61bb      	str	r3, [r7, #24]

	if (dir == IOPORT_DIR_OUTPUT) {
  4008da:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  4008de:	2b01      	cmp	r3, #1
  4008e0:	d109      	bne.n	4008f6 <ioport_set_pin_dir+0x4a>
  4008e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4008e4:	617b      	str	r3, [r7, #20]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  4008e6:	697b      	ldr	r3, [r7, #20]
  4008e8:	f003 031f 	and.w	r3, r3, #31
  4008ec:	2201      	movs	r2, #1
  4008ee:	409a      	lsls	r2, r3
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4008f0:	69bb      	ldr	r3, [r7, #24]
  4008f2:	611a      	str	r2, [r3, #16]
  4008f4:	e00c      	b.n	400910 <ioport_set_pin_dir+0x64>
	} else if (dir == IOPORT_DIR_INPUT) {
  4008f6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  4008fa:	2b00      	cmp	r3, #0
  4008fc:	d108      	bne.n	400910 <ioport_set_pin_dir+0x64>
  4008fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  400900:	613b      	str	r3, [r7, #16]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  400902:	693b      	ldr	r3, [r7, #16]
  400904:	f003 031f 	and.w	r3, r3, #31
  400908:	2201      	movs	r2, #1
  40090a:	409a      	lsls	r2, r3
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40090c:	69bb      	ldr	r3, [r7, #24]
  40090e:	615a      	str	r2, [r3, #20]
  400910:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  400912:	60fb      	str	r3, [r7, #12]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  400914:	68fb      	ldr	r3, [r7, #12]
  400916:	f003 031f 	and.w	r3, r3, #31
  40091a:	2201      	movs	r2, #1
  40091c:	409a      	lsls	r2, r3
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40091e:	69bb      	ldr	r3, [r7, #24]
  400920:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	arch_ioport_set_pin_dir(pin, dir);
}
  400924:	3734      	adds	r7, #52	; 0x34
  400926:	46bd      	mov	sp, r7
  400928:	f85d 7b04 	ldr.w	r7, [sp], #4
  40092c:	4770      	bx	lr
  40092e:	bf00      	nop
  400930:	00200707 	.word	0x00200707

00400934 <ioport_set_pin_level>:
 *
 * \param pin IOPORT pin to configure
 * \param level Logical value of the pin
 */
static inline void ioport_set_pin_level(ioport_pin_t pin, bool level)
{
  400934:	b480      	push	{r7}
  400936:	b08b      	sub	sp, #44	; 0x2c
  400938:	af00      	add	r7, sp, #0
  40093a:	6078      	str	r0, [r7, #4]
  40093c:	460b      	mov	r3, r1
  40093e:	70fb      	strb	r3, [r7, #3]
  400940:	687b      	ldr	r3, [r7, #4]
  400942:	627b      	str	r3, [r7, #36]	; 0x24
  400944:	78fb      	ldrb	r3, [r7, #3]
  400946:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  40094a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40094c:	61fb      	str	r3, [r7, #28]
  40094e:	69fb      	ldr	r3, [r7, #28]
  400950:	61bb      	str	r3, [r7, #24]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  400952:	69bb      	ldr	r3, [r7, #24]
  400954:	095b      	lsrs	r3, r3, #5
  400956:	617b      	str	r3, [r7, #20]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  400958:	697a      	ldr	r2, [r7, #20]
  40095a:	4b10      	ldr	r3, [pc, #64]	; (40099c <ioport_set_pin_level+0x68>)
  40095c:	4413      	add	r3, r2
  40095e:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);
  400960:	613b      	str	r3, [r7, #16]

	if (level) {
  400962:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
  400966:	2b00      	cmp	r3, #0
  400968:	d009      	beq.n	40097e <ioport_set_pin_level+0x4a>
  40096a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40096c:	60fb      	str	r3, [r7, #12]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  40096e:	68fb      	ldr	r3, [r7, #12]
  400970:	f003 031f 	and.w	r3, r3, #31
  400974:	2201      	movs	r2, #1
  400976:	409a      	lsls	r2, r3
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400978:	693b      	ldr	r3, [r7, #16]
  40097a:	631a      	str	r2, [r3, #48]	; 0x30
  40097c:	e008      	b.n	400990 <ioport_set_pin_level+0x5c>
  40097e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  400980:	60bb      	str	r3, [r7, #8]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  400982:	68bb      	ldr	r3, [r7, #8]
  400984:	f003 031f 	and.w	r3, r3, #31
  400988:	2201      	movs	r2, #1
  40098a:	409a      	lsls	r2, r3
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  40098c:	693b      	ldr	r3, [r7, #16]
  40098e:	635a      	str	r2, [r3, #52]	; 0x34
	arch_ioport_set_pin_level(pin, level);
}
  400990:	372c      	adds	r7, #44	; 0x2c
  400992:	46bd      	mov	sp, r7
  400994:	f85d 7b04 	ldr.w	r7, [sp], #4
  400998:	4770      	bx	lr
  40099a:	bf00      	nop
  40099c:	00200707 	.word	0x00200707

004009a0 <ioport_set_pin_sense_mode>:
 * \param pin IOPORT pin to configure
 * \param pin_sense Edge to sense for the pin (\ref ioport_sense)
 */
static inline void ioport_set_pin_sense_mode(ioport_pin_t pin,
		enum ioport_sense pin_sense)
{
  4009a0:	b480      	push	{r7}
  4009a2:	b08d      	sub	sp, #52	; 0x34
  4009a4:	af00      	add	r7, sp, #0
  4009a6:	6078      	str	r0, [r7, #4]
  4009a8:	460b      	mov	r3, r1
  4009aa:	70fb      	strb	r3, [r7, #3]
  4009ac:	687b      	ldr	r3, [r7, #4]
  4009ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  4009b0:	78fb      	ldrb	r3, [r7, #3]
  4009b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  4009b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4009b8:	627b      	str	r3, [r7, #36]	; 0x24
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  4009ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4009bc:	095a      	lsrs	r2, r3, #5
  4009be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4009c0:	623b      	str	r3, [r7, #32]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  4009c2:	6a3b      	ldr	r3, [r7, #32]
  4009c4:	f003 031f 	and.w	r3, r3, #31
  4009c8:	2101      	movs	r1, #1
  4009ca:	fa01 f303 	lsl.w	r3, r1, r3
  4009ce:	61fa      	str	r2, [r7, #28]
  4009d0:	61bb      	str	r3, [r7, #24]
  4009d2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  4009d6:	75fb      	strb	r3, [r7, #23]
  4009d8:	69fb      	ldr	r3, [r7, #28]
  4009da:	613b      	str	r3, [r7, #16]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  4009dc:	693a      	ldr	r2, [r7, #16]
  4009de:	4b22      	ldr	r3, [pc, #136]	; (400a68 <ioport_set_pin_sense_mode+0xc8>)
  4009e0:	4413      	add	r3, r2
  4009e2:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_port_sense_mode(ioport_port_t port,
		ioport_port_mask_t mask, enum ioport_sense pin_sense)
{
	Pio *base = arch_ioport_port_to_base(port);
  4009e4:	60fb      	str	r3, [r7, #12]
	 *       1       0         0    IOPORT_SENSE_FALLING
	 *       1       0         1    IOPORT_SENSE_RISING
	 *       1       1         0    IOPORT_SENSE_LEVEL_LOW
	 *       1       1         1    IOPORT_SENSE_LEVEL_HIGH
	 */
	switch(pin_sense) {
  4009e6:	7dfb      	ldrb	r3, [r7, #23]
  4009e8:	3b01      	subs	r3, #1
  4009ea:	2b03      	cmp	r3, #3
  4009ec:	d82e      	bhi.n	400a4c <ioport_set_pin_sense_mode+0xac>
  4009ee:	a201      	add	r2, pc, #4	; (adr r2, 4009f4 <ioport_set_pin_sense_mode+0x54>)
  4009f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4009f4:	00400a29 	.word	0x00400a29
  4009f8:	00400a3b 	.word	0x00400a3b
  4009fc:	00400a05 	.word	0x00400a05
  400a00:	00400a17 	.word	0x00400a17
	case IOPORT_SENSE_LEVEL_LOW:
		base->PIO_LSR = mask;
  400a04:	68fb      	ldr	r3, [r7, #12]
  400a06:	69ba      	ldr	r2, [r7, #24]
  400a08:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
		base->PIO_FELLSR = mask;
  400a0c:	68fb      	ldr	r3, [r7, #12]
  400a0e:	69ba      	ldr	r2, [r7, #24]
  400a10:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
  400a14:	e01f      	b.n	400a56 <ioport_set_pin_sense_mode+0xb6>
		break;
	case IOPORT_SENSE_LEVEL_HIGH:
		base->PIO_LSR = mask;
  400a16:	68fb      	ldr	r3, [r7, #12]
  400a18:	69ba      	ldr	r2, [r7, #24]
  400a1a:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
		base->PIO_REHLSR = mask;
  400a1e:	68fb      	ldr	r3, [r7, #12]
  400a20:	69ba      	ldr	r2, [r7, #24]
  400a22:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  400a26:	e016      	b.n	400a56 <ioport_set_pin_sense_mode+0xb6>
		break;
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
  400a28:	68fb      	ldr	r3, [r7, #12]
  400a2a:	69ba      	ldr	r2, [r7, #24]
  400a2c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_FELLSR = mask;
  400a30:	68fb      	ldr	r3, [r7, #12]
  400a32:	69ba      	ldr	r2, [r7, #24]
  400a34:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
  400a38:	e00d      	b.n	400a56 <ioport_set_pin_sense_mode+0xb6>
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  400a3a:	68fb      	ldr	r3, [r7, #12]
  400a3c:	69ba      	ldr	r2, [r7, #24]
  400a3e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  400a42:	68fb      	ldr	r3, [r7, #12]
  400a44:	69ba      	ldr	r2, [r7, #24]
  400a46:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  400a4a:	e004      	b.n	400a56 <ioport_set_pin_sense_mode+0xb6>
		break;
	default:
		base->PIO_AIMDR = mask;
  400a4c:	68fb      	ldr	r3, [r7, #12]
  400a4e:	69ba      	ldr	r2, [r7, #24]
  400a50:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
  400a54:	e003      	b.n	400a5e <ioport_set_pin_sense_mode+0xbe>
		return;
	}
	base->PIO_AIMER = mask;
  400a56:	68fb      	ldr	r3, [r7, #12]
  400a58:	69ba      	ldr	r2, [r7, #24]
  400a5a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	arch_ioport_set_pin_sense_mode(pin, pin_sense);
}
  400a5e:	3734      	adds	r7, #52	; 0x34
  400a60:	46bd      	mov	sp, r7
  400a62:	f85d 7b04 	ldr.w	r7, [sp], #4
  400a66:	4770      	bx	lr
  400a68:	00200707 	.word	0x00200707

00400a6c <board_init>:
	__ISB();
}
#endif

void board_init(void)
{
  400a6c:	b580      	push	{r7, lr}
  400a6e:	af00      	add	r7, sp, #0
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  400a70:	4b24      	ldr	r3, [pc, #144]	; (400b04 <board_init+0x98>)
  400a72:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  400a76:	605a      	str	r2, [r3, #4]
#endif

	/* Initialize IOPORTs */
	ioport_init();
  400a78:	4b23      	ldr	r3, [pc, #140]	; (400b08 <board_init+0x9c>)
  400a7a:	4798      	blx	r3

	/* Configure the pins connected to LED as output and set their
	 * default initial state to high (LED off).
	 */
	ioport_set_pin_dir(LED0_GPIO, IOPORT_DIR_OUTPUT);
  400a7c:	2050      	movs	r0, #80	; 0x50
  400a7e:	2101      	movs	r1, #1
  400a80:	4b22      	ldr	r3, [pc, #136]	; (400b0c <board_init+0xa0>)
  400a82:	4798      	blx	r3
	ioport_set_pin_level(LED0_GPIO, LED0_INACTIVE_LEVEL);
  400a84:	2050      	movs	r0, #80	; 0x50
  400a86:	2101      	movs	r1, #1
  400a88:	4b21      	ldr	r3, [pc, #132]	; (400b10 <board_init+0xa4>)
  400a8a:	4798      	blx	r3

	/* Configure Push Button pins */
	ioport_set_pin_input_mode(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS,
  400a8c:	200b      	movs	r0, #11
  400a8e:	2100      	movs	r1, #0
  400a90:	4b1e      	ldr	r3, [pc, #120]	; (400b0c <board_init+0xa0>)
  400a92:	4798      	blx	r3
  400a94:	200b      	movs	r0, #11
  400a96:	2188      	movs	r1, #136	; 0x88
  400a98:	4b1e      	ldr	r3, [pc, #120]	; (400b14 <board_init+0xa8>)
  400a9a:	4798      	blx	r3
  400a9c:	200b      	movs	r0, #11
  400a9e:	2102      	movs	r1, #2
  400aa0:	4b1d      	ldr	r3, [pc, #116]	; (400b18 <board_init+0xac>)
  400aa2:	4798      	blx	r3
//jsi 7feb16 following defines are from the DMA-UART example project for the SAM4E
#define PINS_UART0_PORT		IOPORT_PIOA
#define PINS_UART0			(PIO_PA9A_URXD0 | PIO_PA10A_UTXD0)
#define PINS_UART0_FLAGS	IOPORT_MODE_MUX_A

	ioport_set_port_peripheral_mode(PINS_UART0_PORT, PINS_UART0, PINS_UART0_FLAGS); //jsi 6feb16 was USART1
  400aa4:	2000      	movs	r0, #0
  400aa6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
  400aaa:	2200      	movs	r2, #0
  400aac:	4b1b      	ldr	r3, [pc, #108]	; (400b1c <board_init+0xb0>)
  400aae:	4798      	blx	r3
  400ab0:	2000      	movs	r0, #0
  400ab2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
  400ab6:	4b1a      	ldr	r3, [pc, #104]	; (400b20 <board_init+0xb4>)
  400ab8:	4798      	blx	r3

#endif

#define CONF_BOARD_TWIHS0 //jsi 7feb16
#ifdef CONF_BOARD_TWIHS0
	ioport_set_pin_peripheral_mode(TWIHS0_DATA_GPIO, TWIHS0_DATA_FLAGS);
  400aba:	2003      	movs	r0, #3
  400abc:	2100      	movs	r1, #0
  400abe:	4b15      	ldr	r3, [pc, #84]	; (400b14 <board_init+0xa8>)
  400ac0:	4798      	blx	r3
  400ac2:	2003      	movs	r0, #3
  400ac4:	4b17      	ldr	r3, [pc, #92]	; (400b24 <board_init+0xb8>)
  400ac6:	4798      	blx	r3
	ioport_set_pin_peripheral_mode(TWIHS0_CLK_GPIO, TWIHS0_CLK_FLAGS);
  400ac8:	2004      	movs	r0, #4
  400aca:	2100      	movs	r1, #0
  400acc:	4b11      	ldr	r3, [pc, #68]	; (400b14 <board_init+0xa8>)
  400ace:	4798      	blx	r3
  400ad0:	2004      	movs	r0, #4
  400ad2:	4b14      	ldr	r3, [pc, #80]	; (400b24 <board_init+0xb8>)
  400ad4:	4798      	blx	r3
#endif


#ifdef CONF_BOARD_USART_RXD
	/* Configure USART RXD pin */
	ioport_set_pin_peripheral_mode(USART0_RXD_GPIO, USART0_RXD_FLAGS);
  400ad6:	2020      	movs	r0, #32
  400ad8:	2102      	movs	r1, #2
  400ada:	4b0e      	ldr	r3, [pc, #56]	; (400b14 <board_init+0xa8>)
  400adc:	4798      	blx	r3
  400ade:	2020      	movs	r0, #32
  400ae0:	4b10      	ldr	r3, [pc, #64]	; (400b24 <board_init+0xb8>)
  400ae2:	4798      	blx	r3
#endif

#ifdef CONF_BOARD_USART_TXD
	/* Configure USART TXD pin */
	ioport_set_pin_peripheral_mode(USART0_TXD_GPIO, USART0_TXD_FLAGS);
  400ae4:	2021      	movs	r0, #33	; 0x21
  400ae6:	2102      	movs	r1, #2
  400ae8:	4b0a      	ldr	r3, [pc, #40]	; (400b14 <board_init+0xa8>)
  400aea:	4798      	blx	r3
  400aec:	2021      	movs	r0, #33	; 0x21
  400aee:	4b0d      	ldr	r3, [pc, #52]	; (400b24 <board_init+0xb8>)
  400af0:	4798      	blx	r3
	ioport_set_pin_peripheral_mode(PIN_USART0_CTS_IDX,PIN_USART0_CTS_FLAGS);
#endif

#ifdef CONF_BOARD_USART_RTS
	/* Configure USART RTS pin */
	ioport_set_pin_peripheral_mode(PIN_USART0_RTS_IDX, PIN_USART0_RTS_FLAGS);
  400af2:	2023      	movs	r0, #35	; 0x23
  400af4:	2102      	movs	r1, #2
  400af6:	4b07      	ldr	r3, [pc, #28]	; (400b14 <board_init+0xa8>)
  400af8:	4798      	blx	r3
  400afa:	2023      	movs	r0, #35	; 0x23
  400afc:	4b09      	ldr	r3, [pc, #36]	; (400b24 <board_init+0xb8>)
  400afe:	4798      	blx	r3
#endif

#ifdef CONF_BOARD_CONFIG_MPU_AT_INIT
	_setup_memory_region();
#endif
}
  400b00:	bd80      	pop	{r7, pc}
  400b02:	bf00      	nop
  400b04:	400e1850 	.word	0x400e1850
  400b08:	004005ed 	.word	0x004005ed
  400b0c:	004008ad 	.word	0x004008ad
  400b10:	00400935 	.word	0x00400935
  400b14:	00400791 	.word	0x00400791
  400b18:	004009a1 	.word	0x004009a1
  400b1c:	00400691 	.word	0x00400691
  400b20:	0040065d 	.word	0x0040065d
  400b24:	00400615 	.word	0x00400615

00400b28 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  400b28:	b480      	push	{r7}
  400b2a:	b083      	sub	sp, #12
  400b2c:	af00      	add	r7, sp, #0
  400b2e:	4603      	mov	r3, r0
  400b30:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  400b32:	4908      	ldr	r1, [pc, #32]	; (400b54 <NVIC_EnableIRQ+0x2c>)
  400b34:	f997 3007 	ldrsb.w	r3, [r7, #7]
  400b38:	095b      	lsrs	r3, r3, #5
  400b3a:	79fa      	ldrb	r2, [r7, #7]
  400b3c:	f002 021f 	and.w	r2, r2, #31
  400b40:	2001      	movs	r0, #1
  400b42:	fa00 f202 	lsl.w	r2, r0, r2
  400b46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  400b4a:	370c      	adds	r7, #12
  400b4c:	46bd      	mov	sp, r7
  400b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
  400b52:	4770      	bx	lr
  400b54:	e000e100 	.word	0xe000e100

00400b58 <NVIC_ClearPendingIRQ>:
    The function clears the pending bit of an external interrupt.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  400b58:	b480      	push	{r7}
  400b5a:	b083      	sub	sp, #12
  400b5c:	af00      	add	r7, sp, #0
  400b5e:	4603      	mov	r3, r0
  400b60:	71fb      	strb	r3, [r7, #7]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  400b62:	4909      	ldr	r1, [pc, #36]	; (400b88 <NVIC_ClearPendingIRQ+0x30>)
  400b64:	f997 3007 	ldrsb.w	r3, [r7, #7]
  400b68:	095b      	lsrs	r3, r3, #5
  400b6a:	79fa      	ldrb	r2, [r7, #7]
  400b6c:	f002 021f 	and.w	r2, r2, #31
  400b70:	2001      	movs	r0, #1
  400b72:	fa00 f202 	lsl.w	r2, r0, r2
  400b76:	3360      	adds	r3, #96	; 0x60
  400b78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  400b7c:	370c      	adds	r7, #12
  400b7e:	46bd      	mov	sp, r7
  400b80:	f85d 7b04 	ldr.w	r7, [sp], #4
  400b84:	4770      	bx	lr
  400b86:	bf00      	nop
  400b88:	e000e100 	.word	0xe000e100

00400b8c <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  400b8c:	b480      	push	{r7}
  400b8e:	b083      	sub	sp, #12
  400b90:	af00      	add	r7, sp, #0
  400b92:	4603      	mov	r3, r0
  400b94:	6039      	str	r1, [r7, #0]
  400b96:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
  400b98:	f997 3007 	ldrsb.w	r3, [r7, #7]
  400b9c:	2b00      	cmp	r3, #0
  400b9e:	da0b      	bge.n	400bb8 <NVIC_SetPriority+0x2c>
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  400ba0:	490d      	ldr	r1, [pc, #52]	; (400bd8 <NVIC_SetPriority+0x4c>)
  400ba2:	79fb      	ldrb	r3, [r7, #7]
  400ba4:	f003 030f 	and.w	r3, r3, #15
  400ba8:	3b04      	subs	r3, #4
  400baa:	683a      	ldr	r2, [r7, #0]
  400bac:	b2d2      	uxtb	r2, r2
  400bae:	0152      	lsls	r2, r2, #5
  400bb0:	b2d2      	uxtb	r2, r2
  400bb2:	440b      	add	r3, r1
  400bb4:	761a      	strb	r2, [r3, #24]
  400bb6:	e009      	b.n	400bcc <NVIC_SetPriority+0x40>
  else {
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  400bb8:	4908      	ldr	r1, [pc, #32]	; (400bdc <NVIC_SetPriority+0x50>)
  400bba:	f997 3007 	ldrsb.w	r3, [r7, #7]
  400bbe:	683a      	ldr	r2, [r7, #0]
  400bc0:	b2d2      	uxtb	r2, r2
  400bc2:	0152      	lsls	r2, r2, #5
  400bc4:	b2d2      	uxtb	r2, r2
  400bc6:	440b      	add	r3, r1
  400bc8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
  400bcc:	370c      	adds	r7, #12
  400bce:	46bd      	mov	sp, r7
  400bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
  400bd4:	4770      	bx	lr
  400bd6:	bf00      	nop
  400bd8:	e000ed00 	.word	0xe000ed00
  400bdc:	e000e100 	.word	0xe000e100

00400be0 <afec_ch_sanity_check>:
 * \param channel  AFEC channel number.
 *
 */
static inline void afec_ch_sanity_check(Afec *const afec,
		const enum afec_channel_num channel)
{
  400be0:	b480      	push	{r7}
  400be2:	b083      	sub	sp, #12
  400be4:	af00      	add	r7, sp, #0
  400be6:	6078      	str	r0, [r7, #4]
  400be8:	460b      	mov	r3, r1
  400bea:	807b      	strh	r3, [r7, #2]
	#endif
	} else if (afec == AFEC1) {
		Assert(channel < NB_CH_AFE1);
	}
	UNUSED(channel);
}
  400bec:	370c      	adds	r7, #12
  400bee:	46bd      	mov	sp, r7
  400bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
  400bf4:	4770      	bx	lr
  400bf6:	bf00      	nop

00400bf8 <afec_get_interrupt_status>:
 * \param afec  Base address of the AFEC.
 *
 * \return The interrupt status value.
 */
static inline uint32_t afec_get_interrupt_status(Afec *const afec)
{
  400bf8:	b480      	push	{r7}
  400bfa:	b083      	sub	sp, #12
  400bfc:	af00      	add	r7, sp, #0
  400bfe:	6078      	str	r0, [r7, #4]
	return afec->AFEC_ISR;
  400c00:	687b      	ldr	r3, [r7, #4]
  400c02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
  400c04:	4618      	mov	r0, r3
  400c06:	370c      	adds	r7, #12
  400c08:	46bd      	mov	sp, r7
  400c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
  400c0e:	4770      	bx	lr

00400c10 <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  400c10:	b480      	push	{r7}
  400c12:	b083      	sub	sp, #12
  400c14:	af00      	add	r7, sp, #0
  400c16:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  400c18:	687b      	ldr	r3, [r7, #4]
  400c1a:	2b07      	cmp	r3, #7
  400c1c:	d825      	bhi.n	400c6a <osc_get_rate+0x5a>
  400c1e:	a201      	add	r2, pc, #4	; (adr r2, 400c24 <osc_get_rate+0x14>)
  400c20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  400c24:	00400c45 	.word	0x00400c45
  400c28:	00400c4b 	.word	0x00400c4b
  400c2c:	00400c51 	.word	0x00400c51
  400c30:	00400c57 	.word	0x00400c57
  400c34:	00400c5b 	.word	0x00400c5b
  400c38:	00400c5f 	.word	0x00400c5f
  400c3c:	00400c63 	.word	0x00400c63
  400c40:	00400c67 	.word	0x00400c67
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  400c44:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  400c48:	e010      	b.n	400c6c <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  400c4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400c4e:	e00d      	b.n	400c6c <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  400c50:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400c54:	e00a      	b.n	400c6c <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  400c56:	4b08      	ldr	r3, [pc, #32]	; (400c78 <osc_get_rate+0x68>)
  400c58:	e008      	b.n	400c6c <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  400c5a:	4b08      	ldr	r3, [pc, #32]	; (400c7c <osc_get_rate+0x6c>)
  400c5c:	e006      	b.n	400c6c <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  400c5e:	4b08      	ldr	r3, [pc, #32]	; (400c80 <osc_get_rate+0x70>)
  400c60:	e004      	b.n	400c6c <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  400c62:	4b08      	ldr	r3, [pc, #32]	; (400c84 <osc_get_rate+0x74>)
  400c64:	e002      	b.n	400c6c <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  400c66:	4b06      	ldr	r3, [pc, #24]	; (400c80 <osc_get_rate+0x70>)
  400c68:	e000      	b.n	400c6c <osc_get_rate+0x5c>
	}

	return 0;
  400c6a:	2300      	movs	r3, #0
}
  400c6c:	4618      	mov	r0, r3
  400c6e:	370c      	adds	r7, #12
  400c70:	46bd      	mov	sp, r7
  400c72:	f85d 7b04 	ldr.w	r7, [sp], #4
  400c76:	4770      	bx	lr
  400c78:	003d0900 	.word	0x003d0900
  400c7c:	007a1200 	.word	0x007a1200
  400c80:	00b71b00 	.word	0x00b71b00
  400c84:	00f42400 	.word	0x00f42400

00400c88 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  400c88:	b580      	push	{r7, lr}
  400c8a:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  400c8c:	2006      	movs	r0, #6
  400c8e:	4b05      	ldr	r3, [pc, #20]	; (400ca4 <sysclk_get_main_hz+0x1c>)
  400c90:	4798      	blx	r3
  400c92:	4602      	mov	r2, r0
  400c94:	4613      	mov	r3, r2
  400c96:	009b      	lsls	r3, r3, #2
  400c98:	4413      	add	r3, r2
  400c9a:	009a      	lsls	r2, r3, #2
  400c9c:	4413      	add	r3, r2
  400c9e:	089b      	lsrs	r3, r3, #2
#endif
	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  400ca0:	4618      	mov	r0, r3
  400ca2:	bd80      	pop	{r7, pc}
  400ca4:	00400c11 	.word	0x00400c11

00400ca8 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
  400ca8:	b580      	push	{r7, lr}
  400caa:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  400cac:	4b02      	ldr	r3, [pc, #8]	; (400cb8 <sysclk_get_cpu_hz+0x10>)
  400cae:	4798      	blx	r3
  400cb0:	4603      	mov	r3, r0
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  400cb2:	4618      	mov	r0, r3
  400cb4:	bd80      	pop	{r7, pc}
  400cb6:	bf00      	nop
  400cb8:	00400c89 	.word	0x00400c89

00400cbc <afec_find_inst_num>:
 * \param afec  Base address of the AFEC
 *
 * \return   AFEC instance number
 */
static uint32_t afec_find_inst_num(Afec *const afec)
{
  400cbc:	b480      	push	{r7}
  400cbe:	b083      	sub	sp, #12
  400cc0:	af00      	add	r7, sp, #0
  400cc2:	6078      	str	r0, [r7, #4]
#if defined(AFEC1)
	if (afec == AFEC1) {
  400cc4:	687b      	ldr	r3, [r7, #4]
  400cc6:	4a09      	ldr	r2, [pc, #36]	; (400cec <afec_find_inst_num+0x30>)
  400cc8:	4293      	cmp	r3, r2
  400cca:	d101      	bne.n	400cd0 <afec_find_inst_num+0x14>
		return 1;
  400ccc:	2301      	movs	r3, #1
  400cce:	e006      	b.n	400cde <afec_find_inst_num+0x22>
	}
#endif
#if defined(AFEC0)
	if (afec == AFEC0) {
  400cd0:	687b      	ldr	r3, [r7, #4]
  400cd2:	4a07      	ldr	r2, [pc, #28]	; (400cf0 <afec_find_inst_num+0x34>)
  400cd4:	4293      	cmp	r3, r2
  400cd6:	d101      	bne.n	400cdc <afec_find_inst_num+0x20>
		return 0;
  400cd8:	2300      	movs	r3, #0
  400cda:	e000      	b.n	400cde <afec_find_inst_num+0x22>
	}
#endif
	return 0;
  400cdc:	2300      	movs	r3, #0
}
  400cde:	4618      	mov	r0, r3
  400ce0:	370c      	adds	r7, #12
  400ce2:	46bd      	mov	sp, r7
  400ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
  400ce8:	4770      	bx	lr
  400cea:	bf00      	nop
  400cec:	40064000 	.word	0x40064000
  400cf0:	4003c000 	.word	0x4003c000

00400cf4 <afec_set_config>:
 *
 * \param afec  Base address of the AFEC
 * \param config   Configuration for the AFEC
 */
static void afec_set_config(Afec *const afec, struct afec_config *config)
{
  400cf4:	b480      	push	{r7}
  400cf6:	b085      	sub	sp, #20
  400cf8:	af00      	add	r7, sp, #0
  400cfa:	6078      	str	r0, [r7, #4]
  400cfc:	6039      	str	r1, [r7, #0]
	uint32_t reg = 0;
  400cfe:	2300      	movs	r3, #0
  400d00:	60fb      	str	r3, [r7, #12]

	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  400d02:	683b      	ldr	r3, [r7, #0]
  400d04:	7cdb      	ldrb	r3, [r3, #19]
  400d06:	2b00      	cmp	r3, #0
  400d08:	d002      	beq.n	400d10 <afec_set_config+0x1c>
  400d0a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
  400d0e:	e000      	b.n	400d12 <afec_set_config+0x1e>
  400d10:	2200      	movs	r2, #0
		#if (SAMV71 || SAMV70 || SAME70 || SAMS70)
			AFEC_MR_PRESCAL((config->mck / config->afec_clock )- 1) |
  400d12:	683b      	ldr	r3, [r7, #0]
  400d14:	6859      	ldr	r1, [r3, #4]
  400d16:	683b      	ldr	r3, [r7, #0]
  400d18:	689b      	ldr	r3, [r3, #8]
  400d1a:	fbb1 f3f3 	udiv	r3, r1, r3
  400d1e:	3b01      	subs	r3, #1
  400d20:	021b      	lsls	r3, r3, #8
  400d22:	b29b      	uxth	r3, r3
 */
static void afec_set_config(Afec *const afec, struct afec_config *config)
{
	uint32_t reg = 0;

	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  400d24:	431a      	orrs	r2, r3
		#else
			(config->anach ? AFEC_MR_ANACH_ALLOWED : 0) |
			AFEC_MR_PRESCAL(config->mck / (2 * config->afec_clock) - 1) |
			(config->settling_time) |		
		#endif
			AFEC_MR_TRACKTIM(config->tracktim) |
  400d26:	683b      	ldr	r3, [r7, #0]
  400d28:	7c1b      	ldrb	r3, [r3, #16]
  400d2a:	061b      	lsls	r3, r3, #24
	uint32_t reg = 0;

	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
		#if (SAMV71 || SAMV70 || SAME70 || SAMS70)
			AFEC_MR_PRESCAL((config->mck / config->afec_clock )- 1) |
			AFEC_MR_ONE |
  400d2c:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
  400d30:	431a      	orrs	r2, r3
			(config->anach ? AFEC_MR_ANACH_ALLOWED : 0) |
			AFEC_MR_PRESCAL(config->mck / (2 * config->afec_clock) - 1) |
			(config->settling_time) |		
		#endif
			AFEC_MR_TRACKTIM(config->tracktim) |
			AFEC_MR_TRANSFER(config->transfer) |
  400d32:	683b      	ldr	r3, [r7, #0]
  400d34:	7c5b      	ldrb	r3, [r3, #17]
  400d36:	071b      	lsls	r3, r3, #28
		#else
			(config->anach ? AFEC_MR_ANACH_ALLOWED : 0) |
			AFEC_MR_PRESCAL(config->mck / (2 * config->afec_clock) - 1) |
			(config->settling_time) |		
		#endif
			AFEC_MR_TRACKTIM(config->tracktim) |
  400d38:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
  400d3c:	431a      	orrs	r2, r3
			AFEC_MR_TRANSFER(config->transfer) |
			(config->startup_time);
  400d3e:	683b      	ldr	r3, [r7, #0]
  400d40:	68db      	ldr	r3, [r3, #12]
			(config->anach ? AFEC_MR_ANACH_ALLOWED : 0) |
			AFEC_MR_PRESCAL(config->mck / (2 * config->afec_clock) - 1) |
			(config->settling_time) |		
		#endif
			AFEC_MR_TRACKTIM(config->tracktim) |
			AFEC_MR_TRANSFER(config->transfer) |
  400d42:	4313      	orrs	r3, r2
 */
static void afec_set_config(Afec *const afec, struct afec_config *config)
{
	uint32_t reg = 0;

	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  400d44:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
  400d48:	60fb      	str	r3, [r7, #12]
		#endif
			AFEC_MR_TRACKTIM(config->tracktim) |
			AFEC_MR_TRANSFER(config->transfer) |
			(config->startup_time);

	afec->AFEC_MR = reg;
  400d4a:	687b      	ldr	r3, [r7, #4]
  400d4c:	68fa      	ldr	r2, [r7, #12]
  400d4e:	605a      	str	r2, [r3, #4]

	afec->AFEC_EMR = (config->tag ? AFEC_EMR_TAG : 0) |
  400d50:	683b      	ldr	r3, [r7, #0]
  400d52:	7d1b      	ldrb	r3, [r3, #20]
  400d54:	2b00      	cmp	r3, #0
  400d56:	d002      	beq.n	400d5e <afec_set_config+0x6a>
  400d58:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
  400d5c:	e000      	b.n	400d60 <afec_set_config+0x6c>
  400d5e:	2200      	movs	r2, #0
			(config->resolution) |
  400d60:	683b      	ldr	r3, [r7, #0]
  400d62:	681b      	ldr	r3, [r3, #0]
			AFEC_MR_TRANSFER(config->transfer) |
			(config->startup_time);

	afec->AFEC_MR = reg;

	afec->AFEC_EMR = (config->tag ? AFEC_EMR_TAG : 0) |
  400d64:	431a      	orrs	r2, r3
			(config->resolution) |
			(config->stm ? AFEC_EMR_STM : 0);
  400d66:	683b      	ldr	r3, [r7, #0]
  400d68:	7d5b      	ldrb	r3, [r3, #21]
  400d6a:	2b00      	cmp	r3, #0
  400d6c:	d002      	beq.n	400d74 <afec_set_config+0x80>
  400d6e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
  400d72:	e000      	b.n	400d76 <afec_set_config+0x82>
  400d74:	2300      	movs	r3, #0
			(config->startup_time);

	afec->AFEC_MR = reg;

	afec->AFEC_EMR = (config->tag ? AFEC_EMR_TAG : 0) |
			(config->resolution) |
  400d76:	431a      	orrs	r2, r3
			AFEC_MR_TRANSFER(config->transfer) |
			(config->startup_time);

	afec->AFEC_MR = reg;

	afec->AFEC_EMR = (config->tag ? AFEC_EMR_TAG : 0) |
  400d78:	687b      	ldr	r3, [r7, #4]
  400d7a:	609a      	str	r2, [r3, #8]
			(config->resolution) |
			(config->stm ? AFEC_EMR_STM : 0);
  #if (SAMV71 || SAMV70 || SAME70 || SAMS70)
	afec->AFEC_ACR = AFEC_ACR_IBCTL(config->ibctl) | AFEC_ACR_PGA0EN | AFEC_ACR_PGA1EN;
  400d7c:	683b      	ldr	r3, [r7, #0]
  400d7e:	7d9b      	ldrb	r3, [r3, #22]
  400d80:	021b      	lsls	r3, r3, #8
  400d82:	f403 7340 	and.w	r3, r3, #768	; 0x300
  400d86:	f043 020c 	orr.w	r2, r3, #12
  400d8a:	687b      	ldr	r3, [r7, #4]
  400d8c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  #else
    afec->AFEC_ACR = AFEC_ACR_IBCTL(config->ibctl);
  #endif
}
  400d90:	3714      	adds	r7, #20
  400d92:	46bd      	mov	sp, r7
  400d94:	f85d 7b04 	ldr.w	r7, [sp], #4
  400d98:	4770      	bx	lr
  400d9a:	bf00      	nop

00400d9c <afec_ch_set_config>:
 * \param channel The channel number
 * \param config   Configuration for the AFEC channel
 */
void afec_ch_set_config(Afec *const afec, const enum afec_channel_num channel,
		struct afec_ch_config *config)
{
  400d9c:	b580      	push	{r7, lr}
  400d9e:	b086      	sub	sp, #24
  400da0:	af00      	add	r7, sp, #0
  400da2:	60f8      	str	r0, [r7, #12]
  400da4:	460b      	mov	r3, r1
  400da6:	607a      	str	r2, [r7, #4]
  400da8:	817b      	strh	r3, [r7, #10]
	afec_ch_sanity_check(afec, channel);
  400daa:	897b      	ldrh	r3, [r7, #10]
  400dac:	68f8      	ldr	r0, [r7, #12]
  400dae:	4619      	mov	r1, r3
  400db0:	4b1d      	ldr	r3, [pc, #116]	; (400e28 <afec_ch_set_config+0x8c>)
  400db2:	4798      	blx	r3
	uint32_t reg = 0;
  400db4:	2300      	movs	r3, #0
  400db6:	617b      	str	r3, [r7, #20]

	reg = afec->AFEC_DIFFR;
  400db8:	68fb      	ldr	r3, [r7, #12]
  400dba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
  400dbc:	617b      	str	r3, [r7, #20]
	reg &= ~(0x1u << channel);
  400dbe:	897b      	ldrh	r3, [r7, #10]
  400dc0:	2201      	movs	r2, #1
  400dc2:	fa02 f303 	lsl.w	r3, r2, r3
  400dc6:	43db      	mvns	r3, r3
  400dc8:	697a      	ldr	r2, [r7, #20]
  400dca:	4013      	ands	r3, r2
  400dcc:	617b      	str	r3, [r7, #20]
	reg |= (config->diff) ? (0x1u << channel) : 0;
  400dce:	687b      	ldr	r3, [r7, #4]
  400dd0:	781b      	ldrb	r3, [r3, #0]
  400dd2:	2b00      	cmp	r3, #0
  400dd4:	d004      	beq.n	400de0 <afec_ch_set_config+0x44>
  400dd6:	897b      	ldrh	r3, [r7, #10]
  400dd8:	2201      	movs	r2, #1
  400dda:	fa02 f303 	lsl.w	r3, r2, r3
  400dde:	e000      	b.n	400de2 <afec_ch_set_config+0x46>
  400de0:	2300      	movs	r3, #0
  400de2:	697a      	ldr	r2, [r7, #20]
  400de4:	4313      	orrs	r3, r2
  400de6:	617b      	str	r3, [r7, #20]
	afec->AFEC_DIFFR = reg;
  400de8:	68fb      	ldr	r3, [r7, #12]
  400dea:	697a      	ldr	r2, [r7, #20]
  400dec:	661a      	str	r2, [r3, #96]	; 0x60

	reg = afec->AFEC_CGR;
  400dee:	68fb      	ldr	r3, [r7, #12]
  400df0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
  400df2:	617b      	str	r3, [r7, #20]
	reg &= ~(0x03u << (2 * channel));
  400df4:	897b      	ldrh	r3, [r7, #10]
  400df6:	005b      	lsls	r3, r3, #1
  400df8:	2203      	movs	r2, #3
  400dfa:	fa02 f303 	lsl.w	r3, r2, r3
  400dfe:	43db      	mvns	r3, r3
  400e00:	697a      	ldr	r2, [r7, #20]
  400e02:	4013      	ands	r3, r2
  400e04:	617b      	str	r3, [r7, #20]
	reg |= (config->gain) << (2 * channel);
  400e06:	687b      	ldr	r3, [r7, #4]
  400e08:	785b      	ldrb	r3, [r3, #1]
  400e0a:	461a      	mov	r2, r3
  400e0c:	897b      	ldrh	r3, [r7, #10]
  400e0e:	005b      	lsls	r3, r3, #1
  400e10:	fa02 f303 	lsl.w	r3, r2, r3
  400e14:	461a      	mov	r2, r3
  400e16:	697b      	ldr	r3, [r7, #20]
  400e18:	4313      	orrs	r3, r2
  400e1a:	617b      	str	r3, [r7, #20]
	afec->AFEC_CGR = reg;
  400e1c:	68fb      	ldr	r3, [r7, #12]
  400e1e:	697a      	ldr	r2, [r7, #20]
  400e20:	655a      	str	r2, [r3, #84]	; 0x54
}
  400e22:	3718      	adds	r7, #24
  400e24:	46bd      	mov	sp, r7
  400e26:	bd80      	pop	{r7, pc}
  400e28:	00400be1 	.word	0x00400be1

00400e2c <afec_get_config_defaults>:
 * - AFE Bias Current Control value is 1
 *
 * \param cfg Pointer to configuration structure to be initiated.
 */
void afec_get_config_defaults(struct afec_config *const cfg)
{
  400e2c:	b580      	push	{r7, lr}
  400e2e:	b082      	sub	sp, #8
  400e30:	af00      	add	r7, sp, #0
  400e32:	6078      	str	r0, [r7, #4]
	/* Sanity check argument. */
	Assert(cfg);

	cfg->resolution = AFEC_12_BITS;
  400e34:	687b      	ldr	r3, [r7, #4]
  400e36:	2200      	movs	r2, #0
  400e38:	601a      	str	r2, [r3, #0]
	cfg->mck = sysclk_get_cpu_hz();
  400e3a:	4b12      	ldr	r3, [pc, #72]	; (400e84 <afec_get_config_defaults+0x58>)
  400e3c:	4798      	blx	r3
  400e3e:	4602      	mov	r2, r0
  400e40:	687b      	ldr	r3, [r7, #4]
  400e42:	605a      	str	r2, [r3, #4]
		cfg->afec_clock = 6000000UL;
  400e44:	687b      	ldr	r3, [r7, #4]
  400e46:	4a10      	ldr	r2, [pc, #64]	; (400e88 <afec_get_config_defaults+0x5c>)
  400e48:	609a      	str	r2, [r3, #8]
		cfg->startup_time = AFEC_STARTUP_TIME_4;
  400e4a:	687b      	ldr	r3, [r7, #4]
  400e4c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
  400e50:	60da      	str	r2, [r3, #12]
	#if !(SAMV71 || SAMV70 || SAME70 || SAMS70)
		cfg->settling_time = AFEC_SETTLING_TIME_0;
	#endif	
		cfg->tracktim = 2;
  400e52:	687b      	ldr	r3, [r7, #4]
  400e54:	2202      	movs	r2, #2
  400e56:	741a      	strb	r2, [r3, #16]
		cfg->transfer = 1;
  400e58:	687b      	ldr	r3, [r7, #4]
  400e5a:	2201      	movs	r2, #1
  400e5c:	745a      	strb	r2, [r3, #17]
		cfg->anach = true;
  400e5e:	687b      	ldr	r3, [r7, #4]
  400e60:	2201      	movs	r2, #1
  400e62:	749a      	strb	r2, [r3, #18]
		cfg->useq = false;
  400e64:	687b      	ldr	r3, [r7, #4]
  400e66:	2200      	movs	r2, #0
  400e68:	74da      	strb	r2, [r3, #19]
		cfg->tag = true;
  400e6a:	687b      	ldr	r3, [r7, #4]
  400e6c:	2201      	movs	r2, #1
  400e6e:	751a      	strb	r2, [r3, #20]
		cfg->stm = true;
  400e70:	687b      	ldr	r3, [r7, #4]
  400e72:	2201      	movs	r2, #1
  400e74:	755a      	strb	r2, [r3, #21]
		cfg->ibctl = 1;
  400e76:	687b      	ldr	r3, [r7, #4]
  400e78:	2201      	movs	r2, #1
  400e7a:	759a      	strb	r2, [r3, #22]
}
  400e7c:	3708      	adds	r7, #8
  400e7e:	46bd      	mov	sp, r7
  400e80:	bd80      	pop	{r7, pc}
  400e82:	bf00      	nop
  400e84:	00400ca9 	.word	0x00400ca9
  400e88:	005b8d80 	.word	0x005b8d80

00400e8c <afec_ch_get_config_defaults>:
 * - Gain value is 1
 *
 * \param cfg Pointer to channel configuration structure to be initiated.
 */
void afec_ch_get_config_defaults(struct afec_ch_config *const cfg)
{
  400e8c:	b480      	push	{r7}
  400e8e:	b083      	sub	sp, #12
  400e90:	af00      	add	r7, sp, #0
  400e92:	6078      	str	r0, [r7, #4]
	/*Sanity check argument. */
	Assert(cfg);

	cfg->diff = false;
  400e94:	687b      	ldr	r3, [r7, #4]
  400e96:	2200      	movs	r2, #0
  400e98:	701a      	strb	r2, [r3, #0]
   	cfg->gain = AFEC_GAINVALUE_1;
  400e9a:	687b      	ldr	r3, [r7, #4]
  400e9c:	2201      	movs	r2, #1
  400e9e:	705a      	strb	r2, [r3, #1]

}
  400ea0:	370c      	adds	r7, #12
  400ea2:	46bd      	mov	sp, r7
  400ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
  400ea8:	4770      	bx	lr
  400eaa:	bf00      	nop

00400eac <afec_init>:
 *
 * \retval STATUS_OK  Initialization is finished.
 * \retval STATUS_ERR_BUSY  Initialization failed.
 */
enum status_code afec_init(Afec *const afec, struct afec_config *config)
{
  400eac:	b580      	push	{r7, lr}
  400eae:	b084      	sub	sp, #16
  400eb0:	af00      	add	r7, sp, #0
  400eb2:	6078      	str	r0, [r7, #4]
  400eb4:	6039      	str	r1, [r7, #0]
	Assert(afec);
	Assert(config);

	if ((afec_get_interrupt_status(afec) & AFEC_ISR_DRDY) == AFEC_ISR_DRDY) {
  400eb6:	6878      	ldr	r0, [r7, #4]
  400eb8:	4b17      	ldr	r3, [pc, #92]	; (400f18 <afec_init+0x6c>)
  400eba:	4798      	blx	r3
  400ebc:	4603      	mov	r3, r0
  400ebe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  400ec2:	2b00      	cmp	r3, #0
  400ec4:	d001      	beq.n	400eca <afec_init+0x1e>
		return STATUS_ERR_BUSY;
  400ec6:	2319      	movs	r3, #25
  400ec8:	e021      	b.n	400f0e <afec_init+0x62>
	}

	/* Reset and configure the AFEC module */
	afec->AFEC_CR = AFEC_CR_SWRST;
  400eca:	687b      	ldr	r3, [r7, #4]
  400ecc:	2201      	movs	r2, #1
  400ece:	601a      	str	r2, [r3, #0]
	afec_set_config(afec, config);
  400ed0:	6878      	ldr	r0, [r7, #4]
  400ed2:	6839      	ldr	r1, [r7, #0]
  400ed4:	4b11      	ldr	r3, [pc, #68]	; (400f1c <afec_init+0x70>)
  400ed6:	4798      	blx	r3

	uint32_t i, j;
	for (i = 0; i < NUM_OF_AFEC; i++) {
  400ed8:	2300      	movs	r3, #0
  400eda:	60fb      	str	r3, [r7, #12]
  400edc:	e013      	b.n	400f06 <afec_init+0x5a>
		for (j = 0; j < _AFEC_NUM_OF_INTERRUPT_SOURCE; j++) {
  400ede:	2300      	movs	r3, #0
  400ee0:	60bb      	str	r3, [r7, #8]
  400ee2:	e00a      	b.n	400efa <afec_init+0x4e>
			afec_callback_pointer[i][j] = 0;
  400ee4:	490e      	ldr	r1, [pc, #56]	; (400f20 <afec_init+0x74>)
  400ee6:	68fb      	ldr	r3, [r7, #12]
  400ee8:	011a      	lsls	r2, r3, #4
  400eea:	68bb      	ldr	r3, [r7, #8]
  400eec:	4413      	add	r3, r2
  400eee:	2200      	movs	r2, #0
  400ef0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	afec->AFEC_CR = AFEC_CR_SWRST;
	afec_set_config(afec, config);

	uint32_t i, j;
	for (i = 0; i < NUM_OF_AFEC; i++) {
		for (j = 0; j < _AFEC_NUM_OF_INTERRUPT_SOURCE; j++) {
  400ef4:	68bb      	ldr	r3, [r7, #8]
  400ef6:	3301      	adds	r3, #1
  400ef8:	60bb      	str	r3, [r7, #8]
  400efa:	68bb      	ldr	r3, [r7, #8]
  400efc:	2b0f      	cmp	r3, #15
  400efe:	d9f1      	bls.n	400ee4 <afec_init+0x38>
	/* Reset and configure the AFEC module */
	afec->AFEC_CR = AFEC_CR_SWRST;
	afec_set_config(afec, config);

	uint32_t i, j;
	for (i = 0; i < NUM_OF_AFEC; i++) {
  400f00:	68fb      	ldr	r3, [r7, #12]
  400f02:	3301      	adds	r3, #1
  400f04:	60fb      	str	r3, [r7, #12]
  400f06:	68fb      	ldr	r3, [r7, #12]
  400f08:	2b01      	cmp	r3, #1
  400f0a:	d9e8      	bls.n	400ede <afec_init+0x32>
		for (j = 0; j < _AFEC_NUM_OF_INTERRUPT_SOURCE; j++) {
			afec_callback_pointer[i][j] = 0;
		}
	}

	return STATUS_OK;
  400f0c:	2300      	movs	r3, #0
  400f0e:	b25b      	sxtb	r3, r3
}
  400f10:	4618      	mov	r0, r3
  400f12:	3710      	adds	r7, #16
  400f14:	46bd      	mov	sp, r7
  400f16:	bd80      	pop	{r7, pc}
  400f18:	00400bf9 	.word	0x00400bf9
  400f1c:	00400cf5 	.word	0x00400cf5
  400f20:	204009f4 	.word	0x204009f4

00400f24 <afec_set_callback>:
 * \param callback  Callback function pointer
 * \param irq_level Interrupt level
 */
void afec_set_callback(Afec *const afec, enum afec_interrupt_source source,
		afec_callback_t callback, uint8_t irq_level)
{
  400f24:	b580      	push	{r7, lr}
  400f26:	b086      	sub	sp, #24
  400f28:	af00      	add	r7, sp, #0
  400f2a:	60f8      	str	r0, [r7, #12]
  400f2c:	60b9      	str	r1, [r7, #8]
  400f2e:	607a      	str	r2, [r7, #4]
  400f30:	70fb      	strb	r3, [r7, #3]
	Assert(afec);
	Assert(callback);

	uint32_t i = afec_find_inst_num(afec);
  400f32:	68f8      	ldr	r0, [r7, #12]
  400f34:	4b17      	ldr	r3, [pc, #92]	; (400f94 <afec_set_callback+0x70>)
  400f36:	4798      	blx	r3
  400f38:	6178      	str	r0, [r7, #20]
	afec_callback_pointer[i][source] = callback;
  400f3a:	4917      	ldr	r1, [pc, #92]	; (400f98 <afec_set_callback+0x74>)
  400f3c:	697b      	ldr	r3, [r7, #20]
  400f3e:	011a      	lsls	r2, r3, #4
  400f40:	68bb      	ldr	r3, [r7, #8]
  400f42:	4413      	add	r3, r2
  400f44:	687a      	ldr	r2, [r7, #4]
  400f46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	if (!i) {
  400f4a:	697b      	ldr	r3, [r7, #20]
  400f4c:	2b00      	cmp	r3, #0
  400f4e:	d10b      	bne.n	400f68 <afec_set_callback+0x44>
		irq_register_handler(AFEC0_IRQn, irq_level);
  400f50:	201d      	movs	r0, #29
  400f52:	4b12      	ldr	r3, [pc, #72]	; (400f9c <afec_set_callback+0x78>)
  400f54:	4798      	blx	r3
  400f56:	78fb      	ldrb	r3, [r7, #3]
  400f58:	201d      	movs	r0, #29
  400f5a:	4619      	mov	r1, r3
  400f5c:	4b10      	ldr	r3, [pc, #64]	; (400fa0 <afec_set_callback+0x7c>)
  400f5e:	4798      	blx	r3
  400f60:	201d      	movs	r0, #29
  400f62:	4b10      	ldr	r3, [pc, #64]	; (400fa4 <afec_set_callback+0x80>)
  400f64:	4798      	blx	r3
  400f66:	e00d      	b.n	400f84 <afec_set_callback+0x60>
	} else if (i == 1) {
  400f68:	697b      	ldr	r3, [r7, #20]
  400f6a:	2b01      	cmp	r3, #1
  400f6c:	d10a      	bne.n	400f84 <afec_set_callback+0x60>
		irq_register_handler(AFEC1_IRQn, irq_level);
  400f6e:	2028      	movs	r0, #40	; 0x28
  400f70:	4b0a      	ldr	r3, [pc, #40]	; (400f9c <afec_set_callback+0x78>)
  400f72:	4798      	blx	r3
  400f74:	78fb      	ldrb	r3, [r7, #3]
  400f76:	2028      	movs	r0, #40	; 0x28
  400f78:	4619      	mov	r1, r3
  400f7a:	4b09      	ldr	r3, [pc, #36]	; (400fa0 <afec_set_callback+0x7c>)
  400f7c:	4798      	blx	r3
  400f7e:	2028      	movs	r0, #40	; 0x28
  400f80:	4b08      	ldr	r3, [pc, #32]	; (400fa4 <afec_set_callback+0x80>)
  400f82:	4798      	blx	r3
	}
	/* Enable the specified interrupt source */
	afec_enable_interrupt(afec, source);
  400f84:	68f8      	ldr	r0, [r7, #12]
  400f86:	68b9      	ldr	r1, [r7, #8]
  400f88:	4b07      	ldr	r3, [pc, #28]	; (400fa8 <afec_set_callback+0x84>)
  400f8a:	4798      	blx	r3
}
  400f8c:	3718      	adds	r7, #24
  400f8e:	46bd      	mov	sp, r7
  400f90:	bd80      	pop	{r7, pc}
  400f92:	bf00      	nop
  400f94:	00400cbd 	.word	0x00400cbd
  400f98:	204009f4 	.word	0x204009f4
  400f9c:	00400b59 	.word	0x00400b59
  400fa0:	00400b8d 	.word	0x00400b8d
  400fa4:	00400b29 	.word	0x00400b29
  400fa8:	00400fad 	.word	0x00400fad

00400fac <afec_enable_interrupt>:
 * \param afec  Base address of the AFEC.
 * \param interrupt_source Interrupts to be enabled.
 */
void afec_enable_interrupt(Afec *const afec,
		enum afec_interrupt_source interrupt_source)
{
  400fac:	b480      	push	{r7}
  400fae:	b083      	sub	sp, #12
  400fb0:	af00      	add	r7, sp, #0
  400fb2:	6078      	str	r0, [r7, #4]
  400fb4:	6039      	str	r1, [r7, #0]
	if (interrupt_source == AFEC_INTERRUPT_ALL) {
  400fb6:	683b      	ldr	r3, [r7, #0]
  400fb8:	4a19      	ldr	r2, [pc, #100]	; (401020 <afec_enable_interrupt+0x74>)
  400fba:	4293      	cmp	r3, r2
  400fbc:	d103      	bne.n	400fc6 <afec_enable_interrupt+0x1a>
		afec->AFEC_IER = AFEC_INTERRUPT_ALL;
  400fbe:	687b      	ldr	r3, [r7, #4]
  400fc0:	4a17      	ldr	r2, [pc, #92]	; (401020 <afec_enable_interrupt+0x74>)
  400fc2:	625a      	str	r2, [r3, #36]	; 0x24
		return;
  400fc4:	e026      	b.n	401014 <afec_enable_interrupt+0x68>
	}

	if (interrupt_source < AFEC_INTERRUPT_DATA_READY) {
  400fc6:	683b      	ldr	r3, [r7, #0]
  400fc8:	2b0b      	cmp	r3, #11
  400fca:	d80f      	bhi.n	400fec <afec_enable_interrupt+0x40>
	  #if (SAMV71 || SAMV70 || SAME70 || SAMS70)
		if (interrupt_source == AFEC_INTERRUPT_EOC_11) {
  400fcc:	683b      	ldr	r3, [r7, #0]
  400fce:	2b0b      	cmp	r3, #11
  400fd0:	d104      	bne.n	400fdc <afec_enable_interrupt+0x30>
			afec->AFEC_IER = 1 << AFEC_TEMP_INT_SOURCE_NUM;
  400fd2:	687b      	ldr	r3, [r7, #4]
  400fd4:	f44f 6200 	mov.w	r2, #2048	; 0x800
  400fd8:	625a      	str	r2, [r3, #36]	; 0x24
  400fda:	e01b      	b.n	401014 <afec_enable_interrupt+0x68>
	  #else
		if (interrupt_source == AFEC_INTERRUPT_EOC_15) {
			afec->AFEC_IER = 1 << AFEC_TEMP_INT_SOURCE_NUM;	  
	  #endif 
		} else {
			afec->AFEC_IER = 1 << interrupt_source;
  400fdc:	683b      	ldr	r3, [r7, #0]
  400fde:	2201      	movs	r2, #1
  400fe0:	fa02 f303 	lsl.w	r3, r2, r3
  400fe4:	461a      	mov	r2, r3
  400fe6:	687b      	ldr	r3, [r7, #4]
  400fe8:	625a      	str	r2, [r3, #36]	; 0x24
  400fea:	e013      	b.n	401014 <afec_enable_interrupt+0x68>
		}
	} else if (interrupt_source < AFEC_INTERRUPT_TEMP_CHANGE) {
  400fec:	683b      	ldr	r3, [r7, #0]
  400fee:	2b0e      	cmp	r3, #14
  400ff0:	d808      	bhi.n	401004 <afec_enable_interrupt+0x58>
		afec->AFEC_IER = 1 << (interrupt_source + AFEC_INTERRUPT_GAP1);
  400ff2:	683b      	ldr	r3, [r7, #0]
  400ff4:	330c      	adds	r3, #12
  400ff6:	461a      	mov	r2, r3
  400ff8:	2301      	movs	r3, #1
  400ffa:	4093      	lsls	r3, r2
  400ffc:	461a      	mov	r2, r3
  400ffe:	687b      	ldr	r3, [r7, #4]
  401000:	625a      	str	r2, [r3, #36]	; 0x24
  401002:	e007      	b.n	401014 <afec_enable_interrupt+0x68>
	} else {
		afec->AFEC_IER = 1 << (interrupt_source + AFEC_INTERRUPT_GAP1
				+ AFEC_INTERRUPT_GAP2);
  401004:	683b      	ldr	r3, [r7, #0]
  401006:	330f      	adds	r3, #15
			afec->AFEC_IER = 1 << interrupt_source;
		}
	} else if (interrupt_source < AFEC_INTERRUPT_TEMP_CHANGE) {
		afec->AFEC_IER = 1 << (interrupt_source + AFEC_INTERRUPT_GAP1);
	} else {
		afec->AFEC_IER = 1 << (interrupt_source + AFEC_INTERRUPT_GAP1
  401008:	461a      	mov	r2, r3
  40100a:	2301      	movs	r3, #1
  40100c:	4093      	lsls	r3, r2
  40100e:	461a      	mov	r2, r3
  401010:	687b      	ldr	r3, [r7, #4]
  401012:	625a      	str	r2, [r3, #36]	; 0x24
				+ AFEC_INTERRUPT_GAP2);
	}
}
  401014:	370c      	adds	r7, #12
  401016:	46bd      	mov	sp, r7
  401018:	f85d 7b04 	ldr.w	r7, [sp], #4
  40101c:	4770      	bx	lr
  40101e:	bf00      	nop
  401020:	47000fff 	.word	0x47000fff

00401024 <afec_interrupt>:
 * \param inst_num AFEC instance number to handle interrupt for
 * \param source   Interrupt source number
 */
static void afec_interrupt(uint8_t inst_num,
		enum afec_interrupt_source source)
{
  401024:	b580      	push	{r7, lr}
  401026:	b082      	sub	sp, #8
  401028:	af00      	add	r7, sp, #0
  40102a:	4603      	mov	r3, r0
  40102c:	6039      	str	r1, [r7, #0]
  40102e:	71fb      	strb	r3, [r7, #7]
	if (afec_callback_pointer[inst_num][source]) {
  401030:	79fb      	ldrb	r3, [r7, #7]
  401032:	4909      	ldr	r1, [pc, #36]	; (401058 <afec_interrupt+0x34>)
  401034:	011a      	lsls	r2, r3, #4
  401036:	683b      	ldr	r3, [r7, #0]
  401038:	4413      	add	r3, r2
  40103a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
  40103e:	2b00      	cmp	r3, #0
  401040:	d007      	beq.n	401052 <afec_interrupt+0x2e>
		afec_callback_pointer[inst_num][source]();
  401042:	79fb      	ldrb	r3, [r7, #7]
  401044:	4904      	ldr	r1, [pc, #16]	; (401058 <afec_interrupt+0x34>)
  401046:	011a      	lsls	r2, r3, #4
  401048:	683b      	ldr	r3, [r7, #0]
  40104a:	4413      	add	r3, r2
  40104c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
  401050:	4798      	blx	r3
	}
}
  401052:	3708      	adds	r7, #8
  401054:	46bd      	mov	sp, r7
  401056:	bd80      	pop	{r7, pc}
  401058:	204009f4 	.word	0x204009f4

0040105c <afec_process_callback>:
 * \brief Call the callback function if the corresponding interrupt is asserted
 *
 * \param afec  Base address of the AFEC.
 */
static void afec_process_callback(Afec *const afec)
{
  40105c:	b580      	push	{r7, lr}
  40105e:	b086      	sub	sp, #24
  401060:	af00      	add	r7, sp, #0
  401062:	6078      	str	r0, [r7, #4]
	volatile uint32_t status;
	uint32_t cnt, inst_num;

	status = afec_get_interrupt_status(afec);
  401064:	6878      	ldr	r0, [r7, #4]
  401066:	4b25      	ldr	r3, [pc, #148]	; (4010fc <afec_process_callback+0xa0>)
  401068:	4798      	blx	r3
  40106a:	4603      	mov	r3, r0
  40106c:	60fb      	str	r3, [r7, #12]
	inst_num = afec_find_inst_num(afec);
  40106e:	6878      	ldr	r0, [r7, #4]
  401070:	4b23      	ldr	r3, [pc, #140]	; (401100 <afec_process_callback+0xa4>)
  401072:	4798      	blx	r3
  401074:	6138      	str	r0, [r7, #16]

	for (cnt = 0; cnt < _AFEC_NUM_OF_INTERRUPT_SOURCE; cnt++) {
  401076:	2300      	movs	r3, #0
  401078:	617b      	str	r3, [r7, #20]
  40107a:	e039      	b.n	4010f0 <afec_process_callback+0x94>
		if (cnt < AFEC_INTERRUPT_DATA_READY) {
  40107c:	697b      	ldr	r3, [r7, #20]
  40107e:	2b0b      	cmp	r3, #11
  401080:	d80f      	bhi.n	4010a2 <afec_process_callback+0x46>
				if (status & (1 << cnt)) {
					afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
				}
			}
		#elif defined __SAM4E8E__  || defined __SAM4E16E__ || SAMV71 || SAMV70 || SAMS70 || SAME70
			if (status & (1 << cnt)) {
  401082:	697b      	ldr	r3, [r7, #20]
  401084:	2201      	movs	r2, #1
  401086:	fa02 f303 	lsl.w	r3, r2, r3
  40108a:	461a      	mov	r2, r3
  40108c:	68fb      	ldr	r3, [r7, #12]
  40108e:	4013      	ands	r3, r2
  401090:	2b00      	cmp	r3, #0
  401092:	d02a      	beq.n	4010ea <afec_process_callback+0x8e>
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
  401094:	693b      	ldr	r3, [r7, #16]
  401096:	b2db      	uxtb	r3, r3
  401098:	4618      	mov	r0, r3
  40109a:	6979      	ldr	r1, [r7, #20]
  40109c:	4b19      	ldr	r3, [pc, #100]	; (401104 <afec_process_callback+0xa8>)
  40109e:	4798      	blx	r3
  4010a0:	e023      	b.n	4010ea <afec_process_callback+0x8e>
			}
		#endif
		} else if (cnt < AFEC_INTERRUPT_TEMP_CHANGE) {
  4010a2:	697b      	ldr	r3, [r7, #20]
  4010a4:	2b0e      	cmp	r3, #14
  4010a6:	d810      	bhi.n	4010ca <afec_process_callback+0x6e>
			if (status & (1 << (cnt + AFEC_INTERRUPT_GAP1))) {
  4010a8:	697b      	ldr	r3, [r7, #20]
  4010aa:	330c      	adds	r3, #12
  4010ac:	461a      	mov	r2, r3
  4010ae:	2301      	movs	r3, #1
  4010b0:	4093      	lsls	r3, r2
  4010b2:	461a      	mov	r2, r3
  4010b4:	68fb      	ldr	r3, [r7, #12]
  4010b6:	4013      	ands	r3, r2
  4010b8:	2b00      	cmp	r3, #0
  4010ba:	d016      	beq.n	4010ea <afec_process_callback+0x8e>
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
  4010bc:	693b      	ldr	r3, [r7, #16]
  4010be:	b2db      	uxtb	r3, r3
  4010c0:	4618      	mov	r0, r3
  4010c2:	6979      	ldr	r1, [r7, #20]
  4010c4:	4b0f      	ldr	r3, [pc, #60]	; (401104 <afec_process_callback+0xa8>)
  4010c6:	4798      	blx	r3
  4010c8:	e00f      	b.n	4010ea <afec_process_callback+0x8e>
			}
		} else {
			if (status & (1 << (cnt + AFEC_INTERRUPT_GAP1 + AFEC_INTERRUPT_GAP2))) {
  4010ca:	697b      	ldr	r3, [r7, #20]
  4010cc:	330f      	adds	r3, #15
  4010ce:	461a      	mov	r2, r3
  4010d0:	2301      	movs	r3, #1
  4010d2:	4093      	lsls	r3, r2
  4010d4:	461a      	mov	r2, r3
  4010d6:	68fb      	ldr	r3, [r7, #12]
  4010d8:	4013      	ands	r3, r2
  4010da:	2b00      	cmp	r3, #0
  4010dc:	d005      	beq.n	4010ea <afec_process_callback+0x8e>
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
  4010de:	693b      	ldr	r3, [r7, #16]
  4010e0:	b2db      	uxtb	r3, r3
  4010e2:	4618      	mov	r0, r3
  4010e4:	6979      	ldr	r1, [r7, #20]
  4010e6:	4b07      	ldr	r3, [pc, #28]	; (401104 <afec_process_callback+0xa8>)
  4010e8:	4798      	blx	r3
	uint32_t cnt, inst_num;

	status = afec_get_interrupt_status(afec);
	inst_num = afec_find_inst_num(afec);

	for (cnt = 0; cnt < _AFEC_NUM_OF_INTERRUPT_SOURCE; cnt++) {
  4010ea:	697b      	ldr	r3, [r7, #20]
  4010ec:	3301      	adds	r3, #1
  4010ee:	617b      	str	r3, [r7, #20]
  4010f0:	697b      	ldr	r3, [r7, #20]
  4010f2:	2b0f      	cmp	r3, #15
  4010f4:	d9c2      	bls.n	40107c <afec_process_callback+0x20>
			if (status & (1 << (cnt + AFEC_INTERRUPT_GAP1 + AFEC_INTERRUPT_GAP2))) {
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
			}
		}
	}
}
  4010f6:	3718      	adds	r7, #24
  4010f8:	46bd      	mov	sp, r7
  4010fa:	bd80      	pop	{r7, pc}
  4010fc:	00400bf9 	.word	0x00400bf9
  401100:	00400cbd 	.word	0x00400cbd
  401104:	00401025 	.word	0x00401025

00401108 <AFEC0_Handler>:

/**
 * \brief Interrupt handler for AFEC0.
 */
void AFEC0_Handler(void)
{
  401108:	b580      	push	{r7, lr}
  40110a:	af00      	add	r7, sp, #0
	afec_process_callback(AFEC0);
  40110c:	4801      	ldr	r0, [pc, #4]	; (401114 <AFEC0_Handler+0xc>)
  40110e:	4b02      	ldr	r3, [pc, #8]	; (401118 <AFEC0_Handler+0x10>)
  401110:	4798      	blx	r3
}
  401112:	bd80      	pop	{r7, pc}
  401114:	4003c000 	.word	0x4003c000
  401118:	0040105d 	.word	0x0040105d

0040111c <AFEC1_Handler>:

/**
 * \brief Interrupt handler for AFEC1.
 */
void AFEC1_Handler(void)
{
  40111c:	b580      	push	{r7, lr}
  40111e:	af00      	add	r7, sp, #0
	afec_process_callback(AFEC1);
  401120:	4801      	ldr	r0, [pc, #4]	; (401128 <AFEC1_Handler+0xc>)
  401122:	4b02      	ldr	r3, [pc, #8]	; (40112c <AFEC1_Handler+0x10>)
  401124:	4798      	blx	r3
}
  401126:	bd80      	pop	{r7, pc}
  401128:	40064000 	.word	0x40064000
  40112c:	0040105d 	.word	0x0040105d

00401130 <pio_get_interrupt_status>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
  401130:	b480      	push	{r7}
  401132:	b083      	sub	sp, #12
  401134:	af00      	add	r7, sp, #0
  401136:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_ISR;
  401138:	687b      	ldr	r3, [r7, #4]
  40113a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
  40113c:	4618      	mov	r0, r3
  40113e:	370c      	adds	r7, #12
  401140:	46bd      	mov	sp, r7
  401142:	f85d 7b04 	ldr.w	r7, [sp], #4
  401146:	4770      	bx	lr

00401148 <pio_get_interrupt_mask>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
  401148:	b480      	push	{r7}
  40114a:	b083      	sub	sp, #12
  40114c:	af00      	add	r7, sp, #0
  40114e:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_IMR;
  401150:	687b      	ldr	r3, [r7, #4]
  401152:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
  401154:	4618      	mov	r0, r3
  401156:	370c      	adds	r7, #12
  401158:	46bd      	mov	sp, r7
  40115a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40115e:	4770      	bx	lr

00401160 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  401160:	b580      	push	{r7, lr}
  401162:	b084      	sub	sp, #16
  401164:	af00      	add	r7, sp, #0
  401166:	6078      	str	r0, [r7, #4]
  401168:	6039      	str	r1, [r7, #0]
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  40116a:	6878      	ldr	r0, [r7, #4]
  40116c:	4b24      	ldr	r3, [pc, #144]	; (401200 <pio_handler_process+0xa0>)
  40116e:	4798      	blx	r3
  401170:	60f8      	str	r0, [r7, #12]
	status &= pio_get_interrupt_mask(p_pio);
  401172:	6878      	ldr	r0, [r7, #4]
  401174:	4b23      	ldr	r3, [pc, #140]	; (401204 <pio_handler_process+0xa4>)
  401176:	4798      	blx	r3
  401178:	4602      	mov	r2, r0
  40117a:	68fb      	ldr	r3, [r7, #12]
  40117c:	4013      	ands	r3, r2
  40117e:	60fb      	str	r3, [r7, #12]

	/* Check pending events */
	if (status != 0) {
  401180:	68fb      	ldr	r3, [r7, #12]
  401182:	2b00      	cmp	r3, #0
  401184:	d038      	beq.n	4011f8 <pio_handler_process+0x98>
		/* Find triggering source */
		i = 0;
  401186:	2300      	movs	r3, #0
  401188:	60bb      	str	r3, [r7, #8]
		while (status != 0) {
  40118a:	e032      	b.n	4011f2 <pio_handler_process+0x92>
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  40118c:	4a1e      	ldr	r2, [pc, #120]	; (401208 <pio_handler_process+0xa8>)
  40118e:	68bb      	ldr	r3, [r7, #8]
  401190:	011b      	lsls	r3, r3, #4
  401192:	4413      	add	r3, r2
  401194:	681a      	ldr	r2, [r3, #0]
  401196:	683b      	ldr	r3, [r7, #0]
  401198:	429a      	cmp	r2, r3
  40119a:	d123      	bne.n	4011e4 <pio_handler_process+0x84>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  40119c:	4a1a      	ldr	r2, [pc, #104]	; (401208 <pio_handler_process+0xa8>)
  40119e:	68bb      	ldr	r3, [r7, #8]
  4011a0:	011b      	lsls	r3, r3, #4
  4011a2:	4413      	add	r3, r2
  4011a4:	685a      	ldr	r2, [r3, #4]
  4011a6:	68fb      	ldr	r3, [r7, #12]
  4011a8:	4013      	ands	r3, r2
  4011aa:	2b00      	cmp	r3, #0
  4011ac:	d01a      	beq.n	4011e4 <pio_handler_process+0x84>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  4011ae:	4a16      	ldr	r2, [pc, #88]	; (401208 <pio_handler_process+0xa8>)
  4011b0:	68bb      	ldr	r3, [r7, #8]
  4011b2:	011b      	lsls	r3, r3, #4
  4011b4:	4413      	add	r3, r2
  4011b6:	3308      	adds	r3, #8
  4011b8:	685b      	ldr	r3, [r3, #4]
  4011ba:	4913      	ldr	r1, [pc, #76]	; (401208 <pio_handler_process+0xa8>)
  4011bc:	68ba      	ldr	r2, [r7, #8]
  4011be:	0112      	lsls	r2, r2, #4
  4011c0:	440a      	add	r2, r1
  4011c2:	6810      	ldr	r0, [r2, #0]
  4011c4:	4910      	ldr	r1, [pc, #64]	; (401208 <pio_handler_process+0xa8>)
  4011c6:	68ba      	ldr	r2, [r7, #8]
  4011c8:	0112      	lsls	r2, r2, #4
  4011ca:	440a      	add	r2, r1
  4011cc:	6852      	ldr	r2, [r2, #4]
  4011ce:	4611      	mov	r1, r2
  4011d0:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  4011d2:	4a0d      	ldr	r2, [pc, #52]	; (401208 <pio_handler_process+0xa8>)
  4011d4:	68bb      	ldr	r3, [r7, #8]
  4011d6:	011b      	lsls	r3, r3, #4
  4011d8:	4413      	add	r3, r2
  4011da:	685b      	ldr	r3, [r3, #4]
  4011dc:	43db      	mvns	r3, r3
  4011de:	68fa      	ldr	r2, [r7, #12]
  4011e0:	4013      	ands	r3, r2
  4011e2:	60fb      	str	r3, [r7, #12]
				}
			}
			i++;
  4011e4:	68bb      	ldr	r3, [r7, #8]
  4011e6:	3301      	adds	r3, #1
  4011e8:	60bb      	str	r3, [r7, #8]
			if (i >= MAX_INTERRUPT_SOURCES) {
  4011ea:	68bb      	ldr	r3, [r7, #8]
  4011ec:	2b06      	cmp	r3, #6
  4011ee:	d900      	bls.n	4011f2 <pio_handler_process+0x92>
				break;
  4011f0:	e002      	b.n	4011f8 <pio_handler_process+0x98>

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
  4011f2:	68fb      	ldr	r3, [r7, #12]
  4011f4:	2b00      	cmp	r3, #0
  4011f6:	d1c9      	bne.n	40118c <pio_handler_process+0x2c>
		if (pio_capture_handler) {
			pio_capture_handler(p_pio);
		}
	}
#endif
}
  4011f8:	3710      	adds	r7, #16
  4011fa:	46bd      	mov	sp, r7
  4011fc:	bd80      	pop	{r7, pc}
  4011fe:	bf00      	nop
  401200:	00401131 	.word	0x00401131
  401204:	00401149 	.word	0x00401149
  401208:	20400918 	.word	0x20400918

0040120c <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  40120c:	b580      	push	{r7, lr}
  40120e:	af00      	add	r7, sp, #0
	pio_handler_process(PIOA, ID_PIOA);
  401210:	4802      	ldr	r0, [pc, #8]	; (40121c <PIOA_Handler+0x10>)
  401212:	210a      	movs	r1, #10
  401214:	4b02      	ldr	r3, [pc, #8]	; (401220 <PIOA_Handler+0x14>)
  401216:	4798      	blx	r3
}
  401218:	bd80      	pop	{r7, pc}
  40121a:	bf00      	nop
  40121c:	400e0e00 	.word	0x400e0e00
  401220:	00401161 	.word	0x00401161

00401224 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  401224:	b580      	push	{r7, lr}
  401226:	af00      	add	r7, sp, #0
    pio_handler_process(PIOB, ID_PIOB);
  401228:	4802      	ldr	r0, [pc, #8]	; (401234 <PIOB_Handler+0x10>)
  40122a:	210b      	movs	r1, #11
  40122c:	4b02      	ldr	r3, [pc, #8]	; (401238 <PIOB_Handler+0x14>)
  40122e:	4798      	blx	r3
}
  401230:	bd80      	pop	{r7, pc}
  401232:	bf00      	nop
  401234:	400e1000 	.word	0x400e1000
  401238:	00401161 	.word	0x00401161

0040123c <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  40123c:	b580      	push	{r7, lr}
  40123e:	af00      	add	r7, sp, #0
	pio_handler_process(PIOC, ID_PIOC);
  401240:	4802      	ldr	r0, [pc, #8]	; (40124c <PIOC_Handler+0x10>)
  401242:	210c      	movs	r1, #12
  401244:	4b02      	ldr	r3, [pc, #8]	; (401250 <PIOC_Handler+0x14>)
  401246:	4798      	blx	r3
}
  401248:	bd80      	pop	{r7, pc}
  40124a:	bf00      	nop
  40124c:	400e1200 	.word	0x400e1200
  401250:	00401161 	.word	0x00401161

00401254 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  401254:	b580      	push	{r7, lr}
  401256:	af00      	add	r7, sp, #0
	pio_handler_process(PIOD, ID_PIOD);
  401258:	4802      	ldr	r0, [pc, #8]	; (401264 <PIOD_Handler+0x10>)
  40125a:	2110      	movs	r1, #16
  40125c:	4b02      	ldr	r3, [pc, #8]	; (401268 <PIOD_Handler+0x14>)
  40125e:	4798      	blx	r3
}
  401260:	bd80      	pop	{r7, pc}
  401262:	bf00      	nop
  401264:	400e1400 	.word	0x400e1400
  401268:	00401161 	.word	0x00401161

0040126c <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  40126c:	b580      	push	{r7, lr}
  40126e:	af00      	add	r7, sp, #0
	pio_handler_process(PIOE, ID_PIOE);
  401270:	4802      	ldr	r0, [pc, #8]	; (40127c <PIOE_Handler+0x10>)
  401272:	2111      	movs	r1, #17
  401274:	4b02      	ldr	r3, [pc, #8]	; (401280 <PIOE_Handler+0x14>)
  401276:	4798      	blx	r3
}
  401278:	bd80      	pop	{r7, pc}
  40127a:	bf00      	nop
  40127c:	400e1600 	.word	0x400e1600
  401280:	00401161 	.word	0x00401161

00401284 <pmc_mck_set_division>:
 * \brief Set the division of the MCK.
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
  401284:	b480      	push	{r7}
  401286:	b083      	sub	sp, #12
  401288:	af00      	add	r7, sp, #0
  40128a:	6078      	str	r0, [r7, #4]
	switch (ul_div) {
  40128c:	687b      	ldr	r3, [r7, #4]
  40128e:	3b01      	subs	r3, #1
  401290:	2b03      	cmp	r3, #3
  401292:	d81a      	bhi.n	4012ca <pmc_mck_set_division+0x46>
  401294:	a201      	add	r2, pc, #4	; (adr r2, 40129c <pmc_mck_set_division+0x18>)
  401296:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  40129a:	bf00      	nop
  40129c:	004012ad 	.word	0x004012ad
  4012a0:	004012b3 	.word	0x004012b3
  4012a4:	004012bb 	.word	0x004012bb
  4012a8:	004012c3 	.word	0x004012c3
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  4012ac:	2300      	movs	r3, #0
  4012ae:	607b      	str	r3, [r7, #4]
			break;
  4012b0:	e00e      	b.n	4012d0 <pmc_mck_set_division+0x4c>
		case 2:
			ul_div = PMC_MCKR_MDIV_PCK_DIV2;
  4012b2:	f44f 7380 	mov.w	r3, #256	; 0x100
  4012b6:	607b      	str	r3, [r7, #4]
			break;
  4012b8:	e00a      	b.n	4012d0 <pmc_mck_set_division+0x4c>
		case 3:
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  4012ba:	f44f 7340 	mov.w	r3, #768	; 0x300
  4012be:	607b      	str	r3, [r7, #4]
			break;
  4012c0:	e006      	b.n	4012d0 <pmc_mck_set_division+0x4c>
		case 4:
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  4012c2:	f44f 7300 	mov.w	r3, #512	; 0x200
  4012c6:	607b      	str	r3, [r7, #4]
			break;
  4012c8:	e002      	b.n	4012d0 <pmc_mck_set_division+0x4c>
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  4012ca:	2300      	movs	r3, #0
  4012cc:	607b      	str	r3, [r7, #4]
			break;
  4012ce:	bf00      	nop
	}
	PMC->PMC_MCKR =
  4012d0:	4909      	ldr	r1, [pc, #36]	; (4012f8 <pmc_mck_set_division+0x74>)
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  4012d2:	4b09      	ldr	r3, [pc, #36]	; (4012f8 <pmc_mck_set_division+0x74>)
  4012d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4012d6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
  4012da:	687b      	ldr	r3, [r7, #4]
  4012dc:	4313      	orrs	r3, r2
			break;
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
  4012de:	630b      	str	r3, [r1, #48]	; 0x30
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  4012e0:	bf00      	nop
  4012e2:	4b05      	ldr	r3, [pc, #20]	; (4012f8 <pmc_mck_set_division+0x74>)
  4012e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4012e6:	f003 0308 	and.w	r3, r3, #8
  4012ea:	2b00      	cmp	r3, #0
  4012ec:	d0f9      	beq.n	4012e2 <pmc_mck_set_division+0x5e>
}
  4012ee:	370c      	adds	r7, #12
  4012f0:	46bd      	mov	sp, r7
  4012f2:	f85d 7b04 	ldr.w	r7, [sp], #4
  4012f6:	4770      	bx	lr
  4012f8:	400e0600 	.word	0x400e0600

004012fc <pmc_switch_mck_to_pllack>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
  4012fc:	b480      	push	{r7}
  4012fe:	b085      	sub	sp, #20
  401300:	af00      	add	r7, sp, #0
  401302:	6078      	str	r0, [r7, #4]
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  401304:	491d      	ldr	r1, [pc, #116]	; (40137c <pmc_switch_mck_to_pllack+0x80>)
  401306:	4b1d      	ldr	r3, [pc, #116]	; (40137c <pmc_switch_mck_to_pllack+0x80>)
  401308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40130a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
  40130e:	687b      	ldr	r3, [r7, #4]
  401310:	4313      	orrs	r3, r2
  401312:	630b      	str	r3, [r1, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401314:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  401318:	60fb      	str	r3, [r7, #12]
  40131a:	e007      	b.n	40132c <pmc_switch_mck_to_pllack+0x30>
			--ul_timeout) {
		if (ul_timeout == 0) {
  40131c:	68fb      	ldr	r3, [r7, #12]
  40131e:	2b00      	cmp	r3, #0
  401320:	d101      	bne.n	401326 <pmc_switch_mck_to_pllack+0x2a>
			return 1;
  401322:	2301      	movs	r3, #1
  401324:	e023      	b.n	40136e <pmc_switch_mck_to_pllack+0x72>
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
  401326:	68fb      	ldr	r3, [r7, #12]
  401328:	3b01      	subs	r3, #1
  40132a:	60fb      	str	r3, [r7, #12]
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  40132c:	4b13      	ldr	r3, [pc, #76]	; (40137c <pmc_switch_mck_to_pllack+0x80>)
  40132e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401330:	f003 0308 	and.w	r3, r3, #8
  401334:	2b00      	cmp	r3, #0
  401336:	d0f1      	beq.n	40131c <pmc_switch_mck_to_pllack+0x20>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  401338:	4a10      	ldr	r2, [pc, #64]	; (40137c <pmc_switch_mck_to_pllack+0x80>)
  40133a:	4b10      	ldr	r3, [pc, #64]	; (40137c <pmc_switch_mck_to_pllack+0x80>)
  40133c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40133e:	f023 0303 	bic.w	r3, r3, #3
  401342:	f043 0302 	orr.w	r3, r3, #2
  401346:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401348:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  40134c:	60fb      	str	r3, [r7, #12]
  40134e:	e007      	b.n	401360 <pmc_switch_mck_to_pllack+0x64>
			--ul_timeout) {
		if (ul_timeout == 0) {
  401350:	68fb      	ldr	r3, [r7, #12]
  401352:	2b00      	cmp	r3, #0
  401354:	d101      	bne.n	40135a <pmc_switch_mck_to_pllack+0x5e>
			return 1;
  401356:	2301      	movs	r3, #1
  401358:	e009      	b.n	40136e <pmc_switch_mck_to_pllack+0x72>

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
  40135a:	68fb      	ldr	r3, [r7, #12]
  40135c:	3b01      	subs	r3, #1
  40135e:	60fb      	str	r3, [r7, #12]
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401360:	4b06      	ldr	r3, [pc, #24]	; (40137c <pmc_switch_mck_to_pllack+0x80>)
  401362:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401364:	f003 0308 	and.w	r3, r3, #8
  401368:	2b00      	cmp	r3, #0
  40136a:	d0f1      	beq.n	401350 <pmc_switch_mck_to_pllack+0x54>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
  40136c:	2300      	movs	r3, #0
}
  40136e:	4618      	mov	r0, r3
  401370:	3714      	adds	r7, #20
  401372:	46bd      	mov	sp, r7
  401374:	f85d 7b04 	ldr.w	r7, [sp], #4
  401378:	4770      	bx	lr
  40137a:	bf00      	nop
  40137c:	400e0600 	.word	0x400e0600

00401380 <pmc_switch_sclk_to_32kxtal>:
 *       VDDIO power supply.
 *
 * \param ul_bypass 0 for Xtal, 1 for bypass.
 */
void pmc_switch_sclk_to_32kxtal(uint32_t ul_bypass)
{
  401380:	b480      	push	{r7}
  401382:	b083      	sub	sp, #12
  401384:	af00      	add	r7, sp, #0
  401386:	6078      	str	r0, [r7, #4]
	/* Set Bypass mode if required */
	if (ul_bypass == 1) {
  401388:	687b      	ldr	r3, [r7, #4]
  40138a:	2b01      	cmp	r3, #1
  40138c:	d105      	bne.n	40139a <pmc_switch_sclk_to_32kxtal+0x1a>
		SUPC->SUPC_MR |= SUPC_MR_KEY_PASSWD |
  40138e:	4907      	ldr	r1, [pc, #28]	; (4013ac <pmc_switch_sclk_to_32kxtal+0x2c>)
  401390:	4b06      	ldr	r3, [pc, #24]	; (4013ac <pmc_switch_sclk_to_32kxtal+0x2c>)
  401392:	689a      	ldr	r2, [r3, #8]
  401394:	4b06      	ldr	r3, [pc, #24]	; (4013b0 <pmc_switch_sclk_to_32kxtal+0x30>)
  401396:	4313      	orrs	r3, r2
  401398:	608b      	str	r3, [r1, #8]
			SUPC_MR_OSCBYPASS;
	}

	SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_XTALSEL;
  40139a:	4b04      	ldr	r3, [pc, #16]	; (4013ac <pmc_switch_sclk_to_32kxtal+0x2c>)
  40139c:	4a05      	ldr	r2, [pc, #20]	; (4013b4 <pmc_switch_sclk_to_32kxtal+0x34>)
  40139e:	601a      	str	r2, [r3, #0]
}
  4013a0:	370c      	adds	r7, #12
  4013a2:	46bd      	mov	sp, r7
  4013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
  4013a8:	4770      	bx	lr
  4013aa:	bf00      	nop
  4013ac:	400e1810 	.word	0x400e1810
  4013b0:	a5100000 	.word	0xa5100000
  4013b4:	a5000008 	.word	0xa5000008

004013b8 <pmc_osc_is_ready_32kxtal>:
 *
 * \retval 1 External 32k Xtal is ready.
 * \retval 0 External 32k Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_32kxtal(void)
{
  4013b8:	b480      	push	{r7}
  4013ba:	af00      	add	r7, sp, #0
	return ((SUPC->SUPC_SR & SUPC_SR_OSCSEL)
  4013bc:	4b09      	ldr	r3, [pc, #36]	; (4013e4 <pmc_osc_is_ready_32kxtal+0x2c>)
  4013be:	695b      	ldr	r3, [r3, #20]
  4013c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
			&& (PMC->PMC_SR & PMC_SR_OSCSELS));
  4013c4:	2b00      	cmp	r3, #0
  4013c6:	d007      	beq.n	4013d8 <pmc_osc_is_ready_32kxtal+0x20>
  4013c8:	4b07      	ldr	r3, [pc, #28]	; (4013e8 <pmc_osc_is_ready_32kxtal+0x30>)
  4013ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4013cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
  4013d0:	2b00      	cmp	r3, #0
  4013d2:	d001      	beq.n	4013d8 <pmc_osc_is_ready_32kxtal+0x20>
  4013d4:	2301      	movs	r3, #1
  4013d6:	e000      	b.n	4013da <pmc_osc_is_ready_32kxtal+0x22>
  4013d8:	2300      	movs	r3, #0
}
  4013da:	4618      	mov	r0, r3
  4013dc:	46bd      	mov	sp, r7
  4013de:	f85d 7b04 	ldr.w	r7, [sp], #4
  4013e2:	4770      	bx	lr
  4013e4:	400e1810 	.word	0x400e1810
  4013e8:	400e0600 	.word	0x400e0600

004013ec <pmc_switch_mainck_to_fastrc>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 * \retval 2 Invalid frequency.
 */
void pmc_switch_mainck_to_fastrc(uint32_t ul_moscrcf)
{
  4013ec:	b480      	push	{r7}
  4013ee:	b083      	sub	sp, #12
  4013f0:	af00      	add	r7, sp, #0
  4013f2:	6078      	str	r0, [r7, #4]
	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	PMC->CKGR_MOR |= (CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCRCEN);
  4013f4:	4915      	ldr	r1, [pc, #84]	; (40144c <pmc_switch_mainck_to_fastrc+0x60>)
  4013f6:	4b15      	ldr	r3, [pc, #84]	; (40144c <pmc_switch_mainck_to_fastrc+0x60>)
  4013f8:	6a1a      	ldr	r2, [r3, #32]
  4013fa:	4b15      	ldr	r3, [pc, #84]	; (401450 <pmc_switch_mainck_to_fastrc+0x64>)
  4013fc:	4313      	orrs	r3, r2
  4013fe:	620b      	str	r3, [r1, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  401400:	bf00      	nop
  401402:	4b12      	ldr	r3, [pc, #72]	; (40144c <pmc_switch_mainck_to_fastrc+0x60>)
  401404:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401406:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  40140a:	2b00      	cmp	r3, #0
  40140c:	d0f9      	beq.n	401402 <pmc_switch_mainck_to_fastrc+0x16>

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  40140e:	490f      	ldr	r1, [pc, #60]	; (40144c <pmc_switch_mainck_to_fastrc+0x60>)
  401410:	4b0e      	ldr	r3, [pc, #56]	; (40144c <pmc_switch_mainck_to_fastrc+0x60>)
  401412:	6a1a      	ldr	r2, [r3, #32]
  401414:	4b0f      	ldr	r3, [pc, #60]	; (401454 <pmc_switch_mainck_to_fastrc+0x68>)
  401416:	4013      	ands	r3, r2
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;
  401418:	687a      	ldr	r2, [r7, #4]
  40141a:	4313      	orrs	r3, r2
  40141c:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  401420:	620b      	str	r3, [r1, #32]
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  401422:	bf00      	nop
  401424:	4b09      	ldr	r3, [pc, #36]	; (40144c <pmc_switch_mainck_to_fastrc+0x60>)
  401426:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401428:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  40142c:	2b00      	cmp	r3, #0
  40142e:	d0f9      	beq.n	401424 <pmc_switch_mainck_to_fastrc+0x38>

	/* Switch to Fast RC */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
  401430:	4906      	ldr	r1, [pc, #24]	; (40144c <pmc_switch_mainck_to_fastrc+0x60>)
  401432:	4b06      	ldr	r3, [pc, #24]	; (40144c <pmc_switch_mainck_to_fastrc+0x60>)
  401434:	6a1a      	ldr	r2, [r3, #32]
  401436:	4b08      	ldr	r3, [pc, #32]	; (401458 <pmc_switch_mainck_to_fastrc+0x6c>)
  401438:	4013      	ands	r3, r2
  40143a:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  40143e:	620b      	str	r3, [r1, #32]
			CKGR_MOR_KEY_PASSWD;
}
  401440:	370c      	adds	r7, #12
  401442:	46bd      	mov	sp, r7
  401444:	f85d 7b04 	ldr.w	r7, [sp], #4
  401448:	4770      	bx	lr
  40144a:	bf00      	nop
  40144c:	400e0600 	.word	0x400e0600
  401450:	00370008 	.word	0x00370008
  401454:	ffc8ff8f 	.word	0xffc8ff8f
  401458:	fec8ffff 	.word	0xfec8ffff

0040145c <pmc_switch_mainck_to_xtal>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
  40145c:	b480      	push	{r7}
  40145e:	b083      	sub	sp, #12
  401460:	af00      	add	r7, sp, #0
  401462:	6078      	str	r0, [r7, #4]
  401464:	6039      	str	r1, [r7, #0]
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  401466:	687b      	ldr	r3, [r7, #4]
  401468:	2b00      	cmp	r3, #0
  40146a:	d008      	beq.n	40147e <pmc_switch_mainck_to_xtal+0x22>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  40146c:	4913      	ldr	r1, [pc, #76]	; (4014bc <pmc_switch_mainck_to_xtal+0x60>)
  40146e:	4b13      	ldr	r3, [pc, #76]	; (4014bc <pmc_switch_mainck_to_xtal+0x60>)
  401470:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  401472:	4a13      	ldr	r2, [pc, #76]	; (4014c0 <pmc_switch_mainck_to_xtal+0x64>)
  401474:	401a      	ands	r2, r3
  401476:	4b13      	ldr	r3, [pc, #76]	; (4014c4 <pmc_switch_mainck_to_xtal+0x68>)
  401478:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  40147a:	620b      	str	r3, [r1, #32]
  40147c:	e018      	b.n	4014b0 <pmc_switch_mainck_to_xtal+0x54>
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  40147e:	490f      	ldr	r1, [pc, #60]	; (4014bc <pmc_switch_mainck_to_xtal+0x60>)
  401480:	4b0e      	ldr	r3, [pc, #56]	; (4014bc <pmc_switch_mainck_to_xtal+0x60>)
  401482:	6a1a      	ldr	r2, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  401484:	4b10      	ldr	r3, [pc, #64]	; (4014c8 <pmc_switch_mainck_to_xtal+0x6c>)
  401486:	4013      	ands	r3, r2
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  401488:	683a      	ldr	r2, [r7, #0]
  40148a:	0212      	lsls	r2, r2, #8
  40148c:	b292      	uxth	r2, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  40148e:	431a      	orrs	r2, r3
  401490:	4b0e      	ldr	r3, [pc, #56]	; (4014cc <pmc_switch_mainck_to_xtal+0x70>)
  401492:	4313      	orrs	r3, r2
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  401494:	620b      	str	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  401496:	bf00      	nop
  401498:	4b08      	ldr	r3, [pc, #32]	; (4014bc <pmc_switch_mainck_to_xtal+0x60>)
  40149a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40149c:	f003 0301 	and.w	r3, r3, #1
  4014a0:	2b00      	cmp	r3, #0
  4014a2:	d0f9      	beq.n	401498 <pmc_switch_mainck_to_xtal+0x3c>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  4014a4:	4905      	ldr	r1, [pc, #20]	; (4014bc <pmc_switch_mainck_to_xtal+0x60>)
  4014a6:	4b05      	ldr	r3, [pc, #20]	; (4014bc <pmc_switch_mainck_to_xtal+0x60>)
  4014a8:	6a1a      	ldr	r2, [r3, #32]
  4014aa:	4b09      	ldr	r3, [pc, #36]	; (4014d0 <pmc_switch_mainck_to_xtal+0x74>)
  4014ac:	4313      	orrs	r3, r2
  4014ae:	620b      	str	r3, [r1, #32]
	}
}
  4014b0:	370c      	adds	r7, #12
  4014b2:	46bd      	mov	sp, r7
  4014b4:	f85d 7b04 	ldr.w	r7, [sp], #4
  4014b8:	4770      	bx	lr
  4014ba:	bf00      	nop
  4014bc:	400e0600 	.word	0x400e0600
  4014c0:	fec8fffc 	.word	0xfec8fffc
  4014c4:	01370002 	.word	0x01370002
  4014c8:	ffc8fffc 	.word	0xffc8fffc
  4014cc:	00370001 	.word	0x00370001
  4014d0:	01370000 	.word	0x01370000

004014d4 <pmc_osc_is_ready_mainck>:
 *
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
  4014d4:	b480      	push	{r7}
  4014d6:	af00      	add	r7, sp, #0
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  4014d8:	4b04      	ldr	r3, [pc, #16]	; (4014ec <pmc_osc_is_ready_mainck+0x18>)
  4014da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4014dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
  4014e0:	4618      	mov	r0, r3
  4014e2:	46bd      	mov	sp, r7
  4014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
  4014e8:	4770      	bx	lr
  4014ea:	bf00      	nop
  4014ec:	400e0600 	.word	0x400e0600

004014f0 <pmc_disable_pllack>:

/**
 * \brief Disable PLLA clock.
 */
void pmc_disable_pllack(void)
{
  4014f0:	b480      	push	{r7}
  4014f2:	af00      	add	r7, sp, #0
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  4014f4:	4b03      	ldr	r3, [pc, #12]	; (401504 <pmc_disable_pllack+0x14>)
  4014f6:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  4014fa:	629a      	str	r2, [r3, #40]	; 0x28
#endif
}
  4014fc:	46bd      	mov	sp, r7
  4014fe:	f85d 7b04 	ldr.w	r7, [sp], #4
  401502:	4770      	bx	lr
  401504:	400e0600 	.word	0x400e0600

00401508 <pmc_is_locked_pllack>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
  401508:	b480      	push	{r7}
  40150a:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  40150c:	4b04      	ldr	r3, [pc, #16]	; (401520 <pmc_is_locked_pllack+0x18>)
  40150e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401510:	f003 0302 	and.w	r3, r3, #2
}
  401514:	4618      	mov	r0, r3
  401516:	46bd      	mov	sp, r7
  401518:	f85d 7b04 	ldr.w	r7, [sp], #4
  40151c:	4770      	bx	lr
  40151e:	bf00      	nop
  401520:	400e0600 	.word	0x400e0600

00401524 <pmc_is_locked_upll>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_upll(void)
{
  401524:	b480      	push	{r7}
  401526:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKU);
  401528:	4b04      	ldr	r3, [pc, #16]	; (40153c <pmc_is_locked_upll+0x18>)
  40152a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40152c:	f003 0340 	and.w	r3, r3, #64	; 0x40
}
  401530:	4618      	mov	r0, r3
  401532:	46bd      	mov	sp, r7
  401534:	f85d 7b04 	ldr.w	r7, [sp], #4
  401538:	4770      	bx	lr
  40153a:	bf00      	nop
  40153c:	400e0600 	.word	0x400e0600

00401540 <pmc_enable_periph_clk>:
 *
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
  401540:	b480      	push	{r7}
  401542:	b083      	sub	sp, #12
  401544:	af00      	add	r7, sp, #0
  401546:	6078      	str	r0, [r7, #4]
	if (ul_id > MAX_PERIPH_ID) {
  401548:	687b      	ldr	r3, [r7, #4]
  40154a:	2b3f      	cmp	r3, #63	; 0x3f
  40154c:	d901      	bls.n	401552 <pmc_enable_periph_clk+0x12>
		return 1;
  40154e:	2301      	movs	r3, #1
  401550:	e02f      	b.n	4015b2 <pmc_enable_periph_clk+0x72>
	}

	if (ul_id < 32) {
  401552:	687b      	ldr	r3, [r7, #4]
  401554:	2b1f      	cmp	r3, #31
  401556:	d813      	bhi.n	401580 <pmc_enable_periph_clk+0x40>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  401558:	4b19      	ldr	r3, [pc, #100]	; (4015c0 <pmc_enable_periph_clk+0x80>)
  40155a:	699a      	ldr	r2, [r3, #24]
  40155c:	687b      	ldr	r3, [r7, #4]
  40155e:	2101      	movs	r1, #1
  401560:	fa01 f303 	lsl.w	r3, r1, r3
  401564:	401a      	ands	r2, r3
  401566:	687b      	ldr	r3, [r7, #4]
  401568:	2101      	movs	r1, #1
  40156a:	fa01 f303 	lsl.w	r3, r1, r3
  40156e:	429a      	cmp	r2, r3
  401570:	d01e      	beq.n	4015b0 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER0 = 1 << ul_id;
  401572:	4a13      	ldr	r2, [pc, #76]	; (4015c0 <pmc_enable_periph_clk+0x80>)
  401574:	687b      	ldr	r3, [r7, #4]
  401576:	2101      	movs	r1, #1
  401578:	fa01 f303 	lsl.w	r3, r1, r3
  40157c:	6113      	str	r3, [r2, #16]
  40157e:	e017      	b.n	4015b0 <pmc_enable_periph_clk+0x70>
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
  401580:	687b      	ldr	r3, [r7, #4]
  401582:	3b20      	subs	r3, #32
  401584:	607b      	str	r3, [r7, #4]
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  401586:	4b0e      	ldr	r3, [pc, #56]	; (4015c0 <pmc_enable_periph_clk+0x80>)
  401588:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  40158c:	687b      	ldr	r3, [r7, #4]
  40158e:	2101      	movs	r1, #1
  401590:	fa01 f303 	lsl.w	r3, r1, r3
  401594:	401a      	ands	r2, r3
  401596:	687b      	ldr	r3, [r7, #4]
  401598:	2101      	movs	r1, #1
  40159a:	fa01 f303 	lsl.w	r3, r1, r3
  40159e:	429a      	cmp	r2, r3
  4015a0:	d006      	beq.n	4015b0 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER1 = 1 << ul_id;
  4015a2:	4a07      	ldr	r2, [pc, #28]	; (4015c0 <pmc_enable_periph_clk+0x80>)
  4015a4:	687b      	ldr	r3, [r7, #4]
  4015a6:	2101      	movs	r1, #1
  4015a8:	fa01 f303 	lsl.w	r3, r1, r3
  4015ac:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
		}
#endif
	}

	return 0;
  4015b0:	2300      	movs	r3, #0
}
  4015b2:	4618      	mov	r0, r3
  4015b4:	370c      	adds	r7, #12
  4015b6:	46bd      	mov	sp, r7
  4015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
  4015bc:	4770      	bx	lr
  4015be:	bf00      	nop
  4015c0:	400e0600 	.word	0x400e0600

004015c4 <twihs_enable_master_mode>:
 * \brief Enable TWIHS master mode.
 *
 * \param p_twihs Pointer to a TWIHS instance.
 */
void twihs_enable_master_mode(Twihs *p_twihs)
{
  4015c4:	b480      	push	{r7}
  4015c6:	b083      	sub	sp, #12
  4015c8:	af00      	add	r7, sp, #0
  4015ca:	6078      	str	r0, [r7, #4]
	/* Set Master Disable bit and Slave Disable bit */
	p_twihs->TWIHS_CR = TWIHS_CR_MSDIS;
  4015cc:	687b      	ldr	r3, [r7, #4]
  4015ce:	2208      	movs	r2, #8
  4015d0:	601a      	str	r2, [r3, #0]
	p_twihs->TWIHS_CR = TWIHS_CR_SVDIS;
  4015d2:	687b      	ldr	r3, [r7, #4]
  4015d4:	2220      	movs	r2, #32
  4015d6:	601a      	str	r2, [r3, #0]

	/* Set Master Enable bit */
	p_twihs->TWIHS_CR = TWIHS_CR_MSEN;
  4015d8:	687b      	ldr	r3, [r7, #4]
  4015da:	2204      	movs	r2, #4
  4015dc:	601a      	str	r2, [r3, #0]
}
  4015de:	370c      	adds	r7, #12
  4015e0:	46bd      	mov	sp, r7
  4015e2:	f85d 7b04 	ldr.w	r7, [sp], #4
  4015e6:	4770      	bx	lr

004015e8 <twihs_master_init>:
 * \param p_opt Options for initializing the TWIHS module (see \ref twihs_options_t).
 *
 * \return TWIHS_SUCCESS if initialization is complete, error code otherwise.
 */
uint32_t twihs_master_init(Twihs *p_twihs, const twihs_options_t *p_opt)
{
  4015e8:	b580      	push	{r7, lr}
  4015ea:	b084      	sub	sp, #16
  4015ec:	af00      	add	r7, sp, #0
  4015ee:	6078      	str	r0, [r7, #4]
  4015f0:	6039      	str	r1, [r7, #0]
	uint32_t status = TWIHS_SUCCESS;
  4015f2:	2300      	movs	r3, #0
  4015f4:	60fb      	str	r3, [r7, #12]

	/* Disable TWIHS interrupts */
	p_twihs->TWIHS_IDR = ~0UL;
  4015f6:	687b      	ldr	r3, [r7, #4]
  4015f8:	f04f 32ff 	mov.w	r2, #4294967295
  4015fc:	629a      	str	r2, [r3, #40]	; 0x28

	/* Dummy read in status register */
	p_twihs->TWIHS_SR;
  4015fe:	687b      	ldr	r3, [r7, #4]
  401600:	6a1b      	ldr	r3, [r3, #32]

	/* Reset TWIHS peripheral */
	twihs_reset(p_twihs);
  401602:	6878      	ldr	r0, [r7, #4]
  401604:	4b0b      	ldr	r3, [pc, #44]	; (401634 <twihs_master_init+0x4c>)
  401606:	4798      	blx	r3

	twihs_enable_master_mode(p_twihs);
  401608:	6878      	ldr	r0, [r7, #4]
  40160a:	4b0b      	ldr	r3, [pc, #44]	; (401638 <twihs_master_init+0x50>)
  40160c:	4798      	blx	r3

	/* Select the speed */
	if (twihs_set_speed(p_twihs, p_opt->speed, p_opt->master_clk) == FAIL) {
  40160e:	683b      	ldr	r3, [r7, #0]
  401610:	685a      	ldr	r2, [r3, #4]
  401612:	683b      	ldr	r3, [r7, #0]
  401614:	681b      	ldr	r3, [r3, #0]
  401616:	6878      	ldr	r0, [r7, #4]
  401618:	4611      	mov	r1, r2
  40161a:	461a      	mov	r2, r3
  40161c:	4b07      	ldr	r3, [pc, #28]	; (40163c <twihs_master_init+0x54>)
  40161e:	4798      	blx	r3
  401620:	4603      	mov	r3, r0
  401622:	2b01      	cmp	r3, #1
  401624:	d101      	bne.n	40162a <twihs_master_init+0x42>
		/* The desired speed setting is rejected */
		status = TWIHS_INVALID_ARGUMENT;
  401626:	2301      	movs	r3, #1
  401628:	60fb      	str	r3, [r7, #12]
	}

	return status;
  40162a:	68fb      	ldr	r3, [r7, #12]
}
  40162c:	4618      	mov	r0, r3
  40162e:	3710      	adds	r7, #16
  401630:	46bd      	mov	sp, r7
  401632:	bd80      	pop	{r7, pc}
  401634:	004018d1 	.word	0x004018d1
  401638:	004015c5 	.word	0x004015c5
  40163c:	00401641 	.word	0x00401641

00401640 <twihs_set_speed>:
 *
 * \retval PASS New speed setting is accepted.
 * \retval FAIL New speed setting is rejected.
 */
uint32_t twihs_set_speed(Twihs *p_twihs, uint32_t ul_speed, uint32_t ul_mck)
{
  401640:	b480      	push	{r7}
  401642:	b087      	sub	sp, #28
  401644:	af00      	add	r7, sp, #0
  401646:	60f8      	str	r0, [r7, #12]
  401648:	60b9      	str	r1, [r7, #8]
  40164a:	607a      	str	r2, [r7, #4]
	uint32_t ckdiv = 0;
  40164c:	2300      	movs	r3, #0
  40164e:	617b      	str	r3, [r7, #20]
	uint32_t c_lh_div;

	/* High-Speed can be only used in slave mode, 400k is the max speed allowed for master */
	if (ul_speed > I2C_FAST_MODE_SPEED) {
  401650:	68bb      	ldr	r3, [r7, #8]
  401652:	4a16      	ldr	r2, [pc, #88]	; (4016ac <twihs_set_speed+0x6c>)
  401654:	4293      	cmp	r3, r2
  401656:	d901      	bls.n	40165c <twihs_set_speed+0x1c>
		return FAIL;
  401658:	2301      	movs	r3, #1
  40165a:	e021      	b.n	4016a0 <twihs_set_speed+0x60>
	}

	c_lh_div = ul_mck / (ul_speed * TWIHS_CLK_DIVIDER) - TWIHS_CLK_CALC_ARGU;
  40165c:	68bb      	ldr	r3, [r7, #8]
  40165e:	005b      	lsls	r3, r3, #1
  401660:	687a      	ldr	r2, [r7, #4]
  401662:	fbb2 f3f3 	udiv	r3, r2, r3
  401666:	3b04      	subs	r3, #4
  401668:	613b      	str	r3, [r7, #16]

	/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
	while ((c_lh_div > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  40166a:	e005      	b.n	401678 <twihs_set_speed+0x38>
		/* Increase clock divider */
		ckdiv++;
  40166c:	697b      	ldr	r3, [r7, #20]
  40166e:	3301      	adds	r3, #1
  401670:	617b      	str	r3, [r7, #20]
		/* Divide cldiv value */
		c_lh_div /= TWIHS_CLK_DIVIDER;
  401672:	693b      	ldr	r3, [r7, #16]
  401674:	085b      	lsrs	r3, r3, #1
  401676:	613b      	str	r3, [r7, #16]
	}

	c_lh_div = ul_mck / (ul_speed * TWIHS_CLK_DIVIDER) - TWIHS_CLK_CALC_ARGU;

	/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
	while ((c_lh_div > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  401678:	693b      	ldr	r3, [r7, #16]
  40167a:	2bff      	cmp	r3, #255	; 0xff
  40167c:	d902      	bls.n	401684 <twihs_set_speed+0x44>
  40167e:	697b      	ldr	r3, [r7, #20]
  401680:	2b06      	cmp	r3, #6
  401682:	d9f3      	bls.n	40166c <twihs_set_speed+0x2c>
		c_lh_div /= TWIHS_CLK_DIVIDER;
	}

	/* set clock waveform generator register */
	p_twihs->TWIHS_CWGR =
			TWIHS_CWGR_CLDIV(c_lh_div) | TWIHS_CWGR_CHDIV(c_lh_div) |
  401684:	693b      	ldr	r3, [r7, #16]
  401686:	b2da      	uxtb	r2, r3
  401688:	693b      	ldr	r3, [r7, #16]
  40168a:	021b      	lsls	r3, r3, #8
  40168c:	b29b      	uxth	r3, r3
  40168e:	431a      	orrs	r2, r3
			TWIHS_CWGR_CKDIV(ckdiv);
  401690:	697b      	ldr	r3, [r7, #20]
  401692:	041b      	lsls	r3, r3, #16
  401694:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
		c_lh_div /= TWIHS_CLK_DIVIDER;
	}

	/* set clock waveform generator register */
	p_twihs->TWIHS_CWGR =
			TWIHS_CWGR_CLDIV(c_lh_div) | TWIHS_CWGR_CHDIV(c_lh_div) |
  401698:	431a      	orrs	r2, r3
		/* Divide cldiv value */
		c_lh_div /= TWIHS_CLK_DIVIDER;
	}

	/* set clock waveform generator register */
	p_twihs->TWIHS_CWGR =
  40169a:	68fb      	ldr	r3, [r7, #12]
  40169c:	611a      	str	r2, [r3, #16]
			TWIHS_CWGR_CLDIV(c_lh_div) | TWIHS_CWGR_CHDIV(c_lh_div) |
			TWIHS_CWGR_CKDIV(ckdiv);

	return PASS;
  40169e:	2300      	movs	r3, #0
}
  4016a0:	4618      	mov	r0, r3
  4016a2:	371c      	adds	r7, #28
  4016a4:	46bd      	mov	sp, r7
  4016a6:	f85d 7b04 	ldr.w	r7, [sp], #4
  4016aa:	4770      	bx	lr
  4016ac:	00061a80 	.word	0x00061a80

004016b0 <twihs_mk_addr>:
 * which byte is the MSB to start with.
 *
 * Please see the device datasheet for details on this.
 */
static uint32_t twihs_mk_addr(const uint8_t *addr, int len)
{
  4016b0:	b480      	push	{r7}
  4016b2:	b085      	sub	sp, #20
  4016b4:	af00      	add	r7, sp, #0
  4016b6:	6078      	str	r0, [r7, #4]
  4016b8:	6039      	str	r1, [r7, #0]
	uint32_t val;

	if (len == 0)
  4016ba:	683b      	ldr	r3, [r7, #0]
  4016bc:	2b00      	cmp	r3, #0
  4016be:	d101      	bne.n	4016c4 <twihs_mk_addr+0x14>
		return 0;
  4016c0:	2300      	movs	r3, #0
  4016c2:	e01d      	b.n	401700 <twihs_mk_addr+0x50>

	val = addr[0];
  4016c4:	687b      	ldr	r3, [r7, #4]
  4016c6:	781b      	ldrb	r3, [r3, #0]
  4016c8:	60fb      	str	r3, [r7, #12]
	if (len > 1) {
  4016ca:	683b      	ldr	r3, [r7, #0]
  4016cc:	2b01      	cmp	r3, #1
  4016ce:	dd09      	ble.n	4016e4 <twihs_mk_addr+0x34>
		val <<= 8;
  4016d0:	68fb      	ldr	r3, [r7, #12]
  4016d2:	021b      	lsls	r3, r3, #8
  4016d4:	60fb      	str	r3, [r7, #12]
		val |= addr[1];
  4016d6:	687b      	ldr	r3, [r7, #4]
  4016d8:	3301      	adds	r3, #1
  4016da:	781b      	ldrb	r3, [r3, #0]
  4016dc:	461a      	mov	r2, r3
  4016de:	68fb      	ldr	r3, [r7, #12]
  4016e0:	4313      	orrs	r3, r2
  4016e2:	60fb      	str	r3, [r7, #12]
	}
	if (len > 2) {
  4016e4:	683b      	ldr	r3, [r7, #0]
  4016e6:	2b02      	cmp	r3, #2
  4016e8:	dd09      	ble.n	4016fe <twihs_mk_addr+0x4e>
		val <<= 8;
  4016ea:	68fb      	ldr	r3, [r7, #12]
  4016ec:	021b      	lsls	r3, r3, #8
  4016ee:	60fb      	str	r3, [r7, #12]
		val |= addr[2];
  4016f0:	687b      	ldr	r3, [r7, #4]
  4016f2:	3302      	adds	r3, #2
  4016f4:	781b      	ldrb	r3, [r3, #0]
  4016f6:	461a      	mov	r2, r3
  4016f8:	68fb      	ldr	r3, [r7, #12]
  4016fa:	4313      	orrs	r3, r2
  4016fc:	60fb      	str	r3, [r7, #12]
	}
	return val;
  4016fe:	68fb      	ldr	r3, [r7, #12]
}
  401700:	4618      	mov	r0, r3
  401702:	3714      	adds	r7, #20
  401704:	46bd      	mov	sp, r7
  401706:	f85d 7b04 	ldr.w	r7, [sp], #4
  40170a:	4770      	bx	lr

0040170c <twihs_master_read>:
 * \param p_packet Packet information and data (see \ref twihs_packet_t).
 *
 * \return TWIHS_SUCCESS if all bytes were read, error code otherwise.
 */
uint32_t twihs_master_read(Twihs *p_twihs, twihs_packet_t *p_packet)
{
  40170c:	b580      	push	{r7, lr}
  40170e:	b086      	sub	sp, #24
  401710:	af00      	add	r7, sp, #0
  401712:	6078      	str	r0, [r7, #4]
  401714:	6039      	str	r1, [r7, #0]
	uint32_t status, cnt = p_packet->length;
  401716:	683b      	ldr	r3, [r7, #0]
  401718:	68db      	ldr	r3, [r3, #12]
  40171a:	617b      	str	r3, [r7, #20]
	uint8_t *buffer = p_packet->buffer;
  40171c:	683b      	ldr	r3, [r7, #0]
  40171e:	689b      	ldr	r3, [r3, #8]
  401720:	613b      	str	r3, [r7, #16]
	uint32_t timeout = TWIHS_TIMEOUT;
  401722:	f643 2398 	movw	r3, #15000	; 0x3a98
  401726:	60fb      	str	r3, [r7, #12]

	/* Check argument */
	if (cnt == 0) {
  401728:	697b      	ldr	r3, [r7, #20]
  40172a:	2b00      	cmp	r3, #0
  40172c:	d101      	bne.n	401732 <twihs_master_read+0x26>
		return TWIHS_INVALID_ARGUMENT;
  40172e:	2301      	movs	r3, #1
  401730:	e059      	b.n	4017e6 <twihs_master_read+0xda>
	}

	/* Set read mode, slave address and 3 internal address byte lengths */
	p_twihs->TWIHS_MMR = 0;
  401732:	687b      	ldr	r3, [r7, #4]
  401734:	2200      	movs	r2, #0
  401736:	605a      	str	r2, [r3, #4]
	p_twihs->TWIHS_MMR = TWIHS_MMR_MREAD | TWIHS_MMR_DADR(p_packet->chip) |
  401738:	683b      	ldr	r3, [r7, #0]
  40173a:	7c1b      	ldrb	r3, [r3, #16]
  40173c:	041b      	lsls	r3, r3, #16
  40173e:	f403 02fe 	and.w	r2, r3, #8323072	; 0x7f0000
			((p_packet->addr_length << TWIHS_MMR_IADRSZ_Pos) &
  401742:	683b      	ldr	r3, [r7, #0]
  401744:	685b      	ldr	r3, [r3, #4]
  401746:	021b      	lsls	r3, r3, #8
  401748:	f403 7340 	and.w	r3, r3, #768	; 0x300
		return TWIHS_INVALID_ARGUMENT;
	}

	/* Set read mode, slave address and 3 internal address byte lengths */
	p_twihs->TWIHS_MMR = 0;
	p_twihs->TWIHS_MMR = TWIHS_MMR_MREAD | TWIHS_MMR_DADR(p_packet->chip) |
  40174c:	4313      	orrs	r3, r2
  40174e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
  401752:	687b      	ldr	r3, [r7, #4]
  401754:	605a      	str	r2, [r3, #4]
			((p_packet->addr_length << TWIHS_MMR_IADRSZ_Pos) &
			TWIHS_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twihs->TWIHS_IADR = 0;
  401756:	687b      	ldr	r3, [r7, #4]
  401758:	2200      	movs	r2, #0
  40175a:	60da      	str	r2, [r3, #12]
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);
  40175c:	683a      	ldr	r2, [r7, #0]
  40175e:	683b      	ldr	r3, [r7, #0]
  401760:	685b      	ldr	r3, [r3, #4]
  401762:	4610      	mov	r0, r2
  401764:	4619      	mov	r1, r3
  401766:	4b22      	ldr	r3, [pc, #136]	; (4017f0 <twihs_master_read+0xe4>)
  401768:	4798      	blx	r3
  40176a:	4602      	mov	r2, r0
  40176c:	687b      	ldr	r3, [r7, #4]
  40176e:	60da      	str	r2, [r3, #12]

	/* Send a START Condition */
	p_twihs->TWIHS_CR = TWIHS_CR_START;
  401770:	687b      	ldr	r3, [r7, #4]
  401772:	2201      	movs	r2, #1
  401774:	601a      	str	r2, [r3, #0]

	while (cnt > 0) {
  401776:	e029      	b.n	4017cc <twihs_master_read+0xc0>
		status = p_twihs->TWIHS_SR;
  401778:	687b      	ldr	r3, [r7, #4]
  40177a:	6a1b      	ldr	r3, [r3, #32]
  40177c:	60bb      	str	r3, [r7, #8]
		if (status & TWIHS_SR_NACK) {
  40177e:	68bb      	ldr	r3, [r7, #8]
  401780:	f403 7380 	and.w	r3, r3, #256	; 0x100
  401784:	2b00      	cmp	r3, #0
  401786:	d001      	beq.n	40178c <twihs_master_read+0x80>
			return TWIHS_RECEIVE_NACK;
  401788:	2305      	movs	r3, #5
  40178a:	e02c      	b.n	4017e6 <twihs_master_read+0xda>
		}
		if (!timeout--) {
  40178c:	68fb      	ldr	r3, [r7, #12]
  40178e:	1e5a      	subs	r2, r3, #1
  401790:	60fa      	str	r2, [r7, #12]
  401792:	2b00      	cmp	r3, #0
  401794:	d101      	bne.n	40179a <twihs_master_read+0x8e>
			return TWIHS_ERROR_TIMEOUT;
  401796:	2309      	movs	r3, #9
  401798:	e025      	b.n	4017e6 <twihs_master_read+0xda>
		}
		/* Last byte ? */
		if (cnt == 1) {
  40179a:	697b      	ldr	r3, [r7, #20]
  40179c:	2b01      	cmp	r3, #1
  40179e:	d102      	bne.n	4017a6 <twihs_master_read+0x9a>
			p_twihs->TWIHS_CR = TWIHS_CR_STOP;
  4017a0:	687b      	ldr	r3, [r7, #4]
  4017a2:	2202      	movs	r2, #2
  4017a4:	601a      	str	r2, [r3, #0]
		}

		if (!(status & TWIHS_SR_RXRDY)) {
  4017a6:	68bb      	ldr	r3, [r7, #8]
  4017a8:	f003 0302 	and.w	r3, r3, #2
  4017ac:	2b00      	cmp	r3, #0
  4017ae:	d100      	bne.n	4017b2 <twihs_master_read+0xa6>
			continue;
  4017b0:	e00c      	b.n	4017cc <twihs_master_read+0xc0>
		}
		*buffer++ = p_twihs->TWIHS_RHR;
  4017b2:	693b      	ldr	r3, [r7, #16]
  4017b4:	1c5a      	adds	r2, r3, #1
  4017b6:	613a      	str	r2, [r7, #16]
  4017b8:	687a      	ldr	r2, [r7, #4]
  4017ba:	6b12      	ldr	r2, [r2, #48]	; 0x30
  4017bc:	b2d2      	uxtb	r2, r2
  4017be:	701a      	strb	r2, [r3, #0]

		cnt--;
  4017c0:	697b      	ldr	r3, [r7, #20]
  4017c2:	3b01      	subs	r3, #1
  4017c4:	617b      	str	r3, [r7, #20]
		timeout = TWIHS_TIMEOUT;
  4017c6:	f643 2398 	movw	r3, #15000	; 0x3a98
  4017ca:	60fb      	str	r3, [r7, #12]
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);

	/* Send a START Condition */
	p_twihs->TWIHS_CR = TWIHS_CR_START;

	while (cnt > 0) {
  4017cc:	697b      	ldr	r3, [r7, #20]
  4017ce:	2b00      	cmp	r3, #0
  4017d0:	d1d2      	bne.n	401778 <twihs_master_read+0x6c>

		cnt--;
		timeout = TWIHS_TIMEOUT;
	}

	while (!(p_twihs->TWIHS_SR & TWIHS_SR_TXCOMP)) {
  4017d2:	bf00      	nop
  4017d4:	687b      	ldr	r3, [r7, #4]
  4017d6:	6a1b      	ldr	r3, [r3, #32]
  4017d8:	f003 0301 	and.w	r3, r3, #1
  4017dc:	2b00      	cmp	r3, #0
  4017de:	d0f9      	beq.n	4017d4 <twihs_master_read+0xc8>
	}

	p_twihs->TWIHS_SR;
  4017e0:	687b      	ldr	r3, [r7, #4]
  4017e2:	6a1b      	ldr	r3, [r3, #32]

	return TWIHS_SUCCESS;
  4017e4:	2300      	movs	r3, #0
}
  4017e6:	4618      	mov	r0, r3
  4017e8:	3718      	adds	r7, #24
  4017ea:	46bd      	mov	sp, r7
  4017ec:	bd80      	pop	{r7, pc}
  4017ee:	bf00      	nop
  4017f0:	004016b1 	.word	0x004016b1

004017f4 <twihs_master_write>:
 * \param p_packet Packet information and data (see \ref twihs_packet_t).
 *
 * \return TWIHS_SUCCESS if all bytes were written, error code otherwise.
 */
uint32_t twihs_master_write(Twihs *p_twihs, twihs_packet_t *p_packet)
{
  4017f4:	b580      	push	{r7, lr}
  4017f6:	b086      	sub	sp, #24
  4017f8:	af00      	add	r7, sp, #0
  4017fa:	6078      	str	r0, [r7, #4]
  4017fc:	6039      	str	r1, [r7, #0]
	uint32_t status, cnt = p_packet->length;
  4017fe:	683b      	ldr	r3, [r7, #0]
  401800:	68db      	ldr	r3, [r3, #12]
  401802:	617b      	str	r3, [r7, #20]
	uint8_t *buffer = p_packet->buffer;
  401804:	683b      	ldr	r3, [r7, #0]
  401806:	689b      	ldr	r3, [r3, #8]
  401808:	613b      	str	r3, [r7, #16]

	/* Check argument */
	if (cnt == 0) {
  40180a:	697b      	ldr	r3, [r7, #20]
  40180c:	2b00      	cmp	r3, #0
  40180e:	d101      	bne.n	401814 <twihs_master_write+0x20>
		return TWIHS_INVALID_ARGUMENT;
  401810:	2301      	movs	r3, #1
  401812:	e056      	b.n	4018c2 <twihs_master_write+0xce>
	}

	/* Set write mode, slave address and 3 internal address byte lengths */
	p_twihs->TWIHS_MMR = 0;
  401814:	687b      	ldr	r3, [r7, #4]
  401816:	2200      	movs	r2, #0
  401818:	605a      	str	r2, [r3, #4]
	p_twihs->TWIHS_MMR = TWIHS_MMR_DADR(p_packet->chip) |
  40181a:	683b      	ldr	r3, [r7, #0]
  40181c:	7c1b      	ldrb	r3, [r3, #16]
  40181e:	041b      	lsls	r3, r3, #16
  401820:	f403 02fe 	and.w	r2, r3, #8323072	; 0x7f0000
			((p_packet->addr_length << TWIHS_MMR_IADRSZ_Pos) &
  401824:	683b      	ldr	r3, [r7, #0]
  401826:	685b      	ldr	r3, [r3, #4]
  401828:	021b      	lsls	r3, r3, #8
  40182a:	f403 7340 	and.w	r3, r3, #768	; 0x300
		return TWIHS_INVALID_ARGUMENT;
	}

	/* Set write mode, slave address and 3 internal address byte lengths */
	p_twihs->TWIHS_MMR = 0;
	p_twihs->TWIHS_MMR = TWIHS_MMR_DADR(p_packet->chip) |
  40182e:	431a      	orrs	r2, r3
  401830:	687b      	ldr	r3, [r7, #4]
  401832:	605a      	str	r2, [r3, #4]
			((p_packet->addr_length << TWIHS_MMR_IADRSZ_Pos) &
			TWIHS_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twihs->TWIHS_IADR = 0;
  401834:	687b      	ldr	r3, [r7, #4]
  401836:	2200      	movs	r2, #0
  401838:	60da      	str	r2, [r3, #12]
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);
  40183a:	683a      	ldr	r2, [r7, #0]
  40183c:	683b      	ldr	r3, [r7, #0]
  40183e:	685b      	ldr	r3, [r3, #4]
  401840:	4610      	mov	r0, r2
  401842:	4619      	mov	r1, r3
  401844:	4b21      	ldr	r3, [pc, #132]	; (4018cc <twihs_master_write+0xd8>)
  401846:	4798      	blx	r3
  401848:	4602      	mov	r2, r0
  40184a:	687b      	ldr	r3, [r7, #4]
  40184c:	60da      	str	r2, [r3, #12]

	/* Send all bytes */
	while (cnt > 0) {
  40184e:	e019      	b.n	401884 <twihs_master_write+0x90>
		status = p_twihs->TWIHS_SR;
  401850:	687b      	ldr	r3, [r7, #4]
  401852:	6a1b      	ldr	r3, [r3, #32]
  401854:	60fb      	str	r3, [r7, #12]
		if (status & TWIHS_SR_NACK) {
  401856:	68fb      	ldr	r3, [r7, #12]
  401858:	f403 7380 	and.w	r3, r3, #256	; 0x100
  40185c:	2b00      	cmp	r3, #0
  40185e:	d001      	beq.n	401864 <twihs_master_write+0x70>
			return TWIHS_RECEIVE_NACK;
  401860:	2305      	movs	r3, #5
  401862:	e02e      	b.n	4018c2 <twihs_master_write+0xce>
		}

		if (!(status & TWIHS_SR_TXRDY)) {
  401864:	68fb      	ldr	r3, [r7, #12]
  401866:	f003 0304 	and.w	r3, r3, #4
  40186a:	2b00      	cmp	r3, #0
  40186c:	d100      	bne.n	401870 <twihs_master_write+0x7c>
			continue;
  40186e:	e009      	b.n	401884 <twihs_master_write+0x90>
		}
		p_twihs->TWIHS_THR = *buffer++;
  401870:	693b      	ldr	r3, [r7, #16]
  401872:	1c5a      	adds	r2, r3, #1
  401874:	613a      	str	r2, [r7, #16]
  401876:	781b      	ldrb	r3, [r3, #0]
  401878:	461a      	mov	r2, r3
  40187a:	687b      	ldr	r3, [r7, #4]
  40187c:	635a      	str	r2, [r3, #52]	; 0x34

		cnt--;
  40187e:	697b      	ldr	r3, [r7, #20]
  401880:	3b01      	subs	r3, #1
  401882:	617b      	str	r3, [r7, #20]
	/* Set internal address for remote chip */
	p_twihs->TWIHS_IADR = 0;
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);

	/* Send all bytes */
	while (cnt > 0) {
  401884:	697b      	ldr	r3, [r7, #20]
  401886:	2b00      	cmp	r3, #0
  401888:	d1e2      	bne.n	401850 <twihs_master_write+0x5c>

		cnt--;
	}

	while (1) {
		status = p_twihs->TWIHS_SR;
  40188a:	687b      	ldr	r3, [r7, #4]
  40188c:	6a1b      	ldr	r3, [r3, #32]
  40188e:	60fb      	str	r3, [r7, #12]
		if (status & TWIHS_SR_NACK) {
  401890:	68fb      	ldr	r3, [r7, #12]
  401892:	f403 7380 	and.w	r3, r3, #256	; 0x100
  401896:	2b00      	cmp	r3, #0
  401898:	d001      	beq.n	40189e <twihs_master_write+0xaa>
			return TWIHS_RECEIVE_NACK;
  40189a:	2305      	movs	r3, #5
  40189c:	e011      	b.n	4018c2 <twihs_master_write+0xce>
		}

		if (status & TWIHS_SR_TXRDY) {
  40189e:	68fb      	ldr	r3, [r7, #12]
  4018a0:	f003 0304 	and.w	r3, r3, #4
  4018a4:	2b00      	cmp	r3, #0
  4018a6:	d004      	beq.n	4018b2 <twihs_master_write+0xbe>
			break;
  4018a8:	bf00      	nop
		}
	}

	p_twihs->TWIHS_CR = TWIHS_CR_STOP;
  4018aa:	687b      	ldr	r3, [r7, #4]
  4018ac:	2202      	movs	r2, #2
  4018ae:	601a      	str	r2, [r3, #0]

	while (!(p_twihs->TWIHS_SR & TWIHS_SR_TXCOMP)) {
  4018b0:	e000      	b.n	4018b4 <twihs_master_write+0xc0>
		}

		if (status & TWIHS_SR_TXRDY) {
			break;
		}
	}
  4018b2:	e7ea      	b.n	40188a <twihs_master_write+0x96>

	p_twihs->TWIHS_CR = TWIHS_CR_STOP;

	while (!(p_twihs->TWIHS_SR & TWIHS_SR_TXCOMP)) {
  4018b4:	687b      	ldr	r3, [r7, #4]
  4018b6:	6a1b      	ldr	r3, [r3, #32]
  4018b8:	f003 0301 	and.w	r3, r3, #1
  4018bc:	2b00      	cmp	r3, #0
  4018be:	d0f9      	beq.n	4018b4 <twihs_master_write+0xc0>
	}

	return TWIHS_SUCCESS;
  4018c0:	2300      	movs	r3, #0
}
  4018c2:	4618      	mov	r0, r3
  4018c4:	3718      	adds	r7, #24
  4018c6:	46bd      	mov	sp, r7
  4018c8:	bd80      	pop	{r7, pc}
  4018ca:	bf00      	nop
  4018cc:	004016b1 	.word	0x004016b1

004018d0 <twihs_reset>:
 * \brief Reset TWIHS.
 *
 * \param p_twihs Pointer to a TWIHS instance.
 */
void twihs_reset(Twihs *p_twihs)
{
  4018d0:	b480      	push	{r7}
  4018d2:	b083      	sub	sp, #12
  4018d4:	af00      	add	r7, sp, #0
  4018d6:	6078      	str	r0, [r7, #4]
	/* Set SWRST bit to reset TWIHS peripheral */
	p_twihs->TWIHS_CR = TWIHS_CR_SWRST;
  4018d8:	687b      	ldr	r3, [r7, #4]
  4018da:	2280      	movs	r2, #128	; 0x80
  4018dc:	601a      	str	r2, [r3, #0]
	p_twihs->TWIHS_RHR;
  4018de:	687b      	ldr	r3, [r7, #4]
  4018e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
  4018e2:	370c      	adds	r7, #12
  4018e4:	46bd      	mov	sp, r7
  4018e6:	f85d 7b04 	ldr.w	r7, [sp], #4
  4018ea:	4770      	bx	lr

004018ec <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
  4018ec:	b480      	push	{r7}
  4018ee:	b085      	sub	sp, #20
  4018f0:	af00      	add	r7, sp, #0
  4018f2:	6078      	str	r0, [r7, #4]
  4018f4:	6039      	str	r1, [r7, #0]
	uint32_t cd = 0;
  4018f6:	2300      	movs	r3, #0
  4018f8:	60fb      	str	r3, [r7, #12]

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
  4018fa:	687b      	ldr	r3, [r7, #4]
  4018fc:	22ac      	movs	r2, #172	; 0xac
  4018fe:	601a      	str	r2, [r3, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
  401900:	683b      	ldr	r3, [r7, #0]
  401902:	681a      	ldr	r2, [r3, #0]
  401904:	683b      	ldr	r3, [r7, #0]
  401906:	685b      	ldr	r3, [r3, #4]
  401908:	fbb2 f3f3 	udiv	r3, r2, r3
  40190c:	091b      	lsrs	r3, r3, #4
  40190e:	60fb      	str	r3, [r7, #12]
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
  401910:	68fb      	ldr	r3, [r7, #12]
  401912:	2b00      	cmp	r3, #0
  401914:	d003      	beq.n	40191e <uart_init+0x32>
  401916:	68fb      	ldr	r3, [r7, #12]
  401918:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
  40191c:	d301      	bcc.n	401922 <uart_init+0x36>
		return 1;
  40191e:	2301      	movs	r3, #1
  401920:	e00a      	b.n	401938 <uart_init+0x4c>

	p_uart->UART_BRGR = cd;
  401922:	687b      	ldr	r3, [r7, #4]
  401924:	68fa      	ldr	r2, [r7, #12]
  401926:	621a      	str	r2, [r3, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
  401928:	683b      	ldr	r3, [r7, #0]
  40192a:	689a      	ldr	r2, [r3, #8]
  40192c:	687b      	ldr	r3, [r7, #4]
  40192e:	605a      	str	r2, [r3, #4]
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
  401930:	687b      	ldr	r3, [r7, #4]
  401932:	2250      	movs	r2, #80	; 0x50
  401934:	601a      	str	r2, [r3, #0]

	return 0;
  401936:	2300      	movs	r3, #0
}
  401938:	4618      	mov	r0, r3
  40193a:	3714      	adds	r7, #20
  40193c:	46bd      	mov	sp, r7
  40193e:	f85d 7b04 	ldr.w	r7, [sp], #4
  401942:	4770      	bx	lr

00401944 <uart_write>:
 *
 * \retval 0 Success.
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
  401944:	b480      	push	{r7}
  401946:	b083      	sub	sp, #12
  401948:	af00      	add	r7, sp, #0
  40194a:	6078      	str	r0, [r7, #4]
  40194c:	460b      	mov	r3, r1
  40194e:	70fb      	strb	r3, [r7, #3]
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  401950:	687b      	ldr	r3, [r7, #4]
  401952:	695b      	ldr	r3, [r3, #20]
  401954:	f003 0302 	and.w	r3, r3, #2
  401958:	2b00      	cmp	r3, #0
  40195a:	d101      	bne.n	401960 <uart_write+0x1c>
		return 1;
  40195c:	2301      	movs	r3, #1
  40195e:	e003      	b.n	401968 <uart_write+0x24>

	/* Send character */
	p_uart->UART_THR = uc_data;
  401960:	78fa      	ldrb	r2, [r7, #3]
  401962:	687b      	ldr	r3, [r7, #4]
  401964:	61da      	str	r2, [r3, #28]
	return 0;
  401966:	2300      	movs	r3, #0
}
  401968:	4618      	mov	r0, r3
  40196a:	370c      	adds	r7, #12
  40196c:	46bd      	mov	sp, r7
  40196e:	f85d 7b04 	ldr.w	r7, [sp], #4
  401972:	4770      	bx	lr

00401974 <uart_read>:
 *
 * \retval 0 Success.
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
  401974:	b480      	push	{r7}
  401976:	b083      	sub	sp, #12
  401978:	af00      	add	r7, sp, #0
  40197a:	6078      	str	r0, [r7, #4]
  40197c:	6039      	str	r1, [r7, #0]
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  40197e:	687b      	ldr	r3, [r7, #4]
  401980:	695b      	ldr	r3, [r3, #20]
  401982:	f003 0301 	and.w	r3, r3, #1
  401986:	2b00      	cmp	r3, #0
  401988:	d101      	bne.n	40198e <uart_read+0x1a>
		return 1;
  40198a:	2301      	movs	r3, #1
  40198c:	e005      	b.n	40199a <uart_read+0x26>

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  40198e:	687b      	ldr	r3, [r7, #4]
  401990:	699b      	ldr	r3, [r3, #24]
  401992:	b2da      	uxtb	r2, r3
  401994:	683b      	ldr	r3, [r7, #0]
  401996:	701a      	strb	r2, [r3, #0]
	return 0;
  401998:	2300      	movs	r3, #0
}
  40199a:	4618      	mov	r0, r3
  40199c:	370c      	adds	r7, #12
  40199e:	46bd      	mov	sp, r7
  4019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
  4019a4:	4770      	bx	lr
  4019a6:	bf00      	nop

004019a8 <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  4019a8:	b480      	push	{r7}
  4019aa:	b089      	sub	sp, #36	; 0x24
  4019ac:	af00      	add	r7, sp, #0
  4019ae:	60f8      	str	r0, [r7, #12]
  4019b0:	60b9      	str	r1, [r7, #8]
  4019b2:	607a      	str	r2, [r7, #4]
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  4019b4:	68bb      	ldr	r3, [r7, #8]
  4019b6:	011a      	lsls	r2, r3, #4
  4019b8:	687b      	ldr	r3, [r7, #4]
  4019ba:	429a      	cmp	r2, r3
  4019bc:	d802      	bhi.n	4019c4 <usart_set_async_baudrate+0x1c>
		over = HIGH_FRQ_SAMPLE_DIV;
  4019be:	2310      	movs	r3, #16
  4019c0:	61fb      	str	r3, [r7, #28]
  4019c2:	e001      	b.n	4019c8 <usart_set_async_baudrate+0x20>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
  4019c4:	2308      	movs	r3, #8
  4019c6:	61fb      	str	r3, [r7, #28]
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  4019c8:	687b      	ldr	r3, [r7, #4]
  4019ca:	00da      	lsls	r2, r3, #3
  4019cc:	69fb      	ldr	r3, [r7, #28]
  4019ce:	68b9      	ldr	r1, [r7, #8]
  4019d0:	fb01 f303 	mul.w	r3, r1, r3
  4019d4:	085b      	lsrs	r3, r3, #1
  4019d6:	441a      	add	r2, r3
  4019d8:	69fb      	ldr	r3, [r7, #28]
  4019da:	68b9      	ldr	r1, [r7, #8]
  4019dc:	fb01 f303 	mul.w	r3, r1, r3
  4019e0:	fbb2 f3f3 	udiv	r3, r2, r3
  4019e4:	61bb      	str	r3, [r7, #24]
	cd = cd_fp >> 3;
  4019e6:	69bb      	ldr	r3, [r7, #24]
  4019e8:	08db      	lsrs	r3, r3, #3
  4019ea:	617b      	str	r3, [r7, #20]
	fp = cd_fp & 0x07;
  4019ec:	69bb      	ldr	r3, [r7, #24]
  4019ee:	f003 0307 	and.w	r3, r3, #7
  4019f2:	613b      	str	r3, [r7, #16]
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  4019f4:	697b      	ldr	r3, [r7, #20]
  4019f6:	2b00      	cmp	r3, #0
  4019f8:	d003      	beq.n	401a02 <usart_set_async_baudrate+0x5a>
  4019fa:	697b      	ldr	r3, [r7, #20]
  4019fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
  401a00:	d301      	bcc.n	401a06 <usart_set_async_baudrate+0x5e>
		return 1;
  401a02:	2301      	movs	r3, #1
  401a04:	e00f      	b.n	401a26 <usart_set_async_baudrate+0x7e>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
  401a06:	69fb      	ldr	r3, [r7, #28]
  401a08:	2b08      	cmp	r3, #8
  401a0a:	d105      	bne.n	401a18 <usart_set_async_baudrate+0x70>
		p_usart->US_MR |= US_MR_OVER;
  401a0c:	68fb      	ldr	r3, [r7, #12]
  401a0e:	685b      	ldr	r3, [r3, #4]
  401a10:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
  401a14:	68fb      	ldr	r3, [r7, #12]
  401a16:	605a      	str	r2, [r3, #4]
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  401a18:	693b      	ldr	r3, [r7, #16]
  401a1a:	041a      	lsls	r2, r3, #16
  401a1c:	697b      	ldr	r3, [r7, #20]
  401a1e:	431a      	orrs	r2, r3
  401a20:	68fb      	ldr	r3, [r7, #12]
  401a22:	621a      	str	r2, [r3, #32]

	return 0;
  401a24:	2300      	movs	r3, #0
}
  401a26:	4618      	mov	r0, r3
  401a28:	3724      	adds	r7, #36	; 0x24
  401a2a:	46bd      	mov	sp, r7
  401a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
  401a30:	4770      	bx	lr
  401a32:	bf00      	nop

00401a34 <usart_reset>:
 * \brief Reset the USART and disable TX and RX.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset(Usart *p_usart)
{
  401a34:	b580      	push	{r7, lr}
  401a36:	b082      	sub	sp, #8
  401a38:	af00      	add	r7, sp, #0
  401a3a:	6078      	str	r0, [r7, #4]
	/* Disable the Write Protect. */
	usart_disable_writeprotect(p_usart);
  401a3c:	6878      	ldr	r0, [r7, #4]
  401a3e:	4b0d      	ldr	r3, [pc, #52]	; (401a74 <usart_reset+0x40>)
  401a40:	4798      	blx	r3

	/* Reset registers that could cause unpredictable behavior after reset. */
	p_usart->US_MR = 0;
  401a42:	687b      	ldr	r3, [r7, #4]
  401a44:	2200      	movs	r2, #0
  401a46:	605a      	str	r2, [r3, #4]
	p_usart->US_RTOR = 0;
  401a48:	687b      	ldr	r3, [r7, #4]
  401a4a:	2200      	movs	r2, #0
  401a4c:	625a      	str	r2, [r3, #36]	; 0x24
	p_usart->US_TTGR = 0;
  401a4e:	687b      	ldr	r3, [r7, #4]
  401a50:	2200      	movs	r2, #0
  401a52:	629a      	str	r2, [r3, #40]	; 0x28

	/* Disable TX and RX. */
	usart_reset_tx(p_usart);
  401a54:	6878      	ldr	r0, [r7, #4]
  401a56:	4b08      	ldr	r3, [pc, #32]	; (401a78 <usart_reset+0x44>)
  401a58:	4798      	blx	r3
	usart_reset_rx(p_usart);
  401a5a:	6878      	ldr	r0, [r7, #4]
  401a5c:	4b07      	ldr	r3, [pc, #28]	; (401a7c <usart_reset+0x48>)
  401a5e:	4798      	blx	r3
	/* Reset status bits. */
	usart_reset_status(p_usart);
  401a60:	6878      	ldr	r0, [r7, #4]
  401a62:	4b07      	ldr	r3, [pc, #28]	; (401a80 <usart_reset+0x4c>)
  401a64:	4798      	blx	r3
	/* Turn off RTS and DTR if exist. */
	usart_drive_RTS_pin_high(p_usart);
  401a66:	6878      	ldr	r0, [r7, #4]
  401a68:	4b06      	ldr	r3, [pc, #24]	; (401a84 <usart_reset+0x50>)
  401a6a:	4798      	blx	r3
#if (SAM3S || SAM4S || SAM3U || SAM4L || SAM4E)
	usart_drive_DTR_pin_high(p_usart);
#endif
}
  401a6c:	3708      	adds	r7, #8
  401a6e:	46bd      	mov	sp, r7
  401a70:	bd80      	pop	{r7, pc}
  401a72:	bf00      	nop
  401a74:	00401cc9 	.word	0x00401cc9
  401a78:	00401b25 	.word	0x00401b25
  401a7c:	00401b71 	.word	0x00401b71
  401a80:	00401bd9 	.word	0x00401bd9
  401a84:	00401bf5 	.word	0x00401bf5

00401a88 <usart_init_rs232>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_rs232(Usart *p_usart,
		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
{
  401a88:	b580      	push	{r7, lr}
  401a8a:	b084      	sub	sp, #16
  401a8c:	af00      	add	r7, sp, #0
  401a8e:	60f8      	str	r0, [r7, #12]
  401a90:	60b9      	str	r1, [r7, #8]
  401a92:	607a      	str	r2, [r7, #4]
	static uint32_t ul_reg_val;

	/* Reset the USART and shut down TX and RX. */
	usart_reset(p_usart);
  401a94:	68f8      	ldr	r0, [r7, #12]
  401a96:	4b1a      	ldr	r3, [pc, #104]	; (401b00 <usart_init_rs232+0x78>)
  401a98:	4798      	blx	r3

	ul_reg_val = 0;
  401a9a:	4b1a      	ldr	r3, [pc, #104]	; (401b04 <usart_init_rs232+0x7c>)
  401a9c:	2200      	movs	r2, #0
  401a9e:	601a      	str	r2, [r3, #0]
	/* Check whether the input values are legal. */
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  401aa0:	68bb      	ldr	r3, [r7, #8]
  401aa2:	2b00      	cmp	r3, #0
  401aa4:	d009      	beq.n	401aba <usart_init_rs232+0x32>
  401aa6:	68bb      	ldr	r3, [r7, #8]
  401aa8:	681b      	ldr	r3, [r3, #0]
  401aaa:	68f8      	ldr	r0, [r7, #12]
  401aac:	4619      	mov	r1, r3
  401aae:	687a      	ldr	r2, [r7, #4]
  401ab0:	4b15      	ldr	r3, [pc, #84]	; (401b08 <usart_init_rs232+0x80>)
  401ab2:	4798      	blx	r3
  401ab4:	4603      	mov	r3, r0
  401ab6:	2b00      	cmp	r3, #0
  401ab8:	d001      	beq.n	401abe <usart_init_rs232+0x36>
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
  401aba:	2301      	movs	r3, #1
  401abc:	e01b      	b.n	401af6 <usart_init_rs232+0x6e>
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  401abe:	68bb      	ldr	r3, [r7, #8]
  401ac0:	685a      	ldr	r2, [r3, #4]
  401ac2:	68bb      	ldr	r3, [r7, #8]
  401ac4:	689b      	ldr	r3, [r3, #8]
  401ac6:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  401ac8:	68bb      	ldr	r3, [r7, #8]
  401aca:	691b      	ldr	r3, [r3, #16]
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  401acc:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  401ace:	68bb      	ldr	r3, [r7, #8]
  401ad0:	68db      	ldr	r3, [r3, #12]
  401ad2:	431a      	orrs	r2, r3
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  401ad4:	4b0b      	ldr	r3, [pc, #44]	; (401b04 <usart_init_rs232+0x7c>)
  401ad6:	681b      	ldr	r3, [r3, #0]
  401ad8:	4313      	orrs	r3, r2
  401ada:	4a0a      	ldr	r2, [pc, #40]	; (401b04 <usart_init_rs232+0x7c>)
  401adc:	6013      	str	r3, [r2, #0]
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;

	/* Configure the USART mode as normal mode. */
	ul_reg_val |= US_MR_USART_MODE_NORMAL;
  401ade:	4b09      	ldr	r3, [pc, #36]	; (401b04 <usart_init_rs232+0x7c>)
  401ae0:	681b      	ldr	r3, [r3, #0]
  401ae2:	4a08      	ldr	r2, [pc, #32]	; (401b04 <usart_init_rs232+0x7c>)
  401ae4:	6013      	str	r3, [r2, #0]

	p_usart->US_MR |= ul_reg_val;
  401ae6:	68fb      	ldr	r3, [r7, #12]
  401ae8:	685a      	ldr	r2, [r3, #4]
  401aea:	4b06      	ldr	r3, [pc, #24]	; (401b04 <usart_init_rs232+0x7c>)
  401aec:	681b      	ldr	r3, [r3, #0]
  401aee:	431a      	orrs	r2, r3
  401af0:	68fb      	ldr	r3, [r7, #12]
  401af2:	605a      	str	r2, [r3, #4]

	return 0;
  401af4:	2300      	movs	r3, #0
}
  401af6:	4618      	mov	r0, r3
  401af8:	3710      	adds	r7, #16
  401afa:	46bd      	mov	sp, r7
  401afc:	bd80      	pop	{r7, pc}
  401afe:	bf00      	nop
  401b00:	00401a35 	.word	0x00401a35
  401b04:	20400988 	.word	0x20400988
  401b08:	004019a9 	.word	0x004019a9

00401b0c <usart_enable_tx>:
 * \brief Enable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_tx(Usart *p_usart)
{
  401b0c:	b480      	push	{r7}
  401b0e:	b083      	sub	sp, #12
  401b10:	af00      	add	r7, sp, #0
  401b12:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_TXEN;
  401b14:	687b      	ldr	r3, [r7, #4]
  401b16:	2240      	movs	r2, #64	; 0x40
  401b18:	601a      	str	r2, [r3, #0]
}
  401b1a:	370c      	adds	r7, #12
  401b1c:	46bd      	mov	sp, r7
  401b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
  401b22:	4770      	bx	lr

00401b24 <usart_reset_tx>:
 * \brief Immediately stop and disable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_tx(Usart *p_usart)
{
  401b24:	b480      	push	{r7}
  401b26:	b083      	sub	sp, #12
  401b28:	af00      	add	r7, sp, #0
  401b2a:	6078      	str	r0, [r7, #4]
	/* Reset transmitter */
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  401b2c:	687b      	ldr	r3, [r7, #4]
  401b2e:	2288      	movs	r2, #136	; 0x88
  401b30:	601a      	str	r2, [r3, #0]
}
  401b32:	370c      	adds	r7, #12
  401b34:	46bd      	mov	sp, r7
  401b36:	f85d 7b04 	ldr.w	r7, [sp], #4
  401b3a:	4770      	bx	lr

00401b3c <usart_set_tx_timeguard>:
 *
 * \param p_usart Pointer to a USART instance.
 * \param timeguard The value of transmit timeguard.
 */
void usart_set_tx_timeguard(Usart *p_usart, uint32_t timeguard)
{
  401b3c:	b480      	push	{r7}
  401b3e:	b083      	sub	sp, #12
  401b40:	af00      	add	r7, sp, #0
  401b42:	6078      	str	r0, [r7, #4]
  401b44:	6039      	str	r1, [r7, #0]
	p_usart->US_TTGR = timeguard;
  401b46:	687b      	ldr	r3, [r7, #4]
  401b48:	683a      	ldr	r2, [r7, #0]
  401b4a:	629a      	str	r2, [r3, #40]	; 0x28
}
  401b4c:	370c      	adds	r7, #12
  401b4e:	46bd      	mov	sp, r7
  401b50:	f85d 7b04 	ldr.w	r7, [sp], #4
  401b54:	4770      	bx	lr
  401b56:	bf00      	nop

00401b58 <usart_enable_rx>:
 * \brief Enable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_rx(Usart *p_usart)
{
  401b58:	b480      	push	{r7}
  401b5a:	b083      	sub	sp, #12
  401b5c:	af00      	add	r7, sp, #0
  401b5e:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RXEN;
  401b60:	687b      	ldr	r3, [r7, #4]
  401b62:	2210      	movs	r2, #16
  401b64:	601a      	str	r2, [r3, #0]
}
  401b66:	370c      	adds	r7, #12
  401b68:	46bd      	mov	sp, r7
  401b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
  401b6e:	4770      	bx	lr

00401b70 <usart_reset_rx>:
 * \brief Immediately stop and disable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_rx(Usart *p_usart)
{
  401b70:	b480      	push	{r7}
  401b72:	b083      	sub	sp, #12
  401b74:	af00      	add	r7, sp, #0
  401b76:	6078      	str	r0, [r7, #4]
	/* Reset Receiver */
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  401b78:	687b      	ldr	r3, [r7, #4]
  401b7a:	2224      	movs	r2, #36	; 0x24
  401b7c:	601a      	str	r2, [r3, #0]
}
  401b7e:	370c      	adds	r7, #12
  401b80:	46bd      	mov	sp, r7
  401b82:	f85d 7b04 	ldr.w	r7, [sp], #4
  401b86:	4770      	bx	lr

00401b88 <usart_enable_interrupt>:
 *
 * \param p_usart Pointer to a USART peripheral.
 * \param ul_sources Interrupt sources bit map.
 */
void usart_enable_interrupt(Usart *p_usart, uint32_t ul_sources)
{
  401b88:	b480      	push	{r7}
  401b8a:	b083      	sub	sp, #12
  401b8c:	af00      	add	r7, sp, #0
  401b8e:	6078      	str	r0, [r7, #4]
  401b90:	6039      	str	r1, [r7, #0]
	p_usart->US_IER = ul_sources;
  401b92:	687b      	ldr	r3, [r7, #4]
  401b94:	683a      	ldr	r2, [r7, #0]
  401b96:	609a      	str	r2, [r3, #8]
}
  401b98:	370c      	adds	r7, #12
  401b9a:	46bd      	mov	sp, r7
  401b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
  401ba0:	4770      	bx	lr
  401ba2:	bf00      	nop

00401ba4 <usart_disable_interrupt>:
 *
 * \param p_usart Pointer to a USART peripheral.
 * \param ul_sources Interrupt sources bit map.
 */
void usart_disable_interrupt(Usart *p_usart, uint32_t ul_sources)
{
  401ba4:	b480      	push	{r7}
  401ba6:	b083      	sub	sp, #12
  401ba8:	af00      	add	r7, sp, #0
  401baa:	6078      	str	r0, [r7, #4]
  401bac:	6039      	str	r1, [r7, #0]
	p_usart->US_IDR = ul_sources;
  401bae:	687b      	ldr	r3, [r7, #4]
  401bb0:	683a      	ldr	r2, [r7, #0]
  401bb2:	60da      	str	r2, [r3, #12]
}
  401bb4:	370c      	adds	r7, #12
  401bb6:	46bd      	mov	sp, r7
  401bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
  401bbc:	4770      	bx	lr
  401bbe:	bf00      	nop

00401bc0 <usart_get_status>:
 * \param p_usart Pointer to a USART instance.
 *
 * \return The current USART status.
 */
uint32_t usart_get_status(Usart *p_usart)
{
  401bc0:	b480      	push	{r7}
  401bc2:	b083      	sub	sp, #12
  401bc4:	af00      	add	r7, sp, #0
  401bc6:	6078      	str	r0, [r7, #4]
	return p_usart->US_CSR;
  401bc8:	687b      	ldr	r3, [r7, #4]
  401bca:	695b      	ldr	r3, [r3, #20]
}
  401bcc:	4618      	mov	r0, r3
  401bce:	370c      	adds	r7, #12
  401bd0:	46bd      	mov	sp, r7
  401bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
  401bd6:	4770      	bx	lr

00401bd8 <usart_reset_status>:
 * \brief Reset status bits (PARE, OVER, MANERR, UNRE and PXBRK in US_CSR).
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_status(Usart *p_usart)
{
  401bd8:	b480      	push	{r7}
  401bda:	b083      	sub	sp, #12
  401bdc:	af00      	add	r7, sp, #0
  401bde:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RSTSTA;
  401be0:	687b      	ldr	r3, [r7, #4]
  401be2:	f44f 7280 	mov.w	r2, #256	; 0x100
  401be6:	601a      	str	r2, [r3, #0]
}
  401be8:	370c      	adds	r7, #12
  401bea:	46bd      	mov	sp, r7
  401bec:	f85d 7b04 	ldr.w	r7, [sp], #4
  401bf0:	4770      	bx	lr
  401bf2:	bf00      	nop

00401bf4 <usart_drive_RTS_pin_high>:
 * \brief Drive the pin RTS to 1.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_RTS_pin_high(Usart *p_usart)
{
  401bf4:	b480      	push	{r7}
  401bf6:	b083      	sub	sp, #12
  401bf8:	af00      	add	r7, sp, #0
  401bfa:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RTSDIS;
  401bfc:	687b      	ldr	r3, [r7, #4]
  401bfe:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  401c02:	601a      	str	r2, [r3, #0]
}
  401c04:	370c      	adds	r7, #12
  401c06:	46bd      	mov	sp, r7
  401c08:	f85d 7b04 	ldr.w	r7, [sp], #4
  401c0c:	4770      	bx	lr
  401c0e:	bf00      	nop

00401c10 <usart_is_tx_empty>:
 *
 * \retval 1 Transmitter is empty.
 * \retval 0 Transmitter is not empty.
 */
uint32_t usart_is_tx_empty(Usart *p_usart)
{
  401c10:	b480      	push	{r7}
  401c12:	b083      	sub	sp, #12
  401c14:	af00      	add	r7, sp, #0
  401c16:	6078      	str	r0, [r7, #4]
	return (p_usart->US_CSR & US_CSR_TXEMPTY) > 0;
  401c18:	687b      	ldr	r3, [r7, #4]
  401c1a:	695b      	ldr	r3, [r3, #20]
  401c1c:	f403 7300 	and.w	r3, r3, #512	; 0x200
  401c20:	2b00      	cmp	r3, #0
  401c22:	bf14      	ite	ne
  401c24:	2301      	movne	r3, #1
  401c26:	2300      	moveq	r3, #0
  401c28:	b2db      	uxtb	r3, r3
}
  401c2a:	4618      	mov	r0, r3
  401c2c:	370c      	adds	r7, #12
  401c2e:	46bd      	mov	sp, r7
  401c30:	f85d 7b04 	ldr.w	r7, [sp], #4
  401c34:	4770      	bx	lr
  401c36:	bf00      	nop

00401c38 <usart_is_rx_ready>:
 *
 * \retval 1 Some data has been received.
 * \retval 0 No data has been received.
 */
uint32_t usart_is_rx_ready(Usart *p_usart)
{
  401c38:	b480      	push	{r7}
  401c3a:	b083      	sub	sp, #12
  401c3c:	af00      	add	r7, sp, #0
  401c3e:	6078      	str	r0, [r7, #4]
	return (p_usart->US_CSR & US_CSR_RXRDY) > 0;
  401c40:	687b      	ldr	r3, [r7, #4]
  401c42:	695b      	ldr	r3, [r3, #20]
  401c44:	f003 0301 	and.w	r3, r3, #1
  401c48:	2b00      	cmp	r3, #0
  401c4a:	bf14      	ite	ne
  401c4c:	2301      	movne	r3, #1
  401c4e:	2300      	moveq	r3, #0
  401c50:	b2db      	uxtb	r3, r3
}
  401c52:	4618      	mov	r0, r3
  401c54:	370c      	adds	r7, #12
  401c56:	46bd      	mov	sp, r7
  401c58:	f85d 7b04 	ldr.w	r7, [sp], #4
  401c5c:	4770      	bx	lr
  401c5e:	bf00      	nop

00401c60 <usart_write>:
 *
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
  401c60:	b480      	push	{r7}
  401c62:	b083      	sub	sp, #12
  401c64:	af00      	add	r7, sp, #0
  401c66:	6078      	str	r0, [r7, #4]
  401c68:	6039      	str	r1, [r7, #0]
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  401c6a:	687b      	ldr	r3, [r7, #4]
  401c6c:	695b      	ldr	r3, [r3, #20]
  401c6e:	f003 0302 	and.w	r3, r3, #2
  401c72:	2b00      	cmp	r3, #0
  401c74:	d101      	bne.n	401c7a <usart_write+0x1a>
		return 1;
  401c76:	2301      	movs	r3, #1
  401c78:	e005      	b.n	401c86 <usart_write+0x26>
	}

	p_usart->US_THR = US_THR_TXCHR(c);
  401c7a:	683b      	ldr	r3, [r7, #0]
  401c7c:	f3c3 0208 	ubfx	r2, r3, #0, #9
  401c80:	687b      	ldr	r3, [r7, #4]
  401c82:	61da      	str	r2, [r3, #28]
	return 0;
  401c84:	2300      	movs	r3, #0
}
  401c86:	4618      	mov	r0, r3
  401c88:	370c      	adds	r7, #12
  401c8a:	46bd      	mov	sp, r7
  401c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
  401c90:	4770      	bx	lr
  401c92:	bf00      	nop

00401c94 <usart_read>:
 *
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
  401c94:	b480      	push	{r7}
  401c96:	b083      	sub	sp, #12
  401c98:	af00      	add	r7, sp, #0
  401c9a:	6078      	str	r0, [r7, #4]
  401c9c:	6039      	str	r1, [r7, #0]
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  401c9e:	687b      	ldr	r3, [r7, #4]
  401ca0:	695b      	ldr	r3, [r3, #20]
  401ca2:	f003 0301 	and.w	r3, r3, #1
  401ca6:	2b00      	cmp	r3, #0
  401ca8:	d101      	bne.n	401cae <usart_read+0x1a>
		return 1;
  401caa:	2301      	movs	r3, #1
  401cac:	e006      	b.n	401cbc <usart_read+0x28>
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  401cae:	687b      	ldr	r3, [r7, #4]
  401cb0:	699b      	ldr	r3, [r3, #24]
  401cb2:	f3c3 0208 	ubfx	r2, r3, #0, #9
  401cb6:	683b      	ldr	r3, [r7, #0]
  401cb8:	601a      	str	r2, [r3, #0]

	return 0;
  401cba:	2300      	movs	r3, #0
}
  401cbc:	4618      	mov	r0, r3
  401cbe:	370c      	adds	r7, #12
  401cc0:	46bd      	mov	sp, r7
  401cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
  401cc6:	4770      	bx	lr

00401cc8 <usart_disable_writeprotect>:
 * \brief Disable write protect of USART registers.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
  401cc8:	b480      	push	{r7}
  401cca:	b083      	sub	sp, #12
  401ccc:	af00      	add	r7, sp, #0
  401cce:	6078      	str	r0, [r7, #4]
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  401cd0:	687b      	ldr	r3, [r7, #4]
  401cd2:	4a04      	ldr	r2, [pc, #16]	; (401ce4 <usart_disable_writeprotect+0x1c>)
  401cd4:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
}
  401cd8:	370c      	adds	r7, #12
  401cda:	46bd      	mov	sp, r7
  401cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
  401ce0:	4770      	bx	lr
  401ce2:	bf00      	nop
  401ce4:	55534100 	.word	0x55534100

00401ce8 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  401ce8:	b580      	push	{r7, lr}
  401cea:	b082      	sub	sp, #8
  401cec:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
  401cee:	4b16      	ldr	r3, [pc, #88]	; (401d48 <Reset_Handler+0x60>)
  401cf0:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
  401cf2:	4b16      	ldr	r3, [pc, #88]	; (401d4c <Reset_Handler+0x64>)
  401cf4:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
  401cf6:	687a      	ldr	r2, [r7, #4]
  401cf8:	683b      	ldr	r3, [r7, #0]
  401cfa:	429a      	cmp	r2, r3
  401cfc:	d00c      	beq.n	401d18 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
  401cfe:	e007      	b.n	401d10 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
  401d00:	683b      	ldr	r3, [r7, #0]
  401d02:	1d1a      	adds	r2, r3, #4
  401d04:	603a      	str	r2, [r7, #0]
  401d06:	687a      	ldr	r2, [r7, #4]
  401d08:	1d11      	adds	r1, r2, #4
  401d0a:	6079      	str	r1, [r7, #4]
  401d0c:	6812      	ldr	r2, [r2, #0]
  401d0e:	601a      	str	r2, [r3, #0]
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
  401d10:	683b      	ldr	r3, [r7, #0]
  401d12:	4a0f      	ldr	r2, [pc, #60]	; (401d50 <Reset_Handler+0x68>)
  401d14:	4293      	cmp	r3, r2
  401d16:	d3f3      	bcc.n	401d00 <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
  401d18:	4b0e      	ldr	r3, [pc, #56]	; (401d54 <Reset_Handler+0x6c>)
  401d1a:	603b      	str	r3, [r7, #0]
  401d1c:	e004      	b.n	401d28 <Reset_Handler+0x40>
                *pDest++ = 0;
  401d1e:	683b      	ldr	r3, [r7, #0]
  401d20:	1d1a      	adds	r2, r3, #4
  401d22:	603a      	str	r2, [r7, #0]
  401d24:	2200      	movs	r2, #0
  401d26:	601a      	str	r2, [r3, #0]
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
  401d28:	683b      	ldr	r3, [r7, #0]
  401d2a:	4a0b      	ldr	r2, [pc, #44]	; (401d58 <Reset_Handler+0x70>)
  401d2c:	4293      	cmp	r3, r2
  401d2e:	d3f6      	bcc.n	401d1e <Reset_Handler+0x36>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
  401d30:	4b0a      	ldr	r3, [pc, #40]	; (401d5c <Reset_Handler+0x74>)
  401d32:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  401d34:	4a0a      	ldr	r2, [pc, #40]	; (401d60 <Reset_Handler+0x78>)
  401d36:	687b      	ldr	r3, [r7, #4]
  401d38:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  401d3c:	6093      	str	r3, [r2, #8]

        /* Initialize the C library */
        __libc_init_array();
  401d3e:	4b09      	ldr	r3, [pc, #36]	; (401d64 <Reset_Handler+0x7c>)
  401d40:	4798      	blx	r3

        /* Branch to main function */
        main();
  401d42:	4b09      	ldr	r3, [pc, #36]	; (401d68 <Reset_Handler+0x80>)
  401d44:	4798      	blx	r3

        /* Infinite loop */
        while (1);
  401d46:	e7fe      	b.n	401d46 <Reset_Handler+0x5e>
  401d48:	0040962c 	.word	0x0040962c
  401d4c:	20400000 	.word	0x20400000
  401d50:	204008fc 	.word	0x204008fc
  401d54:	204008fc 	.word	0x204008fc
  401d58:	2040127c 	.word	0x2040127c
  401d5c:	00400000 	.word	0x00400000
  401d60:	e000ed00 	.word	0xe000ed00
  401d64:	00403a31 	.word	0x00403a31
  401d68:	00403551 	.word	0x00403551

00401d6c <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  401d6c:	b480      	push	{r7}
  401d6e:	af00      	add	r7, sp, #0
        while (1) {
        }
  401d70:	e7fe      	b.n	401d70 <Dummy_Handler+0x4>
  401d72:	bf00      	nop

00401d74 <SystemCoreClockUpdate>:

  SystemCoreClock = CHIP_FREQ_CPU_MAX;
}

void SystemCoreClockUpdate( void )
{
  401d74:	b480      	push	{r7}
  401d76:	af00      	add	r7, sp, #0
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  401d78:	4b51      	ldr	r3, [pc, #324]	; (401ec0 <SystemCoreClockUpdate+0x14c>)
  401d7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401d7c:	f003 0303 	and.w	r3, r3, #3
  401d80:	2b01      	cmp	r3, #1
  401d82:	d014      	beq.n	401dae <SystemCoreClockUpdate+0x3a>
  401d84:	2b01      	cmp	r3, #1
  401d86:	d302      	bcc.n	401d8e <SystemCoreClockUpdate+0x1a>
  401d88:	2b02      	cmp	r3, #2
  401d8a:	d038      	beq.n	401dfe <SystemCoreClockUpdate+0x8a>
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
      }
    break;

    default:
    break;
  401d8c:	e07b      	b.n	401e86 <SystemCoreClockUpdate+0x112>
{
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  {
    case PMC_MCKR_CSS_SLOW_CLK: /* Slow clock */
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  401d8e:	4b4d      	ldr	r3, [pc, #308]	; (401ec4 <SystemCoreClockUpdate+0x150>)
  401d90:	695b      	ldr	r3, [r3, #20]
  401d92:	f003 0380 	and.w	r3, r3, #128	; 0x80
  401d96:	2b00      	cmp	r3, #0
  401d98:	d004      	beq.n	401da4 <SystemCoreClockUpdate+0x30>
      {
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  401d9a:	4b4b      	ldr	r3, [pc, #300]	; (401ec8 <SystemCoreClockUpdate+0x154>)
  401d9c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  401da0:	601a      	str	r2, [r3, #0]
      }
      else
      {
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
      }
    break;
  401da2:	e070      	b.n	401e86 <SystemCoreClockUpdate+0x112>
      {
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
      }
      else
      {
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  401da4:	4b48      	ldr	r3, [pc, #288]	; (401ec8 <SystemCoreClockUpdate+0x154>)
  401da6:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
  401daa:	601a      	str	r2, [r3, #0]
      }
    break;
  401dac:	e06b      	b.n	401e86 <SystemCoreClockUpdate+0x112>

    case PMC_MCKR_CSS_MAIN_CLK: /* Main clock */
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  401dae:	4b44      	ldr	r3, [pc, #272]	; (401ec0 <SystemCoreClockUpdate+0x14c>)
  401db0:	6a1b      	ldr	r3, [r3, #32]
  401db2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  401db6:	2b00      	cmp	r3, #0
  401db8:	d003      	beq.n	401dc2 <SystemCoreClockUpdate+0x4e>
      {
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  401dba:	4b43      	ldr	r3, [pc, #268]	; (401ec8 <SystemCoreClockUpdate+0x154>)
  401dbc:	4a43      	ldr	r2, [pc, #268]	; (401ecc <SystemCoreClockUpdate+0x158>)
  401dbe:	601a      	str	r2, [r3, #0]
  401dc0:	e01c      	b.n	401dfc <SystemCoreClockUpdate+0x88>
      }
      else
      {
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  401dc2:	4b41      	ldr	r3, [pc, #260]	; (401ec8 <SystemCoreClockUpdate+0x154>)
  401dc4:	4a42      	ldr	r2, [pc, #264]	; (401ed0 <SystemCoreClockUpdate+0x15c>)
  401dc6:	601a      	str	r2, [r3, #0]

        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  401dc8:	4b3d      	ldr	r3, [pc, #244]	; (401ec0 <SystemCoreClockUpdate+0x14c>)
  401dca:	6a1b      	ldr	r3, [r3, #32]
  401dcc:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401dd0:	2b10      	cmp	r3, #16
  401dd2:	d004      	beq.n	401dde <SystemCoreClockUpdate+0x6a>
  401dd4:	2b20      	cmp	r3, #32
  401dd6:	d008      	beq.n	401dea <SystemCoreClockUpdate+0x76>
  401dd8:	2b00      	cmp	r3, #0
  401dda:	d00e      	beq.n	401dfa <SystemCoreClockUpdate+0x86>
          case CKGR_MOR_MOSCRCF_12_MHz:
            SystemCoreClock *= 3U;
          break;

          default:
          break;
  401ddc:	e00e      	b.n	401dfc <SystemCoreClockUpdate+0x88>
        {
          case CKGR_MOR_MOSCRCF_4_MHz:
          break;

          case CKGR_MOR_MOSCRCF_8_MHz:
            SystemCoreClock *= 2U;
  401dde:	4b3a      	ldr	r3, [pc, #232]	; (401ec8 <SystemCoreClockUpdate+0x154>)
  401de0:	681b      	ldr	r3, [r3, #0]
  401de2:	005b      	lsls	r3, r3, #1
  401de4:	4a38      	ldr	r2, [pc, #224]	; (401ec8 <SystemCoreClockUpdate+0x154>)
  401de6:	6013      	str	r3, [r2, #0]
          break;
  401de8:	e008      	b.n	401dfc <SystemCoreClockUpdate+0x88>

          case CKGR_MOR_MOSCRCF_12_MHz:
            SystemCoreClock *= 3U;
  401dea:	4b37      	ldr	r3, [pc, #220]	; (401ec8 <SystemCoreClockUpdate+0x154>)
  401dec:	681a      	ldr	r2, [r3, #0]
  401dee:	4613      	mov	r3, r2
  401df0:	005b      	lsls	r3, r3, #1
  401df2:	4413      	add	r3, r2
  401df4:	4a34      	ldr	r2, [pc, #208]	; (401ec8 <SystemCoreClockUpdate+0x154>)
  401df6:	6013      	str	r3, [r2, #0]
          break;
  401df8:	e000      	b.n	401dfc <SystemCoreClockUpdate+0x88>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;

        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
        {
          case CKGR_MOR_MOSCRCF_4_MHz:
          break;
  401dfa:	bf00      	nop

          default:
          break;
        }
      }
    break;
  401dfc:	e043      	b.n	401e86 <SystemCoreClockUpdate+0x112>

    case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  401dfe:	4b30      	ldr	r3, [pc, #192]	; (401ec0 <SystemCoreClockUpdate+0x14c>)
  401e00:	6a1b      	ldr	r3, [r3, #32]
  401e02:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  401e06:	2b00      	cmp	r3, #0
  401e08:	d003      	beq.n	401e12 <SystemCoreClockUpdate+0x9e>
      {
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  401e0a:	4b2f      	ldr	r3, [pc, #188]	; (401ec8 <SystemCoreClockUpdate+0x154>)
  401e0c:	4a2f      	ldr	r2, [pc, #188]	; (401ecc <SystemCoreClockUpdate+0x158>)
  401e0e:	601a      	str	r2, [r3, #0]
  401e10:	e01c      	b.n	401e4c <SystemCoreClockUpdate+0xd8>
      }
      else
      {
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  401e12:	4b2d      	ldr	r3, [pc, #180]	; (401ec8 <SystemCoreClockUpdate+0x154>)
  401e14:	4a2e      	ldr	r2, [pc, #184]	; (401ed0 <SystemCoreClockUpdate+0x15c>)
  401e16:	601a      	str	r2, [r3, #0]

        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  401e18:	4b29      	ldr	r3, [pc, #164]	; (401ec0 <SystemCoreClockUpdate+0x14c>)
  401e1a:	6a1b      	ldr	r3, [r3, #32]
  401e1c:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401e20:	2b10      	cmp	r3, #16
  401e22:	d004      	beq.n	401e2e <SystemCoreClockUpdate+0xba>
  401e24:	2b20      	cmp	r3, #32
  401e26:	d008      	beq.n	401e3a <SystemCoreClockUpdate+0xc6>
  401e28:	2b00      	cmp	r3, #0
  401e2a:	d00e      	beq.n	401e4a <SystemCoreClockUpdate+0xd6>
          case CKGR_MOR_MOSCRCF_12_MHz:
            SystemCoreClock *= 3U;
          break;

          default:
          break;
  401e2c:	e00e      	b.n	401e4c <SystemCoreClockUpdate+0xd8>
        {
          case CKGR_MOR_MOSCRCF_4_MHz:
          break;

          case CKGR_MOR_MOSCRCF_8_MHz:
            SystemCoreClock *= 2U;
  401e2e:	4b26      	ldr	r3, [pc, #152]	; (401ec8 <SystemCoreClockUpdate+0x154>)
  401e30:	681b      	ldr	r3, [r3, #0]
  401e32:	005b      	lsls	r3, r3, #1
  401e34:	4a24      	ldr	r2, [pc, #144]	; (401ec8 <SystemCoreClockUpdate+0x154>)
  401e36:	6013      	str	r3, [r2, #0]
          break;
  401e38:	e008      	b.n	401e4c <SystemCoreClockUpdate+0xd8>

          case CKGR_MOR_MOSCRCF_12_MHz:
            SystemCoreClock *= 3U;
  401e3a:	4b23      	ldr	r3, [pc, #140]	; (401ec8 <SystemCoreClockUpdate+0x154>)
  401e3c:	681a      	ldr	r2, [r3, #0]
  401e3e:	4613      	mov	r3, r2
  401e40:	005b      	lsls	r3, r3, #1
  401e42:	4413      	add	r3, r2
  401e44:	4a20      	ldr	r2, [pc, #128]	; (401ec8 <SystemCoreClockUpdate+0x154>)
  401e46:	6013      	str	r3, [r2, #0]
          break;
  401e48:	e000      	b.n	401e4c <SystemCoreClockUpdate+0xd8>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;

        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
        {
          case CKGR_MOR_MOSCRCF_4_MHz:
          break;
  401e4a:	bf00      	nop
          default:
          break;
        }
      }

      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  401e4c:	4b1c      	ldr	r3, [pc, #112]	; (401ec0 <SystemCoreClockUpdate+0x14c>)
  401e4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401e50:	f003 0303 	and.w	r3, r3, #3
  401e54:	2b02      	cmp	r3, #2
  401e56:	d115      	bne.n	401e84 <SystemCoreClockUpdate+0x110>
      {
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  401e58:	4b19      	ldr	r3, [pc, #100]	; (401ec0 <SystemCoreClockUpdate+0x14c>)
  401e5a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  401e5c:	4b1d      	ldr	r3, [pc, #116]	; (401ed4 <SystemCoreClockUpdate+0x160>)
  401e5e:	4013      	ands	r3, r2
  401e60:	0c1b      	lsrs	r3, r3, #16
  401e62:	3301      	adds	r3, #1
  401e64:	4a18      	ldr	r2, [pc, #96]	; (401ec8 <SystemCoreClockUpdate+0x154>)
  401e66:	6812      	ldr	r2, [r2, #0]
  401e68:	fb02 f303 	mul.w	r3, r2, r3
  401e6c:	4a16      	ldr	r2, [pc, #88]	; (401ec8 <SystemCoreClockUpdate+0x154>)
  401e6e:	6013      	str	r3, [r2, #0]
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  401e70:	4b13      	ldr	r3, [pc, #76]	; (401ec0 <SystemCoreClockUpdate+0x14c>)
  401e72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  401e74:	b2db      	uxtb	r3, r3
  401e76:	4a14      	ldr	r2, [pc, #80]	; (401ec8 <SystemCoreClockUpdate+0x154>)
  401e78:	6812      	ldr	r2, [r2, #0]
  401e7a:	fbb2 f3f3 	udiv	r3, r2, r3
  401e7e:	4a12      	ldr	r2, [pc, #72]	; (401ec8 <SystemCoreClockUpdate+0x154>)
  401e80:	6013      	str	r3, [r2, #0]
      }
    break;
  401e82:	e7ff      	b.n	401e84 <SystemCoreClockUpdate+0x110>
  401e84:	bf00      	nop

    default:
    break;
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  401e86:	4b0e      	ldr	r3, [pc, #56]	; (401ec0 <SystemCoreClockUpdate+0x14c>)
  401e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401e8a:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401e8e:	2b70      	cmp	r3, #112	; 0x70
  401e90:	d108      	bne.n	401ea4 <SystemCoreClockUpdate+0x130>
  {
    SystemCoreClock /= 3U;
  401e92:	4b0d      	ldr	r3, [pc, #52]	; (401ec8 <SystemCoreClockUpdate+0x154>)
  401e94:	681b      	ldr	r3, [r3, #0]
  401e96:	4a10      	ldr	r2, [pc, #64]	; (401ed8 <SystemCoreClockUpdate+0x164>)
  401e98:	fba2 2303 	umull	r2, r3, r2, r3
  401e9c:	085b      	lsrs	r3, r3, #1
  401e9e:	4a0a      	ldr	r2, [pc, #40]	; (401ec8 <SystemCoreClockUpdate+0x154>)
  401ea0:	6013      	str	r3, [r2, #0]
  401ea2:	e009      	b.n	401eb8 <SystemCoreClockUpdate+0x144>
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  401ea4:	4b06      	ldr	r3, [pc, #24]	; (401ec0 <SystemCoreClockUpdate+0x14c>)
  401ea6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401ea8:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401eac:	091a      	lsrs	r2, r3, #4
  401eae:	4b06      	ldr	r3, [pc, #24]	; (401ec8 <SystemCoreClockUpdate+0x154>)
  401eb0:	681b      	ldr	r3, [r3, #0]
  401eb2:	40d3      	lsrs	r3, r2
  401eb4:	4a04      	ldr	r2, [pc, #16]	; (401ec8 <SystemCoreClockUpdate+0x154>)
  401eb6:	6013      	str	r3, [r2, #0]
  }
}
  401eb8:	46bd      	mov	sp, r7
  401eba:	f85d 7b04 	ldr.w	r7, [sp], #4
  401ebe:	4770      	bx	lr
  401ec0:	400e0600 	.word	0x400e0600
  401ec4:	400e1810 	.word	0x400e1810
  401ec8:	20400000 	.word	0x20400000
  401ecc:	00b71b00 	.word	0x00b71b00
  401ed0:	003d0900 	.word	0x003d0900
  401ed4:	07ff0000 	.word	0x07ff0000
  401ed8:	aaaaaaab 	.word	0xaaaaaaab

00401edc <system_init_flash>:
/**
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  401edc:	b480      	push	{r7}
  401ede:	b083      	sub	sp, #12
  401ee0:	af00      	add	r7, sp, #0
  401ee2:	6078      	str	r0, [r7, #4]
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  401ee4:	687b      	ldr	r3, [r7, #4]
  401ee6:	4a18      	ldr	r2, [pc, #96]	; (401f48 <system_init_flash+0x6c>)
  401ee8:	4293      	cmp	r3, r2
  401eea:	d804      	bhi.n	401ef6 <system_init_flash+0x1a>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  401eec:	4b17      	ldr	r3, [pc, #92]	; (401f4c <system_init_flash+0x70>)
  401eee:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  401ef2:	601a      	str	r2, [r3, #0]
  401ef4:	e023      	b.n	401f3e <system_init_flash+0x62>
  }
  else
  {
    if (ul_clk < CHIP_FREQ_FWS_1)
  401ef6:	687b      	ldr	r3, [r7, #4]
  401ef8:	4a15      	ldr	r2, [pc, #84]	; (401f50 <system_init_flash+0x74>)
  401efa:	4293      	cmp	r3, r2
  401efc:	d803      	bhi.n	401f06 <system_init_flash+0x2a>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  401efe:	4b13      	ldr	r3, [pc, #76]	; (401f4c <system_init_flash+0x70>)
  401f00:	4a14      	ldr	r2, [pc, #80]	; (401f54 <system_init_flash+0x78>)
  401f02:	601a      	str	r2, [r3, #0]
  401f04:	e01b      	b.n	401f3e <system_init_flash+0x62>
    }
    else
    {
      if (ul_clk < CHIP_FREQ_FWS_2)
  401f06:	687b      	ldr	r3, [r7, #4]
  401f08:	4a13      	ldr	r2, [pc, #76]	; (401f58 <system_init_flash+0x7c>)
  401f0a:	4293      	cmp	r3, r2
  401f0c:	d803      	bhi.n	401f16 <system_init_flash+0x3a>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  401f0e:	4b0f      	ldr	r3, [pc, #60]	; (401f4c <system_init_flash+0x70>)
  401f10:	4a12      	ldr	r2, [pc, #72]	; (401f5c <system_init_flash+0x80>)
  401f12:	601a      	str	r2, [r3, #0]
  401f14:	e013      	b.n	401f3e <system_init_flash+0x62>
      }
      else
      {
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  401f16:	687b      	ldr	r3, [r7, #4]
  401f18:	4a11      	ldr	r2, [pc, #68]	; (401f60 <system_init_flash+0x84>)
  401f1a:	4293      	cmp	r3, r2
  401f1c:	d803      	bhi.n	401f26 <system_init_flash+0x4a>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  401f1e:	4b0b      	ldr	r3, [pc, #44]	; (401f4c <system_init_flash+0x70>)
  401f20:	4a10      	ldr	r2, [pc, #64]	; (401f64 <system_init_flash+0x88>)
  401f22:	601a      	str	r2, [r3, #0]
  401f24:	e00b      	b.n	401f3e <system_init_flash+0x62>
        }
        else
        {
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  401f26:	687b      	ldr	r3, [r7, #4]
  401f28:	4a0f      	ldr	r2, [pc, #60]	; (401f68 <system_init_flash+0x8c>)
  401f2a:	4293      	cmp	r3, r2
  401f2c:	d804      	bhi.n	401f38 <system_init_flash+0x5c>
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  401f2e:	4b07      	ldr	r3, [pc, #28]	; (401f4c <system_init_flash+0x70>)
  401f30:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  401f34:	601a      	str	r2, [r3, #0]
  401f36:	e002      	b.n	401f3e <system_init_flash+0x62>
          }
          else
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  401f38:	4b04      	ldr	r3, [pc, #16]	; (401f4c <system_init_flash+0x70>)
  401f3a:	4a0c      	ldr	r2, [pc, #48]	; (401f6c <system_init_flash+0x90>)
  401f3c:	601a      	str	r2, [r3, #0]
          }
        }
      }
    }
  }
}
  401f3e:	370c      	adds	r7, #12
  401f40:	46bd      	mov	sp, r7
  401f42:	f85d 7b04 	ldr.w	r7, [sp], #4
  401f46:	4770      	bx	lr
  401f48:	01312cff 	.word	0x01312cff
  401f4c:	400e0c00 	.word	0x400e0c00
  401f50:	026259ff 	.word	0x026259ff
  401f54:	04000100 	.word	0x04000100
  401f58:	039386ff 	.word	0x039386ff
  401f5c:	04000200 	.word	0x04000200
  401f60:	04c4b3ff 	.word	0x04c4b3ff
  401f64:	04000300 	.word	0x04000300
  401f68:	05f5e0ff 	.word	0x05f5e0ff
  401f6c:	04000500 	.word	0x04000500

00401f70 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
  401f70:	b480      	push	{r7}
  401f72:	b085      	sub	sp, #20
  401f74:	af00      	add	r7, sp, #0
  401f76:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;
  401f78:	4b10      	ldr	r3, [pc, #64]	; (401fbc <_sbrk+0x4c>)
  401f7a:	60fb      	str	r3, [r7, #12]

	if (heap == NULL) {
  401f7c:	4b10      	ldr	r3, [pc, #64]	; (401fc0 <_sbrk+0x50>)
  401f7e:	681b      	ldr	r3, [r3, #0]
  401f80:	2b00      	cmp	r3, #0
  401f82:	d102      	bne.n	401f8a <_sbrk+0x1a>
		heap = (unsigned char *)&_end;
  401f84:	4b0e      	ldr	r3, [pc, #56]	; (401fc0 <_sbrk+0x50>)
  401f86:	4a0f      	ldr	r2, [pc, #60]	; (401fc4 <_sbrk+0x54>)
  401f88:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
  401f8a:	4b0d      	ldr	r3, [pc, #52]	; (401fc0 <_sbrk+0x50>)
  401f8c:	681b      	ldr	r3, [r3, #0]
  401f8e:	60bb      	str	r3, [r7, #8]

	if (((int)prev_heap + incr) > ramend) {
  401f90:	68ba      	ldr	r2, [r7, #8]
  401f92:	687b      	ldr	r3, [r7, #4]
  401f94:	441a      	add	r2, r3
  401f96:	68fb      	ldr	r3, [r7, #12]
  401f98:	429a      	cmp	r2, r3
  401f9a:	dd02      	ble.n	401fa2 <_sbrk+0x32>
		return (caddr_t) -1;	
  401f9c:	f04f 33ff 	mov.w	r3, #4294967295
  401fa0:	e006      	b.n	401fb0 <_sbrk+0x40>
	}

	heap += incr;
  401fa2:	4b07      	ldr	r3, [pc, #28]	; (401fc0 <_sbrk+0x50>)
  401fa4:	681a      	ldr	r2, [r3, #0]
  401fa6:	687b      	ldr	r3, [r7, #4]
  401fa8:	4413      	add	r3, r2
  401faa:	4a05      	ldr	r2, [pc, #20]	; (401fc0 <_sbrk+0x50>)
  401fac:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
  401fae:	68bb      	ldr	r3, [r7, #8]
}
  401fb0:	4618      	mov	r0, r3
  401fb2:	3714      	adds	r7, #20
  401fb4:	46bd      	mov	sp, r7
  401fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
  401fba:	4770      	bx	lr
  401fbc:	2045fffc 	.word	0x2045fffc
  401fc0:	2040098c 	.word	0x2040098c
  401fc4:	20403480 	.word	0x20403480

00401fc8 <_close>:
{
	return -1;
}

extern int _close(int file)
{
  401fc8:	b480      	push	{r7}
  401fca:	b083      	sub	sp, #12
  401fcc:	af00      	add	r7, sp, #0
  401fce:	6078      	str	r0, [r7, #4]
	return -1;
  401fd0:	f04f 33ff 	mov.w	r3, #4294967295
}
  401fd4:	4618      	mov	r0, r3
  401fd6:	370c      	adds	r7, #12
  401fd8:	46bd      	mov	sp, r7
  401fda:	f85d 7b04 	ldr.w	r7, [sp], #4
  401fde:	4770      	bx	lr

00401fe0 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
  401fe0:	b480      	push	{r7}
  401fe2:	b083      	sub	sp, #12
  401fe4:	af00      	add	r7, sp, #0
  401fe6:	6078      	str	r0, [r7, #4]
  401fe8:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
  401fea:	683b      	ldr	r3, [r7, #0]
  401fec:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  401ff0:	605a      	str	r2, [r3, #4]

	return 0;
  401ff2:	2300      	movs	r3, #0
}
  401ff4:	4618      	mov	r0, r3
  401ff6:	370c      	adds	r7, #12
  401ff8:	46bd      	mov	sp, r7
  401ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
  401ffe:	4770      	bx	lr

00402000 <_isatty>:

extern int _isatty(int file)
{
  402000:	b480      	push	{r7}
  402002:	b083      	sub	sp, #12
  402004:	af00      	add	r7, sp, #0
  402006:	6078      	str	r0, [r7, #4]
	return 1;
  402008:	2301      	movs	r3, #1
}
  40200a:	4618      	mov	r0, r3
  40200c:	370c      	adds	r7, #12
  40200e:	46bd      	mov	sp, r7
  402010:	f85d 7b04 	ldr.w	r7, [sp], #4
  402014:	4770      	bx	lr
  402016:	bf00      	nop

00402018 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
  402018:	b480      	push	{r7}
  40201a:	b085      	sub	sp, #20
  40201c:	af00      	add	r7, sp, #0
  40201e:	60f8      	str	r0, [r7, #12]
  402020:	60b9      	str	r1, [r7, #8]
  402022:	607a      	str	r2, [r7, #4]
	return 0;
  402024:	2300      	movs	r3, #0
}
  402026:	4618      	mov	r0, r3
  402028:	3714      	adds	r7, #20
  40202a:	46bd      	mov	sp, r7
  40202c:	f85d 7b04 	ldr.w	r7, [sp], #4
  402030:	4770      	bx	lr
  402032:	bf00      	nop

00402034 <PCA9952_write_reg>:
 *
 * \param reg_index Register address. Use macros as defined in the header file.
 * \param data Data that should be written to the device register.
 */
void PCA9952_write_reg(unsigned char topBotn, uint8_t reg_index, uint8_t data)
{
  402034:	b580      	push	{r7, lr}
  402036:	b088      	sub	sp, #32
  402038:	af00      	add	r7, sp, #0
  40203a:	4603      	mov	r3, r0
  40203c:	71fb      	strb	r3, [r7, #7]
  40203e:	460b      	mov	r3, r1
  402040:	71bb      	strb	r3, [r7, #6]
  402042:	4613      	mov	r3, r2
  402044:	717b      	strb	r3, [r7, #5]
	uint8_t pack[2];
	twihs_packet_t twi_package;

	pack[0] = reg_index;
  402046:	79bb      	ldrb	r3, [r7, #6]
  402048:	773b      	strb	r3, [r7, #28]
	pack[1] = data;
  40204a:	797b      	ldrb	r3, [r7, #5]
  40204c:	777b      	strb	r3, [r7, #29]

//7apr15	twi_package.chip = PCA9952_TWI_ADDRESS;

	if (topBotn == LED_TOP)
  40204e:	79fb      	ldrb	r3, [r7, #7]
  402050:	2b00      	cmp	r3, #0
  402052:	d102      	bne.n	40205a <PCA9952_write_reg+0x26>
	{
		twi_package.chip = PCA9952_U7_TOPDRIVE_TWI_ADDRESS;
  402054:	2360      	movs	r3, #96	; 0x60
  402056:	763b      	strb	r3, [r7, #24]
  402058:	e004      	b.n	402064 <PCA9952_write_reg+0x30>
	}
	else if (topBotn == LED_BOTTOM)
  40205a:	79fb      	ldrb	r3, [r7, #7]
  40205c:	2b01      	cmp	r3, #1
  40205e:	d101      	bne.n	402064 <PCA9952_write_reg+0x30>
	{
		twi_package.chip = PCA9952_U8_BOTDRIVE_TWI_ADDRESS;
  402060:	2361      	movs	r3, #97	; 0x61
  402062:	763b      	strb	r3, [r7, #24]
	}

	twi_package.addr[0] = 0;		//is this right? 8feb16
  402064:	2300      	movs	r3, #0
  402066:	723b      	strb	r3, [r7, #8]
	twi_package.addr[1] = 0;		//is this right? 8feb16
  402068:	2300      	movs	r3, #0
  40206a:	727b      	strb	r3, [r7, #9]
	twi_package.addr[2] = 0;		//is this right? 8feb16
  40206c:	2300      	movs	r3, #0
  40206e:	72bb      	strb	r3, [r7, #10]
	twi_package.addr_length = 0;
  402070:	2300      	movs	r3, #0
  402072:	60fb      	str	r3, [r7, #12]
	twi_package.buffer = &pack;
  402074:	f107 031c 	add.w	r3, r7, #28
  402078:	613b      	str	r3, [r7, #16]
	twi_package.length = sizeof(pack);
  40207a:	2302      	movs	r3, #2
  40207c:	617b      	str	r3, [r7, #20]

	while(twihs_master_write(PCA9952_TWI, &twi_package)!=TWIHS_SUCCESS);
  40207e:	bf00      	nop
  402080:	f107 0308 	add.w	r3, r7, #8
  402084:	4805      	ldr	r0, [pc, #20]	; (40209c <PCA9952_write_reg+0x68>)
  402086:	4619      	mov	r1, r3
  402088:	4b05      	ldr	r3, [pc, #20]	; (4020a0 <PCA9952_write_reg+0x6c>)
  40208a:	4798      	blx	r3
  40208c:	4603      	mov	r3, r0
  40208e:	2b00      	cmp	r3, #0
  402090:	d1f6      	bne.n	402080 <PCA9952_write_reg+0x4c>

	return;
  402092:	bf00      	nop
}
  402094:	3720      	adds	r7, #32
  402096:	46bd      	mov	sp, r7
  402098:	bd80      	pop	{r7, pc}
  40209a:	bf00      	nop
  40209c:	40018000 	.word	0x40018000
  4020a0:	004017f5 	.word	0x004017f5

004020a4 <PCA9952_read_reg>:
 *
 * \param reg_index Register address.
 * \returns Register content.
 */
uint8_t PCA9952_read_reg(unsigned char topBotn, uint8_t reg_index)
{
  4020a4:	b580      	push	{r7, lr}
  4020a6:	b088      	sub	sp, #32
  4020a8:	af00      	add	r7, sp, #0
  4020aa:	4603      	mov	r3, r0
  4020ac:	460a      	mov	r2, r1
  4020ae:	71fb      	strb	r3, [r7, #7]
  4020b0:	4613      	mov	r3, r2
  4020b2:	71bb      	strb	r3, [r7, #6]
	uint8_t data;
	twihs_packet_t twi_package;

//7apr15	twi_package.chip = PCA9952_TWI_ADDRESS;

	if (topBotn == LED_TOP)
  4020b4:	79fb      	ldrb	r3, [r7, #7]
  4020b6:	2b00      	cmp	r3, #0
  4020b8:	d102      	bne.n	4020c0 <PCA9952_read_reg+0x1c>
	{
		twi_package.chip = PCA9952_U7_TOPDRIVE_TWI_ADDRESS;
  4020ba:	2360      	movs	r3, #96	; 0x60
  4020bc:	763b      	strb	r3, [r7, #24]
  4020be:	e004      	b.n	4020ca <PCA9952_read_reg+0x26>
	}
	else if (topBotn == LED_BOTTOM)
  4020c0:	79fb      	ldrb	r3, [r7, #7]
  4020c2:	2b01      	cmp	r3, #1
  4020c4:	d101      	bne.n	4020ca <PCA9952_read_reg+0x26>
	{
		twi_package.chip = PCA9952_U8_BOTDRIVE_TWI_ADDRESS;
  4020c6:	2361      	movs	r3, #97	; 0x61
  4020c8:	763b      	strb	r3, [r7, #24]
	}

	twi_package.addr[0] = 0;		//is this right? 8feb16
  4020ca:	2300      	movs	r3, #0
  4020cc:	723b      	strb	r3, [r7, #8]
	twi_package.addr[1] = 0;		//is this right? 8feb16
  4020ce:	2300      	movs	r3, #0
  4020d0:	727b      	strb	r3, [r7, #9]
	twi_package.addr[2] = 0;		//is this right? 8feb16
  4020d2:	2300      	movs	r3, #0
  4020d4:	72bb      	strb	r3, [r7, #10]
	twi_package.addr_length = 0;
  4020d6:	2300      	movs	r3, #0
  4020d8:	60fb      	str	r3, [r7, #12]
	twi_package.buffer = &reg_index;
  4020da:	1dbb      	adds	r3, r7, #6
  4020dc:	613b      	str	r3, [r7, #16]
	twi_package.length = 1;
  4020de:	2301      	movs	r3, #1
  4020e0:	617b      	str	r3, [r7, #20]
	while(twihs_master_write(PCA9952_TWI, &twi_package)!=TWIHS_SUCCESS);
  4020e2:	bf00      	nop
  4020e4:	f107 0308 	add.w	r3, r7, #8
  4020e8:	480f      	ldr	r0, [pc, #60]	; (402128 <PCA9952_read_reg+0x84>)
  4020ea:	4619      	mov	r1, r3
  4020ec:	4b0f      	ldr	r3, [pc, #60]	; (40212c <PCA9952_read_reg+0x88>)
  4020ee:	4798      	blx	r3
  4020f0:	4603      	mov	r3, r0
  4020f2:	2b00      	cmp	r3, #0
  4020f4:	d1f6      	bne.n	4020e4 <PCA9952_read_reg+0x40>
	* specified in the datasheet.
	* Also there seems to be a bug in the TWI module or the driver
	* since some delay here (code or real delay) adds about 500us
	* between the write and the next read cycle.
	*/
	mdelay(20);
  4020f6:	2014      	movs	r0, #20
  4020f8:	4b0d      	ldr	r3, [pc, #52]	; (402130 <PCA9952_read_reg+0x8c>)
  4020fa:	4798      	blx	r3

//7apr15 this was set above, no need to reassign	twi_package.chip = PCA9952_TWI_ADDRESS;
	twi_package.addr_length = 0;
  4020fc:	2300      	movs	r3, #0
  4020fe:	60fb      	str	r3, [r7, #12]
	twi_package.buffer = &data;
  402100:	f107 031f 	add.w	r3, r7, #31
  402104:	613b      	str	r3, [r7, #16]
	twi_package.length = 1;
  402106:	2301      	movs	r3, #1
  402108:	617b      	str	r3, [r7, #20]
	while(twihs_master_read(PCA9952_TWI, &twi_package)!=TWIHS_SUCCESS);
  40210a:	bf00      	nop
  40210c:	f107 0308 	add.w	r3, r7, #8
  402110:	4805      	ldr	r0, [pc, #20]	; (402128 <PCA9952_read_reg+0x84>)
  402112:	4619      	mov	r1, r3
  402114:	4b07      	ldr	r3, [pc, #28]	; (402134 <PCA9952_read_reg+0x90>)
  402116:	4798      	blx	r3
  402118:	4603      	mov	r3, r0
  40211a:	2b00      	cmp	r3, #0
  40211c:	d1f6      	bne.n	40210c <PCA9952_read_reg+0x68>

	return data;
  40211e:	7ffb      	ldrb	r3, [r7, #31]
}
  402120:	4618      	mov	r0, r3
  402122:	3720      	adds	r7, #32
  402124:	46bd      	mov	sp, r7
  402126:	bd80      	pop	{r7, pc}
  402128:	40018000 	.word	0x40018000
  40212c:	004017f5 	.word	0x004017f5
  402130:	004030a5 	.word	0x004030a5
  402134:	0040170d 	.word	0x0040170d

00402138 <PCA9952_init>:

extern uint8_t func_transmit(const uint8_t *p_buff, uint32_t ulsize); //lazy, defined in another c file 10feb16 jsi

void PCA9952_init(void) //7apr15
{
  402138:	b5b0      	push	{r4, r5, r7, lr}
  40213a:	b094      	sub	sp, #80	; 0x50
  40213c:	af02      	add	r7, sp, #8
	volatile uint8_t tmp1, tmp2, tmp3, tmp4;
	
	char printStr[64] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
  40213e:	1d3b      	adds	r3, r7, #4
  402140:	2240      	movs	r2, #64	; 0x40
  402142:	4618      	mov	r0, r3
  402144:	2100      	movs	r1, #0
  402146:	4b45      	ldr	r3, [pc, #276]	; (40225c <PCA9952_init+0x124>)
  402148:	4798      	blx	r3
	/* Store cpu frequency locally*/
//7apr15	cpu_hz = fcpu;

	//Note output is off at the chip level before coming into this routine, LED_OEn set high before calling this function from main()

	PCA9952_write_reg(LED_TOP, PCA9952_MODE1, 0);		//No autoincrement, normal mode not sleep, does not respond to sub or allcall addresses
  40214a:	2000      	movs	r0, #0
  40214c:	2100      	movs	r1, #0
  40214e:	2200      	movs	r2, #0
  402150:	4b43      	ldr	r3, [pc, #268]	; (402260 <PCA9952_init+0x128>)
  402152:	4798      	blx	r3
	PCA9952_write_reg(LED_TOP, PCA9952_MODE2, 0);		//Dimming not blinking, change on stop not ack (don't really care but have to pick something)
  402154:	2000      	movs	r0, #0
  402156:	2101      	movs	r1, #1
  402158:	2200      	movs	r2, #0
  40215a:	4b41      	ldr	r3, [pc, #260]	; (402260 <PCA9952_init+0x128>)
  40215c:	4798      	blx	r3
	PCA9952_write_reg(LED_TOP, PCA9952_IREFALL, LED_DRIVER_CURRENT); //9apr15 drive at half current for now, power supply circuit needs modification
  40215e:	2000      	movs	r0, #0
  402160:	2143      	movs	r1, #67	; 0x43
  402162:	22c8      	movs	r2, #200	; 0xc8
  402164:	4b3e      	ldr	r3, [pc, #248]	; (402260 <PCA9952_init+0x128>)
  402166:	4798      	blx	r3
	PCA9952_write_reg(LED_TOP, PCA9952_LEDOUT0, 0);		//Setting all channels off for now
  402168:	2000      	movs	r0, #0
  40216a:	2102      	movs	r1, #2
  40216c:	2200      	movs	r2, #0
  40216e:	4b3c      	ldr	r3, [pc, #240]	; (402260 <PCA9952_init+0x128>)
  402170:	4798      	blx	r3
	PCA9952_write_reg(LED_TOP, PCA9952_LEDOUT1, 0);
  402172:	2000      	movs	r0, #0
  402174:	2103      	movs	r1, #3
  402176:	2200      	movs	r2, #0
  402178:	4b39      	ldr	r3, [pc, #228]	; (402260 <PCA9952_init+0x128>)
  40217a:	4798      	blx	r3
	PCA9952_write_reg(LED_TOP, PCA9952_LEDOUT2, 0);
  40217c:	2000      	movs	r0, #0
  40217e:	2104      	movs	r1, #4
  402180:	2200      	movs	r2, #0
  402182:	4b37      	ldr	r3, [pc, #220]	; (402260 <PCA9952_init+0x128>)
  402184:	4798      	blx	r3
	PCA9952_write_reg(LED_TOP, PCA9952_LEDOUT3, 0);
  402186:	2000      	movs	r0, #0
  402188:	2105      	movs	r1, #5
  40218a:	2200      	movs	r2, #0
  40218c:	4b34      	ldr	r3, [pc, #208]	; (402260 <PCA9952_init+0x128>)
  40218e:	4798      	blx	r3

	tmp1 = PCA9952_read_reg(LED_TOP, PCA9952_EFLAG0);	//TODO: just see what we get, will need to weave error checking into this system later
  402190:	2000      	movs	r0, #0
  402192:	2144      	movs	r1, #68	; 0x44
  402194:	4b33      	ldr	r3, [pc, #204]	; (402264 <PCA9952_init+0x12c>)
  402196:	4798      	blx	r3
  402198:	4603      	mov	r3, r0
  40219a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	tmp2 = PCA9952_read_reg(LED_TOP, PCA9952_EFLAG1);
  40219e:	2000      	movs	r0, #0
  4021a0:	2145      	movs	r1, #69	; 0x45
  4021a2:	4b30      	ldr	r3, [pc, #192]	; (402264 <PCA9952_init+0x12c>)
  4021a4:	4798      	blx	r3
  4021a6:	4603      	mov	r3, r0
  4021a8:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46

	PCA9952_write_reg(LED_BOTTOM, PCA9952_MODE1, 0);		//No autoincrement, normal mode not sleep, does not respond to sub or allcall addresses
  4021ac:	2001      	movs	r0, #1
  4021ae:	2100      	movs	r1, #0
  4021b0:	2200      	movs	r2, #0
  4021b2:	4b2b      	ldr	r3, [pc, #172]	; (402260 <PCA9952_init+0x128>)
  4021b4:	4798      	blx	r3
	PCA9952_write_reg(LED_BOTTOM, PCA9952_MODE2, 0);		//Dimming not blinking, change on stop not ack (don't really care but have to pick something)
  4021b6:	2001      	movs	r0, #1
  4021b8:	2101      	movs	r1, #1
  4021ba:	2200      	movs	r2, #0
  4021bc:	4b28      	ldr	r3, [pc, #160]	; (402260 <PCA9952_init+0x128>)
  4021be:	4798      	blx	r3
	PCA9952_write_reg(LED_BOTTOM, PCA9952_IREFALL, LED_DRIVER_CURRENT); //9apr15 drive at half current for now, power supply circuit needs modification
  4021c0:	2001      	movs	r0, #1
  4021c2:	2143      	movs	r1, #67	; 0x43
  4021c4:	22c8      	movs	r2, #200	; 0xc8
  4021c6:	4b26      	ldr	r3, [pc, #152]	; (402260 <PCA9952_init+0x128>)
  4021c8:	4798      	blx	r3
	PCA9952_write_reg(LED_BOTTOM, PCA9952_LEDOUT0, 0);		//Setting all channels off for now
  4021ca:	2001      	movs	r0, #1
  4021cc:	2102      	movs	r1, #2
  4021ce:	2200      	movs	r2, #0
  4021d0:	4b23      	ldr	r3, [pc, #140]	; (402260 <PCA9952_init+0x128>)
  4021d2:	4798      	blx	r3
	PCA9952_write_reg(LED_BOTTOM, PCA9952_LEDOUT1, 0);
  4021d4:	2001      	movs	r0, #1
  4021d6:	2103      	movs	r1, #3
  4021d8:	2200      	movs	r2, #0
  4021da:	4b21      	ldr	r3, [pc, #132]	; (402260 <PCA9952_init+0x128>)
  4021dc:	4798      	blx	r3
	PCA9952_write_reg(LED_BOTTOM, PCA9952_LEDOUT2, 0);
  4021de:	2001      	movs	r0, #1
  4021e0:	2104      	movs	r1, #4
  4021e2:	2200      	movs	r2, #0
  4021e4:	4b1e      	ldr	r3, [pc, #120]	; (402260 <PCA9952_init+0x128>)
  4021e6:	4798      	blx	r3
	PCA9952_write_reg(LED_BOTTOM, PCA9952_LEDOUT3, 0);
  4021e8:	2001      	movs	r0, #1
  4021ea:	2105      	movs	r1, #5
  4021ec:	2200      	movs	r2, #0
  4021ee:	4b1c      	ldr	r3, [pc, #112]	; (402260 <PCA9952_init+0x128>)
  4021f0:	4798      	blx	r3

	tmp3 = PCA9952_read_reg(LED_BOTTOM, PCA9952_EFLAG0);	//TODO: just see what we get, will need to weave error checking into this system later
  4021f2:	2001      	movs	r0, #1
  4021f4:	2144      	movs	r1, #68	; 0x44
  4021f6:	4b1b      	ldr	r3, [pc, #108]	; (402264 <PCA9952_init+0x12c>)
  4021f8:	4798      	blx	r3
  4021fa:	4603      	mov	r3, r0
  4021fc:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
	tmp4 = PCA9952_read_reg(LED_BOTTOM, PCA9952_EFLAG1);
  402200:	2001      	movs	r0, #1
  402202:	2145      	movs	r1, #69	; 0x45
  402204:	4b17      	ldr	r3, [pc, #92]	; (402264 <PCA9952_init+0x12c>)
  402206:	4798      	blx	r3
  402208:	4603      	mov	r3, r0
  40220a:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
	
	sprintf(printStr,"PCA9952: tmp1: %x tmp2: %x tmp3: %x tmp4: %x\r\n", tmp1, tmp2, tmp3, tmp4); //10feb16 just for debug jsi
  40220e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
  402212:	b2db      	uxtb	r3, r3
  402214:	461d      	mov	r5, r3
  402216:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
  40221a:	b2db      	uxtb	r3, r3
  40221c:	461c      	mov	r4, r3
  40221e:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
  402222:	b2db      	uxtb	r3, r3
  402224:	4619      	mov	r1, r3
  402226:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
  40222a:	b2db      	uxtb	r3, r3
  40222c:	461a      	mov	r2, r3
  40222e:	1d3b      	adds	r3, r7, #4
  402230:	9100      	str	r1, [sp, #0]
  402232:	9201      	str	r2, [sp, #4]
  402234:	4618      	mov	r0, r3
  402236:	490c      	ldr	r1, [pc, #48]	; (402268 <PCA9952_init+0x130>)
  402238:	462a      	mov	r2, r5
  40223a:	4623      	mov	r3, r4
  40223c:	4c0b      	ldr	r4, [pc, #44]	; (40226c <PCA9952_init+0x134>)
  40223e:	47a0      	blx	r4
	func_transmit(printStr, strlen(printStr));
  402240:	1d3b      	adds	r3, r7, #4
  402242:	4618      	mov	r0, r3
  402244:	4b0a      	ldr	r3, [pc, #40]	; (402270 <PCA9952_init+0x138>)
  402246:	4798      	blx	r3
  402248:	4602      	mov	r2, r0
  40224a:	1d3b      	adds	r3, r7, #4
  40224c:	4618      	mov	r0, r3
  40224e:	4611      	mov	r1, r2
  402250:	4b08      	ldr	r3, [pc, #32]	; (402274 <PCA9952_init+0x13c>)
  402252:	4798      	blx	r3
	
	
}
  402254:	3748      	adds	r7, #72	; 0x48
  402256:	46bd      	mov	sp, r7
  402258:	bdb0      	pop	{r4, r5, r7, pc}
  40225a:	bf00      	nop
  40225c:	00403a81 	.word	0x00403a81
  402260:	00402035 	.word	0x00402035
  402264:	004020a5 	.word	0x004020a5
  402268:	00409238 	.word	0x00409238
  40226c:	00403c9d 	.word	0x00403c9d
  402270:	00403ce9 	.word	0x00403ce9
  402274:	00403285 	.word	0x00403285

00402278 <ioport_set_pin_dir>:
 * \param pin IOPORT pin to configure
 * \param dir Direction to set for the specified pin (\ref ioport_direction)
 */
static inline void ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
  402278:	b480      	push	{r7}
  40227a:	b08d      	sub	sp, #52	; 0x34
  40227c:	af00      	add	r7, sp, #0
  40227e:	6078      	str	r0, [r7, #4]
  402280:	460b      	mov	r3, r1
  402282:	70fb      	strb	r3, [r7, #3]
  402284:	687b      	ldr	r3, [r7, #4]
  402286:	62fb      	str	r3, [r7, #44]	; 0x2c
  402288:	78fb      	ldrb	r3, [r7, #3]
  40228a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  40228e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  402290:	627b      	str	r3, [r7, #36]	; 0x24
  402292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  402294:	623b      	str	r3, [r7, #32]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  402296:	6a3b      	ldr	r3, [r7, #32]
  402298:	095b      	lsrs	r3, r3, #5
  40229a:	61fb      	str	r3, [r7, #28]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  40229c:	69fa      	ldr	r2, [r7, #28]
  40229e:	4b17      	ldr	r3, [pc, #92]	; (4022fc <ioport_set_pin_dir+0x84>)
  4022a0:	4413      	add	r3, r2
  4022a2:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);
  4022a4:	61bb      	str	r3, [r7, #24]

	if (dir == IOPORT_DIR_OUTPUT) {
  4022a6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  4022aa:	2b01      	cmp	r3, #1
  4022ac:	d109      	bne.n	4022c2 <ioport_set_pin_dir+0x4a>
  4022ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4022b0:	617b      	str	r3, [r7, #20]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  4022b2:	697b      	ldr	r3, [r7, #20]
  4022b4:	f003 031f 	and.w	r3, r3, #31
  4022b8:	2201      	movs	r2, #1
  4022ba:	409a      	lsls	r2, r3
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4022bc:	69bb      	ldr	r3, [r7, #24]
  4022be:	611a      	str	r2, [r3, #16]
  4022c0:	e00c      	b.n	4022dc <ioport_set_pin_dir+0x64>
	} else if (dir == IOPORT_DIR_INPUT) {
  4022c2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  4022c6:	2b00      	cmp	r3, #0
  4022c8:	d108      	bne.n	4022dc <ioport_set_pin_dir+0x64>
  4022ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4022cc:	613b      	str	r3, [r7, #16]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  4022ce:	693b      	ldr	r3, [r7, #16]
  4022d0:	f003 031f 	and.w	r3, r3, #31
  4022d4:	2201      	movs	r2, #1
  4022d6:	409a      	lsls	r2, r3
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  4022d8:	69bb      	ldr	r3, [r7, #24]
  4022da:	615a      	str	r2, [r3, #20]
  4022dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4022de:	60fb      	str	r3, [r7, #12]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  4022e0:	68fb      	ldr	r3, [r7, #12]
  4022e2:	f003 031f 	and.w	r3, r3, #31
  4022e6:	2201      	movs	r2, #1
  4022e8:	409a      	lsls	r2, r3
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4022ea:	69bb      	ldr	r3, [r7, #24]
  4022ec:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	arch_ioport_set_pin_dir(pin, dir);
}
  4022f0:	3734      	adds	r7, #52	; 0x34
  4022f2:	46bd      	mov	sp, r7
  4022f4:	f85d 7b04 	ldr.w	r7, [sp], #4
  4022f8:	4770      	bx	lr
  4022fa:	bf00      	nop
  4022fc:	00200707 	.word	0x00200707

00402300 <ioport_set_pin_level>:
 *
 * \param pin IOPORT pin to configure
 * \param level Logical value of the pin
 */
static inline void ioport_set_pin_level(ioport_pin_t pin, bool level)
{
  402300:	b480      	push	{r7}
  402302:	b08b      	sub	sp, #44	; 0x2c
  402304:	af00      	add	r7, sp, #0
  402306:	6078      	str	r0, [r7, #4]
  402308:	460b      	mov	r3, r1
  40230a:	70fb      	strb	r3, [r7, #3]
  40230c:	687b      	ldr	r3, [r7, #4]
  40230e:	627b      	str	r3, [r7, #36]	; 0x24
  402310:	78fb      	ldrb	r3, [r7, #3]
  402312:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  402316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  402318:	61fb      	str	r3, [r7, #28]
  40231a:	69fb      	ldr	r3, [r7, #28]
  40231c:	61bb      	str	r3, [r7, #24]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  40231e:	69bb      	ldr	r3, [r7, #24]
  402320:	095b      	lsrs	r3, r3, #5
  402322:	617b      	str	r3, [r7, #20]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  402324:	697a      	ldr	r2, [r7, #20]
  402326:	4b10      	ldr	r3, [pc, #64]	; (402368 <ioport_set_pin_level+0x68>)
  402328:	4413      	add	r3, r2
  40232a:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);
  40232c:	613b      	str	r3, [r7, #16]

	if (level) {
  40232e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
  402332:	2b00      	cmp	r3, #0
  402334:	d009      	beq.n	40234a <ioport_set_pin_level+0x4a>
  402336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  402338:	60fb      	str	r3, [r7, #12]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  40233a:	68fb      	ldr	r3, [r7, #12]
  40233c:	f003 031f 	and.w	r3, r3, #31
  402340:	2201      	movs	r2, #1
  402342:	409a      	lsls	r2, r3
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  402344:	693b      	ldr	r3, [r7, #16]
  402346:	631a      	str	r2, [r3, #48]	; 0x30
  402348:	e008      	b.n	40235c <ioport_set_pin_level+0x5c>
  40234a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40234c:	60bb      	str	r3, [r7, #8]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  40234e:	68bb      	ldr	r3, [r7, #8]
  402350:	f003 031f 	and.w	r3, r3, #31
  402354:	2201      	movs	r2, #1
  402356:	409a      	lsls	r2, r3
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  402358:	693b      	ldr	r3, [r7, #16]
  40235a:	635a      	str	r2, [r3, #52]	; 0x34
	arch_ioport_set_pin_level(pin, level);
}
  40235c:	372c      	adds	r7, #44	; 0x2c
  40235e:	46bd      	mov	sp, r7
  402360:	f85d 7b04 	ldr.w	r7, [sp], #4
  402364:	4770      	bx	lr
  402366:	bf00      	nop
  402368:	00200707 	.word	0x00200707

0040236c <ioport_get_pin_level>:
 *
 * \param pin IOPORT pin to read
 * \return Current logical value of the specified pin
 */
static inline bool ioport_get_pin_level(ioport_pin_t pin)
{
  40236c:	b480      	push	{r7}
  40236e:	b089      	sub	sp, #36	; 0x24
  402370:	af00      	add	r7, sp, #0
  402372:	6078      	str	r0, [r7, #4]
  402374:	687b      	ldr	r3, [r7, #4]
  402376:	61fb      	str	r3, [r7, #28]
  402378:	69fb      	ldr	r3, [r7, #28]
  40237a:	61bb      	str	r3, [r7, #24]
  40237c:	69bb      	ldr	r3, [r7, #24]
  40237e:	617b      	str	r3, [r7, #20]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  402380:	697b      	ldr	r3, [r7, #20]
  402382:	095b      	lsrs	r3, r3, #5
  402384:	613b      	str	r3, [r7, #16]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  402386:	693a      	ldr	r2, [r7, #16]
  402388:	4b0b      	ldr	r3, [pc, #44]	; (4023b8 <ioport_get_pin_level+0x4c>)
  40238a:	4413      	add	r3, r2
  40238c:	025b      	lsls	r3, r3, #9
	base->PIO_CODR = mask & ~level;
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  40238e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
  402390:	69fb      	ldr	r3, [r7, #28]
  402392:	60fb      	str	r3, [r7, #12]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  402394:	68fb      	ldr	r3, [r7, #12]
  402396:	f003 031f 	and.w	r3, r3, #31
  40239a:	2101      	movs	r1, #1
  40239c:	fa01 f303 	lsl.w	r3, r1, r3
	base->PIO_CODR = mask & ~level;
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  4023a0:	4013      	ands	r3, r2
  4023a2:	2b00      	cmp	r3, #0
  4023a4:	bf14      	ite	ne
  4023a6:	2301      	movne	r3, #1
  4023a8:	2300      	moveq	r3, #0
  4023aa:	b2db      	uxtb	r3, r3
	return arch_ioport_get_pin_level(pin);
}
  4023ac:	4618      	mov	r0, r3
  4023ae:	3724      	adds	r7, #36	; 0x24
  4023b0:	46bd      	mov	sp, r7
  4023b2:	f85d 7b04 	ldr.w	r7, [sp], #4
  4023b6:	4770      	bx	lr
  4023b8:	00200707 	.word	0x00200707

004023bc <udelay>:
/*
 * We have a 100MHz clock, so 100 NOPs should be about 1ns. 
 * Tried to do a 1ns tick but the chip can't seem to handle it.
 */
void udelay(uint32_t ul_dly_ticks)
{
  4023bc:	b480      	push	{r7}
  4023be:	b085      	sub	sp, #20
  4023c0:	af00      	add	r7, sp, #0
  4023c2:	6078      	str	r0, [r7, #4]
	for (uint32_t i=0; i<ul_dly_ticks; i++)
  4023c4:	2300      	movs	r3, #0
  4023c6:	60fb      	str	r3, [r7, #12]
  4023c8:	e066      	b.n	402498 <udelay+0xdc>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  4023ca:	bf00      	nop
  4023cc:	bf00      	nop
  4023ce:	bf00      	nop
  4023d0:	bf00      	nop
  4023d2:	bf00      	nop
  4023d4:	bf00      	nop
  4023d6:	bf00      	nop
  4023d8:	bf00      	nop
  4023da:	bf00      	nop
  4023dc:	bf00      	nop
  4023de:	bf00      	nop
  4023e0:	bf00      	nop
  4023e2:	bf00      	nop
  4023e4:	bf00      	nop
  4023e6:	bf00      	nop
  4023e8:	bf00      	nop
  4023ea:	bf00      	nop
  4023ec:	bf00      	nop
  4023ee:	bf00      	nop
  4023f0:	bf00      	nop
  4023f2:	bf00      	nop
  4023f4:	bf00      	nop
  4023f6:	bf00      	nop
  4023f8:	bf00      	nop
  4023fa:	bf00      	nop
  4023fc:	bf00      	nop
  4023fe:	bf00      	nop
  402400:	bf00      	nop
  402402:	bf00      	nop
  402404:	bf00      	nop
  402406:	bf00      	nop
  402408:	bf00      	nop
  40240a:	bf00      	nop
  40240c:	bf00      	nop
  40240e:	bf00      	nop
  402410:	bf00      	nop
  402412:	bf00      	nop
  402414:	bf00      	nop
  402416:	bf00      	nop
  402418:	bf00      	nop
  40241a:	bf00      	nop
  40241c:	bf00      	nop
  40241e:	bf00      	nop
  402420:	bf00      	nop
  402422:	bf00      	nop
  402424:	bf00      	nop
  402426:	bf00      	nop
  402428:	bf00      	nop
  40242a:	bf00      	nop
  40242c:	bf00      	nop
  40242e:	bf00      	nop
  402430:	bf00      	nop
  402432:	bf00      	nop
  402434:	bf00      	nop
  402436:	bf00      	nop
  402438:	bf00      	nop
  40243a:	bf00      	nop
  40243c:	bf00      	nop
  40243e:	bf00      	nop
  402440:	bf00      	nop
  402442:	bf00      	nop
  402444:	bf00      	nop
  402446:	bf00      	nop
  402448:	bf00      	nop
  40244a:	bf00      	nop
  40244c:	bf00      	nop
  40244e:	bf00      	nop
  402450:	bf00      	nop
  402452:	bf00      	nop
  402454:	bf00      	nop
  402456:	bf00      	nop
  402458:	bf00      	nop
  40245a:	bf00      	nop
  40245c:	bf00      	nop
  40245e:	bf00      	nop
  402460:	bf00      	nop
  402462:	bf00      	nop
  402464:	bf00      	nop
  402466:	bf00      	nop
  402468:	bf00      	nop
  40246a:	bf00      	nop
  40246c:	bf00      	nop
  40246e:	bf00      	nop
  402470:	bf00      	nop
  402472:	bf00      	nop
  402474:	bf00      	nop
  402476:	bf00      	nop
  402478:	bf00      	nop
  40247a:	bf00      	nop
  40247c:	bf00      	nop
  40247e:	bf00      	nop
  402480:	bf00      	nop
  402482:	bf00      	nop
  402484:	bf00      	nop
  402486:	bf00      	nop
  402488:	bf00      	nop
  40248a:	bf00      	nop
  40248c:	bf00      	nop
  40248e:	bf00      	nop
  402490:	bf00      	nop
  402492:	68fb      	ldr	r3, [r7, #12]
  402494:	3301      	adds	r3, #1
  402496:	60fb      	str	r3, [r7, #12]
  402498:	68fa      	ldr	r2, [r7, #12]
  40249a:	687b      	ldr	r3, [r7, #4]
  40249c:	429a      	cmp	r2, r3
  40249e:	d394      	bcc.n	4023ca <udelay+0xe>
		__NOP(); __NOP(); __NOP(); __NOP(); __NOP(); __NOP(); __NOP(); __NOP(); __NOP(); __NOP();
		__NOP(); __NOP(); __NOP(); __NOP(); __NOP(); __NOP(); __NOP(); __NOP(); __NOP(); __NOP();
		__NOP(); __NOP(); __NOP(); __NOP(); __NOP(); __NOP(); __NOP(); __NOP(); __NOP(); __NOP();
		__NOP(); __NOP(); __NOP(); __NOP(); __NOP(); __NOP(); __NOP(); __NOP(); __NOP(); __NOP();
	}
}
  4024a0:	3714      	adds	r7, #20
  4024a2:	46bd      	mov	sp, r7
  4024a4:	f85d 7b04 	ldr.w	r7, [sp], #4
  4024a8:	4770      	bx	lr
  4024aa:	bf00      	nop

004024ac <io_pin>:

#define EC_ONE_MICROSECOND 8

unsigned char io_pin(unsigned char idx);
unsigned char io_pin(unsigned char idx)
{
  4024ac:	b480      	push	{r7}
  4024ae:	b083      	sub	sp, #12
  4024b0:	af00      	add	r7, sp, #0
  4024b2:	4603      	mov	r3, r0
  4024b4:	71fb      	strb	r3, [r7, #7]
	switch (idx)
  4024b6:	79fb      	ldrb	r3, [r7, #7]
  4024b8:	2b04      	cmp	r3, #4
  4024ba:	d817      	bhi.n	4024ec <io_pin+0x40>
  4024bc:	a201      	add	r2, pc, #4	; (adr r2, 4024c4 <io_pin+0x18>)
  4024be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4024c2:	bf00      	nop
  4024c4:	004024d9 	.word	0x004024d9
  4024c8:	004024dd 	.word	0x004024dd
  4024cc:	004024e1 	.word	0x004024e1
  4024d0:	004024e5 	.word	0x004024e5
  4024d4:	004024e9 	.word	0x004024e9
	{
		case 0:
			return ECLAVE_SERIAL_ID0;
  4024d8:	230f      	movs	r3, #15
  4024da:	e008      	b.n	4024ee <io_pin+0x42>
			break;
		case 1:
			return ECLAVE_SERIAL_ID1;
  4024dc:	2310      	movs	r3, #16
  4024de:	e006      	b.n	4024ee <io_pin+0x42>
			break;
		case 2:
			return ECLAVE_SERIAL_ID2;
  4024e0:	2311      	movs	r3, #17
  4024e2:	e004      	b.n	4024ee <io_pin+0x42>
			break;
		case 3:
			return ECLAVE_SERIAL_ID3;
  4024e4:	2312      	movs	r3, #18
  4024e6:	e002      	b.n	4024ee <io_pin+0x42>
			break;
		case 4:
			return ECLAVE_SERIAL_ID4;
  4024e8:	2313      	movs	r3, #19
  4024ea:	e000      	b.n	4024ee <io_pin+0x42>
			break;
		default: 
			return 0; //TODO: return a better error code here
  4024ec:	2300      	movs	r3, #0
			break;
	}
}
  4024ee:	4618      	mov	r0, r3
  4024f0:	370c      	adds	r7, #12
  4024f2:	46bd      	mov	sp, r7
  4024f4:	f85d 7b04 	ldr.w	r7, [sp], #4
  4024f8:	4770      	bx	lr
  4024fa:	bf00      	nop

004024fc <drive_DQ_low>:

void drive_DQ_low(unsigned char idx);
void drive_DQ_low(unsigned char idx)
{
  4024fc:	b580      	push	{r7, lr}
  4024fe:	b084      	sub	sp, #16
  402500:	af00      	add	r7, sp, #0
  402502:	4603      	mov	r3, r0
  402504:	71fb      	strb	r3, [r7, #7]
	unsigned char ioPin;
	int32_t ioFlags;
	
	ioPin = io_pin(idx);
  402506:	79fb      	ldrb	r3, [r7, #7]
  402508:	4618      	mov	r0, r3
  40250a:	4b08      	ldr	r3, [pc, #32]	; (40252c <drive_DQ_low+0x30>)
  40250c:	4798      	blx	r3
  40250e:	4603      	mov	r3, r0
  402510:	73fb      	strb	r3, [r7, #15]
	
	ioport_set_pin_dir(ioPin, IOPORT_DIR_OUTPUT);
  402512:	7bfb      	ldrb	r3, [r7, #15]
  402514:	4618      	mov	r0, r3
  402516:	2101      	movs	r1, #1
  402518:	4b05      	ldr	r3, [pc, #20]	; (402530 <drive_DQ_low+0x34>)
  40251a:	4798      	blx	r3
	ioport_set_pin_level(ioPin, IOPORT_PIN_LEVEL_LOW);
  40251c:	7bfb      	ldrb	r3, [r7, #15]
  40251e:	4618      	mov	r0, r3
  402520:	2100      	movs	r1, #0
  402522:	4b04      	ldr	r3, [pc, #16]	; (402534 <drive_DQ_low+0x38>)
  402524:	4798      	blx	r3

}
  402526:	3710      	adds	r7, #16
  402528:	46bd      	mov	sp, r7
  40252a:	bd80      	pop	{r7, pc}
  40252c:	004024ad 	.word	0x004024ad
  402530:	00402279 	.word	0x00402279
  402534:	00402301 	.word	0x00402301

00402538 <release_the_bus>:

void release_the_bus(unsigned char idx);
void release_the_bus(unsigned char idx)
{
  402538:	b580      	push	{r7, lr}
  40253a:	b084      	sub	sp, #16
  40253c:	af00      	add	r7, sp, #0
  40253e:	4603      	mov	r3, r0
  402540:	71fb      	strb	r3, [r7, #7]
	unsigned char ioPin;
	int32_t ioFlags;
	
	ioPin = io_pin(idx);
  402542:	79fb      	ldrb	r3, [r7, #7]
  402544:	4618      	mov	r0, r3
  402546:	4b06      	ldr	r3, [pc, #24]	; (402560 <release_the_bus+0x28>)
  402548:	4798      	blx	r3
  40254a:	4603      	mov	r3, r0
  40254c:	73fb      	strb	r3, [r7, #15]
	
	ioport_set_pin_dir(ioPin, IOPORT_DIR_INPUT);
  40254e:	7bfb      	ldrb	r3, [r7, #15]
  402550:	4618      	mov	r0, r3
  402552:	2100      	movs	r1, #0
  402554:	4b03      	ldr	r3, [pc, #12]	; (402564 <release_the_bus+0x2c>)
  402556:	4798      	blx	r3
	

}
  402558:	3710      	adds	r7, #16
  40255a:	46bd      	mov	sp, r7
  40255c:	bd80      	pop	{r7, pc}
  40255e:	bf00      	nop
  402560:	004024ad 	.word	0x004024ad
  402564:	00402279 	.word	0x00402279

00402568 <gpio_input>:

void gpio_input(unsigned char idx) //14may15 experiment
{
  402568:	b580      	push	{r7, lr}
  40256a:	b084      	sub	sp, #16
  40256c:	af00      	add	r7, sp, #0
  40256e:	4603      	mov	r3, r0
  402570:	71fb      	strb	r3, [r7, #7]
	uint32_t ioFlags;
	unsigned char ioPin;
		
	ioPin = io_pin(idx);
  402572:	79fb      	ldrb	r3, [r7, #7]
  402574:	4618      	mov	r0, r3
  402576:	4b06      	ldr	r3, [pc, #24]	; (402590 <gpio_input+0x28>)
  402578:	4798      	blx	r3
  40257a:	4603      	mov	r3, r0
  40257c:	73fb      	strb	r3, [r7, #15]
		
	ioport_set_pin_dir(ioPin, IOPORT_DIR_INPUT);
  40257e:	7bfb      	ldrb	r3, [r7, #15]
  402580:	4618      	mov	r0, r3
  402582:	2100      	movs	r1, #0
  402584:	4b03      	ldr	r3, [pc, #12]	; (402594 <gpio_input+0x2c>)
  402586:	4798      	blx	r3


}
  402588:	3710      	adds	r7, #16
  40258a:	46bd      	mov	sp, r7
  40258c:	bd80      	pop	{r7, pc}
  40258e:	bf00      	nop
  402590:	004024ad 	.word	0x004024ad
  402594:	00402279 	.word	0x00402279

00402598 <sample_line>:

unsigned char sample_line(unsigned char idx);
unsigned char sample_line(unsigned char idx)
{
  402598:	b580      	push	{r7, lr}
  40259a:	b084      	sub	sp, #16
  40259c:	af00      	add	r7, sp, #0
  40259e:	4603      	mov	r3, r0
  4025a0:	71fb      	strb	r3, [r7, #7]
//14may15 experiment		uint32_t ioFlags;
		unsigned char retVal, ioPin;
		
		ioPin = io_pin(idx);
  4025a2:	79fb      	ldrb	r3, [r7, #7]
  4025a4:	4618      	mov	r0, r3
  4025a6:	4b07      	ldr	r3, [pc, #28]	; (4025c4 <sample_line+0x2c>)
  4025a8:	4798      	blx	r3
  4025aa:	4603      	mov	r3, r0
  4025ac:	73fb      	strb	r3, [r7, #15]
		
//14may15 experiment		ioFlags = (GPIO_DIR_INPUT);
//14may15 experiment		gpio_configure_pin(ioPin, ioFlags);

		retVal = ioport_get_pin_level(ioPin);
  4025ae:	7bfb      	ldrb	r3, [r7, #15]
  4025b0:	4618      	mov	r0, r3
  4025b2:	4b05      	ldr	r3, [pc, #20]	; (4025c8 <sample_line+0x30>)
  4025b4:	4798      	blx	r3
  4025b6:	4603      	mov	r3, r0
  4025b8:	73bb      	strb	r3, [r7, #14]

//14may15 experiment		ioFlags = (GPIO_DIR_OUTPUT);
//14may15 experiment		gpio_configure_pin(ioPin, ioFlags);

		return retVal;
  4025ba:	7bbb      	ldrb	r3, [r7, #14]
}
  4025bc:	4618      	mov	r0, r3
  4025be:	3710      	adds	r7, #16
  4025c0:	46bd      	mov	sp, r7
  4025c2:	bd80      	pop	{r7, pc}
  4025c4:	004024ad 	.word	0x004024ad
  4025c8:	0040236d 	.word	0x0040236d

004025cc <SetSpeed>:

//-----------------------------------------------------------------------------
// Set the 1-Wire timing to 'standard' (standard=1) or 'overdrive' (standard=0).
//
void SetSpeed(int standard)
{
  4025cc:	b480      	push	{r7}
  4025ce:	b083      	sub	sp, #12
  4025d0:	af00      	add	r7, sp, #0
  4025d2:	6078      	str	r0, [r7, #4]
		J = 410;
	}
	
#endif

	if (standard) //experiment 16may15 cut everything in half, some issue with using the PLL? and fudge the tight numbers at the low end
  4025d4:	687b      	ldr	r3, [r7, #4]
  4025d6:	2b00      	cmp	r3, #0
  4025d8:	d01e      	beq.n	402618 <SetSpeed+0x4c>
	{
		// Standard Speed
		A = 0; //6;
  4025da:	4b21      	ldr	r3, [pc, #132]	; (402660 <SetSpeed+0x94>)
  4025dc:	2200      	movs	r2, #0
  4025de:	601a      	str	r2, [r3, #0]
		B = 32; //64;
  4025e0:	4b20      	ldr	r3, [pc, #128]	; (402664 <SetSpeed+0x98>)
  4025e2:	2220      	movs	r2, #32
  4025e4:	601a      	str	r2, [r3, #0]
		C = 30; //60;
  4025e6:	4b20      	ldr	r3, [pc, #128]	; (402668 <SetSpeed+0x9c>)
  4025e8:	221e      	movs	r2, #30
  4025ea:	601a      	str	r2, [r3, #0]
		D = 2; //10;
  4025ec:	4b1f      	ldr	r3, [pc, #124]	; (40266c <SetSpeed+0xa0>)
  4025ee:	2202      	movs	r2, #2
  4025f0:	601a      	str	r2, [r3, #0]
		E = 2; //9;
  4025f2:	4b1f      	ldr	r3, [pc, #124]	; (402670 <SetSpeed+0xa4>)
  4025f4:	2202      	movs	r2, #2
  4025f6:	601a      	str	r2, [r3, #0]
		F = 27; //55;
  4025f8:	4b1e      	ldr	r3, [pc, #120]	; (402674 <SetSpeed+0xa8>)
  4025fa:	221b      	movs	r2, #27
  4025fc:	601a      	str	r2, [r3, #0]
		G = 0; //0;
  4025fe:	4b1e      	ldr	r3, [pc, #120]	; (402678 <SetSpeed+0xac>)
  402600:	2200      	movs	r2, #0
  402602:	601a      	str	r2, [r3, #0]
		H = 240; //480;
  402604:	4b1d      	ldr	r3, [pc, #116]	; (40267c <SetSpeed+0xb0>)
  402606:	22f0      	movs	r2, #240	; 0xf0
  402608:	601a      	str	r2, [r3, #0]
		I = 35; //70;
  40260a:	4b1d      	ldr	r3, [pc, #116]	; (402680 <SetSpeed+0xb4>)
  40260c:	2223      	movs	r2, #35	; 0x23
  40260e:	601a      	str	r2, [r3, #0]
		J = 205; //410;
  402610:	4b1c      	ldr	r3, [pc, #112]	; (402684 <SetSpeed+0xb8>)
  402612:	22cd      	movs	r2, #205	; 0xcd
  402614:	601a      	str	r2, [r3, #0]
  402616:	e01d      	b.n	402654 <SetSpeed+0x88>


	else
	{
		// Overdrive Speed
		A = 1.5;
  402618:	4b11      	ldr	r3, [pc, #68]	; (402660 <SetSpeed+0x94>)
  40261a:	2201      	movs	r2, #1
  40261c:	601a      	str	r2, [r3, #0]
		B = 7.5;
  40261e:	4b11      	ldr	r3, [pc, #68]	; (402664 <SetSpeed+0x98>)
  402620:	2207      	movs	r2, #7
  402622:	601a      	str	r2, [r3, #0]
		C = 7.5;
  402624:	4b10      	ldr	r3, [pc, #64]	; (402668 <SetSpeed+0x9c>)
  402626:	2207      	movs	r2, #7
  402628:	601a      	str	r2, [r3, #0]
		D = 2.5;
  40262a:	4b10      	ldr	r3, [pc, #64]	; (40266c <SetSpeed+0xa0>)
  40262c:	2202      	movs	r2, #2
  40262e:	601a      	str	r2, [r3, #0]
		E = 0.75;
  402630:	4b0f      	ldr	r3, [pc, #60]	; (402670 <SetSpeed+0xa4>)
  402632:	2200      	movs	r2, #0
  402634:	601a      	str	r2, [r3, #0]
		F = 7;
  402636:	4b0f      	ldr	r3, [pc, #60]	; (402674 <SetSpeed+0xa8>)
  402638:	2207      	movs	r2, #7
  40263a:	601a      	str	r2, [r3, #0]
		G = 2.5;
  40263c:	4b0e      	ldr	r3, [pc, #56]	; (402678 <SetSpeed+0xac>)
  40263e:	2202      	movs	r2, #2
  402640:	601a      	str	r2, [r3, #0]
		H = 70;
  402642:	4b0e      	ldr	r3, [pc, #56]	; (40267c <SetSpeed+0xb0>)
  402644:	2246      	movs	r2, #70	; 0x46
  402646:	601a      	str	r2, [r3, #0]
		I = 8.5;
  402648:	4b0d      	ldr	r3, [pc, #52]	; (402680 <SetSpeed+0xb4>)
  40264a:	2208      	movs	r2, #8
  40264c:	601a      	str	r2, [r3, #0]
		J = 40;
  40264e:	4b0d      	ldr	r3, [pc, #52]	; (402684 <SetSpeed+0xb8>)
  402650:	2228      	movs	r2, #40	; 0x28
  402652:	601a      	str	r2, [r3, #0]
	}
}
  402654:	370c      	adds	r7, #12
  402656:	46bd      	mov	sp, r7
  402658:	f85d 7b04 	ldr.w	r7, [sp], #4
  40265c:	4770      	bx	lr
  40265e:	bf00      	nop
  402660:	20400a78 	.word	0x20400a78
  402664:	20400a7c 	.word	0x20400a7c
  402668:	20400a84 	.word	0x20400a84
  40266c:	20400a74 	.word	0x20400a74
  402670:	20400a90 	.word	0x20400a90
  402674:	20400a98 	.word	0x20400a98
  402678:	20400a88 	.word	0x20400a88
  40267c:	20400a8c 	.word	0x20400a8c
  402680:	20400a94 	.word	0x20400a94
  402684:	20400a80 	.word	0x20400a80

00402688 <OWTouchReset>:
// Generate a 1-Wire reset, return 1 if no presence detect was found,
// return 0 otherwise.
// (NOTE: Does not handle alarm presence from DS2404/DS1994)
//
int OWTouchReset(unsigned char idx)
{
  402688:	b580      	push	{r7, lr}
  40268a:	b084      	sub	sp, #16
  40268c:	af00      	add	r7, sp, #0
  40268e:	4603      	mov	r3, r0
  402690:	71fb      	strb	r3, [r7, #7]
	int result;

	udelay(A);
  402692:	4b17      	ldr	r3, [pc, #92]	; (4026f0 <OWTouchReset+0x68>)
  402694:	681b      	ldr	r3, [r3, #0]
  402696:	4618      	mov	r0, r3
  402698:	4b16      	ldr	r3, [pc, #88]	; (4026f4 <OWTouchReset+0x6c>)
  40269a:	4798      	blx	r3
	drive_DQ_low(idx);
  40269c:	79fb      	ldrb	r3, [r7, #7]
  40269e:	4618      	mov	r0, r3
  4026a0:	4b15      	ldr	r3, [pc, #84]	; (4026f8 <OWTouchReset+0x70>)
  4026a2:	4798      	blx	r3
	udelay(H);	//tRSTL (reset low) 480-640us
  4026a4:	4b15      	ldr	r3, [pc, #84]	; (4026fc <OWTouchReset+0x74>)
  4026a6:	681b      	ldr	r3, [r3, #0]
  4026a8:	4618      	mov	r0, r3
  4026aa:	4b12      	ldr	r3, [pc, #72]	; (4026f4 <OWTouchReset+0x6c>)
  4026ac:	4798      	blx	r3
	release_the_bus(idx);
  4026ae:	79fb      	ldrb	r3, [r7, #7]
  4026b0:	4618      	mov	r0, r3
  4026b2:	4b13      	ldr	r3, [pc, #76]	; (402700 <OWTouchReset+0x78>)
  4026b4:	4798      	blx	r3
	
	gpio_input(idx); //14may15 experiment
  4026b6:	79fb      	ldrb	r3, [r7, #7]
  4026b8:	4618      	mov	r0, r3
  4026ba:	4b12      	ldr	r3, [pc, #72]	; (402704 <OWTouchReset+0x7c>)
  4026bc:	4798      	blx	r3

	
	udelay(I);	//tMSP (presence detect sample) 60-75us
  4026be:	4b12      	ldr	r3, [pc, #72]	; (402708 <OWTouchReset+0x80>)
  4026c0:	681b      	ldr	r3, [r3, #0]
  4026c2:	4618      	mov	r0, r3
  4026c4:	4b0b      	ldr	r3, [pc, #44]	; (4026f4 <OWTouchReset+0x6c>)
  4026c6:	4798      	blx	r3
	result = sample_line(idx);
  4026c8:	79fb      	ldrb	r3, [r7, #7]
  4026ca:	4618      	mov	r0, r3
  4026cc:	4b0f      	ldr	r3, [pc, #60]	; (40270c <OWTouchReset+0x84>)
  4026ce:	4798      	blx	r3
  4026d0:	4603      	mov	r3, r0
  4026d2:	60fb      	str	r3, [r7, #12]
	
	gpio_input(idx); //14may15 experiment
  4026d4:	79fb      	ldrb	r3, [r7, #7]
  4026d6:	4618      	mov	r0, r3
  4026d8:	4b0a      	ldr	r3, [pc, #40]	; (402704 <OWTouchReset+0x7c>)
  4026da:	4798      	blx	r3

	udelay(J); // Complete the reset sequence recovery 5-??us (no max?)
  4026dc:	4b0c      	ldr	r3, [pc, #48]	; (402710 <OWTouchReset+0x88>)
  4026de:	681b      	ldr	r3, [r3, #0]
  4026e0:	4618      	mov	r0, r3
  4026e2:	4b04      	ldr	r3, [pc, #16]	; (4026f4 <OWTouchReset+0x6c>)
  4026e4:	4798      	blx	r3
	return result; // Return sample presence pulse result
  4026e6:	68fb      	ldr	r3, [r7, #12]
}
  4026e8:	4618      	mov	r0, r3
  4026ea:	3710      	adds	r7, #16
  4026ec:	46bd      	mov	sp, r7
  4026ee:	bd80      	pop	{r7, pc}
  4026f0:	20400a78 	.word	0x20400a78
  4026f4:	004023bd 	.word	0x004023bd
  4026f8:	004024fd 	.word	0x004024fd
  4026fc:	20400a8c 	.word	0x20400a8c
  402700:	00402539 	.word	0x00402539
  402704:	00402569 	.word	0x00402569
  402708:	20400a94 	.word	0x20400a94
  40270c:	00402599 	.word	0x00402599
  402710:	20400a80 	.word	0x20400a80

00402714 <drive_DQ_low_and_release_the_bus>:

void drive_DQ_low_and_release_the_bus(unsigned char idx);
void drive_DQ_low_and_release_the_bus(unsigned char idx)
{
  402714:	b580      	push	{r7, lr}
  402716:	b084      	sub	sp, #16
  402718:	af00      	add	r7, sp, #0
  40271a:	4603      	mov	r3, r0
  40271c:	71fb      	strb	r3, [r7, #7]
	unsigned char ioPin;
	int32_t ioFlagsOutput, ioFlagsInput;
	
	ioPin = io_pin(idx);
  40271e:	79fb      	ldrb	r3, [r7, #7]
  402720:	4618      	mov	r0, r3
  402722:	4b0d      	ldr	r3, [pc, #52]	; (402758 <drive_DQ_low_and_release_the_bus+0x44>)
  402724:	4798      	blx	r3
  402726:	4603      	mov	r3, r0
  402728:	73fb      	strb	r3, [r7, #15]
	
	ioport_set_pin_dir(ioPin, IOPORT_DIR_OUTPUT);
  40272a:	7bfb      	ldrb	r3, [r7, #15]
  40272c:	4618      	mov	r0, r3
  40272e:	2101      	movs	r1, #1
  402730:	4b0a      	ldr	r3, [pc, #40]	; (40275c <drive_DQ_low_and_release_the_bus+0x48>)
  402732:	4798      	blx	r3
	ioport_set_pin_level(ioPin, IOPORT_PIN_LEVEL_LOW);
  402734:	7bfb      	ldrb	r3, [r7, #15]
  402736:	4618      	mov	r0, r3
  402738:	2100      	movs	r1, #0
  40273a:	4b09      	ldr	r3, [pc, #36]	; (402760 <drive_DQ_low_and_release_the_bus+0x4c>)
  40273c:	4798      	blx	r3

	udelay(A);	//tW1L 5-15us
  40273e:	4b09      	ldr	r3, [pc, #36]	; (402764 <drive_DQ_low_and_release_the_bus+0x50>)
  402740:	681b      	ldr	r3, [r3, #0]
  402742:	4618      	mov	r0, r3
  402744:	4b08      	ldr	r3, [pc, #32]	; (402768 <drive_DQ_low_and_release_the_bus+0x54>)
  402746:	4798      	blx	r3

	ioport_set_pin_dir(ioPin, IOPORT_DIR_INPUT);
  402748:	7bfb      	ldrb	r3, [r7, #15]
  40274a:	4618      	mov	r0, r3
  40274c:	2100      	movs	r1, #0
  40274e:	4b03      	ldr	r3, [pc, #12]	; (40275c <drive_DQ_low_and_release_the_bus+0x48>)
  402750:	4798      	blx	r3
	
}
  402752:	3710      	adds	r7, #16
  402754:	46bd      	mov	sp, r7
  402756:	bd80      	pop	{r7, pc}
  402758:	004024ad 	.word	0x004024ad
  40275c:	00402279 	.word	0x00402279
  402760:	00402301 	.word	0x00402301
  402764:	20400a78 	.word	0x20400a78
  402768:	004023bd 	.word	0x004023bd

0040276c <OWWriteBit>:
//-----------------------------------------------------------------------------
// Send a 1-Wire write bit. Provide 10us recovery time.
//
void OWWriteBit(unsigned char idx, int bit);
void OWWriteBit(unsigned char idx, int bit)
{
  40276c:	b580      	push	{r7, lr}
  40276e:	b082      	sub	sp, #8
  402770:	af00      	add	r7, sp, #0
  402772:	4603      	mov	r3, r0
  402774:	6039      	str	r1, [r7, #0]
  402776:	71fb      	strb	r3, [r7, #7]
	if (bit)
  402778:	683b      	ldr	r3, [r7, #0]
  40277a:	2b00      	cmp	r3, #0
  40277c:	d009      	beq.n	402792 <OWWriteBit+0x26>
	{
		// Write '1' bit
		drive_DQ_low_and_release_the_bus(idx);
  40277e:	79fb      	ldrb	r3, [r7, #7]
  402780:	4618      	mov	r0, r3
  402782:	4b0e      	ldr	r3, [pc, #56]	; (4027bc <OWWriteBit+0x50>)
  402784:	4798      	blx	r3
#if 0
		drive_DQ_low(idx);
//14may15 take this out entirely, we can't seem to control this precisely enough		cpu_delay_us(A, EC_CPU_CLOCK_100MHZ	//tW1L 5-15us
		release_the_bus(idx);
#endif
		udelay(B);	// Complete the time slot and 10us recovery tSLOT 65-??us (no max)
  402786:	4b0e      	ldr	r3, [pc, #56]	; (4027c0 <OWWriteBit+0x54>)
  402788:	681b      	ldr	r3, [r3, #0]
  40278a:	4618      	mov	r0, r3
  40278c:	4b0d      	ldr	r3, [pc, #52]	; (4027c4 <OWWriteBit+0x58>)
  40278e:	4798      	blx	r3
  402790:	e011      	b.n	4027b6 <OWWriteBit+0x4a>
	}
	else
	{
		// Write '0' bit
		drive_DQ_low(idx);
  402792:	79fb      	ldrb	r3, [r7, #7]
  402794:	4618      	mov	r0, r3
  402796:	4b0c      	ldr	r3, [pc, #48]	; (4027c8 <OWWriteBit+0x5c>)
  402798:	4798      	blx	r3
		udelay(C);	//tW0L 60-120us
  40279a:	4b0c      	ldr	r3, [pc, #48]	; (4027cc <OWWriteBit+0x60>)
  40279c:	681b      	ldr	r3, [r3, #0]
  40279e:	4618      	mov	r0, r3
  4027a0:	4b08      	ldr	r3, [pc, #32]	; (4027c4 <OWWriteBit+0x58>)
  4027a2:	4798      	blx	r3
		release_the_bus(idx);
  4027a4:	79fb      	ldrb	r3, [r7, #7]
  4027a6:	4618      	mov	r0, r3
  4027a8:	4b09      	ldr	r3, [pc, #36]	; (4027d0 <OWWriteBit+0x64>)
  4027aa:	4798      	blx	r3
		udelay(D);	//tREC 5-??us
  4027ac:	4b09      	ldr	r3, [pc, #36]	; (4027d4 <OWWriteBit+0x68>)
  4027ae:	681b      	ldr	r3, [r3, #0]
  4027b0:	4618      	mov	r0, r3
  4027b2:	4b04      	ldr	r3, [pc, #16]	; (4027c4 <OWWriteBit+0x58>)
  4027b4:	4798      	blx	r3
	}
}
  4027b6:	3708      	adds	r7, #8
  4027b8:	46bd      	mov	sp, r7
  4027ba:	bd80      	pop	{r7, pc}
  4027bc:	00402715 	.word	0x00402715
  4027c0:	20400a7c 	.word	0x20400a7c
  4027c4:	004023bd 	.word	0x004023bd
  4027c8:	004024fd 	.word	0x004024fd
  4027cc:	20400a84 	.word	0x20400a84
  4027d0:	00402539 	.word	0x00402539
  4027d4:	20400a74 	.word	0x20400a74

004027d8 <OWReadBit>:
//-----------------------------------------------------------------------------
// Read a bit from the 1-Wire bus and return it. Provide 10us recovery time.
//
int OWReadBit(unsigned char idx);
int OWReadBit(unsigned char idx)
{
  4027d8:	b580      	push	{r7, lr}
  4027da:	b084      	sub	sp, #16
  4027dc:	af00      	add	r7, sp, #0
  4027de:	4603      	mov	r3, r0
  4027e0:	71fb      	strb	r3, [r7, #7]
#if 0
	drive_DQ_low(idx);
//14may15 take this out entirely, we can't seem to control this precisely enough	cpu_delay_us(A, EC_CPU_CLOCK_100MHZ	//tRL 5-15us
	release_the_bus(idx);
#endif
	drive_DQ_low_and_release_the_bus(idx);
  4027e2:	79fb      	ldrb	r3, [r7, #7]
  4027e4:	4618      	mov	r0, r3
  4027e6:	4b0b      	ldr	r3, [pc, #44]	; (402814 <OWReadBit+0x3c>)
  4027e8:	4798      	blx	r3
	
	udelay(E);	//tMSR 5-15us
  4027ea:	4b0b      	ldr	r3, [pc, #44]	; (402818 <OWReadBit+0x40>)
  4027ec:	681b      	ldr	r3, [r3, #0]
  4027ee:	4618      	mov	r0, r3
  4027f0:	4b0a      	ldr	r3, [pc, #40]	; (40281c <OWReadBit+0x44>)
  4027f2:	4798      	blx	r3
	result = sample_line(idx);
  4027f4:	79fb      	ldrb	r3, [r7, #7]
  4027f6:	4618      	mov	r0, r3
  4027f8:	4b09      	ldr	r3, [pc, #36]	; (402820 <OWReadBit+0x48>)
  4027fa:	4798      	blx	r3
  4027fc:	4603      	mov	r3, r0
  4027fe:	60fb      	str	r3, [r7, #12]
	udelay(F); // Complete the time slot and 10us recovery tREC 5+us
  402800:	4b08      	ldr	r3, [pc, #32]	; (402824 <OWReadBit+0x4c>)
  402802:	681b      	ldr	r3, [r3, #0]
  402804:	4618      	mov	r0, r3
  402806:	4b05      	ldr	r3, [pc, #20]	; (40281c <OWReadBit+0x44>)
  402808:	4798      	blx	r3

	return result;
  40280a:	68fb      	ldr	r3, [r7, #12]
}
  40280c:	4618      	mov	r0, r3
  40280e:	3710      	adds	r7, #16
  402810:	46bd      	mov	sp, r7
  402812:	bd80      	pop	{r7, pc}
  402814:	00402715 	.word	0x00402715
  402818:	20400a90 	.word	0x20400a90
  40281c:	004023bd 	.word	0x004023bd
  402820:	00402599 	.word	0x00402599
  402824:	20400a98 	.word	0x20400a98

00402828 <OWWriteByte>:

//-----------------------------------------------------------------------------
// Write 1-Wire data byte
//
void OWWriteByte(unsigned char idx, int data)
{
  402828:	b580      	push	{r7, lr}
  40282a:	b084      	sub	sp, #16
  40282c:	af00      	add	r7, sp, #0
  40282e:	4603      	mov	r3, r0
  402830:	6039      	str	r1, [r7, #0]
  402832:	71fb      	strb	r3, [r7, #7]
	int loop;

	// Loop to write each bit in the byte, LS-bit first
	for (loop = 0; loop < 8; loop++)
  402834:	2300      	movs	r3, #0
  402836:	60fb      	str	r3, [r7, #12]
  402838:	e00d      	b.n	402856 <OWWriteByte+0x2e>
	{
		OWWriteBit(idx, data & 0x01);
  40283a:	683b      	ldr	r3, [r7, #0]
  40283c:	f003 0301 	and.w	r3, r3, #1
  402840:	79fa      	ldrb	r2, [r7, #7]
  402842:	4610      	mov	r0, r2
  402844:	4619      	mov	r1, r3
  402846:	4b07      	ldr	r3, [pc, #28]	; (402864 <OWWriteByte+0x3c>)
  402848:	4798      	blx	r3

		// shift the data byte for the next bit
		data >>= 1;
  40284a:	683b      	ldr	r3, [r7, #0]
  40284c:	105b      	asrs	r3, r3, #1
  40284e:	603b      	str	r3, [r7, #0]
void OWWriteByte(unsigned char idx, int data)
{
	int loop;

	// Loop to write each bit in the byte, LS-bit first
	for (loop = 0; loop < 8; loop++)
  402850:	68fb      	ldr	r3, [r7, #12]
  402852:	3301      	adds	r3, #1
  402854:	60fb      	str	r3, [r7, #12]
  402856:	68fb      	ldr	r3, [r7, #12]
  402858:	2b07      	cmp	r3, #7
  40285a:	ddee      	ble.n	40283a <OWWriteByte+0x12>
		OWWriteBit(idx, data & 0x01);

		// shift the data byte for the next bit
		data >>= 1;
	}
}
  40285c:	3710      	adds	r7, #16
  40285e:	46bd      	mov	sp, r7
  402860:	bd80      	pop	{r7, pc}
  402862:	bf00      	nop
  402864:	0040276d 	.word	0x0040276d

00402868 <OWReadByte>:

//-----------------------------------------------------------------------------
// Read 1-Wire data byte and return it
//
int OWReadByte(unsigned char idx)
{
  402868:	b580      	push	{r7, lr}
  40286a:	b084      	sub	sp, #16
  40286c:	af00      	add	r7, sp, #0
  40286e:	4603      	mov	r3, r0
  402870:	71fb      	strb	r3, [r7, #7]
	int loop, result=0;
  402872:	2300      	movs	r3, #0
  402874:	60bb      	str	r3, [r7, #8]

	for (loop = 0; loop < 8; loop++)
  402876:	2300      	movs	r3, #0
  402878:	60fb      	str	r3, [r7, #12]
  40287a:	e010      	b.n	40289e <OWReadByte+0x36>
	{
		// shift the result to get it ready for the next bit
		result >>= 1;
  40287c:	68bb      	ldr	r3, [r7, #8]
  40287e:	105b      	asrs	r3, r3, #1
  402880:	60bb      	str	r3, [r7, #8]

		// if result is one, then set MS bit
		if (OWReadBit(idx))
  402882:	79fb      	ldrb	r3, [r7, #7]
  402884:	4618      	mov	r0, r3
  402886:	4b0a      	ldr	r3, [pc, #40]	; (4028b0 <OWReadByte+0x48>)
  402888:	4798      	blx	r3
  40288a:	4603      	mov	r3, r0
  40288c:	2b00      	cmp	r3, #0
  40288e:	d003      	beq.n	402898 <OWReadByte+0x30>
		result |= 0x80;
  402890:	68bb      	ldr	r3, [r7, #8]
  402892:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  402896:	60bb      	str	r3, [r7, #8]
//
int OWReadByte(unsigned char idx)
{
	int loop, result=0;

	for (loop = 0; loop < 8; loop++)
  402898:	68fb      	ldr	r3, [r7, #12]
  40289a:	3301      	adds	r3, #1
  40289c:	60fb      	str	r3, [r7, #12]
  40289e:	68fb      	ldr	r3, [r7, #12]
  4028a0:	2b07      	cmp	r3, #7
  4028a2:	ddeb      	ble.n	40287c <OWReadByte+0x14>

		// if result is one, then set MS bit
		if (OWReadBit(idx))
		result |= 0x80;
	}
	return result;
  4028a4:	68bb      	ldr	r3, [r7, #8]
}
  4028a6:	4618      	mov	r0, r3
  4028a8:	3710      	adds	r7, #16
  4028aa:	46bd      	mov	sp, r7
  4028ac:	bd80      	pop	{r7, pc}
  4028ae:	bf00      	nop
  4028b0:	004027d9 	.word	0x004027d9

004028b4 <crc8_add>:
	return OWTouchReset(idx);
}

/* Polynomial ^8 + ^5 + ^4 + 1 */
unsigned char crc8_add(unsigned char acc, unsigned char byte)
{
  4028b4:	b480      	push	{r7}
  4028b6:	b085      	sub	sp, #20
  4028b8:	af00      	add	r7, sp, #0
  4028ba:	4603      	mov	r3, r0
  4028bc:	460a      	mov	r2, r1
  4028be:	71fb      	strb	r3, [r7, #7]
  4028c0:	4613      	mov	r3, r2
  4028c2:	71bb      	strb	r3, [r7, #6]
   int i;
   acc ^= byte;
  4028c4:	79fa      	ldrb	r2, [r7, #7]
  4028c6:	79bb      	ldrb	r3, [r7, #6]
  4028c8:	4053      	eors	r3, r2
  4028ca:	71fb      	strb	r3, [r7, #7]
   for(i = 0; i < 8; i++) 
  4028cc:	2300      	movs	r3, #0
  4028ce:	60fb      	str	r3, [r7, #12]
  4028d0:	e012      	b.n	4028f8 <crc8_add+0x44>
   {
		if(acc & 1) 
  4028d2:	79fb      	ldrb	r3, [r7, #7]
  4028d4:	f003 0301 	and.w	r3, r3, #1
  4028d8:	2b00      	cmp	r3, #0
  4028da:	d007      	beq.n	4028ec <crc8_add+0x38>
		{
			acc = (acc >> 1) ^ 0x8c;
  4028dc:	79fb      	ldrb	r3, [r7, #7]
  4028de:	085b      	lsrs	r3, r3, #1
  4028e0:	b2da      	uxtb	r2, r3
  4028e2:	f06f 0373 	mvn.w	r3, #115	; 0x73
  4028e6:	4053      	eors	r3, r2
  4028e8:	71fb      	strb	r3, [r7, #7]
  4028ea:	e002      	b.n	4028f2 <crc8_add+0x3e>
		} 
		else 
		{
			acc >>= 1;
  4028ec:	79fb      	ldrb	r3, [r7, #7]
  4028ee:	085b      	lsrs	r3, r3, #1
  4028f0:	71fb      	strb	r3, [r7, #7]
/* Polynomial ^8 + ^5 + ^4 + 1 */
unsigned char crc8_add(unsigned char acc, unsigned char byte)
{
   int i;
   acc ^= byte;
   for(i = 0; i < 8; i++) 
  4028f2:	68fb      	ldr	r3, [r7, #12]
  4028f4:	3301      	adds	r3, #1
  4028f6:	60fb      	str	r3, [r7, #12]
  4028f8:	68fb      	ldr	r3, [r7, #12]
  4028fa:	2b07      	cmp	r3, #7
  4028fc:	dde9      	ble.n	4028d2 <crc8_add+0x1e>
		else 
		{
			acc >>= 1;
	    }
   }
   return acc;
  4028fe:	79fb      	ldrb	r3, [r7, #7]
}
  402900:	4618      	mov	r0, r3
  402902:	3714      	adds	r7, #20
  402904:	46bd      	mov	sp, r7
  402906:	f85d 7b04 	ldr.w	r7, [sp], #4
  40290a:	4770      	bx	lr

0040290c <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  40290c:	b480      	push	{r7}
  40290e:	b083      	sub	sp, #12
  402910:	af00      	add	r7, sp, #0
  402912:	4603      	mov	r3, r0
  402914:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  402916:	4908      	ldr	r1, [pc, #32]	; (402938 <NVIC_EnableIRQ+0x2c>)
  402918:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40291c:	095b      	lsrs	r3, r3, #5
  40291e:	79fa      	ldrb	r2, [r7, #7]
  402920:	f002 021f 	and.w	r2, r2, #31
  402924:	2001      	movs	r0, #1
  402926:	fa00 f202 	lsl.w	r2, r0, r2
  40292a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  40292e:	370c      	adds	r7, #12
  402930:	46bd      	mov	sp, r7
  402932:	f85d 7b04 	ldr.w	r7, [sp], #4
  402936:	4770      	bx	lr
  402938:	e000e100 	.word	0xe000e100

0040293c <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  40293c:	b480      	push	{r7}
  40293e:	b083      	sub	sp, #12
  402940:	af00      	add	r7, sp, #0
  402942:	4603      	mov	r3, r0
  402944:	6039      	str	r1, [r7, #0]
  402946:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
  402948:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40294c:	2b00      	cmp	r3, #0
  40294e:	da0b      	bge.n	402968 <NVIC_SetPriority+0x2c>
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  402950:	490d      	ldr	r1, [pc, #52]	; (402988 <NVIC_SetPriority+0x4c>)
  402952:	79fb      	ldrb	r3, [r7, #7]
  402954:	f003 030f 	and.w	r3, r3, #15
  402958:	3b04      	subs	r3, #4
  40295a:	683a      	ldr	r2, [r7, #0]
  40295c:	b2d2      	uxtb	r2, r2
  40295e:	0152      	lsls	r2, r2, #5
  402960:	b2d2      	uxtb	r2, r2
  402962:	440b      	add	r3, r1
  402964:	761a      	strb	r2, [r3, #24]
  402966:	e009      	b.n	40297c <NVIC_SetPriority+0x40>
  else {
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  402968:	4908      	ldr	r1, [pc, #32]	; (40298c <NVIC_SetPriority+0x50>)
  40296a:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40296e:	683a      	ldr	r2, [r7, #0]
  402970:	b2d2      	uxtb	r2, r2
  402972:	0152      	lsls	r2, r2, #5
  402974:	b2d2      	uxtb	r2, r2
  402976:	440b      	add	r3, r1
  402978:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
  40297c:	370c      	adds	r7, #12
  40297e:	46bd      	mov	sp, r7
  402980:	f85d 7b04 	ldr.w	r7, [sp], #4
  402984:	4770      	bx	lr
  402986:	bf00      	nop
  402988:	e000ed00 	.word	0xe000ed00
  40298c:	e000e100 	.word	0xe000e100

00402990 <SysTick_Config>:
    function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  402990:	b580      	push	{r7, lr}
  402992:	b082      	sub	sp, #8
  402994:	af00      	add	r7, sp, #0
  402996:	6078      	str	r0, [r7, #4]
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
  402998:	687b      	ldr	r3, [r7, #4]
  40299a:	3b01      	subs	r3, #1
  40299c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
  4029a0:	d301      	bcc.n	4029a6 <SysTick_Config+0x16>
  4029a2:	2301      	movs	r3, #1
  4029a4:	e00f      	b.n	4029c6 <SysTick_Config+0x36>

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
  4029a6:	4a0a      	ldr	r2, [pc, #40]	; (4029d0 <SysTick_Config+0x40>)
  4029a8:	687b      	ldr	r3, [r7, #4]
  4029aa:	3b01      	subs	r3, #1
  4029ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  4029ae:	f04f 30ff 	mov.w	r0, #4294967295
  4029b2:	2107      	movs	r1, #7
  4029b4:	4b07      	ldr	r3, [pc, #28]	; (4029d4 <SysTick_Config+0x44>)
  4029b6:	4798      	blx	r3
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
  4029b8:	4b05      	ldr	r3, [pc, #20]	; (4029d0 <SysTick_Config+0x40>)
  4029ba:	2200      	movs	r2, #0
  4029bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
  4029be:	4b04      	ldr	r3, [pc, #16]	; (4029d0 <SysTick_Config+0x40>)
  4029c0:	2207      	movs	r2, #7
  4029c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
  4029c4:	2300      	movs	r3, #0
}
  4029c6:	4618      	mov	r0, r3
  4029c8:	3708      	adds	r7, #8
  4029ca:	46bd      	mov	sp, r7
  4029cc:	bd80      	pop	{r7, pc}
  4029ce:	bf00      	nop
  4029d0:	e000e010 	.word	0xe000e010
  4029d4:	0040293d 	.word	0x0040293d

004029d8 <afec_ch_sanity_check>:
 * \param channel  AFEC channel number.
 *
 */
static inline void afec_ch_sanity_check(Afec *const afec,
		const enum afec_channel_num channel)
{
  4029d8:	b480      	push	{r7}
  4029da:	b083      	sub	sp, #12
  4029dc:	af00      	add	r7, sp, #0
  4029de:	6078      	str	r0, [r7, #4]
  4029e0:	460b      	mov	r3, r1
  4029e2:	807b      	strh	r3, [r7, #2]
	#endif
	} else if (afec == AFEC1) {
		Assert(channel < NB_CH_AFE1);
	}
	UNUSED(channel);
}
  4029e4:	370c      	adds	r7, #12
  4029e6:	46bd      	mov	sp, r7
  4029e8:	f85d 7b04 	ldr.w	r7, [sp], #4
  4029ec:	4770      	bx	lr
  4029ee:	bf00      	nop

004029f0 <afec_set_trigger>:
 * \param trigger Conversion trigger.
 *
 */
static inline void afec_set_trigger(Afec *const afec,
		const enum afec_trigger trigger)
{
  4029f0:	b480      	push	{r7}
  4029f2:	b085      	sub	sp, #20
  4029f4:	af00      	add	r7, sp, #0
  4029f6:	6078      	str	r0, [r7, #4]
  4029f8:	460b      	mov	r3, r1
  4029fa:	70fb      	strb	r3, [r7, #3]
	uint32_t reg;

	reg = afec->AFEC_MR;
  4029fc:	687b      	ldr	r3, [r7, #4]
  4029fe:	685b      	ldr	r3, [r3, #4]
  402a00:	60fb      	str	r3, [r7, #12]

	if (trigger == AFEC_TRIG_FREERUN) {
  402a02:	78fb      	ldrb	r3, [r7, #3]
  402a04:	2bff      	cmp	r3, #255	; 0xff
  402a06:	d104      	bne.n	402a12 <afec_set_trigger+0x22>
		reg |= AFEC_MR_FREERUN_ON;
  402a08:	68fb      	ldr	r3, [r7, #12]
  402a0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  402a0e:	60fb      	str	r3, [r7, #12]
  402a10:	e007      	b.n	402a22 <afec_set_trigger+0x32>
	} else {
		reg &= ~(AFEC_MR_TRGSEL_Msk | AFEC_MR_TRGEN | AFEC_MR_FREERUN_ON);
  402a12:	68fb      	ldr	r3, [r7, #12]
  402a14:	f023 038f 	bic.w	r3, r3, #143	; 0x8f
  402a18:	60fb      	str	r3, [r7, #12]
		reg |= trigger;
  402a1a:	78fb      	ldrb	r3, [r7, #3]
  402a1c:	68fa      	ldr	r2, [r7, #12]
  402a1e:	4313      	orrs	r3, r2
  402a20:	60fb      	str	r3, [r7, #12]
	}

	afec->AFEC_MR = reg;
  402a22:	687b      	ldr	r3, [r7, #4]
  402a24:	68fa      	ldr	r2, [r7, #12]
  402a26:	605a      	str	r2, [r3, #4]
}
  402a28:	3714      	adds	r7, #20
  402a2a:	46bd      	mov	sp, r7
  402a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
  402a30:	4770      	bx	lr
  402a32:	bf00      	nop

00402a34 <afec_channel_get_value>:
 *
 * \return AFEC converted value of the selected channel.
 */
static inline uint32_t afec_channel_get_value(Afec *const afec,
		enum afec_channel_num afec_ch)
{
  402a34:	b580      	push	{r7, lr}
  402a36:	b082      	sub	sp, #8
  402a38:	af00      	add	r7, sp, #0
  402a3a:	6078      	str	r0, [r7, #4]
  402a3c:	460b      	mov	r3, r1
  402a3e:	807b      	strh	r3, [r7, #2]
	afec_ch_sanity_check(afec, afec_ch);
  402a40:	887b      	ldrh	r3, [r7, #2]
  402a42:	6878      	ldr	r0, [r7, #4]
  402a44:	4619      	mov	r1, r3
  402a46:	4b05      	ldr	r3, [pc, #20]	; (402a5c <afec_channel_get_value+0x28>)
  402a48:	4798      	blx	r3

	afec->AFEC_CSELR = afec_ch;
  402a4a:	887a      	ldrh	r2, [r7, #2]
  402a4c:	687b      	ldr	r3, [r7, #4]
  402a4e:	665a      	str	r2, [r3, #100]	; 0x64
	return afec->AFEC_CDR;
  402a50:	687b      	ldr	r3, [r7, #4]
  402a52:	6e9b      	ldr	r3, [r3, #104]	; 0x68
}
  402a54:	4618      	mov	r0, r3
  402a56:	3708      	adds	r7, #8
  402a58:	46bd      	mov	sp, r7
  402a5a:	bd80      	pop	{r7, pc}
  402a5c:	004029d9 	.word	0x004029d9

00402a60 <afec_channel_set_analog_offset>:
 * \param afec_ch AFEC channel number.
 * \param aoffset  Analog offset value.
 */
static inline void afec_channel_set_analog_offset(Afec *const afec,
		enum afec_channel_num afec_ch, uint16_t aoffset)
{
  402a60:	b580      	push	{r7, lr}
  402a62:	b082      	sub	sp, #8
  402a64:	af00      	add	r7, sp, #0
  402a66:	6078      	str	r0, [r7, #4]
  402a68:	460b      	mov	r3, r1
  402a6a:	807b      	strh	r3, [r7, #2]
  402a6c:	4613      	mov	r3, r2
  402a6e:	803b      	strh	r3, [r7, #0]
	afec_ch_sanity_check(afec, afec_ch);
  402a70:	887b      	ldrh	r3, [r7, #2]
  402a72:	6878      	ldr	r0, [r7, #4]
  402a74:	4619      	mov	r1, r3
  402a76:	4b06      	ldr	r3, [pc, #24]	; (402a90 <afec_channel_set_analog_offset+0x30>)
  402a78:	4798      	blx	r3

	afec->AFEC_CSELR = afec_ch;
  402a7a:	887a      	ldrh	r2, [r7, #2]
  402a7c:	687b      	ldr	r3, [r7, #4]
  402a7e:	665a      	str	r2, [r3, #100]	; 0x64
	afec->AFEC_COCR = (aoffset & AFEC_COCR_AOFF_Msk);
  402a80:	883b      	ldrh	r3, [r7, #0]
  402a82:	f3c3 020b 	ubfx	r2, r3, #0, #12
  402a86:	687b      	ldr	r3, [r7, #4]
  402a88:	66da      	str	r2, [r3, #108]	; 0x6c
}
  402a8a:	3708      	adds	r7, #8
  402a8c:	46bd      	mov	sp, r7
  402a8e:	bd80      	pop	{r7, pc}
  402a90:	004029d9 	.word	0x004029d9

00402a94 <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  402a94:	b480      	push	{r7}
  402a96:	b083      	sub	sp, #12
  402a98:	af00      	add	r7, sp, #0
  402a9a:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  402a9c:	687b      	ldr	r3, [r7, #4]
  402a9e:	2b07      	cmp	r3, #7
  402aa0:	d825      	bhi.n	402aee <osc_get_rate+0x5a>
  402aa2:	a201      	add	r2, pc, #4	; (adr r2, 402aa8 <osc_get_rate+0x14>)
  402aa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  402aa8:	00402ac9 	.word	0x00402ac9
  402aac:	00402acf 	.word	0x00402acf
  402ab0:	00402ad5 	.word	0x00402ad5
  402ab4:	00402adb 	.word	0x00402adb
  402ab8:	00402adf 	.word	0x00402adf
  402abc:	00402ae3 	.word	0x00402ae3
  402ac0:	00402ae7 	.word	0x00402ae7
  402ac4:	00402aeb 	.word	0x00402aeb
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  402ac8:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  402acc:	e010      	b.n	402af0 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  402ace:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  402ad2:	e00d      	b.n	402af0 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  402ad4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  402ad8:	e00a      	b.n	402af0 <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  402ada:	4b08      	ldr	r3, [pc, #32]	; (402afc <osc_get_rate+0x68>)
  402adc:	e008      	b.n	402af0 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  402ade:	4b08      	ldr	r3, [pc, #32]	; (402b00 <osc_get_rate+0x6c>)
  402ae0:	e006      	b.n	402af0 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  402ae2:	4b08      	ldr	r3, [pc, #32]	; (402b04 <osc_get_rate+0x70>)
  402ae4:	e004      	b.n	402af0 <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  402ae6:	4b08      	ldr	r3, [pc, #32]	; (402b08 <osc_get_rate+0x74>)
  402ae8:	e002      	b.n	402af0 <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  402aea:	4b06      	ldr	r3, [pc, #24]	; (402b04 <osc_get_rate+0x70>)
  402aec:	e000      	b.n	402af0 <osc_get_rate+0x5c>
	}

	return 0;
  402aee:	2300      	movs	r3, #0
}
  402af0:	4618      	mov	r0, r3
  402af2:	370c      	adds	r7, #12
  402af4:	46bd      	mov	sp, r7
  402af6:	f85d 7b04 	ldr.w	r7, [sp], #4
  402afa:	4770      	bx	lr
  402afc:	003d0900 	.word	0x003d0900
  402b00:	007a1200 	.word	0x007a1200
  402b04:	00b71b00 	.word	0x00b71b00
  402b08:	00f42400 	.word	0x00f42400

00402b0c <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  402b0c:	b580      	push	{r7, lr}
  402b0e:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  402b10:	2006      	movs	r0, #6
  402b12:	4b05      	ldr	r3, [pc, #20]	; (402b28 <sysclk_get_main_hz+0x1c>)
  402b14:	4798      	blx	r3
  402b16:	4602      	mov	r2, r0
  402b18:	4613      	mov	r3, r2
  402b1a:	009b      	lsls	r3, r3, #2
  402b1c:	4413      	add	r3, r2
  402b1e:	009a      	lsls	r2, r3, #2
  402b20:	4413      	add	r3, r2
  402b22:	089b      	lsrs	r3, r3, #2
#endif
	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  402b24:	4618      	mov	r0, r3
  402b26:	bd80      	pop	{r7, pc}
  402b28:	00402a95 	.word	0x00402a95

00402b2c <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
  402b2c:	b580      	push	{r7, lr}
  402b2e:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  402b30:	4b02      	ldr	r3, [pc, #8]	; (402b3c <sysclk_get_cpu_hz+0x10>)
  402b32:	4798      	blx	r3
  402b34:	4603      	mov	r3, r0
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  402b36:	4618      	mov	r0, r3
  402b38:	bd80      	pop	{r7, pc}
  402b3a:	bf00      	nop
  402b3c:	00402b0d 	.word	0x00402b0d

00402b40 <sysclk_get_peripheral_hz>:
 * \brief Retrieves the current rate in Hz of the peripheral clocks.
 *
 * \return Frequency of the peripheral clocks, in Hz.
 */
static inline uint32_t sysclk_get_peripheral_hz(void)
{
  402b40:	b580      	push	{r7, lr}
  402b42:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  402b44:	4b02      	ldr	r3, [pc, #8]	; (402b50 <sysclk_get_peripheral_hz+0x10>)
  402b46:	4798      	blx	r3
  402b48:	4603      	mov	r3, r0
		(((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 : (1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos))) * CONFIG_SYSCLK_DIV);
}
  402b4a:	4618      	mov	r0, r3
  402b4c:	bd80      	pop	{r7, pc}
  402b4e:	bf00      	nop
  402b50:	00402b0d 	.word	0x00402b0d

00402b54 <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
  402b54:	b580      	push	{r7, lr}
  402b56:	b082      	sub	sp, #8
  402b58:	af00      	add	r7, sp, #0
  402b5a:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  402b5c:	6878      	ldr	r0, [r7, #4]
  402b5e:	4b02      	ldr	r3, [pc, #8]	; (402b68 <sysclk_enable_peripheral_clock+0x14>)
  402b60:	4798      	blx	r3
}
  402b62:	3708      	adds	r7, #8
  402b64:	46bd      	mov	sp, r7
  402b66:	bd80      	pop	{r7, pc}
  402b68:	00401541 	.word	0x00401541

00402b6c <ioport_set_pin_dir>:
 * \param pin IOPORT pin to configure
 * \param dir Direction to set for the specified pin (\ref ioport_direction)
 */
static inline void ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
  402b6c:	b480      	push	{r7}
  402b6e:	b08d      	sub	sp, #52	; 0x34
  402b70:	af00      	add	r7, sp, #0
  402b72:	6078      	str	r0, [r7, #4]
  402b74:	460b      	mov	r3, r1
  402b76:	70fb      	strb	r3, [r7, #3]
  402b78:	687b      	ldr	r3, [r7, #4]
  402b7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  402b7c:	78fb      	ldrb	r3, [r7, #3]
  402b7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  402b82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  402b84:	627b      	str	r3, [r7, #36]	; 0x24
  402b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  402b88:	623b      	str	r3, [r7, #32]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  402b8a:	6a3b      	ldr	r3, [r7, #32]
  402b8c:	095b      	lsrs	r3, r3, #5
  402b8e:	61fb      	str	r3, [r7, #28]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  402b90:	69fa      	ldr	r2, [r7, #28]
  402b92:	4b17      	ldr	r3, [pc, #92]	; (402bf0 <ioport_set_pin_dir+0x84>)
  402b94:	4413      	add	r3, r2
  402b96:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);
  402b98:	61bb      	str	r3, [r7, #24]

	if (dir == IOPORT_DIR_OUTPUT) {
  402b9a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  402b9e:	2b01      	cmp	r3, #1
  402ba0:	d109      	bne.n	402bb6 <ioport_set_pin_dir+0x4a>
  402ba2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  402ba4:	617b      	str	r3, [r7, #20]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  402ba6:	697b      	ldr	r3, [r7, #20]
  402ba8:	f003 031f 	and.w	r3, r3, #31
  402bac:	2201      	movs	r2, #1
  402bae:	409a      	lsls	r2, r3
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  402bb0:	69bb      	ldr	r3, [r7, #24]
  402bb2:	611a      	str	r2, [r3, #16]
  402bb4:	e00c      	b.n	402bd0 <ioport_set_pin_dir+0x64>
	} else if (dir == IOPORT_DIR_INPUT) {
  402bb6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  402bba:	2b00      	cmp	r3, #0
  402bbc:	d108      	bne.n	402bd0 <ioport_set_pin_dir+0x64>
  402bbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  402bc0:	613b      	str	r3, [r7, #16]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  402bc2:	693b      	ldr	r3, [r7, #16]
  402bc4:	f003 031f 	and.w	r3, r3, #31
  402bc8:	2201      	movs	r2, #1
  402bca:	409a      	lsls	r2, r3
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  402bcc:	69bb      	ldr	r3, [r7, #24]
  402bce:	615a      	str	r2, [r3, #20]
  402bd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  402bd2:	60fb      	str	r3, [r7, #12]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  402bd4:	68fb      	ldr	r3, [r7, #12]
  402bd6:	f003 031f 	and.w	r3, r3, #31
  402bda:	2201      	movs	r2, #1
  402bdc:	409a      	lsls	r2, r3
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  402bde:	69bb      	ldr	r3, [r7, #24]
  402be0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	arch_ioport_set_pin_dir(pin, dir);
}
  402be4:	3734      	adds	r7, #52	; 0x34
  402be6:	46bd      	mov	sp, r7
  402be8:	f85d 7b04 	ldr.w	r7, [sp], #4
  402bec:	4770      	bx	lr
  402bee:	bf00      	nop
  402bf0:	00200707 	.word	0x00200707

00402bf4 <ioport_set_pin_level>:
 *
 * \param pin IOPORT pin to configure
 * \param level Logical value of the pin
 */
static inline void ioport_set_pin_level(ioport_pin_t pin, bool level)
{
  402bf4:	b480      	push	{r7}
  402bf6:	b08b      	sub	sp, #44	; 0x2c
  402bf8:	af00      	add	r7, sp, #0
  402bfa:	6078      	str	r0, [r7, #4]
  402bfc:	460b      	mov	r3, r1
  402bfe:	70fb      	strb	r3, [r7, #3]
  402c00:	687b      	ldr	r3, [r7, #4]
  402c02:	627b      	str	r3, [r7, #36]	; 0x24
  402c04:	78fb      	ldrb	r3, [r7, #3]
  402c06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  402c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  402c0c:	61fb      	str	r3, [r7, #28]
  402c0e:	69fb      	ldr	r3, [r7, #28]
  402c10:	61bb      	str	r3, [r7, #24]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  402c12:	69bb      	ldr	r3, [r7, #24]
  402c14:	095b      	lsrs	r3, r3, #5
  402c16:	617b      	str	r3, [r7, #20]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  402c18:	697a      	ldr	r2, [r7, #20]
  402c1a:	4b10      	ldr	r3, [pc, #64]	; (402c5c <ioport_set_pin_level+0x68>)
  402c1c:	4413      	add	r3, r2
  402c1e:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);
  402c20:	613b      	str	r3, [r7, #16]

	if (level) {
  402c22:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
  402c26:	2b00      	cmp	r3, #0
  402c28:	d009      	beq.n	402c3e <ioport_set_pin_level+0x4a>
  402c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  402c2c:	60fb      	str	r3, [r7, #12]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  402c2e:	68fb      	ldr	r3, [r7, #12]
  402c30:	f003 031f 	and.w	r3, r3, #31
  402c34:	2201      	movs	r2, #1
  402c36:	409a      	lsls	r2, r3
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  402c38:	693b      	ldr	r3, [r7, #16]
  402c3a:	631a      	str	r2, [r3, #48]	; 0x30
  402c3c:	e008      	b.n	402c50 <ioport_set_pin_level+0x5c>
  402c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  402c40:	60bb      	str	r3, [r7, #8]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  402c42:	68bb      	ldr	r3, [r7, #8]
  402c44:	f003 031f 	and.w	r3, r3, #31
  402c48:	2201      	movs	r2, #1
  402c4a:	409a      	lsls	r2, r3
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  402c4c:	693b      	ldr	r3, [r7, #16]
  402c4e:	635a      	str	r2, [r3, #52]	; 0x34
	arch_ioport_set_pin_level(pin, level);
}
  402c50:	372c      	adds	r7, #44	; 0x2c
  402c52:	46bd      	mov	sp, r7
  402c54:	f85d 7b04 	ldr.w	r7, [sp], #4
  402c58:	4770      	bx	lr
  402c5a:	bf00      	nop
  402c5c:	00200707 	.word	0x00200707

00402c60 <ioport_toggle_pin_level>:
 * an output.
 *
 * \param pin IOPORT pin to toggle
 */
static inline void ioport_toggle_pin_level(ioport_pin_t pin)
{
  402c60:	b480      	push	{r7}
  402c62:	b08b      	sub	sp, #44	; 0x2c
  402c64:	af00      	add	r7, sp, #0
  402c66:	6078      	str	r0, [r7, #4]
  402c68:	687b      	ldr	r3, [r7, #4]
  402c6a:	627b      	str	r3, [r7, #36]	; 0x24
  402c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  402c6e:	623b      	str	r3, [r7, #32]
  402c70:	6a3b      	ldr	r3, [r7, #32]
  402c72:	61fb      	str	r3, [r7, #28]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  402c74:	69fb      	ldr	r3, [r7, #28]
  402c76:	095b      	lsrs	r3, r3, #5
  402c78:	61bb      	str	r3, [r7, #24]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  402c7a:	69ba      	ldr	r2, [r7, #24]
  402c7c:	4b12      	ldr	r3, [pc, #72]	; (402cc8 <ioport_toggle_pin_level+0x68>)
  402c7e:	4413      	add	r3, r2
  402c80:	025b      	lsls	r3, r3, #9
	return arch_ioport_port_to_base(port)->PIO_PDSR & mask;
}

__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	Pio *port = arch_ioport_pin_to_base(pin);
  402c82:	617b      	str	r3, [r7, #20]
  402c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  402c86:	613b      	str	r3, [r7, #16]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  402c88:	693b      	ldr	r3, [r7, #16]
  402c8a:	f003 031f 	and.w	r3, r3, #31
  402c8e:	2201      	movs	r2, #1
  402c90:	fa02 f303 	lsl.w	r3, r2, r3
}

__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	Pio *port = arch_ioport_pin_to_base(pin);
	ioport_port_mask_t mask = arch_ioport_pin_to_mask(pin);
  402c94:	60fb      	str	r3, [r7, #12]

	if (port->PIO_PDSR & arch_ioport_pin_to_mask(pin)) {
  402c96:	697b      	ldr	r3, [r7, #20]
  402c98:	6bda      	ldr	r2, [r3, #60]	; 0x3c
  402c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  402c9c:	60bb      	str	r3, [r7, #8]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  402c9e:	68bb      	ldr	r3, [r7, #8]
  402ca0:	f003 031f 	and.w	r3, r3, #31
  402ca4:	2101      	movs	r1, #1
  402ca6:	fa01 f303 	lsl.w	r3, r1, r3
__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	Pio *port = arch_ioport_pin_to_base(pin);
	ioport_port_mask_t mask = arch_ioport_pin_to_mask(pin);

	if (port->PIO_PDSR & arch_ioport_pin_to_mask(pin)) {
  402caa:	4013      	ands	r3, r2
  402cac:	2b00      	cmp	r3, #0
  402cae:	d003      	beq.n	402cb8 <ioport_toggle_pin_level+0x58>
		port->PIO_CODR = mask;
  402cb0:	697b      	ldr	r3, [r7, #20]
  402cb2:	68fa      	ldr	r2, [r7, #12]
  402cb4:	635a      	str	r2, [r3, #52]	; 0x34
  402cb6:	e002      	b.n	402cbe <ioport_toggle_pin_level+0x5e>
	} else {
		port->PIO_SODR = mask;
  402cb8:	697b      	ldr	r3, [r7, #20]
  402cba:	68fa      	ldr	r2, [r7, #12]
  402cbc:	631a      	str	r2, [r3, #48]	; 0x30
	arch_ioport_toggle_pin_level(pin);
}
  402cbe:	372c      	adds	r7, #44	; 0x2c
  402cc0:	46bd      	mov	sp, r7
  402cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
  402cc6:	4770      	bx	lr
  402cc8:	00200707 	.word	0x00200707

00402ccc <usart_serial_init>:
 * \param opt      Options needed to set up RS232 communication (see
 * \ref usart_options_t).
 */
static inline void usart_serial_init(usart_if p_usart,
		usart_serial_options_t *opt)
{
  402ccc:	b580      	push	{r7, lr}
  402cce:	b08c      	sub	sp, #48	; 0x30
  402cd0:	af00      	add	r7, sp, #0
  402cd2:	6078      	str	r0, [r7, #4]
  402cd4:	6039      	str	r1, [r7, #0]
#if ((!SAM4L) && (!SAMG55))
	sam_uart_opt_t uart_settings;
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
  402cd6:	4b48      	ldr	r3, [pc, #288]	; (402df8 <usart_serial_init+0x12c>)
  402cd8:	4798      	blx	r3
  402cda:	4603      	mov	r3, r0
  402cdc:	627b      	str	r3, [r7, #36]	; 0x24
	uart_settings.ul_baudrate = opt->baudrate;
  402cde:	683b      	ldr	r3, [r7, #0]
  402ce0:	681b      	ldr	r3, [r3, #0]
  402ce2:	62bb      	str	r3, [r7, #40]	; 0x28
	uart_settings.ul_mode = opt->paritytype;
  402ce4:	683b      	ldr	r3, [r7, #0]
  402ce6:	689b      	ldr	r3, [r3, #8]
  402ce8:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif

	sam_usart_opt_t usart_settings;
	usart_settings.baudrate = opt->baudrate;
  402cea:	683b      	ldr	r3, [r7, #0]
  402cec:	681b      	ldr	r3, [r3, #0]
  402cee:	60fb      	str	r3, [r7, #12]
	usart_settings.char_length = opt->charlength;
  402cf0:	683b      	ldr	r3, [r7, #0]
  402cf2:	685b      	ldr	r3, [r3, #4]
  402cf4:	613b      	str	r3, [r7, #16]
	usart_settings.parity_type = opt->paritytype;
  402cf6:	683b      	ldr	r3, [r7, #0]
  402cf8:	689b      	ldr	r3, [r3, #8]
  402cfa:	617b      	str	r3, [r7, #20]
	usart_settings.stop_bits= opt->stopbits;
  402cfc:	683b      	ldr	r3, [r7, #0]
  402cfe:	68db      	ldr	r3, [r3, #12]
  402d00:	61bb      	str	r3, [r7, #24]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
  402d02:	2300      	movs	r3, #0
  402d04:	61fb      	str	r3, [r7, #28]
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  402d06:	687b      	ldr	r3, [r7, #4]
  402d08:	4a3c      	ldr	r2, [pc, #240]	; (402dfc <usart_serial_init+0x130>)
  402d0a:	4293      	cmp	r3, r2
  402d0c:	d108      	bne.n	402d20 <usart_serial_init+0x54>
		sysclk_enable_peripheral_clock(ID_UART0);
  402d0e:	2007      	movs	r0, #7
  402d10:	4b3b      	ldr	r3, [pc, #236]	; (402e00 <usart_serial_init+0x134>)
  402d12:	4798      	blx	r3
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
  402d14:	f107 0324 	add.w	r3, r7, #36	; 0x24
  402d18:	6878      	ldr	r0, [r7, #4]
  402d1a:	4619      	mov	r1, r3
  402d1c:	4b39      	ldr	r3, [pc, #228]	; (402e04 <usart_serial_init+0x138>)
  402d1e:	4798      	blx	r3
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  402d20:	687b      	ldr	r3, [r7, #4]
  402d22:	4a39      	ldr	r2, [pc, #228]	; (402e08 <usart_serial_init+0x13c>)
  402d24:	4293      	cmp	r3, r2
  402d26:	d108      	bne.n	402d3a <usart_serial_init+0x6e>
		sysclk_enable_peripheral_clock(ID_UART1);
  402d28:	2008      	movs	r0, #8
  402d2a:	4b35      	ldr	r3, [pc, #212]	; (402e00 <usart_serial_init+0x134>)
  402d2c:	4798      	blx	r3
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
  402d2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
  402d32:	6878      	ldr	r0, [r7, #4]
  402d34:	4619      	mov	r1, r3
  402d36:	4b33      	ldr	r3, [pc, #204]	; (402e04 <usart_serial_init+0x138>)
  402d38:	4798      	blx	r3
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  402d3a:	687b      	ldr	r3, [r7, #4]
  402d3c:	4a33      	ldr	r2, [pc, #204]	; (402e0c <usart_serial_init+0x140>)
  402d3e:	4293      	cmp	r3, r2
  402d40:	d108      	bne.n	402d54 <usart_serial_init+0x88>
		sysclk_enable_peripheral_clock(ID_UART2);
  402d42:	202c      	movs	r0, #44	; 0x2c
  402d44:	4b2e      	ldr	r3, [pc, #184]	; (402e00 <usart_serial_init+0x134>)
  402d46:	4798      	blx	r3
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
  402d48:	f107 0324 	add.w	r3, r7, #36	; 0x24
  402d4c:	6878      	ldr	r0, [r7, #4]
  402d4e:	4619      	mov	r1, r3
  402d50:	4b2c      	ldr	r3, [pc, #176]	; (402e04 <usart_serial_init+0x138>)
  402d52:	4798      	blx	r3
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  402d54:	687b      	ldr	r3, [r7, #4]
  402d56:	4a2e      	ldr	r2, [pc, #184]	; (402e10 <usart_serial_init+0x144>)
  402d58:	4293      	cmp	r3, r2
  402d5a:	d108      	bne.n	402d6e <usart_serial_init+0xa2>
		sysclk_enable_peripheral_clock(ID_UART3);
  402d5c:	202d      	movs	r0, #45	; 0x2d
  402d5e:	4b28      	ldr	r3, [pc, #160]	; (402e00 <usart_serial_init+0x134>)
  402d60:	4798      	blx	r3
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
  402d62:	f107 0324 	add.w	r3, r7, #36	; 0x24
  402d66:	6878      	ldr	r0, [r7, #4]
  402d68:	4619      	mov	r1, r3
  402d6a:	4b26      	ldr	r3, [pc, #152]	; (402e04 <usart_serial_init+0x138>)
  402d6c:	4798      	blx	r3
		usart_enable_tx(p_usart);
		usart_enable_rx(p_usart);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  402d6e:	687b      	ldr	r3, [r7, #4]
  402d70:	4a28      	ldr	r2, [pc, #160]	; (402e14 <usart_serial_init+0x148>)
  402d72:	4293      	cmp	r3, r2
  402d74:	d111      	bne.n	402d9a <usart_serial_init+0xce>
#if (!SAM4L)
#if (SAMG55)
		flexcom_enable(FLEXCOM0);
		flexcom_set_opmode(FLEXCOM0, FLEXCOM_USART);
#else
		sysclk_enable_peripheral_clock(ID_USART0);
  402d76:	200d      	movs	r0, #13
  402d78:	4b21      	ldr	r3, [pc, #132]	; (402e00 <usart_serial_init+0x134>)
  402d7a:	4798      	blx	r3
#endif
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
  402d7c:	4b1e      	ldr	r3, [pc, #120]	; (402df8 <usart_serial_init+0x12c>)
  402d7e:	4798      	blx	r3
  402d80:	4602      	mov	r2, r0
  402d82:	f107 030c 	add.w	r3, r7, #12
  402d86:	6878      	ldr	r0, [r7, #4]
  402d88:	4619      	mov	r1, r3
  402d8a:	4b23      	ldr	r3, [pc, #140]	; (402e18 <usart_serial_init+0x14c>)
  402d8c:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
  402d8e:	6878      	ldr	r0, [r7, #4]
  402d90:	4b22      	ldr	r3, [pc, #136]	; (402e1c <usart_serial_init+0x150>)
  402d92:	4798      	blx	r3
		usart_enable_rx(p_usart);
  402d94:	6878      	ldr	r0, [r7, #4]
  402d96:	4b22      	ldr	r3, [pc, #136]	; (402e20 <usart_serial_init+0x154>)
  402d98:	4798      	blx	r3
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  402d9a:	687b      	ldr	r3, [r7, #4]
  402d9c:	4a21      	ldr	r2, [pc, #132]	; (402e24 <usart_serial_init+0x158>)
  402d9e:	4293      	cmp	r3, r2
  402da0:	d111      	bne.n	402dc6 <usart_serial_init+0xfa>
#if (!SAM4L)
#if (SAMG55)
		flexcom_enable(FLEXCOM1);
		flexcom_set_opmode(FLEXCOM1, FLEXCOM_USART);
#else
		sysclk_enable_peripheral_clock(ID_USART1);
  402da2:	200e      	movs	r0, #14
  402da4:	4b16      	ldr	r3, [pc, #88]	; (402e00 <usart_serial_init+0x134>)
  402da6:	4798      	blx	r3
#endif
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
  402da8:	4b13      	ldr	r3, [pc, #76]	; (402df8 <usart_serial_init+0x12c>)
  402daa:	4798      	blx	r3
  402dac:	4602      	mov	r2, r0
  402dae:	f107 030c 	add.w	r3, r7, #12
  402db2:	6878      	ldr	r0, [r7, #4]
  402db4:	4619      	mov	r1, r3
  402db6:	4b18      	ldr	r3, [pc, #96]	; (402e18 <usart_serial_init+0x14c>)
  402db8:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
  402dba:	6878      	ldr	r0, [r7, #4]
  402dbc:	4b17      	ldr	r3, [pc, #92]	; (402e1c <usart_serial_init+0x150>)
  402dbe:	4798      	blx	r3
		usart_enable_rx(p_usart);
  402dc0:	6878      	ldr	r0, [r7, #4]
  402dc2:	4b17      	ldr	r3, [pc, #92]	; (402e20 <usart_serial_init+0x154>)
  402dc4:	4798      	blx	r3
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  402dc6:	687b      	ldr	r3, [r7, #4]
  402dc8:	4a17      	ldr	r2, [pc, #92]	; (402e28 <usart_serial_init+0x15c>)
  402dca:	4293      	cmp	r3, r2
  402dcc:	d111      	bne.n	402df2 <usart_serial_init+0x126>
#if (!SAM4L)
#if (SAMG55)
		flexcom_enable(FLEXCOM2);
		flexcom_set_opmode(FLEXCOM2, FLEXCOM_USART);
#else
		sysclk_enable_peripheral_clock(ID_USART2);
  402dce:	200f      	movs	r0, #15
  402dd0:	4b0b      	ldr	r3, [pc, #44]	; (402e00 <usart_serial_init+0x134>)
  402dd2:	4798      	blx	r3
#endif
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
  402dd4:	4b08      	ldr	r3, [pc, #32]	; (402df8 <usart_serial_init+0x12c>)
  402dd6:	4798      	blx	r3
  402dd8:	4602      	mov	r2, r0
  402dda:	f107 030c 	add.w	r3, r7, #12
  402dde:	6878      	ldr	r0, [r7, #4]
  402de0:	4619      	mov	r1, r3
  402de2:	4b0d      	ldr	r3, [pc, #52]	; (402e18 <usart_serial_init+0x14c>)
  402de4:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
  402de6:	6878      	ldr	r0, [r7, #4]
  402de8:	4b0c      	ldr	r3, [pc, #48]	; (402e1c <usart_serial_init+0x150>)
  402dea:	4798      	blx	r3
		usart_enable_rx(p_usart);
  402dec:	6878      	ldr	r0, [r7, #4]
  402dee:	4b0c      	ldr	r3, [pc, #48]	; (402e20 <usart_serial_init+0x154>)
  402df0:	4798      	blx	r3
	}
# endif

#endif /* ifdef USART */

}
  402df2:	3730      	adds	r7, #48	; 0x30
  402df4:	46bd      	mov	sp, r7
  402df6:	bd80      	pop	{r7, pc}
  402df8:	00402b41 	.word	0x00402b41
  402dfc:	400e0800 	.word	0x400e0800
  402e00:	00402b55 	.word	0x00402b55
  402e04:	004018ed 	.word	0x004018ed
  402e08:	400e0a00 	.word	0x400e0a00
  402e0c:	400e1a00 	.word	0x400e1a00
  402e10:	400e1c00 	.word	0x400e1c00
  402e14:	40024000 	.word	0x40024000
  402e18:	00401a89 	.word	0x00401a89
  402e1c:	00401b0d 	.word	0x00401b0d
  402e20:	00401b59 	.word	0x00401b59
  402e24:	40028000 	.word	0x40028000
  402e28:	4002c000 	.word	0x4002c000

00402e2c <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
  402e2c:	b580      	push	{r7, lr}
  402e2e:	b082      	sub	sp, #8
  402e30:	af00      	add	r7, sp, #0
  402e32:	6078      	str	r0, [r7, #4]
  402e34:	460b      	mov	r3, r1
  402e36:	70fb      	strb	r3, [r7, #3]
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  402e38:	687b      	ldr	r3, [r7, #4]
  402e3a:	4a36      	ldr	r2, [pc, #216]	; (402f14 <usart_serial_putchar+0xe8>)
  402e3c:	4293      	cmp	r3, r2
  402e3e:	d10a      	bne.n	402e56 <usart_serial_putchar+0x2a>
		while (uart_write((Uart*)p_usart, c)!=0);
  402e40:	bf00      	nop
  402e42:	78fb      	ldrb	r3, [r7, #3]
  402e44:	6878      	ldr	r0, [r7, #4]
  402e46:	4619      	mov	r1, r3
  402e48:	4b33      	ldr	r3, [pc, #204]	; (402f18 <usart_serial_putchar+0xec>)
  402e4a:	4798      	blx	r3
  402e4c:	4603      	mov	r3, r0
  402e4e:	2b00      	cmp	r3, #0
  402e50:	d1f7      	bne.n	402e42 <usart_serial_putchar+0x16>
		return 1;
  402e52:	2301      	movs	r3, #1
  402e54:	e05a      	b.n	402f0c <usart_serial_putchar+0xe0>
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  402e56:	687b      	ldr	r3, [r7, #4]
  402e58:	4a30      	ldr	r2, [pc, #192]	; (402f1c <usart_serial_putchar+0xf0>)
  402e5a:	4293      	cmp	r3, r2
  402e5c:	d10a      	bne.n	402e74 <usart_serial_putchar+0x48>
		while (uart_write((Uart*)p_usart, c)!=0);
  402e5e:	bf00      	nop
  402e60:	78fb      	ldrb	r3, [r7, #3]
  402e62:	6878      	ldr	r0, [r7, #4]
  402e64:	4619      	mov	r1, r3
  402e66:	4b2c      	ldr	r3, [pc, #176]	; (402f18 <usart_serial_putchar+0xec>)
  402e68:	4798      	blx	r3
  402e6a:	4603      	mov	r3, r0
  402e6c:	2b00      	cmp	r3, #0
  402e6e:	d1f7      	bne.n	402e60 <usart_serial_putchar+0x34>
		return 1;
  402e70:	2301      	movs	r3, #1
  402e72:	e04b      	b.n	402f0c <usart_serial_putchar+0xe0>
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  402e74:	687b      	ldr	r3, [r7, #4]
  402e76:	4a2a      	ldr	r2, [pc, #168]	; (402f20 <usart_serial_putchar+0xf4>)
  402e78:	4293      	cmp	r3, r2
  402e7a:	d10a      	bne.n	402e92 <usart_serial_putchar+0x66>
		while (uart_write((Uart*)p_usart, c)!=0);
  402e7c:	bf00      	nop
  402e7e:	78fb      	ldrb	r3, [r7, #3]
  402e80:	6878      	ldr	r0, [r7, #4]
  402e82:	4619      	mov	r1, r3
  402e84:	4b24      	ldr	r3, [pc, #144]	; (402f18 <usart_serial_putchar+0xec>)
  402e86:	4798      	blx	r3
  402e88:	4603      	mov	r3, r0
  402e8a:	2b00      	cmp	r3, #0
  402e8c:	d1f7      	bne.n	402e7e <usart_serial_putchar+0x52>
		return 1;
  402e8e:	2301      	movs	r3, #1
  402e90:	e03c      	b.n	402f0c <usart_serial_putchar+0xe0>
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  402e92:	687b      	ldr	r3, [r7, #4]
  402e94:	4a23      	ldr	r2, [pc, #140]	; (402f24 <usart_serial_putchar+0xf8>)
  402e96:	4293      	cmp	r3, r2
  402e98:	d10a      	bne.n	402eb0 <usart_serial_putchar+0x84>
		while (uart_write((Uart*)p_usart, c)!=0);
  402e9a:	bf00      	nop
  402e9c:	78fb      	ldrb	r3, [r7, #3]
  402e9e:	6878      	ldr	r0, [r7, #4]
  402ea0:	4619      	mov	r1, r3
  402ea2:	4b1d      	ldr	r3, [pc, #116]	; (402f18 <usart_serial_putchar+0xec>)
  402ea4:	4798      	blx	r3
  402ea6:	4603      	mov	r3, r0
  402ea8:	2b00      	cmp	r3, #0
  402eaa:	d1f7      	bne.n	402e9c <usart_serial_putchar+0x70>
		return 1;
  402eac:	2301      	movs	r3, #1
  402eae:	e02d      	b.n	402f0c <usart_serial_putchar+0xe0>
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  402eb0:	687b      	ldr	r3, [r7, #4]
  402eb2:	4a1d      	ldr	r2, [pc, #116]	; (402f28 <usart_serial_putchar+0xfc>)
  402eb4:	4293      	cmp	r3, r2
  402eb6:	d10a      	bne.n	402ece <usart_serial_putchar+0xa2>
		while (usart_write(p_usart, c)!=0);
  402eb8:	bf00      	nop
  402eba:	78fb      	ldrb	r3, [r7, #3]
  402ebc:	6878      	ldr	r0, [r7, #4]
  402ebe:	4619      	mov	r1, r3
  402ec0:	4b1a      	ldr	r3, [pc, #104]	; (402f2c <usart_serial_putchar+0x100>)
  402ec2:	4798      	blx	r3
  402ec4:	4603      	mov	r3, r0
  402ec6:	2b00      	cmp	r3, #0
  402ec8:	d1f7      	bne.n	402eba <usart_serial_putchar+0x8e>
		return 1;
  402eca:	2301      	movs	r3, #1
  402ecc:	e01e      	b.n	402f0c <usart_serial_putchar+0xe0>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  402ece:	687b      	ldr	r3, [r7, #4]
  402ed0:	4a17      	ldr	r2, [pc, #92]	; (402f30 <usart_serial_putchar+0x104>)
  402ed2:	4293      	cmp	r3, r2
  402ed4:	d10a      	bne.n	402eec <usart_serial_putchar+0xc0>
		while (usart_write(p_usart, c)!=0);
  402ed6:	bf00      	nop
  402ed8:	78fb      	ldrb	r3, [r7, #3]
  402eda:	6878      	ldr	r0, [r7, #4]
  402edc:	4619      	mov	r1, r3
  402ede:	4b13      	ldr	r3, [pc, #76]	; (402f2c <usart_serial_putchar+0x100>)
  402ee0:	4798      	blx	r3
  402ee2:	4603      	mov	r3, r0
  402ee4:	2b00      	cmp	r3, #0
  402ee6:	d1f7      	bne.n	402ed8 <usart_serial_putchar+0xac>
		return 1;
  402ee8:	2301      	movs	r3, #1
  402eea:	e00f      	b.n	402f0c <usart_serial_putchar+0xe0>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  402eec:	687b      	ldr	r3, [r7, #4]
  402eee:	4a11      	ldr	r2, [pc, #68]	; (402f34 <usart_serial_putchar+0x108>)
  402ef0:	4293      	cmp	r3, r2
  402ef2:	d10a      	bne.n	402f0a <usart_serial_putchar+0xde>
		while (usart_write(p_usart, c)!=0);
  402ef4:	bf00      	nop
  402ef6:	78fb      	ldrb	r3, [r7, #3]
  402ef8:	6878      	ldr	r0, [r7, #4]
  402efa:	4619      	mov	r1, r3
  402efc:	4b0b      	ldr	r3, [pc, #44]	; (402f2c <usart_serial_putchar+0x100>)
  402efe:	4798      	blx	r3
  402f00:	4603      	mov	r3, r0
  402f02:	2b00      	cmp	r3, #0
  402f04:	d1f7      	bne.n	402ef6 <usart_serial_putchar+0xca>
		return 1;
  402f06:	2301      	movs	r3, #1
  402f08:	e000      	b.n	402f0c <usart_serial_putchar+0xe0>
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
  402f0a:	2300      	movs	r3, #0
}
  402f0c:	4618      	mov	r0, r3
  402f0e:	3708      	adds	r7, #8
  402f10:	46bd      	mov	sp, r7
  402f12:	bd80      	pop	{r7, pc}
  402f14:	400e0800 	.word	0x400e0800
  402f18:	00401945 	.word	0x00401945
  402f1c:	400e0a00 	.word	0x400e0a00
  402f20:	400e1a00 	.word	0x400e1a00
  402f24:	400e1c00 	.word	0x400e1c00
  402f28:	40024000 	.word	0x40024000
  402f2c:	00401c61 	.word	0x00401c61
  402f30:	40028000 	.word	0x40028000
  402f34:	4002c000 	.word	0x4002c000

00402f38 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  402f38:	b580      	push	{r7, lr}
  402f3a:	b084      	sub	sp, #16
  402f3c:	af00      	add	r7, sp, #0
  402f3e:	6078      	str	r0, [r7, #4]
  402f40:	6039      	str	r1, [r7, #0]
	uint32_t val = 0;
  402f42:	2300      	movs	r3, #0
  402f44:	60fb      	str	r3, [r7, #12]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  402f46:	687b      	ldr	r3, [r7, #4]
  402f48:	4a33      	ldr	r2, [pc, #204]	; (403018 <usart_serial_getchar+0xe0>)
  402f4a:	4293      	cmp	r3, r2
  402f4c:	d107      	bne.n	402f5e <usart_serial_getchar+0x26>
		while (uart_read((Uart*)p_usart, data));
  402f4e:	bf00      	nop
  402f50:	6878      	ldr	r0, [r7, #4]
  402f52:	6839      	ldr	r1, [r7, #0]
  402f54:	4b31      	ldr	r3, [pc, #196]	; (40301c <usart_serial_getchar+0xe4>)
  402f56:	4798      	blx	r3
  402f58:	4603      	mov	r3, r0
  402f5a:	2b00      	cmp	r3, #0
  402f5c:	d1f8      	bne.n	402f50 <usart_serial_getchar+0x18>
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  402f5e:	687b      	ldr	r3, [r7, #4]
  402f60:	4a2f      	ldr	r2, [pc, #188]	; (403020 <usart_serial_getchar+0xe8>)
  402f62:	4293      	cmp	r3, r2
  402f64:	d107      	bne.n	402f76 <usart_serial_getchar+0x3e>
		while (uart_read((Uart*)p_usart, data));
  402f66:	bf00      	nop
  402f68:	6878      	ldr	r0, [r7, #4]
  402f6a:	6839      	ldr	r1, [r7, #0]
  402f6c:	4b2b      	ldr	r3, [pc, #172]	; (40301c <usart_serial_getchar+0xe4>)
  402f6e:	4798      	blx	r3
  402f70:	4603      	mov	r3, r0
  402f72:	2b00      	cmp	r3, #0
  402f74:	d1f8      	bne.n	402f68 <usart_serial_getchar+0x30>
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  402f76:	687b      	ldr	r3, [r7, #4]
  402f78:	4a2a      	ldr	r2, [pc, #168]	; (403024 <usart_serial_getchar+0xec>)
  402f7a:	4293      	cmp	r3, r2
  402f7c:	d107      	bne.n	402f8e <usart_serial_getchar+0x56>
		while (uart_read((Uart*)p_usart, data));
  402f7e:	bf00      	nop
  402f80:	6878      	ldr	r0, [r7, #4]
  402f82:	6839      	ldr	r1, [r7, #0]
  402f84:	4b25      	ldr	r3, [pc, #148]	; (40301c <usart_serial_getchar+0xe4>)
  402f86:	4798      	blx	r3
  402f88:	4603      	mov	r3, r0
  402f8a:	2b00      	cmp	r3, #0
  402f8c:	d1f8      	bne.n	402f80 <usart_serial_getchar+0x48>
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  402f8e:	687b      	ldr	r3, [r7, #4]
  402f90:	4a25      	ldr	r2, [pc, #148]	; (403028 <usart_serial_getchar+0xf0>)
  402f92:	4293      	cmp	r3, r2
  402f94:	d107      	bne.n	402fa6 <usart_serial_getchar+0x6e>
		while (uart_read((Uart*)p_usart, data));
  402f96:	bf00      	nop
  402f98:	6878      	ldr	r0, [r7, #4]
  402f9a:	6839      	ldr	r1, [r7, #0]
  402f9c:	4b1f      	ldr	r3, [pc, #124]	; (40301c <usart_serial_getchar+0xe4>)
  402f9e:	4798      	blx	r3
  402fa0:	4603      	mov	r3, r0
  402fa2:	2b00      	cmp	r3, #0
  402fa4:	d1f8      	bne.n	402f98 <usart_serial_getchar+0x60>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  402fa6:	687b      	ldr	r3, [r7, #4]
  402fa8:	4a20      	ldr	r2, [pc, #128]	; (40302c <usart_serial_getchar+0xf4>)
  402faa:	4293      	cmp	r3, r2
  402fac:	d10d      	bne.n	402fca <usart_serial_getchar+0x92>
		while (usart_read(p_usart, &val));
  402fae:	bf00      	nop
  402fb0:	f107 030c 	add.w	r3, r7, #12
  402fb4:	6878      	ldr	r0, [r7, #4]
  402fb6:	4619      	mov	r1, r3
  402fb8:	4b1d      	ldr	r3, [pc, #116]	; (403030 <usart_serial_getchar+0xf8>)
  402fba:	4798      	blx	r3
  402fbc:	4603      	mov	r3, r0
  402fbe:	2b00      	cmp	r3, #0
  402fc0:	d1f6      	bne.n	402fb0 <usart_serial_getchar+0x78>
		*data = (uint8_t)(val & 0xFF);
  402fc2:	68fb      	ldr	r3, [r7, #12]
  402fc4:	b2da      	uxtb	r2, r3
  402fc6:	683b      	ldr	r3, [r7, #0]
  402fc8:	701a      	strb	r2, [r3, #0]
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  402fca:	687b      	ldr	r3, [r7, #4]
  402fcc:	4a19      	ldr	r2, [pc, #100]	; (403034 <usart_serial_getchar+0xfc>)
  402fce:	4293      	cmp	r3, r2
  402fd0:	d10d      	bne.n	402fee <usart_serial_getchar+0xb6>
		while (usart_read(p_usart, &val));
  402fd2:	bf00      	nop
  402fd4:	f107 030c 	add.w	r3, r7, #12
  402fd8:	6878      	ldr	r0, [r7, #4]
  402fda:	4619      	mov	r1, r3
  402fdc:	4b14      	ldr	r3, [pc, #80]	; (403030 <usart_serial_getchar+0xf8>)
  402fde:	4798      	blx	r3
  402fe0:	4603      	mov	r3, r0
  402fe2:	2b00      	cmp	r3, #0
  402fe4:	d1f6      	bne.n	402fd4 <usart_serial_getchar+0x9c>
		*data = (uint8_t)(val & 0xFF);
  402fe6:	68fb      	ldr	r3, [r7, #12]
  402fe8:	b2da      	uxtb	r2, r3
  402fea:	683b      	ldr	r3, [r7, #0]
  402fec:	701a      	strb	r2, [r3, #0]
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  402fee:	687b      	ldr	r3, [r7, #4]
  402ff0:	4a11      	ldr	r2, [pc, #68]	; (403038 <usart_serial_getchar+0x100>)
  402ff2:	4293      	cmp	r3, r2
  402ff4:	d10d      	bne.n	403012 <usart_serial_getchar+0xda>
		while (usart_read(p_usart, &val));
  402ff6:	bf00      	nop
  402ff8:	f107 030c 	add.w	r3, r7, #12
  402ffc:	6878      	ldr	r0, [r7, #4]
  402ffe:	4619      	mov	r1, r3
  403000:	4b0b      	ldr	r3, [pc, #44]	; (403030 <usart_serial_getchar+0xf8>)
  403002:	4798      	blx	r3
  403004:	4603      	mov	r3, r0
  403006:	2b00      	cmp	r3, #0
  403008:	d1f6      	bne.n	402ff8 <usart_serial_getchar+0xc0>
		*data = (uint8_t)(val & 0xFF);
  40300a:	68fb      	ldr	r3, [r7, #12]
  40300c:	b2da      	uxtb	r2, r3
  40300e:	683b      	ldr	r3, [r7, #0]
  403010:	701a      	strb	r2, [r3, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  403012:	3710      	adds	r7, #16
  403014:	46bd      	mov	sp, r7
  403016:	bd80      	pop	{r7, pc}
  403018:	400e0800 	.word	0x400e0800
  40301c:	00401975 	.word	0x00401975
  403020:	400e0a00 	.word	0x400e0a00
  403024:	400e1a00 	.word	0x400e1a00
  403028:	400e1c00 	.word	0x400e1c00
  40302c:	40024000 	.word	0x40024000
  403030:	00401c95 	.word	0x00401c95
  403034:	40028000 	.word	0x40028000
  403038:	4002c000 	.word	0x4002c000

0040303c <stdio_serial_init>:
 * \param usart       Base address of the USART instance.
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
  40303c:	b580      	push	{r7, lr}
  40303e:	b082      	sub	sp, #8
  403040:	af00      	add	r7, sp, #0
  403042:	6078      	str	r0, [r7, #4]
  403044:	6039      	str	r1, [r7, #0]
	stdio_base = (void *)usart;
  403046:	4a0f      	ldr	r2, [pc, #60]	; (403084 <stdio_serial_init+0x48>)
  403048:	687b      	ldr	r3, [r7, #4]
  40304a:	6013      	str	r3, [r2, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  40304c:	4b0e      	ldr	r3, [pc, #56]	; (403088 <stdio_serial_init+0x4c>)
  40304e:	4a0f      	ldr	r2, [pc, #60]	; (40308c <stdio_serial_init+0x50>)
  403050:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  403052:	4b0f      	ldr	r3, [pc, #60]	; (403090 <stdio_serial_init+0x54>)
  403054:	4a0f      	ldr	r2, [pc, #60]	; (403094 <stdio_serial_init+0x58>)
  403056:	601a      	str	r2, [r3, #0]
# if (XMEGA || MEGA_RF)
	usart_serial_init((USART_t *)usart,opt);
# elif UC3
	usart_serial_init(usart,(usart_serial_options_t *)opt);
# elif SAM
	usart_serial_init((Usart *)usart,(usart_serial_options_t *)opt);
  403058:	6878      	ldr	r0, [r7, #4]
  40305a:	6839      	ldr	r1, [r7, #0]
  40305c:	4b0e      	ldr	r3, [pc, #56]	; (403098 <stdio_serial_init+0x5c>)
  40305e:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  403060:	4b0e      	ldr	r3, [pc, #56]	; (40309c <stdio_serial_init+0x60>)
  403062:	681b      	ldr	r3, [r3, #0]
  403064:	689b      	ldr	r3, [r3, #8]
  403066:	4618      	mov	r0, r3
  403068:	2100      	movs	r1, #0
  40306a:	4b0d      	ldr	r3, [pc, #52]	; (4030a0 <stdio_serial_init+0x64>)
  40306c:	4798      	blx	r3
	setbuf(stdin, NULL);
  40306e:	4b0b      	ldr	r3, [pc, #44]	; (40309c <stdio_serial_init+0x60>)
  403070:	681b      	ldr	r3, [r3, #0]
  403072:	685b      	ldr	r3, [r3, #4]
  403074:	4618      	mov	r0, r3
  403076:	2100      	movs	r1, #0
  403078:	4b09      	ldr	r3, [pc, #36]	; (4030a0 <stdio_serial_init+0x64>)
  40307a:	4798      	blx	r3
	// and AVR GCC library:
	// - printf() emits one character at a time.
	// - getchar() requests only 1 byte to exit.
#  endif
# endif
}
  40307c:	3708      	adds	r7, #8
  40307e:	46bd      	mov	sp, r7
  403080:	bd80      	pop	{r7, pc}
  403082:	bf00      	nop
  403084:	204009f0 	.word	0x204009f0
  403088:	204009ec 	.word	0x204009ec
  40308c:	00402e2d 	.word	0x00402e2d
  403090:	204009e8 	.word	0x204009e8
  403094:	00402f39 	.word	0x00402f39
  403098:	00402ccd 	.word	0x00402ccd
  40309c:	204004b0 	.word	0x204004b0
  4030a0:	00403b91 	.word	0x00403b91

004030a4 <mdelay>:
 * by the SAM microcontroller system tick).
 *
 * \param ul_dly_ticks  Delay to wait for, in milliseconds.
 */
void mdelay(uint32_t ul_dly_ticks)
{
  4030a4:	b480      	push	{r7}
  4030a6:	b085      	sub	sp, #20
  4030a8:	af00      	add	r7, sp, #0
  4030aa:	6078      	str	r0, [r7, #4]
	uint32_t ul_cur_ticks;

	ul_cur_ticks = ul_ms_ticks;
  4030ac:	4b07      	ldr	r3, [pc, #28]	; (4030cc <mdelay+0x28>)
  4030ae:	681b      	ldr	r3, [r3, #0]
  4030b0:	60fb      	str	r3, [r7, #12]
	while ((ul_ms_ticks - ul_cur_ticks) < ul_dly_ticks) {
  4030b2:	bf00      	nop
  4030b4:	4b05      	ldr	r3, [pc, #20]	; (4030cc <mdelay+0x28>)
  4030b6:	681a      	ldr	r2, [r3, #0]
  4030b8:	68fb      	ldr	r3, [r7, #12]
  4030ba:	1ad2      	subs	r2, r2, r3
  4030bc:	687b      	ldr	r3, [r7, #4]
  4030be:	429a      	cmp	r2, r3
  4030c0:	d3f8      	bcc.n	4030b4 <mdelay+0x10>
	}
}
  4030c2:	3714      	adds	r7, #20
  4030c4:	46bd      	mov	sp, r7
  4030c6:	f85d 7b04 	ldr.w	r7, [sp], #4
  4030ca:	4770      	bx	lr
  4030cc:	20400998 	.word	0x20400998

004030d0 <SysTick_Handler>:
 *
 *  Process System Tick Event.
 *  Increment the ul_ms_ticks counter.
 */
void SysTick_Handler(void)
{
  4030d0:	b480      	push	{r7}
  4030d2:	af00      	add	r7, sp, #0
	g_ul_tick_count++;
  4030d4:	4b06      	ldr	r3, [pc, #24]	; (4030f0 <SysTick_Handler+0x20>)
  4030d6:	681b      	ldr	r3, [r3, #0]
  4030d8:	3301      	adds	r3, #1
  4030da:	4a05      	ldr	r2, [pc, #20]	; (4030f0 <SysTick_Handler+0x20>)
  4030dc:	6013      	str	r3, [r2, #0]
	ul_ms_ticks++; //jsi 6feb16
  4030de:	4b05      	ldr	r3, [pc, #20]	; (4030f4 <SysTick_Handler+0x24>)
  4030e0:	681b      	ldr	r3, [r3, #0]
  4030e2:	3301      	adds	r3, #1
  4030e4:	4a03      	ldr	r2, [pc, #12]	; (4030f4 <SysTick_Handler+0x24>)
  4030e6:	6013      	str	r3, [r2, #0]
}
  4030e8:	46bd      	mov	sp, r7
  4030ea:	f85d 7b04 	ldr.w	r7, [sp], #4
  4030ee:	4770      	bx	lr
  4030f0:	20400a9c 	.word	0x20400a9c
  4030f4:	20400998 	.word	0x20400998

004030f8 <USART0_Handler>:
/**
 *  \brief Handler for USART interrupt.
 *
 */
void USART_Handler(void)
{
  4030f8:	b580      	push	{r7, lr}
  4030fa:	b082      	sub	sp, #8
  4030fc:	af00      	add	r7, sp, #0
	uint32_t ul_status;
	uint8_t uc_char;

	/* Read USART status. */
	ul_status = usart_get_status(BOARD_USART);
  4030fe:	481b      	ldr	r0, [pc, #108]	; (40316c <USART0_Handler+0x74>)
  403100:	4b1b      	ldr	r3, [pc, #108]	; (403170 <USART0_Handler+0x78>)
  403102:	4798      	blx	r3
  403104:	6078      	str	r0, [r7, #4]

	/*transmit interrupt rises*/
	if(ul_status & (US_IER_TXRDY | US_IER_TXEMPTY)) {
  403106:	687a      	ldr	r2, [r7, #4]
  403108:	f240 2302 	movw	r3, #514	; 0x202
  40310c:	4013      	ands	r3, r2
  40310e:	2b00      	cmp	r3, #0
  403110:	d004      	beq.n	40311c <USART0_Handler+0x24>
		usart_disable_interrupt(BOARD_USART, (US_IER_TXRDY | US_IER_TXEMPTY));
  403112:	4816      	ldr	r0, [pc, #88]	; (40316c <USART0_Handler+0x74>)
  403114:	f240 2102 	movw	r1, #514	; 0x202
  403118:	4b16      	ldr	r3, [pc, #88]	; (403174 <USART0_Handler+0x7c>)
  40311a:	4798      	blx	r3
	}

	/*receive interrupt rise, store character to receiver buffer*/
	if((g_state == RECEIVING) && (usart_read(BOARD_USART, (uint32_t *)&uc_char) == 0)) {
  40311c:	4b16      	ldr	r3, [pc, #88]	; (403178 <USART0_Handler+0x80>)
  40311e:	781b      	ldrb	r3, [r3, #0]
  403120:	b2db      	uxtb	r3, r3
  403122:	2b02      	cmp	r3, #2
  403124:	d11f      	bne.n	403166 <USART0_Handler+0x6e>
  403126:	1cfb      	adds	r3, r7, #3
  403128:	4810      	ldr	r0, [pc, #64]	; (40316c <USART0_Handler+0x74>)
  40312a:	4619      	mov	r1, r3
  40312c:	4b13      	ldr	r3, [pc, #76]	; (40317c <USART0_Handler+0x84>)
  40312e:	4798      	blx	r3
  403130:	4603      	mov	r3, r0
  403132:	2b00      	cmp	r3, #0
  403134:	d117      	bne.n	403166 <USART0_Handler+0x6e>
		*p_revdata++ = uc_char;
  403136:	4b12      	ldr	r3, [pc, #72]	; (403180 <USART0_Handler+0x88>)
  403138:	681b      	ldr	r3, [r3, #0]
  40313a:	1c5a      	adds	r2, r3, #1
  40313c:	4910      	ldr	r1, [pc, #64]	; (403180 <USART0_Handler+0x88>)
  40313e:	600a      	str	r2, [r1, #0]
  403140:	78fa      	ldrb	r2, [r7, #3]
  403142:	701a      	strb	r2, [r3, #0]
		g_ulcount++;
  403144:	4b0f      	ldr	r3, [pc, #60]	; (403184 <USART0_Handler+0x8c>)
  403146:	681b      	ldr	r3, [r3, #0]
  403148:	3301      	adds	r3, #1
  40314a:	4a0e      	ldr	r2, [pc, #56]	; (403184 <USART0_Handler+0x8c>)
  40314c:	6013      	str	r3, [r2, #0]
		if(g_ulcount >= BUFFER_SIZE) {
  40314e:	4b0d      	ldr	r3, [pc, #52]	; (403184 <USART0_Handler+0x8c>)
  403150:	681b      	ldr	r3, [r3, #0]
  403152:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
  403156:	d306      	bcc.n	403166 <USART0_Handler+0x6e>
			g_state = RECEIVED;
  403158:	4b07      	ldr	r3, [pc, #28]	; (403178 <USART0_Handler+0x80>)
  40315a:	2203      	movs	r2, #3
  40315c:	701a      	strb	r2, [r3, #0]
			usart_disable_interrupt(BOARD_USART, US_IER_RXRDY);
  40315e:	4803      	ldr	r0, [pc, #12]	; (40316c <USART0_Handler+0x74>)
  403160:	2101      	movs	r1, #1
  403162:	4b04      	ldr	r3, [pc, #16]	; (403174 <USART0_Handler+0x7c>)
  403164:	4798      	blx	r3
		}
	}
}
  403166:	3708      	adds	r7, #8
  403168:	46bd      	mov	sp, r7
  40316a:	bd80      	pop	{r7, pc}
  40316c:	40024000 	.word	0x40024000
  403170:	00401bc1 	.word	0x00401bc1
  403174:	00401ba5 	.word	0x00401ba5
  403178:	20400990 	.word	0x20400990
  40317c:	00401c95 	.word	0x00401c95
  403180:	20400004 	.word	0x20400004
  403184:	20400994 	.word	0x20400994

00403188 <configure_usart>:
 *
 *  Configure USART in RS485 mode, asynchronous, 8 bits, 1 stop bit,
 *  no parity, 256000 bauds and enable its transmitter and receiver.
 */
static void configure_usart(void)
{
  403188:	b5b0      	push	{r4, r5, r7, lr}
  40318a:	b086      	sub	sp, #24
  40318c:	af00      	add	r7, sp, #0
	const sam_usart_opt_t usart_console_settings = {
  40318e:	4b14      	ldr	r3, [pc, #80]	; (4031e0 <configure_usart+0x58>)
  403190:	463c      	mov	r4, r7
  403192:	461d      	mov	r5, r3
  403194:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  403196:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  403198:	e895 0003 	ldmia.w	r5, {r0, r1}
  40319c:	e884 0003 	stmia.w	r4, {r0, r1}
		/* This field is only used in IrDA mode. */
		0
	};

	/* Enable the peripheral clock in the PMC. */
	sysclk_enable_peripheral_clock(BOARD_ID_USART);
  4031a0:	200d      	movs	r0, #13
  4031a2:	4b10      	ldr	r3, [pc, #64]	; (4031e4 <configure_usart+0x5c>)
  4031a4:	4798      	blx	r3

	/* Configure USART in RS485 mode. */
//jsi 7feb16 we want rs232 not rs485 for our application	usart_init_rs485(BOARD_USART, &usart_console_settings,
//jsi 7feb16 we want rs232 not rs485 for our application			sysclk_get_cpu_hz());
			
	usart_init_rs232(BOARD_USART, &usart_console_settings, sysclk_get_cpu_hz());
  4031a6:	4b10      	ldr	r3, [pc, #64]	; (4031e8 <configure_usart+0x60>)
  4031a8:	4798      	blx	r3
  4031aa:	4602      	mov	r2, r0
  4031ac:	463b      	mov	r3, r7
  4031ae:	480f      	ldr	r0, [pc, #60]	; (4031ec <configure_usart+0x64>)
  4031b0:	4619      	mov	r1, r3
  4031b2:	4b0f      	ldr	r3, [pc, #60]	; (4031f0 <configure_usart+0x68>)
  4031b4:	4798      	blx	r3

	/* enable transmitter timeguard, 4 bit period delay. */
	usart_set_tx_timeguard(BOARD_USART, 4);
  4031b6:	480d      	ldr	r0, [pc, #52]	; (4031ec <configure_usart+0x64>)
  4031b8:	2104      	movs	r1, #4
  4031ba:	4b0e      	ldr	r3, [pc, #56]	; (4031f4 <configure_usart+0x6c>)
  4031bc:	4798      	blx	r3

	/* Disable all the interrupts. */
	usart_disable_interrupt(BOARD_USART, ALL_INTERRUPT_MASK);
  4031be:	480b      	ldr	r0, [pc, #44]	; (4031ec <configure_usart+0x64>)
  4031c0:	f04f 31ff 	mov.w	r1, #4294967295
  4031c4:	4b0c      	ldr	r3, [pc, #48]	; (4031f8 <configure_usart+0x70>)
  4031c6:	4798      	blx	r3

	/* Enable TX & RX function. */
	usart_enable_tx(BOARD_USART);
  4031c8:	4808      	ldr	r0, [pc, #32]	; (4031ec <configure_usart+0x64>)
  4031ca:	4b0c      	ldr	r3, [pc, #48]	; (4031fc <configure_usart+0x74>)
  4031cc:	4798      	blx	r3
	usart_enable_rx(BOARD_USART);
  4031ce:	4807      	ldr	r0, [pc, #28]	; (4031ec <configure_usart+0x64>)
  4031d0:	4b0b      	ldr	r3, [pc, #44]	; (403200 <configure_usart+0x78>)
  4031d2:	4798      	blx	r3

	/* Configure and enable interrupt of USART. */
	NVIC_EnableIRQ(USART_IRQn);
  4031d4:	200d      	movs	r0, #13
  4031d6:	4b0b      	ldr	r3, [pc, #44]	; (403204 <configure_usart+0x7c>)
  4031d8:	4798      	blx	r3
}
  4031da:	3718      	adds	r7, #24
  4031dc:	46bd      	mov	sp, r7
  4031de:	bdb0      	pop	{r4, r5, r7, pc}
  4031e0:	00409268 	.word	0x00409268
  4031e4:	00402b55 	.word	0x00402b55
  4031e8:	00402b2d 	.word	0x00402b2d
  4031ec:	40024000 	.word	0x40024000
  4031f0:	00401a89 	.word	0x00401a89
  4031f4:	00401b3d 	.word	0x00401b3d
  4031f8:	00401ba5 	.word	0x00401ba5
  4031fc:	00401b0d 	.word	0x00401b0d
  403200:	00401b59 	.word	0x00401b59
  403204:	0040290d 	.word	0x0040290d

00403208 <configure_systick>:

/**
 *  Configure system tick to generate an interrupt every 1us. Note that this was 1ms in the example code. jsi 11feb16
 */
static void configure_systick(void)
{
  403208:	b580      	push	{r7, lr}
  40320a:	b082      	sub	sp, #8
  40320c:	af00      	add	r7, sp, #0
	uint32_t ul_flag;

	ul_flag = SysTick_Config(sysclk_get_cpu_hz()/SYS_TICK_FREQ);
  40320e:	4b0a      	ldr	r3, [pc, #40]	; (403238 <configure_systick+0x30>)
  403210:	4798      	blx	r3
  403212:	4602      	mov	r2, r0
  403214:	4b09      	ldr	r3, [pc, #36]	; (40323c <configure_systick+0x34>)
  403216:	fba3 2302 	umull	r2, r3, r3, r2
  40321a:	099b      	lsrs	r3, r3, #6
  40321c:	4618      	mov	r0, r3
  40321e:	4b08      	ldr	r3, [pc, #32]	; (403240 <configure_systick+0x38>)
  403220:	4798      	blx	r3
  403222:	6078      	str	r0, [r7, #4]
	if (ul_flag) {
  403224:	687b      	ldr	r3, [r7, #4]
  403226:	2b00      	cmp	r3, #0
  403228:	d003      	beq.n	403232 <configure_systick+0x2a>
		puts("-F- Systick configuration error\r");
  40322a:	4806      	ldr	r0, [pc, #24]	; (403244 <configure_systick+0x3c>)
  40322c:	4b06      	ldr	r3, [pc, #24]	; (403248 <configure_systick+0x40>)
  40322e:	4798      	blx	r3
		while (1) {
		}
  403230:	e7fe      	b.n	403230 <configure_systick+0x28>
	}
}
  403232:	3708      	adds	r7, #8
  403234:	46bd      	mov	sp, r7
  403236:	bd80      	pop	{r7, pc}
  403238:	00402b2d 	.word	0x00402b2d
  40323c:	10624dd3 	.word	0x10624dd3
  403240:	00402991 	.word	0x00402991
  403244:	00409280 	.word	0x00409280
  403248:	00403b81 	.word	0x00403b81

0040324c <configure_console>:

/**
 *  Configure UART for debug message output.
 */
static void configure_console(void)
{
  40324c:	b590      	push	{r4, r7, lr}
  40324e:	b085      	sub	sp, #20
  403250:	af00      	add	r7, sp, #0
	const usart_serial_options_t uart_serial_options = {
  403252:	4b08      	ldr	r3, [pc, #32]	; (403274 <configure_console+0x28>)
  403254:	463c      	mov	r4, r7
  403256:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  403258:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		.stopbits = CONF_UART_STOP_BITS,
#endif
	};

	/* Configure console UART. */
	sysclk_enable_peripheral_clock(CONSOLE_UART_ID);
  40325c:	2007      	movs	r0, #7
  40325e:	4b06      	ldr	r3, [pc, #24]	; (403278 <configure_console+0x2c>)
  403260:	4798      	blx	r3
	stdio_serial_init(CONF_UART, &uart_serial_options);
  403262:	463b      	mov	r3, r7
  403264:	4805      	ldr	r0, [pc, #20]	; (40327c <configure_console+0x30>)
  403266:	4619      	mov	r1, r3
  403268:	4b05      	ldr	r3, [pc, #20]	; (403280 <configure_console+0x34>)
  40326a:	4798      	blx	r3
}
  40326c:	3714      	adds	r7, #20
  40326e:	46bd      	mov	sp, r7
  403270:	bd90      	pop	{r4, r7, pc}
  403272:	bf00      	nop
  403274:	004092a4 	.word	0x004092a4
  403278:	00402b55 	.word	0x00402b55
  40327c:	400e0800 	.word	0x400e0800
  403280:	0040303d 	.word	0x0040303d

00403284 <func_transmit>:
* \param *p_buff  data to be transmitted
* \param ulsize size of all data.
*
*/
uint8_t func_transmit(const uint8_t *p_buff, uint32_t ulsize)
{
  403284:	b580      	push	{r7, lr}
  403286:	b082      	sub	sp, #8
  403288:	af00      	add	r7, sp, #0
  40328a:	6078      	str	r0, [r7, #4]
  40328c:	6039      	str	r1, [r7, #0]
	Assert(p_buff);

	while(ulsize > 0) {
  40328e:	e013      	b.n	4032b8 <func_transmit+0x34>
		if(0 == usart_write(BOARD_USART, *p_buff)){
  403290:	687b      	ldr	r3, [r7, #4]
  403292:	781b      	ldrb	r3, [r3, #0]
  403294:	4810      	ldr	r0, [pc, #64]	; (4032d8 <func_transmit+0x54>)
  403296:	4619      	mov	r1, r3
  403298:	4b10      	ldr	r3, [pc, #64]	; (4032dc <func_transmit+0x58>)
  40329a:	4798      	blx	r3
  40329c:	4603      	mov	r3, r0
  40329e:	2b00      	cmp	r3, #0
  4032a0:	d10a      	bne.n	4032b8 <func_transmit+0x34>
			usart_enable_interrupt(BOARD_USART, US_IER_TXRDY | US_IER_TXEMPTY);
  4032a2:	480d      	ldr	r0, [pc, #52]	; (4032d8 <func_transmit+0x54>)
  4032a4:	f240 2102 	movw	r1, #514	; 0x202
  4032a8:	4b0d      	ldr	r3, [pc, #52]	; (4032e0 <func_transmit+0x5c>)
  4032aa:	4798      	blx	r3
			ulsize--;
  4032ac:	683b      	ldr	r3, [r7, #0]
  4032ae:	3b01      	subs	r3, #1
  4032b0:	603b      	str	r3, [r7, #0]
			p_buff++;
  4032b2:	687b      	ldr	r3, [r7, #4]
  4032b4:	3301      	adds	r3, #1
  4032b6:	607b      	str	r3, [r7, #4]
*/
uint8_t func_transmit(const uint8_t *p_buff, uint32_t ulsize)
{
	Assert(p_buff);

	while(ulsize > 0) {
  4032b8:	683b      	ldr	r3, [r7, #0]
  4032ba:	2b00      	cmp	r3, #0
  4032bc:	d1e8      	bne.n	403290 <func_transmit+0xc>
			ulsize--;
			p_buff++;
		}
	}

	while(!usart_is_tx_empty(BOARD_USART)) {
  4032be:	bf00      	nop
  4032c0:	4805      	ldr	r0, [pc, #20]	; (4032d8 <func_transmit+0x54>)
  4032c2:	4b08      	ldr	r3, [pc, #32]	; (4032e4 <func_transmit+0x60>)
  4032c4:	4798      	blx	r3
  4032c6:	4603      	mov	r3, r0
  4032c8:	2b00      	cmp	r3, #0
  4032ca:	d0f9      	beq.n	4032c0 <func_transmit+0x3c>
		;  /*waiting for transmit over*/
	}

	return 0;
  4032cc:	2300      	movs	r3, #0
}
  4032ce:	4618      	mov	r0, r3
  4032d0:	3708      	adds	r7, #8
  4032d2:	46bd      	mov	sp, r7
  4032d4:	bd80      	pop	{r7, pc}
  4032d6:	bf00      	nop
  4032d8:	40024000 	.word	0x40024000
  4032dc:	00401c61 	.word	0x00401c61
  4032e0:	00401b89 	.word	0x00401b89
  4032e4:	00401c11 	.word	0x00401c11

004032e8 <twi_init>:
	}
}

static void twi_init(void);
static void twi_init(void)
{
  4032e8:	b580      	push	{r7, lr}
  4032ea:	b084      	sub	sp, #16
  4032ec:	af00      	add	r7, sp, #0
	twihs_options_t opt;

	/* Enable the peripheral clock for TWI */
	pmc_enable_periph_clk(ID_TWIHS0);
  4032ee:	2013      	movs	r0, #19
  4032f0:	4b09      	ldr	r3, [pc, #36]	; (403318 <twi_init+0x30>)
  4032f2:	4798      	blx	r3

	/* Configure the options of TWI driver */
	opt.master_clk = sysclk_get_cpu_hz();
  4032f4:	4b09      	ldr	r3, [pc, #36]	; (40331c <twi_init+0x34>)
  4032f6:	4798      	blx	r3
  4032f8:	4603      	mov	r3, r0
  4032fa:	607b      	str	r3, [r7, #4]
	opt.speed      = TWIHS_CLK; //400KHz
  4032fc:	4b08      	ldr	r3, [pc, #32]	; (403320 <twi_init+0x38>)
  4032fe:	60bb      	str	r3, [r7, #8]

	if (twihs_master_init(TWIHS0, &opt) != TWIHS_SUCCESS) {
  403300:	1d3b      	adds	r3, r7, #4
  403302:	4808      	ldr	r0, [pc, #32]	; (403324 <twi_init+0x3c>)
  403304:	4619      	mov	r1, r3
  403306:	4b08      	ldr	r3, [pc, #32]	; (403328 <twi_init+0x40>)
  403308:	4798      	blx	r3
  40330a:	4603      	mov	r3, r0
  40330c:	2b00      	cmp	r3, #0
  40330e:	d000      	beq.n	403312 <twi_init+0x2a>
		while (1) {
			/* Capture error */
		}
  403310:	e7fe      	b.n	403310 <twi_init+0x28>
	}
}
  403312:	3710      	adds	r7, #16
  403314:	46bd      	mov	sp, r7
  403316:	bd80      	pop	{r7, pc}
  403318:	00401541 	.word	0x00401541
  40331c:	00402b2d 	.word	0x00402b2d
  403320:	00061a80 	.word	0x00061a80
  403324:	40018000 	.word	0x40018000
  403328:	004015e9 	.word	0x004015e9

0040332c <afec_end_conversion>:

/**
 * \brief AFEC interrupt callback function.
 */
static void afec_end_conversion(uint8_t bluesenseCh)
{
  40332c:	b590      	push	{r4, r7, lr}
  40332e:	b083      	sub	sp, #12
  403330:	af00      	add	r7, sp, #0
  403332:	4603      	mov	r3, r0
  403334:	71fb      	strb	r3, [r7, #7]
	g_ul_value[bluesenseCh] = afec_channel_get_value(afecSel[bluesenseCh], adcCh[bluesenseCh]);
  403336:	79fc      	ldrb	r4, [r7, #7]
  403338:	79fb      	ldrb	r3, [r7, #7]
  40333a:	4a0b      	ldr	r2, [pc, #44]	; (403368 <afec_end_conversion+0x3c>)
  40333c:	5cd3      	ldrb	r3, [r2, r3]
  40333e:	4619      	mov	r1, r3
  403340:	79fb      	ldrb	r3, [r7, #7]
  403342:	4a0a      	ldr	r2, [pc, #40]	; (40336c <afec_end_conversion+0x40>)
  403344:	5cd3      	ldrb	r3, [r2, r3]
  403346:	b29b      	uxth	r3, r3
  403348:	4608      	mov	r0, r1
  40334a:	4619      	mov	r1, r3
  40334c:	4b08      	ldr	r3, [pc, #32]	; (403370 <afec_end_conversion+0x44>)
  40334e:	4798      	blx	r3
  403350:	4602      	mov	r2, r0
  403352:	4b08      	ldr	r3, [pc, #32]	; (403374 <afec_end_conversion+0x48>)
  403354:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
	is_conversion_done[bluesenseCh] = true;
  403358:	79fb      	ldrb	r3, [r7, #7]
  40335a:	4a07      	ldr	r2, [pc, #28]	; (403378 <afec_end_conversion+0x4c>)
  40335c:	2101      	movs	r1, #1
  40335e:	54d1      	strb	r1, [r2, r3]
}
  403360:	370c      	adds	r7, #12
  403362:	46bd      	mov	sp, r7
  403364:	bd90      	pop	{r4, r7, pc}
  403366:	bf00      	nop
  403368:	204009b0 	.word	0x204009b0
  40336c:	20400080 	.word	0x20400080
  403370:	00402a35 	.word	0x00402a35
  403374:	204009a0 	.word	0x204009a0
  403378:	2040099c 	.word	0x2040099c

0040337c <afec_end_conversion_bluesense0>:

void afec_end_conversion_bluesense0(void)
{
  40337c:	b580      	push	{r7, lr}
  40337e:	af00      	add	r7, sp, #0
	afec_end_conversion(0);
  403380:	2000      	movs	r0, #0
  403382:	4b01      	ldr	r3, [pc, #4]	; (403388 <afec_end_conversion_bluesense0+0xc>)
  403384:	4798      	blx	r3
}
  403386:	bd80      	pop	{r7, pc}
  403388:	0040332d 	.word	0x0040332d

0040338c <afec_end_conversion_bluesense1>:
void afec_end_conversion_bluesense1(void)
{
  40338c:	b580      	push	{r7, lr}
  40338e:	af00      	add	r7, sp, #0
	afec_end_conversion(1);
  403390:	2001      	movs	r0, #1
  403392:	4b01      	ldr	r3, [pc, #4]	; (403398 <afec_end_conversion_bluesense1+0xc>)
  403394:	4798      	blx	r3
}
  403396:	bd80      	pop	{r7, pc}
  403398:	0040332d 	.word	0x0040332d

0040339c <afec_end_conversion_bluesense2>:
void afec_end_conversion_bluesense2(void)
{
  40339c:	b580      	push	{r7, lr}
  40339e:	af00      	add	r7, sp, #0
	afec_end_conversion(2);
  4033a0:	2002      	movs	r0, #2
  4033a2:	4b01      	ldr	r3, [pc, #4]	; (4033a8 <afec_end_conversion_bluesense2+0xc>)
  4033a4:	4798      	blx	r3
}
  4033a6:	bd80      	pop	{r7, pc}
  4033a8:	0040332d 	.word	0x0040332d

004033ac <afec_end_conversion_bluesense3>:
void afec_end_conversion_bluesense3(void)
{
  4033ac:	b580      	push	{r7, lr}
  4033ae:	af00      	add	r7, sp, #0
	afec_end_conversion(3);
  4033b0:	2003      	movs	r0, #3
  4033b2:	4b01      	ldr	r3, [pc, #4]	; (4033b8 <afec_end_conversion_bluesense3+0xc>)
  4033b4:	4798      	blx	r3
}
  4033b6:	bd80      	pop	{r7, pc}
  4033b8:	0040332d 	.word	0x0040332d

004033bc <init_adc>:

void init_adc(void)
{
  4033bc:	b590      	push	{r4, r7, lr}
  4033be:	b089      	sub	sp, #36	; 0x24
  4033c0:	af00      	add	r7, sp, #0
	struct afec_config afec_cfg;

	afec_get_config_defaults(&afec_cfg);
  4033c2:	f107 0308 	add.w	r3, r7, #8
  4033c6:	4618      	mov	r0, r3
  4033c8:	4b33      	ldr	r3, [pc, #204]	; (403498 <init_adc+0xdc>)
  4033ca:	4798      	blx	r3

	afec_init(AFEC0, &afec_cfg);
  4033cc:	f107 0308 	add.w	r3, r7, #8
  4033d0:	4832      	ldr	r0, [pc, #200]	; (40349c <init_adc+0xe0>)
  4033d2:	4619      	mov	r1, r3
  4033d4:	4b32      	ldr	r3, [pc, #200]	; (4034a0 <init_adc+0xe4>)
  4033d6:	4798      	blx	r3
	afec_init(AFEC1, &afec_cfg);
  4033d8:	f107 0308 	add.w	r3, r7, #8
  4033dc:	4831      	ldr	r0, [pc, #196]	; (4034a4 <init_adc+0xe8>)
  4033de:	4619      	mov	r1, r3
  4033e0:	4b2f      	ldr	r3, [pc, #188]	; (4034a0 <init_adc+0xe4>)
  4033e2:	4798      	blx	r3

	afec_set_trigger(AFEC0, AFEC_TRIG_SW);
  4033e4:	482d      	ldr	r0, [pc, #180]	; (40349c <init_adc+0xe0>)
  4033e6:	2100      	movs	r1, #0
  4033e8:	4b2f      	ldr	r3, [pc, #188]	; (4034a8 <init_adc+0xec>)
  4033ea:	4798      	blx	r3
	afec_set_trigger(AFEC1, AFEC_TRIG_SW);
  4033ec:	482d      	ldr	r0, [pc, #180]	; (4034a4 <init_adc+0xe8>)
  4033ee:	2100      	movs	r1, #0
  4033f0:	4b2d      	ldr	r3, [pc, #180]	; (4034a8 <init_adc+0xec>)
  4033f2:	4798      	blx	r3

	struct afec_ch_config afec_ch_cfg;
	afec_ch_get_config_defaults(&afec_ch_cfg);
  4033f4:	1d3b      	adds	r3, r7, #4
  4033f6:	4618      	mov	r0, r3
  4033f8:	4b2c      	ldr	r3, [pc, #176]	; (4034ac <init_adc+0xf0>)
  4033fa:	4798      	blx	r3

	afec_ch_cfg.gain = AFEC_GAINVALUE_0;
  4033fc:	2300      	movs	r3, #0
  4033fe:	717b      	strb	r3, [r7, #5]

	afec_ch_set_config(AFEC1, AFEC_CHANNEL_9, &afec_ch_cfg); //bluesense0 for now
  403400:	1d3b      	adds	r3, r7, #4
  403402:	4828      	ldr	r0, [pc, #160]	; (4034a4 <init_adc+0xe8>)
  403404:	2109      	movs	r1, #9
  403406:	461a      	mov	r2, r3
  403408:	4b29      	ldr	r3, [pc, #164]	; (4034b0 <init_adc+0xf4>)
  40340a:	4798      	blx	r3
	afec_ch_set_config(AFEC0, AFEC_CHANNEL_0, &afec_ch_cfg); //bluesense1 for now
  40340c:	1d3b      	adds	r3, r7, #4
  40340e:	4823      	ldr	r0, [pc, #140]	; (40349c <init_adc+0xe0>)
  403410:	2100      	movs	r1, #0
  403412:	461a      	mov	r2, r3
  403414:	4b26      	ldr	r3, [pc, #152]	; (4034b0 <init_adc+0xf4>)
  403416:	4798      	blx	r3
	afec_ch_set_config(AFEC0, AFEC_CHANNEL_4, &afec_ch_cfg); //bluesense2
  403418:	1d3b      	adds	r3, r7, #4
  40341a:	4820      	ldr	r0, [pc, #128]	; (40349c <init_adc+0xe0>)
  40341c:	2104      	movs	r1, #4
  40341e:	461a      	mov	r2, r3
  403420:	4b23      	ldr	r3, [pc, #140]	; (4034b0 <init_adc+0xf4>)
  403422:	4798      	blx	r3
	afec_ch_set_config(AFEC0, AFEC_CHANNEL_5, &afec_ch_cfg); //bluesense3
  403424:	1d3b      	adds	r3, r7, #4
  403426:	481d      	ldr	r0, [pc, #116]	; (40349c <init_adc+0xe0>)
  403428:	2105      	movs	r1, #5
  40342a:	461a      	mov	r2, r3
  40342c:	4b20      	ldr	r3, [pc, #128]	; (4034b0 <init_adc+0xf4>)
  40342e:	4798      	blx	r3

	/*
	 * Because the internal ADC offset is 0x200, it should cancel it and shift
	 * down to 0.
	 */
	afec_channel_set_analog_offset(AFEC1, AFEC_CHANNEL_9, 0x200);
  403430:	481c      	ldr	r0, [pc, #112]	; (4034a4 <init_adc+0xe8>)
  403432:	2109      	movs	r1, #9
  403434:	f44f 7200 	mov.w	r2, #512	; 0x200
  403438:	4b1e      	ldr	r3, [pc, #120]	; (4034b4 <init_adc+0xf8>)
  40343a:	4798      	blx	r3
	afec_channel_set_analog_offset(AFEC0, AFEC_CHANNEL_0, 0x200);
  40343c:	4817      	ldr	r0, [pc, #92]	; (40349c <init_adc+0xe0>)
  40343e:	2100      	movs	r1, #0
  403440:	f44f 7200 	mov.w	r2, #512	; 0x200
  403444:	4b1b      	ldr	r3, [pc, #108]	; (4034b4 <init_adc+0xf8>)
  403446:	4798      	blx	r3
	afec_channel_set_analog_offset(AFEC0, AFEC_CHANNEL_4, 0x200);
  403448:	4814      	ldr	r0, [pc, #80]	; (40349c <init_adc+0xe0>)
  40344a:	2104      	movs	r1, #4
  40344c:	f44f 7200 	mov.w	r2, #512	; 0x200
  403450:	4b18      	ldr	r3, [pc, #96]	; (4034b4 <init_adc+0xf8>)
  403452:	4798      	blx	r3
	afec_channel_set_analog_offset(AFEC0, AFEC_CHANNEL_5, 0x200);
  403454:	4811      	ldr	r0, [pc, #68]	; (40349c <init_adc+0xe0>)
  403456:	2105      	movs	r1, #5
  403458:	f44f 7200 	mov.w	r2, #512	; 0x200
  40345c:	4b15      	ldr	r3, [pc, #84]	; (4034b4 <init_adc+0xf8>)
  40345e:	4798      	blx	r3
	afec_temp_sensor_get_config_defaults(&afec_temp_sensor_cfg);
	afec_temp_sensor_cfg.rctc = true;
	afec_temp_sensor_set_config(AFEC0, &afec_temp_sensor_cfg);
#endif

	afec_set_callback(AFEC1, AFEC_CHANNEL_9,
  403460:	4810      	ldr	r0, [pc, #64]	; (4034a4 <init_adc+0xe8>)
  403462:	2109      	movs	r1, #9
  403464:	4a14      	ldr	r2, [pc, #80]	; (4034b8 <init_adc+0xfc>)
  403466:	2301      	movs	r3, #1
  403468:	4c14      	ldr	r4, [pc, #80]	; (4034bc <init_adc+0x100>)
  40346a:	47a0      	blx	r4
		afec_end_conversion_bluesense0, 1);
	afec_set_callback(AFEC0, AFEC_CHANNEL_0,
  40346c:	480b      	ldr	r0, [pc, #44]	; (40349c <init_adc+0xe0>)
  40346e:	2100      	movs	r1, #0
  403470:	4a13      	ldr	r2, [pc, #76]	; (4034c0 <init_adc+0x104>)
  403472:	2301      	movs	r3, #1
  403474:	4c11      	ldr	r4, [pc, #68]	; (4034bc <init_adc+0x100>)
  403476:	47a0      	blx	r4
		afec_end_conversion_bluesense1, 1);
	afec_set_callback(AFEC0, AFEC_CHANNEL_4,
  403478:	4808      	ldr	r0, [pc, #32]	; (40349c <init_adc+0xe0>)
  40347a:	2104      	movs	r1, #4
  40347c:	4a11      	ldr	r2, [pc, #68]	; (4034c4 <init_adc+0x108>)
  40347e:	2301      	movs	r3, #1
  403480:	4c0e      	ldr	r4, [pc, #56]	; (4034bc <init_adc+0x100>)
  403482:	47a0      	blx	r4
		afec_end_conversion_bluesense2, 1);
	afec_set_callback(AFEC0, AFEC_CHANNEL_5,
  403484:	4805      	ldr	r0, [pc, #20]	; (40349c <init_adc+0xe0>)
  403486:	2105      	movs	r1, #5
  403488:	4a0f      	ldr	r2, [pc, #60]	; (4034c8 <init_adc+0x10c>)
  40348a:	2301      	movs	r3, #1
  40348c:	4c0b      	ldr	r4, [pc, #44]	; (4034bc <init_adc+0x100>)
  40348e:	47a0      	blx	r4
		afec_end_conversion_bluesense3, 1);

}
  403490:	3724      	adds	r7, #36	; 0x24
  403492:	46bd      	mov	sp, r7
  403494:	bd90      	pop	{r4, r7, pc}
  403496:	bf00      	nop
  403498:	00400e2d 	.word	0x00400e2d
  40349c:	4003c000 	.word	0x4003c000
  4034a0:	00400ead 	.word	0x00400ead
  4034a4:	40064000 	.word	0x40064000
  4034a8:	004029f1 	.word	0x004029f1
  4034ac:	00400e8d 	.word	0x00400e8d
  4034b0:	00400d9d 	.word	0x00400d9d
  4034b4:	00402a61 	.word	0x00402a61
  4034b8:	0040337d 	.word	0x0040337d
  4034bc:	00400f25 	.word	0x00400f25
  4034c0:	0040338d 	.word	0x0040338d
  4034c4:	0040339d 	.word	0x0040339d
  4034c8:	004033ad 	.word	0x004033ad

004034cc <read_adc>:

void read_adc(uint8_t bluesenseCh)
{
  4034cc:	b590      	push	{r4, r7, lr}
  4034ce:	b08b      	sub	sp, #44	; 0x2c
  4034d0:	af00      	add	r7, sp, #0
  4034d2:	4603      	mov	r3, r0
  4034d4:	71fb      	strb	r3, [r7, #7]
	char printStr[32];
	
	ul_vol = g_ul_value[bluesenseCh] * VOLT_REF / MAX_DIGITAL;
  4034d6:	79fb      	ldrb	r3, [r7, #7]
  4034d8:	4a15      	ldr	r2, [pc, #84]	; (403530 <read_adc+0x64>)
  4034da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  4034de:	f640 42e4 	movw	r2, #3300	; 0xce4
  4034e2:	fb02 f203 	mul.w	r2, r2, r3
  4034e6:	4b13      	ldr	r3, [pc, #76]	; (403534 <read_adc+0x68>)
  4034e8:	fba3 1302 	umull	r1, r3, r3, r2
  4034ec:	1ad2      	subs	r2, r2, r3
  4034ee:	0852      	lsrs	r2, r2, #1
  4034f0:	4413      	add	r3, r2
  4034f2:	0adb      	lsrs	r3, r3, #11
  4034f4:	4a10      	ldr	r2, [pc, #64]	; (403538 <read_adc+0x6c>)
  4034f6:	6013      	str	r3, [r2, #0]

	sprintf(printStr, "adc ch %d: %4x\r\n", bluesenseCh, ul_vol);
  4034f8:	79fa      	ldrb	r2, [r7, #7]
  4034fa:	4b0f      	ldr	r3, [pc, #60]	; (403538 <read_adc+0x6c>)
  4034fc:	681b      	ldr	r3, [r3, #0]
  4034fe:	f107 0108 	add.w	r1, r7, #8
  403502:	4608      	mov	r0, r1
  403504:	490d      	ldr	r1, [pc, #52]	; (40353c <read_adc+0x70>)
  403506:	4c0e      	ldr	r4, [pc, #56]	; (403540 <read_adc+0x74>)
  403508:	47a0      	blx	r4

	func_transmit(printStr, strlen(printStr));
  40350a:	f107 0308 	add.w	r3, r7, #8
  40350e:	4618      	mov	r0, r3
  403510:	4b0c      	ldr	r3, [pc, #48]	; (403544 <read_adc+0x78>)
  403512:	4798      	blx	r3
  403514:	4602      	mov	r2, r0
  403516:	f107 0308 	add.w	r3, r7, #8
  40351a:	4618      	mov	r0, r3
  40351c:	4611      	mov	r1, r2
  40351e:	4b0a      	ldr	r3, [pc, #40]	; (403548 <read_adc+0x7c>)
  403520:	4798      	blx	r3

	is_conversion_done[bluesenseCh] = false;
  403522:	79fb      	ldrb	r3, [r7, #7]
  403524:	4a09      	ldr	r2, [pc, #36]	; (40354c <read_adc+0x80>)
  403526:	2100      	movs	r1, #0
  403528:	54d1      	strb	r1, [r2, r3]
}
  40352a:	372c      	adds	r7, #44	; 0x2c
  40352c:	46bd      	mov	sp, r7
  40352e:	bd90      	pop	{r4, r7, pc}
  403530:	204009a0 	.word	0x204009a0
  403534:	00100101 	.word	0x00100101
  403538:	20400aa4 	.word	0x20400aa4
  40353c:	004092b8 	.word	0x004092b8
  403540:	00403c9d 	.word	0x00403c9d
  403544:	00403ce9 	.word	0x00403ce9
  403548:	00403285 	.word	0x00403285
  40354c:	2040099c 	.word	0x2040099c

00403550 <main>:
 */

#  define EXAMPLE_LED_GPIO    LED0_GPIO

int main(void) //6feb16 this version of main has been hacked up for only exactly what we need
{
  403550:	b5f0      	push	{r4, r5, r6, r7, lr}
  403552:	b0a3      	sub	sp, #140	; 0x8c
  403554:	af06      	add	r7, sp, #24
	char		txBuf[11] = {0,0,0,0,0,0,0,0,0,0,0}, rxByte;
  403556:	2300      	movs	r3, #0
  403558:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  40355c:	2300      	movs	r3, #0
  40355e:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
  403562:	2300      	movs	r3, #0
  403564:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
  403568:	2300      	movs	r3, #0
  40356a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  40356e:	2300      	movs	r3, #0
  403570:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  403574:	2300      	movs	r3, #0
  403576:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
  40357a:	2300      	movs	r3, #0
  40357c:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  403580:	2300      	movs	r3, #0
  403582:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  403586:	2300      	movs	r3, #0
  403588:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  40358c:	2300      	movs	r3, #0
  40358e:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
  403592:	2300      	movs	r3, #0
  403594:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
	uint32_t	i;	
	uint32_t	time_elapsed = 0;
  403598:	2300      	movs	r3, #0
  40359a:	65fb      	str	r3, [r7, #92]	; 0x5c
	uint32_t	ul_i;
	uint8_t		displayState = 0;
  40359c:	2300      	movs	r3, #0
  40359e:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
	uint8_t		charCount = 0;
  4035a2:	2300      	movs	r3, #0
  4035a4:	f887 306a 	strb.w	r3, [r7, #106]	; 0x6a
	char		printStr[64];
	
	unsigned char idFamily, acc, id[6], idcsum; //10feb16 temp serial ID code, make more formal later

	/* Initialize the SAM system. */
	sysclk_init();
  4035a8:	4b9c      	ldr	r3, [pc, #624]	; (40381c <main+0x2cc>)
  4035aa:	4798      	blx	r3
	board_init();
  4035ac:	4b9c      	ldr	r3, [pc, #624]	; (403820 <main+0x2d0>)
  4035ae:	4798      	blx	r3

	/* Configure UART for blue scrolling display */
	configure_console();
  4035b0:	4b9c      	ldr	r3, [pc, #624]	; (403824 <main+0x2d4>)
  4035b2:	4798      	blx	r3

	/* Configure USART. */
	configure_usart();
  4035b4:	4b9c      	ldr	r3, [pc, #624]	; (403828 <main+0x2d8>)
  4035b6:	4798      	blx	r3

	/* 1ms tick. */
	configure_systick();
  4035b8:	4b9c      	ldr	r3, [pc, #624]	; (40382c <main+0x2dc>)
  4035ba:	4798      	blx	r3

	/*
	 * Put into some kind of "init_io()" function at some point
	 */
	
	ioport_set_pin_dir(ECLAVE_SERIAL_ID0, IOPORT_DIR_OUTPUT);
  4035bc:	200f      	movs	r0, #15
  4035be:	2101      	movs	r1, #1
  4035c0:	4b9b      	ldr	r3, [pc, #620]	; (403830 <main+0x2e0>)
  4035c2:	4798      	blx	r3
	ioport_set_pin_level(ECLAVE_SERIAL_ID0, IOPORT_PIN_LEVEL_HIGH);
  4035c4:	200f      	movs	r0, #15
  4035c6:	2101      	movs	r1, #1
  4035c8:	4b9a      	ldr	r3, [pc, #616]	; (403834 <main+0x2e4>)
  4035ca:	4798      	blx	r3
	ioport_set_pin_dir(ECLAVE_SERIAL_ID1, IOPORT_DIR_OUTPUT);
  4035cc:	2010      	movs	r0, #16
  4035ce:	2101      	movs	r1, #1
  4035d0:	4b97      	ldr	r3, [pc, #604]	; (403830 <main+0x2e0>)
  4035d2:	4798      	blx	r3
	ioport_set_pin_level(ECLAVE_SERIAL_ID1, IOPORT_PIN_LEVEL_HIGH);
  4035d4:	2010      	movs	r0, #16
  4035d6:	2101      	movs	r1, #1
  4035d8:	4b96      	ldr	r3, [pc, #600]	; (403834 <main+0x2e4>)
  4035da:	4798      	blx	r3
	ioport_set_pin_dir(ECLAVE_SERIAL_ID2, IOPORT_DIR_OUTPUT);
  4035dc:	2011      	movs	r0, #17
  4035de:	2101      	movs	r1, #1
  4035e0:	4b93      	ldr	r3, [pc, #588]	; (403830 <main+0x2e0>)
  4035e2:	4798      	blx	r3
	ioport_set_pin_level(ECLAVE_SERIAL_ID2, IOPORT_PIN_LEVEL_HIGH);
  4035e4:	2011      	movs	r0, #17
  4035e6:	2101      	movs	r1, #1
  4035e8:	4b92      	ldr	r3, [pc, #584]	; (403834 <main+0x2e4>)
  4035ea:	4798      	blx	r3
	ioport_set_pin_dir(ECLAVE_SERIAL_ID3, IOPORT_DIR_OUTPUT);
  4035ec:	2012      	movs	r0, #18
  4035ee:	2101      	movs	r1, #1
  4035f0:	4b8f      	ldr	r3, [pc, #572]	; (403830 <main+0x2e0>)
  4035f2:	4798      	blx	r3
	ioport_set_pin_level(ECLAVE_SERIAL_ID3, IOPORT_PIN_LEVEL_HIGH);
  4035f4:	2012      	movs	r0, #18
  4035f6:	2101      	movs	r1, #1
  4035f8:	4b8e      	ldr	r3, [pc, #568]	; (403834 <main+0x2e4>)
  4035fa:	4798      	blx	r3
	ioport_set_pin_dir(ECLAVE_SERIAL_ID4, IOPORT_DIR_OUTPUT);
  4035fc:	2013      	movs	r0, #19
  4035fe:	2101      	movs	r1, #1
  403600:	4b8b      	ldr	r3, [pc, #556]	; (403830 <main+0x2e0>)
  403602:	4798      	blx	r3
	ioport_set_pin_level(ECLAVE_SERIAL_ID4, IOPORT_PIN_LEVEL_HIGH);
  403604:	2013      	movs	r0, #19
  403606:	2101      	movs	r1, #1
  403608:	4b8a      	ldr	r3, [pc, #552]	; (403834 <main+0x2e4>)
  40360a:	4798      	blx	r3

	SetSpeed(1); //1==standard speed, not overdrive 
  40360c:	2001      	movs	r0, #1
  40360e:	4b8a      	ldr	r3, [pc, #552]	; (403838 <main+0x2e8>)
  403610:	4798      	blx	r3
	
	for (int i=0; i<5; i++)
  403612:	2300      	movs	r3, #0
  403614:	667b      	str	r3, [r7, #100]	; 0x64
  403616:	e080      	b.n	40371a <main+0x1ca>
	{
		if(!OWTouchReset(i)) //we think a board is present, try to read the serial ID
  403618:	6e7b      	ldr	r3, [r7, #100]	; 0x64
  40361a:	b2db      	uxtb	r3, r3
  40361c:	4618      	mov	r0, r3
  40361e:	4b87      	ldr	r3, [pc, #540]	; (40383c <main+0x2ec>)
  403620:	4798      	blx	r3
  403622:	4603      	mov	r3, r0
  403624:	2b00      	cmp	r3, #0
  403626:	d171      	bne.n	40370c <main+0x1bc>
		{
			OWWriteByte(i, 0x33); //Read ID command
  403628:	6e7b      	ldr	r3, [r7, #100]	; 0x64
  40362a:	b2db      	uxtb	r3, r3
  40362c:	4618      	mov	r0, r3
  40362e:	2133      	movs	r1, #51	; 0x33
  403630:	4b83      	ldr	r3, [pc, #524]	; (403840 <main+0x2f0>)
  403632:	4798      	blx	r3
			
			idFamily = OWReadByte(i);
  403634:	6e7b      	ldr	r3, [r7, #100]	; 0x64
  403636:	b2db      	uxtb	r3, r3
  403638:	4618      	mov	r0, r3
  40363a:	4b82      	ldr	r3, [pc, #520]	; (403844 <main+0x2f4>)
  40363c:	4798      	blx	r3
  40363e:	4603      	mov	r3, r0
  403640:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
			
			acc = crc8_add(0x00, idFamily);
  403644:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
  403648:	2000      	movs	r0, #0
  40364a:	4619      	mov	r1, r3
  40364c:	4b7e      	ldr	r3, [pc, #504]	; (403848 <main+0x2f8>)
  40364e:	4798      	blx	r3
  403650:	4603      	mov	r3, r0
  403652:	f887 3069 	strb.w	r3, [r7, #105]	; 0x69
			
			for (int j=0; j<6; j++)
  403656:	2300      	movs	r3, #0
  403658:	663b      	str	r3, [r7, #96]	; 0x60
  40365a:	e01b      	b.n	403694 <main+0x144>
			{
				id[j] = OWReadByte(i);
  40365c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
  40365e:	b2db      	uxtb	r3, r3
  403660:	4618      	mov	r0, r3
  403662:	4b78      	ldr	r3, [pc, #480]	; (403844 <main+0x2f4>)
  403664:	4798      	blx	r3
  403666:	4603      	mov	r3, r0
  403668:	b2d9      	uxtb	r1, r3
  40366a:	463a      	mov	r2, r7
  40366c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
  40366e:	4413      	add	r3, r2
  403670:	460a      	mov	r2, r1
  403672:	701a      	strb	r2, [r3, #0]
				acc = crc8_add(acc, id[j]);
  403674:	463a      	mov	r2, r7
  403676:	6e3b      	ldr	r3, [r7, #96]	; 0x60
  403678:	4413      	add	r3, r2
  40367a:	781b      	ldrb	r3, [r3, #0]
  40367c:	f897 2069 	ldrb.w	r2, [r7, #105]	; 0x69
  403680:	4610      	mov	r0, r2
  403682:	4619      	mov	r1, r3
  403684:	4b70      	ldr	r3, [pc, #448]	; (403848 <main+0x2f8>)
  403686:	4798      	blx	r3
  403688:	4603      	mov	r3, r0
  40368a:	f887 3069 	strb.w	r3, [r7, #105]	; 0x69
			
			idFamily = OWReadByte(i);
			
			acc = crc8_add(0x00, idFamily);
			
			for (int j=0; j<6; j++)
  40368e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
  403690:	3301      	adds	r3, #1
  403692:	663b      	str	r3, [r7, #96]	; 0x60
  403694:	6e3b      	ldr	r3, [r7, #96]	; 0x60
  403696:	2b05      	cmp	r3, #5
  403698:	dde0      	ble.n	40365c <main+0x10c>
			{
				id[j] = OWReadByte(i);
				acc = crc8_add(acc, id[j]);
			}
			
			idcsum = OWReadByte(i);
  40369a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
  40369c:	b2db      	uxtb	r3, r3
  40369e:	4618      	mov	r0, r3
  4036a0:	4b68      	ldr	r3, [pc, #416]	; (403844 <main+0x2f4>)
  4036a2:	4798      	blx	r3
  4036a4:	4603      	mov	r3, r0
  4036a6:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a
			
			if (acc != idcsum)
  4036aa:	f897 2069 	ldrb.w	r2, [r7, #105]	; 0x69
  4036ae:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
  4036b2:	429a      	cmp	r2, r3
  4036b4:	d004      	beq.n	4036c0 <main+0x170>
			{
				func_transmit("Invalid serial ID checksum.\r\n", strlen("Invalid serial ID checksum.\r\n"));
  4036b6:	4865      	ldr	r0, [pc, #404]	; (40384c <main+0x2fc>)
  4036b8:	211d      	movs	r1, #29
  4036ba:	4b65      	ldr	r3, [pc, #404]	; (403850 <main+0x300>)
  4036bc:	4798      	blx	r3
  4036be:	e029      	b.n	403714 <main+0x1c4>
			}
			else
			{
				sprintf(printStr,"LED board %d serial ID: %x%x%x%x%x%x\r\n", i, id[0], id[1], id[2], id[3], id[4], id[5]);
  4036c0:	783b      	ldrb	r3, [r7, #0]
  4036c2:	461e      	mov	r6, r3
  4036c4:	787b      	ldrb	r3, [r7, #1]
  4036c6:	461d      	mov	r5, r3
  4036c8:	78bb      	ldrb	r3, [r7, #2]
  4036ca:	461c      	mov	r4, r3
  4036cc:	78fb      	ldrb	r3, [r7, #3]
  4036ce:	4618      	mov	r0, r3
  4036d0:	793b      	ldrb	r3, [r7, #4]
  4036d2:	4619      	mov	r1, r3
  4036d4:	797b      	ldrb	r3, [r7, #5]
  4036d6:	461a      	mov	r2, r3
  4036d8:	f107 0308 	add.w	r3, r7, #8
  4036dc:	9500      	str	r5, [sp, #0]
  4036de:	9401      	str	r4, [sp, #4]
  4036e0:	9002      	str	r0, [sp, #8]
  4036e2:	9103      	str	r1, [sp, #12]
  4036e4:	9204      	str	r2, [sp, #16]
  4036e6:	4618      	mov	r0, r3
  4036e8:	495a      	ldr	r1, [pc, #360]	; (403854 <main+0x304>)
  4036ea:	6e7a      	ldr	r2, [r7, #100]	; 0x64
  4036ec:	4633      	mov	r3, r6
  4036ee:	4c5a      	ldr	r4, [pc, #360]	; (403858 <main+0x308>)
  4036f0:	47a0      	blx	r4
				func_transmit(printStr,strlen(printStr));
  4036f2:	f107 0308 	add.w	r3, r7, #8
  4036f6:	4618      	mov	r0, r3
  4036f8:	4b58      	ldr	r3, [pc, #352]	; (40385c <main+0x30c>)
  4036fa:	4798      	blx	r3
  4036fc:	4602      	mov	r2, r0
  4036fe:	f107 0308 	add.w	r3, r7, #8
  403702:	4618      	mov	r0, r3
  403704:	4611      	mov	r1, r2
  403706:	4b52      	ldr	r3, [pc, #328]	; (403850 <main+0x300>)
  403708:	4798      	blx	r3
  40370a:	e003      	b.n	403714 <main+0x1c4>
			}
		}
		else
		{
			func_transmit("no board this slot\r\n", strlen("no board this slot\r\n"));
  40370c:	4854      	ldr	r0, [pc, #336]	; (403860 <main+0x310>)
  40370e:	2114      	movs	r1, #20
  403710:	4b4f      	ldr	r3, [pc, #316]	; (403850 <main+0x300>)
  403712:	4798      	blx	r3
	ioport_set_pin_dir(ECLAVE_SERIAL_ID4, IOPORT_DIR_OUTPUT);
	ioport_set_pin_level(ECLAVE_SERIAL_ID4, IOPORT_PIN_LEVEL_HIGH);

	SetSpeed(1); //1==standard speed, not overdrive 
	
	for (int i=0; i<5; i++)
  403714:	6e7b      	ldr	r3, [r7, #100]	; 0x64
  403716:	3301      	adds	r3, #1
  403718:	667b      	str	r3, [r7, #100]	; 0x64
  40371a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
  40371c:	2b04      	cmp	r3, #4
  40371e:	f77f af7b 	ble.w	403618 <main+0xc8>

	/*
	 * End of minimalist serial ID chip stuff
	 */

	twi_init();
  403722:	4b50      	ldr	r3, [pc, #320]	; (403864 <main+0x314>)
  403724:	4798      	blx	r3

//make this ecII jsi 7feb16	gpio_set_pin_high(ECLAVE_LED_OEn); //make sure outputs are disabled at the chip level

	PCA9952_init();
  403726:	4b50      	ldr	r3, [pc, #320]	; (403868 <main+0x318>)
  403728:	4798      	blx	r3

	init_adc();
  40372a:	4b50      	ldr	r3, [pc, #320]	; (40386c <main+0x31c>)
  40372c:	4798      	blx	r3
	
	/*
	 * Enable transmitter here, and disable receiver first, to avoid receiving
	 * characters sent by itself. It's necessary for half duplex RS485.
	 */
	usart_enable_tx(BOARD_USART);
  40372e:	4850      	ldr	r0, [pc, #320]	; (403870 <main+0x320>)
  403730:	4b50      	ldr	r3, [pc, #320]	; (403874 <main+0x324>)
  403732:	4798      	blx	r3
	usart_enable_rx(BOARD_USART);
  403734:	484e      	ldr	r0, [pc, #312]	; (403870 <main+0x320>)
  403736:	4b50      	ldr	r3, [pc, #320]	; (403878 <main+0x328>)
  403738:	4798      	blx	r3

	while (1) {

		/* Test the debug LED */
		ioport_toggle_pin_level(EXAMPLE_LED_GPIO);
  40373a:	2050      	movs	r0, #80	; 0x50
  40373c:	4b4f      	ldr	r3, [pc, #316]	; (40387c <main+0x32c>)
  40373e:	4798      	blx	r3


		/* Test the debug usart rx and tx */
		for (i=0; i<70; i++) //7 seconds
  403740:	2300      	movs	r3, #0
  403742:	66fb      	str	r3, [r7, #108]	; 0x6c
  403744:	e017      	b.n	403776 <main+0x226>
		{
			mdelay(100);
  403746:	2064      	movs	r0, #100	; 0x64
  403748:	4b4d      	ldr	r3, [pc, #308]	; (403880 <main+0x330>)
  40374a:	4798      	blx	r3
		
			if (usart_is_rx_ready(BOARD_USART)) {
  40374c:	4848      	ldr	r0, [pc, #288]	; (403870 <main+0x320>)
  40374e:	4b4d      	ldr	r3, [pc, #308]	; (403884 <main+0x334>)
  403750:	4798      	blx	r3
  403752:	4603      	mov	r3, r0
  403754:	2b00      	cmp	r3, #0
  403756:	d00b      	beq.n	403770 <main+0x220>
				usart_read(BOARD_USART, (uint32_t *)&rxByte);
  403758:	f107 034b 	add.w	r3, r7, #75	; 0x4b
  40375c:	4844      	ldr	r0, [pc, #272]	; (403870 <main+0x320>)
  40375e:	4619      	mov	r1, r3
  403760:	4b49      	ldr	r3, [pc, #292]	; (403888 <main+0x338>)
  403762:	4798      	blx	r3
				func_transmit(&rxByte, 1);
  403764:	f107 034b 	add.w	r3, r7, #75	; 0x4b
  403768:	4618      	mov	r0, r3
  40376a:	2101      	movs	r1, #1
  40376c:	4b38      	ldr	r3, [pc, #224]	; (403850 <main+0x300>)
  40376e:	4798      	blx	r3
		/* Test the debug LED */
		ioport_toggle_pin_level(EXAMPLE_LED_GPIO);


		/* Test the debug usart rx and tx */
		for (i=0; i<70; i++) //7 seconds
  403770:	6efb      	ldr	r3, [r7, #108]	; 0x6c
  403772:	3301      	adds	r3, #1
  403774:	66fb      	str	r3, [r7, #108]	; 0x6c
  403776:	6efb      	ldr	r3, [r7, #108]	; 0x6c
  403778:	2b45      	cmp	r3, #69	; 0x45
  40377a:	d9e4      	bls.n	403746 <main+0x1f6>
				func_transmit(&rxByte, 1);
			}
		}

		/* Test the scrolling blue LED display */
		for (charCount = 0; charCount < 7; charCount++)
  40377c:	2300      	movs	r3, #0
  40377e:	f887 306a 	strb.w	r3, [r7, #106]	; 0x6a
  403782:	e09b      	b.n	4038bc <main+0x36c>
		{
			unsigned char temp;
			temp = (*(cmdPtrArray[displayState]+charCount));
  403784:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
  403788:	4a40      	ldr	r2, [pc, #256]	; (40388c <main+0x33c>)
  40378a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
  40378e:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
  403792:	4413      	add	r3, r2
  403794:	781b      	ldrb	r3, [r3, #0]
  403796:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
			putchar(temp);
  40379a:	4b3d      	ldr	r3, [pc, #244]	; (403890 <main+0x340>)
  40379c:	681b      	ldr	r3, [r3, #0]
  40379e:	689b      	ldr	r3, [r3, #8]
  4037a0:	689a      	ldr	r2, [r3, #8]
  4037a2:	3a01      	subs	r2, #1
  4037a4:	609a      	str	r2, [r3, #8]
  4037a6:	689b      	ldr	r3, [r3, #8]
  4037a8:	2b00      	cmp	r3, #0
  4037aa:	da75      	bge.n	403898 <main+0x348>
  4037ac:	4b38      	ldr	r3, [pc, #224]	; (403890 <main+0x340>)
  4037ae:	681b      	ldr	r3, [r3, #0]
  4037b0:	689b      	ldr	r3, [r3, #8]
  4037b2:	689a      	ldr	r2, [r3, #8]
  4037b4:	4b36      	ldr	r3, [pc, #216]	; (403890 <main+0x340>)
  4037b6:	681b      	ldr	r3, [r3, #0]
  4037b8:	689b      	ldr	r3, [r3, #8]
  4037ba:	699b      	ldr	r3, [r3, #24]
  4037bc:	429a      	cmp	r2, r3
  4037be:	db1f      	blt.n	403800 <main+0x2b0>
  4037c0:	4b33      	ldr	r3, [pc, #204]	; (403890 <main+0x340>)
  4037c2:	681b      	ldr	r3, [r3, #0]
  4037c4:	689b      	ldr	r3, [r3, #8]
  4037c6:	681b      	ldr	r3, [r3, #0]
  4037c8:	f897 2059 	ldrb.w	r2, [r7, #89]	; 0x59
  4037cc:	701a      	strb	r2, [r3, #0]
  4037ce:	4b30      	ldr	r3, [pc, #192]	; (403890 <main+0x340>)
  4037d0:	681b      	ldr	r3, [r3, #0]
  4037d2:	689b      	ldr	r3, [r3, #8]
  4037d4:	681b      	ldr	r3, [r3, #0]
  4037d6:	781b      	ldrb	r3, [r3, #0]
  4037d8:	2b0a      	cmp	r3, #10
  4037da:	d006      	beq.n	4037ea <main+0x29a>
  4037dc:	4b2c      	ldr	r3, [pc, #176]	; (403890 <main+0x340>)
  4037de:	681b      	ldr	r3, [r3, #0]
  4037e0:	689b      	ldr	r3, [r3, #8]
  4037e2:	681a      	ldr	r2, [r3, #0]
  4037e4:	3201      	adds	r2, #1
  4037e6:	601a      	str	r2, [r3, #0]
  4037e8:	e063      	b.n	4038b2 <main+0x362>
  4037ea:	4b29      	ldr	r3, [pc, #164]	; (403890 <main+0x340>)
  4037ec:	681a      	ldr	r2, [r3, #0]
  4037ee:	4b28      	ldr	r3, [pc, #160]	; (403890 <main+0x340>)
  4037f0:	681b      	ldr	r3, [r3, #0]
  4037f2:	689b      	ldr	r3, [r3, #8]
  4037f4:	4610      	mov	r0, r2
  4037f6:	210a      	movs	r1, #10
  4037f8:	461a      	mov	r2, r3
  4037fa:	4b26      	ldr	r3, [pc, #152]	; (403894 <main+0x344>)
  4037fc:	4798      	blx	r3
  4037fe:	e058      	b.n	4038b2 <main+0x362>
  403800:	4b23      	ldr	r3, [pc, #140]	; (403890 <main+0x340>)
  403802:	6819      	ldr	r1, [r3, #0]
  403804:	f897 2059 	ldrb.w	r2, [r7, #89]	; 0x59
  403808:	4b21      	ldr	r3, [pc, #132]	; (403890 <main+0x340>)
  40380a:	681b      	ldr	r3, [r3, #0]
  40380c:	689b      	ldr	r3, [r3, #8]
  40380e:	4608      	mov	r0, r1
  403810:	4611      	mov	r1, r2
  403812:	461a      	mov	r2, r3
  403814:	4b1f      	ldr	r3, [pc, #124]	; (403894 <main+0x344>)
  403816:	4798      	blx	r3
  403818:	e04b      	b.n	4038b2 <main+0x362>
  40381a:	bf00      	nop
  40381c:	00400491 	.word	0x00400491
  403820:	00400a6d 	.word	0x00400a6d
  403824:	0040324d 	.word	0x0040324d
  403828:	00403189 	.word	0x00403189
  40382c:	00403209 	.word	0x00403209
  403830:	00402b6d 	.word	0x00402b6d
  403834:	00402bf5 	.word	0x00402bf5
  403838:	004025cd 	.word	0x004025cd
  40383c:	00402689 	.word	0x00402689
  403840:	00402829 	.word	0x00402829
  403844:	00402869 	.word	0x00402869
  403848:	004028b5 	.word	0x004028b5
  40384c:	004092cc 	.word	0x004092cc
  403850:	00403285 	.word	0x00403285
  403854:	004092ec 	.word	0x004092ec
  403858:	00403c9d 	.word	0x00403c9d
  40385c:	00403ce9 	.word	0x00403ce9
  403860:	00409314 	.word	0x00409314
  403864:	004032e9 	.word	0x004032e9
  403868:	00402139 	.word	0x00402139
  40386c:	004033bd 	.word	0x004033bd
  403870:	40024000 	.word	0x40024000
  403874:	00401b0d 	.word	0x00401b0d
  403878:	00401b59 	.word	0x00401b59
  40387c:	00402c61 	.word	0x00402c61
  403880:	004030a5 	.word	0x004030a5
  403884:	00401c39 	.word	0x00401c39
  403888:	00401c95 	.word	0x00401c95
  40388c:	20400058 	.word	0x20400058
  403890:	204004b0 	.word	0x204004b0
  403894:	00405255 	.word	0x00405255
  403898:	4b57      	ldr	r3, [pc, #348]	; (4039f8 <main+0x4a8>)
  40389a:	681b      	ldr	r3, [r3, #0]
  40389c:	689b      	ldr	r3, [r3, #8]
  40389e:	681b      	ldr	r3, [r3, #0]
  4038a0:	f897 2059 	ldrb.w	r2, [r7, #89]	; 0x59
  4038a4:	701a      	strb	r2, [r3, #0]
  4038a6:	4b54      	ldr	r3, [pc, #336]	; (4039f8 <main+0x4a8>)
  4038a8:	681b      	ldr	r3, [r3, #0]
  4038aa:	689b      	ldr	r3, [r3, #8]
  4038ac:	681a      	ldr	r2, [r3, #0]
  4038ae:	3201      	adds	r2, #1
  4038b0:	601a      	str	r2, [r3, #0]
				func_transmit(&rxByte, 1);
			}
		}

		/* Test the scrolling blue LED display */
		for (charCount = 0; charCount < 7; charCount++)
  4038b2:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
  4038b6:	3301      	adds	r3, #1
  4038b8:	f887 306a 	strb.w	r3, [r7, #106]	; 0x6a
  4038bc:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
  4038c0:	2b06      	cmp	r3, #6
  4038c2:	f67f af5f 	bls.w	403784 <main+0x234>
			putchar(temp);
		}
		
		/* Test the debug port */

		switch (displayState)
  4038c6:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
  4038ca:	2b08      	cmp	r3, #8
  4038cc:	d85a      	bhi.n	403984 <main+0x434>
  4038ce:	a201      	add	r2, pc, #4	; (adr r2, 4038d4 <main+0x384>)
  4038d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4038d4:	004038f9 	.word	0x004038f9
  4038d8:	00403909 	.word	0x00403909
  4038dc:	00403919 	.word	0x00403919
  4038e0:	0040392d 	.word	0x0040392d
  4038e4:	0040393d 	.word	0x0040393d
  4038e8:	0040394d 	.word	0x0040394d
  4038ec:	0040395b 	.word	0x0040395b
  4038f0:	00403969 	.word	0x00403969
  4038f4:	00403977 	.word	0x00403977
		{
			case IDX_READY:
				sprintf(txBuf, "Ready\r\n");
  4038f8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
  4038fc:	4a3f      	ldr	r2, [pc, #252]	; (4039fc <main+0x4ac>)
  4038fe:	e892 0003 	ldmia.w	r2, {r0, r1}
  403902:	e883 0003 	stmia.w	r3, {r0, r1}
				break;
  403906:	e03d      	b.n	403984 <main+0x434>
			case IDX_CLEAN:
				sprintf(txBuf, "Clean\r\n");
  403908:	f107 034c 	add.w	r3, r7, #76	; 0x4c
  40390c:	4a3c      	ldr	r2, [pc, #240]	; (403a00 <main+0x4b0>)
  40390e:	e892 0003 	ldmia.w	r2, {r0, r1}
  403912:	e883 0003 	stmia.w	r3, {r0, r1}
				break;
  403916:	e035      	b.n	403984 <main+0x434>
			case IDX_CLEANING:
				sprintf(txBuf, "Cleaning\r\n");
  403918:	4a3a      	ldr	r2, [pc, #232]	; (403a04 <main+0x4b4>)
  40391a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
  40391e:	ca07      	ldmia	r2, {r0, r1, r2}
  403920:	c303      	stmia	r3!, {r0, r1}
  403922:	801a      	strh	r2, [r3, #0]
  403924:	3302      	adds	r3, #2
  403926:	0c12      	lsrs	r2, r2, #16
  403928:	701a      	strb	r2, [r3, #0]
				break;
  40392a:	e02b      	b.n	403984 <main+0x434>
			case IDX_DIRTY:
				sprintf(txBuf, "Dirty\r\n");
  40392c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
  403930:	4a35      	ldr	r2, [pc, #212]	; (403a08 <main+0x4b8>)
  403932:	e892 0003 	ldmia.w	r2, {r0, r1}
  403936:	e883 0003 	stmia.w	r3, {r0, r1}
				break;
  40393a:	e023      	b.n	403984 <main+0x434>
			case IDX_ERROR:
				sprintf(txBuf, "Error\r\n");
  40393c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
  403940:	4a32      	ldr	r2, [pc, #200]	; (403a0c <main+0x4bc>)
  403942:	e892 0003 	ldmia.w	r2, {r0, r1}
  403946:	e883 0003 	stmia.w	r3, {r0, r1}
				break;
  40394a:	e01b      	b.n	403984 <main+0x434>
			case IDX_SHELF1:
				sprintf(txBuf, "Shelf1\r\n");
  40394c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
  403950:	4a2f      	ldr	r2, [pc, #188]	; (403a10 <main+0x4c0>)
  403952:	ca07      	ldmia	r2, {r0, r1, r2}
  403954:	c303      	stmia	r3!, {r0, r1}
  403956:	701a      	strb	r2, [r3, #0]
				break;
  403958:	e014      	b.n	403984 <main+0x434>
			case IDX_SHELF2:
				sprintf(txBuf, "Shelf2\r\n");
  40395a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
  40395e:	4a2d      	ldr	r2, [pc, #180]	; (403a14 <main+0x4c4>)
  403960:	ca07      	ldmia	r2, {r0, r1, r2}
  403962:	c303      	stmia	r3!, {r0, r1}
  403964:	701a      	strb	r2, [r3, #0]
				break;
  403966:	e00d      	b.n	403984 <main+0x434>
			case IDX_SHELF3:
				sprintf(txBuf, "Shelf3\r\n");
  403968:	f107 034c 	add.w	r3, r7, #76	; 0x4c
  40396c:	4a2a      	ldr	r2, [pc, #168]	; (403a18 <main+0x4c8>)
  40396e:	ca07      	ldmia	r2, {r0, r1, r2}
  403970:	c303      	stmia	r3!, {r0, r1}
  403972:	701a      	strb	r2, [r3, #0]
				break;
  403974:	e006      	b.n	403984 <main+0x434>
			case IDX_SHELF4:
				sprintf(txBuf, "Shelf4\r\n");
  403976:	f107 034c 	add.w	r3, r7, #76	; 0x4c
  40397a:	4a28      	ldr	r2, [pc, #160]	; (403a1c <main+0x4cc>)
  40397c:	ca07      	ldmia	r2, {r0, r1, r2}
  40397e:	c303      	stmia	r3!, {r0, r1}
  403980:	701a      	strb	r2, [r3, #0]
				break;
  403982:	bf00      	nop
		}
		
		func_transmit(txBuf, strlen(txBuf));
  403984:	f107 034c 	add.w	r3, r7, #76	; 0x4c
  403988:	4618      	mov	r0, r3
  40398a:	4b25      	ldr	r3, [pc, #148]	; (403a20 <main+0x4d0>)
  40398c:	4798      	blx	r3
  40398e:	4602      	mov	r2, r0
  403990:	f107 034c 	add.w	r3, r7, #76	; 0x4c
  403994:	4618      	mov	r0, r3
  403996:	4611      	mov	r1, r2
  403998:	4b22      	ldr	r3, [pc, #136]	; (403a24 <main+0x4d4>)
  40399a:	4798      	blx	r3


		if ((++displayState) > 8)
  40399c:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
  4039a0:	3301      	adds	r3, #1
  4039a2:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
  4039a6:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
  4039aa:	2b08      	cmp	r3, #8
  4039ac:	d902      	bls.n	4039b4 <main+0x464>
		{
			displayState = 0;
  4039ae:	2300      	movs	r3, #0
  4039b0:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
		
		/*
		 * Read Bluesense lines
		 */
		
		if ((is_conversion_done[0] == true) &&
  4039b4:	4b1c      	ldr	r3, [pc, #112]	; (403a28 <main+0x4d8>)
  4039b6:	781b      	ldrb	r3, [r3, #0]
  4039b8:	b2db      	uxtb	r3, r3
  4039ba:	2b00      	cmp	r3, #0
  4039bc:	d01a      	beq.n	4039f4 <main+0x4a4>
		    (is_conversion_done[1] == true) &&
  4039be:	4b1a      	ldr	r3, [pc, #104]	; (403a28 <main+0x4d8>)
  4039c0:	785b      	ldrb	r3, [r3, #1]
  4039c2:	b2db      	uxtb	r3, r3
		
		/*
		 * Read Bluesense lines
		 */
		
		if ((is_conversion_done[0] == true) &&
  4039c4:	2b00      	cmp	r3, #0
  4039c6:	d015      	beq.n	4039f4 <main+0x4a4>
		    (is_conversion_done[1] == true) &&
		    (is_conversion_done[2] == true) &&
  4039c8:	4b17      	ldr	r3, [pc, #92]	; (403a28 <main+0x4d8>)
  4039ca:	789b      	ldrb	r3, [r3, #2]
  4039cc:	b2db      	uxtb	r3, r3
		/*
		 * Read Bluesense lines
		 */
		
		if ((is_conversion_done[0] == true) &&
		    (is_conversion_done[1] == true) &&
  4039ce:	2b00      	cmp	r3, #0
  4039d0:	d010      	beq.n	4039f4 <main+0x4a4>
		    (is_conversion_done[2] == true) &&
		    (is_conversion_done[3] == true))
  4039d2:	4b15      	ldr	r3, [pc, #84]	; (403a28 <main+0x4d8>)
  4039d4:	78db      	ldrb	r3, [r3, #3]
  4039d6:	b2db      	uxtb	r3, r3
		 * Read Bluesense lines
		 */
		
		if ((is_conversion_done[0] == true) &&
		    (is_conversion_done[1] == true) &&
		    (is_conversion_done[2] == true) &&
  4039d8:	2b00      	cmp	r3, #0
  4039da:	d00b      	beq.n	4039f4 <main+0x4a4>
		    (is_conversion_done[3] == true))
		{
			read_adc(0);
  4039dc:	2000      	movs	r0, #0
  4039de:	4b13      	ldr	r3, [pc, #76]	; (403a2c <main+0x4dc>)
  4039e0:	4798      	blx	r3
			read_adc(1);
  4039e2:	2001      	movs	r0, #1
  4039e4:	4b11      	ldr	r3, [pc, #68]	; (403a2c <main+0x4dc>)
  4039e6:	4798      	blx	r3
			read_adc(2);
  4039e8:	2002      	movs	r0, #2
  4039ea:	4b10      	ldr	r3, [pc, #64]	; (403a2c <main+0x4dc>)
  4039ec:	4798      	blx	r3
			read_adc(3);
  4039ee:	2003      	movs	r0, #3
  4039f0:	4b0e      	ldr	r3, [pc, #56]	; (403a2c <main+0x4dc>)
  4039f2:	4798      	blx	r3
		}
		
	}//while
  4039f4:	e6a1      	b.n	40373a <main+0x1ea>
  4039f6:	bf00      	nop
  4039f8:	204004b0 	.word	0x204004b0
  4039fc:	0040932c 	.word	0x0040932c
  403a00:	00409334 	.word	0x00409334
  403a04:	0040937c 	.word	0x0040937c
  403a08:	0040933c 	.word	0x0040933c
  403a0c:	00409344 	.word	0x00409344
  403a10:	0040934c 	.word	0x0040934c
  403a14:	00409358 	.word	0x00409358
  403a18:	00409364 	.word	0x00409364
  403a1c:	00409370 	.word	0x00409370
  403a20:	00403ce9 	.word	0x00403ce9
  403a24:	00403285 	.word	0x00403285
  403a28:	2040099c 	.word	0x2040099c
  403a2c:	004034cd 	.word	0x004034cd

00403a30 <__libc_init_array>:
  403a30:	b570      	push	{r4, r5, r6, lr}
  403a32:	4e0f      	ldr	r6, [pc, #60]	; (403a70 <__libc_init_array+0x40>)
  403a34:	4d0f      	ldr	r5, [pc, #60]	; (403a74 <__libc_init_array+0x44>)
  403a36:	1b76      	subs	r6, r6, r5
  403a38:	10b6      	asrs	r6, r6, #2
  403a3a:	bf18      	it	ne
  403a3c:	2400      	movne	r4, #0
  403a3e:	d005      	beq.n	403a4c <__libc_init_array+0x1c>
  403a40:	3401      	adds	r4, #1
  403a42:	f855 3b04 	ldr.w	r3, [r5], #4
  403a46:	4798      	blx	r3
  403a48:	42a6      	cmp	r6, r4
  403a4a:	d1f9      	bne.n	403a40 <__libc_init_array+0x10>
  403a4c:	4e0a      	ldr	r6, [pc, #40]	; (403a78 <__libc_init_array+0x48>)
  403a4e:	f005 fdd7 	bl	409600 <_init>
  403a52:	4d0a      	ldr	r5, [pc, #40]	; (403a7c <__libc_init_array+0x4c>)
  403a54:	1b76      	subs	r6, r6, r5
  403a56:	10b6      	asrs	r6, r6, #2
  403a58:	bf18      	it	ne
  403a5a:	2400      	movne	r4, #0
  403a5c:	d006      	beq.n	403a6c <__libc_init_array+0x3c>
  403a5e:	3401      	adds	r4, #1
  403a60:	f855 3b04 	ldr.w	r3, [r5], #4
  403a64:	4798      	blx	r3
  403a66:	42a6      	cmp	r6, r4
  403a68:	d1f9      	bne.n	403a5e <__libc_init_array+0x2e>
  403a6a:	bd70      	pop	{r4, r5, r6, pc}
  403a6c:	bd70      	pop	{r4, r5, r6, pc}
  403a6e:	bf00      	nop
  403a70:	0040960c 	.word	0x0040960c
  403a74:	0040960c 	.word	0x0040960c
  403a78:	00409614 	.word	0x00409614
  403a7c:	0040960c 	.word	0x0040960c

00403a80 <memset>:
  403a80:	0783      	lsls	r3, r0, #30
  403a82:	b470      	push	{r4, r5, r6}
  403a84:	d049      	beq.n	403b1a <memset+0x9a>
  403a86:	1e54      	subs	r4, r2, #1
  403a88:	2a00      	cmp	r2, #0
  403a8a:	d044      	beq.n	403b16 <memset+0x96>
  403a8c:	b2cd      	uxtb	r5, r1
  403a8e:	4603      	mov	r3, r0
  403a90:	e002      	b.n	403a98 <memset+0x18>
  403a92:	2c00      	cmp	r4, #0
  403a94:	d03f      	beq.n	403b16 <memset+0x96>
  403a96:	4614      	mov	r4, r2
  403a98:	f803 5b01 	strb.w	r5, [r3], #1
  403a9c:	f013 0f03 	tst.w	r3, #3
  403aa0:	f104 32ff 	add.w	r2, r4, #4294967295
  403aa4:	d1f5      	bne.n	403a92 <memset+0x12>
  403aa6:	2c03      	cmp	r4, #3
  403aa8:	d92e      	bls.n	403b08 <memset+0x88>
  403aaa:	b2cd      	uxtb	r5, r1
  403aac:	2c0f      	cmp	r4, #15
  403aae:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  403ab2:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  403ab6:	d919      	bls.n	403aec <memset+0x6c>
  403ab8:	f103 0210 	add.w	r2, r3, #16
  403abc:	4626      	mov	r6, r4
  403abe:	3e10      	subs	r6, #16
  403ac0:	f842 5c10 	str.w	r5, [r2, #-16]
  403ac4:	f842 5c0c 	str.w	r5, [r2, #-12]
  403ac8:	3210      	adds	r2, #16
  403aca:	2e0f      	cmp	r6, #15
  403acc:	f842 5c18 	str.w	r5, [r2, #-24]
  403ad0:	f842 5c14 	str.w	r5, [r2, #-20]
  403ad4:	d8f3      	bhi.n	403abe <memset+0x3e>
  403ad6:	f1a4 0210 	sub.w	r2, r4, #16
  403ada:	f004 040f 	and.w	r4, r4, #15
  403ade:	f022 020f 	bic.w	r2, r2, #15
  403ae2:	2c03      	cmp	r4, #3
  403ae4:	f102 0210 	add.w	r2, r2, #16
  403ae8:	4413      	add	r3, r2
  403aea:	d90d      	bls.n	403b08 <memset+0x88>
  403aec:	461e      	mov	r6, r3
  403aee:	4622      	mov	r2, r4
  403af0:	3a04      	subs	r2, #4
  403af2:	f846 5b04 	str.w	r5, [r6], #4
  403af6:	2a03      	cmp	r2, #3
  403af8:	d8fa      	bhi.n	403af0 <memset+0x70>
  403afa:	1f22      	subs	r2, r4, #4
  403afc:	f004 0403 	and.w	r4, r4, #3
  403b00:	f022 0203 	bic.w	r2, r2, #3
  403b04:	3204      	adds	r2, #4
  403b06:	4413      	add	r3, r2
  403b08:	b12c      	cbz	r4, 403b16 <memset+0x96>
  403b0a:	b2c9      	uxtb	r1, r1
  403b0c:	441c      	add	r4, r3
  403b0e:	f803 1b01 	strb.w	r1, [r3], #1
  403b12:	42a3      	cmp	r3, r4
  403b14:	d1fb      	bne.n	403b0e <memset+0x8e>
  403b16:	bc70      	pop	{r4, r5, r6}
  403b18:	4770      	bx	lr
  403b1a:	4614      	mov	r4, r2
  403b1c:	4603      	mov	r3, r0
  403b1e:	e7c2      	b.n	403aa6 <memset+0x26>

00403b20 <_puts_r>:
  403b20:	b5f0      	push	{r4, r5, r6, r7, lr}
  403b22:	4604      	mov	r4, r0
  403b24:	b089      	sub	sp, #36	; 0x24
  403b26:	4608      	mov	r0, r1
  403b28:	460d      	mov	r5, r1
  403b2a:	f000 f8dd 	bl	403ce8 <strlen>
  403b2e:	68a3      	ldr	r3, [r4, #8]
  403b30:	2701      	movs	r7, #1
  403b32:	2102      	movs	r1, #2
  403b34:	899a      	ldrh	r2, [r3, #12]
  403b36:	ae04      	add	r6, sp, #16
  403b38:	eb00 0c07 	add.w	ip, r0, r7
  403b3c:	f8df e03c 	ldr.w	lr, [pc, #60]	; 403b7c <_puts_r+0x5c>
  403b40:	9102      	str	r1, [sp, #8]
  403b42:	0491      	lsls	r1, r2, #18
  403b44:	9504      	str	r5, [sp, #16]
  403b46:	9005      	str	r0, [sp, #20]
  403b48:	f8cd c00c 	str.w	ip, [sp, #12]
  403b4c:	f8cd e018 	str.w	lr, [sp, #24]
  403b50:	9707      	str	r7, [sp, #28]
  403b52:	9601      	str	r6, [sp, #4]
  403b54:	d406      	bmi.n	403b64 <_puts_r+0x44>
  403b56:	6e59      	ldr	r1, [r3, #100]	; 0x64
  403b58:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  403b5c:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  403b60:	819a      	strh	r2, [r3, #12]
  403b62:	6659      	str	r1, [r3, #100]	; 0x64
  403b64:	4620      	mov	r0, r4
  403b66:	4619      	mov	r1, r3
  403b68:	aa01      	add	r2, sp, #4
  403b6a:	f002 fed1 	bl	406910 <__sfvwrite_r>
  403b6e:	2800      	cmp	r0, #0
  403b70:	bf14      	ite	ne
  403b72:	f04f 30ff 	movne.w	r0, #4294967295
  403b76:	200a      	moveq	r0, #10
  403b78:	b009      	add	sp, #36	; 0x24
  403b7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  403b7c:	0040947c 	.word	0x0040947c

00403b80 <puts>:
  403b80:	4b02      	ldr	r3, [pc, #8]	; (403b8c <puts+0xc>)
  403b82:	4601      	mov	r1, r0
  403b84:	6818      	ldr	r0, [r3, #0]
  403b86:	f7ff bfcb 	b.w	403b20 <_puts_r>
  403b8a:	bf00      	nop
  403b8c:	204004b0 	.word	0x204004b0

00403b90 <setbuf>:
  403b90:	2900      	cmp	r1, #0
  403b92:	f44f 6380 	mov.w	r3, #1024	; 0x400
  403b96:	bf0c      	ite	eq
  403b98:	2202      	moveq	r2, #2
  403b9a:	2200      	movne	r2, #0
  403b9c:	f000 b800 	b.w	403ba0 <setvbuf>

00403ba0 <setvbuf>:
  403ba0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  403ba4:	4e3b      	ldr	r6, [pc, #236]	; (403c94 <setvbuf+0xf4>)
  403ba6:	4604      	mov	r4, r0
  403ba8:	460d      	mov	r5, r1
  403baa:	4690      	mov	r8, r2
  403bac:	6837      	ldr	r7, [r6, #0]
  403bae:	461e      	mov	r6, r3
  403bb0:	b117      	cbz	r7, 403bb8 <setvbuf+0x18>
  403bb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
  403bb4:	2b00      	cmp	r3, #0
  403bb6:	d03f      	beq.n	403c38 <setvbuf+0x98>
  403bb8:	f1b8 0f02 	cmp.w	r8, #2
  403bbc:	d832      	bhi.n	403c24 <setvbuf+0x84>
  403bbe:	ea5f 79d6 	movs.w	r9, r6, lsr #31
  403bc2:	d12f      	bne.n	403c24 <setvbuf+0x84>
  403bc4:	4621      	mov	r1, r4
  403bc6:	4638      	mov	r0, r7
  403bc8:	f002 fcc2 	bl	406550 <_fflush_r>
  403bcc:	89a1      	ldrh	r1, [r4, #12]
  403bce:	f8c4 9004 	str.w	r9, [r4, #4]
  403bd2:	060b      	lsls	r3, r1, #24
  403bd4:	f8c4 9018 	str.w	r9, [r4, #24]
  403bd8:	d428      	bmi.n	403c2c <setvbuf+0x8c>
  403bda:	f021 0183 	bic.w	r1, r1, #131	; 0x83
  403bde:	f1b8 0f02 	cmp.w	r8, #2
  403be2:	b289      	uxth	r1, r1
  403be4:	81a1      	strh	r1, [r4, #12]
  403be6:	d02b      	beq.n	403c40 <setvbuf+0xa0>
  403be8:	2d00      	cmp	r5, #0
  403bea:	d037      	beq.n	403c5c <setvbuf+0xbc>
  403bec:	f1b8 0f01 	cmp.w	r8, #1
  403bf0:	d012      	beq.n	403c18 <setvbuf+0x78>
  403bf2:	b289      	uxth	r1, r1
  403bf4:	4b28      	ldr	r3, [pc, #160]	; (403c98 <setvbuf+0xf8>)
  403bf6:	f001 0008 	and.w	r0, r1, #8
  403bfa:	63fb      	str	r3, [r7, #60]	; 0x3c
  403bfc:	6025      	str	r5, [r4, #0]
  403bfe:	b280      	uxth	r0, r0
  403c00:	6125      	str	r5, [r4, #16]
  403c02:	6166      	str	r6, [r4, #20]
  403c04:	b180      	cbz	r0, 403c28 <setvbuf+0x88>
  403c06:	f011 0f03 	tst.w	r1, #3
  403c0a:	f04f 0000 	mov.w	r0, #0
  403c0e:	bf18      	it	ne
  403c10:	4606      	movne	r6, r0
  403c12:	60a6      	str	r6, [r4, #8]
  403c14:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  403c18:	f041 0101 	orr.w	r1, r1, #1
  403c1c:	4273      	negs	r3, r6
  403c1e:	81a1      	strh	r1, [r4, #12]
  403c20:	61a3      	str	r3, [r4, #24]
  403c22:	e7e6      	b.n	403bf2 <setvbuf+0x52>
  403c24:	f04f 30ff 	mov.w	r0, #4294967295
  403c28:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  403c2c:	6921      	ldr	r1, [r4, #16]
  403c2e:	4638      	mov	r0, r7
  403c30:	f002 fd96 	bl	406760 <_free_r>
  403c34:	89a1      	ldrh	r1, [r4, #12]
  403c36:	e7d0      	b.n	403bda <setvbuf+0x3a>
  403c38:	4638      	mov	r0, r7
  403c3a:	f002 fd23 	bl	406684 <__sinit>
  403c3e:	e7bb      	b.n	403bb8 <setvbuf+0x18>
  403c40:	2000      	movs	r0, #0
  403c42:	f104 0343 	add.w	r3, r4, #67	; 0x43
  403c46:	f041 0102 	orr.w	r1, r1, #2
  403c4a:	2500      	movs	r5, #0
  403c4c:	2201      	movs	r2, #1
  403c4e:	81a1      	strh	r1, [r4, #12]
  403c50:	60a5      	str	r5, [r4, #8]
  403c52:	6023      	str	r3, [r4, #0]
  403c54:	6123      	str	r3, [r4, #16]
  403c56:	6162      	str	r2, [r4, #20]
  403c58:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  403c5c:	2e00      	cmp	r6, #0
  403c5e:	bf08      	it	eq
  403c60:	f44f 6680 	moveq.w	r6, #1024	; 0x400
  403c64:	4630      	mov	r0, r6
  403c66:	f003 f883 	bl	406d70 <malloc>
  403c6a:	4605      	mov	r5, r0
  403c6c:	b128      	cbz	r0, 403c7a <setvbuf+0xda>
  403c6e:	89a1      	ldrh	r1, [r4, #12]
  403c70:	f041 0180 	orr.w	r1, r1, #128	; 0x80
  403c74:	b289      	uxth	r1, r1
  403c76:	81a1      	strh	r1, [r4, #12]
  403c78:	e7b8      	b.n	403bec <setvbuf+0x4c>
  403c7a:	f44f 6080 	mov.w	r0, #1024	; 0x400
  403c7e:	f003 f877 	bl	406d70 <malloc>
  403c82:	4605      	mov	r5, r0
  403c84:	b918      	cbnz	r0, 403c8e <setvbuf+0xee>
  403c86:	89a1      	ldrh	r1, [r4, #12]
  403c88:	f04f 30ff 	mov.w	r0, #4294967295
  403c8c:	e7d9      	b.n	403c42 <setvbuf+0xa2>
  403c8e:	f44f 6680 	mov.w	r6, #1024	; 0x400
  403c92:	e7ec      	b.n	403c6e <setvbuf+0xce>
  403c94:	204004b0 	.word	0x204004b0
  403c98:	0040657d 	.word	0x0040657d

00403c9c <sprintf>:
  403c9c:	b40e      	push	{r1, r2, r3}
  403c9e:	b5f0      	push	{r4, r5, r6, r7, lr}
  403ca0:	b09c      	sub	sp, #112	; 0x70
  403ca2:	4b10      	ldr	r3, [pc, #64]	; (403ce4 <sprintf+0x48>)
  403ca4:	4606      	mov	r6, r0
  403ca6:	f44f 7e02 	mov.w	lr, #520	; 0x208
  403caa:	ac21      	add	r4, sp, #132	; 0x84
  403cac:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
  403cb0:	f64f 77ff 	movw	r7, #65535	; 0xffff
  403cb4:	6818      	ldr	r0, [r3, #0]
  403cb6:	f854 2b04 	ldr.w	r2, [r4], #4
  403cba:	a902      	add	r1, sp, #8
  403cbc:	9602      	str	r6, [sp, #8]
  403cbe:	4623      	mov	r3, r4
  403cc0:	9606      	str	r6, [sp, #24]
  403cc2:	9401      	str	r4, [sp, #4]
  403cc4:	f8ad e014 	strh.w	lr, [sp, #20]
  403cc8:	9504      	str	r5, [sp, #16]
  403cca:	9507      	str	r5, [sp, #28]
  403ccc:	f8ad 7016 	strh.w	r7, [sp, #22]
  403cd0:	f000 f838 	bl	403d44 <_svfprintf_r>
  403cd4:	9b02      	ldr	r3, [sp, #8]
  403cd6:	2200      	movs	r2, #0
  403cd8:	701a      	strb	r2, [r3, #0]
  403cda:	b01c      	add	sp, #112	; 0x70
  403cdc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  403ce0:	b003      	add	sp, #12
  403ce2:	4770      	bx	lr
  403ce4:	204004b0 	.word	0x204004b0

00403ce8 <strlen>:
  403ce8:	f020 0103 	bic.w	r1, r0, #3
  403cec:	f010 0003 	ands.w	r0, r0, #3
  403cf0:	f1c0 0000 	rsb	r0, r0, #0
  403cf4:	f851 3b04 	ldr.w	r3, [r1], #4
  403cf8:	f100 0c04 	add.w	ip, r0, #4
  403cfc:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
  403d00:	f06f 0200 	mvn.w	r2, #0
  403d04:	bf1c      	itt	ne
  403d06:	fa22 f20c 	lsrne.w	r2, r2, ip
  403d0a:	4313      	orrne	r3, r2
  403d0c:	f04f 0c01 	mov.w	ip, #1
  403d10:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
  403d14:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
  403d18:	eba3 020c 	sub.w	r2, r3, ip
  403d1c:	ea22 0203 	bic.w	r2, r2, r3
  403d20:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
  403d24:	bf04      	itt	eq
  403d26:	f851 3b04 	ldreq.w	r3, [r1], #4
  403d2a:	3004      	addeq	r0, #4
  403d2c:	d0f4      	beq.n	403d18 <strlen+0x30>
  403d2e:	f1c2 0100 	rsb	r1, r2, #0
  403d32:	ea02 0201 	and.w	r2, r2, r1
  403d36:	fab2 f282 	clz	r2, r2
  403d3a:	f1c2 021f 	rsb	r2, r2, #31
  403d3e:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  403d42:	4770      	bx	lr

00403d44 <_svfprintf_r>:
  403d44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403d48:	b0c1      	sub	sp, #260	; 0x104
  403d4a:	4689      	mov	r9, r1
  403d4c:	9208      	str	r2, [sp, #32]
  403d4e:	930c      	str	r3, [sp, #48]	; 0x30
  403d50:	9009      	str	r0, [sp, #36]	; 0x24
  403d52:	f002 ff97 	bl	406c84 <_localeconv_r>
  403d56:	6803      	ldr	r3, [r0, #0]
  403d58:	4618      	mov	r0, r3
  403d5a:	9316      	str	r3, [sp, #88]	; 0x58
  403d5c:	f7ff ffc4 	bl	403ce8 <strlen>
  403d60:	f8b9 300c 	ldrh.w	r3, [r9, #12]
  403d64:	9017      	str	r0, [sp, #92]	; 0x5c
  403d66:	061d      	lsls	r5, r3, #24
  403d68:	d504      	bpl.n	403d74 <_svfprintf_r+0x30>
  403d6a:	f8d9 3010 	ldr.w	r3, [r9, #16]
  403d6e:	2b00      	cmp	r3, #0
  403d70:	f001 8080 	beq.w	404e74 <_svfprintf_r+0x1130>
  403d74:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  403d78:	2300      	movs	r3, #0
  403d7a:	46c3      	mov	fp, r8
  403d7c:	9313      	str	r3, [sp, #76]	; 0x4c
  403d7e:	9314      	str	r3, [sp, #80]	; 0x50
  403d80:	9312      	str	r3, [sp, #72]	; 0x48
  403d82:	9315      	str	r3, [sp, #84]	; 0x54
  403d84:	9319      	str	r3, [sp, #100]	; 0x64
  403d86:	930a      	str	r3, [sp, #40]	; 0x28
  403d88:	9325      	str	r3, [sp, #148]	; 0x94
  403d8a:	9324      	str	r3, [sp, #144]	; 0x90
  403d8c:	f8cd 808c 	str.w	r8, [sp, #140]	; 0x8c
  403d90:	9a08      	ldr	r2, [sp, #32]
  403d92:	7813      	ldrb	r3, [r2, #0]
  403d94:	2b25      	cmp	r3, #37	; 0x25
  403d96:	f000 80a6 	beq.w	403ee6 <_svfprintf_r+0x1a2>
  403d9a:	b90b      	cbnz	r3, 403da0 <_svfprintf_r+0x5c>
  403d9c:	e0a3      	b.n	403ee6 <_svfprintf_r+0x1a2>
  403d9e:	b11b      	cbz	r3, 403da8 <_svfprintf_r+0x64>
  403da0:	f812 3f01 	ldrb.w	r3, [r2, #1]!
  403da4:	2b25      	cmp	r3, #37	; 0x25
  403da6:	d1fa      	bne.n	403d9e <_svfprintf_r+0x5a>
  403da8:	9908      	ldr	r1, [sp, #32]
  403daa:	4614      	mov	r4, r2
  403dac:	1a55      	subs	r5, r2, r1
  403dae:	d010      	beq.n	403dd2 <_svfprintf_r+0x8e>
  403db0:	9b24      	ldr	r3, [sp, #144]	; 0x90
  403db2:	9a25      	ldr	r2, [sp, #148]	; 0x94
  403db4:	3301      	adds	r3, #1
  403db6:	f8cb 1000 	str.w	r1, [fp]
  403dba:	442a      	add	r2, r5
  403dbc:	f8cb 5004 	str.w	r5, [fp, #4]
  403dc0:	2b07      	cmp	r3, #7
  403dc2:	9324      	str	r3, [sp, #144]	; 0x90
  403dc4:	9225      	str	r2, [sp, #148]	; 0x94
  403dc6:	dc73      	bgt.n	403eb0 <_svfprintf_r+0x16c>
  403dc8:	f10b 0b08 	add.w	fp, fp, #8
  403dcc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  403dce:	442b      	add	r3, r5
  403dd0:	930a      	str	r3, [sp, #40]	; 0x28
  403dd2:	7823      	ldrb	r3, [r4, #0]
  403dd4:	2b00      	cmp	r3, #0
  403dd6:	d073      	beq.n	403ec0 <_svfprintf_r+0x17c>
  403dd8:	2300      	movs	r3, #0
  403dda:	f04f 3cff 	mov.w	ip, #4294967295
  403dde:	1c61      	adds	r1, r4, #1
  403de0:	7866      	ldrb	r6, [r4, #1]
  403de2:	461a      	mov	r2, r3
  403de4:	4664      	mov	r4, ip
  403de6:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  403dea:	930b      	str	r3, [sp, #44]	; 0x2c
  403dec:	9306      	str	r3, [sp, #24]
  403dee:	1c4b      	adds	r3, r1, #1
  403df0:	f1a6 0120 	sub.w	r1, r6, #32
  403df4:	2958      	cmp	r1, #88	; 0x58
  403df6:	f200 83b2 	bhi.w	40455e <_svfprintf_r+0x81a>
  403dfa:	e8df f011 	tbh	[pc, r1, lsl #1]
  403dfe:	0319      	.short	0x0319
  403e00:	03b003b0 	.word	0x03b003b0
  403e04:	03b00320 	.word	0x03b00320
  403e08:	03b003b0 	.word	0x03b003b0
  403e0c:	03b003b0 	.word	0x03b003b0
  403e10:	024003b0 	.word	0x024003b0
  403e14:	03b001fb 	.word	0x03b001fb
  403e18:	01ff01e2 	.word	0x01ff01e2
  403e1c:	032703b0 	.word	0x032703b0
  403e20:	032e032e 	.word	0x032e032e
  403e24:	032e032e 	.word	0x032e032e
  403e28:	032e032e 	.word	0x032e032e
  403e2c:	032e032e 	.word	0x032e032e
  403e30:	03b0032e 	.word	0x03b0032e
  403e34:	03b003b0 	.word	0x03b003b0
  403e38:	03b003b0 	.word	0x03b003b0
  403e3c:	03b003b0 	.word	0x03b003b0
  403e40:	03b003b0 	.word	0x03b003b0
  403e44:	033d03b0 	.word	0x033d03b0
  403e48:	03b00365 	.word	0x03b00365
  403e4c:	03b00365 	.word	0x03b00365
  403e50:	03b003b0 	.word	0x03b003b0
  403e54:	02fe03b0 	.word	0x02fe03b0
  403e58:	03b003b0 	.word	0x03b003b0
  403e5c:	03b00293 	.word	0x03b00293
  403e60:	03b003b0 	.word	0x03b003b0
  403e64:	03b003b0 	.word	0x03b003b0
  403e68:	03b002b0 	.word	0x03b002b0
  403e6c:	02c603b0 	.word	0x02c603b0
  403e70:	03b003b0 	.word	0x03b003b0
  403e74:	03b003b0 	.word	0x03b003b0
  403e78:	03b003b0 	.word	0x03b003b0
  403e7c:	03b003b0 	.word	0x03b003b0
  403e80:	03b003b0 	.word	0x03b003b0
  403e84:	021802eb 	.word	0x021802eb
  403e88:	03650365 	.word	0x03650365
  403e8c:	024e0365 	.word	0x024e0365
  403e90:	03b00218 	.word	0x03b00218
  403e94:	023603b0 	.word	0x023603b0
  403e98:	026003b0 	.word	0x026003b0
  403e9c:	039901e9 	.word	0x039901e9
  403ea0:	03b00259 	.word	0x03b00259
  403ea4:	03b00272 	.word	0x03b00272
  403ea8:	03b00076 	.word	0x03b00076
  403eac:	030503b0 	.word	0x030503b0
  403eb0:	9809      	ldr	r0, [sp, #36]	; 0x24
  403eb2:	4649      	mov	r1, r9
  403eb4:	aa23      	add	r2, sp, #140	; 0x8c
  403eb6:	f004 f8d3 	bl	408060 <__ssprint_r>
  403eba:	b940      	cbnz	r0, 403ece <_svfprintf_r+0x18a>
  403ebc:	46c3      	mov	fp, r8
  403ebe:	e785      	b.n	403dcc <_svfprintf_r+0x88>
  403ec0:	9b25      	ldr	r3, [sp, #148]	; 0x94
  403ec2:	b123      	cbz	r3, 403ece <_svfprintf_r+0x18a>
  403ec4:	9809      	ldr	r0, [sp, #36]	; 0x24
  403ec6:	4649      	mov	r1, r9
  403ec8:	aa23      	add	r2, sp, #140	; 0x8c
  403eca:	f004 f8c9 	bl	408060 <__ssprint_r>
  403ece:	f8b9 300c 	ldrh.w	r3, [r9, #12]
  403ed2:	f013 0f40 	tst.w	r3, #64	; 0x40
  403ed6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  403ed8:	bf18      	it	ne
  403eda:	f04f 33ff 	movne.w	r3, #4294967295
  403ede:	4618      	mov	r0, r3
  403ee0:	b041      	add	sp, #260	; 0x104
  403ee2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403ee6:	9c08      	ldr	r4, [sp, #32]
  403ee8:	e773      	b.n	403dd2 <_svfprintf_r+0x8e>
  403eea:	9308      	str	r3, [sp, #32]
  403eec:	46a4      	mov	ip, r4
  403eee:	9b06      	ldr	r3, [sp, #24]
  403ef0:	0698      	lsls	r0, r3, #26
  403ef2:	f140 823e 	bpl.w	404372 <_svfprintf_r+0x62e>
  403ef6:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  403ef8:	2301      	movs	r3, #1
  403efa:	3707      	adds	r7, #7
  403efc:	f027 0207 	bic.w	r2, r7, #7
  403f00:	f102 0108 	add.w	r1, r2, #8
  403f04:	e9d2 4500 	ldrd	r4, r5, [r2]
  403f08:	910c      	str	r1, [sp, #48]	; 0x30
  403f0a:	2200      	movs	r2, #0
  403f0c:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
  403f10:	4617      	mov	r7, r2
  403f12:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
  403f16:	f1bc 0f00 	cmp.w	ip, #0
  403f1a:	db03      	blt.n	403f24 <_svfprintf_r+0x1e0>
  403f1c:	9a06      	ldr	r2, [sp, #24]
  403f1e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
  403f22:	9206      	str	r2, [sp, #24]
  403f24:	f1bc 0f00 	cmp.w	ip, #0
  403f28:	f040 83ac 	bne.w	404684 <_svfprintf_r+0x940>
  403f2c:	ea54 0205 	orrs.w	r2, r4, r5
  403f30:	bf14      	ite	ne
  403f32:	2201      	movne	r2, #1
  403f34:	2200      	moveq	r2, #0
  403f36:	2a00      	cmp	r2, #0
  403f38:	f040 83a4 	bne.w	404684 <_svfprintf_r+0x940>
  403f3c:	2b00      	cmp	r3, #0
  403f3e:	f040 8460 	bne.w	404802 <_svfprintf_r+0xabe>
  403f42:	9a06      	ldr	r2, [sp, #24]
  403f44:	07d2      	lsls	r2, r2, #31
  403f46:	f140 84fd 	bpl.w	404944 <_svfprintf_r+0xc00>
  403f4a:	f50d 7a80 	add.w	sl, sp, #256	; 0x100
  403f4e:	2330      	movs	r3, #48	; 0x30
  403f50:	f80a 3d41 	strb.w	r3, [sl, #-65]!
  403f54:	ebca 0408 	rsb	r4, sl, r8
  403f58:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
  403f5c:	45a4      	cmp	ip, r4
  403f5e:	4663      	mov	r3, ip
  403f60:	bfb8      	it	lt
  403f62:	4623      	movlt	r3, r4
  403f64:	9307      	str	r3, [sp, #28]
  403f66:	2300      	movs	r3, #0
  403f68:	9311      	str	r3, [sp, #68]	; 0x44
  403f6a:	b117      	cbz	r7, 403f72 <_svfprintf_r+0x22e>
  403f6c:	9b07      	ldr	r3, [sp, #28]
  403f6e:	3301      	adds	r3, #1
  403f70:	9307      	str	r3, [sp, #28]
  403f72:	9b06      	ldr	r3, [sp, #24]
  403f74:	f013 0302 	ands.w	r3, r3, #2
  403f78:	930d      	str	r3, [sp, #52]	; 0x34
  403f7a:	d002      	beq.n	403f82 <_svfprintf_r+0x23e>
  403f7c:	9b07      	ldr	r3, [sp, #28]
  403f7e:	3302      	adds	r3, #2
  403f80:	9307      	str	r3, [sp, #28]
  403f82:	9b06      	ldr	r3, [sp, #24]
  403f84:	f013 0384 	ands.w	r3, r3, #132	; 0x84
  403f88:	930e      	str	r3, [sp, #56]	; 0x38
  403f8a:	f040 8307 	bne.w	40459c <_svfprintf_r+0x858>
  403f8e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  403f90:	9a07      	ldr	r2, [sp, #28]
  403f92:	ebc2 0a03 	rsb	sl, r2, r3
  403f96:	f1ba 0f00 	cmp.w	sl, #0
  403f9a:	f340 82ff 	ble.w	40459c <_svfprintf_r+0x858>
  403f9e:	f1ba 0f10 	cmp.w	sl, #16
  403fa2:	9925      	ldr	r1, [sp, #148]	; 0x94
  403fa4:	f340 87dd 	ble.w	404f62 <_svfprintf_r+0x121e>
  403fa8:	4fbf      	ldr	r7, [pc, #764]	; (4042a8 <_svfprintf_r+0x564>)
  403faa:	2510      	movs	r5, #16
  403fac:	9618      	str	r6, [sp, #96]	; 0x60
  403fae:	9a24      	ldr	r2, [sp, #144]	; 0x90
  403fb0:	463e      	mov	r6, r7
  403fb2:	4627      	mov	r7, r4
  403fb4:	9c09      	ldr	r4, [sp, #36]	; 0x24
  403fb6:	e004      	b.n	403fc2 <_svfprintf_r+0x27e>
  403fb8:	f1aa 0a10 	sub.w	sl, sl, #16
  403fbc:	f1ba 0f10 	cmp.w	sl, #16
  403fc0:	dd1b      	ble.n	403ffa <_svfprintf_r+0x2b6>
  403fc2:	3201      	adds	r2, #1
  403fc4:	3110      	adds	r1, #16
  403fc6:	f8cb 6000 	str.w	r6, [fp]
  403fca:	f10b 0b08 	add.w	fp, fp, #8
  403fce:	2a07      	cmp	r2, #7
  403fd0:	f84b 5c04 	str.w	r5, [fp, #-4]
  403fd4:	9125      	str	r1, [sp, #148]	; 0x94
  403fd6:	9224      	str	r2, [sp, #144]	; 0x90
  403fd8:	ddee      	ble.n	403fb8 <_svfprintf_r+0x274>
  403fda:	4620      	mov	r0, r4
  403fdc:	4649      	mov	r1, r9
  403fde:	aa23      	add	r2, sp, #140	; 0x8c
  403fe0:	46c3      	mov	fp, r8
  403fe2:	f004 f83d 	bl	408060 <__ssprint_r>
  403fe6:	2800      	cmp	r0, #0
  403fe8:	f47f af71 	bne.w	403ece <_svfprintf_r+0x18a>
  403fec:	f1aa 0a10 	sub.w	sl, sl, #16
  403ff0:	9925      	ldr	r1, [sp, #148]	; 0x94
  403ff2:	9a24      	ldr	r2, [sp, #144]	; 0x90
  403ff4:	f1ba 0f10 	cmp.w	sl, #16
  403ff8:	dce3      	bgt.n	403fc2 <_svfprintf_r+0x27e>
  403ffa:	463c      	mov	r4, r7
  403ffc:	4637      	mov	r7, r6
  403ffe:	9e18      	ldr	r6, [sp, #96]	; 0x60
  404000:	3201      	adds	r2, #1
  404002:	eb0a 0c01 	add.w	ip, sl, r1
  404006:	f8cb 7000 	str.w	r7, [fp]
  40400a:	2a07      	cmp	r2, #7
  40400c:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
  404010:	9224      	str	r2, [sp, #144]	; 0x90
  404012:	f8cb a004 	str.w	sl, [fp, #4]
  404016:	f300 82b6 	bgt.w	404586 <_svfprintf_r+0x842>
  40401a:	f10b 0b08 	add.w	fp, fp, #8
  40401e:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  404022:	b197      	cbz	r7, 40404a <_svfprintf_r+0x306>
  404024:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404026:	2201      	movs	r2, #1
  404028:	f10c 0c01 	add.w	ip, ip, #1
  40402c:	f10d 016f 	add.w	r1, sp, #111	; 0x6f
  404030:	4413      	add	r3, r2
  404032:	f8cb 2004 	str.w	r2, [fp, #4]
  404036:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
  40403a:	2b07      	cmp	r3, #7
  40403c:	f8cb 1000 	str.w	r1, [fp]
  404040:	9324      	str	r3, [sp, #144]	; 0x90
  404042:	f300 83fb 	bgt.w	40483c <_svfprintf_r+0xaf8>
  404046:	f10b 0b08 	add.w	fp, fp, #8
  40404a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40404c:	b18b      	cbz	r3, 404072 <_svfprintf_r+0x32e>
  40404e:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404050:	f10c 0c02 	add.w	ip, ip, #2
  404054:	a91c      	add	r1, sp, #112	; 0x70
  404056:	2202      	movs	r2, #2
  404058:	3301      	adds	r3, #1
  40405a:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
  40405e:	f8cb 1000 	str.w	r1, [fp]
  404062:	2b07      	cmp	r3, #7
  404064:	9324      	str	r3, [sp, #144]	; 0x90
  404066:	f8cb 2004 	str.w	r2, [fp, #4]
  40406a:	f300 83db 	bgt.w	404824 <_svfprintf_r+0xae0>
  40406e:	f10b 0b08 	add.w	fp, fp, #8
  404072:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  404074:	2b80      	cmp	r3, #128	; 0x80
  404076:	f000 8321 	beq.w	4046bc <_svfprintf_r+0x978>
  40407a:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40407c:	1b1f      	subs	r7, r3, r4
  40407e:	2f00      	cmp	r7, #0
  404080:	dd37      	ble.n	4040f2 <_svfprintf_r+0x3ae>
  404082:	2f10      	cmp	r7, #16
  404084:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404086:	f340 85ec 	ble.w	404c62 <_svfprintf_r+0xf1e>
  40408a:	940d      	str	r4, [sp, #52]	; 0x34
  40408c:	f04f 0a10 	mov.w	sl, #16
  404090:	4d86      	ldr	r5, [pc, #536]	; (4042ac <_svfprintf_r+0x568>)
  404092:	4662      	mov	r2, ip
  404094:	9c09      	ldr	r4, [sp, #36]	; 0x24
  404096:	e002      	b.n	40409e <_svfprintf_r+0x35a>
  404098:	3f10      	subs	r7, #16
  40409a:	2f10      	cmp	r7, #16
  40409c:	dd19      	ble.n	4040d2 <_svfprintf_r+0x38e>
  40409e:	3301      	adds	r3, #1
  4040a0:	3210      	adds	r2, #16
  4040a2:	f8cb 5000 	str.w	r5, [fp]
  4040a6:	f10b 0b08 	add.w	fp, fp, #8
  4040aa:	2b07      	cmp	r3, #7
  4040ac:	f84b ac04 	str.w	sl, [fp, #-4]
  4040b0:	9225      	str	r2, [sp, #148]	; 0x94
  4040b2:	9324      	str	r3, [sp, #144]	; 0x90
  4040b4:	ddf0      	ble.n	404098 <_svfprintf_r+0x354>
  4040b6:	4620      	mov	r0, r4
  4040b8:	4649      	mov	r1, r9
  4040ba:	aa23      	add	r2, sp, #140	; 0x8c
  4040bc:	46c3      	mov	fp, r8
  4040be:	f003 ffcf 	bl	408060 <__ssprint_r>
  4040c2:	2800      	cmp	r0, #0
  4040c4:	f47f af03 	bne.w	403ece <_svfprintf_r+0x18a>
  4040c8:	3f10      	subs	r7, #16
  4040ca:	9a25      	ldr	r2, [sp, #148]	; 0x94
  4040cc:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4040ce:	2f10      	cmp	r7, #16
  4040d0:	dce5      	bgt.n	40409e <_svfprintf_r+0x35a>
  4040d2:	9c0d      	ldr	r4, [sp, #52]	; 0x34
  4040d4:	4694      	mov	ip, r2
  4040d6:	3301      	adds	r3, #1
  4040d8:	44bc      	add	ip, r7
  4040da:	f8cb 5000 	str.w	r5, [fp]
  4040de:	2b07      	cmp	r3, #7
  4040e0:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
  4040e4:	9324      	str	r3, [sp, #144]	; 0x90
  4040e6:	f8cb 7004 	str.w	r7, [fp, #4]
  4040ea:	f300 838f 	bgt.w	40480c <_svfprintf_r+0xac8>
  4040ee:	f10b 0b08 	add.w	fp, fp, #8
  4040f2:	9b06      	ldr	r3, [sp, #24]
  4040f4:	05df      	lsls	r7, r3, #23
  4040f6:	f100 8254 	bmi.w	4045a2 <_svfprintf_r+0x85e>
  4040fa:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4040fc:	44a4      	add	ip, r4
  4040fe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  404100:	3301      	adds	r3, #1
  404102:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
  404106:	f8cb 2000 	str.w	r2, [fp]
  40410a:	2b07      	cmp	r3, #7
  40410c:	f8cb 4004 	str.w	r4, [fp, #4]
  404110:	9324      	str	r3, [sp, #144]	; 0x90
  404112:	f300 8360 	bgt.w	4047d6 <_svfprintf_r+0xa92>
  404116:	f10b 0b08 	add.w	fp, fp, #8
  40411a:	9b06      	ldr	r3, [sp, #24]
  40411c:	075a      	lsls	r2, r3, #29
  40411e:	d540      	bpl.n	4041a2 <_svfprintf_r+0x45e>
  404120:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  404122:	9a07      	ldr	r2, [sp, #28]
  404124:	1a9c      	subs	r4, r3, r2
  404126:	2c00      	cmp	r4, #0
  404128:	dd3b      	ble.n	4041a2 <_svfprintf_r+0x45e>
  40412a:	2c10      	cmp	r4, #16
  40412c:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40412e:	f340 876b 	ble.w	405008 <_svfprintf_r+0x12c4>
  404132:	2510      	movs	r5, #16
  404134:	4f5c      	ldr	r7, [pc, #368]	; (4042a8 <_svfprintf_r+0x564>)
  404136:	4662      	mov	r2, ip
  404138:	9e09      	ldr	r6, [sp, #36]	; 0x24
  40413a:	e002      	b.n	404142 <_svfprintf_r+0x3fe>
  40413c:	3c10      	subs	r4, #16
  40413e:	2c10      	cmp	r4, #16
  404140:	dd19      	ble.n	404176 <_svfprintf_r+0x432>
  404142:	3301      	adds	r3, #1
  404144:	3210      	adds	r2, #16
  404146:	f8cb 7000 	str.w	r7, [fp]
  40414a:	f10b 0b08 	add.w	fp, fp, #8
  40414e:	2b07      	cmp	r3, #7
  404150:	f84b 5c04 	str.w	r5, [fp, #-4]
  404154:	9225      	str	r2, [sp, #148]	; 0x94
  404156:	9324      	str	r3, [sp, #144]	; 0x90
  404158:	ddf0      	ble.n	40413c <_svfprintf_r+0x3f8>
  40415a:	4630      	mov	r0, r6
  40415c:	4649      	mov	r1, r9
  40415e:	aa23      	add	r2, sp, #140	; 0x8c
  404160:	46c3      	mov	fp, r8
  404162:	f003 ff7d 	bl	408060 <__ssprint_r>
  404166:	2800      	cmp	r0, #0
  404168:	f47f aeb1 	bne.w	403ece <_svfprintf_r+0x18a>
  40416c:	3c10      	subs	r4, #16
  40416e:	9a25      	ldr	r2, [sp, #148]	; 0x94
  404170:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404172:	2c10      	cmp	r4, #16
  404174:	dce5      	bgt.n	404142 <_svfprintf_r+0x3fe>
  404176:	4694      	mov	ip, r2
  404178:	3301      	adds	r3, #1
  40417a:	44a4      	add	ip, r4
  40417c:	f8cb 7000 	str.w	r7, [fp]
  404180:	2b07      	cmp	r3, #7
  404182:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
  404186:	9324      	str	r3, [sp, #144]	; 0x90
  404188:	f8cb 4004 	str.w	r4, [fp, #4]
  40418c:	dd09      	ble.n	4041a2 <_svfprintf_r+0x45e>
  40418e:	9809      	ldr	r0, [sp, #36]	; 0x24
  404190:	4649      	mov	r1, r9
  404192:	aa23      	add	r2, sp, #140	; 0x8c
  404194:	f003 ff64 	bl	408060 <__ssprint_r>
  404198:	2800      	cmp	r0, #0
  40419a:	f47f ae98 	bne.w	403ece <_svfprintf_r+0x18a>
  40419e:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
  4041a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4041a4:	9a07      	ldr	r2, [sp, #28]
  4041a6:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4041a8:	428a      	cmp	r2, r1
  4041aa:	bfac      	ite	ge
  4041ac:	189b      	addge	r3, r3, r2
  4041ae:	185b      	addlt	r3, r3, r1
  4041b0:	930a      	str	r3, [sp, #40]	; 0x28
  4041b2:	f1bc 0f00 	cmp.w	ip, #0
  4041b6:	f040 831a 	bne.w	4047ee <_svfprintf_r+0xaaa>
  4041ba:	2300      	movs	r3, #0
  4041bc:	46c3      	mov	fp, r8
  4041be:	9324      	str	r3, [sp, #144]	; 0x90
  4041c0:	e5e6      	b.n	403d90 <_svfprintf_r+0x4c>
  4041c2:	4619      	mov	r1, r3
  4041c4:	9806      	ldr	r0, [sp, #24]
  4041c6:	781e      	ldrb	r6, [r3, #0]
  4041c8:	f040 0004 	orr.w	r0, r0, #4
  4041cc:	9006      	str	r0, [sp, #24]
  4041ce:	e60e      	b.n	403dee <_svfprintf_r+0xaa>
  4041d0:	9308      	str	r3, [sp, #32]
  4041d2:	46a4      	mov	ip, r4
  4041d4:	9b06      	ldr	r3, [sp, #24]
  4041d6:	f013 0320 	ands.w	r3, r3, #32
  4041da:	f000 80ae 	beq.w	40433a <_svfprintf_r+0x5f6>
  4041de:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  4041e0:	2300      	movs	r3, #0
  4041e2:	3707      	adds	r7, #7
  4041e4:	f027 0207 	bic.w	r2, r7, #7
  4041e8:	f102 0108 	add.w	r1, r2, #8
  4041ec:	e9d2 4500 	ldrd	r4, r5, [r2]
  4041f0:	910c      	str	r1, [sp, #48]	; 0x30
  4041f2:	e68a      	b.n	403f0a <_svfprintf_r+0x1c6>
  4041f4:	781e      	ldrb	r6, [r3, #0]
  4041f6:	4619      	mov	r1, r3
  4041f8:	222b      	movs	r2, #43	; 0x2b
  4041fa:	e5f8      	b.n	403dee <_svfprintf_r+0xaa>
  4041fc:	781e      	ldrb	r6, [r3, #0]
  4041fe:	1c59      	adds	r1, r3, #1
  404200:	2e2a      	cmp	r6, #42	; 0x2a
  404202:	f001 8006 	beq.w	405212 <_svfprintf_r+0x14ce>
  404206:	f1a6 0030 	sub.w	r0, r6, #48	; 0x30
  40420a:	460b      	mov	r3, r1
  40420c:	2400      	movs	r4, #0
  40420e:	2809      	cmp	r0, #9
  404210:	f63f adee 	bhi.w	403df0 <_svfprintf_r+0xac>
  404214:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  404218:	f813 6b01 	ldrb.w	r6, [r3], #1
  40421c:	eb00 0444 	add.w	r4, r0, r4, lsl #1
  404220:	f1a6 0030 	sub.w	r0, r6, #48	; 0x30
  404224:	2809      	cmp	r0, #9
  404226:	d9f5      	bls.n	404214 <_svfprintf_r+0x4d0>
  404228:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
  40422c:	e5e0      	b.n	403df0 <_svfprintf_r+0xac>
  40422e:	9308      	str	r3, [sp, #32]
  404230:	46a4      	mov	ip, r4
  404232:	9b06      	ldr	r3, [sp, #24]
  404234:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
  404238:	069c      	lsls	r4, r3, #26
  40423a:	f140 8129 	bpl.w	404490 <_svfprintf_r+0x74c>
  40423e:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  404240:	3707      	adds	r7, #7
  404242:	f027 0707 	bic.w	r7, r7, #7
  404246:	e9d7 2300 	ldrd	r2, r3, [r7]
  40424a:	f107 0108 	add.w	r1, r7, #8
  40424e:	4614      	mov	r4, r2
  404250:	461d      	mov	r5, r3
  404252:	910c      	str	r1, [sp, #48]	; 0x30
  404254:	2a00      	cmp	r2, #0
  404256:	f173 0300 	sbcs.w	r3, r3, #0
  40425a:	f2c0 812a 	blt.w	4044b2 <_svfprintf_r+0x76e>
  40425e:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  404262:	2301      	movs	r3, #1
  404264:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
  404268:	e655      	b.n	403f16 <_svfprintf_r+0x1d2>
  40426a:	781e      	ldrb	r6, [r3, #0]
  40426c:	9906      	ldr	r1, [sp, #24]
  40426e:	2e6c      	cmp	r6, #108	; 0x6c
  404270:	f000 8557 	beq.w	404d22 <_svfprintf_r+0xfde>
  404274:	f041 0110 	orr.w	r1, r1, #16
  404278:	9106      	str	r1, [sp, #24]
  40427a:	4619      	mov	r1, r3
  40427c:	e5b7      	b.n	403dee <_svfprintf_r+0xaa>
  40427e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  404280:	6829      	ldr	r1, [r5, #0]
  404282:	4608      	mov	r0, r1
  404284:	910b      	str	r1, [sp, #44]	; 0x2c
  404286:	4629      	mov	r1, r5
  404288:	2800      	cmp	r0, #0
  40428a:	f101 0104 	add.w	r1, r1, #4
  40428e:	f2c0 854f 	blt.w	404d30 <_svfprintf_r+0xfec>
  404292:	910c      	str	r1, [sp, #48]	; 0x30
  404294:	4619      	mov	r1, r3
  404296:	781e      	ldrb	r6, [r3, #0]
  404298:	e5a9      	b.n	403dee <_svfprintf_r+0xaa>
  40429a:	9906      	ldr	r1, [sp, #24]
  40429c:	f041 0140 	orr.w	r1, r1, #64	; 0x40
  4042a0:	9106      	str	r1, [sp, #24]
  4042a2:	4619      	mov	r1, r3
  4042a4:	781e      	ldrb	r6, [r3, #0]
  4042a6:	e5a2      	b.n	403dee <_svfprintf_r+0xaa>
  4042a8:	00409490 	.word	0x00409490
  4042ac:	00409480 	.word	0x00409480
  4042b0:	9906      	ldr	r1, [sp, #24]
  4042b2:	f041 0120 	orr.w	r1, r1, #32
  4042b6:	9106      	str	r1, [sp, #24]
  4042b8:	4619      	mov	r1, r3
  4042ba:	781e      	ldrb	r6, [r3, #0]
  4042bc:	e597      	b.n	403dee <_svfprintf_r+0xaa>
  4042be:	9308      	str	r3, [sp, #32]
  4042c0:	9b06      	ldr	r3, [sp, #24]
  4042c2:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
  4042c6:	069e      	lsls	r6, r3, #26
  4042c8:	f140 84a4 	bpl.w	404c14 <_svfprintf_r+0xed0>
  4042cc:	990a      	ldr	r1, [sp, #40]	; 0x28
  4042ce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  4042d0:	17cd      	asrs	r5, r1, #31
  4042d2:	4608      	mov	r0, r1
  4042d4:	6813      	ldr	r3, [r2, #0]
  4042d6:	3204      	adds	r2, #4
  4042d8:	4629      	mov	r1, r5
  4042da:	920c      	str	r2, [sp, #48]	; 0x30
  4042dc:	e9c3 0100 	strd	r0, r1, [r3]
  4042e0:	e556      	b.n	403d90 <_svfprintf_r+0x4c>
  4042e2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  4042e4:	2500      	movs	r5, #0
  4042e6:	9308      	str	r3, [sp, #32]
  4042e8:	6813      	ldr	r3, [r2, #0]
  4042ea:	1d17      	adds	r7, r2, #4
  4042ec:	f88d 506f 	strb.w	r5, [sp, #111]	; 0x6f
  4042f0:	930f      	str	r3, [sp, #60]	; 0x3c
  4042f2:	2b00      	cmp	r3, #0
  4042f4:	f000 867a 	beq.w	404fec <_svfprintf_r+0x12a8>
  4042f8:	2c00      	cmp	r4, #0
  4042fa:	980f      	ldr	r0, [sp, #60]	; 0x3c
  4042fc:	f2c0 8624 	blt.w	404f48 <_svfprintf_r+0x1204>
  404300:	4629      	mov	r1, r5
  404302:	4622      	mov	r2, r4
  404304:	f002 ffe8 	bl	4072d8 <memchr>
  404308:	2800      	cmp	r0, #0
  40430a:	f000 86df 	beq.w	4050cc <_svfprintf_r+0x1388>
  40430e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  404310:	970c      	str	r7, [sp, #48]	; 0x30
  404312:	1ac4      	subs	r4, r0, r3
  404314:	9510      	str	r5, [sp, #64]	; 0x40
  404316:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  40431a:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
  40431e:	9511      	str	r5, [sp, #68]	; 0x44
  404320:	9307      	str	r3, [sp, #28]
  404322:	e622      	b.n	403f6a <_svfprintf_r+0x226>
  404324:	9308      	str	r3, [sp, #32]
  404326:	46a4      	mov	ip, r4
  404328:	9b06      	ldr	r3, [sp, #24]
  40432a:	f043 0310 	orr.w	r3, r3, #16
  40432e:	9306      	str	r3, [sp, #24]
  404330:	9b06      	ldr	r3, [sp, #24]
  404332:	f013 0320 	ands.w	r3, r3, #32
  404336:	f47f af52 	bne.w	4041de <_svfprintf_r+0x49a>
  40433a:	9a06      	ldr	r2, [sp, #24]
  40433c:	f012 0210 	ands.w	r2, r2, #16
  404340:	f040 8352 	bne.w	4049e8 <_svfprintf_r+0xca4>
  404344:	9b06      	ldr	r3, [sp, #24]
  404346:	f013 0340 	ands.w	r3, r3, #64	; 0x40
  40434a:	f000 834d 	beq.w	4049e8 <_svfprintf_r+0xca4>
  40434e:	990c      	ldr	r1, [sp, #48]	; 0x30
  404350:	4613      	mov	r3, r2
  404352:	2500      	movs	r5, #0
  404354:	460a      	mov	r2, r1
  404356:	880c      	ldrh	r4, [r1, #0]
  404358:	3204      	adds	r2, #4
  40435a:	920c      	str	r2, [sp, #48]	; 0x30
  40435c:	e5d5      	b.n	403f0a <_svfprintf_r+0x1c6>
  40435e:	9308      	str	r3, [sp, #32]
  404360:	46a4      	mov	ip, r4
  404362:	9b06      	ldr	r3, [sp, #24]
  404364:	f043 0310 	orr.w	r3, r3, #16
  404368:	9306      	str	r3, [sp, #24]
  40436a:	9b06      	ldr	r3, [sp, #24]
  40436c:	0698      	lsls	r0, r3, #26
  40436e:	f53f adc2 	bmi.w	403ef6 <_svfprintf_r+0x1b2>
  404372:	9b06      	ldr	r3, [sp, #24]
  404374:	06d9      	lsls	r1, r3, #27
  404376:	f140 8432 	bpl.w	404bde <_svfprintf_r+0xe9a>
  40437a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  40437c:	4613      	mov	r3, r2
  40437e:	3204      	adds	r2, #4
  404380:	681c      	ldr	r4, [r3, #0]
  404382:	2500      	movs	r5, #0
  404384:	2301      	movs	r3, #1
  404386:	920c      	str	r2, [sp, #48]	; 0x30
  404388:	e5bf      	b.n	403f0a <_svfprintf_r+0x1c6>
  40438a:	9308      	str	r3, [sp, #32]
  40438c:	46a4      	mov	ip, r4
  40438e:	4bb7      	ldr	r3, [pc, #732]	; (40466c <_svfprintf_r+0x928>)
  404390:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
  404394:	9315      	str	r3, [sp, #84]	; 0x54
  404396:	9b06      	ldr	r3, [sp, #24]
  404398:	069a      	lsls	r2, r3, #26
  40439a:	d53e      	bpl.n	40441a <_svfprintf_r+0x6d6>
  40439c:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  40439e:	3707      	adds	r7, #7
  4043a0:	f027 0307 	bic.w	r3, r7, #7
  4043a4:	f103 0208 	add.w	r2, r3, #8
  4043a8:	e9d3 4500 	ldrd	r4, r5, [r3]
  4043ac:	920c      	str	r2, [sp, #48]	; 0x30
  4043ae:	9b06      	ldr	r3, [sp, #24]
  4043b0:	07df      	lsls	r7, r3, #31
  4043b2:	f140 8268 	bpl.w	404886 <_svfprintf_r+0xb42>
  4043b6:	ea54 0305 	orrs.w	r3, r4, r5
  4043ba:	f000 8264 	beq.w	404886 <_svfprintf_r+0xb42>
  4043be:	9b06      	ldr	r3, [sp, #24]
  4043c0:	2230      	movs	r2, #48	; 0x30
  4043c2:	f88d 6071 	strb.w	r6, [sp, #113]	; 0x71
  4043c6:	f043 0302 	orr.w	r3, r3, #2
  4043ca:	f88d 2070 	strb.w	r2, [sp, #112]	; 0x70
  4043ce:	9306      	str	r3, [sp, #24]
  4043d0:	2302      	movs	r3, #2
  4043d2:	e59a      	b.n	403f0a <_svfprintf_r+0x1c6>
  4043d4:	990c      	ldr	r1, [sp, #48]	; 0x30
  4043d6:	2001      	movs	r0, #1
  4043d8:	9308      	str	r3, [sp, #32]
  4043da:	2300      	movs	r3, #0
  4043dc:	680a      	ldr	r2, [r1, #0]
  4043de:	3104      	adds	r1, #4
  4043e0:	461f      	mov	r7, r3
  4043e2:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  4043e6:	9310      	str	r3, [sp, #64]	; 0x40
  4043e8:	4604      	mov	r4, r0
  4043ea:	9311      	str	r3, [sp, #68]	; 0x44
  4043ec:	ab26      	add	r3, sp, #152	; 0x98
  4043ee:	9007      	str	r0, [sp, #28]
  4043f0:	910c      	str	r1, [sp, #48]	; 0x30
  4043f2:	f88d 2098 	strb.w	r2, [sp, #152]	; 0x98
  4043f6:	930f      	str	r3, [sp, #60]	; 0x3c
  4043f8:	e5bb      	b.n	403f72 <_svfprintf_r+0x22e>
  4043fa:	9906      	ldr	r1, [sp, #24]
  4043fc:	f041 0108 	orr.w	r1, r1, #8
  404400:	9106      	str	r1, [sp, #24]
  404402:	4619      	mov	r1, r3
  404404:	781e      	ldrb	r6, [r3, #0]
  404406:	e4f2      	b.n	403dee <_svfprintf_r+0xaa>
  404408:	9308      	str	r3, [sp, #32]
  40440a:	46a4      	mov	ip, r4
  40440c:	4b98      	ldr	r3, [pc, #608]	; (404670 <_svfprintf_r+0x92c>)
  40440e:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
  404412:	9315      	str	r3, [sp, #84]	; 0x54
  404414:	9b06      	ldr	r3, [sp, #24]
  404416:	069a      	lsls	r2, r3, #26
  404418:	d4c0      	bmi.n	40439c <_svfprintf_r+0x658>
  40441a:	9b06      	ldr	r3, [sp, #24]
  40441c:	06db      	lsls	r3, r3, #27
  40441e:	f140 83ec 	bpl.w	404bfa <_svfprintf_r+0xeb6>
  404422:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  404424:	2500      	movs	r5, #0
  404426:	4613      	mov	r3, r2
  404428:	6814      	ldr	r4, [r2, #0]
  40442a:	3304      	adds	r3, #4
  40442c:	930c      	str	r3, [sp, #48]	; 0x30
  40442e:	e7be      	b.n	4043ae <_svfprintf_r+0x66a>
  404430:	781e      	ldrb	r6, [r3, #0]
  404432:	4619      	mov	r1, r3
  404434:	2a00      	cmp	r2, #0
  404436:	f47f acda 	bne.w	403dee <_svfprintf_r+0xaa>
  40443a:	2220      	movs	r2, #32
  40443c:	e4d7      	b.n	403dee <_svfprintf_r+0xaa>
  40443e:	9906      	ldr	r1, [sp, #24]
  404440:	f041 0101 	orr.w	r1, r1, #1
  404444:	9106      	str	r1, [sp, #24]
  404446:	4619      	mov	r1, r3
  404448:	781e      	ldrb	r6, [r3, #0]
  40444a:	e4d0      	b.n	403dee <_svfprintf_r+0xaa>
  40444c:	9906      	ldr	r1, [sp, #24]
  40444e:	f041 0180 	orr.w	r1, r1, #128	; 0x80
  404452:	9106      	str	r1, [sp, #24]
  404454:	4619      	mov	r1, r3
  404456:	781e      	ldrb	r6, [r3, #0]
  404458:	e4c9      	b.n	403dee <_svfprintf_r+0xaa>
  40445a:	f1a6 0030 	sub.w	r0, r6, #48	; 0x30
  40445e:	2100      	movs	r1, #0
  404460:	eb01 0181 	add.w	r1, r1, r1, lsl #2
  404464:	f813 6b01 	ldrb.w	r6, [r3], #1
  404468:	eb00 0141 	add.w	r1, r0, r1, lsl #1
  40446c:	f1a6 0030 	sub.w	r0, r6, #48	; 0x30
  404470:	2809      	cmp	r0, #9
  404472:	d9f5      	bls.n	404460 <_svfprintf_r+0x71c>
  404474:	910b      	str	r1, [sp, #44]	; 0x2c
  404476:	e4bb      	b.n	403df0 <_svfprintf_r+0xac>
  404478:	9308      	str	r3, [sp, #32]
  40447a:	46a4      	mov	ip, r4
  40447c:	9b06      	ldr	r3, [sp, #24]
  40447e:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
  404482:	f043 0310 	orr.w	r3, r3, #16
  404486:	9306      	str	r3, [sp, #24]
  404488:	9b06      	ldr	r3, [sp, #24]
  40448a:	069c      	lsls	r4, r3, #26
  40448c:	f53f aed7 	bmi.w	40423e <_svfprintf_r+0x4fa>
  404490:	9b06      	ldr	r3, [sp, #24]
  404492:	06d8      	lsls	r0, r3, #27
  404494:	f140 83d5 	bpl.w	404c42 <_svfprintf_r+0xefe>
  404498:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  40449a:	4613      	mov	r3, r2
  40449c:	681c      	ldr	r4, [r3, #0]
  40449e:	3304      	adds	r3, #4
  4044a0:	17e5      	asrs	r5, r4, #31
  4044a2:	4622      	mov	r2, r4
  4044a4:	930c      	str	r3, [sp, #48]	; 0x30
  4044a6:	2a00      	cmp	r2, #0
  4044a8:	462b      	mov	r3, r5
  4044aa:	f173 0300 	sbcs.w	r3, r3, #0
  4044ae:	f6bf aed6 	bge.w	40425e <_svfprintf_r+0x51a>
  4044b2:	272d      	movs	r7, #45	; 0x2d
  4044b4:	4264      	negs	r4, r4
  4044b6:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
  4044ba:	f04f 0301 	mov.w	r3, #1
  4044be:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
  4044c2:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
  4044c6:	e526      	b.n	403f16 <_svfprintf_r+0x1d2>
  4044c8:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  4044ca:	9308      	str	r3, [sp, #32]
  4044cc:	3707      	adds	r7, #7
  4044ce:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
  4044d2:	f027 0307 	bic.w	r3, r7, #7
  4044d6:	f103 0208 	add.w	r2, r3, #8
  4044da:	920c      	str	r2, [sp, #48]	; 0x30
  4044dc:	681a      	ldr	r2, [r3, #0]
  4044de:	9213      	str	r2, [sp, #76]	; 0x4c
  4044e0:	685b      	ldr	r3, [r3, #4]
  4044e2:	9813      	ldr	r0, [sp, #76]	; 0x4c
  4044e4:	9314      	str	r3, [sp, #80]	; 0x50
  4044e6:	9914      	ldr	r1, [sp, #80]	; 0x50
  4044e8:	9407      	str	r4, [sp, #28]
  4044ea:	f003 fd41 	bl	407f70 <__fpclassifyd>
  4044ee:	2801      	cmp	r0, #1
  4044f0:	f8dd c01c 	ldr.w	ip, [sp, #28]
  4044f4:	f040 8355 	bne.w	404ba2 <_svfprintf_r+0xe5e>
  4044f8:	9813      	ldr	r0, [sp, #76]	; 0x4c
  4044fa:	2200      	movs	r2, #0
  4044fc:	2300      	movs	r3, #0
  4044fe:	9914      	ldr	r1, [sp, #80]	; 0x50
  404500:	f004 fb9a 	bl	408c38 <__aeabi_dcmplt>
  404504:	2800      	cmp	r0, #0
  404506:	f040 8582 	bne.w	40500e <_svfprintf_r+0x12ca>
  40450a:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  40450e:	2303      	movs	r3, #3
  404510:	9806      	ldr	r0, [sp, #24]
  404512:	4a58      	ldr	r2, [pc, #352]	; (404674 <_svfprintf_r+0x930>)
  404514:	2100      	movs	r1, #0
  404516:	461c      	mov	r4, r3
  404518:	9307      	str	r3, [sp, #28]
  40451a:	4b57      	ldr	r3, [pc, #348]	; (404678 <_svfprintf_r+0x934>)
  40451c:	f020 0080 	bic.w	r0, r0, #128	; 0x80
  404520:	9110      	str	r1, [sp, #64]	; 0x40
  404522:	2e47      	cmp	r6, #71	; 0x47
  404524:	bfd8      	it	le
  404526:	461a      	movle	r2, r3
  404528:	9006      	str	r0, [sp, #24]
  40452a:	9111      	str	r1, [sp, #68]	; 0x44
  40452c:	920f      	str	r2, [sp, #60]	; 0x3c
  40452e:	e51c      	b.n	403f6a <_svfprintf_r+0x226>
  404530:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  404532:	2230      	movs	r2, #48	; 0x30
  404534:	9806      	ldr	r0, [sp, #24]
  404536:	46a4      	mov	ip, r4
  404538:	4629      	mov	r1, r5
  40453a:	9308      	str	r3, [sp, #32]
  40453c:	2378      	movs	r3, #120	; 0x78
  40453e:	f040 0002 	orr.w	r0, r0, #2
  404542:	3104      	adds	r1, #4
  404544:	682c      	ldr	r4, [r5, #0]
  404546:	461e      	mov	r6, r3
  404548:	f88d 3071 	strb.w	r3, [sp, #113]	; 0x71
  40454c:	4b48      	ldr	r3, [pc, #288]	; (404670 <_svfprintf_r+0x92c>)
  40454e:	2500      	movs	r5, #0
  404550:	9006      	str	r0, [sp, #24]
  404552:	9315      	str	r3, [sp, #84]	; 0x54
  404554:	2302      	movs	r3, #2
  404556:	910c      	str	r1, [sp, #48]	; 0x30
  404558:	f88d 2070 	strb.w	r2, [sp, #112]	; 0x70
  40455c:	e4d5      	b.n	403f0a <_svfprintf_r+0x1c6>
  40455e:	9308      	str	r3, [sp, #32]
  404560:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
  404564:	2e00      	cmp	r6, #0
  404566:	f43f acab 	beq.w	403ec0 <_svfprintf_r+0x17c>
  40456a:	2300      	movs	r3, #0
  40456c:	2201      	movs	r2, #1
  40456e:	a926      	add	r1, sp, #152	; 0x98
  404570:	f88d 6098 	strb.w	r6, [sp, #152]	; 0x98
  404574:	9207      	str	r2, [sp, #28]
  404576:	461f      	mov	r7, r3
  404578:	910f      	str	r1, [sp, #60]	; 0x3c
  40457a:	4614      	mov	r4, r2
  40457c:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  404580:	9310      	str	r3, [sp, #64]	; 0x40
  404582:	9311      	str	r3, [sp, #68]	; 0x44
  404584:	e4f5      	b.n	403f72 <_svfprintf_r+0x22e>
  404586:	9809      	ldr	r0, [sp, #36]	; 0x24
  404588:	4649      	mov	r1, r9
  40458a:	aa23      	add	r2, sp, #140	; 0x8c
  40458c:	f003 fd68 	bl	408060 <__ssprint_r>
  404590:	2800      	cmp	r0, #0
  404592:	f47f ac9c 	bne.w	403ece <_svfprintf_r+0x18a>
  404596:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  40459a:	46c3      	mov	fp, r8
  40459c:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
  4045a0:	e53f      	b.n	404022 <_svfprintf_r+0x2de>
  4045a2:	2e65      	cmp	r6, #101	; 0x65
  4045a4:	f340 80c9 	ble.w	40473a <_svfprintf_r+0x9f6>
  4045a8:	9813      	ldr	r0, [sp, #76]	; 0x4c
  4045aa:	2200      	movs	r2, #0
  4045ac:	2300      	movs	r3, #0
  4045ae:	9914      	ldr	r1, [sp, #80]	; 0x50
  4045b0:	f8cd c034 	str.w	ip, [sp, #52]	; 0x34
  4045b4:	f004 fb36 	bl	408c24 <__aeabi_dcmpeq>
  4045b8:	f8dd c034 	ldr.w	ip, [sp, #52]	; 0x34
  4045bc:	2800      	cmp	r0, #0
  4045be:	f000 8165 	beq.w	40488c <_svfprintf_r+0xb48>
  4045c2:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4045c4:	2201      	movs	r2, #1
  4045c6:	f10c 0c01 	add.w	ip, ip, #1
  4045ca:	492c      	ldr	r1, [pc, #176]	; (40467c <_svfprintf_r+0x938>)
  4045cc:	4413      	add	r3, r2
  4045ce:	f8cb 2004 	str.w	r2, [fp, #4]
  4045d2:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
  4045d6:	2b07      	cmp	r3, #7
  4045d8:	f8cb 1000 	str.w	r1, [fp]
  4045dc:	9324      	str	r3, [sp, #144]	; 0x90
  4045de:	f300 8343 	bgt.w	404c68 <_svfprintf_r+0xf24>
  4045e2:	f10b 0b08 	add.w	fp, fp, #8
  4045e6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  4045e8:	9a12      	ldr	r2, [sp, #72]	; 0x48
  4045ea:	4293      	cmp	r3, r2
  4045ec:	db03      	blt.n	4045f6 <_svfprintf_r+0x8b2>
  4045ee:	9b06      	ldr	r3, [sp, #24]
  4045f0:	07de      	lsls	r6, r3, #31
  4045f2:	f57f ad92 	bpl.w	40411a <_svfprintf_r+0x3d6>
  4045f6:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4045f8:	9917      	ldr	r1, [sp, #92]	; 0x5c
  4045fa:	3301      	adds	r3, #1
  4045fc:	9a16      	ldr	r2, [sp, #88]	; 0x58
  4045fe:	448c      	add	ip, r1
  404600:	f8cb 1004 	str.w	r1, [fp, #4]
  404604:	2b07      	cmp	r3, #7
  404606:	f8cb 2000 	str.w	r2, [fp]
  40460a:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
  40460e:	9324      	str	r3, [sp, #144]	; 0x90
  404610:	f300 841d 	bgt.w	404e4e <_svfprintf_r+0x110a>
  404614:	f10b 0b08 	add.w	fp, fp, #8
  404618:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40461a:	1e5c      	subs	r4, r3, #1
  40461c:	2c00      	cmp	r4, #0
  40461e:	f77f ad7c 	ble.w	40411a <_svfprintf_r+0x3d6>
  404622:	2c10      	cmp	r4, #16
  404624:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404626:	f340 85bc 	ble.w	4051a2 <_svfprintf_r+0x145e>
  40462a:	2610      	movs	r6, #16
  40462c:	4d14      	ldr	r5, [pc, #80]	; (404680 <_svfprintf_r+0x93c>)
  40462e:	4662      	mov	r2, ip
  404630:	9f09      	ldr	r7, [sp, #36]	; 0x24
  404632:	e003      	b.n	40463c <_svfprintf_r+0x8f8>
  404634:	3c10      	subs	r4, #16
  404636:	2c10      	cmp	r4, #16
  404638:	f340 81c8 	ble.w	4049cc <_svfprintf_r+0xc88>
  40463c:	3301      	adds	r3, #1
  40463e:	3210      	adds	r2, #16
  404640:	f8cb 5000 	str.w	r5, [fp]
  404644:	f10b 0b08 	add.w	fp, fp, #8
  404648:	2b07      	cmp	r3, #7
  40464a:	f84b 6c04 	str.w	r6, [fp, #-4]
  40464e:	9225      	str	r2, [sp, #148]	; 0x94
  404650:	9324      	str	r3, [sp, #144]	; 0x90
  404652:	ddef      	ble.n	404634 <_svfprintf_r+0x8f0>
  404654:	4638      	mov	r0, r7
  404656:	4649      	mov	r1, r9
  404658:	aa23      	add	r2, sp, #140	; 0x8c
  40465a:	46c3      	mov	fp, r8
  40465c:	f003 fd00 	bl	408060 <__ssprint_r>
  404660:	2800      	cmp	r0, #0
  404662:	f47f ac34 	bne.w	403ece <_svfprintf_r+0x18a>
  404666:	9a25      	ldr	r2, [sp, #148]	; 0x94
  404668:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40466a:	e7e3      	b.n	404634 <_svfprintf_r+0x8f0>
  40466c:	004094b0 	.word	0x004094b0
  404670:	004094c4 	.word	0x004094c4
  404674:	004094a4 	.word	0x004094a4
  404678:	004094a0 	.word	0x004094a0
  40467c:	004094e0 	.word	0x004094e0
  404680:	00409480 	.word	0x00409480
  404684:	2b01      	cmp	r3, #1
  404686:	f000 814d 	beq.w	404924 <_svfprintf_r+0xbe0>
  40468a:	2b02      	cmp	r3, #2
  40468c:	f040 80e3 	bne.w	404856 <_svfprintf_r+0xb12>
  404690:	46c2      	mov	sl, r8
  404692:	9815      	ldr	r0, [sp, #84]	; 0x54
  404694:	0923      	lsrs	r3, r4, #4
  404696:	f004 010f 	and.w	r1, r4, #15
  40469a:	092a      	lsrs	r2, r5, #4
  40469c:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
  4046a0:	4615      	mov	r5, r2
  4046a2:	461c      	mov	r4, r3
  4046a4:	5c43      	ldrb	r3, [r0, r1]
  4046a6:	f80a 3d01 	strb.w	r3, [sl, #-1]!
  4046aa:	ea54 0305 	orrs.w	r3, r4, r5
  4046ae:	d1f1      	bne.n	404694 <_svfprintf_r+0x950>
  4046b0:	4653      	mov	r3, sl
  4046b2:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
  4046b6:	ebc3 0408 	rsb	r4, r3, r8
  4046ba:	e44f      	b.n	403f5c <_svfprintf_r+0x218>
  4046bc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  4046be:	9a07      	ldr	r2, [sp, #28]
  4046c0:	1a9f      	subs	r7, r3, r2
  4046c2:	2f00      	cmp	r7, #0
  4046c4:	f77f acd9 	ble.w	40407a <_svfprintf_r+0x336>
  4046c8:	2f10      	cmp	r7, #16
  4046ca:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4046cc:	f340 84f9 	ble.w	4050c2 <_svfprintf_r+0x137e>
  4046d0:	940d      	str	r4, [sp, #52]	; 0x34
  4046d2:	f04f 0a10 	mov.w	sl, #16
  4046d6:	4dc8      	ldr	r5, [pc, #800]	; (4049f8 <_svfprintf_r+0xcb4>)
  4046d8:	4662      	mov	r2, ip
  4046da:	9c09      	ldr	r4, [sp, #36]	; 0x24
  4046dc:	e002      	b.n	4046e4 <_svfprintf_r+0x9a0>
  4046de:	3f10      	subs	r7, #16
  4046e0:	2f10      	cmp	r7, #16
  4046e2:	dd19      	ble.n	404718 <_svfprintf_r+0x9d4>
  4046e4:	3301      	adds	r3, #1
  4046e6:	3210      	adds	r2, #16
  4046e8:	f8cb 5000 	str.w	r5, [fp]
  4046ec:	f10b 0b08 	add.w	fp, fp, #8
  4046f0:	2b07      	cmp	r3, #7
  4046f2:	f84b ac04 	str.w	sl, [fp, #-4]
  4046f6:	9225      	str	r2, [sp, #148]	; 0x94
  4046f8:	9324      	str	r3, [sp, #144]	; 0x90
  4046fa:	ddf0      	ble.n	4046de <_svfprintf_r+0x99a>
  4046fc:	4620      	mov	r0, r4
  4046fe:	4649      	mov	r1, r9
  404700:	aa23      	add	r2, sp, #140	; 0x8c
  404702:	46c3      	mov	fp, r8
  404704:	f003 fcac 	bl	408060 <__ssprint_r>
  404708:	2800      	cmp	r0, #0
  40470a:	f47f abe0 	bne.w	403ece <_svfprintf_r+0x18a>
  40470e:	3f10      	subs	r7, #16
  404710:	9a25      	ldr	r2, [sp, #148]	; 0x94
  404712:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404714:	2f10      	cmp	r7, #16
  404716:	dce5      	bgt.n	4046e4 <_svfprintf_r+0x9a0>
  404718:	9c0d      	ldr	r4, [sp, #52]	; 0x34
  40471a:	4694      	mov	ip, r2
  40471c:	3301      	adds	r3, #1
  40471e:	44bc      	add	ip, r7
  404720:	f8cb 5000 	str.w	r5, [fp]
  404724:	2b07      	cmp	r3, #7
  404726:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
  40472a:	9324      	str	r3, [sp, #144]	; 0x90
  40472c:	f8cb 7004 	str.w	r7, [fp, #4]
  404730:	f300 81fc 	bgt.w	404b2c <_svfprintf_r+0xde8>
  404734:	f10b 0b08 	add.w	fp, fp, #8
  404738:	e49f      	b.n	40407a <_svfprintf_r+0x336>
  40473a:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40473c:	f10c 0601 	add.w	r6, ip, #1
  404740:	9c24      	ldr	r4, [sp, #144]	; 0x90
  404742:	2b01      	cmp	r3, #1
  404744:	f340 81c9 	ble.w	404ada <_svfprintf_r+0xd96>
  404748:	2301      	movs	r3, #1
  40474a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40474c:	9625      	str	r6, [sp, #148]	; 0x94
  40474e:	441c      	add	r4, r3
  404750:	f8cb 2000 	str.w	r2, [fp]
  404754:	f8cb 3004 	str.w	r3, [fp, #4]
  404758:	2c07      	cmp	r4, #7
  40475a:	9424      	str	r4, [sp, #144]	; 0x90
  40475c:	f300 81da 	bgt.w	404b14 <_svfprintf_r+0xdd0>
  404760:	f10b 0b08 	add.w	fp, fp, #8
  404764:	9a17      	ldr	r2, [sp, #92]	; 0x5c
  404766:	3401      	adds	r4, #1
  404768:	9b16      	ldr	r3, [sp, #88]	; 0x58
  40476a:	4416      	add	r6, r2
  40476c:	2c07      	cmp	r4, #7
  40476e:	f8cb 3000 	str.w	r3, [fp]
  404772:	9625      	str	r6, [sp, #148]	; 0x94
  404774:	9424      	str	r4, [sp, #144]	; 0x90
  404776:	f8cb 2004 	str.w	r2, [fp, #4]
  40477a:	f300 81bf 	bgt.w	404afc <_svfprintf_r+0xdb8>
  40477e:	f10b 0b08 	add.w	fp, fp, #8
  404782:	2300      	movs	r3, #0
  404784:	9813      	ldr	r0, [sp, #76]	; 0x4c
  404786:	2200      	movs	r2, #0
  404788:	9914      	ldr	r1, [sp, #80]	; 0x50
  40478a:	f004 fa4b 	bl	408c24 <__aeabi_dcmpeq>
  40478e:	9b12      	ldr	r3, [sp, #72]	; 0x48
  404790:	2800      	cmp	r0, #0
  404792:	f040 80dc 	bne.w	40494e <_svfprintf_r+0xc0a>
  404796:	3b01      	subs	r3, #1
  404798:	3401      	adds	r4, #1
  40479a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40479c:	441e      	add	r6, r3
  40479e:	2c07      	cmp	r4, #7
  4047a0:	f102 0201 	add.w	r2, r2, #1
  4047a4:	9424      	str	r4, [sp, #144]	; 0x90
  4047a6:	9625      	str	r6, [sp, #148]	; 0x94
  4047a8:	f8cb 2000 	str.w	r2, [fp]
  4047ac:	f8cb 3004 	str.w	r3, [fp, #4]
  4047b0:	f300 8100 	bgt.w	4049b4 <_svfprintf_r+0xc70>
  4047b4:	f10b 0b08 	add.w	fp, fp, #8
  4047b8:	9a19      	ldr	r2, [sp, #100]	; 0x64
  4047ba:	3401      	adds	r4, #1
  4047bc:	ab1f      	add	r3, sp, #124	; 0x7c
  4047be:	eb06 0c02 	add.w	ip, r6, r2
  4047c2:	2c07      	cmp	r4, #7
  4047c4:	f8cb 2004 	str.w	r2, [fp, #4]
  4047c8:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
  4047cc:	9424      	str	r4, [sp, #144]	; 0x90
  4047ce:	f8cb 3000 	str.w	r3, [fp]
  4047d2:	f77f aca0 	ble.w	404116 <_svfprintf_r+0x3d2>
  4047d6:	9809      	ldr	r0, [sp, #36]	; 0x24
  4047d8:	4649      	mov	r1, r9
  4047da:	aa23      	add	r2, sp, #140	; 0x8c
  4047dc:	f003 fc40 	bl	408060 <__ssprint_r>
  4047e0:	2800      	cmp	r0, #0
  4047e2:	f47f ab74 	bne.w	403ece <_svfprintf_r+0x18a>
  4047e6:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
  4047ea:	46c3      	mov	fp, r8
  4047ec:	e495      	b.n	40411a <_svfprintf_r+0x3d6>
  4047ee:	9809      	ldr	r0, [sp, #36]	; 0x24
  4047f0:	4649      	mov	r1, r9
  4047f2:	aa23      	add	r2, sp, #140	; 0x8c
  4047f4:	f003 fc34 	bl	408060 <__ssprint_r>
  4047f8:	2800      	cmp	r0, #0
  4047fa:	f43f acde 	beq.w	4041ba <_svfprintf_r+0x476>
  4047fe:	f7ff bb66 	b.w	403ece <_svfprintf_r+0x18a>
  404802:	4614      	mov	r4, r2
  404804:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
  404808:	f7ff bba8 	b.w	403f5c <_svfprintf_r+0x218>
  40480c:	9809      	ldr	r0, [sp, #36]	; 0x24
  40480e:	4649      	mov	r1, r9
  404810:	aa23      	add	r2, sp, #140	; 0x8c
  404812:	f003 fc25 	bl	408060 <__ssprint_r>
  404816:	2800      	cmp	r0, #0
  404818:	f47f ab59 	bne.w	403ece <_svfprintf_r+0x18a>
  40481c:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
  404820:	46c3      	mov	fp, r8
  404822:	e466      	b.n	4040f2 <_svfprintf_r+0x3ae>
  404824:	9809      	ldr	r0, [sp, #36]	; 0x24
  404826:	4649      	mov	r1, r9
  404828:	aa23      	add	r2, sp, #140	; 0x8c
  40482a:	f003 fc19 	bl	408060 <__ssprint_r>
  40482e:	2800      	cmp	r0, #0
  404830:	f47f ab4d 	bne.w	403ece <_svfprintf_r+0x18a>
  404834:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
  404838:	46c3      	mov	fp, r8
  40483a:	e41a      	b.n	404072 <_svfprintf_r+0x32e>
  40483c:	9809      	ldr	r0, [sp, #36]	; 0x24
  40483e:	4649      	mov	r1, r9
  404840:	aa23      	add	r2, sp, #140	; 0x8c
  404842:	f003 fc0d 	bl	408060 <__ssprint_r>
  404846:	2800      	cmp	r0, #0
  404848:	f47f ab41 	bne.w	403ece <_svfprintf_r+0x18a>
  40484c:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
  404850:	46c3      	mov	fp, r8
  404852:	f7ff bbfa 	b.w	40404a <_svfprintf_r+0x306>
  404856:	4641      	mov	r1, r8
  404858:	08e2      	lsrs	r2, r4, #3
  40485a:	f004 0307 	and.w	r3, r4, #7
  40485e:	08e8      	lsrs	r0, r5, #3
  404860:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
  404864:	3330      	adds	r3, #48	; 0x30
  404866:	4605      	mov	r5, r0
  404868:	4614      	mov	r4, r2
  40486a:	f801 3d01 	strb.w	r3, [r1, #-1]!
  40486e:	ea54 0205 	orrs.w	r2, r4, r5
  404872:	d1f1      	bne.n	404858 <_svfprintf_r+0xb14>
  404874:	9a06      	ldr	r2, [sp, #24]
  404876:	910f      	str	r1, [sp, #60]	; 0x3c
  404878:	07d0      	lsls	r0, r2, #31
  40487a:	f100 8164 	bmi.w	404b46 <_svfprintf_r+0xe02>
  40487e:	ebc1 0408 	rsb	r4, r1, r8
  404882:	f7ff bb6b 	b.w	403f5c <_svfprintf_r+0x218>
  404886:	2302      	movs	r3, #2
  404888:	f7ff bb3f 	b.w	403f0a <_svfprintf_r+0x1c6>
  40488c:	9c1d      	ldr	r4, [sp, #116]	; 0x74
  40488e:	2c00      	cmp	r4, #0
  404890:	f340 81f6 	ble.w	404c80 <_svfprintf_r+0xf3c>
  404894:	9a12      	ldr	r2, [sp, #72]	; 0x48
  404896:	9911      	ldr	r1, [sp, #68]	; 0x44
  404898:	4613      	mov	r3, r2
  40489a:	428a      	cmp	r2, r1
  40489c:	bfa8      	it	ge
  40489e:	460b      	movge	r3, r1
  4048a0:	990f      	ldr	r1, [sp, #60]	; 0x3c
  4048a2:	461c      	mov	r4, r3
  4048a4:	188f      	adds	r7, r1, r2
  4048a6:	2c00      	cmp	r4, #0
  4048a8:	dd0e      	ble.n	4048c8 <_svfprintf_r+0xb84>
  4048aa:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4048ac:	44a4      	add	ip, r4
  4048ae:	f8cb 1000 	str.w	r1, [fp]
  4048b2:	3301      	adds	r3, #1
  4048b4:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
  4048b8:	f8cb 4004 	str.w	r4, [fp, #4]
  4048bc:	2b07      	cmp	r3, #7
  4048be:	9324      	str	r3, [sp, #144]	; 0x90
  4048c0:	f300 8353 	bgt.w	404f6a <_svfprintf_r+0x1226>
  4048c4:	f10b 0b08 	add.w	fp, fp, #8
  4048c8:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4048ca:	2c00      	cmp	r4, #0
  4048cc:	bfa8      	it	ge
  4048ce:	1b1b      	subge	r3, r3, r4
  4048d0:	2b00      	cmp	r3, #0
  4048d2:	461c      	mov	r4, r3
  4048d4:	f340 80a1 	ble.w	404a1a <_svfprintf_r+0xcd6>
  4048d8:	2c10      	cmp	r4, #16
  4048da:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4048dc:	f340 846c 	ble.w	4051b8 <_svfprintf_r+0x1474>
  4048e0:	2610      	movs	r6, #16
  4048e2:	4d45      	ldr	r5, [pc, #276]	; (4049f8 <_svfprintf_r+0xcb4>)
  4048e4:	4662      	mov	r2, ip
  4048e6:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
  4048ea:	e003      	b.n	4048f4 <_svfprintf_r+0xbb0>
  4048ec:	3c10      	subs	r4, #16
  4048ee:	2c10      	cmp	r4, #16
  4048f0:	f340 8084 	ble.w	4049fc <_svfprintf_r+0xcb8>
  4048f4:	3301      	adds	r3, #1
  4048f6:	3210      	adds	r2, #16
  4048f8:	f8cb 5000 	str.w	r5, [fp]
  4048fc:	f10b 0b08 	add.w	fp, fp, #8
  404900:	2b07      	cmp	r3, #7
  404902:	f84b 6c04 	str.w	r6, [fp, #-4]
  404906:	9225      	str	r2, [sp, #148]	; 0x94
  404908:	9324      	str	r3, [sp, #144]	; 0x90
  40490a:	ddef      	ble.n	4048ec <_svfprintf_r+0xba8>
  40490c:	4650      	mov	r0, sl
  40490e:	4649      	mov	r1, r9
  404910:	aa23      	add	r2, sp, #140	; 0x8c
  404912:	46c3      	mov	fp, r8
  404914:	f003 fba4 	bl	408060 <__ssprint_r>
  404918:	2800      	cmp	r0, #0
  40491a:	f47f aad8 	bne.w	403ece <_svfprintf_r+0x18a>
  40491e:	9a25      	ldr	r2, [sp, #148]	; 0x94
  404920:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404922:	e7e3      	b.n	4048ec <_svfprintf_r+0xba8>
  404924:	2d00      	cmp	r5, #0
  404926:	bf08      	it	eq
  404928:	2c0a      	cmpeq	r4, #10
  40492a:	f080 811a 	bcs.w	404b62 <_svfprintf_r+0xe1e>
  40492e:	f50d 7a80 	add.w	sl, sp, #256	; 0x100
  404932:	3430      	adds	r4, #48	; 0x30
  404934:	f80a 4d41 	strb.w	r4, [sl, #-65]!
  404938:	ebca 0408 	rsb	r4, sl, r8
  40493c:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
  404940:	f7ff bb0c 	b.w	403f5c <_svfprintf_r+0x218>
  404944:	461c      	mov	r4, r3
  404946:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
  40494a:	f7ff bb07 	b.w	403f5c <_svfprintf_r+0x218>
  40494e:	1e5f      	subs	r7, r3, #1
  404950:	2f00      	cmp	r7, #0
  404952:	f77f af31 	ble.w	4047b8 <_svfprintf_r+0xa74>
  404956:	2f10      	cmp	r7, #16
  404958:	4d27      	ldr	r5, [pc, #156]	; (4049f8 <_svfprintf_r+0xcb4>)
  40495a:	bfc8      	it	gt
  40495c:	f04f 0a10 	movgt.w	sl, #16
  404960:	dc03      	bgt.n	40496a <_svfprintf_r+0xc26>
  404962:	e01c      	b.n	40499e <_svfprintf_r+0xc5a>
  404964:	3f10      	subs	r7, #16
  404966:	2f10      	cmp	r7, #16
  404968:	dd19      	ble.n	40499e <_svfprintf_r+0xc5a>
  40496a:	3401      	adds	r4, #1
  40496c:	3610      	adds	r6, #16
  40496e:	f8cb 5000 	str.w	r5, [fp]
  404972:	f10b 0b08 	add.w	fp, fp, #8
  404976:	2c07      	cmp	r4, #7
  404978:	f84b ac04 	str.w	sl, [fp, #-4]
  40497c:	9625      	str	r6, [sp, #148]	; 0x94
  40497e:	9424      	str	r4, [sp, #144]	; 0x90
  404980:	ddf0      	ble.n	404964 <_svfprintf_r+0xc20>
  404982:	9809      	ldr	r0, [sp, #36]	; 0x24
  404984:	4649      	mov	r1, r9
  404986:	aa23      	add	r2, sp, #140	; 0x8c
  404988:	46c3      	mov	fp, r8
  40498a:	f003 fb69 	bl	408060 <__ssprint_r>
  40498e:	2800      	cmp	r0, #0
  404990:	f47f aa9d 	bne.w	403ece <_svfprintf_r+0x18a>
  404994:	3f10      	subs	r7, #16
  404996:	9e25      	ldr	r6, [sp, #148]	; 0x94
  404998:	9c24      	ldr	r4, [sp, #144]	; 0x90
  40499a:	2f10      	cmp	r7, #16
  40499c:	dce5      	bgt.n	40496a <_svfprintf_r+0xc26>
  40499e:	3401      	adds	r4, #1
  4049a0:	443e      	add	r6, r7
  4049a2:	f8cb 5000 	str.w	r5, [fp]
  4049a6:	2c07      	cmp	r4, #7
  4049a8:	9625      	str	r6, [sp, #148]	; 0x94
  4049aa:	9424      	str	r4, [sp, #144]	; 0x90
  4049ac:	f8cb 7004 	str.w	r7, [fp, #4]
  4049b0:	f77f af00 	ble.w	4047b4 <_svfprintf_r+0xa70>
  4049b4:	9809      	ldr	r0, [sp, #36]	; 0x24
  4049b6:	4649      	mov	r1, r9
  4049b8:	aa23      	add	r2, sp, #140	; 0x8c
  4049ba:	f003 fb51 	bl	408060 <__ssprint_r>
  4049be:	2800      	cmp	r0, #0
  4049c0:	f47f aa85 	bne.w	403ece <_svfprintf_r+0x18a>
  4049c4:	9e25      	ldr	r6, [sp, #148]	; 0x94
  4049c6:	46c3      	mov	fp, r8
  4049c8:	9c24      	ldr	r4, [sp, #144]	; 0x90
  4049ca:	e6f5      	b.n	4047b8 <_svfprintf_r+0xa74>
  4049cc:	4694      	mov	ip, r2
  4049ce:	3301      	adds	r3, #1
  4049d0:	44a4      	add	ip, r4
  4049d2:	f8cb 5000 	str.w	r5, [fp]
  4049d6:	2b07      	cmp	r3, #7
  4049d8:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
  4049dc:	9324      	str	r3, [sp, #144]	; 0x90
  4049de:	f8cb 4004 	str.w	r4, [fp, #4]
  4049e2:	f77f ab98 	ble.w	404116 <_svfprintf_r+0x3d2>
  4049e6:	e6f6      	b.n	4047d6 <_svfprintf_r+0xa92>
  4049e8:	990c      	ldr	r1, [sp, #48]	; 0x30
  4049ea:	2500      	movs	r5, #0
  4049ec:	460a      	mov	r2, r1
  4049ee:	680c      	ldr	r4, [r1, #0]
  4049f0:	3204      	adds	r2, #4
  4049f2:	920c      	str	r2, [sp, #48]	; 0x30
  4049f4:	f7ff ba89 	b.w	403f0a <_svfprintf_r+0x1c6>
  4049f8:	00409480 	.word	0x00409480
  4049fc:	4694      	mov	ip, r2
  4049fe:	3301      	adds	r3, #1
  404a00:	44a4      	add	ip, r4
  404a02:	f8cb 5000 	str.w	r5, [fp]
  404a06:	2b07      	cmp	r3, #7
  404a08:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
  404a0c:	9324      	str	r3, [sp, #144]	; 0x90
  404a0e:	f8cb 4004 	str.w	r4, [fp, #4]
  404a12:	f300 82df 	bgt.w	404fd4 <_svfprintf_r+0x1290>
  404a16:	f10b 0b08 	add.w	fp, fp, #8
  404a1a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  404a1c:	9911      	ldr	r1, [sp, #68]	; 0x44
  404a1e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  404a20:	440a      	add	r2, r1
  404a22:	4616      	mov	r6, r2
  404a24:	9a12      	ldr	r2, [sp, #72]	; 0x48
  404a26:	4293      	cmp	r3, r2
  404a28:	db45      	blt.n	404ab6 <_svfprintf_r+0xd72>
  404a2a:	9a06      	ldr	r2, [sp, #24]
  404a2c:	07d0      	lsls	r0, r2, #31
  404a2e:	d442      	bmi.n	404ab6 <_svfprintf_r+0xd72>
  404a30:	9a12      	ldr	r2, [sp, #72]	; 0x48
  404a32:	1bbc      	subs	r4, r7, r6
  404a34:	1ad3      	subs	r3, r2, r3
  404a36:	429c      	cmp	r4, r3
  404a38:	bfa8      	it	ge
  404a3a:	461c      	movge	r4, r3
  404a3c:	2c00      	cmp	r4, #0
  404a3e:	4625      	mov	r5, r4
  404a40:	dd0e      	ble.n	404a60 <_svfprintf_r+0xd1c>
  404a42:	9a24      	ldr	r2, [sp, #144]	; 0x90
  404a44:	44a4      	add	ip, r4
  404a46:	f8cb 6000 	str.w	r6, [fp]
  404a4a:	3201      	adds	r2, #1
  404a4c:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
  404a50:	f8cb 4004 	str.w	r4, [fp, #4]
  404a54:	2a07      	cmp	r2, #7
  404a56:	9224      	str	r2, [sp, #144]	; 0x90
  404a58:	f300 82a0 	bgt.w	404f9c <_svfprintf_r+0x1258>
  404a5c:	f10b 0b08 	add.w	fp, fp, #8
  404a60:	2d00      	cmp	r5, #0
  404a62:	bfac      	ite	ge
  404a64:	1b5c      	subge	r4, r3, r5
  404a66:	461c      	movlt	r4, r3
  404a68:	2c00      	cmp	r4, #0
  404a6a:	f77f ab56 	ble.w	40411a <_svfprintf_r+0x3d6>
  404a6e:	2c10      	cmp	r4, #16
  404a70:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404a72:	f340 8396 	ble.w	4051a2 <_svfprintf_r+0x145e>
  404a76:	2610      	movs	r6, #16
  404a78:	4db1      	ldr	r5, [pc, #708]	; (404d40 <_svfprintf_r+0xffc>)
  404a7a:	4662      	mov	r2, ip
  404a7c:	9f09      	ldr	r7, [sp, #36]	; 0x24
  404a7e:	e002      	b.n	404a86 <_svfprintf_r+0xd42>
  404a80:	3c10      	subs	r4, #16
  404a82:	2c10      	cmp	r4, #16
  404a84:	dda2      	ble.n	4049cc <_svfprintf_r+0xc88>
  404a86:	3301      	adds	r3, #1
  404a88:	3210      	adds	r2, #16
  404a8a:	f8cb 5000 	str.w	r5, [fp]
  404a8e:	f10b 0b08 	add.w	fp, fp, #8
  404a92:	2b07      	cmp	r3, #7
  404a94:	f84b 6c04 	str.w	r6, [fp, #-4]
  404a98:	9225      	str	r2, [sp, #148]	; 0x94
  404a9a:	9324      	str	r3, [sp, #144]	; 0x90
  404a9c:	ddf0      	ble.n	404a80 <_svfprintf_r+0xd3c>
  404a9e:	4638      	mov	r0, r7
  404aa0:	4649      	mov	r1, r9
  404aa2:	aa23      	add	r2, sp, #140	; 0x8c
  404aa4:	46c3      	mov	fp, r8
  404aa6:	f003 fadb 	bl	408060 <__ssprint_r>
  404aaa:	2800      	cmp	r0, #0
  404aac:	f47f aa0f 	bne.w	403ece <_svfprintf_r+0x18a>
  404ab0:	9a25      	ldr	r2, [sp, #148]	; 0x94
  404ab2:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404ab4:	e7e4      	b.n	404a80 <_svfprintf_r+0xd3c>
  404ab6:	9a24      	ldr	r2, [sp, #144]	; 0x90
  404ab8:	9817      	ldr	r0, [sp, #92]	; 0x5c
  404aba:	3201      	adds	r2, #1
  404abc:	9916      	ldr	r1, [sp, #88]	; 0x58
  404abe:	4484      	add	ip, r0
  404ac0:	f8cb 0004 	str.w	r0, [fp, #4]
  404ac4:	2a07      	cmp	r2, #7
  404ac6:	f8cb 1000 	str.w	r1, [fp]
  404aca:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
  404ace:	9224      	str	r2, [sp, #144]	; 0x90
  404ad0:	f300 8273 	bgt.w	404fba <_svfprintf_r+0x1276>
  404ad4:	f10b 0b08 	add.w	fp, fp, #8
  404ad8:	e7aa      	b.n	404a30 <_svfprintf_r+0xcec>
  404ada:	9b06      	ldr	r3, [sp, #24]
  404adc:	07d9      	lsls	r1, r3, #31
  404ade:	f53f ae33 	bmi.w	404748 <_svfprintf_r+0xa04>
  404ae2:	2301      	movs	r3, #1
  404ae4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  404ae6:	9625      	str	r6, [sp, #148]	; 0x94
  404ae8:	441c      	add	r4, r3
  404aea:	f8cb 2000 	str.w	r2, [fp]
  404aee:	f8cb 3004 	str.w	r3, [fp, #4]
  404af2:	2c07      	cmp	r4, #7
  404af4:	9424      	str	r4, [sp, #144]	; 0x90
  404af6:	f77f ae5d 	ble.w	4047b4 <_svfprintf_r+0xa70>
  404afa:	e75b      	b.n	4049b4 <_svfprintf_r+0xc70>
  404afc:	9809      	ldr	r0, [sp, #36]	; 0x24
  404afe:	4649      	mov	r1, r9
  404b00:	aa23      	add	r2, sp, #140	; 0x8c
  404b02:	f003 faad 	bl	408060 <__ssprint_r>
  404b06:	2800      	cmp	r0, #0
  404b08:	f47f a9e1 	bne.w	403ece <_svfprintf_r+0x18a>
  404b0c:	9e25      	ldr	r6, [sp, #148]	; 0x94
  404b0e:	46c3      	mov	fp, r8
  404b10:	9c24      	ldr	r4, [sp, #144]	; 0x90
  404b12:	e636      	b.n	404782 <_svfprintf_r+0xa3e>
  404b14:	9809      	ldr	r0, [sp, #36]	; 0x24
  404b16:	4649      	mov	r1, r9
  404b18:	aa23      	add	r2, sp, #140	; 0x8c
  404b1a:	f003 faa1 	bl	408060 <__ssprint_r>
  404b1e:	2800      	cmp	r0, #0
  404b20:	f47f a9d5 	bne.w	403ece <_svfprintf_r+0x18a>
  404b24:	9e25      	ldr	r6, [sp, #148]	; 0x94
  404b26:	46c3      	mov	fp, r8
  404b28:	9c24      	ldr	r4, [sp, #144]	; 0x90
  404b2a:	e61b      	b.n	404764 <_svfprintf_r+0xa20>
  404b2c:	9809      	ldr	r0, [sp, #36]	; 0x24
  404b2e:	4649      	mov	r1, r9
  404b30:	aa23      	add	r2, sp, #140	; 0x8c
  404b32:	f003 fa95 	bl	408060 <__ssprint_r>
  404b36:	2800      	cmp	r0, #0
  404b38:	f47f a9c9 	bne.w	403ece <_svfprintf_r+0x18a>
  404b3c:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
  404b40:	46c3      	mov	fp, r8
  404b42:	f7ff ba9a 	b.w	40407a <_svfprintf_r+0x336>
  404b46:	2b30      	cmp	r3, #48	; 0x30
  404b48:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  404b4a:	f43f adb4 	beq.w	4046b6 <_svfprintf_r+0x972>
  404b4e:	3b01      	subs	r3, #1
  404b50:	461a      	mov	r2, r3
  404b52:	930f      	str	r3, [sp, #60]	; 0x3c
  404b54:	2330      	movs	r3, #48	; 0x30
  404b56:	ebc2 0408 	rsb	r4, r2, r8
  404b5a:	f801 3c01 	strb.w	r3, [r1, #-1]
  404b5e:	f7ff b9fd 	b.w	403f5c <_svfprintf_r+0x218>
  404b62:	46c2      	mov	sl, r8
  404b64:	f8cd c01c 	str.w	ip, [sp, #28]
  404b68:	4620      	mov	r0, r4
  404b6a:	4629      	mov	r1, r5
  404b6c:	220a      	movs	r2, #10
  404b6e:	2300      	movs	r3, #0
  404b70:	f004 f8b2 	bl	408cd8 <__aeabi_uldivmod>
  404b74:	f102 0e30 	add.w	lr, r2, #48	; 0x30
  404b78:	4620      	mov	r0, r4
  404b7a:	4629      	mov	r1, r5
  404b7c:	2300      	movs	r3, #0
  404b7e:	220a      	movs	r2, #10
  404b80:	f80a ed01 	strb.w	lr, [sl, #-1]!
  404b84:	f004 f8a8 	bl	408cd8 <__aeabi_uldivmod>
  404b88:	4604      	mov	r4, r0
  404b8a:	460d      	mov	r5, r1
  404b8c:	ea54 0305 	orrs.w	r3, r4, r5
  404b90:	d1ea      	bne.n	404b68 <_svfprintf_r+0xe24>
  404b92:	f8dd c01c 	ldr.w	ip, [sp, #28]
  404b96:	ebca 0408 	rsb	r4, sl, r8
  404b9a:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
  404b9e:	f7ff b9dd 	b.w	403f5c <_svfprintf_r+0x218>
  404ba2:	9813      	ldr	r0, [sp, #76]	; 0x4c
  404ba4:	9914      	ldr	r1, [sp, #80]	; 0x50
  404ba6:	f8cd c01c 	str.w	ip, [sp, #28]
  404baa:	f003 f9e1 	bl	407f70 <__fpclassifyd>
  404bae:	f8dd c01c 	ldr.w	ip, [sp, #28]
  404bb2:	2800      	cmp	r0, #0
  404bb4:	f040 80cc 	bne.w	404d50 <_svfprintf_r+0x100c>
  404bb8:	9c06      	ldr	r4, [sp, #24]
  404bba:	2103      	movs	r1, #3
  404bbc:	4a61      	ldr	r2, [pc, #388]	; (404d44 <_svfprintf_r+0x1000>)
  404bbe:	4b62      	ldr	r3, [pc, #392]	; (404d48 <_svfprintf_r+0x1004>)
  404bc0:	f024 0480 	bic.w	r4, r4, #128	; 0x80
  404bc4:	9010      	str	r0, [sp, #64]	; 0x40
  404bc6:	2e47      	cmp	r6, #71	; 0x47
  404bc8:	bfd8      	it	le
  404bca:	461a      	movle	r2, r3
  404bcc:	9406      	str	r4, [sp, #24]
  404bce:	9107      	str	r1, [sp, #28]
  404bd0:	460c      	mov	r4, r1
  404bd2:	9011      	str	r0, [sp, #68]	; 0x44
  404bd4:	920f      	str	r2, [sp, #60]	; 0x3c
  404bd6:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  404bda:	f7ff b9c6 	b.w	403f6a <_svfprintf_r+0x226>
  404bde:	9b06      	ldr	r3, [sp, #24]
  404be0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  404be2:	f013 0f40 	tst.w	r3, #64	; 0x40
  404be6:	4613      	mov	r3, r2
  404be8:	f43f abc9 	beq.w	40437e <_svfprintf_r+0x63a>
  404bec:	8814      	ldrh	r4, [r2, #0]
  404bee:	3204      	adds	r2, #4
  404bf0:	2500      	movs	r5, #0
  404bf2:	2301      	movs	r3, #1
  404bf4:	920c      	str	r2, [sp, #48]	; 0x30
  404bf6:	f7ff b988 	b.w	403f0a <_svfprintf_r+0x1c6>
  404bfa:	9b06      	ldr	r3, [sp, #24]
  404bfc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  404bfe:	f013 0f40 	tst.w	r3, #64	; 0x40
  404c02:	4613      	mov	r3, r2
  404c04:	f000 8130 	beq.w	404e68 <_svfprintf_r+0x1124>
  404c08:	3304      	adds	r3, #4
  404c0a:	8814      	ldrh	r4, [r2, #0]
  404c0c:	2500      	movs	r5, #0
  404c0e:	930c      	str	r3, [sp, #48]	; 0x30
  404c10:	f7ff bbcd 	b.w	4043ae <_svfprintf_r+0x66a>
  404c14:	9b06      	ldr	r3, [sp, #24]
  404c16:	06dd      	lsls	r5, r3, #27
  404c18:	d40b      	bmi.n	404c32 <_svfprintf_r+0xeee>
  404c1a:	9b06      	ldr	r3, [sp, #24]
  404c1c:	065c      	lsls	r4, r3, #25
  404c1e:	d508      	bpl.n	404c32 <_svfprintf_r+0xeee>
  404c20:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  404c22:	6813      	ldr	r3, [r2, #0]
  404c24:	3204      	adds	r2, #4
  404c26:	920c      	str	r2, [sp, #48]	; 0x30
  404c28:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
  404c2c:	801a      	strh	r2, [r3, #0]
  404c2e:	f7ff b8af 	b.w	403d90 <_svfprintf_r+0x4c>
  404c32:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  404c34:	6813      	ldr	r3, [r2, #0]
  404c36:	3204      	adds	r2, #4
  404c38:	920c      	str	r2, [sp, #48]	; 0x30
  404c3a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  404c3c:	601a      	str	r2, [r3, #0]
  404c3e:	f7ff b8a7 	b.w	403d90 <_svfprintf_r+0x4c>
  404c42:	9b06      	ldr	r3, [sp, #24]
  404c44:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  404c46:	f013 0f40 	tst.w	r3, #64	; 0x40
  404c4a:	4613      	mov	r3, r2
  404c4c:	f43f ac26 	beq.w	40449c <_svfprintf_r+0x758>
  404c50:	f9b2 4000 	ldrsh.w	r4, [r2]
  404c54:	3304      	adds	r3, #4
  404c56:	17e5      	asrs	r5, r4, #31
  404c58:	930c      	str	r3, [sp, #48]	; 0x30
  404c5a:	4622      	mov	r2, r4
  404c5c:	462b      	mov	r3, r5
  404c5e:	f7ff baf9 	b.w	404254 <_svfprintf_r+0x510>
  404c62:	4d37      	ldr	r5, [pc, #220]	; (404d40 <_svfprintf_r+0xffc>)
  404c64:	f7ff ba37 	b.w	4040d6 <_svfprintf_r+0x392>
  404c68:	9809      	ldr	r0, [sp, #36]	; 0x24
  404c6a:	4649      	mov	r1, r9
  404c6c:	aa23      	add	r2, sp, #140	; 0x8c
  404c6e:	f003 f9f7 	bl	408060 <__ssprint_r>
  404c72:	2800      	cmp	r0, #0
  404c74:	f47f a92b 	bne.w	403ece <_svfprintf_r+0x18a>
  404c78:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
  404c7c:	46c3      	mov	fp, r8
  404c7e:	e4b2      	b.n	4045e6 <_svfprintf_r+0x8a2>
  404c80:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404c82:	2201      	movs	r2, #1
  404c84:	f10c 0c01 	add.w	ip, ip, #1
  404c88:	4930      	ldr	r1, [pc, #192]	; (404d4c <_svfprintf_r+0x1008>)
  404c8a:	4413      	add	r3, r2
  404c8c:	f8cb 2004 	str.w	r2, [fp, #4]
  404c90:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
  404c94:	2b07      	cmp	r3, #7
  404c96:	f8cb 1000 	str.w	r1, [fp]
  404c9a:	9324      	str	r3, [sp, #144]	; 0x90
  404c9c:	f300 80fa 	bgt.w	404e94 <_svfprintf_r+0x1150>
  404ca0:	f10b 0b08 	add.w	fp, fp, #8
  404ca4:	b92c      	cbnz	r4, 404cb2 <_svfprintf_r+0xf6e>
  404ca6:	9b12      	ldr	r3, [sp, #72]	; 0x48
  404ca8:	b91b      	cbnz	r3, 404cb2 <_svfprintf_r+0xf6e>
  404caa:	9b06      	ldr	r3, [sp, #24]
  404cac:	07dd      	lsls	r5, r3, #31
  404cae:	f57f aa34 	bpl.w	40411a <_svfprintf_r+0x3d6>
  404cb2:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404cb4:	9917      	ldr	r1, [sp, #92]	; 0x5c
  404cb6:	3301      	adds	r3, #1
  404cb8:	9816      	ldr	r0, [sp, #88]	; 0x58
  404cba:	eb0c 0201 	add.w	r2, ip, r1
  404cbe:	f8cb 1004 	str.w	r1, [fp, #4]
  404cc2:	2b07      	cmp	r3, #7
  404cc4:	f8cb 0000 	str.w	r0, [fp]
  404cc8:	9225      	str	r2, [sp, #148]	; 0x94
  404cca:	9324      	str	r3, [sp, #144]	; 0x90
  404ccc:	f300 824c 	bgt.w	405168 <_svfprintf_r+0x1424>
  404cd0:	f10b 0b08 	add.w	fp, fp, #8
  404cd4:	4264      	negs	r4, r4
  404cd6:	2c00      	cmp	r4, #0
  404cd8:	f340 8126 	ble.w	404f28 <_svfprintf_r+0x11e4>
  404cdc:	2c10      	cmp	r4, #16
  404cde:	4d18      	ldr	r5, [pc, #96]	; (404d40 <_svfprintf_r+0xffc>)
  404ce0:	f340 814f 	ble.w	404f82 <_svfprintf_r+0x123e>
  404ce4:	2610      	movs	r6, #16
  404ce6:	9f09      	ldr	r7, [sp, #36]	; 0x24
  404ce8:	e003      	b.n	404cf2 <_svfprintf_r+0xfae>
  404cea:	3c10      	subs	r4, #16
  404cec:	2c10      	cmp	r4, #16
  404cee:	f340 8148 	ble.w	404f82 <_svfprintf_r+0x123e>
  404cf2:	3301      	adds	r3, #1
  404cf4:	3210      	adds	r2, #16
  404cf6:	f8cb 5000 	str.w	r5, [fp]
  404cfa:	f10b 0b08 	add.w	fp, fp, #8
  404cfe:	2b07      	cmp	r3, #7
  404d00:	f84b 6c04 	str.w	r6, [fp, #-4]
  404d04:	9225      	str	r2, [sp, #148]	; 0x94
  404d06:	9324      	str	r3, [sp, #144]	; 0x90
  404d08:	ddef      	ble.n	404cea <_svfprintf_r+0xfa6>
  404d0a:	4638      	mov	r0, r7
  404d0c:	4649      	mov	r1, r9
  404d0e:	aa23      	add	r2, sp, #140	; 0x8c
  404d10:	46c3      	mov	fp, r8
  404d12:	f003 f9a5 	bl	408060 <__ssprint_r>
  404d16:	2800      	cmp	r0, #0
  404d18:	f47f a8d9 	bne.w	403ece <_svfprintf_r+0x18a>
  404d1c:	9a25      	ldr	r2, [sp, #148]	; 0x94
  404d1e:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404d20:	e7e3      	b.n	404cea <_svfprintf_r+0xfa6>
  404d22:	f041 0120 	orr.w	r1, r1, #32
  404d26:	785e      	ldrb	r6, [r3, #1]
  404d28:	9106      	str	r1, [sp, #24]
  404d2a:	1c59      	adds	r1, r3, #1
  404d2c:	f7ff b85f 	b.w	403dee <_svfprintf_r+0xaa>
  404d30:	980b      	ldr	r0, [sp, #44]	; 0x2c
  404d32:	910c      	str	r1, [sp, #48]	; 0x30
  404d34:	4619      	mov	r1, r3
  404d36:	4240      	negs	r0, r0
  404d38:	900b      	str	r0, [sp, #44]	; 0x2c
  404d3a:	f7ff ba43 	b.w	4041c4 <_svfprintf_r+0x480>
  404d3e:	bf00      	nop
  404d40:	00409480 	.word	0x00409480
  404d44:	004094ac 	.word	0x004094ac
  404d48:	004094a8 	.word	0x004094a8
  404d4c:	004094e0 	.word	0x004094e0
  404d50:	f1bc 3fff 	cmp.w	ip, #4294967295
  404d54:	f026 0a20 	bic.w	sl, r6, #32
  404d58:	f000 80a9 	beq.w	404eae <_svfprintf_r+0x116a>
  404d5c:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
  404d60:	f040 80a7 	bne.w	404eb2 <_svfprintf_r+0x116e>
  404d64:	f1bc 0f00 	cmp.w	ip, #0
  404d68:	f040 80a3 	bne.w	404eb2 <_svfprintf_r+0x116e>
  404d6c:	9b06      	ldr	r3, [sp, #24]
  404d6e:	f04f 0a47 	mov.w	sl, #71	; 0x47
  404d72:	f04f 0c01 	mov.w	ip, #1
  404d76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  404d7a:	930e      	str	r3, [sp, #56]	; 0x38
  404d7c:	9b14      	ldr	r3, [sp, #80]	; 0x50
  404d7e:	2b00      	cmp	r3, #0
  404d80:	f2c0 81ff 	blt.w	405182 <_svfprintf_r+0x143e>
  404d84:	461d      	mov	r5, r3
  404d86:	9f13      	ldr	r7, [sp, #76]	; 0x4c
  404d88:	2300      	movs	r3, #0
  404d8a:	930d      	str	r3, [sp, #52]	; 0x34
  404d8c:	2002      	movs	r0, #2
  404d8e:	a91d      	add	r1, sp, #116	; 0x74
  404d90:	f8cd c004 	str.w	ip, [sp, #4]
  404d94:	463a      	mov	r2, r7
  404d96:	9000      	str	r0, [sp, #0]
  404d98:	a81e      	add	r0, sp, #120	; 0x78
  404d9a:	9102      	str	r1, [sp, #8]
  404d9c:	a921      	add	r1, sp, #132	; 0x84
  404d9e:	9003      	str	r0, [sp, #12]
  404da0:	462b      	mov	r3, r5
  404da2:	9809      	ldr	r0, [sp, #36]	; 0x24
  404da4:	9104      	str	r1, [sp, #16]
  404da6:	f8cd c01c 	str.w	ip, [sp, #28]
  404daa:	f000 fbb9 	bl	405520 <_dtoa_r>
  404dae:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
  404db2:	900f      	str	r0, [sp, #60]	; 0x3c
  404db4:	f8dd c01c 	ldr.w	ip, [sp, #28]
  404db8:	f040 8242 	bne.w	405240 <_svfprintf_r+0x14fc>
  404dbc:	9b06      	ldr	r3, [sp, #24]
  404dbe:	07db      	lsls	r3, r3, #31
  404dc0:	f140 81f3 	bpl.w	4051aa <_svfprintf_r+0x1466>
  404dc4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  404dc6:	eb03 040c 	add.w	r4, r3, ip
  404dca:	4638      	mov	r0, r7
  404dcc:	2200      	movs	r2, #0
  404dce:	2300      	movs	r3, #0
  404dd0:	4629      	mov	r1, r5
  404dd2:	f8cd c01c 	str.w	ip, [sp, #28]
  404dd6:	f003 ff25 	bl	408c24 <__aeabi_dcmpeq>
  404dda:	f8dd c01c 	ldr.w	ip, [sp, #28]
  404dde:	2800      	cmp	r0, #0
  404de0:	f040 8172 	bne.w	4050c8 <_svfprintf_r+0x1384>
  404de4:	9b21      	ldr	r3, [sp, #132]	; 0x84
  404de6:	429c      	cmp	r4, r3
  404de8:	d906      	bls.n	404df8 <_svfprintf_r+0x10b4>
  404dea:	2130      	movs	r1, #48	; 0x30
  404dec:	1c5a      	adds	r2, r3, #1
  404dee:	9221      	str	r2, [sp, #132]	; 0x84
  404df0:	7019      	strb	r1, [r3, #0]
  404df2:	9b21      	ldr	r3, [sp, #132]	; 0x84
  404df4:	429c      	cmp	r4, r3
  404df6:	d8f9      	bhi.n	404dec <_svfprintf_r+0x10a8>
  404df8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  404dfa:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
  404dfe:	eba3 0302 	sub.w	r3, r3, r2
  404e02:	9312      	str	r3, [sp, #72]	; 0x48
  404e04:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  404e06:	f040 8113 	bne.w	405030 <_svfprintf_r+0x12ec>
  404e0a:	459c      	cmp	ip, r3
  404e0c:	f2c0 8168 	blt.w	4050e0 <_svfprintf_r+0x139c>
  404e10:	1cd9      	adds	r1, r3, #3
  404e12:	f2c0 8165 	blt.w	4050e0 <_svfprintf_r+0x139c>
  404e16:	2667      	movs	r6, #103	; 0x67
  404e18:	9311      	str	r3, [sp, #68]	; 0x44
  404e1a:	9b12      	ldr	r3, [sp, #72]	; 0x48
  404e1c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404e1e:	4293      	cmp	r3, r2
  404e20:	f300 81b6 	bgt.w	405190 <_svfprintf_r+0x144c>
  404e24:	9b06      	ldr	r3, [sp, #24]
  404e26:	07df      	lsls	r7, r3, #31
  404e28:	f100 81c1 	bmi.w	4051ae <_svfprintf_r+0x146a>
  404e2c:	4614      	mov	r4, r2
  404e2e:	ea22 7ce2 	bic.w	ip, r2, r2, asr #31
  404e32:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  404e34:	2b00      	cmp	r3, #0
  404e36:	f040 80f0 	bne.w	40501a <_svfprintf_r+0x12d6>
  404e3a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  404e3c:	f8cd c01c 	str.w	ip, [sp, #28]
  404e40:	9306      	str	r3, [sp, #24]
  404e42:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  404e44:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  404e48:	9310      	str	r3, [sp, #64]	; 0x40
  404e4a:	f7ff b88e 	b.w	403f6a <_svfprintf_r+0x226>
  404e4e:	9809      	ldr	r0, [sp, #36]	; 0x24
  404e50:	4649      	mov	r1, r9
  404e52:	aa23      	add	r2, sp, #140	; 0x8c
  404e54:	f003 f904 	bl	408060 <__ssprint_r>
  404e58:	2800      	cmp	r0, #0
  404e5a:	f47f a838 	bne.w	403ece <_svfprintf_r+0x18a>
  404e5e:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
  404e62:	46c3      	mov	fp, r8
  404e64:	f7ff bbd8 	b.w	404618 <_svfprintf_r+0x8d4>
  404e68:	3304      	adds	r3, #4
  404e6a:	6814      	ldr	r4, [r2, #0]
  404e6c:	2500      	movs	r5, #0
  404e6e:	930c      	str	r3, [sp, #48]	; 0x30
  404e70:	f7ff ba9d 	b.w	4043ae <_svfprintf_r+0x66a>
  404e74:	9809      	ldr	r0, [sp, #36]	; 0x24
  404e76:	2140      	movs	r1, #64	; 0x40
  404e78:	f001 ff82 	bl	406d80 <_malloc_r>
  404e7c:	f8c9 0000 	str.w	r0, [r9]
  404e80:	f8c9 0010 	str.w	r0, [r9, #16]
  404e84:	2800      	cmp	r0, #0
  404e86:	f000 81d4 	beq.w	405232 <_svfprintf_r+0x14ee>
  404e8a:	2340      	movs	r3, #64	; 0x40
  404e8c:	f8c9 3014 	str.w	r3, [r9, #20]
  404e90:	f7fe bf70 	b.w	403d74 <_svfprintf_r+0x30>
  404e94:	9809      	ldr	r0, [sp, #36]	; 0x24
  404e96:	4649      	mov	r1, r9
  404e98:	aa23      	add	r2, sp, #140	; 0x8c
  404e9a:	f003 f8e1 	bl	408060 <__ssprint_r>
  404e9e:	2800      	cmp	r0, #0
  404ea0:	f47f a815 	bne.w	403ece <_svfprintf_r+0x18a>
  404ea4:	9c1d      	ldr	r4, [sp, #116]	; 0x74
  404ea6:	46c3      	mov	fp, r8
  404ea8:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
  404eac:	e6fa      	b.n	404ca4 <_svfprintf_r+0xf60>
  404eae:	f04f 0c06 	mov.w	ip, #6
  404eb2:	9b06      	ldr	r3, [sp, #24]
  404eb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  404eb8:	930e      	str	r3, [sp, #56]	; 0x38
  404eba:	9b14      	ldr	r3, [sp, #80]	; 0x50
  404ebc:	2b00      	cmp	r3, #0
  404ebe:	f2c0 8160 	blt.w	405182 <_svfprintf_r+0x143e>
  404ec2:	461d      	mov	r5, r3
  404ec4:	9f13      	ldr	r7, [sp, #76]	; 0x4c
  404ec6:	2300      	movs	r3, #0
  404ec8:	930d      	str	r3, [sp, #52]	; 0x34
  404eca:	f1ba 0f46 	cmp.w	sl, #70	; 0x46
  404ece:	f000 80c4 	beq.w	40505a <_svfprintf_r+0x1316>
  404ed2:	f1ba 0f45 	cmp.w	sl, #69	; 0x45
  404ed6:	f47f af59 	bne.w	404d8c <_svfprintf_r+0x1048>
  404eda:	f10c 0401 	add.w	r4, ip, #1
  404ede:	f8cd c01c 	str.w	ip, [sp, #28]
  404ee2:	f10d 0e74 	add.w	lr, sp, #116	; 0x74
  404ee6:	f10d 0c84 	add.w	ip, sp, #132	; 0x84
  404eea:	a81e      	add	r0, sp, #120	; 0x78
  404eec:	2102      	movs	r1, #2
  404eee:	f8cd c010 	str.w	ip, [sp, #16]
  404ef2:	463a      	mov	r2, r7
  404ef4:	9003      	str	r0, [sp, #12]
  404ef6:	462b      	mov	r3, r5
  404ef8:	9401      	str	r4, [sp, #4]
  404efa:	9100      	str	r1, [sp, #0]
  404efc:	f8cd e008 	str.w	lr, [sp, #8]
  404f00:	9809      	ldr	r0, [sp, #36]	; 0x24
  404f02:	f000 fb0d 	bl	405520 <_dtoa_r>
  404f06:	f8dd c01c 	ldr.w	ip, [sp, #28]
  404f0a:	900f      	str	r0, [sp, #60]	; 0x3c
  404f0c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  404f0e:	441c      	add	r4, r3
  404f10:	e75b      	b.n	404dca <_svfprintf_r+0x1086>
  404f12:	9809      	ldr	r0, [sp, #36]	; 0x24
  404f14:	4649      	mov	r1, r9
  404f16:	aa23      	add	r2, sp, #140	; 0x8c
  404f18:	f003 f8a2 	bl	408060 <__ssprint_r>
  404f1c:	2800      	cmp	r0, #0
  404f1e:	f47e afd6 	bne.w	403ece <_svfprintf_r+0x18a>
  404f22:	9a25      	ldr	r2, [sp, #148]	; 0x94
  404f24:	46c3      	mov	fp, r8
  404f26:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404f28:	9812      	ldr	r0, [sp, #72]	; 0x48
  404f2a:	3301      	adds	r3, #1
  404f2c:	eb02 0c00 	add.w	ip, r2, r0
  404f30:	2b07      	cmp	r3, #7
  404f32:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  404f34:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
  404f38:	f8cb 2000 	str.w	r2, [fp]
  404f3c:	9324      	str	r3, [sp, #144]	; 0x90
  404f3e:	f8cb 0004 	str.w	r0, [fp, #4]
  404f42:	f77f a8e8 	ble.w	404116 <_svfprintf_r+0x3d2>
  404f46:	e446      	b.n	4047d6 <_svfprintf_r+0xa92>
  404f48:	9510      	str	r5, [sp, #64]	; 0x40
  404f4a:	f7fe fecd 	bl	403ce8 <strlen>
  404f4e:	ea20 73e0 	bic.w	r3, r0, r0, asr #31
  404f52:	970c      	str	r7, [sp, #48]	; 0x30
  404f54:	4604      	mov	r4, r0
  404f56:	9511      	str	r5, [sp, #68]	; 0x44
  404f58:	9307      	str	r3, [sp, #28]
  404f5a:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  404f5e:	f7ff b804 	b.w	403f6a <_svfprintf_r+0x226>
  404f62:	9a24      	ldr	r2, [sp, #144]	; 0x90
  404f64:	4fb7      	ldr	r7, [pc, #732]	; (405244 <_svfprintf_r+0x1500>)
  404f66:	f7ff b84b 	b.w	404000 <_svfprintf_r+0x2bc>
  404f6a:	9809      	ldr	r0, [sp, #36]	; 0x24
  404f6c:	4649      	mov	r1, r9
  404f6e:	aa23      	add	r2, sp, #140	; 0x8c
  404f70:	f003 f876 	bl	408060 <__ssprint_r>
  404f74:	2800      	cmp	r0, #0
  404f76:	f47e afaa 	bne.w	403ece <_svfprintf_r+0x18a>
  404f7a:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
  404f7e:	46c3      	mov	fp, r8
  404f80:	e4a2      	b.n	4048c8 <_svfprintf_r+0xb84>
  404f82:	3301      	adds	r3, #1
  404f84:	4422      	add	r2, r4
  404f86:	f8cb 5000 	str.w	r5, [fp]
  404f8a:	2b07      	cmp	r3, #7
  404f8c:	9225      	str	r2, [sp, #148]	; 0x94
  404f8e:	9324      	str	r3, [sp, #144]	; 0x90
  404f90:	f8cb 4004 	str.w	r4, [fp, #4]
  404f94:	dcbd      	bgt.n	404f12 <_svfprintf_r+0x11ce>
  404f96:	f10b 0b08 	add.w	fp, fp, #8
  404f9a:	e7c5      	b.n	404f28 <_svfprintf_r+0x11e4>
  404f9c:	9809      	ldr	r0, [sp, #36]	; 0x24
  404f9e:	4649      	mov	r1, r9
  404fa0:	aa23      	add	r2, sp, #140	; 0x8c
  404fa2:	f003 f85d 	bl	408060 <__ssprint_r>
  404fa6:	2800      	cmp	r0, #0
  404fa8:	f47e af91 	bne.w	403ece <_svfprintf_r+0x18a>
  404fac:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  404fae:	46c3      	mov	fp, r8
  404fb0:	9a12      	ldr	r2, [sp, #72]	; 0x48
  404fb2:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
  404fb6:	1ad3      	subs	r3, r2, r3
  404fb8:	e552      	b.n	404a60 <_svfprintf_r+0xd1c>
  404fba:	9809      	ldr	r0, [sp, #36]	; 0x24
  404fbc:	4649      	mov	r1, r9
  404fbe:	aa23      	add	r2, sp, #140	; 0x8c
  404fc0:	f003 f84e 	bl	408060 <__ssprint_r>
  404fc4:	2800      	cmp	r0, #0
  404fc6:	f47e af82 	bne.w	403ece <_svfprintf_r+0x18a>
  404fca:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  404fcc:	46c3      	mov	fp, r8
  404fce:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
  404fd2:	e52d      	b.n	404a30 <_svfprintf_r+0xcec>
  404fd4:	9809      	ldr	r0, [sp, #36]	; 0x24
  404fd6:	4649      	mov	r1, r9
  404fd8:	aa23      	add	r2, sp, #140	; 0x8c
  404fda:	f003 f841 	bl	408060 <__ssprint_r>
  404fde:	2800      	cmp	r0, #0
  404fe0:	f47e af75 	bne.w	403ece <_svfprintf_r+0x18a>
  404fe4:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
  404fe8:	46c3      	mov	fp, r8
  404fea:	e516      	b.n	404a1a <_svfprintf_r+0xcd6>
  404fec:	2c06      	cmp	r4, #6
  404fee:	970c      	str	r7, [sp, #48]	; 0x30
  404ff0:	9310      	str	r3, [sp, #64]	; 0x40
  404ff2:	461f      	mov	r7, r3
  404ff4:	bf28      	it	cs
  404ff6:	2406      	movcs	r4, #6
  404ff8:	9711      	str	r7, [sp, #68]	; 0x44
  404ffa:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
  404ffe:	9307      	str	r3, [sp, #28]
  405000:	4b91      	ldr	r3, [pc, #580]	; (405248 <_svfprintf_r+0x1504>)
  405002:	930f      	str	r3, [sp, #60]	; 0x3c
  405004:	f7fe bfb1 	b.w	403f6a <_svfprintf_r+0x226>
  405008:	4f8e      	ldr	r7, [pc, #568]	; (405244 <_svfprintf_r+0x1500>)
  40500a:	f7ff b8b5 	b.w	404178 <_svfprintf_r+0x434>
  40500e:	232d      	movs	r3, #45	; 0x2d
  405010:	461f      	mov	r7, r3
  405012:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  405016:	f7ff ba7a 	b.w	40450e <_svfprintf_r+0x7ca>
  40501a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40501c:	272d      	movs	r7, #45	; 0x2d
  40501e:	f8cd c01c 	str.w	ip, [sp, #28]
  405022:	9306      	str	r3, [sp, #24]
  405024:	2300      	movs	r3, #0
  405026:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
  40502a:	9310      	str	r3, [sp, #64]	; 0x40
  40502c:	f7fe bf9e 	b.w	403f6c <_svfprintf_r+0x228>
  405030:	2e65      	cmp	r6, #101	; 0x65
  405032:	dd56      	ble.n	4050e2 <_svfprintf_r+0x139e>
  405034:	2e66      	cmp	r6, #102	; 0x66
  405036:	9311      	str	r3, [sp, #68]	; 0x44
  405038:	f47f aeef 	bne.w	404e1a <_svfprintf_r+0x10d6>
  40503c:	2b00      	cmp	r3, #0
  40503e:	f340 80d6 	ble.w	4051ee <_svfprintf_r+0x14aa>
  405042:	f1bc 0f00 	cmp.w	ip, #0
  405046:	f040 80c1 	bne.w	4051cc <_svfprintf_r+0x1488>
  40504a:	9b06      	ldr	r3, [sp, #24]
  40504c:	07da      	lsls	r2, r3, #31
  40504e:	f100 80bd 	bmi.w	4051cc <_svfprintf_r+0x1488>
  405052:	9c11      	ldr	r4, [sp, #68]	; 0x44
  405054:	ea24 7ce4 	bic.w	ip, r4, r4, asr #31
  405058:	e6eb      	b.n	404e32 <_svfprintf_r+0x10ee>
  40505a:	2003      	movs	r0, #3
  40505c:	a91d      	add	r1, sp, #116	; 0x74
  40505e:	463a      	mov	r2, r7
  405060:	f8cd c004 	str.w	ip, [sp, #4]
  405064:	9000      	str	r0, [sp, #0]
  405066:	a81e      	add	r0, sp, #120	; 0x78
  405068:	9102      	str	r1, [sp, #8]
  40506a:	a921      	add	r1, sp, #132	; 0x84
  40506c:	462b      	mov	r3, r5
  40506e:	9003      	str	r0, [sp, #12]
  405070:	9104      	str	r1, [sp, #16]
  405072:	9809      	ldr	r0, [sp, #36]	; 0x24
  405074:	f8cd c01c 	str.w	ip, [sp, #28]
  405078:	f000 fa52 	bl	405520 <_dtoa_r>
  40507c:	f8dd c01c 	ldr.w	ip, [sp, #28]
  405080:	4602      	mov	r2, r0
  405082:	7803      	ldrb	r3, [r0, #0]
  405084:	4462      	add	r2, ip
  405086:	900f      	str	r0, [sp, #60]	; 0x3c
  405088:	2b30      	cmp	r3, #48	; 0x30
  40508a:	9207      	str	r2, [sp, #28]
  40508c:	f040 808b 	bne.w	4051a6 <_svfprintf_r+0x1462>
  405090:	4638      	mov	r0, r7
  405092:	2200      	movs	r2, #0
  405094:	2300      	movs	r3, #0
  405096:	4629      	mov	r1, r5
  405098:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
  40509c:	f04f 0401 	mov.w	r4, #1
  4050a0:	f003 fdc0 	bl	408c24 <__aeabi_dcmpeq>
  4050a4:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
  4050a8:	b108      	cbz	r0, 4050ae <_svfprintf_r+0x136a>
  4050aa:	f04f 0400 	mov.w	r4, #0
  4050ae:	f014 0fff 	tst.w	r4, #255	; 0xff
  4050b2:	d078      	beq.n	4051a6 <_svfprintf_r+0x1462>
  4050b4:	f1cc 0401 	rsb	r4, ip, #1
  4050b8:	941d      	str	r4, [sp, #116]	; 0x74
  4050ba:	9b07      	ldr	r3, [sp, #28]
  4050bc:	4423      	add	r3, r4
  4050be:	461c      	mov	r4, r3
  4050c0:	e683      	b.n	404dca <_svfprintf_r+0x1086>
  4050c2:	4d62      	ldr	r5, [pc, #392]	; (40524c <_svfprintf_r+0x1508>)
  4050c4:	f7ff bb2a 	b.w	40471c <_svfprintf_r+0x9d8>
  4050c8:	4623      	mov	r3, r4
  4050ca:	e695      	b.n	404df8 <_svfprintf_r+0x10b4>
  4050cc:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
  4050d0:	970c      	str	r7, [sp, #48]	; 0x30
  4050d2:	9010      	str	r0, [sp, #64]	; 0x40
  4050d4:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  4050d8:	9307      	str	r3, [sp, #28]
  4050da:	9011      	str	r0, [sp, #68]	; 0x44
  4050dc:	f7fe bf45 	b.w	403f6a <_svfprintf_r+0x226>
  4050e0:	3e02      	subs	r6, #2
  4050e2:	3b01      	subs	r3, #1
  4050e4:	f88d 607c 	strb.w	r6, [sp, #124]	; 0x7c
  4050e8:	2b00      	cmp	r3, #0
  4050ea:	931d      	str	r3, [sp, #116]	; 0x74
  4050ec:	db75      	blt.n	4051da <_svfprintf_r+0x1496>
  4050ee:	222b      	movs	r2, #43	; 0x2b
  4050f0:	f88d 207d 	strb.w	r2, [sp, #125]	; 0x7d
  4050f4:	2b09      	cmp	r3, #9
  4050f6:	dd61      	ble.n	4051bc <_svfprintf_r+0x1478>
  4050f8:	f10d 008b 	add.w	r0, sp, #139	; 0x8b
  4050fc:	4601      	mov	r1, r0
  4050fe:	4a54      	ldr	r2, [pc, #336]	; (405250 <_svfprintf_r+0x150c>)
  405100:	fb82 2403 	smull	r2, r4, r2, r3
  405104:	17da      	asrs	r2, r3, #31
  405106:	ebc2 04a4 	rsb	r4, r2, r4, asr #2
  40510a:	eb04 0284 	add.w	r2, r4, r4, lsl #2
  40510e:	2c09      	cmp	r4, #9
  405110:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
  405114:	4623      	mov	r3, r4
  405116:	f102 0230 	add.w	r2, r2, #48	; 0x30
  40511a:	f801 2d01 	strb.w	r2, [r1, #-1]!
  40511e:	dcee      	bgt.n	4050fe <_svfprintf_r+0x13ba>
  405120:	3330      	adds	r3, #48	; 0x30
  405122:	460a      	mov	r2, r1
  405124:	b2db      	uxtb	r3, r3
  405126:	f802 3d01 	strb.w	r3, [r2, #-1]!
  40512a:	4290      	cmp	r0, r2
  40512c:	d97e      	bls.n	40522c <_svfprintf_r+0x14e8>
  40512e:	460a      	mov	r2, r1
  405130:	f10d 047e 	add.w	r4, sp, #126	; 0x7e
  405134:	e001      	b.n	40513a <_svfprintf_r+0x13f6>
  405136:	f812 3b01 	ldrb.w	r3, [r2], #1
  40513a:	4282      	cmp	r2, r0
  40513c:	f804 3b01 	strb.w	r3, [r4], #1
  405140:	d1f9      	bne.n	405136 <_svfprintf_r+0x13f2>
  405142:	ab23      	add	r3, sp, #140	; 0x8c
  405144:	f10d 027e 	add.w	r2, sp, #126	; 0x7e
  405148:	1a5b      	subs	r3, r3, r1
  40514a:	4413      	add	r3, r2
  40514c:	aa1f      	add	r2, sp, #124	; 0x7c
  40514e:	1a9b      	subs	r3, r3, r2
  405150:	9a12      	ldr	r2, [sp, #72]	; 0x48
  405152:	2a01      	cmp	r2, #1
  405154:	9319      	str	r3, [sp, #100]	; 0x64
  405156:	eb02 0403 	add.w	r4, r2, r3
  40515a:	dd43      	ble.n	4051e4 <_svfprintf_r+0x14a0>
  40515c:	3401      	adds	r4, #1
  40515e:	2300      	movs	r3, #0
  405160:	9311      	str	r3, [sp, #68]	; 0x44
  405162:	ea24 7ce4 	bic.w	ip, r4, r4, asr #31
  405166:	e664      	b.n	404e32 <_svfprintf_r+0x10ee>
  405168:	9809      	ldr	r0, [sp, #36]	; 0x24
  40516a:	4649      	mov	r1, r9
  40516c:	aa23      	add	r2, sp, #140	; 0x8c
  40516e:	f002 ff77 	bl	408060 <__ssprint_r>
  405172:	2800      	cmp	r0, #0
  405174:	f47e aeab 	bne.w	403ece <_svfprintf_r+0x18a>
  405178:	9c1d      	ldr	r4, [sp, #116]	; 0x74
  40517a:	46c3      	mov	fp, r8
  40517c:	9a25      	ldr	r2, [sp, #148]	; 0x94
  40517e:	9b24      	ldr	r3, [sp, #144]	; 0x90
  405180:	e5a8      	b.n	404cd4 <_svfprintf_r+0xf90>
  405182:	9b14      	ldr	r3, [sp, #80]	; 0x50
  405184:	9f13      	ldr	r7, [sp, #76]	; 0x4c
  405186:	f103 4500 	add.w	r5, r3, #2147483648	; 0x80000000
  40518a:	232d      	movs	r3, #45	; 0x2d
  40518c:	930d      	str	r3, [sp, #52]	; 0x34
  40518e:	e69c      	b.n	404eca <_svfprintf_r+0x1186>
  405190:	9b11      	ldr	r3, [sp, #68]	; 0x44
  405192:	2b00      	cmp	r3, #0
  405194:	dd35      	ble.n	405202 <_svfprintf_r+0x14be>
  405196:	2401      	movs	r4, #1
  405198:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40519a:	441c      	add	r4, r3
  40519c:	ea24 7ce4 	bic.w	ip, r4, r4, asr #31
  4051a0:	e647      	b.n	404e32 <_svfprintf_r+0x10ee>
  4051a2:	4d2a      	ldr	r5, [pc, #168]	; (40524c <_svfprintf_r+0x1508>)
  4051a4:	e413      	b.n	4049ce <_svfprintf_r+0xc8a>
  4051a6:	9c1d      	ldr	r4, [sp, #116]	; 0x74
  4051a8:	e787      	b.n	4050ba <_svfprintf_r+0x1376>
  4051aa:	9b21      	ldr	r3, [sp, #132]	; 0x84
  4051ac:	e624      	b.n	404df8 <_svfprintf_r+0x10b4>
  4051ae:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4051b0:	1c5c      	adds	r4, r3, #1
  4051b2:	ea24 7ce4 	bic.w	ip, r4, r4, asr #31
  4051b6:	e63c      	b.n	404e32 <_svfprintf_r+0x10ee>
  4051b8:	4d24      	ldr	r5, [pc, #144]	; (40524c <_svfprintf_r+0x1508>)
  4051ba:	e420      	b.n	4049fe <_svfprintf_r+0xcba>
  4051bc:	3330      	adds	r3, #48	; 0x30
  4051be:	2230      	movs	r2, #48	; 0x30
  4051c0:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
  4051c4:	ab20      	add	r3, sp, #128	; 0x80
  4051c6:	f88d 207e 	strb.w	r2, [sp, #126]	; 0x7e
  4051ca:	e7bf      	b.n	40514c <_svfprintf_r+0x1408>
  4051cc:	f10c 0401 	add.w	r4, ip, #1
  4051d0:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4051d2:	441c      	add	r4, r3
  4051d4:	ea24 7ce4 	bic.w	ip, r4, r4, asr #31
  4051d8:	e62b      	b.n	404e32 <_svfprintf_r+0x10ee>
  4051da:	222d      	movs	r2, #45	; 0x2d
  4051dc:	425b      	negs	r3, r3
  4051de:	f88d 207d 	strb.w	r2, [sp, #125]	; 0x7d
  4051e2:	e787      	b.n	4050f4 <_svfprintf_r+0x13b0>
  4051e4:	9b06      	ldr	r3, [sp, #24]
  4051e6:	f013 0301 	ands.w	r3, r3, #1
  4051ea:	d0b9      	beq.n	405160 <_svfprintf_r+0x141c>
  4051ec:	e7b6      	b.n	40515c <_svfprintf_r+0x1418>
  4051ee:	f1bc 0f00 	cmp.w	ip, #0
  4051f2:	d109      	bne.n	405208 <_svfprintf_r+0x14c4>
  4051f4:	9b06      	ldr	r3, [sp, #24]
  4051f6:	07db      	lsls	r3, r3, #31
  4051f8:	d406      	bmi.n	405208 <_svfprintf_r+0x14c4>
  4051fa:	f04f 0c01 	mov.w	ip, #1
  4051fe:	4664      	mov	r4, ip
  405200:	e617      	b.n	404e32 <_svfprintf_r+0x10ee>
  405202:	f1c3 0402 	rsb	r4, r3, #2
  405206:	e7c7      	b.n	405198 <_svfprintf_r+0x1454>
  405208:	f10c 0402 	add.w	r4, ip, #2
  40520c:	ea24 7ce4 	bic.w	ip, r4, r4, asr #31
  405210:	e60f      	b.n	404e32 <_svfprintf_r+0x10ee>
  405212:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  405214:	785e      	ldrb	r6, [r3, #1]
  405216:	4628      	mov	r0, r5
  405218:	682c      	ldr	r4, [r5, #0]
  40521a:	3004      	adds	r0, #4
  40521c:	2c00      	cmp	r4, #0
  40521e:	900c      	str	r0, [sp, #48]	; 0x30
  405220:	f6be ade5 	bge.w	403dee <_svfprintf_r+0xaa>
  405224:	f04f 34ff 	mov.w	r4, #4294967295
  405228:	f7fe bde1 	b.w	403dee <_svfprintf_r+0xaa>
  40522c:	f10d 037e 	add.w	r3, sp, #126	; 0x7e
  405230:	e78c      	b.n	40514c <_svfprintf_r+0x1408>
  405232:	230c      	movs	r3, #12
  405234:	9a09      	ldr	r2, [sp, #36]	; 0x24
  405236:	f04f 30ff 	mov.w	r0, #4294967295
  40523a:	6013      	str	r3, [r2, #0]
  40523c:	f7fe be50 	b.w	403ee0 <_svfprintf_r+0x19c>
  405240:	4664      	mov	r4, ip
  405242:	e663      	b.n	404f0c <_svfprintf_r+0x11c8>
  405244:	00409490 	.word	0x00409490
  405248:	004094d8 	.word	0x004094d8
  40524c:	00409480 	.word	0x00409480
  405250:	66666667 	.word	0x66666667

00405254 <__swbuf_r>:
  405254:	b570      	push	{r4, r5, r6, lr}
  405256:	460d      	mov	r5, r1
  405258:	4614      	mov	r4, r2
  40525a:	4606      	mov	r6, r0
  40525c:	b110      	cbz	r0, 405264 <__swbuf_r+0x10>
  40525e:	6b83      	ldr	r3, [r0, #56]	; 0x38
  405260:	2b00      	cmp	r3, #0
  405262:	d048      	beq.n	4052f6 <__swbuf_r+0xa2>
  405264:	89a2      	ldrh	r2, [r4, #12]
  405266:	69a3      	ldr	r3, [r4, #24]
  405268:	b291      	uxth	r1, r2
  40526a:	60a3      	str	r3, [r4, #8]
  40526c:	0708      	lsls	r0, r1, #28
  40526e:	d538      	bpl.n	4052e2 <__swbuf_r+0x8e>
  405270:	6923      	ldr	r3, [r4, #16]
  405272:	2b00      	cmp	r3, #0
  405274:	d035      	beq.n	4052e2 <__swbuf_r+0x8e>
  405276:	0489      	lsls	r1, r1, #18
  405278:	b2ed      	uxtb	r5, r5
  40527a:	d515      	bpl.n	4052a8 <__swbuf_r+0x54>
  40527c:	6822      	ldr	r2, [r4, #0]
  40527e:	6961      	ldr	r1, [r4, #20]
  405280:	1ad3      	subs	r3, r2, r3
  405282:	428b      	cmp	r3, r1
  405284:	da1c      	bge.n	4052c0 <__swbuf_r+0x6c>
  405286:	3301      	adds	r3, #1
  405288:	68a1      	ldr	r1, [r4, #8]
  40528a:	1c50      	adds	r0, r2, #1
  40528c:	3901      	subs	r1, #1
  40528e:	6020      	str	r0, [r4, #0]
  405290:	60a1      	str	r1, [r4, #8]
  405292:	7015      	strb	r5, [r2, #0]
  405294:	6962      	ldr	r2, [r4, #20]
  405296:	429a      	cmp	r2, r3
  405298:	d01a      	beq.n	4052d0 <__swbuf_r+0x7c>
  40529a:	2d0a      	cmp	r5, #10
  40529c:	d102      	bne.n	4052a4 <__swbuf_r+0x50>
  40529e:	7b23      	ldrb	r3, [r4, #12]
  4052a0:	07db      	lsls	r3, r3, #31
  4052a2:	d415      	bmi.n	4052d0 <__swbuf_r+0x7c>
  4052a4:	4628      	mov	r0, r5
  4052a6:	bd70      	pop	{r4, r5, r6, pc}
  4052a8:	6e61      	ldr	r1, [r4, #100]	; 0x64
  4052aa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  4052ae:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  4052b2:	81a2      	strh	r2, [r4, #12]
  4052b4:	6822      	ldr	r2, [r4, #0]
  4052b6:	6661      	str	r1, [r4, #100]	; 0x64
  4052b8:	1ad3      	subs	r3, r2, r3
  4052ba:	6961      	ldr	r1, [r4, #20]
  4052bc:	428b      	cmp	r3, r1
  4052be:	dbe2      	blt.n	405286 <__swbuf_r+0x32>
  4052c0:	4630      	mov	r0, r6
  4052c2:	4621      	mov	r1, r4
  4052c4:	f001 f944 	bl	406550 <_fflush_r>
  4052c8:	b940      	cbnz	r0, 4052dc <__swbuf_r+0x88>
  4052ca:	6822      	ldr	r2, [r4, #0]
  4052cc:	2301      	movs	r3, #1
  4052ce:	e7db      	b.n	405288 <__swbuf_r+0x34>
  4052d0:	4630      	mov	r0, r6
  4052d2:	4621      	mov	r1, r4
  4052d4:	f001 f93c 	bl	406550 <_fflush_r>
  4052d8:	2800      	cmp	r0, #0
  4052da:	d0e3      	beq.n	4052a4 <__swbuf_r+0x50>
  4052dc:	f04f 30ff 	mov.w	r0, #4294967295
  4052e0:	bd70      	pop	{r4, r5, r6, pc}
  4052e2:	4630      	mov	r0, r6
  4052e4:	4621      	mov	r1, r4
  4052e6:	f000 f809 	bl	4052fc <__swsetup_r>
  4052ea:	2800      	cmp	r0, #0
  4052ec:	d1f6      	bne.n	4052dc <__swbuf_r+0x88>
  4052ee:	89a2      	ldrh	r2, [r4, #12]
  4052f0:	6923      	ldr	r3, [r4, #16]
  4052f2:	b291      	uxth	r1, r2
  4052f4:	e7bf      	b.n	405276 <__swbuf_r+0x22>
  4052f6:	f001 f9c5 	bl	406684 <__sinit>
  4052fa:	e7b3      	b.n	405264 <__swbuf_r+0x10>

004052fc <__swsetup_r>:
  4052fc:	b538      	push	{r3, r4, r5, lr}
  4052fe:	4b2f      	ldr	r3, [pc, #188]	; (4053bc <__swsetup_r+0xc0>)
  405300:	4605      	mov	r5, r0
  405302:	460c      	mov	r4, r1
  405304:	6818      	ldr	r0, [r3, #0]
  405306:	b110      	cbz	r0, 40530e <__swsetup_r+0x12>
  405308:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40530a:	2b00      	cmp	r3, #0
  40530c:	d036      	beq.n	40537c <__swsetup_r+0x80>
  40530e:	89a2      	ldrh	r2, [r4, #12]
  405310:	b293      	uxth	r3, r2
  405312:	0718      	lsls	r0, r3, #28
  405314:	d50b      	bpl.n	40532e <__swsetup_r+0x32>
  405316:	6920      	ldr	r0, [r4, #16]
  405318:	b1a0      	cbz	r0, 405344 <__swsetup_r+0x48>
  40531a:	f013 0201 	ands.w	r2, r3, #1
  40531e:	d11d      	bne.n	40535c <__swsetup_r+0x60>
  405320:	0799      	lsls	r1, r3, #30
  405322:	d400      	bmi.n	405326 <__swsetup_r+0x2a>
  405324:	6962      	ldr	r2, [r4, #20]
  405326:	60a2      	str	r2, [r4, #8]
  405328:	b1f8      	cbz	r0, 40536a <__swsetup_r+0x6e>
  40532a:	2000      	movs	r0, #0
  40532c:	bd38      	pop	{r3, r4, r5, pc}
  40532e:	06d9      	lsls	r1, r3, #27
  405330:	d53b      	bpl.n	4053aa <__swsetup_r+0xae>
  405332:	0758      	lsls	r0, r3, #29
  405334:	d425      	bmi.n	405382 <__swsetup_r+0x86>
  405336:	6920      	ldr	r0, [r4, #16]
  405338:	f042 0208 	orr.w	r2, r2, #8
  40533c:	b293      	uxth	r3, r2
  40533e:	81a2      	strh	r2, [r4, #12]
  405340:	2800      	cmp	r0, #0
  405342:	d1ea      	bne.n	40531a <__swsetup_r+0x1e>
  405344:	f403 7220 	and.w	r2, r3, #640	; 0x280
  405348:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  40534c:	d0e5      	beq.n	40531a <__swsetup_r+0x1e>
  40534e:	4628      	mov	r0, r5
  405350:	4621      	mov	r1, r4
  405352:	f001 fc9b 	bl	406c8c <__smakebuf_r>
  405356:	89a3      	ldrh	r3, [r4, #12]
  405358:	6920      	ldr	r0, [r4, #16]
  40535a:	e7de      	b.n	40531a <__swsetup_r+0x1e>
  40535c:	6963      	ldr	r3, [r4, #20]
  40535e:	2200      	movs	r2, #0
  405360:	425b      	negs	r3, r3
  405362:	60a2      	str	r2, [r4, #8]
  405364:	61a3      	str	r3, [r4, #24]
  405366:	2800      	cmp	r0, #0
  405368:	d1df      	bne.n	40532a <__swsetup_r+0x2e>
  40536a:	89a3      	ldrh	r3, [r4, #12]
  40536c:	061a      	lsls	r2, r3, #24
  40536e:	d5dd      	bpl.n	40532c <__swsetup_r+0x30>
  405370:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  405374:	f04f 30ff 	mov.w	r0, #4294967295
  405378:	81a3      	strh	r3, [r4, #12]
  40537a:	bd38      	pop	{r3, r4, r5, pc}
  40537c:	f001 f982 	bl	406684 <__sinit>
  405380:	e7c5      	b.n	40530e <__swsetup_r+0x12>
  405382:	6b21      	ldr	r1, [r4, #48]	; 0x30
  405384:	b149      	cbz	r1, 40539a <__swsetup_r+0x9e>
  405386:	f104 0340 	add.w	r3, r4, #64	; 0x40
  40538a:	4299      	cmp	r1, r3
  40538c:	d003      	beq.n	405396 <__swsetup_r+0x9a>
  40538e:	4628      	mov	r0, r5
  405390:	f001 f9e6 	bl	406760 <_free_r>
  405394:	89a2      	ldrh	r2, [r4, #12]
  405396:	2300      	movs	r3, #0
  405398:	6323      	str	r3, [r4, #48]	; 0x30
  40539a:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  40539e:	2300      	movs	r3, #0
  4053a0:	6920      	ldr	r0, [r4, #16]
  4053a2:	b292      	uxth	r2, r2
  4053a4:	e884 0009 	stmia.w	r4, {r0, r3}
  4053a8:	e7c6      	b.n	405338 <__swsetup_r+0x3c>
  4053aa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  4053ae:	2309      	movs	r3, #9
  4053b0:	f04f 30ff 	mov.w	r0, #4294967295
  4053b4:	602b      	str	r3, [r5, #0]
  4053b6:	81a2      	strh	r2, [r4, #12]
  4053b8:	bd38      	pop	{r3, r4, r5, pc}
  4053ba:	bf00      	nop
  4053bc:	204004b0 	.word	0x204004b0

004053c0 <register_fini>:
  4053c0:	4b02      	ldr	r3, [pc, #8]	; (4053cc <register_fini+0xc>)
  4053c2:	b113      	cbz	r3, 4053ca <register_fini+0xa>
  4053c4:	4802      	ldr	r0, [pc, #8]	; (4053d0 <register_fini+0x10>)
  4053c6:	f000 b805 	b.w	4053d4 <atexit>
  4053ca:	4770      	bx	lr
  4053cc:	00000000 	.word	0x00000000
  4053d0:	00406699 	.word	0x00406699

004053d4 <atexit>:
  4053d4:	4601      	mov	r1, r0
  4053d6:	2000      	movs	r0, #0
  4053d8:	4602      	mov	r2, r0
  4053da:	4603      	mov	r3, r0
  4053dc:	f002 bedc 	b.w	408198 <__register_exitproc>

004053e0 <quorem>:
  4053e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4053e4:	6903      	ldr	r3, [r0, #16]
  4053e6:	b083      	sub	sp, #12
  4053e8:	690f      	ldr	r7, [r1, #16]
  4053ea:	429f      	cmp	r7, r3
  4053ec:	f300 8093 	bgt.w	405516 <quorem+0x136>
  4053f0:	3f01      	subs	r7, #1
  4053f2:	f101 0614 	add.w	r6, r1, #20
  4053f6:	f100 0a14 	add.w	sl, r0, #20
  4053fa:	00bb      	lsls	r3, r7, #2
  4053fc:	f856 2027 	ldr.w	r2, [r6, r7, lsl #2]
  405400:	461d      	mov	r5, r3
  405402:	9300      	str	r3, [sp, #0]
  405404:	3201      	adds	r2, #1
  405406:	f85a 3027 	ldr.w	r3, [sl, r7, lsl #2]
  40540a:	eb0a 0405 	add.w	r4, sl, r5
  40540e:	eb06 0905 	add.w	r9, r6, r5
  405412:	fbb3 f8f2 	udiv	r8, r3, r2
  405416:	9401      	str	r4, [sp, #4]
  405418:	f1b8 0f00 	cmp.w	r8, #0
  40541c:	d040      	beq.n	4054a0 <quorem+0xc0>
  40541e:	2500      	movs	r5, #0
  405420:	46b4      	mov	ip, r6
  405422:	46d6      	mov	lr, sl
  405424:	462b      	mov	r3, r5
  405426:	f85c bb04 	ldr.w	fp, [ip], #4
  40542a:	f8de 2000 	ldr.w	r2, [lr]
  40542e:	fa1f f48b 	uxth.w	r4, fp
  405432:	45e1      	cmp	r9, ip
  405434:	ea4f 4b1b 	mov.w	fp, fp, lsr #16
  405438:	fb04 5508 	mla	r5, r4, r8, r5
  40543c:	fb0b fb08 	mul.w	fp, fp, r8
  405440:	b2ac      	uxth	r4, r5
  405442:	eb0b 4515 	add.w	r5, fp, r5, lsr #16
  405446:	eba3 0304 	sub.w	r3, r3, r4
  40544a:	fa1f fb85 	uxth.w	fp, r5
  40544e:	fa13 f482 	uxtah	r4, r3, r2
  405452:	ea4f 4515 	mov.w	r5, r5, lsr #16
  405456:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
  40545a:	fa1f fb84 	uxth.w	fp, r4
  40545e:	eb02 4324 	add.w	r3, r2, r4, asr #16
  405462:	ea4b 4203 	orr.w	r2, fp, r3, lsl #16
  405466:	ea4f 4323 	mov.w	r3, r3, asr #16
  40546a:	f84e 2b04 	str.w	r2, [lr], #4
  40546e:	d2da      	bcs.n	405426 <quorem+0x46>
  405470:	9b00      	ldr	r3, [sp, #0]
  405472:	f85a 3003 	ldr.w	r3, [sl, r3]
  405476:	b99b      	cbnz	r3, 4054a0 <quorem+0xc0>
  405478:	9c01      	ldr	r4, [sp, #4]
  40547a:	1f23      	subs	r3, r4, #4
  40547c:	459a      	cmp	sl, r3
  40547e:	d20e      	bcs.n	40549e <quorem+0xbe>
  405480:	f854 3c04 	ldr.w	r3, [r4, #-4]
  405484:	b95b      	cbnz	r3, 40549e <quorem+0xbe>
  405486:	f1a4 0308 	sub.w	r3, r4, #8
  40548a:	e001      	b.n	405490 <quorem+0xb0>
  40548c:	6812      	ldr	r2, [r2, #0]
  40548e:	b932      	cbnz	r2, 40549e <quorem+0xbe>
  405490:	459a      	cmp	sl, r3
  405492:	461a      	mov	r2, r3
  405494:	f107 37ff 	add.w	r7, r7, #4294967295
  405498:	f1a3 0304 	sub.w	r3, r3, #4
  40549c:	d3f6      	bcc.n	40548c <quorem+0xac>
  40549e:	6107      	str	r7, [r0, #16]
  4054a0:	4604      	mov	r4, r0
  4054a2:	f002 fa7f 	bl	4079a4 <__mcmp>
  4054a6:	2800      	cmp	r0, #0
  4054a8:	db31      	blt.n	40550e <quorem+0x12e>
  4054aa:	f108 0801 	add.w	r8, r8, #1
  4054ae:	4655      	mov	r5, sl
  4054b0:	2000      	movs	r0, #0
  4054b2:	f856 1b04 	ldr.w	r1, [r6], #4
  4054b6:	682a      	ldr	r2, [r5, #0]
  4054b8:	b28b      	uxth	r3, r1
  4054ba:	45b1      	cmp	r9, r6
  4054bc:	ea4f 4111 	mov.w	r1, r1, lsr #16
  4054c0:	eba0 0303 	sub.w	r3, r0, r3
  4054c4:	ebc1 4112 	rsb	r1, r1, r2, lsr #16
  4054c8:	fa13 f382 	uxtah	r3, r3, r2
  4054cc:	eb01 4223 	add.w	r2, r1, r3, asr #16
  4054d0:	b29b      	uxth	r3, r3
  4054d2:	ea4f 4022 	mov.w	r0, r2, asr #16
  4054d6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  4054da:	f845 3b04 	str.w	r3, [r5], #4
  4054de:	d2e8      	bcs.n	4054b2 <quorem+0xd2>
  4054e0:	f85a 2027 	ldr.w	r2, [sl, r7, lsl #2]
  4054e4:	eb0a 0387 	add.w	r3, sl, r7, lsl #2
  4054e8:	b98a      	cbnz	r2, 40550e <quorem+0x12e>
  4054ea:	1f1a      	subs	r2, r3, #4
  4054ec:	4592      	cmp	sl, r2
  4054ee:	d20d      	bcs.n	40550c <quorem+0x12c>
  4054f0:	f853 2c04 	ldr.w	r2, [r3, #-4]
  4054f4:	b952      	cbnz	r2, 40550c <quorem+0x12c>
  4054f6:	3b08      	subs	r3, #8
  4054f8:	e001      	b.n	4054fe <quorem+0x11e>
  4054fa:	6812      	ldr	r2, [r2, #0]
  4054fc:	b932      	cbnz	r2, 40550c <quorem+0x12c>
  4054fe:	459a      	cmp	sl, r3
  405500:	461a      	mov	r2, r3
  405502:	f107 37ff 	add.w	r7, r7, #4294967295
  405506:	f1a3 0304 	sub.w	r3, r3, #4
  40550a:	d3f6      	bcc.n	4054fa <quorem+0x11a>
  40550c:	6127      	str	r7, [r4, #16]
  40550e:	4640      	mov	r0, r8
  405510:	b003      	add	sp, #12
  405512:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405516:	2000      	movs	r0, #0
  405518:	b003      	add	sp, #12
  40551a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40551e:	bf00      	nop

00405520 <_dtoa_r>:
  405520:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405524:	469b      	mov	fp, r3
  405526:	b099      	sub	sp, #100	; 0x64
  405528:	6c03      	ldr	r3, [r0, #64]	; 0x40
  40552a:	4604      	mov	r4, r0
  40552c:	4692      	mov	sl, r2
  40552e:	9d25      	ldr	r5, [sp, #148]	; 0x94
  405530:	b14b      	cbz	r3, 405546 <_dtoa_r+0x26>
  405532:	6c46      	ldr	r6, [r0, #68]	; 0x44
  405534:	2201      	movs	r2, #1
  405536:	4619      	mov	r1, r3
  405538:	40b2      	lsls	r2, r6
  40553a:	605e      	str	r6, [r3, #4]
  40553c:	609a      	str	r2, [r3, #8]
  40553e:	f002 f83b 	bl	4075b8 <_Bfree>
  405542:	2300      	movs	r3, #0
  405544:	6423      	str	r3, [r4, #64]	; 0x40
  405546:	f1bb 0f00 	cmp.w	fp, #0
  40554a:	46d9      	mov	r9, fp
  40554c:	db33      	blt.n	4055b6 <_dtoa_r+0x96>
  40554e:	2300      	movs	r3, #0
  405550:	602b      	str	r3, [r5, #0]
  405552:	4b99      	ldr	r3, [pc, #612]	; (4057b8 <_dtoa_r+0x298>)
  405554:	461a      	mov	r2, r3
  405556:	ea09 0303 	and.w	r3, r9, r3
  40555a:	4293      	cmp	r3, r2
  40555c:	d014      	beq.n	405588 <_dtoa_r+0x68>
  40555e:	2200      	movs	r2, #0
  405560:	2300      	movs	r3, #0
  405562:	4650      	mov	r0, sl
  405564:	4659      	mov	r1, fp
  405566:	f003 fb5d 	bl	408c24 <__aeabi_dcmpeq>
  40556a:	4680      	mov	r8, r0
  40556c:	b348      	cbz	r0, 4055c2 <_dtoa_r+0xa2>
  40556e:	2301      	movs	r3, #1
  405570:	9a24      	ldr	r2, [sp, #144]	; 0x90
  405572:	6013      	str	r3, [r2, #0]
  405574:	9b26      	ldr	r3, [sp, #152]	; 0x98
  405576:	2b00      	cmp	r3, #0
  405578:	f000 80cb 	beq.w	405712 <_dtoa_r+0x1f2>
  40557c:	488f      	ldr	r0, [pc, #572]	; (4057bc <_dtoa_r+0x29c>)
  40557e:	6018      	str	r0, [r3, #0]
  405580:	3801      	subs	r0, #1
  405582:	b019      	add	sp, #100	; 0x64
  405584:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405588:	f242 730f 	movw	r3, #9999	; 0x270f
  40558c:	9a24      	ldr	r2, [sp, #144]	; 0x90
  40558e:	6013      	str	r3, [r2, #0]
  405590:	f1ba 0f00 	cmp.w	sl, #0
  405594:	f000 80a6 	beq.w	4056e4 <_dtoa_r+0x1c4>
  405598:	4889      	ldr	r0, [pc, #548]	; (4057c0 <_dtoa_r+0x2a0>)
  40559a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40559c:	2b00      	cmp	r3, #0
  40559e:	d0f0      	beq.n	405582 <_dtoa_r+0x62>
  4055a0:	78c3      	ldrb	r3, [r0, #3]
  4055a2:	2b00      	cmp	r3, #0
  4055a4:	f000 80b7 	beq.w	405716 <_dtoa_r+0x1f6>
  4055a8:	f100 0308 	add.w	r3, r0, #8
  4055ac:	9a26      	ldr	r2, [sp, #152]	; 0x98
  4055ae:	6013      	str	r3, [r2, #0]
  4055b0:	b019      	add	sp, #100	; 0x64
  4055b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4055b6:	2301      	movs	r3, #1
  4055b8:	f02b 4900 	bic.w	r9, fp, #2147483648	; 0x80000000
  4055bc:	602b      	str	r3, [r5, #0]
  4055be:	46cb      	mov	fp, r9
  4055c0:	e7c7      	b.n	405552 <_dtoa_r+0x32>
  4055c2:	ad17      	add	r5, sp, #92	; 0x5c
  4055c4:	a916      	add	r1, sp, #88	; 0x58
  4055c6:	4620      	mov	r0, r4
  4055c8:	4652      	mov	r2, sl
  4055ca:	9500      	str	r5, [sp, #0]
  4055cc:	465b      	mov	r3, fp
  4055ce:	9101      	str	r1, [sp, #4]
  4055d0:	f002 fa7e 	bl	407ad0 <__d2b>
  4055d4:	9006      	str	r0, [sp, #24]
  4055d6:	ea5f 5519 	movs.w	r5, r9, lsr #20
  4055da:	f040 808c 	bne.w	4056f6 <_dtoa_r+0x1d6>
  4055de:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
  4055e2:	f46f 6382 	mvn.w	r3, #1040	; 0x410
  4055e6:	9d17      	ldr	r5, [sp, #92]	; 0x5c
  4055e8:	4445      	add	r5, r8
  4055ea:	429d      	cmp	r5, r3
  4055ec:	f2c0 81cc 	blt.w	405988 <_dtoa_r+0x468>
  4055f0:	331f      	adds	r3, #31
  4055f2:	f205 4212 	addw	r2, r5, #1042	; 0x412
  4055f6:	1b5b      	subs	r3, r3, r5
  4055f8:	fa2a f002 	lsr.w	r0, sl, r2
  4055fc:	fa09 f903 	lsl.w	r9, r9, r3
  405600:	ea49 0000 	orr.w	r0, r9, r0
  405604:	f003 f830 	bl	408668 <__aeabi_ui2d>
  405608:	3d01      	subs	r5, #1
  40560a:	2301      	movs	r3, #1
  40560c:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
  405610:	9311      	str	r3, [sp, #68]	; 0x44
  405612:	2200      	movs	r2, #0
  405614:	4b6b      	ldr	r3, [pc, #428]	; (4057c4 <_dtoa_r+0x2a4>)
  405616:	f002 fee9 	bl	4083ec <__aeabi_dsub>
  40561a:	a361      	add	r3, pc, #388	; (adr r3, 4057a0 <_dtoa_r+0x280>)
  40561c:	e9d3 2300 	ldrd	r2, r3, [r3]
  405620:	f003 f898 	bl	408754 <__aeabi_dmul>
  405624:	a360      	add	r3, pc, #384	; (adr r3, 4057a8 <_dtoa_r+0x288>)
  405626:	e9d3 2300 	ldrd	r2, r3, [r3]
  40562a:	f002 fee1 	bl	4083f0 <__adddf3>
  40562e:	4606      	mov	r6, r0
  405630:	460f      	mov	r7, r1
  405632:	4628      	mov	r0, r5
  405634:	f003 f828 	bl	408688 <__aeabi_i2d>
  405638:	a35d      	add	r3, pc, #372	; (adr r3, 4057b0 <_dtoa_r+0x290>)
  40563a:	e9d3 2300 	ldrd	r2, r3, [r3]
  40563e:	f003 f889 	bl	408754 <__aeabi_dmul>
  405642:	4602      	mov	r2, r0
  405644:	460b      	mov	r3, r1
  405646:	4630      	mov	r0, r6
  405648:	4639      	mov	r1, r7
  40564a:	f002 fed1 	bl	4083f0 <__adddf3>
  40564e:	4606      	mov	r6, r0
  405650:	460f      	mov	r7, r1
  405652:	f003 fb19 	bl	408c88 <__aeabi_d2iz>
  405656:	2200      	movs	r2, #0
  405658:	9002      	str	r0, [sp, #8]
  40565a:	4639      	mov	r1, r7
  40565c:	4630      	mov	r0, r6
  40565e:	2300      	movs	r3, #0
  405660:	f003 faea 	bl	408c38 <__aeabi_dcmplt>
  405664:	2800      	cmp	r0, #0
  405666:	f040 8171 	bne.w	40594c <_dtoa_r+0x42c>
  40566a:	9b02      	ldr	r3, [sp, #8]
  40566c:	2b16      	cmp	r3, #22
  40566e:	f200 8091 	bhi.w	405794 <_dtoa_r+0x274>
  405672:	9802      	ldr	r0, [sp, #8]
  405674:	4652      	mov	r2, sl
  405676:	4954      	ldr	r1, [pc, #336]	; (4057c8 <_dtoa_r+0x2a8>)
  405678:	465b      	mov	r3, fp
  40567a:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
  40567e:	e9d1 0100 	ldrd	r0, r1, [r1]
  405682:	f003 faf7 	bl	408c74 <__aeabi_dcmpgt>
  405686:	2800      	cmp	r0, #0
  405688:	f000 817c 	beq.w	405984 <_dtoa_r+0x464>
  40568c:	9b02      	ldr	r3, [sp, #8]
  40568e:	3b01      	subs	r3, #1
  405690:	9302      	str	r3, [sp, #8]
  405692:	2300      	movs	r3, #0
  405694:	930d      	str	r3, [sp, #52]	; 0x34
  405696:	ebc5 0508 	rsb	r5, r5, r8
  40569a:	1e6b      	subs	r3, r5, #1
  40569c:	9303      	str	r3, [sp, #12]
  40569e:	f100 816c 	bmi.w	40597a <_dtoa_r+0x45a>
  4056a2:	2300      	movs	r3, #0
  4056a4:	9307      	str	r3, [sp, #28]
  4056a6:	9b02      	ldr	r3, [sp, #8]
  4056a8:	2b00      	cmp	r3, #0
  4056aa:	f2c0 815d 	blt.w	405968 <_dtoa_r+0x448>
  4056ae:	9a03      	ldr	r2, [sp, #12]
  4056b0:	930c      	str	r3, [sp, #48]	; 0x30
  4056b2:	4611      	mov	r1, r2
  4056b4:	4419      	add	r1, r3
  4056b6:	2300      	movs	r3, #0
  4056b8:	9103      	str	r1, [sp, #12]
  4056ba:	930a      	str	r3, [sp, #40]	; 0x28
  4056bc:	9b22      	ldr	r3, [sp, #136]	; 0x88
  4056be:	2b09      	cmp	r3, #9
  4056c0:	d82b      	bhi.n	40571a <_dtoa_r+0x1fa>
  4056c2:	2b05      	cmp	r3, #5
  4056c4:	f340 867e 	ble.w	4063c4 <_dtoa_r+0xea4>
  4056c8:	3b04      	subs	r3, #4
  4056ca:	2500      	movs	r5, #0
  4056cc:	9322      	str	r3, [sp, #136]	; 0x88
  4056ce:	9b22      	ldr	r3, [sp, #136]	; 0x88
  4056d0:	3b02      	subs	r3, #2
  4056d2:	2b03      	cmp	r3, #3
  4056d4:	f200 8679 	bhi.w	4063ca <_dtoa_r+0xeaa>
  4056d8:	e8df f013 	tbh	[pc, r3, lsl #1]
  4056dc:	0289029b 	.word	0x0289029b
  4056e0:	068d0180 	.word	0x068d0180
  4056e4:	f3c9 0013 	ubfx	r0, r9, #0, #20
  4056e8:	4b35      	ldr	r3, [pc, #212]	; (4057c0 <_dtoa_r+0x2a0>)
  4056ea:	4a38      	ldr	r2, [pc, #224]	; (4057cc <_dtoa_r+0x2ac>)
  4056ec:	2800      	cmp	r0, #0
  4056ee:	bf14      	ite	ne
  4056f0:	4618      	movne	r0, r3
  4056f2:	4610      	moveq	r0, r2
  4056f4:	e751      	b.n	40559a <_dtoa_r+0x7a>
  4056f6:	f3cb 0313 	ubfx	r3, fp, #0, #20
  4056fa:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
  4056fe:	4650      	mov	r0, sl
  405700:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
  405704:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
  405708:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
  40570c:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
  405710:	e77f      	b.n	405612 <_dtoa_r+0xf2>
  405712:	482f      	ldr	r0, [pc, #188]	; (4057d0 <_dtoa_r+0x2b0>)
  405714:	e735      	b.n	405582 <_dtoa_r+0x62>
  405716:	1cc3      	adds	r3, r0, #3
  405718:	e748      	b.n	4055ac <_dtoa_r+0x8c>
  40571a:	f04f 33ff 	mov.w	r3, #4294967295
  40571e:	2100      	movs	r1, #0
  405720:	4620      	mov	r0, r4
  405722:	461d      	mov	r5, r3
  405724:	9310      	str	r3, [sp, #64]	; 0x40
  405726:	2301      	movs	r3, #1
  405728:	6461      	str	r1, [r4, #68]	; 0x44
  40572a:	9123      	str	r1, [sp, #140]	; 0x8c
  40572c:	930b      	str	r3, [sp, #44]	; 0x2c
  40572e:	f001 ff1b 	bl	407568 <_Balloc>
  405732:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  405734:	9005      	str	r0, [sp, #20]
  405736:	9322      	str	r3, [sp, #136]	; 0x88
  405738:	9504      	str	r5, [sp, #16]
  40573a:	6420      	str	r0, [r4, #64]	; 0x40
  40573c:	9a02      	ldr	r2, [sp, #8]
  40573e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  405740:	2a0e      	cmp	r2, #14
  405742:	dc49      	bgt.n	4057d8 <_dtoa_r+0x2b8>
  405744:	2b00      	cmp	r3, #0
  405746:	db47      	blt.n	4057d8 <_dtoa_r+0x2b8>
  405748:	4b1f      	ldr	r3, [pc, #124]	; (4057c8 <_dtoa_r+0x2a8>)
  40574a:	9a02      	ldr	r2, [sp, #8]
  40574c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  405750:	e9d3 8900 	ldrd	r8, r9, [r3]
  405754:	9b04      	ldr	r3, [sp, #16]
  405756:	2b00      	cmp	r3, #0
  405758:	f300 825e 	bgt.w	405c18 <_dtoa_r+0x6f8>
  40575c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  40575e:	2b00      	cmp	r3, #0
  405760:	f280 825a 	bge.w	405c18 <_dtoa_r+0x6f8>
  405764:	9b04      	ldr	r3, [sp, #16]
  405766:	2b00      	cmp	r3, #0
  405768:	f040 85bf 	bne.w	4062ea <_dtoa_r+0xdca>
  40576c:	2200      	movs	r2, #0
  40576e:	4b19      	ldr	r3, [pc, #100]	; (4057d4 <_dtoa_r+0x2b4>)
  405770:	4640      	mov	r0, r8
  405772:	4649      	mov	r1, r9
  405774:	f002 ffee 	bl	408754 <__aeabi_dmul>
  405778:	4652      	mov	r2, sl
  40577a:	465b      	mov	r3, fp
  40577c:	f003 fa70 	bl	408c60 <__aeabi_dcmpge>
  405780:	9f04      	ldr	r7, [sp, #16]
  405782:	9708      	str	r7, [sp, #32]
  405784:	2800      	cmp	r0, #0
  405786:	f000 80bd 	beq.w	405904 <_dtoa_r+0x3e4>
  40578a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  40578c:	9d05      	ldr	r5, [sp, #20]
  40578e:	43db      	mvns	r3, r3
  405790:	9302      	str	r3, [sp, #8]
  405792:	e0be      	b.n	405912 <_dtoa_r+0x3f2>
  405794:	2301      	movs	r3, #1
  405796:	930d      	str	r3, [sp, #52]	; 0x34
  405798:	e77d      	b.n	405696 <_dtoa_r+0x176>
  40579a:	bf00      	nop
  40579c:	f3af 8000 	nop.w
  4057a0:	636f4361 	.word	0x636f4361
  4057a4:	3fd287a7 	.word	0x3fd287a7
  4057a8:	8b60c8b3 	.word	0x8b60c8b3
  4057ac:	3fc68a28 	.word	0x3fc68a28
  4057b0:	509f79fb 	.word	0x509f79fb
  4057b4:	3fd34413 	.word	0x3fd34413
  4057b8:	7ff00000 	.word	0x7ff00000
  4057bc:	004094e1 	.word	0x004094e1
  4057c0:	004094f0 	.word	0x004094f0
  4057c4:	3ff80000 	.word	0x3ff80000
  4057c8:	00409500 	.word	0x00409500
  4057cc:	004094e4 	.word	0x004094e4
  4057d0:	004094e0 	.word	0x004094e0
  4057d4:	40140000 	.word	0x40140000
  4057d8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  4057da:	2a00      	cmp	r2, #0
  4057dc:	f040 80e1 	bne.w	4059a2 <_dtoa_r+0x482>
  4057e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  4057e2:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  4057e4:	9d07      	ldr	r5, [sp, #28]
  4057e6:	9308      	str	r3, [sp, #32]
  4057e8:	9903      	ldr	r1, [sp, #12]
  4057ea:	2900      	cmp	r1, #0
  4057ec:	460b      	mov	r3, r1
  4057ee:	dd0a      	ble.n	405806 <_dtoa_r+0x2e6>
  4057f0:	2d00      	cmp	r5, #0
  4057f2:	dd08      	ble.n	405806 <_dtoa_r+0x2e6>
  4057f4:	42a9      	cmp	r1, r5
  4057f6:	9a07      	ldr	r2, [sp, #28]
  4057f8:	bfa8      	it	ge
  4057fa:	462b      	movge	r3, r5
  4057fc:	1ad2      	subs	r2, r2, r3
  4057fe:	1aed      	subs	r5, r5, r3
  405800:	1acb      	subs	r3, r1, r3
  405802:	9207      	str	r2, [sp, #28]
  405804:	9303      	str	r3, [sp, #12]
  405806:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405808:	2b00      	cmp	r3, #0
  40580a:	dd1b      	ble.n	405844 <_dtoa_r+0x324>
  40580c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40580e:	2b00      	cmp	r3, #0
  405810:	f000 84ce 	beq.w	4061b0 <_dtoa_r+0xc90>
  405814:	2e00      	cmp	r6, #0
  405816:	dd11      	ble.n	40583c <_dtoa_r+0x31c>
  405818:	9908      	ldr	r1, [sp, #32]
  40581a:	4632      	mov	r2, r6
  40581c:	4620      	mov	r0, r4
  40581e:	f002 f817 	bl	407850 <__pow5mult>
  405822:	9f06      	ldr	r7, [sp, #24]
  405824:	4601      	mov	r1, r0
  405826:	9008      	str	r0, [sp, #32]
  405828:	463a      	mov	r2, r7
  40582a:	4620      	mov	r0, r4
  40582c:	f001 ff6e 	bl	40770c <__multiply>
  405830:	4603      	mov	r3, r0
  405832:	4639      	mov	r1, r7
  405834:	4620      	mov	r0, r4
  405836:	9306      	str	r3, [sp, #24]
  405838:	f001 febe 	bl	4075b8 <_Bfree>
  40583c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40583e:	1b9a      	subs	r2, r3, r6
  405840:	f040 84ff 	bne.w	406242 <_dtoa_r+0xd22>
  405844:	4620      	mov	r0, r4
  405846:	2101      	movs	r1, #1
  405848:	f001 ff56 	bl	4076f8 <__i2b>
  40584c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40584e:	4607      	mov	r7, r0
  405850:	2b00      	cmp	r3, #0
  405852:	f340 8282 	ble.w	405d5a <_dtoa_r+0x83a>
  405856:	4601      	mov	r1, r0
  405858:	461a      	mov	r2, r3
  40585a:	4620      	mov	r0, r4
  40585c:	f001 fff8 	bl	407850 <__pow5mult>
  405860:	9b22      	ldr	r3, [sp, #136]	; 0x88
  405862:	4607      	mov	r7, r0
  405864:	2b01      	cmp	r3, #1
  405866:	f340 84f3 	ble.w	406250 <_dtoa_r+0xd30>
  40586a:	f04f 0800 	mov.w	r8, #0
  40586e:	693b      	ldr	r3, [r7, #16]
  405870:	eb07 0383 	add.w	r3, r7, r3, lsl #2
  405874:	6918      	ldr	r0, [r3, #16]
  405876:	f001 feeb 	bl	407650 <__hi0bits>
  40587a:	f1c0 0020 	rsb	r0, r0, #32
  40587e:	9b03      	ldr	r3, [sp, #12]
  405880:	4418      	add	r0, r3
  405882:	f010 001f 	ands.w	r0, r0, #31
  405886:	f000 82a0 	beq.w	405dca <_dtoa_r+0x8aa>
  40588a:	f1c0 0320 	rsb	r3, r0, #32
  40588e:	2b04      	cmp	r3, #4
  405890:	f340 8592 	ble.w	4063b8 <_dtoa_r+0xe98>
  405894:	f1c0 001c 	rsb	r0, r0, #28
  405898:	9b07      	ldr	r3, [sp, #28]
  40589a:	4405      	add	r5, r0
  40589c:	4403      	add	r3, r0
  40589e:	9307      	str	r3, [sp, #28]
  4058a0:	9b03      	ldr	r3, [sp, #12]
  4058a2:	4403      	add	r3, r0
  4058a4:	9303      	str	r3, [sp, #12]
  4058a6:	9b07      	ldr	r3, [sp, #28]
  4058a8:	2b00      	cmp	r3, #0
  4058aa:	dd05      	ble.n	4058b8 <_dtoa_r+0x398>
  4058ac:	9906      	ldr	r1, [sp, #24]
  4058ae:	461a      	mov	r2, r3
  4058b0:	4620      	mov	r0, r4
  4058b2:	f002 f81d 	bl	4078f0 <__lshift>
  4058b6:	9006      	str	r0, [sp, #24]
  4058b8:	9b03      	ldr	r3, [sp, #12]
  4058ba:	2b00      	cmp	r3, #0
  4058bc:	dd05      	ble.n	4058ca <_dtoa_r+0x3aa>
  4058be:	4639      	mov	r1, r7
  4058c0:	461a      	mov	r2, r3
  4058c2:	4620      	mov	r0, r4
  4058c4:	f002 f814 	bl	4078f0 <__lshift>
  4058c8:	4607      	mov	r7, r0
  4058ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4058cc:	2b00      	cmp	r3, #0
  4058ce:	f040 838b 	bne.w	405fe8 <_dtoa_r+0xac8>
  4058d2:	9b22      	ldr	r3, [sp, #136]	; 0x88
  4058d4:	2b02      	cmp	r3, #2
  4058d6:	f340 827a 	ble.w	405dce <_dtoa_r+0x8ae>
  4058da:	9b04      	ldr	r3, [sp, #16]
  4058dc:	2b00      	cmp	r3, #0
  4058de:	f300 8276 	bgt.w	405dce <_dtoa_r+0x8ae>
  4058e2:	9b04      	ldr	r3, [sp, #16]
  4058e4:	2b00      	cmp	r3, #0
  4058e6:	f47f af50 	bne.w	40578a <_dtoa_r+0x26a>
  4058ea:	4639      	mov	r1, r7
  4058ec:	2205      	movs	r2, #5
  4058ee:	4620      	mov	r0, r4
  4058f0:	f001 fe6c 	bl	4075cc <__multadd>
  4058f4:	4607      	mov	r7, r0
  4058f6:	9806      	ldr	r0, [sp, #24]
  4058f8:	4639      	mov	r1, r7
  4058fa:	f002 f853 	bl	4079a4 <__mcmp>
  4058fe:	2800      	cmp	r0, #0
  405900:	f77f af43 	ble.w	40578a <_dtoa_r+0x26a>
  405904:	9a02      	ldr	r2, [sp, #8]
  405906:	2331      	movs	r3, #49	; 0x31
  405908:	3201      	adds	r2, #1
  40590a:	9202      	str	r2, [sp, #8]
  40590c:	9a05      	ldr	r2, [sp, #20]
  40590e:	1c55      	adds	r5, r2, #1
  405910:	7013      	strb	r3, [r2, #0]
  405912:	4639      	mov	r1, r7
  405914:	4620      	mov	r0, r4
  405916:	f001 fe4f 	bl	4075b8 <_Bfree>
  40591a:	9b08      	ldr	r3, [sp, #32]
  40591c:	b11b      	cbz	r3, 405926 <_dtoa_r+0x406>
  40591e:	9908      	ldr	r1, [sp, #32]
  405920:	4620      	mov	r0, r4
  405922:	f001 fe49 	bl	4075b8 <_Bfree>
  405926:	4620      	mov	r0, r4
  405928:	9906      	ldr	r1, [sp, #24]
  40592a:	f001 fe45 	bl	4075b8 <_Bfree>
  40592e:	2200      	movs	r2, #0
  405930:	9b02      	ldr	r3, [sp, #8]
  405932:	702a      	strb	r2, [r5, #0]
  405934:	3301      	adds	r3, #1
  405936:	9a24      	ldr	r2, [sp, #144]	; 0x90
  405938:	6013      	str	r3, [r2, #0]
  40593a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40593c:	2b00      	cmp	r3, #0
  40593e:	f000 82a3 	beq.w	405e88 <_dtoa_r+0x968>
  405942:	9805      	ldr	r0, [sp, #20]
  405944:	601d      	str	r5, [r3, #0]
  405946:	b019      	add	sp, #100	; 0x64
  405948:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40594c:	9802      	ldr	r0, [sp, #8]
  40594e:	f002 fe9b 	bl	408688 <__aeabi_i2d>
  405952:	4632      	mov	r2, r6
  405954:	463b      	mov	r3, r7
  405956:	f003 f965 	bl	408c24 <__aeabi_dcmpeq>
  40595a:	2800      	cmp	r0, #0
  40595c:	f47f ae85 	bne.w	40566a <_dtoa_r+0x14a>
  405960:	9b02      	ldr	r3, [sp, #8]
  405962:	3b01      	subs	r3, #1
  405964:	9302      	str	r3, [sp, #8]
  405966:	e680      	b.n	40566a <_dtoa_r+0x14a>
  405968:	9a07      	ldr	r2, [sp, #28]
  40596a:	9b02      	ldr	r3, [sp, #8]
  40596c:	1ad2      	subs	r2, r2, r3
  40596e:	425b      	negs	r3, r3
  405970:	930a      	str	r3, [sp, #40]	; 0x28
  405972:	2300      	movs	r3, #0
  405974:	9207      	str	r2, [sp, #28]
  405976:	930c      	str	r3, [sp, #48]	; 0x30
  405978:	e6a0      	b.n	4056bc <_dtoa_r+0x19c>
  40597a:	425b      	negs	r3, r3
  40597c:	9307      	str	r3, [sp, #28]
  40597e:	2300      	movs	r3, #0
  405980:	9303      	str	r3, [sp, #12]
  405982:	e690      	b.n	4056a6 <_dtoa_r+0x186>
  405984:	900d      	str	r0, [sp, #52]	; 0x34
  405986:	e686      	b.n	405696 <_dtoa_r+0x176>
  405988:	4bbd      	ldr	r3, [pc, #756]	; (405c80 <_dtoa_r+0x760>)
  40598a:	1b5b      	subs	r3, r3, r5
  40598c:	fa0a f003 	lsl.w	r0, sl, r3
  405990:	e638      	b.n	405604 <_dtoa_r+0xe4>
  405992:	2100      	movs	r1, #0
  405994:	f04f 32ff 	mov.w	r2, #4294967295
  405998:	9123      	str	r1, [sp, #140]	; 0x8c
  40599a:	2101      	movs	r1, #1
  40599c:	9204      	str	r2, [sp, #16]
  40599e:	910b      	str	r1, [sp, #44]	; 0x2c
  4059a0:	9210      	str	r2, [sp, #64]	; 0x40
  4059a2:	9a22      	ldr	r2, [sp, #136]	; 0x88
  4059a4:	2a01      	cmp	r2, #1
  4059a6:	f340 8460 	ble.w	40626a <_dtoa_r+0xd4a>
  4059aa:	9b04      	ldr	r3, [sp, #16]
  4059ac:	1e5e      	subs	r6, r3, #1
  4059ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4059b0:	42b3      	cmp	r3, r6
  4059b2:	f2c0 8405 	blt.w	4061c0 <_dtoa_r+0xca0>
  4059b6:	1b9e      	subs	r6, r3, r6
  4059b8:	9b04      	ldr	r3, [sp, #16]
  4059ba:	2b00      	cmp	r3, #0
  4059bc:	f2c0 8461 	blt.w	406282 <_dtoa_r+0xd62>
  4059c0:	9d07      	ldr	r5, [sp, #28]
  4059c2:	9b04      	ldr	r3, [sp, #16]
  4059c4:	9a07      	ldr	r2, [sp, #28]
  4059c6:	4620      	mov	r0, r4
  4059c8:	2101      	movs	r1, #1
  4059ca:	441a      	add	r2, r3
  4059cc:	9207      	str	r2, [sp, #28]
  4059ce:	9a03      	ldr	r2, [sp, #12]
  4059d0:	441a      	add	r2, r3
  4059d2:	9203      	str	r2, [sp, #12]
  4059d4:	f001 fe90 	bl	4076f8 <__i2b>
  4059d8:	9008      	str	r0, [sp, #32]
  4059da:	e705      	b.n	4057e8 <_dtoa_r+0x2c8>
  4059dc:	2301      	movs	r3, #1
  4059de:	930b      	str	r3, [sp, #44]	; 0x2c
  4059e0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  4059e2:	2b00      	cmp	r3, #0
  4059e4:	f340 83df 	ble.w	4061a6 <_dtoa_r+0xc86>
  4059e8:	2b0e      	cmp	r3, #14
  4059ea:	bf8c      	ite	hi
  4059ec:	2500      	movhi	r5, #0
  4059ee:	f005 0501 	andls.w	r5, r5, #1
  4059f2:	461e      	mov	r6, r3
  4059f4:	9310      	str	r3, [sp, #64]	; 0x40
  4059f6:	9304      	str	r3, [sp, #16]
  4059f8:	2100      	movs	r1, #0
  4059fa:	2e17      	cmp	r6, #23
  4059fc:	6461      	str	r1, [r4, #68]	; 0x44
  4059fe:	d909      	bls.n	405a14 <_dtoa_r+0x4f4>
  405a00:	2201      	movs	r2, #1
  405a02:	2304      	movs	r3, #4
  405a04:	005b      	lsls	r3, r3, #1
  405a06:	4611      	mov	r1, r2
  405a08:	3201      	adds	r2, #1
  405a0a:	f103 0014 	add.w	r0, r3, #20
  405a0e:	42b0      	cmp	r0, r6
  405a10:	d9f8      	bls.n	405a04 <_dtoa_r+0x4e4>
  405a12:	6461      	str	r1, [r4, #68]	; 0x44
  405a14:	4620      	mov	r0, r4
  405a16:	f001 fda7 	bl	407568 <_Balloc>
  405a1a:	9005      	str	r0, [sp, #20]
  405a1c:	6420      	str	r0, [r4, #64]	; 0x40
  405a1e:	2d00      	cmp	r5, #0
  405a20:	f43f ae8c 	beq.w	40573c <_dtoa_r+0x21c>
  405a24:	9802      	ldr	r0, [sp, #8]
  405a26:	2800      	cmp	r0, #0
  405a28:	e9cd ab0e 	strd	sl, fp, [sp, #56]	; 0x38
  405a2c:	f340 8233 	ble.w	405e96 <_dtoa_r+0x976>
  405a30:	4a94      	ldr	r2, [pc, #592]	; (405c84 <_dtoa_r+0x764>)
  405a32:	f000 030f 	and.w	r3, r0, #15
  405a36:	1105      	asrs	r5, r0, #4
  405a38:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
  405a3c:	06ea      	lsls	r2, r5, #27
  405a3e:	e9d3 6700 	ldrd	r6, r7, [r3]
  405a42:	f140 821c 	bpl.w	405e7e <_dtoa_r+0x95e>
  405a46:	4b90      	ldr	r3, [pc, #576]	; (405c88 <_dtoa_r+0x768>)
  405a48:	4650      	mov	r0, sl
  405a4a:	4659      	mov	r1, fp
  405a4c:	f005 050f 	and.w	r5, r5, #15
  405a50:	f04f 0803 	mov.w	r8, #3
  405a54:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
  405a58:	f002 ffa6 	bl	4089a8 <__aeabi_ddiv>
  405a5c:	4682      	mov	sl, r0
  405a5e:	468b      	mov	fp, r1
  405a60:	b18d      	cbz	r5, 405a86 <_dtoa_r+0x566>
  405a62:	f8df 9224 	ldr.w	r9, [pc, #548]	; 405c88 <_dtoa_r+0x768>
  405a66:	07eb      	lsls	r3, r5, #31
  405a68:	4630      	mov	r0, r6
  405a6a:	4639      	mov	r1, r7
  405a6c:	d507      	bpl.n	405a7e <_dtoa_r+0x55e>
  405a6e:	f108 0801 	add.w	r8, r8, #1
  405a72:	e9d9 2300 	ldrd	r2, r3, [r9]
  405a76:	f002 fe6d 	bl	408754 <__aeabi_dmul>
  405a7a:	4606      	mov	r6, r0
  405a7c:	460f      	mov	r7, r1
  405a7e:	106d      	asrs	r5, r5, #1
  405a80:	f109 0908 	add.w	r9, r9, #8
  405a84:	d1ef      	bne.n	405a66 <_dtoa_r+0x546>
  405a86:	4650      	mov	r0, sl
  405a88:	4659      	mov	r1, fp
  405a8a:	4632      	mov	r2, r6
  405a8c:	463b      	mov	r3, r7
  405a8e:	f002 ff8b 	bl	4089a8 <__aeabi_ddiv>
  405a92:	e9cd 0108 	strd	r0, r1, [sp, #32]
  405a96:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  405a98:	b143      	cbz	r3, 405aac <_dtoa_r+0x58c>
  405a9a:	2200      	movs	r2, #0
  405a9c:	4b7b      	ldr	r3, [pc, #492]	; (405c8c <_dtoa_r+0x76c>)
  405a9e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  405aa2:	f003 f8c9 	bl	408c38 <__aeabi_dcmplt>
  405aa6:	2800      	cmp	r0, #0
  405aa8:	f040 8393 	bne.w	4061d2 <_dtoa_r+0xcb2>
  405aac:	4640      	mov	r0, r8
  405aae:	f002 fdeb 	bl	408688 <__aeabi_i2d>
  405ab2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
  405ab6:	f002 fe4d 	bl	408754 <__aeabi_dmul>
  405aba:	4b75      	ldr	r3, [pc, #468]	; (405c90 <_dtoa_r+0x770>)
  405abc:	2200      	movs	r2, #0
  405abe:	f002 fc97 	bl	4083f0 <__adddf3>
  405ac2:	9b04      	ldr	r3, [sp, #16]
  405ac4:	4606      	mov	r6, r0
  405ac6:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
  405aca:	2b00      	cmp	r3, #0
  405acc:	f000 8161 	beq.w	405d92 <_dtoa_r+0x872>
  405ad0:	9b02      	ldr	r3, [sp, #8]
  405ad2:	f8dd c010 	ldr.w	ip, [sp, #16]
  405ad6:	9314      	str	r3, [sp, #80]	; 0x50
  405ad8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  405ada:	2b00      	cmp	r3, #0
  405adc:	f000 820b 	beq.w	405ef6 <_dtoa_r+0x9d6>
  405ae0:	4b68      	ldr	r3, [pc, #416]	; (405c84 <_dtoa_r+0x764>)
  405ae2:	2000      	movs	r0, #0
  405ae4:	9a05      	ldr	r2, [sp, #20]
  405ae6:	eb03 03cc 	add.w	r3, r3, ip, lsl #3
  405aea:	496a      	ldr	r1, [pc, #424]	; (405c94 <_dtoa_r+0x774>)
  405aec:	1c55      	adds	r5, r2, #1
  405aee:	f8cd c048 	str.w	ip, [sp, #72]	; 0x48
  405af2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
  405af6:	f002 ff57 	bl	4089a8 <__aeabi_ddiv>
  405afa:	4632      	mov	r2, r6
  405afc:	463b      	mov	r3, r7
  405afe:	f002 fc75 	bl	4083ec <__aeabi_dsub>
  405b02:	4682      	mov	sl, r0
  405b04:	468b      	mov	fp, r1
  405b06:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
  405b0a:	4649      	mov	r1, r9
  405b0c:	4640      	mov	r0, r8
  405b0e:	f003 f8bb 	bl	408c88 <__aeabi_d2iz>
  405b12:	4606      	mov	r6, r0
  405b14:	f002 fdb8 	bl	408688 <__aeabi_i2d>
  405b18:	4602      	mov	r2, r0
  405b1a:	3630      	adds	r6, #48	; 0x30
  405b1c:	460b      	mov	r3, r1
  405b1e:	4640      	mov	r0, r8
  405b20:	4649      	mov	r1, r9
  405b22:	f002 fc63 	bl	4083ec <__aeabi_dsub>
  405b26:	9f05      	ldr	r7, [sp, #20]
  405b28:	4680      	mov	r8, r0
  405b2a:	4689      	mov	r9, r1
  405b2c:	b2f6      	uxtb	r6, r6
  405b2e:	4650      	mov	r0, sl
  405b30:	4659      	mov	r1, fp
  405b32:	4642      	mov	r2, r8
  405b34:	464b      	mov	r3, r9
  405b36:	703e      	strb	r6, [r7, #0]
  405b38:	f003 f89c 	bl	408c74 <__aeabi_dcmpgt>
  405b3c:	2800      	cmp	r0, #0
  405b3e:	f040 8243 	bne.w	405fc8 <_dtoa_r+0xaa8>
  405b42:	4642      	mov	r2, r8
  405b44:	464b      	mov	r3, r9
  405b46:	2000      	movs	r0, #0
  405b48:	4950      	ldr	r1, [pc, #320]	; (405c8c <_dtoa_r+0x76c>)
  405b4a:	f002 fc4f 	bl	4083ec <__aeabi_dsub>
  405b4e:	4602      	mov	r2, r0
  405b50:	460b      	mov	r3, r1
  405b52:	4650      	mov	r0, sl
  405b54:	4659      	mov	r1, fp
  405b56:	f003 f88d 	bl	408c74 <__aeabi_dcmpgt>
  405b5a:	2800      	cmp	r0, #0
  405b5c:	f040 80eb 	bne.w	405d36 <_dtoa_r+0x816>
  405b60:	f8dd c048 	ldr.w	ip, [sp, #72]	; 0x48
  405b64:	f1bc 0f01 	cmp.w	ip, #1
  405b68:	f340 8192 	ble.w	405e90 <_dtoa_r+0x970>
  405b6c:	9f05      	ldr	r7, [sp, #20]
  405b6e:	9412      	str	r4, [sp, #72]	; 0x48
  405b70:	4467      	add	r7, ip
  405b72:	9708      	str	r7, [sp, #32]
  405b74:	e00e      	b.n	405b94 <_dtoa_r+0x674>
  405b76:	2000      	movs	r0, #0
  405b78:	4944      	ldr	r1, [pc, #272]	; (405c8c <_dtoa_r+0x76c>)
  405b7a:	f002 fc37 	bl	4083ec <__aeabi_dsub>
  405b7e:	4652      	mov	r2, sl
  405b80:	465b      	mov	r3, fp
  405b82:	f003 f859 	bl	408c38 <__aeabi_dcmplt>
  405b86:	2800      	cmp	r0, #0
  405b88:	f040 83a1 	bne.w	4062ce <_dtoa_r+0xdae>
  405b8c:	9b08      	ldr	r3, [sp, #32]
  405b8e:	429d      	cmp	r5, r3
  405b90:	f000 817d 	beq.w	405e8e <_dtoa_r+0x96e>
  405b94:	4650      	mov	r0, sl
  405b96:	4659      	mov	r1, fp
  405b98:	2200      	movs	r2, #0
  405b9a:	4b3f      	ldr	r3, [pc, #252]	; (405c98 <_dtoa_r+0x778>)
  405b9c:	f002 fdda 	bl	408754 <__aeabi_dmul>
  405ba0:	2200      	movs	r2, #0
  405ba2:	4b3d      	ldr	r3, [pc, #244]	; (405c98 <_dtoa_r+0x778>)
  405ba4:	4682      	mov	sl, r0
  405ba6:	468b      	mov	fp, r1
  405ba8:	4640      	mov	r0, r8
  405baa:	4649      	mov	r1, r9
  405bac:	f002 fdd2 	bl	408754 <__aeabi_dmul>
  405bb0:	4606      	mov	r6, r0
  405bb2:	460f      	mov	r7, r1
  405bb4:	f003 f868 	bl	408c88 <__aeabi_d2iz>
  405bb8:	4604      	mov	r4, r0
  405bba:	f002 fd65 	bl	408688 <__aeabi_i2d>
  405bbe:	4602      	mov	r2, r0
  405bc0:	460b      	mov	r3, r1
  405bc2:	3430      	adds	r4, #48	; 0x30
  405bc4:	4630      	mov	r0, r6
  405bc6:	4639      	mov	r1, r7
  405bc8:	b2e6      	uxtb	r6, r4
  405bca:	f002 fc0f 	bl	4083ec <__aeabi_dsub>
  405bce:	4680      	mov	r8, r0
  405bd0:	4689      	mov	r9, r1
  405bd2:	4652      	mov	r2, sl
  405bd4:	465b      	mov	r3, fp
  405bd6:	f805 6b01 	strb.w	r6, [r5], #1
  405bda:	f003 f82d 	bl	408c38 <__aeabi_dcmplt>
  405bde:	4642      	mov	r2, r8
  405be0:	464b      	mov	r3, r9
  405be2:	2800      	cmp	r0, #0
  405be4:	d0c7      	beq.n	405b76 <_dtoa_r+0x656>
  405be6:	9b14      	ldr	r3, [sp, #80]	; 0x50
  405be8:	9c12      	ldr	r4, [sp, #72]	; 0x48
  405bea:	9302      	str	r3, [sp, #8]
  405bec:	e69b      	b.n	405926 <_dtoa_r+0x406>
  405bee:	2300      	movs	r3, #0
  405bf0:	930b      	str	r3, [sp, #44]	; 0x2c
  405bf2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  405bf4:	9a02      	ldr	r2, [sp, #8]
  405bf6:	4413      	add	r3, r2
  405bf8:	9310      	str	r3, [sp, #64]	; 0x40
  405bfa:	3301      	adds	r3, #1
  405bfc:	2b00      	cmp	r3, #0
  405bfe:	9304      	str	r3, [sp, #16]
  405c00:	f340 82c9 	ble.w	406196 <_dtoa_r+0xc76>
  405c04:	9e04      	ldr	r6, [sp, #16]
  405c06:	2e0e      	cmp	r6, #14
  405c08:	bf8c      	ite	hi
  405c0a:	2500      	movhi	r5, #0
  405c0c:	f005 0501 	andls.w	r5, r5, #1
  405c10:	e6f2      	b.n	4059f8 <_dtoa_r+0x4d8>
  405c12:	2300      	movs	r3, #0
  405c14:	930b      	str	r3, [sp, #44]	; 0x2c
  405c16:	e6e3      	b.n	4059e0 <_dtoa_r+0x4c0>
  405c18:	9905      	ldr	r1, [sp, #20]
  405c1a:	4642      	mov	r2, r8
  405c1c:	464b      	mov	r3, r9
  405c1e:	4650      	mov	r0, sl
  405c20:	1c4d      	adds	r5, r1, #1
  405c22:	4659      	mov	r1, fp
  405c24:	f002 fec0 	bl	4089a8 <__aeabi_ddiv>
  405c28:	4656      	mov	r6, sl
  405c2a:	f003 f82d 	bl	408c88 <__aeabi_d2iz>
  405c2e:	4682      	mov	sl, r0
  405c30:	f002 fd2a 	bl	408688 <__aeabi_i2d>
  405c34:	4642      	mov	r2, r8
  405c36:	464b      	mov	r3, r9
  405c38:	f002 fd8c 	bl	408754 <__aeabi_dmul>
  405c3c:	4602      	mov	r2, r0
  405c3e:	460b      	mov	r3, r1
  405c40:	4630      	mov	r0, r6
  405c42:	4659      	mov	r1, fp
  405c44:	f002 fbd2 	bl	4083ec <__aeabi_dsub>
  405c48:	f10a 0330 	add.w	r3, sl, #48	; 0x30
  405c4c:	9a05      	ldr	r2, [sp, #20]
  405c4e:	4606      	mov	r6, r0
  405c50:	460f      	mov	r7, r1
  405c52:	7013      	strb	r3, [r2, #0]
  405c54:	9b04      	ldr	r3, [sp, #16]
  405c56:	2b01      	cmp	r3, #1
  405c58:	d04d      	beq.n	405cf6 <_dtoa_r+0x7d6>
  405c5a:	2200      	movs	r2, #0
  405c5c:	4b0e      	ldr	r3, [pc, #56]	; (405c98 <_dtoa_r+0x778>)
  405c5e:	f002 fd79 	bl	408754 <__aeabi_dmul>
  405c62:	2200      	movs	r2, #0
  405c64:	2300      	movs	r3, #0
  405c66:	4606      	mov	r6, r0
  405c68:	460f      	mov	r7, r1
  405c6a:	f002 ffdb 	bl	408c24 <__aeabi_dcmpeq>
  405c6e:	2800      	cmp	r0, #0
  405c70:	f47f ae59 	bne.w	405926 <_dtoa_r+0x406>
  405c74:	9403      	str	r4, [sp, #12]
  405c76:	f8dd b014 	ldr.w	fp, [sp, #20]
  405c7a:	9c04      	ldr	r4, [sp, #16]
  405c7c:	e019      	b.n	405cb2 <_dtoa_r+0x792>
  405c7e:	bf00      	nop
  405c80:	fffffbee 	.word	0xfffffbee
  405c84:	00409500 	.word	0x00409500
  405c88:	004095d8 	.word	0x004095d8
  405c8c:	3ff00000 	.word	0x3ff00000
  405c90:	401c0000 	.word	0x401c0000
  405c94:	3fe00000 	.word	0x3fe00000
  405c98:	40240000 	.word	0x40240000
  405c9c:	f002 fd5a 	bl	408754 <__aeabi_dmul>
  405ca0:	2200      	movs	r2, #0
  405ca2:	2300      	movs	r3, #0
  405ca4:	4606      	mov	r6, r0
  405ca6:	460f      	mov	r7, r1
  405ca8:	f002 ffbc 	bl	408c24 <__aeabi_dcmpeq>
  405cac:	2800      	cmp	r0, #0
  405cae:	f040 82e5 	bne.w	40627c <_dtoa_r+0xd5c>
  405cb2:	4642      	mov	r2, r8
  405cb4:	464b      	mov	r3, r9
  405cb6:	4630      	mov	r0, r6
  405cb8:	4639      	mov	r1, r7
  405cba:	f002 fe75 	bl	4089a8 <__aeabi_ddiv>
  405cbe:	f002 ffe3 	bl	408c88 <__aeabi_d2iz>
  405cc2:	4682      	mov	sl, r0
  405cc4:	f002 fce0 	bl	408688 <__aeabi_i2d>
  405cc8:	4642      	mov	r2, r8
  405cca:	464b      	mov	r3, r9
  405ccc:	f002 fd42 	bl	408754 <__aeabi_dmul>
  405cd0:	4602      	mov	r2, r0
  405cd2:	460b      	mov	r3, r1
  405cd4:	4630      	mov	r0, r6
  405cd6:	4639      	mov	r1, r7
  405cd8:	f002 fb88 	bl	4083ec <__aeabi_dsub>
  405cdc:	f10a 0e30 	add.w	lr, sl, #48	; 0x30
  405ce0:	4606      	mov	r6, r0
  405ce2:	460f      	mov	r7, r1
  405ce4:	f805 eb01 	strb.w	lr, [r5], #1
  405ce8:	ebcb 0e05 	rsb	lr, fp, r5
  405cec:	2200      	movs	r2, #0
  405cee:	4bb8      	ldr	r3, [pc, #736]	; (405fd0 <_dtoa_r+0xab0>)
  405cf0:	4574      	cmp	r4, lr
  405cf2:	d1d3      	bne.n	405c9c <_dtoa_r+0x77c>
  405cf4:	9c03      	ldr	r4, [sp, #12]
  405cf6:	4632      	mov	r2, r6
  405cf8:	463b      	mov	r3, r7
  405cfa:	4630      	mov	r0, r6
  405cfc:	4639      	mov	r1, r7
  405cfe:	f002 fb77 	bl	4083f0 <__adddf3>
  405d02:	4606      	mov	r6, r0
  405d04:	460f      	mov	r7, r1
  405d06:	4640      	mov	r0, r8
  405d08:	4649      	mov	r1, r9
  405d0a:	4632      	mov	r2, r6
  405d0c:	463b      	mov	r3, r7
  405d0e:	f002 ff93 	bl	408c38 <__aeabi_dcmplt>
  405d12:	b960      	cbnz	r0, 405d2e <_dtoa_r+0x80e>
  405d14:	4640      	mov	r0, r8
  405d16:	4649      	mov	r1, r9
  405d18:	4632      	mov	r2, r6
  405d1a:	463b      	mov	r3, r7
  405d1c:	f002 ff82 	bl	408c24 <__aeabi_dcmpeq>
  405d20:	2800      	cmp	r0, #0
  405d22:	f43f ae00 	beq.w	405926 <_dtoa_r+0x406>
  405d26:	f01a 0f01 	tst.w	sl, #1
  405d2a:	f43f adfc 	beq.w	405926 <_dtoa_r+0x406>
  405d2e:	9b02      	ldr	r3, [sp, #8]
  405d30:	9314      	str	r3, [sp, #80]	; 0x50
  405d32:	f815 6c01 	ldrb.w	r6, [r5, #-1]
  405d36:	1e6a      	subs	r2, r5, #1
  405d38:	9b05      	ldr	r3, [sp, #20]
  405d3a:	e004      	b.n	405d46 <_dtoa_r+0x826>
  405d3c:	429a      	cmp	r2, r3
  405d3e:	f000 8277 	beq.w	406230 <_dtoa_r+0xd10>
  405d42:	f812 6d01 	ldrb.w	r6, [r2, #-1]!
  405d46:	2e39      	cmp	r6, #57	; 0x39
  405d48:	f102 0501 	add.w	r5, r2, #1
  405d4c:	d0f6      	beq.n	405d3c <_dtoa_r+0x81c>
  405d4e:	1c73      	adds	r3, r6, #1
  405d50:	9914      	ldr	r1, [sp, #80]	; 0x50
  405d52:	b2db      	uxtb	r3, r3
  405d54:	9102      	str	r1, [sp, #8]
  405d56:	7013      	strb	r3, [r2, #0]
  405d58:	e5e5      	b.n	405926 <_dtoa_r+0x406>
  405d5a:	9b22      	ldr	r3, [sp, #136]	; 0x88
  405d5c:	2b01      	cmp	r3, #1
  405d5e:	f340 8161 	ble.w	406024 <_dtoa_r+0xb04>
  405d62:	f04f 0800 	mov.w	r8, #0
  405d66:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  405d68:	2b00      	cmp	r3, #0
  405d6a:	f47f ad80 	bne.w	40586e <_dtoa_r+0x34e>
  405d6e:	2001      	movs	r0, #1
  405d70:	e585      	b.n	40587e <_dtoa_r+0x35e>
  405d72:	4640      	mov	r0, r8
  405d74:	f002 fc88 	bl	408688 <__aeabi_i2d>
  405d78:	4602      	mov	r2, r0
  405d7a:	460b      	mov	r3, r1
  405d7c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  405d80:	f002 fce8 	bl	408754 <__aeabi_dmul>
  405d84:	2200      	movs	r2, #0
  405d86:	4b93      	ldr	r3, [pc, #588]	; (405fd4 <_dtoa_r+0xab4>)
  405d88:	f002 fb32 	bl	4083f0 <__adddf3>
  405d8c:	4606      	mov	r6, r0
  405d8e:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
  405d92:	2200      	movs	r2, #0
  405d94:	4b90      	ldr	r3, [pc, #576]	; (405fd8 <_dtoa_r+0xab8>)
  405d96:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  405d9a:	f002 fb27 	bl	4083ec <__aeabi_dsub>
  405d9e:	4632      	mov	r2, r6
  405da0:	463b      	mov	r3, r7
  405da2:	4680      	mov	r8, r0
  405da4:	4689      	mov	r9, r1
  405da6:	f002 ff65 	bl	408c74 <__aeabi_dcmpgt>
  405daa:	4605      	mov	r5, r0
  405dac:	2800      	cmp	r0, #0
  405dae:	f040 809f 	bne.w	405ef0 <_dtoa_r+0x9d0>
  405db2:	4632      	mov	r2, r6
  405db4:	4640      	mov	r0, r8
  405db6:	4649      	mov	r1, r9
  405db8:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
  405dbc:	f002 ff3c 	bl	408c38 <__aeabi_dcmplt>
  405dc0:	2800      	cmp	r0, #0
  405dc2:	d065      	beq.n	405e90 <_dtoa_r+0x970>
  405dc4:	462f      	mov	r7, r5
  405dc6:	9508      	str	r5, [sp, #32]
  405dc8:	e4df      	b.n	40578a <_dtoa_r+0x26a>
  405dca:	201c      	movs	r0, #28
  405dcc:	e564      	b.n	405898 <_dtoa_r+0x378>
  405dce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  405dd0:	2b00      	cmp	r3, #0
  405dd2:	f040 814f 	bne.w	406074 <_dtoa_r+0xb54>
  405dd6:	f8dd a014 	ldr.w	sl, [sp, #20]
  405dda:	9e06      	ldr	r6, [sp, #24]
  405ddc:	4655      	mov	r5, sl
  405dde:	f8dd 8010 	ldr.w	r8, [sp, #16]
  405de2:	e002      	b.n	405dea <_dtoa_r+0x8ca>
  405de4:	f001 fbf2 	bl	4075cc <__multadd>
  405de8:	4606      	mov	r6, r0
  405dea:	4639      	mov	r1, r7
  405dec:	4630      	mov	r0, r6
  405dee:	f7ff faf7 	bl	4053e0 <quorem>
  405df2:	f100 0930 	add.w	r9, r0, #48	; 0x30
  405df6:	4631      	mov	r1, r6
  405df8:	4620      	mov	r0, r4
  405dfa:	f805 9b01 	strb.w	r9, [r5], #1
  405dfe:	ebca 0e05 	rsb	lr, sl, r5
  405e02:	220a      	movs	r2, #10
  405e04:	2300      	movs	r3, #0
  405e06:	45c6      	cmp	lr, r8
  405e08:	dbec      	blt.n	405de4 <_dtoa_r+0x8c4>
  405e0a:	9b05      	ldr	r3, [sp, #20]
  405e0c:	f04f 0a00 	mov.w	sl, #0
  405e10:	9a04      	ldr	r2, [sp, #16]
  405e12:	9606      	str	r6, [sp, #24]
  405e14:	2a01      	cmp	r2, #1
  405e16:	bfac      	ite	ge
  405e18:	189b      	addge	r3, r3, r2
  405e1a:	3301      	addlt	r3, #1
  405e1c:	461d      	mov	r5, r3
  405e1e:	9906      	ldr	r1, [sp, #24]
  405e20:	2201      	movs	r2, #1
  405e22:	4620      	mov	r0, r4
  405e24:	f001 fd64 	bl	4078f0 <__lshift>
  405e28:	4639      	mov	r1, r7
  405e2a:	9006      	str	r0, [sp, #24]
  405e2c:	f001 fdba 	bl	4079a4 <__mcmp>
  405e30:	2800      	cmp	r0, #0
  405e32:	f340 824e 	ble.w	4062d2 <_dtoa_r+0xdb2>
  405e36:	f815 2c01 	ldrb.w	r2, [r5, #-1]
  405e3a:	1e6b      	subs	r3, r5, #1
  405e3c:	9905      	ldr	r1, [sp, #20]
  405e3e:	e004      	b.n	405e4a <_dtoa_r+0x92a>
  405e40:	428b      	cmp	r3, r1
  405e42:	f000 820b 	beq.w	40625c <_dtoa_r+0xd3c>
  405e46:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
  405e4a:	2a39      	cmp	r2, #57	; 0x39
  405e4c:	f103 0501 	add.w	r5, r3, #1
  405e50:	d0f6      	beq.n	405e40 <_dtoa_r+0x920>
  405e52:	3201      	adds	r2, #1
  405e54:	701a      	strb	r2, [r3, #0]
  405e56:	4639      	mov	r1, r7
  405e58:	4620      	mov	r0, r4
  405e5a:	f001 fbad 	bl	4075b8 <_Bfree>
  405e5e:	9b08      	ldr	r3, [sp, #32]
  405e60:	2b00      	cmp	r3, #0
  405e62:	f43f ad60 	beq.w	405926 <_dtoa_r+0x406>
  405e66:	459a      	cmp	sl, r3
  405e68:	f43f ad59 	beq.w	40591e <_dtoa_r+0x3fe>
  405e6c:	f1ba 0f00 	cmp.w	sl, #0
  405e70:	f43f ad55 	beq.w	40591e <_dtoa_r+0x3fe>
  405e74:	4651      	mov	r1, sl
  405e76:	4620      	mov	r0, r4
  405e78:	f001 fb9e 	bl	4075b8 <_Bfree>
  405e7c:	e54f      	b.n	40591e <_dtoa_r+0x3fe>
  405e7e:	e9dd ab0e 	ldrd	sl, fp, [sp, #56]	; 0x38
  405e82:	f04f 0802 	mov.w	r8, #2
  405e86:	e5eb      	b.n	405a60 <_dtoa_r+0x540>
  405e88:	9805      	ldr	r0, [sp, #20]
  405e8a:	f7ff bb7a 	b.w	405582 <_dtoa_r+0x62>
  405e8e:	9c12      	ldr	r4, [sp, #72]	; 0x48
  405e90:	e9dd ab0e 	ldrd	sl, fp, [sp, #56]	; 0x38
  405e94:	e452      	b.n	40573c <_dtoa_r+0x21c>
  405e96:	9b02      	ldr	r3, [sp, #8]
  405e98:	425d      	negs	r5, r3
  405e9a:	2d00      	cmp	r5, #0
  405e9c:	f000 81c1 	beq.w	406222 <_dtoa_r+0xd02>
  405ea0:	f005 020f 	and.w	r2, r5, #15
  405ea4:	4b4d      	ldr	r3, [pc, #308]	; (405fdc <_dtoa_r+0xabc>)
  405ea6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  405eaa:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
  405eae:	e9d3 2300 	ldrd	r2, r3, [r3]
  405eb2:	f002 fc4f 	bl	408754 <__aeabi_dmul>
  405eb6:	112d      	asrs	r5, r5, #4
  405eb8:	e9cd 0108 	strd	r0, r1, [sp, #32]
  405ebc:	f000 8275 	beq.w	4063aa <_dtoa_r+0xe8a>
  405ec0:	4e47      	ldr	r6, [pc, #284]	; (405fe0 <_dtoa_r+0xac0>)
  405ec2:	f04f 0802 	mov.w	r8, #2
  405ec6:	4602      	mov	r2, r0
  405ec8:	460b      	mov	r3, r1
  405eca:	07ef      	lsls	r7, r5, #31
  405ecc:	4610      	mov	r0, r2
  405ece:	4619      	mov	r1, r3
  405ed0:	d507      	bpl.n	405ee2 <_dtoa_r+0x9c2>
  405ed2:	f108 0801 	add.w	r8, r8, #1
  405ed6:	e9d6 2300 	ldrd	r2, r3, [r6]
  405eda:	f002 fc3b 	bl	408754 <__aeabi_dmul>
  405ede:	4602      	mov	r2, r0
  405ee0:	460b      	mov	r3, r1
  405ee2:	106d      	asrs	r5, r5, #1
  405ee4:	f106 0608 	add.w	r6, r6, #8
  405ee8:	d1ef      	bne.n	405eca <_dtoa_r+0x9aa>
  405eea:	e9cd 2308 	strd	r2, r3, [sp, #32]
  405eee:	e5d2      	b.n	405a96 <_dtoa_r+0x576>
  405ef0:	2700      	movs	r7, #0
  405ef2:	9708      	str	r7, [sp, #32]
  405ef4:	e506      	b.n	405904 <_dtoa_r+0x3e4>
  405ef6:	f10c 3bff 	add.w	fp, ip, #4294967295
  405efa:	4938      	ldr	r1, [pc, #224]	; (405fdc <_dtoa_r+0xabc>)
  405efc:	4632      	mov	r2, r6
  405efe:	463b      	mov	r3, r7
  405f00:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
  405f04:	f8cd c054 	str.w	ip, [sp, #84]	; 0x54
  405f08:	9f05      	ldr	r7, [sp, #20]
  405f0a:	e9d1 0100 	ldrd	r0, r1, [r1]
  405f0e:	f002 fc21 	bl	408754 <__aeabi_dmul>
  405f12:	1c7d      	adds	r5, r7, #1
  405f14:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
  405f18:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
  405f1c:	4649      	mov	r1, r9
  405f1e:	4640      	mov	r0, r8
  405f20:	f002 feb2 	bl	408c88 <__aeabi_d2iz>
  405f24:	4606      	mov	r6, r0
  405f26:	f002 fbaf 	bl	408688 <__aeabi_i2d>
  405f2a:	4602      	mov	r2, r0
  405f2c:	460b      	mov	r3, r1
  405f2e:	4640      	mov	r0, r8
  405f30:	4649      	mov	r1, r9
  405f32:	3630      	adds	r6, #48	; 0x30
  405f34:	f002 fa5a 	bl	4083ec <__aeabi_dsub>
  405f38:	f8dd c054 	ldr.w	ip, [sp, #84]	; 0x54
  405f3c:	4680      	mov	r8, r0
  405f3e:	4689      	mov	r9, r1
  405f40:	f1bc 0f01 	cmp.w	ip, #1
  405f44:	703e      	strb	r6, [r7, #0]
  405f46:	d020      	beq.n	405f8a <_dtoa_r+0xa6a>
  405f48:	9b05      	ldr	r3, [sp, #20]
  405f4a:	4640      	mov	r0, r8
  405f4c:	46aa      	mov	sl, r5
  405f4e:	46a8      	mov	r8, r5
  405f50:	eb03 070c 	add.w	r7, r3, ip
  405f54:	46b9      	mov	r9, r7
  405f56:	2200      	movs	r2, #0
  405f58:	4b1d      	ldr	r3, [pc, #116]	; (405fd0 <_dtoa_r+0xab0>)
  405f5a:	f002 fbfb 	bl	408754 <__aeabi_dmul>
  405f5e:	460f      	mov	r7, r1
  405f60:	4606      	mov	r6, r0
  405f62:	f002 fe91 	bl	408c88 <__aeabi_d2iz>
  405f66:	4605      	mov	r5, r0
  405f68:	f002 fb8e 	bl	408688 <__aeabi_i2d>
  405f6c:	4602      	mov	r2, r0
  405f6e:	460b      	mov	r3, r1
  405f70:	3530      	adds	r5, #48	; 0x30
  405f72:	4630      	mov	r0, r6
  405f74:	4639      	mov	r1, r7
  405f76:	f002 fa39 	bl	4083ec <__aeabi_dsub>
  405f7a:	f80a 5b01 	strb.w	r5, [sl], #1
  405f7e:	45ca      	cmp	sl, r9
  405f80:	d1e9      	bne.n	405f56 <_dtoa_r+0xa36>
  405f82:	4645      	mov	r5, r8
  405f84:	4689      	mov	r9, r1
  405f86:	4680      	mov	r8, r0
  405f88:	445d      	add	r5, fp
  405f8a:	2200      	movs	r2, #0
  405f8c:	4b15      	ldr	r3, [pc, #84]	; (405fe4 <_dtoa_r+0xac4>)
  405f8e:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
  405f92:	f002 fa2d 	bl	4083f0 <__adddf3>
  405f96:	4642      	mov	r2, r8
  405f98:	464b      	mov	r3, r9
  405f9a:	f002 fe4d 	bl	408c38 <__aeabi_dcmplt>
  405f9e:	2800      	cmp	r0, #0
  405fa0:	f47f aec7 	bne.w	405d32 <_dtoa_r+0x812>
  405fa4:	2000      	movs	r0, #0
  405fa6:	490f      	ldr	r1, [pc, #60]	; (405fe4 <_dtoa_r+0xac4>)
  405fa8:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
  405fac:	f002 fa1e 	bl	4083ec <__aeabi_dsub>
  405fb0:	4642      	mov	r2, r8
  405fb2:	464b      	mov	r3, r9
  405fb4:	f002 fe5e 	bl	408c74 <__aeabi_dcmpgt>
  405fb8:	b908      	cbnz	r0, 405fbe <_dtoa_r+0xa9e>
  405fba:	e769      	b.n	405e90 <_dtoa_r+0x970>
  405fbc:	4615      	mov	r5, r2
  405fbe:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  405fc2:	1e6a      	subs	r2, r5, #1
  405fc4:	2b30      	cmp	r3, #48	; 0x30
  405fc6:	d0f9      	beq.n	405fbc <_dtoa_r+0xa9c>
  405fc8:	9b14      	ldr	r3, [sp, #80]	; 0x50
  405fca:	9302      	str	r3, [sp, #8]
  405fcc:	e4ab      	b.n	405926 <_dtoa_r+0x406>
  405fce:	bf00      	nop
  405fd0:	40240000 	.word	0x40240000
  405fd4:	401c0000 	.word	0x401c0000
  405fd8:	40140000 	.word	0x40140000
  405fdc:	00409500 	.word	0x00409500
  405fe0:	004095d8 	.word	0x004095d8
  405fe4:	3fe00000 	.word	0x3fe00000
  405fe8:	9806      	ldr	r0, [sp, #24]
  405fea:	4639      	mov	r1, r7
  405fec:	f001 fcda 	bl	4079a4 <__mcmp>
  405ff0:	2800      	cmp	r0, #0
  405ff2:	f6bf ac6e 	bge.w	4058d2 <_dtoa_r+0x3b2>
  405ff6:	9e02      	ldr	r6, [sp, #8]
  405ff8:	2300      	movs	r3, #0
  405ffa:	9906      	ldr	r1, [sp, #24]
  405ffc:	4620      	mov	r0, r4
  405ffe:	3e01      	subs	r6, #1
  406000:	220a      	movs	r2, #10
  406002:	9602      	str	r6, [sp, #8]
  406004:	f001 fae2 	bl	4075cc <__multadd>
  406008:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40600a:	9006      	str	r0, [sp, #24]
  40600c:	bb1b      	cbnz	r3, 406056 <_dtoa_r+0xb36>
  40600e:	9b22      	ldr	r3, [sp, #136]	; 0x88
  406010:	2b02      	cmp	r3, #2
  406012:	f340 81ce 	ble.w	4063b2 <_dtoa_r+0xe92>
  406016:	9b10      	ldr	r3, [sp, #64]	; 0x40
  406018:	2b00      	cmp	r3, #0
  40601a:	f300 81ca 	bgt.w	4063b2 <_dtoa_r+0xe92>
  40601e:	9b10      	ldr	r3, [sp, #64]	; 0x40
  406020:	9304      	str	r3, [sp, #16]
  406022:	e45e      	b.n	4058e2 <_dtoa_r+0x3c2>
  406024:	f1ba 0f00 	cmp.w	sl, #0
  406028:	f47f ae9b 	bne.w	405d62 <_dtoa_r+0x842>
  40602c:	f3cb 0313 	ubfx	r3, fp, #0, #20
  406030:	2b00      	cmp	r3, #0
  406032:	f47f ae96 	bne.w	405d62 <_dtoa_r+0x842>
  406036:	f02b 4600 	bic.w	r6, fp, #2147483648	; 0x80000000
  40603a:	0d36      	lsrs	r6, r6, #20
  40603c:	0536      	lsls	r6, r6, #20
  40603e:	2e00      	cmp	r6, #0
  406040:	f000 818a 	beq.w	406358 <_dtoa_r+0xe38>
  406044:	9b07      	ldr	r3, [sp, #28]
  406046:	f04f 0801 	mov.w	r8, #1
  40604a:	3301      	adds	r3, #1
  40604c:	9307      	str	r3, [sp, #28]
  40604e:	9b03      	ldr	r3, [sp, #12]
  406050:	3301      	adds	r3, #1
  406052:	9303      	str	r3, [sp, #12]
  406054:	e687      	b.n	405d66 <_dtoa_r+0x846>
  406056:	2300      	movs	r3, #0
  406058:	9908      	ldr	r1, [sp, #32]
  40605a:	4620      	mov	r0, r4
  40605c:	220a      	movs	r2, #10
  40605e:	f001 fab5 	bl	4075cc <__multadd>
  406062:	9b22      	ldr	r3, [sp, #136]	; 0x88
  406064:	9008      	str	r0, [sp, #32]
  406066:	2b02      	cmp	r3, #2
  406068:	dd02      	ble.n	406070 <_dtoa_r+0xb50>
  40606a:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40606c:	2b00      	cmp	r3, #0
  40606e:	ddd6      	ble.n	40601e <_dtoa_r+0xafe>
  406070:	9b10      	ldr	r3, [sp, #64]	; 0x40
  406072:	9304      	str	r3, [sp, #16]
  406074:	2d00      	cmp	r5, #0
  406076:	dd05      	ble.n	406084 <_dtoa_r+0xb64>
  406078:	9908      	ldr	r1, [sp, #32]
  40607a:	462a      	mov	r2, r5
  40607c:	4620      	mov	r0, r4
  40607e:	f001 fc37 	bl	4078f0 <__lshift>
  406082:	9008      	str	r0, [sp, #32]
  406084:	f1b8 0f00 	cmp.w	r8, #0
  406088:	f040 8133 	bne.w	4062f2 <_dtoa_r+0xdd2>
  40608c:	9e08      	ldr	r6, [sp, #32]
  40608e:	f00a 0101 	and.w	r1, sl, #1
  406092:	9b04      	ldr	r3, [sp, #16]
  406094:	9a22      	ldr	r2, [sp, #136]	; 0x88
  406096:	3b01      	subs	r3, #1
  406098:	910b      	str	r1, [sp, #44]	; 0x2c
  40609a:	9905      	ldr	r1, [sp, #20]
  40609c:	fab2 f282 	clz	r2, r2
  4060a0:	970a      	str	r7, [sp, #40]	; 0x28
  4060a2:	18cb      	adds	r3, r1, r3
  4060a4:	4688      	mov	r8, r1
  4060a6:	f8dd b020 	ldr.w	fp, [sp, #32]
  4060aa:	930c      	str	r3, [sp, #48]	; 0x30
  4060ac:	0953      	lsrs	r3, r2, #5
  4060ae:	9f06      	ldr	r7, [sp, #24]
  4060b0:	9303      	str	r3, [sp, #12]
  4060b2:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  4060b4:	4638      	mov	r0, r7
  4060b6:	4629      	mov	r1, r5
  4060b8:	f7ff f992 	bl	4053e0 <quorem>
  4060bc:	4659      	mov	r1, fp
  4060be:	4681      	mov	r9, r0
  4060c0:	4638      	mov	r0, r7
  4060c2:	f001 fc6f 	bl	4079a4 <__mcmp>
  4060c6:	4629      	mov	r1, r5
  4060c8:	4632      	mov	r2, r6
  4060ca:	4682      	mov	sl, r0
  4060cc:	4620      	mov	r0, r4
  4060ce:	f001 fc8d 	bl	4079ec <__mdiff>
  4060d2:	68c2      	ldr	r2, [r0, #12]
  4060d4:	4605      	mov	r5, r0
  4060d6:	f109 0c30 	add.w	ip, r9, #48	; 0x30
  4060da:	9207      	str	r2, [sp, #28]
  4060dc:	2a00      	cmp	r2, #0
  4060de:	d150      	bne.n	406182 <_dtoa_r+0xc62>
  4060e0:	4629      	mov	r1, r5
  4060e2:	4638      	mov	r0, r7
  4060e4:	f8cd c018 	str.w	ip, [sp, #24]
  4060e8:	f001 fc5c 	bl	4079a4 <__mcmp>
  4060ec:	4629      	mov	r1, r5
  4060ee:	9004      	str	r0, [sp, #16]
  4060f0:	4620      	mov	r0, r4
  4060f2:	f001 fa61 	bl	4075b8 <_Bfree>
  4060f6:	9a03      	ldr	r2, [sp, #12]
  4060f8:	9b04      	ldr	r3, [sp, #16]
  4060fa:	f8dd c018 	ldr.w	ip, [sp, #24]
  4060fe:	b132      	cbz	r2, 40610e <_dtoa_r+0xbee>
  406100:	b92b      	cbnz	r3, 40610e <_dtoa_r+0xbee>
  406102:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  406104:	9a07      	ldr	r2, [sp, #28]
  406106:	2b00      	cmp	r3, #0
  406108:	f000 8128 	beq.w	40635c <_dtoa_r+0xe3c>
  40610c:	4613      	mov	r3, r2
  40610e:	f1ba 0f00 	cmp.w	sl, #0
  406112:	f2c0 80bc 	blt.w	40628e <_dtoa_r+0xd6e>
  406116:	9a03      	ldr	r2, [sp, #12]
  406118:	b132      	cbz	r2, 406128 <_dtoa_r+0xc08>
  40611a:	f1ba 0f00 	cmp.w	sl, #0
  40611e:	d103      	bne.n	406128 <_dtoa_r+0xc08>
  406120:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  406122:	2a00      	cmp	r2, #0
  406124:	f000 80b3 	beq.w	40628e <_dtoa_r+0xd6e>
  406128:	2b00      	cmp	r3, #0
  40612a:	f300 80fe 	bgt.w	40632a <_dtoa_r+0xe0a>
  40612e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  406130:	f108 0901 	add.w	r9, r8, #1
  406134:	f888 c000 	strb.w	ip, [r8]
  406138:	4598      	cmp	r8, r3
  40613a:	464d      	mov	r5, r9
  40613c:	f000 8106 	beq.w	40634c <_dtoa_r+0xe2c>
  406140:	4639      	mov	r1, r7
  406142:	220a      	movs	r2, #10
  406144:	2300      	movs	r3, #0
  406146:	4620      	mov	r0, r4
  406148:	f001 fa40 	bl	4075cc <__multadd>
  40614c:	45b3      	cmp	fp, r6
  40614e:	4607      	mov	r7, r0
  406150:	4659      	mov	r1, fp
  406152:	4620      	mov	r0, r4
  406154:	f04f 020a 	mov.w	r2, #10
  406158:	f04f 0300 	mov.w	r3, #0
  40615c:	d00b      	beq.n	406176 <_dtoa_r+0xc56>
  40615e:	f001 fa35 	bl	4075cc <__multadd>
  406162:	4631      	mov	r1, r6
  406164:	4683      	mov	fp, r0
  406166:	220a      	movs	r2, #10
  406168:	4620      	mov	r0, r4
  40616a:	2300      	movs	r3, #0
  40616c:	f001 fa2e 	bl	4075cc <__multadd>
  406170:	46c8      	mov	r8, r9
  406172:	4606      	mov	r6, r0
  406174:	e79d      	b.n	4060b2 <_dtoa_r+0xb92>
  406176:	f001 fa29 	bl	4075cc <__multadd>
  40617a:	46c8      	mov	r8, r9
  40617c:	4683      	mov	fp, r0
  40617e:	4606      	mov	r6, r0
  406180:	e797      	b.n	4060b2 <_dtoa_r+0xb92>
  406182:	4601      	mov	r1, r0
  406184:	4620      	mov	r0, r4
  406186:	f8cd c010 	str.w	ip, [sp, #16]
  40618a:	f001 fa15 	bl	4075b8 <_Bfree>
  40618e:	2301      	movs	r3, #1
  406190:	f8dd c010 	ldr.w	ip, [sp, #16]
  406194:	e7bb      	b.n	40610e <_dtoa_r+0xbee>
  406196:	2b0e      	cmp	r3, #14
  406198:	bf8c      	ite	hi
  40619a:	2300      	movhi	r3, #0
  40619c:	2301      	movls	r3, #1
  40619e:	2100      	movs	r1, #0
  4061a0:	401d      	ands	r5, r3
  4061a2:	6461      	str	r1, [r4, #68]	; 0x44
  4061a4:	e436      	b.n	405a14 <_dtoa_r+0x4f4>
  4061a6:	2301      	movs	r3, #1
  4061a8:	9323      	str	r3, [sp, #140]	; 0x8c
  4061aa:	9310      	str	r3, [sp, #64]	; 0x40
  4061ac:	9304      	str	r3, [sp, #16]
  4061ae:	e7f6      	b.n	40619e <_dtoa_r+0xc7e>
  4061b0:	9906      	ldr	r1, [sp, #24]
  4061b2:	4620      	mov	r0, r4
  4061b4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  4061b6:	f001 fb4b 	bl	407850 <__pow5mult>
  4061ba:	9006      	str	r0, [sp, #24]
  4061bc:	f7ff bb42 	b.w	405844 <_dtoa_r+0x324>
  4061c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4061c2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  4061c4:	1af3      	subs	r3, r6, r3
  4061c6:	960a      	str	r6, [sp, #40]	; 0x28
  4061c8:	2600      	movs	r6, #0
  4061ca:	441a      	add	r2, r3
  4061cc:	920c      	str	r2, [sp, #48]	; 0x30
  4061ce:	f7ff bbf3 	b.w	4059b8 <_dtoa_r+0x498>
  4061d2:	9b04      	ldr	r3, [sp, #16]
  4061d4:	2b00      	cmp	r3, #0
  4061d6:	f43f adcc 	beq.w	405d72 <_dtoa_r+0x852>
  4061da:	9d10      	ldr	r5, [sp, #64]	; 0x40
  4061dc:	2d00      	cmp	r5, #0
  4061de:	f77f ae57 	ble.w	405e90 <_dtoa_r+0x970>
  4061e2:	2200      	movs	r2, #0
  4061e4:	4b86      	ldr	r3, [pc, #536]	; (406400 <_dtoa_r+0xee0>)
  4061e6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  4061ea:	f002 fab3 	bl	408754 <__aeabi_dmul>
  4061ee:	9b02      	ldr	r3, [sp, #8]
  4061f0:	4606      	mov	r6, r0
  4061f2:	460f      	mov	r7, r1
  4061f4:	3b01      	subs	r3, #1
  4061f6:	f108 0001 	add.w	r0, r8, #1
  4061fa:	e9cd 6708 	strd	r6, r7, [sp, #32]
  4061fe:	9314      	str	r3, [sp, #80]	; 0x50
  406200:	f002 fa42 	bl	408688 <__aeabi_i2d>
  406204:	4602      	mov	r2, r0
  406206:	460b      	mov	r3, r1
  406208:	4630      	mov	r0, r6
  40620a:	4639      	mov	r1, r7
  40620c:	f002 faa2 	bl	408754 <__aeabi_dmul>
  406210:	2200      	movs	r2, #0
  406212:	4b7c      	ldr	r3, [pc, #496]	; (406404 <_dtoa_r+0xee4>)
  406214:	f002 f8ec 	bl	4083f0 <__adddf3>
  406218:	46ac      	mov	ip, r5
  40621a:	4606      	mov	r6, r0
  40621c:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
  406220:	e45a      	b.n	405ad8 <_dtoa_r+0x5b8>
  406222:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
  406226:	f04f 0802 	mov.w	r8, #2
  40622a:	e9cd 2308 	strd	r2, r3, [sp, #32]
  40622e:	e432      	b.n	405a96 <_dtoa_r+0x576>
  406230:	9b14      	ldr	r3, [sp, #80]	; 0x50
  406232:	2130      	movs	r1, #48	; 0x30
  406234:	3301      	adds	r3, #1
  406236:	7011      	strb	r1, [r2, #0]
  406238:	9302      	str	r3, [sp, #8]
  40623a:	2331      	movs	r3, #49	; 0x31
  40623c:	7013      	strb	r3, [r2, #0]
  40623e:	f7ff bb72 	b.w	405926 <_dtoa_r+0x406>
  406242:	9906      	ldr	r1, [sp, #24]
  406244:	4620      	mov	r0, r4
  406246:	f001 fb03 	bl	407850 <__pow5mult>
  40624a:	9006      	str	r0, [sp, #24]
  40624c:	f7ff bafa 	b.w	405844 <_dtoa_r+0x324>
  406250:	f1ba 0f00 	cmp.w	sl, #0
  406254:	f43f aeea 	beq.w	40602c <_dtoa_r+0xb0c>
  406258:	f7ff bb07 	b.w	40586a <_dtoa_r+0x34a>
  40625c:	9a02      	ldr	r2, [sp, #8]
  40625e:	2331      	movs	r3, #49	; 0x31
  406260:	3201      	adds	r2, #1
  406262:	9202      	str	r2, [sp, #8]
  406264:	9a05      	ldr	r2, [sp, #20]
  406266:	7013      	strb	r3, [r2, #0]
  406268:	e5f5      	b.n	405e56 <_dtoa_r+0x936>
  40626a:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40626c:	2a00      	cmp	r2, #0
  40626e:	d055      	beq.n	40631c <_dtoa_r+0xdfc>
  406270:	f203 4333 	addw	r3, r3, #1075	; 0x433
  406274:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  406276:	9d07      	ldr	r5, [sp, #28]
  406278:	f7ff bba4 	b.w	4059c4 <_dtoa_r+0x4a4>
  40627c:	9c03      	ldr	r4, [sp, #12]
  40627e:	f7ff bb52 	b.w	405926 <_dtoa_r+0x406>
  406282:	9b07      	ldr	r3, [sp, #28]
  406284:	9a04      	ldr	r2, [sp, #16]
  406286:	1a9d      	subs	r5, r3, r2
  406288:	2300      	movs	r3, #0
  40628a:	f7ff bb9b 	b.w	4059c4 <_dtoa_r+0x4a4>
  40628e:	2b00      	cmp	r3, #0
  406290:	9706      	str	r7, [sp, #24]
  406292:	46e1      	mov	r9, ip
  406294:	f8cd b020 	str.w	fp, [sp, #32]
  406298:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  40629a:	4665      	mov	r5, ip
  40629c:	dd0f      	ble.n	4062be <_dtoa_r+0xd9e>
  40629e:	9906      	ldr	r1, [sp, #24]
  4062a0:	2201      	movs	r2, #1
  4062a2:	4620      	mov	r0, r4
  4062a4:	f001 fb24 	bl	4078f0 <__lshift>
  4062a8:	4639      	mov	r1, r7
  4062aa:	9006      	str	r0, [sp, #24]
  4062ac:	f001 fb7a 	bl	4079a4 <__mcmp>
  4062b0:	2800      	cmp	r0, #0
  4062b2:	dd75      	ble.n	4063a0 <_dtoa_r+0xe80>
  4062b4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
  4062b8:	d066      	beq.n	406388 <_dtoa_r+0xe68>
  4062ba:	f109 0501 	add.w	r5, r9, #1
  4062be:	f8dd a020 	ldr.w	sl, [sp, #32]
  4062c2:	f888 5000 	strb.w	r5, [r8]
  4062c6:	f108 0501 	add.w	r5, r8, #1
  4062ca:	9608      	str	r6, [sp, #32]
  4062cc:	e5c3      	b.n	405e56 <_dtoa_r+0x936>
  4062ce:	9c12      	ldr	r4, [sp, #72]	; 0x48
  4062d0:	e531      	b.n	405d36 <_dtoa_r+0x816>
  4062d2:	d104      	bne.n	4062de <_dtoa_r+0xdbe>
  4062d4:	f019 0f01 	tst.w	r9, #1
  4062d8:	d001      	beq.n	4062de <_dtoa_r+0xdbe>
  4062da:	e5ac      	b.n	405e36 <_dtoa_r+0x916>
  4062dc:	4615      	mov	r5, r2
  4062de:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  4062e2:	1e6a      	subs	r2, r5, #1
  4062e4:	2b30      	cmp	r3, #48	; 0x30
  4062e6:	d0f9      	beq.n	4062dc <_dtoa_r+0xdbc>
  4062e8:	e5b5      	b.n	405e56 <_dtoa_r+0x936>
  4062ea:	2700      	movs	r7, #0
  4062ec:	9708      	str	r7, [sp, #32]
  4062ee:	f7ff ba4c 	b.w	40578a <_dtoa_r+0x26a>
  4062f2:	9e08      	ldr	r6, [sp, #32]
  4062f4:	4620      	mov	r0, r4
  4062f6:	6871      	ldr	r1, [r6, #4]
  4062f8:	f001 f936 	bl	407568 <_Balloc>
  4062fc:	6933      	ldr	r3, [r6, #16]
  4062fe:	4605      	mov	r5, r0
  406300:	f106 010c 	add.w	r1, r6, #12
  406304:	1c9a      	adds	r2, r3, #2
  406306:	300c      	adds	r0, #12
  406308:	0092      	lsls	r2, r2, #2
  40630a:	f001 f82d 	bl	407368 <memcpy>
  40630e:	4620      	mov	r0, r4
  406310:	4629      	mov	r1, r5
  406312:	2201      	movs	r2, #1
  406314:	f001 faec 	bl	4078f0 <__lshift>
  406318:	4606      	mov	r6, r0
  40631a:	e6b8      	b.n	40608e <_dtoa_r+0xb6e>
  40631c:	9b16      	ldr	r3, [sp, #88]	; 0x58
  40631e:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  406320:	9d07      	ldr	r5, [sp, #28]
  406322:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
  406326:	f7ff bb4d 	b.w	4059c4 <_dtoa_r+0x4a4>
  40632a:	f1bc 0f39 	cmp.w	ip, #57	; 0x39
  40632e:	9706      	str	r7, [sp, #24]
  406330:	f8cd b020 	str.w	fp, [sp, #32]
  406334:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  406336:	d030      	beq.n	40639a <_dtoa_r+0xe7a>
  406338:	f10c 0901 	add.w	r9, ip, #1
  40633c:	f8dd a020 	ldr.w	sl, [sp, #32]
  406340:	f108 0501 	add.w	r5, r8, #1
  406344:	9608      	str	r6, [sp, #32]
  406346:	f888 9000 	strb.w	r9, [r8]
  40634a:	e584      	b.n	405e56 <_dtoa_r+0x936>
  40634c:	9706      	str	r7, [sp, #24]
  40634e:	46e1      	mov	r9, ip
  406350:	46da      	mov	sl, fp
  406352:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  406354:	9608      	str	r6, [sp, #32]
  406356:	e562      	b.n	405e1e <_dtoa_r+0x8fe>
  406358:	46b0      	mov	r8, r6
  40635a:	e504      	b.n	405d66 <_dtoa_r+0x846>
  40635c:	f1bc 0f39 	cmp.w	ip, #57	; 0x39
  406360:	9706      	str	r7, [sp, #24]
  406362:	f8cd b020 	str.w	fp, [sp, #32]
  406366:	4655      	mov	r5, sl
  406368:	46cb      	mov	fp, r9
  40636a:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  40636c:	46e1      	mov	r9, ip
  40636e:	d00b      	beq.n	406388 <_dtoa_r+0xe68>
  406370:	2d00      	cmp	r5, #0
  406372:	dd01      	ble.n	406378 <_dtoa_r+0xe58>
  406374:	f10b 0931 	add.w	r9, fp, #49	; 0x31
  406378:	f8dd a020 	ldr.w	sl, [sp, #32]
  40637c:	f108 0501 	add.w	r5, r8, #1
  406380:	f888 9000 	strb.w	r9, [r8]
  406384:	9608      	str	r6, [sp, #32]
  406386:	e566      	b.n	405e56 <_dtoa_r+0x936>
  406388:	f8dd a020 	ldr.w	sl, [sp, #32]
  40638c:	9608      	str	r6, [sp, #32]
  40638e:	2239      	movs	r2, #57	; 0x39
  406390:	f108 0501 	add.w	r5, r8, #1
  406394:	f888 2000 	strb.w	r2, [r8]
  406398:	e54f      	b.n	405e3a <_dtoa_r+0x91a>
  40639a:	46da      	mov	sl, fp
  40639c:	9608      	str	r6, [sp, #32]
  40639e:	e7f6      	b.n	40638e <_dtoa_r+0xe6e>
  4063a0:	d18d      	bne.n	4062be <_dtoa_r+0xd9e>
  4063a2:	f019 0f01 	tst.w	r9, #1
  4063a6:	d08a      	beq.n	4062be <_dtoa_r+0xd9e>
  4063a8:	e784      	b.n	4062b4 <_dtoa_r+0xd94>
  4063aa:	f04f 0802 	mov.w	r8, #2
  4063ae:	f7ff bb72 	b.w	405a96 <_dtoa_r+0x576>
  4063b2:	9b10      	ldr	r3, [sp, #64]	; 0x40
  4063b4:	9304      	str	r3, [sp, #16]
  4063b6:	e50e      	b.n	405dd6 <_dtoa_r+0x8b6>
  4063b8:	f43f aa75 	beq.w	4058a6 <_dtoa_r+0x386>
  4063bc:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
  4063c0:	f7ff ba6a 	b.w	405898 <_dtoa_r+0x378>
  4063c4:	2501      	movs	r5, #1
  4063c6:	f7ff b982 	b.w	4056ce <_dtoa_r+0x1ae>
  4063ca:	2500      	movs	r5, #0
  4063cc:	4620      	mov	r0, r4
  4063ce:	6465      	str	r5, [r4, #68]	; 0x44
  4063d0:	4629      	mov	r1, r5
  4063d2:	f001 f8c9 	bl	407568 <_Balloc>
  4063d6:	9a02      	ldr	r2, [sp, #8]
  4063d8:	9005      	str	r0, [sp, #20]
  4063da:	2a0e      	cmp	r2, #14
  4063dc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  4063de:	6420      	str	r0, [r4, #64]	; 0x40
  4063e0:	f73f aad7 	bgt.w	405992 <_dtoa_r+0x472>
  4063e4:	42ab      	cmp	r3, r5
  4063e6:	f6ff aad4 	blt.w	405992 <_dtoa_r+0x472>
  4063ea:	f04f 33ff 	mov.w	r3, #4294967295
  4063ee:	9523      	str	r5, [sp, #140]	; 0x8c
  4063f0:	9304      	str	r3, [sp, #16]
  4063f2:	f7ff b9a9 	b.w	405748 <_dtoa_r+0x228>
  4063f6:	2301      	movs	r3, #1
  4063f8:	930b      	str	r3, [sp, #44]	; 0x2c
  4063fa:	f7ff bbfa 	b.w	405bf2 <_dtoa_r+0x6d2>
  4063fe:	bf00      	nop
  406400:	40240000 	.word	0x40240000
  406404:	401c0000 	.word	0x401c0000

00406408 <__sflush_r>:
  406408:	898b      	ldrh	r3, [r1, #12]
  40640a:	b29a      	uxth	r2, r3
  40640c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  406410:	460d      	mov	r5, r1
  406412:	0711      	lsls	r1, r2, #28
  406414:	4680      	mov	r8, r0
  406416:	d43c      	bmi.n	406492 <__sflush_r+0x8a>
  406418:	686a      	ldr	r2, [r5, #4]
  40641a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  40641e:	2a00      	cmp	r2, #0
  406420:	81ab      	strh	r3, [r5, #12]
  406422:	dd76      	ble.n	406512 <__sflush_r+0x10a>
  406424:	6aae      	ldr	r6, [r5, #40]	; 0x28
  406426:	2e00      	cmp	r6, #0
  406428:	d04b      	beq.n	4064c2 <__sflush_r+0xba>
  40642a:	b29b      	uxth	r3, r3
  40642c:	2100      	movs	r1, #0
  40642e:	f8d8 4000 	ldr.w	r4, [r8]
  406432:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
  406436:	f8c8 1000 	str.w	r1, [r8]
  40643a:	b292      	uxth	r2, r2
  40643c:	2a00      	cmp	r2, #0
  40643e:	d06c      	beq.n	40651a <__sflush_r+0x112>
  406440:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  406442:	075f      	lsls	r7, r3, #29
  406444:	d505      	bpl.n	406452 <__sflush_r+0x4a>
  406446:	6869      	ldr	r1, [r5, #4]
  406448:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  40644a:	1a52      	subs	r2, r2, r1
  40644c:	b10b      	cbz	r3, 406452 <__sflush_r+0x4a>
  40644e:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  406450:	1ad2      	subs	r2, r2, r3
  406452:	4640      	mov	r0, r8
  406454:	69e9      	ldr	r1, [r5, #28]
  406456:	2300      	movs	r3, #0
  406458:	47b0      	blx	r6
  40645a:	1c46      	adds	r6, r0, #1
  40645c:	d03e      	beq.n	4064dc <__sflush_r+0xd4>
  40645e:	89ab      	ldrh	r3, [r5, #12]
  406460:	2100      	movs	r1, #0
  406462:	692a      	ldr	r2, [r5, #16]
  406464:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  406468:	6069      	str	r1, [r5, #4]
  40646a:	602a      	str	r2, [r5, #0]
  40646c:	b29b      	uxth	r3, r3
  40646e:	04da      	lsls	r2, r3, #19
  406470:	81ab      	strh	r3, [r5, #12]
  406472:	d44c      	bmi.n	40650e <__sflush_r+0x106>
  406474:	6b29      	ldr	r1, [r5, #48]	; 0x30
  406476:	f8c8 4000 	str.w	r4, [r8]
  40647a:	b311      	cbz	r1, 4064c2 <__sflush_r+0xba>
  40647c:	f105 0340 	add.w	r3, r5, #64	; 0x40
  406480:	4299      	cmp	r1, r3
  406482:	d002      	beq.n	40648a <__sflush_r+0x82>
  406484:	4640      	mov	r0, r8
  406486:	f000 f96b 	bl	406760 <_free_r>
  40648a:	2000      	movs	r0, #0
  40648c:	6328      	str	r0, [r5, #48]	; 0x30
  40648e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  406492:	692e      	ldr	r6, [r5, #16]
  406494:	b1ae      	cbz	r6, 4064c2 <__sflush_r+0xba>
  406496:	682c      	ldr	r4, [r5, #0]
  406498:	0791      	lsls	r1, r2, #30
  40649a:	602e      	str	r6, [r5, #0]
  40649c:	eba4 0406 	sub.w	r4, r4, r6
  4064a0:	d11a      	bne.n	4064d8 <__sflush_r+0xd0>
  4064a2:	696b      	ldr	r3, [r5, #20]
  4064a4:	60ab      	str	r3, [r5, #8]
  4064a6:	e00a      	b.n	4064be <__sflush_r+0xb6>
  4064a8:	4632      	mov	r2, r6
  4064aa:	4623      	mov	r3, r4
  4064ac:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  4064ae:	4640      	mov	r0, r8
  4064b0:	69e9      	ldr	r1, [r5, #28]
  4064b2:	47b8      	blx	r7
  4064b4:	2800      	cmp	r0, #0
  4064b6:	eba4 0400 	sub.w	r4, r4, r0
  4064ba:	4406      	add	r6, r0
  4064bc:	dd04      	ble.n	4064c8 <__sflush_r+0xc0>
  4064be:	2c00      	cmp	r4, #0
  4064c0:	dcf2      	bgt.n	4064a8 <__sflush_r+0xa0>
  4064c2:	2000      	movs	r0, #0
  4064c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4064c8:	89ab      	ldrh	r3, [r5, #12]
  4064ca:	f04f 30ff 	mov.w	r0, #4294967295
  4064ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4064d2:	81ab      	strh	r3, [r5, #12]
  4064d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4064d8:	2300      	movs	r3, #0
  4064da:	e7e3      	b.n	4064a4 <__sflush_r+0x9c>
  4064dc:	f8d8 3000 	ldr.w	r3, [r8]
  4064e0:	fab3 f283 	clz	r2, r3
  4064e4:	2b00      	cmp	r3, #0
  4064e6:	bf18      	it	ne
  4064e8:	2b1d      	cmpne	r3, #29
  4064ea:	ea4f 1252 	mov.w	r2, r2, lsr #5
  4064ee:	d001      	beq.n	4064f4 <__sflush_r+0xec>
  4064f0:	2b16      	cmp	r3, #22
  4064f2:	d127      	bne.n	406544 <__sflush_r+0x13c>
  4064f4:	89ab      	ldrh	r3, [r5, #12]
  4064f6:	2600      	movs	r6, #0
  4064f8:	6929      	ldr	r1, [r5, #16]
  4064fa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  4064fe:	b29b      	uxth	r3, r3
  406500:	81ab      	strh	r3, [r5, #12]
  406502:	04db      	lsls	r3, r3, #19
  406504:	e885 0042 	stmia.w	r5, {r1, r6}
  406508:	d5b4      	bpl.n	406474 <__sflush_r+0x6c>
  40650a:	2a00      	cmp	r2, #0
  40650c:	d0b2      	beq.n	406474 <__sflush_r+0x6c>
  40650e:	6528      	str	r0, [r5, #80]	; 0x50
  406510:	e7b0      	b.n	406474 <__sflush_r+0x6c>
  406512:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  406514:	2a00      	cmp	r2, #0
  406516:	dc85      	bgt.n	406424 <__sflush_r+0x1c>
  406518:	e7d3      	b.n	4064c2 <__sflush_r+0xba>
  40651a:	2301      	movs	r3, #1
  40651c:	4640      	mov	r0, r8
  40651e:	69e9      	ldr	r1, [r5, #28]
  406520:	47b0      	blx	r6
  406522:	1c43      	adds	r3, r0, #1
  406524:	4602      	mov	r2, r0
  406526:	d002      	beq.n	40652e <__sflush_r+0x126>
  406528:	89ab      	ldrh	r3, [r5, #12]
  40652a:	6aae      	ldr	r6, [r5, #40]	; 0x28
  40652c:	e789      	b.n	406442 <__sflush_r+0x3a>
  40652e:	f8d8 3000 	ldr.w	r3, [r8]
  406532:	2b00      	cmp	r3, #0
  406534:	d0f8      	beq.n	406528 <__sflush_r+0x120>
  406536:	2b16      	cmp	r3, #22
  406538:	d001      	beq.n	40653e <__sflush_r+0x136>
  40653a:	2b1d      	cmp	r3, #29
  40653c:	d1c4      	bne.n	4064c8 <__sflush_r+0xc0>
  40653e:	f8c8 4000 	str.w	r4, [r8]
  406542:	e7be      	b.n	4064c2 <__sflush_r+0xba>
  406544:	89ab      	ldrh	r3, [r5, #12]
  406546:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40654a:	81ab      	strh	r3, [r5, #12]
  40654c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00406550 <_fflush_r>:
  406550:	b510      	push	{r4, lr}
  406552:	4604      	mov	r4, r0
  406554:	b082      	sub	sp, #8
  406556:	b108      	cbz	r0, 40655c <_fflush_r+0xc>
  406558:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40655a:	b153      	cbz	r3, 406572 <_fflush_r+0x22>
  40655c:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
  406560:	b908      	cbnz	r0, 406566 <_fflush_r+0x16>
  406562:	b002      	add	sp, #8
  406564:	bd10      	pop	{r4, pc}
  406566:	4620      	mov	r0, r4
  406568:	b002      	add	sp, #8
  40656a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40656e:	f7ff bf4b 	b.w	406408 <__sflush_r>
  406572:	9101      	str	r1, [sp, #4]
  406574:	f000 f886 	bl	406684 <__sinit>
  406578:	9901      	ldr	r1, [sp, #4]
  40657a:	e7ef      	b.n	40655c <_fflush_r+0xc>

0040657c <_cleanup_r>:
  40657c:	4901      	ldr	r1, [pc, #4]	; (406584 <_cleanup_r+0x8>)
  40657e:	f000 bb59 	b.w	406c34 <_fwalk_reent>
  406582:	bf00      	nop
  406584:	004082c5 	.word	0x004082c5

00406588 <__sinit.part.1>:
  406588:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40658c:	4682      	mov	sl, r0
  40658e:	2400      	movs	r4, #0
  406590:	4837      	ldr	r0, [pc, #220]	; (406670 <__sinit.part.1+0xe8>)
  406592:	2103      	movs	r1, #3
  406594:	f8da 5004 	ldr.w	r5, [sl, #4]
  406598:	f50a 723b 	add.w	r2, sl, #748	; 0x2ec
  40659c:	2604      	movs	r6, #4
  40659e:	f8ca 003c 	str.w	r0, [sl, #60]	; 0x3c
  4065a2:	f8ca 12e4 	str.w	r1, [sl, #740]	; 0x2e4
  4065a6:	f105 005c 	add.w	r0, r5, #92	; 0x5c
  4065aa:	f8ca 22e8 	str.w	r2, [sl, #744]	; 0x2e8
  4065ae:	4621      	mov	r1, r4
  4065b0:	f8ca 42e0 	str.w	r4, [sl, #736]	; 0x2e0
  4065b4:	2208      	movs	r2, #8
  4065b6:	81ae      	strh	r6, [r5, #12]
  4065b8:	602c      	str	r4, [r5, #0]
  4065ba:	606c      	str	r4, [r5, #4]
  4065bc:	60ac      	str	r4, [r5, #8]
  4065be:	666c      	str	r4, [r5, #100]	; 0x64
  4065c0:	81ec      	strh	r4, [r5, #14]
  4065c2:	612c      	str	r4, [r5, #16]
  4065c4:	616c      	str	r4, [r5, #20]
  4065c6:	61ac      	str	r4, [r5, #24]
  4065c8:	f7fd fa5a 	bl	403a80 <memset>
  4065cc:	f8df b0a8 	ldr.w	fp, [pc, #168]	; 406678 <__sinit.part.1+0xf0>
  4065d0:	f8da 6008 	ldr.w	r6, [sl, #8]
  4065d4:	f04f 0301 	mov.w	r3, #1
  4065d8:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 40667c <__sinit.part.1+0xf4>
  4065dc:	f04f 0e09 	mov.w	lr, #9
  4065e0:	f8df 809c 	ldr.w	r8, [pc, #156]	; 406680 <__sinit.part.1+0xf8>
  4065e4:	4621      	mov	r1, r4
  4065e6:	4f23      	ldr	r7, [pc, #140]	; (406674 <__sinit.part.1+0xec>)
  4065e8:	2208      	movs	r2, #8
  4065ea:	61ed      	str	r5, [r5, #28]
  4065ec:	f106 005c 	add.w	r0, r6, #92	; 0x5c
  4065f0:	f8c5 b020 	str.w	fp, [r5, #32]
  4065f4:	f8c5 9024 	str.w	r9, [r5, #36]	; 0x24
  4065f8:	f8c5 8028 	str.w	r8, [r5, #40]	; 0x28
  4065fc:	62ef      	str	r7, [r5, #44]	; 0x2c
  4065fe:	81f3      	strh	r3, [r6, #14]
  406600:	f8a6 e00c 	strh.w	lr, [r6, #12]
  406604:	6034      	str	r4, [r6, #0]
  406606:	6074      	str	r4, [r6, #4]
  406608:	60b4      	str	r4, [r6, #8]
  40660a:	6674      	str	r4, [r6, #100]	; 0x64
  40660c:	6134      	str	r4, [r6, #16]
  40660e:	6174      	str	r4, [r6, #20]
  406610:	61b4      	str	r4, [r6, #24]
  406612:	f7fd fa35 	bl	403a80 <memset>
  406616:	f8da 500c 	ldr.w	r5, [sl, #12]
  40661a:	f04f 0c12 	mov.w	ip, #18
  40661e:	f04f 0e02 	mov.w	lr, #2
  406622:	61f6      	str	r6, [r6, #28]
  406624:	4621      	mov	r1, r4
  406626:	f8c6 b020 	str.w	fp, [r6, #32]
  40662a:	f105 005c 	add.w	r0, r5, #92	; 0x5c
  40662e:	f8c6 9024 	str.w	r9, [r6, #36]	; 0x24
  406632:	2208      	movs	r2, #8
  406634:	f8c6 8028 	str.w	r8, [r6, #40]	; 0x28
  406638:	62f7      	str	r7, [r6, #44]	; 0x2c
  40663a:	602c      	str	r4, [r5, #0]
  40663c:	606c      	str	r4, [r5, #4]
  40663e:	60ac      	str	r4, [r5, #8]
  406640:	666c      	str	r4, [r5, #100]	; 0x64
  406642:	612c      	str	r4, [r5, #16]
  406644:	616c      	str	r4, [r5, #20]
  406646:	61ac      	str	r4, [r5, #24]
  406648:	f8a5 c00c 	strh.w	ip, [r5, #12]
  40664c:	f8a5 e00e 	strh.w	lr, [r5, #14]
  406650:	f7fd fa16 	bl	403a80 <memset>
  406654:	2301      	movs	r3, #1
  406656:	61ed      	str	r5, [r5, #28]
  406658:	f8c5 b020 	str.w	fp, [r5, #32]
  40665c:	f8c5 9024 	str.w	r9, [r5, #36]	; 0x24
  406660:	f8c5 8028 	str.w	r8, [r5, #40]	; 0x28
  406664:	62ef      	str	r7, [r5, #44]	; 0x2c
  406666:	f8ca 3038 	str.w	r3, [sl, #56]	; 0x38
  40666a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40666e:	bf00      	nop
  406670:	0040657d 	.word	0x0040657d
  406674:	00408059 	.word	0x00408059
  406678:	00407fd9 	.word	0x00407fd9
  40667c:	00407ffd 	.word	0x00407ffd
  406680:	00408035 	.word	0x00408035

00406684 <__sinit>:
  406684:	6b83      	ldr	r3, [r0, #56]	; 0x38
  406686:	b103      	cbz	r3, 40668a <__sinit+0x6>
  406688:	4770      	bx	lr
  40668a:	f7ff bf7d 	b.w	406588 <__sinit.part.1>
  40668e:	bf00      	nop

00406690 <__sfp_lock_acquire>:
  406690:	4770      	bx	lr
  406692:	bf00      	nop

00406694 <__sfp_lock_release>:
  406694:	4770      	bx	lr
  406696:	bf00      	nop

00406698 <__libc_fini_array>:
  406698:	b538      	push	{r3, r4, r5, lr}
  40669a:	4b08      	ldr	r3, [pc, #32]	; (4066bc <__libc_fini_array+0x24>)
  40669c:	4d08      	ldr	r5, [pc, #32]	; (4066c0 <__libc_fini_array+0x28>)
  40669e:	1aed      	subs	r5, r5, r3
  4066a0:	10ac      	asrs	r4, r5, #2
  4066a2:	bf18      	it	ne
  4066a4:	18ed      	addne	r5, r5, r3
  4066a6:	d005      	beq.n	4066b4 <__libc_fini_array+0x1c>
  4066a8:	3c01      	subs	r4, #1
  4066aa:	f855 3d04 	ldr.w	r3, [r5, #-4]!
  4066ae:	4798      	blx	r3
  4066b0:	2c00      	cmp	r4, #0
  4066b2:	d1f9      	bne.n	4066a8 <__libc_fini_array+0x10>
  4066b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  4066b8:	f002 bfac 	b.w	409614 <_fini>
  4066bc:	00409620 	.word	0x00409620
  4066c0:	00409624 	.word	0x00409624

004066c4 <_malloc_trim_r>:
  4066c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4066c6:	4f22      	ldr	r7, [pc, #136]	; (406750 <_malloc_trim_r+0x8c>)
  4066c8:	460c      	mov	r4, r1
  4066ca:	4606      	mov	r6, r0
  4066cc:	f000 ff48 	bl	407560 <__malloc_lock>
  4066d0:	68ba      	ldr	r2, [r7, #8]
  4066d2:	4b20      	ldr	r3, [pc, #128]	; (406754 <_malloc_trim_r+0x90>)
  4066d4:	6855      	ldr	r5, [r2, #4]
  4066d6:	f025 0503 	bic.w	r5, r5, #3
  4066da:	1b2c      	subs	r4, r5, r4
  4066dc:	f604 74ef 	addw	r4, r4, #4079	; 0xfef
  4066e0:	4023      	ands	r3, r4
  4066e2:	f5a3 5480 	sub.w	r4, r3, #4096	; 0x1000
  4066e6:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  4066ea:	db07      	blt.n	4066fc <_malloc_trim_r+0x38>
  4066ec:	4630      	mov	r0, r6
  4066ee:	2100      	movs	r1, #0
  4066f0:	f001 fc60 	bl	407fb4 <_sbrk_r>
  4066f4:	68bb      	ldr	r3, [r7, #8]
  4066f6:	442b      	add	r3, r5
  4066f8:	4298      	cmp	r0, r3
  4066fa:	d004      	beq.n	406706 <_malloc_trim_r+0x42>
  4066fc:	4630      	mov	r0, r6
  4066fe:	f000 ff31 	bl	407564 <__malloc_unlock>
  406702:	2000      	movs	r0, #0
  406704:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  406706:	4630      	mov	r0, r6
  406708:	4261      	negs	r1, r4
  40670a:	f001 fc53 	bl	407fb4 <_sbrk_r>
  40670e:	3001      	adds	r0, #1
  406710:	d00d      	beq.n	40672e <_malloc_trim_r+0x6a>
  406712:	4a11      	ldr	r2, [pc, #68]	; (406758 <_malloc_trim_r+0x94>)
  406714:	1b2d      	subs	r5, r5, r4
  406716:	68b9      	ldr	r1, [r7, #8]
  406718:	4630      	mov	r0, r6
  40671a:	6813      	ldr	r3, [r2, #0]
  40671c:	f045 0501 	orr.w	r5, r5, #1
  406720:	1b1b      	subs	r3, r3, r4
  406722:	604d      	str	r5, [r1, #4]
  406724:	6013      	str	r3, [r2, #0]
  406726:	f000 ff1d 	bl	407564 <__malloc_unlock>
  40672a:	2001      	movs	r0, #1
  40672c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40672e:	4630      	mov	r0, r6
  406730:	2100      	movs	r1, #0
  406732:	f001 fc3f 	bl	407fb4 <_sbrk_r>
  406736:	68ba      	ldr	r2, [r7, #8]
  406738:	1a83      	subs	r3, r0, r2
  40673a:	2b0f      	cmp	r3, #15
  40673c:	ddde      	ble.n	4066fc <_malloc_trim_r+0x38>
  40673e:	4c07      	ldr	r4, [pc, #28]	; (40675c <_malloc_trim_r+0x98>)
  406740:	f043 0301 	orr.w	r3, r3, #1
  406744:	4904      	ldr	r1, [pc, #16]	; (406758 <_malloc_trim_r+0x94>)
  406746:	6824      	ldr	r4, [r4, #0]
  406748:	6053      	str	r3, [r2, #4]
  40674a:	1b00      	subs	r0, r0, r4
  40674c:	6008      	str	r0, [r1, #0]
  40674e:	e7d5      	b.n	4066fc <_malloc_trim_r+0x38>
  406750:	204004ec 	.word	0x204004ec
  406754:	fffff000 	.word	0xfffff000
  406758:	204009c0 	.word	0x204009c0
  40675c:	204008f8 	.word	0x204008f8

00406760 <_free_r>:
  406760:	2900      	cmp	r1, #0
  406762:	d04d      	beq.n	406800 <_free_r+0xa0>
  406764:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  406768:	460c      	mov	r4, r1
  40676a:	4680      	mov	r8, r0
  40676c:	f000 fef8 	bl	407560 <__malloc_lock>
  406770:	4963      	ldr	r1, [pc, #396]	; (406900 <_free_r+0x1a0>)
  406772:	f854 7c04 	ldr.w	r7, [r4, #-4]
  406776:	f1a4 0508 	sub.w	r5, r4, #8
  40677a:	688e      	ldr	r6, [r1, #8]
  40677c:	f027 0301 	bic.w	r3, r7, #1
  406780:	18ea      	adds	r2, r5, r3
  406782:	6850      	ldr	r0, [r2, #4]
  406784:	4296      	cmp	r6, r2
  406786:	f020 0003 	bic.w	r0, r0, #3
  40678a:	d059      	beq.n	406840 <_free_r+0xe0>
  40678c:	07fe      	lsls	r6, r7, #31
  40678e:	6050      	str	r0, [r2, #4]
  406790:	d40b      	bmi.n	4067aa <_free_r+0x4a>
  406792:	f854 4c08 	ldr.w	r4, [r4, #-8]
  406796:	f101 0708 	add.w	r7, r1, #8
  40679a:	1b2d      	subs	r5, r5, r4
  40679c:	4423      	add	r3, r4
  40679e:	68ac      	ldr	r4, [r5, #8]
  4067a0:	42bc      	cmp	r4, r7
  4067a2:	d066      	beq.n	406872 <_free_r+0x112>
  4067a4:	68ef      	ldr	r7, [r5, #12]
  4067a6:	60e7      	str	r7, [r4, #12]
  4067a8:	60bc      	str	r4, [r7, #8]
  4067aa:	1814      	adds	r4, r2, r0
  4067ac:	6864      	ldr	r4, [r4, #4]
  4067ae:	07e4      	lsls	r4, r4, #31
  4067b0:	d40c      	bmi.n	4067cc <_free_r+0x6c>
  4067b2:	4c54      	ldr	r4, [pc, #336]	; (406904 <_free_r+0x1a4>)
  4067b4:	4403      	add	r3, r0
  4067b6:	6890      	ldr	r0, [r2, #8]
  4067b8:	42a0      	cmp	r0, r4
  4067ba:	d07c      	beq.n	4068b6 <_free_r+0x156>
  4067bc:	68d4      	ldr	r4, [r2, #12]
  4067be:	f043 0201 	orr.w	r2, r3, #1
  4067c2:	60c4      	str	r4, [r0, #12]
  4067c4:	60a0      	str	r0, [r4, #8]
  4067c6:	606a      	str	r2, [r5, #4]
  4067c8:	50eb      	str	r3, [r5, r3]
  4067ca:	e003      	b.n	4067d4 <_free_r+0x74>
  4067cc:	f043 0201 	orr.w	r2, r3, #1
  4067d0:	606a      	str	r2, [r5, #4]
  4067d2:	50eb      	str	r3, [r5, r3]
  4067d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  4067d8:	d213      	bcs.n	406802 <_free_r+0xa2>
  4067da:	08db      	lsrs	r3, r3, #3
  4067dc:	2001      	movs	r0, #1
  4067de:	684a      	ldr	r2, [r1, #4]
  4067e0:	109c      	asrs	r4, r3, #2
  4067e2:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
  4067e6:	40a0      	lsls	r0, r4
  4067e8:	689c      	ldr	r4, [r3, #8]
  4067ea:	4302      	orrs	r2, r0
  4067ec:	60eb      	str	r3, [r5, #12]
  4067ee:	60ac      	str	r4, [r5, #8]
  4067f0:	604a      	str	r2, [r1, #4]
  4067f2:	609d      	str	r5, [r3, #8]
  4067f4:	60e5      	str	r5, [r4, #12]
  4067f6:	4640      	mov	r0, r8
  4067f8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  4067fc:	f000 beb2 	b.w	407564 <__malloc_unlock>
  406800:	4770      	bx	lr
  406802:	0a5a      	lsrs	r2, r3, #9
  406804:	2a04      	cmp	r2, #4
  406806:	d847      	bhi.n	406898 <_free_r+0x138>
  406808:	099a      	lsrs	r2, r3, #6
  40680a:	f102 0438 	add.w	r4, r2, #56	; 0x38
  40680e:	0060      	lsls	r0, r4, #1
  406810:	eb01 0080 	add.w	r0, r1, r0, lsl #2
  406814:	493a      	ldr	r1, [pc, #232]	; (406900 <_free_r+0x1a0>)
  406816:	6882      	ldr	r2, [r0, #8]
  406818:	4282      	cmp	r2, r0
  40681a:	d043      	beq.n	4068a4 <_free_r+0x144>
  40681c:	6851      	ldr	r1, [r2, #4]
  40681e:	f021 0103 	bic.w	r1, r1, #3
  406822:	4299      	cmp	r1, r3
  406824:	d902      	bls.n	40682c <_free_r+0xcc>
  406826:	6892      	ldr	r2, [r2, #8]
  406828:	4290      	cmp	r0, r2
  40682a:	d1f7      	bne.n	40681c <_free_r+0xbc>
  40682c:	68d3      	ldr	r3, [r2, #12]
  40682e:	60eb      	str	r3, [r5, #12]
  406830:	4640      	mov	r0, r8
  406832:	60aa      	str	r2, [r5, #8]
  406834:	609d      	str	r5, [r3, #8]
  406836:	60d5      	str	r5, [r2, #12]
  406838:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40683c:	f000 be92 	b.w	407564 <__malloc_unlock>
  406840:	07ff      	lsls	r7, r7, #31
  406842:	4403      	add	r3, r0
  406844:	d407      	bmi.n	406856 <_free_r+0xf6>
  406846:	f854 2c08 	ldr.w	r2, [r4, #-8]
  40684a:	1aad      	subs	r5, r5, r2
  40684c:	4413      	add	r3, r2
  40684e:	68a8      	ldr	r0, [r5, #8]
  406850:	68ea      	ldr	r2, [r5, #12]
  406852:	60c2      	str	r2, [r0, #12]
  406854:	6090      	str	r0, [r2, #8]
  406856:	4a2c      	ldr	r2, [pc, #176]	; (406908 <_free_r+0x1a8>)
  406858:	f043 0001 	orr.w	r0, r3, #1
  40685c:	6812      	ldr	r2, [r2, #0]
  40685e:	6068      	str	r0, [r5, #4]
  406860:	4293      	cmp	r3, r2
  406862:	608d      	str	r5, [r1, #8]
  406864:	d3c7      	bcc.n	4067f6 <_free_r+0x96>
  406866:	4b29      	ldr	r3, [pc, #164]	; (40690c <_free_r+0x1ac>)
  406868:	4640      	mov	r0, r8
  40686a:	6819      	ldr	r1, [r3, #0]
  40686c:	f7ff ff2a 	bl	4066c4 <_malloc_trim_r>
  406870:	e7c1      	b.n	4067f6 <_free_r+0x96>
  406872:	1811      	adds	r1, r2, r0
  406874:	6849      	ldr	r1, [r1, #4]
  406876:	07c9      	lsls	r1, r1, #31
  406878:	d409      	bmi.n	40688e <_free_r+0x12e>
  40687a:	4403      	add	r3, r0
  40687c:	68d1      	ldr	r1, [r2, #12]
  40687e:	6892      	ldr	r2, [r2, #8]
  406880:	f043 0001 	orr.w	r0, r3, #1
  406884:	60d1      	str	r1, [r2, #12]
  406886:	608a      	str	r2, [r1, #8]
  406888:	6068      	str	r0, [r5, #4]
  40688a:	50eb      	str	r3, [r5, r3]
  40688c:	e7b3      	b.n	4067f6 <_free_r+0x96>
  40688e:	f043 0201 	orr.w	r2, r3, #1
  406892:	606a      	str	r2, [r5, #4]
  406894:	50eb      	str	r3, [r5, r3]
  406896:	e7ae      	b.n	4067f6 <_free_r+0x96>
  406898:	2a14      	cmp	r2, #20
  40689a:	d815      	bhi.n	4068c8 <_free_r+0x168>
  40689c:	f102 045b 	add.w	r4, r2, #91	; 0x5b
  4068a0:	0060      	lsls	r0, r4, #1
  4068a2:	e7b5      	b.n	406810 <_free_r+0xb0>
  4068a4:	10a4      	asrs	r4, r4, #2
  4068a6:	2701      	movs	r7, #1
  4068a8:	6848      	ldr	r0, [r1, #4]
  4068aa:	4613      	mov	r3, r2
  4068ac:	fa07 f404 	lsl.w	r4, r7, r4
  4068b0:	4320      	orrs	r0, r4
  4068b2:	6048      	str	r0, [r1, #4]
  4068b4:	e7bb      	b.n	40682e <_free_r+0xce>
  4068b6:	f043 0201 	orr.w	r2, r3, #1
  4068ba:	614d      	str	r5, [r1, #20]
  4068bc:	610d      	str	r5, [r1, #16]
  4068be:	60e8      	str	r0, [r5, #12]
  4068c0:	60a8      	str	r0, [r5, #8]
  4068c2:	606a      	str	r2, [r5, #4]
  4068c4:	50eb      	str	r3, [r5, r3]
  4068c6:	e796      	b.n	4067f6 <_free_r+0x96>
  4068c8:	2a54      	cmp	r2, #84	; 0x54
  4068ca:	d804      	bhi.n	4068d6 <_free_r+0x176>
  4068cc:	0b1a      	lsrs	r2, r3, #12
  4068ce:	f102 046e 	add.w	r4, r2, #110	; 0x6e
  4068d2:	0060      	lsls	r0, r4, #1
  4068d4:	e79c      	b.n	406810 <_free_r+0xb0>
  4068d6:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  4068da:	d804      	bhi.n	4068e6 <_free_r+0x186>
  4068dc:	0bda      	lsrs	r2, r3, #15
  4068de:	f102 0477 	add.w	r4, r2, #119	; 0x77
  4068e2:	0060      	lsls	r0, r4, #1
  4068e4:	e794      	b.n	406810 <_free_r+0xb0>
  4068e6:	f240 5054 	movw	r0, #1364	; 0x554
  4068ea:	4282      	cmp	r2, r0
  4068ec:	d804      	bhi.n	4068f8 <_free_r+0x198>
  4068ee:	0c9a      	lsrs	r2, r3, #18
  4068f0:	f102 047c 	add.w	r4, r2, #124	; 0x7c
  4068f4:	0060      	lsls	r0, r4, #1
  4068f6:	e78b      	b.n	406810 <_free_r+0xb0>
  4068f8:	20fc      	movs	r0, #252	; 0xfc
  4068fa:	247e      	movs	r4, #126	; 0x7e
  4068fc:	e788      	b.n	406810 <_free_r+0xb0>
  4068fe:	bf00      	nop
  406900:	204004ec 	.word	0x204004ec
  406904:	204004f4 	.word	0x204004f4
  406908:	204008f4 	.word	0x204008f4
  40690c:	204009bc 	.word	0x204009bc

00406910 <__sfvwrite_r>:
  406910:	6893      	ldr	r3, [r2, #8]
  406912:	2b00      	cmp	r3, #0
  406914:	d07a      	beq.n	406a0c <__sfvwrite_r+0xfc>
  406916:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40691a:	f8b1 e00c 	ldrh.w	lr, [r1, #12]
  40691e:	b083      	sub	sp, #12
  406920:	460c      	mov	r4, r1
  406922:	4681      	mov	r9, r0
  406924:	f01e 0f08 	tst.w	lr, #8
  406928:	4616      	mov	r6, r2
  40692a:	d026      	beq.n	40697a <__sfvwrite_r+0x6a>
  40692c:	690b      	ldr	r3, [r1, #16]
  40692e:	b323      	cbz	r3, 40697a <__sfvwrite_r+0x6a>
  406930:	f00e 0802 	and.w	r8, lr, #2
  406934:	6835      	ldr	r5, [r6, #0]
  406936:	fa1f f088 	uxth.w	r0, r8
  40693a:	b370      	cbz	r0, 40699a <__sfvwrite_r+0x8a>
  40693c:	f04f 0a00 	mov.w	sl, #0
  406940:	f8df b2ec 	ldr.w	fp, [pc, #748]	; 406c30 <__sfvwrite_r+0x320>
  406944:	46d0      	mov	r8, sl
  406946:	45d8      	cmp	r8, fp
  406948:	4643      	mov	r3, r8
  40694a:	4652      	mov	r2, sl
  40694c:	4648      	mov	r0, r9
  40694e:	bf28      	it	cs
  406950:	465b      	movcs	r3, fp
  406952:	f1b8 0f00 	cmp.w	r8, #0
  406956:	d053      	beq.n	406a00 <__sfvwrite_r+0xf0>
  406958:	69e1      	ldr	r1, [r4, #28]
  40695a:	6a67      	ldr	r7, [r4, #36]	; 0x24
  40695c:	47b8      	blx	r7
  40695e:	2800      	cmp	r0, #0
  406960:	dd73      	ble.n	406a4a <__sfvwrite_r+0x13a>
  406962:	68b3      	ldr	r3, [r6, #8]
  406964:	4482      	add	sl, r0
  406966:	ebc0 0808 	rsb	r8, r0, r8
  40696a:	1a18      	subs	r0, r3, r0
  40696c:	60b0      	str	r0, [r6, #8]
  40696e:	2800      	cmp	r0, #0
  406970:	d1e9      	bne.n	406946 <__sfvwrite_r+0x36>
  406972:	2000      	movs	r0, #0
  406974:	b003      	add	sp, #12
  406976:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40697a:	4648      	mov	r0, r9
  40697c:	4621      	mov	r1, r4
  40697e:	f7fe fcbd 	bl	4052fc <__swsetup_r>
  406982:	2800      	cmp	r0, #0
  406984:	f040 814c 	bne.w	406c20 <__sfvwrite_r+0x310>
  406988:	f8b4 e00c 	ldrh.w	lr, [r4, #12]
  40698c:	6835      	ldr	r5, [r6, #0]
  40698e:	f00e 0802 	and.w	r8, lr, #2
  406992:	fa1f f088 	uxth.w	r0, r8
  406996:	2800      	cmp	r0, #0
  406998:	d1d0      	bne.n	40693c <__sfvwrite_r+0x2c>
  40699a:	f01e 0b01 	ands.w	fp, lr, #1
  40699e:	d15d      	bne.n	406a5c <__sfvwrite_r+0x14c>
  4069a0:	46d8      	mov	r8, fp
  4069a2:	f1b8 0f00 	cmp.w	r8, #0
  4069a6:	d025      	beq.n	4069f4 <__sfvwrite_r+0xe4>
  4069a8:	f41e 7f00 	tst.w	lr, #512	; 0x200
  4069ac:	68a7      	ldr	r7, [r4, #8]
  4069ae:	d02f      	beq.n	406a10 <__sfvwrite_r+0x100>
  4069b0:	45b8      	cmp	r8, r7
  4069b2:	46ba      	mov	sl, r7
  4069b4:	f0c0 80a8 	bcc.w	406b08 <__sfvwrite_r+0x1f8>
  4069b8:	f41e 6f90 	tst.w	lr, #1152	; 0x480
  4069bc:	f040 80b5 	bne.w	406b2a <__sfvwrite_r+0x21a>
  4069c0:	6820      	ldr	r0, [r4, #0]
  4069c2:	4659      	mov	r1, fp
  4069c4:	4652      	mov	r2, sl
  4069c6:	f000 fd69 	bl	40749c <memmove>
  4069ca:	68a2      	ldr	r2, [r4, #8]
  4069cc:	6821      	ldr	r1, [r4, #0]
  4069ce:	4640      	mov	r0, r8
  4069d0:	1bd7      	subs	r7, r2, r7
  4069d2:	eb01 030a 	add.w	r3, r1, sl
  4069d6:	60a7      	str	r7, [r4, #8]
  4069d8:	6023      	str	r3, [r4, #0]
  4069da:	68b3      	ldr	r3, [r6, #8]
  4069dc:	4483      	add	fp, r0
  4069de:	ebc0 0808 	rsb	r8, r0, r8
  4069e2:	1a18      	subs	r0, r3, r0
  4069e4:	60b0      	str	r0, [r6, #8]
  4069e6:	2800      	cmp	r0, #0
  4069e8:	d0c3      	beq.n	406972 <__sfvwrite_r+0x62>
  4069ea:	f8b4 e00c 	ldrh.w	lr, [r4, #12]
  4069ee:	f1b8 0f00 	cmp.w	r8, #0
  4069f2:	d1d9      	bne.n	4069a8 <__sfvwrite_r+0x98>
  4069f4:	f8d5 b000 	ldr.w	fp, [r5]
  4069f8:	3508      	adds	r5, #8
  4069fa:	f855 8c04 	ldr.w	r8, [r5, #-4]
  4069fe:	e7d0      	b.n	4069a2 <__sfvwrite_r+0x92>
  406a00:	f8d5 a000 	ldr.w	sl, [r5]
  406a04:	3508      	adds	r5, #8
  406a06:	f855 8c04 	ldr.w	r8, [r5, #-4]
  406a0a:	e79c      	b.n	406946 <__sfvwrite_r+0x36>
  406a0c:	2000      	movs	r0, #0
  406a0e:	4770      	bx	lr
  406a10:	6820      	ldr	r0, [r4, #0]
  406a12:	6923      	ldr	r3, [r4, #16]
  406a14:	4298      	cmp	r0, r3
  406a16:	d803      	bhi.n	406a20 <__sfvwrite_r+0x110>
  406a18:	6963      	ldr	r3, [r4, #20]
  406a1a:	4598      	cmp	r8, r3
  406a1c:	f080 80bf 	bcs.w	406b9e <__sfvwrite_r+0x28e>
  406a20:	4547      	cmp	r7, r8
  406a22:	4659      	mov	r1, fp
  406a24:	bf28      	it	cs
  406a26:	4647      	movcs	r7, r8
  406a28:	463a      	mov	r2, r7
  406a2a:	f000 fd37 	bl	40749c <memmove>
  406a2e:	68a3      	ldr	r3, [r4, #8]
  406a30:	6822      	ldr	r2, [r4, #0]
  406a32:	1bdb      	subs	r3, r3, r7
  406a34:	443a      	add	r2, r7
  406a36:	60a3      	str	r3, [r4, #8]
  406a38:	6022      	str	r2, [r4, #0]
  406a3a:	2b00      	cmp	r3, #0
  406a3c:	d149      	bne.n	406ad2 <__sfvwrite_r+0x1c2>
  406a3e:	4648      	mov	r0, r9
  406a40:	4621      	mov	r1, r4
  406a42:	f7ff fd85 	bl	406550 <_fflush_r>
  406a46:	2800      	cmp	r0, #0
  406a48:	d043      	beq.n	406ad2 <__sfvwrite_r+0x1c2>
  406a4a:	89a3      	ldrh	r3, [r4, #12]
  406a4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  406a50:	f04f 30ff 	mov.w	r0, #4294967295
  406a54:	81a3      	strh	r3, [r4, #12]
  406a56:	b003      	add	sp, #12
  406a58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406a5c:	4680      	mov	r8, r0
  406a5e:	4683      	mov	fp, r0
  406a60:	4682      	mov	sl, r0
  406a62:	9000      	str	r0, [sp, #0]
  406a64:	f1ba 0f00 	cmp.w	sl, #0
  406a68:	d02b      	beq.n	406ac2 <__sfvwrite_r+0x1b2>
  406a6a:	9b00      	ldr	r3, [sp, #0]
  406a6c:	2b00      	cmp	r3, #0
  406a6e:	d04f      	beq.n	406b10 <__sfvwrite_r+0x200>
  406a70:	45d0      	cmp	r8, sl
  406a72:	6962      	ldr	r2, [r4, #20]
  406a74:	68a1      	ldr	r1, [r4, #8]
  406a76:	4643      	mov	r3, r8
  406a78:	bf28      	it	cs
  406a7a:	4653      	movcs	r3, sl
  406a7c:	6820      	ldr	r0, [r4, #0]
  406a7e:	eb02 0c01 	add.w	ip, r2, r1
  406a82:	461f      	mov	r7, r3
  406a84:	4563      	cmp	r3, ip
  406a86:	dd03      	ble.n	406a90 <__sfvwrite_r+0x180>
  406a88:	6921      	ldr	r1, [r4, #16]
  406a8a:	4288      	cmp	r0, r1
  406a8c:	f200 8099 	bhi.w	406bc2 <__sfvwrite_r+0x2b2>
  406a90:	4293      	cmp	r3, r2
  406a92:	db20      	blt.n	406ad6 <__sfvwrite_r+0x1c6>
  406a94:	4613      	mov	r3, r2
  406a96:	6a67      	ldr	r7, [r4, #36]	; 0x24
  406a98:	4648      	mov	r0, r9
  406a9a:	69e1      	ldr	r1, [r4, #28]
  406a9c:	465a      	mov	r2, fp
  406a9e:	47b8      	blx	r7
  406aa0:	1e07      	subs	r7, r0, #0
  406aa2:	ddd2      	ble.n	406a4a <__sfvwrite_r+0x13a>
  406aa4:	ebb8 0807 	subs.w	r8, r8, r7
  406aa8:	d025      	beq.n	406af6 <__sfvwrite_r+0x1e6>
  406aaa:	68b3      	ldr	r3, [r6, #8]
  406aac:	44bb      	add	fp, r7
  406aae:	ebc7 0a0a 	rsb	sl, r7, sl
  406ab2:	1bdf      	subs	r7, r3, r7
  406ab4:	60b7      	str	r7, [r6, #8]
  406ab6:	2f00      	cmp	r7, #0
  406ab8:	f43f af5b 	beq.w	406972 <__sfvwrite_r+0x62>
  406abc:	f1ba 0f00 	cmp.w	sl, #0
  406ac0:	d1d3      	bne.n	406a6a <__sfvwrite_r+0x15a>
  406ac2:	2300      	movs	r3, #0
  406ac4:	f8d5 b000 	ldr.w	fp, [r5]
  406ac8:	f8d5 a004 	ldr.w	sl, [r5, #4]
  406acc:	3508      	adds	r5, #8
  406ace:	9300      	str	r3, [sp, #0]
  406ad0:	e7c8      	b.n	406a64 <__sfvwrite_r+0x154>
  406ad2:	4638      	mov	r0, r7
  406ad4:	e781      	b.n	4069da <__sfvwrite_r+0xca>
  406ad6:	461a      	mov	r2, r3
  406ad8:	4659      	mov	r1, fp
  406ada:	9301      	str	r3, [sp, #4]
  406adc:	f000 fcde 	bl	40749c <memmove>
  406ae0:	68a2      	ldr	r2, [r4, #8]
  406ae2:	ebb8 0807 	subs.w	r8, r8, r7
  406ae6:	6821      	ldr	r1, [r4, #0]
  406ae8:	9b01      	ldr	r3, [sp, #4]
  406aea:	eba2 0203 	sub.w	r2, r2, r3
  406aee:	440b      	add	r3, r1
  406af0:	60a2      	str	r2, [r4, #8]
  406af2:	6023      	str	r3, [r4, #0]
  406af4:	d1d9      	bne.n	406aaa <__sfvwrite_r+0x19a>
  406af6:	4648      	mov	r0, r9
  406af8:	4621      	mov	r1, r4
  406afa:	f7ff fd29 	bl	406550 <_fflush_r>
  406afe:	2800      	cmp	r0, #0
  406b00:	d1a3      	bne.n	406a4a <__sfvwrite_r+0x13a>
  406b02:	f8cd 8000 	str.w	r8, [sp]
  406b06:	e7d0      	b.n	406aaa <__sfvwrite_r+0x19a>
  406b08:	4647      	mov	r7, r8
  406b0a:	6820      	ldr	r0, [r4, #0]
  406b0c:	46c2      	mov	sl, r8
  406b0e:	e758      	b.n	4069c2 <__sfvwrite_r+0xb2>
  406b10:	4658      	mov	r0, fp
  406b12:	210a      	movs	r1, #10
  406b14:	4652      	mov	r2, sl
  406b16:	f000 fbdf 	bl	4072d8 <memchr>
  406b1a:	2800      	cmp	r0, #0
  406b1c:	d07b      	beq.n	406c16 <__sfvwrite_r+0x306>
  406b1e:	3001      	adds	r0, #1
  406b20:	2301      	movs	r3, #1
  406b22:	ebcb 0800 	rsb	r8, fp, r0
  406b26:	9300      	str	r3, [sp, #0]
  406b28:	e7a2      	b.n	406a70 <__sfvwrite_r+0x160>
  406b2a:	6963      	ldr	r3, [r4, #20]
  406b2c:	6921      	ldr	r1, [r4, #16]
  406b2e:	6827      	ldr	r7, [r4, #0]
  406b30:	eb03 0c43 	add.w	ip, r3, r3, lsl #1
  406b34:	1a7f      	subs	r7, r7, r1
  406b36:	eb0c 7cdc 	add.w	ip, ip, ip, lsr #31
  406b3a:	1c7b      	adds	r3, r7, #1
  406b3c:	ea4f 0c6c 	mov.w	ip, ip, asr #1
  406b40:	4443      	add	r3, r8
  406b42:	4662      	mov	r2, ip
  406b44:	459c      	cmp	ip, r3
  406b46:	d201      	bcs.n	406b4c <__sfvwrite_r+0x23c>
  406b48:	469c      	mov	ip, r3
  406b4a:	461a      	mov	r2, r3
  406b4c:	f41e 6f80 	tst.w	lr, #1024	; 0x400
  406b50:	f8cd c000 	str.w	ip, [sp]
  406b54:	d04b      	beq.n	406bee <__sfvwrite_r+0x2de>
  406b56:	4611      	mov	r1, r2
  406b58:	4648      	mov	r0, r9
  406b5a:	f000 f911 	bl	406d80 <_malloc_r>
  406b5e:	f8dd c000 	ldr.w	ip, [sp]
  406b62:	4682      	mov	sl, r0
  406b64:	2800      	cmp	r0, #0
  406b66:	d05e      	beq.n	406c26 <__sfvwrite_r+0x316>
  406b68:	463a      	mov	r2, r7
  406b6a:	6921      	ldr	r1, [r4, #16]
  406b6c:	f8cd c000 	str.w	ip, [sp]
  406b70:	f000 fbfa 	bl	407368 <memcpy>
  406b74:	89a2      	ldrh	r2, [r4, #12]
  406b76:	f8dd c000 	ldr.w	ip, [sp]
  406b7a:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
  406b7e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  406b82:	81a2      	strh	r2, [r4, #12]
  406b84:	eb0a 0007 	add.w	r0, sl, r7
  406b88:	ebc7 020c 	rsb	r2, r7, ip
  406b8c:	f8c4 a010 	str.w	sl, [r4, #16]
  406b90:	4647      	mov	r7, r8
  406b92:	6020      	str	r0, [r4, #0]
  406b94:	46c2      	mov	sl, r8
  406b96:	60a2      	str	r2, [r4, #8]
  406b98:	f8c4 c014 	str.w	ip, [r4, #20]
  406b9c:	e711      	b.n	4069c2 <__sfvwrite_r+0xb2>
  406b9e:	f06f 4e00 	mvn.w	lr, #2147483648	; 0x80000000
  406ba2:	6a67      	ldr	r7, [r4, #36]	; 0x24
  406ba4:	4648      	mov	r0, r9
  406ba6:	69e1      	ldr	r1, [r4, #28]
  406ba8:	45c6      	cmp	lr, r8
  406baa:	465a      	mov	r2, fp
  406bac:	bf28      	it	cs
  406bae:	46c6      	movcs	lr, r8
  406bb0:	fb9e fef3 	sdiv	lr, lr, r3
  406bb4:	fb0e f303 	mul.w	r3, lr, r3
  406bb8:	47b8      	blx	r7
  406bba:	2800      	cmp	r0, #0
  406bbc:	f73f af0d 	bgt.w	4069da <__sfvwrite_r+0xca>
  406bc0:	e743      	b.n	406a4a <__sfvwrite_r+0x13a>
  406bc2:	4662      	mov	r2, ip
  406bc4:	4659      	mov	r1, fp
  406bc6:	f8cd c004 	str.w	ip, [sp, #4]
  406bca:	f000 fc67 	bl	40749c <memmove>
  406bce:	6823      	ldr	r3, [r4, #0]
  406bd0:	4648      	mov	r0, r9
  406bd2:	f8dd c004 	ldr.w	ip, [sp, #4]
  406bd6:	4621      	mov	r1, r4
  406bd8:	4463      	add	r3, ip
  406bda:	6023      	str	r3, [r4, #0]
  406bdc:	f7ff fcb8 	bl	406550 <_fflush_r>
  406be0:	f8dd c004 	ldr.w	ip, [sp, #4]
  406be4:	2800      	cmp	r0, #0
  406be6:	f47f af30 	bne.w	406a4a <__sfvwrite_r+0x13a>
  406bea:	4667      	mov	r7, ip
  406bec:	e75a      	b.n	406aa4 <__sfvwrite_r+0x194>
  406bee:	4648      	mov	r0, r9
  406bf0:	f000 ffc6 	bl	407b80 <_realloc_r>
  406bf4:	f8dd c000 	ldr.w	ip, [sp]
  406bf8:	4682      	mov	sl, r0
  406bfa:	2800      	cmp	r0, #0
  406bfc:	d1c2      	bne.n	406b84 <__sfvwrite_r+0x274>
  406bfe:	4648      	mov	r0, r9
  406c00:	6921      	ldr	r1, [r4, #16]
  406c02:	f7ff fdad 	bl	406760 <_free_r>
  406c06:	89a3      	ldrh	r3, [r4, #12]
  406c08:	220c      	movs	r2, #12
  406c0a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  406c0e:	f8c9 2000 	str.w	r2, [r9]
  406c12:	b29b      	uxth	r3, r3
  406c14:	e71a      	b.n	406a4c <__sfvwrite_r+0x13c>
  406c16:	2301      	movs	r3, #1
  406c18:	f10a 0801 	add.w	r8, sl, #1
  406c1c:	9300      	str	r3, [sp, #0]
  406c1e:	e727      	b.n	406a70 <__sfvwrite_r+0x160>
  406c20:	f04f 30ff 	mov.w	r0, #4294967295
  406c24:	e6a6      	b.n	406974 <__sfvwrite_r+0x64>
  406c26:	220c      	movs	r2, #12
  406c28:	89a3      	ldrh	r3, [r4, #12]
  406c2a:	f8c9 2000 	str.w	r2, [r9]
  406c2e:	e70d      	b.n	406a4c <__sfvwrite_r+0x13c>
  406c30:	7ffffc00 	.word	0x7ffffc00

00406c34 <_fwalk_reent>:
  406c34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  406c38:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  406c3c:	d01e      	beq.n	406c7c <_fwalk_reent+0x48>
  406c3e:	4688      	mov	r8, r1
  406c40:	4606      	mov	r6, r0
  406c42:	f04f 0900 	mov.w	r9, #0
  406c46:	687d      	ldr	r5, [r7, #4]
  406c48:	68bc      	ldr	r4, [r7, #8]
  406c4a:	3d01      	subs	r5, #1
  406c4c:	d410      	bmi.n	406c70 <_fwalk_reent+0x3c>
  406c4e:	89a3      	ldrh	r3, [r4, #12]
  406c50:	3d01      	subs	r5, #1
  406c52:	2b01      	cmp	r3, #1
  406c54:	d908      	bls.n	406c68 <_fwalk_reent+0x34>
  406c56:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  406c5a:	4621      	mov	r1, r4
  406c5c:	4630      	mov	r0, r6
  406c5e:	3301      	adds	r3, #1
  406c60:	d002      	beq.n	406c68 <_fwalk_reent+0x34>
  406c62:	47c0      	blx	r8
  406c64:	ea49 0900 	orr.w	r9, r9, r0
  406c68:	1c6b      	adds	r3, r5, #1
  406c6a:	f104 0468 	add.w	r4, r4, #104	; 0x68
  406c6e:	d1ee      	bne.n	406c4e <_fwalk_reent+0x1a>
  406c70:	683f      	ldr	r7, [r7, #0]
  406c72:	2f00      	cmp	r7, #0
  406c74:	d1e7      	bne.n	406c46 <_fwalk_reent+0x12>
  406c76:	4648      	mov	r0, r9
  406c78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  406c7c:	46b9      	mov	r9, r7
  406c7e:	4648      	mov	r0, r9
  406c80:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00406c84 <_localeconv_r>:
  406c84:	4800      	ldr	r0, [pc, #0]	; (406c88 <_localeconv_r+0x4>)
  406c86:	4770      	bx	lr
  406c88:	204004b4 	.word	0x204004b4

00406c8c <__smakebuf_r>:
  406c8c:	898b      	ldrh	r3, [r1, #12]
  406c8e:	b29a      	uxth	r2, r3
  406c90:	f012 0f02 	tst.w	r2, #2
  406c94:	d13d      	bne.n	406d12 <__smakebuf_r+0x86>
  406c96:	b5f0      	push	{r4, r5, r6, r7, lr}
  406c98:	460c      	mov	r4, r1
  406c9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  406c9e:	b091      	sub	sp, #68	; 0x44
  406ca0:	4605      	mov	r5, r0
  406ca2:	2900      	cmp	r1, #0
  406ca4:	db19      	blt.n	406cda <__smakebuf_r+0x4e>
  406ca6:	aa01      	add	r2, sp, #4
  406ca8:	f001 fb4e 	bl	408348 <_fstat_r>
  406cac:	2800      	cmp	r0, #0
  406cae:	db12      	blt.n	406cd6 <__smakebuf_r+0x4a>
  406cb0:	9b02      	ldr	r3, [sp, #8]
  406cb2:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
  406cb6:	f5a3 5700 	sub.w	r7, r3, #8192	; 0x2000
  406cba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
  406cbe:	fab7 f787 	clz	r7, r7
  406cc2:	ea4f 1757 	mov.w	r7, r7, lsr #5
  406cc6:	d02b      	beq.n	406d20 <__smakebuf_r+0x94>
  406cc8:	89a3      	ldrh	r3, [r4, #12]
  406cca:	f44f 6680 	mov.w	r6, #1024	; 0x400
  406cce:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  406cd2:	81a3      	strh	r3, [r4, #12]
  406cd4:	e00c      	b.n	406cf0 <__smakebuf_r+0x64>
  406cd6:	89a3      	ldrh	r3, [r4, #12]
  406cd8:	b29a      	uxth	r2, r3
  406cda:	f012 0f80 	tst.w	r2, #128	; 0x80
  406cde:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  406ce2:	f04f 0700 	mov.w	r7, #0
  406ce6:	bf0c      	ite	eq
  406ce8:	f44f 6680 	moveq.w	r6, #1024	; 0x400
  406cec:	2640      	movne	r6, #64	; 0x40
  406cee:	81a3      	strh	r3, [r4, #12]
  406cf0:	4628      	mov	r0, r5
  406cf2:	4631      	mov	r1, r6
  406cf4:	f000 f844 	bl	406d80 <_malloc_r>
  406cf8:	89a3      	ldrh	r3, [r4, #12]
  406cfa:	b340      	cbz	r0, 406d4e <__smakebuf_r+0xc2>
  406cfc:	4a1a      	ldr	r2, [pc, #104]	; (406d68 <__smakebuf_r+0xdc>)
  406cfe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  406d02:	63ea      	str	r2, [r5, #60]	; 0x3c
  406d04:	81a3      	strh	r3, [r4, #12]
  406d06:	6020      	str	r0, [r4, #0]
  406d08:	6120      	str	r0, [r4, #16]
  406d0a:	6166      	str	r6, [r4, #20]
  406d0c:	b99f      	cbnz	r7, 406d36 <__smakebuf_r+0xaa>
  406d0e:	b011      	add	sp, #68	; 0x44
  406d10:	bdf0      	pop	{r4, r5, r6, r7, pc}
  406d12:	f101 0343 	add.w	r3, r1, #67	; 0x43
  406d16:	2201      	movs	r2, #1
  406d18:	600b      	str	r3, [r1, #0]
  406d1a:	610b      	str	r3, [r1, #16]
  406d1c:	614a      	str	r2, [r1, #20]
  406d1e:	4770      	bx	lr
  406d20:	4b12      	ldr	r3, [pc, #72]	; (406d6c <__smakebuf_r+0xe0>)
  406d22:	6aa2      	ldr	r2, [r4, #40]	; 0x28
  406d24:	429a      	cmp	r2, r3
  406d26:	d1cf      	bne.n	406cc8 <__smakebuf_r+0x3c>
  406d28:	89a3      	ldrh	r3, [r4, #12]
  406d2a:	f44f 6680 	mov.w	r6, #1024	; 0x400
  406d2e:	4333      	orrs	r3, r6
  406d30:	64e6      	str	r6, [r4, #76]	; 0x4c
  406d32:	81a3      	strh	r3, [r4, #12]
  406d34:	e7dc      	b.n	406cf0 <__smakebuf_r+0x64>
  406d36:	4628      	mov	r0, r5
  406d38:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  406d3c:	f001 fb18 	bl	408370 <_isatty_r>
  406d40:	2800      	cmp	r0, #0
  406d42:	d0e4      	beq.n	406d0e <__smakebuf_r+0x82>
  406d44:	89a3      	ldrh	r3, [r4, #12]
  406d46:	f043 0301 	orr.w	r3, r3, #1
  406d4a:	81a3      	strh	r3, [r4, #12]
  406d4c:	e7df      	b.n	406d0e <__smakebuf_r+0x82>
  406d4e:	059a      	lsls	r2, r3, #22
  406d50:	d4dd      	bmi.n	406d0e <__smakebuf_r+0x82>
  406d52:	f104 0243 	add.w	r2, r4, #67	; 0x43
  406d56:	f043 0302 	orr.w	r3, r3, #2
  406d5a:	2101      	movs	r1, #1
  406d5c:	81a3      	strh	r3, [r4, #12]
  406d5e:	6022      	str	r2, [r4, #0]
  406d60:	6122      	str	r2, [r4, #16]
  406d62:	6161      	str	r1, [r4, #20]
  406d64:	e7d3      	b.n	406d0e <__smakebuf_r+0x82>
  406d66:	bf00      	nop
  406d68:	0040657d 	.word	0x0040657d
  406d6c:	00408035 	.word	0x00408035

00406d70 <malloc>:
  406d70:	4b02      	ldr	r3, [pc, #8]	; (406d7c <malloc+0xc>)
  406d72:	4601      	mov	r1, r0
  406d74:	6818      	ldr	r0, [r3, #0]
  406d76:	f000 b803 	b.w	406d80 <_malloc_r>
  406d7a:	bf00      	nop
  406d7c:	204004b0 	.word	0x204004b0

00406d80 <_malloc_r>:
  406d80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  406d84:	f101 040b 	add.w	r4, r1, #11
  406d88:	b083      	sub	sp, #12
  406d8a:	4605      	mov	r5, r0
  406d8c:	2c16      	cmp	r4, #22
  406d8e:	d927      	bls.n	406de0 <_malloc_r+0x60>
  406d90:	f034 0407 	bics.w	r4, r4, #7
  406d94:	d42a      	bmi.n	406dec <_malloc_r+0x6c>
  406d96:	42a1      	cmp	r1, r4
  406d98:	d828      	bhi.n	406dec <_malloc_r+0x6c>
  406d9a:	f000 fbe1 	bl	407560 <__malloc_lock>
  406d9e:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
  406da2:	d22b      	bcs.n	406dfc <_malloc_r+0x7c>
  406da4:	ea4f 0cd4 	mov.w	ip, r4, lsr #3
  406da8:	4ec0      	ldr	r6, [pc, #768]	; (4070ac <_malloc_r+0x32c>)
  406daa:	eb06 02cc 	add.w	r2, r6, ip, lsl #3
  406dae:	68d3      	ldr	r3, [r2, #12]
  406db0:	4293      	cmp	r3, r2
  406db2:	f000 8171 	beq.w	407098 <_malloc_r+0x318>
  406db6:	685a      	ldr	r2, [r3, #4]
  406db8:	f103 0808 	add.w	r8, r3, #8
  406dbc:	68d9      	ldr	r1, [r3, #12]
  406dbe:	4628      	mov	r0, r5
  406dc0:	f022 0203 	bic.w	r2, r2, #3
  406dc4:	689c      	ldr	r4, [r3, #8]
  406dc6:	4413      	add	r3, r2
  406dc8:	60e1      	str	r1, [r4, #12]
  406dca:	608c      	str	r4, [r1, #8]
  406dcc:	685a      	ldr	r2, [r3, #4]
  406dce:	f042 0201 	orr.w	r2, r2, #1
  406dd2:	605a      	str	r2, [r3, #4]
  406dd4:	f000 fbc6 	bl	407564 <__malloc_unlock>
  406dd8:	4640      	mov	r0, r8
  406dda:	b003      	add	sp, #12
  406ddc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406de0:	2910      	cmp	r1, #16
  406de2:	d803      	bhi.n	406dec <_malloc_r+0x6c>
  406de4:	f000 fbbc 	bl	407560 <__malloc_lock>
  406de8:	2410      	movs	r4, #16
  406dea:	e7db      	b.n	406da4 <_malloc_r+0x24>
  406dec:	f04f 0800 	mov.w	r8, #0
  406df0:	230c      	movs	r3, #12
  406df2:	4640      	mov	r0, r8
  406df4:	602b      	str	r3, [r5, #0]
  406df6:	b003      	add	sp, #12
  406df8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406dfc:	ea5f 2c54 	movs.w	ip, r4, lsr #9
  406e00:	f000 8089 	beq.w	406f16 <_malloc_r+0x196>
  406e04:	f1bc 0f04 	cmp.w	ip, #4
  406e08:	f200 80c4 	bhi.w	406f94 <_malloc_r+0x214>
  406e0c:	ea4f 1c94 	mov.w	ip, r4, lsr #6
  406e10:	f10c 0c38 	add.w	ip, ip, #56	; 0x38
  406e14:	ea4f 004c 	mov.w	r0, ip, lsl #1
  406e18:	4ea4      	ldr	r6, [pc, #656]	; (4070ac <_malloc_r+0x32c>)
  406e1a:	eb06 0080 	add.w	r0, r6, r0, lsl #2
  406e1e:	68c3      	ldr	r3, [r0, #12]
  406e20:	4298      	cmp	r0, r3
  406e22:	d105      	bne.n	406e30 <_malloc_r+0xb0>
  406e24:	e00c      	b.n	406e40 <_malloc_r+0xc0>
  406e26:	2900      	cmp	r1, #0
  406e28:	da79      	bge.n	406f1e <_malloc_r+0x19e>
  406e2a:	68db      	ldr	r3, [r3, #12]
  406e2c:	4298      	cmp	r0, r3
  406e2e:	d007      	beq.n	406e40 <_malloc_r+0xc0>
  406e30:	685a      	ldr	r2, [r3, #4]
  406e32:	f022 0203 	bic.w	r2, r2, #3
  406e36:	1b11      	subs	r1, r2, r4
  406e38:	290f      	cmp	r1, #15
  406e3a:	ddf4      	ble.n	406e26 <_malloc_r+0xa6>
  406e3c:	f10c 3cff 	add.w	ip, ip, #4294967295
  406e40:	f10c 0c01 	add.w	ip, ip, #1
  406e44:	4f99      	ldr	r7, [pc, #612]	; (4070ac <_malloc_r+0x32c>)
  406e46:	6933      	ldr	r3, [r6, #16]
  406e48:	f107 0e08 	add.w	lr, r7, #8
  406e4c:	4573      	cmp	r3, lr
  406e4e:	f000 8119 	beq.w	407084 <_malloc_r+0x304>
  406e52:	685a      	ldr	r2, [r3, #4]
  406e54:	f022 0203 	bic.w	r2, r2, #3
  406e58:	1b11      	subs	r1, r2, r4
  406e5a:	290f      	cmp	r1, #15
  406e5c:	f300 80ca 	bgt.w	406ff4 <_malloc_r+0x274>
  406e60:	2900      	cmp	r1, #0
  406e62:	f8c7 e014 	str.w	lr, [r7, #20]
  406e66:	f8c7 e010 	str.w	lr, [r7, #16]
  406e6a:	da6a      	bge.n	406f42 <_malloc_r+0x1c2>
  406e6c:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  406e70:	f080 809f 	bcs.w	406fb2 <_malloc_r+0x232>
  406e74:	08d2      	lsrs	r2, r2, #3
  406e76:	2001      	movs	r0, #1
  406e78:	6879      	ldr	r1, [r7, #4]
  406e7a:	ea4f 08a2 	mov.w	r8, r2, asr #2
  406e7e:	eb07 02c2 	add.w	r2, r7, r2, lsl #3
  406e82:	fa00 f008 	lsl.w	r0, r0, r8
  406e86:	f8d2 8008 	ldr.w	r8, [r2, #8]
  406e8a:	4308      	orrs	r0, r1
  406e8c:	60da      	str	r2, [r3, #12]
  406e8e:	f8c3 8008 	str.w	r8, [r3, #8]
  406e92:	6078      	str	r0, [r7, #4]
  406e94:	6093      	str	r3, [r2, #8]
  406e96:	f8c8 300c 	str.w	r3, [r8, #12]
  406e9a:	ea4f 03ac 	mov.w	r3, ip, asr #2
  406e9e:	2101      	movs	r1, #1
  406ea0:	4099      	lsls	r1, r3
  406ea2:	4281      	cmp	r1, r0
  406ea4:	d85b      	bhi.n	406f5e <_malloc_r+0x1de>
  406ea6:	4208      	tst	r0, r1
  406ea8:	d106      	bne.n	406eb8 <_malloc_r+0x138>
  406eaa:	f02c 0c03 	bic.w	ip, ip, #3
  406eae:	0049      	lsls	r1, r1, #1
  406eb0:	f10c 0c04 	add.w	ip, ip, #4
  406eb4:	4208      	tst	r0, r1
  406eb6:	d0fa      	beq.n	406eae <_malloc_r+0x12e>
  406eb8:	eb06 08cc 	add.w	r8, r6, ip, lsl #3
  406ebc:	46e1      	mov	r9, ip
  406ebe:	4640      	mov	r0, r8
  406ec0:	68c7      	ldr	r7, [r0, #12]
  406ec2:	42b8      	cmp	r0, r7
  406ec4:	d107      	bne.n	406ed6 <_malloc_r+0x156>
  406ec6:	e0df      	b.n	407088 <_malloc_r+0x308>
  406ec8:	2a00      	cmp	r2, #0
  406eca:	f280 80f7 	bge.w	4070bc <_malloc_r+0x33c>
  406ece:	68ff      	ldr	r7, [r7, #12]
  406ed0:	42b8      	cmp	r0, r7
  406ed2:	f000 80d9 	beq.w	407088 <_malloc_r+0x308>
  406ed6:	687b      	ldr	r3, [r7, #4]
  406ed8:	f023 0303 	bic.w	r3, r3, #3
  406edc:	1b1a      	subs	r2, r3, r4
  406ede:	2a0f      	cmp	r2, #15
  406ee0:	ddf2      	ble.n	406ec8 <_malloc_r+0x148>
  406ee2:	46b8      	mov	r8, r7
  406ee4:	68fb      	ldr	r3, [r7, #12]
  406ee6:	f044 0901 	orr.w	r9, r4, #1
  406eea:	f042 0c01 	orr.w	ip, r2, #1
  406eee:	f858 1f08 	ldr.w	r1, [r8, #8]!
  406ef2:	443c      	add	r4, r7
  406ef4:	f8c7 9004 	str.w	r9, [r7, #4]
  406ef8:	4628      	mov	r0, r5
  406efa:	60cb      	str	r3, [r1, #12]
  406efc:	6099      	str	r1, [r3, #8]
  406efe:	6174      	str	r4, [r6, #20]
  406f00:	6134      	str	r4, [r6, #16]
  406f02:	f8c4 e00c 	str.w	lr, [r4, #12]
  406f06:	f8c4 e008 	str.w	lr, [r4, #8]
  406f0a:	f8c4 c004 	str.w	ip, [r4, #4]
  406f0e:	50a2      	str	r2, [r4, r2]
  406f10:	f000 fb28 	bl	407564 <__malloc_unlock>
  406f14:	e760      	b.n	406dd8 <_malloc_r+0x58>
  406f16:	207e      	movs	r0, #126	; 0x7e
  406f18:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
  406f1c:	e77c      	b.n	406e18 <_malloc_r+0x98>
  406f1e:	441a      	add	r2, r3
  406f20:	68dc      	ldr	r4, [r3, #12]
  406f22:	689e      	ldr	r6, [r3, #8]
  406f24:	f103 0808 	add.w	r8, r3, #8
  406f28:	6851      	ldr	r1, [r2, #4]
  406f2a:	4628      	mov	r0, r5
  406f2c:	60f4      	str	r4, [r6, #12]
  406f2e:	f041 0301 	orr.w	r3, r1, #1
  406f32:	60a6      	str	r6, [r4, #8]
  406f34:	6053      	str	r3, [r2, #4]
  406f36:	f000 fb15 	bl	407564 <__malloc_unlock>
  406f3a:	4640      	mov	r0, r8
  406f3c:	b003      	add	sp, #12
  406f3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406f42:	441a      	add	r2, r3
  406f44:	f103 0808 	add.w	r8, r3, #8
  406f48:	4628      	mov	r0, r5
  406f4a:	6853      	ldr	r3, [r2, #4]
  406f4c:	f043 0301 	orr.w	r3, r3, #1
  406f50:	6053      	str	r3, [r2, #4]
  406f52:	f000 fb07 	bl	407564 <__malloc_unlock>
  406f56:	4640      	mov	r0, r8
  406f58:	b003      	add	sp, #12
  406f5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406f5e:	68b7      	ldr	r7, [r6, #8]
  406f60:	687a      	ldr	r2, [r7, #4]
  406f62:	f022 0803 	bic.w	r8, r2, #3
  406f66:	ebc4 0208 	rsb	r2, r4, r8
  406f6a:	2a0f      	cmp	r2, #15
  406f6c:	dd56      	ble.n	40701c <_malloc_r+0x29c>
  406f6e:	45a0      	cmp	r8, r4
  406f70:	d354      	bcc.n	40701c <_malloc_r+0x29c>
  406f72:	f044 0301 	orr.w	r3, r4, #1
  406f76:	f042 0201 	orr.w	r2, r2, #1
  406f7a:	443c      	add	r4, r7
  406f7c:	f107 0808 	add.w	r8, r7, #8
  406f80:	607b      	str	r3, [r7, #4]
  406f82:	4628      	mov	r0, r5
  406f84:	60b4      	str	r4, [r6, #8]
  406f86:	6062      	str	r2, [r4, #4]
  406f88:	f000 faec 	bl	407564 <__malloc_unlock>
  406f8c:	4640      	mov	r0, r8
  406f8e:	b003      	add	sp, #12
  406f90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406f94:	f1bc 0f14 	cmp.w	ip, #20
  406f98:	f240 809f 	bls.w	4070da <_malloc_r+0x35a>
  406f9c:	f1bc 0f54 	cmp.w	ip, #84	; 0x54
  406fa0:	f200 8127 	bhi.w	4071f2 <_malloc_r+0x472>
  406fa4:	ea4f 3c14 	mov.w	ip, r4, lsr #12
  406fa8:	f10c 0c6e 	add.w	ip, ip, #110	; 0x6e
  406fac:	ea4f 004c 	mov.w	r0, ip, lsl #1
  406fb0:	e732      	b.n	406e18 <_malloc_r+0x98>
  406fb2:	0a51      	lsrs	r1, r2, #9
  406fb4:	2904      	cmp	r1, #4
  406fb6:	f240 8095 	bls.w	4070e4 <_malloc_r+0x364>
  406fba:	2914      	cmp	r1, #20
  406fbc:	f200 8142 	bhi.w	407244 <_malloc_r+0x4c4>
  406fc0:	f101 075b 	add.w	r7, r1, #91	; 0x5b
  406fc4:	0078      	lsls	r0, r7, #1
  406fc6:	eb06 0080 	add.w	r0, r6, r0, lsl #2
  406fca:	f8df 90e0 	ldr.w	r9, [pc, #224]	; 4070ac <_malloc_r+0x32c>
  406fce:	6881      	ldr	r1, [r0, #8]
  406fd0:	4281      	cmp	r1, r0
  406fd2:	f000 811b 	beq.w	40720c <_malloc_r+0x48c>
  406fd6:	684f      	ldr	r7, [r1, #4]
  406fd8:	f027 0703 	bic.w	r7, r7, #3
  406fdc:	42ba      	cmp	r2, r7
  406fde:	d202      	bcs.n	406fe6 <_malloc_r+0x266>
  406fe0:	6889      	ldr	r1, [r1, #8]
  406fe2:	4288      	cmp	r0, r1
  406fe4:	d1f7      	bne.n	406fd6 <_malloc_r+0x256>
  406fe6:	68ca      	ldr	r2, [r1, #12]
  406fe8:	6870      	ldr	r0, [r6, #4]
  406fea:	60da      	str	r2, [r3, #12]
  406fec:	6099      	str	r1, [r3, #8]
  406fee:	6093      	str	r3, [r2, #8]
  406ff0:	60cb      	str	r3, [r1, #12]
  406ff2:	e752      	b.n	406e9a <_malloc_r+0x11a>
  406ff4:	f044 0601 	orr.w	r6, r4, #1
  406ff8:	f041 0201 	orr.w	r2, r1, #1
  406ffc:	441c      	add	r4, r3
  406ffe:	4628      	mov	r0, r5
  407000:	605e      	str	r6, [r3, #4]
  407002:	f103 0808 	add.w	r8, r3, #8
  407006:	617c      	str	r4, [r7, #20]
  407008:	613c      	str	r4, [r7, #16]
  40700a:	f8c4 e00c 	str.w	lr, [r4, #12]
  40700e:	f8c4 e008 	str.w	lr, [r4, #8]
  407012:	6062      	str	r2, [r4, #4]
  407014:	5061      	str	r1, [r4, r1]
  407016:	f000 faa5 	bl	407564 <__malloc_unlock>
  40701a:	e6dd      	b.n	406dd8 <_malloc_r+0x58>
  40701c:	4a24      	ldr	r2, [pc, #144]	; (4070b0 <_malloc_r+0x330>)
  40701e:	4b25      	ldr	r3, [pc, #148]	; (4070b4 <_malloc_r+0x334>)
  407020:	6811      	ldr	r1, [r2, #0]
  407022:	681b      	ldr	r3, [r3, #0]
  407024:	3101      	adds	r1, #1
  407026:	4423      	add	r3, r4
  407028:	f000 8109 	beq.w	40723e <_malloc_r+0x4be>
  40702c:	f241 010f 	movw	r1, #4111	; 0x100f
  407030:	f8df 9084 	ldr.w	r9, [pc, #132]	; 4070b8 <_malloc_r+0x338>
  407034:	4419      	add	r1, r3
  407036:	ea01 0909 	and.w	r9, r1, r9
  40703a:	4628      	mov	r0, r5
  40703c:	4649      	mov	r1, r9
  40703e:	9201      	str	r2, [sp, #4]
  407040:	f000 ffb8 	bl	407fb4 <_sbrk_r>
  407044:	f1b0 3fff 	cmp.w	r0, #4294967295
  407048:	4682      	mov	sl, r0
  40704a:	9a01      	ldr	r2, [sp, #4]
  40704c:	f000 8101 	beq.w	407252 <_malloc_r+0x4d2>
  407050:	1bbb      	subs	r3, r7, r6
  407052:	eb07 0108 	add.w	r1, r7, r8
  407056:	4815      	ldr	r0, [pc, #84]	; (4070ac <_malloc_r+0x32c>)
  407058:	bf18      	it	ne
  40705a:	2301      	movne	r3, #1
  40705c:	4551      	cmp	r1, sl
  40705e:	d967      	bls.n	407130 <_malloc_r+0x3b0>
  407060:	2b00      	cmp	r3, #0
  407062:	d065      	beq.n	407130 <_malloc_r+0x3b0>
  407064:	6887      	ldr	r7, [r0, #8]
  407066:	687b      	ldr	r3, [r7, #4]
  407068:	f023 0303 	bic.w	r3, r3, #3
  40706c:	1b1a      	subs	r2, r3, r4
  40706e:	2a0f      	cmp	r2, #15
  407070:	dd02      	ble.n	407078 <_malloc_r+0x2f8>
  407072:	429c      	cmp	r4, r3
  407074:	f67f af7d 	bls.w	406f72 <_malloc_r+0x1f2>
  407078:	4628      	mov	r0, r5
  40707a:	f04f 0800 	mov.w	r8, #0
  40707e:	f000 fa71 	bl	407564 <__malloc_unlock>
  407082:	e6a9      	b.n	406dd8 <_malloc_r+0x58>
  407084:	6878      	ldr	r0, [r7, #4]
  407086:	e708      	b.n	406e9a <_malloc_r+0x11a>
  407088:	f109 0901 	add.w	r9, r9, #1
  40708c:	3008      	adds	r0, #8
  40708e:	f019 0f03 	tst.w	r9, #3
  407092:	f47f af15 	bne.w	406ec0 <_malloc_r+0x140>
  407096:	e02f      	b.n	4070f8 <_malloc_r+0x378>
  407098:	f103 0208 	add.w	r2, r3, #8
  40709c:	695b      	ldr	r3, [r3, #20]
  40709e:	429a      	cmp	r2, r3
  4070a0:	bf08      	it	eq
  4070a2:	f10c 0c02 	addeq.w	ip, ip, #2
  4070a6:	f43f aecd 	beq.w	406e44 <_malloc_r+0xc4>
  4070aa:	e684      	b.n	406db6 <_malloc_r+0x36>
  4070ac:	204004ec 	.word	0x204004ec
  4070b0:	204008f8 	.word	0x204008f8
  4070b4:	204009bc 	.word	0x204009bc
  4070b8:	fffff000 	.word	0xfffff000
  4070bc:	18fa      	adds	r2, r7, r3
  4070be:	46b8      	mov	r8, r7
  4070c0:	68f9      	ldr	r1, [r7, #12]
  4070c2:	4628      	mov	r0, r5
  4070c4:	6853      	ldr	r3, [r2, #4]
  4070c6:	f858 4f08 	ldr.w	r4, [r8, #8]!
  4070ca:	f043 0301 	orr.w	r3, r3, #1
  4070ce:	6053      	str	r3, [r2, #4]
  4070d0:	60e1      	str	r1, [r4, #12]
  4070d2:	608c      	str	r4, [r1, #8]
  4070d4:	f000 fa46 	bl	407564 <__malloc_unlock>
  4070d8:	e67e      	b.n	406dd8 <_malloc_r+0x58>
  4070da:	f10c 0c5b 	add.w	ip, ip, #91	; 0x5b
  4070de:	ea4f 004c 	mov.w	r0, ip, lsl #1
  4070e2:	e699      	b.n	406e18 <_malloc_r+0x98>
  4070e4:	0991      	lsrs	r1, r2, #6
  4070e6:	f101 0738 	add.w	r7, r1, #56	; 0x38
  4070ea:	0078      	lsls	r0, r7, #1
  4070ec:	e76b      	b.n	406fc6 <_malloc_r+0x246>
  4070ee:	f8d8 8000 	ldr.w	r8, [r8]
  4070f2:	4598      	cmp	r8, r3
  4070f4:	f040 80e6 	bne.w	4072c4 <_malloc_r+0x544>
  4070f8:	f01c 0f03 	tst.w	ip, #3
  4070fc:	f1a8 0308 	sub.w	r3, r8, #8
  407100:	f10c 3cff 	add.w	ip, ip, #4294967295
  407104:	d1f3      	bne.n	4070ee <_malloc_r+0x36e>
  407106:	6873      	ldr	r3, [r6, #4]
  407108:	ea23 0301 	bic.w	r3, r3, r1
  40710c:	6073      	str	r3, [r6, #4]
  40710e:	0049      	lsls	r1, r1, #1
  407110:	4299      	cmp	r1, r3
  407112:	f63f af24 	bhi.w	406f5e <_malloc_r+0x1de>
  407116:	2900      	cmp	r1, #0
  407118:	f43f af21 	beq.w	406f5e <_malloc_r+0x1de>
  40711c:	420b      	tst	r3, r1
  40711e:	46cc      	mov	ip, r9
  407120:	f47f aeca 	bne.w	406eb8 <_malloc_r+0x138>
  407124:	0049      	lsls	r1, r1, #1
  407126:	f10c 0c04 	add.w	ip, ip, #4
  40712a:	420b      	tst	r3, r1
  40712c:	d0fa      	beq.n	407124 <_malloc_r+0x3a4>
  40712e:	e6c3      	b.n	406eb8 <_malloc_r+0x138>
  407130:	f8df b19c 	ldr.w	fp, [pc, #412]	; 4072d0 <_malloc_r+0x550>
  407134:	4551      	cmp	r1, sl
  407136:	f8db 0000 	ldr.w	r0, [fp]
  40713a:	4448      	add	r0, r9
  40713c:	f8cb 0000 	str.w	r0, [fp]
  407140:	f000 808c 	beq.w	40725c <_malloc_r+0x4dc>
  407144:	6812      	ldr	r2, [r2, #0]
  407146:	f8df e18c 	ldr.w	lr, [pc, #396]	; 4072d4 <_malloc_r+0x554>
  40714a:	3201      	adds	r2, #1
  40714c:	f000 80a3 	beq.w	407296 <_malloc_r+0x516>
  407150:	ebc1 010a 	rsb	r1, r1, sl
  407154:	4408      	add	r0, r1
  407156:	f8cb 0000 	str.w	r0, [fp]
  40715a:	f01a 0107 	ands.w	r1, sl, #7
  40715e:	d052      	beq.n	407206 <_malloc_r+0x486>
  407160:	f1c1 0008 	rsb	r0, r1, #8
  407164:	f241 0208 	movw	r2, #4104	; 0x1008
  407168:	4482      	add	sl, r0
  40716a:	1a52      	subs	r2, r2, r1
  40716c:	eb0a 0109 	add.w	r1, sl, r9
  407170:	4628      	mov	r0, r5
  407172:	9301      	str	r3, [sp, #4]
  407174:	f3c1 010b 	ubfx	r1, r1, #0, #12
  407178:	ebc1 0902 	rsb	r9, r1, r2
  40717c:	4649      	mov	r1, r9
  40717e:	f000 ff19 	bl	407fb4 <_sbrk_r>
  407182:	1c43      	adds	r3, r0, #1
  407184:	9b01      	ldr	r3, [sp, #4]
  407186:	d07a      	beq.n	40727e <_malloc_r+0x4fe>
  407188:	ebca 0200 	rsb	r2, sl, r0
  40718c:	444a      	add	r2, r9
  40718e:	f042 0201 	orr.w	r2, r2, #1
  407192:	f8db 0000 	ldr.w	r0, [fp]
  407196:	f8c6 a008 	str.w	sl, [r6, #8]
  40719a:	4448      	add	r0, r9
  40719c:	f8ca 2004 	str.w	r2, [sl, #4]
  4071a0:	f8df 912c 	ldr.w	r9, [pc, #300]	; 4072d0 <_malloc_r+0x550>
  4071a4:	f8cb 0000 	str.w	r0, [fp]
  4071a8:	b1a3      	cbz	r3, 4071d4 <_malloc_r+0x454>
  4071aa:	f1b8 0f0f 	cmp.w	r8, #15
  4071ae:	d937      	bls.n	407220 <_malloc_r+0x4a0>
  4071b0:	687b      	ldr	r3, [r7, #4]
  4071b2:	f1a8 020c 	sub.w	r2, r8, #12
  4071b6:	f04f 0e05 	mov.w	lr, #5
  4071ba:	f022 0207 	bic.w	r2, r2, #7
  4071be:	f003 0301 	and.w	r3, r3, #1
  4071c2:	18b9      	adds	r1, r7, r2
  4071c4:	4313      	orrs	r3, r2
  4071c6:	2a0f      	cmp	r2, #15
  4071c8:	607b      	str	r3, [r7, #4]
  4071ca:	f8c1 e004 	str.w	lr, [r1, #4]
  4071ce:	f8c1 e008 	str.w	lr, [r1, #8]
  4071d2:	d858      	bhi.n	407286 <_malloc_r+0x506>
  4071d4:	4b3c      	ldr	r3, [pc, #240]	; (4072c8 <_malloc_r+0x548>)
  4071d6:	681a      	ldr	r2, [r3, #0]
  4071d8:	4290      	cmp	r0, r2
  4071da:	d900      	bls.n	4071de <_malloc_r+0x45e>
  4071dc:	6018      	str	r0, [r3, #0]
  4071de:	4b3b      	ldr	r3, [pc, #236]	; (4072cc <_malloc_r+0x54c>)
  4071e0:	68b7      	ldr	r7, [r6, #8]
  4071e2:	681a      	ldr	r2, [r3, #0]
  4071e4:	4290      	cmp	r0, r2
  4071e6:	d900      	bls.n	4071ea <_malloc_r+0x46a>
  4071e8:	6018      	str	r0, [r3, #0]
  4071ea:	687b      	ldr	r3, [r7, #4]
  4071ec:	f023 0303 	bic.w	r3, r3, #3
  4071f0:	e73c      	b.n	40706c <_malloc_r+0x2ec>
  4071f2:	f5bc 7faa 	cmp.w	ip, #340	; 0x154
  4071f6:	d817      	bhi.n	407228 <_malloc_r+0x4a8>
  4071f8:	ea4f 3cd4 	mov.w	ip, r4, lsr #15
  4071fc:	f10c 0c77 	add.w	ip, ip, #119	; 0x77
  407200:	ea4f 004c 	mov.w	r0, ip, lsl #1
  407204:	e608      	b.n	406e18 <_malloc_r+0x98>
  407206:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  40720a:	e7af      	b.n	40716c <_malloc_r+0x3ec>
  40720c:	10bf      	asrs	r7, r7, #2
  40720e:	2001      	movs	r0, #1
  407210:	460a      	mov	r2, r1
  407212:	40b8      	lsls	r0, r7
  407214:	f8d9 7004 	ldr.w	r7, [r9, #4]
  407218:	4338      	orrs	r0, r7
  40721a:	f8c9 0004 	str.w	r0, [r9, #4]
  40721e:	e6e4      	b.n	406fea <_malloc_r+0x26a>
  407220:	2301      	movs	r3, #1
  407222:	f8ca 3004 	str.w	r3, [sl, #4]
  407226:	e727      	b.n	407078 <_malloc_r+0x2f8>
  407228:	f240 5354 	movw	r3, #1364	; 0x554
  40722c:	459c      	cmp	ip, r3
  40722e:	d822      	bhi.n	407276 <_malloc_r+0x4f6>
  407230:	ea4f 4c94 	mov.w	ip, r4, lsr #18
  407234:	f10c 0c7c 	add.w	ip, ip, #124	; 0x7c
  407238:	ea4f 004c 	mov.w	r0, ip, lsl #1
  40723c:	e5ec      	b.n	406e18 <_malloc_r+0x98>
  40723e:	f103 0910 	add.w	r9, r3, #16
  407242:	e6fa      	b.n	40703a <_malloc_r+0x2ba>
  407244:	2954      	cmp	r1, #84	; 0x54
  407246:	d829      	bhi.n	40729c <_malloc_r+0x51c>
  407248:	0b11      	lsrs	r1, r2, #12
  40724a:	f101 076e 	add.w	r7, r1, #110	; 0x6e
  40724e:	0078      	lsls	r0, r7, #1
  407250:	e6b9      	b.n	406fc6 <_malloc_r+0x246>
  407252:	68b7      	ldr	r7, [r6, #8]
  407254:	687b      	ldr	r3, [r7, #4]
  407256:	f023 0303 	bic.w	r3, r3, #3
  40725a:	e707      	b.n	40706c <_malloc_r+0x2ec>
  40725c:	f3c1 0e0b 	ubfx	lr, r1, #0, #12
  407260:	f1be 0f00 	cmp.w	lr, #0
  407264:	f47f af6e 	bne.w	407144 <_malloc_r+0x3c4>
  407268:	eb09 0308 	add.w	r3, r9, r8
  40726c:	68b2      	ldr	r2, [r6, #8]
  40726e:	f043 0301 	orr.w	r3, r3, #1
  407272:	6053      	str	r3, [r2, #4]
  407274:	e7ae      	b.n	4071d4 <_malloc_r+0x454>
  407276:	20fc      	movs	r0, #252	; 0xfc
  407278:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
  40727c:	e5cc      	b.n	406e18 <_malloc_r+0x98>
  40727e:	2201      	movs	r2, #1
  407280:	f04f 0900 	mov.w	r9, #0
  407284:	e785      	b.n	407192 <_malloc_r+0x412>
  407286:	4628      	mov	r0, r5
  407288:	f107 0108 	add.w	r1, r7, #8
  40728c:	f7ff fa68 	bl	406760 <_free_r>
  407290:	f8d9 0000 	ldr.w	r0, [r9]
  407294:	e79e      	b.n	4071d4 <_malloc_r+0x454>
  407296:	f8ce a000 	str.w	sl, [lr]
  40729a:	e75e      	b.n	40715a <_malloc_r+0x3da>
  40729c:	f5b1 7faa 	cmp.w	r1, #340	; 0x154
  4072a0:	d804      	bhi.n	4072ac <_malloc_r+0x52c>
  4072a2:	0bd1      	lsrs	r1, r2, #15
  4072a4:	f101 0777 	add.w	r7, r1, #119	; 0x77
  4072a8:	0078      	lsls	r0, r7, #1
  4072aa:	e68c      	b.n	406fc6 <_malloc_r+0x246>
  4072ac:	f240 5054 	movw	r0, #1364	; 0x554
  4072b0:	4281      	cmp	r1, r0
  4072b2:	d804      	bhi.n	4072be <_malloc_r+0x53e>
  4072b4:	0c91      	lsrs	r1, r2, #18
  4072b6:	f101 077c 	add.w	r7, r1, #124	; 0x7c
  4072ba:	0078      	lsls	r0, r7, #1
  4072bc:	e683      	b.n	406fc6 <_malloc_r+0x246>
  4072be:	20fc      	movs	r0, #252	; 0xfc
  4072c0:	277e      	movs	r7, #126	; 0x7e
  4072c2:	e680      	b.n	406fc6 <_malloc_r+0x246>
  4072c4:	6873      	ldr	r3, [r6, #4]
  4072c6:	e722      	b.n	40710e <_malloc_r+0x38e>
  4072c8:	204009b8 	.word	0x204009b8
  4072cc:	204009b4 	.word	0x204009b4
  4072d0:	204009c0 	.word	0x204009c0
  4072d4:	204008f8 	.word	0x204008f8

004072d8 <memchr>:
  4072d8:	0783      	lsls	r3, r0, #30
  4072da:	b2c9      	uxtb	r1, r1
  4072dc:	b470      	push	{r4, r5, r6}
  4072de:	d03f      	beq.n	407360 <memchr+0x88>
  4072e0:	1e54      	subs	r4, r2, #1
  4072e2:	2a00      	cmp	r2, #0
  4072e4:	d03e      	beq.n	407364 <memchr+0x8c>
  4072e6:	7803      	ldrb	r3, [r0, #0]
  4072e8:	428b      	cmp	r3, r1
  4072ea:	bf18      	it	ne
  4072ec:	1c43      	addne	r3, r0, #1
  4072ee:	d105      	bne.n	4072fc <memchr+0x24>
  4072f0:	e01c      	b.n	40732c <memchr+0x54>
  4072f2:	b1ec      	cbz	r4, 407330 <memchr+0x58>
  4072f4:	7802      	ldrb	r2, [r0, #0]
  4072f6:	3c01      	subs	r4, #1
  4072f8:	428a      	cmp	r2, r1
  4072fa:	d017      	beq.n	40732c <memchr+0x54>
  4072fc:	f013 0f03 	tst.w	r3, #3
  407300:	4618      	mov	r0, r3
  407302:	f103 0301 	add.w	r3, r3, #1
  407306:	d1f4      	bne.n	4072f2 <memchr+0x1a>
  407308:	2c03      	cmp	r4, #3
  40730a:	d814      	bhi.n	407336 <memchr+0x5e>
  40730c:	b184      	cbz	r4, 407330 <memchr+0x58>
  40730e:	7803      	ldrb	r3, [r0, #0]
  407310:	428b      	cmp	r3, r1
  407312:	d00b      	beq.n	40732c <memchr+0x54>
  407314:	1905      	adds	r5, r0, r4
  407316:	1c43      	adds	r3, r0, #1
  407318:	e002      	b.n	407320 <memchr+0x48>
  40731a:	7802      	ldrb	r2, [r0, #0]
  40731c:	428a      	cmp	r2, r1
  40731e:	d005      	beq.n	40732c <memchr+0x54>
  407320:	42ab      	cmp	r3, r5
  407322:	4618      	mov	r0, r3
  407324:	f103 0301 	add.w	r3, r3, #1
  407328:	d1f7      	bne.n	40731a <memchr+0x42>
  40732a:	2000      	movs	r0, #0
  40732c:	bc70      	pop	{r4, r5, r6}
  40732e:	4770      	bx	lr
  407330:	4620      	mov	r0, r4
  407332:	bc70      	pop	{r4, r5, r6}
  407334:	4770      	bx	lr
  407336:	ea41 2601 	orr.w	r6, r1, r1, lsl #8
  40733a:	4602      	mov	r2, r0
  40733c:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
  407340:	4610      	mov	r0, r2
  407342:	3204      	adds	r2, #4
  407344:	6803      	ldr	r3, [r0, #0]
  407346:	4073      	eors	r3, r6
  407348:	f1a3 3501 	sub.w	r5, r3, #16843009	; 0x1010101
  40734c:	ea25 0303 	bic.w	r3, r5, r3
  407350:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
  407354:	d1da      	bne.n	40730c <memchr+0x34>
  407356:	3c04      	subs	r4, #4
  407358:	4610      	mov	r0, r2
  40735a:	2c03      	cmp	r4, #3
  40735c:	d8f0      	bhi.n	407340 <memchr+0x68>
  40735e:	e7d5      	b.n	40730c <memchr+0x34>
  407360:	4614      	mov	r4, r2
  407362:	e7d1      	b.n	407308 <memchr+0x30>
  407364:	4610      	mov	r0, r2
  407366:	e7e1      	b.n	40732c <memchr+0x54>

00407368 <memcpy>:
  407368:	4684      	mov	ip, r0
  40736a:	ea41 0300 	orr.w	r3, r1, r0
  40736e:	f013 0303 	ands.w	r3, r3, #3
  407372:	d16d      	bne.n	407450 <memcpy+0xe8>
  407374:	3a40      	subs	r2, #64	; 0x40
  407376:	d341      	bcc.n	4073fc <memcpy+0x94>
  407378:	f851 3b04 	ldr.w	r3, [r1], #4
  40737c:	f840 3b04 	str.w	r3, [r0], #4
  407380:	f851 3b04 	ldr.w	r3, [r1], #4
  407384:	f840 3b04 	str.w	r3, [r0], #4
  407388:	f851 3b04 	ldr.w	r3, [r1], #4
  40738c:	f840 3b04 	str.w	r3, [r0], #4
  407390:	f851 3b04 	ldr.w	r3, [r1], #4
  407394:	f840 3b04 	str.w	r3, [r0], #4
  407398:	f851 3b04 	ldr.w	r3, [r1], #4
  40739c:	f840 3b04 	str.w	r3, [r0], #4
  4073a0:	f851 3b04 	ldr.w	r3, [r1], #4
  4073a4:	f840 3b04 	str.w	r3, [r0], #4
  4073a8:	f851 3b04 	ldr.w	r3, [r1], #4
  4073ac:	f840 3b04 	str.w	r3, [r0], #4
  4073b0:	f851 3b04 	ldr.w	r3, [r1], #4
  4073b4:	f840 3b04 	str.w	r3, [r0], #4
  4073b8:	f851 3b04 	ldr.w	r3, [r1], #4
  4073bc:	f840 3b04 	str.w	r3, [r0], #4
  4073c0:	f851 3b04 	ldr.w	r3, [r1], #4
  4073c4:	f840 3b04 	str.w	r3, [r0], #4
  4073c8:	f851 3b04 	ldr.w	r3, [r1], #4
  4073cc:	f840 3b04 	str.w	r3, [r0], #4
  4073d0:	f851 3b04 	ldr.w	r3, [r1], #4
  4073d4:	f840 3b04 	str.w	r3, [r0], #4
  4073d8:	f851 3b04 	ldr.w	r3, [r1], #4
  4073dc:	f840 3b04 	str.w	r3, [r0], #4
  4073e0:	f851 3b04 	ldr.w	r3, [r1], #4
  4073e4:	f840 3b04 	str.w	r3, [r0], #4
  4073e8:	f851 3b04 	ldr.w	r3, [r1], #4
  4073ec:	f840 3b04 	str.w	r3, [r0], #4
  4073f0:	f851 3b04 	ldr.w	r3, [r1], #4
  4073f4:	f840 3b04 	str.w	r3, [r0], #4
  4073f8:	3a40      	subs	r2, #64	; 0x40
  4073fa:	d2bd      	bcs.n	407378 <memcpy+0x10>
  4073fc:	3230      	adds	r2, #48	; 0x30
  4073fe:	d311      	bcc.n	407424 <memcpy+0xbc>
  407400:	f851 3b04 	ldr.w	r3, [r1], #4
  407404:	f840 3b04 	str.w	r3, [r0], #4
  407408:	f851 3b04 	ldr.w	r3, [r1], #4
  40740c:	f840 3b04 	str.w	r3, [r0], #4
  407410:	f851 3b04 	ldr.w	r3, [r1], #4
  407414:	f840 3b04 	str.w	r3, [r0], #4
  407418:	f851 3b04 	ldr.w	r3, [r1], #4
  40741c:	f840 3b04 	str.w	r3, [r0], #4
  407420:	3a10      	subs	r2, #16
  407422:	d2ed      	bcs.n	407400 <memcpy+0x98>
  407424:	320c      	adds	r2, #12
  407426:	d305      	bcc.n	407434 <memcpy+0xcc>
  407428:	f851 3b04 	ldr.w	r3, [r1], #4
  40742c:	f840 3b04 	str.w	r3, [r0], #4
  407430:	3a04      	subs	r2, #4
  407432:	d2f9      	bcs.n	407428 <memcpy+0xc0>
  407434:	3204      	adds	r2, #4
  407436:	d008      	beq.n	40744a <memcpy+0xe2>
  407438:	07d2      	lsls	r2, r2, #31
  40743a:	bf1c      	itt	ne
  40743c:	f811 3b01 	ldrbne.w	r3, [r1], #1
  407440:	f800 3b01 	strbne.w	r3, [r0], #1
  407444:	d301      	bcc.n	40744a <memcpy+0xe2>
  407446:	880b      	ldrh	r3, [r1, #0]
  407448:	8003      	strh	r3, [r0, #0]
  40744a:	4660      	mov	r0, ip
  40744c:	4770      	bx	lr
  40744e:	bf00      	nop
  407450:	2a08      	cmp	r2, #8
  407452:	d313      	bcc.n	40747c <memcpy+0x114>
  407454:	078b      	lsls	r3, r1, #30
  407456:	d08d      	beq.n	407374 <memcpy+0xc>
  407458:	f010 0303 	ands.w	r3, r0, #3
  40745c:	d08a      	beq.n	407374 <memcpy+0xc>
  40745e:	f1c3 0304 	rsb	r3, r3, #4
  407462:	1ad2      	subs	r2, r2, r3
  407464:	07db      	lsls	r3, r3, #31
  407466:	bf1c      	itt	ne
  407468:	f811 3b01 	ldrbne.w	r3, [r1], #1
  40746c:	f800 3b01 	strbne.w	r3, [r0], #1
  407470:	d380      	bcc.n	407374 <memcpy+0xc>
  407472:	f831 3b02 	ldrh.w	r3, [r1], #2
  407476:	f820 3b02 	strh.w	r3, [r0], #2
  40747a:	e77b      	b.n	407374 <memcpy+0xc>
  40747c:	3a04      	subs	r2, #4
  40747e:	d3d9      	bcc.n	407434 <memcpy+0xcc>
  407480:	3a01      	subs	r2, #1
  407482:	f811 3b01 	ldrb.w	r3, [r1], #1
  407486:	f800 3b01 	strb.w	r3, [r0], #1
  40748a:	d2f9      	bcs.n	407480 <memcpy+0x118>
  40748c:	780b      	ldrb	r3, [r1, #0]
  40748e:	7003      	strb	r3, [r0, #0]
  407490:	784b      	ldrb	r3, [r1, #1]
  407492:	7043      	strb	r3, [r0, #1]
  407494:	788b      	ldrb	r3, [r1, #2]
  407496:	7083      	strb	r3, [r0, #2]
  407498:	4660      	mov	r0, ip
  40749a:	4770      	bx	lr

0040749c <memmove>:
  40749c:	4288      	cmp	r0, r1
  40749e:	b5f0      	push	{r4, r5, r6, r7, lr}
  4074a0:	d90d      	bls.n	4074be <memmove+0x22>
  4074a2:	188b      	adds	r3, r1, r2
  4074a4:	4298      	cmp	r0, r3
  4074a6:	d20a      	bcs.n	4074be <memmove+0x22>
  4074a8:	1881      	adds	r1, r0, r2
  4074aa:	2a00      	cmp	r2, #0
  4074ac:	d053      	beq.n	407556 <memmove+0xba>
  4074ae:	1a9a      	subs	r2, r3, r2
  4074b0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  4074b4:	4293      	cmp	r3, r2
  4074b6:	f801 4d01 	strb.w	r4, [r1, #-1]!
  4074ba:	d1f9      	bne.n	4074b0 <memmove+0x14>
  4074bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4074be:	2a0f      	cmp	r2, #15
  4074c0:	d947      	bls.n	407552 <memmove+0xb6>
  4074c2:	ea40 0301 	orr.w	r3, r0, r1
  4074c6:	079b      	lsls	r3, r3, #30
  4074c8:	d146      	bne.n	407558 <memmove+0xbc>
  4074ca:	f100 0410 	add.w	r4, r0, #16
  4074ce:	f101 0310 	add.w	r3, r1, #16
  4074d2:	4615      	mov	r5, r2
  4074d4:	f853 6c10 	ldr.w	r6, [r3, #-16]
  4074d8:	3d10      	subs	r5, #16
  4074da:	3310      	adds	r3, #16
  4074dc:	3410      	adds	r4, #16
  4074de:	f844 6c20 	str.w	r6, [r4, #-32]
  4074e2:	2d0f      	cmp	r5, #15
  4074e4:	f853 6c1c 	ldr.w	r6, [r3, #-28]
  4074e8:	f844 6c1c 	str.w	r6, [r4, #-28]
  4074ec:	f853 6c18 	ldr.w	r6, [r3, #-24]
  4074f0:	f844 6c18 	str.w	r6, [r4, #-24]
  4074f4:	f853 6c14 	ldr.w	r6, [r3, #-20]
  4074f8:	f844 6c14 	str.w	r6, [r4, #-20]
  4074fc:	d8ea      	bhi.n	4074d4 <memmove+0x38>
  4074fe:	f1a2 0310 	sub.w	r3, r2, #16
  407502:	f002 0e0f 	and.w	lr, r2, #15
  407506:	f023 030f 	bic.w	r3, r3, #15
  40750a:	f1be 0f03 	cmp.w	lr, #3
  40750e:	f103 0310 	add.w	r3, r3, #16
  407512:	4419      	add	r1, r3
  407514:	4403      	add	r3, r0
  407516:	d921      	bls.n	40755c <memmove+0xc0>
  407518:	1f1e      	subs	r6, r3, #4
  40751a:	460d      	mov	r5, r1
  40751c:	4674      	mov	r4, lr
  40751e:	3c04      	subs	r4, #4
  407520:	f855 7b04 	ldr.w	r7, [r5], #4
  407524:	2c03      	cmp	r4, #3
  407526:	f846 7f04 	str.w	r7, [r6, #4]!
  40752a:	d8f8      	bhi.n	40751e <memmove+0x82>
  40752c:	f1ae 0404 	sub.w	r4, lr, #4
  407530:	f002 0203 	and.w	r2, r2, #3
  407534:	f024 0403 	bic.w	r4, r4, #3
  407538:	3404      	adds	r4, #4
  40753a:	4423      	add	r3, r4
  40753c:	4421      	add	r1, r4
  40753e:	b152      	cbz	r2, 407556 <memmove+0xba>
  407540:	3b01      	subs	r3, #1
  407542:	440a      	add	r2, r1
  407544:	f811 4b01 	ldrb.w	r4, [r1], #1
  407548:	4291      	cmp	r1, r2
  40754a:	f803 4f01 	strb.w	r4, [r3, #1]!
  40754e:	d1f9      	bne.n	407544 <memmove+0xa8>
  407550:	bdf0      	pop	{r4, r5, r6, r7, pc}
  407552:	4603      	mov	r3, r0
  407554:	e7f3      	b.n	40753e <memmove+0xa2>
  407556:	bdf0      	pop	{r4, r5, r6, r7, pc}
  407558:	4603      	mov	r3, r0
  40755a:	e7f1      	b.n	407540 <memmove+0xa4>
  40755c:	4672      	mov	r2, lr
  40755e:	e7ee      	b.n	40753e <memmove+0xa2>

00407560 <__malloc_lock>:
  407560:	4770      	bx	lr
  407562:	bf00      	nop

00407564 <__malloc_unlock>:
  407564:	4770      	bx	lr
  407566:	bf00      	nop

00407568 <_Balloc>:
  407568:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
  40756a:	b538      	push	{r3, r4, r5, lr}
  40756c:	4605      	mov	r5, r0
  40756e:	460c      	mov	r4, r1
  407570:	b152      	cbz	r2, 407588 <_Balloc+0x20>
  407572:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
  407576:	b18b      	cbz	r3, 40759c <_Balloc+0x34>
  407578:	6819      	ldr	r1, [r3, #0]
  40757a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
  40757e:	2200      	movs	r2, #0
  407580:	4618      	mov	r0, r3
  407582:	611a      	str	r2, [r3, #16]
  407584:	60da      	str	r2, [r3, #12]
  407586:	bd38      	pop	{r3, r4, r5, pc}
  407588:	2221      	movs	r2, #33	; 0x21
  40758a:	2104      	movs	r1, #4
  40758c:	f000 fe58 	bl	408240 <_calloc_r>
  407590:	64e8      	str	r0, [r5, #76]	; 0x4c
  407592:	4602      	mov	r2, r0
  407594:	2800      	cmp	r0, #0
  407596:	d1ec      	bne.n	407572 <_Balloc+0xa>
  407598:	2000      	movs	r0, #0
  40759a:	bd38      	pop	{r3, r4, r5, pc}
  40759c:	2101      	movs	r1, #1
  40759e:	4628      	mov	r0, r5
  4075a0:	fa01 f504 	lsl.w	r5, r1, r4
  4075a4:	1d6a      	adds	r2, r5, #5
  4075a6:	0092      	lsls	r2, r2, #2
  4075a8:	f000 fe4a 	bl	408240 <_calloc_r>
  4075ac:	4603      	mov	r3, r0
  4075ae:	2800      	cmp	r0, #0
  4075b0:	d0f2      	beq.n	407598 <_Balloc+0x30>
  4075b2:	6044      	str	r4, [r0, #4]
  4075b4:	6085      	str	r5, [r0, #8]
  4075b6:	e7e2      	b.n	40757e <_Balloc+0x16>

004075b8 <_Bfree>:
  4075b8:	b131      	cbz	r1, 4075c8 <_Bfree+0x10>
  4075ba:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  4075bc:	684a      	ldr	r2, [r1, #4]
  4075be:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
  4075c2:	6008      	str	r0, [r1, #0]
  4075c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  4075c8:	4770      	bx	lr
  4075ca:	bf00      	nop

004075cc <__multadd>:
  4075cc:	b5f0      	push	{r4, r5, r6, r7, lr}
  4075ce:	460c      	mov	r4, r1
  4075d0:	b083      	sub	sp, #12
  4075d2:	4605      	mov	r5, r0
  4075d4:	690e      	ldr	r6, [r1, #16]
  4075d6:	f101 0e14 	add.w	lr, r1, #20
  4075da:	2700      	movs	r7, #0
  4075dc:	f8de 1000 	ldr.w	r1, [lr]
  4075e0:	3701      	adds	r7, #1
  4075e2:	b288      	uxth	r0, r1
  4075e4:	42be      	cmp	r6, r7
  4075e6:	ea4f 4111 	mov.w	r1, r1, lsr #16
  4075ea:	fb02 3300 	mla	r3, r2, r0, r3
  4075ee:	fb02 f101 	mul.w	r1, r2, r1
  4075f2:	b298      	uxth	r0, r3
  4075f4:	eb01 4313 	add.w	r3, r1, r3, lsr #16
  4075f8:	eb00 4103 	add.w	r1, r0, r3, lsl #16
  4075fc:	ea4f 4313 	mov.w	r3, r3, lsr #16
  407600:	f84e 1b04 	str.w	r1, [lr], #4
  407604:	dcea      	bgt.n	4075dc <__multadd+0x10>
  407606:	b13b      	cbz	r3, 407618 <__multadd+0x4c>
  407608:	68a2      	ldr	r2, [r4, #8]
  40760a:	4296      	cmp	r6, r2
  40760c:	da07      	bge.n	40761e <__multadd+0x52>
  40760e:	eb04 0286 	add.w	r2, r4, r6, lsl #2
  407612:	3601      	adds	r6, #1
  407614:	6153      	str	r3, [r2, #20]
  407616:	6126      	str	r6, [r4, #16]
  407618:	4620      	mov	r0, r4
  40761a:	b003      	add	sp, #12
  40761c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40761e:	6861      	ldr	r1, [r4, #4]
  407620:	4628      	mov	r0, r5
  407622:	9301      	str	r3, [sp, #4]
  407624:	3101      	adds	r1, #1
  407626:	f7ff ff9f 	bl	407568 <_Balloc>
  40762a:	6922      	ldr	r2, [r4, #16]
  40762c:	f104 010c 	add.w	r1, r4, #12
  407630:	4607      	mov	r7, r0
  407632:	3202      	adds	r2, #2
  407634:	300c      	adds	r0, #12
  407636:	0092      	lsls	r2, r2, #2
  407638:	f7ff fe96 	bl	407368 <memcpy>
  40763c:	6cea      	ldr	r2, [r5, #76]	; 0x4c
  40763e:	6861      	ldr	r1, [r4, #4]
  407640:	9b01      	ldr	r3, [sp, #4]
  407642:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
  407646:	6020      	str	r0, [r4, #0]
  407648:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
  40764c:	463c      	mov	r4, r7
  40764e:	e7de      	b.n	40760e <__multadd+0x42>

00407650 <__hi0bits>:
  407650:	4b0f      	ldr	r3, [pc, #60]	; (407690 <__hi0bits+0x40>)
  407652:	4003      	ands	r3, r0
  407654:	b9b3      	cbnz	r3, 407684 <__hi0bits+0x34>
  407656:	0400      	lsls	r0, r0, #16
  407658:	2310      	movs	r3, #16
  40765a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
  40765e:	d101      	bne.n	407664 <__hi0bits+0x14>
  407660:	3308      	adds	r3, #8
  407662:	0200      	lsls	r0, r0, #8
  407664:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
  407668:	d101      	bne.n	40766e <__hi0bits+0x1e>
  40766a:	3304      	adds	r3, #4
  40766c:	0100      	lsls	r0, r0, #4
  40766e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
  407672:	d101      	bne.n	407678 <__hi0bits+0x28>
  407674:	3302      	adds	r3, #2
  407676:	0080      	lsls	r0, r0, #2
  407678:	2800      	cmp	r0, #0
  40767a:	db07      	blt.n	40768c <__hi0bits+0x3c>
  40767c:	0042      	lsls	r2, r0, #1
  40767e:	d403      	bmi.n	407688 <__hi0bits+0x38>
  407680:	2020      	movs	r0, #32
  407682:	4770      	bx	lr
  407684:	2300      	movs	r3, #0
  407686:	e7e8      	b.n	40765a <__hi0bits+0xa>
  407688:	1c58      	adds	r0, r3, #1
  40768a:	4770      	bx	lr
  40768c:	4618      	mov	r0, r3
  40768e:	4770      	bx	lr
  407690:	ffff0000 	.word	0xffff0000

00407694 <__lo0bits>:
  407694:	6803      	ldr	r3, [r0, #0]
  407696:	f013 0207 	ands.w	r2, r3, #7
  40769a:	d008      	beq.n	4076ae <__lo0bits+0x1a>
  40769c:	07d9      	lsls	r1, r3, #31
  40769e:	d422      	bmi.n	4076e6 <__lo0bits+0x52>
  4076a0:	079a      	lsls	r2, r3, #30
  4076a2:	d423      	bmi.n	4076ec <__lo0bits+0x58>
  4076a4:	089b      	lsrs	r3, r3, #2
  4076a6:	2202      	movs	r2, #2
  4076a8:	6003      	str	r3, [r0, #0]
  4076aa:	4610      	mov	r0, r2
  4076ac:	4770      	bx	lr
  4076ae:	b299      	uxth	r1, r3
  4076b0:	b909      	cbnz	r1, 4076b6 <__lo0bits+0x22>
  4076b2:	0c1b      	lsrs	r3, r3, #16
  4076b4:	2210      	movs	r2, #16
  4076b6:	f013 0fff 	tst.w	r3, #255	; 0xff
  4076ba:	d101      	bne.n	4076c0 <__lo0bits+0x2c>
  4076bc:	3208      	adds	r2, #8
  4076be:	0a1b      	lsrs	r3, r3, #8
  4076c0:	0719      	lsls	r1, r3, #28
  4076c2:	d101      	bne.n	4076c8 <__lo0bits+0x34>
  4076c4:	3204      	adds	r2, #4
  4076c6:	091b      	lsrs	r3, r3, #4
  4076c8:	0799      	lsls	r1, r3, #30
  4076ca:	d101      	bne.n	4076d0 <__lo0bits+0x3c>
  4076cc:	3202      	adds	r2, #2
  4076ce:	089b      	lsrs	r3, r3, #2
  4076d0:	07d9      	lsls	r1, r3, #31
  4076d2:	d405      	bmi.n	4076e0 <__lo0bits+0x4c>
  4076d4:	085b      	lsrs	r3, r3, #1
  4076d6:	d102      	bne.n	4076de <__lo0bits+0x4a>
  4076d8:	2220      	movs	r2, #32
  4076da:	4610      	mov	r0, r2
  4076dc:	4770      	bx	lr
  4076de:	3201      	adds	r2, #1
  4076e0:	6003      	str	r3, [r0, #0]
  4076e2:	4610      	mov	r0, r2
  4076e4:	4770      	bx	lr
  4076e6:	2200      	movs	r2, #0
  4076e8:	4610      	mov	r0, r2
  4076ea:	4770      	bx	lr
  4076ec:	085b      	lsrs	r3, r3, #1
  4076ee:	2201      	movs	r2, #1
  4076f0:	6003      	str	r3, [r0, #0]
  4076f2:	4610      	mov	r0, r2
  4076f4:	4770      	bx	lr
  4076f6:	bf00      	nop

004076f8 <__i2b>:
  4076f8:	b510      	push	{r4, lr}
  4076fa:	460c      	mov	r4, r1
  4076fc:	2101      	movs	r1, #1
  4076fe:	f7ff ff33 	bl	407568 <_Balloc>
  407702:	2201      	movs	r2, #1
  407704:	6144      	str	r4, [r0, #20]
  407706:	6102      	str	r2, [r0, #16]
  407708:	bd10      	pop	{r4, pc}
  40770a:	bf00      	nop

0040770c <__multiply>:
  40770c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  407710:	690e      	ldr	r6, [r1, #16]
  407712:	b085      	sub	sp, #20
  407714:	6915      	ldr	r5, [r2, #16]
  407716:	460c      	mov	r4, r1
  407718:	4691      	mov	r9, r2
  40771a:	42ae      	cmp	r6, r5
  40771c:	f2c0 8094 	blt.w	407848 <__multiply+0x13c>
  407720:	462b      	mov	r3, r5
  407722:	4635      	mov	r5, r6
  407724:	461e      	mov	r6, r3
  407726:	eb05 0806 	add.w	r8, r5, r6
  40772a:	68a3      	ldr	r3, [r4, #8]
  40772c:	6861      	ldr	r1, [r4, #4]
  40772e:	4598      	cmp	r8, r3
  407730:	dd00      	ble.n	407734 <__multiply+0x28>
  407732:	3101      	adds	r1, #1
  407734:	f7ff ff18 	bl	407568 <_Balloc>
  407738:	f100 0a14 	add.w	sl, r0, #20
  40773c:	9001      	str	r0, [sp, #4]
  40773e:	eb0a 0b88 	add.w	fp, sl, r8, lsl #2
  407742:	45da      	cmp	sl, fp
  407744:	d205      	bcs.n	407752 <__multiply+0x46>
  407746:	4653      	mov	r3, sl
  407748:	2100      	movs	r1, #0
  40774a:	f843 1b04 	str.w	r1, [r3], #4
  40774e:	459b      	cmp	fp, r3
  407750:	d8fb      	bhi.n	40774a <__multiply+0x3e>
  407752:	f109 0914 	add.w	r9, r9, #20
  407756:	f104 0314 	add.w	r3, r4, #20
  40775a:	eb09 0286 	add.w	r2, r9, r6, lsl #2
  40775e:	eb03 0c85 	add.w	ip, r3, r5, lsl #2
  407762:	4591      	cmp	r9, r2
  407764:	d25b      	bcs.n	40781e <__multiply+0x112>
  407766:	f8cd b008 	str.w	fp, [sp, #8]
  40776a:	4693      	mov	fp, r2
  40776c:	f8cd 800c 	str.w	r8, [sp, #12]
  407770:	4698      	mov	r8, r3
  407772:	f859 6b04 	ldr.w	r6, [r9], #4
  407776:	fa1f fe86 	uxth.w	lr, r6
  40777a:	f1be 0f00 	cmp.w	lr, #0
  40777e:	d021      	beq.n	4077c4 <__multiply+0xb8>
  407780:	4647      	mov	r7, r8
  407782:	4656      	mov	r6, sl
  407784:	2100      	movs	r1, #0
  407786:	e000      	b.n	40778a <__multiply+0x7e>
  407788:	4626      	mov	r6, r4
  40778a:	f857 2b04 	ldr.w	r2, [r7], #4
  40778e:	4634      	mov	r4, r6
  407790:	6835      	ldr	r5, [r6, #0]
  407792:	b290      	uxth	r0, r2
  407794:	45bc      	cmp	ip, r7
  407796:	b2ab      	uxth	r3, r5
  407798:	ea4f 4212 	mov.w	r2, r2, lsr #16
  40779c:	fb0e 3000 	mla	r0, lr, r0, r3
  4077a0:	ea4f 4315 	mov.w	r3, r5, lsr #16
  4077a4:	4401      	add	r1, r0
  4077a6:	fb0e 3302 	mla	r3, lr, r2, r3
  4077aa:	b28a      	uxth	r2, r1
  4077ac:	eb03 4111 	add.w	r1, r3, r1, lsr #16
  4077b0:	ea42 4301 	orr.w	r3, r2, r1, lsl #16
  4077b4:	ea4f 4111 	mov.w	r1, r1, lsr #16
  4077b8:	f844 3b04 	str.w	r3, [r4], #4
  4077bc:	d8e4      	bhi.n	407788 <__multiply+0x7c>
  4077be:	6071      	str	r1, [r6, #4]
  4077c0:	f859 6c04 	ldr.w	r6, [r9, #-4]
  4077c4:	0c36      	lsrs	r6, r6, #16
  4077c6:	d022      	beq.n	40780e <__multiply+0x102>
  4077c8:	f8da 3000 	ldr.w	r3, [sl]
  4077cc:	2700      	movs	r7, #0
  4077ce:	4655      	mov	r5, sl
  4077d0:	4640      	mov	r0, r8
  4077d2:	461a      	mov	r2, r3
  4077d4:	46be      	mov	lr, r7
  4077d6:	e000      	b.n	4077da <__multiply+0xce>
  4077d8:	4625      	mov	r5, r4
  4077da:	8807      	ldrh	r7, [r0, #0]
  4077dc:	0c12      	lsrs	r2, r2, #16
  4077de:	b299      	uxth	r1, r3
  4077e0:	462c      	mov	r4, r5
  4077e2:	fb06 2207 	mla	r2, r6, r7, r2
  4077e6:	eb02 070e 	add.w	r7, r2, lr
  4077ea:	ea41 4307 	orr.w	r3, r1, r7, lsl #16
  4077ee:	f844 3b04 	str.w	r3, [r4], #4
  4077f2:	f850 1b04 	ldr.w	r1, [r0], #4
  4077f6:	686a      	ldr	r2, [r5, #4]
  4077f8:	0c09      	lsrs	r1, r1, #16
  4077fa:	4584      	cmp	ip, r0
  4077fc:	b293      	uxth	r3, r2
  4077fe:	fb06 3101 	mla	r1, r6, r1, r3
  407802:	eb01 4317 	add.w	r3, r1, r7, lsr #16
  407806:	ea4f 4e13 	mov.w	lr, r3, lsr #16
  40780a:	d8e5      	bhi.n	4077d8 <__multiply+0xcc>
  40780c:	606b      	str	r3, [r5, #4]
  40780e:	45cb      	cmp	fp, r9
  407810:	f10a 0a04 	add.w	sl, sl, #4
  407814:	d8ad      	bhi.n	407772 <__multiply+0x66>
  407816:	f8dd b008 	ldr.w	fp, [sp, #8]
  40781a:	f8dd 800c 	ldr.w	r8, [sp, #12]
  40781e:	f1b8 0f00 	cmp.w	r8, #0
  407822:	dd0b      	ble.n	40783c <__multiply+0x130>
  407824:	f85b 3c04 	ldr.w	r3, [fp, #-4]
  407828:	f1ab 0b04 	sub.w	fp, fp, #4
  40782c:	b11b      	cbz	r3, 407836 <__multiply+0x12a>
  40782e:	e005      	b.n	40783c <__multiply+0x130>
  407830:	f85b 3d04 	ldr.w	r3, [fp, #-4]!
  407834:	b913      	cbnz	r3, 40783c <__multiply+0x130>
  407836:	f1b8 0801 	subs.w	r8, r8, #1
  40783a:	d1f9      	bne.n	407830 <__multiply+0x124>
  40783c:	9801      	ldr	r0, [sp, #4]
  40783e:	f8c0 8010 	str.w	r8, [r0, #16]
  407842:	b005      	add	sp, #20
  407844:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407848:	4614      	mov	r4, r2
  40784a:	4689      	mov	r9, r1
  40784c:	e76b      	b.n	407726 <__multiply+0x1a>
  40784e:	bf00      	nop

00407850 <__pow5mult>:
  407850:	f012 0303 	ands.w	r3, r2, #3
  407854:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  407858:	4614      	mov	r4, r2
  40785a:	4607      	mov	r7, r0
  40785c:	460e      	mov	r6, r1
  40785e:	d12d      	bne.n	4078bc <__pow5mult+0x6c>
  407860:	10a4      	asrs	r4, r4, #2
  407862:	d01c      	beq.n	40789e <__pow5mult+0x4e>
  407864:	6cbd      	ldr	r5, [r7, #72]	; 0x48
  407866:	b395      	cbz	r5, 4078ce <__pow5mult+0x7e>
  407868:	07e3      	lsls	r3, r4, #31
  40786a:	f04f 0800 	mov.w	r8, #0
  40786e:	d406      	bmi.n	40787e <__pow5mult+0x2e>
  407870:	1064      	asrs	r4, r4, #1
  407872:	d014      	beq.n	40789e <__pow5mult+0x4e>
  407874:	6828      	ldr	r0, [r5, #0]
  407876:	b1a8      	cbz	r0, 4078a4 <__pow5mult+0x54>
  407878:	4605      	mov	r5, r0
  40787a:	07e3      	lsls	r3, r4, #31
  40787c:	d5f8      	bpl.n	407870 <__pow5mult+0x20>
  40787e:	4638      	mov	r0, r7
  407880:	4631      	mov	r1, r6
  407882:	462a      	mov	r2, r5
  407884:	f7ff ff42 	bl	40770c <__multiply>
  407888:	b1b6      	cbz	r6, 4078b8 <__pow5mult+0x68>
  40788a:	6872      	ldr	r2, [r6, #4]
  40788c:	1064      	asrs	r4, r4, #1
  40788e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  407890:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  407894:	6031      	str	r1, [r6, #0]
  407896:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
  40789a:	4606      	mov	r6, r0
  40789c:	d1ea      	bne.n	407874 <__pow5mult+0x24>
  40789e:	4630      	mov	r0, r6
  4078a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4078a4:	4629      	mov	r1, r5
  4078a6:	462a      	mov	r2, r5
  4078a8:	4638      	mov	r0, r7
  4078aa:	f7ff ff2f 	bl	40770c <__multiply>
  4078ae:	6028      	str	r0, [r5, #0]
  4078b0:	f8c0 8000 	str.w	r8, [r0]
  4078b4:	4605      	mov	r5, r0
  4078b6:	e7e0      	b.n	40787a <__pow5mult+0x2a>
  4078b8:	4606      	mov	r6, r0
  4078ba:	e7d9      	b.n	407870 <__pow5mult+0x20>
  4078bc:	1e5a      	subs	r2, r3, #1
  4078be:	4d0b      	ldr	r5, [pc, #44]	; (4078ec <__pow5mult+0x9c>)
  4078c0:	2300      	movs	r3, #0
  4078c2:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
  4078c6:	f7ff fe81 	bl	4075cc <__multadd>
  4078ca:	4606      	mov	r6, r0
  4078cc:	e7c8      	b.n	407860 <__pow5mult+0x10>
  4078ce:	2101      	movs	r1, #1
  4078d0:	4638      	mov	r0, r7
  4078d2:	f7ff fe49 	bl	407568 <_Balloc>
  4078d6:	f240 2171 	movw	r1, #625	; 0x271
  4078da:	2201      	movs	r2, #1
  4078dc:	2300      	movs	r3, #0
  4078de:	6141      	str	r1, [r0, #20]
  4078e0:	4605      	mov	r5, r0
  4078e2:	6102      	str	r2, [r0, #16]
  4078e4:	64b8      	str	r0, [r7, #72]	; 0x48
  4078e6:	6003      	str	r3, [r0, #0]
  4078e8:	e7be      	b.n	407868 <__pow5mult+0x18>
  4078ea:	bf00      	nop
  4078ec:	004095c8 	.word	0x004095c8

004078f0 <__lshift>:
  4078f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4078f4:	690e      	ldr	r6, [r1, #16]
  4078f6:	ea4f 1962 	mov.w	r9, r2, asr #5
  4078fa:	688b      	ldr	r3, [r1, #8]
  4078fc:	460d      	mov	r5, r1
  4078fe:	444e      	add	r6, r9
  407900:	4690      	mov	r8, r2
  407902:	4607      	mov	r7, r0
  407904:	6849      	ldr	r1, [r1, #4]
  407906:	1c74      	adds	r4, r6, #1
  407908:	429c      	cmp	r4, r3
  40790a:	dd03      	ble.n	407914 <__lshift+0x24>
  40790c:	005b      	lsls	r3, r3, #1
  40790e:	3101      	adds	r1, #1
  407910:	429c      	cmp	r4, r3
  407912:	dcfb      	bgt.n	40790c <__lshift+0x1c>
  407914:	4638      	mov	r0, r7
  407916:	f7ff fe27 	bl	407568 <_Balloc>
  40791a:	f1b9 0f00 	cmp.w	r9, #0
  40791e:	4684      	mov	ip, r0
  407920:	f100 0114 	add.w	r1, r0, #20
  407924:	dd09      	ble.n	40793a <__lshift+0x4a>
  407926:	2300      	movs	r3, #0
  407928:	460a      	mov	r2, r1
  40792a:	4618      	mov	r0, r3
  40792c:	3301      	adds	r3, #1
  40792e:	f842 0b04 	str.w	r0, [r2], #4
  407932:	454b      	cmp	r3, r9
  407934:	d1fa      	bne.n	40792c <__lshift+0x3c>
  407936:	eb01 0183 	add.w	r1, r1, r3, lsl #2
  40793a:	692a      	ldr	r2, [r5, #16]
  40793c:	f105 0314 	add.w	r3, r5, #20
  407940:	eb03 0e82 	add.w	lr, r3, r2, lsl #2
  407944:	f018 021f 	ands.w	r2, r8, #31
  407948:	d023      	beq.n	407992 <__lshift+0xa2>
  40794a:	f1c2 0920 	rsb	r9, r2, #32
  40794e:	f04f 0a00 	mov.w	sl, #0
  407952:	6818      	ldr	r0, [r3, #0]
  407954:	4688      	mov	r8, r1
  407956:	4090      	lsls	r0, r2
  407958:	ea4a 0000 	orr.w	r0, sl, r0
  40795c:	f841 0b04 	str.w	r0, [r1], #4
  407960:	f853 0b04 	ldr.w	r0, [r3], #4
  407964:	459e      	cmp	lr, r3
  407966:	fa20 fa09 	lsr.w	sl, r0, r9
  40796a:	d8f2      	bhi.n	407952 <__lshift+0x62>
  40796c:	f8c8 a004 	str.w	sl, [r8, #4]
  407970:	f1ba 0f00 	cmp.w	sl, #0
  407974:	d000      	beq.n	407978 <__lshift+0x88>
  407976:	1cb4      	adds	r4, r6, #2
  407978:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  40797a:	3c01      	subs	r4, #1
  40797c:	686a      	ldr	r2, [r5, #4]
  40797e:	4660      	mov	r0, ip
  407980:	f8cc 4010 	str.w	r4, [ip, #16]
  407984:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  407988:	6029      	str	r1, [r5, #0]
  40798a:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
  40798e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  407992:	3904      	subs	r1, #4
  407994:	f853 2b04 	ldr.w	r2, [r3], #4
  407998:	459e      	cmp	lr, r3
  40799a:	f841 2f04 	str.w	r2, [r1, #4]!
  40799e:	d8f9      	bhi.n	407994 <__lshift+0xa4>
  4079a0:	e7ea      	b.n	407978 <__lshift+0x88>
  4079a2:	bf00      	nop

004079a4 <__mcmp>:
  4079a4:	6902      	ldr	r2, [r0, #16]
  4079a6:	690b      	ldr	r3, [r1, #16]
  4079a8:	1ad2      	subs	r2, r2, r3
  4079aa:	d113      	bne.n	4079d4 <__mcmp+0x30>
  4079ac:	009a      	lsls	r2, r3, #2
  4079ae:	3014      	adds	r0, #20
  4079b0:	3114      	adds	r1, #20
  4079b2:	1883      	adds	r3, r0, r2
  4079b4:	4411      	add	r1, r2
  4079b6:	b410      	push	{r4}
  4079b8:	e001      	b.n	4079be <__mcmp+0x1a>
  4079ba:	4298      	cmp	r0, r3
  4079bc:	d20c      	bcs.n	4079d8 <__mcmp+0x34>
  4079be:	f853 4d04 	ldr.w	r4, [r3, #-4]!
  4079c2:	f851 2d04 	ldr.w	r2, [r1, #-4]!
  4079c6:	4294      	cmp	r4, r2
  4079c8:	d0f7      	beq.n	4079ba <__mcmp+0x16>
  4079ca:	d309      	bcc.n	4079e0 <__mcmp+0x3c>
  4079cc:	2001      	movs	r0, #1
  4079ce:	f85d 4b04 	ldr.w	r4, [sp], #4
  4079d2:	4770      	bx	lr
  4079d4:	4610      	mov	r0, r2
  4079d6:	4770      	bx	lr
  4079d8:	2000      	movs	r0, #0
  4079da:	f85d 4b04 	ldr.w	r4, [sp], #4
  4079de:	4770      	bx	lr
  4079e0:	f04f 30ff 	mov.w	r0, #4294967295
  4079e4:	f85d 4b04 	ldr.w	r4, [sp], #4
  4079e8:	4770      	bx	lr
  4079ea:	bf00      	nop

004079ec <__mdiff>:
  4079ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4079f0:	460c      	mov	r4, r1
  4079f2:	4605      	mov	r5, r0
  4079f4:	4611      	mov	r1, r2
  4079f6:	4617      	mov	r7, r2
  4079f8:	4620      	mov	r0, r4
  4079fa:	f7ff ffd3 	bl	4079a4 <__mcmp>
  4079fe:	1e06      	subs	r6, r0, #0
  407a00:	d05c      	beq.n	407abc <__mdiff+0xd0>
  407a02:	db55      	blt.n	407ab0 <__mdiff+0xc4>
  407a04:	f04f 0800 	mov.w	r8, #0
  407a08:	6861      	ldr	r1, [r4, #4]
  407a0a:	4628      	mov	r0, r5
  407a0c:	f7ff fdac 	bl	407568 <_Balloc>
  407a10:	f107 0514 	add.w	r5, r7, #20
  407a14:	693b      	ldr	r3, [r7, #16]
  407a16:	f104 0114 	add.w	r1, r4, #20
  407a1a:	6926      	ldr	r6, [r4, #16]
  407a1c:	4684      	mov	ip, r0
  407a1e:	eb05 0e83 	add.w	lr, r5, r3, lsl #2
  407a22:	f100 0414 	add.w	r4, r0, #20
  407a26:	eb01 0786 	add.w	r7, r1, r6, lsl #2
  407a2a:	2300      	movs	r3, #0
  407a2c:	f8c0 800c 	str.w	r8, [r0, #12]
  407a30:	f851 9b04 	ldr.w	r9, [r1], #4
  407a34:	f855 2b04 	ldr.w	r2, [r5], #4
  407a38:	fa13 f889 	uxtah	r8, r3, r9
  407a3c:	4608      	mov	r0, r1
  407a3e:	b293      	uxth	r3, r2
  407a40:	45ae      	cmp	lr, r5
  407a42:	ea4f 4212 	mov.w	r2, r2, lsr #16
  407a46:	ebc3 0308 	rsb	r3, r3, r8
  407a4a:	ebc2 4219 	rsb	r2, r2, r9, lsr #16
  407a4e:	fa1f f883 	uxth.w	r8, r3
  407a52:	eb02 4323 	add.w	r3, r2, r3, asr #16
  407a56:	ea48 4203 	orr.w	r2, r8, r3, lsl #16
  407a5a:	ea4f 4323 	mov.w	r3, r3, asr #16
  407a5e:	f844 2b04 	str.w	r2, [r4], #4
  407a62:	d8e5      	bhi.n	407a30 <__mdiff+0x44>
  407a64:	428f      	cmp	r7, r1
  407a66:	4625      	mov	r5, r4
  407a68:	d916      	bls.n	407a98 <__mdiff+0xac>
  407a6a:	f850 2b04 	ldr.w	r2, [r0], #4
  407a6e:	fa13 f382 	uxtah	r3, r3, r2
  407a72:	0c12      	lsrs	r2, r2, #16
  407a74:	4287      	cmp	r7, r0
  407a76:	fa1f fe83 	uxth.w	lr, r3
  407a7a:	eb02 4323 	add.w	r3, r2, r3, asr #16
  407a7e:	ea4e 4203 	orr.w	r2, lr, r3, lsl #16
  407a82:	ea4f 4323 	mov.w	r3, r3, asr #16
  407a86:	f844 2b04 	str.w	r2, [r4], #4
  407a8a:	d8ee      	bhi.n	407a6a <__mdiff+0x7e>
  407a8c:	43c9      	mvns	r1, r1
  407a8e:	4439      	add	r1, r7
  407a90:	f021 0403 	bic.w	r4, r1, #3
  407a94:	3404      	adds	r4, #4
  407a96:	442c      	add	r4, r5
  407a98:	3c04      	subs	r4, #4
  407a9a:	b922      	cbnz	r2, 407aa6 <__mdiff+0xba>
  407a9c:	f854 3d04 	ldr.w	r3, [r4, #-4]!
  407aa0:	3e01      	subs	r6, #1
  407aa2:	2b00      	cmp	r3, #0
  407aa4:	d0fa      	beq.n	407a9c <__mdiff+0xb0>
  407aa6:	4660      	mov	r0, ip
  407aa8:	f8cc 6010 	str.w	r6, [ip, #16]
  407aac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  407ab0:	4623      	mov	r3, r4
  407ab2:	f04f 0801 	mov.w	r8, #1
  407ab6:	463c      	mov	r4, r7
  407ab8:	461f      	mov	r7, r3
  407aba:	e7a5      	b.n	407a08 <__mdiff+0x1c>
  407abc:	4628      	mov	r0, r5
  407abe:	4631      	mov	r1, r6
  407ac0:	f7ff fd52 	bl	407568 <_Balloc>
  407ac4:	2201      	movs	r2, #1
  407ac6:	4603      	mov	r3, r0
  407ac8:	6146      	str	r6, [r0, #20]
  407aca:	611a      	str	r2, [r3, #16]
  407acc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00407ad0 <__d2b>:
  407ad0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  407ad4:	461c      	mov	r4, r3
  407ad6:	b082      	sub	sp, #8
  407ad8:	2101      	movs	r1, #1
  407ada:	4616      	mov	r6, r2
  407adc:	f3c4 550a 	ubfx	r5, r4, #20, #11
  407ae0:	f7ff fd42 	bl	407568 <_Balloc>
  407ae4:	f3c4 0413 	ubfx	r4, r4, #0, #20
  407ae8:	4607      	mov	r7, r0
  407aea:	b10d      	cbz	r5, 407af0 <__d2b+0x20>
  407aec:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
  407af0:	9401      	str	r4, [sp, #4]
  407af2:	b30e      	cbz	r6, 407b38 <__d2b+0x68>
  407af4:	a802      	add	r0, sp, #8
  407af6:	f840 6d08 	str.w	r6, [r0, #-8]!
  407afa:	f7ff fdcb 	bl	407694 <__lo0bits>
  407afe:	2800      	cmp	r0, #0
  407b00:	d132      	bne.n	407b68 <__d2b+0x98>
  407b02:	e89d 000c 	ldmia.w	sp, {r2, r3}
  407b06:	617a      	str	r2, [r7, #20]
  407b08:	2b00      	cmp	r3, #0
  407b0a:	61bb      	str	r3, [r7, #24]
  407b0c:	bf14      	ite	ne
  407b0e:	2402      	movne	r4, #2
  407b10:	2401      	moveq	r4, #1
  407b12:	613c      	str	r4, [r7, #16]
  407b14:	b9dd      	cbnz	r5, 407b4e <__d2b+0x7e>
  407b16:	eb07 0384 	add.w	r3, r7, r4, lsl #2
  407b1a:	9a08      	ldr	r2, [sp, #32]
  407b1c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
  407b20:	6010      	str	r0, [r2, #0]
  407b22:	6918      	ldr	r0, [r3, #16]
  407b24:	f7ff fd94 	bl	407650 <__hi0bits>
  407b28:	9b09      	ldr	r3, [sp, #36]	; 0x24
  407b2a:	ebc0 1044 	rsb	r0, r0, r4, lsl #5
  407b2e:	6018      	str	r0, [r3, #0]
  407b30:	4638      	mov	r0, r7
  407b32:	b002      	add	sp, #8
  407b34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  407b38:	a801      	add	r0, sp, #4
  407b3a:	f7ff fdab 	bl	407694 <__lo0bits>
  407b3e:	2301      	movs	r3, #1
  407b40:	9a01      	ldr	r2, [sp, #4]
  407b42:	3020      	adds	r0, #32
  407b44:	461c      	mov	r4, r3
  407b46:	613b      	str	r3, [r7, #16]
  407b48:	617a      	str	r2, [r7, #20]
  407b4a:	2d00      	cmp	r5, #0
  407b4c:	d0e3      	beq.n	407b16 <__d2b+0x46>
  407b4e:	f2a5 4833 	subw	r8, r5, #1075	; 0x433
  407b52:	f1c0 0335 	rsb	r3, r0, #53	; 0x35
  407b56:	9a08      	ldr	r2, [sp, #32]
  407b58:	4440      	add	r0, r8
  407b5a:	6010      	str	r0, [r2, #0]
  407b5c:	4638      	mov	r0, r7
  407b5e:	9a09      	ldr	r2, [sp, #36]	; 0x24
  407b60:	6013      	str	r3, [r2, #0]
  407b62:	b002      	add	sp, #8
  407b64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  407b68:	9b01      	ldr	r3, [sp, #4]
  407b6a:	f1c0 0120 	rsb	r1, r0, #32
  407b6e:	9a00      	ldr	r2, [sp, #0]
  407b70:	fa03 f101 	lsl.w	r1, r3, r1
  407b74:	40c3      	lsrs	r3, r0
  407b76:	430a      	orrs	r2, r1
  407b78:	9301      	str	r3, [sp, #4]
  407b7a:	617a      	str	r2, [r7, #20]
  407b7c:	e7c4      	b.n	407b08 <__d2b+0x38>
  407b7e:	bf00      	nop

00407b80 <_realloc_r>:
  407b80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  407b84:	4617      	mov	r7, r2
  407b86:	b083      	sub	sp, #12
  407b88:	460e      	mov	r6, r1
  407b8a:	2900      	cmp	r1, #0
  407b8c:	f000 80e2 	beq.w	407d54 <_realloc_r+0x1d4>
  407b90:	f107 040b 	add.w	r4, r7, #11
  407b94:	4681      	mov	r9, r0
  407b96:	f7ff fce3 	bl	407560 <__malloc_lock>
  407b9a:	f856 3c04 	ldr.w	r3, [r6, #-4]
  407b9e:	2c16      	cmp	r4, #22
  407ba0:	f1a6 0808 	sub.w	r8, r6, #8
  407ba4:	f023 0503 	bic.w	r5, r3, #3
  407ba8:	d850      	bhi.n	407c4c <_realloc_r+0xcc>
  407baa:	2210      	movs	r2, #16
  407bac:	2100      	movs	r1, #0
  407bae:	4614      	mov	r4, r2
  407bb0:	42bc      	cmp	r4, r7
  407bb2:	f0c0 80dc 	bcc.w	407d6e <_realloc_r+0x1ee>
  407bb6:	2900      	cmp	r1, #0
  407bb8:	f040 80d9 	bne.w	407d6e <_realloc_r+0x1ee>
  407bbc:	4295      	cmp	r5, r2
  407bbe:	da4a      	bge.n	407c56 <_realloc_r+0xd6>
  407bc0:	f8df b3a8 	ldr.w	fp, [pc, #936]	; 407f6c <_realloc_r+0x3ec>
  407bc4:	eb08 0105 	add.w	r1, r8, r5
  407bc8:	f8db 0008 	ldr.w	r0, [fp, #8]
  407bcc:	4288      	cmp	r0, r1
  407bce:	f000 80d3 	beq.w	407d78 <_realloc_r+0x1f8>
  407bd2:	6848      	ldr	r0, [r1, #4]
  407bd4:	f020 0e01 	bic.w	lr, r0, #1
  407bd8:	448e      	add	lr, r1
  407bda:	f8de e004 	ldr.w	lr, [lr, #4]
  407bde:	f01e 0f01 	tst.w	lr, #1
  407be2:	d14e      	bne.n	407c82 <_realloc_r+0x102>
  407be4:	f020 0003 	bic.w	r0, r0, #3
  407be8:	4428      	add	r0, r5
  407bea:	4290      	cmp	r0, r2
  407bec:	f280 80b8 	bge.w	407d60 <_realloc_r+0x1e0>
  407bf0:	07db      	lsls	r3, r3, #31
  407bf2:	f100 808b 	bmi.w	407d0c <_realloc_r+0x18c>
  407bf6:	f856 3c08 	ldr.w	r3, [r6, #-8]
  407bfa:	ebc3 0a08 	rsb	sl, r3, r8
  407bfe:	f8da 3004 	ldr.w	r3, [sl, #4]
  407c02:	f023 0303 	bic.w	r3, r3, #3
  407c06:	eb00 0e03 	add.w	lr, r0, r3
  407c0a:	4596      	cmp	lr, r2
  407c0c:	db43      	blt.n	407c96 <_realloc_r+0x116>
  407c0e:	68cb      	ldr	r3, [r1, #12]
  407c10:	4657      	mov	r7, sl
  407c12:	6889      	ldr	r1, [r1, #8]
  407c14:	1f2a      	subs	r2, r5, #4
  407c16:	60cb      	str	r3, [r1, #12]
  407c18:	2a24      	cmp	r2, #36	; 0x24
  407c1a:	6099      	str	r1, [r3, #8]
  407c1c:	f857 1f08 	ldr.w	r1, [r7, #8]!
  407c20:	f8da 300c 	ldr.w	r3, [sl, #12]
  407c24:	60cb      	str	r3, [r1, #12]
  407c26:	6099      	str	r1, [r3, #8]
  407c28:	f200 813c 	bhi.w	407ea4 <_realloc_r+0x324>
  407c2c:	2a13      	cmp	r2, #19
  407c2e:	f240 80fa 	bls.w	407e26 <_realloc_r+0x2a6>
  407c32:	6833      	ldr	r3, [r6, #0]
  407c34:	2a1b      	cmp	r2, #27
  407c36:	f8ca 3008 	str.w	r3, [sl, #8]
  407c3a:	6873      	ldr	r3, [r6, #4]
  407c3c:	f8ca 300c 	str.w	r3, [sl, #12]
  407c40:	f200 813b 	bhi.w	407eba <_realloc_r+0x33a>
  407c44:	3608      	adds	r6, #8
  407c46:	f10a 0310 	add.w	r3, sl, #16
  407c4a:	e0ed      	b.n	407e28 <_realloc_r+0x2a8>
  407c4c:	f024 0407 	bic.w	r4, r4, #7
  407c50:	4622      	mov	r2, r4
  407c52:	0fe1      	lsrs	r1, r4, #31
  407c54:	e7ac      	b.n	407bb0 <_realloc_r+0x30>
  407c56:	4637      	mov	r7, r6
  407c58:	1b2a      	subs	r2, r5, r4
  407c5a:	f003 0301 	and.w	r3, r3, #1
  407c5e:	2a0f      	cmp	r2, #15
  407c60:	d841      	bhi.n	407ce6 <_realloc_r+0x166>
  407c62:	eb08 0205 	add.w	r2, r8, r5
  407c66:	431d      	orrs	r5, r3
  407c68:	f8c8 5004 	str.w	r5, [r8, #4]
  407c6c:	6853      	ldr	r3, [r2, #4]
  407c6e:	f043 0301 	orr.w	r3, r3, #1
  407c72:	6053      	str	r3, [r2, #4]
  407c74:	4648      	mov	r0, r9
  407c76:	f7ff fc75 	bl	407564 <__malloc_unlock>
  407c7a:	4638      	mov	r0, r7
  407c7c:	b003      	add	sp, #12
  407c7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407c82:	07d9      	lsls	r1, r3, #31
  407c84:	d442      	bmi.n	407d0c <_realloc_r+0x18c>
  407c86:	f856 3c08 	ldr.w	r3, [r6, #-8]
  407c8a:	ebc3 0a08 	rsb	sl, r3, r8
  407c8e:	f8da 3004 	ldr.w	r3, [sl, #4]
  407c92:	f023 0303 	bic.w	r3, r3, #3
  407c96:	442b      	add	r3, r5
  407c98:	4293      	cmp	r3, r2
  407c9a:	db37      	blt.n	407d0c <_realloc_r+0x18c>
  407c9c:	4657      	mov	r7, sl
  407c9e:	1f2a      	subs	r2, r5, #4
  407ca0:	f8da 100c 	ldr.w	r1, [sl, #12]
  407ca4:	f857 0f08 	ldr.w	r0, [r7, #8]!
  407ca8:	2a24      	cmp	r2, #36	; 0x24
  407caa:	60c1      	str	r1, [r0, #12]
  407cac:	6088      	str	r0, [r1, #8]
  407cae:	f200 80c6 	bhi.w	407e3e <_realloc_r+0x2be>
  407cb2:	2a13      	cmp	r2, #19
  407cb4:	f240 80ff 	bls.w	407eb6 <_realloc_r+0x336>
  407cb8:	6831      	ldr	r1, [r6, #0]
  407cba:	2a1b      	cmp	r2, #27
  407cbc:	f8ca 1008 	str.w	r1, [sl, #8]
  407cc0:	6871      	ldr	r1, [r6, #4]
  407cc2:	f8ca 100c 	str.w	r1, [sl, #12]
  407cc6:	f200 810d 	bhi.w	407ee4 <_realloc_r+0x364>
  407cca:	3608      	adds	r6, #8
  407ccc:	f10a 0210 	add.w	r2, sl, #16
  407cd0:	6831      	ldr	r1, [r6, #0]
  407cd2:	461d      	mov	r5, r3
  407cd4:	46d0      	mov	r8, sl
  407cd6:	6011      	str	r1, [r2, #0]
  407cd8:	6873      	ldr	r3, [r6, #4]
  407cda:	6053      	str	r3, [r2, #4]
  407cdc:	68b3      	ldr	r3, [r6, #8]
  407cde:	6093      	str	r3, [r2, #8]
  407ce0:	f8da 3004 	ldr.w	r3, [sl, #4]
  407ce4:	e7b8      	b.n	407c58 <_realloc_r+0xd8>
  407ce6:	eb08 0504 	add.w	r5, r8, r4
  407cea:	f042 0601 	orr.w	r6, r2, #1
  407cee:	431c      	orrs	r4, r3
  407cf0:	4648      	mov	r0, r9
  407cf2:	442a      	add	r2, r5
  407cf4:	f105 0108 	add.w	r1, r5, #8
  407cf8:	f8c8 4004 	str.w	r4, [r8, #4]
  407cfc:	606e      	str	r6, [r5, #4]
  407cfe:	6853      	ldr	r3, [r2, #4]
  407d00:	f043 0301 	orr.w	r3, r3, #1
  407d04:	6053      	str	r3, [r2, #4]
  407d06:	f7fe fd2b 	bl	406760 <_free_r>
  407d0a:	e7b3      	b.n	407c74 <_realloc_r+0xf4>
  407d0c:	4639      	mov	r1, r7
  407d0e:	4648      	mov	r0, r9
  407d10:	f7ff f836 	bl	406d80 <_malloc_r>
  407d14:	4607      	mov	r7, r0
  407d16:	2800      	cmp	r0, #0
  407d18:	d0ac      	beq.n	407c74 <_realloc_r+0xf4>
  407d1a:	f856 3c04 	ldr.w	r3, [r6, #-4]
  407d1e:	f1a0 0108 	sub.w	r1, r0, #8
  407d22:	f023 0201 	bic.w	r2, r3, #1
  407d26:	4442      	add	r2, r8
  407d28:	4291      	cmp	r1, r2
  407d2a:	f000 80b4 	beq.w	407e96 <_realloc_r+0x316>
  407d2e:	1f2a      	subs	r2, r5, #4
  407d30:	2a24      	cmp	r2, #36	; 0x24
  407d32:	f200 80a1 	bhi.w	407e78 <_realloc_r+0x2f8>
  407d36:	2a13      	cmp	r2, #19
  407d38:	d86a      	bhi.n	407e10 <_realloc_r+0x290>
  407d3a:	4603      	mov	r3, r0
  407d3c:	4632      	mov	r2, r6
  407d3e:	6811      	ldr	r1, [r2, #0]
  407d40:	6019      	str	r1, [r3, #0]
  407d42:	6851      	ldr	r1, [r2, #4]
  407d44:	6059      	str	r1, [r3, #4]
  407d46:	6892      	ldr	r2, [r2, #8]
  407d48:	609a      	str	r2, [r3, #8]
  407d4a:	4631      	mov	r1, r6
  407d4c:	4648      	mov	r0, r9
  407d4e:	f7fe fd07 	bl	406760 <_free_r>
  407d52:	e78f      	b.n	407c74 <_realloc_r+0xf4>
  407d54:	4611      	mov	r1, r2
  407d56:	b003      	add	sp, #12
  407d58:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  407d5c:	f7ff b810 	b.w	406d80 <_malloc_r>
  407d60:	68ca      	ldr	r2, [r1, #12]
  407d62:	4637      	mov	r7, r6
  407d64:	6889      	ldr	r1, [r1, #8]
  407d66:	4605      	mov	r5, r0
  407d68:	60ca      	str	r2, [r1, #12]
  407d6a:	6091      	str	r1, [r2, #8]
  407d6c:	e774      	b.n	407c58 <_realloc_r+0xd8>
  407d6e:	230c      	movs	r3, #12
  407d70:	2000      	movs	r0, #0
  407d72:	f8c9 3000 	str.w	r3, [r9]
  407d76:	e781      	b.n	407c7c <_realloc_r+0xfc>
  407d78:	6841      	ldr	r1, [r0, #4]
  407d7a:	f104 0010 	add.w	r0, r4, #16
  407d7e:	f021 0103 	bic.w	r1, r1, #3
  407d82:	4429      	add	r1, r5
  407d84:	4281      	cmp	r1, r0
  407d86:	da63      	bge.n	407e50 <_realloc_r+0x2d0>
  407d88:	07db      	lsls	r3, r3, #31
  407d8a:	d4bf      	bmi.n	407d0c <_realloc_r+0x18c>
  407d8c:	f856 3c08 	ldr.w	r3, [r6, #-8]
  407d90:	ebc3 0a08 	rsb	sl, r3, r8
  407d94:	f8da 3004 	ldr.w	r3, [sl, #4]
  407d98:	f023 0303 	bic.w	r3, r3, #3
  407d9c:	eb01 0c03 	add.w	ip, r1, r3
  407da0:	4560      	cmp	r0, ip
  407da2:	f73f af78 	bgt.w	407c96 <_realloc_r+0x116>
  407da6:	4657      	mov	r7, sl
  407da8:	1f2a      	subs	r2, r5, #4
  407daa:	f8da 300c 	ldr.w	r3, [sl, #12]
  407dae:	f857 1f08 	ldr.w	r1, [r7, #8]!
  407db2:	2a24      	cmp	r2, #36	; 0x24
  407db4:	60cb      	str	r3, [r1, #12]
  407db6:	6099      	str	r1, [r3, #8]
  407db8:	f200 80b8 	bhi.w	407f2c <_realloc_r+0x3ac>
  407dbc:	2a13      	cmp	r2, #19
  407dbe:	f240 80a8 	bls.w	407f12 <_realloc_r+0x392>
  407dc2:	6833      	ldr	r3, [r6, #0]
  407dc4:	2a1b      	cmp	r2, #27
  407dc6:	f8ca 3008 	str.w	r3, [sl, #8]
  407dca:	6873      	ldr	r3, [r6, #4]
  407dcc:	f8ca 300c 	str.w	r3, [sl, #12]
  407dd0:	f200 80b5 	bhi.w	407f3e <_realloc_r+0x3be>
  407dd4:	3608      	adds	r6, #8
  407dd6:	f10a 0310 	add.w	r3, sl, #16
  407dda:	6832      	ldr	r2, [r6, #0]
  407ddc:	601a      	str	r2, [r3, #0]
  407dde:	6872      	ldr	r2, [r6, #4]
  407de0:	605a      	str	r2, [r3, #4]
  407de2:	68b2      	ldr	r2, [r6, #8]
  407de4:	609a      	str	r2, [r3, #8]
  407de6:	ebc4 030c 	rsb	r3, r4, ip
  407dea:	eb0a 0204 	add.w	r2, sl, r4
  407dee:	4648      	mov	r0, r9
  407df0:	f043 0301 	orr.w	r3, r3, #1
  407df4:	f8cb 2008 	str.w	r2, [fp, #8]
  407df8:	6053      	str	r3, [r2, #4]
  407dfa:	f8da 3004 	ldr.w	r3, [sl, #4]
  407dfe:	f003 0301 	and.w	r3, r3, #1
  407e02:	431c      	orrs	r4, r3
  407e04:	f8ca 4004 	str.w	r4, [sl, #4]
  407e08:	f7ff fbac 	bl	407564 <__malloc_unlock>
  407e0c:	4638      	mov	r0, r7
  407e0e:	e735      	b.n	407c7c <_realloc_r+0xfc>
  407e10:	6833      	ldr	r3, [r6, #0]
  407e12:	2a1b      	cmp	r2, #27
  407e14:	6003      	str	r3, [r0, #0]
  407e16:	6873      	ldr	r3, [r6, #4]
  407e18:	6043      	str	r3, [r0, #4]
  407e1a:	d831      	bhi.n	407e80 <_realloc_r+0x300>
  407e1c:	f100 0308 	add.w	r3, r0, #8
  407e20:	f106 0208 	add.w	r2, r6, #8
  407e24:	e78b      	b.n	407d3e <_realloc_r+0x1be>
  407e26:	463b      	mov	r3, r7
  407e28:	6832      	ldr	r2, [r6, #0]
  407e2a:	4675      	mov	r5, lr
  407e2c:	46d0      	mov	r8, sl
  407e2e:	601a      	str	r2, [r3, #0]
  407e30:	6872      	ldr	r2, [r6, #4]
  407e32:	605a      	str	r2, [r3, #4]
  407e34:	68b2      	ldr	r2, [r6, #8]
  407e36:	609a      	str	r2, [r3, #8]
  407e38:	f8da 3004 	ldr.w	r3, [sl, #4]
  407e3c:	e70c      	b.n	407c58 <_realloc_r+0xd8>
  407e3e:	4631      	mov	r1, r6
  407e40:	4638      	mov	r0, r7
  407e42:	461d      	mov	r5, r3
  407e44:	46d0      	mov	r8, sl
  407e46:	f7ff fb29 	bl	40749c <memmove>
  407e4a:	f8da 3004 	ldr.w	r3, [sl, #4]
  407e4e:	e703      	b.n	407c58 <_realloc_r+0xd8>
  407e50:	1b0b      	subs	r3, r1, r4
  407e52:	eb08 0204 	add.w	r2, r8, r4
  407e56:	4648      	mov	r0, r9
  407e58:	f043 0301 	orr.w	r3, r3, #1
  407e5c:	f8cb 2008 	str.w	r2, [fp, #8]
  407e60:	6053      	str	r3, [r2, #4]
  407e62:	f856 3c04 	ldr.w	r3, [r6, #-4]
  407e66:	f003 0301 	and.w	r3, r3, #1
  407e6a:	431c      	orrs	r4, r3
  407e6c:	f846 4c04 	str.w	r4, [r6, #-4]
  407e70:	f7ff fb78 	bl	407564 <__malloc_unlock>
  407e74:	4630      	mov	r0, r6
  407e76:	e701      	b.n	407c7c <_realloc_r+0xfc>
  407e78:	4631      	mov	r1, r6
  407e7a:	f7ff fb0f 	bl	40749c <memmove>
  407e7e:	e764      	b.n	407d4a <_realloc_r+0x1ca>
  407e80:	68b3      	ldr	r3, [r6, #8]
  407e82:	2a24      	cmp	r2, #36	; 0x24
  407e84:	6083      	str	r3, [r0, #8]
  407e86:	68f3      	ldr	r3, [r6, #12]
  407e88:	60c3      	str	r3, [r0, #12]
  407e8a:	d022      	beq.n	407ed2 <_realloc_r+0x352>
  407e8c:	f100 0310 	add.w	r3, r0, #16
  407e90:	f106 0210 	add.w	r2, r6, #16
  407e94:	e753      	b.n	407d3e <_realloc_r+0x1be>
  407e96:	f850 2c04 	ldr.w	r2, [r0, #-4]
  407e9a:	4637      	mov	r7, r6
  407e9c:	f022 0203 	bic.w	r2, r2, #3
  407ea0:	4415      	add	r5, r2
  407ea2:	e6d9      	b.n	407c58 <_realloc_r+0xd8>
  407ea4:	4631      	mov	r1, r6
  407ea6:	4638      	mov	r0, r7
  407ea8:	4675      	mov	r5, lr
  407eaa:	46d0      	mov	r8, sl
  407eac:	f7ff faf6 	bl	40749c <memmove>
  407eb0:	f8da 3004 	ldr.w	r3, [sl, #4]
  407eb4:	e6d0      	b.n	407c58 <_realloc_r+0xd8>
  407eb6:	463a      	mov	r2, r7
  407eb8:	e70a      	b.n	407cd0 <_realloc_r+0x150>
  407eba:	68b3      	ldr	r3, [r6, #8]
  407ebc:	2a24      	cmp	r2, #36	; 0x24
  407ebe:	f8ca 3010 	str.w	r3, [sl, #16]
  407ec2:	68f3      	ldr	r3, [r6, #12]
  407ec4:	f8ca 3014 	str.w	r3, [sl, #20]
  407ec8:	d018      	beq.n	407efc <_realloc_r+0x37c>
  407eca:	3610      	adds	r6, #16
  407ecc:	f10a 0318 	add.w	r3, sl, #24
  407ed0:	e7aa      	b.n	407e28 <_realloc_r+0x2a8>
  407ed2:	6931      	ldr	r1, [r6, #16]
  407ed4:	f100 0318 	add.w	r3, r0, #24
  407ed8:	f106 0218 	add.w	r2, r6, #24
  407edc:	6101      	str	r1, [r0, #16]
  407ede:	6971      	ldr	r1, [r6, #20]
  407ee0:	6141      	str	r1, [r0, #20]
  407ee2:	e72c      	b.n	407d3e <_realloc_r+0x1be>
  407ee4:	68b1      	ldr	r1, [r6, #8]
  407ee6:	2a24      	cmp	r2, #36	; 0x24
  407ee8:	f8ca 1010 	str.w	r1, [sl, #16]
  407eec:	68f1      	ldr	r1, [r6, #12]
  407eee:	f8ca 1014 	str.w	r1, [sl, #20]
  407ef2:	d010      	beq.n	407f16 <_realloc_r+0x396>
  407ef4:	3610      	adds	r6, #16
  407ef6:	f10a 0218 	add.w	r2, sl, #24
  407efa:	e6e9      	b.n	407cd0 <_realloc_r+0x150>
  407efc:	6932      	ldr	r2, [r6, #16]
  407efe:	f10a 0320 	add.w	r3, sl, #32
  407f02:	3618      	adds	r6, #24
  407f04:	f8ca 2018 	str.w	r2, [sl, #24]
  407f08:	f856 2c04 	ldr.w	r2, [r6, #-4]
  407f0c:	f8ca 201c 	str.w	r2, [sl, #28]
  407f10:	e78a      	b.n	407e28 <_realloc_r+0x2a8>
  407f12:	463b      	mov	r3, r7
  407f14:	e761      	b.n	407dda <_realloc_r+0x25a>
  407f16:	6931      	ldr	r1, [r6, #16]
  407f18:	f10a 0220 	add.w	r2, sl, #32
  407f1c:	3618      	adds	r6, #24
  407f1e:	f8ca 1018 	str.w	r1, [sl, #24]
  407f22:	f856 1c04 	ldr.w	r1, [r6, #-4]
  407f26:	f8ca 101c 	str.w	r1, [sl, #28]
  407f2a:	e6d1      	b.n	407cd0 <_realloc_r+0x150>
  407f2c:	4631      	mov	r1, r6
  407f2e:	4638      	mov	r0, r7
  407f30:	f8cd c004 	str.w	ip, [sp, #4]
  407f34:	f7ff fab2 	bl	40749c <memmove>
  407f38:	f8dd c004 	ldr.w	ip, [sp, #4]
  407f3c:	e753      	b.n	407de6 <_realloc_r+0x266>
  407f3e:	68b3      	ldr	r3, [r6, #8]
  407f40:	2a24      	cmp	r2, #36	; 0x24
  407f42:	f8ca 3010 	str.w	r3, [sl, #16]
  407f46:	68f3      	ldr	r3, [r6, #12]
  407f48:	f8ca 3014 	str.w	r3, [sl, #20]
  407f4c:	d003      	beq.n	407f56 <_realloc_r+0x3d6>
  407f4e:	3610      	adds	r6, #16
  407f50:	f10a 0318 	add.w	r3, sl, #24
  407f54:	e741      	b.n	407dda <_realloc_r+0x25a>
  407f56:	6932      	ldr	r2, [r6, #16]
  407f58:	f10a 0320 	add.w	r3, sl, #32
  407f5c:	3618      	adds	r6, #24
  407f5e:	f8ca 2018 	str.w	r2, [sl, #24]
  407f62:	f856 2c04 	ldr.w	r2, [r6, #-4]
  407f66:	f8ca 201c 	str.w	r2, [sl, #28]
  407f6a:	e736      	b.n	407dda <_realloc_r+0x25a>
  407f6c:	204004ec 	.word	0x204004ec

00407f70 <__fpclassifyd>:
  407f70:	fab0 f080 	clz	r0, r0
  407f74:	f031 4100 	bics.w	r1, r1, #2147483648	; 0x80000000
  407f78:	ea4f 1050 	mov.w	r0, r0, lsr #5
  407f7c:	d102      	bne.n	407f84 <__fpclassifyd+0x14>
  407f7e:	b108      	cbz	r0, 407f84 <__fpclassifyd+0x14>
  407f80:	2002      	movs	r0, #2
  407f82:	4770      	bx	lr
  407f84:	f5a1 1280 	sub.w	r2, r1, #1048576	; 0x100000
  407f88:	4b08      	ldr	r3, [pc, #32]	; (407fac <__fpclassifyd+0x3c>)
  407f8a:	429a      	cmp	r2, r3
  407f8c:	d801      	bhi.n	407f92 <__fpclassifyd+0x22>
  407f8e:	2004      	movs	r0, #4
  407f90:	4770      	bx	lr
  407f92:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  407f96:	d201      	bcs.n	407f9c <__fpclassifyd+0x2c>
  407f98:	2003      	movs	r0, #3
  407f9a:	4770      	bx	lr
  407f9c:	4b04      	ldr	r3, [pc, #16]	; (407fb0 <__fpclassifyd+0x40>)
  407f9e:	4299      	cmp	r1, r3
  407fa0:	bf14      	ite	ne
  407fa2:	2000      	movne	r0, #0
  407fa4:	f000 0001 	andeq.w	r0, r0, #1
  407fa8:	4770      	bx	lr
  407faa:	bf00      	nop
  407fac:	7fdfffff 	.word	0x7fdfffff
  407fb0:	7ff00000 	.word	0x7ff00000

00407fb4 <_sbrk_r>:
  407fb4:	b538      	push	{r3, r4, r5, lr}
  407fb6:	2300      	movs	r3, #0
  407fb8:	4c06      	ldr	r4, [pc, #24]	; (407fd4 <_sbrk_r+0x20>)
  407fba:	4605      	mov	r5, r0
  407fbc:	4608      	mov	r0, r1
  407fbe:	6023      	str	r3, [r4, #0]
  407fc0:	f7f9 ffd6 	bl	401f70 <_sbrk>
  407fc4:	1c43      	adds	r3, r0, #1
  407fc6:	d000      	beq.n	407fca <_sbrk_r+0x16>
  407fc8:	bd38      	pop	{r3, r4, r5, pc}
  407fca:	6823      	ldr	r3, [r4, #0]
  407fcc:	2b00      	cmp	r3, #0
  407fce:	d0fb      	beq.n	407fc8 <_sbrk_r+0x14>
  407fd0:	602b      	str	r3, [r5, #0]
  407fd2:	bd38      	pop	{r3, r4, r5, pc}
  407fd4:	20401278 	.word	0x20401278

00407fd8 <__sread>:
  407fd8:	b510      	push	{r4, lr}
  407fda:	460c      	mov	r4, r1
  407fdc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  407fe0:	f000 f9ec 	bl	4083bc <_read_r>
  407fe4:	2800      	cmp	r0, #0
  407fe6:	db03      	blt.n	407ff0 <__sread+0x18>
  407fe8:	6d23      	ldr	r3, [r4, #80]	; 0x50
  407fea:	4403      	add	r3, r0
  407fec:	6523      	str	r3, [r4, #80]	; 0x50
  407fee:	bd10      	pop	{r4, pc}
  407ff0:	89a3      	ldrh	r3, [r4, #12]
  407ff2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  407ff6:	81a3      	strh	r3, [r4, #12]
  407ff8:	bd10      	pop	{r4, pc}
  407ffa:	bf00      	nop

00407ffc <__swrite>:
  407ffc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  408000:	461d      	mov	r5, r3
  408002:	898b      	ldrh	r3, [r1, #12]
  408004:	4616      	mov	r6, r2
  408006:	460c      	mov	r4, r1
  408008:	05da      	lsls	r2, r3, #23
  40800a:	4607      	mov	r7, r0
  40800c:	d506      	bpl.n	40801c <__swrite+0x20>
  40800e:	2302      	movs	r3, #2
  408010:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  408014:	2200      	movs	r2, #0
  408016:	f000 f9bd 	bl	408394 <_lseek_r>
  40801a:	89a3      	ldrh	r3, [r4, #12]
  40801c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  408020:	4638      	mov	r0, r7
  408022:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  408026:	4632      	mov	r2, r6
  408028:	81a3      	strh	r3, [r4, #12]
  40802a:	462b      	mov	r3, r5
  40802c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  408030:	f000 b89e 	b.w	408170 <_write_r>

00408034 <__sseek>:
  408034:	b510      	push	{r4, lr}
  408036:	460c      	mov	r4, r1
  408038:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40803c:	f000 f9aa 	bl	408394 <_lseek_r>
  408040:	1c42      	adds	r2, r0, #1
  408042:	89a3      	ldrh	r3, [r4, #12]
  408044:	d004      	beq.n	408050 <__sseek+0x1c>
  408046:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
  40804a:	6520      	str	r0, [r4, #80]	; 0x50
  40804c:	81a3      	strh	r3, [r4, #12]
  40804e:	bd10      	pop	{r4, pc}
  408050:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  408054:	81a3      	strh	r3, [r4, #12]
  408056:	bd10      	pop	{r4, pc}

00408058 <__sclose>:
  408058:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40805c:	f000 b920 	b.w	4082a0 <_close_r>

00408060 <__ssprint_r>:
  408060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  408064:	6893      	ldr	r3, [r2, #8]
  408066:	b083      	sub	sp, #12
  408068:	4691      	mov	r9, r2
  40806a:	f8d2 8000 	ldr.w	r8, [r2]
  40806e:	9001      	str	r0, [sp, #4]
  408070:	2b00      	cmp	r3, #0
  408072:	d073      	beq.n	40815c <__ssprint_r+0xfc>
  408074:	f04f 0b00 	mov.w	fp, #0
  408078:	460d      	mov	r5, r1
  40807a:	6808      	ldr	r0, [r1, #0]
  40807c:	688b      	ldr	r3, [r1, #8]
  40807e:	465c      	mov	r4, fp
  408080:	2c00      	cmp	r4, #0
  408082:	d046      	beq.n	408112 <__ssprint_r+0xb2>
  408084:	429c      	cmp	r4, r3
  408086:	461e      	mov	r6, r3
  408088:	469a      	mov	sl, r3
  40808a:	d349      	bcc.n	408120 <__ssprint_r+0xc0>
  40808c:	f8b5 e00c 	ldrh.w	lr, [r5, #12]
  408090:	f41e 6f90 	tst.w	lr, #1152	; 0x480
  408094:	d02d      	beq.n	4080f2 <__ssprint_r+0x92>
  408096:	696b      	ldr	r3, [r5, #20]
  408098:	1c62      	adds	r2, r4, #1
  40809a:	6929      	ldr	r1, [r5, #16]
  40809c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  4080a0:	1a46      	subs	r6, r0, r1
  4080a2:	4610      	mov	r0, r2
  4080a4:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
  4080a8:	4430      	add	r0, r6
  4080aa:	105f      	asrs	r7, r3, #1
  4080ac:	4287      	cmp	r7, r0
  4080ae:	463a      	mov	r2, r7
  4080b0:	d201      	bcs.n	4080b6 <__ssprint_r+0x56>
  4080b2:	4607      	mov	r7, r0
  4080b4:	4602      	mov	r2, r0
  4080b6:	f41e 6f80 	tst.w	lr, #1024	; 0x400
  4080ba:	d034      	beq.n	408126 <__ssprint_r+0xc6>
  4080bc:	4611      	mov	r1, r2
  4080be:	9801      	ldr	r0, [sp, #4]
  4080c0:	f7fe fe5e 	bl	406d80 <_malloc_r>
  4080c4:	4682      	mov	sl, r0
  4080c6:	2800      	cmp	r0, #0
  4080c8:	d04e      	beq.n	408168 <__ssprint_r+0x108>
  4080ca:	4632      	mov	r2, r6
  4080cc:	6929      	ldr	r1, [r5, #16]
  4080ce:	f7ff f94b 	bl	407368 <memcpy>
  4080d2:	89aa      	ldrh	r2, [r5, #12]
  4080d4:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
  4080d8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  4080dc:	81aa      	strh	r2, [r5, #12]
  4080de:	eb0a 0006 	add.w	r0, sl, r6
  4080e2:	1bba      	subs	r2, r7, r6
  4080e4:	f8c5 a010 	str.w	sl, [r5, #16]
  4080e8:	4626      	mov	r6, r4
  4080ea:	46a2      	mov	sl, r4
  4080ec:	6028      	str	r0, [r5, #0]
  4080ee:	60aa      	str	r2, [r5, #8]
  4080f0:	616f      	str	r7, [r5, #20]
  4080f2:	4652      	mov	r2, sl
  4080f4:	4659      	mov	r1, fp
  4080f6:	f7ff f9d1 	bl	40749c <memmove>
  4080fa:	f8d9 2008 	ldr.w	r2, [r9, #8]
  4080fe:	68ab      	ldr	r3, [r5, #8]
  408100:	6828      	ldr	r0, [r5, #0]
  408102:	1b14      	subs	r4, r2, r4
  408104:	1b9b      	subs	r3, r3, r6
  408106:	4450      	add	r0, sl
  408108:	60ab      	str	r3, [r5, #8]
  40810a:	6028      	str	r0, [r5, #0]
  40810c:	f8c9 4008 	str.w	r4, [r9, #8]
  408110:	b324      	cbz	r4, 40815c <__ssprint_r+0xfc>
  408112:	f8d8 b000 	ldr.w	fp, [r8]
  408116:	f108 0808 	add.w	r8, r8, #8
  40811a:	f858 4c04 	ldr.w	r4, [r8, #-4]
  40811e:	e7af      	b.n	408080 <__ssprint_r+0x20>
  408120:	4626      	mov	r6, r4
  408122:	46a2      	mov	sl, r4
  408124:	e7e5      	b.n	4080f2 <__ssprint_r+0x92>
  408126:	9801      	ldr	r0, [sp, #4]
  408128:	f7ff fd2a 	bl	407b80 <_realloc_r>
  40812c:	4682      	mov	sl, r0
  40812e:	2800      	cmp	r0, #0
  408130:	d1d5      	bne.n	4080de <__ssprint_r+0x7e>
  408132:	9c01      	ldr	r4, [sp, #4]
  408134:	6929      	ldr	r1, [r5, #16]
  408136:	4620      	mov	r0, r4
  408138:	f7fe fb12 	bl	406760 <_free_r>
  40813c:	230c      	movs	r3, #12
  40813e:	6023      	str	r3, [r4, #0]
  408140:	89ab      	ldrh	r3, [r5, #12]
  408142:	2200      	movs	r2, #0
  408144:	f04f 30ff 	mov.w	r0, #4294967295
  408148:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40814c:	81ab      	strh	r3, [r5, #12]
  40814e:	f8c9 2008 	str.w	r2, [r9, #8]
  408152:	f8c9 2004 	str.w	r2, [r9, #4]
  408156:	b003      	add	sp, #12
  408158:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40815c:	2000      	movs	r0, #0
  40815e:	f8c9 0004 	str.w	r0, [r9, #4]
  408162:	b003      	add	sp, #12
  408164:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408168:	230c      	movs	r3, #12
  40816a:	9a01      	ldr	r2, [sp, #4]
  40816c:	6013      	str	r3, [r2, #0]
  40816e:	e7e7      	b.n	408140 <__ssprint_r+0xe0>

00408170 <_write_r>:
  408170:	b570      	push	{r4, r5, r6, lr}
  408172:	4c08      	ldr	r4, [pc, #32]	; (408194 <_write_r+0x24>)
  408174:	2500      	movs	r5, #0
  408176:	4606      	mov	r6, r0
  408178:	4608      	mov	r0, r1
  40817a:	4611      	mov	r1, r2
  40817c:	461a      	mov	r2, r3
  40817e:	6025      	str	r5, [r4, #0]
  408180:	f7f8 f9f0 	bl	400564 <_write>
  408184:	1c43      	adds	r3, r0, #1
  408186:	d000      	beq.n	40818a <_write_r+0x1a>
  408188:	bd70      	pop	{r4, r5, r6, pc}
  40818a:	6823      	ldr	r3, [r4, #0]
  40818c:	2b00      	cmp	r3, #0
  40818e:	d0fb      	beq.n	408188 <_write_r+0x18>
  408190:	6033      	str	r3, [r6, #0]
  408192:	bd70      	pop	{r4, r5, r6, pc}
  408194:	20401278 	.word	0x20401278

00408198 <__register_exitproc>:
  408198:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40819c:	4c26      	ldr	r4, [pc, #152]	; (408238 <__register_exitproc+0xa0>)
  40819e:	4606      	mov	r6, r0
  4081a0:	4688      	mov	r8, r1
  4081a2:	4691      	mov	r9, r2
  4081a4:	6825      	ldr	r5, [r4, #0]
  4081a6:	469a      	mov	sl, r3
  4081a8:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
  4081ac:	2c00      	cmp	r4, #0
  4081ae:	d03a      	beq.n	408226 <__register_exitproc+0x8e>
  4081b0:	6860      	ldr	r0, [r4, #4]
  4081b2:	281f      	cmp	r0, #31
  4081b4:	dc19      	bgt.n	4081ea <__register_exitproc+0x52>
  4081b6:	1c41      	adds	r1, r0, #1
  4081b8:	b186      	cbz	r6, 4081dc <__register_exitproc+0x44>
  4081ba:	eb04 0580 	add.w	r5, r4, r0, lsl #2
  4081be:	2201      	movs	r2, #1
  4081c0:	2e02      	cmp	r6, #2
  4081c2:	f8c5 9088 	str.w	r9, [r5, #136]	; 0x88
  4081c6:	fa02 f200 	lsl.w	r2, r2, r0
  4081ca:	f8d4 3188 	ldr.w	r3, [r4, #392]	; 0x188
  4081ce:	ea43 0302 	orr.w	r3, r3, r2
  4081d2:	f8c4 3188 	str.w	r3, [r4, #392]	; 0x188
  4081d6:	f8c5 a108 	str.w	sl, [r5, #264]	; 0x108
  4081da:	d01e      	beq.n	40821a <__register_exitproc+0x82>
  4081dc:	1c83      	adds	r3, r0, #2
  4081de:	6061      	str	r1, [r4, #4]
  4081e0:	2000      	movs	r0, #0
  4081e2:	f844 8023 	str.w	r8, [r4, r3, lsl #2]
  4081e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4081ea:	4b14      	ldr	r3, [pc, #80]	; (40823c <__register_exitproc+0xa4>)
  4081ec:	b303      	cbz	r3, 408230 <__register_exitproc+0x98>
  4081ee:	f44f 70c8 	mov.w	r0, #400	; 0x190
  4081f2:	f7fe fdbd 	bl	406d70 <malloc>
  4081f6:	4604      	mov	r4, r0
  4081f8:	b1d0      	cbz	r0, 408230 <__register_exitproc+0x98>
  4081fa:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
  4081fe:	2700      	movs	r7, #0
  408200:	2101      	movs	r1, #1
  408202:	6003      	str	r3, [r0, #0]
  408204:	4638      	mov	r0, r7
  408206:	6067      	str	r7, [r4, #4]
  408208:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  40820c:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
  408210:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
  408214:	2e00      	cmp	r6, #0
  408216:	d0e1      	beq.n	4081dc <__register_exitproc+0x44>
  408218:	e7cf      	b.n	4081ba <__register_exitproc+0x22>
  40821a:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
  40821e:	431a      	orrs	r2, r3
  408220:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
  408224:	e7da      	b.n	4081dc <__register_exitproc+0x44>
  408226:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
  40822a:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  40822e:	e7bf      	b.n	4081b0 <__register_exitproc+0x18>
  408230:	f04f 30ff 	mov.w	r0, #4294967295
  408234:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  408238:	00409478 	.word	0x00409478
  40823c:	00406d71 	.word	0x00406d71

00408240 <_calloc_r>:
  408240:	b510      	push	{r4, lr}
  408242:	fb02 f101 	mul.w	r1, r2, r1
  408246:	f7fe fd9b 	bl	406d80 <_malloc_r>
  40824a:	4604      	mov	r4, r0
  40824c:	b168      	cbz	r0, 40826a <_calloc_r+0x2a>
  40824e:	f850 2c04 	ldr.w	r2, [r0, #-4]
  408252:	f022 0203 	bic.w	r2, r2, #3
  408256:	3a04      	subs	r2, #4
  408258:	2a24      	cmp	r2, #36	; 0x24
  40825a:	d814      	bhi.n	408286 <_calloc_r+0x46>
  40825c:	2a13      	cmp	r2, #19
  40825e:	d806      	bhi.n	40826e <_calloc_r+0x2e>
  408260:	4603      	mov	r3, r0
  408262:	2200      	movs	r2, #0
  408264:	601a      	str	r2, [r3, #0]
  408266:	605a      	str	r2, [r3, #4]
  408268:	609a      	str	r2, [r3, #8]
  40826a:	4620      	mov	r0, r4
  40826c:	bd10      	pop	{r4, pc}
  40826e:	2100      	movs	r1, #0
  408270:	2a1b      	cmp	r2, #27
  408272:	6001      	str	r1, [r0, #0]
  408274:	6041      	str	r1, [r0, #4]
  408276:	d90b      	bls.n	408290 <_calloc_r+0x50>
  408278:	2a24      	cmp	r2, #36	; 0x24
  40827a:	6081      	str	r1, [r0, #8]
  40827c:	60c1      	str	r1, [r0, #12]
  40827e:	d00a      	beq.n	408296 <_calloc_r+0x56>
  408280:	f100 0310 	add.w	r3, r0, #16
  408284:	e7ed      	b.n	408262 <_calloc_r+0x22>
  408286:	2100      	movs	r1, #0
  408288:	f7fb fbfa 	bl	403a80 <memset>
  40828c:	4620      	mov	r0, r4
  40828e:	bd10      	pop	{r4, pc}
  408290:	f100 0308 	add.w	r3, r0, #8
  408294:	e7e5      	b.n	408262 <_calloc_r+0x22>
  408296:	6101      	str	r1, [r0, #16]
  408298:	f100 0318 	add.w	r3, r0, #24
  40829c:	6141      	str	r1, [r0, #20]
  40829e:	e7e0      	b.n	408262 <_calloc_r+0x22>

004082a0 <_close_r>:
  4082a0:	b538      	push	{r3, r4, r5, lr}
  4082a2:	2300      	movs	r3, #0
  4082a4:	4c06      	ldr	r4, [pc, #24]	; (4082c0 <_close_r+0x20>)
  4082a6:	4605      	mov	r5, r0
  4082a8:	4608      	mov	r0, r1
  4082aa:	6023      	str	r3, [r4, #0]
  4082ac:	f7f9 fe8c 	bl	401fc8 <_close>
  4082b0:	1c43      	adds	r3, r0, #1
  4082b2:	d000      	beq.n	4082b6 <_close_r+0x16>
  4082b4:	bd38      	pop	{r3, r4, r5, pc}
  4082b6:	6823      	ldr	r3, [r4, #0]
  4082b8:	2b00      	cmp	r3, #0
  4082ba:	d0fb      	beq.n	4082b4 <_close_r+0x14>
  4082bc:	602b      	str	r3, [r5, #0]
  4082be:	bd38      	pop	{r3, r4, r5, pc}
  4082c0:	20401278 	.word	0x20401278

004082c4 <_fclose_r>:
  4082c4:	2900      	cmp	r1, #0
  4082c6:	d03d      	beq.n	408344 <_fclose_r+0x80>
  4082c8:	b570      	push	{r4, r5, r6, lr}
  4082ca:	4605      	mov	r5, r0
  4082cc:	460c      	mov	r4, r1
  4082ce:	b108      	cbz	r0, 4082d4 <_fclose_r+0x10>
  4082d0:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4082d2:	b37b      	cbz	r3, 408334 <_fclose_r+0x70>
  4082d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4082d8:	b90b      	cbnz	r3, 4082de <_fclose_r+0x1a>
  4082da:	2000      	movs	r0, #0
  4082dc:	bd70      	pop	{r4, r5, r6, pc}
  4082de:	4628      	mov	r0, r5
  4082e0:	4621      	mov	r1, r4
  4082e2:	f7fe f891 	bl	406408 <__sflush_r>
  4082e6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  4082e8:	4606      	mov	r6, r0
  4082ea:	b133      	cbz	r3, 4082fa <_fclose_r+0x36>
  4082ec:	4628      	mov	r0, r5
  4082ee:	69e1      	ldr	r1, [r4, #28]
  4082f0:	4798      	blx	r3
  4082f2:	2800      	cmp	r0, #0
  4082f4:	bfb8      	it	lt
  4082f6:	f04f 36ff 	movlt.w	r6, #4294967295
  4082fa:	89a3      	ldrh	r3, [r4, #12]
  4082fc:	061b      	lsls	r3, r3, #24
  4082fe:	d41c      	bmi.n	40833a <_fclose_r+0x76>
  408300:	6b21      	ldr	r1, [r4, #48]	; 0x30
  408302:	b141      	cbz	r1, 408316 <_fclose_r+0x52>
  408304:	f104 0340 	add.w	r3, r4, #64	; 0x40
  408308:	4299      	cmp	r1, r3
  40830a:	d002      	beq.n	408312 <_fclose_r+0x4e>
  40830c:	4628      	mov	r0, r5
  40830e:	f7fe fa27 	bl	406760 <_free_r>
  408312:	2300      	movs	r3, #0
  408314:	6323      	str	r3, [r4, #48]	; 0x30
  408316:	6c61      	ldr	r1, [r4, #68]	; 0x44
  408318:	b121      	cbz	r1, 408324 <_fclose_r+0x60>
  40831a:	4628      	mov	r0, r5
  40831c:	f7fe fa20 	bl	406760 <_free_r>
  408320:	2300      	movs	r3, #0
  408322:	6463      	str	r3, [r4, #68]	; 0x44
  408324:	f7fe f9b4 	bl	406690 <__sfp_lock_acquire>
  408328:	2300      	movs	r3, #0
  40832a:	81a3      	strh	r3, [r4, #12]
  40832c:	f7fe f9b2 	bl	406694 <__sfp_lock_release>
  408330:	4630      	mov	r0, r6
  408332:	bd70      	pop	{r4, r5, r6, pc}
  408334:	f7fe f9a6 	bl	406684 <__sinit>
  408338:	e7cc      	b.n	4082d4 <_fclose_r+0x10>
  40833a:	4628      	mov	r0, r5
  40833c:	6921      	ldr	r1, [r4, #16]
  40833e:	f7fe fa0f 	bl	406760 <_free_r>
  408342:	e7dd      	b.n	408300 <_fclose_r+0x3c>
  408344:	2000      	movs	r0, #0
  408346:	4770      	bx	lr

00408348 <_fstat_r>:
  408348:	b538      	push	{r3, r4, r5, lr}
  40834a:	2300      	movs	r3, #0
  40834c:	4c07      	ldr	r4, [pc, #28]	; (40836c <_fstat_r+0x24>)
  40834e:	4605      	mov	r5, r0
  408350:	4608      	mov	r0, r1
  408352:	4611      	mov	r1, r2
  408354:	6023      	str	r3, [r4, #0]
  408356:	f7f9 fe43 	bl	401fe0 <_fstat>
  40835a:	1c43      	adds	r3, r0, #1
  40835c:	d000      	beq.n	408360 <_fstat_r+0x18>
  40835e:	bd38      	pop	{r3, r4, r5, pc}
  408360:	6823      	ldr	r3, [r4, #0]
  408362:	2b00      	cmp	r3, #0
  408364:	d0fb      	beq.n	40835e <_fstat_r+0x16>
  408366:	602b      	str	r3, [r5, #0]
  408368:	bd38      	pop	{r3, r4, r5, pc}
  40836a:	bf00      	nop
  40836c:	20401278 	.word	0x20401278

00408370 <_isatty_r>:
  408370:	b538      	push	{r3, r4, r5, lr}
  408372:	2300      	movs	r3, #0
  408374:	4c06      	ldr	r4, [pc, #24]	; (408390 <_isatty_r+0x20>)
  408376:	4605      	mov	r5, r0
  408378:	4608      	mov	r0, r1
  40837a:	6023      	str	r3, [r4, #0]
  40837c:	f7f9 fe40 	bl	402000 <_isatty>
  408380:	1c43      	adds	r3, r0, #1
  408382:	d000      	beq.n	408386 <_isatty_r+0x16>
  408384:	bd38      	pop	{r3, r4, r5, pc}
  408386:	6823      	ldr	r3, [r4, #0]
  408388:	2b00      	cmp	r3, #0
  40838a:	d0fb      	beq.n	408384 <_isatty_r+0x14>
  40838c:	602b      	str	r3, [r5, #0]
  40838e:	bd38      	pop	{r3, r4, r5, pc}
  408390:	20401278 	.word	0x20401278

00408394 <_lseek_r>:
  408394:	b570      	push	{r4, r5, r6, lr}
  408396:	4c08      	ldr	r4, [pc, #32]	; (4083b8 <_lseek_r+0x24>)
  408398:	2500      	movs	r5, #0
  40839a:	4606      	mov	r6, r0
  40839c:	4608      	mov	r0, r1
  40839e:	4611      	mov	r1, r2
  4083a0:	461a      	mov	r2, r3
  4083a2:	6025      	str	r5, [r4, #0]
  4083a4:	f7f9 fe38 	bl	402018 <_lseek>
  4083a8:	1c43      	adds	r3, r0, #1
  4083aa:	d000      	beq.n	4083ae <_lseek_r+0x1a>
  4083ac:	bd70      	pop	{r4, r5, r6, pc}
  4083ae:	6823      	ldr	r3, [r4, #0]
  4083b0:	2b00      	cmp	r3, #0
  4083b2:	d0fb      	beq.n	4083ac <_lseek_r+0x18>
  4083b4:	6033      	str	r3, [r6, #0]
  4083b6:	bd70      	pop	{r4, r5, r6, pc}
  4083b8:	20401278 	.word	0x20401278

004083bc <_read_r>:
  4083bc:	b570      	push	{r4, r5, r6, lr}
  4083be:	4c08      	ldr	r4, [pc, #32]	; (4083e0 <_read_r+0x24>)
  4083c0:	2500      	movs	r5, #0
  4083c2:	4606      	mov	r6, r0
  4083c4:	4608      	mov	r0, r1
  4083c6:	4611      	mov	r1, r2
  4083c8:	461a      	mov	r2, r3
  4083ca:	6025      	str	r5, [r4, #0]
  4083cc:	f7f8 f89e 	bl	40050c <_read>
  4083d0:	1c43      	adds	r3, r0, #1
  4083d2:	d000      	beq.n	4083d6 <_read_r+0x1a>
  4083d4:	bd70      	pop	{r4, r5, r6, pc}
  4083d6:	6823      	ldr	r3, [r4, #0]
  4083d8:	2b00      	cmp	r3, #0
  4083da:	d0fb      	beq.n	4083d4 <_read_r+0x18>
  4083dc:	6033      	str	r3, [r6, #0]
  4083de:	bd70      	pop	{r4, r5, r6, pc}
  4083e0:	20401278 	.word	0x20401278

004083e4 <__aeabi_drsub>:
  4083e4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  4083e8:	e002      	b.n	4083f0 <__adddf3>
  4083ea:	bf00      	nop

004083ec <__aeabi_dsub>:
  4083ec:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

004083f0 <__adddf3>:
  4083f0:	b530      	push	{r4, r5, lr}
  4083f2:	ea4f 0441 	mov.w	r4, r1, lsl #1
  4083f6:	ea4f 0543 	mov.w	r5, r3, lsl #1
  4083fa:	ea94 0f05 	teq	r4, r5
  4083fe:	bf08      	it	eq
  408400:	ea90 0f02 	teqeq	r0, r2
  408404:	bf1f      	itttt	ne
  408406:	ea54 0c00 	orrsne.w	ip, r4, r0
  40840a:	ea55 0c02 	orrsne.w	ip, r5, r2
  40840e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  408412:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  408416:	f000 80e2 	beq.w	4085de <__adddf3+0x1ee>
  40841a:	ea4f 5454 	mov.w	r4, r4, lsr #21
  40841e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  408422:	bfb8      	it	lt
  408424:	426d      	neglt	r5, r5
  408426:	dd0c      	ble.n	408442 <__adddf3+0x52>
  408428:	442c      	add	r4, r5
  40842a:	ea80 0202 	eor.w	r2, r0, r2
  40842e:	ea81 0303 	eor.w	r3, r1, r3
  408432:	ea82 0000 	eor.w	r0, r2, r0
  408436:	ea83 0101 	eor.w	r1, r3, r1
  40843a:	ea80 0202 	eor.w	r2, r0, r2
  40843e:	ea81 0303 	eor.w	r3, r1, r3
  408442:	2d36      	cmp	r5, #54	; 0x36
  408444:	bf88      	it	hi
  408446:	bd30      	pophi	{r4, r5, pc}
  408448:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  40844c:	ea4f 3101 	mov.w	r1, r1, lsl #12
  408450:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  408454:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  408458:	d002      	beq.n	408460 <__adddf3+0x70>
  40845a:	4240      	negs	r0, r0
  40845c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  408460:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  408464:	ea4f 3303 	mov.w	r3, r3, lsl #12
  408468:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  40846c:	d002      	beq.n	408474 <__adddf3+0x84>
  40846e:	4252      	negs	r2, r2
  408470:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  408474:	ea94 0f05 	teq	r4, r5
  408478:	f000 80a7 	beq.w	4085ca <__adddf3+0x1da>
  40847c:	f1a4 0401 	sub.w	r4, r4, #1
  408480:	f1d5 0e20 	rsbs	lr, r5, #32
  408484:	db0d      	blt.n	4084a2 <__adddf3+0xb2>
  408486:	fa02 fc0e 	lsl.w	ip, r2, lr
  40848a:	fa22 f205 	lsr.w	r2, r2, r5
  40848e:	1880      	adds	r0, r0, r2
  408490:	f141 0100 	adc.w	r1, r1, #0
  408494:	fa03 f20e 	lsl.w	r2, r3, lr
  408498:	1880      	adds	r0, r0, r2
  40849a:	fa43 f305 	asr.w	r3, r3, r5
  40849e:	4159      	adcs	r1, r3
  4084a0:	e00e      	b.n	4084c0 <__adddf3+0xd0>
  4084a2:	f1a5 0520 	sub.w	r5, r5, #32
  4084a6:	f10e 0e20 	add.w	lr, lr, #32
  4084aa:	2a01      	cmp	r2, #1
  4084ac:	fa03 fc0e 	lsl.w	ip, r3, lr
  4084b0:	bf28      	it	cs
  4084b2:	f04c 0c02 	orrcs.w	ip, ip, #2
  4084b6:	fa43 f305 	asr.w	r3, r3, r5
  4084ba:	18c0      	adds	r0, r0, r3
  4084bc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  4084c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  4084c4:	d507      	bpl.n	4084d6 <__adddf3+0xe6>
  4084c6:	f04f 0e00 	mov.w	lr, #0
  4084ca:	f1dc 0c00 	rsbs	ip, ip, #0
  4084ce:	eb7e 0000 	sbcs.w	r0, lr, r0
  4084d2:	eb6e 0101 	sbc.w	r1, lr, r1
  4084d6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  4084da:	d31b      	bcc.n	408514 <__adddf3+0x124>
  4084dc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  4084e0:	d30c      	bcc.n	4084fc <__adddf3+0x10c>
  4084e2:	0849      	lsrs	r1, r1, #1
  4084e4:	ea5f 0030 	movs.w	r0, r0, rrx
  4084e8:	ea4f 0c3c 	mov.w	ip, ip, rrx
  4084ec:	f104 0401 	add.w	r4, r4, #1
  4084f0:	ea4f 5244 	mov.w	r2, r4, lsl #21
  4084f4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  4084f8:	f080 809a 	bcs.w	408630 <__adddf3+0x240>
  4084fc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  408500:	bf08      	it	eq
  408502:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  408506:	f150 0000 	adcs.w	r0, r0, #0
  40850a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40850e:	ea41 0105 	orr.w	r1, r1, r5
  408512:	bd30      	pop	{r4, r5, pc}
  408514:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  408518:	4140      	adcs	r0, r0
  40851a:	eb41 0101 	adc.w	r1, r1, r1
  40851e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  408522:	f1a4 0401 	sub.w	r4, r4, #1
  408526:	d1e9      	bne.n	4084fc <__adddf3+0x10c>
  408528:	f091 0f00 	teq	r1, #0
  40852c:	bf04      	itt	eq
  40852e:	4601      	moveq	r1, r0
  408530:	2000      	moveq	r0, #0
  408532:	fab1 f381 	clz	r3, r1
  408536:	bf08      	it	eq
  408538:	3320      	addeq	r3, #32
  40853a:	f1a3 030b 	sub.w	r3, r3, #11
  40853e:	f1b3 0220 	subs.w	r2, r3, #32
  408542:	da0c      	bge.n	40855e <__adddf3+0x16e>
  408544:	320c      	adds	r2, #12
  408546:	dd08      	ble.n	40855a <__adddf3+0x16a>
  408548:	f102 0c14 	add.w	ip, r2, #20
  40854c:	f1c2 020c 	rsb	r2, r2, #12
  408550:	fa01 f00c 	lsl.w	r0, r1, ip
  408554:	fa21 f102 	lsr.w	r1, r1, r2
  408558:	e00c      	b.n	408574 <__adddf3+0x184>
  40855a:	f102 0214 	add.w	r2, r2, #20
  40855e:	bfd8      	it	le
  408560:	f1c2 0c20 	rsble	ip, r2, #32
  408564:	fa01 f102 	lsl.w	r1, r1, r2
  408568:	fa20 fc0c 	lsr.w	ip, r0, ip
  40856c:	bfdc      	itt	le
  40856e:	ea41 010c 	orrle.w	r1, r1, ip
  408572:	4090      	lslle	r0, r2
  408574:	1ae4      	subs	r4, r4, r3
  408576:	bfa2      	ittt	ge
  408578:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  40857c:	4329      	orrge	r1, r5
  40857e:	bd30      	popge	{r4, r5, pc}
  408580:	ea6f 0404 	mvn.w	r4, r4
  408584:	3c1f      	subs	r4, #31
  408586:	da1c      	bge.n	4085c2 <__adddf3+0x1d2>
  408588:	340c      	adds	r4, #12
  40858a:	dc0e      	bgt.n	4085aa <__adddf3+0x1ba>
  40858c:	f104 0414 	add.w	r4, r4, #20
  408590:	f1c4 0220 	rsb	r2, r4, #32
  408594:	fa20 f004 	lsr.w	r0, r0, r4
  408598:	fa01 f302 	lsl.w	r3, r1, r2
  40859c:	ea40 0003 	orr.w	r0, r0, r3
  4085a0:	fa21 f304 	lsr.w	r3, r1, r4
  4085a4:	ea45 0103 	orr.w	r1, r5, r3
  4085a8:	bd30      	pop	{r4, r5, pc}
  4085aa:	f1c4 040c 	rsb	r4, r4, #12
  4085ae:	f1c4 0220 	rsb	r2, r4, #32
  4085b2:	fa20 f002 	lsr.w	r0, r0, r2
  4085b6:	fa01 f304 	lsl.w	r3, r1, r4
  4085ba:	ea40 0003 	orr.w	r0, r0, r3
  4085be:	4629      	mov	r1, r5
  4085c0:	bd30      	pop	{r4, r5, pc}
  4085c2:	fa21 f004 	lsr.w	r0, r1, r4
  4085c6:	4629      	mov	r1, r5
  4085c8:	bd30      	pop	{r4, r5, pc}
  4085ca:	f094 0f00 	teq	r4, #0
  4085ce:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  4085d2:	bf06      	itte	eq
  4085d4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  4085d8:	3401      	addeq	r4, #1
  4085da:	3d01      	subne	r5, #1
  4085dc:	e74e      	b.n	40847c <__adddf3+0x8c>
  4085de:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  4085e2:	bf18      	it	ne
  4085e4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  4085e8:	d029      	beq.n	40863e <__adddf3+0x24e>
  4085ea:	ea94 0f05 	teq	r4, r5
  4085ee:	bf08      	it	eq
  4085f0:	ea90 0f02 	teqeq	r0, r2
  4085f4:	d005      	beq.n	408602 <__adddf3+0x212>
  4085f6:	ea54 0c00 	orrs.w	ip, r4, r0
  4085fa:	bf04      	itt	eq
  4085fc:	4619      	moveq	r1, r3
  4085fe:	4610      	moveq	r0, r2
  408600:	bd30      	pop	{r4, r5, pc}
  408602:	ea91 0f03 	teq	r1, r3
  408606:	bf1e      	ittt	ne
  408608:	2100      	movne	r1, #0
  40860a:	2000      	movne	r0, #0
  40860c:	bd30      	popne	{r4, r5, pc}
  40860e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  408612:	d105      	bne.n	408620 <__adddf3+0x230>
  408614:	0040      	lsls	r0, r0, #1
  408616:	4149      	adcs	r1, r1
  408618:	bf28      	it	cs
  40861a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  40861e:	bd30      	pop	{r4, r5, pc}
  408620:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  408624:	bf3c      	itt	cc
  408626:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  40862a:	bd30      	popcc	{r4, r5, pc}
  40862c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  408630:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  408634:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  408638:	f04f 0000 	mov.w	r0, #0
  40863c:	bd30      	pop	{r4, r5, pc}
  40863e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  408642:	bf1a      	itte	ne
  408644:	4619      	movne	r1, r3
  408646:	4610      	movne	r0, r2
  408648:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  40864c:	bf1c      	itt	ne
  40864e:	460b      	movne	r3, r1
  408650:	4602      	movne	r2, r0
  408652:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  408656:	bf06      	itte	eq
  408658:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  40865c:	ea91 0f03 	teqeq	r1, r3
  408660:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  408664:	bd30      	pop	{r4, r5, pc}
  408666:	bf00      	nop

00408668 <__aeabi_ui2d>:
  408668:	f090 0f00 	teq	r0, #0
  40866c:	bf04      	itt	eq
  40866e:	2100      	moveq	r1, #0
  408670:	4770      	bxeq	lr
  408672:	b530      	push	{r4, r5, lr}
  408674:	f44f 6480 	mov.w	r4, #1024	; 0x400
  408678:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40867c:	f04f 0500 	mov.w	r5, #0
  408680:	f04f 0100 	mov.w	r1, #0
  408684:	e750      	b.n	408528 <__adddf3+0x138>
  408686:	bf00      	nop

00408688 <__aeabi_i2d>:
  408688:	f090 0f00 	teq	r0, #0
  40868c:	bf04      	itt	eq
  40868e:	2100      	moveq	r1, #0
  408690:	4770      	bxeq	lr
  408692:	b530      	push	{r4, r5, lr}
  408694:	f44f 6480 	mov.w	r4, #1024	; 0x400
  408698:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40869c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  4086a0:	bf48      	it	mi
  4086a2:	4240      	negmi	r0, r0
  4086a4:	f04f 0100 	mov.w	r1, #0
  4086a8:	e73e      	b.n	408528 <__adddf3+0x138>
  4086aa:	bf00      	nop

004086ac <__aeabi_f2d>:
  4086ac:	0042      	lsls	r2, r0, #1
  4086ae:	ea4f 01e2 	mov.w	r1, r2, asr #3
  4086b2:	ea4f 0131 	mov.w	r1, r1, rrx
  4086b6:	ea4f 7002 	mov.w	r0, r2, lsl #28
  4086ba:	bf1f      	itttt	ne
  4086bc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  4086c0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  4086c4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  4086c8:	4770      	bxne	lr
  4086ca:	f092 0f00 	teq	r2, #0
  4086ce:	bf14      	ite	ne
  4086d0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  4086d4:	4770      	bxeq	lr
  4086d6:	b530      	push	{r4, r5, lr}
  4086d8:	f44f 7460 	mov.w	r4, #896	; 0x380
  4086dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  4086e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  4086e4:	e720      	b.n	408528 <__adddf3+0x138>
  4086e6:	bf00      	nop

004086e8 <__aeabi_ul2d>:
  4086e8:	ea50 0201 	orrs.w	r2, r0, r1
  4086ec:	bf08      	it	eq
  4086ee:	4770      	bxeq	lr
  4086f0:	b530      	push	{r4, r5, lr}
  4086f2:	f04f 0500 	mov.w	r5, #0
  4086f6:	e00a      	b.n	40870e <__aeabi_l2d+0x16>

004086f8 <__aeabi_l2d>:
  4086f8:	ea50 0201 	orrs.w	r2, r0, r1
  4086fc:	bf08      	it	eq
  4086fe:	4770      	bxeq	lr
  408700:	b530      	push	{r4, r5, lr}
  408702:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  408706:	d502      	bpl.n	40870e <__aeabi_l2d+0x16>
  408708:	4240      	negs	r0, r0
  40870a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  40870e:	f44f 6480 	mov.w	r4, #1024	; 0x400
  408712:	f104 0432 	add.w	r4, r4, #50	; 0x32
  408716:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  40871a:	f43f aedc 	beq.w	4084d6 <__adddf3+0xe6>
  40871e:	f04f 0203 	mov.w	r2, #3
  408722:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  408726:	bf18      	it	ne
  408728:	3203      	addne	r2, #3
  40872a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  40872e:	bf18      	it	ne
  408730:	3203      	addne	r2, #3
  408732:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  408736:	f1c2 0320 	rsb	r3, r2, #32
  40873a:	fa00 fc03 	lsl.w	ip, r0, r3
  40873e:	fa20 f002 	lsr.w	r0, r0, r2
  408742:	fa01 fe03 	lsl.w	lr, r1, r3
  408746:	ea40 000e 	orr.w	r0, r0, lr
  40874a:	fa21 f102 	lsr.w	r1, r1, r2
  40874e:	4414      	add	r4, r2
  408750:	e6c1      	b.n	4084d6 <__adddf3+0xe6>
  408752:	bf00      	nop

00408754 <__aeabi_dmul>:
  408754:	b570      	push	{r4, r5, r6, lr}
  408756:	f04f 0cff 	mov.w	ip, #255	; 0xff
  40875a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  40875e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  408762:	bf1d      	ittte	ne
  408764:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  408768:	ea94 0f0c 	teqne	r4, ip
  40876c:	ea95 0f0c 	teqne	r5, ip
  408770:	f000 f8de 	bleq	408930 <__aeabi_dmul+0x1dc>
  408774:	442c      	add	r4, r5
  408776:	ea81 0603 	eor.w	r6, r1, r3
  40877a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  40877e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  408782:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  408786:	bf18      	it	ne
  408788:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  40878c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  408790:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  408794:	d038      	beq.n	408808 <__aeabi_dmul+0xb4>
  408796:	fba0 ce02 	umull	ip, lr, r0, r2
  40879a:	f04f 0500 	mov.w	r5, #0
  40879e:	fbe1 e502 	umlal	lr, r5, r1, r2
  4087a2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  4087a6:	fbe0 e503 	umlal	lr, r5, r0, r3
  4087aa:	f04f 0600 	mov.w	r6, #0
  4087ae:	fbe1 5603 	umlal	r5, r6, r1, r3
  4087b2:	f09c 0f00 	teq	ip, #0
  4087b6:	bf18      	it	ne
  4087b8:	f04e 0e01 	orrne.w	lr, lr, #1
  4087bc:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  4087c0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  4087c4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  4087c8:	d204      	bcs.n	4087d4 <__aeabi_dmul+0x80>
  4087ca:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  4087ce:	416d      	adcs	r5, r5
  4087d0:	eb46 0606 	adc.w	r6, r6, r6
  4087d4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  4087d8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  4087dc:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  4087e0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  4087e4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  4087e8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  4087ec:	bf88      	it	hi
  4087ee:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  4087f2:	d81e      	bhi.n	408832 <__aeabi_dmul+0xde>
  4087f4:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  4087f8:	bf08      	it	eq
  4087fa:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  4087fe:	f150 0000 	adcs.w	r0, r0, #0
  408802:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  408806:	bd70      	pop	{r4, r5, r6, pc}
  408808:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  40880c:	ea46 0101 	orr.w	r1, r6, r1
  408810:	ea40 0002 	orr.w	r0, r0, r2
  408814:	ea81 0103 	eor.w	r1, r1, r3
  408818:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  40881c:	bfc2      	ittt	gt
  40881e:	ebd4 050c 	rsbsgt	r5, r4, ip
  408822:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  408826:	bd70      	popgt	{r4, r5, r6, pc}
  408828:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  40882c:	f04f 0e00 	mov.w	lr, #0
  408830:	3c01      	subs	r4, #1
  408832:	f300 80ab 	bgt.w	40898c <__aeabi_dmul+0x238>
  408836:	f114 0f36 	cmn.w	r4, #54	; 0x36
  40883a:	bfde      	ittt	le
  40883c:	2000      	movle	r0, #0
  40883e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  408842:	bd70      	pople	{r4, r5, r6, pc}
  408844:	f1c4 0400 	rsb	r4, r4, #0
  408848:	3c20      	subs	r4, #32
  40884a:	da35      	bge.n	4088b8 <__aeabi_dmul+0x164>
  40884c:	340c      	adds	r4, #12
  40884e:	dc1b      	bgt.n	408888 <__aeabi_dmul+0x134>
  408850:	f104 0414 	add.w	r4, r4, #20
  408854:	f1c4 0520 	rsb	r5, r4, #32
  408858:	fa00 f305 	lsl.w	r3, r0, r5
  40885c:	fa20 f004 	lsr.w	r0, r0, r4
  408860:	fa01 f205 	lsl.w	r2, r1, r5
  408864:	ea40 0002 	orr.w	r0, r0, r2
  408868:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  40886c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  408870:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  408874:	fa21 f604 	lsr.w	r6, r1, r4
  408878:	eb42 0106 	adc.w	r1, r2, r6
  40887c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  408880:	bf08      	it	eq
  408882:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  408886:	bd70      	pop	{r4, r5, r6, pc}
  408888:	f1c4 040c 	rsb	r4, r4, #12
  40888c:	f1c4 0520 	rsb	r5, r4, #32
  408890:	fa00 f304 	lsl.w	r3, r0, r4
  408894:	fa20 f005 	lsr.w	r0, r0, r5
  408898:	fa01 f204 	lsl.w	r2, r1, r4
  40889c:	ea40 0002 	orr.w	r0, r0, r2
  4088a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  4088a4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  4088a8:	f141 0100 	adc.w	r1, r1, #0
  4088ac:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  4088b0:	bf08      	it	eq
  4088b2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  4088b6:	bd70      	pop	{r4, r5, r6, pc}
  4088b8:	f1c4 0520 	rsb	r5, r4, #32
  4088bc:	fa00 f205 	lsl.w	r2, r0, r5
  4088c0:	ea4e 0e02 	orr.w	lr, lr, r2
  4088c4:	fa20 f304 	lsr.w	r3, r0, r4
  4088c8:	fa01 f205 	lsl.w	r2, r1, r5
  4088cc:	ea43 0302 	orr.w	r3, r3, r2
  4088d0:	fa21 f004 	lsr.w	r0, r1, r4
  4088d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  4088d8:	fa21 f204 	lsr.w	r2, r1, r4
  4088dc:	ea20 0002 	bic.w	r0, r0, r2
  4088e0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  4088e4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  4088e8:	bf08      	it	eq
  4088ea:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  4088ee:	bd70      	pop	{r4, r5, r6, pc}
  4088f0:	f094 0f00 	teq	r4, #0
  4088f4:	d10f      	bne.n	408916 <__aeabi_dmul+0x1c2>
  4088f6:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  4088fa:	0040      	lsls	r0, r0, #1
  4088fc:	eb41 0101 	adc.w	r1, r1, r1
  408900:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  408904:	bf08      	it	eq
  408906:	3c01      	subeq	r4, #1
  408908:	d0f7      	beq.n	4088fa <__aeabi_dmul+0x1a6>
  40890a:	ea41 0106 	orr.w	r1, r1, r6
  40890e:	f095 0f00 	teq	r5, #0
  408912:	bf18      	it	ne
  408914:	4770      	bxne	lr
  408916:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  40891a:	0052      	lsls	r2, r2, #1
  40891c:	eb43 0303 	adc.w	r3, r3, r3
  408920:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  408924:	bf08      	it	eq
  408926:	3d01      	subeq	r5, #1
  408928:	d0f7      	beq.n	40891a <__aeabi_dmul+0x1c6>
  40892a:	ea43 0306 	orr.w	r3, r3, r6
  40892e:	4770      	bx	lr
  408930:	ea94 0f0c 	teq	r4, ip
  408934:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  408938:	bf18      	it	ne
  40893a:	ea95 0f0c 	teqne	r5, ip
  40893e:	d00c      	beq.n	40895a <__aeabi_dmul+0x206>
  408940:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  408944:	bf18      	it	ne
  408946:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  40894a:	d1d1      	bne.n	4088f0 <__aeabi_dmul+0x19c>
  40894c:	ea81 0103 	eor.w	r1, r1, r3
  408950:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  408954:	f04f 0000 	mov.w	r0, #0
  408958:	bd70      	pop	{r4, r5, r6, pc}
  40895a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  40895e:	bf06      	itte	eq
  408960:	4610      	moveq	r0, r2
  408962:	4619      	moveq	r1, r3
  408964:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  408968:	d019      	beq.n	40899e <__aeabi_dmul+0x24a>
  40896a:	ea94 0f0c 	teq	r4, ip
  40896e:	d102      	bne.n	408976 <__aeabi_dmul+0x222>
  408970:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  408974:	d113      	bne.n	40899e <__aeabi_dmul+0x24a>
  408976:	ea95 0f0c 	teq	r5, ip
  40897a:	d105      	bne.n	408988 <__aeabi_dmul+0x234>
  40897c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  408980:	bf1c      	itt	ne
  408982:	4610      	movne	r0, r2
  408984:	4619      	movne	r1, r3
  408986:	d10a      	bne.n	40899e <__aeabi_dmul+0x24a>
  408988:	ea81 0103 	eor.w	r1, r1, r3
  40898c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  408990:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  408994:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  408998:	f04f 0000 	mov.w	r0, #0
  40899c:	bd70      	pop	{r4, r5, r6, pc}
  40899e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  4089a2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  4089a6:	bd70      	pop	{r4, r5, r6, pc}

004089a8 <__aeabi_ddiv>:
  4089a8:	b570      	push	{r4, r5, r6, lr}
  4089aa:	f04f 0cff 	mov.w	ip, #255	; 0xff
  4089ae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  4089b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  4089b6:	bf1d      	ittte	ne
  4089b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  4089bc:	ea94 0f0c 	teqne	r4, ip
  4089c0:	ea95 0f0c 	teqne	r5, ip
  4089c4:	f000 f8a7 	bleq	408b16 <__aeabi_ddiv+0x16e>
  4089c8:	eba4 0405 	sub.w	r4, r4, r5
  4089cc:	ea81 0e03 	eor.w	lr, r1, r3
  4089d0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  4089d4:	ea4f 3101 	mov.w	r1, r1, lsl #12
  4089d8:	f000 8088 	beq.w	408aec <__aeabi_ddiv+0x144>
  4089dc:	ea4f 3303 	mov.w	r3, r3, lsl #12
  4089e0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  4089e4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  4089e8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  4089ec:	ea4f 2202 	mov.w	r2, r2, lsl #8
  4089f0:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  4089f4:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  4089f8:	ea4f 2600 	mov.w	r6, r0, lsl #8
  4089fc:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  408a00:	429d      	cmp	r5, r3
  408a02:	bf08      	it	eq
  408a04:	4296      	cmpeq	r6, r2
  408a06:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  408a0a:	f504 7440 	add.w	r4, r4, #768	; 0x300
  408a0e:	d202      	bcs.n	408a16 <__aeabi_ddiv+0x6e>
  408a10:	085b      	lsrs	r3, r3, #1
  408a12:	ea4f 0232 	mov.w	r2, r2, rrx
  408a16:	1ab6      	subs	r6, r6, r2
  408a18:	eb65 0503 	sbc.w	r5, r5, r3
  408a1c:	085b      	lsrs	r3, r3, #1
  408a1e:	ea4f 0232 	mov.w	r2, r2, rrx
  408a22:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  408a26:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  408a2a:	ebb6 0e02 	subs.w	lr, r6, r2
  408a2e:	eb75 0e03 	sbcs.w	lr, r5, r3
  408a32:	bf22      	ittt	cs
  408a34:	1ab6      	subcs	r6, r6, r2
  408a36:	4675      	movcs	r5, lr
  408a38:	ea40 000c 	orrcs.w	r0, r0, ip
  408a3c:	085b      	lsrs	r3, r3, #1
  408a3e:	ea4f 0232 	mov.w	r2, r2, rrx
  408a42:	ebb6 0e02 	subs.w	lr, r6, r2
  408a46:	eb75 0e03 	sbcs.w	lr, r5, r3
  408a4a:	bf22      	ittt	cs
  408a4c:	1ab6      	subcs	r6, r6, r2
  408a4e:	4675      	movcs	r5, lr
  408a50:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  408a54:	085b      	lsrs	r3, r3, #1
  408a56:	ea4f 0232 	mov.w	r2, r2, rrx
  408a5a:	ebb6 0e02 	subs.w	lr, r6, r2
  408a5e:	eb75 0e03 	sbcs.w	lr, r5, r3
  408a62:	bf22      	ittt	cs
  408a64:	1ab6      	subcs	r6, r6, r2
  408a66:	4675      	movcs	r5, lr
  408a68:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  408a6c:	085b      	lsrs	r3, r3, #1
  408a6e:	ea4f 0232 	mov.w	r2, r2, rrx
  408a72:	ebb6 0e02 	subs.w	lr, r6, r2
  408a76:	eb75 0e03 	sbcs.w	lr, r5, r3
  408a7a:	bf22      	ittt	cs
  408a7c:	1ab6      	subcs	r6, r6, r2
  408a7e:	4675      	movcs	r5, lr
  408a80:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  408a84:	ea55 0e06 	orrs.w	lr, r5, r6
  408a88:	d018      	beq.n	408abc <__aeabi_ddiv+0x114>
  408a8a:	ea4f 1505 	mov.w	r5, r5, lsl #4
  408a8e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  408a92:	ea4f 1606 	mov.w	r6, r6, lsl #4
  408a96:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  408a9a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  408a9e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  408aa2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  408aa6:	d1c0      	bne.n	408a2a <__aeabi_ddiv+0x82>
  408aa8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  408aac:	d10b      	bne.n	408ac6 <__aeabi_ddiv+0x11e>
  408aae:	ea41 0100 	orr.w	r1, r1, r0
  408ab2:	f04f 0000 	mov.w	r0, #0
  408ab6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  408aba:	e7b6      	b.n	408a2a <__aeabi_ddiv+0x82>
  408abc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  408ac0:	bf04      	itt	eq
  408ac2:	4301      	orreq	r1, r0
  408ac4:	2000      	moveq	r0, #0
  408ac6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  408aca:	bf88      	it	hi
  408acc:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  408ad0:	f63f aeaf 	bhi.w	408832 <__aeabi_dmul+0xde>
  408ad4:	ebb5 0c03 	subs.w	ip, r5, r3
  408ad8:	bf04      	itt	eq
  408ada:	ebb6 0c02 	subseq.w	ip, r6, r2
  408ade:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  408ae2:	f150 0000 	adcs.w	r0, r0, #0
  408ae6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  408aea:	bd70      	pop	{r4, r5, r6, pc}
  408aec:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  408af0:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  408af4:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  408af8:	bfc2      	ittt	gt
  408afa:	ebd4 050c 	rsbsgt	r5, r4, ip
  408afe:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  408b02:	bd70      	popgt	{r4, r5, r6, pc}
  408b04:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  408b08:	f04f 0e00 	mov.w	lr, #0
  408b0c:	3c01      	subs	r4, #1
  408b0e:	e690      	b.n	408832 <__aeabi_dmul+0xde>
  408b10:	ea45 0e06 	orr.w	lr, r5, r6
  408b14:	e68d      	b.n	408832 <__aeabi_dmul+0xde>
  408b16:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  408b1a:	ea94 0f0c 	teq	r4, ip
  408b1e:	bf08      	it	eq
  408b20:	ea95 0f0c 	teqeq	r5, ip
  408b24:	f43f af3b 	beq.w	40899e <__aeabi_dmul+0x24a>
  408b28:	ea94 0f0c 	teq	r4, ip
  408b2c:	d10a      	bne.n	408b44 <__aeabi_ddiv+0x19c>
  408b2e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  408b32:	f47f af34 	bne.w	40899e <__aeabi_dmul+0x24a>
  408b36:	ea95 0f0c 	teq	r5, ip
  408b3a:	f47f af25 	bne.w	408988 <__aeabi_dmul+0x234>
  408b3e:	4610      	mov	r0, r2
  408b40:	4619      	mov	r1, r3
  408b42:	e72c      	b.n	40899e <__aeabi_dmul+0x24a>
  408b44:	ea95 0f0c 	teq	r5, ip
  408b48:	d106      	bne.n	408b58 <__aeabi_ddiv+0x1b0>
  408b4a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  408b4e:	f43f aefd 	beq.w	40894c <__aeabi_dmul+0x1f8>
  408b52:	4610      	mov	r0, r2
  408b54:	4619      	mov	r1, r3
  408b56:	e722      	b.n	40899e <__aeabi_dmul+0x24a>
  408b58:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  408b5c:	bf18      	it	ne
  408b5e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  408b62:	f47f aec5 	bne.w	4088f0 <__aeabi_dmul+0x19c>
  408b66:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  408b6a:	f47f af0d 	bne.w	408988 <__aeabi_dmul+0x234>
  408b6e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  408b72:	f47f aeeb 	bne.w	40894c <__aeabi_dmul+0x1f8>
  408b76:	e712      	b.n	40899e <__aeabi_dmul+0x24a>

00408b78 <__gedf2>:
  408b78:	f04f 3cff 	mov.w	ip, #4294967295
  408b7c:	e006      	b.n	408b8c <__cmpdf2+0x4>
  408b7e:	bf00      	nop

00408b80 <__ledf2>:
  408b80:	f04f 0c01 	mov.w	ip, #1
  408b84:	e002      	b.n	408b8c <__cmpdf2+0x4>
  408b86:	bf00      	nop

00408b88 <__cmpdf2>:
  408b88:	f04f 0c01 	mov.w	ip, #1
  408b8c:	f84d cd04 	str.w	ip, [sp, #-4]!
  408b90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  408b94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  408b98:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  408b9c:	bf18      	it	ne
  408b9e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  408ba2:	d01b      	beq.n	408bdc <__cmpdf2+0x54>
  408ba4:	b001      	add	sp, #4
  408ba6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  408baa:	bf0c      	ite	eq
  408bac:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  408bb0:	ea91 0f03 	teqne	r1, r3
  408bb4:	bf02      	ittt	eq
  408bb6:	ea90 0f02 	teqeq	r0, r2
  408bba:	2000      	moveq	r0, #0
  408bbc:	4770      	bxeq	lr
  408bbe:	f110 0f00 	cmn.w	r0, #0
  408bc2:	ea91 0f03 	teq	r1, r3
  408bc6:	bf58      	it	pl
  408bc8:	4299      	cmppl	r1, r3
  408bca:	bf08      	it	eq
  408bcc:	4290      	cmpeq	r0, r2
  408bce:	bf2c      	ite	cs
  408bd0:	17d8      	asrcs	r0, r3, #31
  408bd2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  408bd6:	f040 0001 	orr.w	r0, r0, #1
  408bda:	4770      	bx	lr
  408bdc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  408be0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  408be4:	d102      	bne.n	408bec <__cmpdf2+0x64>
  408be6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  408bea:	d107      	bne.n	408bfc <__cmpdf2+0x74>
  408bec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  408bf0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  408bf4:	d1d6      	bne.n	408ba4 <__cmpdf2+0x1c>
  408bf6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  408bfa:	d0d3      	beq.n	408ba4 <__cmpdf2+0x1c>
  408bfc:	f85d 0b04 	ldr.w	r0, [sp], #4
  408c00:	4770      	bx	lr
  408c02:	bf00      	nop

00408c04 <__aeabi_cdrcmple>:
  408c04:	4684      	mov	ip, r0
  408c06:	4610      	mov	r0, r2
  408c08:	4662      	mov	r2, ip
  408c0a:	468c      	mov	ip, r1
  408c0c:	4619      	mov	r1, r3
  408c0e:	4663      	mov	r3, ip
  408c10:	e000      	b.n	408c14 <__aeabi_cdcmpeq>
  408c12:	bf00      	nop

00408c14 <__aeabi_cdcmpeq>:
  408c14:	b501      	push	{r0, lr}
  408c16:	f7ff ffb7 	bl	408b88 <__cmpdf2>
  408c1a:	2800      	cmp	r0, #0
  408c1c:	bf48      	it	mi
  408c1e:	f110 0f00 	cmnmi.w	r0, #0
  408c22:	bd01      	pop	{r0, pc}

00408c24 <__aeabi_dcmpeq>:
  408c24:	f84d ed08 	str.w	lr, [sp, #-8]!
  408c28:	f7ff fff4 	bl	408c14 <__aeabi_cdcmpeq>
  408c2c:	bf0c      	ite	eq
  408c2e:	2001      	moveq	r0, #1
  408c30:	2000      	movne	r0, #0
  408c32:	f85d fb08 	ldr.w	pc, [sp], #8
  408c36:	bf00      	nop

00408c38 <__aeabi_dcmplt>:
  408c38:	f84d ed08 	str.w	lr, [sp, #-8]!
  408c3c:	f7ff ffea 	bl	408c14 <__aeabi_cdcmpeq>
  408c40:	bf34      	ite	cc
  408c42:	2001      	movcc	r0, #1
  408c44:	2000      	movcs	r0, #0
  408c46:	f85d fb08 	ldr.w	pc, [sp], #8
  408c4a:	bf00      	nop

00408c4c <__aeabi_dcmple>:
  408c4c:	f84d ed08 	str.w	lr, [sp, #-8]!
  408c50:	f7ff ffe0 	bl	408c14 <__aeabi_cdcmpeq>
  408c54:	bf94      	ite	ls
  408c56:	2001      	movls	r0, #1
  408c58:	2000      	movhi	r0, #0
  408c5a:	f85d fb08 	ldr.w	pc, [sp], #8
  408c5e:	bf00      	nop

00408c60 <__aeabi_dcmpge>:
  408c60:	f84d ed08 	str.w	lr, [sp, #-8]!
  408c64:	f7ff ffce 	bl	408c04 <__aeabi_cdrcmple>
  408c68:	bf94      	ite	ls
  408c6a:	2001      	movls	r0, #1
  408c6c:	2000      	movhi	r0, #0
  408c6e:	f85d fb08 	ldr.w	pc, [sp], #8
  408c72:	bf00      	nop

00408c74 <__aeabi_dcmpgt>:
  408c74:	f84d ed08 	str.w	lr, [sp, #-8]!
  408c78:	f7ff ffc4 	bl	408c04 <__aeabi_cdrcmple>
  408c7c:	bf34      	ite	cc
  408c7e:	2001      	movcc	r0, #1
  408c80:	2000      	movcs	r0, #0
  408c82:	f85d fb08 	ldr.w	pc, [sp], #8
  408c86:	bf00      	nop

00408c88 <__aeabi_d2iz>:
  408c88:	ea4f 0241 	mov.w	r2, r1, lsl #1
  408c8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  408c90:	d215      	bcs.n	408cbe <__aeabi_d2iz+0x36>
  408c92:	d511      	bpl.n	408cb8 <__aeabi_d2iz+0x30>
  408c94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  408c98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  408c9c:	d912      	bls.n	408cc4 <__aeabi_d2iz+0x3c>
  408c9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  408ca2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  408ca6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  408caa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  408cae:	fa23 f002 	lsr.w	r0, r3, r2
  408cb2:	bf18      	it	ne
  408cb4:	4240      	negne	r0, r0
  408cb6:	4770      	bx	lr
  408cb8:	f04f 0000 	mov.w	r0, #0
  408cbc:	4770      	bx	lr
  408cbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  408cc2:	d105      	bne.n	408cd0 <__aeabi_d2iz+0x48>
  408cc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  408cc8:	bf08      	it	eq
  408cca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  408cce:	4770      	bx	lr
  408cd0:	f04f 0000 	mov.w	r0, #0
  408cd4:	4770      	bx	lr
  408cd6:	bf00      	nop

00408cd8 <__aeabi_uldivmod>:
  408cd8:	b953      	cbnz	r3, 408cf0 <__aeabi_uldivmod+0x18>
  408cda:	b94a      	cbnz	r2, 408cf0 <__aeabi_uldivmod+0x18>
  408cdc:	2900      	cmp	r1, #0
  408cde:	bf08      	it	eq
  408ce0:	2800      	cmpeq	r0, #0
  408ce2:	bf1c      	itt	ne
  408ce4:	f04f 31ff 	movne.w	r1, #4294967295
  408ce8:	f04f 30ff 	movne.w	r0, #4294967295
  408cec:	f000 b83c 	b.w	408d68 <__aeabi_idiv0>
  408cf0:	b082      	sub	sp, #8
  408cf2:	46ec      	mov	ip, sp
  408cf4:	e92d 5000 	stmdb	sp!, {ip, lr}
  408cf8:	f000 f81e 	bl	408d38 <__gnu_uldivmod_helper>
  408cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
  408d00:	b002      	add	sp, #8
  408d02:	bc0c      	pop	{r2, r3}
  408d04:	4770      	bx	lr
  408d06:	bf00      	nop

00408d08 <__gnu_ldivmod_helper>:
  408d08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  408d0c:	4690      	mov	r8, r2
  408d0e:	4606      	mov	r6, r0
  408d10:	460f      	mov	r7, r1
  408d12:	461d      	mov	r5, r3
  408d14:	9c06      	ldr	r4, [sp, #24]
  408d16:	f000 f829 	bl	408d6c <__divdi3>
  408d1a:	fb08 fc01 	mul.w	ip, r8, r1
  408d1e:	4686      	mov	lr, r0
  408d20:	fba8 2300 	umull	r2, r3, r8, r0
  408d24:	fb00 c505 	mla	r5, r0, r5, ip
  408d28:	1ab2      	subs	r2, r6, r2
  408d2a:	442b      	add	r3, r5
  408d2c:	eb67 0303 	sbc.w	r3, r7, r3
  408d30:	e9c4 2300 	strd	r2, r3, [r4]
  408d34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00408d38 <__gnu_uldivmod_helper>:
  408d38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  408d3c:	461d      	mov	r5, r3
  408d3e:	4617      	mov	r7, r2
  408d40:	4680      	mov	r8, r0
  408d42:	4689      	mov	r9, r1
  408d44:	9e08      	ldr	r6, [sp, #32]
  408d46:	f000 f953 	bl	408ff0 <__udivdi3>
  408d4a:	fb00 f305 	mul.w	r3, r0, r5
  408d4e:	fba0 4507 	umull	r4, r5, r0, r7
  408d52:	fb07 3701 	mla	r7, r7, r1, r3
  408d56:	ebb8 0404 	subs.w	r4, r8, r4
  408d5a:	443d      	add	r5, r7
  408d5c:	eb69 0505 	sbc.w	r5, r9, r5
  408d60:	e9c6 4500 	strd	r4, r5, [r6]
  408d64:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00408d68 <__aeabi_idiv0>:
  408d68:	4770      	bx	lr
  408d6a:	bf00      	nop

00408d6c <__divdi3>:
  408d6c:	2900      	cmp	r1, #0
  408d6e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  408d72:	f2c0 80a2 	blt.w	408eba <__divdi3+0x14e>
  408d76:	2600      	movs	r6, #0
  408d78:	2b00      	cmp	r3, #0
  408d7a:	f2c0 8098 	blt.w	408eae <__divdi3+0x142>
  408d7e:	468c      	mov	ip, r1
  408d80:	4690      	mov	r8, r2
  408d82:	469e      	mov	lr, r3
  408d84:	4615      	mov	r5, r2
  408d86:	4604      	mov	r4, r0
  408d88:	460f      	mov	r7, r1
  408d8a:	bbcb      	cbnz	r3, 408e00 <__divdi3+0x94>
  408d8c:	428a      	cmp	r2, r1
  408d8e:	d956      	bls.n	408e3e <__divdi3+0xd2>
  408d90:	fab2 f382 	clz	r3, r2
  408d94:	b13b      	cbz	r3, 408da6 <__divdi3+0x3a>
  408d96:	f1c3 0220 	rsb	r2, r3, #32
  408d9a:	409f      	lsls	r7, r3
  408d9c:	409d      	lsls	r5, r3
  408d9e:	409c      	lsls	r4, r3
  408da0:	fa20 f202 	lsr.w	r2, r0, r2
  408da4:	4317      	orrs	r7, r2
  408da6:	0c28      	lsrs	r0, r5, #16
  408da8:	0c22      	lsrs	r2, r4, #16
  408daa:	fa1f fe85 	uxth.w	lr, r5
  408dae:	fbb7 f1f0 	udiv	r1, r7, r0
  408db2:	fb00 7711 	mls	r7, r0, r1, r7
  408db6:	fb0e f301 	mul.w	r3, lr, r1
  408dba:	ea42 4707 	orr.w	r7, r2, r7, lsl #16
  408dbe:	42bb      	cmp	r3, r7
  408dc0:	d907      	bls.n	408dd2 <__divdi3+0x66>
  408dc2:	197f      	adds	r7, r7, r5
  408dc4:	f080 8101 	bcs.w	408fca <__divdi3+0x25e>
  408dc8:	42bb      	cmp	r3, r7
  408dca:	f240 80fe 	bls.w	408fca <__divdi3+0x25e>
  408dce:	3902      	subs	r1, #2
  408dd0:	442f      	add	r7, r5
  408dd2:	1aff      	subs	r7, r7, r3
  408dd4:	b2a4      	uxth	r4, r4
  408dd6:	fbb7 f3f0 	udiv	r3, r7, r0
  408dda:	fb00 7713 	mls	r7, r0, r3, r7
  408dde:	fb0e fe03 	mul.w	lr, lr, r3
  408de2:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
  408de6:	45be      	cmp	lr, r7
  408de8:	d906      	bls.n	408df8 <__divdi3+0x8c>
  408dea:	197f      	adds	r7, r7, r5
  408dec:	f080 80eb 	bcs.w	408fc6 <__divdi3+0x25a>
  408df0:	45be      	cmp	lr, r7
  408df2:	f240 80e8 	bls.w	408fc6 <__divdi3+0x25a>
  408df6:	3b02      	subs	r3, #2
  408df8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
  408dfc:	2200      	movs	r2, #0
  408dfe:	e003      	b.n	408e08 <__divdi3+0x9c>
  408e00:	428b      	cmp	r3, r1
  408e02:	d90f      	bls.n	408e24 <__divdi3+0xb8>
  408e04:	2200      	movs	r2, #0
  408e06:	4613      	mov	r3, r2
  408e08:	1c34      	adds	r4, r6, #0
  408e0a:	f04f 0500 	mov.w	r5, #0
  408e0e:	bf18      	it	ne
  408e10:	2401      	movne	r4, #1
  408e12:	4260      	negs	r0, r4
  408e14:	eb65 0145 	sbc.w	r1, r5, r5, lsl #1
  408e18:	4058      	eors	r0, r3
  408e1a:	4051      	eors	r1, r2
  408e1c:	1900      	adds	r0, r0, r4
  408e1e:	4169      	adcs	r1, r5
  408e20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  408e24:	fab3 f283 	clz	r2, r3
  408e28:	2a00      	cmp	r2, #0
  408e2a:	f040 8083 	bne.w	408f34 <__divdi3+0x1c8>
  408e2e:	4580      	cmp	r8, r0
  408e30:	f240 80cd 	bls.w	408fce <__divdi3+0x262>
  408e34:	428b      	cmp	r3, r1
  408e36:	f0c0 80ca 	bcc.w	408fce <__divdi3+0x262>
  408e3a:	4613      	mov	r3, r2
  408e3c:	e7e4      	b.n	408e08 <__divdi3+0x9c>
  408e3e:	b912      	cbnz	r2, 408e46 <__divdi3+0xda>
  408e40:	2301      	movs	r3, #1
  408e42:	fbb3 f5f2 	udiv	r5, r3, r2
  408e46:	fab5 f285 	clz	r2, r5
  408e4a:	2a00      	cmp	r2, #0
  408e4c:	d13b      	bne.n	408ec6 <__divdi3+0x15a>
  408e4e:	1b78      	subs	r0, r7, r5
  408e50:	ea4f 4e15 	mov.w	lr, r5, lsr #16
  408e54:	fa1f fc85 	uxth.w	ip, r5
  408e58:	2201      	movs	r2, #1
  408e5a:	0c21      	lsrs	r1, r4, #16
  408e5c:	fbb0 f8fe 	udiv	r8, r0, lr
  408e60:	fb0e 0018 	mls	r0, lr, r8, r0
  408e64:	fb0c f308 	mul.w	r3, ip, r8
  408e68:	ea41 4700 	orr.w	r7, r1, r0, lsl #16
  408e6c:	42bb      	cmp	r3, r7
  408e6e:	d908      	bls.n	408e82 <__divdi3+0x116>
  408e70:	197f      	adds	r7, r7, r5
  408e72:	f080 80b0 	bcs.w	408fd6 <__divdi3+0x26a>
  408e76:	42bb      	cmp	r3, r7
  408e78:	f240 80ad 	bls.w	408fd6 <__divdi3+0x26a>
  408e7c:	f1a8 0802 	sub.w	r8, r8, #2
  408e80:	442f      	add	r7, r5
  408e82:	1aff      	subs	r7, r7, r3
  408e84:	b2a4      	uxth	r4, r4
  408e86:	fbb7 f3fe 	udiv	r3, r7, lr
  408e8a:	fb0e 7713 	mls	r7, lr, r3, r7
  408e8e:	fb0c fc03 	mul.w	ip, ip, r3
  408e92:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
  408e96:	45bc      	cmp	ip, r7
  408e98:	d906      	bls.n	408ea8 <__divdi3+0x13c>
  408e9a:	197f      	adds	r7, r7, r5
  408e9c:	f080 8099 	bcs.w	408fd2 <__divdi3+0x266>
  408ea0:	45bc      	cmp	ip, r7
  408ea2:	f240 8096 	bls.w	408fd2 <__divdi3+0x266>
  408ea6:	3b02      	subs	r3, #2
  408ea8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
  408eac:	e7ac      	b.n	408e08 <__divdi3+0x9c>
  408eae:	4252      	negs	r2, r2
  408eb0:	ea6f 0606 	mvn.w	r6, r6
  408eb4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  408eb8:	e761      	b.n	408d7e <__divdi3+0x12>
  408eba:	4240      	negs	r0, r0
  408ebc:	f04f 36ff 	mov.w	r6, #4294967295
  408ec0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  408ec4:	e758      	b.n	408d78 <__divdi3+0xc>
  408ec6:	4095      	lsls	r5, r2
  408ec8:	f1c2 0120 	rsb	r1, r2, #32
  408ecc:	fa07 f302 	lsl.w	r3, r7, r2
  408ed0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
  408ed4:	40cf      	lsrs	r7, r1
  408ed6:	fa24 f101 	lsr.w	r1, r4, r1
  408eda:	4094      	lsls	r4, r2
  408edc:	fa1f fc85 	uxth.w	ip, r5
  408ee0:	4319      	orrs	r1, r3
  408ee2:	fbb7 f2fe 	udiv	r2, r7, lr
  408ee6:	ea4f 4811 	mov.w	r8, r1, lsr #16
  408eea:	fb0e 7712 	mls	r7, lr, r2, r7
  408eee:	fb0c f302 	mul.w	r3, ip, r2
  408ef2:	ea48 4707 	orr.w	r7, r8, r7, lsl #16
  408ef6:	42bb      	cmp	r3, r7
  408ef8:	d905      	bls.n	408f06 <__divdi3+0x19a>
  408efa:	197f      	adds	r7, r7, r5
  408efc:	d271      	bcs.n	408fe2 <__divdi3+0x276>
  408efe:	42bb      	cmp	r3, r7
  408f00:	d96f      	bls.n	408fe2 <__divdi3+0x276>
  408f02:	3a02      	subs	r2, #2
  408f04:	442f      	add	r7, r5
  408f06:	1aff      	subs	r7, r7, r3
  408f08:	b289      	uxth	r1, r1
  408f0a:	fbb7 f8fe 	udiv	r8, r7, lr
  408f0e:	fb0e 7718 	mls	r7, lr, r8, r7
  408f12:	fb0c f008 	mul.w	r0, ip, r8
  408f16:	ea41 4307 	orr.w	r3, r1, r7, lsl #16
  408f1a:	4298      	cmp	r0, r3
  408f1c:	d906      	bls.n	408f2c <__divdi3+0x1c0>
  408f1e:	195b      	adds	r3, r3, r5
  408f20:	d261      	bcs.n	408fe6 <__divdi3+0x27a>
  408f22:	4298      	cmp	r0, r3
  408f24:	d95f      	bls.n	408fe6 <__divdi3+0x27a>
  408f26:	f1a8 0802 	sub.w	r8, r8, #2
  408f2a:	442b      	add	r3, r5
  408f2c:	1a18      	subs	r0, r3, r0
  408f2e:	ea48 4202 	orr.w	r2, r8, r2, lsl #16
  408f32:	e792      	b.n	408e5a <__divdi3+0xee>
  408f34:	f1c2 0720 	rsb	r7, r2, #32
  408f38:	fa03 fe02 	lsl.w	lr, r3, r2
  408f3c:	fa08 f502 	lsl.w	r5, r8, r2
  408f40:	4091      	lsls	r1, r2
  408f42:	fa28 f307 	lsr.w	r3, r8, r7
  408f46:	fa2c fc07 	lsr.w	ip, ip, r7
  408f4a:	40f8      	lsrs	r0, r7
  408f4c:	ea43 0e0e 	orr.w	lr, r3, lr
  408f50:	4308      	orrs	r0, r1
  408f52:	ea4f 481e 	mov.w	r8, lr, lsr #16
  408f56:	0c07      	lsrs	r7, r0, #16
  408f58:	fa1f fa8e 	uxth.w	sl, lr
  408f5c:	fbbc f9f8 	udiv	r9, ip, r8
  408f60:	fb08 cc19 	mls	ip, r8, r9, ip
  408f64:	fb0a f109 	mul.w	r1, sl, r9
  408f68:	ea47 4c0c 	orr.w	ip, r7, ip, lsl #16
  408f6c:	4561      	cmp	r1, ip
  408f6e:	d907      	bls.n	408f80 <__divdi3+0x214>
  408f70:	eb1c 0c0e 	adds.w	ip, ip, lr
  408f74:	d232      	bcs.n	408fdc <__divdi3+0x270>
  408f76:	4561      	cmp	r1, ip
  408f78:	d930      	bls.n	408fdc <__divdi3+0x270>
  408f7a:	f1a9 0902 	sub.w	r9, r9, #2
  408f7e:	44f4      	add	ip, lr
  408f80:	ebc1 0c0c 	rsb	ip, r1, ip
  408f84:	b280      	uxth	r0, r0
  408f86:	fbbc f3f8 	udiv	r3, ip, r8
  408f8a:	fb08 cc13 	mls	ip, r8, r3, ip
  408f8e:	fb0a fa03 	mul.w	sl, sl, r3
  408f92:	ea40 410c 	orr.w	r1, r0, ip, lsl #16
  408f96:	458a      	cmp	sl, r1
  408f98:	d906      	bls.n	408fa8 <__divdi3+0x23c>
  408f9a:	eb11 010e 	adds.w	r1, r1, lr
  408f9e:	d225      	bcs.n	408fec <__divdi3+0x280>
  408fa0:	458a      	cmp	sl, r1
  408fa2:	d923      	bls.n	408fec <__divdi3+0x280>
  408fa4:	3b02      	subs	r3, #2
  408fa6:	4471      	add	r1, lr
  408fa8:	ea43 4309 	orr.w	r3, r3, r9, lsl #16
  408fac:	ebca 0101 	rsb	r1, sl, r1
  408fb0:	fba3 8905 	umull	r8, r9, r3, r5
  408fb4:	4549      	cmp	r1, r9
  408fb6:	d303      	bcc.n	408fc0 <__divdi3+0x254>
  408fb8:	d103      	bne.n	408fc2 <__divdi3+0x256>
  408fba:	4094      	lsls	r4, r2
  408fbc:	4544      	cmp	r4, r8
  408fbe:	d200      	bcs.n	408fc2 <__divdi3+0x256>
  408fc0:	3b01      	subs	r3, #1
  408fc2:	2200      	movs	r2, #0
  408fc4:	e720      	b.n	408e08 <__divdi3+0x9c>
  408fc6:	3b01      	subs	r3, #1
  408fc8:	e716      	b.n	408df8 <__divdi3+0x8c>
  408fca:	3901      	subs	r1, #1
  408fcc:	e701      	b.n	408dd2 <__divdi3+0x66>
  408fce:	2301      	movs	r3, #1
  408fd0:	e71a      	b.n	408e08 <__divdi3+0x9c>
  408fd2:	3b01      	subs	r3, #1
  408fd4:	e768      	b.n	408ea8 <__divdi3+0x13c>
  408fd6:	f108 38ff 	add.w	r8, r8, #4294967295
  408fda:	e752      	b.n	408e82 <__divdi3+0x116>
  408fdc:	f109 39ff 	add.w	r9, r9, #4294967295
  408fe0:	e7ce      	b.n	408f80 <__divdi3+0x214>
  408fe2:	3a01      	subs	r2, #1
  408fe4:	e78f      	b.n	408f06 <__divdi3+0x19a>
  408fe6:	f108 38ff 	add.w	r8, r8, #4294967295
  408fea:	e79f      	b.n	408f2c <__divdi3+0x1c0>
  408fec:	3b01      	subs	r3, #1
  408fee:	e7db      	b.n	408fa8 <__divdi3+0x23c>

00408ff0 <__udivdi3>:
  408ff0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  408ff4:	2b00      	cmp	r3, #0
  408ff6:	d140      	bne.n	40907a <__udivdi3+0x8a>
  408ff8:	428a      	cmp	r2, r1
  408ffa:	4604      	mov	r4, r0
  408ffc:	4615      	mov	r5, r2
  408ffe:	d94a      	bls.n	409096 <__udivdi3+0xa6>
  409000:	fab2 f382 	clz	r3, r2
  409004:	460f      	mov	r7, r1
  409006:	b14b      	cbz	r3, 40901c <__udivdi3+0x2c>
  409008:	f1c3 0620 	rsb	r6, r3, #32
  40900c:	4099      	lsls	r1, r3
  40900e:	fa00 f403 	lsl.w	r4, r0, r3
  409012:	fa02 f503 	lsl.w	r5, r2, r3
  409016:	40f0      	lsrs	r0, r6
  409018:	ea40 0701 	orr.w	r7, r0, r1
  40901c:	0c29      	lsrs	r1, r5, #16
  40901e:	0c26      	lsrs	r6, r4, #16
  409020:	fa1f fe85 	uxth.w	lr, r5
  409024:	fbb7 f0f1 	udiv	r0, r7, r1
  409028:	fb01 7710 	mls	r7, r1, r0, r7
  40902c:	fb0e f200 	mul.w	r2, lr, r0
  409030:	ea46 4307 	orr.w	r3, r6, r7, lsl #16
  409034:	429a      	cmp	r2, r3
  409036:	d907      	bls.n	409048 <__udivdi3+0x58>
  409038:	195b      	adds	r3, r3, r5
  40903a:	f080 80ea 	bcs.w	409212 <__udivdi3+0x222>
  40903e:	429a      	cmp	r2, r3
  409040:	f240 80e7 	bls.w	409212 <__udivdi3+0x222>
  409044:	3802      	subs	r0, #2
  409046:	442b      	add	r3, r5
  409048:	1a9a      	subs	r2, r3, r2
  40904a:	b2a4      	uxth	r4, r4
  40904c:	fbb2 f3f1 	udiv	r3, r2, r1
  409050:	fb01 2213 	mls	r2, r1, r3, r2
  409054:	fb0e fe03 	mul.w	lr, lr, r3
  409058:	ea44 4202 	orr.w	r2, r4, r2, lsl #16
  40905c:	4596      	cmp	lr, r2
  40905e:	d906      	bls.n	40906e <__udivdi3+0x7e>
  409060:	1952      	adds	r2, r2, r5
  409062:	f080 80da 	bcs.w	40921a <__udivdi3+0x22a>
  409066:	4596      	cmp	lr, r2
  409068:	f240 80d7 	bls.w	40921a <__udivdi3+0x22a>
  40906c:	3b02      	subs	r3, #2
  40906e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
  409072:	2600      	movs	r6, #0
  409074:	4631      	mov	r1, r6
  409076:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40907a:	428b      	cmp	r3, r1
  40907c:	d844      	bhi.n	409108 <__udivdi3+0x118>
  40907e:	fab3 f683 	clz	r6, r3
  409082:	2e00      	cmp	r6, #0
  409084:	d145      	bne.n	409112 <__udivdi3+0x122>
  409086:	4282      	cmp	r2, r0
  409088:	f240 80bf 	bls.w	40920a <__udivdi3+0x21a>
  40908c:	428b      	cmp	r3, r1
  40908e:	f0c0 80bc 	bcc.w	40920a <__udivdi3+0x21a>
  409092:	4630      	mov	r0, r6
  409094:	e7ee      	b.n	409074 <__udivdi3+0x84>
  409096:	b912      	cbnz	r2, 40909e <__udivdi3+0xae>
  409098:	2501      	movs	r5, #1
  40909a:	fbb5 f5f2 	udiv	r5, r5, r2
  40909e:	fab5 f285 	clz	r2, r5
  4090a2:	2a00      	cmp	r2, #0
  4090a4:	d17b      	bne.n	40919e <__udivdi3+0x1ae>
  4090a6:	1b4a      	subs	r2, r1, r5
  4090a8:	0c2f      	lsrs	r7, r5, #16
  4090aa:	fa1f fe85 	uxth.w	lr, r5
  4090ae:	2601      	movs	r6, #1
  4090b0:	0c23      	lsrs	r3, r4, #16
  4090b2:	fbb2 f0f7 	udiv	r0, r2, r7
  4090b6:	fb07 2210 	mls	r2, r7, r0, r2
  4090ba:	fb0e fc00 	mul.w	ip, lr, r0
  4090be:	ea43 4102 	orr.w	r1, r3, r2, lsl #16
  4090c2:	458c      	cmp	ip, r1
  4090c4:	d907      	bls.n	4090d6 <__udivdi3+0xe6>
  4090c6:	1949      	adds	r1, r1, r5
  4090c8:	f080 80a1 	bcs.w	40920e <__udivdi3+0x21e>
  4090cc:	458c      	cmp	ip, r1
  4090ce:	f240 809e 	bls.w	40920e <__udivdi3+0x21e>
  4090d2:	3802      	subs	r0, #2
  4090d4:	4429      	add	r1, r5
  4090d6:	ebcc 0101 	rsb	r1, ip, r1
  4090da:	b2a4      	uxth	r4, r4
  4090dc:	fbb1 f3f7 	udiv	r3, r1, r7
  4090e0:	fb07 1113 	mls	r1, r7, r3, r1
  4090e4:	fb0e fe03 	mul.w	lr, lr, r3
  4090e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
  4090ec:	45a6      	cmp	lr, r4
  4090ee:	d906      	bls.n	4090fe <__udivdi3+0x10e>
  4090f0:	1964      	adds	r4, r4, r5
  4090f2:	f080 8090 	bcs.w	409216 <__udivdi3+0x226>
  4090f6:	45a6      	cmp	lr, r4
  4090f8:	f240 808d 	bls.w	409216 <__udivdi3+0x226>
  4090fc:	3b02      	subs	r3, #2
  4090fe:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
  409102:	4631      	mov	r1, r6
  409104:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  409108:	2600      	movs	r6, #0
  40910a:	4630      	mov	r0, r6
  40910c:	4631      	mov	r1, r6
  40910e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  409112:	f1c6 0520 	rsb	r5, r6, #32
  409116:	40b3      	lsls	r3, r6
  409118:	fa02 f706 	lsl.w	r7, r2, r6
  40911c:	fa01 f406 	lsl.w	r4, r1, r6
  409120:	40ea      	lsrs	r2, r5
  409122:	40e9      	lsrs	r1, r5
  409124:	fa20 f505 	lsr.w	r5, r0, r5
  409128:	431a      	orrs	r2, r3
  40912a:	4325      	orrs	r5, r4
  40912c:	ea4f 4c12 	mov.w	ip, r2, lsr #16
  409130:	ea4f 4e15 	mov.w	lr, r5, lsr #16
  409134:	b293      	uxth	r3, r2
  409136:	fbb1 f8fc 	udiv	r8, r1, ip
  40913a:	fb0c 1118 	mls	r1, ip, r8, r1
  40913e:	fb03 f408 	mul.w	r4, r3, r8
  409142:	ea4e 4101 	orr.w	r1, lr, r1, lsl #16
  409146:	428c      	cmp	r4, r1
  409148:	d906      	bls.n	409158 <__udivdi3+0x168>
  40914a:	1889      	adds	r1, r1, r2
  40914c:	d269      	bcs.n	409222 <__udivdi3+0x232>
  40914e:	428c      	cmp	r4, r1
  409150:	d967      	bls.n	409222 <__udivdi3+0x232>
  409152:	f1a8 0802 	sub.w	r8, r8, #2
  409156:	4411      	add	r1, r2
  409158:	1b09      	subs	r1, r1, r4
  40915a:	b2ad      	uxth	r5, r5
  40915c:	fbb1 f4fc 	udiv	r4, r1, ip
  409160:	fb0c 1114 	mls	r1, ip, r4, r1
  409164:	fb03 fe04 	mul.w	lr, r3, r4
  409168:	ea45 4301 	orr.w	r3, r5, r1, lsl #16
  40916c:	459e      	cmp	lr, r3
  40916e:	d905      	bls.n	40917c <__udivdi3+0x18c>
  409170:	189b      	adds	r3, r3, r2
  409172:	d254      	bcs.n	40921e <__udivdi3+0x22e>
  409174:	459e      	cmp	lr, r3
  409176:	d952      	bls.n	40921e <__udivdi3+0x22e>
  409178:	3c02      	subs	r4, #2
  40917a:	4413      	add	r3, r2
  40917c:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
  409180:	ebce 0303 	rsb	r3, lr, r3
  409184:	fba4 8907 	umull	r8, r9, r4, r7
  409188:	454b      	cmp	r3, r9
  40918a:	d303      	bcc.n	409194 <__udivdi3+0x1a4>
  40918c:	d151      	bne.n	409232 <__udivdi3+0x242>
  40918e:	40b0      	lsls	r0, r6
  409190:	4540      	cmp	r0, r8
  409192:	d24e      	bcs.n	409232 <__udivdi3+0x242>
  409194:	2600      	movs	r6, #0
  409196:	1e60      	subs	r0, r4, #1
  409198:	4631      	mov	r1, r6
  40919a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40919e:	f1c2 0620 	rsb	r6, r2, #32
  4091a2:	4095      	lsls	r5, r2
  4091a4:	fa01 f302 	lsl.w	r3, r1, r2
  4091a8:	fa00 f402 	lsl.w	r4, r0, r2
  4091ac:	0c2f      	lsrs	r7, r5, #16
  4091ae:	40f1      	lsrs	r1, r6
  4091b0:	40f0      	lsrs	r0, r6
  4091b2:	fa1f fe85 	uxth.w	lr, r5
  4091b6:	fbb1 f6f7 	udiv	r6, r1, r7
  4091ba:	4318      	orrs	r0, r3
  4091bc:	fb07 1116 	mls	r1, r7, r6, r1
  4091c0:	fb0e f206 	mul.w	r2, lr, r6
  4091c4:	ea4f 4c10 	mov.w	ip, r0, lsr #16
  4091c8:	ea4c 4301 	orr.w	r3, ip, r1, lsl #16
  4091cc:	429a      	cmp	r2, r3
  4091ce:	d905      	bls.n	4091dc <__udivdi3+0x1ec>
  4091d0:	195b      	adds	r3, r3, r5
  4091d2:	d229      	bcs.n	409228 <__udivdi3+0x238>
  4091d4:	429a      	cmp	r2, r3
  4091d6:	d927      	bls.n	409228 <__udivdi3+0x238>
  4091d8:	3e02      	subs	r6, #2
  4091da:	442b      	add	r3, r5
  4091dc:	1a9b      	subs	r3, r3, r2
  4091de:	b280      	uxth	r0, r0
  4091e0:	fbb3 fcf7 	udiv	ip, r3, r7
  4091e4:	fb07 331c 	mls	r3, r7, ip, r3
  4091e8:	fb0e f10c 	mul.w	r1, lr, ip
  4091ec:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
  4091f0:	4299      	cmp	r1, r3
  4091f2:	d906      	bls.n	409202 <__udivdi3+0x212>
  4091f4:	195b      	adds	r3, r3, r5
  4091f6:	d219      	bcs.n	40922c <__udivdi3+0x23c>
  4091f8:	4299      	cmp	r1, r3
  4091fa:	d917      	bls.n	40922c <__udivdi3+0x23c>
  4091fc:	f1ac 0c02 	sub.w	ip, ip, #2
  409200:	442b      	add	r3, r5
  409202:	1a5a      	subs	r2, r3, r1
  409204:	ea4c 4606 	orr.w	r6, ip, r6, lsl #16
  409208:	e752      	b.n	4090b0 <__udivdi3+0xc0>
  40920a:	2001      	movs	r0, #1
  40920c:	e732      	b.n	409074 <__udivdi3+0x84>
  40920e:	3801      	subs	r0, #1
  409210:	e761      	b.n	4090d6 <__udivdi3+0xe6>
  409212:	3801      	subs	r0, #1
  409214:	e718      	b.n	409048 <__udivdi3+0x58>
  409216:	3b01      	subs	r3, #1
  409218:	e771      	b.n	4090fe <__udivdi3+0x10e>
  40921a:	3b01      	subs	r3, #1
  40921c:	e727      	b.n	40906e <__udivdi3+0x7e>
  40921e:	3c01      	subs	r4, #1
  409220:	e7ac      	b.n	40917c <__udivdi3+0x18c>
  409222:	f108 38ff 	add.w	r8, r8, #4294967295
  409226:	e797      	b.n	409158 <__udivdi3+0x168>
  409228:	3e01      	subs	r6, #1
  40922a:	e7d7      	b.n	4091dc <__udivdi3+0x1ec>
  40922c:	f10c 3cff 	add.w	ip, ip, #4294967295
  409230:	e7e7      	b.n	409202 <__udivdi3+0x212>
  409232:	4620      	mov	r0, r4
  409234:	2600      	movs	r6, #0
  409236:	e71d      	b.n	409074 <__udivdi3+0x84>
  409238:	39414350 	.word	0x39414350
  40923c:	3a323539 	.word	0x3a323539
  409240:	706d7420 	.word	0x706d7420
  409244:	25203a31 	.word	0x25203a31
  409248:	6d742078 	.word	0x6d742078
  40924c:	203a3270 	.word	0x203a3270
  409250:	74207825 	.word	0x74207825
  409254:	3a33706d 	.word	0x3a33706d
  409258:	20782520 	.word	0x20782520
  40925c:	34706d74 	.word	0x34706d74
  409260:	7825203a 	.word	0x7825203a
  409264:	00000a0d 	.word	0x00000a0d
  409268:	0001c200 	.word	0x0001c200
  40926c:	000000c0 	.word	0x000000c0
  409270:	00000800 	.word	0x00000800
	...
  409280:	202d462d 	.word	0x202d462d
  409284:	74737953 	.word	0x74737953
  409288:	206b6369 	.word	0x206b6369
  40928c:	666e6f63 	.word	0x666e6f63
  409290:	72756769 	.word	0x72756769
  409294:	6f697461 	.word	0x6f697461
  409298:	7265206e 	.word	0x7265206e
  40929c:	0d726f72 	.word	0x0d726f72
  4092a0:	00000000 	.word	0x00000000
  4092a4:	00000960 	.word	0x00000960
  4092a8:	000000c0 	.word	0x000000c0
  4092ac:	00000800 	.word	0x00000800
  4092b0:	00000000 	.word	0x00000000
  4092b4:	00006325 	.word	0x00006325
  4092b8:	20636461 	.word	0x20636461
  4092bc:	25206863 	.word	0x25206863
  4092c0:	25203a64 	.word	0x25203a64
  4092c4:	0a0d7834 	.word	0x0a0d7834
  4092c8:	00000000 	.word	0x00000000
  4092cc:	61766e49 	.word	0x61766e49
  4092d0:	2064696c 	.word	0x2064696c
  4092d4:	69726573 	.word	0x69726573
  4092d8:	49206c61 	.word	0x49206c61
  4092dc:	68632044 	.word	0x68632044
  4092e0:	736b6365 	.word	0x736b6365
  4092e4:	0d2e6d75 	.word	0x0d2e6d75
  4092e8:	0000000a 	.word	0x0000000a
  4092ec:	2044454c 	.word	0x2044454c
  4092f0:	72616f62 	.word	0x72616f62
  4092f4:	64252064 	.word	0x64252064
  4092f8:	72657320 	.word	0x72657320
  4092fc:	206c6169 	.word	0x206c6169
  409300:	203a4449 	.word	0x203a4449
  409304:	78257825 	.word	0x78257825
  409308:	78257825 	.word	0x78257825
  40930c:	78257825 	.word	0x78257825
  409310:	00000a0d 	.word	0x00000a0d
  409314:	62206f6e 	.word	0x62206f6e
  409318:	6472616f 	.word	0x6472616f
  40931c:	69687420 	.word	0x69687420
  409320:	6c732073 	.word	0x6c732073
  409324:	0a0d746f 	.word	0x0a0d746f
  409328:	00000000 	.word	0x00000000
  40932c:	64616552 	.word	0x64616552
  409330:	000a0d79 	.word	0x000a0d79
  409334:	61656c43 	.word	0x61656c43
  409338:	000a0d6e 	.word	0x000a0d6e
  40933c:	74726944 	.word	0x74726944
  409340:	000a0d79 	.word	0x000a0d79
  409344:	6f727245 	.word	0x6f727245
  409348:	000a0d72 	.word	0x000a0d72
  40934c:	6c656853 	.word	0x6c656853
  409350:	0a0d3166 	.word	0x0a0d3166
  409354:	00000000 	.word	0x00000000
  409358:	6c656853 	.word	0x6c656853
  40935c:	0a0d3266 	.word	0x0a0d3266
  409360:	00000000 	.word	0x00000000
  409364:	6c656853 	.word	0x6c656853
  409368:	0a0d3366 	.word	0x0a0d3366
  40936c:	00000000 	.word	0x00000000
  409370:	6c656853 	.word	0x6c656853
  409374:	0a0d3466 	.word	0x0a0d3466
  409378:	00000000 	.word	0x00000000
  40937c:	61656c43 	.word	0x61656c43
  409380:	676e696e 	.word	0x676e696e
  409384:	00000a0d 	.word	0x00000a0d
  409388:	55202d2d 	.word	0x55202d2d
  40938c:	54524153 	.word	0x54524153
  409390:	34535220 	.word	0x34535220
  409394:	45203538 	.word	0x45203538
  409398:	706d6178 	.word	0x706d6178
  40939c:	2d20656c 	.word	0x2d20656c
  4093a0:	2d0a0d2d 	.word	0x2d0a0d2d
  4093a4:	4153202d 	.word	0x4153202d
  4093a8:	3037454d 	.word	0x3037454d
  4093ac:	4c50582d 	.word	0x4c50582d
  4093b0:	2d2d2044 	.word	0x2d2d2044
  4093b4:	2d2d0a0d 	.word	0x2d2d0a0d
  4093b8:	6d6f4320 	.word	0x6d6f4320
  4093bc:	656c6970 	.word	0x656c6970
  4093c0:	46203a64 	.word	0x46203a64
  4093c4:	31206265 	.word	0x31206265
  4093c8:	30322033 	.word	0x30322033
  4093cc:	31203631 	.word	0x31203631
  4093d0:	34313a37 	.word	0x34313a37
  4093d4:	2032323a 	.word	0x2032323a
  4093d8:	000d2d2d 	.word	0x000d2d2d
  4093dc:	202d492d 	.word	0x202d492d
  4093e0:	72617453 	.word	0x72617453
  4093e4:	72742074 	.word	0x72742074
  4093e8:	6d736e61 	.word	0x6d736e61
  4093ec:	69747469 	.word	0x69747469
  4093f0:	0d21676e 	.word	0x0d21676e
  4093f4:	00000000 	.word	0x00000000
  4093f8:	202d492d 	.word	0x202d492d
  4093fc:	65636552 	.word	0x65636552
  409400:	6e697669 	.word	0x6e697669
  409404:	79732067 	.word	0x79732067
  409408:	6320636e 	.word	0x6320636e
  40940c:	61726168 	.word	0x61726168
  409410:	72657463 	.word	0x72657463
  409414:	00000d2e 	.word	0x00000d2e
  409418:	202d492d 	.word	0x202d492d
  40941c:	72617453 	.word	0x72617453
  409420:	65722074 	.word	0x65722074
  409424:	76696563 	.word	0x76696563
  409428:	21676e69 	.word	0x21676e69
  40942c:	0000000d 	.word	0x0000000d
  409430:	202d452d 	.word	0x202d452d
  409434:	6f727245 	.word	0x6f727245
  409438:	636f2072 	.word	0x636f2072
  40943c:	72727563 	.word	0x72727563
  409440:	77206465 	.word	0x77206465
  409444:	656c6968 	.word	0x656c6968
  409448:	63657220 	.word	0x63657220
  40944c:	69766965 	.word	0x69766965
  409450:	0d21676e 	.word	0x0d21676e
  409454:	00000000 	.word	0x00000000
  409458:	202d492d 	.word	0x202d492d
  40945c:	65636552 	.word	0x65636552
  409460:	64657669 	.word	0x64657669
  409464:	63757320 	.word	0x63757320
  409468:	73736563 	.word	0x73736563
  40946c:	6c6c7566 	.word	0x6c6c7566
  409470:	000d2179 	.word	0x000d2179
  409474:	00000043 	.word	0x00000043

00409478 <_global_impure_ptr>:
  409478:	20400088 0000000a                       ..@ ....

00409480 <zeroes.6911>:
  409480:	30303030 30303030 30303030 30303030     0000000000000000

00409490 <blanks.6910>:
  409490:	20202020 20202020 20202020 20202020                     
  4094a0:	00464e49 00666e69 004e414e 006e616e     INF.inf.NAN.nan.
  4094b0:	33323130 37363534 42413938 46454443     0123456789ABCDEF
  4094c0:	00000000 33323130 37363534 62613938     ....0123456789ab
  4094d0:	66656463 00000000 6c756e28 0000296c     cdef....(null)..
  4094e0:	00000030 69666e49 7974696e 00000000     0...Infinity....
  4094f0:	004e614e 49534f50 00000058 0000002e     NaN.POSIX.......

00409500 <__mprec_tens>:
  409500:	00000000 3ff00000 00000000 40240000     .......?......$@
  409510:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
  409520:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
  409530:	00000000 412e8480 00000000 416312d0     .......A......cA
  409540:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
  409550:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
  409560:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
  409570:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
  409580:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
  409590:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
  4095a0:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
  4095b0:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
  4095c0:	79d99db4 44ea7843                       ...yCx.D

004095c8 <p05.5302>:
  4095c8:	00000005 00000019 0000007d 00000000     ........}.......

004095d8 <__mprec_bigtens>:
  4095d8:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
  4095e8:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
  4095f8:	7f73bf3c 75154fdd                       <.s..O.u

00409600 <_init>:
  409600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  409602:	bf00      	nop
  409604:	bcf8      	pop	{r3, r4, r5, r6, r7}
  409606:	bc08      	pop	{r3}
  409608:	469e      	mov	lr, r3
  40960a:	4770      	bx	lr

0040960c <__init_array_start>:
  40960c:	004053c1 	.word	0x004053c1

00409610 <__frame_dummy_init_array_entry>:
  409610:	00400165                                e.@.

00409614 <_fini>:
  409614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  409616:	bf00      	nop
  409618:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40961a:	bc08      	pop	{r3}
  40961c:	469e      	mov	lr, r3
  40961e:	4770      	bx	lr

00409620 <__fini_array_start>:
  409620:	00400141 	.word	0x00400141
