
ecgen2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003b14  00400000  00400000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000008bc  20400000  00403b14  00010000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000008bc  204008bc  004043d0  000108bc  2**2
                  ALLOC
  3 .stack        00002000  20401178  00404c8c  000108bc  2**0
                  ALLOC
  4 .heap         00000200  20403178  00406c8c  000108bc  2**0
                  ALLOC
  5 .ARM.attributes 00000033  00000000  00000000  000108bc  2**0
                  CONTENTS, READONLY
  6 .comment      0000005b  00000000  00000000  000108ef  2**0
                  CONTENTS, READONLY
  7 .debug_info   0000aa38  00000000  00000000  0001094a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000016dd  00000000  00000000  0001b382  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00006d34  00000000  00000000  0001ca5f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000b78  00000000  00000000  00023793  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000aa8  00000000  00000000  0002430b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0001ce8b  00000000  00000000  00024db3  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00009415  00000000  00000000  00041c3e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0008a4da  00000000  00000000  0004b053  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00003ab8  00000000  00000000  000d5530  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <_sfixed>:
  400000:	20403178 	.word	0x20403178
  400004:	004011d1 	.word	0x004011d1
  400008:	00401255 	.word	0x00401255
  40000c:	00401255 	.word	0x00401255
  400010:	00401255 	.word	0x00401255
  400014:	00401255 	.word	0x00401255
  400018:	00401255 	.word	0x00401255
	...
  40002c:	00401255 	.word	0x00401255
  400030:	00401255 	.word	0x00401255
  400034:	00000000 	.word	0x00000000
  400038:	00401255 	.word	0x00401255
  40003c:	00401afd 	.word	0x00401afd
  400040:	00401255 	.word	0x00401255
  400044:	00401255 	.word	0x00401255
  400048:	00401255 	.word	0x00401255
  40004c:	00401255 	.word	0x00401255
  400050:	00401255 	.word	0x00401255
  400054:	00401255 	.word	0x00401255
  400058:	00401255 	.word	0x00401255
  40005c:	00401255 	.word	0x00401255
  400060:	00401255 	.word	0x00401255
  400064:	00000000 	.word	0x00000000
  400068:	00400aa5 	.word	0x00400aa5
  40006c:	00400abd 	.word	0x00400abd
  400070:	00400ad5 	.word	0x00400ad5
  400074:	00401b25 	.word	0x00401b25
  400078:	00401255 	.word	0x00401255
  40007c:	00401255 	.word	0x00401255
  400080:	00400aed 	.word	0x00400aed
  400084:	00400b05 	.word	0x00400b05
  400088:	00401255 	.word	0x00401255
  40008c:	00401255 	.word	0x00401255
  400090:	00401255 	.word	0x00401255
  400094:	00401255 	.word	0x00401255
  400098:	00401255 	.word	0x00401255
  40009c:	00401255 	.word	0x00401255
  4000a0:	00401255 	.word	0x00401255
  4000a4:	00401255 	.word	0x00401255
  4000a8:	00401255 	.word	0x00401255
  4000ac:	00401255 	.word	0x00401255
  4000b0:	00401255 	.word	0x00401255
  4000b4:	00401255 	.word	0x00401255
  4000b8:	00401255 	.word	0x00401255
  4000bc:	00401255 	.word	0x00401255
  4000c0:	00401255 	.word	0x00401255
  4000c4:	00401255 	.word	0x00401255
  4000c8:	00401255 	.word	0x00401255
  4000cc:	00401255 	.word	0x00401255
  4000d0:	00000000 	.word	0x00000000
  4000d4:	00401255 	.word	0x00401255
  4000d8:	00000000 	.word	0x00000000
  4000dc:	00401255 	.word	0x00401255
  4000e0:	00401255 	.word	0x00401255
  4000e4:	00401255 	.word	0x00401255
  4000e8:	00401255 	.word	0x00401255
  4000ec:	00401255 	.word	0x00401255
  4000f0:	00401255 	.word	0x00401255
  4000f4:	00401255 	.word	0x00401255
  4000f8:	00401255 	.word	0x00401255
  4000fc:	00401255 	.word	0x00401255
  400100:	00401255 	.word	0x00401255
  400104:	00401255 	.word	0x00401255
  400108:	00401255 	.word	0x00401255
  40010c:	00401255 	.word	0x00401255
  400110:	00401255 	.word	0x00401255
	...
  400120:	00401255 	.word	0x00401255
  400124:	00401255 	.word	0x00401255
  400128:	00401255 	.word	0x00401255
  40012c:	00401255 	.word	0x00401255
  400130:	00401255 	.word	0x00401255
  400134:	00000000 	.word	0x00000000
  400138:	00401255 	.word	0x00401255
  40013c:	00401255 	.word	0x00401255

00400140 <__do_global_dtors_aux>:
  400140:	b510      	push	{r4, lr}
  400142:	4c05      	ldr	r4, [pc, #20]	; (400158 <__do_global_dtors_aux+0x18>)
  400144:	7823      	ldrb	r3, [r4, #0]
  400146:	b933      	cbnz	r3, 400156 <__do_global_dtors_aux+0x16>
  400148:	4b04      	ldr	r3, [pc, #16]	; (40015c <__do_global_dtors_aux+0x1c>)
  40014a:	b113      	cbz	r3, 400152 <__do_global_dtors_aux+0x12>
  40014c:	4804      	ldr	r0, [pc, #16]	; (400160 <__do_global_dtors_aux+0x20>)
  40014e:	f3af 8000 	nop.w
  400152:	2301      	movs	r3, #1
  400154:	7023      	strb	r3, [r4, #0]
  400156:	bd10      	pop	{r4, pc}
  400158:	204008bc 	.word	0x204008bc
  40015c:	00000000 	.word	0x00000000
  400160:	00403b14 	.word	0x00403b14

00400164 <frame_dummy>:
  400164:	4b08      	ldr	r3, [pc, #32]	; (400188 <frame_dummy+0x24>)
  400166:	b510      	push	{r4, lr}
  400168:	b11b      	cbz	r3, 400172 <frame_dummy+0xe>
  40016a:	4808      	ldr	r0, [pc, #32]	; (40018c <frame_dummy+0x28>)
  40016c:	4908      	ldr	r1, [pc, #32]	; (400190 <frame_dummy+0x2c>)
  40016e:	f3af 8000 	nop.w
  400172:	4808      	ldr	r0, [pc, #32]	; (400194 <frame_dummy+0x30>)
  400174:	6803      	ldr	r3, [r0, #0]
  400176:	b903      	cbnz	r3, 40017a <frame_dummy+0x16>
  400178:	bd10      	pop	{r4, pc}
  40017a:	4b07      	ldr	r3, [pc, #28]	; (400198 <frame_dummy+0x34>)
  40017c:	2b00      	cmp	r3, #0
  40017e:	d0fb      	beq.n	400178 <frame_dummy+0x14>
  400180:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400184:	4718      	bx	r3
  400186:	bf00      	nop
  400188:	00000000 	.word	0x00000000
  40018c:	00403b14 	.word	0x00403b14
  400190:	204008c0 	.word	0x204008c0
  400194:	00403b14 	.word	0x00403b14
  400198:	00000000 	.word	0x00000000

0040019c <osc_enable>:
#define OSC_MAINCK_XTAL_HZ      BOARD_FREQ_MAINCK_XTAL    //!< External crystal oscillator.
#define OSC_MAINCK_BYPASS_HZ    BOARD_FREQ_MAINCK_BYPASS  //!< External bypass oscillator.
//@}

static inline void osc_enable(uint32_t ul_id)
{
  40019c:	b580      	push	{r7, lr}
  40019e:	b082      	sub	sp, #8
  4001a0:	af00      	add	r7, sp, #0
  4001a2:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  4001a4:	687b      	ldr	r3, [r7, #4]
  4001a6:	2b07      	cmp	r3, #7
  4001a8:	d830      	bhi.n	40020c <osc_enable+0x70>
  4001aa:	a201      	add	r2, pc, #4	; (adr r2, 4001b0 <osc_enable+0x14>)
  4001ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4001b0:	0040020d 	.word	0x0040020d
  4001b4:	004001d1 	.word	0x004001d1
  4001b8:	004001d9 	.word	0x004001d9
  4001bc:	004001e1 	.word	0x004001e1
  4001c0:	004001e9 	.word	0x004001e9
  4001c4:	004001f1 	.word	0x004001f1
  4001c8:	004001f9 	.word	0x004001f9
  4001cc:	00400203 	.word	0x00400203
	case OSC_SLCK_32K_RC:
		break;

	case OSC_SLCK_32K_XTAL:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
  4001d0:	2000      	movs	r0, #0
  4001d2:	4b10      	ldr	r3, [pc, #64]	; (400214 <osc_enable+0x78>)
  4001d4:	4798      	blx	r3
		break;
  4001d6:	e019      	b.n	40020c <osc_enable+0x70>

	case OSC_SLCK_32K_BYPASS:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
  4001d8:	2001      	movs	r0, #1
  4001da:	4b0e      	ldr	r3, [pc, #56]	; (400214 <osc_enable+0x78>)
  4001dc:	4798      	blx	r3
		break;
  4001de:	e015      	b.n	40020c <osc_enable+0x70>


	case OSC_MAINCK_4M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
  4001e0:	2000      	movs	r0, #0
  4001e2:	4b0d      	ldr	r3, [pc, #52]	; (400218 <osc_enable+0x7c>)
  4001e4:	4798      	blx	r3
		break;
  4001e6:	e011      	b.n	40020c <osc_enable+0x70>

	case OSC_MAINCK_8M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
  4001e8:	2010      	movs	r0, #16
  4001ea:	4b0b      	ldr	r3, [pc, #44]	; (400218 <osc_enable+0x7c>)
  4001ec:	4798      	blx	r3
		break;
  4001ee:	e00d      	b.n	40020c <osc_enable+0x70>

	case OSC_MAINCK_12M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
  4001f0:	2020      	movs	r0, #32
  4001f2:	4b09      	ldr	r3, [pc, #36]	; (400218 <osc_enable+0x7c>)
  4001f4:	4798      	blx	r3
		break;
  4001f6:	e009      	b.n	40020c <osc_enable+0x70>


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  4001f8:	2000      	movs	r0, #0
  4001fa:	213e      	movs	r1, #62	; 0x3e
  4001fc:	4b07      	ldr	r3, [pc, #28]	; (40021c <osc_enable+0x80>)
  4001fe:	4798      	blx	r3
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
  400200:	e004      	b.n	40020c <osc_enable+0x70>

	case OSC_MAINCK_BYPASS:
		pmc_switch_mainck_to_xtal(PMC_OSC_BYPASS,
  400202:	2001      	movs	r0, #1
  400204:	213e      	movs	r1, #62	; 0x3e
  400206:	4b05      	ldr	r3, [pc, #20]	; (40021c <osc_enable+0x80>)
  400208:	4798      	blx	r3
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
  40020a:	bf00      	nop
	}
}
  40020c:	3708      	adds	r7, #8
  40020e:	46bd      	mov	sp, r7
  400210:	bd80      	pop	{r7, pc}
  400212:	bf00      	nop
  400214:	00400c19 	.word	0x00400c19
  400218:	00400c85 	.word	0x00400c85
  40021c:	00400cf5 	.word	0x00400cf5

00400220 <osc_is_ready>:
		break;
	}
}

static inline bool osc_is_ready(uint32_t ul_id)
{
  400220:	b580      	push	{r7, lr}
  400222:	b082      	sub	sp, #8
  400224:	af00      	add	r7, sp, #0
  400226:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  400228:	687b      	ldr	r3, [r7, #4]
  40022a:	2b07      	cmp	r3, #7
  40022c:	d826      	bhi.n	40027c <osc_is_ready+0x5c>
  40022e:	a201      	add	r2, pc, #4	; (adr r2, 400234 <osc_is_ready+0x14>)
  400230:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  400234:	00400255 	.word	0x00400255
  400238:	00400259 	.word	0x00400259
  40023c:	00400259 	.word	0x00400259
  400240:	0040026b 	.word	0x0040026b
  400244:	0040026b 	.word	0x0040026b
  400248:	0040026b 	.word	0x0040026b
  40024c:	0040026b 	.word	0x0040026b
  400250:	0040026b 	.word	0x0040026b
	case OSC_SLCK_32K_RC:
		return 1;
  400254:	2301      	movs	r3, #1
  400256:	e012      	b.n	40027e <osc_is_ready+0x5e>

	case OSC_SLCK_32K_XTAL:
	case OSC_SLCK_32K_BYPASS:
		return pmc_osc_is_ready_32kxtal();
  400258:	4b0b      	ldr	r3, [pc, #44]	; (400288 <osc_is_ready+0x68>)
  40025a:	4798      	blx	r3
  40025c:	4603      	mov	r3, r0
  40025e:	2b00      	cmp	r3, #0
  400260:	bf14      	ite	ne
  400262:	2301      	movne	r3, #1
  400264:	2300      	moveq	r3, #0
  400266:	b2db      	uxtb	r3, r3
  400268:	e009      	b.n	40027e <osc_is_ready+0x5e>
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  40026a:	4b08      	ldr	r3, [pc, #32]	; (40028c <osc_is_ready+0x6c>)
  40026c:	4798      	blx	r3
  40026e:	4603      	mov	r3, r0
  400270:	2b00      	cmp	r3, #0
  400272:	bf14      	ite	ne
  400274:	2301      	movne	r3, #1
  400276:	2300      	moveq	r3, #0
  400278:	b2db      	uxtb	r3, r3
  40027a:	e000      	b.n	40027e <osc_is_ready+0x5e>
	}

	return 0;
  40027c:	2300      	movs	r3, #0
}
  40027e:	4618      	mov	r0, r3
  400280:	3708      	adds	r7, #8
  400282:	46bd      	mov	sp, r7
  400284:	bd80      	pop	{r7, pc}
  400286:	bf00      	nop
  400288:	00400c51 	.word	0x00400c51
  40028c:	00400d6d 	.word	0x00400d6d

00400290 <osc_get_rate>:

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  400290:	b480      	push	{r7}
  400292:	b083      	sub	sp, #12
  400294:	af00      	add	r7, sp, #0
  400296:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  400298:	687b      	ldr	r3, [r7, #4]
  40029a:	2b07      	cmp	r3, #7
  40029c:	d825      	bhi.n	4002ea <osc_get_rate+0x5a>
  40029e:	a201      	add	r2, pc, #4	; (adr r2, 4002a4 <osc_get_rate+0x14>)
  4002a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4002a4:	004002c5 	.word	0x004002c5
  4002a8:	004002cb 	.word	0x004002cb
  4002ac:	004002d1 	.word	0x004002d1
  4002b0:	004002d7 	.word	0x004002d7
  4002b4:	004002db 	.word	0x004002db
  4002b8:	004002df 	.word	0x004002df
  4002bc:	004002e3 	.word	0x004002e3
  4002c0:	004002e7 	.word	0x004002e7
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  4002c4:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  4002c8:	e010      	b.n	4002ec <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  4002ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4002ce:	e00d      	b.n	4002ec <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  4002d0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4002d4:	e00a      	b.n	4002ec <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  4002d6:	4b08      	ldr	r3, [pc, #32]	; (4002f8 <osc_get_rate+0x68>)
  4002d8:	e008      	b.n	4002ec <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  4002da:	4b08      	ldr	r3, [pc, #32]	; (4002fc <osc_get_rate+0x6c>)
  4002dc:	e006      	b.n	4002ec <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  4002de:	4b08      	ldr	r3, [pc, #32]	; (400300 <osc_get_rate+0x70>)
  4002e0:	e004      	b.n	4002ec <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  4002e2:	4b07      	ldr	r3, [pc, #28]	; (400300 <osc_get_rate+0x70>)
  4002e4:	e002      	b.n	4002ec <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  4002e6:	4b06      	ldr	r3, [pc, #24]	; (400300 <osc_get_rate+0x70>)
  4002e8:	e000      	b.n	4002ec <osc_get_rate+0x5c>
	}

	return 0;
  4002ea:	2300      	movs	r3, #0
}
  4002ec:	4618      	mov	r0, r3
  4002ee:	370c      	adds	r7, #12
  4002f0:	46bd      	mov	sp, r7
  4002f2:	f85d 7b04 	ldr.w	r7, [sp], #4
  4002f6:	4770      	bx	lr
  4002f8:	003d0900 	.word	0x003d0900
  4002fc:	007a1200 	.word	0x007a1200
  400300:	00b71b00 	.word	0x00b71b00

00400304 <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
  400304:	b580      	push	{r7, lr}
  400306:	b082      	sub	sp, #8
  400308:	af00      	add	r7, sp, #0
  40030a:	4603      	mov	r3, r0
  40030c:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
  40030e:	bf00      	nop
  400310:	79fb      	ldrb	r3, [r7, #7]
  400312:	4618      	mov	r0, r3
  400314:	4b05      	ldr	r3, [pc, #20]	; (40032c <osc_wait_ready+0x28>)
  400316:	4798      	blx	r3
  400318:	4603      	mov	r3, r0
  40031a:	f083 0301 	eor.w	r3, r3, #1
  40031e:	b2db      	uxtb	r3, r3
  400320:	2b00      	cmp	r3, #0
  400322:	d1f5      	bne.n	400310 <osc_wait_ready+0xc>
		/* Do nothing */
	}
}
  400324:	3708      	adds	r7, #8
  400326:	46bd      	mov	sp, r7
  400328:	bd80      	pop	{r7, pc}
  40032a:	bf00      	nop
  40032c:	00400221 	.word	0x00400221

00400330 <pll_config_init>:
 * hardware mul+1 is hidden in this implementation. Use mul as mul effective
 * value.
 */
static inline void pll_config_init(struct pll_config *p_cfg,
		enum pll_source e_src, uint32_t ul_div, uint32_t ul_mul)
{
  400330:	b580      	push	{r7, lr}
  400332:	b086      	sub	sp, #24
  400334:	af00      	add	r7, sp, #0
  400336:	60f8      	str	r0, [r7, #12]
  400338:	607a      	str	r2, [r7, #4]
  40033a:	603b      	str	r3, [r7, #0]
  40033c:	460b      	mov	r3, r1
  40033e:	72fb      	strb	r3, [r7, #11]
	uint32_t vco_hz;

	Assert(e_src < PLL_NR_SOURCES);

	if (ul_div == 0 && ul_mul == 0) { /* Must only be true for UTMI PLL */
  400340:	687b      	ldr	r3, [r7, #4]
  400342:	2b00      	cmp	r3, #0
  400344:	d107      	bne.n	400356 <pll_config_init+0x26>
  400346:	683b      	ldr	r3, [r7, #0]
  400348:	2b00      	cmp	r3, #0
  40034a:	d104      	bne.n	400356 <pll_config_init+0x26>
		p_cfg->ctrl = CKGR_UCKR_UPLLCOUNT(PLL_COUNT);
  40034c:	68fb      	ldr	r3, [r7, #12]
  40034e:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
  400352:	601a      	str	r2, [r3, #0]
  400354:	e019      	b.n	40038a <pll_config_init+0x5a>
	} else { /* PLLA */
	/* Calculate internal VCO frequency */
	vco_hz = osc_get_rate(e_src) / ul_div;
  400356:	7afb      	ldrb	r3, [r7, #11]
  400358:	4618      	mov	r0, r3
  40035a:	4b0d      	ldr	r3, [pc, #52]	; (400390 <pll_config_init+0x60>)
  40035c:	4798      	blx	r3
  40035e:	4602      	mov	r2, r0
  400360:	687b      	ldr	r3, [r7, #4]
  400362:	fbb2 f3f3 	udiv	r3, r2, r3
  400366:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_INPUT_MIN_HZ);
	Assert(vco_hz <= PLL_INPUT_MAX_HZ);

	vco_hz *= ul_mul;
  400368:	697b      	ldr	r3, [r7, #20]
  40036a:	683a      	ldr	r2, [r7, #0]
  40036c:	fb02 f303 	mul.w	r3, r2, r3
  400370:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_OUTPUT_MIN_HZ);
	Assert(vco_hz <= PLL_OUTPUT_MAX_HZ);

	/* PMC hardware will automatically make it mul+1 */
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) | CKGR_PLLAR_DIVA(ul_div)  \
  400372:	683b      	ldr	r3, [r7, #0]
  400374:	3b01      	subs	r3, #1
  400376:	041a      	lsls	r2, r3, #16
  400378:	4b06      	ldr	r3, [pc, #24]	; (400394 <pll_config_init+0x64>)
  40037a:	4013      	ands	r3, r2
  40037c:	687a      	ldr	r2, [r7, #4]
  40037e:	b2d2      	uxtb	r2, r2
  400380:	4313      	orrs	r3, r2
		| CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
  400382:	f443 527c 	orr.w	r2, r3, #16128	; 0x3f00
	vco_hz *= ul_mul;
	Assert(vco_hz >= PLL_OUTPUT_MIN_HZ);
	Assert(vco_hz <= PLL_OUTPUT_MAX_HZ);

	/* PMC hardware will automatically make it mul+1 */
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) | CKGR_PLLAR_DIVA(ul_div)  \
  400386:	68fb      	ldr	r3, [r7, #12]
  400388:	601a      	str	r2, [r3, #0]
		| CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
	}
}
  40038a:	3718      	adds	r7, #24
  40038c:	46bd      	mov	sp, r7
  40038e:	bd80      	pop	{r7, pc}
  400390:	00400291 	.word	0x00400291
  400394:	07ff0000 	.word	0x07ff0000

00400398 <pll_enable>:
		PMC->CKGR_UCKR = p_cfg->ctrl;
	}
}

static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
  400398:	b580      	push	{r7, lr}
  40039a:	b082      	sub	sp, #8
  40039c:	af00      	add	r7, sp, #0
  40039e:	6078      	str	r0, [r7, #4]
  4003a0:	6039      	str	r1, [r7, #0]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  4003a2:	683b      	ldr	r3, [r7, #0]
  4003a4:	2b00      	cmp	r3, #0
  4003a6:	d108      	bne.n	4003ba <pll_enable+0x22>
		pmc_disable_pllack(); // Always stop PLL first!
  4003a8:	4b08      	ldr	r3, [pc, #32]	; (4003cc <pll_enable+0x34>)
  4003aa:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  4003ac:	4a08      	ldr	r2, [pc, #32]	; (4003d0 <pll_enable+0x38>)
  4003ae:	687b      	ldr	r3, [r7, #4]
  4003b0:	681b      	ldr	r3, [r3, #0]
  4003b2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  4003b6:	6293      	str	r3, [r2, #40]	; 0x28
  4003b8:	e005      	b.n	4003c6 <pll_enable+0x2e>
	} else {
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
  4003ba:	4a05      	ldr	r2, [pc, #20]	; (4003d0 <pll_enable+0x38>)
  4003bc:	687b      	ldr	r3, [r7, #4]
  4003be:	681b      	ldr	r3, [r3, #0]
  4003c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  4003c4:	61d3      	str	r3, [r2, #28]
	}
}
  4003c6:	3708      	adds	r7, #8
  4003c8:	46bd      	mov	sp, r7
  4003ca:	bd80      	pop	{r7, pc}
  4003cc:	00400d89 	.word	0x00400d89
  4003d0:	400e0600 	.word	0x400e0600

004003d4 <pll_is_locked>:
		PMC->CKGR_UCKR &= ~CKGR_UCKR_UPLLEN;
	}
}

static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
  4003d4:	b580      	push	{r7, lr}
  4003d6:	b082      	sub	sp, #8
  4003d8:	af00      	add	r7, sp, #0
  4003da:	6078      	str	r0, [r7, #4]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  4003dc:	687b      	ldr	r3, [r7, #4]
  4003de:	2b00      	cmp	r3, #0
  4003e0:	d103      	bne.n	4003ea <pll_is_locked+0x16>
	return pmc_is_locked_pllack();
  4003e2:	4b05      	ldr	r3, [pc, #20]	; (4003f8 <pll_is_locked+0x24>)
  4003e4:	4798      	blx	r3
  4003e6:	4603      	mov	r3, r0
  4003e8:	e002      	b.n	4003f0 <pll_is_locked+0x1c>
	} else {
		return pmc_is_locked_upll();
  4003ea:	4b04      	ldr	r3, [pc, #16]	; (4003fc <pll_is_locked+0x28>)
  4003ec:	4798      	blx	r3
  4003ee:	4603      	mov	r3, r0
	}
}
  4003f0:	4618      	mov	r0, r3
  4003f2:	3708      	adds	r7, #8
  4003f4:	46bd      	mov	sp, r7
  4003f6:	bd80      	pop	{r7, pc}
  4003f8:	00400da1 	.word	0x00400da1
  4003fc:	00400dbd 	.word	0x00400dbd

00400400 <pll_enable_source>:

static inline void pll_enable_source(enum pll_source e_src)
{
  400400:	b580      	push	{r7, lr}
  400402:	b082      	sub	sp, #8
  400404:	af00      	add	r7, sp, #0
  400406:	4603      	mov	r3, r0
  400408:	71fb      	strb	r3, [r7, #7]
	switch (e_src) {
  40040a:	79fb      	ldrb	r3, [r7, #7]
  40040c:	3b03      	subs	r3, #3
  40040e:	2b04      	cmp	r3, #4
  400410:	d808      	bhi.n	400424 <pll_enable_source+0x24>
	case PLL_SRC_MAINCK_4M_RC:
	case PLL_SRC_MAINCK_8M_RC:
	case PLL_SRC_MAINCK_12M_RC:
	case PLL_SRC_MAINCK_XTAL:
	case PLL_SRC_MAINCK_BYPASS:
		osc_enable(e_src);
  400412:	79fb      	ldrb	r3, [r7, #7]
  400414:	4618      	mov	r0, r3
  400416:	4b05      	ldr	r3, [pc, #20]	; (40042c <pll_enable_source+0x2c>)
  400418:	4798      	blx	r3
		osc_wait_ready(e_src);
  40041a:	79fb      	ldrb	r3, [r7, #7]
  40041c:	4618      	mov	r0, r3
  40041e:	4b04      	ldr	r3, [pc, #16]	; (400430 <pll_enable_source+0x30>)
  400420:	4798      	blx	r3
		break;
  400422:	e000      	b.n	400426 <pll_enable_source+0x26>

	default:
		Assert(false);
		break;
  400424:	bf00      	nop
	}
}
  400426:	3708      	adds	r7, #8
  400428:	46bd      	mov	sp, r7
  40042a:	bd80      	pop	{r7, pc}
  40042c:	0040019d 	.word	0x0040019d
  400430:	00400305 	.word	0x00400305

00400434 <pll_wait_for_lock>:
 *
 * \retval STATUS_OK The PLL is now locked.
 * \retval ERR_TIMEOUT Timed out waiting for PLL to become locked.
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
  400434:	b580      	push	{r7, lr}
  400436:	b082      	sub	sp, #8
  400438:	af00      	add	r7, sp, #0
  40043a:	6078      	str	r0, [r7, #4]
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  40043c:	bf00      	nop
  40043e:	6878      	ldr	r0, [r7, #4]
  400440:	4b04      	ldr	r3, [pc, #16]	; (400454 <pll_wait_for_lock+0x20>)
  400442:	4798      	blx	r3
  400444:	4603      	mov	r3, r0
  400446:	2b00      	cmp	r3, #0
  400448:	d0f9      	beq.n	40043e <pll_wait_for_lock+0xa>
		/* Do nothing */
	}

	return 0;
  40044a:	2300      	movs	r3, #0
}
  40044c:	4618      	mov	r0, r3
  40044e:	3708      	adds	r7, #8
  400450:	46bd      	mov	sp, r7
  400452:	bd80      	pop	{r7, pc}
  400454:	004003d5 	.word	0x004003d5

00400458 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  400458:	b580      	push	{r7, lr}
  40045a:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  40045c:	2006      	movs	r0, #6
  40045e:	4b05      	ldr	r3, [pc, #20]	; (400474 <sysclk_get_main_hz+0x1c>)
  400460:	4798      	blx	r3
  400462:	4602      	mov	r2, r0
  400464:	4613      	mov	r3, r2
  400466:	009b      	lsls	r3, r3, #2
  400468:	4413      	add	r3, r2
  40046a:	009a      	lsls	r2, r3, #2
  40046c:	4413      	add	r3, r2
  40046e:	089b      	lsrs	r3, r3, #2
#endif
	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  400470:	4618      	mov	r0, r3
  400472:	bd80      	pop	{r7, pc}
  400474:	00400291 	.word	0x00400291

00400478 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
  400478:	b580      	push	{r7, lr}
  40047a:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  40047c:	4b02      	ldr	r3, [pc, #8]	; (400488 <sysclk_get_cpu_hz+0x10>)
  40047e:	4798      	blx	r3
  400480:	4603      	mov	r3, r0
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  400482:	4618      	mov	r0, r3
  400484:	bd80      	pop	{r7, pc}
  400486:	bf00      	nop
  400488:	00400459 	.word	0x00400459

0040048c <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  40048c:	b590      	push	{r4, r7, lr}
  40048e:	b083      	sub	sp, #12
  400490:	af00      	add	r7, sp, #0
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  400492:	4813      	ldr	r0, [pc, #76]	; (4004e0 <sysclk_init+0x54>)
  400494:	4b13      	ldr	r3, [pc, #76]	; (4004e4 <sysclk_init+0x58>)
  400496:	4798      	blx	r3
		pmc_switch_mck_to_mainck(CONFIG_SYSCLK_PRES);
	}

#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
  400498:	2006      	movs	r0, #6
  40049a:	4b13      	ldr	r3, [pc, #76]	; (4004e8 <sysclk_init+0x5c>)
  40049c:	4798      	blx	r3
		pll_config_defaults(&pllcfg, 0);
  40049e:	1d3b      	adds	r3, r7, #4
  4004a0:	4618      	mov	r0, r3
  4004a2:	2106      	movs	r1, #6
  4004a4:	2204      	movs	r2, #4
  4004a6:	2319      	movs	r3, #25
  4004a8:	4c10      	ldr	r4, [pc, #64]	; (4004ec <sysclk_init+0x60>)
  4004aa:	47a0      	blx	r4
		pll_enable(&pllcfg, 0);
  4004ac:	1d3b      	adds	r3, r7, #4
  4004ae:	4618      	mov	r0, r3
  4004b0:	2100      	movs	r1, #0
  4004b2:	4b0f      	ldr	r3, [pc, #60]	; (4004f0 <sysclk_init+0x64>)
  4004b4:	4798      	blx	r3
		pll_wait_for_lock(0);
  4004b6:	2000      	movs	r0, #0
  4004b8:	4b0e      	ldr	r3, [pc, #56]	; (4004f4 <sysclk_init+0x68>)
  4004ba:	4798      	blx	r3
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  4004bc:	2001      	movs	r0, #1
  4004be:	4b0e      	ldr	r3, [pc, #56]	; (4004f8 <sysclk_init+0x6c>)
  4004c0:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  4004c2:	2000      	movs	r0, #0
  4004c4:	4b0d      	ldr	r3, [pc, #52]	; (4004fc <sysclk_init+0x70>)
  4004c6:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  4004c8:	4b0d      	ldr	r3, [pc, #52]	; (400500 <sysclk_init+0x74>)
  4004ca:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  4004cc:	4b0d      	ldr	r3, [pc, #52]	; (400504 <sysclk_init+0x78>)
  4004ce:	4798      	blx	r3
  4004d0:	4603      	mov	r3, r0
  4004d2:	4618      	mov	r0, r3
  4004d4:	4b03      	ldr	r3, [pc, #12]	; (4004e4 <sysclk_init+0x58>)
  4004d6:	4798      	blx	r3

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
  4004d8:	370c      	adds	r7, #12
  4004da:	46bd      	mov	sp, r7
  4004dc:	bd90      	pop	{r4, r7, pc}
  4004de:	bf00      	nop
  4004e0:	11e1a300 	.word	0x11e1a300
  4004e4:	004013c5 	.word	0x004013c5
  4004e8:	00400401 	.word	0x00400401
  4004ec:	00400331 	.word	0x00400331
  4004f0:	00400399 	.word	0x00400399
  4004f4:	00400435 	.word	0x00400435
  4004f8:	00400b1d 	.word	0x00400b1d
  4004fc:	00400b95 	.word	0x00400b95
  400500:	0040125d 	.word	0x0040125d
  400504:	00400479 	.word	0x00400479

00400508 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  400508:	b580      	push	{r7, lr}
  40050a:	b086      	sub	sp, #24
  40050c:	af00      	add	r7, sp, #0
  40050e:	60f8      	str	r0, [r7, #12]
  400510:	60b9      	str	r1, [r7, #8]
  400512:	607a      	str	r2, [r7, #4]
	int nChars = 0;
  400514:	2300      	movs	r3, #0
  400516:	617b      	str	r3, [r7, #20]

	if (file != 0) {
  400518:	68fb      	ldr	r3, [r7, #12]
  40051a:	2b00      	cmp	r3, #0
  40051c:	d002      	beq.n	400524 <_read+0x1c>
		return -1;
  40051e:	f04f 33ff 	mov.w	r3, #4294967295
  400522:	e014      	b.n	40054e <_read+0x46>
	}

	for (; len > 0; --len) {
  400524:	e00f      	b.n	400546 <_read+0x3e>
		ptr_get(stdio_base, ptr);
  400526:	4b0c      	ldr	r3, [pc, #48]	; (400558 <_read+0x50>)
  400528:	681b      	ldr	r3, [r3, #0]
  40052a:	4a0c      	ldr	r2, [pc, #48]	; (40055c <_read+0x54>)
  40052c:	6812      	ldr	r2, [r2, #0]
  40052e:	4610      	mov	r0, r2
  400530:	68b9      	ldr	r1, [r7, #8]
  400532:	4798      	blx	r3
		ptr++;
  400534:	68bb      	ldr	r3, [r7, #8]
  400536:	3301      	adds	r3, #1
  400538:	60bb      	str	r3, [r7, #8]
		nChars++;
  40053a:	697b      	ldr	r3, [r7, #20]
  40053c:	3301      	adds	r3, #1
  40053e:	617b      	str	r3, [r7, #20]

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
  400540:	687b      	ldr	r3, [r7, #4]
  400542:	3b01      	subs	r3, #1
  400544:	607b      	str	r3, [r7, #4]
  400546:	687b      	ldr	r3, [r7, #4]
  400548:	2b00      	cmp	r3, #0
  40054a:	dcec      	bgt.n	400526 <_read+0x1e>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
  40054c:	697b      	ldr	r3, [r7, #20]
}
  40054e:	4618      	mov	r0, r3
  400550:	3718      	adds	r7, #24
  400552:	46bd      	mov	sp, r7
  400554:	bd80      	pop	{r7, pc}
  400556:	bf00      	nop
  400558:	20400990 	.word	0x20400990
  40055c:	20400998 	.word	0x20400998

00400560 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
  400560:	b580      	push	{r7, lr}
  400562:	b086      	sub	sp, #24
  400564:	af00      	add	r7, sp, #0
  400566:	60f8      	str	r0, [r7, #12]
  400568:	60b9      	str	r1, [r7, #8]
  40056a:	607a      	str	r2, [r7, #4]
	int nChars = 0;
  40056c:	2300      	movs	r3, #0
  40056e:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
  400570:	68fb      	ldr	r3, [r7, #12]
  400572:	2b01      	cmp	r3, #1
  400574:	d008      	beq.n	400588 <_write+0x28>
  400576:	68fb      	ldr	r3, [r7, #12]
  400578:	2b02      	cmp	r3, #2
  40057a:	d005      	beq.n	400588 <_write+0x28>
  40057c:	68fb      	ldr	r3, [r7, #12]
  40057e:	2b03      	cmp	r3, #3
  400580:	d002      	beq.n	400588 <_write+0x28>
		return -1;
  400582:	f04f 33ff 	mov.w	r3, #4294967295
  400586:	e01a      	b.n	4005be <_write+0x5e>
	}

	for (; len != 0; --len) {
  400588:	e015      	b.n	4005b6 <_write+0x56>
		if (ptr_put(stdio_base, *ptr++) < 0) {
  40058a:	4b0f      	ldr	r3, [pc, #60]	; (4005c8 <_write+0x68>)
  40058c:	681a      	ldr	r2, [r3, #0]
  40058e:	4b0f      	ldr	r3, [pc, #60]	; (4005cc <_write+0x6c>)
  400590:	6818      	ldr	r0, [r3, #0]
  400592:	68bb      	ldr	r3, [r7, #8]
  400594:	1c59      	adds	r1, r3, #1
  400596:	60b9      	str	r1, [r7, #8]
  400598:	781b      	ldrb	r3, [r3, #0]
  40059a:	4619      	mov	r1, r3
  40059c:	4790      	blx	r2
  40059e:	4603      	mov	r3, r0
  4005a0:	2b00      	cmp	r3, #0
  4005a2:	da02      	bge.n	4005aa <_write+0x4a>
			return -1;
  4005a4:	f04f 33ff 	mov.w	r3, #4294967295
  4005a8:	e009      	b.n	4005be <_write+0x5e>
		}
		++nChars;
  4005aa:	697b      	ldr	r3, [r7, #20]
  4005ac:	3301      	adds	r3, #1
  4005ae:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
  4005b0:	687b      	ldr	r3, [r7, #4]
  4005b2:	3b01      	subs	r3, #1
  4005b4:	607b      	str	r3, [r7, #4]
  4005b6:	687b      	ldr	r3, [r7, #4]
  4005b8:	2b00      	cmp	r3, #0
  4005ba:	d1e6      	bne.n	40058a <_write+0x2a>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
	}
	return nChars;
  4005bc:	697b      	ldr	r3, [r7, #20]
}
  4005be:	4618      	mov	r0, r3
  4005c0:	3718      	adds	r7, #24
  4005c2:	46bd      	mov	sp, r7
  4005c4:	bd80      	pop	{r7, pc}
  4005c6:	bf00      	nop
  4005c8:	20400994 	.word	0x20400994
  4005cc:	20400998 	.word	0x20400998

004005d0 <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
  4005d0:	b580      	push	{r7, lr}
  4005d2:	b082      	sub	sp, #8
  4005d4:	af00      	add	r7, sp, #0
  4005d6:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  4005d8:	6878      	ldr	r0, [r7, #4]
  4005da:	4b02      	ldr	r3, [pc, #8]	; (4005e4 <sysclk_enable_peripheral_clock+0x14>)
  4005dc:	4798      	blx	r3
}
  4005de:	3708      	adds	r7, #8
  4005e0:	46bd      	mov	sp, r7
  4005e2:	bd80      	pop	{r7, pc}
  4005e4:	00400dd9 	.word	0x00400dd9

004005e8 <ioport_init>:
 *
 * This function must be called before using any other functions in the IOPORT
 * service.
 */
static inline void ioport_init(void)
{
  4005e8:	b580      	push	{r7, lr}
  4005ea:	af00      	add	r7, sp, #0
}

__always_inline static void arch_ioport_init(void)
{
#ifdef ID_PIOA
	sysclk_enable_peripheral_clock(ID_PIOA);
  4005ec:	200a      	movs	r0, #10
  4005ee:	4b07      	ldr	r3, [pc, #28]	; (40060c <ioport_init+0x24>)
  4005f0:	4798      	blx	r3
#endif
#ifdef ID_PIOB
	sysclk_enable_peripheral_clock(ID_PIOB);
  4005f2:	200b      	movs	r0, #11
  4005f4:	4b05      	ldr	r3, [pc, #20]	; (40060c <ioport_init+0x24>)
  4005f6:	4798      	blx	r3
#endif
#ifdef ID_PIOC
	sysclk_enable_peripheral_clock(ID_PIOC);
  4005f8:	200c      	movs	r0, #12
  4005fa:	4b04      	ldr	r3, [pc, #16]	; (40060c <ioport_init+0x24>)
  4005fc:	4798      	blx	r3
#endif
#ifdef ID_PIOD
	sysclk_enable_peripheral_clock(ID_PIOD);
  4005fe:	2010      	movs	r0, #16
  400600:	4b02      	ldr	r3, [pc, #8]	; (40060c <ioport_init+0x24>)
  400602:	4798      	blx	r3
#endif
#ifdef ID_PIOE
	sysclk_enable_peripheral_clock(ID_PIOE);
  400604:	2011      	movs	r0, #17
  400606:	4b01      	ldr	r3, [pc, #4]	; (40060c <ioport_init+0x24>)
  400608:	4798      	blx	r3
	arch_ioport_init();
}
  40060a:	bd80      	pop	{r7, pc}
  40060c:	004005d1 	.word	0x004005d1

00400610 <ioport_disable_pin>:
 *        IOPORT_CREATE_PIN().
 *
 * \param pin IOPORT pin to disable
 */
static inline void ioport_disable_pin(ioport_pin_t pin)
{
  400610:	b480      	push	{r7}
  400612:	b089      	sub	sp, #36	; 0x24
  400614:	af00      	add	r7, sp, #0
  400616:	6078      	str	r0, [r7, #4]
  400618:	687b      	ldr	r3, [r7, #4]
  40061a:	61fb      	str	r3, [r7, #28]
  40061c:	69fb      	ldr	r3, [r7, #28]
  40061e:	61bb      	str	r3, [r7, #24]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  400620:	69bb      	ldr	r3, [r7, #24]
  400622:	095a      	lsrs	r2, r3, #5
  400624:	69fb      	ldr	r3, [r7, #28]
  400626:	617b      	str	r3, [r7, #20]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  400628:	697b      	ldr	r3, [r7, #20]
  40062a:	f003 031f 	and.w	r3, r3, #31
  40062e:	2101      	movs	r1, #1
  400630:	fa01 f303 	lsl.w	r3, r1, r3
  400634:	613a      	str	r2, [r7, #16]
  400636:	60fb      	str	r3, [r7, #12]
  400638:	693b      	ldr	r3, [r7, #16]
  40063a:	60bb      	str	r3, [r7, #8]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  40063c:	68ba      	ldr	r2, [r7, #8]
  40063e:	4b05      	ldr	r3, [pc, #20]	; (400654 <ioport_disable_pin+0x44>)
  400640:	4413      	add	r3, r2
  400642:	025b      	lsls	r3, r3, #9
  400644:	461a      	mov	r2, r3
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400646:	68fb      	ldr	r3, [r7, #12]
  400648:	6053      	str	r3, [r2, #4]
	arch_ioport_disable_pin(pin);
}
  40064a:	3724      	adds	r7, #36	; 0x24
  40064c:	46bd      	mov	sp, r7
  40064e:	f85d 7b04 	ldr.w	r7, [sp], #4
  400652:	4770      	bx	lr
  400654:	00200707 	.word	0x00200707

00400658 <ioport_set_pin_mode>:
 *
 * \param pin IOPORT pin to configure
 * \param mode Mode masks to configure for the specified pin (\ref ioport_modes)
 */
static inline void ioport_set_pin_mode(ioport_pin_t pin, ioport_mode_t mode)
{
  400658:	b480      	push	{r7}
  40065a:	b08d      	sub	sp, #52	; 0x34
  40065c:	af00      	add	r7, sp, #0
  40065e:	6078      	str	r0, [r7, #4]
  400660:	6039      	str	r1, [r7, #0]
  400662:	687b      	ldr	r3, [r7, #4]
  400664:	62fb      	str	r3, [r7, #44]	; 0x2c
  400666:	683b      	ldr	r3, [r7, #0]
  400668:	62bb      	str	r3, [r7, #40]	; 0x28
  40066a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  40066c:	627b      	str	r3, [r7, #36]	; 0x24
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  40066e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  400670:	095a      	lsrs	r2, r3, #5
  400672:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  400674:	623b      	str	r3, [r7, #32]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  400676:	6a3b      	ldr	r3, [r7, #32]
  400678:	f003 031f 	and.w	r3, r3, #31
  40067c:	2101      	movs	r1, #1
  40067e:	fa01 f303 	lsl.w	r3, r1, r3
  400682:	61fa      	str	r2, [r7, #28]
  400684:	61bb      	str	r3, [r7, #24]
  400686:	6abb      	ldr	r3, [r7, #40]	; 0x28
  400688:	617b      	str	r3, [r7, #20]
  40068a:	69fb      	ldr	r3, [r7, #28]
  40068c:	613b      	str	r3, [r7, #16]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  40068e:	693a      	ldr	r2, [r7, #16]
  400690:	4b37      	ldr	r3, [pc, #220]	; (400770 <ioport_set_pin_mode+0x118>)
  400692:	4413      	add	r3, r2
  400694:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_port_mode(ioport_port_t port,
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);
  400696:	60fb      	str	r3, [r7, #12]

	if (mode & IOPORT_MODE_PULLUP) {
  400698:	697b      	ldr	r3, [r7, #20]
  40069a:	f003 0308 	and.w	r3, r3, #8
  40069e:	2b00      	cmp	r3, #0
  4006a0:	d003      	beq.n	4006aa <ioport_set_pin_mode+0x52>
		base->PIO_PUER = mask;
  4006a2:	68fb      	ldr	r3, [r7, #12]
  4006a4:	69ba      	ldr	r2, [r7, #24]
  4006a6:	665a      	str	r2, [r3, #100]	; 0x64
  4006a8:	e002      	b.n	4006b0 <ioport_set_pin_mode+0x58>
	} else {
		base->PIO_PUDR = mask;
  4006aa:	68fb      	ldr	r3, [r7, #12]
  4006ac:	69ba      	ldr	r2, [r7, #24]
  4006ae:	661a      	str	r2, [r3, #96]	; 0x60
	}

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
  4006b0:	697b      	ldr	r3, [r7, #20]
  4006b2:	f003 0310 	and.w	r3, r3, #16
  4006b6:	2b00      	cmp	r3, #0
  4006b8:	d004      	beq.n	4006c4 <ioport_set_pin_mode+0x6c>
		base->PIO_PPDER = mask;
  4006ba:	68fb      	ldr	r3, [r7, #12]
  4006bc:	69ba      	ldr	r2, [r7, #24]
  4006be:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  4006c2:	e003      	b.n	4006cc <ioport_set_pin_mode+0x74>
	} else {
		base->PIO_PPDDR = mask;
  4006c4:	68fb      	ldr	r3, [r7, #12]
  4006c6:	69ba      	ldr	r2, [r7, #24]
  4006c8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	}
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
  4006cc:	697b      	ldr	r3, [r7, #20]
  4006ce:	f003 0320 	and.w	r3, r3, #32
  4006d2:	2b00      	cmp	r3, #0
  4006d4:	d003      	beq.n	4006de <ioport_set_pin_mode+0x86>
		base->PIO_MDER = mask;
  4006d6:	68fb      	ldr	r3, [r7, #12]
  4006d8:	69ba      	ldr	r2, [r7, #24]
  4006da:	651a      	str	r2, [r3, #80]	; 0x50
  4006dc:	e002      	b.n	4006e4 <ioport_set_pin_mode+0x8c>
	} else {
		base->PIO_MDDR = mask;
  4006de:	68fb      	ldr	r3, [r7, #12]
  4006e0:	69ba      	ldr	r2, [r7, #24]
  4006e2:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
  4006e4:	697b      	ldr	r3, [r7, #20]
  4006e6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
  4006ea:	2b00      	cmp	r3, #0
  4006ec:	d003      	beq.n	4006f6 <ioport_set_pin_mode+0x9e>
		base->PIO_IFER = mask;
  4006ee:	68fb      	ldr	r3, [r7, #12]
  4006f0:	69ba      	ldr	r2, [r7, #24]
  4006f2:	621a      	str	r2, [r3, #32]
  4006f4:	e002      	b.n	4006fc <ioport_set_pin_mode+0xa4>
	} else {
		base->PIO_IFDR = mask;
  4006f6:	68fb      	ldr	r3, [r7, #12]
  4006f8:	69ba      	ldr	r2, [r7, #24]
  4006fa:	625a      	str	r2, [r3, #36]	; 0x24
	}

	if (mode & IOPORT_MODE_DEBOUNCE) {
  4006fc:	697b      	ldr	r3, [r7, #20]
  4006fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
  400702:	2b00      	cmp	r3, #0
  400704:	d004      	beq.n	400710 <ioport_set_pin_mode+0xb8>
#if SAM3U || SAM3XA
		base->PIO_DIFSR = mask;
#else
		base->PIO_IFSCER = mask;
  400706:	68fb      	ldr	r3, [r7, #12]
  400708:	69ba      	ldr	r2, [r7, #24]
  40070a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  40070e:	e003      	b.n	400718 <ioport_set_pin_mode+0xc0>
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  400710:	68fb      	ldr	r3, [r7, #12]
  400712:	69ba      	ldr	r2, [r7, #24]
  400714:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABSR |= mask;
	} else {
		base->PIO_ABSR &= ~mask;
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
  400718:	697b      	ldr	r3, [r7, #20]
  40071a:	f003 0301 	and.w	r3, r3, #1
  40071e:	2b00      	cmp	r3, #0
  400720:	d006      	beq.n	400730 <ioport_set_pin_mode+0xd8>
		base->PIO_ABCDSR[0] |= mask;
  400722:	68fb      	ldr	r3, [r7, #12]
  400724:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400726:	69bb      	ldr	r3, [r7, #24]
  400728:	431a      	orrs	r2, r3
  40072a:	68fb      	ldr	r3, [r7, #12]
  40072c:	671a      	str	r2, [r3, #112]	; 0x70
  40072e:	e006      	b.n	40073e <ioport_set_pin_mode+0xe6>
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  400730:	68fb      	ldr	r3, [r7, #12]
  400732:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400734:	69bb      	ldr	r3, [r7, #24]
  400736:	43db      	mvns	r3, r3
  400738:	401a      	ands	r2, r3
  40073a:	68fb      	ldr	r3, [r7, #12]
  40073c:	671a      	str	r2, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
  40073e:	697b      	ldr	r3, [r7, #20]
  400740:	f003 0302 	and.w	r3, r3, #2
  400744:	2b00      	cmp	r3, #0
  400746:	d006      	beq.n	400756 <ioport_set_pin_mode+0xfe>
		base->PIO_ABCDSR[1] |= mask;
  400748:	68fb      	ldr	r3, [r7, #12]
  40074a:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  40074c:	69bb      	ldr	r3, [r7, #24]
  40074e:	431a      	orrs	r2, r3
  400750:	68fb      	ldr	r3, [r7, #12]
  400752:	675a      	str	r2, [r3, #116]	; 0x74
  400754:	e006      	b.n	400764 <ioport_set_pin_mode+0x10c>
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  400756:	68fb      	ldr	r3, [r7, #12]
  400758:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  40075a:	69bb      	ldr	r3, [r7, #24]
  40075c:	43db      	mvns	r3, r3
  40075e:	401a      	ands	r2, r3
  400760:	68fb      	ldr	r3, [r7, #12]
  400762:	675a      	str	r2, [r3, #116]	; 0x74
	arch_ioport_set_pin_mode(pin, mode);
}
  400764:	3734      	adds	r7, #52	; 0x34
  400766:	46bd      	mov	sp, r7
  400768:	f85d 7b04 	ldr.w	r7, [sp], #4
  40076c:	4770      	bx	lr
  40076e:	bf00      	nop
  400770:	00200707 	.word	0x00200707

00400774 <ioport_set_pin_dir>:
 * \param pin IOPORT pin to configure
 * \param dir Direction to set for the specified pin (\ref ioport_direction)
 */
static inline void ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
  400774:	b480      	push	{r7}
  400776:	b08d      	sub	sp, #52	; 0x34
  400778:	af00      	add	r7, sp, #0
  40077a:	6078      	str	r0, [r7, #4]
  40077c:	460b      	mov	r3, r1
  40077e:	70fb      	strb	r3, [r7, #3]
  400780:	687b      	ldr	r3, [r7, #4]
  400782:	62fb      	str	r3, [r7, #44]	; 0x2c
  400784:	78fb      	ldrb	r3, [r7, #3]
  400786:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  40078a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  40078c:	627b      	str	r3, [r7, #36]	; 0x24
  40078e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  400790:	623b      	str	r3, [r7, #32]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  400792:	6a3b      	ldr	r3, [r7, #32]
  400794:	095b      	lsrs	r3, r3, #5
  400796:	61fb      	str	r3, [r7, #28]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  400798:	69fa      	ldr	r2, [r7, #28]
  40079a:	4b17      	ldr	r3, [pc, #92]	; (4007f8 <ioport_set_pin_dir+0x84>)
  40079c:	4413      	add	r3, r2
  40079e:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);
  4007a0:	61bb      	str	r3, [r7, #24]

	if (dir == IOPORT_DIR_OUTPUT) {
  4007a2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  4007a6:	2b01      	cmp	r3, #1
  4007a8:	d109      	bne.n	4007be <ioport_set_pin_dir+0x4a>
  4007aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4007ac:	617b      	str	r3, [r7, #20]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  4007ae:	697b      	ldr	r3, [r7, #20]
  4007b0:	f003 031f 	and.w	r3, r3, #31
  4007b4:	2201      	movs	r2, #1
  4007b6:	409a      	lsls	r2, r3
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4007b8:	69bb      	ldr	r3, [r7, #24]
  4007ba:	611a      	str	r2, [r3, #16]
  4007bc:	e00c      	b.n	4007d8 <ioport_set_pin_dir+0x64>
	} else if (dir == IOPORT_DIR_INPUT) {
  4007be:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  4007c2:	2b00      	cmp	r3, #0
  4007c4:	d108      	bne.n	4007d8 <ioport_set_pin_dir+0x64>
  4007c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4007c8:	613b      	str	r3, [r7, #16]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  4007ca:	693b      	ldr	r3, [r7, #16]
  4007cc:	f003 031f 	and.w	r3, r3, #31
  4007d0:	2201      	movs	r2, #1
  4007d2:	409a      	lsls	r2, r3
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  4007d4:	69bb      	ldr	r3, [r7, #24]
  4007d6:	615a      	str	r2, [r3, #20]
  4007d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4007da:	60fb      	str	r3, [r7, #12]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  4007dc:	68fb      	ldr	r3, [r7, #12]
  4007de:	f003 031f 	and.w	r3, r3, #31
  4007e2:	2201      	movs	r2, #1
  4007e4:	409a      	lsls	r2, r3
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4007e6:	69bb      	ldr	r3, [r7, #24]
  4007e8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	arch_ioport_set_pin_dir(pin, dir);
}
  4007ec:	3734      	adds	r7, #52	; 0x34
  4007ee:	46bd      	mov	sp, r7
  4007f0:	f85d 7b04 	ldr.w	r7, [sp], #4
  4007f4:	4770      	bx	lr
  4007f6:	bf00      	nop
  4007f8:	00200707 	.word	0x00200707

004007fc <ioport_set_pin_level>:
 *
 * \param pin IOPORT pin to configure
 * \param level Logical value of the pin
 */
static inline void ioport_set_pin_level(ioport_pin_t pin, bool level)
{
  4007fc:	b480      	push	{r7}
  4007fe:	b08b      	sub	sp, #44	; 0x2c
  400800:	af00      	add	r7, sp, #0
  400802:	6078      	str	r0, [r7, #4]
  400804:	460b      	mov	r3, r1
  400806:	70fb      	strb	r3, [r7, #3]
  400808:	687b      	ldr	r3, [r7, #4]
  40080a:	627b      	str	r3, [r7, #36]	; 0x24
  40080c:	78fb      	ldrb	r3, [r7, #3]
  40080e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  400812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  400814:	61fb      	str	r3, [r7, #28]
  400816:	69fb      	ldr	r3, [r7, #28]
  400818:	61bb      	str	r3, [r7, #24]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  40081a:	69bb      	ldr	r3, [r7, #24]
  40081c:	095b      	lsrs	r3, r3, #5
  40081e:	617b      	str	r3, [r7, #20]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  400820:	697a      	ldr	r2, [r7, #20]
  400822:	4b10      	ldr	r3, [pc, #64]	; (400864 <ioport_set_pin_level+0x68>)
  400824:	4413      	add	r3, r2
  400826:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);
  400828:	613b      	str	r3, [r7, #16]

	if (level) {
  40082a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
  40082e:	2b00      	cmp	r3, #0
  400830:	d009      	beq.n	400846 <ioport_set_pin_level+0x4a>
  400832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  400834:	60fb      	str	r3, [r7, #12]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  400836:	68fb      	ldr	r3, [r7, #12]
  400838:	f003 031f 	and.w	r3, r3, #31
  40083c:	2201      	movs	r2, #1
  40083e:	409a      	lsls	r2, r3
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400840:	693b      	ldr	r3, [r7, #16]
  400842:	631a      	str	r2, [r3, #48]	; 0x30
  400844:	e008      	b.n	400858 <ioport_set_pin_level+0x5c>
  400846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  400848:	60bb      	str	r3, [r7, #8]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  40084a:	68bb      	ldr	r3, [r7, #8]
  40084c:	f003 031f 	and.w	r3, r3, #31
  400850:	2201      	movs	r2, #1
  400852:	409a      	lsls	r2, r3
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  400854:	693b      	ldr	r3, [r7, #16]
  400856:	635a      	str	r2, [r3, #52]	; 0x34
	arch_ioport_set_pin_level(pin, level);
}
  400858:	372c      	adds	r7, #44	; 0x2c
  40085a:	46bd      	mov	sp, r7
  40085c:	f85d 7b04 	ldr.w	r7, [sp], #4
  400860:	4770      	bx	lr
  400862:	bf00      	nop
  400864:	00200707 	.word	0x00200707

00400868 <ioport_set_pin_sense_mode>:
 * \param pin IOPORT pin to configure
 * \param pin_sense Edge to sense for the pin (\ref ioport_sense)
 */
static inline void ioport_set_pin_sense_mode(ioport_pin_t pin,
		enum ioport_sense pin_sense)
{
  400868:	b480      	push	{r7}
  40086a:	b08d      	sub	sp, #52	; 0x34
  40086c:	af00      	add	r7, sp, #0
  40086e:	6078      	str	r0, [r7, #4]
  400870:	460b      	mov	r3, r1
  400872:	70fb      	strb	r3, [r7, #3]
  400874:	687b      	ldr	r3, [r7, #4]
  400876:	62fb      	str	r3, [r7, #44]	; 0x2c
  400878:	78fb      	ldrb	r3, [r7, #3]
  40087a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  40087e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  400880:	627b      	str	r3, [r7, #36]	; 0x24
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  400882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  400884:	095a      	lsrs	r2, r3, #5
  400886:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  400888:	623b      	str	r3, [r7, #32]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  40088a:	6a3b      	ldr	r3, [r7, #32]
  40088c:	f003 031f 	and.w	r3, r3, #31
  400890:	2101      	movs	r1, #1
  400892:	fa01 f303 	lsl.w	r3, r1, r3
  400896:	61fa      	str	r2, [r7, #28]
  400898:	61bb      	str	r3, [r7, #24]
  40089a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  40089e:	75fb      	strb	r3, [r7, #23]
  4008a0:	69fb      	ldr	r3, [r7, #28]
  4008a2:	613b      	str	r3, [r7, #16]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  4008a4:	693a      	ldr	r2, [r7, #16]
  4008a6:	4b22      	ldr	r3, [pc, #136]	; (400930 <ioport_set_pin_sense_mode+0xc8>)
  4008a8:	4413      	add	r3, r2
  4008aa:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_port_sense_mode(ioport_port_t port,
		ioport_port_mask_t mask, enum ioport_sense pin_sense)
{
	Pio *base = arch_ioport_port_to_base(port);
  4008ac:	60fb      	str	r3, [r7, #12]
	 *       1       0         0    IOPORT_SENSE_FALLING
	 *       1       0         1    IOPORT_SENSE_RISING
	 *       1       1         0    IOPORT_SENSE_LEVEL_LOW
	 *       1       1         1    IOPORT_SENSE_LEVEL_HIGH
	 */
	switch(pin_sense) {
  4008ae:	7dfb      	ldrb	r3, [r7, #23]
  4008b0:	3b01      	subs	r3, #1
  4008b2:	2b03      	cmp	r3, #3
  4008b4:	d82e      	bhi.n	400914 <ioport_set_pin_sense_mode+0xac>
  4008b6:	a201      	add	r2, pc, #4	; (adr r2, 4008bc <ioport_set_pin_sense_mode+0x54>)
  4008b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4008bc:	004008f1 	.word	0x004008f1
  4008c0:	00400903 	.word	0x00400903
  4008c4:	004008cd 	.word	0x004008cd
  4008c8:	004008df 	.word	0x004008df
	case IOPORT_SENSE_LEVEL_LOW:
		base->PIO_LSR = mask;
  4008cc:	68fb      	ldr	r3, [r7, #12]
  4008ce:	69ba      	ldr	r2, [r7, #24]
  4008d0:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
		base->PIO_FELLSR = mask;
  4008d4:	68fb      	ldr	r3, [r7, #12]
  4008d6:	69ba      	ldr	r2, [r7, #24]
  4008d8:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
  4008dc:	e01f      	b.n	40091e <ioport_set_pin_sense_mode+0xb6>
		break;
	case IOPORT_SENSE_LEVEL_HIGH:
		base->PIO_LSR = mask;
  4008de:	68fb      	ldr	r3, [r7, #12]
  4008e0:	69ba      	ldr	r2, [r7, #24]
  4008e2:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
		base->PIO_REHLSR = mask;
  4008e6:	68fb      	ldr	r3, [r7, #12]
  4008e8:	69ba      	ldr	r2, [r7, #24]
  4008ea:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  4008ee:	e016      	b.n	40091e <ioport_set_pin_sense_mode+0xb6>
		break;
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
  4008f0:	68fb      	ldr	r3, [r7, #12]
  4008f2:	69ba      	ldr	r2, [r7, #24]
  4008f4:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_FELLSR = mask;
  4008f8:	68fb      	ldr	r3, [r7, #12]
  4008fa:	69ba      	ldr	r2, [r7, #24]
  4008fc:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
  400900:	e00d      	b.n	40091e <ioport_set_pin_sense_mode+0xb6>
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  400902:	68fb      	ldr	r3, [r7, #12]
  400904:	69ba      	ldr	r2, [r7, #24]
  400906:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  40090a:	68fb      	ldr	r3, [r7, #12]
  40090c:	69ba      	ldr	r2, [r7, #24]
  40090e:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  400912:	e004      	b.n	40091e <ioport_set_pin_sense_mode+0xb6>
		break;
	default:
		base->PIO_AIMDR = mask;
  400914:	68fb      	ldr	r3, [r7, #12]
  400916:	69ba      	ldr	r2, [r7, #24]
  400918:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
  40091c:	e003      	b.n	400926 <ioport_set_pin_sense_mode+0xbe>
		return;
	}
	base->PIO_AIMER = mask;
  40091e:	68fb      	ldr	r3, [r7, #12]
  400920:	69ba      	ldr	r2, [r7, #24]
  400922:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	arch_ioport_set_pin_sense_mode(pin, pin_sense);
}
  400926:	3734      	adds	r7, #52	; 0x34
  400928:	46bd      	mov	sp, r7
  40092a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40092e:	4770      	bx	lr
  400930:	00200707 	.word	0x00200707

00400934 <board_init>:
	__ISB();
}
#endif

void board_init(void)
{
  400934:	b580      	push	{r7, lr}
  400936:	af00      	add	r7, sp, #0
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  400938:	4b1c      	ldr	r3, [pc, #112]	; (4009ac <board_init+0x78>)
  40093a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  40093e:	605a      	str	r2, [r3, #4]
#endif

	/* Initialize IOPORTs */
	ioport_init();
  400940:	4b1b      	ldr	r3, [pc, #108]	; (4009b0 <board_init+0x7c>)
  400942:	4798      	blx	r3

	/* Configure the pins connected to LED as output and set their
	 * default initial state to high (LED off).
	 */
	ioport_set_pin_dir(LED0_GPIO, IOPORT_DIR_OUTPUT);
  400944:	2050      	movs	r0, #80	; 0x50
  400946:	2101      	movs	r1, #1
  400948:	4b1a      	ldr	r3, [pc, #104]	; (4009b4 <board_init+0x80>)
  40094a:	4798      	blx	r3
	ioport_set_pin_level(LED0_GPIO, LED0_INACTIVE_LEVEL);
  40094c:	2050      	movs	r0, #80	; 0x50
  40094e:	2101      	movs	r1, #1
  400950:	4b19      	ldr	r3, [pc, #100]	; (4009b8 <board_init+0x84>)
  400952:	4798      	blx	r3

	/* Configure Push Button pins */
	ioport_set_pin_input_mode(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS,
  400954:	200b      	movs	r0, #11
  400956:	2100      	movs	r1, #0
  400958:	4b16      	ldr	r3, [pc, #88]	; (4009b4 <board_init+0x80>)
  40095a:	4798      	blx	r3
  40095c:	200b      	movs	r0, #11
  40095e:	2188      	movs	r1, #136	; 0x88
  400960:	4b16      	ldr	r3, [pc, #88]	; (4009bc <board_init+0x88>)
  400962:	4798      	blx	r3
  400964:	200b      	movs	r0, #11
  400966:	2102      	movs	r1, #2
  400968:	4b15      	ldr	r3, [pc, #84]	; (4009c0 <board_init+0x8c>)
  40096a:	4798      	blx	r3

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
//jsi 6feb16 we don't need rx	ioport_set_pin_peripheral_mode(USART0_RXD_GPIO, USART0_RXD_FLAGS); //jsi 6feb16 was USART1
//jsi 6feb16 we don't need	MATRIX->CCFG_SYSIO |= CCFG_SYSIO_SYSIO4;
	ioport_set_pin_peripheral_mode(PIO_PA10A_UTXD0, IOPORT_MODE_MUX_A); //jsi 6feb16 was USART1
  40096c:	f44f 6080 	mov.w	r0, #1024	; 0x400
  400970:	2100      	movs	r1, #0
  400972:	4b12      	ldr	r3, [pc, #72]	; (4009bc <board_init+0x88>)
  400974:	4798      	blx	r3
  400976:	f44f 6080 	mov.w	r0, #1024	; 0x400
  40097a:	4b12      	ldr	r3, [pc, #72]	; (4009c4 <board_init+0x90>)
  40097c:	4798      	blx	r3
#endif


#ifdef CONF_BOARD_USART_RXD
	/* Configure USART RXD pin */
	ioport_set_pin_peripheral_mode(USART0_RXD_GPIO, USART0_RXD_FLAGS);
  40097e:	2020      	movs	r0, #32
  400980:	2102      	movs	r1, #2
  400982:	4b0e      	ldr	r3, [pc, #56]	; (4009bc <board_init+0x88>)
  400984:	4798      	blx	r3
  400986:	2020      	movs	r0, #32
  400988:	4b0e      	ldr	r3, [pc, #56]	; (4009c4 <board_init+0x90>)
  40098a:	4798      	blx	r3
#endif

#ifdef CONF_BOARD_USART_TXD
	/* Configure USART TXD pin */
	ioport_set_pin_peripheral_mode(USART0_TXD_GPIO, USART0_TXD_FLAGS);
  40098c:	2021      	movs	r0, #33	; 0x21
  40098e:	2102      	movs	r1, #2
  400990:	4b0a      	ldr	r3, [pc, #40]	; (4009bc <board_init+0x88>)
  400992:	4798      	blx	r3
  400994:	2021      	movs	r0, #33	; 0x21
  400996:	4b0b      	ldr	r3, [pc, #44]	; (4009c4 <board_init+0x90>)
  400998:	4798      	blx	r3
	ioport_set_pin_peripheral_mode(PIN_USART0_CTS_IDX,PIN_USART0_CTS_FLAGS);
#endif

#ifdef CONF_BOARD_USART_RTS
	/* Configure USART RTS pin */
	ioport_set_pin_peripheral_mode(PIN_USART0_RTS_IDX, PIN_USART0_RTS_FLAGS);
  40099a:	2023      	movs	r0, #35	; 0x23
  40099c:	2102      	movs	r1, #2
  40099e:	4b07      	ldr	r3, [pc, #28]	; (4009bc <board_init+0x88>)
  4009a0:	4798      	blx	r3
  4009a2:	2023      	movs	r0, #35	; 0x23
  4009a4:	4b07      	ldr	r3, [pc, #28]	; (4009c4 <board_init+0x90>)
  4009a6:	4798      	blx	r3
#endif

#ifdef CONF_BOARD_CONFIG_MPU_AT_INIT
	_setup_memory_region();
#endif
}
  4009a8:	bd80      	pop	{r7, pc}
  4009aa:	bf00      	nop
  4009ac:	400e1850 	.word	0x400e1850
  4009b0:	004005e9 	.word	0x004005e9
  4009b4:	00400775 	.word	0x00400775
  4009b8:	004007fd 	.word	0x004007fd
  4009bc:	00400659 	.word	0x00400659
  4009c0:	00400869 	.word	0x00400869
  4009c4:	00400611 	.word	0x00400611

004009c8 <pio_get_interrupt_status>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
  4009c8:	b480      	push	{r7}
  4009ca:	b083      	sub	sp, #12
  4009cc:	af00      	add	r7, sp, #0
  4009ce:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_ISR;
  4009d0:	687b      	ldr	r3, [r7, #4]
  4009d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
  4009d4:	4618      	mov	r0, r3
  4009d6:	370c      	adds	r7, #12
  4009d8:	46bd      	mov	sp, r7
  4009da:	f85d 7b04 	ldr.w	r7, [sp], #4
  4009de:	4770      	bx	lr

004009e0 <pio_get_interrupt_mask>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
  4009e0:	b480      	push	{r7}
  4009e2:	b083      	sub	sp, #12
  4009e4:	af00      	add	r7, sp, #0
  4009e6:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_IMR;
  4009e8:	687b      	ldr	r3, [r7, #4]
  4009ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
  4009ec:	4618      	mov	r0, r3
  4009ee:	370c      	adds	r7, #12
  4009f0:	46bd      	mov	sp, r7
  4009f2:	f85d 7b04 	ldr.w	r7, [sp], #4
  4009f6:	4770      	bx	lr

004009f8 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  4009f8:	b580      	push	{r7, lr}
  4009fa:	b084      	sub	sp, #16
  4009fc:	af00      	add	r7, sp, #0
  4009fe:	6078      	str	r0, [r7, #4]
  400a00:	6039      	str	r1, [r7, #0]
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  400a02:	6878      	ldr	r0, [r7, #4]
  400a04:	4b24      	ldr	r3, [pc, #144]	; (400a98 <pio_handler_process+0xa0>)
  400a06:	4798      	blx	r3
  400a08:	60f8      	str	r0, [r7, #12]
	status &= pio_get_interrupt_mask(p_pio);
  400a0a:	6878      	ldr	r0, [r7, #4]
  400a0c:	4b23      	ldr	r3, [pc, #140]	; (400a9c <pio_handler_process+0xa4>)
  400a0e:	4798      	blx	r3
  400a10:	4602      	mov	r2, r0
  400a12:	68fb      	ldr	r3, [r7, #12]
  400a14:	4013      	ands	r3, r2
  400a16:	60fb      	str	r3, [r7, #12]

	/* Check pending events */
	if (status != 0) {
  400a18:	68fb      	ldr	r3, [r7, #12]
  400a1a:	2b00      	cmp	r3, #0
  400a1c:	d038      	beq.n	400a90 <pio_handler_process+0x98>
		/* Find triggering source */
		i = 0;
  400a1e:	2300      	movs	r3, #0
  400a20:	60bb      	str	r3, [r7, #8]
		while (status != 0) {
  400a22:	e032      	b.n	400a8a <pio_handler_process+0x92>
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  400a24:	4a1e      	ldr	r2, [pc, #120]	; (400aa0 <pio_handler_process+0xa8>)
  400a26:	68bb      	ldr	r3, [r7, #8]
  400a28:	011b      	lsls	r3, r3, #4
  400a2a:	4413      	add	r3, r2
  400a2c:	681a      	ldr	r2, [r3, #0]
  400a2e:	683b      	ldr	r3, [r7, #0]
  400a30:	429a      	cmp	r2, r3
  400a32:	d123      	bne.n	400a7c <pio_handler_process+0x84>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  400a34:	4a1a      	ldr	r2, [pc, #104]	; (400aa0 <pio_handler_process+0xa8>)
  400a36:	68bb      	ldr	r3, [r7, #8]
  400a38:	011b      	lsls	r3, r3, #4
  400a3a:	4413      	add	r3, r2
  400a3c:	685a      	ldr	r2, [r3, #4]
  400a3e:	68fb      	ldr	r3, [r7, #12]
  400a40:	4013      	ands	r3, r2
  400a42:	2b00      	cmp	r3, #0
  400a44:	d01a      	beq.n	400a7c <pio_handler_process+0x84>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  400a46:	4a16      	ldr	r2, [pc, #88]	; (400aa0 <pio_handler_process+0xa8>)
  400a48:	68bb      	ldr	r3, [r7, #8]
  400a4a:	011b      	lsls	r3, r3, #4
  400a4c:	4413      	add	r3, r2
  400a4e:	3308      	adds	r3, #8
  400a50:	685b      	ldr	r3, [r3, #4]
  400a52:	4913      	ldr	r1, [pc, #76]	; (400aa0 <pio_handler_process+0xa8>)
  400a54:	68ba      	ldr	r2, [r7, #8]
  400a56:	0112      	lsls	r2, r2, #4
  400a58:	440a      	add	r2, r1
  400a5a:	6810      	ldr	r0, [r2, #0]
  400a5c:	4910      	ldr	r1, [pc, #64]	; (400aa0 <pio_handler_process+0xa8>)
  400a5e:	68ba      	ldr	r2, [r7, #8]
  400a60:	0112      	lsls	r2, r2, #4
  400a62:	440a      	add	r2, r1
  400a64:	6852      	ldr	r2, [r2, #4]
  400a66:	4611      	mov	r1, r2
  400a68:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  400a6a:	4a0d      	ldr	r2, [pc, #52]	; (400aa0 <pio_handler_process+0xa8>)
  400a6c:	68bb      	ldr	r3, [r7, #8]
  400a6e:	011b      	lsls	r3, r3, #4
  400a70:	4413      	add	r3, r2
  400a72:	685b      	ldr	r3, [r3, #4]
  400a74:	43db      	mvns	r3, r3
  400a76:	68fa      	ldr	r2, [r7, #12]
  400a78:	4013      	ands	r3, r2
  400a7a:	60fb      	str	r3, [r7, #12]
				}
			}
			i++;
  400a7c:	68bb      	ldr	r3, [r7, #8]
  400a7e:	3301      	adds	r3, #1
  400a80:	60bb      	str	r3, [r7, #8]
			if (i >= MAX_INTERRUPT_SOURCES) {
  400a82:	68bb      	ldr	r3, [r7, #8]
  400a84:	2b06      	cmp	r3, #6
  400a86:	d900      	bls.n	400a8a <pio_handler_process+0x92>
				break;
  400a88:	e002      	b.n	400a90 <pio_handler_process+0x98>

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
  400a8a:	68fb      	ldr	r3, [r7, #12]
  400a8c:	2b00      	cmp	r3, #0
  400a8e:	d1c9      	bne.n	400a24 <pio_handler_process+0x2c>
		if (pio_capture_handler) {
			pio_capture_handler(p_pio);
		}
	}
#endif
}
  400a90:	3710      	adds	r7, #16
  400a92:	46bd      	mov	sp, r7
  400a94:	bd80      	pop	{r7, pc}
  400a96:	bf00      	nop
  400a98:	004009c9 	.word	0x004009c9
  400a9c:	004009e1 	.word	0x004009e1
  400aa0:	204008d8 	.word	0x204008d8

00400aa4 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  400aa4:	b580      	push	{r7, lr}
  400aa6:	af00      	add	r7, sp, #0
	pio_handler_process(PIOA, ID_PIOA);
  400aa8:	4802      	ldr	r0, [pc, #8]	; (400ab4 <PIOA_Handler+0x10>)
  400aaa:	210a      	movs	r1, #10
  400aac:	4b02      	ldr	r3, [pc, #8]	; (400ab8 <PIOA_Handler+0x14>)
  400aae:	4798      	blx	r3
}
  400ab0:	bd80      	pop	{r7, pc}
  400ab2:	bf00      	nop
  400ab4:	400e0e00 	.word	0x400e0e00
  400ab8:	004009f9 	.word	0x004009f9

00400abc <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  400abc:	b580      	push	{r7, lr}
  400abe:	af00      	add	r7, sp, #0
    pio_handler_process(PIOB, ID_PIOB);
  400ac0:	4802      	ldr	r0, [pc, #8]	; (400acc <PIOB_Handler+0x10>)
  400ac2:	210b      	movs	r1, #11
  400ac4:	4b02      	ldr	r3, [pc, #8]	; (400ad0 <PIOB_Handler+0x14>)
  400ac6:	4798      	blx	r3
}
  400ac8:	bd80      	pop	{r7, pc}
  400aca:	bf00      	nop
  400acc:	400e1000 	.word	0x400e1000
  400ad0:	004009f9 	.word	0x004009f9

00400ad4 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  400ad4:	b580      	push	{r7, lr}
  400ad6:	af00      	add	r7, sp, #0
	pio_handler_process(PIOC, ID_PIOC);
  400ad8:	4802      	ldr	r0, [pc, #8]	; (400ae4 <PIOC_Handler+0x10>)
  400ada:	210c      	movs	r1, #12
  400adc:	4b02      	ldr	r3, [pc, #8]	; (400ae8 <PIOC_Handler+0x14>)
  400ade:	4798      	blx	r3
}
  400ae0:	bd80      	pop	{r7, pc}
  400ae2:	bf00      	nop
  400ae4:	400e1200 	.word	0x400e1200
  400ae8:	004009f9 	.word	0x004009f9

00400aec <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  400aec:	b580      	push	{r7, lr}
  400aee:	af00      	add	r7, sp, #0
	pio_handler_process(PIOD, ID_PIOD);
  400af0:	4802      	ldr	r0, [pc, #8]	; (400afc <PIOD_Handler+0x10>)
  400af2:	2110      	movs	r1, #16
  400af4:	4b02      	ldr	r3, [pc, #8]	; (400b00 <PIOD_Handler+0x14>)
  400af6:	4798      	blx	r3
}
  400af8:	bd80      	pop	{r7, pc}
  400afa:	bf00      	nop
  400afc:	400e1400 	.word	0x400e1400
  400b00:	004009f9 	.word	0x004009f9

00400b04 <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  400b04:	b580      	push	{r7, lr}
  400b06:	af00      	add	r7, sp, #0
	pio_handler_process(PIOE, ID_PIOE);
  400b08:	4802      	ldr	r0, [pc, #8]	; (400b14 <PIOE_Handler+0x10>)
  400b0a:	2111      	movs	r1, #17
  400b0c:	4b02      	ldr	r3, [pc, #8]	; (400b18 <PIOE_Handler+0x14>)
  400b0e:	4798      	blx	r3
}
  400b10:	bd80      	pop	{r7, pc}
  400b12:	bf00      	nop
  400b14:	400e1600 	.word	0x400e1600
  400b18:	004009f9 	.word	0x004009f9

00400b1c <pmc_mck_set_division>:
 * \brief Set the division of the MCK.
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
  400b1c:	b480      	push	{r7}
  400b1e:	b083      	sub	sp, #12
  400b20:	af00      	add	r7, sp, #0
  400b22:	6078      	str	r0, [r7, #4]
	switch (ul_div) {
  400b24:	687b      	ldr	r3, [r7, #4]
  400b26:	3b01      	subs	r3, #1
  400b28:	2b03      	cmp	r3, #3
  400b2a:	d81a      	bhi.n	400b62 <pmc_mck_set_division+0x46>
  400b2c:	a201      	add	r2, pc, #4	; (adr r2, 400b34 <pmc_mck_set_division+0x18>)
  400b2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  400b32:	bf00      	nop
  400b34:	00400b45 	.word	0x00400b45
  400b38:	00400b4b 	.word	0x00400b4b
  400b3c:	00400b53 	.word	0x00400b53
  400b40:	00400b5b 	.word	0x00400b5b
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  400b44:	2300      	movs	r3, #0
  400b46:	607b      	str	r3, [r7, #4]
			break;
  400b48:	e00e      	b.n	400b68 <pmc_mck_set_division+0x4c>
		case 2:
			ul_div = PMC_MCKR_MDIV_PCK_DIV2;
  400b4a:	f44f 7380 	mov.w	r3, #256	; 0x100
  400b4e:	607b      	str	r3, [r7, #4]
			break;
  400b50:	e00a      	b.n	400b68 <pmc_mck_set_division+0x4c>
		case 3:
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  400b52:	f44f 7340 	mov.w	r3, #768	; 0x300
  400b56:	607b      	str	r3, [r7, #4]
			break;
  400b58:	e006      	b.n	400b68 <pmc_mck_set_division+0x4c>
		case 4:
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  400b5a:	f44f 7300 	mov.w	r3, #512	; 0x200
  400b5e:	607b      	str	r3, [r7, #4]
			break;
  400b60:	e002      	b.n	400b68 <pmc_mck_set_division+0x4c>
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  400b62:	2300      	movs	r3, #0
  400b64:	607b      	str	r3, [r7, #4]
			break;
  400b66:	bf00      	nop
	}
	PMC->PMC_MCKR =
  400b68:	4909      	ldr	r1, [pc, #36]	; (400b90 <pmc_mck_set_division+0x74>)
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  400b6a:	4b09      	ldr	r3, [pc, #36]	; (400b90 <pmc_mck_set_division+0x74>)
  400b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400b6e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
  400b72:	687b      	ldr	r3, [r7, #4]
  400b74:	4313      	orrs	r3, r2
			break;
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
  400b76:	630b      	str	r3, [r1, #48]	; 0x30
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  400b78:	bf00      	nop
  400b7a:	4b05      	ldr	r3, [pc, #20]	; (400b90 <pmc_mck_set_division+0x74>)
  400b7c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400b7e:	f003 0308 	and.w	r3, r3, #8
  400b82:	2b00      	cmp	r3, #0
  400b84:	d0f9      	beq.n	400b7a <pmc_mck_set_division+0x5e>
}
  400b86:	370c      	adds	r7, #12
  400b88:	46bd      	mov	sp, r7
  400b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
  400b8e:	4770      	bx	lr
  400b90:	400e0600 	.word	0x400e0600

00400b94 <pmc_switch_mck_to_pllack>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
  400b94:	b480      	push	{r7}
  400b96:	b085      	sub	sp, #20
  400b98:	af00      	add	r7, sp, #0
  400b9a:	6078      	str	r0, [r7, #4]
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  400b9c:	491d      	ldr	r1, [pc, #116]	; (400c14 <pmc_switch_mck_to_pllack+0x80>)
  400b9e:	4b1d      	ldr	r3, [pc, #116]	; (400c14 <pmc_switch_mck_to_pllack+0x80>)
  400ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400ba2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
  400ba6:	687b      	ldr	r3, [r7, #4]
  400ba8:	4313      	orrs	r3, r2
  400baa:	630b      	str	r3, [r1, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400bac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  400bb0:	60fb      	str	r3, [r7, #12]
  400bb2:	e007      	b.n	400bc4 <pmc_switch_mck_to_pllack+0x30>
			--ul_timeout) {
		if (ul_timeout == 0) {
  400bb4:	68fb      	ldr	r3, [r7, #12]
  400bb6:	2b00      	cmp	r3, #0
  400bb8:	d101      	bne.n	400bbe <pmc_switch_mck_to_pllack+0x2a>
			return 1;
  400bba:	2301      	movs	r3, #1
  400bbc:	e023      	b.n	400c06 <pmc_switch_mck_to_pllack+0x72>
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
  400bbe:	68fb      	ldr	r3, [r7, #12]
  400bc0:	3b01      	subs	r3, #1
  400bc2:	60fb      	str	r3, [r7, #12]
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400bc4:	4b13      	ldr	r3, [pc, #76]	; (400c14 <pmc_switch_mck_to_pllack+0x80>)
  400bc6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400bc8:	f003 0308 	and.w	r3, r3, #8
  400bcc:	2b00      	cmp	r3, #0
  400bce:	d0f1      	beq.n	400bb4 <pmc_switch_mck_to_pllack+0x20>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  400bd0:	4a10      	ldr	r2, [pc, #64]	; (400c14 <pmc_switch_mck_to_pllack+0x80>)
  400bd2:	4b10      	ldr	r3, [pc, #64]	; (400c14 <pmc_switch_mck_to_pllack+0x80>)
  400bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400bd6:	f023 0303 	bic.w	r3, r3, #3
  400bda:	f043 0302 	orr.w	r3, r3, #2
  400bde:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400be0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  400be4:	60fb      	str	r3, [r7, #12]
  400be6:	e007      	b.n	400bf8 <pmc_switch_mck_to_pllack+0x64>
			--ul_timeout) {
		if (ul_timeout == 0) {
  400be8:	68fb      	ldr	r3, [r7, #12]
  400bea:	2b00      	cmp	r3, #0
  400bec:	d101      	bne.n	400bf2 <pmc_switch_mck_to_pllack+0x5e>
			return 1;
  400bee:	2301      	movs	r3, #1
  400bf0:	e009      	b.n	400c06 <pmc_switch_mck_to_pllack+0x72>

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
  400bf2:	68fb      	ldr	r3, [r7, #12]
  400bf4:	3b01      	subs	r3, #1
  400bf6:	60fb      	str	r3, [r7, #12]
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400bf8:	4b06      	ldr	r3, [pc, #24]	; (400c14 <pmc_switch_mck_to_pllack+0x80>)
  400bfa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400bfc:	f003 0308 	and.w	r3, r3, #8
  400c00:	2b00      	cmp	r3, #0
  400c02:	d0f1      	beq.n	400be8 <pmc_switch_mck_to_pllack+0x54>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
  400c04:	2300      	movs	r3, #0
}
  400c06:	4618      	mov	r0, r3
  400c08:	3714      	adds	r7, #20
  400c0a:	46bd      	mov	sp, r7
  400c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
  400c10:	4770      	bx	lr
  400c12:	bf00      	nop
  400c14:	400e0600 	.word	0x400e0600

00400c18 <pmc_switch_sclk_to_32kxtal>:
 *       VDDIO power supply.
 *
 * \param ul_bypass 0 for Xtal, 1 for bypass.
 */
void pmc_switch_sclk_to_32kxtal(uint32_t ul_bypass)
{
  400c18:	b480      	push	{r7}
  400c1a:	b083      	sub	sp, #12
  400c1c:	af00      	add	r7, sp, #0
  400c1e:	6078      	str	r0, [r7, #4]
	/* Set Bypass mode if required */
	if (ul_bypass == 1) {
  400c20:	687b      	ldr	r3, [r7, #4]
  400c22:	2b01      	cmp	r3, #1
  400c24:	d105      	bne.n	400c32 <pmc_switch_sclk_to_32kxtal+0x1a>
		SUPC->SUPC_MR |= SUPC_MR_KEY_PASSWD |
  400c26:	4907      	ldr	r1, [pc, #28]	; (400c44 <pmc_switch_sclk_to_32kxtal+0x2c>)
  400c28:	4b06      	ldr	r3, [pc, #24]	; (400c44 <pmc_switch_sclk_to_32kxtal+0x2c>)
  400c2a:	689a      	ldr	r2, [r3, #8]
  400c2c:	4b06      	ldr	r3, [pc, #24]	; (400c48 <pmc_switch_sclk_to_32kxtal+0x30>)
  400c2e:	4313      	orrs	r3, r2
  400c30:	608b      	str	r3, [r1, #8]
			SUPC_MR_OSCBYPASS;
	}

	SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_XTALSEL;
  400c32:	4b04      	ldr	r3, [pc, #16]	; (400c44 <pmc_switch_sclk_to_32kxtal+0x2c>)
  400c34:	4a05      	ldr	r2, [pc, #20]	; (400c4c <pmc_switch_sclk_to_32kxtal+0x34>)
  400c36:	601a      	str	r2, [r3, #0]
}
  400c38:	370c      	adds	r7, #12
  400c3a:	46bd      	mov	sp, r7
  400c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
  400c40:	4770      	bx	lr
  400c42:	bf00      	nop
  400c44:	400e1810 	.word	0x400e1810
  400c48:	a5100000 	.word	0xa5100000
  400c4c:	a5000008 	.word	0xa5000008

00400c50 <pmc_osc_is_ready_32kxtal>:
 *
 * \retval 1 External 32k Xtal is ready.
 * \retval 0 External 32k Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_32kxtal(void)
{
  400c50:	b480      	push	{r7}
  400c52:	af00      	add	r7, sp, #0
	return ((SUPC->SUPC_SR & SUPC_SR_OSCSEL)
  400c54:	4b09      	ldr	r3, [pc, #36]	; (400c7c <pmc_osc_is_ready_32kxtal+0x2c>)
  400c56:	695b      	ldr	r3, [r3, #20]
  400c58:	f003 0380 	and.w	r3, r3, #128	; 0x80
			&& (PMC->PMC_SR & PMC_SR_OSCSELS));
  400c5c:	2b00      	cmp	r3, #0
  400c5e:	d007      	beq.n	400c70 <pmc_osc_is_ready_32kxtal+0x20>
  400c60:	4b07      	ldr	r3, [pc, #28]	; (400c80 <pmc_osc_is_ready_32kxtal+0x30>)
  400c62:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400c64:	f003 0380 	and.w	r3, r3, #128	; 0x80
  400c68:	2b00      	cmp	r3, #0
  400c6a:	d001      	beq.n	400c70 <pmc_osc_is_ready_32kxtal+0x20>
  400c6c:	2301      	movs	r3, #1
  400c6e:	e000      	b.n	400c72 <pmc_osc_is_ready_32kxtal+0x22>
  400c70:	2300      	movs	r3, #0
}
  400c72:	4618      	mov	r0, r3
  400c74:	46bd      	mov	sp, r7
  400c76:	f85d 7b04 	ldr.w	r7, [sp], #4
  400c7a:	4770      	bx	lr
  400c7c:	400e1810 	.word	0x400e1810
  400c80:	400e0600 	.word	0x400e0600

00400c84 <pmc_switch_mainck_to_fastrc>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 * \retval 2 Invalid frequency.
 */
void pmc_switch_mainck_to_fastrc(uint32_t ul_moscrcf)
{
  400c84:	b480      	push	{r7}
  400c86:	b083      	sub	sp, #12
  400c88:	af00      	add	r7, sp, #0
  400c8a:	6078      	str	r0, [r7, #4]
	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	PMC->CKGR_MOR |= (CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCRCEN);
  400c8c:	4915      	ldr	r1, [pc, #84]	; (400ce4 <pmc_switch_mainck_to_fastrc+0x60>)
  400c8e:	4b15      	ldr	r3, [pc, #84]	; (400ce4 <pmc_switch_mainck_to_fastrc+0x60>)
  400c90:	6a1a      	ldr	r2, [r3, #32]
  400c92:	4b15      	ldr	r3, [pc, #84]	; (400ce8 <pmc_switch_mainck_to_fastrc+0x64>)
  400c94:	4313      	orrs	r3, r2
  400c96:	620b      	str	r3, [r1, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  400c98:	bf00      	nop
  400c9a:	4b12      	ldr	r3, [pc, #72]	; (400ce4 <pmc_switch_mainck_to_fastrc+0x60>)
  400c9c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400c9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  400ca2:	2b00      	cmp	r3, #0
  400ca4:	d0f9      	beq.n	400c9a <pmc_switch_mainck_to_fastrc+0x16>

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  400ca6:	490f      	ldr	r1, [pc, #60]	; (400ce4 <pmc_switch_mainck_to_fastrc+0x60>)
  400ca8:	4b0e      	ldr	r3, [pc, #56]	; (400ce4 <pmc_switch_mainck_to_fastrc+0x60>)
  400caa:	6a1a      	ldr	r2, [r3, #32]
  400cac:	4b0f      	ldr	r3, [pc, #60]	; (400cec <pmc_switch_mainck_to_fastrc+0x68>)
  400cae:	4013      	ands	r3, r2
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;
  400cb0:	687a      	ldr	r2, [r7, #4]
  400cb2:	4313      	orrs	r3, r2
  400cb4:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  400cb8:	620b      	str	r3, [r1, #32]
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  400cba:	bf00      	nop
  400cbc:	4b09      	ldr	r3, [pc, #36]	; (400ce4 <pmc_switch_mainck_to_fastrc+0x60>)
  400cbe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400cc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  400cc4:	2b00      	cmp	r3, #0
  400cc6:	d0f9      	beq.n	400cbc <pmc_switch_mainck_to_fastrc+0x38>

	/* Switch to Fast RC */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
  400cc8:	4906      	ldr	r1, [pc, #24]	; (400ce4 <pmc_switch_mainck_to_fastrc+0x60>)
  400cca:	4b06      	ldr	r3, [pc, #24]	; (400ce4 <pmc_switch_mainck_to_fastrc+0x60>)
  400ccc:	6a1a      	ldr	r2, [r3, #32]
  400cce:	4b08      	ldr	r3, [pc, #32]	; (400cf0 <pmc_switch_mainck_to_fastrc+0x6c>)
  400cd0:	4013      	ands	r3, r2
  400cd2:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  400cd6:	620b      	str	r3, [r1, #32]
			CKGR_MOR_KEY_PASSWD;
}
  400cd8:	370c      	adds	r7, #12
  400cda:	46bd      	mov	sp, r7
  400cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
  400ce0:	4770      	bx	lr
  400ce2:	bf00      	nop
  400ce4:	400e0600 	.word	0x400e0600
  400ce8:	00370008 	.word	0x00370008
  400cec:	ffc8ff8f 	.word	0xffc8ff8f
  400cf0:	fec8ffff 	.word	0xfec8ffff

00400cf4 <pmc_switch_mainck_to_xtal>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
  400cf4:	b480      	push	{r7}
  400cf6:	b083      	sub	sp, #12
  400cf8:	af00      	add	r7, sp, #0
  400cfa:	6078      	str	r0, [r7, #4]
  400cfc:	6039      	str	r1, [r7, #0]
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  400cfe:	687b      	ldr	r3, [r7, #4]
  400d00:	2b00      	cmp	r3, #0
  400d02:	d008      	beq.n	400d16 <pmc_switch_mainck_to_xtal+0x22>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400d04:	4913      	ldr	r1, [pc, #76]	; (400d54 <pmc_switch_mainck_to_xtal+0x60>)
  400d06:	4b13      	ldr	r3, [pc, #76]	; (400d54 <pmc_switch_mainck_to_xtal+0x60>)
  400d08:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  400d0a:	4a13      	ldr	r2, [pc, #76]	; (400d58 <pmc_switch_mainck_to_xtal+0x64>)
  400d0c:	401a      	ands	r2, r3
  400d0e:	4b13      	ldr	r3, [pc, #76]	; (400d5c <pmc_switch_mainck_to_xtal+0x68>)
  400d10:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400d12:	620b      	str	r3, [r1, #32]
  400d14:	e018      	b.n	400d48 <pmc_switch_mainck_to_xtal+0x54>
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400d16:	490f      	ldr	r1, [pc, #60]	; (400d54 <pmc_switch_mainck_to_xtal+0x60>)
  400d18:	4b0e      	ldr	r3, [pc, #56]	; (400d54 <pmc_switch_mainck_to_xtal+0x60>)
  400d1a:	6a1a      	ldr	r2, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  400d1c:	4b10      	ldr	r3, [pc, #64]	; (400d60 <pmc_switch_mainck_to_xtal+0x6c>)
  400d1e:	4013      	ands	r3, r2
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  400d20:	683a      	ldr	r2, [r7, #0]
  400d22:	0212      	lsls	r2, r2, #8
  400d24:	b292      	uxth	r2, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  400d26:	431a      	orrs	r2, r3
  400d28:	4b0e      	ldr	r3, [pc, #56]	; (400d64 <pmc_switch_mainck_to_xtal+0x70>)
  400d2a:	4313      	orrs	r3, r2
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400d2c:	620b      	str	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  400d2e:	bf00      	nop
  400d30:	4b08      	ldr	r3, [pc, #32]	; (400d54 <pmc_switch_mainck_to_xtal+0x60>)
  400d32:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400d34:	f003 0301 	and.w	r3, r3, #1
  400d38:	2b00      	cmp	r3, #0
  400d3a:	d0f9      	beq.n	400d30 <pmc_switch_mainck_to_xtal+0x3c>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  400d3c:	4905      	ldr	r1, [pc, #20]	; (400d54 <pmc_switch_mainck_to_xtal+0x60>)
  400d3e:	4b05      	ldr	r3, [pc, #20]	; (400d54 <pmc_switch_mainck_to_xtal+0x60>)
  400d40:	6a1a      	ldr	r2, [r3, #32]
  400d42:	4b09      	ldr	r3, [pc, #36]	; (400d68 <pmc_switch_mainck_to_xtal+0x74>)
  400d44:	4313      	orrs	r3, r2
  400d46:	620b      	str	r3, [r1, #32]
	}
}
  400d48:	370c      	adds	r7, #12
  400d4a:	46bd      	mov	sp, r7
  400d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
  400d50:	4770      	bx	lr
  400d52:	bf00      	nop
  400d54:	400e0600 	.word	0x400e0600
  400d58:	fec8fffc 	.word	0xfec8fffc
  400d5c:	01370002 	.word	0x01370002
  400d60:	ffc8fffc 	.word	0xffc8fffc
  400d64:	00370001 	.word	0x00370001
  400d68:	01370000 	.word	0x01370000

00400d6c <pmc_osc_is_ready_mainck>:
 *
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
  400d6c:	b480      	push	{r7}
  400d6e:	af00      	add	r7, sp, #0
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  400d70:	4b04      	ldr	r3, [pc, #16]	; (400d84 <pmc_osc_is_ready_mainck+0x18>)
  400d72:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400d74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
  400d78:	4618      	mov	r0, r3
  400d7a:	46bd      	mov	sp, r7
  400d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
  400d80:	4770      	bx	lr
  400d82:	bf00      	nop
  400d84:	400e0600 	.word	0x400e0600

00400d88 <pmc_disable_pllack>:

/**
 * \brief Disable PLLA clock.
 */
void pmc_disable_pllack(void)
{
  400d88:	b480      	push	{r7}
  400d8a:	af00      	add	r7, sp, #0
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  400d8c:	4b03      	ldr	r3, [pc, #12]	; (400d9c <pmc_disable_pllack+0x14>)
  400d8e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  400d92:	629a      	str	r2, [r3, #40]	; 0x28
#endif
}
  400d94:	46bd      	mov	sp, r7
  400d96:	f85d 7b04 	ldr.w	r7, [sp], #4
  400d9a:	4770      	bx	lr
  400d9c:	400e0600 	.word	0x400e0600

00400da0 <pmc_is_locked_pllack>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
  400da0:	b480      	push	{r7}
  400da2:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  400da4:	4b04      	ldr	r3, [pc, #16]	; (400db8 <pmc_is_locked_pllack+0x18>)
  400da6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400da8:	f003 0302 	and.w	r3, r3, #2
}
  400dac:	4618      	mov	r0, r3
  400dae:	46bd      	mov	sp, r7
  400db0:	f85d 7b04 	ldr.w	r7, [sp], #4
  400db4:	4770      	bx	lr
  400db6:	bf00      	nop
  400db8:	400e0600 	.word	0x400e0600

00400dbc <pmc_is_locked_upll>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_upll(void)
{
  400dbc:	b480      	push	{r7}
  400dbe:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKU);
  400dc0:	4b04      	ldr	r3, [pc, #16]	; (400dd4 <pmc_is_locked_upll+0x18>)
  400dc2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400dc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
}
  400dc8:	4618      	mov	r0, r3
  400dca:	46bd      	mov	sp, r7
  400dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
  400dd0:	4770      	bx	lr
  400dd2:	bf00      	nop
  400dd4:	400e0600 	.word	0x400e0600

00400dd8 <pmc_enable_periph_clk>:
 *
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
  400dd8:	b480      	push	{r7}
  400dda:	b083      	sub	sp, #12
  400ddc:	af00      	add	r7, sp, #0
  400dde:	6078      	str	r0, [r7, #4]
	if (ul_id > MAX_PERIPH_ID) {
  400de0:	687b      	ldr	r3, [r7, #4]
  400de2:	2b3f      	cmp	r3, #63	; 0x3f
  400de4:	d901      	bls.n	400dea <pmc_enable_periph_clk+0x12>
		return 1;
  400de6:	2301      	movs	r3, #1
  400de8:	e02f      	b.n	400e4a <pmc_enable_periph_clk+0x72>
	}

	if (ul_id < 32) {
  400dea:	687b      	ldr	r3, [r7, #4]
  400dec:	2b1f      	cmp	r3, #31
  400dee:	d813      	bhi.n	400e18 <pmc_enable_periph_clk+0x40>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  400df0:	4b19      	ldr	r3, [pc, #100]	; (400e58 <pmc_enable_periph_clk+0x80>)
  400df2:	699a      	ldr	r2, [r3, #24]
  400df4:	687b      	ldr	r3, [r7, #4]
  400df6:	2101      	movs	r1, #1
  400df8:	fa01 f303 	lsl.w	r3, r1, r3
  400dfc:	401a      	ands	r2, r3
  400dfe:	687b      	ldr	r3, [r7, #4]
  400e00:	2101      	movs	r1, #1
  400e02:	fa01 f303 	lsl.w	r3, r1, r3
  400e06:	429a      	cmp	r2, r3
  400e08:	d01e      	beq.n	400e48 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER0 = 1 << ul_id;
  400e0a:	4a13      	ldr	r2, [pc, #76]	; (400e58 <pmc_enable_periph_clk+0x80>)
  400e0c:	687b      	ldr	r3, [r7, #4]
  400e0e:	2101      	movs	r1, #1
  400e10:	fa01 f303 	lsl.w	r3, r1, r3
  400e14:	6113      	str	r3, [r2, #16]
  400e16:	e017      	b.n	400e48 <pmc_enable_periph_clk+0x70>
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
  400e18:	687b      	ldr	r3, [r7, #4]
  400e1a:	3b20      	subs	r3, #32
  400e1c:	607b      	str	r3, [r7, #4]
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  400e1e:	4b0e      	ldr	r3, [pc, #56]	; (400e58 <pmc_enable_periph_clk+0x80>)
  400e20:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  400e24:	687b      	ldr	r3, [r7, #4]
  400e26:	2101      	movs	r1, #1
  400e28:	fa01 f303 	lsl.w	r3, r1, r3
  400e2c:	401a      	ands	r2, r3
  400e2e:	687b      	ldr	r3, [r7, #4]
  400e30:	2101      	movs	r1, #1
  400e32:	fa01 f303 	lsl.w	r3, r1, r3
  400e36:	429a      	cmp	r2, r3
  400e38:	d006      	beq.n	400e48 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER1 = 1 << ul_id;
  400e3a:	4a07      	ldr	r2, [pc, #28]	; (400e58 <pmc_enable_periph_clk+0x80>)
  400e3c:	687b      	ldr	r3, [r7, #4]
  400e3e:	2101      	movs	r1, #1
  400e40:	fa01 f303 	lsl.w	r3, r1, r3
  400e44:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
		}
#endif
	}

	return 0;
  400e48:	2300      	movs	r3, #0
}
  400e4a:	4618      	mov	r0, r3
  400e4c:	370c      	adds	r7, #12
  400e4e:	46bd      	mov	sp, r7
  400e50:	f85d 7b04 	ldr.w	r7, [sp], #4
  400e54:	4770      	bx	lr
  400e56:	bf00      	nop
  400e58:	400e0600 	.word	0x400e0600

00400e5c <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
  400e5c:	b480      	push	{r7}
  400e5e:	b085      	sub	sp, #20
  400e60:	af00      	add	r7, sp, #0
  400e62:	6078      	str	r0, [r7, #4]
  400e64:	6039      	str	r1, [r7, #0]
	uint32_t cd = 0;
  400e66:	2300      	movs	r3, #0
  400e68:	60fb      	str	r3, [r7, #12]

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
  400e6a:	687b      	ldr	r3, [r7, #4]
  400e6c:	22ac      	movs	r2, #172	; 0xac
  400e6e:	601a      	str	r2, [r3, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
  400e70:	683b      	ldr	r3, [r7, #0]
  400e72:	681a      	ldr	r2, [r3, #0]
  400e74:	683b      	ldr	r3, [r7, #0]
  400e76:	685b      	ldr	r3, [r3, #4]
  400e78:	fbb2 f3f3 	udiv	r3, r2, r3
  400e7c:	091b      	lsrs	r3, r3, #4
  400e7e:	60fb      	str	r3, [r7, #12]
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
  400e80:	68fb      	ldr	r3, [r7, #12]
  400e82:	2b00      	cmp	r3, #0
  400e84:	d003      	beq.n	400e8e <uart_init+0x32>
  400e86:	68fb      	ldr	r3, [r7, #12]
  400e88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
  400e8c:	d301      	bcc.n	400e92 <uart_init+0x36>
		return 1;
  400e8e:	2301      	movs	r3, #1
  400e90:	e00a      	b.n	400ea8 <uart_init+0x4c>

	p_uart->UART_BRGR = cd;
  400e92:	687b      	ldr	r3, [r7, #4]
  400e94:	68fa      	ldr	r2, [r7, #12]
  400e96:	621a      	str	r2, [r3, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
  400e98:	683b      	ldr	r3, [r7, #0]
  400e9a:	689a      	ldr	r2, [r3, #8]
  400e9c:	687b      	ldr	r3, [r7, #4]
  400e9e:	605a      	str	r2, [r3, #4]
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
  400ea0:	687b      	ldr	r3, [r7, #4]
  400ea2:	2250      	movs	r2, #80	; 0x50
  400ea4:	601a      	str	r2, [r3, #0]

	return 0;
  400ea6:	2300      	movs	r3, #0
}
  400ea8:	4618      	mov	r0, r3
  400eaa:	3714      	adds	r7, #20
  400eac:	46bd      	mov	sp, r7
  400eae:	f85d 7b04 	ldr.w	r7, [sp], #4
  400eb2:	4770      	bx	lr

00400eb4 <uart_write>:
 *
 * \retval 0 Success.
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
  400eb4:	b480      	push	{r7}
  400eb6:	b083      	sub	sp, #12
  400eb8:	af00      	add	r7, sp, #0
  400eba:	6078      	str	r0, [r7, #4]
  400ebc:	460b      	mov	r3, r1
  400ebe:	70fb      	strb	r3, [r7, #3]
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  400ec0:	687b      	ldr	r3, [r7, #4]
  400ec2:	695b      	ldr	r3, [r3, #20]
  400ec4:	f003 0302 	and.w	r3, r3, #2
  400ec8:	2b00      	cmp	r3, #0
  400eca:	d101      	bne.n	400ed0 <uart_write+0x1c>
		return 1;
  400ecc:	2301      	movs	r3, #1
  400ece:	e003      	b.n	400ed8 <uart_write+0x24>

	/* Send character */
	p_uart->UART_THR = uc_data;
  400ed0:	78fa      	ldrb	r2, [r7, #3]
  400ed2:	687b      	ldr	r3, [r7, #4]
  400ed4:	61da      	str	r2, [r3, #28]
	return 0;
  400ed6:	2300      	movs	r3, #0
}
  400ed8:	4618      	mov	r0, r3
  400eda:	370c      	adds	r7, #12
  400edc:	46bd      	mov	sp, r7
  400ede:	f85d 7b04 	ldr.w	r7, [sp], #4
  400ee2:	4770      	bx	lr

00400ee4 <uart_read>:
 *
 * \retval 0 Success.
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
  400ee4:	b480      	push	{r7}
  400ee6:	b083      	sub	sp, #12
  400ee8:	af00      	add	r7, sp, #0
  400eea:	6078      	str	r0, [r7, #4]
  400eec:	6039      	str	r1, [r7, #0]
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  400eee:	687b      	ldr	r3, [r7, #4]
  400ef0:	695b      	ldr	r3, [r3, #20]
  400ef2:	f003 0301 	and.w	r3, r3, #1
  400ef6:	2b00      	cmp	r3, #0
  400ef8:	d101      	bne.n	400efe <uart_read+0x1a>
		return 1;
  400efa:	2301      	movs	r3, #1
  400efc:	e005      	b.n	400f0a <uart_read+0x26>

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  400efe:	687b      	ldr	r3, [r7, #4]
  400f00:	699b      	ldr	r3, [r3, #24]
  400f02:	b2da      	uxtb	r2, r3
  400f04:	683b      	ldr	r3, [r7, #0]
  400f06:	701a      	strb	r2, [r3, #0]
	return 0;
  400f08:	2300      	movs	r3, #0
}
  400f0a:	4618      	mov	r0, r3
  400f0c:	370c      	adds	r7, #12
  400f0e:	46bd      	mov	sp, r7
  400f10:	f85d 7b04 	ldr.w	r7, [sp], #4
  400f14:	4770      	bx	lr
  400f16:	bf00      	nop

00400f18 <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  400f18:	b480      	push	{r7}
  400f1a:	b089      	sub	sp, #36	; 0x24
  400f1c:	af00      	add	r7, sp, #0
  400f1e:	60f8      	str	r0, [r7, #12]
  400f20:	60b9      	str	r1, [r7, #8]
  400f22:	607a      	str	r2, [r7, #4]
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  400f24:	68bb      	ldr	r3, [r7, #8]
  400f26:	011a      	lsls	r2, r3, #4
  400f28:	687b      	ldr	r3, [r7, #4]
  400f2a:	429a      	cmp	r2, r3
  400f2c:	d802      	bhi.n	400f34 <usart_set_async_baudrate+0x1c>
		over = HIGH_FRQ_SAMPLE_DIV;
  400f2e:	2310      	movs	r3, #16
  400f30:	61fb      	str	r3, [r7, #28]
  400f32:	e001      	b.n	400f38 <usart_set_async_baudrate+0x20>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
  400f34:	2308      	movs	r3, #8
  400f36:	61fb      	str	r3, [r7, #28]
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  400f38:	687b      	ldr	r3, [r7, #4]
  400f3a:	00da      	lsls	r2, r3, #3
  400f3c:	69fb      	ldr	r3, [r7, #28]
  400f3e:	68b9      	ldr	r1, [r7, #8]
  400f40:	fb01 f303 	mul.w	r3, r1, r3
  400f44:	085b      	lsrs	r3, r3, #1
  400f46:	441a      	add	r2, r3
  400f48:	69fb      	ldr	r3, [r7, #28]
  400f4a:	68b9      	ldr	r1, [r7, #8]
  400f4c:	fb01 f303 	mul.w	r3, r1, r3
  400f50:	fbb2 f3f3 	udiv	r3, r2, r3
  400f54:	61bb      	str	r3, [r7, #24]
	cd = cd_fp >> 3;
  400f56:	69bb      	ldr	r3, [r7, #24]
  400f58:	08db      	lsrs	r3, r3, #3
  400f5a:	617b      	str	r3, [r7, #20]
	fp = cd_fp & 0x07;
  400f5c:	69bb      	ldr	r3, [r7, #24]
  400f5e:	f003 0307 	and.w	r3, r3, #7
  400f62:	613b      	str	r3, [r7, #16]
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  400f64:	697b      	ldr	r3, [r7, #20]
  400f66:	2b00      	cmp	r3, #0
  400f68:	d003      	beq.n	400f72 <usart_set_async_baudrate+0x5a>
  400f6a:	697b      	ldr	r3, [r7, #20]
  400f6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
  400f70:	d301      	bcc.n	400f76 <usart_set_async_baudrate+0x5e>
		return 1;
  400f72:	2301      	movs	r3, #1
  400f74:	e00f      	b.n	400f96 <usart_set_async_baudrate+0x7e>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
  400f76:	69fb      	ldr	r3, [r7, #28]
  400f78:	2b08      	cmp	r3, #8
  400f7a:	d105      	bne.n	400f88 <usart_set_async_baudrate+0x70>
		p_usart->US_MR |= US_MR_OVER;
  400f7c:	68fb      	ldr	r3, [r7, #12]
  400f7e:	685b      	ldr	r3, [r3, #4]
  400f80:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
  400f84:	68fb      	ldr	r3, [r7, #12]
  400f86:	605a      	str	r2, [r3, #4]
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  400f88:	693b      	ldr	r3, [r7, #16]
  400f8a:	041a      	lsls	r2, r3, #16
  400f8c:	697b      	ldr	r3, [r7, #20]
  400f8e:	431a      	orrs	r2, r3
  400f90:	68fb      	ldr	r3, [r7, #12]
  400f92:	621a      	str	r2, [r3, #32]

	return 0;
  400f94:	2300      	movs	r3, #0
}
  400f96:	4618      	mov	r0, r3
  400f98:	3724      	adds	r7, #36	; 0x24
  400f9a:	46bd      	mov	sp, r7
  400f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
  400fa0:	4770      	bx	lr
  400fa2:	bf00      	nop

00400fa4 <usart_reset>:
 * \brief Reset the USART and disable TX and RX.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset(Usart *p_usart)
{
  400fa4:	b580      	push	{r7, lr}
  400fa6:	b082      	sub	sp, #8
  400fa8:	af00      	add	r7, sp, #0
  400faa:	6078      	str	r0, [r7, #4]
	/* Disable the Write Protect. */
	usart_disable_writeprotect(p_usart);
  400fac:	6878      	ldr	r0, [r7, #4]
  400fae:	4b0d      	ldr	r3, [pc, #52]	; (400fe4 <usart_reset+0x40>)
  400fb0:	4798      	blx	r3

	/* Reset registers that could cause unpredictable behavior after reset. */
	p_usart->US_MR = 0;
  400fb2:	687b      	ldr	r3, [r7, #4]
  400fb4:	2200      	movs	r2, #0
  400fb6:	605a      	str	r2, [r3, #4]
	p_usart->US_RTOR = 0;
  400fb8:	687b      	ldr	r3, [r7, #4]
  400fba:	2200      	movs	r2, #0
  400fbc:	625a      	str	r2, [r3, #36]	; 0x24
	p_usart->US_TTGR = 0;
  400fbe:	687b      	ldr	r3, [r7, #4]
  400fc0:	2200      	movs	r2, #0
  400fc2:	629a      	str	r2, [r3, #40]	; 0x28

	/* Disable TX and RX. */
	usart_reset_tx(p_usart);
  400fc4:	6878      	ldr	r0, [r7, #4]
  400fc6:	4b08      	ldr	r3, [pc, #32]	; (400fe8 <usart_reset+0x44>)
  400fc8:	4798      	blx	r3
	usart_reset_rx(p_usart);
  400fca:	6878      	ldr	r0, [r7, #4]
  400fcc:	4b07      	ldr	r3, [pc, #28]	; (400fec <usart_reset+0x48>)
  400fce:	4798      	blx	r3
	/* Reset status bits. */
	usart_reset_status(p_usart);
  400fd0:	6878      	ldr	r0, [r7, #4]
  400fd2:	4b07      	ldr	r3, [pc, #28]	; (400ff0 <usart_reset+0x4c>)
  400fd4:	4798      	blx	r3
	/* Turn off RTS and DTR if exist. */
	usart_drive_RTS_pin_high(p_usart);
  400fd6:	6878      	ldr	r0, [r7, #4]
  400fd8:	4b06      	ldr	r3, [pc, #24]	; (400ff4 <usart_reset+0x50>)
  400fda:	4798      	blx	r3
#if (SAM3S || SAM4S || SAM3U || SAM4L || SAM4E)
	usart_drive_DTR_pin_high(p_usart);
#endif
}
  400fdc:	3708      	adds	r7, #8
  400fde:	46bd      	mov	sp, r7
  400fe0:	bd80      	pop	{r7, pc}
  400fe2:	bf00      	nop
  400fe4:	004011b1 	.word	0x004011b1
  400fe8:	00401095 	.word	0x00401095
  400fec:	004010c5 	.word	0x004010c5
  400ff0:	00401111 	.word	0x00401111
  400ff4:	0040112d 	.word	0x0040112d

00400ff8 <usart_init_rs232>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_rs232(Usart *p_usart,
		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
{
  400ff8:	b580      	push	{r7, lr}
  400ffa:	b084      	sub	sp, #16
  400ffc:	af00      	add	r7, sp, #0
  400ffe:	60f8      	str	r0, [r7, #12]
  401000:	60b9      	str	r1, [r7, #8]
  401002:	607a      	str	r2, [r7, #4]
	static uint32_t ul_reg_val;

	/* Reset the USART and shut down TX and RX. */
	usart_reset(p_usart);
  401004:	68f8      	ldr	r0, [r7, #12]
  401006:	4b1a      	ldr	r3, [pc, #104]	; (401070 <usart_init_rs232+0x78>)
  401008:	4798      	blx	r3

	ul_reg_val = 0;
  40100a:	4b1a      	ldr	r3, [pc, #104]	; (401074 <usart_init_rs232+0x7c>)
  40100c:	2200      	movs	r2, #0
  40100e:	601a      	str	r2, [r3, #0]
	/* Check whether the input values are legal. */
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  401010:	68bb      	ldr	r3, [r7, #8]
  401012:	2b00      	cmp	r3, #0
  401014:	d009      	beq.n	40102a <usart_init_rs232+0x32>
  401016:	68bb      	ldr	r3, [r7, #8]
  401018:	681b      	ldr	r3, [r3, #0]
  40101a:	68f8      	ldr	r0, [r7, #12]
  40101c:	4619      	mov	r1, r3
  40101e:	687a      	ldr	r2, [r7, #4]
  401020:	4b15      	ldr	r3, [pc, #84]	; (401078 <usart_init_rs232+0x80>)
  401022:	4798      	blx	r3
  401024:	4603      	mov	r3, r0
  401026:	2b00      	cmp	r3, #0
  401028:	d001      	beq.n	40102e <usart_init_rs232+0x36>
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
  40102a:	2301      	movs	r3, #1
  40102c:	e01b      	b.n	401066 <usart_init_rs232+0x6e>
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  40102e:	68bb      	ldr	r3, [r7, #8]
  401030:	685a      	ldr	r2, [r3, #4]
  401032:	68bb      	ldr	r3, [r7, #8]
  401034:	689b      	ldr	r3, [r3, #8]
  401036:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  401038:	68bb      	ldr	r3, [r7, #8]
  40103a:	691b      	ldr	r3, [r3, #16]
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  40103c:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  40103e:	68bb      	ldr	r3, [r7, #8]
  401040:	68db      	ldr	r3, [r3, #12]
  401042:	431a      	orrs	r2, r3
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  401044:	4b0b      	ldr	r3, [pc, #44]	; (401074 <usart_init_rs232+0x7c>)
  401046:	681b      	ldr	r3, [r3, #0]
  401048:	4313      	orrs	r3, r2
  40104a:	4a0a      	ldr	r2, [pc, #40]	; (401074 <usart_init_rs232+0x7c>)
  40104c:	6013      	str	r3, [r2, #0]
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;

	/* Configure the USART mode as normal mode. */
	ul_reg_val |= US_MR_USART_MODE_NORMAL;
  40104e:	4b09      	ldr	r3, [pc, #36]	; (401074 <usart_init_rs232+0x7c>)
  401050:	681b      	ldr	r3, [r3, #0]
  401052:	4a08      	ldr	r2, [pc, #32]	; (401074 <usart_init_rs232+0x7c>)
  401054:	6013      	str	r3, [r2, #0]

	p_usart->US_MR |= ul_reg_val;
  401056:	68fb      	ldr	r3, [r7, #12]
  401058:	685a      	ldr	r2, [r3, #4]
  40105a:	4b06      	ldr	r3, [pc, #24]	; (401074 <usart_init_rs232+0x7c>)
  40105c:	681b      	ldr	r3, [r3, #0]
  40105e:	431a      	orrs	r2, r3
  401060:	68fb      	ldr	r3, [r7, #12]
  401062:	605a      	str	r2, [r3, #4]

	return 0;
  401064:	2300      	movs	r3, #0
}
  401066:	4618      	mov	r0, r3
  401068:	3710      	adds	r7, #16
  40106a:	46bd      	mov	sp, r7
  40106c:	bd80      	pop	{r7, pc}
  40106e:	bf00      	nop
  401070:	00400fa5 	.word	0x00400fa5
  401074:	20400948 	.word	0x20400948
  401078:	00400f19 	.word	0x00400f19

0040107c <usart_enable_tx>:
 * \brief Enable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_tx(Usart *p_usart)
{
  40107c:	b480      	push	{r7}
  40107e:	b083      	sub	sp, #12
  401080:	af00      	add	r7, sp, #0
  401082:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_TXEN;
  401084:	687b      	ldr	r3, [r7, #4]
  401086:	2240      	movs	r2, #64	; 0x40
  401088:	601a      	str	r2, [r3, #0]
}
  40108a:	370c      	adds	r7, #12
  40108c:	46bd      	mov	sp, r7
  40108e:	f85d 7b04 	ldr.w	r7, [sp], #4
  401092:	4770      	bx	lr

00401094 <usart_reset_tx>:
 * \brief Immediately stop and disable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_tx(Usart *p_usart)
{
  401094:	b480      	push	{r7}
  401096:	b083      	sub	sp, #12
  401098:	af00      	add	r7, sp, #0
  40109a:	6078      	str	r0, [r7, #4]
	/* Reset transmitter */
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  40109c:	687b      	ldr	r3, [r7, #4]
  40109e:	2288      	movs	r2, #136	; 0x88
  4010a0:	601a      	str	r2, [r3, #0]
}
  4010a2:	370c      	adds	r7, #12
  4010a4:	46bd      	mov	sp, r7
  4010a6:	f85d 7b04 	ldr.w	r7, [sp], #4
  4010aa:	4770      	bx	lr

004010ac <usart_enable_rx>:
 * \brief Enable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_rx(Usart *p_usart)
{
  4010ac:	b480      	push	{r7}
  4010ae:	b083      	sub	sp, #12
  4010b0:	af00      	add	r7, sp, #0
  4010b2:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RXEN;
  4010b4:	687b      	ldr	r3, [r7, #4]
  4010b6:	2210      	movs	r2, #16
  4010b8:	601a      	str	r2, [r3, #0]
}
  4010ba:	370c      	adds	r7, #12
  4010bc:	46bd      	mov	sp, r7
  4010be:	f85d 7b04 	ldr.w	r7, [sp], #4
  4010c2:	4770      	bx	lr

004010c4 <usart_reset_rx>:
 * \brief Immediately stop and disable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_rx(Usart *p_usart)
{
  4010c4:	b480      	push	{r7}
  4010c6:	b083      	sub	sp, #12
  4010c8:	af00      	add	r7, sp, #0
  4010ca:	6078      	str	r0, [r7, #4]
	/* Reset Receiver */
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  4010cc:	687b      	ldr	r3, [r7, #4]
  4010ce:	2224      	movs	r2, #36	; 0x24
  4010d0:	601a      	str	r2, [r3, #0]
}
  4010d2:	370c      	adds	r7, #12
  4010d4:	46bd      	mov	sp, r7
  4010d6:	f85d 7b04 	ldr.w	r7, [sp], #4
  4010da:	4770      	bx	lr

004010dc <usart_disable_interrupt>:
 *
 * \param p_usart Pointer to a USART peripheral.
 * \param ul_sources Interrupt sources bit map.
 */
void usart_disable_interrupt(Usart *p_usart, uint32_t ul_sources)
{
  4010dc:	b480      	push	{r7}
  4010de:	b083      	sub	sp, #12
  4010e0:	af00      	add	r7, sp, #0
  4010e2:	6078      	str	r0, [r7, #4]
  4010e4:	6039      	str	r1, [r7, #0]
	p_usart->US_IDR = ul_sources;
  4010e6:	687b      	ldr	r3, [r7, #4]
  4010e8:	683a      	ldr	r2, [r7, #0]
  4010ea:	60da      	str	r2, [r3, #12]
}
  4010ec:	370c      	adds	r7, #12
  4010ee:	46bd      	mov	sp, r7
  4010f0:	f85d 7b04 	ldr.w	r7, [sp], #4
  4010f4:	4770      	bx	lr
  4010f6:	bf00      	nop

004010f8 <usart_get_status>:
 * \param p_usart Pointer to a USART instance.
 *
 * \return The current USART status.
 */
uint32_t usart_get_status(Usart *p_usart)
{
  4010f8:	b480      	push	{r7}
  4010fa:	b083      	sub	sp, #12
  4010fc:	af00      	add	r7, sp, #0
  4010fe:	6078      	str	r0, [r7, #4]
	return p_usart->US_CSR;
  401100:	687b      	ldr	r3, [r7, #4]
  401102:	695b      	ldr	r3, [r3, #20]
}
  401104:	4618      	mov	r0, r3
  401106:	370c      	adds	r7, #12
  401108:	46bd      	mov	sp, r7
  40110a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40110e:	4770      	bx	lr

00401110 <usart_reset_status>:
 * \brief Reset status bits (PARE, OVER, MANERR, UNRE and PXBRK in US_CSR).
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_status(Usart *p_usart)
{
  401110:	b480      	push	{r7}
  401112:	b083      	sub	sp, #12
  401114:	af00      	add	r7, sp, #0
  401116:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RSTSTA;
  401118:	687b      	ldr	r3, [r7, #4]
  40111a:	f44f 7280 	mov.w	r2, #256	; 0x100
  40111e:	601a      	str	r2, [r3, #0]
}
  401120:	370c      	adds	r7, #12
  401122:	46bd      	mov	sp, r7
  401124:	f85d 7b04 	ldr.w	r7, [sp], #4
  401128:	4770      	bx	lr
  40112a:	bf00      	nop

0040112c <usart_drive_RTS_pin_high>:
 * \brief Drive the pin RTS to 1.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_RTS_pin_high(Usart *p_usart)
{
  40112c:	b480      	push	{r7}
  40112e:	b083      	sub	sp, #12
  401130:	af00      	add	r7, sp, #0
  401132:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RTSDIS;
  401134:	687b      	ldr	r3, [r7, #4]
  401136:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  40113a:	601a      	str	r2, [r3, #0]
}
  40113c:	370c      	adds	r7, #12
  40113e:	46bd      	mov	sp, r7
  401140:	f85d 7b04 	ldr.w	r7, [sp], #4
  401144:	4770      	bx	lr
  401146:	bf00      	nop

00401148 <usart_write>:
 *
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
  401148:	b480      	push	{r7}
  40114a:	b083      	sub	sp, #12
  40114c:	af00      	add	r7, sp, #0
  40114e:	6078      	str	r0, [r7, #4]
  401150:	6039      	str	r1, [r7, #0]
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  401152:	687b      	ldr	r3, [r7, #4]
  401154:	695b      	ldr	r3, [r3, #20]
  401156:	f003 0302 	and.w	r3, r3, #2
  40115a:	2b00      	cmp	r3, #0
  40115c:	d101      	bne.n	401162 <usart_write+0x1a>
		return 1;
  40115e:	2301      	movs	r3, #1
  401160:	e005      	b.n	40116e <usart_write+0x26>
	}

	p_usart->US_THR = US_THR_TXCHR(c);
  401162:	683b      	ldr	r3, [r7, #0]
  401164:	f3c3 0208 	ubfx	r2, r3, #0, #9
  401168:	687b      	ldr	r3, [r7, #4]
  40116a:	61da      	str	r2, [r3, #28]
	return 0;
  40116c:	2300      	movs	r3, #0
}
  40116e:	4618      	mov	r0, r3
  401170:	370c      	adds	r7, #12
  401172:	46bd      	mov	sp, r7
  401174:	f85d 7b04 	ldr.w	r7, [sp], #4
  401178:	4770      	bx	lr
  40117a:	bf00      	nop

0040117c <usart_read>:
 *
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
  40117c:	b480      	push	{r7}
  40117e:	b083      	sub	sp, #12
  401180:	af00      	add	r7, sp, #0
  401182:	6078      	str	r0, [r7, #4]
  401184:	6039      	str	r1, [r7, #0]
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  401186:	687b      	ldr	r3, [r7, #4]
  401188:	695b      	ldr	r3, [r3, #20]
  40118a:	f003 0301 	and.w	r3, r3, #1
  40118e:	2b00      	cmp	r3, #0
  401190:	d101      	bne.n	401196 <usart_read+0x1a>
		return 1;
  401192:	2301      	movs	r3, #1
  401194:	e006      	b.n	4011a4 <usart_read+0x28>
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  401196:	687b      	ldr	r3, [r7, #4]
  401198:	699b      	ldr	r3, [r3, #24]
  40119a:	f3c3 0208 	ubfx	r2, r3, #0, #9
  40119e:	683b      	ldr	r3, [r7, #0]
  4011a0:	601a      	str	r2, [r3, #0]

	return 0;
  4011a2:	2300      	movs	r3, #0
}
  4011a4:	4618      	mov	r0, r3
  4011a6:	370c      	adds	r7, #12
  4011a8:	46bd      	mov	sp, r7
  4011aa:	f85d 7b04 	ldr.w	r7, [sp], #4
  4011ae:	4770      	bx	lr

004011b0 <usart_disable_writeprotect>:
 * \brief Disable write protect of USART registers.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
  4011b0:	b480      	push	{r7}
  4011b2:	b083      	sub	sp, #12
  4011b4:	af00      	add	r7, sp, #0
  4011b6:	6078      	str	r0, [r7, #4]
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  4011b8:	687b      	ldr	r3, [r7, #4]
  4011ba:	4a04      	ldr	r2, [pc, #16]	; (4011cc <usart_disable_writeprotect+0x1c>)
  4011bc:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
}
  4011c0:	370c      	adds	r7, #12
  4011c2:	46bd      	mov	sp, r7
  4011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
  4011c8:	4770      	bx	lr
  4011ca:	bf00      	nop
  4011cc:	55534100 	.word	0x55534100

004011d0 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  4011d0:	b580      	push	{r7, lr}
  4011d2:	b082      	sub	sp, #8
  4011d4:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
  4011d6:	4b16      	ldr	r3, [pc, #88]	; (401230 <Reset_Handler+0x60>)
  4011d8:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
  4011da:	4b16      	ldr	r3, [pc, #88]	; (401234 <Reset_Handler+0x64>)
  4011dc:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
  4011de:	687a      	ldr	r2, [r7, #4]
  4011e0:	683b      	ldr	r3, [r7, #0]
  4011e2:	429a      	cmp	r2, r3
  4011e4:	d00c      	beq.n	401200 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
  4011e6:	e007      	b.n	4011f8 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
  4011e8:	683b      	ldr	r3, [r7, #0]
  4011ea:	1d1a      	adds	r2, r3, #4
  4011ec:	603a      	str	r2, [r7, #0]
  4011ee:	687a      	ldr	r2, [r7, #4]
  4011f0:	1d11      	adds	r1, r2, #4
  4011f2:	6079      	str	r1, [r7, #4]
  4011f4:	6812      	ldr	r2, [r2, #0]
  4011f6:	601a      	str	r2, [r3, #0]
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
  4011f8:	683b      	ldr	r3, [r7, #0]
  4011fa:	4a0f      	ldr	r2, [pc, #60]	; (401238 <Reset_Handler+0x68>)
  4011fc:	4293      	cmp	r3, r2
  4011fe:	d3f3      	bcc.n	4011e8 <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
  401200:	4b0e      	ldr	r3, [pc, #56]	; (40123c <Reset_Handler+0x6c>)
  401202:	603b      	str	r3, [r7, #0]
  401204:	e004      	b.n	401210 <Reset_Handler+0x40>
                *pDest++ = 0;
  401206:	683b      	ldr	r3, [r7, #0]
  401208:	1d1a      	adds	r2, r3, #4
  40120a:	603a      	str	r2, [r7, #0]
  40120c:	2200      	movs	r2, #0
  40120e:	601a      	str	r2, [r3, #0]
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
  401210:	683b      	ldr	r3, [r7, #0]
  401212:	4a0b      	ldr	r2, [pc, #44]	; (401240 <Reset_Handler+0x70>)
  401214:	4293      	cmp	r3, r2
  401216:	d3f6      	bcc.n	401206 <Reset_Handler+0x36>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
  401218:	4b0a      	ldr	r3, [pc, #40]	; (401244 <Reset_Handler+0x74>)
  40121a:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  40121c:	4a0a      	ldr	r2, [pc, #40]	; (401248 <Reset_Handler+0x78>)
  40121e:	687b      	ldr	r3, [r7, #4]
  401220:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  401224:	6093      	str	r3, [r2, #8]

        /* Initialize the C library */
        __libc_init_array();
  401226:	4b09      	ldr	r3, [pc, #36]	; (40124c <Reset_Handler+0x7c>)
  401228:	4798      	blx	r3

        /* Branch to main function */
        main();
  40122a:	4b09      	ldr	r3, [pc, #36]	; (401250 <Reset_Handler+0x80>)
  40122c:	4798      	blx	r3

        /* Infinite loop */
        while (1);
  40122e:	e7fe      	b.n	40122e <Reset_Handler+0x5e>
  401230:	00403b14 	.word	0x00403b14
  401234:	20400000 	.word	0x20400000
  401238:	204008bc 	.word	0x204008bc
  40123c:	204008bc 	.word	0x204008bc
  401240:	20401178 	.word	0x20401178
  401244:	00400000 	.word	0x00400000
  401248:	e000ed00 	.word	0xe000ed00
  40124c:	00401d4d 	.word	0x00401d4d
  401250:	00401c31 	.word	0x00401c31

00401254 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  401254:	b480      	push	{r7}
  401256:	af00      	add	r7, sp, #0
        while (1) {
        }
  401258:	e7fe      	b.n	401258 <Dummy_Handler+0x4>
  40125a:	bf00      	nop

0040125c <SystemCoreClockUpdate>:

  SystemCoreClock = CHIP_FREQ_CPU_MAX;
}

void SystemCoreClockUpdate( void )
{
  40125c:	b480      	push	{r7}
  40125e:	af00      	add	r7, sp, #0
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  401260:	4b51      	ldr	r3, [pc, #324]	; (4013a8 <SystemCoreClockUpdate+0x14c>)
  401262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401264:	f003 0303 	and.w	r3, r3, #3
  401268:	2b01      	cmp	r3, #1
  40126a:	d014      	beq.n	401296 <SystemCoreClockUpdate+0x3a>
  40126c:	2b01      	cmp	r3, #1
  40126e:	d302      	bcc.n	401276 <SystemCoreClockUpdate+0x1a>
  401270:	2b02      	cmp	r3, #2
  401272:	d038      	beq.n	4012e6 <SystemCoreClockUpdate+0x8a>
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
      }
    break;

    default:
    break;
  401274:	e07b      	b.n	40136e <SystemCoreClockUpdate+0x112>
{
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  {
    case PMC_MCKR_CSS_SLOW_CLK: /* Slow clock */
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  401276:	4b4d      	ldr	r3, [pc, #308]	; (4013ac <SystemCoreClockUpdate+0x150>)
  401278:	695b      	ldr	r3, [r3, #20]
  40127a:	f003 0380 	and.w	r3, r3, #128	; 0x80
  40127e:	2b00      	cmp	r3, #0
  401280:	d004      	beq.n	40128c <SystemCoreClockUpdate+0x30>
      {
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  401282:	4b4b      	ldr	r3, [pc, #300]	; (4013b0 <SystemCoreClockUpdate+0x154>)
  401284:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  401288:	601a      	str	r2, [r3, #0]
      }
      else
      {
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
      }
    break;
  40128a:	e070      	b.n	40136e <SystemCoreClockUpdate+0x112>
      {
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
      }
      else
      {
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  40128c:	4b48      	ldr	r3, [pc, #288]	; (4013b0 <SystemCoreClockUpdate+0x154>)
  40128e:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
  401292:	601a      	str	r2, [r3, #0]
      }
    break;
  401294:	e06b      	b.n	40136e <SystemCoreClockUpdate+0x112>

    case PMC_MCKR_CSS_MAIN_CLK: /* Main clock */
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  401296:	4b44      	ldr	r3, [pc, #272]	; (4013a8 <SystemCoreClockUpdate+0x14c>)
  401298:	6a1b      	ldr	r3, [r3, #32]
  40129a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  40129e:	2b00      	cmp	r3, #0
  4012a0:	d003      	beq.n	4012aa <SystemCoreClockUpdate+0x4e>
      {
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  4012a2:	4b43      	ldr	r3, [pc, #268]	; (4013b0 <SystemCoreClockUpdate+0x154>)
  4012a4:	4a43      	ldr	r2, [pc, #268]	; (4013b4 <SystemCoreClockUpdate+0x158>)
  4012a6:	601a      	str	r2, [r3, #0]
  4012a8:	e01c      	b.n	4012e4 <SystemCoreClockUpdate+0x88>
      }
      else
      {
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4012aa:	4b41      	ldr	r3, [pc, #260]	; (4013b0 <SystemCoreClockUpdate+0x154>)
  4012ac:	4a42      	ldr	r2, [pc, #264]	; (4013b8 <SystemCoreClockUpdate+0x15c>)
  4012ae:	601a      	str	r2, [r3, #0]

        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  4012b0:	4b3d      	ldr	r3, [pc, #244]	; (4013a8 <SystemCoreClockUpdate+0x14c>)
  4012b2:	6a1b      	ldr	r3, [r3, #32]
  4012b4:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4012b8:	2b10      	cmp	r3, #16
  4012ba:	d004      	beq.n	4012c6 <SystemCoreClockUpdate+0x6a>
  4012bc:	2b20      	cmp	r3, #32
  4012be:	d008      	beq.n	4012d2 <SystemCoreClockUpdate+0x76>
  4012c0:	2b00      	cmp	r3, #0
  4012c2:	d00e      	beq.n	4012e2 <SystemCoreClockUpdate+0x86>
          case CKGR_MOR_MOSCRCF_12_MHz:
            SystemCoreClock *= 3U;
          break;

          default:
          break;
  4012c4:	e00e      	b.n	4012e4 <SystemCoreClockUpdate+0x88>
        {
          case CKGR_MOR_MOSCRCF_4_MHz:
          break;

          case CKGR_MOR_MOSCRCF_8_MHz:
            SystemCoreClock *= 2U;
  4012c6:	4b3a      	ldr	r3, [pc, #232]	; (4013b0 <SystemCoreClockUpdate+0x154>)
  4012c8:	681b      	ldr	r3, [r3, #0]
  4012ca:	005b      	lsls	r3, r3, #1
  4012cc:	4a38      	ldr	r2, [pc, #224]	; (4013b0 <SystemCoreClockUpdate+0x154>)
  4012ce:	6013      	str	r3, [r2, #0]
          break;
  4012d0:	e008      	b.n	4012e4 <SystemCoreClockUpdate+0x88>

          case CKGR_MOR_MOSCRCF_12_MHz:
            SystemCoreClock *= 3U;
  4012d2:	4b37      	ldr	r3, [pc, #220]	; (4013b0 <SystemCoreClockUpdate+0x154>)
  4012d4:	681a      	ldr	r2, [r3, #0]
  4012d6:	4613      	mov	r3, r2
  4012d8:	005b      	lsls	r3, r3, #1
  4012da:	4413      	add	r3, r2
  4012dc:	4a34      	ldr	r2, [pc, #208]	; (4013b0 <SystemCoreClockUpdate+0x154>)
  4012de:	6013      	str	r3, [r2, #0]
          break;
  4012e0:	e000      	b.n	4012e4 <SystemCoreClockUpdate+0x88>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;

        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
        {
          case CKGR_MOR_MOSCRCF_4_MHz:
          break;
  4012e2:	bf00      	nop

          default:
          break;
        }
      }
    break;
  4012e4:	e043      	b.n	40136e <SystemCoreClockUpdate+0x112>

    case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  4012e6:	4b30      	ldr	r3, [pc, #192]	; (4013a8 <SystemCoreClockUpdate+0x14c>)
  4012e8:	6a1b      	ldr	r3, [r3, #32]
  4012ea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  4012ee:	2b00      	cmp	r3, #0
  4012f0:	d003      	beq.n	4012fa <SystemCoreClockUpdate+0x9e>
      {
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  4012f2:	4b2f      	ldr	r3, [pc, #188]	; (4013b0 <SystemCoreClockUpdate+0x154>)
  4012f4:	4a2f      	ldr	r2, [pc, #188]	; (4013b4 <SystemCoreClockUpdate+0x158>)
  4012f6:	601a      	str	r2, [r3, #0]
  4012f8:	e01c      	b.n	401334 <SystemCoreClockUpdate+0xd8>
      }
      else
      {
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4012fa:	4b2d      	ldr	r3, [pc, #180]	; (4013b0 <SystemCoreClockUpdate+0x154>)
  4012fc:	4a2e      	ldr	r2, [pc, #184]	; (4013b8 <SystemCoreClockUpdate+0x15c>)
  4012fe:	601a      	str	r2, [r3, #0]

        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  401300:	4b29      	ldr	r3, [pc, #164]	; (4013a8 <SystemCoreClockUpdate+0x14c>)
  401302:	6a1b      	ldr	r3, [r3, #32]
  401304:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401308:	2b10      	cmp	r3, #16
  40130a:	d004      	beq.n	401316 <SystemCoreClockUpdate+0xba>
  40130c:	2b20      	cmp	r3, #32
  40130e:	d008      	beq.n	401322 <SystemCoreClockUpdate+0xc6>
  401310:	2b00      	cmp	r3, #0
  401312:	d00e      	beq.n	401332 <SystemCoreClockUpdate+0xd6>
          case CKGR_MOR_MOSCRCF_12_MHz:
            SystemCoreClock *= 3U;
          break;

          default:
          break;
  401314:	e00e      	b.n	401334 <SystemCoreClockUpdate+0xd8>
        {
          case CKGR_MOR_MOSCRCF_4_MHz:
          break;

          case CKGR_MOR_MOSCRCF_8_MHz:
            SystemCoreClock *= 2U;
  401316:	4b26      	ldr	r3, [pc, #152]	; (4013b0 <SystemCoreClockUpdate+0x154>)
  401318:	681b      	ldr	r3, [r3, #0]
  40131a:	005b      	lsls	r3, r3, #1
  40131c:	4a24      	ldr	r2, [pc, #144]	; (4013b0 <SystemCoreClockUpdate+0x154>)
  40131e:	6013      	str	r3, [r2, #0]
          break;
  401320:	e008      	b.n	401334 <SystemCoreClockUpdate+0xd8>

          case CKGR_MOR_MOSCRCF_12_MHz:
            SystemCoreClock *= 3U;
  401322:	4b23      	ldr	r3, [pc, #140]	; (4013b0 <SystemCoreClockUpdate+0x154>)
  401324:	681a      	ldr	r2, [r3, #0]
  401326:	4613      	mov	r3, r2
  401328:	005b      	lsls	r3, r3, #1
  40132a:	4413      	add	r3, r2
  40132c:	4a20      	ldr	r2, [pc, #128]	; (4013b0 <SystemCoreClockUpdate+0x154>)
  40132e:	6013      	str	r3, [r2, #0]
          break;
  401330:	e000      	b.n	401334 <SystemCoreClockUpdate+0xd8>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;

        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
        {
          case CKGR_MOR_MOSCRCF_4_MHz:
          break;
  401332:	bf00      	nop
          default:
          break;
        }
      }

      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  401334:	4b1c      	ldr	r3, [pc, #112]	; (4013a8 <SystemCoreClockUpdate+0x14c>)
  401336:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401338:	f003 0303 	and.w	r3, r3, #3
  40133c:	2b02      	cmp	r3, #2
  40133e:	d115      	bne.n	40136c <SystemCoreClockUpdate+0x110>
      {
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  401340:	4b19      	ldr	r3, [pc, #100]	; (4013a8 <SystemCoreClockUpdate+0x14c>)
  401342:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  401344:	4b1d      	ldr	r3, [pc, #116]	; (4013bc <SystemCoreClockUpdate+0x160>)
  401346:	4013      	ands	r3, r2
  401348:	0c1b      	lsrs	r3, r3, #16
  40134a:	3301      	adds	r3, #1
  40134c:	4a18      	ldr	r2, [pc, #96]	; (4013b0 <SystemCoreClockUpdate+0x154>)
  40134e:	6812      	ldr	r2, [r2, #0]
  401350:	fb02 f303 	mul.w	r3, r2, r3
  401354:	4a16      	ldr	r2, [pc, #88]	; (4013b0 <SystemCoreClockUpdate+0x154>)
  401356:	6013      	str	r3, [r2, #0]
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  401358:	4b13      	ldr	r3, [pc, #76]	; (4013a8 <SystemCoreClockUpdate+0x14c>)
  40135a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  40135c:	b2db      	uxtb	r3, r3
  40135e:	4a14      	ldr	r2, [pc, #80]	; (4013b0 <SystemCoreClockUpdate+0x154>)
  401360:	6812      	ldr	r2, [r2, #0]
  401362:	fbb2 f3f3 	udiv	r3, r2, r3
  401366:	4a12      	ldr	r2, [pc, #72]	; (4013b0 <SystemCoreClockUpdate+0x154>)
  401368:	6013      	str	r3, [r2, #0]
      }
    break;
  40136a:	e7ff      	b.n	40136c <SystemCoreClockUpdate+0x110>
  40136c:	bf00      	nop

    default:
    break;
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  40136e:	4b0e      	ldr	r3, [pc, #56]	; (4013a8 <SystemCoreClockUpdate+0x14c>)
  401370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401372:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401376:	2b70      	cmp	r3, #112	; 0x70
  401378:	d108      	bne.n	40138c <SystemCoreClockUpdate+0x130>
  {
    SystemCoreClock /= 3U;
  40137a:	4b0d      	ldr	r3, [pc, #52]	; (4013b0 <SystemCoreClockUpdate+0x154>)
  40137c:	681b      	ldr	r3, [r3, #0]
  40137e:	4a10      	ldr	r2, [pc, #64]	; (4013c0 <SystemCoreClockUpdate+0x164>)
  401380:	fba2 2303 	umull	r2, r3, r2, r3
  401384:	085b      	lsrs	r3, r3, #1
  401386:	4a0a      	ldr	r2, [pc, #40]	; (4013b0 <SystemCoreClockUpdate+0x154>)
  401388:	6013      	str	r3, [r2, #0]
  40138a:	e009      	b.n	4013a0 <SystemCoreClockUpdate+0x144>
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  40138c:	4b06      	ldr	r3, [pc, #24]	; (4013a8 <SystemCoreClockUpdate+0x14c>)
  40138e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401390:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401394:	091a      	lsrs	r2, r3, #4
  401396:	4b06      	ldr	r3, [pc, #24]	; (4013b0 <SystemCoreClockUpdate+0x154>)
  401398:	681b      	ldr	r3, [r3, #0]
  40139a:	40d3      	lsrs	r3, r2
  40139c:	4a04      	ldr	r2, [pc, #16]	; (4013b0 <SystemCoreClockUpdate+0x154>)
  40139e:	6013      	str	r3, [r2, #0]
  }
}
  4013a0:	46bd      	mov	sp, r7
  4013a2:	f85d 7b04 	ldr.w	r7, [sp], #4
  4013a6:	4770      	bx	lr
  4013a8:	400e0600 	.word	0x400e0600
  4013ac:	400e1810 	.word	0x400e1810
  4013b0:	20400000 	.word	0x20400000
  4013b4:	00b71b00 	.word	0x00b71b00
  4013b8:	003d0900 	.word	0x003d0900
  4013bc:	07ff0000 	.word	0x07ff0000
  4013c0:	aaaaaaab 	.word	0xaaaaaaab

004013c4 <system_init_flash>:
/**
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  4013c4:	b480      	push	{r7}
  4013c6:	b083      	sub	sp, #12
  4013c8:	af00      	add	r7, sp, #0
  4013ca:	6078      	str	r0, [r7, #4]
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  4013cc:	687b      	ldr	r3, [r7, #4]
  4013ce:	4a18      	ldr	r2, [pc, #96]	; (401430 <system_init_flash+0x6c>)
  4013d0:	4293      	cmp	r3, r2
  4013d2:	d804      	bhi.n	4013de <system_init_flash+0x1a>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  4013d4:	4b17      	ldr	r3, [pc, #92]	; (401434 <system_init_flash+0x70>)
  4013d6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  4013da:	601a      	str	r2, [r3, #0]
  4013dc:	e023      	b.n	401426 <system_init_flash+0x62>
  }
  else
  {
    if (ul_clk < CHIP_FREQ_FWS_1)
  4013de:	687b      	ldr	r3, [r7, #4]
  4013e0:	4a15      	ldr	r2, [pc, #84]	; (401438 <system_init_flash+0x74>)
  4013e2:	4293      	cmp	r3, r2
  4013e4:	d803      	bhi.n	4013ee <system_init_flash+0x2a>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  4013e6:	4b13      	ldr	r3, [pc, #76]	; (401434 <system_init_flash+0x70>)
  4013e8:	4a14      	ldr	r2, [pc, #80]	; (40143c <system_init_flash+0x78>)
  4013ea:	601a      	str	r2, [r3, #0]
  4013ec:	e01b      	b.n	401426 <system_init_flash+0x62>
    }
    else
    {
      if (ul_clk < CHIP_FREQ_FWS_2)
  4013ee:	687b      	ldr	r3, [r7, #4]
  4013f0:	4a13      	ldr	r2, [pc, #76]	; (401440 <system_init_flash+0x7c>)
  4013f2:	4293      	cmp	r3, r2
  4013f4:	d803      	bhi.n	4013fe <system_init_flash+0x3a>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  4013f6:	4b0f      	ldr	r3, [pc, #60]	; (401434 <system_init_flash+0x70>)
  4013f8:	4a12      	ldr	r2, [pc, #72]	; (401444 <system_init_flash+0x80>)
  4013fa:	601a      	str	r2, [r3, #0]
  4013fc:	e013      	b.n	401426 <system_init_flash+0x62>
      }
      else
      {
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  4013fe:	687b      	ldr	r3, [r7, #4]
  401400:	4a11      	ldr	r2, [pc, #68]	; (401448 <system_init_flash+0x84>)
  401402:	4293      	cmp	r3, r2
  401404:	d803      	bhi.n	40140e <system_init_flash+0x4a>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  401406:	4b0b      	ldr	r3, [pc, #44]	; (401434 <system_init_flash+0x70>)
  401408:	4a10      	ldr	r2, [pc, #64]	; (40144c <system_init_flash+0x88>)
  40140a:	601a      	str	r2, [r3, #0]
  40140c:	e00b      	b.n	401426 <system_init_flash+0x62>
        }
        else
        {
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  40140e:	687b      	ldr	r3, [r7, #4]
  401410:	4a0f      	ldr	r2, [pc, #60]	; (401450 <system_init_flash+0x8c>)
  401412:	4293      	cmp	r3, r2
  401414:	d804      	bhi.n	401420 <system_init_flash+0x5c>
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  401416:	4b07      	ldr	r3, [pc, #28]	; (401434 <system_init_flash+0x70>)
  401418:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  40141c:	601a      	str	r2, [r3, #0]
  40141e:	e002      	b.n	401426 <system_init_flash+0x62>
          }
          else
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  401420:	4b04      	ldr	r3, [pc, #16]	; (401434 <system_init_flash+0x70>)
  401422:	4a0c      	ldr	r2, [pc, #48]	; (401454 <system_init_flash+0x90>)
  401424:	601a      	str	r2, [r3, #0]
          }
        }
      }
    }
  }
}
  401426:	370c      	adds	r7, #12
  401428:	46bd      	mov	sp, r7
  40142a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40142e:	4770      	bx	lr
  401430:	01312cff 	.word	0x01312cff
  401434:	400e0c00 	.word	0x400e0c00
  401438:	026259ff 	.word	0x026259ff
  40143c:	04000100 	.word	0x04000100
  401440:	039386ff 	.word	0x039386ff
  401444:	04000200 	.word	0x04000200
  401448:	04c4b3ff 	.word	0x04c4b3ff
  40144c:	04000300 	.word	0x04000300
  401450:	05f5e0ff 	.word	0x05f5e0ff
  401454:	04000500 	.word	0x04000500

00401458 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
  401458:	b480      	push	{r7}
  40145a:	b085      	sub	sp, #20
  40145c:	af00      	add	r7, sp, #0
  40145e:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;
  401460:	4b10      	ldr	r3, [pc, #64]	; (4014a4 <_sbrk+0x4c>)
  401462:	60fb      	str	r3, [r7, #12]

	if (heap == NULL) {
  401464:	4b10      	ldr	r3, [pc, #64]	; (4014a8 <_sbrk+0x50>)
  401466:	681b      	ldr	r3, [r3, #0]
  401468:	2b00      	cmp	r3, #0
  40146a:	d102      	bne.n	401472 <_sbrk+0x1a>
		heap = (unsigned char *)&_end;
  40146c:	4b0e      	ldr	r3, [pc, #56]	; (4014a8 <_sbrk+0x50>)
  40146e:	4a0f      	ldr	r2, [pc, #60]	; (4014ac <_sbrk+0x54>)
  401470:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
  401472:	4b0d      	ldr	r3, [pc, #52]	; (4014a8 <_sbrk+0x50>)
  401474:	681b      	ldr	r3, [r3, #0]
  401476:	60bb      	str	r3, [r7, #8]

	if (((int)prev_heap + incr) > ramend) {
  401478:	68ba      	ldr	r2, [r7, #8]
  40147a:	687b      	ldr	r3, [r7, #4]
  40147c:	441a      	add	r2, r3
  40147e:	68fb      	ldr	r3, [r7, #12]
  401480:	429a      	cmp	r2, r3
  401482:	dd02      	ble.n	40148a <_sbrk+0x32>
		return (caddr_t) -1;	
  401484:	f04f 33ff 	mov.w	r3, #4294967295
  401488:	e006      	b.n	401498 <_sbrk+0x40>
	}

	heap += incr;
  40148a:	4b07      	ldr	r3, [pc, #28]	; (4014a8 <_sbrk+0x50>)
  40148c:	681a      	ldr	r2, [r3, #0]
  40148e:	687b      	ldr	r3, [r7, #4]
  401490:	4413      	add	r3, r2
  401492:	4a05      	ldr	r2, [pc, #20]	; (4014a8 <_sbrk+0x50>)
  401494:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
  401496:	68bb      	ldr	r3, [r7, #8]
}
  401498:	4618      	mov	r0, r3
  40149a:	3714      	adds	r7, #20
  40149c:	46bd      	mov	sp, r7
  40149e:	f85d 7b04 	ldr.w	r7, [sp], #4
  4014a2:	4770      	bx	lr
  4014a4:	2045fffc 	.word	0x2045fffc
  4014a8:	2040094c 	.word	0x2040094c
  4014ac:	20403378 	.word	0x20403378

004014b0 <_close>:
{
	return -1;
}

extern int _close(int file)
{
  4014b0:	b480      	push	{r7}
  4014b2:	b083      	sub	sp, #12
  4014b4:	af00      	add	r7, sp, #0
  4014b6:	6078      	str	r0, [r7, #4]
	return -1;
  4014b8:	f04f 33ff 	mov.w	r3, #4294967295
}
  4014bc:	4618      	mov	r0, r3
  4014be:	370c      	adds	r7, #12
  4014c0:	46bd      	mov	sp, r7
  4014c2:	f85d 7b04 	ldr.w	r7, [sp], #4
  4014c6:	4770      	bx	lr

004014c8 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
  4014c8:	b480      	push	{r7}
  4014ca:	b083      	sub	sp, #12
  4014cc:	af00      	add	r7, sp, #0
  4014ce:	6078      	str	r0, [r7, #4]
  4014d0:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
  4014d2:	683b      	ldr	r3, [r7, #0]
  4014d4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  4014d8:	605a      	str	r2, [r3, #4]

	return 0;
  4014da:	2300      	movs	r3, #0
}
  4014dc:	4618      	mov	r0, r3
  4014de:	370c      	adds	r7, #12
  4014e0:	46bd      	mov	sp, r7
  4014e2:	f85d 7b04 	ldr.w	r7, [sp], #4
  4014e6:	4770      	bx	lr

004014e8 <_isatty>:

extern int _isatty(int file)
{
  4014e8:	b480      	push	{r7}
  4014ea:	b083      	sub	sp, #12
  4014ec:	af00      	add	r7, sp, #0
  4014ee:	6078      	str	r0, [r7, #4]
	return 1;
  4014f0:	2301      	movs	r3, #1
}
  4014f2:	4618      	mov	r0, r3
  4014f4:	370c      	adds	r7, #12
  4014f6:	46bd      	mov	sp, r7
  4014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
  4014fc:	4770      	bx	lr
  4014fe:	bf00      	nop

00401500 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
  401500:	b480      	push	{r7}
  401502:	b085      	sub	sp, #20
  401504:	af00      	add	r7, sp, #0
  401506:	60f8      	str	r0, [r7, #12]
  401508:	60b9      	str	r1, [r7, #8]
  40150a:	607a      	str	r2, [r7, #4]
	return 0;
  40150c:	2300      	movs	r3, #0
}
  40150e:	4618      	mov	r0, r3
  401510:	3714      	adds	r7, #20
  401512:	46bd      	mov	sp, r7
  401514:	f85d 7b04 	ldr.w	r7, [sp], #4
  401518:	4770      	bx	lr
  40151a:	bf00      	nop

0040151c <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  40151c:	b480      	push	{r7}
  40151e:	b083      	sub	sp, #12
  401520:	af00      	add	r7, sp, #0
  401522:	4603      	mov	r3, r0
  401524:	6039      	str	r1, [r7, #0]
  401526:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
  401528:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40152c:	2b00      	cmp	r3, #0
  40152e:	da0b      	bge.n	401548 <NVIC_SetPriority+0x2c>
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  401530:	490d      	ldr	r1, [pc, #52]	; (401568 <NVIC_SetPriority+0x4c>)
  401532:	79fb      	ldrb	r3, [r7, #7]
  401534:	f003 030f 	and.w	r3, r3, #15
  401538:	3b04      	subs	r3, #4
  40153a:	683a      	ldr	r2, [r7, #0]
  40153c:	b2d2      	uxtb	r2, r2
  40153e:	0152      	lsls	r2, r2, #5
  401540:	b2d2      	uxtb	r2, r2
  401542:	440b      	add	r3, r1
  401544:	761a      	strb	r2, [r3, #24]
  401546:	e009      	b.n	40155c <NVIC_SetPriority+0x40>
  else {
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  401548:	4908      	ldr	r1, [pc, #32]	; (40156c <NVIC_SetPriority+0x50>)
  40154a:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40154e:	683a      	ldr	r2, [r7, #0]
  401550:	b2d2      	uxtb	r2, r2
  401552:	0152      	lsls	r2, r2, #5
  401554:	b2d2      	uxtb	r2, r2
  401556:	440b      	add	r3, r1
  401558:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
  40155c:	370c      	adds	r7, #12
  40155e:	46bd      	mov	sp, r7
  401560:	f85d 7b04 	ldr.w	r7, [sp], #4
  401564:	4770      	bx	lr
  401566:	bf00      	nop
  401568:	e000ed00 	.word	0xe000ed00
  40156c:	e000e100 	.word	0xe000e100

00401570 <SysTick_Config>:
    function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  401570:	b580      	push	{r7, lr}
  401572:	b082      	sub	sp, #8
  401574:	af00      	add	r7, sp, #0
  401576:	6078      	str	r0, [r7, #4]
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
  401578:	687b      	ldr	r3, [r7, #4]
  40157a:	3b01      	subs	r3, #1
  40157c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
  401580:	d301      	bcc.n	401586 <SysTick_Config+0x16>
  401582:	2301      	movs	r3, #1
  401584:	e00f      	b.n	4015a6 <SysTick_Config+0x36>

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
  401586:	4a0a      	ldr	r2, [pc, #40]	; (4015b0 <SysTick_Config+0x40>)
  401588:	687b      	ldr	r3, [r7, #4]
  40158a:	3b01      	subs	r3, #1
  40158c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  40158e:	f04f 30ff 	mov.w	r0, #4294967295
  401592:	2107      	movs	r1, #7
  401594:	4b07      	ldr	r3, [pc, #28]	; (4015b4 <SysTick_Config+0x44>)
  401596:	4798      	blx	r3
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
  401598:	4b05      	ldr	r3, [pc, #20]	; (4015b0 <SysTick_Config+0x40>)
  40159a:	2200      	movs	r2, #0
  40159c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
  40159e:	4b04      	ldr	r3, [pc, #16]	; (4015b0 <SysTick_Config+0x40>)
  4015a0:	2207      	movs	r2, #7
  4015a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
  4015a4:	2300      	movs	r3, #0
}
  4015a6:	4618      	mov	r0, r3
  4015a8:	3708      	adds	r7, #8
  4015aa:	46bd      	mov	sp, r7
  4015ac:	bd80      	pop	{r7, pc}
  4015ae:	bf00      	nop
  4015b0:	e000e010 	.word	0xe000e010
  4015b4:	0040151d 	.word	0x0040151d

004015b8 <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  4015b8:	b480      	push	{r7}
  4015ba:	b083      	sub	sp, #12
  4015bc:	af00      	add	r7, sp, #0
  4015be:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  4015c0:	687b      	ldr	r3, [r7, #4]
  4015c2:	2b07      	cmp	r3, #7
  4015c4:	d825      	bhi.n	401612 <osc_get_rate+0x5a>
  4015c6:	a201      	add	r2, pc, #4	; (adr r2, 4015cc <osc_get_rate+0x14>)
  4015c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4015cc:	004015ed 	.word	0x004015ed
  4015d0:	004015f3 	.word	0x004015f3
  4015d4:	004015f9 	.word	0x004015f9
  4015d8:	004015ff 	.word	0x004015ff
  4015dc:	00401603 	.word	0x00401603
  4015e0:	00401607 	.word	0x00401607
  4015e4:	0040160b 	.word	0x0040160b
  4015e8:	0040160f 	.word	0x0040160f
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  4015ec:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  4015f0:	e010      	b.n	401614 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  4015f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4015f6:	e00d      	b.n	401614 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  4015f8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4015fc:	e00a      	b.n	401614 <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  4015fe:	4b08      	ldr	r3, [pc, #32]	; (401620 <osc_get_rate+0x68>)
  401600:	e008      	b.n	401614 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  401602:	4b08      	ldr	r3, [pc, #32]	; (401624 <osc_get_rate+0x6c>)
  401604:	e006      	b.n	401614 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  401606:	4b08      	ldr	r3, [pc, #32]	; (401628 <osc_get_rate+0x70>)
  401608:	e004      	b.n	401614 <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  40160a:	4b07      	ldr	r3, [pc, #28]	; (401628 <osc_get_rate+0x70>)
  40160c:	e002      	b.n	401614 <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  40160e:	4b06      	ldr	r3, [pc, #24]	; (401628 <osc_get_rate+0x70>)
  401610:	e000      	b.n	401614 <osc_get_rate+0x5c>
	}

	return 0;
  401612:	2300      	movs	r3, #0
}
  401614:	4618      	mov	r0, r3
  401616:	370c      	adds	r7, #12
  401618:	46bd      	mov	sp, r7
  40161a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40161e:	4770      	bx	lr
  401620:	003d0900 	.word	0x003d0900
  401624:	007a1200 	.word	0x007a1200
  401628:	00b71b00 	.word	0x00b71b00

0040162c <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  40162c:	b580      	push	{r7, lr}
  40162e:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  401630:	2006      	movs	r0, #6
  401632:	4b05      	ldr	r3, [pc, #20]	; (401648 <sysclk_get_main_hz+0x1c>)
  401634:	4798      	blx	r3
  401636:	4602      	mov	r2, r0
  401638:	4613      	mov	r3, r2
  40163a:	009b      	lsls	r3, r3, #2
  40163c:	4413      	add	r3, r2
  40163e:	009a      	lsls	r2, r3, #2
  401640:	4413      	add	r3, r2
  401642:	089b      	lsrs	r3, r3, #2
#endif
	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  401644:	4618      	mov	r0, r3
  401646:	bd80      	pop	{r7, pc}
  401648:	004015b9 	.word	0x004015b9

0040164c <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
  40164c:	b580      	push	{r7, lr}
  40164e:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  401650:	4b02      	ldr	r3, [pc, #8]	; (40165c <sysclk_get_cpu_hz+0x10>)
  401652:	4798      	blx	r3
  401654:	4603      	mov	r3, r0
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  401656:	4618      	mov	r0, r3
  401658:	bd80      	pop	{r7, pc}
  40165a:	bf00      	nop
  40165c:	0040162d 	.word	0x0040162d

00401660 <sysclk_get_peripheral_hz>:
 * \brief Retrieves the current rate in Hz of the peripheral clocks.
 *
 * \return Frequency of the peripheral clocks, in Hz.
 */
static inline uint32_t sysclk_get_peripheral_hz(void)
{
  401660:	b580      	push	{r7, lr}
  401662:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  401664:	4b02      	ldr	r3, [pc, #8]	; (401670 <sysclk_get_peripheral_hz+0x10>)
  401666:	4798      	blx	r3
  401668:	4603      	mov	r3, r0
		(((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 : (1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos))) * CONFIG_SYSCLK_DIV);
}
  40166a:	4618      	mov	r0, r3
  40166c:	bd80      	pop	{r7, pc}
  40166e:	bf00      	nop
  401670:	0040162d 	.word	0x0040162d

00401674 <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
  401674:	b580      	push	{r7, lr}
  401676:	b082      	sub	sp, #8
  401678:	af00      	add	r7, sp, #0
  40167a:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  40167c:	6878      	ldr	r0, [r7, #4]
  40167e:	4b02      	ldr	r3, [pc, #8]	; (401688 <sysclk_enable_peripheral_clock+0x14>)
  401680:	4798      	blx	r3
}
  401682:	3708      	adds	r7, #8
  401684:	46bd      	mov	sp, r7
  401686:	bd80      	pop	{r7, pc}
  401688:	00400dd9 	.word	0x00400dd9

0040168c <ioport_toggle_pin_level>:
 * an output.
 *
 * \param pin IOPORT pin to toggle
 */
static inline void ioport_toggle_pin_level(ioport_pin_t pin)
{
  40168c:	b480      	push	{r7}
  40168e:	b08b      	sub	sp, #44	; 0x2c
  401690:	af00      	add	r7, sp, #0
  401692:	6078      	str	r0, [r7, #4]
  401694:	687b      	ldr	r3, [r7, #4]
  401696:	627b      	str	r3, [r7, #36]	; 0x24
  401698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40169a:	623b      	str	r3, [r7, #32]
  40169c:	6a3b      	ldr	r3, [r7, #32]
  40169e:	61fb      	str	r3, [r7, #28]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  4016a0:	69fb      	ldr	r3, [r7, #28]
  4016a2:	095b      	lsrs	r3, r3, #5
  4016a4:	61bb      	str	r3, [r7, #24]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  4016a6:	69ba      	ldr	r2, [r7, #24]
  4016a8:	4b12      	ldr	r3, [pc, #72]	; (4016f4 <ioport_toggle_pin_level+0x68>)
  4016aa:	4413      	add	r3, r2
  4016ac:	025b      	lsls	r3, r3, #9
	return arch_ioport_port_to_base(port)->PIO_PDSR & mask;
}

__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	Pio *port = arch_ioport_pin_to_base(pin);
  4016ae:	617b      	str	r3, [r7, #20]
  4016b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4016b2:	613b      	str	r3, [r7, #16]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  4016b4:	693b      	ldr	r3, [r7, #16]
  4016b6:	f003 031f 	and.w	r3, r3, #31
  4016ba:	2201      	movs	r2, #1
  4016bc:	fa02 f303 	lsl.w	r3, r2, r3
}

__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	Pio *port = arch_ioport_pin_to_base(pin);
	ioport_port_mask_t mask = arch_ioport_pin_to_mask(pin);
  4016c0:	60fb      	str	r3, [r7, #12]

	if (port->PIO_PDSR & arch_ioport_pin_to_mask(pin)) {
  4016c2:	697b      	ldr	r3, [r7, #20]
  4016c4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
  4016c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4016c8:	60bb      	str	r3, [r7, #8]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  4016ca:	68bb      	ldr	r3, [r7, #8]
  4016cc:	f003 031f 	and.w	r3, r3, #31
  4016d0:	2101      	movs	r1, #1
  4016d2:	fa01 f303 	lsl.w	r3, r1, r3
__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	Pio *port = arch_ioport_pin_to_base(pin);
	ioport_port_mask_t mask = arch_ioport_pin_to_mask(pin);

	if (port->PIO_PDSR & arch_ioport_pin_to_mask(pin)) {
  4016d6:	4013      	ands	r3, r2
  4016d8:	2b00      	cmp	r3, #0
  4016da:	d003      	beq.n	4016e4 <ioport_toggle_pin_level+0x58>
		port->PIO_CODR = mask;
  4016dc:	697b      	ldr	r3, [r7, #20]
  4016de:	68fa      	ldr	r2, [r7, #12]
  4016e0:	635a      	str	r2, [r3, #52]	; 0x34
  4016e2:	e002      	b.n	4016ea <ioport_toggle_pin_level+0x5e>
	} else {
		port->PIO_SODR = mask;
  4016e4:	697b      	ldr	r3, [r7, #20]
  4016e6:	68fa      	ldr	r2, [r7, #12]
  4016e8:	631a      	str	r2, [r3, #48]	; 0x30
	arch_ioport_toggle_pin_level(pin);
}
  4016ea:	372c      	adds	r7, #44	; 0x2c
  4016ec:	46bd      	mov	sp, r7
  4016ee:	f85d 7b04 	ldr.w	r7, [sp], #4
  4016f2:	4770      	bx	lr
  4016f4:	00200707 	.word	0x00200707

004016f8 <usart_serial_init>:
 * \param opt      Options needed to set up RS232 communication (see
 * \ref usart_options_t).
 */
static inline void usart_serial_init(usart_if p_usart,
		usart_serial_options_t *opt)
{
  4016f8:	b580      	push	{r7, lr}
  4016fa:	b08c      	sub	sp, #48	; 0x30
  4016fc:	af00      	add	r7, sp, #0
  4016fe:	6078      	str	r0, [r7, #4]
  401700:	6039      	str	r1, [r7, #0]
#if ((!SAM4L) && (!SAMG55))
	sam_uart_opt_t uart_settings;
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
  401702:	4b48      	ldr	r3, [pc, #288]	; (401824 <usart_serial_init+0x12c>)
  401704:	4798      	blx	r3
  401706:	4603      	mov	r3, r0
  401708:	627b      	str	r3, [r7, #36]	; 0x24
	uart_settings.ul_baudrate = opt->baudrate;
  40170a:	683b      	ldr	r3, [r7, #0]
  40170c:	681b      	ldr	r3, [r3, #0]
  40170e:	62bb      	str	r3, [r7, #40]	; 0x28
	uart_settings.ul_mode = opt->paritytype;
  401710:	683b      	ldr	r3, [r7, #0]
  401712:	689b      	ldr	r3, [r3, #8]
  401714:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif

	sam_usart_opt_t usart_settings;
	usart_settings.baudrate = opt->baudrate;
  401716:	683b      	ldr	r3, [r7, #0]
  401718:	681b      	ldr	r3, [r3, #0]
  40171a:	60fb      	str	r3, [r7, #12]
	usart_settings.char_length = opt->charlength;
  40171c:	683b      	ldr	r3, [r7, #0]
  40171e:	685b      	ldr	r3, [r3, #4]
  401720:	613b      	str	r3, [r7, #16]
	usart_settings.parity_type = opt->paritytype;
  401722:	683b      	ldr	r3, [r7, #0]
  401724:	689b      	ldr	r3, [r3, #8]
  401726:	617b      	str	r3, [r7, #20]
	usart_settings.stop_bits= opt->stopbits;
  401728:	683b      	ldr	r3, [r7, #0]
  40172a:	68db      	ldr	r3, [r3, #12]
  40172c:	61bb      	str	r3, [r7, #24]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
  40172e:	2300      	movs	r3, #0
  401730:	61fb      	str	r3, [r7, #28]
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  401732:	687b      	ldr	r3, [r7, #4]
  401734:	4a3c      	ldr	r2, [pc, #240]	; (401828 <usart_serial_init+0x130>)
  401736:	4293      	cmp	r3, r2
  401738:	d108      	bne.n	40174c <usart_serial_init+0x54>
		sysclk_enable_peripheral_clock(ID_UART0);
  40173a:	2007      	movs	r0, #7
  40173c:	4b3b      	ldr	r3, [pc, #236]	; (40182c <usart_serial_init+0x134>)
  40173e:	4798      	blx	r3
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
  401740:	f107 0324 	add.w	r3, r7, #36	; 0x24
  401744:	6878      	ldr	r0, [r7, #4]
  401746:	4619      	mov	r1, r3
  401748:	4b39      	ldr	r3, [pc, #228]	; (401830 <usart_serial_init+0x138>)
  40174a:	4798      	blx	r3
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  40174c:	687b      	ldr	r3, [r7, #4]
  40174e:	4a39      	ldr	r2, [pc, #228]	; (401834 <usart_serial_init+0x13c>)
  401750:	4293      	cmp	r3, r2
  401752:	d108      	bne.n	401766 <usart_serial_init+0x6e>
		sysclk_enable_peripheral_clock(ID_UART1);
  401754:	2008      	movs	r0, #8
  401756:	4b35      	ldr	r3, [pc, #212]	; (40182c <usart_serial_init+0x134>)
  401758:	4798      	blx	r3
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
  40175a:	f107 0324 	add.w	r3, r7, #36	; 0x24
  40175e:	6878      	ldr	r0, [r7, #4]
  401760:	4619      	mov	r1, r3
  401762:	4b33      	ldr	r3, [pc, #204]	; (401830 <usart_serial_init+0x138>)
  401764:	4798      	blx	r3
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  401766:	687b      	ldr	r3, [r7, #4]
  401768:	4a33      	ldr	r2, [pc, #204]	; (401838 <usart_serial_init+0x140>)
  40176a:	4293      	cmp	r3, r2
  40176c:	d108      	bne.n	401780 <usart_serial_init+0x88>
		sysclk_enable_peripheral_clock(ID_UART2);
  40176e:	202c      	movs	r0, #44	; 0x2c
  401770:	4b2e      	ldr	r3, [pc, #184]	; (40182c <usart_serial_init+0x134>)
  401772:	4798      	blx	r3
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
  401774:	f107 0324 	add.w	r3, r7, #36	; 0x24
  401778:	6878      	ldr	r0, [r7, #4]
  40177a:	4619      	mov	r1, r3
  40177c:	4b2c      	ldr	r3, [pc, #176]	; (401830 <usart_serial_init+0x138>)
  40177e:	4798      	blx	r3
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  401780:	687b      	ldr	r3, [r7, #4]
  401782:	4a2e      	ldr	r2, [pc, #184]	; (40183c <usart_serial_init+0x144>)
  401784:	4293      	cmp	r3, r2
  401786:	d108      	bne.n	40179a <usart_serial_init+0xa2>
		sysclk_enable_peripheral_clock(ID_UART3);
  401788:	202d      	movs	r0, #45	; 0x2d
  40178a:	4b28      	ldr	r3, [pc, #160]	; (40182c <usart_serial_init+0x134>)
  40178c:	4798      	blx	r3
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
  40178e:	f107 0324 	add.w	r3, r7, #36	; 0x24
  401792:	6878      	ldr	r0, [r7, #4]
  401794:	4619      	mov	r1, r3
  401796:	4b26      	ldr	r3, [pc, #152]	; (401830 <usart_serial_init+0x138>)
  401798:	4798      	blx	r3
		usart_enable_tx(p_usart);
		usart_enable_rx(p_usart);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  40179a:	687b      	ldr	r3, [r7, #4]
  40179c:	4a28      	ldr	r2, [pc, #160]	; (401840 <usart_serial_init+0x148>)
  40179e:	4293      	cmp	r3, r2
  4017a0:	d111      	bne.n	4017c6 <usart_serial_init+0xce>
#if (!SAM4L)
#if (SAMG55)
		flexcom_enable(FLEXCOM0);
		flexcom_set_opmode(FLEXCOM0, FLEXCOM_USART);
#else
		sysclk_enable_peripheral_clock(ID_USART0);
  4017a2:	200d      	movs	r0, #13
  4017a4:	4b21      	ldr	r3, [pc, #132]	; (40182c <usart_serial_init+0x134>)
  4017a6:	4798      	blx	r3
#endif
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
  4017a8:	4b1e      	ldr	r3, [pc, #120]	; (401824 <usart_serial_init+0x12c>)
  4017aa:	4798      	blx	r3
  4017ac:	4602      	mov	r2, r0
  4017ae:	f107 030c 	add.w	r3, r7, #12
  4017b2:	6878      	ldr	r0, [r7, #4]
  4017b4:	4619      	mov	r1, r3
  4017b6:	4b23      	ldr	r3, [pc, #140]	; (401844 <usart_serial_init+0x14c>)
  4017b8:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
  4017ba:	6878      	ldr	r0, [r7, #4]
  4017bc:	4b22      	ldr	r3, [pc, #136]	; (401848 <usart_serial_init+0x150>)
  4017be:	4798      	blx	r3
		usart_enable_rx(p_usart);
  4017c0:	6878      	ldr	r0, [r7, #4]
  4017c2:	4b22      	ldr	r3, [pc, #136]	; (40184c <usart_serial_init+0x154>)
  4017c4:	4798      	blx	r3
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  4017c6:	687b      	ldr	r3, [r7, #4]
  4017c8:	4a21      	ldr	r2, [pc, #132]	; (401850 <usart_serial_init+0x158>)
  4017ca:	4293      	cmp	r3, r2
  4017cc:	d111      	bne.n	4017f2 <usart_serial_init+0xfa>
#if (!SAM4L)
#if (SAMG55)
		flexcom_enable(FLEXCOM1);
		flexcom_set_opmode(FLEXCOM1, FLEXCOM_USART);
#else
		sysclk_enable_peripheral_clock(ID_USART1);
  4017ce:	200e      	movs	r0, #14
  4017d0:	4b16      	ldr	r3, [pc, #88]	; (40182c <usart_serial_init+0x134>)
  4017d2:	4798      	blx	r3
#endif
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
  4017d4:	4b13      	ldr	r3, [pc, #76]	; (401824 <usart_serial_init+0x12c>)
  4017d6:	4798      	blx	r3
  4017d8:	4602      	mov	r2, r0
  4017da:	f107 030c 	add.w	r3, r7, #12
  4017de:	6878      	ldr	r0, [r7, #4]
  4017e0:	4619      	mov	r1, r3
  4017e2:	4b18      	ldr	r3, [pc, #96]	; (401844 <usart_serial_init+0x14c>)
  4017e4:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
  4017e6:	6878      	ldr	r0, [r7, #4]
  4017e8:	4b17      	ldr	r3, [pc, #92]	; (401848 <usart_serial_init+0x150>)
  4017ea:	4798      	blx	r3
		usart_enable_rx(p_usart);
  4017ec:	6878      	ldr	r0, [r7, #4]
  4017ee:	4b17      	ldr	r3, [pc, #92]	; (40184c <usart_serial_init+0x154>)
  4017f0:	4798      	blx	r3
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  4017f2:	687b      	ldr	r3, [r7, #4]
  4017f4:	4a17      	ldr	r2, [pc, #92]	; (401854 <usart_serial_init+0x15c>)
  4017f6:	4293      	cmp	r3, r2
  4017f8:	d111      	bne.n	40181e <usart_serial_init+0x126>
#if (!SAM4L)
#if (SAMG55)
		flexcom_enable(FLEXCOM2);
		flexcom_set_opmode(FLEXCOM2, FLEXCOM_USART);
#else
		sysclk_enable_peripheral_clock(ID_USART2);
  4017fa:	200f      	movs	r0, #15
  4017fc:	4b0b      	ldr	r3, [pc, #44]	; (40182c <usart_serial_init+0x134>)
  4017fe:	4798      	blx	r3
#endif
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
  401800:	4b08      	ldr	r3, [pc, #32]	; (401824 <usart_serial_init+0x12c>)
  401802:	4798      	blx	r3
  401804:	4602      	mov	r2, r0
  401806:	f107 030c 	add.w	r3, r7, #12
  40180a:	6878      	ldr	r0, [r7, #4]
  40180c:	4619      	mov	r1, r3
  40180e:	4b0d      	ldr	r3, [pc, #52]	; (401844 <usart_serial_init+0x14c>)
  401810:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
  401812:	6878      	ldr	r0, [r7, #4]
  401814:	4b0c      	ldr	r3, [pc, #48]	; (401848 <usart_serial_init+0x150>)
  401816:	4798      	blx	r3
		usart_enable_rx(p_usart);
  401818:	6878      	ldr	r0, [r7, #4]
  40181a:	4b0c      	ldr	r3, [pc, #48]	; (40184c <usart_serial_init+0x154>)
  40181c:	4798      	blx	r3
	}
# endif

#endif /* ifdef USART */

}
  40181e:	3730      	adds	r7, #48	; 0x30
  401820:	46bd      	mov	sp, r7
  401822:	bd80      	pop	{r7, pc}
  401824:	00401661 	.word	0x00401661
  401828:	400e0800 	.word	0x400e0800
  40182c:	00401675 	.word	0x00401675
  401830:	00400e5d 	.word	0x00400e5d
  401834:	400e0a00 	.word	0x400e0a00
  401838:	400e1a00 	.word	0x400e1a00
  40183c:	400e1c00 	.word	0x400e1c00
  401840:	40024000 	.word	0x40024000
  401844:	00400ff9 	.word	0x00400ff9
  401848:	0040107d 	.word	0x0040107d
  40184c:	004010ad 	.word	0x004010ad
  401850:	40028000 	.word	0x40028000
  401854:	4002c000 	.word	0x4002c000

00401858 <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
  401858:	b580      	push	{r7, lr}
  40185a:	b082      	sub	sp, #8
  40185c:	af00      	add	r7, sp, #0
  40185e:	6078      	str	r0, [r7, #4]
  401860:	460b      	mov	r3, r1
  401862:	70fb      	strb	r3, [r7, #3]
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  401864:	687b      	ldr	r3, [r7, #4]
  401866:	4a36      	ldr	r2, [pc, #216]	; (401940 <usart_serial_putchar+0xe8>)
  401868:	4293      	cmp	r3, r2
  40186a:	d10a      	bne.n	401882 <usart_serial_putchar+0x2a>
		while (uart_write((Uart*)p_usart, c)!=0);
  40186c:	bf00      	nop
  40186e:	78fb      	ldrb	r3, [r7, #3]
  401870:	6878      	ldr	r0, [r7, #4]
  401872:	4619      	mov	r1, r3
  401874:	4b33      	ldr	r3, [pc, #204]	; (401944 <usart_serial_putchar+0xec>)
  401876:	4798      	blx	r3
  401878:	4603      	mov	r3, r0
  40187a:	2b00      	cmp	r3, #0
  40187c:	d1f7      	bne.n	40186e <usart_serial_putchar+0x16>
		return 1;
  40187e:	2301      	movs	r3, #1
  401880:	e05a      	b.n	401938 <usart_serial_putchar+0xe0>
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  401882:	687b      	ldr	r3, [r7, #4]
  401884:	4a30      	ldr	r2, [pc, #192]	; (401948 <usart_serial_putchar+0xf0>)
  401886:	4293      	cmp	r3, r2
  401888:	d10a      	bne.n	4018a0 <usart_serial_putchar+0x48>
		while (uart_write((Uart*)p_usart, c)!=0);
  40188a:	bf00      	nop
  40188c:	78fb      	ldrb	r3, [r7, #3]
  40188e:	6878      	ldr	r0, [r7, #4]
  401890:	4619      	mov	r1, r3
  401892:	4b2c      	ldr	r3, [pc, #176]	; (401944 <usart_serial_putchar+0xec>)
  401894:	4798      	blx	r3
  401896:	4603      	mov	r3, r0
  401898:	2b00      	cmp	r3, #0
  40189a:	d1f7      	bne.n	40188c <usart_serial_putchar+0x34>
		return 1;
  40189c:	2301      	movs	r3, #1
  40189e:	e04b      	b.n	401938 <usart_serial_putchar+0xe0>
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  4018a0:	687b      	ldr	r3, [r7, #4]
  4018a2:	4a2a      	ldr	r2, [pc, #168]	; (40194c <usart_serial_putchar+0xf4>)
  4018a4:	4293      	cmp	r3, r2
  4018a6:	d10a      	bne.n	4018be <usart_serial_putchar+0x66>
		while (uart_write((Uart*)p_usart, c)!=0);
  4018a8:	bf00      	nop
  4018aa:	78fb      	ldrb	r3, [r7, #3]
  4018ac:	6878      	ldr	r0, [r7, #4]
  4018ae:	4619      	mov	r1, r3
  4018b0:	4b24      	ldr	r3, [pc, #144]	; (401944 <usart_serial_putchar+0xec>)
  4018b2:	4798      	blx	r3
  4018b4:	4603      	mov	r3, r0
  4018b6:	2b00      	cmp	r3, #0
  4018b8:	d1f7      	bne.n	4018aa <usart_serial_putchar+0x52>
		return 1;
  4018ba:	2301      	movs	r3, #1
  4018bc:	e03c      	b.n	401938 <usart_serial_putchar+0xe0>
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  4018be:	687b      	ldr	r3, [r7, #4]
  4018c0:	4a23      	ldr	r2, [pc, #140]	; (401950 <usart_serial_putchar+0xf8>)
  4018c2:	4293      	cmp	r3, r2
  4018c4:	d10a      	bne.n	4018dc <usart_serial_putchar+0x84>
		while (uart_write((Uart*)p_usart, c)!=0);
  4018c6:	bf00      	nop
  4018c8:	78fb      	ldrb	r3, [r7, #3]
  4018ca:	6878      	ldr	r0, [r7, #4]
  4018cc:	4619      	mov	r1, r3
  4018ce:	4b1d      	ldr	r3, [pc, #116]	; (401944 <usart_serial_putchar+0xec>)
  4018d0:	4798      	blx	r3
  4018d2:	4603      	mov	r3, r0
  4018d4:	2b00      	cmp	r3, #0
  4018d6:	d1f7      	bne.n	4018c8 <usart_serial_putchar+0x70>
		return 1;
  4018d8:	2301      	movs	r3, #1
  4018da:	e02d      	b.n	401938 <usart_serial_putchar+0xe0>
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  4018dc:	687b      	ldr	r3, [r7, #4]
  4018de:	4a1d      	ldr	r2, [pc, #116]	; (401954 <usart_serial_putchar+0xfc>)
  4018e0:	4293      	cmp	r3, r2
  4018e2:	d10a      	bne.n	4018fa <usart_serial_putchar+0xa2>
		while (usart_write(p_usart, c)!=0);
  4018e4:	bf00      	nop
  4018e6:	78fb      	ldrb	r3, [r7, #3]
  4018e8:	6878      	ldr	r0, [r7, #4]
  4018ea:	4619      	mov	r1, r3
  4018ec:	4b1a      	ldr	r3, [pc, #104]	; (401958 <usart_serial_putchar+0x100>)
  4018ee:	4798      	blx	r3
  4018f0:	4603      	mov	r3, r0
  4018f2:	2b00      	cmp	r3, #0
  4018f4:	d1f7      	bne.n	4018e6 <usart_serial_putchar+0x8e>
		return 1;
  4018f6:	2301      	movs	r3, #1
  4018f8:	e01e      	b.n	401938 <usart_serial_putchar+0xe0>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  4018fa:	687b      	ldr	r3, [r7, #4]
  4018fc:	4a17      	ldr	r2, [pc, #92]	; (40195c <usart_serial_putchar+0x104>)
  4018fe:	4293      	cmp	r3, r2
  401900:	d10a      	bne.n	401918 <usart_serial_putchar+0xc0>
		while (usart_write(p_usart, c)!=0);
  401902:	bf00      	nop
  401904:	78fb      	ldrb	r3, [r7, #3]
  401906:	6878      	ldr	r0, [r7, #4]
  401908:	4619      	mov	r1, r3
  40190a:	4b13      	ldr	r3, [pc, #76]	; (401958 <usart_serial_putchar+0x100>)
  40190c:	4798      	blx	r3
  40190e:	4603      	mov	r3, r0
  401910:	2b00      	cmp	r3, #0
  401912:	d1f7      	bne.n	401904 <usart_serial_putchar+0xac>
		return 1;
  401914:	2301      	movs	r3, #1
  401916:	e00f      	b.n	401938 <usart_serial_putchar+0xe0>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  401918:	687b      	ldr	r3, [r7, #4]
  40191a:	4a11      	ldr	r2, [pc, #68]	; (401960 <usart_serial_putchar+0x108>)
  40191c:	4293      	cmp	r3, r2
  40191e:	d10a      	bne.n	401936 <usart_serial_putchar+0xde>
		while (usart_write(p_usart, c)!=0);
  401920:	bf00      	nop
  401922:	78fb      	ldrb	r3, [r7, #3]
  401924:	6878      	ldr	r0, [r7, #4]
  401926:	4619      	mov	r1, r3
  401928:	4b0b      	ldr	r3, [pc, #44]	; (401958 <usart_serial_putchar+0x100>)
  40192a:	4798      	blx	r3
  40192c:	4603      	mov	r3, r0
  40192e:	2b00      	cmp	r3, #0
  401930:	d1f7      	bne.n	401922 <usart_serial_putchar+0xca>
		return 1;
  401932:	2301      	movs	r3, #1
  401934:	e000      	b.n	401938 <usart_serial_putchar+0xe0>
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
  401936:	2300      	movs	r3, #0
}
  401938:	4618      	mov	r0, r3
  40193a:	3708      	adds	r7, #8
  40193c:	46bd      	mov	sp, r7
  40193e:	bd80      	pop	{r7, pc}
  401940:	400e0800 	.word	0x400e0800
  401944:	00400eb5 	.word	0x00400eb5
  401948:	400e0a00 	.word	0x400e0a00
  40194c:	400e1a00 	.word	0x400e1a00
  401950:	400e1c00 	.word	0x400e1c00
  401954:	40024000 	.word	0x40024000
  401958:	00401149 	.word	0x00401149
  40195c:	40028000 	.word	0x40028000
  401960:	4002c000 	.word	0x4002c000

00401964 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  401964:	b580      	push	{r7, lr}
  401966:	b084      	sub	sp, #16
  401968:	af00      	add	r7, sp, #0
  40196a:	6078      	str	r0, [r7, #4]
  40196c:	6039      	str	r1, [r7, #0]
	uint32_t val = 0;
  40196e:	2300      	movs	r3, #0
  401970:	60fb      	str	r3, [r7, #12]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  401972:	687b      	ldr	r3, [r7, #4]
  401974:	4a33      	ldr	r2, [pc, #204]	; (401a44 <usart_serial_getchar+0xe0>)
  401976:	4293      	cmp	r3, r2
  401978:	d107      	bne.n	40198a <usart_serial_getchar+0x26>
		while (uart_read((Uart*)p_usart, data));
  40197a:	bf00      	nop
  40197c:	6878      	ldr	r0, [r7, #4]
  40197e:	6839      	ldr	r1, [r7, #0]
  401980:	4b31      	ldr	r3, [pc, #196]	; (401a48 <usart_serial_getchar+0xe4>)
  401982:	4798      	blx	r3
  401984:	4603      	mov	r3, r0
  401986:	2b00      	cmp	r3, #0
  401988:	d1f8      	bne.n	40197c <usart_serial_getchar+0x18>
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  40198a:	687b      	ldr	r3, [r7, #4]
  40198c:	4a2f      	ldr	r2, [pc, #188]	; (401a4c <usart_serial_getchar+0xe8>)
  40198e:	4293      	cmp	r3, r2
  401990:	d107      	bne.n	4019a2 <usart_serial_getchar+0x3e>
		while (uart_read((Uart*)p_usart, data));
  401992:	bf00      	nop
  401994:	6878      	ldr	r0, [r7, #4]
  401996:	6839      	ldr	r1, [r7, #0]
  401998:	4b2b      	ldr	r3, [pc, #172]	; (401a48 <usart_serial_getchar+0xe4>)
  40199a:	4798      	blx	r3
  40199c:	4603      	mov	r3, r0
  40199e:	2b00      	cmp	r3, #0
  4019a0:	d1f8      	bne.n	401994 <usart_serial_getchar+0x30>
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  4019a2:	687b      	ldr	r3, [r7, #4]
  4019a4:	4a2a      	ldr	r2, [pc, #168]	; (401a50 <usart_serial_getchar+0xec>)
  4019a6:	4293      	cmp	r3, r2
  4019a8:	d107      	bne.n	4019ba <usart_serial_getchar+0x56>
		while (uart_read((Uart*)p_usart, data));
  4019aa:	bf00      	nop
  4019ac:	6878      	ldr	r0, [r7, #4]
  4019ae:	6839      	ldr	r1, [r7, #0]
  4019b0:	4b25      	ldr	r3, [pc, #148]	; (401a48 <usart_serial_getchar+0xe4>)
  4019b2:	4798      	blx	r3
  4019b4:	4603      	mov	r3, r0
  4019b6:	2b00      	cmp	r3, #0
  4019b8:	d1f8      	bne.n	4019ac <usart_serial_getchar+0x48>
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  4019ba:	687b      	ldr	r3, [r7, #4]
  4019bc:	4a25      	ldr	r2, [pc, #148]	; (401a54 <usart_serial_getchar+0xf0>)
  4019be:	4293      	cmp	r3, r2
  4019c0:	d107      	bne.n	4019d2 <usart_serial_getchar+0x6e>
		while (uart_read((Uart*)p_usart, data));
  4019c2:	bf00      	nop
  4019c4:	6878      	ldr	r0, [r7, #4]
  4019c6:	6839      	ldr	r1, [r7, #0]
  4019c8:	4b1f      	ldr	r3, [pc, #124]	; (401a48 <usart_serial_getchar+0xe4>)
  4019ca:	4798      	blx	r3
  4019cc:	4603      	mov	r3, r0
  4019ce:	2b00      	cmp	r3, #0
  4019d0:	d1f8      	bne.n	4019c4 <usart_serial_getchar+0x60>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  4019d2:	687b      	ldr	r3, [r7, #4]
  4019d4:	4a20      	ldr	r2, [pc, #128]	; (401a58 <usart_serial_getchar+0xf4>)
  4019d6:	4293      	cmp	r3, r2
  4019d8:	d10d      	bne.n	4019f6 <usart_serial_getchar+0x92>
		while (usart_read(p_usart, &val));
  4019da:	bf00      	nop
  4019dc:	f107 030c 	add.w	r3, r7, #12
  4019e0:	6878      	ldr	r0, [r7, #4]
  4019e2:	4619      	mov	r1, r3
  4019e4:	4b1d      	ldr	r3, [pc, #116]	; (401a5c <usart_serial_getchar+0xf8>)
  4019e6:	4798      	blx	r3
  4019e8:	4603      	mov	r3, r0
  4019ea:	2b00      	cmp	r3, #0
  4019ec:	d1f6      	bne.n	4019dc <usart_serial_getchar+0x78>
		*data = (uint8_t)(val & 0xFF);
  4019ee:	68fb      	ldr	r3, [r7, #12]
  4019f0:	b2da      	uxtb	r2, r3
  4019f2:	683b      	ldr	r3, [r7, #0]
  4019f4:	701a      	strb	r2, [r3, #0]
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  4019f6:	687b      	ldr	r3, [r7, #4]
  4019f8:	4a19      	ldr	r2, [pc, #100]	; (401a60 <usart_serial_getchar+0xfc>)
  4019fa:	4293      	cmp	r3, r2
  4019fc:	d10d      	bne.n	401a1a <usart_serial_getchar+0xb6>
		while (usart_read(p_usart, &val));
  4019fe:	bf00      	nop
  401a00:	f107 030c 	add.w	r3, r7, #12
  401a04:	6878      	ldr	r0, [r7, #4]
  401a06:	4619      	mov	r1, r3
  401a08:	4b14      	ldr	r3, [pc, #80]	; (401a5c <usart_serial_getchar+0xf8>)
  401a0a:	4798      	blx	r3
  401a0c:	4603      	mov	r3, r0
  401a0e:	2b00      	cmp	r3, #0
  401a10:	d1f6      	bne.n	401a00 <usart_serial_getchar+0x9c>
		*data = (uint8_t)(val & 0xFF);
  401a12:	68fb      	ldr	r3, [r7, #12]
  401a14:	b2da      	uxtb	r2, r3
  401a16:	683b      	ldr	r3, [r7, #0]
  401a18:	701a      	strb	r2, [r3, #0]
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  401a1a:	687b      	ldr	r3, [r7, #4]
  401a1c:	4a11      	ldr	r2, [pc, #68]	; (401a64 <usart_serial_getchar+0x100>)
  401a1e:	4293      	cmp	r3, r2
  401a20:	d10d      	bne.n	401a3e <usart_serial_getchar+0xda>
		while (usart_read(p_usart, &val));
  401a22:	bf00      	nop
  401a24:	f107 030c 	add.w	r3, r7, #12
  401a28:	6878      	ldr	r0, [r7, #4]
  401a2a:	4619      	mov	r1, r3
  401a2c:	4b0b      	ldr	r3, [pc, #44]	; (401a5c <usart_serial_getchar+0xf8>)
  401a2e:	4798      	blx	r3
  401a30:	4603      	mov	r3, r0
  401a32:	2b00      	cmp	r3, #0
  401a34:	d1f6      	bne.n	401a24 <usart_serial_getchar+0xc0>
		*data = (uint8_t)(val & 0xFF);
  401a36:	68fb      	ldr	r3, [r7, #12]
  401a38:	b2da      	uxtb	r2, r3
  401a3a:	683b      	ldr	r3, [r7, #0]
  401a3c:	701a      	strb	r2, [r3, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  401a3e:	3710      	adds	r7, #16
  401a40:	46bd      	mov	sp, r7
  401a42:	bd80      	pop	{r7, pc}
  401a44:	400e0800 	.word	0x400e0800
  401a48:	00400ee5 	.word	0x00400ee5
  401a4c:	400e0a00 	.word	0x400e0a00
  401a50:	400e1a00 	.word	0x400e1a00
  401a54:	400e1c00 	.word	0x400e1c00
  401a58:	40024000 	.word	0x40024000
  401a5c:	0040117d 	.word	0x0040117d
  401a60:	40028000 	.word	0x40028000
  401a64:	4002c000 	.word	0x4002c000

00401a68 <stdio_serial_init>:
 * \param usart       Base address of the USART instance.
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
  401a68:	b580      	push	{r7, lr}
  401a6a:	b082      	sub	sp, #8
  401a6c:	af00      	add	r7, sp, #0
  401a6e:	6078      	str	r0, [r7, #4]
  401a70:	6039      	str	r1, [r7, #0]
	stdio_base = (void *)usart;
  401a72:	4a0f      	ldr	r2, [pc, #60]	; (401ab0 <stdio_serial_init+0x48>)
  401a74:	687b      	ldr	r3, [r7, #4]
  401a76:	6013      	str	r3, [r2, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  401a78:	4b0e      	ldr	r3, [pc, #56]	; (401ab4 <stdio_serial_init+0x4c>)
  401a7a:	4a0f      	ldr	r2, [pc, #60]	; (401ab8 <stdio_serial_init+0x50>)
  401a7c:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  401a7e:	4b0f      	ldr	r3, [pc, #60]	; (401abc <stdio_serial_init+0x54>)
  401a80:	4a0f      	ldr	r2, [pc, #60]	; (401ac0 <stdio_serial_init+0x58>)
  401a82:	601a      	str	r2, [r3, #0]
# if (XMEGA || MEGA_RF)
	usart_serial_init((USART_t *)usart,opt);
# elif UC3
	usart_serial_init(usart,(usart_serial_options_t *)opt);
# elif SAM
	usart_serial_init((Usart *)usart,(usart_serial_options_t *)opt);
  401a84:	6878      	ldr	r0, [r7, #4]
  401a86:	6839      	ldr	r1, [r7, #0]
  401a88:	4b0e      	ldr	r3, [pc, #56]	; (401ac4 <stdio_serial_init+0x5c>)
  401a8a:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  401a8c:	4b0e      	ldr	r3, [pc, #56]	; (401ac8 <stdio_serial_init+0x60>)
  401a8e:	681b      	ldr	r3, [r3, #0]
  401a90:	689b      	ldr	r3, [r3, #8]
  401a92:	4618      	mov	r0, r3
  401a94:	2100      	movs	r1, #0
  401a96:	4b0d      	ldr	r3, [pc, #52]	; (401acc <stdio_serial_init+0x64>)
  401a98:	4798      	blx	r3
	setbuf(stdin, NULL);
  401a9a:	4b0b      	ldr	r3, [pc, #44]	; (401ac8 <stdio_serial_init+0x60>)
  401a9c:	681b      	ldr	r3, [r3, #0]
  401a9e:	685b      	ldr	r3, [r3, #4]
  401aa0:	4618      	mov	r0, r3
  401aa2:	2100      	movs	r1, #0
  401aa4:	4b09      	ldr	r3, [pc, #36]	; (401acc <stdio_serial_init+0x64>)
  401aa6:	4798      	blx	r3
	// and AVR GCC library:
	// - printf() emits one character at a time.
	// - getchar() requests only 1 byte to exit.
#  endif
# endif
}
  401aa8:	3708      	adds	r7, #8
  401aaa:	46bd      	mov	sp, r7
  401aac:	bd80      	pop	{r7, pc}
  401aae:	bf00      	nop
  401ab0:	20400998 	.word	0x20400998
  401ab4:	20400994 	.word	0x20400994
  401ab8:	00401859 	.word	0x00401859
  401abc:	20400990 	.word	0x20400990
  401ac0:	00401965 	.word	0x00401965
  401ac4:	004016f9 	.word	0x004016f9
  401ac8:	204004a8 	.word	0x204004a8
  401acc:	00401ead 	.word	0x00401ead

00401ad0 <mdelay>:
 * by the SAM microcontroller system tick).
 *
 * \param ul_dly_ticks  Delay to wait for, in milliseconds.
 */
static void mdelay(uint32_t ul_dly_ticks)
{
  401ad0:	b480      	push	{r7}
  401ad2:	b085      	sub	sp, #20
  401ad4:	af00      	add	r7, sp, #0
  401ad6:	6078      	str	r0, [r7, #4]
	uint32_t ul_cur_ticks;

	ul_cur_ticks = ul_ms_ticks;
  401ad8:	4b07      	ldr	r3, [pc, #28]	; (401af8 <mdelay+0x28>)
  401ada:	681b      	ldr	r3, [r3, #0]
  401adc:	60fb      	str	r3, [r7, #12]
	while ((ul_ms_ticks - ul_cur_ticks) < ul_dly_ticks) {
  401ade:	bf00      	nop
  401ae0:	4b05      	ldr	r3, [pc, #20]	; (401af8 <mdelay+0x28>)
  401ae2:	681a      	ldr	r2, [r3, #0]
  401ae4:	68fb      	ldr	r3, [r7, #12]
  401ae6:	1ad2      	subs	r2, r2, r3
  401ae8:	687b      	ldr	r3, [r7, #4]
  401aea:	429a      	cmp	r2, r3
  401aec:	d3f8      	bcc.n	401ae0 <mdelay+0x10>
	}
}
  401aee:	3714      	adds	r7, #20
  401af0:	46bd      	mov	sp, r7
  401af2:	f85d 7b04 	ldr.w	r7, [sp], #4
  401af6:	4770      	bx	lr
  401af8:	20400958 	.word	0x20400958

00401afc <SysTick_Handler>:
 *
 *  Process System Tick Event.
 *  Increment the ul_ms_ticks counter.
 */
void SysTick_Handler(void)
{
  401afc:	b480      	push	{r7}
  401afe:	af00      	add	r7, sp, #0
	g_ul_tick_count++;
  401b00:	4b06      	ldr	r3, [pc, #24]	; (401b1c <SysTick_Handler+0x20>)
  401b02:	681b      	ldr	r3, [r3, #0]
  401b04:	3301      	adds	r3, #1
  401b06:	4a05      	ldr	r2, [pc, #20]	; (401b1c <SysTick_Handler+0x20>)
  401b08:	6013      	str	r3, [r2, #0]
	ul_ms_ticks++; //jsi 6feb16
  401b0a:	4b05      	ldr	r3, [pc, #20]	; (401b20 <SysTick_Handler+0x24>)
  401b0c:	681b      	ldr	r3, [r3, #0]
  401b0e:	3301      	adds	r3, #1
  401b10:	4a03      	ldr	r2, [pc, #12]	; (401b20 <SysTick_Handler+0x24>)
  401b12:	6013      	str	r3, [r2, #0]
}
  401b14:	46bd      	mov	sp, r7
  401b16:	f85d 7b04 	ldr.w	r7, [sp], #4
  401b1a:	4770      	bx	lr
  401b1c:	2040099c 	.word	0x2040099c
  401b20:	20400958 	.word	0x20400958

00401b24 <USART0_Handler>:
/**
 *  \brief Handler for USART interrupt.
 *
 */
void USART_Handler(void)
{
  401b24:	b580      	push	{r7, lr}
  401b26:	b082      	sub	sp, #8
  401b28:	af00      	add	r7, sp, #0
	uint32_t ul_status;
	uint8_t uc_char;

	/* Read USART status. */
	ul_status = usart_get_status(BOARD_USART);
  401b2a:	481b      	ldr	r0, [pc, #108]	; (401b98 <USART0_Handler+0x74>)
  401b2c:	4b1b      	ldr	r3, [pc, #108]	; (401b9c <USART0_Handler+0x78>)
  401b2e:	4798      	blx	r3
  401b30:	6078      	str	r0, [r7, #4]

	/*transmit interrupt rises*/
	if(ul_status & (US_IER_TXRDY | US_IER_TXEMPTY)) {
  401b32:	687a      	ldr	r2, [r7, #4]
  401b34:	f240 2302 	movw	r3, #514	; 0x202
  401b38:	4013      	ands	r3, r2
  401b3a:	2b00      	cmp	r3, #0
  401b3c:	d004      	beq.n	401b48 <USART0_Handler+0x24>
		usart_disable_interrupt(BOARD_USART, (US_IER_TXRDY | US_IER_TXEMPTY));
  401b3e:	4816      	ldr	r0, [pc, #88]	; (401b98 <USART0_Handler+0x74>)
  401b40:	f240 2102 	movw	r1, #514	; 0x202
  401b44:	4b16      	ldr	r3, [pc, #88]	; (401ba0 <USART0_Handler+0x7c>)
  401b46:	4798      	blx	r3
	}

	/*receive interrupt rise, store character to receiver buffer*/
	if((g_state == RECEIVING) && (usart_read(BOARD_USART, (uint32_t *)&uc_char) == 0)) {
  401b48:	4b16      	ldr	r3, [pc, #88]	; (401ba4 <USART0_Handler+0x80>)
  401b4a:	781b      	ldrb	r3, [r3, #0]
  401b4c:	b2db      	uxtb	r3, r3
  401b4e:	2b02      	cmp	r3, #2
  401b50:	d11f      	bne.n	401b92 <USART0_Handler+0x6e>
  401b52:	1cfb      	adds	r3, r7, #3
  401b54:	4810      	ldr	r0, [pc, #64]	; (401b98 <USART0_Handler+0x74>)
  401b56:	4619      	mov	r1, r3
  401b58:	4b13      	ldr	r3, [pc, #76]	; (401ba8 <USART0_Handler+0x84>)
  401b5a:	4798      	blx	r3
  401b5c:	4603      	mov	r3, r0
  401b5e:	2b00      	cmp	r3, #0
  401b60:	d117      	bne.n	401b92 <USART0_Handler+0x6e>
		*p_revdata++ = uc_char;
  401b62:	4b12      	ldr	r3, [pc, #72]	; (401bac <USART0_Handler+0x88>)
  401b64:	681b      	ldr	r3, [r3, #0]
  401b66:	1c5a      	adds	r2, r3, #1
  401b68:	4910      	ldr	r1, [pc, #64]	; (401bac <USART0_Handler+0x88>)
  401b6a:	600a      	str	r2, [r1, #0]
  401b6c:	78fa      	ldrb	r2, [r7, #3]
  401b6e:	701a      	strb	r2, [r3, #0]
		g_ulcount++;
  401b70:	4b0f      	ldr	r3, [pc, #60]	; (401bb0 <USART0_Handler+0x8c>)
  401b72:	681b      	ldr	r3, [r3, #0]
  401b74:	3301      	adds	r3, #1
  401b76:	4a0e      	ldr	r2, [pc, #56]	; (401bb0 <USART0_Handler+0x8c>)
  401b78:	6013      	str	r3, [r2, #0]
		if(g_ulcount >= BUFFER_SIZE) {
  401b7a:	4b0d      	ldr	r3, [pc, #52]	; (401bb0 <USART0_Handler+0x8c>)
  401b7c:	681b      	ldr	r3, [r3, #0]
  401b7e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
  401b82:	d306      	bcc.n	401b92 <USART0_Handler+0x6e>
			g_state = RECEIVED;
  401b84:	4b07      	ldr	r3, [pc, #28]	; (401ba4 <USART0_Handler+0x80>)
  401b86:	2203      	movs	r2, #3
  401b88:	701a      	strb	r2, [r3, #0]
			usart_disable_interrupt(BOARD_USART, US_IER_RXRDY);
  401b8a:	4803      	ldr	r0, [pc, #12]	; (401b98 <USART0_Handler+0x74>)
  401b8c:	2101      	movs	r1, #1
  401b8e:	4b04      	ldr	r3, [pc, #16]	; (401ba0 <USART0_Handler+0x7c>)
  401b90:	4798      	blx	r3
		}
	}
}
  401b92:	3708      	adds	r7, #8
  401b94:	46bd      	mov	sp, r7
  401b96:	bd80      	pop	{r7, pc}
  401b98:	40024000 	.word	0x40024000
  401b9c:	004010f9 	.word	0x004010f9
  401ba0:	004010dd 	.word	0x004010dd
  401ba4:	20400950 	.word	0x20400950
  401ba8:	0040117d 	.word	0x0040117d
  401bac:	20400004 	.word	0x20400004
  401bb0:	20400954 	.word	0x20400954

00401bb4 <configure_systick>:

/**
 *  Configure system tick to generate an interrupt every 1ms.
 */
static void configure_systick(void)
{
  401bb4:	b580      	push	{r7, lr}
  401bb6:	b082      	sub	sp, #8
  401bb8:	af00      	add	r7, sp, #0
	uint32_t ul_flag;

	ul_flag = SysTick_Config(sysclk_get_cpu_hz() / SYS_TICK_FREQ);
  401bba:	4b0a      	ldr	r3, [pc, #40]	; (401be4 <configure_systick+0x30>)
  401bbc:	4798      	blx	r3
  401bbe:	4602      	mov	r2, r0
  401bc0:	4b09      	ldr	r3, [pc, #36]	; (401be8 <configure_systick+0x34>)
  401bc2:	fba3 2302 	umull	r2, r3, r3, r2
  401bc6:	099b      	lsrs	r3, r3, #6
  401bc8:	4618      	mov	r0, r3
  401bca:	4b08      	ldr	r3, [pc, #32]	; (401bec <configure_systick+0x38>)
  401bcc:	4798      	blx	r3
  401bce:	6078      	str	r0, [r7, #4]
	if (ul_flag) {
  401bd0:	687b      	ldr	r3, [r7, #4]
  401bd2:	2b00      	cmp	r3, #0
  401bd4:	d003      	beq.n	401bde <configure_systick+0x2a>
		puts("-F- Systick configuration error\r");
  401bd6:	4806      	ldr	r0, [pc, #24]	; (401bf0 <configure_systick+0x3c>)
  401bd8:	4b06      	ldr	r3, [pc, #24]	; (401bf4 <configure_systick+0x40>)
  401bda:	4798      	blx	r3
		while (1) {
		}
  401bdc:	e7fe      	b.n	401bdc <configure_systick+0x28>
	}
}
  401bde:	3708      	adds	r7, #8
  401be0:	46bd      	mov	sp, r7
  401be2:	bd80      	pop	{r7, pc}
  401be4:	0040164d 	.word	0x0040164d
  401be8:	10624dd3 	.word	0x10624dd3
  401bec:	00401571 	.word	0x00401571
  401bf0:	004039c0 	.word	0x004039c0
  401bf4:	00401e9d 	.word	0x00401e9d

00401bf8 <configure_console>:

/**
 *  Configure UART for debug message output.
 */
static void configure_console(void)
{
  401bf8:	b590      	push	{r4, r7, lr}
  401bfa:	b085      	sub	sp, #20
  401bfc:	af00      	add	r7, sp, #0
	const usart_serial_options_t uart_serial_options = {
  401bfe:	4b08      	ldr	r3, [pc, #32]	; (401c20 <configure_console+0x28>)
  401c00:	463c      	mov	r4, r7
  401c02:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  401c04:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		.stopbits = CONF_UART_STOP_BITS,
#endif
	};

	/* Configure console UART. */
	sysclk_enable_peripheral_clock(CONSOLE_UART_ID);
  401c08:	2007      	movs	r0, #7
  401c0a:	4b06      	ldr	r3, [pc, #24]	; (401c24 <configure_console+0x2c>)
  401c0c:	4798      	blx	r3
	stdio_serial_init(CONF_UART, &uart_serial_options);
  401c0e:	463b      	mov	r3, r7
  401c10:	4805      	ldr	r0, [pc, #20]	; (401c28 <configure_console+0x30>)
  401c12:	4619      	mov	r1, r3
  401c14:	4b05      	ldr	r3, [pc, #20]	; (401c2c <configure_console+0x34>)
  401c16:	4798      	blx	r3
}
  401c18:	3714      	adds	r7, #20
  401c1a:	46bd      	mov	sp, r7
  401c1c:	bd90      	pop	{r4, r7, pc}
  401c1e:	bf00      	nop
  401c20:	004039e4 	.word	0x004039e4
  401c24:	00401675 	.word	0x00401675
  401c28:	400e0800 	.word	0x400e0800
  401c2c:	00401a69 	.word	0x00401a69

00401c30 <main>:
 */

#  define EXAMPLE_LED_GPIO    LED0_GPIO

int main(void) //6feb16 this version of main has been hacked up for only exactly what we need
{
  401c30:	b580      	push	{r7, lr}
  401c32:	b084      	sub	sp, #16
  401c34:	af00      	add	r7, sp, #0
	static uint8_t uc_sync = SYNC_CHAR;
	uint32_t time_elapsed = 0;
  401c36:	2300      	movs	r3, #0
  401c38:	60bb      	str	r3, [r7, #8]
	uint32_t ul_i;
	uint8_t displayState = 0;
  401c3a:	2300      	movs	r3, #0
  401c3c:	73fb      	strb	r3, [r7, #15]
	uint8_t charCount = 0;
  401c3e:	2300      	movs	r3, #0
  401c40:	73bb      	strb	r3, [r7, #14]

	/* Initialize the SAM system. */
	sysclk_init();
  401c42:	4b39      	ldr	r3, [pc, #228]	; (401d28 <main+0xf8>)
  401c44:	4798      	blx	r3
	board_init();
  401c46:	4b39      	ldr	r3, [pc, #228]	; (401d2c <main+0xfc>)
  401c48:	4798      	blx	r3

	/* Configure UART for debug message output. */
	configure_console();
  401c4a:	4b39      	ldr	r3, [pc, #228]	; (401d30 <main+0x100>)
  401c4c:	4798      	blx	r3

	/* 1ms tick. */
	configure_systick();
  401c4e:	4b39      	ldr	r3, [pc, #228]	; (401d34 <main+0x104>)
  401c50:	4798      	blx	r3


	while (1) {
		ioport_toggle_pin_level(EXAMPLE_LED_GPIO);
  401c52:	2050      	movs	r0, #80	; 0x50
  401c54:	4b38      	ldr	r3, [pc, #224]	; (401d38 <main+0x108>)
  401c56:	4798      	blx	r3
		mdelay(3000);
  401c58:	f640 30b8 	movw	r0, #3000	; 0xbb8
  401c5c:	4b37      	ldr	r3, [pc, #220]	; (401d3c <main+0x10c>)
  401c5e:	4798      	blx	r3
		

		for (charCount = 0; charCount < 7; charCount++)
  401c60:	2300      	movs	r3, #0
  401c62:	73bb      	strb	r3, [r7, #14]
  401c64:	e054      	b.n	401d10 <main+0xe0>
		{
			unsigned char temp;
			temp = (*(cmdPtrArray[displayState]+charCount));
  401c66:	7bfb      	ldrb	r3, [r7, #15]
  401c68:	4a35      	ldr	r2, [pc, #212]	; (401d40 <main+0x110>)
  401c6a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
  401c6e:	7bbb      	ldrb	r3, [r7, #14]
  401c70:	4413      	add	r3, r2
  401c72:	781b      	ldrb	r3, [r3, #0]
  401c74:	71fb      	strb	r3, [r7, #7]
			putchar(temp);
  401c76:	4b33      	ldr	r3, [pc, #204]	; (401d44 <main+0x114>)
  401c78:	681b      	ldr	r3, [r3, #0]
  401c7a:	689b      	ldr	r3, [r3, #8]
  401c7c:	689a      	ldr	r2, [r3, #8]
  401c7e:	3a01      	subs	r2, #1
  401c80:	609a      	str	r2, [r3, #8]
  401c82:	689b      	ldr	r3, [r3, #8]
  401c84:	2b00      	cmp	r3, #0
  401c86:	da34      	bge.n	401cf2 <main+0xc2>
  401c88:	4b2e      	ldr	r3, [pc, #184]	; (401d44 <main+0x114>)
  401c8a:	681b      	ldr	r3, [r3, #0]
  401c8c:	689b      	ldr	r3, [r3, #8]
  401c8e:	689a      	ldr	r2, [r3, #8]
  401c90:	4b2c      	ldr	r3, [pc, #176]	; (401d44 <main+0x114>)
  401c92:	681b      	ldr	r3, [r3, #0]
  401c94:	689b      	ldr	r3, [r3, #8]
  401c96:	699b      	ldr	r3, [r3, #24]
  401c98:	429a      	cmp	r2, r3
  401c9a:	db1e      	blt.n	401cda <main+0xaa>
  401c9c:	4b29      	ldr	r3, [pc, #164]	; (401d44 <main+0x114>)
  401c9e:	681b      	ldr	r3, [r3, #0]
  401ca0:	689b      	ldr	r3, [r3, #8]
  401ca2:	681b      	ldr	r3, [r3, #0]
  401ca4:	79fa      	ldrb	r2, [r7, #7]
  401ca6:	701a      	strb	r2, [r3, #0]
  401ca8:	4b26      	ldr	r3, [pc, #152]	; (401d44 <main+0x114>)
  401caa:	681b      	ldr	r3, [r3, #0]
  401cac:	689b      	ldr	r3, [r3, #8]
  401cae:	681b      	ldr	r3, [r3, #0]
  401cb0:	781b      	ldrb	r3, [r3, #0]
  401cb2:	2b0a      	cmp	r3, #10
  401cb4:	d006      	beq.n	401cc4 <main+0x94>
  401cb6:	4b23      	ldr	r3, [pc, #140]	; (401d44 <main+0x114>)
  401cb8:	681b      	ldr	r3, [r3, #0]
  401cba:	689b      	ldr	r3, [r3, #8]
  401cbc:	681a      	ldr	r2, [r3, #0]
  401cbe:	3201      	adds	r2, #1
  401cc0:	601a      	str	r2, [r3, #0]
  401cc2:	e022      	b.n	401d0a <main+0xda>
  401cc4:	4b1f      	ldr	r3, [pc, #124]	; (401d44 <main+0x114>)
  401cc6:	681a      	ldr	r2, [r3, #0]
  401cc8:	4b1e      	ldr	r3, [pc, #120]	; (401d44 <main+0x114>)
  401cca:	681b      	ldr	r3, [r3, #0]
  401ccc:	689b      	ldr	r3, [r3, #8]
  401cce:	4610      	mov	r0, r2
  401cd0:	210a      	movs	r1, #10
  401cd2:	461a      	mov	r2, r3
  401cd4:	4b1c      	ldr	r3, [pc, #112]	; (401d48 <main+0x118>)
  401cd6:	4798      	blx	r3
  401cd8:	e017      	b.n	401d0a <main+0xda>
  401cda:	4b1a      	ldr	r3, [pc, #104]	; (401d44 <main+0x114>)
  401cdc:	6819      	ldr	r1, [r3, #0]
  401cde:	79fa      	ldrb	r2, [r7, #7]
  401ce0:	4b18      	ldr	r3, [pc, #96]	; (401d44 <main+0x114>)
  401ce2:	681b      	ldr	r3, [r3, #0]
  401ce4:	689b      	ldr	r3, [r3, #8]
  401ce6:	4608      	mov	r0, r1
  401ce8:	4611      	mov	r1, r2
  401cea:	461a      	mov	r2, r3
  401cec:	4b16      	ldr	r3, [pc, #88]	; (401d48 <main+0x118>)
  401cee:	4798      	blx	r3
  401cf0:	e00b      	b.n	401d0a <main+0xda>
  401cf2:	4b14      	ldr	r3, [pc, #80]	; (401d44 <main+0x114>)
  401cf4:	681b      	ldr	r3, [r3, #0]
  401cf6:	689b      	ldr	r3, [r3, #8]
  401cf8:	681b      	ldr	r3, [r3, #0]
  401cfa:	79fa      	ldrb	r2, [r7, #7]
  401cfc:	701a      	strb	r2, [r3, #0]
  401cfe:	4b11      	ldr	r3, [pc, #68]	; (401d44 <main+0x114>)
  401d00:	681b      	ldr	r3, [r3, #0]
  401d02:	689b      	ldr	r3, [r3, #8]
  401d04:	681a      	ldr	r2, [r3, #0]
  401d06:	3201      	adds	r2, #1
  401d08:	601a      	str	r2, [r3, #0]
	while (1) {
		ioport_toggle_pin_level(EXAMPLE_LED_GPIO);
		mdelay(3000);
		

		for (charCount = 0; charCount < 7; charCount++)
  401d0a:	7bbb      	ldrb	r3, [r7, #14]
  401d0c:	3301      	adds	r3, #1
  401d0e:	73bb      	strb	r3, [r7, #14]
  401d10:	7bbb      	ldrb	r3, [r7, #14]
  401d12:	2b06      	cmp	r3, #6
  401d14:	d9a7      	bls.n	401c66 <main+0x36>
			unsigned char temp;
			temp = (*(cmdPtrArray[displayState]+charCount));
			putchar(temp);
		}
		
		if ((++displayState) > 8)
  401d16:	7bfb      	ldrb	r3, [r7, #15]
  401d18:	3301      	adds	r3, #1
  401d1a:	73fb      	strb	r3, [r7, #15]
  401d1c:	7bfb      	ldrb	r3, [r7, #15]
  401d1e:	2b08      	cmp	r3, #8
  401d20:	d901      	bls.n	401d26 <main+0xf6>
		{
			displayState = 0;
  401d22:	2300      	movs	r3, #0
  401d24:	73fb      	strb	r3, [r7, #15]
		}
		
	}
  401d26:	e794      	b.n	401c52 <main+0x22>
  401d28:	0040048d 	.word	0x0040048d
  401d2c:	00400935 	.word	0x00400935
  401d30:	00401bf9 	.word	0x00401bf9
  401d34:	00401bb5 	.word	0x00401bb5
  401d38:	0040168d 	.word	0x0040168d
  401d3c:	00401ad1 	.word	0x00401ad1
  401d40:	20400058 	.word	0x20400058
  401d44:	204004a8 	.word	0x204004a8
  401d48:	00402015 	.word	0x00402015

00401d4c <__libc_init_array>:
  401d4c:	b570      	push	{r4, r5, r6, lr}
  401d4e:	4e0f      	ldr	r6, [pc, #60]	; (401d8c <__libc_init_array+0x40>)
  401d50:	4d0f      	ldr	r5, [pc, #60]	; (401d90 <__libc_init_array+0x44>)
  401d52:	1b76      	subs	r6, r6, r5
  401d54:	10b6      	asrs	r6, r6, #2
  401d56:	bf18      	it	ne
  401d58:	2400      	movne	r4, #0
  401d5a:	d005      	beq.n	401d68 <__libc_init_array+0x1c>
  401d5c:	3401      	adds	r4, #1
  401d5e:	f855 3b04 	ldr.w	r3, [r5], #4
  401d62:	4798      	blx	r3
  401d64:	42a6      	cmp	r6, r4
  401d66:	d1f9      	bne.n	401d5c <__libc_init_array+0x10>
  401d68:	4e0a      	ldr	r6, [pc, #40]	; (401d94 <__libc_init_array+0x48>)
  401d6a:	f001 fec1 	bl	403af0 <_init>
  401d6e:	4d0a      	ldr	r5, [pc, #40]	; (401d98 <__libc_init_array+0x4c>)
  401d70:	1b76      	subs	r6, r6, r5
  401d72:	10b6      	asrs	r6, r6, #2
  401d74:	bf18      	it	ne
  401d76:	2400      	movne	r4, #0
  401d78:	d006      	beq.n	401d88 <__libc_init_array+0x3c>
  401d7a:	3401      	adds	r4, #1
  401d7c:	f855 3b04 	ldr.w	r3, [r5], #4
  401d80:	4798      	blx	r3
  401d82:	42a6      	cmp	r6, r4
  401d84:	d1f9      	bne.n	401d7a <__libc_init_array+0x2e>
  401d86:	bd70      	pop	{r4, r5, r6, pc}
  401d88:	bd70      	pop	{r4, r5, r6, pc}
  401d8a:	bf00      	nop
  401d8c:	00403afc 	.word	0x00403afc
  401d90:	00403afc 	.word	0x00403afc
  401d94:	00403b04 	.word	0x00403b04
  401d98:	00403afc 	.word	0x00403afc

00401d9c <memset>:
  401d9c:	0783      	lsls	r3, r0, #30
  401d9e:	b470      	push	{r4, r5, r6}
  401da0:	d049      	beq.n	401e36 <memset+0x9a>
  401da2:	1e54      	subs	r4, r2, #1
  401da4:	2a00      	cmp	r2, #0
  401da6:	d044      	beq.n	401e32 <memset+0x96>
  401da8:	b2cd      	uxtb	r5, r1
  401daa:	4603      	mov	r3, r0
  401dac:	e002      	b.n	401db4 <memset+0x18>
  401dae:	2c00      	cmp	r4, #0
  401db0:	d03f      	beq.n	401e32 <memset+0x96>
  401db2:	4614      	mov	r4, r2
  401db4:	f803 5b01 	strb.w	r5, [r3], #1
  401db8:	f013 0f03 	tst.w	r3, #3
  401dbc:	f104 32ff 	add.w	r2, r4, #4294967295
  401dc0:	d1f5      	bne.n	401dae <memset+0x12>
  401dc2:	2c03      	cmp	r4, #3
  401dc4:	d92e      	bls.n	401e24 <memset+0x88>
  401dc6:	b2cd      	uxtb	r5, r1
  401dc8:	2c0f      	cmp	r4, #15
  401dca:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  401dce:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  401dd2:	d919      	bls.n	401e08 <memset+0x6c>
  401dd4:	f103 0210 	add.w	r2, r3, #16
  401dd8:	4626      	mov	r6, r4
  401dda:	3e10      	subs	r6, #16
  401ddc:	f842 5c10 	str.w	r5, [r2, #-16]
  401de0:	f842 5c0c 	str.w	r5, [r2, #-12]
  401de4:	3210      	adds	r2, #16
  401de6:	2e0f      	cmp	r6, #15
  401de8:	f842 5c18 	str.w	r5, [r2, #-24]
  401dec:	f842 5c14 	str.w	r5, [r2, #-20]
  401df0:	d8f3      	bhi.n	401dda <memset+0x3e>
  401df2:	f1a4 0210 	sub.w	r2, r4, #16
  401df6:	f004 040f 	and.w	r4, r4, #15
  401dfa:	f022 020f 	bic.w	r2, r2, #15
  401dfe:	2c03      	cmp	r4, #3
  401e00:	f102 0210 	add.w	r2, r2, #16
  401e04:	4413      	add	r3, r2
  401e06:	d90d      	bls.n	401e24 <memset+0x88>
  401e08:	461e      	mov	r6, r3
  401e0a:	4622      	mov	r2, r4
  401e0c:	3a04      	subs	r2, #4
  401e0e:	f846 5b04 	str.w	r5, [r6], #4
  401e12:	2a03      	cmp	r2, #3
  401e14:	d8fa      	bhi.n	401e0c <memset+0x70>
  401e16:	1f22      	subs	r2, r4, #4
  401e18:	f004 0403 	and.w	r4, r4, #3
  401e1c:	f022 0203 	bic.w	r2, r2, #3
  401e20:	3204      	adds	r2, #4
  401e22:	4413      	add	r3, r2
  401e24:	b12c      	cbz	r4, 401e32 <memset+0x96>
  401e26:	b2c9      	uxtb	r1, r1
  401e28:	441c      	add	r4, r3
  401e2a:	f803 1b01 	strb.w	r1, [r3], #1
  401e2e:	42a3      	cmp	r3, r4
  401e30:	d1fb      	bne.n	401e2a <memset+0x8e>
  401e32:	bc70      	pop	{r4, r5, r6}
  401e34:	4770      	bx	lr
  401e36:	4614      	mov	r4, r2
  401e38:	4603      	mov	r3, r0
  401e3a:	e7c2      	b.n	401dc2 <memset+0x26>

00401e3c <_puts_r>:
  401e3c:	b5f0      	push	{r4, r5, r6, r7, lr}
  401e3e:	4604      	mov	r4, r0
  401e40:	b089      	sub	sp, #36	; 0x24
  401e42:	4608      	mov	r0, r1
  401e44:	460d      	mov	r5, r1
  401e46:	f000 f8b7 	bl	401fb8 <strlen>
  401e4a:	68a3      	ldr	r3, [r4, #8]
  401e4c:	2701      	movs	r7, #1
  401e4e:	2102      	movs	r1, #2
  401e50:	899a      	ldrh	r2, [r3, #12]
  401e52:	ae04      	add	r6, sp, #16
  401e54:	eb00 0c07 	add.w	ip, r0, r7
  401e58:	f8df e03c 	ldr.w	lr, [pc, #60]	; 401e98 <_puts_r+0x5c>
  401e5c:	9102      	str	r1, [sp, #8]
  401e5e:	0491      	lsls	r1, r2, #18
  401e60:	9504      	str	r5, [sp, #16]
  401e62:	9005      	str	r0, [sp, #20]
  401e64:	f8cd c00c 	str.w	ip, [sp, #12]
  401e68:	f8cd e018 	str.w	lr, [sp, #24]
  401e6c:	9707      	str	r7, [sp, #28]
  401e6e:	9601      	str	r6, [sp, #4]
  401e70:	d406      	bmi.n	401e80 <_puts_r+0x44>
  401e72:	6e59      	ldr	r1, [r3, #100]	; 0x64
  401e74:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  401e78:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  401e7c:	819a      	strh	r2, [r3, #12]
  401e7e:	6659      	str	r1, [r3, #100]	; 0x64
  401e80:	4620      	mov	r0, r4
  401e82:	4619      	mov	r1, r3
  401e84:	aa01      	add	r2, sp, #4
  401e86:	f000 fc0f 	bl	4026a8 <__sfvwrite_r>
  401e8a:	2800      	cmp	r0, #0
  401e8c:	bf14      	ite	ne
  401e8e:	f04f 30ff 	movne.w	r0, #4294967295
  401e92:	200a      	moveq	r0, #10
  401e94:	b009      	add	sp, #36	; 0x24
  401e96:	bdf0      	pop	{r4, r5, r6, r7, pc}
  401e98:	00403aec 	.word	0x00403aec

00401e9c <puts>:
  401e9c:	4b02      	ldr	r3, [pc, #8]	; (401ea8 <puts+0xc>)
  401e9e:	4601      	mov	r1, r0
  401ea0:	6818      	ldr	r0, [r3, #0]
  401ea2:	f7ff bfcb 	b.w	401e3c <_puts_r>
  401ea6:	bf00      	nop
  401ea8:	204004a8 	.word	0x204004a8

00401eac <setbuf>:
  401eac:	2900      	cmp	r1, #0
  401eae:	f44f 6380 	mov.w	r3, #1024	; 0x400
  401eb2:	bf0c      	ite	eq
  401eb4:	2202      	moveq	r2, #2
  401eb6:	2200      	movne	r2, #0
  401eb8:	f000 b800 	b.w	401ebc <setvbuf>

00401ebc <setvbuf>:
  401ebc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  401ec0:	4e3b      	ldr	r6, [pc, #236]	; (401fb0 <setvbuf+0xf4>)
  401ec2:	4604      	mov	r4, r0
  401ec4:	460d      	mov	r5, r1
  401ec6:	4690      	mov	r8, r2
  401ec8:	6837      	ldr	r7, [r6, #0]
  401eca:	461e      	mov	r6, r3
  401ecc:	b117      	cbz	r7, 401ed4 <setvbuf+0x18>
  401ece:	6bbb      	ldr	r3, [r7, #56]	; 0x38
  401ed0:	2b00      	cmp	r3, #0
  401ed2:	d03f      	beq.n	401f54 <setvbuf+0x98>
  401ed4:	f1b8 0f02 	cmp.w	r8, #2
  401ed8:	d832      	bhi.n	401f40 <setvbuf+0x84>
  401eda:	ea5f 79d6 	movs.w	r9, r6, lsr #31
  401ede:	d12f      	bne.n	401f40 <setvbuf+0x84>
  401ee0:	4621      	mov	r1, r4
  401ee2:	4638      	mov	r0, r7
  401ee4:	f000 fa00 	bl	4022e8 <_fflush_r>
  401ee8:	89a1      	ldrh	r1, [r4, #12]
  401eea:	f8c4 9004 	str.w	r9, [r4, #4]
  401eee:	060b      	lsls	r3, r1, #24
  401ef0:	f8c4 9018 	str.w	r9, [r4, #24]
  401ef4:	d428      	bmi.n	401f48 <setvbuf+0x8c>
  401ef6:	f021 0183 	bic.w	r1, r1, #131	; 0x83
  401efa:	f1b8 0f02 	cmp.w	r8, #2
  401efe:	b289      	uxth	r1, r1
  401f00:	81a1      	strh	r1, [r4, #12]
  401f02:	d02b      	beq.n	401f5c <setvbuf+0xa0>
  401f04:	2d00      	cmp	r5, #0
  401f06:	d037      	beq.n	401f78 <setvbuf+0xbc>
  401f08:	f1b8 0f01 	cmp.w	r8, #1
  401f0c:	d012      	beq.n	401f34 <setvbuf+0x78>
  401f0e:	b289      	uxth	r1, r1
  401f10:	4b28      	ldr	r3, [pc, #160]	; (401fb4 <setvbuf+0xf8>)
  401f12:	f001 0008 	and.w	r0, r1, #8
  401f16:	63fb      	str	r3, [r7, #60]	; 0x3c
  401f18:	6025      	str	r5, [r4, #0]
  401f1a:	b280      	uxth	r0, r0
  401f1c:	6125      	str	r5, [r4, #16]
  401f1e:	6166      	str	r6, [r4, #20]
  401f20:	b180      	cbz	r0, 401f44 <setvbuf+0x88>
  401f22:	f011 0f03 	tst.w	r1, #3
  401f26:	f04f 0000 	mov.w	r0, #0
  401f2a:	bf18      	it	ne
  401f2c:	4606      	movne	r6, r0
  401f2e:	60a6      	str	r6, [r4, #8]
  401f30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  401f34:	f041 0101 	orr.w	r1, r1, #1
  401f38:	4273      	negs	r3, r6
  401f3a:	81a1      	strh	r1, [r4, #12]
  401f3c:	61a3      	str	r3, [r4, #24]
  401f3e:	e7e6      	b.n	401f0e <setvbuf+0x52>
  401f40:	f04f 30ff 	mov.w	r0, #4294967295
  401f44:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  401f48:	6921      	ldr	r1, [r4, #16]
  401f4a:	4638      	mov	r0, r7
  401f4c:	f000 fad4 	bl	4024f8 <_free_r>
  401f50:	89a1      	ldrh	r1, [r4, #12]
  401f52:	e7d0      	b.n	401ef6 <setvbuf+0x3a>
  401f54:	4638      	mov	r0, r7
  401f56:	f000 fa61 	bl	40241c <__sinit>
  401f5a:	e7bb      	b.n	401ed4 <setvbuf+0x18>
  401f5c:	2000      	movs	r0, #0
  401f5e:	f104 0343 	add.w	r3, r4, #67	; 0x43
  401f62:	f041 0102 	orr.w	r1, r1, #2
  401f66:	2500      	movs	r5, #0
  401f68:	2201      	movs	r2, #1
  401f6a:	81a1      	strh	r1, [r4, #12]
  401f6c:	60a5      	str	r5, [r4, #8]
  401f6e:	6023      	str	r3, [r4, #0]
  401f70:	6123      	str	r3, [r4, #16]
  401f72:	6162      	str	r2, [r4, #20]
  401f74:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  401f78:	2e00      	cmp	r6, #0
  401f7a:	bf08      	it	eq
  401f7c:	f44f 6680 	moveq.w	r6, #1024	; 0x400
  401f80:	4630      	mov	r0, r6
  401f82:	f000 fdbd 	bl	402b00 <malloc>
  401f86:	4605      	mov	r5, r0
  401f88:	b128      	cbz	r0, 401f96 <setvbuf+0xda>
  401f8a:	89a1      	ldrh	r1, [r4, #12]
  401f8c:	f041 0180 	orr.w	r1, r1, #128	; 0x80
  401f90:	b289      	uxth	r1, r1
  401f92:	81a1      	strh	r1, [r4, #12]
  401f94:	e7b8      	b.n	401f08 <setvbuf+0x4c>
  401f96:	f44f 6080 	mov.w	r0, #1024	; 0x400
  401f9a:	f000 fdb1 	bl	402b00 <malloc>
  401f9e:	4605      	mov	r5, r0
  401fa0:	b918      	cbnz	r0, 401faa <setvbuf+0xee>
  401fa2:	89a1      	ldrh	r1, [r4, #12]
  401fa4:	f04f 30ff 	mov.w	r0, #4294967295
  401fa8:	e7d9      	b.n	401f5e <setvbuf+0xa2>
  401faa:	f44f 6680 	mov.w	r6, #1024	; 0x400
  401fae:	e7ec      	b.n	401f8a <setvbuf+0xce>
  401fb0:	204004a8 	.word	0x204004a8
  401fb4:	00402315 	.word	0x00402315

00401fb8 <strlen>:
  401fb8:	f020 0103 	bic.w	r1, r0, #3
  401fbc:	f010 0003 	ands.w	r0, r0, #3
  401fc0:	f1c0 0000 	rsb	r0, r0, #0
  401fc4:	f851 3b04 	ldr.w	r3, [r1], #4
  401fc8:	f100 0c04 	add.w	ip, r0, #4
  401fcc:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
  401fd0:	f06f 0200 	mvn.w	r2, #0
  401fd4:	bf1c      	itt	ne
  401fd6:	fa22 f20c 	lsrne.w	r2, r2, ip
  401fda:	4313      	orrne	r3, r2
  401fdc:	f04f 0c01 	mov.w	ip, #1
  401fe0:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
  401fe4:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
  401fe8:	eba3 020c 	sub.w	r2, r3, ip
  401fec:	ea22 0203 	bic.w	r2, r2, r3
  401ff0:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
  401ff4:	bf04      	itt	eq
  401ff6:	f851 3b04 	ldreq.w	r3, [r1], #4
  401ffa:	3004      	addeq	r0, #4
  401ffc:	d0f4      	beq.n	401fe8 <strlen+0x30>
  401ffe:	f1c2 0100 	rsb	r1, r2, #0
  402002:	ea02 0201 	and.w	r2, r2, r1
  402006:	fab2 f282 	clz	r2, r2
  40200a:	f1c2 021f 	rsb	r2, r2, #31
  40200e:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  402012:	4770      	bx	lr

00402014 <__swbuf_r>:
  402014:	b570      	push	{r4, r5, r6, lr}
  402016:	460d      	mov	r5, r1
  402018:	4614      	mov	r4, r2
  40201a:	4606      	mov	r6, r0
  40201c:	b110      	cbz	r0, 402024 <__swbuf_r+0x10>
  40201e:	6b83      	ldr	r3, [r0, #56]	; 0x38
  402020:	2b00      	cmp	r3, #0
  402022:	d048      	beq.n	4020b6 <__swbuf_r+0xa2>
  402024:	89a2      	ldrh	r2, [r4, #12]
  402026:	69a3      	ldr	r3, [r4, #24]
  402028:	b291      	uxth	r1, r2
  40202a:	60a3      	str	r3, [r4, #8]
  40202c:	0708      	lsls	r0, r1, #28
  40202e:	d538      	bpl.n	4020a2 <__swbuf_r+0x8e>
  402030:	6923      	ldr	r3, [r4, #16]
  402032:	2b00      	cmp	r3, #0
  402034:	d035      	beq.n	4020a2 <__swbuf_r+0x8e>
  402036:	0489      	lsls	r1, r1, #18
  402038:	b2ed      	uxtb	r5, r5
  40203a:	d515      	bpl.n	402068 <__swbuf_r+0x54>
  40203c:	6822      	ldr	r2, [r4, #0]
  40203e:	6961      	ldr	r1, [r4, #20]
  402040:	1ad3      	subs	r3, r2, r3
  402042:	428b      	cmp	r3, r1
  402044:	da1c      	bge.n	402080 <__swbuf_r+0x6c>
  402046:	3301      	adds	r3, #1
  402048:	68a1      	ldr	r1, [r4, #8]
  40204a:	1c50      	adds	r0, r2, #1
  40204c:	3901      	subs	r1, #1
  40204e:	6020      	str	r0, [r4, #0]
  402050:	60a1      	str	r1, [r4, #8]
  402052:	7015      	strb	r5, [r2, #0]
  402054:	6962      	ldr	r2, [r4, #20]
  402056:	429a      	cmp	r2, r3
  402058:	d01a      	beq.n	402090 <__swbuf_r+0x7c>
  40205a:	2d0a      	cmp	r5, #10
  40205c:	d102      	bne.n	402064 <__swbuf_r+0x50>
  40205e:	7b23      	ldrb	r3, [r4, #12]
  402060:	07db      	lsls	r3, r3, #31
  402062:	d415      	bmi.n	402090 <__swbuf_r+0x7c>
  402064:	4628      	mov	r0, r5
  402066:	bd70      	pop	{r4, r5, r6, pc}
  402068:	6e61      	ldr	r1, [r4, #100]	; 0x64
  40206a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  40206e:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  402072:	81a2      	strh	r2, [r4, #12]
  402074:	6822      	ldr	r2, [r4, #0]
  402076:	6661      	str	r1, [r4, #100]	; 0x64
  402078:	1ad3      	subs	r3, r2, r3
  40207a:	6961      	ldr	r1, [r4, #20]
  40207c:	428b      	cmp	r3, r1
  40207e:	dbe2      	blt.n	402046 <__swbuf_r+0x32>
  402080:	4630      	mov	r0, r6
  402082:	4621      	mov	r1, r4
  402084:	f000 f930 	bl	4022e8 <_fflush_r>
  402088:	b940      	cbnz	r0, 40209c <__swbuf_r+0x88>
  40208a:	6822      	ldr	r2, [r4, #0]
  40208c:	2301      	movs	r3, #1
  40208e:	e7db      	b.n	402048 <__swbuf_r+0x34>
  402090:	4630      	mov	r0, r6
  402092:	4621      	mov	r1, r4
  402094:	f000 f928 	bl	4022e8 <_fflush_r>
  402098:	2800      	cmp	r0, #0
  40209a:	d0e3      	beq.n	402064 <__swbuf_r+0x50>
  40209c:	f04f 30ff 	mov.w	r0, #4294967295
  4020a0:	bd70      	pop	{r4, r5, r6, pc}
  4020a2:	4630      	mov	r0, r6
  4020a4:	4621      	mov	r1, r4
  4020a6:	f000 f809 	bl	4020bc <__swsetup_r>
  4020aa:	2800      	cmp	r0, #0
  4020ac:	d1f6      	bne.n	40209c <__swbuf_r+0x88>
  4020ae:	89a2      	ldrh	r2, [r4, #12]
  4020b0:	6923      	ldr	r3, [r4, #16]
  4020b2:	b291      	uxth	r1, r2
  4020b4:	e7bf      	b.n	402036 <__swbuf_r+0x22>
  4020b6:	f000 f9b1 	bl	40241c <__sinit>
  4020ba:	e7b3      	b.n	402024 <__swbuf_r+0x10>

004020bc <__swsetup_r>:
  4020bc:	b538      	push	{r3, r4, r5, lr}
  4020be:	4b2f      	ldr	r3, [pc, #188]	; (40217c <__swsetup_r+0xc0>)
  4020c0:	4605      	mov	r5, r0
  4020c2:	460c      	mov	r4, r1
  4020c4:	6818      	ldr	r0, [r3, #0]
  4020c6:	b110      	cbz	r0, 4020ce <__swsetup_r+0x12>
  4020c8:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4020ca:	2b00      	cmp	r3, #0
  4020cc:	d036      	beq.n	40213c <__swsetup_r+0x80>
  4020ce:	89a2      	ldrh	r2, [r4, #12]
  4020d0:	b293      	uxth	r3, r2
  4020d2:	0718      	lsls	r0, r3, #28
  4020d4:	d50b      	bpl.n	4020ee <__swsetup_r+0x32>
  4020d6:	6920      	ldr	r0, [r4, #16]
  4020d8:	b1a0      	cbz	r0, 402104 <__swsetup_r+0x48>
  4020da:	f013 0201 	ands.w	r2, r3, #1
  4020de:	d11d      	bne.n	40211c <__swsetup_r+0x60>
  4020e0:	0799      	lsls	r1, r3, #30
  4020e2:	d400      	bmi.n	4020e6 <__swsetup_r+0x2a>
  4020e4:	6962      	ldr	r2, [r4, #20]
  4020e6:	60a2      	str	r2, [r4, #8]
  4020e8:	b1f8      	cbz	r0, 40212a <__swsetup_r+0x6e>
  4020ea:	2000      	movs	r0, #0
  4020ec:	bd38      	pop	{r3, r4, r5, pc}
  4020ee:	06d9      	lsls	r1, r3, #27
  4020f0:	d53b      	bpl.n	40216a <__swsetup_r+0xae>
  4020f2:	0758      	lsls	r0, r3, #29
  4020f4:	d425      	bmi.n	402142 <__swsetup_r+0x86>
  4020f6:	6920      	ldr	r0, [r4, #16]
  4020f8:	f042 0208 	orr.w	r2, r2, #8
  4020fc:	b293      	uxth	r3, r2
  4020fe:	81a2      	strh	r2, [r4, #12]
  402100:	2800      	cmp	r0, #0
  402102:	d1ea      	bne.n	4020da <__swsetup_r+0x1e>
  402104:	f403 7220 	and.w	r2, r3, #640	; 0x280
  402108:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  40210c:	d0e5      	beq.n	4020da <__swsetup_r+0x1e>
  40210e:	4628      	mov	r0, r5
  402110:	4621      	mov	r1, r4
  402112:	f000 fc83 	bl	402a1c <__smakebuf_r>
  402116:	89a3      	ldrh	r3, [r4, #12]
  402118:	6920      	ldr	r0, [r4, #16]
  40211a:	e7de      	b.n	4020da <__swsetup_r+0x1e>
  40211c:	6963      	ldr	r3, [r4, #20]
  40211e:	2200      	movs	r2, #0
  402120:	425b      	negs	r3, r3
  402122:	60a2      	str	r2, [r4, #8]
  402124:	61a3      	str	r3, [r4, #24]
  402126:	2800      	cmp	r0, #0
  402128:	d1df      	bne.n	4020ea <__swsetup_r+0x2e>
  40212a:	89a3      	ldrh	r3, [r4, #12]
  40212c:	061a      	lsls	r2, r3, #24
  40212e:	d5dd      	bpl.n	4020ec <__swsetup_r+0x30>
  402130:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  402134:	f04f 30ff 	mov.w	r0, #4294967295
  402138:	81a3      	strh	r3, [r4, #12]
  40213a:	bd38      	pop	{r3, r4, r5, pc}
  40213c:	f000 f96e 	bl	40241c <__sinit>
  402140:	e7c5      	b.n	4020ce <__swsetup_r+0x12>
  402142:	6b21      	ldr	r1, [r4, #48]	; 0x30
  402144:	b149      	cbz	r1, 40215a <__swsetup_r+0x9e>
  402146:	f104 0340 	add.w	r3, r4, #64	; 0x40
  40214a:	4299      	cmp	r1, r3
  40214c:	d003      	beq.n	402156 <__swsetup_r+0x9a>
  40214e:	4628      	mov	r0, r5
  402150:	f000 f9d2 	bl	4024f8 <_free_r>
  402154:	89a2      	ldrh	r2, [r4, #12]
  402156:	2300      	movs	r3, #0
  402158:	6323      	str	r3, [r4, #48]	; 0x30
  40215a:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  40215e:	2300      	movs	r3, #0
  402160:	6920      	ldr	r0, [r4, #16]
  402162:	b292      	uxth	r2, r2
  402164:	e884 0009 	stmia.w	r4, {r0, r3}
  402168:	e7c6      	b.n	4020f8 <__swsetup_r+0x3c>
  40216a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  40216e:	2309      	movs	r3, #9
  402170:	f04f 30ff 	mov.w	r0, #4294967295
  402174:	602b      	str	r3, [r5, #0]
  402176:	81a2      	strh	r2, [r4, #12]
  402178:	bd38      	pop	{r3, r4, r5, pc}
  40217a:	bf00      	nop
  40217c:	204004a8 	.word	0x204004a8

00402180 <register_fini>:
  402180:	4b02      	ldr	r3, [pc, #8]	; (40218c <register_fini+0xc>)
  402182:	b113      	cbz	r3, 40218a <register_fini+0xa>
  402184:	4802      	ldr	r0, [pc, #8]	; (402190 <register_fini+0x10>)
  402186:	f000 b805 	b.w	402194 <atexit>
  40218a:	4770      	bx	lr
  40218c:	00000000 	.word	0x00000000
  402190:	00402431 	.word	0x00402431

00402194 <atexit>:
  402194:	4601      	mov	r1, r0
  402196:	2000      	movs	r0, #0
  402198:	4602      	mov	r2, r0
  40219a:	4603      	mov	r3, r0
  40219c:	f001 bb0e 	b.w	4037bc <__register_exitproc>

004021a0 <__sflush_r>:
  4021a0:	898b      	ldrh	r3, [r1, #12]
  4021a2:	b29a      	uxth	r2, r3
  4021a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4021a8:	460d      	mov	r5, r1
  4021aa:	0711      	lsls	r1, r2, #28
  4021ac:	4680      	mov	r8, r0
  4021ae:	d43c      	bmi.n	40222a <__sflush_r+0x8a>
  4021b0:	686a      	ldr	r2, [r5, #4]
  4021b2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  4021b6:	2a00      	cmp	r2, #0
  4021b8:	81ab      	strh	r3, [r5, #12]
  4021ba:	dd76      	ble.n	4022aa <__sflush_r+0x10a>
  4021bc:	6aae      	ldr	r6, [r5, #40]	; 0x28
  4021be:	2e00      	cmp	r6, #0
  4021c0:	d04b      	beq.n	40225a <__sflush_r+0xba>
  4021c2:	b29b      	uxth	r3, r3
  4021c4:	2100      	movs	r1, #0
  4021c6:	f8d8 4000 	ldr.w	r4, [r8]
  4021ca:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
  4021ce:	f8c8 1000 	str.w	r1, [r8]
  4021d2:	b292      	uxth	r2, r2
  4021d4:	2a00      	cmp	r2, #0
  4021d6:	d06c      	beq.n	4022b2 <__sflush_r+0x112>
  4021d8:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  4021da:	075f      	lsls	r7, r3, #29
  4021dc:	d505      	bpl.n	4021ea <__sflush_r+0x4a>
  4021de:	6869      	ldr	r1, [r5, #4]
  4021e0:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  4021e2:	1a52      	subs	r2, r2, r1
  4021e4:	b10b      	cbz	r3, 4021ea <__sflush_r+0x4a>
  4021e6:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  4021e8:	1ad2      	subs	r2, r2, r3
  4021ea:	4640      	mov	r0, r8
  4021ec:	69e9      	ldr	r1, [r5, #28]
  4021ee:	2300      	movs	r3, #0
  4021f0:	47b0      	blx	r6
  4021f2:	1c46      	adds	r6, r0, #1
  4021f4:	d03e      	beq.n	402274 <__sflush_r+0xd4>
  4021f6:	89ab      	ldrh	r3, [r5, #12]
  4021f8:	2100      	movs	r1, #0
  4021fa:	692a      	ldr	r2, [r5, #16]
  4021fc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  402200:	6069      	str	r1, [r5, #4]
  402202:	602a      	str	r2, [r5, #0]
  402204:	b29b      	uxth	r3, r3
  402206:	04da      	lsls	r2, r3, #19
  402208:	81ab      	strh	r3, [r5, #12]
  40220a:	d44c      	bmi.n	4022a6 <__sflush_r+0x106>
  40220c:	6b29      	ldr	r1, [r5, #48]	; 0x30
  40220e:	f8c8 4000 	str.w	r4, [r8]
  402212:	b311      	cbz	r1, 40225a <__sflush_r+0xba>
  402214:	f105 0340 	add.w	r3, r5, #64	; 0x40
  402218:	4299      	cmp	r1, r3
  40221a:	d002      	beq.n	402222 <__sflush_r+0x82>
  40221c:	4640      	mov	r0, r8
  40221e:	f000 f96b 	bl	4024f8 <_free_r>
  402222:	2000      	movs	r0, #0
  402224:	6328      	str	r0, [r5, #48]	; 0x30
  402226:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40222a:	692e      	ldr	r6, [r5, #16]
  40222c:	b1ae      	cbz	r6, 40225a <__sflush_r+0xba>
  40222e:	682c      	ldr	r4, [r5, #0]
  402230:	0791      	lsls	r1, r2, #30
  402232:	602e      	str	r6, [r5, #0]
  402234:	eba4 0406 	sub.w	r4, r4, r6
  402238:	d11a      	bne.n	402270 <__sflush_r+0xd0>
  40223a:	696b      	ldr	r3, [r5, #20]
  40223c:	60ab      	str	r3, [r5, #8]
  40223e:	e00a      	b.n	402256 <__sflush_r+0xb6>
  402240:	4632      	mov	r2, r6
  402242:	4623      	mov	r3, r4
  402244:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  402246:	4640      	mov	r0, r8
  402248:	69e9      	ldr	r1, [r5, #28]
  40224a:	47b8      	blx	r7
  40224c:	2800      	cmp	r0, #0
  40224e:	eba4 0400 	sub.w	r4, r4, r0
  402252:	4406      	add	r6, r0
  402254:	dd04      	ble.n	402260 <__sflush_r+0xc0>
  402256:	2c00      	cmp	r4, #0
  402258:	dcf2      	bgt.n	402240 <__sflush_r+0xa0>
  40225a:	2000      	movs	r0, #0
  40225c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402260:	89ab      	ldrh	r3, [r5, #12]
  402262:	f04f 30ff 	mov.w	r0, #4294967295
  402266:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40226a:	81ab      	strh	r3, [r5, #12]
  40226c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402270:	2300      	movs	r3, #0
  402272:	e7e3      	b.n	40223c <__sflush_r+0x9c>
  402274:	f8d8 3000 	ldr.w	r3, [r8]
  402278:	fab3 f283 	clz	r2, r3
  40227c:	2b00      	cmp	r3, #0
  40227e:	bf18      	it	ne
  402280:	2b1d      	cmpne	r3, #29
  402282:	ea4f 1252 	mov.w	r2, r2, lsr #5
  402286:	d001      	beq.n	40228c <__sflush_r+0xec>
  402288:	2b16      	cmp	r3, #22
  40228a:	d127      	bne.n	4022dc <__sflush_r+0x13c>
  40228c:	89ab      	ldrh	r3, [r5, #12]
  40228e:	2600      	movs	r6, #0
  402290:	6929      	ldr	r1, [r5, #16]
  402292:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  402296:	b29b      	uxth	r3, r3
  402298:	81ab      	strh	r3, [r5, #12]
  40229a:	04db      	lsls	r3, r3, #19
  40229c:	e885 0042 	stmia.w	r5, {r1, r6}
  4022a0:	d5b4      	bpl.n	40220c <__sflush_r+0x6c>
  4022a2:	2a00      	cmp	r2, #0
  4022a4:	d0b2      	beq.n	40220c <__sflush_r+0x6c>
  4022a6:	6528      	str	r0, [r5, #80]	; 0x50
  4022a8:	e7b0      	b.n	40220c <__sflush_r+0x6c>
  4022aa:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  4022ac:	2a00      	cmp	r2, #0
  4022ae:	dc85      	bgt.n	4021bc <__sflush_r+0x1c>
  4022b0:	e7d3      	b.n	40225a <__sflush_r+0xba>
  4022b2:	2301      	movs	r3, #1
  4022b4:	4640      	mov	r0, r8
  4022b6:	69e9      	ldr	r1, [r5, #28]
  4022b8:	47b0      	blx	r6
  4022ba:	1c43      	adds	r3, r0, #1
  4022bc:	4602      	mov	r2, r0
  4022be:	d002      	beq.n	4022c6 <__sflush_r+0x126>
  4022c0:	89ab      	ldrh	r3, [r5, #12]
  4022c2:	6aae      	ldr	r6, [r5, #40]	; 0x28
  4022c4:	e789      	b.n	4021da <__sflush_r+0x3a>
  4022c6:	f8d8 3000 	ldr.w	r3, [r8]
  4022ca:	2b00      	cmp	r3, #0
  4022cc:	d0f8      	beq.n	4022c0 <__sflush_r+0x120>
  4022ce:	2b16      	cmp	r3, #22
  4022d0:	d001      	beq.n	4022d6 <__sflush_r+0x136>
  4022d2:	2b1d      	cmp	r3, #29
  4022d4:	d1c4      	bne.n	402260 <__sflush_r+0xc0>
  4022d6:	f8c8 4000 	str.w	r4, [r8]
  4022da:	e7be      	b.n	40225a <__sflush_r+0xba>
  4022dc:	89ab      	ldrh	r3, [r5, #12]
  4022de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4022e2:	81ab      	strh	r3, [r5, #12]
  4022e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

004022e8 <_fflush_r>:
  4022e8:	b510      	push	{r4, lr}
  4022ea:	4604      	mov	r4, r0
  4022ec:	b082      	sub	sp, #8
  4022ee:	b108      	cbz	r0, 4022f4 <_fflush_r+0xc>
  4022f0:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4022f2:	b153      	cbz	r3, 40230a <_fflush_r+0x22>
  4022f4:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
  4022f8:	b908      	cbnz	r0, 4022fe <_fflush_r+0x16>
  4022fa:	b002      	add	sp, #8
  4022fc:	bd10      	pop	{r4, pc}
  4022fe:	4620      	mov	r0, r4
  402300:	b002      	add	sp, #8
  402302:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  402306:	f7ff bf4b 	b.w	4021a0 <__sflush_r>
  40230a:	9101      	str	r1, [sp, #4]
  40230c:	f000 f886 	bl	40241c <__sinit>
  402310:	9901      	ldr	r1, [sp, #4]
  402312:	e7ef      	b.n	4022f4 <_fflush_r+0xc>

00402314 <_cleanup_r>:
  402314:	4901      	ldr	r1, [pc, #4]	; (40231c <_cleanup_r+0x8>)
  402316:	f000 bb59 	b.w	4029cc <_fwalk_reent>
  40231a:	bf00      	nop
  40231c:	00403889 	.word	0x00403889

00402320 <__sinit.part.1>:
  402320:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402324:	4682      	mov	sl, r0
  402326:	2400      	movs	r4, #0
  402328:	4837      	ldr	r0, [pc, #220]	; (402408 <__sinit.part.1+0xe8>)
  40232a:	2103      	movs	r1, #3
  40232c:	f8da 5004 	ldr.w	r5, [sl, #4]
  402330:	f50a 723b 	add.w	r2, sl, #748	; 0x2ec
  402334:	2604      	movs	r6, #4
  402336:	f8ca 003c 	str.w	r0, [sl, #60]	; 0x3c
  40233a:	f8ca 12e4 	str.w	r1, [sl, #740]	; 0x2e4
  40233e:	f105 005c 	add.w	r0, r5, #92	; 0x5c
  402342:	f8ca 22e8 	str.w	r2, [sl, #744]	; 0x2e8
  402346:	4621      	mov	r1, r4
  402348:	f8ca 42e0 	str.w	r4, [sl, #736]	; 0x2e0
  40234c:	2208      	movs	r2, #8
  40234e:	81ae      	strh	r6, [r5, #12]
  402350:	602c      	str	r4, [r5, #0]
  402352:	606c      	str	r4, [r5, #4]
  402354:	60ac      	str	r4, [r5, #8]
  402356:	666c      	str	r4, [r5, #100]	; 0x64
  402358:	81ec      	strh	r4, [r5, #14]
  40235a:	612c      	str	r4, [r5, #16]
  40235c:	616c      	str	r4, [r5, #20]
  40235e:	61ac      	str	r4, [r5, #24]
  402360:	f7ff fd1c 	bl	401d9c <memset>
  402364:	f8df b0a8 	ldr.w	fp, [pc, #168]	; 402410 <__sinit.part.1+0xf0>
  402368:	f8da 6008 	ldr.w	r6, [sl, #8]
  40236c:	f04f 0301 	mov.w	r3, #1
  402370:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 402414 <__sinit.part.1+0xf4>
  402374:	f04f 0e09 	mov.w	lr, #9
  402378:	f8df 809c 	ldr.w	r8, [pc, #156]	; 402418 <__sinit.part.1+0xf8>
  40237c:	4621      	mov	r1, r4
  40237e:	4f23      	ldr	r7, [pc, #140]	; (40240c <__sinit.part.1+0xec>)
  402380:	2208      	movs	r2, #8
  402382:	61ed      	str	r5, [r5, #28]
  402384:	f106 005c 	add.w	r0, r6, #92	; 0x5c
  402388:	f8c5 b020 	str.w	fp, [r5, #32]
  40238c:	f8c5 9024 	str.w	r9, [r5, #36]	; 0x24
  402390:	f8c5 8028 	str.w	r8, [r5, #40]	; 0x28
  402394:	62ef      	str	r7, [r5, #44]	; 0x2c
  402396:	81f3      	strh	r3, [r6, #14]
  402398:	f8a6 e00c 	strh.w	lr, [r6, #12]
  40239c:	6034      	str	r4, [r6, #0]
  40239e:	6074      	str	r4, [r6, #4]
  4023a0:	60b4      	str	r4, [r6, #8]
  4023a2:	6674      	str	r4, [r6, #100]	; 0x64
  4023a4:	6134      	str	r4, [r6, #16]
  4023a6:	6174      	str	r4, [r6, #20]
  4023a8:	61b4      	str	r4, [r6, #24]
  4023aa:	f7ff fcf7 	bl	401d9c <memset>
  4023ae:	f8da 500c 	ldr.w	r5, [sl, #12]
  4023b2:	f04f 0c12 	mov.w	ip, #18
  4023b6:	f04f 0e02 	mov.w	lr, #2
  4023ba:	61f6      	str	r6, [r6, #28]
  4023bc:	4621      	mov	r1, r4
  4023be:	f8c6 b020 	str.w	fp, [r6, #32]
  4023c2:	f105 005c 	add.w	r0, r5, #92	; 0x5c
  4023c6:	f8c6 9024 	str.w	r9, [r6, #36]	; 0x24
  4023ca:	2208      	movs	r2, #8
  4023cc:	f8c6 8028 	str.w	r8, [r6, #40]	; 0x28
  4023d0:	62f7      	str	r7, [r6, #44]	; 0x2c
  4023d2:	602c      	str	r4, [r5, #0]
  4023d4:	606c      	str	r4, [r5, #4]
  4023d6:	60ac      	str	r4, [r5, #8]
  4023d8:	666c      	str	r4, [r5, #100]	; 0x64
  4023da:	612c      	str	r4, [r5, #16]
  4023dc:	616c      	str	r4, [r5, #20]
  4023de:	61ac      	str	r4, [r5, #24]
  4023e0:	f8a5 c00c 	strh.w	ip, [r5, #12]
  4023e4:	f8a5 e00e 	strh.w	lr, [r5, #14]
  4023e8:	f7ff fcd8 	bl	401d9c <memset>
  4023ec:	2301      	movs	r3, #1
  4023ee:	61ed      	str	r5, [r5, #28]
  4023f0:	f8c5 b020 	str.w	fp, [r5, #32]
  4023f4:	f8c5 9024 	str.w	r9, [r5, #36]	; 0x24
  4023f8:	f8c5 8028 	str.w	r8, [r5, #40]	; 0x28
  4023fc:	62ef      	str	r7, [r5, #44]	; 0x2c
  4023fe:	f8ca 3038 	str.w	r3, [sl, #56]	; 0x38
  402402:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402406:	bf00      	nop
  402408:	00402315 	.word	0x00402315
  40240c:	0040378d 	.word	0x0040378d
  402410:	0040370d 	.word	0x0040370d
  402414:	00403731 	.word	0x00403731
  402418:	00403769 	.word	0x00403769

0040241c <__sinit>:
  40241c:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40241e:	b103      	cbz	r3, 402422 <__sinit+0x6>
  402420:	4770      	bx	lr
  402422:	f7ff bf7d 	b.w	402320 <__sinit.part.1>
  402426:	bf00      	nop

00402428 <__sfp_lock_acquire>:
  402428:	4770      	bx	lr
  40242a:	bf00      	nop

0040242c <__sfp_lock_release>:
  40242c:	4770      	bx	lr
  40242e:	bf00      	nop

00402430 <__libc_fini_array>:
  402430:	b538      	push	{r3, r4, r5, lr}
  402432:	4b08      	ldr	r3, [pc, #32]	; (402454 <__libc_fini_array+0x24>)
  402434:	4d08      	ldr	r5, [pc, #32]	; (402458 <__libc_fini_array+0x28>)
  402436:	1aed      	subs	r5, r5, r3
  402438:	10ac      	asrs	r4, r5, #2
  40243a:	bf18      	it	ne
  40243c:	18ed      	addne	r5, r5, r3
  40243e:	d005      	beq.n	40244c <__libc_fini_array+0x1c>
  402440:	3c01      	subs	r4, #1
  402442:	f855 3d04 	ldr.w	r3, [r5, #-4]!
  402446:	4798      	blx	r3
  402448:	2c00      	cmp	r4, #0
  40244a:	d1f9      	bne.n	402440 <__libc_fini_array+0x10>
  40244c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  402450:	f001 bb58 	b.w	403b04 <_fini>
  402454:	00403b10 	.word	0x00403b10
  402458:	00403b14 	.word	0x00403b14

0040245c <_malloc_trim_r>:
  40245c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40245e:	4f22      	ldr	r7, [pc, #136]	; (4024e8 <_malloc_trim_r+0x8c>)
  402460:	460c      	mov	r4, r1
  402462:	4606      	mov	r6, r0
  402464:	f000 ff44 	bl	4032f0 <__malloc_lock>
  402468:	68ba      	ldr	r2, [r7, #8]
  40246a:	4b20      	ldr	r3, [pc, #128]	; (4024ec <_malloc_trim_r+0x90>)
  40246c:	6855      	ldr	r5, [r2, #4]
  40246e:	f025 0503 	bic.w	r5, r5, #3
  402472:	1b2c      	subs	r4, r5, r4
  402474:	f604 74ef 	addw	r4, r4, #4079	; 0xfef
  402478:	4023      	ands	r3, r4
  40247a:	f5a3 5480 	sub.w	r4, r3, #4096	; 0x1000
  40247e:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  402482:	db07      	blt.n	402494 <_malloc_trim_r+0x38>
  402484:	4630      	mov	r0, r6
  402486:	2100      	movs	r1, #0
  402488:	f001 f92e 	bl	4036e8 <_sbrk_r>
  40248c:	68bb      	ldr	r3, [r7, #8]
  40248e:	442b      	add	r3, r5
  402490:	4298      	cmp	r0, r3
  402492:	d004      	beq.n	40249e <_malloc_trim_r+0x42>
  402494:	4630      	mov	r0, r6
  402496:	f000 ff2d 	bl	4032f4 <__malloc_unlock>
  40249a:	2000      	movs	r0, #0
  40249c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40249e:	4630      	mov	r0, r6
  4024a0:	4261      	negs	r1, r4
  4024a2:	f001 f921 	bl	4036e8 <_sbrk_r>
  4024a6:	3001      	adds	r0, #1
  4024a8:	d00d      	beq.n	4024c6 <_malloc_trim_r+0x6a>
  4024aa:	4a11      	ldr	r2, [pc, #68]	; (4024f0 <_malloc_trim_r+0x94>)
  4024ac:	1b2d      	subs	r5, r5, r4
  4024ae:	68b9      	ldr	r1, [r7, #8]
  4024b0:	4630      	mov	r0, r6
  4024b2:	6813      	ldr	r3, [r2, #0]
  4024b4:	f045 0501 	orr.w	r5, r5, #1
  4024b8:	1b1b      	subs	r3, r3, r4
  4024ba:	604d      	str	r5, [r1, #4]
  4024bc:	6013      	str	r3, [r2, #0]
  4024be:	f000 ff19 	bl	4032f4 <__malloc_unlock>
  4024c2:	2001      	movs	r0, #1
  4024c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4024c6:	4630      	mov	r0, r6
  4024c8:	2100      	movs	r1, #0
  4024ca:	f001 f90d 	bl	4036e8 <_sbrk_r>
  4024ce:	68ba      	ldr	r2, [r7, #8]
  4024d0:	1a83      	subs	r3, r0, r2
  4024d2:	2b0f      	cmp	r3, #15
  4024d4:	ddde      	ble.n	402494 <_malloc_trim_r+0x38>
  4024d6:	4c07      	ldr	r4, [pc, #28]	; (4024f4 <_malloc_trim_r+0x98>)
  4024d8:	f043 0301 	orr.w	r3, r3, #1
  4024dc:	4904      	ldr	r1, [pc, #16]	; (4024f0 <_malloc_trim_r+0x94>)
  4024de:	6824      	ldr	r4, [r4, #0]
  4024e0:	6053      	str	r3, [r2, #4]
  4024e2:	1b00      	subs	r0, r0, r4
  4024e4:	6008      	str	r0, [r1, #0]
  4024e6:	e7d5      	b.n	402494 <_malloc_trim_r+0x38>
  4024e8:	204004ac 	.word	0x204004ac
  4024ec:	fffff000 	.word	0xfffff000
  4024f0:	20400968 	.word	0x20400968
  4024f4:	204008b8 	.word	0x204008b8

004024f8 <_free_r>:
  4024f8:	2900      	cmp	r1, #0
  4024fa:	d04d      	beq.n	402598 <_free_r+0xa0>
  4024fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  402500:	460c      	mov	r4, r1
  402502:	4680      	mov	r8, r0
  402504:	f000 fef4 	bl	4032f0 <__malloc_lock>
  402508:	4963      	ldr	r1, [pc, #396]	; (402698 <_free_r+0x1a0>)
  40250a:	f854 7c04 	ldr.w	r7, [r4, #-4]
  40250e:	f1a4 0508 	sub.w	r5, r4, #8
  402512:	688e      	ldr	r6, [r1, #8]
  402514:	f027 0301 	bic.w	r3, r7, #1
  402518:	18ea      	adds	r2, r5, r3
  40251a:	6850      	ldr	r0, [r2, #4]
  40251c:	4296      	cmp	r6, r2
  40251e:	f020 0003 	bic.w	r0, r0, #3
  402522:	d059      	beq.n	4025d8 <_free_r+0xe0>
  402524:	07fe      	lsls	r6, r7, #31
  402526:	6050      	str	r0, [r2, #4]
  402528:	d40b      	bmi.n	402542 <_free_r+0x4a>
  40252a:	f854 4c08 	ldr.w	r4, [r4, #-8]
  40252e:	f101 0708 	add.w	r7, r1, #8
  402532:	1b2d      	subs	r5, r5, r4
  402534:	4423      	add	r3, r4
  402536:	68ac      	ldr	r4, [r5, #8]
  402538:	42bc      	cmp	r4, r7
  40253a:	d066      	beq.n	40260a <_free_r+0x112>
  40253c:	68ef      	ldr	r7, [r5, #12]
  40253e:	60e7      	str	r7, [r4, #12]
  402540:	60bc      	str	r4, [r7, #8]
  402542:	1814      	adds	r4, r2, r0
  402544:	6864      	ldr	r4, [r4, #4]
  402546:	07e4      	lsls	r4, r4, #31
  402548:	d40c      	bmi.n	402564 <_free_r+0x6c>
  40254a:	4c54      	ldr	r4, [pc, #336]	; (40269c <_free_r+0x1a4>)
  40254c:	4403      	add	r3, r0
  40254e:	6890      	ldr	r0, [r2, #8]
  402550:	42a0      	cmp	r0, r4
  402552:	d07c      	beq.n	40264e <_free_r+0x156>
  402554:	68d4      	ldr	r4, [r2, #12]
  402556:	f043 0201 	orr.w	r2, r3, #1
  40255a:	60c4      	str	r4, [r0, #12]
  40255c:	60a0      	str	r0, [r4, #8]
  40255e:	606a      	str	r2, [r5, #4]
  402560:	50eb      	str	r3, [r5, r3]
  402562:	e003      	b.n	40256c <_free_r+0x74>
  402564:	f043 0201 	orr.w	r2, r3, #1
  402568:	606a      	str	r2, [r5, #4]
  40256a:	50eb      	str	r3, [r5, r3]
  40256c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  402570:	d213      	bcs.n	40259a <_free_r+0xa2>
  402572:	08db      	lsrs	r3, r3, #3
  402574:	2001      	movs	r0, #1
  402576:	684a      	ldr	r2, [r1, #4]
  402578:	109c      	asrs	r4, r3, #2
  40257a:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
  40257e:	40a0      	lsls	r0, r4
  402580:	689c      	ldr	r4, [r3, #8]
  402582:	4302      	orrs	r2, r0
  402584:	60eb      	str	r3, [r5, #12]
  402586:	60ac      	str	r4, [r5, #8]
  402588:	604a      	str	r2, [r1, #4]
  40258a:	609d      	str	r5, [r3, #8]
  40258c:	60e5      	str	r5, [r4, #12]
  40258e:	4640      	mov	r0, r8
  402590:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  402594:	f000 beae 	b.w	4032f4 <__malloc_unlock>
  402598:	4770      	bx	lr
  40259a:	0a5a      	lsrs	r2, r3, #9
  40259c:	2a04      	cmp	r2, #4
  40259e:	d847      	bhi.n	402630 <_free_r+0x138>
  4025a0:	099a      	lsrs	r2, r3, #6
  4025a2:	f102 0438 	add.w	r4, r2, #56	; 0x38
  4025a6:	0060      	lsls	r0, r4, #1
  4025a8:	eb01 0080 	add.w	r0, r1, r0, lsl #2
  4025ac:	493a      	ldr	r1, [pc, #232]	; (402698 <_free_r+0x1a0>)
  4025ae:	6882      	ldr	r2, [r0, #8]
  4025b0:	4282      	cmp	r2, r0
  4025b2:	d043      	beq.n	40263c <_free_r+0x144>
  4025b4:	6851      	ldr	r1, [r2, #4]
  4025b6:	f021 0103 	bic.w	r1, r1, #3
  4025ba:	4299      	cmp	r1, r3
  4025bc:	d902      	bls.n	4025c4 <_free_r+0xcc>
  4025be:	6892      	ldr	r2, [r2, #8]
  4025c0:	4290      	cmp	r0, r2
  4025c2:	d1f7      	bne.n	4025b4 <_free_r+0xbc>
  4025c4:	68d3      	ldr	r3, [r2, #12]
  4025c6:	60eb      	str	r3, [r5, #12]
  4025c8:	4640      	mov	r0, r8
  4025ca:	60aa      	str	r2, [r5, #8]
  4025cc:	609d      	str	r5, [r3, #8]
  4025ce:	60d5      	str	r5, [r2, #12]
  4025d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  4025d4:	f000 be8e 	b.w	4032f4 <__malloc_unlock>
  4025d8:	07ff      	lsls	r7, r7, #31
  4025da:	4403      	add	r3, r0
  4025dc:	d407      	bmi.n	4025ee <_free_r+0xf6>
  4025de:	f854 2c08 	ldr.w	r2, [r4, #-8]
  4025e2:	1aad      	subs	r5, r5, r2
  4025e4:	4413      	add	r3, r2
  4025e6:	68a8      	ldr	r0, [r5, #8]
  4025e8:	68ea      	ldr	r2, [r5, #12]
  4025ea:	60c2      	str	r2, [r0, #12]
  4025ec:	6090      	str	r0, [r2, #8]
  4025ee:	4a2c      	ldr	r2, [pc, #176]	; (4026a0 <_free_r+0x1a8>)
  4025f0:	f043 0001 	orr.w	r0, r3, #1
  4025f4:	6812      	ldr	r2, [r2, #0]
  4025f6:	6068      	str	r0, [r5, #4]
  4025f8:	4293      	cmp	r3, r2
  4025fa:	608d      	str	r5, [r1, #8]
  4025fc:	d3c7      	bcc.n	40258e <_free_r+0x96>
  4025fe:	4b29      	ldr	r3, [pc, #164]	; (4026a4 <_free_r+0x1ac>)
  402600:	4640      	mov	r0, r8
  402602:	6819      	ldr	r1, [r3, #0]
  402604:	f7ff ff2a 	bl	40245c <_malloc_trim_r>
  402608:	e7c1      	b.n	40258e <_free_r+0x96>
  40260a:	1811      	adds	r1, r2, r0
  40260c:	6849      	ldr	r1, [r1, #4]
  40260e:	07c9      	lsls	r1, r1, #31
  402610:	d409      	bmi.n	402626 <_free_r+0x12e>
  402612:	4403      	add	r3, r0
  402614:	68d1      	ldr	r1, [r2, #12]
  402616:	6892      	ldr	r2, [r2, #8]
  402618:	f043 0001 	orr.w	r0, r3, #1
  40261c:	60d1      	str	r1, [r2, #12]
  40261e:	608a      	str	r2, [r1, #8]
  402620:	6068      	str	r0, [r5, #4]
  402622:	50eb      	str	r3, [r5, r3]
  402624:	e7b3      	b.n	40258e <_free_r+0x96>
  402626:	f043 0201 	orr.w	r2, r3, #1
  40262a:	606a      	str	r2, [r5, #4]
  40262c:	50eb      	str	r3, [r5, r3]
  40262e:	e7ae      	b.n	40258e <_free_r+0x96>
  402630:	2a14      	cmp	r2, #20
  402632:	d815      	bhi.n	402660 <_free_r+0x168>
  402634:	f102 045b 	add.w	r4, r2, #91	; 0x5b
  402638:	0060      	lsls	r0, r4, #1
  40263a:	e7b5      	b.n	4025a8 <_free_r+0xb0>
  40263c:	10a4      	asrs	r4, r4, #2
  40263e:	2701      	movs	r7, #1
  402640:	6848      	ldr	r0, [r1, #4]
  402642:	4613      	mov	r3, r2
  402644:	fa07 f404 	lsl.w	r4, r7, r4
  402648:	4320      	orrs	r0, r4
  40264a:	6048      	str	r0, [r1, #4]
  40264c:	e7bb      	b.n	4025c6 <_free_r+0xce>
  40264e:	f043 0201 	orr.w	r2, r3, #1
  402652:	614d      	str	r5, [r1, #20]
  402654:	610d      	str	r5, [r1, #16]
  402656:	60e8      	str	r0, [r5, #12]
  402658:	60a8      	str	r0, [r5, #8]
  40265a:	606a      	str	r2, [r5, #4]
  40265c:	50eb      	str	r3, [r5, r3]
  40265e:	e796      	b.n	40258e <_free_r+0x96>
  402660:	2a54      	cmp	r2, #84	; 0x54
  402662:	d804      	bhi.n	40266e <_free_r+0x176>
  402664:	0b1a      	lsrs	r2, r3, #12
  402666:	f102 046e 	add.w	r4, r2, #110	; 0x6e
  40266a:	0060      	lsls	r0, r4, #1
  40266c:	e79c      	b.n	4025a8 <_free_r+0xb0>
  40266e:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  402672:	d804      	bhi.n	40267e <_free_r+0x186>
  402674:	0bda      	lsrs	r2, r3, #15
  402676:	f102 0477 	add.w	r4, r2, #119	; 0x77
  40267a:	0060      	lsls	r0, r4, #1
  40267c:	e794      	b.n	4025a8 <_free_r+0xb0>
  40267e:	f240 5054 	movw	r0, #1364	; 0x554
  402682:	4282      	cmp	r2, r0
  402684:	d804      	bhi.n	402690 <_free_r+0x198>
  402686:	0c9a      	lsrs	r2, r3, #18
  402688:	f102 047c 	add.w	r4, r2, #124	; 0x7c
  40268c:	0060      	lsls	r0, r4, #1
  40268e:	e78b      	b.n	4025a8 <_free_r+0xb0>
  402690:	20fc      	movs	r0, #252	; 0xfc
  402692:	247e      	movs	r4, #126	; 0x7e
  402694:	e788      	b.n	4025a8 <_free_r+0xb0>
  402696:	bf00      	nop
  402698:	204004ac 	.word	0x204004ac
  40269c:	204004b4 	.word	0x204004b4
  4026a0:	204008b4 	.word	0x204008b4
  4026a4:	20400964 	.word	0x20400964

004026a8 <__sfvwrite_r>:
  4026a8:	6893      	ldr	r3, [r2, #8]
  4026aa:	2b00      	cmp	r3, #0
  4026ac:	d07a      	beq.n	4027a4 <__sfvwrite_r+0xfc>
  4026ae:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4026b2:	f8b1 e00c 	ldrh.w	lr, [r1, #12]
  4026b6:	b083      	sub	sp, #12
  4026b8:	460c      	mov	r4, r1
  4026ba:	4681      	mov	r9, r0
  4026bc:	f01e 0f08 	tst.w	lr, #8
  4026c0:	4616      	mov	r6, r2
  4026c2:	d026      	beq.n	402712 <__sfvwrite_r+0x6a>
  4026c4:	690b      	ldr	r3, [r1, #16]
  4026c6:	b323      	cbz	r3, 402712 <__sfvwrite_r+0x6a>
  4026c8:	f00e 0802 	and.w	r8, lr, #2
  4026cc:	6835      	ldr	r5, [r6, #0]
  4026ce:	fa1f f088 	uxth.w	r0, r8
  4026d2:	b370      	cbz	r0, 402732 <__sfvwrite_r+0x8a>
  4026d4:	f04f 0a00 	mov.w	sl, #0
  4026d8:	f8df b2ec 	ldr.w	fp, [pc, #748]	; 4029c8 <__sfvwrite_r+0x320>
  4026dc:	46d0      	mov	r8, sl
  4026de:	45d8      	cmp	r8, fp
  4026e0:	4643      	mov	r3, r8
  4026e2:	4652      	mov	r2, sl
  4026e4:	4648      	mov	r0, r9
  4026e6:	bf28      	it	cs
  4026e8:	465b      	movcs	r3, fp
  4026ea:	f1b8 0f00 	cmp.w	r8, #0
  4026ee:	d053      	beq.n	402798 <__sfvwrite_r+0xf0>
  4026f0:	69e1      	ldr	r1, [r4, #28]
  4026f2:	6a67      	ldr	r7, [r4, #36]	; 0x24
  4026f4:	47b8      	blx	r7
  4026f6:	2800      	cmp	r0, #0
  4026f8:	dd73      	ble.n	4027e2 <__sfvwrite_r+0x13a>
  4026fa:	68b3      	ldr	r3, [r6, #8]
  4026fc:	4482      	add	sl, r0
  4026fe:	ebc0 0808 	rsb	r8, r0, r8
  402702:	1a18      	subs	r0, r3, r0
  402704:	60b0      	str	r0, [r6, #8]
  402706:	2800      	cmp	r0, #0
  402708:	d1e9      	bne.n	4026de <__sfvwrite_r+0x36>
  40270a:	2000      	movs	r0, #0
  40270c:	b003      	add	sp, #12
  40270e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402712:	4648      	mov	r0, r9
  402714:	4621      	mov	r1, r4
  402716:	f7ff fcd1 	bl	4020bc <__swsetup_r>
  40271a:	2800      	cmp	r0, #0
  40271c:	f040 814c 	bne.w	4029b8 <__sfvwrite_r+0x310>
  402720:	f8b4 e00c 	ldrh.w	lr, [r4, #12]
  402724:	6835      	ldr	r5, [r6, #0]
  402726:	f00e 0802 	and.w	r8, lr, #2
  40272a:	fa1f f088 	uxth.w	r0, r8
  40272e:	2800      	cmp	r0, #0
  402730:	d1d0      	bne.n	4026d4 <__sfvwrite_r+0x2c>
  402732:	f01e 0b01 	ands.w	fp, lr, #1
  402736:	d15d      	bne.n	4027f4 <__sfvwrite_r+0x14c>
  402738:	46d8      	mov	r8, fp
  40273a:	f1b8 0f00 	cmp.w	r8, #0
  40273e:	d025      	beq.n	40278c <__sfvwrite_r+0xe4>
  402740:	f41e 7f00 	tst.w	lr, #512	; 0x200
  402744:	68a7      	ldr	r7, [r4, #8]
  402746:	d02f      	beq.n	4027a8 <__sfvwrite_r+0x100>
  402748:	45b8      	cmp	r8, r7
  40274a:	46ba      	mov	sl, r7
  40274c:	f0c0 80a8 	bcc.w	4028a0 <__sfvwrite_r+0x1f8>
  402750:	f41e 6f90 	tst.w	lr, #1152	; 0x480
  402754:	f040 80b5 	bne.w	4028c2 <__sfvwrite_r+0x21a>
  402758:	6820      	ldr	r0, [r4, #0]
  40275a:	4659      	mov	r1, fp
  40275c:	4652      	mov	r2, sl
  40275e:	f000 fd65 	bl	40322c <memmove>
  402762:	68a2      	ldr	r2, [r4, #8]
  402764:	6821      	ldr	r1, [r4, #0]
  402766:	4640      	mov	r0, r8
  402768:	1bd7      	subs	r7, r2, r7
  40276a:	eb01 030a 	add.w	r3, r1, sl
  40276e:	60a7      	str	r7, [r4, #8]
  402770:	6023      	str	r3, [r4, #0]
  402772:	68b3      	ldr	r3, [r6, #8]
  402774:	4483      	add	fp, r0
  402776:	ebc0 0808 	rsb	r8, r0, r8
  40277a:	1a18      	subs	r0, r3, r0
  40277c:	60b0      	str	r0, [r6, #8]
  40277e:	2800      	cmp	r0, #0
  402780:	d0c3      	beq.n	40270a <__sfvwrite_r+0x62>
  402782:	f8b4 e00c 	ldrh.w	lr, [r4, #12]
  402786:	f1b8 0f00 	cmp.w	r8, #0
  40278a:	d1d9      	bne.n	402740 <__sfvwrite_r+0x98>
  40278c:	f8d5 b000 	ldr.w	fp, [r5]
  402790:	3508      	adds	r5, #8
  402792:	f855 8c04 	ldr.w	r8, [r5, #-4]
  402796:	e7d0      	b.n	40273a <__sfvwrite_r+0x92>
  402798:	f8d5 a000 	ldr.w	sl, [r5]
  40279c:	3508      	adds	r5, #8
  40279e:	f855 8c04 	ldr.w	r8, [r5, #-4]
  4027a2:	e79c      	b.n	4026de <__sfvwrite_r+0x36>
  4027a4:	2000      	movs	r0, #0
  4027a6:	4770      	bx	lr
  4027a8:	6820      	ldr	r0, [r4, #0]
  4027aa:	6923      	ldr	r3, [r4, #16]
  4027ac:	4298      	cmp	r0, r3
  4027ae:	d803      	bhi.n	4027b8 <__sfvwrite_r+0x110>
  4027b0:	6963      	ldr	r3, [r4, #20]
  4027b2:	4598      	cmp	r8, r3
  4027b4:	f080 80bf 	bcs.w	402936 <__sfvwrite_r+0x28e>
  4027b8:	4547      	cmp	r7, r8
  4027ba:	4659      	mov	r1, fp
  4027bc:	bf28      	it	cs
  4027be:	4647      	movcs	r7, r8
  4027c0:	463a      	mov	r2, r7
  4027c2:	f000 fd33 	bl	40322c <memmove>
  4027c6:	68a3      	ldr	r3, [r4, #8]
  4027c8:	6822      	ldr	r2, [r4, #0]
  4027ca:	1bdb      	subs	r3, r3, r7
  4027cc:	443a      	add	r2, r7
  4027ce:	60a3      	str	r3, [r4, #8]
  4027d0:	6022      	str	r2, [r4, #0]
  4027d2:	2b00      	cmp	r3, #0
  4027d4:	d149      	bne.n	40286a <__sfvwrite_r+0x1c2>
  4027d6:	4648      	mov	r0, r9
  4027d8:	4621      	mov	r1, r4
  4027da:	f7ff fd85 	bl	4022e8 <_fflush_r>
  4027de:	2800      	cmp	r0, #0
  4027e0:	d043      	beq.n	40286a <__sfvwrite_r+0x1c2>
  4027e2:	89a3      	ldrh	r3, [r4, #12]
  4027e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4027e8:	f04f 30ff 	mov.w	r0, #4294967295
  4027ec:	81a3      	strh	r3, [r4, #12]
  4027ee:	b003      	add	sp, #12
  4027f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4027f4:	4680      	mov	r8, r0
  4027f6:	4683      	mov	fp, r0
  4027f8:	4682      	mov	sl, r0
  4027fa:	9000      	str	r0, [sp, #0]
  4027fc:	f1ba 0f00 	cmp.w	sl, #0
  402800:	d02b      	beq.n	40285a <__sfvwrite_r+0x1b2>
  402802:	9b00      	ldr	r3, [sp, #0]
  402804:	2b00      	cmp	r3, #0
  402806:	d04f      	beq.n	4028a8 <__sfvwrite_r+0x200>
  402808:	45d0      	cmp	r8, sl
  40280a:	6962      	ldr	r2, [r4, #20]
  40280c:	68a1      	ldr	r1, [r4, #8]
  40280e:	4643      	mov	r3, r8
  402810:	bf28      	it	cs
  402812:	4653      	movcs	r3, sl
  402814:	6820      	ldr	r0, [r4, #0]
  402816:	eb02 0c01 	add.w	ip, r2, r1
  40281a:	461f      	mov	r7, r3
  40281c:	4563      	cmp	r3, ip
  40281e:	dd03      	ble.n	402828 <__sfvwrite_r+0x180>
  402820:	6921      	ldr	r1, [r4, #16]
  402822:	4288      	cmp	r0, r1
  402824:	f200 8099 	bhi.w	40295a <__sfvwrite_r+0x2b2>
  402828:	4293      	cmp	r3, r2
  40282a:	db20      	blt.n	40286e <__sfvwrite_r+0x1c6>
  40282c:	4613      	mov	r3, r2
  40282e:	6a67      	ldr	r7, [r4, #36]	; 0x24
  402830:	4648      	mov	r0, r9
  402832:	69e1      	ldr	r1, [r4, #28]
  402834:	465a      	mov	r2, fp
  402836:	47b8      	blx	r7
  402838:	1e07      	subs	r7, r0, #0
  40283a:	ddd2      	ble.n	4027e2 <__sfvwrite_r+0x13a>
  40283c:	ebb8 0807 	subs.w	r8, r8, r7
  402840:	d025      	beq.n	40288e <__sfvwrite_r+0x1e6>
  402842:	68b3      	ldr	r3, [r6, #8]
  402844:	44bb      	add	fp, r7
  402846:	ebc7 0a0a 	rsb	sl, r7, sl
  40284a:	1bdf      	subs	r7, r3, r7
  40284c:	60b7      	str	r7, [r6, #8]
  40284e:	2f00      	cmp	r7, #0
  402850:	f43f af5b 	beq.w	40270a <__sfvwrite_r+0x62>
  402854:	f1ba 0f00 	cmp.w	sl, #0
  402858:	d1d3      	bne.n	402802 <__sfvwrite_r+0x15a>
  40285a:	2300      	movs	r3, #0
  40285c:	f8d5 b000 	ldr.w	fp, [r5]
  402860:	f8d5 a004 	ldr.w	sl, [r5, #4]
  402864:	3508      	adds	r5, #8
  402866:	9300      	str	r3, [sp, #0]
  402868:	e7c8      	b.n	4027fc <__sfvwrite_r+0x154>
  40286a:	4638      	mov	r0, r7
  40286c:	e781      	b.n	402772 <__sfvwrite_r+0xca>
  40286e:	461a      	mov	r2, r3
  402870:	4659      	mov	r1, fp
  402872:	9301      	str	r3, [sp, #4]
  402874:	f000 fcda 	bl	40322c <memmove>
  402878:	68a2      	ldr	r2, [r4, #8]
  40287a:	ebb8 0807 	subs.w	r8, r8, r7
  40287e:	6821      	ldr	r1, [r4, #0]
  402880:	9b01      	ldr	r3, [sp, #4]
  402882:	eba2 0203 	sub.w	r2, r2, r3
  402886:	440b      	add	r3, r1
  402888:	60a2      	str	r2, [r4, #8]
  40288a:	6023      	str	r3, [r4, #0]
  40288c:	d1d9      	bne.n	402842 <__sfvwrite_r+0x19a>
  40288e:	4648      	mov	r0, r9
  402890:	4621      	mov	r1, r4
  402892:	f7ff fd29 	bl	4022e8 <_fflush_r>
  402896:	2800      	cmp	r0, #0
  402898:	d1a3      	bne.n	4027e2 <__sfvwrite_r+0x13a>
  40289a:	f8cd 8000 	str.w	r8, [sp]
  40289e:	e7d0      	b.n	402842 <__sfvwrite_r+0x19a>
  4028a0:	4647      	mov	r7, r8
  4028a2:	6820      	ldr	r0, [r4, #0]
  4028a4:	46c2      	mov	sl, r8
  4028a6:	e758      	b.n	40275a <__sfvwrite_r+0xb2>
  4028a8:	4658      	mov	r0, fp
  4028aa:	210a      	movs	r1, #10
  4028ac:	4652      	mov	r2, sl
  4028ae:	f000 fbdb 	bl	403068 <memchr>
  4028b2:	2800      	cmp	r0, #0
  4028b4:	d07b      	beq.n	4029ae <__sfvwrite_r+0x306>
  4028b6:	3001      	adds	r0, #1
  4028b8:	2301      	movs	r3, #1
  4028ba:	ebcb 0800 	rsb	r8, fp, r0
  4028be:	9300      	str	r3, [sp, #0]
  4028c0:	e7a2      	b.n	402808 <__sfvwrite_r+0x160>
  4028c2:	6963      	ldr	r3, [r4, #20]
  4028c4:	6921      	ldr	r1, [r4, #16]
  4028c6:	6827      	ldr	r7, [r4, #0]
  4028c8:	eb03 0c43 	add.w	ip, r3, r3, lsl #1
  4028cc:	1a7f      	subs	r7, r7, r1
  4028ce:	eb0c 7cdc 	add.w	ip, ip, ip, lsr #31
  4028d2:	1c7b      	adds	r3, r7, #1
  4028d4:	ea4f 0c6c 	mov.w	ip, ip, asr #1
  4028d8:	4443      	add	r3, r8
  4028da:	4662      	mov	r2, ip
  4028dc:	459c      	cmp	ip, r3
  4028de:	d201      	bcs.n	4028e4 <__sfvwrite_r+0x23c>
  4028e0:	469c      	mov	ip, r3
  4028e2:	461a      	mov	r2, r3
  4028e4:	f41e 6f80 	tst.w	lr, #1024	; 0x400
  4028e8:	f8cd c000 	str.w	ip, [sp]
  4028ec:	d04b      	beq.n	402986 <__sfvwrite_r+0x2de>
  4028ee:	4611      	mov	r1, r2
  4028f0:	4648      	mov	r0, r9
  4028f2:	f000 f90d 	bl	402b10 <_malloc_r>
  4028f6:	f8dd c000 	ldr.w	ip, [sp]
  4028fa:	4682      	mov	sl, r0
  4028fc:	2800      	cmp	r0, #0
  4028fe:	d05e      	beq.n	4029be <__sfvwrite_r+0x316>
  402900:	463a      	mov	r2, r7
  402902:	6921      	ldr	r1, [r4, #16]
  402904:	f8cd c000 	str.w	ip, [sp]
  402908:	f000 fbf6 	bl	4030f8 <memcpy>
  40290c:	89a2      	ldrh	r2, [r4, #12]
  40290e:	f8dd c000 	ldr.w	ip, [sp]
  402912:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
  402916:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  40291a:	81a2      	strh	r2, [r4, #12]
  40291c:	eb0a 0007 	add.w	r0, sl, r7
  402920:	ebc7 020c 	rsb	r2, r7, ip
  402924:	f8c4 a010 	str.w	sl, [r4, #16]
  402928:	4647      	mov	r7, r8
  40292a:	6020      	str	r0, [r4, #0]
  40292c:	46c2      	mov	sl, r8
  40292e:	60a2      	str	r2, [r4, #8]
  402930:	f8c4 c014 	str.w	ip, [r4, #20]
  402934:	e711      	b.n	40275a <__sfvwrite_r+0xb2>
  402936:	f06f 4e00 	mvn.w	lr, #2147483648	; 0x80000000
  40293a:	6a67      	ldr	r7, [r4, #36]	; 0x24
  40293c:	4648      	mov	r0, r9
  40293e:	69e1      	ldr	r1, [r4, #28]
  402940:	45c6      	cmp	lr, r8
  402942:	465a      	mov	r2, fp
  402944:	bf28      	it	cs
  402946:	46c6      	movcs	lr, r8
  402948:	fb9e fef3 	sdiv	lr, lr, r3
  40294c:	fb0e f303 	mul.w	r3, lr, r3
  402950:	47b8      	blx	r7
  402952:	2800      	cmp	r0, #0
  402954:	f73f af0d 	bgt.w	402772 <__sfvwrite_r+0xca>
  402958:	e743      	b.n	4027e2 <__sfvwrite_r+0x13a>
  40295a:	4662      	mov	r2, ip
  40295c:	4659      	mov	r1, fp
  40295e:	f8cd c004 	str.w	ip, [sp, #4]
  402962:	f000 fc63 	bl	40322c <memmove>
  402966:	6823      	ldr	r3, [r4, #0]
  402968:	4648      	mov	r0, r9
  40296a:	f8dd c004 	ldr.w	ip, [sp, #4]
  40296e:	4621      	mov	r1, r4
  402970:	4463      	add	r3, ip
  402972:	6023      	str	r3, [r4, #0]
  402974:	f7ff fcb8 	bl	4022e8 <_fflush_r>
  402978:	f8dd c004 	ldr.w	ip, [sp, #4]
  40297c:	2800      	cmp	r0, #0
  40297e:	f47f af30 	bne.w	4027e2 <__sfvwrite_r+0x13a>
  402982:	4667      	mov	r7, ip
  402984:	e75a      	b.n	40283c <__sfvwrite_r+0x194>
  402986:	4648      	mov	r0, r9
  402988:	f000 fcb6 	bl	4032f8 <_realloc_r>
  40298c:	f8dd c000 	ldr.w	ip, [sp]
  402990:	4682      	mov	sl, r0
  402992:	2800      	cmp	r0, #0
  402994:	d1c2      	bne.n	40291c <__sfvwrite_r+0x274>
  402996:	4648      	mov	r0, r9
  402998:	6921      	ldr	r1, [r4, #16]
  40299a:	f7ff fdad 	bl	4024f8 <_free_r>
  40299e:	89a3      	ldrh	r3, [r4, #12]
  4029a0:	220c      	movs	r2, #12
  4029a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  4029a6:	f8c9 2000 	str.w	r2, [r9]
  4029aa:	b29b      	uxth	r3, r3
  4029ac:	e71a      	b.n	4027e4 <__sfvwrite_r+0x13c>
  4029ae:	2301      	movs	r3, #1
  4029b0:	f10a 0801 	add.w	r8, sl, #1
  4029b4:	9300      	str	r3, [sp, #0]
  4029b6:	e727      	b.n	402808 <__sfvwrite_r+0x160>
  4029b8:	f04f 30ff 	mov.w	r0, #4294967295
  4029bc:	e6a6      	b.n	40270c <__sfvwrite_r+0x64>
  4029be:	220c      	movs	r2, #12
  4029c0:	89a3      	ldrh	r3, [r4, #12]
  4029c2:	f8c9 2000 	str.w	r2, [r9]
  4029c6:	e70d      	b.n	4027e4 <__sfvwrite_r+0x13c>
  4029c8:	7ffffc00 	.word	0x7ffffc00

004029cc <_fwalk_reent>:
  4029cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4029d0:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  4029d4:	d01e      	beq.n	402a14 <_fwalk_reent+0x48>
  4029d6:	4688      	mov	r8, r1
  4029d8:	4606      	mov	r6, r0
  4029da:	f04f 0900 	mov.w	r9, #0
  4029de:	687d      	ldr	r5, [r7, #4]
  4029e0:	68bc      	ldr	r4, [r7, #8]
  4029e2:	3d01      	subs	r5, #1
  4029e4:	d410      	bmi.n	402a08 <_fwalk_reent+0x3c>
  4029e6:	89a3      	ldrh	r3, [r4, #12]
  4029e8:	3d01      	subs	r5, #1
  4029ea:	2b01      	cmp	r3, #1
  4029ec:	d908      	bls.n	402a00 <_fwalk_reent+0x34>
  4029ee:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  4029f2:	4621      	mov	r1, r4
  4029f4:	4630      	mov	r0, r6
  4029f6:	3301      	adds	r3, #1
  4029f8:	d002      	beq.n	402a00 <_fwalk_reent+0x34>
  4029fa:	47c0      	blx	r8
  4029fc:	ea49 0900 	orr.w	r9, r9, r0
  402a00:	1c6b      	adds	r3, r5, #1
  402a02:	f104 0468 	add.w	r4, r4, #104	; 0x68
  402a06:	d1ee      	bne.n	4029e6 <_fwalk_reent+0x1a>
  402a08:	683f      	ldr	r7, [r7, #0]
  402a0a:	2f00      	cmp	r7, #0
  402a0c:	d1e7      	bne.n	4029de <_fwalk_reent+0x12>
  402a0e:	4648      	mov	r0, r9
  402a10:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  402a14:	46b9      	mov	r9, r7
  402a16:	4648      	mov	r0, r9
  402a18:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00402a1c <__smakebuf_r>:
  402a1c:	898b      	ldrh	r3, [r1, #12]
  402a1e:	b29a      	uxth	r2, r3
  402a20:	f012 0f02 	tst.w	r2, #2
  402a24:	d13d      	bne.n	402aa2 <__smakebuf_r+0x86>
  402a26:	b5f0      	push	{r4, r5, r6, r7, lr}
  402a28:	460c      	mov	r4, r1
  402a2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  402a2e:	b091      	sub	sp, #68	; 0x44
  402a30:	4605      	mov	r5, r0
  402a32:	2900      	cmp	r1, #0
  402a34:	db19      	blt.n	402a6a <__smakebuf_r+0x4e>
  402a36:	aa01      	add	r2, sp, #4
  402a38:	f000 ff68 	bl	40390c <_fstat_r>
  402a3c:	2800      	cmp	r0, #0
  402a3e:	db12      	blt.n	402a66 <__smakebuf_r+0x4a>
  402a40:	9b02      	ldr	r3, [sp, #8]
  402a42:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
  402a46:	f5a3 5700 	sub.w	r7, r3, #8192	; 0x2000
  402a4a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
  402a4e:	fab7 f787 	clz	r7, r7
  402a52:	ea4f 1757 	mov.w	r7, r7, lsr #5
  402a56:	d02b      	beq.n	402ab0 <__smakebuf_r+0x94>
  402a58:	89a3      	ldrh	r3, [r4, #12]
  402a5a:	f44f 6680 	mov.w	r6, #1024	; 0x400
  402a5e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  402a62:	81a3      	strh	r3, [r4, #12]
  402a64:	e00c      	b.n	402a80 <__smakebuf_r+0x64>
  402a66:	89a3      	ldrh	r3, [r4, #12]
  402a68:	b29a      	uxth	r2, r3
  402a6a:	f012 0f80 	tst.w	r2, #128	; 0x80
  402a6e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  402a72:	f04f 0700 	mov.w	r7, #0
  402a76:	bf0c      	ite	eq
  402a78:	f44f 6680 	moveq.w	r6, #1024	; 0x400
  402a7c:	2640      	movne	r6, #64	; 0x40
  402a7e:	81a3      	strh	r3, [r4, #12]
  402a80:	4628      	mov	r0, r5
  402a82:	4631      	mov	r1, r6
  402a84:	f000 f844 	bl	402b10 <_malloc_r>
  402a88:	89a3      	ldrh	r3, [r4, #12]
  402a8a:	b340      	cbz	r0, 402ade <__smakebuf_r+0xc2>
  402a8c:	4a1a      	ldr	r2, [pc, #104]	; (402af8 <__smakebuf_r+0xdc>)
  402a8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  402a92:	63ea      	str	r2, [r5, #60]	; 0x3c
  402a94:	81a3      	strh	r3, [r4, #12]
  402a96:	6020      	str	r0, [r4, #0]
  402a98:	6120      	str	r0, [r4, #16]
  402a9a:	6166      	str	r6, [r4, #20]
  402a9c:	b99f      	cbnz	r7, 402ac6 <__smakebuf_r+0xaa>
  402a9e:	b011      	add	sp, #68	; 0x44
  402aa0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  402aa2:	f101 0343 	add.w	r3, r1, #67	; 0x43
  402aa6:	2201      	movs	r2, #1
  402aa8:	600b      	str	r3, [r1, #0]
  402aaa:	610b      	str	r3, [r1, #16]
  402aac:	614a      	str	r2, [r1, #20]
  402aae:	4770      	bx	lr
  402ab0:	4b12      	ldr	r3, [pc, #72]	; (402afc <__smakebuf_r+0xe0>)
  402ab2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
  402ab4:	429a      	cmp	r2, r3
  402ab6:	d1cf      	bne.n	402a58 <__smakebuf_r+0x3c>
  402ab8:	89a3      	ldrh	r3, [r4, #12]
  402aba:	f44f 6680 	mov.w	r6, #1024	; 0x400
  402abe:	4333      	orrs	r3, r6
  402ac0:	64e6      	str	r6, [r4, #76]	; 0x4c
  402ac2:	81a3      	strh	r3, [r4, #12]
  402ac4:	e7dc      	b.n	402a80 <__smakebuf_r+0x64>
  402ac6:	4628      	mov	r0, r5
  402ac8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  402acc:	f000 ff32 	bl	403934 <_isatty_r>
  402ad0:	2800      	cmp	r0, #0
  402ad2:	d0e4      	beq.n	402a9e <__smakebuf_r+0x82>
  402ad4:	89a3      	ldrh	r3, [r4, #12]
  402ad6:	f043 0301 	orr.w	r3, r3, #1
  402ada:	81a3      	strh	r3, [r4, #12]
  402adc:	e7df      	b.n	402a9e <__smakebuf_r+0x82>
  402ade:	059a      	lsls	r2, r3, #22
  402ae0:	d4dd      	bmi.n	402a9e <__smakebuf_r+0x82>
  402ae2:	f104 0243 	add.w	r2, r4, #67	; 0x43
  402ae6:	f043 0302 	orr.w	r3, r3, #2
  402aea:	2101      	movs	r1, #1
  402aec:	81a3      	strh	r3, [r4, #12]
  402aee:	6022      	str	r2, [r4, #0]
  402af0:	6122      	str	r2, [r4, #16]
  402af2:	6161      	str	r1, [r4, #20]
  402af4:	e7d3      	b.n	402a9e <__smakebuf_r+0x82>
  402af6:	bf00      	nop
  402af8:	00402315 	.word	0x00402315
  402afc:	00403769 	.word	0x00403769

00402b00 <malloc>:
  402b00:	4b02      	ldr	r3, [pc, #8]	; (402b0c <malloc+0xc>)
  402b02:	4601      	mov	r1, r0
  402b04:	6818      	ldr	r0, [r3, #0]
  402b06:	f000 b803 	b.w	402b10 <_malloc_r>
  402b0a:	bf00      	nop
  402b0c:	204004a8 	.word	0x204004a8

00402b10 <_malloc_r>:
  402b10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402b14:	f101 040b 	add.w	r4, r1, #11
  402b18:	b083      	sub	sp, #12
  402b1a:	4605      	mov	r5, r0
  402b1c:	2c16      	cmp	r4, #22
  402b1e:	d927      	bls.n	402b70 <_malloc_r+0x60>
  402b20:	f034 0407 	bics.w	r4, r4, #7
  402b24:	d42a      	bmi.n	402b7c <_malloc_r+0x6c>
  402b26:	42a1      	cmp	r1, r4
  402b28:	d828      	bhi.n	402b7c <_malloc_r+0x6c>
  402b2a:	f000 fbe1 	bl	4032f0 <__malloc_lock>
  402b2e:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
  402b32:	d22b      	bcs.n	402b8c <_malloc_r+0x7c>
  402b34:	ea4f 0cd4 	mov.w	ip, r4, lsr #3
  402b38:	4ec0      	ldr	r6, [pc, #768]	; (402e3c <_malloc_r+0x32c>)
  402b3a:	eb06 02cc 	add.w	r2, r6, ip, lsl #3
  402b3e:	68d3      	ldr	r3, [r2, #12]
  402b40:	4293      	cmp	r3, r2
  402b42:	f000 8171 	beq.w	402e28 <_malloc_r+0x318>
  402b46:	685a      	ldr	r2, [r3, #4]
  402b48:	f103 0808 	add.w	r8, r3, #8
  402b4c:	68d9      	ldr	r1, [r3, #12]
  402b4e:	4628      	mov	r0, r5
  402b50:	f022 0203 	bic.w	r2, r2, #3
  402b54:	689c      	ldr	r4, [r3, #8]
  402b56:	4413      	add	r3, r2
  402b58:	60e1      	str	r1, [r4, #12]
  402b5a:	608c      	str	r4, [r1, #8]
  402b5c:	685a      	ldr	r2, [r3, #4]
  402b5e:	f042 0201 	orr.w	r2, r2, #1
  402b62:	605a      	str	r2, [r3, #4]
  402b64:	f000 fbc6 	bl	4032f4 <__malloc_unlock>
  402b68:	4640      	mov	r0, r8
  402b6a:	b003      	add	sp, #12
  402b6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402b70:	2910      	cmp	r1, #16
  402b72:	d803      	bhi.n	402b7c <_malloc_r+0x6c>
  402b74:	f000 fbbc 	bl	4032f0 <__malloc_lock>
  402b78:	2410      	movs	r4, #16
  402b7a:	e7db      	b.n	402b34 <_malloc_r+0x24>
  402b7c:	f04f 0800 	mov.w	r8, #0
  402b80:	230c      	movs	r3, #12
  402b82:	4640      	mov	r0, r8
  402b84:	602b      	str	r3, [r5, #0]
  402b86:	b003      	add	sp, #12
  402b88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402b8c:	ea5f 2c54 	movs.w	ip, r4, lsr #9
  402b90:	f000 8089 	beq.w	402ca6 <_malloc_r+0x196>
  402b94:	f1bc 0f04 	cmp.w	ip, #4
  402b98:	f200 80c4 	bhi.w	402d24 <_malloc_r+0x214>
  402b9c:	ea4f 1c94 	mov.w	ip, r4, lsr #6
  402ba0:	f10c 0c38 	add.w	ip, ip, #56	; 0x38
  402ba4:	ea4f 004c 	mov.w	r0, ip, lsl #1
  402ba8:	4ea4      	ldr	r6, [pc, #656]	; (402e3c <_malloc_r+0x32c>)
  402baa:	eb06 0080 	add.w	r0, r6, r0, lsl #2
  402bae:	68c3      	ldr	r3, [r0, #12]
  402bb0:	4298      	cmp	r0, r3
  402bb2:	d105      	bne.n	402bc0 <_malloc_r+0xb0>
  402bb4:	e00c      	b.n	402bd0 <_malloc_r+0xc0>
  402bb6:	2900      	cmp	r1, #0
  402bb8:	da79      	bge.n	402cae <_malloc_r+0x19e>
  402bba:	68db      	ldr	r3, [r3, #12]
  402bbc:	4298      	cmp	r0, r3
  402bbe:	d007      	beq.n	402bd0 <_malloc_r+0xc0>
  402bc0:	685a      	ldr	r2, [r3, #4]
  402bc2:	f022 0203 	bic.w	r2, r2, #3
  402bc6:	1b11      	subs	r1, r2, r4
  402bc8:	290f      	cmp	r1, #15
  402bca:	ddf4      	ble.n	402bb6 <_malloc_r+0xa6>
  402bcc:	f10c 3cff 	add.w	ip, ip, #4294967295
  402bd0:	f10c 0c01 	add.w	ip, ip, #1
  402bd4:	4f99      	ldr	r7, [pc, #612]	; (402e3c <_malloc_r+0x32c>)
  402bd6:	6933      	ldr	r3, [r6, #16]
  402bd8:	f107 0e08 	add.w	lr, r7, #8
  402bdc:	4573      	cmp	r3, lr
  402bde:	f000 8119 	beq.w	402e14 <_malloc_r+0x304>
  402be2:	685a      	ldr	r2, [r3, #4]
  402be4:	f022 0203 	bic.w	r2, r2, #3
  402be8:	1b11      	subs	r1, r2, r4
  402bea:	290f      	cmp	r1, #15
  402bec:	f300 80ca 	bgt.w	402d84 <_malloc_r+0x274>
  402bf0:	2900      	cmp	r1, #0
  402bf2:	f8c7 e014 	str.w	lr, [r7, #20]
  402bf6:	f8c7 e010 	str.w	lr, [r7, #16]
  402bfa:	da6a      	bge.n	402cd2 <_malloc_r+0x1c2>
  402bfc:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  402c00:	f080 809f 	bcs.w	402d42 <_malloc_r+0x232>
  402c04:	08d2      	lsrs	r2, r2, #3
  402c06:	2001      	movs	r0, #1
  402c08:	6879      	ldr	r1, [r7, #4]
  402c0a:	ea4f 08a2 	mov.w	r8, r2, asr #2
  402c0e:	eb07 02c2 	add.w	r2, r7, r2, lsl #3
  402c12:	fa00 f008 	lsl.w	r0, r0, r8
  402c16:	f8d2 8008 	ldr.w	r8, [r2, #8]
  402c1a:	4308      	orrs	r0, r1
  402c1c:	60da      	str	r2, [r3, #12]
  402c1e:	f8c3 8008 	str.w	r8, [r3, #8]
  402c22:	6078      	str	r0, [r7, #4]
  402c24:	6093      	str	r3, [r2, #8]
  402c26:	f8c8 300c 	str.w	r3, [r8, #12]
  402c2a:	ea4f 03ac 	mov.w	r3, ip, asr #2
  402c2e:	2101      	movs	r1, #1
  402c30:	4099      	lsls	r1, r3
  402c32:	4281      	cmp	r1, r0
  402c34:	d85b      	bhi.n	402cee <_malloc_r+0x1de>
  402c36:	4208      	tst	r0, r1
  402c38:	d106      	bne.n	402c48 <_malloc_r+0x138>
  402c3a:	f02c 0c03 	bic.w	ip, ip, #3
  402c3e:	0049      	lsls	r1, r1, #1
  402c40:	f10c 0c04 	add.w	ip, ip, #4
  402c44:	4208      	tst	r0, r1
  402c46:	d0fa      	beq.n	402c3e <_malloc_r+0x12e>
  402c48:	eb06 08cc 	add.w	r8, r6, ip, lsl #3
  402c4c:	46e1      	mov	r9, ip
  402c4e:	4640      	mov	r0, r8
  402c50:	68c7      	ldr	r7, [r0, #12]
  402c52:	42b8      	cmp	r0, r7
  402c54:	d107      	bne.n	402c66 <_malloc_r+0x156>
  402c56:	e0df      	b.n	402e18 <_malloc_r+0x308>
  402c58:	2a00      	cmp	r2, #0
  402c5a:	f280 80f7 	bge.w	402e4c <_malloc_r+0x33c>
  402c5e:	68ff      	ldr	r7, [r7, #12]
  402c60:	42b8      	cmp	r0, r7
  402c62:	f000 80d9 	beq.w	402e18 <_malloc_r+0x308>
  402c66:	687b      	ldr	r3, [r7, #4]
  402c68:	f023 0303 	bic.w	r3, r3, #3
  402c6c:	1b1a      	subs	r2, r3, r4
  402c6e:	2a0f      	cmp	r2, #15
  402c70:	ddf2      	ble.n	402c58 <_malloc_r+0x148>
  402c72:	46b8      	mov	r8, r7
  402c74:	68fb      	ldr	r3, [r7, #12]
  402c76:	f044 0901 	orr.w	r9, r4, #1
  402c7a:	f042 0c01 	orr.w	ip, r2, #1
  402c7e:	f858 1f08 	ldr.w	r1, [r8, #8]!
  402c82:	443c      	add	r4, r7
  402c84:	f8c7 9004 	str.w	r9, [r7, #4]
  402c88:	4628      	mov	r0, r5
  402c8a:	60cb      	str	r3, [r1, #12]
  402c8c:	6099      	str	r1, [r3, #8]
  402c8e:	6174      	str	r4, [r6, #20]
  402c90:	6134      	str	r4, [r6, #16]
  402c92:	f8c4 e00c 	str.w	lr, [r4, #12]
  402c96:	f8c4 e008 	str.w	lr, [r4, #8]
  402c9a:	f8c4 c004 	str.w	ip, [r4, #4]
  402c9e:	50a2      	str	r2, [r4, r2]
  402ca0:	f000 fb28 	bl	4032f4 <__malloc_unlock>
  402ca4:	e760      	b.n	402b68 <_malloc_r+0x58>
  402ca6:	207e      	movs	r0, #126	; 0x7e
  402ca8:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
  402cac:	e77c      	b.n	402ba8 <_malloc_r+0x98>
  402cae:	441a      	add	r2, r3
  402cb0:	68dc      	ldr	r4, [r3, #12]
  402cb2:	689e      	ldr	r6, [r3, #8]
  402cb4:	f103 0808 	add.w	r8, r3, #8
  402cb8:	6851      	ldr	r1, [r2, #4]
  402cba:	4628      	mov	r0, r5
  402cbc:	60f4      	str	r4, [r6, #12]
  402cbe:	f041 0301 	orr.w	r3, r1, #1
  402cc2:	60a6      	str	r6, [r4, #8]
  402cc4:	6053      	str	r3, [r2, #4]
  402cc6:	f000 fb15 	bl	4032f4 <__malloc_unlock>
  402cca:	4640      	mov	r0, r8
  402ccc:	b003      	add	sp, #12
  402cce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402cd2:	441a      	add	r2, r3
  402cd4:	f103 0808 	add.w	r8, r3, #8
  402cd8:	4628      	mov	r0, r5
  402cda:	6853      	ldr	r3, [r2, #4]
  402cdc:	f043 0301 	orr.w	r3, r3, #1
  402ce0:	6053      	str	r3, [r2, #4]
  402ce2:	f000 fb07 	bl	4032f4 <__malloc_unlock>
  402ce6:	4640      	mov	r0, r8
  402ce8:	b003      	add	sp, #12
  402cea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402cee:	68b7      	ldr	r7, [r6, #8]
  402cf0:	687a      	ldr	r2, [r7, #4]
  402cf2:	f022 0803 	bic.w	r8, r2, #3
  402cf6:	ebc4 0208 	rsb	r2, r4, r8
  402cfa:	2a0f      	cmp	r2, #15
  402cfc:	dd56      	ble.n	402dac <_malloc_r+0x29c>
  402cfe:	45a0      	cmp	r8, r4
  402d00:	d354      	bcc.n	402dac <_malloc_r+0x29c>
  402d02:	f044 0301 	orr.w	r3, r4, #1
  402d06:	f042 0201 	orr.w	r2, r2, #1
  402d0a:	443c      	add	r4, r7
  402d0c:	f107 0808 	add.w	r8, r7, #8
  402d10:	607b      	str	r3, [r7, #4]
  402d12:	4628      	mov	r0, r5
  402d14:	60b4      	str	r4, [r6, #8]
  402d16:	6062      	str	r2, [r4, #4]
  402d18:	f000 faec 	bl	4032f4 <__malloc_unlock>
  402d1c:	4640      	mov	r0, r8
  402d1e:	b003      	add	sp, #12
  402d20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402d24:	f1bc 0f14 	cmp.w	ip, #20
  402d28:	f240 809f 	bls.w	402e6a <_malloc_r+0x35a>
  402d2c:	f1bc 0f54 	cmp.w	ip, #84	; 0x54
  402d30:	f200 8127 	bhi.w	402f82 <_malloc_r+0x472>
  402d34:	ea4f 3c14 	mov.w	ip, r4, lsr #12
  402d38:	f10c 0c6e 	add.w	ip, ip, #110	; 0x6e
  402d3c:	ea4f 004c 	mov.w	r0, ip, lsl #1
  402d40:	e732      	b.n	402ba8 <_malloc_r+0x98>
  402d42:	0a51      	lsrs	r1, r2, #9
  402d44:	2904      	cmp	r1, #4
  402d46:	f240 8095 	bls.w	402e74 <_malloc_r+0x364>
  402d4a:	2914      	cmp	r1, #20
  402d4c:	f200 8142 	bhi.w	402fd4 <_malloc_r+0x4c4>
  402d50:	f101 075b 	add.w	r7, r1, #91	; 0x5b
  402d54:	0078      	lsls	r0, r7, #1
  402d56:	eb06 0080 	add.w	r0, r6, r0, lsl #2
  402d5a:	f8df 90e0 	ldr.w	r9, [pc, #224]	; 402e3c <_malloc_r+0x32c>
  402d5e:	6881      	ldr	r1, [r0, #8]
  402d60:	4281      	cmp	r1, r0
  402d62:	f000 811b 	beq.w	402f9c <_malloc_r+0x48c>
  402d66:	684f      	ldr	r7, [r1, #4]
  402d68:	f027 0703 	bic.w	r7, r7, #3
  402d6c:	42ba      	cmp	r2, r7
  402d6e:	d202      	bcs.n	402d76 <_malloc_r+0x266>
  402d70:	6889      	ldr	r1, [r1, #8]
  402d72:	4288      	cmp	r0, r1
  402d74:	d1f7      	bne.n	402d66 <_malloc_r+0x256>
  402d76:	68ca      	ldr	r2, [r1, #12]
  402d78:	6870      	ldr	r0, [r6, #4]
  402d7a:	60da      	str	r2, [r3, #12]
  402d7c:	6099      	str	r1, [r3, #8]
  402d7e:	6093      	str	r3, [r2, #8]
  402d80:	60cb      	str	r3, [r1, #12]
  402d82:	e752      	b.n	402c2a <_malloc_r+0x11a>
  402d84:	f044 0601 	orr.w	r6, r4, #1
  402d88:	f041 0201 	orr.w	r2, r1, #1
  402d8c:	441c      	add	r4, r3
  402d8e:	4628      	mov	r0, r5
  402d90:	605e      	str	r6, [r3, #4]
  402d92:	f103 0808 	add.w	r8, r3, #8
  402d96:	617c      	str	r4, [r7, #20]
  402d98:	613c      	str	r4, [r7, #16]
  402d9a:	f8c4 e00c 	str.w	lr, [r4, #12]
  402d9e:	f8c4 e008 	str.w	lr, [r4, #8]
  402da2:	6062      	str	r2, [r4, #4]
  402da4:	5061      	str	r1, [r4, r1]
  402da6:	f000 faa5 	bl	4032f4 <__malloc_unlock>
  402daa:	e6dd      	b.n	402b68 <_malloc_r+0x58>
  402dac:	4a24      	ldr	r2, [pc, #144]	; (402e40 <_malloc_r+0x330>)
  402dae:	4b25      	ldr	r3, [pc, #148]	; (402e44 <_malloc_r+0x334>)
  402db0:	6811      	ldr	r1, [r2, #0]
  402db2:	681b      	ldr	r3, [r3, #0]
  402db4:	3101      	adds	r1, #1
  402db6:	4423      	add	r3, r4
  402db8:	f000 8109 	beq.w	402fce <_malloc_r+0x4be>
  402dbc:	f241 010f 	movw	r1, #4111	; 0x100f
  402dc0:	f8df 9084 	ldr.w	r9, [pc, #132]	; 402e48 <_malloc_r+0x338>
  402dc4:	4419      	add	r1, r3
  402dc6:	ea01 0909 	and.w	r9, r1, r9
  402dca:	4628      	mov	r0, r5
  402dcc:	4649      	mov	r1, r9
  402dce:	9201      	str	r2, [sp, #4]
  402dd0:	f000 fc8a 	bl	4036e8 <_sbrk_r>
  402dd4:	f1b0 3fff 	cmp.w	r0, #4294967295
  402dd8:	4682      	mov	sl, r0
  402dda:	9a01      	ldr	r2, [sp, #4]
  402ddc:	f000 8101 	beq.w	402fe2 <_malloc_r+0x4d2>
  402de0:	1bbb      	subs	r3, r7, r6
  402de2:	eb07 0108 	add.w	r1, r7, r8
  402de6:	4815      	ldr	r0, [pc, #84]	; (402e3c <_malloc_r+0x32c>)
  402de8:	bf18      	it	ne
  402dea:	2301      	movne	r3, #1
  402dec:	4551      	cmp	r1, sl
  402dee:	d967      	bls.n	402ec0 <_malloc_r+0x3b0>
  402df0:	2b00      	cmp	r3, #0
  402df2:	d065      	beq.n	402ec0 <_malloc_r+0x3b0>
  402df4:	6887      	ldr	r7, [r0, #8]
  402df6:	687b      	ldr	r3, [r7, #4]
  402df8:	f023 0303 	bic.w	r3, r3, #3
  402dfc:	1b1a      	subs	r2, r3, r4
  402dfe:	2a0f      	cmp	r2, #15
  402e00:	dd02      	ble.n	402e08 <_malloc_r+0x2f8>
  402e02:	429c      	cmp	r4, r3
  402e04:	f67f af7d 	bls.w	402d02 <_malloc_r+0x1f2>
  402e08:	4628      	mov	r0, r5
  402e0a:	f04f 0800 	mov.w	r8, #0
  402e0e:	f000 fa71 	bl	4032f4 <__malloc_unlock>
  402e12:	e6a9      	b.n	402b68 <_malloc_r+0x58>
  402e14:	6878      	ldr	r0, [r7, #4]
  402e16:	e708      	b.n	402c2a <_malloc_r+0x11a>
  402e18:	f109 0901 	add.w	r9, r9, #1
  402e1c:	3008      	adds	r0, #8
  402e1e:	f019 0f03 	tst.w	r9, #3
  402e22:	f47f af15 	bne.w	402c50 <_malloc_r+0x140>
  402e26:	e02f      	b.n	402e88 <_malloc_r+0x378>
  402e28:	f103 0208 	add.w	r2, r3, #8
  402e2c:	695b      	ldr	r3, [r3, #20]
  402e2e:	429a      	cmp	r2, r3
  402e30:	bf08      	it	eq
  402e32:	f10c 0c02 	addeq.w	ip, ip, #2
  402e36:	f43f aecd 	beq.w	402bd4 <_malloc_r+0xc4>
  402e3a:	e684      	b.n	402b46 <_malloc_r+0x36>
  402e3c:	204004ac 	.word	0x204004ac
  402e40:	204008b8 	.word	0x204008b8
  402e44:	20400964 	.word	0x20400964
  402e48:	fffff000 	.word	0xfffff000
  402e4c:	18fa      	adds	r2, r7, r3
  402e4e:	46b8      	mov	r8, r7
  402e50:	68f9      	ldr	r1, [r7, #12]
  402e52:	4628      	mov	r0, r5
  402e54:	6853      	ldr	r3, [r2, #4]
  402e56:	f858 4f08 	ldr.w	r4, [r8, #8]!
  402e5a:	f043 0301 	orr.w	r3, r3, #1
  402e5e:	6053      	str	r3, [r2, #4]
  402e60:	60e1      	str	r1, [r4, #12]
  402e62:	608c      	str	r4, [r1, #8]
  402e64:	f000 fa46 	bl	4032f4 <__malloc_unlock>
  402e68:	e67e      	b.n	402b68 <_malloc_r+0x58>
  402e6a:	f10c 0c5b 	add.w	ip, ip, #91	; 0x5b
  402e6e:	ea4f 004c 	mov.w	r0, ip, lsl #1
  402e72:	e699      	b.n	402ba8 <_malloc_r+0x98>
  402e74:	0991      	lsrs	r1, r2, #6
  402e76:	f101 0738 	add.w	r7, r1, #56	; 0x38
  402e7a:	0078      	lsls	r0, r7, #1
  402e7c:	e76b      	b.n	402d56 <_malloc_r+0x246>
  402e7e:	f8d8 8000 	ldr.w	r8, [r8]
  402e82:	4598      	cmp	r8, r3
  402e84:	f040 80e6 	bne.w	403054 <_malloc_r+0x544>
  402e88:	f01c 0f03 	tst.w	ip, #3
  402e8c:	f1a8 0308 	sub.w	r3, r8, #8
  402e90:	f10c 3cff 	add.w	ip, ip, #4294967295
  402e94:	d1f3      	bne.n	402e7e <_malloc_r+0x36e>
  402e96:	6873      	ldr	r3, [r6, #4]
  402e98:	ea23 0301 	bic.w	r3, r3, r1
  402e9c:	6073      	str	r3, [r6, #4]
  402e9e:	0049      	lsls	r1, r1, #1
  402ea0:	4299      	cmp	r1, r3
  402ea2:	f63f af24 	bhi.w	402cee <_malloc_r+0x1de>
  402ea6:	2900      	cmp	r1, #0
  402ea8:	f43f af21 	beq.w	402cee <_malloc_r+0x1de>
  402eac:	420b      	tst	r3, r1
  402eae:	46cc      	mov	ip, r9
  402eb0:	f47f aeca 	bne.w	402c48 <_malloc_r+0x138>
  402eb4:	0049      	lsls	r1, r1, #1
  402eb6:	f10c 0c04 	add.w	ip, ip, #4
  402eba:	420b      	tst	r3, r1
  402ebc:	d0fa      	beq.n	402eb4 <_malloc_r+0x3a4>
  402ebe:	e6c3      	b.n	402c48 <_malloc_r+0x138>
  402ec0:	f8df b19c 	ldr.w	fp, [pc, #412]	; 403060 <_malloc_r+0x550>
  402ec4:	4551      	cmp	r1, sl
  402ec6:	f8db 0000 	ldr.w	r0, [fp]
  402eca:	4448      	add	r0, r9
  402ecc:	f8cb 0000 	str.w	r0, [fp]
  402ed0:	f000 808c 	beq.w	402fec <_malloc_r+0x4dc>
  402ed4:	6812      	ldr	r2, [r2, #0]
  402ed6:	f8df e18c 	ldr.w	lr, [pc, #396]	; 403064 <_malloc_r+0x554>
  402eda:	3201      	adds	r2, #1
  402edc:	f000 80a3 	beq.w	403026 <_malloc_r+0x516>
  402ee0:	ebc1 010a 	rsb	r1, r1, sl
  402ee4:	4408      	add	r0, r1
  402ee6:	f8cb 0000 	str.w	r0, [fp]
  402eea:	f01a 0107 	ands.w	r1, sl, #7
  402eee:	d052      	beq.n	402f96 <_malloc_r+0x486>
  402ef0:	f1c1 0008 	rsb	r0, r1, #8
  402ef4:	f241 0208 	movw	r2, #4104	; 0x1008
  402ef8:	4482      	add	sl, r0
  402efa:	1a52      	subs	r2, r2, r1
  402efc:	eb0a 0109 	add.w	r1, sl, r9
  402f00:	4628      	mov	r0, r5
  402f02:	9301      	str	r3, [sp, #4]
  402f04:	f3c1 010b 	ubfx	r1, r1, #0, #12
  402f08:	ebc1 0902 	rsb	r9, r1, r2
  402f0c:	4649      	mov	r1, r9
  402f0e:	f000 fbeb 	bl	4036e8 <_sbrk_r>
  402f12:	1c43      	adds	r3, r0, #1
  402f14:	9b01      	ldr	r3, [sp, #4]
  402f16:	d07a      	beq.n	40300e <_malloc_r+0x4fe>
  402f18:	ebca 0200 	rsb	r2, sl, r0
  402f1c:	444a      	add	r2, r9
  402f1e:	f042 0201 	orr.w	r2, r2, #1
  402f22:	f8db 0000 	ldr.w	r0, [fp]
  402f26:	f8c6 a008 	str.w	sl, [r6, #8]
  402f2a:	4448      	add	r0, r9
  402f2c:	f8ca 2004 	str.w	r2, [sl, #4]
  402f30:	f8df 912c 	ldr.w	r9, [pc, #300]	; 403060 <_malloc_r+0x550>
  402f34:	f8cb 0000 	str.w	r0, [fp]
  402f38:	b1a3      	cbz	r3, 402f64 <_malloc_r+0x454>
  402f3a:	f1b8 0f0f 	cmp.w	r8, #15
  402f3e:	d937      	bls.n	402fb0 <_malloc_r+0x4a0>
  402f40:	687b      	ldr	r3, [r7, #4]
  402f42:	f1a8 020c 	sub.w	r2, r8, #12
  402f46:	f04f 0e05 	mov.w	lr, #5
  402f4a:	f022 0207 	bic.w	r2, r2, #7
  402f4e:	f003 0301 	and.w	r3, r3, #1
  402f52:	18b9      	adds	r1, r7, r2
  402f54:	4313      	orrs	r3, r2
  402f56:	2a0f      	cmp	r2, #15
  402f58:	607b      	str	r3, [r7, #4]
  402f5a:	f8c1 e004 	str.w	lr, [r1, #4]
  402f5e:	f8c1 e008 	str.w	lr, [r1, #8]
  402f62:	d858      	bhi.n	403016 <_malloc_r+0x506>
  402f64:	4b3c      	ldr	r3, [pc, #240]	; (403058 <_malloc_r+0x548>)
  402f66:	681a      	ldr	r2, [r3, #0]
  402f68:	4290      	cmp	r0, r2
  402f6a:	d900      	bls.n	402f6e <_malloc_r+0x45e>
  402f6c:	6018      	str	r0, [r3, #0]
  402f6e:	4b3b      	ldr	r3, [pc, #236]	; (40305c <_malloc_r+0x54c>)
  402f70:	68b7      	ldr	r7, [r6, #8]
  402f72:	681a      	ldr	r2, [r3, #0]
  402f74:	4290      	cmp	r0, r2
  402f76:	d900      	bls.n	402f7a <_malloc_r+0x46a>
  402f78:	6018      	str	r0, [r3, #0]
  402f7a:	687b      	ldr	r3, [r7, #4]
  402f7c:	f023 0303 	bic.w	r3, r3, #3
  402f80:	e73c      	b.n	402dfc <_malloc_r+0x2ec>
  402f82:	f5bc 7faa 	cmp.w	ip, #340	; 0x154
  402f86:	d817      	bhi.n	402fb8 <_malloc_r+0x4a8>
  402f88:	ea4f 3cd4 	mov.w	ip, r4, lsr #15
  402f8c:	f10c 0c77 	add.w	ip, ip, #119	; 0x77
  402f90:	ea4f 004c 	mov.w	r0, ip, lsl #1
  402f94:	e608      	b.n	402ba8 <_malloc_r+0x98>
  402f96:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  402f9a:	e7af      	b.n	402efc <_malloc_r+0x3ec>
  402f9c:	10bf      	asrs	r7, r7, #2
  402f9e:	2001      	movs	r0, #1
  402fa0:	460a      	mov	r2, r1
  402fa2:	40b8      	lsls	r0, r7
  402fa4:	f8d9 7004 	ldr.w	r7, [r9, #4]
  402fa8:	4338      	orrs	r0, r7
  402faa:	f8c9 0004 	str.w	r0, [r9, #4]
  402fae:	e6e4      	b.n	402d7a <_malloc_r+0x26a>
  402fb0:	2301      	movs	r3, #1
  402fb2:	f8ca 3004 	str.w	r3, [sl, #4]
  402fb6:	e727      	b.n	402e08 <_malloc_r+0x2f8>
  402fb8:	f240 5354 	movw	r3, #1364	; 0x554
  402fbc:	459c      	cmp	ip, r3
  402fbe:	d822      	bhi.n	403006 <_malloc_r+0x4f6>
  402fc0:	ea4f 4c94 	mov.w	ip, r4, lsr #18
  402fc4:	f10c 0c7c 	add.w	ip, ip, #124	; 0x7c
  402fc8:	ea4f 004c 	mov.w	r0, ip, lsl #1
  402fcc:	e5ec      	b.n	402ba8 <_malloc_r+0x98>
  402fce:	f103 0910 	add.w	r9, r3, #16
  402fd2:	e6fa      	b.n	402dca <_malloc_r+0x2ba>
  402fd4:	2954      	cmp	r1, #84	; 0x54
  402fd6:	d829      	bhi.n	40302c <_malloc_r+0x51c>
  402fd8:	0b11      	lsrs	r1, r2, #12
  402fda:	f101 076e 	add.w	r7, r1, #110	; 0x6e
  402fde:	0078      	lsls	r0, r7, #1
  402fe0:	e6b9      	b.n	402d56 <_malloc_r+0x246>
  402fe2:	68b7      	ldr	r7, [r6, #8]
  402fe4:	687b      	ldr	r3, [r7, #4]
  402fe6:	f023 0303 	bic.w	r3, r3, #3
  402fea:	e707      	b.n	402dfc <_malloc_r+0x2ec>
  402fec:	f3c1 0e0b 	ubfx	lr, r1, #0, #12
  402ff0:	f1be 0f00 	cmp.w	lr, #0
  402ff4:	f47f af6e 	bne.w	402ed4 <_malloc_r+0x3c4>
  402ff8:	eb09 0308 	add.w	r3, r9, r8
  402ffc:	68b2      	ldr	r2, [r6, #8]
  402ffe:	f043 0301 	orr.w	r3, r3, #1
  403002:	6053      	str	r3, [r2, #4]
  403004:	e7ae      	b.n	402f64 <_malloc_r+0x454>
  403006:	20fc      	movs	r0, #252	; 0xfc
  403008:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
  40300c:	e5cc      	b.n	402ba8 <_malloc_r+0x98>
  40300e:	2201      	movs	r2, #1
  403010:	f04f 0900 	mov.w	r9, #0
  403014:	e785      	b.n	402f22 <_malloc_r+0x412>
  403016:	4628      	mov	r0, r5
  403018:	f107 0108 	add.w	r1, r7, #8
  40301c:	f7ff fa6c 	bl	4024f8 <_free_r>
  403020:	f8d9 0000 	ldr.w	r0, [r9]
  403024:	e79e      	b.n	402f64 <_malloc_r+0x454>
  403026:	f8ce a000 	str.w	sl, [lr]
  40302a:	e75e      	b.n	402eea <_malloc_r+0x3da>
  40302c:	f5b1 7faa 	cmp.w	r1, #340	; 0x154
  403030:	d804      	bhi.n	40303c <_malloc_r+0x52c>
  403032:	0bd1      	lsrs	r1, r2, #15
  403034:	f101 0777 	add.w	r7, r1, #119	; 0x77
  403038:	0078      	lsls	r0, r7, #1
  40303a:	e68c      	b.n	402d56 <_malloc_r+0x246>
  40303c:	f240 5054 	movw	r0, #1364	; 0x554
  403040:	4281      	cmp	r1, r0
  403042:	d804      	bhi.n	40304e <_malloc_r+0x53e>
  403044:	0c91      	lsrs	r1, r2, #18
  403046:	f101 077c 	add.w	r7, r1, #124	; 0x7c
  40304a:	0078      	lsls	r0, r7, #1
  40304c:	e683      	b.n	402d56 <_malloc_r+0x246>
  40304e:	20fc      	movs	r0, #252	; 0xfc
  403050:	277e      	movs	r7, #126	; 0x7e
  403052:	e680      	b.n	402d56 <_malloc_r+0x246>
  403054:	6873      	ldr	r3, [r6, #4]
  403056:	e722      	b.n	402e9e <_malloc_r+0x38e>
  403058:	20400960 	.word	0x20400960
  40305c:	2040095c 	.word	0x2040095c
  403060:	20400968 	.word	0x20400968
  403064:	204008b8 	.word	0x204008b8

00403068 <memchr>:
  403068:	0783      	lsls	r3, r0, #30
  40306a:	b2c9      	uxtb	r1, r1
  40306c:	b470      	push	{r4, r5, r6}
  40306e:	d03f      	beq.n	4030f0 <memchr+0x88>
  403070:	1e54      	subs	r4, r2, #1
  403072:	2a00      	cmp	r2, #0
  403074:	d03e      	beq.n	4030f4 <memchr+0x8c>
  403076:	7803      	ldrb	r3, [r0, #0]
  403078:	428b      	cmp	r3, r1
  40307a:	bf18      	it	ne
  40307c:	1c43      	addne	r3, r0, #1
  40307e:	d105      	bne.n	40308c <memchr+0x24>
  403080:	e01c      	b.n	4030bc <memchr+0x54>
  403082:	b1ec      	cbz	r4, 4030c0 <memchr+0x58>
  403084:	7802      	ldrb	r2, [r0, #0]
  403086:	3c01      	subs	r4, #1
  403088:	428a      	cmp	r2, r1
  40308a:	d017      	beq.n	4030bc <memchr+0x54>
  40308c:	f013 0f03 	tst.w	r3, #3
  403090:	4618      	mov	r0, r3
  403092:	f103 0301 	add.w	r3, r3, #1
  403096:	d1f4      	bne.n	403082 <memchr+0x1a>
  403098:	2c03      	cmp	r4, #3
  40309a:	d814      	bhi.n	4030c6 <memchr+0x5e>
  40309c:	b184      	cbz	r4, 4030c0 <memchr+0x58>
  40309e:	7803      	ldrb	r3, [r0, #0]
  4030a0:	428b      	cmp	r3, r1
  4030a2:	d00b      	beq.n	4030bc <memchr+0x54>
  4030a4:	1905      	adds	r5, r0, r4
  4030a6:	1c43      	adds	r3, r0, #1
  4030a8:	e002      	b.n	4030b0 <memchr+0x48>
  4030aa:	7802      	ldrb	r2, [r0, #0]
  4030ac:	428a      	cmp	r2, r1
  4030ae:	d005      	beq.n	4030bc <memchr+0x54>
  4030b0:	42ab      	cmp	r3, r5
  4030b2:	4618      	mov	r0, r3
  4030b4:	f103 0301 	add.w	r3, r3, #1
  4030b8:	d1f7      	bne.n	4030aa <memchr+0x42>
  4030ba:	2000      	movs	r0, #0
  4030bc:	bc70      	pop	{r4, r5, r6}
  4030be:	4770      	bx	lr
  4030c0:	4620      	mov	r0, r4
  4030c2:	bc70      	pop	{r4, r5, r6}
  4030c4:	4770      	bx	lr
  4030c6:	ea41 2601 	orr.w	r6, r1, r1, lsl #8
  4030ca:	4602      	mov	r2, r0
  4030cc:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
  4030d0:	4610      	mov	r0, r2
  4030d2:	3204      	adds	r2, #4
  4030d4:	6803      	ldr	r3, [r0, #0]
  4030d6:	4073      	eors	r3, r6
  4030d8:	f1a3 3501 	sub.w	r5, r3, #16843009	; 0x1010101
  4030dc:	ea25 0303 	bic.w	r3, r5, r3
  4030e0:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
  4030e4:	d1da      	bne.n	40309c <memchr+0x34>
  4030e6:	3c04      	subs	r4, #4
  4030e8:	4610      	mov	r0, r2
  4030ea:	2c03      	cmp	r4, #3
  4030ec:	d8f0      	bhi.n	4030d0 <memchr+0x68>
  4030ee:	e7d5      	b.n	40309c <memchr+0x34>
  4030f0:	4614      	mov	r4, r2
  4030f2:	e7d1      	b.n	403098 <memchr+0x30>
  4030f4:	4610      	mov	r0, r2
  4030f6:	e7e1      	b.n	4030bc <memchr+0x54>

004030f8 <memcpy>:
  4030f8:	4684      	mov	ip, r0
  4030fa:	ea41 0300 	orr.w	r3, r1, r0
  4030fe:	f013 0303 	ands.w	r3, r3, #3
  403102:	d16d      	bne.n	4031e0 <memcpy+0xe8>
  403104:	3a40      	subs	r2, #64	; 0x40
  403106:	d341      	bcc.n	40318c <memcpy+0x94>
  403108:	f851 3b04 	ldr.w	r3, [r1], #4
  40310c:	f840 3b04 	str.w	r3, [r0], #4
  403110:	f851 3b04 	ldr.w	r3, [r1], #4
  403114:	f840 3b04 	str.w	r3, [r0], #4
  403118:	f851 3b04 	ldr.w	r3, [r1], #4
  40311c:	f840 3b04 	str.w	r3, [r0], #4
  403120:	f851 3b04 	ldr.w	r3, [r1], #4
  403124:	f840 3b04 	str.w	r3, [r0], #4
  403128:	f851 3b04 	ldr.w	r3, [r1], #4
  40312c:	f840 3b04 	str.w	r3, [r0], #4
  403130:	f851 3b04 	ldr.w	r3, [r1], #4
  403134:	f840 3b04 	str.w	r3, [r0], #4
  403138:	f851 3b04 	ldr.w	r3, [r1], #4
  40313c:	f840 3b04 	str.w	r3, [r0], #4
  403140:	f851 3b04 	ldr.w	r3, [r1], #4
  403144:	f840 3b04 	str.w	r3, [r0], #4
  403148:	f851 3b04 	ldr.w	r3, [r1], #4
  40314c:	f840 3b04 	str.w	r3, [r0], #4
  403150:	f851 3b04 	ldr.w	r3, [r1], #4
  403154:	f840 3b04 	str.w	r3, [r0], #4
  403158:	f851 3b04 	ldr.w	r3, [r1], #4
  40315c:	f840 3b04 	str.w	r3, [r0], #4
  403160:	f851 3b04 	ldr.w	r3, [r1], #4
  403164:	f840 3b04 	str.w	r3, [r0], #4
  403168:	f851 3b04 	ldr.w	r3, [r1], #4
  40316c:	f840 3b04 	str.w	r3, [r0], #4
  403170:	f851 3b04 	ldr.w	r3, [r1], #4
  403174:	f840 3b04 	str.w	r3, [r0], #4
  403178:	f851 3b04 	ldr.w	r3, [r1], #4
  40317c:	f840 3b04 	str.w	r3, [r0], #4
  403180:	f851 3b04 	ldr.w	r3, [r1], #4
  403184:	f840 3b04 	str.w	r3, [r0], #4
  403188:	3a40      	subs	r2, #64	; 0x40
  40318a:	d2bd      	bcs.n	403108 <memcpy+0x10>
  40318c:	3230      	adds	r2, #48	; 0x30
  40318e:	d311      	bcc.n	4031b4 <memcpy+0xbc>
  403190:	f851 3b04 	ldr.w	r3, [r1], #4
  403194:	f840 3b04 	str.w	r3, [r0], #4
  403198:	f851 3b04 	ldr.w	r3, [r1], #4
  40319c:	f840 3b04 	str.w	r3, [r0], #4
  4031a0:	f851 3b04 	ldr.w	r3, [r1], #4
  4031a4:	f840 3b04 	str.w	r3, [r0], #4
  4031a8:	f851 3b04 	ldr.w	r3, [r1], #4
  4031ac:	f840 3b04 	str.w	r3, [r0], #4
  4031b0:	3a10      	subs	r2, #16
  4031b2:	d2ed      	bcs.n	403190 <memcpy+0x98>
  4031b4:	320c      	adds	r2, #12
  4031b6:	d305      	bcc.n	4031c4 <memcpy+0xcc>
  4031b8:	f851 3b04 	ldr.w	r3, [r1], #4
  4031bc:	f840 3b04 	str.w	r3, [r0], #4
  4031c0:	3a04      	subs	r2, #4
  4031c2:	d2f9      	bcs.n	4031b8 <memcpy+0xc0>
  4031c4:	3204      	adds	r2, #4
  4031c6:	d008      	beq.n	4031da <memcpy+0xe2>
  4031c8:	07d2      	lsls	r2, r2, #31
  4031ca:	bf1c      	itt	ne
  4031cc:	f811 3b01 	ldrbne.w	r3, [r1], #1
  4031d0:	f800 3b01 	strbne.w	r3, [r0], #1
  4031d4:	d301      	bcc.n	4031da <memcpy+0xe2>
  4031d6:	880b      	ldrh	r3, [r1, #0]
  4031d8:	8003      	strh	r3, [r0, #0]
  4031da:	4660      	mov	r0, ip
  4031dc:	4770      	bx	lr
  4031de:	bf00      	nop
  4031e0:	2a08      	cmp	r2, #8
  4031e2:	d313      	bcc.n	40320c <memcpy+0x114>
  4031e4:	078b      	lsls	r3, r1, #30
  4031e6:	d08d      	beq.n	403104 <memcpy+0xc>
  4031e8:	f010 0303 	ands.w	r3, r0, #3
  4031ec:	d08a      	beq.n	403104 <memcpy+0xc>
  4031ee:	f1c3 0304 	rsb	r3, r3, #4
  4031f2:	1ad2      	subs	r2, r2, r3
  4031f4:	07db      	lsls	r3, r3, #31
  4031f6:	bf1c      	itt	ne
  4031f8:	f811 3b01 	ldrbne.w	r3, [r1], #1
  4031fc:	f800 3b01 	strbne.w	r3, [r0], #1
  403200:	d380      	bcc.n	403104 <memcpy+0xc>
  403202:	f831 3b02 	ldrh.w	r3, [r1], #2
  403206:	f820 3b02 	strh.w	r3, [r0], #2
  40320a:	e77b      	b.n	403104 <memcpy+0xc>
  40320c:	3a04      	subs	r2, #4
  40320e:	d3d9      	bcc.n	4031c4 <memcpy+0xcc>
  403210:	3a01      	subs	r2, #1
  403212:	f811 3b01 	ldrb.w	r3, [r1], #1
  403216:	f800 3b01 	strb.w	r3, [r0], #1
  40321a:	d2f9      	bcs.n	403210 <memcpy+0x118>
  40321c:	780b      	ldrb	r3, [r1, #0]
  40321e:	7003      	strb	r3, [r0, #0]
  403220:	784b      	ldrb	r3, [r1, #1]
  403222:	7043      	strb	r3, [r0, #1]
  403224:	788b      	ldrb	r3, [r1, #2]
  403226:	7083      	strb	r3, [r0, #2]
  403228:	4660      	mov	r0, ip
  40322a:	4770      	bx	lr

0040322c <memmove>:
  40322c:	4288      	cmp	r0, r1
  40322e:	b5f0      	push	{r4, r5, r6, r7, lr}
  403230:	d90d      	bls.n	40324e <memmove+0x22>
  403232:	188b      	adds	r3, r1, r2
  403234:	4298      	cmp	r0, r3
  403236:	d20a      	bcs.n	40324e <memmove+0x22>
  403238:	1881      	adds	r1, r0, r2
  40323a:	2a00      	cmp	r2, #0
  40323c:	d053      	beq.n	4032e6 <memmove+0xba>
  40323e:	1a9a      	subs	r2, r3, r2
  403240:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  403244:	4293      	cmp	r3, r2
  403246:	f801 4d01 	strb.w	r4, [r1, #-1]!
  40324a:	d1f9      	bne.n	403240 <memmove+0x14>
  40324c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40324e:	2a0f      	cmp	r2, #15
  403250:	d947      	bls.n	4032e2 <memmove+0xb6>
  403252:	ea40 0301 	orr.w	r3, r0, r1
  403256:	079b      	lsls	r3, r3, #30
  403258:	d146      	bne.n	4032e8 <memmove+0xbc>
  40325a:	f100 0410 	add.w	r4, r0, #16
  40325e:	f101 0310 	add.w	r3, r1, #16
  403262:	4615      	mov	r5, r2
  403264:	f853 6c10 	ldr.w	r6, [r3, #-16]
  403268:	3d10      	subs	r5, #16
  40326a:	3310      	adds	r3, #16
  40326c:	3410      	adds	r4, #16
  40326e:	f844 6c20 	str.w	r6, [r4, #-32]
  403272:	2d0f      	cmp	r5, #15
  403274:	f853 6c1c 	ldr.w	r6, [r3, #-28]
  403278:	f844 6c1c 	str.w	r6, [r4, #-28]
  40327c:	f853 6c18 	ldr.w	r6, [r3, #-24]
  403280:	f844 6c18 	str.w	r6, [r4, #-24]
  403284:	f853 6c14 	ldr.w	r6, [r3, #-20]
  403288:	f844 6c14 	str.w	r6, [r4, #-20]
  40328c:	d8ea      	bhi.n	403264 <memmove+0x38>
  40328e:	f1a2 0310 	sub.w	r3, r2, #16
  403292:	f002 0e0f 	and.w	lr, r2, #15
  403296:	f023 030f 	bic.w	r3, r3, #15
  40329a:	f1be 0f03 	cmp.w	lr, #3
  40329e:	f103 0310 	add.w	r3, r3, #16
  4032a2:	4419      	add	r1, r3
  4032a4:	4403      	add	r3, r0
  4032a6:	d921      	bls.n	4032ec <memmove+0xc0>
  4032a8:	1f1e      	subs	r6, r3, #4
  4032aa:	460d      	mov	r5, r1
  4032ac:	4674      	mov	r4, lr
  4032ae:	3c04      	subs	r4, #4
  4032b0:	f855 7b04 	ldr.w	r7, [r5], #4
  4032b4:	2c03      	cmp	r4, #3
  4032b6:	f846 7f04 	str.w	r7, [r6, #4]!
  4032ba:	d8f8      	bhi.n	4032ae <memmove+0x82>
  4032bc:	f1ae 0404 	sub.w	r4, lr, #4
  4032c0:	f002 0203 	and.w	r2, r2, #3
  4032c4:	f024 0403 	bic.w	r4, r4, #3
  4032c8:	3404      	adds	r4, #4
  4032ca:	4423      	add	r3, r4
  4032cc:	4421      	add	r1, r4
  4032ce:	b152      	cbz	r2, 4032e6 <memmove+0xba>
  4032d0:	3b01      	subs	r3, #1
  4032d2:	440a      	add	r2, r1
  4032d4:	f811 4b01 	ldrb.w	r4, [r1], #1
  4032d8:	4291      	cmp	r1, r2
  4032da:	f803 4f01 	strb.w	r4, [r3, #1]!
  4032de:	d1f9      	bne.n	4032d4 <memmove+0xa8>
  4032e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4032e2:	4603      	mov	r3, r0
  4032e4:	e7f3      	b.n	4032ce <memmove+0xa2>
  4032e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4032e8:	4603      	mov	r3, r0
  4032ea:	e7f1      	b.n	4032d0 <memmove+0xa4>
  4032ec:	4672      	mov	r2, lr
  4032ee:	e7ee      	b.n	4032ce <memmove+0xa2>

004032f0 <__malloc_lock>:
  4032f0:	4770      	bx	lr
  4032f2:	bf00      	nop

004032f4 <__malloc_unlock>:
  4032f4:	4770      	bx	lr
  4032f6:	bf00      	nop

004032f8 <_realloc_r>:
  4032f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4032fc:	4617      	mov	r7, r2
  4032fe:	b083      	sub	sp, #12
  403300:	460e      	mov	r6, r1
  403302:	2900      	cmp	r1, #0
  403304:	f000 80e2 	beq.w	4034cc <_realloc_r+0x1d4>
  403308:	f107 040b 	add.w	r4, r7, #11
  40330c:	4681      	mov	r9, r0
  40330e:	f7ff ffef 	bl	4032f0 <__malloc_lock>
  403312:	f856 3c04 	ldr.w	r3, [r6, #-4]
  403316:	2c16      	cmp	r4, #22
  403318:	f1a6 0808 	sub.w	r8, r6, #8
  40331c:	f023 0503 	bic.w	r5, r3, #3
  403320:	d850      	bhi.n	4033c4 <_realloc_r+0xcc>
  403322:	2210      	movs	r2, #16
  403324:	2100      	movs	r1, #0
  403326:	4614      	mov	r4, r2
  403328:	42bc      	cmp	r4, r7
  40332a:	f0c0 80dc 	bcc.w	4034e6 <_realloc_r+0x1ee>
  40332e:	2900      	cmp	r1, #0
  403330:	f040 80d9 	bne.w	4034e6 <_realloc_r+0x1ee>
  403334:	4295      	cmp	r5, r2
  403336:	da4a      	bge.n	4033ce <_realloc_r+0xd6>
  403338:	f8df b3a8 	ldr.w	fp, [pc, #936]	; 4036e4 <_realloc_r+0x3ec>
  40333c:	eb08 0105 	add.w	r1, r8, r5
  403340:	f8db 0008 	ldr.w	r0, [fp, #8]
  403344:	4288      	cmp	r0, r1
  403346:	f000 80d3 	beq.w	4034f0 <_realloc_r+0x1f8>
  40334a:	6848      	ldr	r0, [r1, #4]
  40334c:	f020 0e01 	bic.w	lr, r0, #1
  403350:	448e      	add	lr, r1
  403352:	f8de e004 	ldr.w	lr, [lr, #4]
  403356:	f01e 0f01 	tst.w	lr, #1
  40335a:	d14e      	bne.n	4033fa <_realloc_r+0x102>
  40335c:	f020 0003 	bic.w	r0, r0, #3
  403360:	4428      	add	r0, r5
  403362:	4290      	cmp	r0, r2
  403364:	f280 80b8 	bge.w	4034d8 <_realloc_r+0x1e0>
  403368:	07db      	lsls	r3, r3, #31
  40336a:	f100 808b 	bmi.w	403484 <_realloc_r+0x18c>
  40336e:	f856 3c08 	ldr.w	r3, [r6, #-8]
  403372:	ebc3 0a08 	rsb	sl, r3, r8
  403376:	f8da 3004 	ldr.w	r3, [sl, #4]
  40337a:	f023 0303 	bic.w	r3, r3, #3
  40337e:	eb00 0e03 	add.w	lr, r0, r3
  403382:	4596      	cmp	lr, r2
  403384:	db43      	blt.n	40340e <_realloc_r+0x116>
  403386:	68cb      	ldr	r3, [r1, #12]
  403388:	4657      	mov	r7, sl
  40338a:	6889      	ldr	r1, [r1, #8]
  40338c:	1f2a      	subs	r2, r5, #4
  40338e:	60cb      	str	r3, [r1, #12]
  403390:	2a24      	cmp	r2, #36	; 0x24
  403392:	6099      	str	r1, [r3, #8]
  403394:	f857 1f08 	ldr.w	r1, [r7, #8]!
  403398:	f8da 300c 	ldr.w	r3, [sl, #12]
  40339c:	60cb      	str	r3, [r1, #12]
  40339e:	6099      	str	r1, [r3, #8]
  4033a0:	f200 813c 	bhi.w	40361c <_realloc_r+0x324>
  4033a4:	2a13      	cmp	r2, #19
  4033a6:	f240 80fa 	bls.w	40359e <_realloc_r+0x2a6>
  4033aa:	6833      	ldr	r3, [r6, #0]
  4033ac:	2a1b      	cmp	r2, #27
  4033ae:	f8ca 3008 	str.w	r3, [sl, #8]
  4033b2:	6873      	ldr	r3, [r6, #4]
  4033b4:	f8ca 300c 	str.w	r3, [sl, #12]
  4033b8:	f200 813b 	bhi.w	403632 <_realloc_r+0x33a>
  4033bc:	3608      	adds	r6, #8
  4033be:	f10a 0310 	add.w	r3, sl, #16
  4033c2:	e0ed      	b.n	4035a0 <_realloc_r+0x2a8>
  4033c4:	f024 0407 	bic.w	r4, r4, #7
  4033c8:	4622      	mov	r2, r4
  4033ca:	0fe1      	lsrs	r1, r4, #31
  4033cc:	e7ac      	b.n	403328 <_realloc_r+0x30>
  4033ce:	4637      	mov	r7, r6
  4033d0:	1b2a      	subs	r2, r5, r4
  4033d2:	f003 0301 	and.w	r3, r3, #1
  4033d6:	2a0f      	cmp	r2, #15
  4033d8:	d841      	bhi.n	40345e <_realloc_r+0x166>
  4033da:	eb08 0205 	add.w	r2, r8, r5
  4033de:	431d      	orrs	r5, r3
  4033e0:	f8c8 5004 	str.w	r5, [r8, #4]
  4033e4:	6853      	ldr	r3, [r2, #4]
  4033e6:	f043 0301 	orr.w	r3, r3, #1
  4033ea:	6053      	str	r3, [r2, #4]
  4033ec:	4648      	mov	r0, r9
  4033ee:	f7ff ff81 	bl	4032f4 <__malloc_unlock>
  4033f2:	4638      	mov	r0, r7
  4033f4:	b003      	add	sp, #12
  4033f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4033fa:	07d9      	lsls	r1, r3, #31
  4033fc:	d442      	bmi.n	403484 <_realloc_r+0x18c>
  4033fe:	f856 3c08 	ldr.w	r3, [r6, #-8]
  403402:	ebc3 0a08 	rsb	sl, r3, r8
  403406:	f8da 3004 	ldr.w	r3, [sl, #4]
  40340a:	f023 0303 	bic.w	r3, r3, #3
  40340e:	442b      	add	r3, r5
  403410:	4293      	cmp	r3, r2
  403412:	db37      	blt.n	403484 <_realloc_r+0x18c>
  403414:	4657      	mov	r7, sl
  403416:	1f2a      	subs	r2, r5, #4
  403418:	f8da 100c 	ldr.w	r1, [sl, #12]
  40341c:	f857 0f08 	ldr.w	r0, [r7, #8]!
  403420:	2a24      	cmp	r2, #36	; 0x24
  403422:	60c1      	str	r1, [r0, #12]
  403424:	6088      	str	r0, [r1, #8]
  403426:	f200 80c6 	bhi.w	4035b6 <_realloc_r+0x2be>
  40342a:	2a13      	cmp	r2, #19
  40342c:	f240 80ff 	bls.w	40362e <_realloc_r+0x336>
  403430:	6831      	ldr	r1, [r6, #0]
  403432:	2a1b      	cmp	r2, #27
  403434:	f8ca 1008 	str.w	r1, [sl, #8]
  403438:	6871      	ldr	r1, [r6, #4]
  40343a:	f8ca 100c 	str.w	r1, [sl, #12]
  40343e:	f200 810d 	bhi.w	40365c <_realloc_r+0x364>
  403442:	3608      	adds	r6, #8
  403444:	f10a 0210 	add.w	r2, sl, #16
  403448:	6831      	ldr	r1, [r6, #0]
  40344a:	461d      	mov	r5, r3
  40344c:	46d0      	mov	r8, sl
  40344e:	6011      	str	r1, [r2, #0]
  403450:	6873      	ldr	r3, [r6, #4]
  403452:	6053      	str	r3, [r2, #4]
  403454:	68b3      	ldr	r3, [r6, #8]
  403456:	6093      	str	r3, [r2, #8]
  403458:	f8da 3004 	ldr.w	r3, [sl, #4]
  40345c:	e7b8      	b.n	4033d0 <_realloc_r+0xd8>
  40345e:	eb08 0504 	add.w	r5, r8, r4
  403462:	f042 0601 	orr.w	r6, r2, #1
  403466:	431c      	orrs	r4, r3
  403468:	4648      	mov	r0, r9
  40346a:	442a      	add	r2, r5
  40346c:	f105 0108 	add.w	r1, r5, #8
  403470:	f8c8 4004 	str.w	r4, [r8, #4]
  403474:	606e      	str	r6, [r5, #4]
  403476:	6853      	ldr	r3, [r2, #4]
  403478:	f043 0301 	orr.w	r3, r3, #1
  40347c:	6053      	str	r3, [r2, #4]
  40347e:	f7ff f83b 	bl	4024f8 <_free_r>
  403482:	e7b3      	b.n	4033ec <_realloc_r+0xf4>
  403484:	4639      	mov	r1, r7
  403486:	4648      	mov	r0, r9
  403488:	f7ff fb42 	bl	402b10 <_malloc_r>
  40348c:	4607      	mov	r7, r0
  40348e:	2800      	cmp	r0, #0
  403490:	d0ac      	beq.n	4033ec <_realloc_r+0xf4>
  403492:	f856 3c04 	ldr.w	r3, [r6, #-4]
  403496:	f1a0 0108 	sub.w	r1, r0, #8
  40349a:	f023 0201 	bic.w	r2, r3, #1
  40349e:	4442      	add	r2, r8
  4034a0:	4291      	cmp	r1, r2
  4034a2:	f000 80b4 	beq.w	40360e <_realloc_r+0x316>
  4034a6:	1f2a      	subs	r2, r5, #4
  4034a8:	2a24      	cmp	r2, #36	; 0x24
  4034aa:	f200 80a1 	bhi.w	4035f0 <_realloc_r+0x2f8>
  4034ae:	2a13      	cmp	r2, #19
  4034b0:	d86a      	bhi.n	403588 <_realloc_r+0x290>
  4034b2:	4603      	mov	r3, r0
  4034b4:	4632      	mov	r2, r6
  4034b6:	6811      	ldr	r1, [r2, #0]
  4034b8:	6019      	str	r1, [r3, #0]
  4034ba:	6851      	ldr	r1, [r2, #4]
  4034bc:	6059      	str	r1, [r3, #4]
  4034be:	6892      	ldr	r2, [r2, #8]
  4034c0:	609a      	str	r2, [r3, #8]
  4034c2:	4631      	mov	r1, r6
  4034c4:	4648      	mov	r0, r9
  4034c6:	f7ff f817 	bl	4024f8 <_free_r>
  4034ca:	e78f      	b.n	4033ec <_realloc_r+0xf4>
  4034cc:	4611      	mov	r1, r2
  4034ce:	b003      	add	sp, #12
  4034d0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4034d4:	f7ff bb1c 	b.w	402b10 <_malloc_r>
  4034d8:	68ca      	ldr	r2, [r1, #12]
  4034da:	4637      	mov	r7, r6
  4034dc:	6889      	ldr	r1, [r1, #8]
  4034de:	4605      	mov	r5, r0
  4034e0:	60ca      	str	r2, [r1, #12]
  4034e2:	6091      	str	r1, [r2, #8]
  4034e4:	e774      	b.n	4033d0 <_realloc_r+0xd8>
  4034e6:	230c      	movs	r3, #12
  4034e8:	2000      	movs	r0, #0
  4034ea:	f8c9 3000 	str.w	r3, [r9]
  4034ee:	e781      	b.n	4033f4 <_realloc_r+0xfc>
  4034f0:	6841      	ldr	r1, [r0, #4]
  4034f2:	f104 0010 	add.w	r0, r4, #16
  4034f6:	f021 0103 	bic.w	r1, r1, #3
  4034fa:	4429      	add	r1, r5
  4034fc:	4281      	cmp	r1, r0
  4034fe:	da63      	bge.n	4035c8 <_realloc_r+0x2d0>
  403500:	07db      	lsls	r3, r3, #31
  403502:	d4bf      	bmi.n	403484 <_realloc_r+0x18c>
  403504:	f856 3c08 	ldr.w	r3, [r6, #-8]
  403508:	ebc3 0a08 	rsb	sl, r3, r8
  40350c:	f8da 3004 	ldr.w	r3, [sl, #4]
  403510:	f023 0303 	bic.w	r3, r3, #3
  403514:	eb01 0c03 	add.w	ip, r1, r3
  403518:	4560      	cmp	r0, ip
  40351a:	f73f af78 	bgt.w	40340e <_realloc_r+0x116>
  40351e:	4657      	mov	r7, sl
  403520:	1f2a      	subs	r2, r5, #4
  403522:	f8da 300c 	ldr.w	r3, [sl, #12]
  403526:	f857 1f08 	ldr.w	r1, [r7, #8]!
  40352a:	2a24      	cmp	r2, #36	; 0x24
  40352c:	60cb      	str	r3, [r1, #12]
  40352e:	6099      	str	r1, [r3, #8]
  403530:	f200 80b8 	bhi.w	4036a4 <_realloc_r+0x3ac>
  403534:	2a13      	cmp	r2, #19
  403536:	f240 80a8 	bls.w	40368a <_realloc_r+0x392>
  40353a:	6833      	ldr	r3, [r6, #0]
  40353c:	2a1b      	cmp	r2, #27
  40353e:	f8ca 3008 	str.w	r3, [sl, #8]
  403542:	6873      	ldr	r3, [r6, #4]
  403544:	f8ca 300c 	str.w	r3, [sl, #12]
  403548:	f200 80b5 	bhi.w	4036b6 <_realloc_r+0x3be>
  40354c:	3608      	adds	r6, #8
  40354e:	f10a 0310 	add.w	r3, sl, #16
  403552:	6832      	ldr	r2, [r6, #0]
  403554:	601a      	str	r2, [r3, #0]
  403556:	6872      	ldr	r2, [r6, #4]
  403558:	605a      	str	r2, [r3, #4]
  40355a:	68b2      	ldr	r2, [r6, #8]
  40355c:	609a      	str	r2, [r3, #8]
  40355e:	ebc4 030c 	rsb	r3, r4, ip
  403562:	eb0a 0204 	add.w	r2, sl, r4
  403566:	4648      	mov	r0, r9
  403568:	f043 0301 	orr.w	r3, r3, #1
  40356c:	f8cb 2008 	str.w	r2, [fp, #8]
  403570:	6053      	str	r3, [r2, #4]
  403572:	f8da 3004 	ldr.w	r3, [sl, #4]
  403576:	f003 0301 	and.w	r3, r3, #1
  40357a:	431c      	orrs	r4, r3
  40357c:	f8ca 4004 	str.w	r4, [sl, #4]
  403580:	f7ff feb8 	bl	4032f4 <__malloc_unlock>
  403584:	4638      	mov	r0, r7
  403586:	e735      	b.n	4033f4 <_realloc_r+0xfc>
  403588:	6833      	ldr	r3, [r6, #0]
  40358a:	2a1b      	cmp	r2, #27
  40358c:	6003      	str	r3, [r0, #0]
  40358e:	6873      	ldr	r3, [r6, #4]
  403590:	6043      	str	r3, [r0, #4]
  403592:	d831      	bhi.n	4035f8 <_realloc_r+0x300>
  403594:	f100 0308 	add.w	r3, r0, #8
  403598:	f106 0208 	add.w	r2, r6, #8
  40359c:	e78b      	b.n	4034b6 <_realloc_r+0x1be>
  40359e:	463b      	mov	r3, r7
  4035a0:	6832      	ldr	r2, [r6, #0]
  4035a2:	4675      	mov	r5, lr
  4035a4:	46d0      	mov	r8, sl
  4035a6:	601a      	str	r2, [r3, #0]
  4035a8:	6872      	ldr	r2, [r6, #4]
  4035aa:	605a      	str	r2, [r3, #4]
  4035ac:	68b2      	ldr	r2, [r6, #8]
  4035ae:	609a      	str	r2, [r3, #8]
  4035b0:	f8da 3004 	ldr.w	r3, [sl, #4]
  4035b4:	e70c      	b.n	4033d0 <_realloc_r+0xd8>
  4035b6:	4631      	mov	r1, r6
  4035b8:	4638      	mov	r0, r7
  4035ba:	461d      	mov	r5, r3
  4035bc:	46d0      	mov	r8, sl
  4035be:	f7ff fe35 	bl	40322c <memmove>
  4035c2:	f8da 3004 	ldr.w	r3, [sl, #4]
  4035c6:	e703      	b.n	4033d0 <_realloc_r+0xd8>
  4035c8:	1b0b      	subs	r3, r1, r4
  4035ca:	eb08 0204 	add.w	r2, r8, r4
  4035ce:	4648      	mov	r0, r9
  4035d0:	f043 0301 	orr.w	r3, r3, #1
  4035d4:	f8cb 2008 	str.w	r2, [fp, #8]
  4035d8:	6053      	str	r3, [r2, #4]
  4035da:	f856 3c04 	ldr.w	r3, [r6, #-4]
  4035de:	f003 0301 	and.w	r3, r3, #1
  4035e2:	431c      	orrs	r4, r3
  4035e4:	f846 4c04 	str.w	r4, [r6, #-4]
  4035e8:	f7ff fe84 	bl	4032f4 <__malloc_unlock>
  4035ec:	4630      	mov	r0, r6
  4035ee:	e701      	b.n	4033f4 <_realloc_r+0xfc>
  4035f0:	4631      	mov	r1, r6
  4035f2:	f7ff fe1b 	bl	40322c <memmove>
  4035f6:	e764      	b.n	4034c2 <_realloc_r+0x1ca>
  4035f8:	68b3      	ldr	r3, [r6, #8]
  4035fa:	2a24      	cmp	r2, #36	; 0x24
  4035fc:	6083      	str	r3, [r0, #8]
  4035fe:	68f3      	ldr	r3, [r6, #12]
  403600:	60c3      	str	r3, [r0, #12]
  403602:	d022      	beq.n	40364a <_realloc_r+0x352>
  403604:	f100 0310 	add.w	r3, r0, #16
  403608:	f106 0210 	add.w	r2, r6, #16
  40360c:	e753      	b.n	4034b6 <_realloc_r+0x1be>
  40360e:	f850 2c04 	ldr.w	r2, [r0, #-4]
  403612:	4637      	mov	r7, r6
  403614:	f022 0203 	bic.w	r2, r2, #3
  403618:	4415      	add	r5, r2
  40361a:	e6d9      	b.n	4033d0 <_realloc_r+0xd8>
  40361c:	4631      	mov	r1, r6
  40361e:	4638      	mov	r0, r7
  403620:	4675      	mov	r5, lr
  403622:	46d0      	mov	r8, sl
  403624:	f7ff fe02 	bl	40322c <memmove>
  403628:	f8da 3004 	ldr.w	r3, [sl, #4]
  40362c:	e6d0      	b.n	4033d0 <_realloc_r+0xd8>
  40362e:	463a      	mov	r2, r7
  403630:	e70a      	b.n	403448 <_realloc_r+0x150>
  403632:	68b3      	ldr	r3, [r6, #8]
  403634:	2a24      	cmp	r2, #36	; 0x24
  403636:	f8ca 3010 	str.w	r3, [sl, #16]
  40363a:	68f3      	ldr	r3, [r6, #12]
  40363c:	f8ca 3014 	str.w	r3, [sl, #20]
  403640:	d018      	beq.n	403674 <_realloc_r+0x37c>
  403642:	3610      	adds	r6, #16
  403644:	f10a 0318 	add.w	r3, sl, #24
  403648:	e7aa      	b.n	4035a0 <_realloc_r+0x2a8>
  40364a:	6931      	ldr	r1, [r6, #16]
  40364c:	f100 0318 	add.w	r3, r0, #24
  403650:	f106 0218 	add.w	r2, r6, #24
  403654:	6101      	str	r1, [r0, #16]
  403656:	6971      	ldr	r1, [r6, #20]
  403658:	6141      	str	r1, [r0, #20]
  40365a:	e72c      	b.n	4034b6 <_realloc_r+0x1be>
  40365c:	68b1      	ldr	r1, [r6, #8]
  40365e:	2a24      	cmp	r2, #36	; 0x24
  403660:	f8ca 1010 	str.w	r1, [sl, #16]
  403664:	68f1      	ldr	r1, [r6, #12]
  403666:	f8ca 1014 	str.w	r1, [sl, #20]
  40366a:	d010      	beq.n	40368e <_realloc_r+0x396>
  40366c:	3610      	adds	r6, #16
  40366e:	f10a 0218 	add.w	r2, sl, #24
  403672:	e6e9      	b.n	403448 <_realloc_r+0x150>
  403674:	6932      	ldr	r2, [r6, #16]
  403676:	f10a 0320 	add.w	r3, sl, #32
  40367a:	3618      	adds	r6, #24
  40367c:	f8ca 2018 	str.w	r2, [sl, #24]
  403680:	f856 2c04 	ldr.w	r2, [r6, #-4]
  403684:	f8ca 201c 	str.w	r2, [sl, #28]
  403688:	e78a      	b.n	4035a0 <_realloc_r+0x2a8>
  40368a:	463b      	mov	r3, r7
  40368c:	e761      	b.n	403552 <_realloc_r+0x25a>
  40368e:	6931      	ldr	r1, [r6, #16]
  403690:	f10a 0220 	add.w	r2, sl, #32
  403694:	3618      	adds	r6, #24
  403696:	f8ca 1018 	str.w	r1, [sl, #24]
  40369a:	f856 1c04 	ldr.w	r1, [r6, #-4]
  40369e:	f8ca 101c 	str.w	r1, [sl, #28]
  4036a2:	e6d1      	b.n	403448 <_realloc_r+0x150>
  4036a4:	4631      	mov	r1, r6
  4036a6:	4638      	mov	r0, r7
  4036a8:	f8cd c004 	str.w	ip, [sp, #4]
  4036ac:	f7ff fdbe 	bl	40322c <memmove>
  4036b0:	f8dd c004 	ldr.w	ip, [sp, #4]
  4036b4:	e753      	b.n	40355e <_realloc_r+0x266>
  4036b6:	68b3      	ldr	r3, [r6, #8]
  4036b8:	2a24      	cmp	r2, #36	; 0x24
  4036ba:	f8ca 3010 	str.w	r3, [sl, #16]
  4036be:	68f3      	ldr	r3, [r6, #12]
  4036c0:	f8ca 3014 	str.w	r3, [sl, #20]
  4036c4:	d003      	beq.n	4036ce <_realloc_r+0x3d6>
  4036c6:	3610      	adds	r6, #16
  4036c8:	f10a 0318 	add.w	r3, sl, #24
  4036cc:	e741      	b.n	403552 <_realloc_r+0x25a>
  4036ce:	6932      	ldr	r2, [r6, #16]
  4036d0:	f10a 0320 	add.w	r3, sl, #32
  4036d4:	3618      	adds	r6, #24
  4036d6:	f8ca 2018 	str.w	r2, [sl, #24]
  4036da:	f856 2c04 	ldr.w	r2, [r6, #-4]
  4036de:	f8ca 201c 	str.w	r2, [sl, #28]
  4036e2:	e736      	b.n	403552 <_realloc_r+0x25a>
  4036e4:	204004ac 	.word	0x204004ac

004036e8 <_sbrk_r>:
  4036e8:	b538      	push	{r3, r4, r5, lr}
  4036ea:	2300      	movs	r3, #0
  4036ec:	4c06      	ldr	r4, [pc, #24]	; (403708 <_sbrk_r+0x20>)
  4036ee:	4605      	mov	r5, r0
  4036f0:	4608      	mov	r0, r1
  4036f2:	6023      	str	r3, [r4, #0]
  4036f4:	f7fd feb0 	bl	401458 <_sbrk>
  4036f8:	1c43      	adds	r3, r0, #1
  4036fa:	d000      	beq.n	4036fe <_sbrk_r+0x16>
  4036fc:	bd38      	pop	{r3, r4, r5, pc}
  4036fe:	6823      	ldr	r3, [r4, #0]
  403700:	2b00      	cmp	r3, #0
  403702:	d0fb      	beq.n	4036fc <_sbrk_r+0x14>
  403704:	602b      	str	r3, [r5, #0]
  403706:	bd38      	pop	{r3, r4, r5, pc}
  403708:	20401174 	.word	0x20401174

0040370c <__sread>:
  40370c:	b510      	push	{r4, lr}
  40370e:	460c      	mov	r4, r1
  403710:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  403714:	f000 f934 	bl	403980 <_read_r>
  403718:	2800      	cmp	r0, #0
  40371a:	db03      	blt.n	403724 <__sread+0x18>
  40371c:	6d23      	ldr	r3, [r4, #80]	; 0x50
  40371e:	4403      	add	r3, r0
  403720:	6523      	str	r3, [r4, #80]	; 0x50
  403722:	bd10      	pop	{r4, pc}
  403724:	89a3      	ldrh	r3, [r4, #12]
  403726:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  40372a:	81a3      	strh	r3, [r4, #12]
  40372c:	bd10      	pop	{r4, pc}
  40372e:	bf00      	nop

00403730 <__swrite>:
  403730:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  403734:	461d      	mov	r5, r3
  403736:	898b      	ldrh	r3, [r1, #12]
  403738:	4616      	mov	r6, r2
  40373a:	460c      	mov	r4, r1
  40373c:	05da      	lsls	r2, r3, #23
  40373e:	4607      	mov	r7, r0
  403740:	d506      	bpl.n	403750 <__swrite+0x20>
  403742:	2302      	movs	r3, #2
  403744:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  403748:	2200      	movs	r2, #0
  40374a:	f000 f905 	bl	403958 <_lseek_r>
  40374e:	89a3      	ldrh	r3, [r4, #12]
  403750:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  403754:	4638      	mov	r0, r7
  403756:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  40375a:	4632      	mov	r2, r6
  40375c:	81a3      	strh	r3, [r4, #12]
  40375e:	462b      	mov	r3, r5
  403760:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  403764:	f000 b816 	b.w	403794 <_write_r>

00403768 <__sseek>:
  403768:	b510      	push	{r4, lr}
  40376a:	460c      	mov	r4, r1
  40376c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  403770:	f000 f8f2 	bl	403958 <_lseek_r>
  403774:	1c42      	adds	r2, r0, #1
  403776:	89a3      	ldrh	r3, [r4, #12]
  403778:	d004      	beq.n	403784 <__sseek+0x1c>
  40377a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
  40377e:	6520      	str	r0, [r4, #80]	; 0x50
  403780:	81a3      	strh	r3, [r4, #12]
  403782:	bd10      	pop	{r4, pc}
  403784:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  403788:	81a3      	strh	r3, [r4, #12]
  40378a:	bd10      	pop	{r4, pc}

0040378c <__sclose>:
  40378c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  403790:	f000 b868 	b.w	403864 <_close_r>

00403794 <_write_r>:
  403794:	b570      	push	{r4, r5, r6, lr}
  403796:	4c08      	ldr	r4, [pc, #32]	; (4037b8 <_write_r+0x24>)
  403798:	2500      	movs	r5, #0
  40379a:	4606      	mov	r6, r0
  40379c:	4608      	mov	r0, r1
  40379e:	4611      	mov	r1, r2
  4037a0:	461a      	mov	r2, r3
  4037a2:	6025      	str	r5, [r4, #0]
  4037a4:	f7fc fedc 	bl	400560 <_write>
  4037a8:	1c43      	adds	r3, r0, #1
  4037aa:	d000      	beq.n	4037ae <_write_r+0x1a>
  4037ac:	bd70      	pop	{r4, r5, r6, pc}
  4037ae:	6823      	ldr	r3, [r4, #0]
  4037b0:	2b00      	cmp	r3, #0
  4037b2:	d0fb      	beq.n	4037ac <_write_r+0x18>
  4037b4:	6033      	str	r3, [r6, #0]
  4037b6:	bd70      	pop	{r4, r5, r6, pc}
  4037b8:	20401174 	.word	0x20401174

004037bc <__register_exitproc>:
  4037bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4037c0:	4c26      	ldr	r4, [pc, #152]	; (40385c <__register_exitproc+0xa0>)
  4037c2:	4606      	mov	r6, r0
  4037c4:	4688      	mov	r8, r1
  4037c6:	4691      	mov	r9, r2
  4037c8:	6825      	ldr	r5, [r4, #0]
  4037ca:	469a      	mov	sl, r3
  4037cc:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
  4037d0:	2c00      	cmp	r4, #0
  4037d2:	d03a      	beq.n	40384a <__register_exitproc+0x8e>
  4037d4:	6860      	ldr	r0, [r4, #4]
  4037d6:	281f      	cmp	r0, #31
  4037d8:	dc19      	bgt.n	40380e <__register_exitproc+0x52>
  4037da:	1c41      	adds	r1, r0, #1
  4037dc:	b186      	cbz	r6, 403800 <__register_exitproc+0x44>
  4037de:	eb04 0580 	add.w	r5, r4, r0, lsl #2
  4037e2:	2201      	movs	r2, #1
  4037e4:	2e02      	cmp	r6, #2
  4037e6:	f8c5 9088 	str.w	r9, [r5, #136]	; 0x88
  4037ea:	fa02 f200 	lsl.w	r2, r2, r0
  4037ee:	f8d4 3188 	ldr.w	r3, [r4, #392]	; 0x188
  4037f2:	ea43 0302 	orr.w	r3, r3, r2
  4037f6:	f8c4 3188 	str.w	r3, [r4, #392]	; 0x188
  4037fa:	f8c5 a108 	str.w	sl, [r5, #264]	; 0x108
  4037fe:	d01e      	beq.n	40383e <__register_exitproc+0x82>
  403800:	1c83      	adds	r3, r0, #2
  403802:	6061      	str	r1, [r4, #4]
  403804:	2000      	movs	r0, #0
  403806:	f844 8023 	str.w	r8, [r4, r3, lsl #2]
  40380a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40380e:	4b14      	ldr	r3, [pc, #80]	; (403860 <__register_exitproc+0xa4>)
  403810:	b303      	cbz	r3, 403854 <__register_exitproc+0x98>
  403812:	f44f 70c8 	mov.w	r0, #400	; 0x190
  403816:	f7ff f973 	bl	402b00 <malloc>
  40381a:	4604      	mov	r4, r0
  40381c:	b1d0      	cbz	r0, 403854 <__register_exitproc+0x98>
  40381e:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
  403822:	2700      	movs	r7, #0
  403824:	2101      	movs	r1, #1
  403826:	6003      	str	r3, [r0, #0]
  403828:	4638      	mov	r0, r7
  40382a:	6067      	str	r7, [r4, #4]
  40382c:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  403830:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
  403834:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
  403838:	2e00      	cmp	r6, #0
  40383a:	d0e1      	beq.n	403800 <__register_exitproc+0x44>
  40383c:	e7cf      	b.n	4037de <__register_exitproc+0x22>
  40383e:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
  403842:	431a      	orrs	r2, r3
  403844:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
  403848:	e7da      	b.n	403800 <__register_exitproc+0x44>
  40384a:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
  40384e:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  403852:	e7bf      	b.n	4037d4 <__register_exitproc+0x18>
  403854:	f04f 30ff 	mov.w	r0, #4294967295
  403858:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40385c:	00403ae8 	.word	0x00403ae8
  403860:	00402b01 	.word	0x00402b01

00403864 <_close_r>:
  403864:	b538      	push	{r3, r4, r5, lr}
  403866:	2300      	movs	r3, #0
  403868:	4c06      	ldr	r4, [pc, #24]	; (403884 <_close_r+0x20>)
  40386a:	4605      	mov	r5, r0
  40386c:	4608      	mov	r0, r1
  40386e:	6023      	str	r3, [r4, #0]
  403870:	f7fd fe1e 	bl	4014b0 <_close>
  403874:	1c43      	adds	r3, r0, #1
  403876:	d000      	beq.n	40387a <_close_r+0x16>
  403878:	bd38      	pop	{r3, r4, r5, pc}
  40387a:	6823      	ldr	r3, [r4, #0]
  40387c:	2b00      	cmp	r3, #0
  40387e:	d0fb      	beq.n	403878 <_close_r+0x14>
  403880:	602b      	str	r3, [r5, #0]
  403882:	bd38      	pop	{r3, r4, r5, pc}
  403884:	20401174 	.word	0x20401174

00403888 <_fclose_r>:
  403888:	2900      	cmp	r1, #0
  40388a:	d03d      	beq.n	403908 <_fclose_r+0x80>
  40388c:	b570      	push	{r4, r5, r6, lr}
  40388e:	4605      	mov	r5, r0
  403890:	460c      	mov	r4, r1
  403892:	b108      	cbz	r0, 403898 <_fclose_r+0x10>
  403894:	6b83      	ldr	r3, [r0, #56]	; 0x38
  403896:	b37b      	cbz	r3, 4038f8 <_fclose_r+0x70>
  403898:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40389c:	b90b      	cbnz	r3, 4038a2 <_fclose_r+0x1a>
  40389e:	2000      	movs	r0, #0
  4038a0:	bd70      	pop	{r4, r5, r6, pc}
  4038a2:	4628      	mov	r0, r5
  4038a4:	4621      	mov	r1, r4
  4038a6:	f7fe fc7b 	bl	4021a0 <__sflush_r>
  4038aa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  4038ac:	4606      	mov	r6, r0
  4038ae:	b133      	cbz	r3, 4038be <_fclose_r+0x36>
  4038b0:	4628      	mov	r0, r5
  4038b2:	69e1      	ldr	r1, [r4, #28]
  4038b4:	4798      	blx	r3
  4038b6:	2800      	cmp	r0, #0
  4038b8:	bfb8      	it	lt
  4038ba:	f04f 36ff 	movlt.w	r6, #4294967295
  4038be:	89a3      	ldrh	r3, [r4, #12]
  4038c0:	061b      	lsls	r3, r3, #24
  4038c2:	d41c      	bmi.n	4038fe <_fclose_r+0x76>
  4038c4:	6b21      	ldr	r1, [r4, #48]	; 0x30
  4038c6:	b141      	cbz	r1, 4038da <_fclose_r+0x52>
  4038c8:	f104 0340 	add.w	r3, r4, #64	; 0x40
  4038cc:	4299      	cmp	r1, r3
  4038ce:	d002      	beq.n	4038d6 <_fclose_r+0x4e>
  4038d0:	4628      	mov	r0, r5
  4038d2:	f7fe fe11 	bl	4024f8 <_free_r>
  4038d6:	2300      	movs	r3, #0
  4038d8:	6323      	str	r3, [r4, #48]	; 0x30
  4038da:	6c61      	ldr	r1, [r4, #68]	; 0x44
  4038dc:	b121      	cbz	r1, 4038e8 <_fclose_r+0x60>
  4038de:	4628      	mov	r0, r5
  4038e0:	f7fe fe0a 	bl	4024f8 <_free_r>
  4038e4:	2300      	movs	r3, #0
  4038e6:	6463      	str	r3, [r4, #68]	; 0x44
  4038e8:	f7fe fd9e 	bl	402428 <__sfp_lock_acquire>
  4038ec:	2300      	movs	r3, #0
  4038ee:	81a3      	strh	r3, [r4, #12]
  4038f0:	f7fe fd9c 	bl	40242c <__sfp_lock_release>
  4038f4:	4630      	mov	r0, r6
  4038f6:	bd70      	pop	{r4, r5, r6, pc}
  4038f8:	f7fe fd90 	bl	40241c <__sinit>
  4038fc:	e7cc      	b.n	403898 <_fclose_r+0x10>
  4038fe:	4628      	mov	r0, r5
  403900:	6921      	ldr	r1, [r4, #16]
  403902:	f7fe fdf9 	bl	4024f8 <_free_r>
  403906:	e7dd      	b.n	4038c4 <_fclose_r+0x3c>
  403908:	2000      	movs	r0, #0
  40390a:	4770      	bx	lr

0040390c <_fstat_r>:
  40390c:	b538      	push	{r3, r4, r5, lr}
  40390e:	2300      	movs	r3, #0
  403910:	4c07      	ldr	r4, [pc, #28]	; (403930 <_fstat_r+0x24>)
  403912:	4605      	mov	r5, r0
  403914:	4608      	mov	r0, r1
  403916:	4611      	mov	r1, r2
  403918:	6023      	str	r3, [r4, #0]
  40391a:	f7fd fdd5 	bl	4014c8 <_fstat>
  40391e:	1c43      	adds	r3, r0, #1
  403920:	d000      	beq.n	403924 <_fstat_r+0x18>
  403922:	bd38      	pop	{r3, r4, r5, pc}
  403924:	6823      	ldr	r3, [r4, #0]
  403926:	2b00      	cmp	r3, #0
  403928:	d0fb      	beq.n	403922 <_fstat_r+0x16>
  40392a:	602b      	str	r3, [r5, #0]
  40392c:	bd38      	pop	{r3, r4, r5, pc}
  40392e:	bf00      	nop
  403930:	20401174 	.word	0x20401174

00403934 <_isatty_r>:
  403934:	b538      	push	{r3, r4, r5, lr}
  403936:	2300      	movs	r3, #0
  403938:	4c06      	ldr	r4, [pc, #24]	; (403954 <_isatty_r+0x20>)
  40393a:	4605      	mov	r5, r0
  40393c:	4608      	mov	r0, r1
  40393e:	6023      	str	r3, [r4, #0]
  403940:	f7fd fdd2 	bl	4014e8 <_isatty>
  403944:	1c43      	adds	r3, r0, #1
  403946:	d000      	beq.n	40394a <_isatty_r+0x16>
  403948:	bd38      	pop	{r3, r4, r5, pc}
  40394a:	6823      	ldr	r3, [r4, #0]
  40394c:	2b00      	cmp	r3, #0
  40394e:	d0fb      	beq.n	403948 <_isatty_r+0x14>
  403950:	602b      	str	r3, [r5, #0]
  403952:	bd38      	pop	{r3, r4, r5, pc}
  403954:	20401174 	.word	0x20401174

00403958 <_lseek_r>:
  403958:	b570      	push	{r4, r5, r6, lr}
  40395a:	4c08      	ldr	r4, [pc, #32]	; (40397c <_lseek_r+0x24>)
  40395c:	2500      	movs	r5, #0
  40395e:	4606      	mov	r6, r0
  403960:	4608      	mov	r0, r1
  403962:	4611      	mov	r1, r2
  403964:	461a      	mov	r2, r3
  403966:	6025      	str	r5, [r4, #0]
  403968:	f7fd fdca 	bl	401500 <_lseek>
  40396c:	1c43      	adds	r3, r0, #1
  40396e:	d000      	beq.n	403972 <_lseek_r+0x1a>
  403970:	bd70      	pop	{r4, r5, r6, pc}
  403972:	6823      	ldr	r3, [r4, #0]
  403974:	2b00      	cmp	r3, #0
  403976:	d0fb      	beq.n	403970 <_lseek_r+0x18>
  403978:	6033      	str	r3, [r6, #0]
  40397a:	bd70      	pop	{r4, r5, r6, pc}
  40397c:	20401174 	.word	0x20401174

00403980 <_read_r>:
  403980:	b570      	push	{r4, r5, r6, lr}
  403982:	4c08      	ldr	r4, [pc, #32]	; (4039a4 <_read_r+0x24>)
  403984:	2500      	movs	r5, #0
  403986:	4606      	mov	r6, r0
  403988:	4608      	mov	r0, r1
  40398a:	4611      	mov	r1, r2
  40398c:	461a      	mov	r2, r3
  40398e:	6025      	str	r5, [r4, #0]
  403990:	f7fc fdba 	bl	400508 <_read>
  403994:	1c43      	adds	r3, r0, #1
  403996:	d000      	beq.n	40399a <_read_r+0x1a>
  403998:	bd70      	pop	{r4, r5, r6, pc}
  40399a:	6823      	ldr	r3, [r4, #0]
  40399c:	2b00      	cmp	r3, #0
  40399e:	d0fb      	beq.n	403998 <_read_r+0x18>
  4039a0:	6033      	str	r3, [r6, #0]
  4039a2:	bd70      	pop	{r4, r5, r6, pc}
  4039a4:	20401174 	.word	0x20401174
  4039a8:	0003e800 	.word	0x0003e800
  4039ac:	000000c0 	.word	0x000000c0
  4039b0:	00000800 	.word	0x00000800
	...
  4039c0:	202d462d 	.word	0x202d462d
  4039c4:	74737953 	.word	0x74737953
  4039c8:	206b6369 	.word	0x206b6369
  4039cc:	666e6f63 	.word	0x666e6f63
  4039d0:	72756769 	.word	0x72756769
  4039d4:	6f697461 	.word	0x6f697461
  4039d8:	7265206e 	.word	0x7265206e
  4039dc:	0d726f72 	.word	0x0d726f72
  4039e0:	00000000 	.word	0x00000000
  4039e4:	00000960 	.word	0x00000960
  4039e8:	000000c0 	.word	0x000000c0
  4039ec:	00000800 	.word	0x00000800
  4039f0:	00000000 	.word	0x00000000
  4039f4:	00006325 	.word	0x00006325
  4039f8:	55202d2d 	.word	0x55202d2d
  4039fc:	54524153 	.word	0x54524153
  403a00:	34535220 	.word	0x34535220
  403a04:	45203538 	.word	0x45203538
  403a08:	706d6178 	.word	0x706d6178
  403a0c:	2d20656c 	.word	0x2d20656c
  403a10:	2d0a0d2d 	.word	0x2d0a0d2d
  403a14:	4153202d 	.word	0x4153202d
  403a18:	3037454d 	.word	0x3037454d
  403a1c:	4c50582d 	.word	0x4c50582d
  403a20:	2d2d2044 	.word	0x2d2d2044
  403a24:	2d2d0a0d 	.word	0x2d2d0a0d
  403a28:	6d6f4320 	.word	0x6d6f4320
  403a2c:	656c6970 	.word	0x656c6970
  403a30:	46203a64 	.word	0x46203a64
  403a34:	20206265 	.word	0x20206265
  403a38:	30322036 	.word	0x30322036
  403a3c:	31203631 	.word	0x31203631
  403a40:	32333a38 	.word	0x32333a38
  403a44:	2031333a 	.word	0x2031333a
  403a48:	000d2d2d 	.word	0x000d2d2d
  403a4c:	202d492d 	.word	0x202d492d
  403a50:	72617453 	.word	0x72617453
  403a54:	72742074 	.word	0x72742074
  403a58:	6d736e61 	.word	0x6d736e61
  403a5c:	69747469 	.word	0x69747469
  403a60:	0d21676e 	.word	0x0d21676e
  403a64:	00000000 	.word	0x00000000
  403a68:	202d492d 	.word	0x202d492d
  403a6c:	65636552 	.word	0x65636552
  403a70:	6e697669 	.word	0x6e697669
  403a74:	79732067 	.word	0x79732067
  403a78:	6320636e 	.word	0x6320636e
  403a7c:	61726168 	.word	0x61726168
  403a80:	72657463 	.word	0x72657463
  403a84:	00000d2e 	.word	0x00000d2e
  403a88:	202d492d 	.word	0x202d492d
  403a8c:	72617453 	.word	0x72617453
  403a90:	65722074 	.word	0x65722074
  403a94:	76696563 	.word	0x76696563
  403a98:	21676e69 	.word	0x21676e69
  403a9c:	0000000d 	.word	0x0000000d
  403aa0:	202d452d 	.word	0x202d452d
  403aa4:	6f727245 	.word	0x6f727245
  403aa8:	636f2072 	.word	0x636f2072
  403aac:	72727563 	.word	0x72727563
  403ab0:	77206465 	.word	0x77206465
  403ab4:	656c6968 	.word	0x656c6968
  403ab8:	63657220 	.word	0x63657220
  403abc:	69766965 	.word	0x69766965
  403ac0:	0d21676e 	.word	0x0d21676e
  403ac4:	00000000 	.word	0x00000000
  403ac8:	202d492d 	.word	0x202d492d
  403acc:	65636552 	.word	0x65636552
  403ad0:	64657669 	.word	0x64657669
  403ad4:	63757320 	.word	0x63757320
  403ad8:	73736563 	.word	0x73736563
  403adc:	6c6c7566 	.word	0x6c6c7566
  403ae0:	000d2179 	.word	0x000d2179
  403ae4:	00000043 	.word	0x00000043

00403ae8 <_global_impure_ptr>:
  403ae8:	20400080 0000000a                       ..@ ....

00403af0 <_init>:
  403af0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  403af2:	bf00      	nop
  403af4:	bcf8      	pop	{r3, r4, r5, r6, r7}
  403af6:	bc08      	pop	{r3}
  403af8:	469e      	mov	lr, r3
  403afa:	4770      	bx	lr

00403afc <__init_array_start>:
  403afc:	00402181 	.word	0x00402181

00403b00 <__frame_dummy_init_array_entry>:
  403b00:	00400165                                e.@.

00403b04 <_fini>:
  403b04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  403b06:	bf00      	nop
  403b08:	bcf8      	pop	{r3, r4, r5, r6, r7}
  403b0a:	bc08      	pop	{r3}
  403b0c:	469e      	mov	lr, r3
  403b0e:	4770      	bx	lr

00403b10 <__fini_array_start>:
  403b10:	00400141 	.word	0x00400141
